
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	f0 43 03 20 39 13 01 00 43 bd 02 00 0d 13 01 00     .C. 9...C.......
    8010:	0d 13 01 00 0d 13 01 00 0d 13 01 00 0d 13 01 00     ................
	...
    802c:	b5 0b 01 00 0d 13 01 00 00 00 00 00 55 0b 01 00     ............U...
    803c:	0d 13 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8050:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8060:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8070:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8080:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8090:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    80a0:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    80b0:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    80c0:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    80d0:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    80e0:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    80f0:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8100:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8110:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8120:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8130:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8140:	3d 0c 01 00 3d 0c 01 00 3d 0c 01 00 3d 0c 01 00     =...=...=...=...
    8150:	3d 0c 01 00                                         =...

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b857 	b.w	8f20 <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f928 	bl	90d6 <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f91b 	bl	90d6 <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f90a 	bl	90d6 <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f8fc 	bl	90d6 <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b80c 	b.w	8f20 <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f8e1 	bl	90d6 <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_idiv0>:
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop

00008f24 <__gedf2>:
    8f24:	f04f 3cff 	mov.w	ip, #4294967295
    8f28:	e006      	b.n	8f38 <__cmpdf2+0x4>
    8f2a:	bf00      	nop

00008f2c <__ledf2>:
    8f2c:	f04f 0c01 	mov.w	ip, #1
    8f30:	e002      	b.n	8f38 <__cmpdf2+0x4>
    8f32:	bf00      	nop

00008f34 <__cmpdf2>:
    8f34:	f04f 0c01 	mov.w	ip, #1
    8f38:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f48:	bf18      	it	ne
    8f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f4e:	d01b      	beq.n	8f88 <__cmpdf2+0x54>
    8f50:	b001      	add	sp, #4
    8f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f56:	bf0c      	ite	eq
    8f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f5c:	ea91 0f03 	teqne	r1, r3
    8f60:	bf02      	ittt	eq
    8f62:	ea90 0f02 	teqeq	r0, r2
    8f66:	2000      	moveq	r0, #0
    8f68:	4770      	bxeq	lr
    8f6a:	f110 0f00 	cmn.w	r0, #0
    8f6e:	ea91 0f03 	teq	r1, r3
    8f72:	bf58      	it	pl
    8f74:	4299      	cmppl	r1, r3
    8f76:	bf08      	it	eq
    8f78:	4290      	cmpeq	r0, r2
    8f7a:	bf2c      	ite	cs
    8f7c:	17d8      	asrcs	r0, r3, #31
    8f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8f82:	f040 0001 	orr.w	r0, r0, #1
    8f86:	4770      	bx	lr
    8f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f90:	d102      	bne.n	8f98 <__cmpdf2+0x64>
    8f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f96:	d107      	bne.n	8fa8 <__cmpdf2+0x74>
    8f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fa0:	d1d6      	bne.n	8f50 <__cmpdf2+0x1c>
    8fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fa6:	d0d3      	beq.n	8f50 <__cmpdf2+0x1c>
    8fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__aeabi_cdrcmple>:
    8fb0:	4684      	mov	ip, r0
    8fb2:	4610      	mov	r0, r2
    8fb4:	4662      	mov	r2, ip
    8fb6:	468c      	mov	ip, r1
    8fb8:	4619      	mov	r1, r3
    8fba:	4663      	mov	r3, ip
    8fbc:	e000      	b.n	8fc0 <__aeabi_cdcmpeq>
    8fbe:	bf00      	nop

00008fc0 <__aeabi_cdcmpeq>:
    8fc0:	b501      	push	{r0, lr}
    8fc2:	f7ff ffb7 	bl	8f34 <__cmpdf2>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	bf48      	it	mi
    8fca:	f110 0f00 	cmnmi.w	r0, #0
    8fce:	bd01      	pop	{r0, pc}

00008fd0 <__aeabi_dcmpeq>:
    8fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fd4:	f7ff fff4 	bl	8fc0 <__aeabi_cdcmpeq>
    8fd8:	bf0c      	ite	eq
    8fda:	2001      	moveq	r0, #1
    8fdc:	2000      	movne	r0, #0
    8fde:	f85d fb08 	ldr.w	pc, [sp], #8
    8fe2:	bf00      	nop

00008fe4 <__aeabi_dcmplt>:
    8fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fe8:	f7ff ffea 	bl	8fc0 <__aeabi_cdcmpeq>
    8fec:	bf34      	ite	cc
    8fee:	2001      	movcc	r0, #1
    8ff0:	2000      	movcs	r0, #0
    8ff2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ff6:	bf00      	nop

00008ff8 <__aeabi_dcmple>:
    8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ffc:	f7ff ffe0 	bl	8fc0 <__aeabi_cdcmpeq>
    9000:	bf94      	ite	ls
    9002:	2001      	movls	r0, #1
    9004:	2000      	movhi	r0, #0
    9006:	f85d fb08 	ldr.w	pc, [sp], #8
    900a:	bf00      	nop

0000900c <__aeabi_dcmpge>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff ffce 	bl	8fb0 <__aeabi_cdrcmple>
    9014:	bf94      	ite	ls
    9016:	2001      	movls	r0, #1
    9018:	2000      	movhi	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmpgt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffc4 	bl	8fb0 <__aeabi_cdrcmple>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmpun>:
    9034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    903c:	d102      	bne.n	9044 <__aeabi_dcmpun+0x10>
    903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9042:	d10a      	bne.n	905a <__aeabi_dcmpun+0x26>
    9044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    904c:	d102      	bne.n	9054 <__aeabi_dcmpun+0x20>
    904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9052:	d102      	bne.n	905a <__aeabi_dcmpun+0x26>
    9054:	f04f 0000 	mov.w	r0, #0
    9058:	4770      	bx	lr
    905a:	f04f 0001 	mov.w	r0, #1
    905e:	4770      	bx	lr

00009060 <__aeabi_d2iz>:
    9060:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9068:	d215      	bcs.n	9096 <__aeabi_d2iz+0x36>
    906a:	d511      	bpl.n	9090 <__aeabi_d2iz+0x30>
    906c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9074:	d912      	bls.n	909c <__aeabi_d2iz+0x3c>
    9076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    907a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    907e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9086:	fa23 f002 	lsr.w	r0, r3, r2
    908a:	bf18      	it	ne
    908c:	4240      	negne	r0, r0
    908e:	4770      	bx	lr
    9090:	f04f 0000 	mov.w	r0, #0
    9094:	4770      	bx	lr
    9096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    909a:	d105      	bne.n	90a8 <__aeabi_d2iz+0x48>
    909c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    90a0:	bf08      	it	eq
    90a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    90a6:	4770      	bx	lr
    90a8:	f04f 0000 	mov.w	r0, #0
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop

000090b0 <__popcountsi2>:
    90b0:	0843      	lsrs	r3, r0, #1
    90b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    90b6:	1ac0      	subs	r0, r0, r3
    90b8:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
    90bc:	0880      	lsrs	r0, r0, #2
    90be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    90c2:	4418      	add	r0, r3
    90c4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    90c8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    90cc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    90d0:	4358      	muls	r0, r3
    90d2:	0e00      	lsrs	r0, r0, #24
    90d4:	4770      	bx	lr

000090d6 <__udivmoddi4>:
    90d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90da:	4686      	mov	lr, r0
    90dc:	468c      	mov	ip, r1
    90de:	4608      	mov	r0, r1
    90e0:	9e08      	ldr	r6, [sp, #32]
    90e2:	4615      	mov	r5, r2
    90e4:	4674      	mov	r4, lr
    90e6:	4619      	mov	r1, r3
    90e8:	2b00      	cmp	r3, #0
    90ea:	f040 80c1 	bne.w	9270 <__udivmoddi4+0x19a>
    90ee:	4285      	cmp	r5, r0
    90f0:	fab2 f282 	clz	r2, r2
    90f4:	d945      	bls.n	9182 <__udivmoddi4+0xac>
    90f6:	b14a      	cbz	r2, 910c <__udivmoddi4+0x36>
    90f8:	f1c2 0320 	rsb	r3, r2, #32
    90fc:	fa00 fc02 	lsl.w	ip, r0, r2
    9100:	4095      	lsls	r5, r2
    9102:	4094      	lsls	r4, r2
    9104:	fa2e f303 	lsr.w	r3, lr, r3
    9108:	ea43 0c0c 	orr.w	ip, r3, ip
    910c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9110:	b2a8      	uxth	r0, r5
    9112:	0c23      	lsrs	r3, r4, #16
    9114:	fbbc f8fe 	udiv	r8, ip, lr
    9118:	fb0e cc18 	mls	ip, lr, r8, ip
    911c:	fb08 f900 	mul.w	r9, r8, r0
    9120:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    9124:	4599      	cmp	r9, r3
    9126:	d928      	bls.n	917a <__udivmoddi4+0xa4>
    9128:	18eb      	adds	r3, r5, r3
    912a:	f108 37ff 	add.w	r7, r8, #4294967295
    912e:	d204      	bcs.n	913a <__udivmoddi4+0x64>
    9130:	4599      	cmp	r9, r3
    9132:	d902      	bls.n	913a <__udivmoddi4+0x64>
    9134:	f1a8 0702 	sub.w	r7, r8, #2
    9138:	442b      	add	r3, r5
    913a:	eba3 0309 	sub.w	r3, r3, r9
    913e:	b2a4      	uxth	r4, r4
    9140:	fbb3 fcfe 	udiv	ip, r3, lr
    9144:	fb0e 331c 	mls	r3, lr, ip, r3
    9148:	fb0c f000 	mul.w	r0, ip, r0
    914c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9150:	42a0      	cmp	r0, r4
    9152:	d914      	bls.n	917e <__udivmoddi4+0xa8>
    9154:	192c      	adds	r4, r5, r4
    9156:	f10c 33ff 	add.w	r3, ip, #4294967295
    915a:	d204      	bcs.n	9166 <__udivmoddi4+0x90>
    915c:	42a0      	cmp	r0, r4
    915e:	d902      	bls.n	9166 <__udivmoddi4+0x90>
    9160:	f1ac 0302 	sub.w	r3, ip, #2
    9164:	442c      	add	r4, r5
    9166:	1a24      	subs	r4, r4, r0
    9168:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    916c:	b11e      	cbz	r6, 9176 <__udivmoddi4+0xa0>
    916e:	40d4      	lsrs	r4, r2
    9170:	2300      	movs	r3, #0
    9172:	6034      	str	r4, [r6, #0]
    9174:	6073      	str	r3, [r6, #4]
    9176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    917a:	4647      	mov	r7, r8
    917c:	e7dd      	b.n	913a <__udivmoddi4+0x64>
    917e:	4663      	mov	r3, ip
    9180:	e7f1      	b.n	9166 <__udivmoddi4+0x90>
    9182:	bb92      	cbnz	r2, 91ea <__udivmoddi4+0x114>
    9184:	1b43      	subs	r3, r0, r5
    9186:	2101      	movs	r1, #1
    9188:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    918c:	b2af      	uxth	r7, r5
    918e:	0c20      	lsrs	r0, r4, #16
    9190:	fbb3 fcfe 	udiv	ip, r3, lr
    9194:	fb0e 331c 	mls	r3, lr, ip, r3
    9198:	fb0c f807 	mul.w	r8, ip, r7
    919c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    91a0:	4598      	cmp	r8, r3
    91a2:	d961      	bls.n	9268 <__udivmoddi4+0x192>
    91a4:	18eb      	adds	r3, r5, r3
    91a6:	f10c 30ff 	add.w	r0, ip, #4294967295
    91aa:	d204      	bcs.n	91b6 <__udivmoddi4+0xe0>
    91ac:	4598      	cmp	r8, r3
    91ae:	d902      	bls.n	91b6 <__udivmoddi4+0xe0>
    91b0:	f1ac 0002 	sub.w	r0, ip, #2
    91b4:	442b      	add	r3, r5
    91b6:	eba3 0308 	sub.w	r3, r3, r8
    91ba:	b2a4      	uxth	r4, r4
    91bc:	fbb3 fcfe 	udiv	ip, r3, lr
    91c0:	fb0e 331c 	mls	r3, lr, ip, r3
    91c4:	fb0c f707 	mul.w	r7, ip, r7
    91c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91cc:	42a7      	cmp	r7, r4
    91ce:	d94d      	bls.n	926c <__udivmoddi4+0x196>
    91d0:	192c      	adds	r4, r5, r4
    91d2:	f10c 33ff 	add.w	r3, ip, #4294967295
    91d6:	d204      	bcs.n	91e2 <__udivmoddi4+0x10c>
    91d8:	42a7      	cmp	r7, r4
    91da:	d902      	bls.n	91e2 <__udivmoddi4+0x10c>
    91dc:	f1ac 0302 	sub.w	r3, ip, #2
    91e0:	442c      	add	r4, r5
    91e2:	1be4      	subs	r4, r4, r7
    91e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91e8:	e7c0      	b.n	916c <__udivmoddi4+0x96>
    91ea:	f1c2 0320 	rsb	r3, r2, #32
    91ee:	4095      	lsls	r5, r2
    91f0:	4094      	lsls	r4, r2
    91f2:	fa20 f103 	lsr.w	r1, r0, r3
    91f6:	fa2e f303 	lsr.w	r3, lr, r3
    91fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91fe:	4090      	lsls	r0, r2
    9200:	b2af      	uxth	r7, r5
    9202:	4303      	orrs	r3, r0
    9204:	fbb1 fcfe 	udiv	ip, r1, lr
    9208:	fb0e 101c 	mls	r0, lr, ip, r1
    920c:	0c19      	lsrs	r1, r3, #16
    920e:	fb0c f807 	mul.w	r8, ip, r7
    9212:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9216:	4588      	cmp	r8, r1
    9218:	d922      	bls.n	9260 <__udivmoddi4+0x18a>
    921a:	1869      	adds	r1, r5, r1
    921c:	f10c 30ff 	add.w	r0, ip, #4294967295
    9220:	d204      	bcs.n	922c <__udivmoddi4+0x156>
    9222:	4588      	cmp	r8, r1
    9224:	d902      	bls.n	922c <__udivmoddi4+0x156>
    9226:	f1ac 0002 	sub.w	r0, ip, #2
    922a:	4429      	add	r1, r5
    922c:	eba1 0108 	sub.w	r1, r1, r8
    9230:	b29b      	uxth	r3, r3
    9232:	fbb1 fcfe 	udiv	ip, r1, lr
    9236:	fb0e 111c 	mls	r1, lr, ip, r1
    923a:	fb0c f707 	mul.w	r7, ip, r7
    923e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    9242:	429f      	cmp	r7, r3
    9244:	d90e      	bls.n	9264 <__udivmoddi4+0x18e>
    9246:	18eb      	adds	r3, r5, r3
    9248:	f10c 31ff 	add.w	r1, ip, #4294967295
    924c:	d204      	bcs.n	9258 <__udivmoddi4+0x182>
    924e:	429f      	cmp	r7, r3
    9250:	d902      	bls.n	9258 <__udivmoddi4+0x182>
    9252:	f1ac 0102 	sub.w	r1, ip, #2
    9256:	442b      	add	r3, r5
    9258:	1bdb      	subs	r3, r3, r7
    925a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    925e:	e793      	b.n	9188 <__udivmoddi4+0xb2>
    9260:	4660      	mov	r0, ip
    9262:	e7e3      	b.n	922c <__udivmoddi4+0x156>
    9264:	4661      	mov	r1, ip
    9266:	e7f7      	b.n	9258 <__udivmoddi4+0x182>
    9268:	4660      	mov	r0, ip
    926a:	e7a4      	b.n	91b6 <__udivmoddi4+0xe0>
    926c:	4663      	mov	r3, ip
    926e:	e7b8      	b.n	91e2 <__udivmoddi4+0x10c>
    9270:	4283      	cmp	r3, r0
    9272:	d906      	bls.n	9282 <__udivmoddi4+0x1ac>
    9274:	b916      	cbnz	r6, 927c <__udivmoddi4+0x1a6>
    9276:	2100      	movs	r1, #0
    9278:	4608      	mov	r0, r1
    927a:	e77c      	b.n	9176 <__udivmoddi4+0xa0>
    927c:	e9c6 e000 	strd	lr, r0, [r6]
    9280:	e7f9      	b.n	9276 <__udivmoddi4+0x1a0>
    9282:	fab3 f783 	clz	r7, r3
    9286:	b98f      	cbnz	r7, 92ac <__udivmoddi4+0x1d6>
    9288:	4283      	cmp	r3, r0
    928a:	d301      	bcc.n	9290 <__udivmoddi4+0x1ba>
    928c:	4572      	cmp	r2, lr
    928e:	d808      	bhi.n	92a2 <__udivmoddi4+0x1cc>
    9290:	ebbe 0402 	subs.w	r4, lr, r2
    9294:	eb60 0303 	sbc.w	r3, r0, r3
    9298:	2001      	movs	r0, #1
    929a:	469c      	mov	ip, r3
    929c:	b91e      	cbnz	r6, 92a6 <__udivmoddi4+0x1d0>
    929e:	2100      	movs	r1, #0
    92a0:	e769      	b.n	9176 <__udivmoddi4+0xa0>
    92a2:	4638      	mov	r0, r7
    92a4:	e7fa      	b.n	929c <__udivmoddi4+0x1c6>
    92a6:	e9c6 4c00 	strd	r4, ip, [r6]
    92aa:	e7f8      	b.n	929e <__udivmoddi4+0x1c8>
    92ac:	f1c7 0c20 	rsb	ip, r7, #32
    92b0:	40bb      	lsls	r3, r7
    92b2:	fa0e f507 	lsl.w	r5, lr, r7
    92b6:	fa22 f40c 	lsr.w	r4, r2, ip
    92ba:	fa2e f10c 	lsr.w	r1, lr, ip
    92be:	40ba      	lsls	r2, r7
    92c0:	431c      	orrs	r4, r3
    92c2:	fa20 f30c 	lsr.w	r3, r0, ip
    92c6:	40b8      	lsls	r0, r7
    92c8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    92cc:	4301      	orrs	r1, r0
    92ce:	fa1f fe84 	uxth.w	lr, r4
    92d2:	fbb3 f8f9 	udiv	r8, r3, r9
    92d6:	fb09 3018 	mls	r0, r9, r8, r3
    92da:	0c0b      	lsrs	r3, r1, #16
    92dc:	fb08 fa0e 	mul.w	sl, r8, lr
    92e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92e4:	459a      	cmp	sl, r3
    92e6:	d940      	bls.n	936a <__udivmoddi4+0x294>
    92e8:	18e3      	adds	r3, r4, r3
    92ea:	f108 30ff 	add.w	r0, r8, #4294967295
    92ee:	d204      	bcs.n	92fa <__udivmoddi4+0x224>
    92f0:	459a      	cmp	sl, r3
    92f2:	d902      	bls.n	92fa <__udivmoddi4+0x224>
    92f4:	f1a8 0002 	sub.w	r0, r8, #2
    92f8:	4423      	add	r3, r4
    92fa:	eba3 030a 	sub.w	r3, r3, sl
    92fe:	b289      	uxth	r1, r1
    9300:	fbb3 f8f9 	udiv	r8, r3, r9
    9304:	fb09 3318 	mls	r3, r9, r8, r3
    9308:	fb08 fe0e 	mul.w	lr, r8, lr
    930c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9310:	458e      	cmp	lr, r1
    9312:	d92c      	bls.n	936e <__udivmoddi4+0x298>
    9314:	1861      	adds	r1, r4, r1
    9316:	f108 33ff 	add.w	r3, r8, #4294967295
    931a:	d204      	bcs.n	9326 <__udivmoddi4+0x250>
    931c:	458e      	cmp	lr, r1
    931e:	d902      	bls.n	9326 <__udivmoddi4+0x250>
    9320:	f1a8 0302 	sub.w	r3, r8, #2
    9324:	4421      	add	r1, r4
    9326:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    932a:	eba1 010e 	sub.w	r1, r1, lr
    932e:	fba0 9802 	umull	r9, r8, r0, r2
    9332:	4541      	cmp	r1, r8
    9334:	46ce      	mov	lr, r9
    9336:	4643      	mov	r3, r8
    9338:	d302      	bcc.n	9340 <__udivmoddi4+0x26a>
    933a:	d106      	bne.n	934a <__udivmoddi4+0x274>
    933c:	454d      	cmp	r5, r9
    933e:	d204      	bcs.n	934a <__udivmoddi4+0x274>
    9340:	3801      	subs	r0, #1
    9342:	ebb9 0e02 	subs.w	lr, r9, r2
    9346:	eb68 0304 	sbc.w	r3, r8, r4
    934a:	2e00      	cmp	r6, #0
    934c:	d0a7      	beq.n	929e <__udivmoddi4+0x1c8>
    934e:	ebb5 020e 	subs.w	r2, r5, lr
    9352:	eb61 0103 	sbc.w	r1, r1, r3
    9356:	fa01 fc0c 	lsl.w	ip, r1, ip
    935a:	fa22 f307 	lsr.w	r3, r2, r7
    935e:	40f9      	lsrs	r1, r7
    9360:	ea4c 0303 	orr.w	r3, ip, r3
    9364:	e9c6 3100 	strd	r3, r1, [r6]
    9368:	e799      	b.n	929e <__udivmoddi4+0x1c8>
    936a:	4640      	mov	r0, r8
    936c:	e7c5      	b.n	92fa <__udivmoddi4+0x224>
    936e:	4643      	mov	r3, r8
    9370:	e7d9      	b.n	9326 <__udivmoddi4+0x250>

00009372 <strcmp>:
    9372:	f810 2b01 	ldrb.w	r2, [r0], #1
    9376:	f811 3b01 	ldrb.w	r3, [r1], #1
    937a:	2a01      	cmp	r2, #1
    937c:	bf28      	it	cs
    937e:	429a      	cmpcs	r2, r3
    9380:	d0f7      	beq.n	9372 <strcmp>
    9382:	1ad0      	subs	r0, r2, r3
    9384:	4770      	bx	lr

00009386 <strlen>:
    9386:	4603      	mov	r3, r0
    9388:	f813 2b01 	ldrb.w	r2, [r3], #1
    938c:	2a00      	cmp	r2, #0
    938e:	d1fb      	bne.n	9388 <strlen+0x2>
    9390:	1a18      	subs	r0, r3, r0
    9392:	3801      	subs	r0, #1
    9394:	4770      	bx	lr
	...

00009398 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    939a:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    939c:	f7ff f82e 	bl	83fc <__aeabi_i2d>
    93a0:	a325      	add	r3, pc, #148	; (adr r3, 9438 <ntc_temperature+0xa0>)
    93a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    93a6:	f7ff f893 	bl	84d0 <__aeabi_dmul>
    93aa:	f7ff faa3 	bl	88f4 <__aeabi_d2f>
    93ae:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    93b0:	1e63      	subs	r3, r4, #1
    93b2:	b2db      	uxtb	r3, r3
    93b4:	2b02      	cmp	r3, #2
    93b6:	bf96      	itet	ls
    93b8:	4a27      	ldrls	r2, [pc, #156]	; (9458 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    93ba:	2000      	movhi	r0, #0
    93bc:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    93c0:	4629      	mov	r1, r5
    93c2:	f7ff fbf5 	bl	8bb0 <__aeabi_fmul>
    93c6:	f7ff f82b 	bl	8420 <__aeabi_f2d>
    93ca:	4606      	mov	r6, r0
    93cc:	4628      	mov	r0, r5
    93ce:	460f      	mov	r7, r1
    93d0:	f7ff f826 	bl	8420 <__aeabi_f2d>
    93d4:	4602      	mov	r2, r0
    93d6:	460b      	mov	r3, r1
    93d8:	2000      	movs	r0, #0
    93da:	4920      	ldr	r1, [pc, #128]	; (945c <ntc_temperature+0xc4>)
    93dc:	f7fe fec0 	bl	8160 <__aeabi_dsub>
    93e0:	4602      	mov	r2, r0
    93e2:	460b      	mov	r3, r1
    93e4:	4630      	mov	r0, r6
    93e6:	4639      	mov	r1, r7
    93e8:	f7ff f99c 	bl	8724 <__aeabi_ddiv>
    93ec:	f7ff fa82 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    93f0:	491b      	ldr	r1, [pc, #108]	; (9460 <ntc_temperature+0xc8>)
    93f2:	f7ff fc91 	bl	8d18 <__aeabi_fdiv>
    93f6:	f7ff f813 	bl	8420 <__aeabi_f2d>
    93fa:	f01f f91b 	bl	28634 <log>
    93fe:	a310      	add	r3, pc, #64	; (adr r3, 9440 <ntc_temperature+0xa8>)
    9400:	e9d3 2300 	ldrd	r2, r3, [r3]
    9404:	f7ff f98e 	bl	8724 <__aeabi_ddiv>
    9408:	a30f      	add	r3, pc, #60	; (adr r3, 9448 <ntc_temperature+0xb0>)
    940a:	e9d3 2300 	ldrd	r2, r3, [r3]
    940e:	f7fe fea9 	bl	8164 <__adddf3>
    9412:	4602      	mov	r2, r0
    9414:	460b      	mov	r3, r1
    9416:	2000      	movs	r0, #0
    9418:	4912      	ldr	r1, [pc, #72]	; (9464 <ntc_temperature+0xcc>)
    941a:	f7ff f983 	bl	8724 <__aeabi_ddiv>
    941e:	f7ff fa69 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    9422:	f7fe fffd 	bl	8420 <__aeabi_f2d>
    9426:	a30a      	add	r3, pc, #40	; (adr r3, 9450 <ntc_temperature+0xb8>)
    9428:	e9d3 2300 	ldrd	r2, r3, [r3]
    942c:	f7fe fe98 	bl	8160 <__aeabi_dsub>
    9430:	f7ff fa60 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    9434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9436:	bf00      	nop
    9438:	3a66a002 	.word	0x3a66a002
    943c:	3f2ccdb3 	.word	0x3f2ccdb3
    9440:	00000000 	.word	0x00000000
    9444:	40af0200 	.word	0x40af0200
    9448:	dcb5db83 	.word	0xdcb5db83
    944c:	3f6b79e1 	.word	0x3f6b79e1
    9450:	66666666 	.word	0x66666666
    9454:	40711266 	.word	0x40711266
    9458:	00031910 	.word	0x00031910
    945c:	40080000 	.word	0x40080000
    9460:	461c4000 	.word	0x461c4000
    9464:	3ff00000 	.word	0x3ff00000

00009468 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9468:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    946a:	4d65      	ldr	r5, [pc, #404]	; (9600 <bt_init+0x198>)
{
    946c:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    946e:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    9472:	6899      	ldr	r1, [r3, #8]
    9474:	f011 0101 	ands.w	r1, r1, #1
    9478:	d11a      	bne.n	94b0 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    947a:	f640 4003 	movw	r0, #3075	; 0xc03
    947e:	aa01      	add	r2, sp, #4
    9480:	f009 f9e8 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
    9484:	4604      	mov	r4, r0
    9486:	2800      	cmp	r0, #0
    9488:	f040 80b6 	bne.w	95f8 <bt_init+0x190>
		hci_reset_complete(rsp);
    948c:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    948e:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	b95b      	cbnz	r3, 94ac <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9494:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9498:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    949c:	f002 0209 	and.w	r2, r2, #9
    94a0:	e8d3 1fef 	ldaex	r1, [r3]
    94a4:	e8c3 2fe4 	stlex	r4, r2, [r3]
    94a8:	2c00      	cmp	r4, #0
    94aa:	d1f9      	bne.n	94a0 <bt_init+0x38>
		net_buf_unref(rsp);
    94ac:	f012 f86c 	bl	1b588 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    94b0:	2100      	movs	r1, #0
    94b2:	f241 0003 	movw	r0, #4099	; 0x1003
    94b6:	aa01      	add	r2, sp, #4
    94b8:	f009 f9cc 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    94bc:	4604      	mov	r4, r0
    94be:	2800      	cmp	r0, #0
    94c0:	f040 809a 	bne.w	95f8 <bt_init+0x190>
	read_local_features_complete(rsp);
    94c4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94c6:	4e4f      	ldr	r6, [pc, #316]	; (9604 <bt_init+0x19c>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    94c8:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94ca:	f8d2 0001 	ldr.w	r0, [r2, #1]
    94ce:	f8d2 1005 	ldr.w	r1, [r2, #5]
    94d2:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    94d4:	4618      	mov	r0, r3
    94d6:	f012 f857 	bl	1b588 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    94da:	4621      	mov	r1, r4
    94dc:	f241 0001 	movw	r0, #4097	; 0x1001
    94e0:	aa01      	add	r2, sp, #4
    94e2:	f009 f9b7 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    94e6:	4604      	mov	r4, r0
    94e8:	2800      	cmp	r0, #0
    94ea:	f040 8085 	bne.w	95f8 <bt_init+0x190>
	read_local_ver_complete(rsp);
    94ee:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    94f0:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    94f2:	785a      	ldrb	r2, [r3, #1]
    94f4:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    94f8:	885a      	ldrh	r2, [r3, #2]
    94fa:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    94fe:	791a      	ldrb	r2, [r3, #4]
    9500:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    9504:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9508:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    950c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    9510:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    9514:	f012 f838 	bl	1b588 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    9518:	4621      	mov	r1, r4
    951a:	f241 0002 	movw	r0, #4098	; 0x1002
    951e:	aa01      	add	r2, sp, #4
    9520:	f009 f998 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    9524:	4604      	mov	r4, r0
    9526:	2800      	cmp	r0, #0
    9528:	d166      	bne.n	95f8 <bt_init+0x190>
	read_supported_commands_complete(rsp);
    952a:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    952c:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    952e:	1c53      	adds	r3, r2, #1
    9530:	3241      	adds	r2, #65	; 0x41
    9532:	4634      	mov	r4, r6
    9534:	6818      	ldr	r0, [r3, #0]
    9536:	6859      	ldr	r1, [r3, #4]
    9538:	3308      	adds	r3, #8
    953a:	c403      	stmia	r4!, {r0, r1}
    953c:	4293      	cmp	r3, r2
    953e:	4626      	mov	r6, r4
    9540:	d1f7      	bne.n	9532 <bt_init+0xca>
	net_buf_unref(rsp);
    9542:	4638      	mov	r0, r7
    9544:	f012 f820 	bl	1b588 <net_buf_unref>
		err = prng_init();
    9548:	f00a ffd4 	bl	144f4 <prng_init>
		if (err) {
    954c:	4604      	mov	r4, r0
    954e:	2800      	cmp	r0, #0
    9550:	d152      	bne.n	95f8 <bt_init+0x190>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    9552:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    9556:	069a      	lsls	r2, r3, #26
    9558:	d41a      	bmi.n	9590 <bt_init+0x128>
		LOG_WRN("Controller to host flow control not supported");
    955a:	4b2b      	ldr	r3, [pc, #172]	; (9608 <bt_init+0x1a0>)
    955c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9560:	9307      	str	r3, [sp, #28]
    9562:	2302      	movs	r3, #2
    9564:	4829      	ldr	r0, [pc, #164]	; (960c <bt_init+0x1a4>)
    9566:	aa06      	add	r2, sp, #24
    9568:	9306      	str	r3, [sp, #24]
    956a:	f022 fd30 	bl	2bfce <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    956e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    9572:	065b      	lsls	r3, r3, #25
    9574:	d44e      	bmi.n	9614 <bt_init+0x1ac>
		LOG_ERR("Non-LE capable controller detected!");
    9576:	4b26      	ldr	r3, [pc, #152]	; (9610 <bt_init+0x1a8>)
    9578:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    957c:	9307      	str	r3, [sp, #28]
    957e:	2302      	movs	r3, #2
    9580:	4822      	ldr	r0, [pc, #136]	; (960c <bt_init+0x1a4>)
    9582:	aa06      	add	r2, sp, #24
    9584:	9306      	str	r3, [sp, #24]
		return -ENODEV;
    9586:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
    958a:	f022 fd20 	bl	2bfce <z_log_msg_static_create.constprop.0>
	if (err) {
    958e:	e033      	b.n	95f8 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9590:	2107      	movs	r1, #7
    9592:	f640 4033 	movw	r0, #3123	; 0xc33
    9596:	f009 f90f 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
    959a:	4606      	mov	r6, r0
    959c:	2800      	cmp	r0, #0
    959e:	f000 8141 	beq.w	9824 <bt_init+0x3bc>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    95a2:	2107      	movs	r1, #7
    95a4:	300c      	adds	r0, #12
    95a6:	f012 f911 	bl	1b7cc <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    95aa:	2345      	movs	r3, #69	; 0x45
    95ac:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95ae:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    95b0:	f8c0 4002 	str.w	r4, [r0, #2]
    95b4:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    95b6:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95b8:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    95ba:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95bc:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    95be:	4631      	mov	r1, r6
    95c0:	f640 4033 	movw	r0, #3123	; 0xc33
    95c4:	f009 f946 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    95c8:	4604      	mov	r4, r0
    95ca:	b9a8      	cbnz	r0, 95f8 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    95cc:	2101      	movs	r1, #1
    95ce:	f640 4031 	movw	r0, #3121	; 0xc31
    95d2:	f009 f8f1 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
    95d6:	4606      	mov	r6, r0
    95d8:	2800      	cmp	r0, #0
    95da:	f000 8123 	beq.w	9824 <bt_init+0x3bc>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    95de:	2101      	movs	r1, #1
    95e0:	300c      	adds	r0, #12
    95e2:	f024 fd24 	bl	2e02e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    95e6:	4622      	mov	r2, r4
    95e8:	4631      	mov	r1, r6
    95ea:	f640 4031 	movw	r0, #3121	; 0xc31
    95ee:	f009 f931 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    95f2:	4604      	mov	r4, r0
    95f4:	2800      	cmp	r0, #0
    95f6:	d0ba      	beq.n	956e <bt_init+0x106>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    95f8:	4620      	mov	r0, r4
    95fa:	b009      	add	sp, #36	; 0x24
    95fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95fe:	bf00      	nop
    9600:	20008000 	.word	0x20008000
    9604:	20008070 	.word	0x20008070
    9608:	00034cc6 	.word	0x00034cc6
    960c:	000314dc 	.word	0x000314dc
    9610:	00034cf4 	.word	0x00034cf4
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9614:	2100      	movs	r1, #0
    9616:	f242 0003 	movw	r0, #8195	; 0x2003
    961a:	aa02      	add	r2, sp, #8
    961c:	f009 f91a 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    9620:	4604      	mov	r4, r0
    9622:	2800      	cmp	r0, #0
    9624:	d1e8      	bne.n	95f8 <bt_init+0x190>
	read_le_features_complete(rsp);
    9626:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9628:	4ebf      	ldr	r6, [pc, #764]	; (9928 <bt_init+0x4c0>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    962a:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    962c:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9630:	f8d2 1005 	ldr.w	r1, [r2, #5]
    9634:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    9636:	4618      	mov	r0, r3
    9638:	f011 ffa6 	bl	1b588 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    963c:	4621      	mov	r1, r4
    963e:	f242 0002 	movw	r0, #8194	; 0x2002
    9642:	aa02      	add	r2, sp, #8
    9644:	f009 f906 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
    9648:	4604      	mov	r4, r0
    964a:	2800      	cmp	r0, #0
    964c:	d1d4      	bne.n	95f8 <bt_init+0x190>
		le_read_buffer_size_complete(rsp);
    964e:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9650:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    9652:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9656:	b291      	uxth	r1, r2
    9658:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    965c:	b129      	cbz	r1, 966a <bt_init+0x202>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    965e:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9660:	4611      	mov	r1, r2
    9662:	f106 0028 	add.w	r0, r6, #40	; 0x28
    9666:	f026 fdc0 	bl	301ea <z_impl_k_sem_init>
		net_buf_unref(rsp);
    966a:	4620      	mov	r0, r4
    966c:	f011 ff8c 	bl	1b588 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9670:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    9674:	f016 0620 	ands.w	r6, r6, #32
    9678:	d118      	bne.n	96ac <bt_init+0x244>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    967a:	2102      	movs	r1, #2
    967c:	f640 406d 	movw	r0, #3181	; 0xc6d
    9680:	f009 f89a 	bl	127b8 <bt_hci_cmd_create>
		if (!buf) {
    9684:	4604      	mov	r4, r0
    9686:	2800      	cmp	r0, #0
    9688:	f000 80cc 	beq.w	9824 <bt_init+0x3bc>
	return net_buf_simple_add(&buf->b, len);
    968c:	2102      	movs	r1, #2
    968e:	300c      	adds	r0, #12
    9690:	f012 f89c 	bl	1b7cc <net_buf_simple_add>
		cp_le->le = 0x01;
    9694:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9696:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    9698:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    969a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    969c:	4632      	mov	r2, r6
    969e:	f640 406d 	movw	r0, #3181	; 0xc6d
    96a2:	f009 f8d7 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
    96a6:	4604      	mov	r4, r0
    96a8:	2800      	cmp	r0, #0
    96aa:	d1a5      	bne.n	95f8 <bt_init+0x190>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    96ac:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    96b0:	071f      	lsls	r7, r3, #28
    96b2:	d512      	bpl.n	96da <bt_init+0x272>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    96b4:	2100      	movs	r1, #0
    96b6:	f242 001c 	movw	r0, #8220	; 0x201c
    96ba:	aa02      	add	r2, sp, #8
    96bc:	f009 f8ca 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
    96c0:	4604      	mov	r4, r0
    96c2:	2800      	cmp	r0, #0
    96c4:	d198      	bne.n	95f8 <bt_init+0x190>
		le_read_supp_states_complete(rsp);
    96c6:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    96c8:	68c3      	ldr	r3, [r0, #12]
    96ca:	f8d3 2001 	ldr.w	r2, [r3, #1]
    96ce:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    96d2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    96d6:	f011 ff57 	bl	1b588 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    96da:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    96de:	069e      	lsls	r6, r3, #26
    96e0:	d524      	bpl.n	972c <bt_init+0x2c4>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    96e2:	a901      	add	r1, sp, #4
    96e4:	f10d 0002 	add.w	r0, sp, #2
    96e8:	f009 f930 	bl	1294c <hci_le_read_max_data_len>
		if (err) {
    96ec:	4604      	mov	r4, r0
    96ee:	2800      	cmp	r0, #0
    96f0:	d182      	bne.n	95f8 <bt_init+0x190>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96f2:	2104      	movs	r1, #4
    96f4:	f242 0024 	movw	r0, #8228	; 0x2024
    96f8:	f009 f85e 	bl	127b8 <bt_hci_cmd_create>
		if (!buf) {
    96fc:	4606      	mov	r6, r0
    96fe:	2800      	cmp	r0, #0
    9700:	f000 8090 	beq.w	9824 <bt_init+0x3bc>
    9704:	2104      	movs	r1, #4
    9706:	300c      	adds	r0, #12
    9708:	f012 f860 	bl	1b7cc <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    970c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9710:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9712:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9714:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9718:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    971a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    971c:	f242 0024 	movw	r0, #8228	; 0x2024
    9720:	f009 f898 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
    9724:	4604      	mov	r4, r0
    9726:	2800      	cmp	r0, #0
    9728:	f47f af66 	bne.w	95f8 <bt_init+0x190>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    972c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9730:	065c      	lsls	r4, r3, #25
    9732:	d510      	bpl.n	9756 <bt_init+0x2ee>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9734:	2100      	movs	r1, #0
    9736:	f242 002a 	movw	r0, #8234	; 0x202a
    973a:	aa02      	add	r2, sp, #8
    973c:	f009 f88a 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
    9740:	4604      	mov	r4, r0
    9742:	2800      	cmp	r0, #0
    9744:	f47f af58 	bne.w	95f8 <bt_init+0x190>
		le_read_resolving_list_size_complete(rsp);
    9748:	9802      	ldr	r0, [sp, #8]
	bt_dev.le.rl_size = rp->rl_size;
    974a:	68c3      	ldr	r3, [r0, #12]
    974c:	785b      	ldrb	r3, [r3, #1]
    974e:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    9752:	f011 ff19 	bl	1b588 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    9756:	2108      	movs	r1, #8
    9758:	f242 0001 	movw	r0, #8193	; 0x2001
    975c:	f009 f82c 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
    9760:	4604      	mov	r4, r0
    9762:	2800      	cmp	r0, #0
    9764:	d05e      	beq.n	9824 <bt_init+0x3bc>
    9766:	2108      	movs	r1, #8
    9768:	300c      	adds	r0, #12
    976a:	f012 f82f 	bl	1b7cc <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    976e:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    9772:	f240 2302 	movw	r3, #514	; 0x202
    9776:	f011 0f40 	tst.w	r1, #64	; 0x40
    977a:	bf08      	it	eq
    977c:	2303      	moveq	r3, #3
    977e:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9780:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9782:	bf4c      	ite	mi
    9784:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    9788:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    978c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9790:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9792:	bf48      	it	mi
    9794:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9798:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    979c:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    97a0:	bf18      	it	ne
    97a2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    97a6:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    97aa:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    97ac:	bf48      	it	mi
    97ae:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    97b2:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    97b4:	bf08      	it	eq
    97b6:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    97ba:	2100      	movs	r1, #0
    97bc:	f022 fc12 	bl	2bfe4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    97c0:	4621      	mov	r1, r4
    97c2:	2200      	movs	r2, #0
    97c4:	f242 0001 	movw	r0, #8193	; 0x2001
    97c8:	f009 f844 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    97cc:	4604      	mov	r4, r0
    97ce:	2800      	cmp	r0, #0
    97d0:	f47f af12 	bne.w	95f8 <bt_init+0x190>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97d4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    97d8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97dc:	0698      	lsls	r0, r3, #26
    97de:	d424      	bmi.n	982a <bt_init+0x3c2>
	if (bt_dev.le.acl_mtu) {
    97e0:	b9c9      	cbnz	r1, 9816 <bt_init+0x3ae>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    97e2:	f241 0005 	movw	r0, #4101	; 0x1005
    97e6:	aa02      	add	r2, sp, #8
    97e8:	f009 f834 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    97ec:	4604      	mov	r4, r0
    97ee:	2800      	cmp	r0, #0
    97f0:	f47f af02 	bne.w	95f8 <bt_init+0x190>
	if (bt_dev.le.acl_mtu) {
    97f4:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    97f8:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
    97fa:	b94b      	cbnz	r3, 9810 <bt_init+0x3a8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    97fc:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    97fe:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9802:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    9806:	889a      	ldrh	r2, [r3, #4]
    9808:	4848      	ldr	r0, [pc, #288]	; (992c <bt_init+0x4c4>)
    980a:	4611      	mov	r1, r2
    980c:	f026 fced 	bl	301ea <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9810:	4620      	mov	r0, r4
    9812:	f011 feb9 	bl	1b588 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9816:	2108      	movs	r1, #8
    9818:	f640 4001 	movw	r0, #3073	; 0xc01
    981c:	f008 ffcc 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
    9820:	4604      	mov	r4, r0
    9822:	b988      	cbnz	r0, 9848 <bt_init+0x3e0>
		return -ENOBUFS;
    9824:	f06f 0468 	mvn.w	r4, #104	; 0x68
    9828:	e6e6      	b.n	95f8 <bt_init+0x190>
	else if (!bt_dev.le.acl_mtu) {
    982a:	2900      	cmp	r1, #0
    982c:	d1f3      	bne.n	9816 <bt_init+0x3ae>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    982e:	4b40      	ldr	r3, [pc, #256]	; (9930 <bt_init+0x4c8>)
    9830:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9834:	9307      	str	r3, [sp, #28]
    9836:	2302      	movs	r3, #2
    9838:	483e      	ldr	r0, [pc, #248]	; (9934 <bt_init+0x4cc>)
    983a:	aa06      	add	r2, sp, #24
    983c:	9306      	str	r3, [sp, #24]
		return -EIO;
    983e:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9842:	f022 fbc4 	bl	2bfce <z_log_msg_static_create.constprop.0>
	if (err) {
    9846:	e6d7      	b.n	95f8 <bt_init+0x190>
    9848:	2108      	movs	r1, #8
    984a:	300c      	adds	r0, #12
    984c:	f011 ffbe 	bl	1b7cc <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9850:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9854:	4602      	mov	r2, r0
    9856:	07d9      	lsls	r1, r3, #31
    9858:	d431      	bmi.n	98be <bt_init+0x456>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    985a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    985e:	4836      	ldr	r0, [pc, #216]	; (9938 <bt_init+0x4d0>)
	sys_put_le64(mask, ev->events);
    9860:	f022 fbc0 	bl	2bfe4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9864:	4621      	mov	r1, r4
    9866:	2200      	movs	r2, #0
    9868:	f640 4001 	movw	r0, #3073	; 0xc01
    986c:	f008 fff2 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    9870:	4604      	mov	r4, r0
    9872:	2800      	cmp	r0, #0
    9874:	f47f aec0 	bne.w	95f8 <bt_init+0x190>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9878:	4601      	mov	r1, r0
    987a:	aa01      	add	r2, sp, #4
    987c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9880:	f008 ffe8 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    9884:	4604      	mov	r4, r0
    9886:	b1f0      	cbz	r0, 98c6 <bt_init+0x45e>
		LOG_WRN("Vendor HCI extensions not available");
    9888:	4b2c      	ldr	r3, [pc, #176]	; (993c <bt_init+0x4d4>)
			LOG_WRN("Failed to read supported vendor features");
    988a:	9307      	str	r3, [sp, #28]
    988c:	2302      	movs	r3, #2
    988e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9892:	4828      	ldr	r0, [pc, #160]	; (9934 <bt_init+0x4cc>)
    9894:	aa06      	add	r2, sp, #24
    9896:	9306      	str	r3, [sp, #24]
    9898:	f022 fb99 	bl	2bfce <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    989c:	f022 fd36 	bl	2c30c <bt_id_init>
	if (err) {
    98a0:	4604      	mov	r4, r0
    98a2:	2800      	cmp	r0, #0
    98a4:	f47f aea8 	bne.w	95f8 <bt_init+0x190>
		err = bt_conn_init();
    98a8:	f00b ffc0 	bl	1582c <bt_conn_init>
		if (err) {
    98ac:	4604      	mov	r4, r0
    98ae:	2800      	cmp	r0, #0
    98b0:	f47f aea2 	bne.w	95f8 <bt_init+0x190>
}
    98b4:	b009      	add	sp, #36	; 0x24
    98b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    98ba:	f009 bde7 	b.w	1348c <bt_init.part.0>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    98be:	a118      	add	r1, pc, #96	; (adr r1, 9920 <bt_init+0x4b8>)
    98c0:	e9d1 0100 	ldrd	r0, r1, [r1]
    98c4:	e7cc      	b.n	9860 <bt_init+0x3f8>
	net_buf_unref(rsp);
    98c6:	9801      	ldr	r0, [sp, #4]
    98c8:	f011 fe5e 	bl	1b588 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    98cc:	4621      	mov	r1, r4
    98ce:	f64f 4002 	movw	r0, #64514	; 0xfc02
    98d2:	aa01      	add	r2, sp, #4
    98d4:	f008 ffbe 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
    98d8:	4604      	mov	r4, r0
    98da:	b108      	cbz	r0, 98e0 <bt_init+0x478>
		LOG_WRN("Failed to read supported vendor commands");
    98dc:	4b18      	ldr	r3, [pc, #96]	; (9940 <bt_init+0x4d8>)
    98de:	e7d4      	b.n	988a <bt_init+0x422>
	rp.cmds = (void *)rsp->data;
    98e0:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    98e2:	68c3      	ldr	r3, [r0, #12]
    98e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    98e8:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    98ec:	f011 fe4c 	bl	1b588 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    98f0:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    98f4:	075b      	lsls	r3, r3, #29
    98f6:	d5d1      	bpl.n	989c <bt_init+0x434>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    98f8:	4621      	mov	r1, r4
    98fa:	f64f 4003 	movw	r0, #64515	; 0xfc03
    98fe:	aa01      	add	r2, sp, #4
    9900:	f008 ffa8 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
    9904:	b108      	cbz	r0, 990a <bt_init+0x4a2>
			LOG_WRN("Failed to read supported vendor features");
    9906:	4b0f      	ldr	r3, [pc, #60]	; (9944 <bt_init+0x4dc>)
    9908:	e7bf      	b.n	988a <bt_init+0x422>
		rp.feat = (void *)rsp->data;
    990a:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    990c:	68c3      	ldr	r3, [r0, #12]
    990e:	785b      	ldrb	r3, [r3, #1]
    9910:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    9914:	f011 fe38 	bl	1b588 <net_buf_unref>
    9918:	e7c0      	b.n	989c <bt_init+0x434>
    991a:	bf00      	nop
    991c:	f3af 8000 	nop.w
    9920:	02008890 	.word	0x02008890
    9924:	20008000 	.word	0x20008000
    9928:	200080d0 	.word	0x200080d0
    992c:	20008100 	.word	0x20008100
    9930:	00034d18 	.word	0x00034d18
    9934:	000314dc 	.word	0x000314dc
    9938:	02008810 	.word	0x02008810
    993c:	00034d3b 	.word	0x00034d3b
    9940:	00034d5f 	.word	0x00034d5f
    9944:	00034d88 	.word	0x00034d88

00009948 <__ieee754_log>:
    9948:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    994c:	4602      	mov	r2, r0
    994e:	460b      	mov	r3, r1
    9950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9954:	460d      	mov	r5, r1
    9956:	b087      	sub	sp, #28
    9958:	da24      	bge.n	99a4 <__ieee754_log+0x5c>
    995a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    995e:	4304      	orrs	r4, r0
    9960:	d108      	bne.n	9974 <__ieee754_log+0x2c>
    9962:	2200      	movs	r2, #0
    9964:	2300      	movs	r3, #0
    9966:	2000      	movs	r0, #0
    9968:	49c9      	ldr	r1, [pc, #804]	; (9c90 <__ieee754_log+0x348>)
    996a:	f7fe fedb 	bl	8724 <__aeabi_ddiv>
    996e:	b007      	add	sp, #28
    9970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9974:	2900      	cmp	r1, #0
    9976:	da04      	bge.n	9982 <__ieee754_log+0x3a>
    9978:	f7fe fbf2 	bl	8160 <__aeabi_dsub>
    997c:	2200      	movs	r2, #0
    997e:	2300      	movs	r3, #0
    9980:	e7f3      	b.n	996a <__ieee754_log+0x22>
    9982:	2200      	movs	r2, #0
    9984:	4bc3      	ldr	r3, [pc, #780]	; (9c94 <__ieee754_log+0x34c>)
    9986:	f7fe fda3 	bl	84d0 <__aeabi_dmul>
    998a:	460b      	mov	r3, r1
    998c:	460d      	mov	r5, r1
    998e:	4602      	mov	r2, r0
    9990:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9994:	48c0      	ldr	r0, [pc, #768]	; (9c98 <__ieee754_log+0x350>)
    9996:	4285      	cmp	r5, r0
    9998:	dd06      	ble.n	99a8 <__ieee754_log+0x60>
    999a:	4610      	mov	r0, r2
    999c:	4619      	mov	r1, r3
    999e:	f7fe fbe1 	bl	8164 <__adddf3>
    99a2:	e7e4      	b.n	996e <__ieee754_log+0x26>
    99a4:	2100      	movs	r1, #0
    99a6:	e7f5      	b.n	9994 <__ieee754_log+0x4c>
    99a8:	152c      	asrs	r4, r5, #20
    99aa:	f3c5 0513 	ubfx	r5, r5, #0, #20
    99ae:	4610      	mov	r0, r2
    99b0:	2200      	movs	r2, #0
    99b2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    99b6:	440c      	add	r4, r1
    99b8:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    99bc:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    99c0:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    99c4:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    99c8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    99cc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    99d0:	ea41 0305 	orr.w	r3, r1, r5
    99d4:	4619      	mov	r1, r3
    99d6:	4bb1      	ldr	r3, [pc, #708]	; (9c9c <__ieee754_log+0x354>)
    99d8:	f7fe fbc2 	bl	8160 <__aeabi_dsub>
    99dc:	1cab      	adds	r3, r5, #2
    99de:	4682      	mov	sl, r0
    99e0:	468b      	mov	fp, r1
    99e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    99e6:	2200      	movs	r2, #0
    99e8:	2b02      	cmp	r3, #2
    99ea:	dc53      	bgt.n	9a94 <__ieee754_log+0x14c>
    99ec:	2300      	movs	r3, #0
    99ee:	f7ff faef 	bl	8fd0 <__aeabi_dcmpeq>
    99f2:	b1d0      	cbz	r0, 9a2a <__ieee754_log+0xe2>
    99f4:	2c00      	cmp	r4, #0
    99f6:	f000 8120 	beq.w	9c3a <__ieee754_log+0x2f2>
    99fa:	4620      	mov	r0, r4
    99fc:	f7fe fcfe 	bl	83fc <__aeabi_i2d>
    9a00:	4606      	mov	r6, r0
    9a02:	460f      	mov	r7, r1
    9a04:	a38e      	add	r3, pc, #568	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9a06:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a0a:	f7fe fd61 	bl	84d0 <__aeabi_dmul>
    9a0e:	4604      	mov	r4, r0
    9a10:	460d      	mov	r5, r1
    9a12:	4630      	mov	r0, r6
    9a14:	4639      	mov	r1, r7
    9a16:	a38c      	add	r3, pc, #560	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9a18:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a1c:	f7fe fd58 	bl	84d0 <__aeabi_dmul>
    9a20:	4602      	mov	r2, r0
    9a22:	460b      	mov	r3, r1
    9a24:	4620      	mov	r0, r4
    9a26:	4629      	mov	r1, r5
    9a28:	e7b9      	b.n	999e <__ieee754_log+0x56>
    9a2a:	a389      	add	r3, pc, #548	; (adr r3, 9c50 <__ieee754_log+0x308>)
    9a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a30:	4650      	mov	r0, sl
    9a32:	4659      	mov	r1, fp
    9a34:	f7fe fd4c 	bl	84d0 <__aeabi_dmul>
    9a38:	4602      	mov	r2, r0
    9a3a:	460b      	mov	r3, r1
    9a3c:	2000      	movs	r0, #0
    9a3e:	4998      	ldr	r1, [pc, #608]	; (9ca0 <__ieee754_log+0x358>)
    9a40:	f7fe fb8e 	bl	8160 <__aeabi_dsub>
    9a44:	4606      	mov	r6, r0
    9a46:	460f      	mov	r7, r1
    9a48:	4652      	mov	r2, sl
    9a4a:	465b      	mov	r3, fp
    9a4c:	4650      	mov	r0, sl
    9a4e:	4659      	mov	r1, fp
    9a50:	f7fe fd3e 	bl	84d0 <__aeabi_dmul>
    9a54:	4602      	mov	r2, r0
    9a56:	460b      	mov	r3, r1
    9a58:	4630      	mov	r0, r6
    9a5a:	4639      	mov	r1, r7
    9a5c:	f7fe fd38 	bl	84d0 <__aeabi_dmul>
    9a60:	4606      	mov	r6, r0
    9a62:	460f      	mov	r7, r1
    9a64:	b914      	cbnz	r4, 9a6c <__ieee754_log+0x124>
    9a66:	4632      	mov	r2, r6
    9a68:	463b      	mov	r3, r7
    9a6a:	e0a0      	b.n	9bae <__ieee754_log+0x266>
    9a6c:	4620      	mov	r0, r4
    9a6e:	f7fe fcc5 	bl	83fc <__aeabi_i2d>
    9a72:	4680      	mov	r8, r0
    9a74:	4689      	mov	r9, r1
    9a76:	a372      	add	r3, pc, #456	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9a78:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a7c:	f7fe fd28 	bl	84d0 <__aeabi_dmul>
    9a80:	4604      	mov	r4, r0
    9a82:	460d      	mov	r5, r1
    9a84:	4640      	mov	r0, r8
    9a86:	4649      	mov	r1, r9
    9a88:	a36f      	add	r3, pc, #444	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a8e:	f7fe fd1f 	bl	84d0 <__aeabi_dmul>
    9a92:	e0a5      	b.n	9be0 <__ieee754_log+0x298>
    9a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a98:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9a9c:	f7fe fb62 	bl	8164 <__adddf3>
    9aa0:	4602      	mov	r2, r0
    9aa2:	460b      	mov	r3, r1
    9aa4:	4650      	mov	r0, sl
    9aa6:	4659      	mov	r1, fp
    9aa8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9aac:	f7fe fe3a 	bl	8724 <__aeabi_ddiv>
    9ab0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9ab4:	3551      	adds	r5, #81	; 0x51
    9ab6:	e9cd 0100 	strd	r0, r1, [sp]
    9aba:	4620      	mov	r0, r4
    9abc:	4335      	orrs	r5, r6
    9abe:	f7fe fc9d 	bl	83fc <__aeabi_i2d>
    9ac2:	e9dd 2300 	ldrd	r2, r3, [sp]
    9ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9aca:	4610      	mov	r0, r2
    9acc:	4619      	mov	r1, r3
    9ace:	f7fe fcff 	bl	84d0 <__aeabi_dmul>
    9ad2:	4602      	mov	r2, r0
    9ad4:	460b      	mov	r3, r1
    9ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9ada:	f7fe fcf9 	bl	84d0 <__aeabi_dmul>
    9ade:	4680      	mov	r8, r0
    9ae0:	4689      	mov	r9, r1
    9ae2:	a35d      	add	r3, pc, #372	; (adr r3, 9c58 <__ieee754_log+0x310>)
    9ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ae8:	f7fe fcf2 	bl	84d0 <__aeabi_dmul>
    9aec:	a35c      	add	r3, pc, #368	; (adr r3, 9c60 <__ieee754_log+0x318>)
    9aee:	e9d3 2300 	ldrd	r2, r3, [r3]
    9af2:	f7fe fb37 	bl	8164 <__adddf3>
    9af6:	4642      	mov	r2, r8
    9af8:	464b      	mov	r3, r9
    9afa:	f7fe fce9 	bl	84d0 <__aeabi_dmul>
    9afe:	a35a      	add	r3, pc, #360	; (adr r3, 9c68 <__ieee754_log+0x320>)
    9b00:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b04:	f7fe fb2e 	bl	8164 <__adddf3>
    9b08:	4642      	mov	r2, r8
    9b0a:	464b      	mov	r3, r9
    9b0c:	f7fe fce0 	bl	84d0 <__aeabi_dmul>
    9b10:	a357      	add	r3, pc, #348	; (adr r3, 9c70 <__ieee754_log+0x328>)
    9b12:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b16:	f7fe fb25 	bl	8164 <__adddf3>
    9b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9b1e:	f7fe fcd7 	bl	84d0 <__aeabi_dmul>
    9b22:	a355      	add	r3, pc, #340	; (adr r3, 9c78 <__ieee754_log+0x330>)
    9b24:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9b2c:	4640      	mov	r0, r8
    9b2e:	4649      	mov	r1, r9
    9b30:	f7fe fcce 	bl	84d0 <__aeabi_dmul>
    9b34:	a352      	add	r3, pc, #328	; (adr r3, 9c80 <__ieee754_log+0x338>)
    9b36:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b3a:	f7fe fb13 	bl	8164 <__adddf3>
    9b3e:	4642      	mov	r2, r8
    9b40:	464b      	mov	r3, r9
    9b42:	f7fe fcc5 	bl	84d0 <__aeabi_dmul>
    9b46:	a350      	add	r3, pc, #320	; (adr r3, 9c88 <__ieee754_log+0x340>)
    9b48:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b4c:	f7fe fb0a 	bl	8164 <__adddf3>
    9b50:	4642      	mov	r2, r8
    9b52:	464b      	mov	r3, r9
    9b54:	f7fe fcbc 	bl	84d0 <__aeabi_dmul>
    9b58:	4602      	mov	r2, r0
    9b5a:	460b      	mov	r3, r1
    9b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9b60:	f7fe fb00 	bl	8164 <__adddf3>
    9b64:	2d00      	cmp	r5, #0
    9b66:	4680      	mov	r8, r0
    9b68:	4689      	mov	r9, r1
    9b6a:	dd48      	ble.n	9bfe <__ieee754_log+0x2b6>
    9b6c:	2200      	movs	r2, #0
    9b6e:	4b4c      	ldr	r3, [pc, #304]	; (9ca0 <__ieee754_log+0x358>)
    9b70:	4650      	mov	r0, sl
    9b72:	4659      	mov	r1, fp
    9b74:	f7fe fcac 	bl	84d0 <__aeabi_dmul>
    9b78:	4652      	mov	r2, sl
    9b7a:	465b      	mov	r3, fp
    9b7c:	f7fe fca8 	bl	84d0 <__aeabi_dmul>
    9b80:	4602      	mov	r2, r0
    9b82:	460b      	mov	r3, r1
    9b84:	4606      	mov	r6, r0
    9b86:	460f      	mov	r7, r1
    9b88:	4640      	mov	r0, r8
    9b8a:	4649      	mov	r1, r9
    9b8c:	f7fe faea 	bl	8164 <__adddf3>
    9b90:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b94:	f7fe fc9c 	bl	84d0 <__aeabi_dmul>
    9b98:	4680      	mov	r8, r0
    9b9a:	4689      	mov	r9, r1
    9b9c:	b964      	cbnz	r4, 9bb8 <__ieee754_log+0x270>
    9b9e:	4602      	mov	r2, r0
    9ba0:	460b      	mov	r3, r1
    9ba2:	4630      	mov	r0, r6
    9ba4:	4639      	mov	r1, r7
    9ba6:	f7fe fadb 	bl	8160 <__aeabi_dsub>
    9baa:	4602      	mov	r2, r0
    9bac:	460b      	mov	r3, r1
    9bae:	4650      	mov	r0, sl
    9bb0:	4659      	mov	r1, fp
    9bb2:	f7fe fad5 	bl	8160 <__aeabi_dsub>
    9bb6:	e6da      	b.n	996e <__ieee754_log+0x26>
    9bb8:	a321      	add	r3, pc, #132	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9bba:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bc2:	f7fe fc85 	bl	84d0 <__aeabi_dmul>
    9bc6:	4604      	mov	r4, r0
    9bc8:	460d      	mov	r5, r1
    9bca:	a31f      	add	r3, pc, #124	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bd4:	f7fe fc7c 	bl	84d0 <__aeabi_dmul>
    9bd8:	4642      	mov	r2, r8
    9bda:	464b      	mov	r3, r9
    9bdc:	f7fe fac2 	bl	8164 <__adddf3>
    9be0:	4602      	mov	r2, r0
    9be2:	460b      	mov	r3, r1
    9be4:	4630      	mov	r0, r6
    9be6:	4639      	mov	r1, r7
    9be8:	f7fe faba 	bl	8160 <__aeabi_dsub>
    9bec:	4652      	mov	r2, sl
    9bee:	465b      	mov	r3, fp
    9bf0:	f7fe fab6 	bl	8160 <__aeabi_dsub>
    9bf4:	4602      	mov	r2, r0
    9bf6:	460b      	mov	r3, r1
    9bf8:	4620      	mov	r0, r4
    9bfa:	4629      	mov	r1, r5
    9bfc:	e7d9      	b.n	9bb2 <__ieee754_log+0x26a>
    9bfe:	4602      	mov	r2, r0
    9c00:	460b      	mov	r3, r1
    9c02:	4650      	mov	r0, sl
    9c04:	4659      	mov	r1, fp
    9c06:	f7fe faab 	bl	8160 <__aeabi_dsub>
    9c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c0e:	f7fe fc5f 	bl	84d0 <__aeabi_dmul>
    9c12:	4606      	mov	r6, r0
    9c14:	460f      	mov	r7, r1
    9c16:	2c00      	cmp	r4, #0
    9c18:	f43f af25 	beq.w	9a66 <__ieee754_log+0x11e>
    9c1c:	a308      	add	r3, pc, #32	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c26:	f7fe fc53 	bl	84d0 <__aeabi_dmul>
    9c2a:	4604      	mov	r4, r0
    9c2c:	460d      	mov	r5, r1
    9c2e:	a306      	add	r3, pc, #24	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9c30:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c38:	e729      	b.n	9a8e <__ieee754_log+0x146>
    9c3a:	2000      	movs	r0, #0
    9c3c:	2100      	movs	r1, #0
    9c3e:	e696      	b.n	996e <__ieee754_log+0x26>
    9c40:	fee00000 	.word	0xfee00000
    9c44:	3fe62e42 	.word	0x3fe62e42
    9c48:	35793c76 	.word	0x35793c76
    9c4c:	3dea39ef 	.word	0x3dea39ef
    9c50:	55555555 	.word	0x55555555
    9c54:	3fd55555 	.word	0x3fd55555
    9c58:	df3e5244 	.word	0xdf3e5244
    9c5c:	3fc2f112 	.word	0x3fc2f112
    9c60:	96cb03de 	.word	0x96cb03de
    9c64:	3fc74664 	.word	0x3fc74664
    9c68:	94229359 	.word	0x94229359
    9c6c:	3fd24924 	.word	0x3fd24924
    9c70:	55555593 	.word	0x55555593
    9c74:	3fe55555 	.word	0x3fe55555
    9c78:	d078c69f 	.word	0xd078c69f
    9c7c:	3fc39a09 	.word	0x3fc39a09
    9c80:	1d8e78af 	.word	0x1d8e78af
    9c84:	3fcc71c5 	.word	0x3fcc71c5
    9c88:	9997fa04 	.word	0x9997fa04
    9c8c:	3fd99999 	.word	0x3fd99999
    9c90:	c3500000 	.word	0xc3500000
    9c94:	43500000 	.word	0x43500000
    9c98:	7fefffff 	.word	0x7fefffff
    9c9c:	3ff00000 	.word	0x3ff00000
    9ca0:	3fe00000 	.word	0x3fe00000
    9ca4:	00000000 	.word	0x00000000

00009ca8 <_dtoa_r>:
    9ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cac:	4614      	mov	r4, r2
    9cae:	b097      	sub	sp, #92	; 0x5c
    9cb0:	461d      	mov	r5, r3
    9cb2:	6a47      	ldr	r7, [r0, #36]	; 0x24
    9cb4:	4683      	mov	fp, r0
    9cb6:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9cb8:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9cbc:	b97f      	cbnz	r7, 9cde <_dtoa_r+0x36>
    9cbe:	2010      	movs	r0, #16
    9cc0:	f01e fcf8 	bl	286b4 <malloc>
    9cc4:	4602      	mov	r2, r0
    9cc6:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9cca:	b920      	cbnz	r0, 9cd6 <_dtoa_r+0x2e>
    9ccc:	4ba2      	ldr	r3, [pc, #648]	; (9f58 <_dtoa_r+0x2b0>)
    9cce:	21ea      	movs	r1, #234	; 0xea
    9cd0:	48a2      	ldr	r0, [pc, #648]	; (9f5c <_dtoa_r+0x2b4>)
    9cd2:	f01f f9ab 	bl	2902c <__assert_func>
    9cd6:	e9c0 7701 	strd	r7, r7, [r0, #4]
    9cda:	6007      	str	r7, [r0, #0]
    9cdc:	60c7      	str	r7, [r0, #12]
    9cde:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9ce2:	6819      	ldr	r1, [r3, #0]
    9ce4:	b159      	cbz	r1, 9cfe <_dtoa_r+0x56>
    9ce6:	685a      	ldr	r2, [r3, #4]
    9ce8:	2301      	movs	r3, #1
    9cea:	4658      	mov	r0, fp
    9cec:	4093      	lsls	r3, r2
    9cee:	604a      	str	r2, [r1, #4]
    9cf0:	608b      	str	r3, [r1, #8]
    9cf2:	f01f fadb 	bl	292ac <_Bfree>
    9cf6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cfa:	2200      	movs	r2, #0
    9cfc:	601a      	str	r2, [r3, #0]
    9cfe:	1e2b      	subs	r3, r5, #0
    9d00:	bfb7      	itett	lt
    9d02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9d06:	2300      	movge	r3, #0
    9d08:	2201      	movlt	r2, #1
    9d0a:	9305      	strlt	r3, [sp, #20]
    9d0c:	bfa8      	it	ge
    9d0e:	6033      	strge	r3, [r6, #0]
    9d10:	9f05      	ldr	r7, [sp, #20]
    9d12:	4b93      	ldr	r3, [pc, #588]	; (9f60 <_dtoa_r+0x2b8>)
    9d14:	bfb8      	it	lt
    9d16:	6032      	strlt	r2, [r6, #0]
    9d18:	43bb      	bics	r3, r7
    9d1a:	d119      	bne.n	9d50 <_dtoa_r+0xa8>
    9d1c:	f242 730f 	movw	r3, #9999	; 0x270f
    9d20:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d22:	6013      	str	r3, [r2, #0]
    9d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9d28:	4323      	orrs	r3, r4
    9d2a:	f000 85e0 	beq.w	a8ee <_dtoa_r+0xc46>
    9d2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d30:	b953      	cbnz	r3, 9d48 <_dtoa_r+0xa0>
    9d32:	4b8c      	ldr	r3, [pc, #560]	; (9f64 <_dtoa_r+0x2bc>)
    9d34:	e021      	b.n	9d7a <_dtoa_r+0xd2>
    9d36:	4b8c      	ldr	r3, [pc, #560]	; (9f68 <_dtoa_r+0x2c0>)
    9d38:	9308      	str	r3, [sp, #32]
    9d3a:	3308      	adds	r3, #8
    9d3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d3e:	6013      	str	r3, [r2, #0]
    9d40:	9808      	ldr	r0, [sp, #32]
    9d42:	b017      	add	sp, #92	; 0x5c
    9d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d48:	4b86      	ldr	r3, [pc, #536]	; (9f64 <_dtoa_r+0x2bc>)
    9d4a:	9308      	str	r3, [sp, #32]
    9d4c:	3303      	adds	r3, #3
    9d4e:	e7f5      	b.n	9d3c <_dtoa_r+0x94>
    9d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9d54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d5c:	2200      	movs	r2, #0
    9d5e:	2300      	movs	r3, #0
    9d60:	f7ff f936 	bl	8fd0 <__aeabi_dcmpeq>
    9d64:	4680      	mov	r8, r0
    9d66:	b150      	cbz	r0, 9d7e <_dtoa_r+0xd6>
    9d68:	2301      	movs	r3, #1
    9d6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d6c:	6013      	str	r3, [r2, #0]
    9d6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d70:	b113      	cbz	r3, 9d78 <_dtoa_r+0xd0>
    9d72:	4b7e      	ldr	r3, [pc, #504]	; (9f6c <_dtoa_r+0x2c4>)
    9d74:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d76:	6013      	str	r3, [r2, #0]
    9d78:	4b7d      	ldr	r3, [pc, #500]	; (9f70 <_dtoa_r+0x2c8>)
    9d7a:	9308      	str	r3, [sp, #32]
    9d7c:	e7e0      	b.n	9d40 <_dtoa_r+0x98>
    9d7e:	ab14      	add	r3, sp, #80	; 0x50
    9d80:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9d84:	4658      	mov	r0, fp
    9d86:	9301      	str	r3, [sp, #4]
    9d88:	ab15      	add	r3, sp, #84	; 0x54
    9d8a:	9300      	str	r3, [sp, #0]
    9d8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9d90:	f01f fd12 	bl	297b8 <__d2b>
    9d94:	9003      	str	r0, [sp, #12]
    9d96:	2e00      	cmp	r6, #0
    9d98:	d078      	beq.n	9e8c <_dtoa_r+0x1e4>
    9d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d9c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9da0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9da8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9db0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9db4:	4619      	mov	r1, r3
    9db6:	2200      	movs	r2, #0
    9db8:	4b6e      	ldr	r3, [pc, #440]	; (9f74 <_dtoa_r+0x2cc>)
    9dba:	f7fe f9d1 	bl	8160 <__aeabi_dsub>
    9dbe:	a360      	add	r3, pc, #384	; (adr r3, 9f40 <_dtoa_r+0x298>)
    9dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dc4:	f7fe fb84 	bl	84d0 <__aeabi_dmul>
    9dc8:	a35f      	add	r3, pc, #380	; (adr r3, 9f48 <_dtoa_r+0x2a0>)
    9dca:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dce:	f7fe f9c9 	bl	8164 <__adddf3>
    9dd2:	4604      	mov	r4, r0
    9dd4:	460d      	mov	r5, r1
    9dd6:	4630      	mov	r0, r6
    9dd8:	f7fe fb10 	bl	83fc <__aeabi_i2d>
    9ddc:	a35c      	add	r3, pc, #368	; (adr r3, 9f50 <_dtoa_r+0x2a8>)
    9dde:	e9d3 2300 	ldrd	r2, r3, [r3]
    9de2:	f7fe fb75 	bl	84d0 <__aeabi_dmul>
    9de6:	4602      	mov	r2, r0
    9de8:	460b      	mov	r3, r1
    9dea:	4620      	mov	r0, r4
    9dec:	4629      	mov	r1, r5
    9dee:	f7fe f9b9 	bl	8164 <__adddf3>
    9df2:	4604      	mov	r4, r0
    9df4:	460d      	mov	r5, r1
    9df6:	f7ff f933 	bl	9060 <__aeabi_d2iz>
    9dfa:	2200      	movs	r2, #0
    9dfc:	4607      	mov	r7, r0
    9dfe:	2300      	movs	r3, #0
    9e00:	4620      	mov	r0, r4
    9e02:	4629      	mov	r1, r5
    9e04:	f7ff f8ee 	bl	8fe4 <__aeabi_dcmplt>
    9e08:	b140      	cbz	r0, 9e1c <_dtoa_r+0x174>
    9e0a:	4638      	mov	r0, r7
    9e0c:	f7fe faf6 	bl	83fc <__aeabi_i2d>
    9e10:	4622      	mov	r2, r4
    9e12:	462b      	mov	r3, r5
    9e14:	f7ff f8dc 	bl	8fd0 <__aeabi_dcmpeq>
    9e18:	b900      	cbnz	r0, 9e1c <_dtoa_r+0x174>
    9e1a:	3f01      	subs	r7, #1
    9e1c:	2f16      	cmp	r7, #22
    9e1e:	d854      	bhi.n	9eca <_dtoa_r+0x222>
    9e20:	4b55      	ldr	r3, [pc, #340]	; (9f78 <_dtoa_r+0x2d0>)
    9e22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e2e:	f7ff f8d9 	bl	8fe4 <__aeabi_dcmplt>
    9e32:	2800      	cmp	r0, #0
    9e34:	d04b      	beq.n	9ece <_dtoa_r+0x226>
    9e36:	3f01      	subs	r7, #1
    9e38:	2300      	movs	r3, #0
    9e3a:	9312      	str	r3, [sp, #72]	; 0x48
    9e3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9e3e:	1b9b      	subs	r3, r3, r6
    9e40:	1e5a      	subs	r2, r3, #1
    9e42:	bf4c      	ite	mi
    9e44:	f1c3 0301 	rsbmi	r3, r3, #1
    9e48:	2300      	movpl	r3, #0
    9e4a:	920a      	str	r2, [sp, #40]	; 0x28
    9e4c:	bf45      	ittet	mi
    9e4e:	9306      	strmi	r3, [sp, #24]
    9e50:	2300      	movmi	r3, #0
    9e52:	9306      	strpl	r3, [sp, #24]
    9e54:	930a      	strmi	r3, [sp, #40]	; 0x28
    9e56:	2f00      	cmp	r7, #0
    9e58:	db3b      	blt.n	9ed2 <_dtoa_r+0x22a>
    9e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e5c:	970f      	str	r7, [sp, #60]	; 0x3c
    9e5e:	443b      	add	r3, r7
    9e60:	930a      	str	r3, [sp, #40]	; 0x28
    9e62:	2300      	movs	r3, #0
    9e64:	930b      	str	r3, [sp, #44]	; 0x2c
    9e66:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e68:	2b09      	cmp	r3, #9
    9e6a:	f200 8089 	bhi.w	9f80 <_dtoa_r+0x2d8>
    9e6e:	2b05      	cmp	r3, #5
    9e70:	bfc5      	ittet	gt
    9e72:	3b04      	subgt	r3, #4
    9e74:	2400      	movgt	r4, #0
    9e76:	2401      	movle	r4, #1
    9e78:	9320      	strgt	r3, [sp, #128]	; 0x80
    9e7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e7c:	3b02      	subs	r3, #2
    9e7e:	2b03      	cmp	r3, #3
    9e80:	f200 8089 	bhi.w	9f96 <_dtoa_r+0x2ee>
    9e84:	e8df f003 	tbb	[pc, r3]
    9e88:	59383a2d 	.word	0x59383a2d
    9e8c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9e90:	441e      	add	r6, r3
    9e92:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9e96:	2b20      	cmp	r3, #32
    9e98:	bfc9      	itett	gt
    9e9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9e9e:	f1c3 0320 	rsble	r3, r3, #32
    9ea2:	409f      	lslgt	r7, r3
    9ea4:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9ea8:	bfd8      	it	le
    9eaa:	fa04 f003 	lslle.w	r0, r4, r3
    9eae:	f106 36ff 	add.w	r6, r6, #4294967295
    9eb2:	bfc4      	itt	gt
    9eb4:	fa24 f303 	lsrgt.w	r3, r4, r3
    9eb8:	ea47 0003 	orrgt.w	r0, r7, r3
    9ebc:	f7fe fa8e 	bl	83dc <__aeabi_ui2d>
    9ec0:	2201      	movs	r2, #1
    9ec2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9ec6:	9213      	str	r2, [sp, #76]	; 0x4c
    9ec8:	e774      	b.n	9db4 <_dtoa_r+0x10c>
    9eca:	2301      	movs	r3, #1
    9ecc:	e7b5      	b.n	9e3a <_dtoa_r+0x192>
    9ece:	9012      	str	r0, [sp, #72]	; 0x48
    9ed0:	e7b4      	b.n	9e3c <_dtoa_r+0x194>
    9ed2:	9b06      	ldr	r3, [sp, #24]
    9ed4:	1bdb      	subs	r3, r3, r7
    9ed6:	9306      	str	r3, [sp, #24]
    9ed8:	427b      	negs	r3, r7
    9eda:	930b      	str	r3, [sp, #44]	; 0x2c
    9edc:	2300      	movs	r3, #0
    9ede:	930f      	str	r3, [sp, #60]	; 0x3c
    9ee0:	e7c1      	b.n	9e66 <_dtoa_r+0x1be>
    9ee2:	2300      	movs	r3, #0
    9ee4:	930e      	str	r3, [sp, #56]	; 0x38
    9ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ee8:	2b00      	cmp	r3, #0
    9eea:	dc57      	bgt.n	9f9c <_dtoa_r+0x2f4>
    9eec:	2301      	movs	r3, #1
    9eee:	4699      	mov	r9, r3
    9ef0:	461a      	mov	r2, r3
    9ef2:	9309      	str	r3, [sp, #36]	; 0x24
    9ef4:	9221      	str	r2, [sp, #132]	; 0x84
    9ef6:	e00c      	b.n	9f12 <_dtoa_r+0x26a>
    9ef8:	2301      	movs	r3, #1
    9efa:	e7f3      	b.n	9ee4 <_dtoa_r+0x23c>
    9efc:	2300      	movs	r3, #0
    9efe:	930e      	str	r3, [sp, #56]	; 0x38
    9f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f02:	18fb      	adds	r3, r7, r3
    9f04:	f103 0901 	add.w	r9, r3, #1
    9f08:	9309      	str	r3, [sp, #36]	; 0x24
    9f0a:	464b      	mov	r3, r9
    9f0c:	2b01      	cmp	r3, #1
    9f0e:	bfb8      	it	lt
    9f10:	2301      	movlt	r3, #1
    9f12:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9f16:	2100      	movs	r1, #0
    9f18:	2204      	movs	r2, #4
    9f1a:	f102 0514 	add.w	r5, r2, #20
    9f1e:	429d      	cmp	r5, r3
    9f20:	d940      	bls.n	9fa4 <_dtoa_r+0x2fc>
    9f22:	6041      	str	r1, [r0, #4]
    9f24:	4658      	mov	r0, fp
    9f26:	f01f f981 	bl	2922c <_Balloc>
    9f2a:	9008      	str	r0, [sp, #32]
    9f2c:	2800      	cmp	r0, #0
    9f2e:	d13c      	bne.n	9faa <_dtoa_r+0x302>
    9f30:	4b12      	ldr	r3, [pc, #72]	; (9f7c <_dtoa_r+0x2d4>)
    9f32:	4602      	mov	r2, r0
    9f34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9f38:	e6ca      	b.n	9cd0 <_dtoa_r+0x28>
    9f3a:	2301      	movs	r3, #1
    9f3c:	e7df      	b.n	9efe <_dtoa_r+0x256>
    9f3e:	bf00      	nop
    9f40:	636f4361 	.word	0x636f4361
    9f44:	3fd287a7 	.word	0x3fd287a7
    9f48:	8b60c8b3 	.word	0x8b60c8b3
    9f4c:	3fc68a28 	.word	0x3fc68a28
    9f50:	509f79fb 	.word	0x509f79fb
    9f54:	3fd34413 	.word	0x3fd34413
    9f58:	00038d2c 	.word	0x00038d2c
    9f5c:	00038d43 	.word	0x00038d43
    9f60:	7ff00000 	.word	0x7ff00000
    9f64:	00038d28 	.word	0x00038d28
    9f68:	00038d1f 	.word	0x00038d1f
    9f6c:	00037b2b 	.word	0x00037b2b
    9f70:	00037b2a 	.word	0x00037b2a
    9f74:	3ff80000 	.word	0x3ff80000
    9f78:	00031760 	.word	0x00031760
    9f7c:	00038db7 	.word	0x00038db7
    9f80:	2401      	movs	r4, #1
    9f82:	2300      	movs	r3, #0
    9f84:	940e      	str	r4, [sp, #56]	; 0x38
    9f86:	9320      	str	r3, [sp, #128]	; 0x80
    9f88:	f04f 33ff 	mov.w	r3, #4294967295
    9f8c:	2200      	movs	r2, #0
    9f8e:	4699      	mov	r9, r3
    9f90:	9309      	str	r3, [sp, #36]	; 0x24
    9f92:	2312      	movs	r3, #18
    9f94:	e7ae      	b.n	9ef4 <_dtoa_r+0x24c>
    9f96:	2301      	movs	r3, #1
    9f98:	930e      	str	r3, [sp, #56]	; 0x38
    9f9a:	e7f5      	b.n	9f88 <_dtoa_r+0x2e0>
    9f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f9e:	4699      	mov	r9, r3
    9fa0:	9309      	str	r3, [sp, #36]	; 0x24
    9fa2:	e7b6      	b.n	9f12 <_dtoa_r+0x26a>
    9fa4:	3101      	adds	r1, #1
    9fa6:	0052      	lsls	r2, r2, #1
    9fa8:	e7b7      	b.n	9f1a <_dtoa_r+0x272>
    9faa:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9fae:	f1b9 0f0e 	cmp.w	r9, #14
    9fb2:	9a08      	ldr	r2, [sp, #32]
    9fb4:	601a      	str	r2, [r3, #0]
    9fb6:	d86f      	bhi.n	a098 <_dtoa_r+0x3f0>
    9fb8:	2c00      	cmp	r4, #0
    9fba:	d06d      	beq.n	a098 <_dtoa_r+0x3f0>
    9fbc:	2f00      	cmp	r7, #0
    9fbe:	dd36      	ble.n	a02e <_dtoa_r+0x386>
    9fc0:	f007 020f 	and.w	r2, r7, #15
    9fc4:	4ba0      	ldr	r3, [pc, #640]	; (a248 <_dtoa_r+0x5a0>)
    9fc6:	05f8      	lsls	r0, r7, #23
    9fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9fcc:	e9d3 3400 	ldrd	r3, r4, [r3]
    9fd0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9fd4:	ea4f 1427 	mov.w	r4, r7, asr #4
    9fd8:	d517      	bpl.n	a00a <_dtoa_r+0x362>
    9fda:	4b9c      	ldr	r3, [pc, #624]	; (a24c <_dtoa_r+0x5a4>)
    9fdc:	f004 040f 	and.w	r4, r4, #15
    9fe0:	f04f 0803 	mov.w	r8, #3
    9fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9fec:	f7fe fb9a 	bl	8724 <__aeabi_ddiv>
    9ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9ff4:	4d95      	ldr	r5, [pc, #596]	; (a24c <_dtoa_r+0x5a4>)
    9ff6:	b95c      	cbnz	r4, a010 <_dtoa_r+0x368>
    9ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a000:	f7fe fb90 	bl	8724 <__aeabi_ddiv>
    a004:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a008:	e02b      	b.n	a062 <_dtoa_r+0x3ba>
    a00a:	f04f 0802 	mov.w	r8, #2
    a00e:	e7f1      	b.n	9ff4 <_dtoa_r+0x34c>
    a010:	07e1      	lsls	r1, r4, #31
    a012:	d509      	bpl.n	a028 <_dtoa_r+0x380>
    a014:	f108 0801 	add.w	r8, r8, #1
    a018:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a01c:	e9d5 2300 	ldrd	r2, r3, [r5]
    a020:	f7fe fa56 	bl	84d0 <__aeabi_dmul>
    a024:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a028:	1064      	asrs	r4, r4, #1
    a02a:	3508      	adds	r5, #8
    a02c:	e7e3      	b.n	9ff6 <_dtoa_r+0x34e>
    a02e:	f000 8107 	beq.w	a240 <_dtoa_r+0x598>
    a032:	427c      	negs	r4, r7
    a034:	4b84      	ldr	r3, [pc, #528]	; (a248 <_dtoa_r+0x5a0>)
    a036:	4d85      	ldr	r5, [pc, #532]	; (a24c <_dtoa_r+0x5a4>)
    a038:	f04f 0802 	mov.w	r8, #2
    a03c:	f004 020f 	and.w	r2, r4, #15
    a040:	1124      	asrs	r4, r4, #4
    a042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a04e:	f7fe fa3f 	bl	84d0 <__aeabi_dmul>
    a052:	2300      	movs	r3, #0
    a054:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a058:	2c00      	cmp	r4, #0
    a05a:	f040 80e5 	bne.w	a228 <_dtoa_r+0x580>
    a05e:	2b00      	cmp	r3, #0
    a060:	d1d0      	bne.n	a004 <_dtoa_r+0x35c>
    a062:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a064:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a068:	2b00      	cmp	r3, #0
    a06a:	f000 814c 	beq.w	a306 <_dtoa_r+0x65e>
    a06e:	2200      	movs	r2, #0
    a070:	4b77      	ldr	r3, [pc, #476]	; (a250 <_dtoa_r+0x5a8>)
    a072:	4620      	mov	r0, r4
    a074:	4629      	mov	r1, r5
    a076:	f7fe ffb5 	bl	8fe4 <__aeabi_dcmplt>
    a07a:	2800      	cmp	r0, #0
    a07c:	f000 8143 	beq.w	a306 <_dtoa_r+0x65e>
    a080:	f1b9 0f00 	cmp.w	r9, #0
    a084:	f000 813f 	beq.w	a306 <_dtoa_r+0x65e>
    a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a08a:	2b00      	cmp	r3, #0
    a08c:	f300 80e4 	bgt.w	a258 <_dtoa_r+0x5b0>
    a090:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a094:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a098:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a09a:	2b00      	cmp	r3, #0
    a09c:	db02      	blt.n	a0a4 <_dtoa_r+0x3fc>
    a09e:	2f0e      	cmp	r7, #14
    a0a0:	f340 8242 	ble.w	a528 <_dtoa_r+0x880>
    a0a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a0a6:	2a00      	cmp	r2, #0
    a0a8:	f040 8267 	bne.w	a57a <_dtoa_r+0x8d2>
    a0ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a0ae:	2500      	movs	r5, #0
    a0b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a0b4:	f1b8 0f00 	cmp.w	r8, #0
    a0b8:	d00d      	beq.n	a0d6 <_dtoa_r+0x42e>
    a0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a0bc:	2b00      	cmp	r3, #0
    a0be:	dd0a      	ble.n	a0d6 <_dtoa_r+0x42e>
    a0c0:	4543      	cmp	r3, r8
    a0c2:	9a06      	ldr	r2, [sp, #24]
    a0c4:	bfa8      	it	ge
    a0c6:	4643      	movge	r3, r8
    a0c8:	1ad2      	subs	r2, r2, r3
    a0ca:	eba8 0803 	sub.w	r8, r8, r3
    a0ce:	9206      	str	r2, [sp, #24]
    a0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0d2:	1ad3      	subs	r3, r2, r3
    a0d4:	930a      	str	r3, [sp, #40]	; 0x28
    a0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0d8:	b30b      	cbz	r3, a11e <_dtoa_r+0x476>
    a0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0dc:	2b00      	cmp	r3, #0
    a0de:	f000 82a6 	beq.w	a62e <_dtoa_r+0x986>
    a0e2:	2c00      	cmp	r4, #0
    a0e4:	f000 82a1 	beq.w	a62a <_dtoa_r+0x982>
    a0e8:	4629      	mov	r1, r5
    a0ea:	4622      	mov	r2, r4
    a0ec:	4658      	mov	r0, fp
    a0ee:	f01f fa07 	bl	29500 <__pow5mult>
    a0f2:	9a03      	ldr	r2, [sp, #12]
    a0f4:	4601      	mov	r1, r0
    a0f6:	4605      	mov	r5, r0
    a0f8:	4658      	mov	r0, fp
    a0fa:	f01f f957 	bl	293ac <__multiply>
    a0fe:	9903      	ldr	r1, [sp, #12]
    a100:	4606      	mov	r6, r0
    a102:	4658      	mov	r0, fp
    a104:	f01f f8d2 	bl	292ac <_Bfree>
    a108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a10a:	1b1b      	subs	r3, r3, r4
    a10c:	930b      	str	r3, [sp, #44]	; 0x2c
    a10e:	f000 8291 	beq.w	a634 <_dtoa_r+0x98c>
    a112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a114:	4631      	mov	r1, r6
    a116:	4658      	mov	r0, fp
    a118:	f01f f9f2 	bl	29500 <__pow5mult>
    a11c:	9003      	str	r0, [sp, #12]
    a11e:	2101      	movs	r1, #1
    a120:	4658      	mov	r0, fp
    a122:	f01f f92d 	bl	29380 <__i2b>
    a126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a128:	4604      	mov	r4, r0
    a12a:	2b00      	cmp	r3, #0
    a12c:	f000 8284 	beq.w	a638 <_dtoa_r+0x990>
    a130:	461a      	mov	r2, r3
    a132:	4601      	mov	r1, r0
    a134:	4658      	mov	r0, fp
    a136:	f01f f9e3 	bl	29500 <__pow5mult>
    a13a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a13c:	4604      	mov	r4, r0
    a13e:	2b01      	cmp	r3, #1
    a140:	dc03      	bgt.n	a14a <_dtoa_r+0x4a2>
    a142:	9b04      	ldr	r3, [sp, #16]
    a144:	2b00      	cmp	r3, #0
    a146:	f000 827c 	beq.w	a642 <_dtoa_r+0x99a>
    a14a:	2600      	movs	r6, #0
    a14c:	6923      	ldr	r3, [r4, #16]
    a14e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a152:	6918      	ldr	r0, [r3, #16]
    a154:	f026 fc96 	bl	30a84 <__hi0bits>
    a158:	f1c0 0020 	rsb	r0, r0, #32
    a15c:	960f      	str	r6, [sp, #60]	; 0x3c
    a15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a160:	4418      	add	r0, r3
    a162:	f010 001f 	ands.w	r0, r0, #31
    a166:	f000 8291 	beq.w	a68c <_dtoa_r+0x9e4>
    a16a:	f1c0 0320 	rsb	r3, r0, #32
    a16e:	2b04      	cmp	r3, #4
    a170:	f340 8281 	ble.w	a676 <_dtoa_r+0x9ce>
    a174:	f1c0 001c 	rsb	r0, r0, #28
    a178:	9b06      	ldr	r3, [sp, #24]
    a17a:	4403      	add	r3, r0
    a17c:	4480      	add	r8, r0
    a17e:	9306      	str	r3, [sp, #24]
    a180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a182:	4403      	add	r3, r0
    a184:	930a      	str	r3, [sp, #40]	; 0x28
    a186:	9b06      	ldr	r3, [sp, #24]
    a188:	2b00      	cmp	r3, #0
    a18a:	dd05      	ble.n	a198 <_dtoa_r+0x4f0>
    a18c:	461a      	mov	r2, r3
    a18e:	9903      	ldr	r1, [sp, #12]
    a190:	4658      	mov	r0, fp
    a192:	f01f fa0f 	bl	295b4 <__lshift>
    a196:	9003      	str	r0, [sp, #12]
    a198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a19a:	2b00      	cmp	r3, #0
    a19c:	dd05      	ble.n	a1aa <_dtoa_r+0x502>
    a19e:	4621      	mov	r1, r4
    a1a0:	461a      	mov	r2, r3
    a1a2:	4658      	mov	r0, fp
    a1a4:	f01f fa06 	bl	295b4 <__lshift>
    a1a8:	4604      	mov	r4, r0
    a1aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	f000 8276 	beq.w	a69e <_dtoa_r+0x9f6>
    a1b2:	4621      	mov	r1, r4
    a1b4:	9803      	ldr	r0, [sp, #12]
    a1b6:	f026 fcb4 	bl	30b22 <__mcmp>
    a1ba:	2800      	cmp	r0, #0
    a1bc:	f280 826f 	bge.w	a69e <_dtoa_r+0x9f6>
    a1c0:	2300      	movs	r3, #0
    a1c2:	220a      	movs	r2, #10
    a1c4:	9903      	ldr	r1, [sp, #12]
    a1c6:	4658      	mov	r0, fp
    a1c8:	f01f f892 	bl	292f0 <__multadd>
    a1cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a1ce:	1e7e      	subs	r6, r7, #1
    a1d0:	9003      	str	r0, [sp, #12]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	f000 825c 	beq.w	a690 <_dtoa_r+0x9e8>
    a1d8:	2300      	movs	r3, #0
    a1da:	4629      	mov	r1, r5
    a1dc:	220a      	movs	r2, #10
    a1de:	4658      	mov	r0, fp
    a1e0:	f01f f886 	bl	292f0 <__multadd>
    a1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1e6:	4605      	mov	r5, r0
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	dc03      	bgt.n	a1f4 <_dtoa_r+0x54c>
    a1ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1ee:	2b02      	cmp	r3, #2
    a1f0:	f300 825e 	bgt.w	a6b0 <_dtoa_r+0xa08>
    a1f4:	f1b8 0f00 	cmp.w	r8, #0
    a1f8:	dd05      	ble.n	a206 <_dtoa_r+0x55e>
    a1fa:	4629      	mov	r1, r5
    a1fc:	4642      	mov	r2, r8
    a1fe:	4658      	mov	r0, fp
    a200:	f01f f9d8 	bl	295b4 <__lshift>
    a204:	4605      	mov	r5, r0
    a206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a208:	2b00      	cmp	r3, #0
    a20a:	f000 82d0 	beq.w	a7ae <_dtoa_r+0xb06>
    a20e:	6869      	ldr	r1, [r5, #4]
    a210:	4658      	mov	r0, fp
    a212:	f01f f80b 	bl	2922c <_Balloc>
    a216:	4607      	mov	r7, r0
    a218:	2800      	cmp	r0, #0
    a21a:	f040 827f 	bne.w	a71c <_dtoa_r+0xa74>
    a21e:	4b0d      	ldr	r3, [pc, #52]	; (a254 <_dtoa_r+0x5ac>)
    a220:	4602      	mov	r2, r0
    a222:	f240 21ea 	movw	r1, #746	; 0x2ea
    a226:	e553      	b.n	9cd0 <_dtoa_r+0x28>
    a228:	07e2      	lsls	r2, r4, #31
    a22a:	d506      	bpl.n	a23a <_dtoa_r+0x592>
    a22c:	f108 0801 	add.w	r8, r8, #1
    a230:	e9d5 2300 	ldrd	r2, r3, [r5]
    a234:	f7fe f94c 	bl	84d0 <__aeabi_dmul>
    a238:	2301      	movs	r3, #1
    a23a:	1064      	asrs	r4, r4, #1
    a23c:	3508      	adds	r5, #8
    a23e:	e70b      	b.n	a058 <_dtoa_r+0x3b0>
    a240:	f04f 0802 	mov.w	r8, #2
    a244:	e70d      	b.n	a062 <_dtoa_r+0x3ba>
    a246:	bf00      	nop
    a248:	00031760 	.word	0x00031760
    a24c:	00031738 	.word	0x00031738
    a250:	3ff00000 	.word	0x3ff00000
    a254:	00038db7 	.word	0x00038db7
    a258:	4620      	mov	r0, r4
    a25a:	2200      	movs	r2, #0
    a25c:	4bac      	ldr	r3, [pc, #688]	; (a510 <_dtoa_r+0x868>)
    a25e:	4629      	mov	r1, r5
    a260:	f7fe f936 	bl	84d0 <__aeabi_dmul>
    a264:	1e7e      	subs	r6, r7, #1
    a266:	f108 0801 	add.w	r8, r8, #1
    a26a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a26c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a270:	4640      	mov	r0, r8
    a272:	f7fe f8c3 	bl	83fc <__aeabi_i2d>
    a276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a27a:	f7fe f929 	bl	84d0 <__aeabi_dmul>
    a27e:	4ba5      	ldr	r3, [pc, #660]	; (a514 <_dtoa_r+0x86c>)
    a280:	2200      	movs	r2, #0
    a282:	f7fd ff6f 	bl	8164 <__adddf3>
    a286:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a28a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a28e:	9311      	str	r3, [sp, #68]	; 0x44
    a290:	2c00      	cmp	r4, #0
    a292:	d13b      	bne.n	a30c <_dtoa_r+0x664>
    a294:	2200      	movs	r2, #0
    a296:	4ba0      	ldr	r3, [pc, #640]	; (a518 <_dtoa_r+0x870>)
    a298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a29c:	f7fd ff60 	bl	8160 <__aeabi_dsub>
    a2a0:	4602      	mov	r2, r0
    a2a2:	460b      	mov	r3, r1
    a2a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a2a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a2ac:	f7fe feb8 	bl	9020 <__aeabi_dcmpgt>
    a2b0:	2800      	cmp	r0, #0
    a2b2:	f040 8157 	bne.w	a564 <_dtoa_r+0x8bc>
    a2b6:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    a2ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a2c2:	f7fe fe8f 	bl	8fe4 <__aeabi_dcmplt>
    a2c6:	2800      	cmp	r0, #0
    a2c8:	f43f aee2 	beq.w	a090 <_dtoa_r+0x3e8>
    a2cc:	2400      	movs	r4, #0
    a2ce:	4625      	mov	r5, r4
    a2d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a2d2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a2d6:	43de      	mvns	r6, r3
    a2d8:	f04f 0800 	mov.w	r8, #0
    a2dc:	4621      	mov	r1, r4
    a2de:	4658      	mov	r0, fp
    a2e0:	f01e ffe4 	bl	292ac <_Bfree>
    a2e4:	2d00      	cmp	r5, #0
    a2e6:	f000 80a9 	beq.w	a43c <_dtoa_r+0x794>
    a2ea:	f1b8 0f00 	cmp.w	r8, #0
    a2ee:	d005      	beq.n	a2fc <_dtoa_r+0x654>
    a2f0:	45a8      	cmp	r8, r5
    a2f2:	d003      	beq.n	a2fc <_dtoa_r+0x654>
    a2f4:	4641      	mov	r1, r8
    a2f6:	4658      	mov	r0, fp
    a2f8:	f01e ffd8 	bl	292ac <_Bfree>
    a2fc:	4629      	mov	r1, r5
    a2fe:	4658      	mov	r0, fp
    a300:	f01e ffd4 	bl	292ac <_Bfree>
    a304:	e09a      	b.n	a43c <_dtoa_r+0x794>
    a306:	463e      	mov	r6, r7
    a308:	464c      	mov	r4, r9
    a30a:	e7b1      	b.n	a270 <_dtoa_r+0x5c8>
    a30c:	4b83      	ldr	r3, [pc, #524]	; (a51c <_dtoa_r+0x874>)
    a30e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a312:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a316:	9b08      	ldr	r3, [sp, #32]
    a318:	441c      	add	r4, r3
    a31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a31c:	2b00      	cmp	r3, #0
    a31e:	d04a      	beq.n	a3b6 <_dtoa_r+0x70e>
    a320:	4602      	mov	r2, r0
    a322:	460b      	mov	r3, r1
    a324:	2000      	movs	r0, #0
    a326:	497e      	ldr	r1, [pc, #504]	; (a520 <_dtoa_r+0x878>)
    a328:	f7fe f9fc 	bl	8724 <__aeabi_ddiv>
    a32c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a330:	f7fd ff16 	bl	8160 <__aeabi_dsub>
    a334:	f8dd a020 	ldr.w	sl, [sp, #32]
    a338:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a33c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a340:	f7fe fe8e 	bl	9060 <__aeabi_d2iz>
    a344:	4605      	mov	r5, r0
    a346:	f7fe f859 	bl	83fc <__aeabi_i2d>
    a34a:	4602      	mov	r2, r0
    a34c:	3530      	adds	r5, #48	; 0x30
    a34e:	460b      	mov	r3, r1
    a350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a354:	f7fd ff04 	bl	8160 <__aeabi_dsub>
    a358:	f80a 5b01 	strb.w	r5, [sl], #1
    a35c:	4602      	mov	r2, r0
    a35e:	460b      	mov	r3, r1
    a360:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a364:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a368:	f7fe fe5a 	bl	9020 <__aeabi_dcmpgt>
    a36c:	2800      	cmp	r0, #0
    a36e:	d165      	bne.n	a43c <_dtoa_r+0x794>
    a370:	2000      	movs	r0, #0
    a372:	496c      	ldr	r1, [pc, #432]	; (a524 <_dtoa_r+0x87c>)
    a374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a378:	f7fd fef2 	bl	8160 <__aeabi_dsub>
    a37c:	4602      	mov	r2, r0
    a37e:	460b      	mov	r3, r1
    a380:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a384:	f7fe fe4c 	bl	9020 <__aeabi_dcmpgt>
    a388:	2800      	cmp	r0, #0
    a38a:	f040 810d 	bne.w	a5a8 <_dtoa_r+0x900>
    a38e:	45a2      	cmp	sl, r4
    a390:	f000 80ea 	beq.w	a568 <_dtoa_r+0x8c0>
    a394:	2200      	movs	r2, #0
    a396:	4b5e      	ldr	r3, [pc, #376]	; (a510 <_dtoa_r+0x868>)
    a398:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a39c:	f7fe f898 	bl	84d0 <__aeabi_dmul>
    a3a0:	2200      	movs	r2, #0
    a3a2:	4b5b      	ldr	r3, [pc, #364]	; (a510 <_dtoa_r+0x868>)
    a3a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a3a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3ac:	f7fe f890 	bl	84d0 <__aeabi_dmul>
    a3b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a3b4:	e7c2      	b.n	a33c <_dtoa_r+0x694>
    a3b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a3ba:	f7fe f889 	bl	84d0 <__aeabi_dmul>
    a3be:	46a0      	mov	r8, r4
    a3c0:	f8dd a020 	ldr.w	sl, [sp, #32]
    a3c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a3c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3cc:	f7fe fe48 	bl	9060 <__aeabi_d2iz>
    a3d0:	4605      	mov	r5, r0
    a3d2:	f7fe f813 	bl	83fc <__aeabi_i2d>
    a3d6:	4602      	mov	r2, r0
    a3d8:	3530      	adds	r5, #48	; 0x30
    a3da:	460b      	mov	r3, r1
    a3dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3e0:	f7fd febe 	bl	8160 <__aeabi_dsub>
    a3e4:	f80a 5b01 	strb.w	r5, [sl], #1
    a3e8:	4602      	mov	r2, r0
    a3ea:	460b      	mov	r3, r1
    a3ec:	45a2      	cmp	sl, r4
    a3ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a3f2:	f04f 0200 	mov.w	r2, #0
    a3f6:	d123      	bne.n	a440 <_dtoa_r+0x798>
    a3f8:	4b49      	ldr	r3, [pc, #292]	; (a520 <_dtoa_r+0x878>)
    a3fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a3fe:	f7fd feb1 	bl	8164 <__adddf3>
    a402:	4602      	mov	r2, r0
    a404:	460b      	mov	r3, r1
    a406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a40a:	f7fe fe09 	bl	9020 <__aeabi_dcmpgt>
    a40e:	2800      	cmp	r0, #0
    a410:	f040 80ca 	bne.w	a5a8 <_dtoa_r+0x900>
    a414:	2000      	movs	r0, #0
    a416:	4942      	ldr	r1, [pc, #264]	; (a520 <_dtoa_r+0x878>)
    a418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a41c:	f7fd fea0 	bl	8160 <__aeabi_dsub>
    a420:	4602      	mov	r2, r0
    a422:	460b      	mov	r3, r1
    a424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a428:	f7fe fddc 	bl	8fe4 <__aeabi_dcmplt>
    a42c:	b170      	cbz	r0, a44c <_dtoa_r+0x7a4>
    a42e:	46c2      	mov	sl, r8
    a430:	f108 38ff 	add.w	r8, r8, #4294967295
    a434:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a438:	2b30      	cmp	r3, #48	; 0x30
    a43a:	d0f8      	beq.n	a42e <_dtoa_r+0x786>
    a43c:	4637      	mov	r7, r6
    a43e:	e055      	b.n	a4ec <_dtoa_r+0x844>
    a440:	4b33      	ldr	r3, [pc, #204]	; (a510 <_dtoa_r+0x868>)
    a442:	f7fe f845 	bl	84d0 <__aeabi_dmul>
    a446:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a44a:	e7bd      	b.n	a3c8 <_dtoa_r+0x720>
    a44c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a450:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a454:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a456:	2b00      	cmp	r3, #0
    a458:	f6ff ae28 	blt.w	a0ac <_dtoa_r+0x404>
    a45c:	2f0e      	cmp	r7, #14
    a45e:	f73f ae25 	bgt.w	a0ac <_dtoa_r+0x404>
    a462:	4b2e      	ldr	r3, [pc, #184]	; (a51c <_dtoa_r+0x874>)
    a464:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a468:	e9d3 3400 	ldrd	r3, r4, [r3]
    a46c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a470:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a472:	2b00      	cmp	r3, #0
    a474:	da02      	bge.n	a47c <_dtoa_r+0x7d4>
    a476:	f1b9 0f00 	cmp.w	r9, #0
    a47a:	d064      	beq.n	a546 <_dtoa_r+0x89e>
    a47c:	f8dd a020 	ldr.w	sl, [sp, #32]
    a480:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a484:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a488:	4620      	mov	r0, r4
    a48a:	4629      	mov	r1, r5
    a48c:	f7fe f94a 	bl	8724 <__aeabi_ddiv>
    a490:	f7fe fde6 	bl	9060 <__aeabi_d2iz>
    a494:	4606      	mov	r6, r0
    a496:	f7fd ffb1 	bl	83fc <__aeabi_i2d>
    a49a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a49e:	f7fe f817 	bl	84d0 <__aeabi_dmul>
    a4a2:	4602      	mov	r2, r0
    a4a4:	4620      	mov	r0, r4
    a4a6:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a4aa:	460b      	mov	r3, r1
    a4ac:	4629      	mov	r1, r5
    a4ae:	f7fd fe57 	bl	8160 <__aeabi_dsub>
    a4b2:	f80a 4b01 	strb.w	r4, [sl], #1
    a4b6:	9c08      	ldr	r4, [sp, #32]
    a4b8:	4602      	mov	r2, r0
    a4ba:	460b      	mov	r3, r1
    a4bc:	ebaa 0404 	sub.w	r4, sl, r4
    a4c0:	45a1      	cmp	r9, r4
    a4c2:	f040 8082 	bne.w	a5ca <_dtoa_r+0x922>
    a4c6:	f7fd fe4d 	bl	8164 <__adddf3>
    a4ca:	4604      	mov	r4, r0
    a4cc:	460d      	mov	r5, r1
    a4ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4d2:	f7fe fda5 	bl	9020 <__aeabi_dcmpgt>
    a4d6:	2800      	cmp	r0, #0
    a4d8:	d165      	bne.n	a5a6 <_dtoa_r+0x8fe>
    a4da:	4620      	mov	r0, r4
    a4dc:	4629      	mov	r1, r5
    a4de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4e2:	f7fe fd75 	bl	8fd0 <__aeabi_dcmpeq>
    a4e6:	b108      	cbz	r0, a4ec <_dtoa_r+0x844>
    a4e8:	07f3      	lsls	r3, r6, #31
    a4ea:	d45c      	bmi.n	a5a6 <_dtoa_r+0x8fe>
    a4ec:	9903      	ldr	r1, [sp, #12]
    a4ee:	4658      	mov	r0, fp
    a4f0:	f01e fedc 	bl	292ac <_Bfree>
    a4f4:	2300      	movs	r3, #0
    a4f6:	3701      	adds	r7, #1
    a4f8:	f88a 3000 	strb.w	r3, [sl]
    a4fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4fe:	601f      	str	r7, [r3, #0]
    a500:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a502:	2b00      	cmp	r3, #0
    a504:	f43f ac1c 	beq.w	9d40 <_dtoa_r+0x98>
    a508:	f8c3 a000 	str.w	sl, [r3]
    a50c:	e418      	b.n	9d40 <_dtoa_r+0x98>
    a50e:	bf00      	nop
    a510:	40240000 	.word	0x40240000
    a514:	401c0000 	.word	0x401c0000
    a518:	40140000 	.word	0x40140000
    a51c:	00031760 	.word	0x00031760
    a520:	3fe00000 	.word	0x3fe00000
    a524:	3ff00000 	.word	0x3ff00000
    a528:	4ba2      	ldr	r3, [pc, #648]	; (a7b4 <_dtoa_r+0xb0c>)
    a52a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a52e:	e9d3 3400 	ldrd	r3, r4, [r3]
    a532:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a536:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a538:	2b00      	cmp	r3, #0
    a53a:	da9f      	bge.n	a47c <_dtoa_r+0x7d4>
    a53c:	f1b9 0f00 	cmp.w	r9, #0
    a540:	dc9c      	bgt.n	a47c <_dtoa_r+0x7d4>
    a542:	f47f aec3 	bne.w	a2cc <_dtoa_r+0x624>
    a546:	2200      	movs	r2, #0
    a548:	4b9b      	ldr	r3, [pc, #620]	; (a7b8 <_dtoa_r+0xb10>)
    a54a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a54e:	f7fd ffbf 	bl	84d0 <__aeabi_dmul>
    a552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a556:	f7fe fd59 	bl	900c <__aeabi_dcmpge>
    a55a:	4604      	mov	r4, r0
    a55c:	2800      	cmp	r0, #0
    a55e:	f47f aeb5 	bne.w	a2cc <_dtoa_r+0x624>
    a562:	463e      	mov	r6, r7
    a564:	4625      	mov	r5, r4
    a566:	e0b4      	b.n	a6d2 <_dtoa_r+0xa2a>
    a568:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a56c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a570:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a572:	2b00      	cmp	r3, #0
    a574:	db01      	blt.n	a57a <_dtoa_r+0x8d2>
    a576:	2f0e      	cmp	r7, #14
    a578:	ddd6      	ble.n	a528 <_dtoa_r+0x880>
    a57a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a57c:	2a01      	cmp	r2, #1
    a57e:	dc36      	bgt.n	a5ee <_dtoa_r+0x946>
    a580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a582:	b382      	cbz	r2, a5e6 <_dtoa_r+0x93e>
    a584:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a588:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a58a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a58e:	9a06      	ldr	r2, [sp, #24]
    a590:	2101      	movs	r1, #1
    a592:	4658      	mov	r0, fp
    a594:	441a      	add	r2, r3
    a596:	9206      	str	r2, [sp, #24]
    a598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a59a:	441a      	add	r2, r3
    a59c:	920a      	str	r2, [sp, #40]	; 0x28
    a59e:	f01e feef 	bl	29380 <__i2b>
    a5a2:	4605      	mov	r5, r0
    a5a4:	e586      	b.n	a0b4 <_dtoa_r+0x40c>
    a5a6:	463e      	mov	r6, r7
    a5a8:	4653      	mov	r3, sl
    a5aa:	469a      	mov	sl, r3
    a5ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a5b0:	2a39      	cmp	r2, #57	; 0x39
    a5b2:	d106      	bne.n	a5c2 <_dtoa_r+0x91a>
    a5b4:	9a08      	ldr	r2, [sp, #32]
    a5b6:	429a      	cmp	r2, r3
    a5b8:	d1f7      	bne.n	a5aa <_dtoa_r+0x902>
    a5ba:	2230      	movs	r2, #48	; 0x30
    a5bc:	9908      	ldr	r1, [sp, #32]
    a5be:	3601      	adds	r6, #1
    a5c0:	700a      	strb	r2, [r1, #0]
    a5c2:	781a      	ldrb	r2, [r3, #0]
    a5c4:	3201      	adds	r2, #1
    a5c6:	701a      	strb	r2, [r3, #0]
    a5c8:	e738      	b.n	a43c <_dtoa_r+0x794>
    a5ca:	2200      	movs	r2, #0
    a5cc:	4b7b      	ldr	r3, [pc, #492]	; (a7bc <_dtoa_r+0xb14>)
    a5ce:	f7fd ff7f 	bl	84d0 <__aeabi_dmul>
    a5d2:	2200      	movs	r2, #0
    a5d4:	2300      	movs	r3, #0
    a5d6:	4604      	mov	r4, r0
    a5d8:	460d      	mov	r5, r1
    a5da:	f7fe fcf9 	bl	8fd0 <__aeabi_dcmpeq>
    a5de:	2800      	cmp	r0, #0
    a5e0:	f43f af50 	beq.w	a484 <_dtoa_r+0x7dc>
    a5e4:	e782      	b.n	a4ec <_dtoa_r+0x844>
    a5e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a5e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a5ec:	e7cc      	b.n	a588 <_dtoa_r+0x8e0>
    a5ee:	f109 34ff 	add.w	r4, r9, #4294967295
    a5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5f4:	42a3      	cmp	r3, r4
    a5f6:	db08      	blt.n	a60a <_dtoa_r+0x962>
    a5f8:	f1b9 0f00 	cmp.w	r9, #0
    a5fc:	eba3 0404 	sub.w	r4, r3, r4
    a600:	db0e      	blt.n	a620 <_dtoa_r+0x978>
    a602:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a606:	464b      	mov	r3, r9
    a608:	e7c1      	b.n	a58e <_dtoa_r+0x8e6>
    a60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a60c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a60e:	1ae3      	subs	r3, r4, r3
    a610:	940b      	str	r4, [sp, #44]	; 0x2c
    a612:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a616:	2400      	movs	r4, #0
    a618:	441a      	add	r2, r3
    a61a:	464b      	mov	r3, r9
    a61c:	920f      	str	r2, [sp, #60]	; 0x3c
    a61e:	e7b6      	b.n	a58e <_dtoa_r+0x8e6>
    a620:	9b06      	ldr	r3, [sp, #24]
    a622:	eba3 0809 	sub.w	r8, r3, r9
    a626:	2300      	movs	r3, #0
    a628:	e7b1      	b.n	a58e <_dtoa_r+0x8e6>
    a62a:	9e03      	ldr	r6, [sp, #12]
    a62c:	e571      	b.n	a112 <_dtoa_r+0x46a>
    a62e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a630:	9903      	ldr	r1, [sp, #12]
    a632:	e570      	b.n	a116 <_dtoa_r+0x46e>
    a634:	9603      	str	r6, [sp, #12]
    a636:	e572      	b.n	a11e <_dtoa_r+0x476>
    a638:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a63a:	2b01      	cmp	r3, #1
    a63c:	dc17      	bgt.n	a66e <_dtoa_r+0x9c6>
    a63e:	9b04      	ldr	r3, [sp, #16]
    a640:	b9ab      	cbnz	r3, a66e <_dtoa_r+0x9c6>
    a642:	9b05      	ldr	r3, [sp, #20]
    a644:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a648:	b99b      	cbnz	r3, a672 <_dtoa_r+0x9ca>
    a64a:	9b05      	ldr	r3, [sp, #20]
    a64c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a650:	0d36      	lsrs	r6, r6, #20
    a652:	0536      	lsls	r6, r6, #20
    a654:	b136      	cbz	r6, a664 <_dtoa_r+0x9bc>
    a656:	9b06      	ldr	r3, [sp, #24]
    a658:	2601      	movs	r6, #1
    a65a:	3301      	adds	r3, #1
    a65c:	9306      	str	r3, [sp, #24]
    a65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a660:	3301      	adds	r3, #1
    a662:	930a      	str	r3, [sp, #40]	; 0x28
    a664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a666:	2b00      	cmp	r3, #0
    a668:	f47f ad70 	bne.w	a14c <_dtoa_r+0x4a4>
    a66c:	960f      	str	r6, [sp, #60]	; 0x3c
    a66e:	2001      	movs	r0, #1
    a670:	e575      	b.n	a15e <_dtoa_r+0x4b6>
    a672:	2600      	movs	r6, #0
    a674:	e7f6      	b.n	a664 <_dtoa_r+0x9bc>
    a676:	f43f ad86 	beq.w	a186 <_dtoa_r+0x4de>
    a67a:	331c      	adds	r3, #28
    a67c:	9a06      	ldr	r2, [sp, #24]
    a67e:	441a      	add	r2, r3
    a680:	4498      	add	r8, r3
    a682:	9206      	str	r2, [sp, #24]
    a684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a686:	441a      	add	r2, r3
    a688:	920a      	str	r2, [sp, #40]	; 0x28
    a68a:	e57c      	b.n	a186 <_dtoa_r+0x4de>
    a68c:	4603      	mov	r3, r0
    a68e:	e7f4      	b.n	a67a <_dtoa_r+0x9d2>
    a690:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a692:	2b00      	cmp	r3, #0
    a694:	dc2b      	bgt.n	a6ee <_dtoa_r+0xa46>
    a696:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a698:	2b02      	cmp	r3, #2
    a69a:	dc09      	bgt.n	a6b0 <_dtoa_r+0xa08>
    a69c:	e027      	b.n	a6ee <_dtoa_r+0xa46>
    a69e:	f1b9 0f00 	cmp.w	r9, #0
    a6a2:	dc1d      	bgt.n	a6e0 <_dtoa_r+0xa38>
    a6a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a6a6:	2b02      	cmp	r3, #2
    a6a8:	dd1a      	ble.n	a6e0 <_dtoa_r+0xa38>
    a6aa:	463e      	mov	r6, r7
    a6ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6b2:	2b00      	cmp	r3, #0
    a6b4:	f47f ae0c 	bne.w	a2d0 <_dtoa_r+0x628>
    a6b8:	4621      	mov	r1, r4
    a6ba:	2205      	movs	r2, #5
    a6bc:	4658      	mov	r0, fp
    a6be:	f01e fe17 	bl	292f0 <__multadd>
    a6c2:	4601      	mov	r1, r0
    a6c4:	4604      	mov	r4, r0
    a6c6:	9803      	ldr	r0, [sp, #12]
    a6c8:	f026 fa2b 	bl	30b22 <__mcmp>
    a6cc:	2800      	cmp	r0, #0
    a6ce:	f77f adff 	ble.w	a2d0 <_dtoa_r+0x628>
    a6d2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a6d6:	2331      	movs	r3, #49	; 0x31
    a6d8:	3601      	adds	r6, #1
    a6da:	f80a 3b01 	strb.w	r3, [sl], #1
    a6de:	e5fb      	b.n	a2d8 <_dtoa_r+0x630>
    a6e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6e2:	463e      	mov	r6, r7
    a6e4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	f47f ad83 	bne.w	a1f4 <_dtoa_r+0x54c>
    a6ee:	9f08      	ldr	r7, [sp, #32]
    a6f0:	4621      	mov	r1, r4
    a6f2:	9803      	ldr	r0, [sp, #12]
    a6f4:	f026 f904 	bl	30900 <quorem>
    a6f8:	9b08      	ldr	r3, [sp, #32]
    a6fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a700:	f807 9b01 	strb.w	r9, [r7], #1
    a704:	1afb      	subs	r3, r7, r3
    a706:	429a      	cmp	r2, r3
    a708:	f340 80cb 	ble.w	a8a2 <_dtoa_r+0xbfa>
    a70c:	2300      	movs	r3, #0
    a70e:	220a      	movs	r2, #10
    a710:	9903      	ldr	r1, [sp, #12]
    a712:	4658      	mov	r0, fp
    a714:	f01e fdec 	bl	292f0 <__multadd>
    a718:	9003      	str	r0, [sp, #12]
    a71a:	e7e9      	b.n	a6f0 <_dtoa_r+0xa48>
    a71c:	692a      	ldr	r2, [r5, #16]
    a71e:	f105 010c 	add.w	r1, r5, #12
    a722:	300c      	adds	r0, #12
    a724:	3202      	adds	r2, #2
    a726:	0092      	lsls	r2, r2, #2
    a728:	f025 ff21 	bl	3056e <memcpy>
    a72c:	2201      	movs	r2, #1
    a72e:	4639      	mov	r1, r7
    a730:	4658      	mov	r0, fp
    a732:	f01e ff3f 	bl	295b4 <__lshift>
    a736:	9b08      	ldr	r3, [sp, #32]
    a738:	46a8      	mov	r8, r5
    a73a:	4605      	mov	r5, r0
    a73c:	f103 0a01 	add.w	sl, r3, #1
    a740:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a744:	4413      	add	r3, r2
    a746:	930a      	str	r3, [sp, #40]	; 0x28
    a748:	9b04      	ldr	r3, [sp, #16]
    a74a:	f003 0301 	and.w	r3, r3, #1
    a74e:	930b      	str	r3, [sp, #44]	; 0x2c
    a750:	f10a 33ff 	add.w	r3, sl, #4294967295
    a754:	4621      	mov	r1, r4
    a756:	9803      	ldr	r0, [sp, #12]
    a758:	9306      	str	r3, [sp, #24]
    a75a:	f026 f8d1 	bl	30900 <quorem>
    a75e:	4641      	mov	r1, r8
    a760:	9009      	str	r0, [sp, #36]	; 0x24
    a762:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a766:	9803      	ldr	r0, [sp, #12]
    a768:	f026 f9db 	bl	30b22 <__mcmp>
    a76c:	462a      	mov	r2, r5
    a76e:	4621      	mov	r1, r4
    a770:	4607      	mov	r7, r0
    a772:	4658      	mov	r0, fp
    a774:	f01e ff8a 	bl	2968c <__mdiff>
    a778:	68c2      	ldr	r2, [r0, #12]
    a77a:	4601      	mov	r1, r0
    a77c:	b302      	cbz	r2, a7c0 <_dtoa_r+0xb18>
    a77e:	4658      	mov	r0, fp
    a780:	f01e fd94 	bl	292ac <_Bfree>
    a784:	2f00      	cmp	r7, #0
    a786:	da3a      	bge.n	a7fe <_dtoa_r+0xb56>
    a788:	2201      	movs	r2, #1
    a78a:	9903      	ldr	r1, [sp, #12]
    a78c:	4658      	mov	r0, fp
    a78e:	f01e ff11 	bl	295b4 <__lshift>
    a792:	4621      	mov	r1, r4
    a794:	9003      	str	r0, [sp, #12]
    a796:	f026 f9c4 	bl	30b22 <__mcmp>
    a79a:	2800      	cmp	r0, #0
    a79c:	dc03      	bgt.n	a7a6 <_dtoa_r+0xafe>
    a79e:	d129      	bne.n	a7f4 <_dtoa_r+0xb4c>
    a7a0:	f019 0f01 	tst.w	r9, #1
    a7a4:	d026      	beq.n	a7f4 <_dtoa_r+0xb4c>
    a7a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7aa:	d11d      	bne.n	a7e8 <_dtoa_r+0xb40>
    a7ac:	e032      	b.n	a814 <_dtoa_r+0xb6c>
    a7ae:	4628      	mov	r0, r5
    a7b0:	e7c1      	b.n	a736 <_dtoa_r+0xa8e>
    a7b2:	bf00      	nop
    a7b4:	00031760 	.word	0x00031760
    a7b8:	40140000 	.word	0x40140000
    a7bc:	40240000 	.word	0x40240000
    a7c0:	900e      	str	r0, [sp, #56]	; 0x38
    a7c2:	9803      	ldr	r0, [sp, #12]
    a7c4:	f026 f9ad 	bl	30b22 <__mcmp>
    a7c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    a7ca:	900c      	str	r0, [sp, #48]	; 0x30
    a7cc:	4658      	mov	r0, fp
    a7ce:	f01e fd6d 	bl	292ac <_Bfree>
    a7d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7d4:	bb5a      	cbnz	r2, a82e <_dtoa_r+0xb86>
    a7d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7d8:	b953      	cbnz	r3, a7f0 <_dtoa_r+0xb48>
    a7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7dc:	b943      	cbnz	r3, a7f0 <_dtoa_r+0xb48>
    a7de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7e2:	d017      	beq.n	a814 <_dtoa_r+0xb6c>
    a7e4:	2f00      	cmp	r7, #0
    a7e6:	dd05      	ble.n	a7f4 <_dtoa_r+0xb4c>
    a7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a7ee:	e001      	b.n	a7f4 <_dtoa_r+0xb4c>
    a7f0:	2f00      	cmp	r7, #0
    a7f2:	da2a      	bge.n	a84a <_dtoa_r+0xba2>
    a7f4:	f8dd a018 	ldr.w	sl, [sp, #24]
    a7f8:	f80a 9b01 	strb.w	r9, [sl], #1
    a7fc:	e56e      	b.n	a2dc <_dtoa_r+0x634>
    a7fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a800:	433b      	orrs	r3, r7
    a802:	d104      	bne.n	a80e <_dtoa_r+0xb66>
    a804:	9b04      	ldr	r3, [sp, #16]
    a806:	f003 0301 	and.w	r3, r3, #1
    a80a:	2b00      	cmp	r3, #0
    a80c:	d0bc      	beq.n	a788 <_dtoa_r+0xae0>
    a80e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a812:	d136      	bne.n	a882 <_dtoa_r+0xbda>
    a814:	9f06      	ldr	r7, [sp, #24]
    a816:	2339      	movs	r3, #57	; 0x39
    a818:	f807 3b01 	strb.w	r3, [r7], #1
    a81c:	46ba      	mov	sl, r7
    a81e:	3f01      	subs	r7, #1
    a820:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a824:	2b39      	cmp	r3, #57	; 0x39
    a826:	d05a      	beq.n	a8de <_dtoa_r+0xc36>
    a828:	3301      	adds	r3, #1
    a82a:	703b      	strb	r3, [r7, #0]
    a82c:	e556      	b.n	a2dc <_dtoa_r+0x634>
    a82e:	2f00      	cmp	r7, #0
    a830:	db06      	blt.n	a840 <_dtoa_r+0xb98>
    a832:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a834:	433b      	orrs	r3, r7
    a836:	d106      	bne.n	a846 <_dtoa_r+0xb9e>
    a838:	9b04      	ldr	r3, [sp, #16]
    a83a:	f003 0301 	and.w	r3, r3, #1
    a83e:	b913      	cbnz	r3, a846 <_dtoa_r+0xb9e>
    a840:	2a00      	cmp	r2, #0
    a842:	dca1      	bgt.n	a788 <_dtoa_r+0xae0>
    a844:	e7d6      	b.n	a7f4 <_dtoa_r+0xb4c>
    a846:	2a00      	cmp	r2, #0
    a848:	dce1      	bgt.n	a80e <_dtoa_r+0xb66>
    a84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a84c:	4657      	mov	r7, sl
    a84e:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a852:	4553      	cmp	r3, sl
    a854:	d02e      	beq.n	a8b4 <_dtoa_r+0xc0c>
    a856:	2300      	movs	r3, #0
    a858:	220a      	movs	r2, #10
    a85a:	9903      	ldr	r1, [sp, #12]
    a85c:	4658      	mov	r0, fp
    a85e:	f01e fd47 	bl	292f0 <__multadd>
    a862:	45a8      	cmp	r8, r5
    a864:	9003      	str	r0, [sp, #12]
    a866:	f04f 0300 	mov.w	r3, #0
    a86a:	f04f 020a 	mov.w	r2, #10
    a86e:	4641      	mov	r1, r8
    a870:	4658      	mov	r0, fp
    a872:	d10b      	bne.n	a88c <_dtoa_r+0xbe4>
    a874:	f01e fd3c 	bl	292f0 <__multadd>
    a878:	4680      	mov	r8, r0
    a87a:	4605      	mov	r5, r0
    a87c:	f10a 0a01 	add.w	sl, sl, #1
    a880:	e766      	b.n	a750 <_dtoa_r+0xaa8>
    a882:	f8dd a018 	ldr.w	sl, [sp, #24]
    a886:	f109 0901 	add.w	r9, r9, #1
    a88a:	e7b5      	b.n	a7f8 <_dtoa_r+0xb50>
    a88c:	f01e fd30 	bl	292f0 <__multadd>
    a890:	4629      	mov	r1, r5
    a892:	4680      	mov	r8, r0
    a894:	2300      	movs	r3, #0
    a896:	220a      	movs	r2, #10
    a898:	4658      	mov	r0, fp
    a89a:	f01e fd29 	bl	292f0 <__multadd>
    a89e:	4605      	mov	r5, r0
    a8a0:	e7ec      	b.n	a87c <_dtoa_r+0xbd4>
    a8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8a4:	f04f 0800 	mov.w	r8, #0
    a8a8:	2b00      	cmp	r3, #0
    a8aa:	bfcc      	ite	gt
    a8ac:	461f      	movgt	r7, r3
    a8ae:	2701      	movle	r7, #1
    a8b0:	9b08      	ldr	r3, [sp, #32]
    a8b2:	441f      	add	r7, r3
    a8b4:	2201      	movs	r2, #1
    a8b6:	9903      	ldr	r1, [sp, #12]
    a8b8:	4658      	mov	r0, fp
    a8ba:	f01e fe7b 	bl	295b4 <__lshift>
    a8be:	4621      	mov	r1, r4
    a8c0:	9003      	str	r0, [sp, #12]
    a8c2:	f026 f92e 	bl	30b22 <__mcmp>
    a8c6:	2800      	cmp	r0, #0
    a8c8:	dca8      	bgt.n	a81c <_dtoa_r+0xb74>
    a8ca:	d102      	bne.n	a8d2 <_dtoa_r+0xc2a>
    a8cc:	f019 0f01 	tst.w	r9, #1
    a8d0:	d1a4      	bne.n	a81c <_dtoa_r+0xb74>
    a8d2:	46ba      	mov	sl, r7
    a8d4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a8d8:	2b30      	cmp	r3, #48	; 0x30
    a8da:	d0fa      	beq.n	a8d2 <_dtoa_r+0xc2a>
    a8dc:	e4fe      	b.n	a2dc <_dtoa_r+0x634>
    a8de:	9b08      	ldr	r3, [sp, #32]
    a8e0:	42bb      	cmp	r3, r7
    a8e2:	d19b      	bne.n	a81c <_dtoa_r+0xb74>
    a8e4:	2331      	movs	r3, #49	; 0x31
    a8e6:	9a08      	ldr	r2, [sp, #32]
    a8e8:	3601      	adds	r6, #1
    a8ea:	7013      	strb	r3, [r2, #0]
    a8ec:	e4f6      	b.n	a2dc <_dtoa_r+0x634>
    a8ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	f47f aa20 	bne.w	9d36 <_dtoa_r+0x8e>
    a8f6:	4b01      	ldr	r3, [pc, #4]	; (a8fc <_dtoa_r+0xc54>)
    a8f8:	f7ff ba3f 	b.w	9d7a <_dtoa_r+0xd2>
    a8fc:	00038d1f 	.word	0x00038d1f

0000a900 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    a900:	4603      	mov	r3, r0
    a902:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a904:	2401      	movs	r4, #1
    a906:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    a908:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a90a:	409c      	lsls	r4, r3
    a90c:	6843      	ldr	r3, [r0, #4]
    a90e:	681b      	ldr	r3, [r3, #0]
    a910:	421c      	tst	r4, r3
    a912:	d10e      	bne.n	a932 <gpio_pin_get_dt+0x32>
    a914:	490e      	ldr	r1, [pc, #56]	; (a950 <gpio_pin_get_dt+0x50>)
    a916:	f240 43e4 	movw	r3, #1252	; 0x4e4
    a91a:	4a0e      	ldr	r2, [pc, #56]	; (a954 <gpio_pin_get_dt+0x54>)
    a91c:	480e      	ldr	r0, [pc, #56]	; (a958 <gpio_pin_get_dt+0x58>)
    a91e:	f01f fecc 	bl	2a6ba <assert_print>
    a922:	480e      	ldr	r0, [pc, #56]	; (a95c <gpio_pin_get_dt+0x5c>)
    a924:	f01f fec9 	bl	2a6ba <assert_print>
    a928:	f240 41e4 	movw	r1, #1252	; 0x4e4
    a92c:	4809      	ldr	r0, [pc, #36]	; (a954 <gpio_pin_get_dt+0x54>)
    a92e:	f01f febd 	bl	2a6ac <assert_post_action>
	const struct gpio_driver_data *const data =
    a932:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    a934:	6883      	ldr	r3, [r0, #8]
    a936:	a901      	add	r1, sp, #4
    a938:	685b      	ldr	r3, [r3, #4]
    a93a:	4798      	blx	r3
	if (ret == 0) {
    a93c:	b930      	cbnz	r0, a94c <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    a93e:	682a      	ldr	r2, [r5, #0]
    a940:	9b01      	ldr	r3, [sp, #4]
    a942:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a944:	4223      	tst	r3, r4
    a946:	bf14      	ite	ne
    a948:	2001      	movne	r0, #1
    a94a:	2000      	moveq	r0, #0
}
    a94c:	b003      	add	sp, #12
    a94e:	bd30      	pop	{r4, r5, pc}
    a950:	0003261b 	.word	0x0003261b
    a954:	000325ea 	.word	0x000325ea
    a958:	00032659 	.word	0x00032659
    a95c:	00032676 	.word	0x00032676

0000a960 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
	
}

//DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a960:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a962:	f023 ff62 	bl	2e82a <sys_clock_cycle_get_32>
    a966:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    a968:	4804      	ldr	r0, [pc, #16]	; (a97c <digital_0_call_back+0x1c>)
    a96a:	f01f fce4 	bl	2a336 <printk>
	if(digital_value[0]<=DIGITAL_0_LIMIT)digital_value[0]++;
    a96e:	4a04      	ldr	r2, [pc, #16]	; (a980 <digital_0_call_back+0x20>)
    a970:	8813      	ldrh	r3, [r2, #0]
    a972:	8813      	ldrh	r3, [r2, #0]
    a974:	3301      	adds	r3, #1
    a976:	b21b      	sxth	r3, r3
    a978:	8013      	strh	r3, [r2, #0]
}
    a97a:	bd08      	pop	{r3, pc}
    a97c:	00032688 	.word	0x00032688
    a980:	20021af0 	.word	0x20021af0

0000a984 <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a984:	b508      	push	{r3, lr}
    a986:	f023 ff50 	bl	2e82a <sys_clock_cycle_get_32>
    a98a:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    a98c:	4804      	ldr	r0, [pc, #16]	; (a9a0 <digital_1_call_back+0x1c>)
    a98e:	f01f fcd2 	bl	2a336 <printk>
	if(digital_value[1]<=DIGITAL_0_LIMIT)digital_value[1]++;
    a992:	4a04      	ldr	r2, [pc, #16]	; (a9a4 <digital_1_call_back+0x20>)
    a994:	8853      	ldrh	r3, [r2, #2]
    a996:	8853      	ldrh	r3, [r2, #2]
    a998:	3301      	adds	r3, #1
    a99a:	b21b      	sxth	r3, r3
    a99c:	8053      	strh	r3, [r2, #2]
}
    a99e:	bd08      	pop	{r3, pc}
    a9a0:	000326a3 	.word	0x000326a3
    a9a4:	20021af0 	.word	0x20021af0

0000a9a8 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a9a8:	b508      	push	{r3, lr}
    a9aa:	f023 ff3e 	bl	2e82a <sys_clock_cycle_get_32>
    a9ae:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    a9b0:	4804      	ldr	r0, [pc, #16]	; (a9c4 <digital_2_call_back+0x1c>)
    a9b2:	f01f fcc0 	bl	2a336 <printk>
	if(digital_value[2]<=DIGITAL_0_LIMIT)digital_value[2]++;
    a9b6:	4a04      	ldr	r2, [pc, #16]	; (a9c8 <digital_2_call_back+0x20>)
    a9b8:	8893      	ldrh	r3, [r2, #4]
    a9ba:	8893      	ldrh	r3, [r2, #4]
    a9bc:	3301      	adds	r3, #1
    a9be:	b21b      	sxth	r3, r3
    a9c0:	8093      	strh	r3, [r2, #4]
}
    a9c2:	bd08      	pop	{r3, pc}
    a9c4:	000326be 	.word	0x000326be
    a9c8:	20021af0 	.word	0x20021af0

0000a9cc <uart_2_work_handler.part.0>:
static void uart_2_work_handler(struct k_work *item)
    a9cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    a9ce:	4b09      	ldr	r3, [pc, #36]	; (a9f4 <uart_2_work_handler.part.0+0x28>)
    a9d0:	aa04      	add	r2, sp, #16
    a9d2:	9305      	str	r3, [sp, #20]
    a9d4:	2302      	movs	r3, #2
    a9d6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a9da:	4807      	ldr	r0, [pc, #28]	; (a9f8 <uart_2_work_handler.part.0+0x2c>)
    a9dc:	9304      	str	r3, [sp, #16]
    a9de:	f01f fa33 	bl	29e48 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9e2:	f240 6267 	movw	r2, #1639	; 0x667
    a9e6:	2300      	movs	r3, #0
    a9e8:	4804      	ldr	r0, [pc, #16]	; (a9fc <uart_2_work_handler.part.0+0x30>)
}
    a9ea:	b007      	add	sp, #28
    a9ec:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9f0:	f01b bb8a 	b.w	26108 <k_work_reschedule>
    a9f4:	000326d9 	.word	0x000326d9
    a9f8:	000315ac 	.word	0x000315ac
    a9fc:	200091f8 	.word	0x200091f8

0000aa00 <uart_work_handler.part.0>:
static void uart_work_handler(struct k_work *item)
    aa00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Not able to allocate UART receive buffer");
    aa02:	4b09      	ldr	r3, [pc, #36]	; (aa28 <uart_work_handler.part.0+0x28>)
    aa04:	aa04      	add	r2, sp, #16
    aa06:	9305      	str	r3, [sp, #20]
    aa08:	2302      	movs	r3, #2
    aa0a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    aa0e:	4807      	ldr	r0, [pc, #28]	; (aa2c <uart_work_handler.part.0+0x2c>)
    aa10:	9304      	str	r3, [sp, #16]
    aa12:	f01f fa19 	bl	29e48 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa16:	f240 6267 	movw	r2, #1639	; 0x667
    aa1a:	2300      	movs	r3, #0
    aa1c:	4804      	ldr	r0, [pc, #16]	; (aa30 <uart_work_handler.part.0+0x30>)
}
    aa1e:	b007      	add	sp, #28
    aa20:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa24:	f01b bb70 	b.w	26108 <k_work_reschedule>
    aa28:	00032704 	.word	0x00032704
    aa2c:	000315ac 	.word	0x000315ac
    aa30:	20009228 	.word	0x20009228

0000aa34 <uart_2_work_handler>:
{
    aa34:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
    aa36:	2030      	movs	r0, #48	; 0x30
    aa38:	f025 fd76 	bl	30528 <k_malloc>
	if (buf) {
    aa3c:	b138      	cbz	r0, aa4e <uart_2_work_handler+0x1a>
		buf->len = 0;
    aa3e:	2300      	movs	r3, #0
    aa40:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa42:	1d01      	adds	r1, r0, #4
}
    aa44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa48:	4803      	ldr	r0, [pc, #12]	; (aa58 <uart_2_work_handler+0x24>)
    aa4a:	f01f ba00 	b.w	29e4e <uart_rx_enable.constprop.0>
}
    aa4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa52:	f7ff bfbb 	b.w	a9cc <uart_2_work_handler.part.0>
    aa56:	bf00      	nop
    aa58:	00030f94 	.word	0x00030f94

0000aa5c <uart_work_handler>:
{
    aa5c:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
    aa5e:	2030      	movs	r0, #48	; 0x30
    aa60:	f025 fd62 	bl	30528 <k_malloc>
	if (buf) {
    aa64:	b138      	cbz	r0, aa76 <uart_work_handler+0x1a>
		buf->len = 0;
    aa66:	2300      	movs	r3, #0
    aa68:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa6a:	1d01      	adds	r1, r0, #4
}
    aa6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa70:	4803      	ldr	r0, [pc, #12]	; (aa80 <uart_work_handler+0x24>)
    aa72:	f01f b9ec 	b.w	29e4e <uart_rx_enable.constprop.0>
}
    aa76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa7a:	f7ff bfc1 	b.w	aa00 <uart_work_handler.part.0>
    aa7e:	bf00      	nop
    aa80:	00030fac 	.word	0x00030fac

0000aa84 <button3_thread>:
		    flash_test_();
	}
}


void button3_thread(void){
    aa84:	b570      	push	{r4, r5, r6, lr}
    uint32_t i;
	while(1){
		i=0;
		k_sem_take(&button_3,K_FOREVER);
    aa86:	4e09      	ldr	r6, [pc, #36]	; (aaac <button3_thread+0x28>)
	    while (i<=C_Buffer_Current_Position){
    aa88:	4d09      	ldr	r5, [pc, #36]	; (aab0 <button3_thread+0x2c>)
		k_sem_take(&button_3,K_FOREVER);
    aa8a:	f04f 32ff 	mov.w	r2, #4294967295
    aa8e:	f04f 33ff 	mov.w	r3, #4294967295
    aa92:	4630      	mov	r0, r6
    aa94:	f01f f9eb 	bl	29e6e <k_sem_take.constprop.0.isra.0>
		i=0;
    aa98:	2400      	movs	r4, #0
	     print_current_position_cb(i);
    aa9a:	4620      	mov	r0, r4
    aa9c:	f001 f982 	bl	bda4 <print_current_position_cb>
	    while (i<=C_Buffer_Current_Position){
    aaa0:	682b      	ldr	r3, [r5, #0]
	     i++;
    aaa2:	3401      	adds	r4, #1
	    while (i<=C_Buffer_Current_Position){
    aaa4:	42a3      	cmp	r3, r4
    aaa6:	d3f0      	bcc.n	aa8a <button3_thread+0x6>
    aaa8:	e7f7      	b.n	aa9a <button3_thread+0x16>
    aaaa:	bf00      	nop
    aaac:	20008bbc 	.word	0x20008bbc
    aab0:	20021468 	.word	0x20021468

0000aab4 <button4_thread>:
		}
    }
}

void button4_thread(void){
    aab4:	b538      	push	{r3, r4, r5, lr}

    uint8_t *packet_data;
	packet_data = k_malloc(25);
    aab6:	2019      	movs	r0, #25
    aab8:	f025 fd36 	bl	30528 <k_malloc>
	//49 53 41 44 4f 52 41 
    *packet_data = 0x49;
    aabc:	2349      	movs	r3, #73	; 0x49
    *(packet_data+1) = 0x53;
    *(packet_data+2) = 0x41;
    *(packet_data+3) = 0x44;
    aabe:	2244      	movs	r2, #68	; 0x44
    *packet_data = 0x49;
    aac0:	7003      	strb	r3, [r0, #0]
    *(packet_data+3) = 0x44;
    aac2:	70c2      	strb	r2, [r0, #3]
    *(packet_data+1) = 0x53;
    aac4:	2353      	movs	r3, #83	; 0x53
    *(packet_data+4) = 0x4F;
    aac6:	224f      	movs	r2, #79	; 0x4f
    *(packet_data+1) = 0x53;
    aac8:	7043      	strb	r3, [r0, #1]
    *(packet_data+4) = 0x4F;
    aaca:	7102      	strb	r2, [r0, #4]
    *(packet_data+2) = 0x41;
    aacc:	2341      	movs	r3, #65	; 0x41
    *(packet_data+5) = 0x52;
    aace:	2252      	movs	r2, #82	; 0x52
	packet_data = k_malloc(25);
    aad0:	4604      	mov	r4, r0
    *(packet_data+6) = 0x41;
	while(1){
		k_sem_take(&button_test,K_FOREVER);
    aad2:	4d08      	ldr	r5, [pc, #32]	; (aaf4 <button4_thread+0x40>)
    *(packet_data+2) = 0x41;
    aad4:	7083      	strb	r3, [r0, #2]
    *(packet_data+5) = 0x52;
    aad6:	7142      	strb	r2, [r0, #5]
    *(packet_data+6) = 0x41;
    aad8:	7183      	strb	r3, [r0, #6]
		k_sem_take(&button_test,K_FOREVER);
    aada:	4628      	mov	r0, r5
    aadc:	f04f 32ff 	mov.w	r2, #4294967295
    aae0:	f04f 33ff 	mov.w	r3, #4294967295
    aae4:	f01f f9c3 	bl	29e6e <k_sem_take.constprop.0.isra.0>
    	bt_nus_send(NULL, packet_data,7);
    aae8:	2207      	movs	r2, #7
    aaea:	4621      	mov	r1, r4
    aaec:	2000      	movs	r0, #0
    aaee:	f005 fd75 	bl	105dc <bt_nus_send>
	while(1){
    aaf2:	e7f2      	b.n	aada <button4_thread+0x26>
    aaf4:	20008bd4 	.word	0x20008bd4

0000aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    aaf8:	4603      	mov	r3, r0
    aafa:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    aafc:	6800      	ldr	r0, [r0, #0]
    aafe:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab00:	2301      	movs	r3, #1
    ab02:	6845      	ldr	r5, [r0, #4]
    ab04:	408b      	lsls	r3, r1
    ab06:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    ab08:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab0a:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    ab0c:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab0e:	d10e      	bne.n	ab2e <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    ab10:	490e      	ldr	r1, [pc, #56]	; (ab4c <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    ab12:	f44f 731d 	mov.w	r3, #628	; 0x274
    ab16:	4a0e      	ldr	r2, [pc, #56]	; (ab50 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    ab18:	480e      	ldr	r0, [pc, #56]	; (ab54 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    ab1a:	f01f fdce 	bl	2a6ba <assert_print>
    ab1e:	480e      	ldr	r0, [pc, #56]	; (ab58 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    ab20:	f01f fdcb 	bl	2a6ba <assert_print>
    ab24:	f44f 711d 	mov.w	r1, #628	; 0x274
    ab28:	4809      	ldr	r0, [pc, #36]	; (ab50 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    ab2a:	f01f fdbf 	bl	2a6ac <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    ab2e:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    ab30:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab32:	6994      	ldr	r4, [r2, #24]
    ab34:	bf18      	it	ne
    ab36:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    ab3a:	46a4      	mov	ip, r4
}
    ab3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab40:	bf08      	it	eq
    ab42:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    ab46:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    ab4a:	4760      	bx	ip
    ab4c:	0003261b 	.word	0x0003261b
    ab50:	000325ea 	.word	0x000325ea
    ab54:	00032659 	.word	0x00032659
    ab58:	00032676 	.word	0x00032676

0000ab5c <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab5c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ab5e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab60:	b08a      	sub	sp, #40	; 0x28
    ab62:	4604      	mov	r4, r0
    ab64:	460e      	mov	r6, r1
    ab66:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ab68:	2b03      	cmp	r3, #3
    ab6a:	d820      	bhi.n	abae <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ab6c:	e8df f003 	tbb	[pc, r3]
    ab70:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ab74:	4911      	ldr	r1, [pc, #68]	; (abbc <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ab76:	4628      	mov	r0, r5
    ab78:	f025 fe68 	bl	3084c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ab7c:	9505      	str	r5, [sp, #20]
    ab7e:	7863      	ldrb	r3, [r4, #1]
    ab80:	211e      	movs	r1, #30
    ab82:	9304      	str	r3, [sp, #16]
    ab84:	78a3      	ldrb	r3, [r4, #2]
    ab86:	4630      	mov	r0, r6
    ab88:	9303      	str	r3, [sp, #12]
    ab8a:	78e3      	ldrb	r3, [r4, #3]
    ab8c:	4a0c      	ldr	r2, [pc, #48]	; (abc0 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ab8e:	9302      	str	r3, [sp, #8]
    ab90:	7923      	ldrb	r3, [r4, #4]
    ab92:	9301      	str	r3, [sp, #4]
    ab94:	7963      	ldrb	r3, [r4, #5]
    ab96:	9300      	str	r3, [sp, #0]
    ab98:	79a3      	ldrb	r3, [r4, #6]
    ab9a:	f01f fbd9 	bl	2a350 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    ab9e:	b00a      	add	sp, #40	; 0x28
    aba0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    aba2:	4908      	ldr	r1, [pc, #32]	; (abc4 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    aba4:	e7e7      	b.n	ab76 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    aba6:	4908      	ldr	r1, [pc, #32]	; (abc8 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    aba8:	e7e5      	b.n	ab76 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    abaa:	4908      	ldr	r1, [pc, #32]	; (abcc <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    abac:	e7e3      	b.n	ab76 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    abae:	210a      	movs	r1, #10
    abb0:	4628      	mov	r0, r5
    abb2:	4a07      	ldr	r2, [pc, #28]	; (abd0 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    abb4:	f01f fbcc 	bl	2a350 <snprintk>
		break;
    abb8:	e7e0      	b.n	ab7c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    abba:	bf00      	nop
    abbc:	0003272d 	.word	0x0003272d
    abc0:	0003274f 	.word	0x0003274f
    abc4:	00032734 	.word	0x00032734
    abc8:	0003273b 	.word	0x0003273b
    abcc:	00032745 	.word	0x00032745
    abd0:	00036234 	.word	0x00036234

0000abd4 <security_changed>:
{
    abd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    abd6:	4614      	mov	r4, r2
    abd8:	b089      	sub	sp, #36	; 0x24
    abda:	af00      	add	r7, sp, #0
    abdc:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abde:	f021 fd74 	bl	2c6ca <bt_conn_get_dst>
    abe2:	4639      	mov	r1, r7
    abe4:	f7ff ffba 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
    abe8:	b9ac      	cbnz	r4, ac16 <security_changed+0x42>
		LOG_INF("Security changed: %s level %u", addr, level);
    abea:	466c      	mov	r4, sp
    abec:	b08a      	sub	sp, #40	; 0x28
    abee:	466a      	mov	r2, sp
    abf0:	4b14      	ldr	r3, [pc, #80]	; (ac44 <security_changed+0x70>)
    abf2:	61d5      	str	r5, [r2, #28]
    abf4:	e9c2 3705 	strd	r3, r7, [r2, #20]
    abf8:	f44f 7300 	mov.w	r3, #512	; 0x200
    abfc:	8413      	strh	r3, [r2, #32]
    abfe:	4b12      	ldr	r3, [pc, #72]	; (ac48 <security_changed+0x74>)
    ac00:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ac04:	4811      	ldr	r0, [pc, #68]	; (ac4c <security_changed+0x78>)
    ac06:	f842 3f10 	str.w	r3, [r2, #16]!
    ac0a:	f01f f91d 	bl	29e48 <z_log_msg_static_create.constprop.0>
    ac0e:	46a5      	mov	sp, r4
}
    ac10:	3724      	adds	r7, #36	; 0x24
    ac12:	46bd      	mov	sp, r7
    ac14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    ac16:	466e      	mov	r6, sp
    ac18:	b08a      	sub	sp, #40	; 0x28
    ac1a:	466b      	mov	r3, sp
    ac1c:	4a0c      	ldr	r2, [pc, #48]	; (ac50 <security_changed+0x7c>)
    ac1e:	e9c3 5407 	strd	r5, r4, [r3, #28]
    ac22:	e9c3 2705 	strd	r2, r7, [r3, #20]
    ac26:	f44f 7200 	mov.w	r2, #512	; 0x200
    ac2a:	849a      	strh	r2, [r3, #36]	; 0x24
    ac2c:	461a      	mov	r2, r3
    ac2e:	4b09      	ldr	r3, [pc, #36]	; (ac54 <security_changed+0x80>)
    ac30:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    ac34:	4805      	ldr	r0, [pc, #20]	; (ac4c <security_changed+0x78>)
    ac36:	f842 3f10 	str.w	r3, [r2, #16]!
    ac3a:	f01f f905 	bl	29e48 <z_log_msg_static_create.constprop.0>
    ac3e:	46b5      	mov	sp, r6
}
    ac40:	e7e6      	b.n	ac10 <security_changed+0x3c>
    ac42:	bf00      	nop
    ac44:	00032772 	.word	0x00032772
    ac48:	01000004 	.word	0x01000004
    ac4c:	000315ac 	.word	0x000315ac
    ac50:	00032790 	.word	0x00032790
    ac54:	01000005 	.word	0x01000005

0000ac58 <pairing_failed>:
{
    ac58:	b590      	push	{r4, r7, lr}
    ac5a:	b089      	sub	sp, #36	; 0x24
    ac5c:	af00      	add	r7, sp, #0
    ac5e:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac60:	f021 fd33 	bl	2c6ca <bt_conn_get_dst>
    ac64:	4639      	mov	r1, r7
    ac66:	f7ff ff79 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    ac6a:	b08a      	sub	sp, #40	; 0x28
    ac6c:	466a      	mov	r2, sp
    ac6e:	4b09      	ldr	r3, [pc, #36]	; (ac94 <pairing_failed+0x3c>)
    ac70:	61d4      	str	r4, [r2, #28]
    ac72:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ac76:	f44f 7300 	mov.w	r3, #512	; 0x200
    ac7a:	8413      	strh	r3, [r2, #32]
    ac7c:	4b06      	ldr	r3, [pc, #24]	; (ac98 <pairing_failed+0x40>)
    ac7e:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ac82:	4806      	ldr	r0, [pc, #24]	; (ac9c <pairing_failed+0x44>)
    ac84:	f842 3f10 	str.w	r3, [r2, #16]!
    ac88:	f01f f8de 	bl	29e48 <z_log_msg_static_create.constprop.0>
}
    ac8c:	3724      	adds	r7, #36	; 0x24
    ac8e:	46bd      	mov	sp, r7
    ac90:	bd90      	pop	{r4, r7, pc}
    ac92:	bf00      	nop
    ac94:	000327b4 	.word	0x000327b4
    ac98:	01000004 	.word	0x01000004
    ac9c:	000315ac 	.word	0x000315ac

0000aca0 <pairing_complete>:
{
    aca0:	b590      	push	{r4, r7, lr}
    aca2:	b089      	sub	sp, #36	; 0x24
    aca4:	af00      	add	r7, sp, #0
    aca6:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    aca8:	f021 fd0f 	bl	2c6ca <bt_conn_get_dst>
    acac:	4639      	mov	r1, r7
    acae:	f7ff ff55 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    acb2:	b08a      	sub	sp, #40	; 0x28
    acb4:	466a      	mov	r2, sp
    acb6:	4b09      	ldr	r3, [pc, #36]	; (acdc <pairing_complete+0x3c>)
    acb8:	61d4      	str	r4, [r2, #28]
    acba:	e9c2 3705 	strd	r3, r7, [r2, #20]
    acbe:	f44f 7300 	mov.w	r3, #512	; 0x200
    acc2:	8413      	strh	r3, [r2, #32]
    acc4:	4b06      	ldr	r3, [pc, #24]	; (ace0 <pairing_complete+0x40>)
    acc6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    acca:	4806      	ldr	r0, [pc, #24]	; (ace4 <pairing_complete+0x44>)
    accc:	f842 3f10 	str.w	r3, [r2, #16]!
    acd0:	f01f f8ba 	bl	29e48 <z_log_msg_static_create.constprop.0>
}
    acd4:	3724      	adds	r7, #36	; 0x24
    acd6:	46bd      	mov	sp, r7
    acd8:	bd90      	pop	{r4, r7, pc}
    acda:	bf00      	nop
    acdc:	000327d7 	.word	0x000327d7
    ace0:	01000004 	.word	0x01000004
    ace4:	000315ac 	.word	0x000315ac

0000ace8 <auth_cancel>:
{
    ace8:	b580      	push	{r7, lr}
    acea:	b088      	sub	sp, #32
    acec:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acee:	f021 fcec 	bl	2c6ca <bt_conn_get_dst>
    acf2:	4639      	mov	r1, r7
    acf4:	f7ff ff32 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    acf8:	b088      	sub	sp, #32
    acfa:	466a      	mov	r2, sp
    acfc:	4b08      	ldr	r3, [pc, #32]	; (ad20 <auth_cancel+0x38>)
    acfe:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    ad02:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ad06:	f44f 7300 	mov.w	r3, #512	; 0x200
    ad0a:	8393      	strh	r3, [r2, #28]
    ad0c:	4b05      	ldr	r3, [pc, #20]	; (ad24 <auth_cancel+0x3c>)
    ad0e:	4806      	ldr	r0, [pc, #24]	; (ad28 <auth_cancel+0x40>)
    ad10:	f842 3f10 	str.w	r3, [r2, #16]!
    ad14:	f01f f898 	bl	29e48 <z_log_msg_static_create.constprop.0>
}
    ad18:	3720      	adds	r7, #32
    ad1a:	46bd      	mov	sp, r7
    ad1c:	bd80      	pop	{r7, pc}
    ad1e:	bf00      	nop
    ad20:	000327f9 	.word	0x000327f9
    ad24:	01000003 	.word	0x01000003
    ad28:	000315ac 	.word	0x000315ac

0000ad2c <auth_passkey_display>:
{
    ad2c:	b590      	push	{r4, r7, lr}
    ad2e:	b089      	sub	sp, #36	; 0x24
    ad30:	af00      	add	r7, sp, #0
    ad32:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad34:	f021 fcc9 	bl	2c6ca <bt_conn_get_dst>
    ad38:	4639      	mov	r1, r7
    ad3a:	f7ff ff0f 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad3e:	b08a      	sub	sp, #40	; 0x28
    ad40:	466a      	mov	r2, sp
    ad42:	4b09      	ldr	r3, [pc, #36]	; (ad68 <auth_passkey_display+0x3c>)
    ad44:	61d4      	str	r4, [r2, #28]
    ad46:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ad4a:	f44f 7300 	mov.w	r3, #512	; 0x200
    ad4e:	8413      	strh	r3, [r2, #32]
    ad50:	4b06      	ldr	r3, [pc, #24]	; (ad6c <auth_passkey_display+0x40>)
    ad52:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ad56:	4806      	ldr	r0, [pc, #24]	; (ad70 <auth_passkey_display+0x44>)
    ad58:	f842 3f10 	str.w	r3, [r2, #16]!
    ad5c:	f01f f874 	bl	29e48 <z_log_msg_static_create.constprop.0>
}
    ad60:	3724      	adds	r7, #36	; 0x24
    ad62:	46bd      	mov	sp, r7
    ad64:	bd90      	pop	{r4, r7, pc}
    ad66:	bf00      	nop
    ad68:	0003280f 	.word	0x0003280f
    ad6c:	01000004 	.word	0x01000004
    ad70:	000315ac 	.word	0x000315ac

0000ad74 <auth_passkey_confirm>:
{
    ad74:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad76:	b08f      	sub	sp, #60	; 0x3c
    ad78:	af00      	add	r7, sp, #0
    ad7a:	460c      	mov	r4, r1
    ad7c:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    ad7e:	f00a f839 	bl	14df4 <bt_conn_ref>
    ad82:	4b16      	ldr	r3, [pc, #88]	; (addc <auth_passkey_confirm+0x68>)
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad84:	466e      	mov	r6, sp
	auth_conn = bt_conn_ref(conn);
    ad86:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad88:	4628      	mov	r0, r5
    ad8a:	f107 0518 	add.w	r5, r7, #24
    ad8e:	f021 fc9c 	bl	2c6ca <bt_conn_get_dst>
    ad92:	4629      	mov	r1, r5
    ad94:	f7ff fee2 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad98:	b08a      	sub	sp, #40	; 0x28
    ad9a:	466a      	mov	r2, sp
    ad9c:	4b10      	ldr	r3, [pc, #64]	; (ade0 <auth_passkey_confirm+0x6c>)
    ad9e:	61d4      	str	r4, [r2, #28]
    ada0:	e9c2 3505 	strd	r3, r5, [r2, #20]
    ada4:	f44f 7300 	mov.w	r3, #512	; 0x200
    ada8:	4c0e      	ldr	r4, [pc, #56]	; (ade4 <auth_passkey_confirm+0x70>)
    adaa:	8413      	strh	r3, [r2, #32]
    adac:	4b0e      	ldr	r3, [pc, #56]	; (ade8 <auth_passkey_confirm+0x74>)
    adae:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    adb2:	4620      	mov	r0, r4
    adb4:	f842 3f10 	str.w	r3, [r2, #16]!
    adb8:	f01f f846 	bl	29e48 <z_log_msg_static_create.constprop.0>
    adbc:	46b5      	mov	sp, r6
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    adbe:	4b0b      	ldr	r3, [pc, #44]	; (adec <auth_passkey_confirm+0x78>)
    adc0:	f107 0210 	add.w	r2, r7, #16
    adc4:	617b      	str	r3, [r7, #20]
    adc6:	2302      	movs	r3, #2
    adc8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    adcc:	613b      	str	r3, [r7, #16]
    adce:	4620      	mov	r0, r4
    add0:	f01f f83a 	bl	29e48 <z_log_msg_static_create.constprop.0>
}
    add4:	373c      	adds	r7, #60	; 0x3c
    add6:	46bd      	mov	sp, r7
    add8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adda:	bf00      	nop
    addc:	2000a328 	.word	0x2000a328
    ade0:	0003280f 	.word	0x0003280f
    ade4:	000315ac 	.word	0x000315ac
    ade8:	01000004 	.word	0x01000004
    adec:	00032824 	.word	0x00032824

0000adf0 <bt_receive_cb>:
{
    adf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    adf4:	2400      	movs	r4, #0
{
    adf6:	4605      	mov	r5, r0
    adf8:	b088      	sub	sp, #32
    adfa:	460f      	mov	r7, r1
    adfc:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    adfe:	4621      	mov	r1, r4
    ae00:	221a      	movs	r2, #26
    ae02:	a801      	add	r0, sp, #4
    ae04:	9400      	str	r4, [sp, #0]
    ae06:	f025 fbec 	bl	305e2 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    ae0a:	4628      	mov	r0, r5
    ae0c:	f021 fc5d 	bl	2c6ca <bt_conn_get_dst>
    ae10:	4669      	mov	r1, sp
    ae12:	f7ff fea3 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    ae16:	4669      	mov	r1, sp
    ae18:	481d      	ldr	r0, [pc, #116]	; (ae90 <bt_receive_cb+0xa0>)
    ae1a:	f01e f863 	bl	28ee4 <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ae1e:	f8df 8074 	ldr.w	r8, [pc, #116]	; ae94 <bt_receive_cb+0xa4>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ae22:	f8df 9074 	ldr.w	r9, [pc, #116]	; ae98 <bt_receive_cb+0xa8>
	for (uint16_t pos = 0; pos != len;) {
    ae26:	42b4      	cmp	r4, r6
    ae28:	d007      	beq.n	ae3a <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    ae2a:	2030      	movs	r0, #48	; 0x30
    ae2c:	f025 fb7c 	bl	30528 <k_malloc>
		if (!tx) {
    ae30:	4605      	mov	r5, r0
    ae32:	b928      	cbnz	r0, ae40 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    ae34:	4819      	ldr	r0, [pc, #100]	; (ae9c <bt_receive_cb+0xac>)
    ae36:	f01e f855 	bl	28ee4 <iprintf>
}
    ae3a:	b008      	add	sp, #32
    ae3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size) {
    ae40:	1b32      	subs	r2, r6, r4
    ae42:	2a27      	cmp	r2, #39	; 0x27
			tx->len = tx_data_size;
    ae44:	bf8c      	ite	hi
    ae46:	2227      	movhi	r2, #39	; 0x27
			tx->len = (len - pos);
    ae48:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    ae4a:	f100 0a04 	add.w	sl, r0, #4
    ae4e:	8582      	strh	r2, [r0, #44]	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ae50:	1939      	adds	r1, r7, r4
    ae52:	4650      	mov	r0, sl
    ae54:	f025 fb8b 	bl	3056e <memcpy>
		pos += tx->len;
    ae58:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    ae5a:	441c      	add	r4, r3
    ae5c:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
    ae5e:	42a6      	cmp	r6, r4
    ae60:	d109      	bne.n	ae76 <bt_receive_cb+0x86>
    ae62:	19ba      	adds	r2, r7, r6
    ae64:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    ae68:	2a0d      	cmp	r2, #13
    ae6a:	d104      	bne.n	ae76 <bt_receive_cb+0x86>
			tx->data[tx->len] = '\n';
    ae6c:	210a      	movs	r1, #10
    ae6e:	18ea      	adds	r2, r5, r3
			tx->len++;
    ae70:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    ae72:	7111      	strb	r1, [r2, #4]
			tx->len++;
    ae74:	85ab      	strh	r3, [r5, #44]	; 0x2c
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ae76:	4651      	mov	r1, sl
    ae78:	4640      	mov	r0, r8
    ae7a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    ae7c:	f01e ffef 	bl	29e5e <uart_tx.constprop.0>
		if (err) {
    ae80:	2800      	cmp	r0, #0
    ae82:	d0d0      	beq.n	ae26 <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ae84:	4629      	mov	r1, r5
    ae86:	4648      	mov	r0, r9
    ae88:	f025 f99a 	bl	301c0 <k_queue_append>
    ae8c:	e7cb      	b.n	ae26 <bt_receive_cb+0x36>
    ae8e:	bf00      	nop
    ae90:	00032853 	.word	0x00032853
    ae94:	00030fac 	.word	0x00030fac
    ae98:	20008c80 	.word	0x20008c80
    ae9c:	0003286a 	.word	0x0003286a

0000aea0 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    aea0:	4603      	mov	r3, r0
    aea2:	b510      	push	{r4, lr}
    aea4:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aea6:	7919      	ldrb	r1, [r3, #4]
    aea8:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    aeaa:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aeac:	fa03 f101 	lsl.w	r1, r3, r1
    aeb0:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    aeb2:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aeb4:	681b      	ldr	r3, [r3, #0]
    aeb6:	4219      	tst	r1, r3
    aeb8:	d10e      	bne.n	aed8 <gpio_pin_set_dt.isra.0+0x38>
    aeba:	490e      	ldr	r1, [pc, #56]	; (aef4 <gpio_pin_set_dt.isra.0+0x54>)
    aebc:	f240 533d 	movw	r3, #1341	; 0x53d
    aec0:	4a0d      	ldr	r2, [pc, #52]	; (aef8 <gpio_pin_set_dt.isra.0+0x58>)
    aec2:	480e      	ldr	r0, [pc, #56]	; (aefc <gpio_pin_set_dt.isra.0+0x5c>)
    aec4:	f01f fbf9 	bl	2a6ba <assert_print>
    aec8:	480d      	ldr	r0, [pc, #52]	; (af00 <gpio_pin_set_dt.isra.0+0x60>)
    aeca:	f01f fbf6 	bl	2a6ba <assert_print>
    aece:	f240 513d 	movw	r1, #1341	; 0x53d
    aed2:	4809      	ldr	r0, [pc, #36]	; (aef8 <gpio_pin_set_dt.isra.0+0x58>)
    aed4:	f01f fbea 	bl	2a6ac <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    aed8:	6823      	ldr	r3, [r4, #0]
    aeda:	4219      	tst	r1, r3
    aedc:	d003      	beq.n	aee6 <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    aede:	b122      	cbz	r2, aeea <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    aee0:	6883      	ldr	r3, [r0, #8]
    aee2:	691b      	ldr	r3, [r3, #16]
    aee4:	e003      	b.n	aeee <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    aee6:	2a00      	cmp	r2, #0
    aee8:	d0fa      	beq.n	aee0 <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    aeea:	6883      	ldr	r3, [r0, #8]
    aeec:	68db      	ldr	r3, [r3, #12]
}
    aeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    aef2:	4718      	bx	r3
    aef4:	0003261b 	.word	0x0003261b
    aef8:	000325ea 	.word	0x000325ea
    aefc:	00032659 	.word	0x00032659
    af00:	00032676 	.word	0x00032676

0000af04 <button_pressed_1>:
void button_pressed_1(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    af04:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    af06:	4807      	ldr	r0, [pc, #28]	; (af24 <button_pressed_1+0x20>)
    af08:	f01a fb5e 	bl	255c8 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    af0c:	2101      	movs	r1, #1
    af0e:	4806      	ldr	r0, [pc, #24]	; (af28 <button_pressed_1+0x24>)
    af10:	f7ff ffc6 	bl	aea0 <gpio_pin_set_dt.isra.0>
    af14:	f023 fc89 	bl	2e82a <sys_clock_cycle_get_32>
}
    af18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    af1c:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    af1e:	4803      	ldr	r0, [pc, #12]	; (af2c <button_pressed_1+0x28>)
    af20:	f01f ba09 	b.w	2a336 <printk>
    af24:	20008c4c 	.word	0x20008c4c
    af28:	000318b8 	.word	0x000318b8
    af2c:	00032895 	.word	0x00032895

0000af30 <connected>:
{
    af30:	b5b0      	push	{r4, r5, r7, lr}
    af32:	b088      	sub	sp, #32
    af34:	4604      	mov	r4, r0
    af36:	af00      	add	r7, sp, #0
	if (err) {
    af38:	b189      	cbz	r1, af5e <connected+0x2e>
		LOG_ERR("Connection failed (err %u)", err);
    af3a:	466c      	mov	r4, sp
    af3c:	b088      	sub	sp, #32
    af3e:	466a      	mov	r2, sp
    af40:	4b17      	ldr	r3, [pc, #92]	; (afa0 <connected+0x70>)
    af42:	4818      	ldr	r0, [pc, #96]	; (afa4 <connected+0x74>)
    af44:	e9c2 3105 	strd	r3, r1, [r2, #20]
    af48:	2303      	movs	r3, #3
    af4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    af4e:	f842 3f10 	str.w	r3, [r2, #16]!
    af52:	f01e ff79 	bl	29e48 <z_log_msg_static_create.constprop.0>
    af56:	46a5      	mov	sp, r4
}
    af58:	3720      	adds	r7, #32
    af5a:	46bd      	mov	sp, r7
    af5c:	bdb0      	pop	{r4, r5, r7, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    af5e:	f021 fbb4 	bl	2c6ca <bt_conn_get_dst>
    af62:	4639      	mov	r1, r7
    af64:	f7ff fdfa 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    af68:	466d      	mov	r5, sp
    af6a:	b088      	sub	sp, #32
    af6c:	466a      	mov	r2, sp
    af6e:	4b0e      	ldr	r3, [pc, #56]	; (afa8 <connected+0x78>)
    af70:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    af74:	e9c2 3705 	strd	r3, r7, [r2, #20]
    af78:	f44f 7300 	mov.w	r3, #512	; 0x200
    af7c:	8393      	strh	r3, [r2, #28]
    af7e:	4b0b      	ldr	r3, [pc, #44]	; (afac <connected+0x7c>)
    af80:	4808      	ldr	r0, [pc, #32]	; (afa4 <connected+0x74>)
    af82:	f842 3f10 	str.w	r3, [r2, #16]!
    af86:	f01e ff5f 	bl	29e48 <z_log_msg_static_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    af8a:	4620      	mov	r0, r4
    af8c:	46ad      	mov	sp, r5
    af8e:	f009 ff31 	bl	14df4 <bt_conn_ref>
    af92:	4b07      	ldr	r3, [pc, #28]	; (afb0 <connected+0x80>)
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    af94:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    af96:	6018      	str	r0, [r3, #0]
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    af98:	4806      	ldr	r0, [pc, #24]	; (afb4 <connected+0x84>)
    af9a:	f7ff ff81 	bl	aea0 <gpio_pin_set_dt.isra.0>
    af9e:	e7db      	b.n	af58 <connected+0x28>
    afa0:	000328ad 	.word	0x000328ad
    afa4:	000315ac 	.word	0x000315ac
    afa8:	000328c8 	.word	0x000328c8
    afac:	01000003 	.word	0x01000003
    afb0:	2000a32c 	.word	0x2000a32c
    afb4:	000318d0 	.word	0x000318d0

0000afb8 <disconnected>:
{
    afb8:	b5b0      	push	{r4, r5, r7, lr}
    afba:	b088      	sub	sp, #32
    afbc:	af00      	add	r7, sp, #0
    afbe:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    afc0:	f021 fb83 	bl	2c6ca <bt_conn_get_dst>
    afc4:	4639      	mov	r1, r7
    afc6:	f7ff fdc9 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    afca:	466d      	mov	r5, sp
    afcc:	b08a      	sub	sp, #40	; 0x28
    afce:	466a      	mov	r2, sp
    afd0:	4b11      	ldr	r3, [pc, #68]	; (b018 <disconnected+0x60>)
    afd2:	61d4      	str	r4, [r2, #28]
    afd4:	e9c2 3705 	strd	r3, r7, [r2, #20]
    afd8:	f44f 7300 	mov.w	r3, #512	; 0x200
    afdc:	8413      	strh	r3, [r2, #32]
    afde:	4b0f      	ldr	r3, [pc, #60]	; (b01c <disconnected+0x64>)
	if (auth_conn) {
    afe0:	4c0f      	ldr	r4, [pc, #60]	; (b020 <disconnected+0x68>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    afe2:	4810      	ldr	r0, [pc, #64]	; (b024 <disconnected+0x6c>)
    afe4:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    afe8:	f842 3f10 	str.w	r3, [r2, #16]!
    afec:	f01e ff2c 	bl	29e48 <z_log_msg_static_create.constprop.0>
	if (auth_conn) {
    aff0:	6820      	ldr	r0, [r4, #0]
    aff2:	46ad      	mov	sp, r5
    aff4:	b118      	cbz	r0, affe <disconnected+0x46>
		bt_conn_unref(auth_conn);
    aff6:	f009 ff25 	bl	14e44 <bt_conn_unref>
		auth_conn = NULL;
    affa:	2300      	movs	r3, #0
    affc:	6023      	str	r3, [r4, #0]
	if (current_conn) {
    affe:	4c0a      	ldr	r4, [pc, #40]	; (b028 <disconnected+0x70>)
    b000:	6820      	ldr	r0, [r4, #0]
    b002:	b130      	cbz	r0, b012 <disconnected+0x5a>
		bt_conn_unref(current_conn);
    b004:	f009 ff1e 	bl	14e44 <bt_conn_unref>
		current_conn = NULL;
    b008:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    b00a:	4808      	ldr	r0, [pc, #32]	; (b02c <disconnected+0x74>)
		current_conn = NULL;
    b00c:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    b00e:	f7ff ff47 	bl	aea0 <gpio_pin_set_dt.isra.0>
}
    b012:	3720      	adds	r7, #32
    b014:	46bd      	mov	sp, r7
    b016:	bdb0      	pop	{r4, r5, r7, pc}
    b018:	000328d5 	.word	0x000328d5
    b01c:	01000004 	.word	0x01000004
    b020:	2000a328 	.word	0x2000a328
    b024:	000315ac 	.word	0x000315ac
    b028:	2000a32c 	.word	0x2000a32c
    b02c:	000318d0 	.word	0x000318d0

0000b030 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    b030:	4603      	mov	r3, r0
    b032:	b570      	push	{r4, r5, r6, lr}
    b034:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    b036:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    b038:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    b03a:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    b03c:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b03e:	f002 0430 	and.w	r4, r2, #48	; 0x30
    b042:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    b044:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    b046:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b04a:	d10e      	bne.n	b06a <gpio_pin_configure_dt.isra.0+0x3a>
    b04c:	4925      	ldr	r1, [pc, #148]	; (b0e4 <gpio_pin_configure_dt.isra.0+0xb4>)
    b04e:	f240 23b7 	movw	r3, #695	; 0x2b7
    b052:	4a25      	ldr	r2, [pc, #148]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b054:	4825      	ldr	r0, [pc, #148]	; (b0ec <gpio_pin_configure_dt.isra.0+0xbc>)
    b056:	f01f fb30 	bl	2a6ba <assert_print>
    b05a:	4825      	ldr	r0, [pc, #148]	; (b0f0 <gpio_pin_configure_dt.isra.0+0xc0>)
    b05c:	f01f fb2d 	bl	2a6ba <assert_print>
    b060:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    b064:	4820      	ldr	r0, [pc, #128]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b066:	f01f fb21 	bl	2a6ac <assert_post_action>
    b06a:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    b06e:	2c02      	cmp	r4, #2
    b070:	d10c      	bne.n	b08c <gpio_pin_configure_dt.isra.0+0x5c>
    b072:	4920      	ldr	r1, [pc, #128]	; (b0f4 <gpio_pin_configure_dt.isra.0+0xc4>)
    b074:	f240 23bb 	movw	r3, #699	; 0x2bb
    b078:	4a1b      	ldr	r2, [pc, #108]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b07a:	481c      	ldr	r0, [pc, #112]	; (b0ec <gpio_pin_configure_dt.isra.0+0xbc>)
    b07c:	f01f fb1d 	bl	2a6ba <assert_print>
    b080:	481d      	ldr	r0, [pc, #116]	; (b0f8 <gpio_pin_configure_dt.isra.0+0xc8>)
    b082:	f01f fb1a 	bl	2a6ba <assert_print>
    b086:	f240 21bb 	movw	r1, #699	; 0x2bb
    b08a:	e7eb      	b.n	b064 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    b08c:	f002 0406 	and.w	r4, r2, #6
    b090:	2c04      	cmp	r4, #4
    b092:	d109      	bne.n	b0a8 <gpio_pin_configure_dt.isra.0+0x78>
    b094:	4919      	ldr	r1, [pc, #100]	; (b0fc <gpio_pin_configure_dt.isra.0+0xcc>)
    b096:	f240 23bf 	movw	r3, #703	; 0x2bf
    b09a:	4a13      	ldr	r2, [pc, #76]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b09c:	4813      	ldr	r0, [pc, #76]	; (b0ec <gpio_pin_configure_dt.isra.0+0xbc>)
    b09e:	f01f fb0c 	bl	2a6ba <assert_print>
    b0a2:	f240 21bf 	movw	r1, #703	; 0x2bf
    b0a6:	e7dd      	b.n	b064 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b0a8:	2401      	movs	r4, #1
    b0aa:	681b      	ldr	r3, [r3, #0]
    b0ac:	408c      	lsls	r4, r1
    b0ae:	421c      	tst	r4, r3
    b0b0:	d10c      	bne.n	b0cc <gpio_pin_configure_dt.isra.0+0x9c>
    b0b2:	4913      	ldr	r1, [pc, #76]	; (b100 <gpio_pin_configure_dt.isra.0+0xd0>)
    b0b4:	f240 23d2 	movw	r3, #722	; 0x2d2
    b0b8:	4a0b      	ldr	r2, [pc, #44]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b0ba:	480c      	ldr	r0, [pc, #48]	; (b0ec <gpio_pin_configure_dt.isra.0+0xbc>)
    b0bc:	f01f fafd 	bl	2a6ba <assert_print>
    b0c0:	4810      	ldr	r0, [pc, #64]	; (b104 <gpio_pin_configure_dt.isra.0+0xd4>)
    b0c2:	f01f fafa 	bl	2a6ba <assert_print>
    b0c6:	f240 21d2 	movw	r1, #722	; 0x2d2
    b0ca:	e7cb      	b.n	b064 <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0cc:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    b0ce:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0d2:	bf14      	ite	ne
    b0d4:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b0d6:	43a3      	biceq	r3, r4
    b0d8:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    b0da:	6833      	ldr	r3, [r6, #0]
}
    b0dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    b0e0:	4718      	bx	r3
    b0e2:	bf00      	nop
    b0e4:	000328f2 	.word	0x000328f2
    b0e8:	000325ea 	.word	0x000325ea
    b0ec:	00032659 	.word	0x00032659
    b0f0:	0003292b 	.word	0x0003292b
    b0f4:	00032968 	.word	0x00032968
    b0f8:	0003299d 	.word	0x0003299d
    b0fc:	000329ef 	.word	0x000329ef
    b100:	0003261b 	.word	0x0003261b
    b104:	00032676 	.word	0x00032676

0000b108 <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b108:	b510      	push	{r4, lr}
	switch (evt->type) {
    b10a:	780b      	ldrb	r3, [r1, #0]
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b10c:	b086      	sub	sp, #24
	switch (evt->type) {
    b10e:	2b05      	cmp	r3, #5
    b110:	d828      	bhi.n	b164 <uart_cb+0x5c>
    b112:	e8df f003 	tbb	[pc, r3]
    b116:	8a03      	.short	0x8a03
    b118:	467a682b 	.word	0x467a682b
		if ((evt->data.tx.len == 0) ||
    b11c:	688b      	ldr	r3, [r1, #8]
    b11e:	b30b      	cbz	r3, b164 <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
    b120:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    b122:	b1f8      	cbz	r0, b164 <uart_cb+0x5c>
		if (aborted_buf) {
    b124:	4a4b      	ldr	r2, [pc, #300]	; (b254 <uart_cb+0x14c>)
    b126:	6813      	ldr	r3, [r2, #0]
    b128:	b1f3      	cbz	r3, b168 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b12a:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    b12c:	2300      	movs	r3, #0
    b12e:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    b130:	4a49      	ldr	r2, [pc, #292]	; (b258 <uart_cb+0x150>)
    b132:	6013      	str	r3, [r2, #0]
		k_free(buf);
    b134:	f025 f9f1 	bl	3051a <k_free>
	return z_impl_k_queue_get(queue, timeout);
    b138:	2200      	movs	r2, #0
    b13a:	2300      	movs	r3, #0
    b13c:	4847      	ldr	r0, [pc, #284]	; (b25c <uart_cb+0x154>)
    b13e:	f01a f9d9 	bl	254f4 <z_impl_k_queue_get>
		if (!buf) {
    b142:	b178      	cbz	r0, b164 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
    b144:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b146:	1d01      	adds	r1, r0, #4
    b148:	4845      	ldr	r0, [pc, #276]	; (b260 <uart_cb+0x158>)
    b14a:	f01e fe88 	bl	29e5e <uart_tx.constprop.0>
    b14e:	b148      	cbz	r0, b164 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    b150:	4b44      	ldr	r3, [pc, #272]	; (b264 <uart_cb+0x15c>)
			LOG_WRN("Not able to allocate UART receive buffer");
    b152:	9305      	str	r3, [sp, #20]
    b154:	2302      	movs	r3, #2
    b156:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b15a:	4843      	ldr	r0, [pc, #268]	; (b268 <uart_cb+0x160>)
    b15c:	aa04      	add	r2, sp, #16
    b15e:	9304      	str	r3, [sp, #16]
    b160:	f01e fe72 	bl	29e48 <z_log_msg_static_create.constprop.0>
}
    b164:	b006      	add	sp, #24
    b166:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
    b168:	3804      	subs	r0, #4
    b16a:	e7e3      	b.n	b134 <uart_cb+0x2c>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b16c:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    b16e:	68cb      	ldr	r3, [r1, #12]
    b170:	8d10      	ldrh	r0, [r2, #40]	; 0x28
    b172:	4403      	add	r3, r0
		if (disable_req) {
    b174:	483d      	ldr	r0, [pc, #244]	; (b26c <uart_cb+0x164>)
		buf->len += evt->data.rx.len;
    b176:	b29b      	uxth	r3, r3
    b178:	8513      	strh	r3, [r2, #40]	; 0x28
		if (disable_req) {
    b17a:	7802      	ldrb	r2, [r0, #0]
    b17c:	2a00      	cmp	r2, #0
    b17e:	d1f1      	bne.n	b164 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    b180:	684a      	ldr	r2, [r1, #4]
    b182:	4413      	add	r3, r2
    b184:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b188:	2b0a      	cmp	r3, #10
    b18a:	d001      	beq.n	b190 <uart_cb+0x88>
    b18c:	2b0d      	cmp	r3, #13
    b18e:	d1e9      	bne.n	b164 <uart_cb+0x5c>
			disable_req = true;
    b190:	2301      	movs	r3, #1
    b192:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    b194:	4832      	ldr	r0, [pc, #200]	; (b260 <uart_cb+0x158>)
    b196:	6883      	ldr	r3, [r0, #8]
    b198:	695b      	ldr	r3, [r3, #20]
}
    b19a:	b006      	add	sp, #24
    b19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1a0:	4718      	bx	r3
		disable_req = false;
    b1a2:	2400      	movs	r4, #0
    b1a4:	4b31      	ldr	r3, [pc, #196]	; (b26c <uart_cb+0x164>)
		buf = k_malloc(sizeof(*buf));
    b1a6:	2030      	movs	r0, #48	; 0x30
		disable_req = false;
    b1a8:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    b1aa:	f025 f9bd 	bl	30528 <k_malloc>
		if (buf) {
    b1ae:	b138      	cbz	r0, b1c0 <uart_cb+0xb8>
			buf->len = 0;
    b1b0:	8584      	strh	r4, [r0, #44]	; 0x2c
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b1b2:	1d01      	adds	r1, r0, #4
    b1b4:	482a      	ldr	r0, [pc, #168]	; (b260 <uart_cb+0x158>)
}
    b1b6:	b006      	add	sp, #24
    b1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b1bc:	f01e be47 	b.w	29e4e <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    b1c0:	4b2b      	ldr	r3, [pc, #172]	; (b270 <uart_cb+0x168>)
    b1c2:	aa04      	add	r2, sp, #16
    b1c4:	9305      	str	r3, [sp, #20]
    b1c6:	2302      	movs	r3, #2
    b1c8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b1cc:	4826      	ldr	r0, [pc, #152]	; (b268 <uart_cb+0x160>)
    b1ce:	9304      	str	r3, [sp, #16]
    b1d0:	f01e fe3a 	bl	29e48 <z_log_msg_static_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1d4:	f240 6267 	movw	r2, #1639	; 0x667
    b1d8:	2300      	movs	r3, #0
    b1da:	4826      	ldr	r0, [pc, #152]	; (b274 <uart_cb+0x16c>)
}
    b1dc:	b006      	add	sp, #24
    b1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1e2:	f01a bf91 	b.w	26108 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    b1e6:	2030      	movs	r0, #48	; 0x30
    b1e8:	f025 f99e 	bl	30528 <k_malloc>
		if (buf) {
    b1ec:	4601      	mov	r1, r0
    b1ee:	b150      	cbz	r0, b206 <uart_cb+0xfe>
			buf->len = 0;
    b1f0:	2300      	movs	r3, #0
	return api->rx_buf_rsp(dev, buf, len);
    b1f2:	2228      	movs	r2, #40	; 0x28
    b1f4:	8583      	strh	r3, [r0, #44]	; 0x2c
    b1f6:	481a      	ldr	r0, [pc, #104]	; (b260 <uart_cb+0x158>)
    b1f8:	3104      	adds	r1, #4
    b1fa:	6883      	ldr	r3, [r0, #8]
    b1fc:	691b      	ldr	r3, [r3, #16]
}
    b1fe:	b006      	add	sp, #24
    b200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b204:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    b206:	4b1a      	ldr	r3, [pc, #104]	; (b270 <uart_cb+0x168>)
    b208:	e7a3      	b.n	b152 <uart_cb+0x4a>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    b20a:	684b      	ldr	r3, [r1, #4]
    b20c:	1f19      	subs	r1, r3, #4
		if (buf->len > 0) {
    b20e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b210:	b12b      	cbz	r3, b21e <uart_cb+0x116>
			k_fifo_put(&fifo_uart_rx_data, buf);
    b212:	4819      	ldr	r0, [pc, #100]	; (b278 <uart_cb+0x170>)
}
    b214:	b006      	add	sp, #24
    b216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    b21a:	f024 bfd1 	b.w	301c0 <k_queue_append>
			k_free(buf);
    b21e:	4608      	mov	r0, r1
}
    b220:	b006      	add	sp, #24
    b222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    b226:	f025 b978 	b.w	3051a <k_free>
		if (!aborted_buf) {
    b22a:	4a0a      	ldr	r2, [pc, #40]	; (b254 <uart_cb+0x14c>)
    b22c:	6813      	ldr	r3, [r2, #0]
    b22e:	b90b      	cbnz	r3, b234 <uart_cb+0x12c>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    b230:	684b      	ldr	r3, [r1, #4]
    b232:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    b234:	4808      	ldr	r0, [pc, #32]	; (b258 <uart_cb+0x150>)
    b236:	688b      	ldr	r3, [r1, #8]
    b238:	6801      	ldr	r1, [r0, #0]
    b23a:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b23c:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    b23e:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
    b240:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
		uart_tx(uart, &buf->data[aborted_len],
    b242:	4807      	ldr	r0, [pc, #28]	; (b260 <uart_cb+0x158>)
    b244:	1ad2      	subs	r2, r2, r3
    b246:	4419      	add	r1, r3
}
    b248:	b006      	add	sp, #24
    b24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
    b24e:	f01e be06 	b.w	29e5e <uart_tx.constprop.0>
    b252:	bf00      	nop
    b254:	2000a324 	.word	0x2000a324
    b258:	2000a320 	.word	0x2000a320
    b25c:	20008c80 	.word	0x20008c80
    b260:	00030fac 	.word	0x00030fac
    b264:	00032a22 	.word	0x00032a22
    b268:	000315ac 	.word	0x000315ac
    b26c:	20021b2e 	.word	0x20021b2e
    b270:	00032704 	.word	0x00032704
    b274:	20009228 	.word	0x20009228
    b278:	20008c64 	.word	0x20008c64

0000b27c <shoot_minute_save_thread>:
void shoot_minute_save_thread(void){
    b27c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_uptime_ticks();
    b280:	f025 f85c 	bl	3033c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b288:	fba0 0302 	umull	r0, r3, r0, r2
    b28c:	fb02 3101 	mla	r1, r2, r1, r3
    b290:	0bc0      	lsrs	r0, r0, #15
   uint64_t actual_time = k_uptime_get()/1000;
    b292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b296:	2300      	movs	r3, #0
    b298:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    b29c:	0bc9      	lsrs	r1, r1, #15
    b29e:	f7fd fdd7 	bl	8e50 <__aeabi_ldivmod>
    h = (actual_time/3600); 
    b2a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b2a6:	2300      	movs	r3, #0
   uint64_t actual_time = k_uptime_get()/1000;
    b2a8:	460d      	mov	r5, r1
    b2aa:	4606      	mov	r6, r0
    h = (actual_time/3600); 
    b2ac:	f7fd fe20 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b2b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b2b4:	fb03 f100 	mul.w	r1, r3, r0
    b2b8:	1a70      	subs	r0, r6, r1
    b2ba:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    b2be:	223c      	movs	r2, #60	; 0x3c
    b2c0:	2300      	movs	r3, #0
    b2c2:	f7fd fe15 	bl	8ef0 <__aeabi_uldivmod>
    b2c6:	4605      	mov	r5, r0
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b2c8:	4f22      	ldr	r7, [pc, #136]	; (b354 <shoot_minute_save_thread+0xd8>)
    b2ca:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    b2ce:	f025 f835 	bl	3033c <z_impl_k_uptime_ticks>
    b2d2:	fba0 4306 	umull	r4, r3, r0, r6
    b2d6:	fb06 3101 	mla	r1, r6, r1, r3
    b2da:	0be4      	lsrs	r4, r4, #15
    actual_time = k_uptime_get()/1000;
    b2dc:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    b2e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2e4:	2300      	movs	r3, #0
    b2e6:	0bc9      	lsrs	r1, r1, #15
    b2e8:	f7fd fdb2 	bl	8e50 <__aeabi_ldivmod>
	h = (actual_time/3600); 
    b2ec:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b2f0:	2300      	movs	r3, #0
    actual_time = k_uptime_get()/1000;
    b2f2:	4604      	mov	r4, r0
    b2f4:	468a      	mov	sl, r1
	m = (actual_time -(3600*h))/60;
    b2f6:	f44f 6861 	mov.w	r8, #3600	; 0xe10
	h = (actual_time/3600); 
    b2fa:	f7fd fdf9 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b2fe:	fb08 f800 	mul.w	r8, r8, r0
	h = (actual_time/3600); 
    b302:	4681      	mov	r9, r0
	m = (actual_time -(3600*h))/60;
    b304:	ebb4 0008 	subs.w	r0, r4, r8
    b308:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b30c:	eb6a 71e8 	sbc.w	r1, sl, r8, asr #31
    b310:	2300      	movs	r3, #0
    b312:	f7fd fded 	bl	8ef0 <__aeabi_uldivmod>
   if (m==(last_minute+1)){
    b316:	1c6a      	adds	r2, r5, #1
    b318:	4282      	cmp	r2, r0
    b31a:	d1d8      	bne.n	b2ce <shoot_minute_save_thread+0x52>
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b31c:	233c      	movs	r3, #60	; 0x3c
        if (m==59){last_minute=-1;}
    b31e:	2a3b      	cmp	r2, #59	; 0x3b
    b320:	bf14      	ite	ne
    b322:	4615      	movne	r5, r2
    b324:	f04f 35ff 	moveq.w	r5, #4294967295
	s = (actual_time -(3600*h)-(m*60));
    b328:	eba4 0408 	sub.w	r4, r4, r8
		if (h==24){h=0;} // only up to 23:59:59h
    b32c:	f1b9 0f18 	cmp.w	r9, #24
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b330:	fb03 4312 	mls	r3, r3, r2, r4
    b334:	bf14      	ite	ne
    b336:	4649      	movne	r1, r9
    b338:	2100      	moveq	r1, #0
    b33a:	4638      	mov	r0, r7
    b33c:	f01e fffb 	bl	2a336 <printk>
        feed_circular_buffer();
    b340:	f000 fbfa 	bl	bb38 <feed_circular_buffer>
		print_current_position_cb(C_Buffer_Current_Position);
    b344:	4b04      	ldr	r3, [pc, #16]	; (b358 <shoot_minute_save_thread+0xdc>)
    b346:	6818      	ldr	r0, [r3, #0]
    b348:	f000 fd2c 	bl	bda4 <print_current_position_cb>
		printk(" \n");
    b34c:	4803      	ldr	r0, [pc, #12]	; (b35c <shoot_minute_save_thread+0xe0>)
    b34e:	f01e fff2 	bl	2a336 <printk>
    b352:	e7ba      	b.n	b2ca <shoot_minute_save_thread+0x4e>
    b354:	00032a40 	.word	0x00032a40
    b358:	20021468 	.word	0x20021468
    b35c:	00032ea5 	.word	0x00032ea5

0000b360 <ble_write_thread>:
{
    b360:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    b362:	f04f 32ff 	mov.w	r2, #4294967295
    b366:	f04f 33ff 	mov.w	r3, #4294967295
    b36a:	480d      	ldr	r0, [pc, #52]	; (b3a0 <ble_write_thread+0x40>)
    b36c:	f01e fd7f 	bl	29e6e <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    b370:	4d0c      	ldr	r5, [pc, #48]	; (b3a4 <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    b372:	4e0d      	ldr	r6, [pc, #52]	; (b3a8 <ble_write_thread+0x48>)
    b374:	f04f 32ff 	mov.w	r2, #4294967295
    b378:	f04f 33ff 	mov.w	r3, #4294967295
    b37c:	4628      	mov	r0, r5
    b37e:	f01a f8b9 	bl	254f4 <z_impl_k_queue_get>
    b382:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len)) {
    b384:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b386:	1d01      	adds	r1, r0, #4
    b388:	2000      	movs	r0, #0
    b38a:	f005 f927 	bl	105dc <bt_nus_send>
    b38e:	b110      	cbz	r0, b396 <ble_write_thread+0x36>
			printk("Falha aqui- Failed to send data over BLE connection");
    b390:	4630      	mov	r0, r6
    b392:	f01e ffd0 	bl	2a336 <printk>
		k_free(buf);
    b396:	4620      	mov	r0, r4
    b398:	f025 f8bf 	bl	3051a <k_free>
	for (;;) {
    b39c:	e7ea      	b.n	b374 <ble_write_thread+0x14>
    b39e:	bf00      	nop
    b3a0:	20008ba4 	.word	0x20008ba4
    b3a4:	20008c64 	.word	0x20008c64
    b3a8:	00032a70 	.word	0x00032a70

0000b3ac <adc_thread>:
}




void adc_thread(void){
    b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b3b0:	4e36      	ldr	r6, [pc, #216]	; (b48c <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    b3b2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b490 <adc_thread+0xe4>
    b3b6:	b085      	sub	sp, #20
	int err;
    

    while (1) {	
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b3b8:	4c36      	ldr	r4, [pc, #216]	; (b494 <adc_thread+0xe8>)
    b3ba:	2700      	movs	r7, #0
    b3bc:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
            k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b3be:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b498 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    b3c2:	7963      	ldrb	r3, [r4, #5]
    b3c4:	b13b      	cbz	r3, b3d6 <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    b3c6:	2301      	movs	r3, #1
    b3c8:	7922      	ldrb	r2, [r4, #4]
    b3ca:	4093      	lsls	r3, r2
    b3cc:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    b3ce:	7c23      	ldrb	r3, [r4, #16]
    b3d0:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    b3d2:	7c63      	ldrb	r3, [r4, #17]
    b3d4:	7473      	strb	r3, [r6, #17]
    b3d6:	f04f 32ff 	mov.w	r2, #4294967295
    b3da:	f04f 33ff 	mov.w	r3, #4294967295
    b3de:	4650      	mov	r0, sl
    b3e0:	f019 fe90 	bl	25104 <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    b3e4:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    b3e6:	68ab      	ldr	r3, [r5, #8]
    b3e8:	4631      	mov	r1, r6
    b3ea:	4628      	mov	r0, r5
    b3ec:	685b      	ldr	r3, [r3, #4]
    b3ee:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b3f0:	7922      	ldrb	r2, [r4, #4]
    b3f2:	f9b8 1000 	ldrsh.w	r1, [r8]
    b3f6:	4b29      	ldr	r3, [pc, #164]	; (b49c <adc_thread+0xf0>)
    b3f8:	9201      	str	r2, [sp, #4]
    b3fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

           if (flag==1){
    b3fe:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b4a0 <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    b402:	4650      	mov	r0, sl
    b404:	f019 ff4e 	bl	252a4 <z_impl_k_mutex_unlock>
    b408:	f8d9 3000 	ldr.w	r3, [r9]
    b40c:	9a01      	ldr	r2, [sp, #4]
    b40e:	2b01      	cmp	r3, #1
    b410:	d12d      	bne.n	b46e <adc_thread+0xc2>
			printk("- %s, channel %d: ",adc_channels[i].dev->name,adc_channels[i].channel_id);
    b412:	6829      	ldr	r1, [r5, #0]
    b414:	4823      	ldr	r0, [pc, #140]	; (b4a4 <adc_thread+0xf8>)
    b416:	f01e ff8e 	bl	2a336 <printk>
			printk("%"PRId16, buf_adc);
    b41a:	f9b8 1000 	ldrsh.w	r1, [r8]
    b41e:	4822      	ldr	r0, [pc, #136]	; (b4a8 <adc_thread+0xfc>)
    b420:	f01e ff89 	bl	2a336 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b424:	7963      	ldrb	r3, [r4, #5]
			val_mv = buf_adc;
    b426:	f9b8 5000 	ldrsh.w	r5, [r8]
    b42a:	b1e3      	cbz	r3, b466 <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    b42c:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b42e:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    b430:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b434:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    b436:	bf0a      	itet	eq
    b438:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    b43a:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    b43c:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    b43e:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    b440:	bf08      	it	eq
    b442:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    b444:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    b446:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    b448:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    b44a:	bf44      	itt	mi
    b44c:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b450:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    b452:	79a0      	ldrb	r0, [r4, #6]
    b454:	a903      	add	r1, sp, #12
    b456:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    b458:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    b45a:	f010 f9e3 	bl	1b824 <adc_gain_invert>
	if (ret == 0) {
    b45e:	b910      	cbnz	r0, b466 <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    b460:	9d03      	ldr	r5, [sp, #12]
    b462:	9b01      	ldr	r3, [sp, #4]
    b464:	411d      	asrs	r5, r3
			adc_raw_to_millivolts_dt(&adc_channels[i],&val_mv);
			printk(" = %"PRId32" mV\n", val_mv);
    b466:	4629      	mov	r1, r5
    b468:	4810      	ldr	r0, [pc, #64]	; (b4ac <adc_thread+0x100>)
    b46a:	f01e ff64 	bl	2a336 <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b46e:	3701      	adds	r7, #1
    b470:	2f06      	cmp	r7, #6
    b472:	f104 0414 	add.w	r4, r4, #20
    b476:	d1a4      	bne.n	b3c2 <adc_thread+0x16>
		   }
			
		}
        flag=0;
    b478:	2300      	movs	r3, #0
    b47a:	f8c9 3000 	str.w	r3, [r9]
	return z_impl_k_sleep(timeout);
    b47e:	2100      	movs	r1, #0
    b480:	f640 40cd 	movw	r0, #3277	; 0xccd
    b484:	f01b ff94 	bl	273b0 <z_impl_k_sleep>
    while (1) {	
    b488:	e796      	b.n	b3b8 <adc_thread+0xc>
    b48a:	bf00      	nop
    b48c:	200083e4 	.word	0x200083e4
    b490:	2000a334 	.word	0x2000a334
    b494:	00031840 	.word	0x00031840
    b498:	20021b10 	.word	0x20021b10
    b49c:	20021b00 	.word	0x20021b00
    b4a0:	2000a330 	.word	0x2000a330
    b4a4:	00032aa4 	.word	0x00032aa4
    b4a8:	00032ab7 	.word	0x00032ab7
    b4ac:	00032abb 	.word	0x00032abb

0000b4b0 <button_pressed_4>:
void button_pressed_4(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4b0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b4b2:	4805      	ldr	r0, [pc, #20]	; (b4c8 <button_pressed_4+0x18>)
    b4b4:	f01a f888 	bl	255c8 <z_impl_k_sem_give>
    b4b8:	f023 f9b7 	bl	2e82a <sys_clock_cycle_get_32>
}
    b4bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b4c0:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b4c2:	4802      	ldr	r0, [pc, #8]	; (b4cc <button_pressed_4+0x1c>)
    b4c4:	f01e bf37 	b.w	2a336 <printk>
    b4c8:	20008bd4 	.word	0x20008bd4
    b4cc:	00032ac5 	.word	0x00032ac5

0000b4d0 <button_pressed_3>:
void button_pressed_3(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4d0:	b508      	push	{r3, lr}
    b4d2:	4805      	ldr	r0, [pc, #20]	; (b4e8 <button_pressed_3+0x18>)
    b4d4:	f01a f878 	bl	255c8 <z_impl_k_sem_give>
    b4d8:	f023 f9a7 	bl	2e82a <sys_clock_cycle_get_32>
}
    b4dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b4e0:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b4e2:	4802      	ldr	r0, [pc, #8]	; (b4ec <button_pressed_3+0x1c>)
    b4e4:	f01e bf27 	b.w	2a336 <printk>
    b4e8:	20008bbc 	.word	0x20008bbc
    b4ec:	00032add 	.word	0x00032add

0000b4f0 <button_pressed_2>:
void button_pressed_2(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4f0:	b508      	push	{r3, lr}
    b4f2:	4807      	ldr	r0, [pc, #28]	; (b510 <button_pressed_2+0x20>)
    b4f4:	f01a f868 	bl	255c8 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    b4f8:	2101      	movs	r1, #1
    b4fa:	4806      	ldr	r0, [pc, #24]	; (b514 <button_pressed_2+0x24>)
    b4fc:	f7ff fcd0 	bl	aea0 <gpio_pin_set_dt.isra.0>
    b500:	f023 f993 	bl	2e82a <sys_clock_cycle_get_32>
}
    b504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b508:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    b50a:	4803      	ldr	r0, [pc, #12]	; (b518 <button_pressed_2+0x28>)
    b50c:	f01e bf13 	b.w	2a336 <printk>
    b510:	20008c1c 	.word	0x20008c1c
    b514:	000318c0 	.word	0x000318c0
    b518:	00032af5 	.word	0x00032af5

0000b51c <uart2_teste>:
void uart2_teste(void){
    b51c:	b510      	push	{r4, lr}
   buf = k_malloc(sizeof(*buf));
    b51e:	2030      	movs	r0, #48	; 0x30
    b520:	f025 f802 	bl	30528 <k_malloc>
    buf->data[0] = 0x41;
    b524:	f244 2341 	movw	r3, #16961	; 0x4241
    buf->len=3;
    b528:	2203      	movs	r2, #3
    buf->data[0] = 0x41;
    b52a:	8083      	strh	r3, [r0, #4]
	buf->data[2] = 0x43;
    b52c:	2343      	movs	r3, #67	; 0x43
   buf = k_malloc(sizeof(*buf));
    b52e:	4604      	mov	r4, r0
	buf->data[2] = 0x43;
    b530:	7183      	strb	r3, [r0, #6]
    buf->len=3;
    b532:	8582      	strh	r2, [r0, #44]	; 0x2c
   uart_tx(uart_2, buf->data, buf->len, SYS_FOREVER_MS);
    b534:	1d01      	adds	r1, r0, #4
    b536:	4804      	ldr	r0, [pc, #16]	; (b548 <uart2_teste+0x2c>)
    b538:	f01e fc91 	bl	29e5e <uart_tx.constprop.0>
   k_free(buf);
    b53c:	4620      	mov	r0, r4
}
    b53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   k_free(buf);
    b542:	f024 bfea 	b.w	3051a <k_free>
    b546:	bf00      	nop
    b548:	00030f94 	.word	0x00030f94

0000b54c <flash_test_>:
printf("Result Open:%d \n", err);
    b54c:	2100      	movs	r1, #0
void flash_test_(void) {
    b54e:	b510      	push	{r4, lr}
printf("Result Open:%d \n", err);
    b550:	4805      	ldr	r0, [pc, #20]	; (b568 <flash_test_+0x1c>)
    b552:	f01d fcc7 	bl	28ee4 <iprintf>
}
    b556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
printf("fa_id:%d device_id:%d size=%lu\n", my_area->fa_id,my_area->fa_device_id,my_area->fa_size);
    b55a:	2100      	movs	r1, #0
    b55c:	4803      	ldr	r0, [pc, #12]	; (b56c <flash_test_+0x20>)
    b55e:	784a      	ldrb	r2, [r1, #1]
    b560:	688b      	ldr	r3, [r1, #8]
    b562:	7809      	ldrb	r1, [r1, #0]
    b564:	f01d bcbe 	b.w	28ee4 <iprintf>
    b568:	00032b0d 	.word	0x00032b0d
    b56c:	00032b1e 	.word	0x00032b1e

0000b570 <write_memory_thread>:
void write_memory_thread(void){
    b570:	b510      	push	{r4, lr}
		    k_sem_take(&save_memory,K_FOREVER);
    b572:	4c05      	ldr	r4, [pc, #20]	; (b588 <write_memory_thread+0x18>)
    b574:	f04f 32ff 	mov.w	r2, #4294967295
    b578:	f04f 33ff 	mov.w	r3, #4294967295
    b57c:	4620      	mov	r0, r4
    b57e:	f01e fc76 	bl	29e6e <k_sem_take.constprop.0.isra.0>
		    flash_test_();
    b582:	f7ff ffe3 	bl	b54c <flash_test_>
	while(1){
    b586:	e7f5      	b.n	b574 <write_memory_thread+0x4>
    b588:	20008c1c 	.word	0x20008c1c

0000b58c <send_bluetooth>:
{
    b58c:	b084      	sub	sp, #16
    b58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b592:	ac06      	add	r4, sp, #24
    b594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b598:	203d      	movs	r0, #61	; 0x3d
    uint32_t comprimento=buf.len;
    b59a:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b59e:	f024 ffc3 	bl	30528 <k_malloc>
    int k=0;
    b5a2:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b5a4:	4605      	mov	r5, r0
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b5a6:	f8df 8054 	ldr.w	r8, [pc, #84]	; b5fc <send_bluetooth+0x70>
    while(k<comprimento-1){
    b5aa:	1e77      	subs	r7, r6, #1
    b5ac:	42a7      	cmp	r7, r4
    b5ae:	d91d      	bls.n	b5ec <send_bluetooth+0x60>
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5b0:	42b4      	cmp	r4, r6
    b5b2:	d301      	bcc.n	b5b8 <send_bluetooth+0x2c>
    b5b4:	2200      	movs	r2, #0
    b5b6:	e00f      	b.n	b5d8 <send_bluetooth+0x4c>
    b5b8:	2200      	movs	r2, #0
    b5ba:	1e6b      	subs	r3, r5, #1
       data[small_pkt]=buf.data[k];
    b5bc:	f104 0118 	add.w	r1, r4, #24
    b5c0:	4469      	add	r1, sp
       small_pkt++;
    b5c2:	3201      	adds	r2, #1
	   *(packet_data+small_pkt) = buf.data[k];
    b5c4:	7909      	ldrb	r1, [r1, #4]
       small_pkt++;
    b5c6:	b292      	uxth	r2, r2
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5c8:	2a3d      	cmp	r2, #61	; 0x3d
	   *(packet_data+small_pkt) = buf.data[k];
    b5ca:	f803 1f01 	strb.w	r1, [r3, #1]!
       k++;
    b5ce:	f104 0401 	add.w	r4, r4, #1
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5d2:	d001      	beq.n	b5d8 <send_bluetooth+0x4c>
    b5d4:	42a6      	cmp	r6, r4
    b5d6:	d8f1      	bhi.n	b5bc <send_bluetooth+0x30>
           if (bt_nus_send(NULL, packet_data ,small_pkt)) {
    b5d8:	4629      	mov	r1, r5
    b5da:	2000      	movs	r0, #0
    b5dc:	f004 fffe 	bl	105dc <bt_nus_send>
    b5e0:	2800      	cmp	r0, #0
    b5e2:	d0e3      	beq.n	b5ac <send_bluetooth+0x20>
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b5e4:	4640      	mov	r0, r8
    b5e6:	f01e fea6 	bl	2a336 <printk>
    b5ea:	e7df      	b.n	b5ac <send_bluetooth+0x20>
     k_free(packet_data);
    b5ec:	4628      	mov	r0, r5
    b5ee:	f024 ff94 	bl	3051a <k_free>
}
    b5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5f6:	2000      	movs	r0, #0
    b5f8:	b004      	add	sp, #16
    b5fa:	4770      	bx	lr
    b5fc:	00032b3e 	.word	0x00032b3e

0000b600 <send_protobuf_thread>:
void send_protobuf_thread(void){
    b600:	b510      	push	{r4, lr}
		    k_sem_take(&send_proto,K_FOREVER);
    b602:	4c05      	ldr	r4, [pc, #20]	; (b618 <send_protobuf_thread+0x18>)
    b604:	f04f 32ff 	mov.w	r2, #4294967295
    b608:	f04f 33ff 	mov.w	r3, #4294967295
    b60c:	4620      	mov	r0, r4
    b60e:	f01e fc2e 	bl	29e6e <k_sem_take.constprop.0.isra.0>
		    send_protobuf();
    b612:	f01e fc34 	bl	29e7e <send_protobuf>
   while(1){
    b616:	e7f5      	b.n	b604 <send_protobuf_thread+0x4>
    b618:	20008c4c 	.word	0x20008c4c

0000b61c <configure_all_buttons>:
void configure_all_buttons(void){
    b61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    b61e:	4c30      	ldr	r4, [pc, #192]	; (b6e0 <configure_all_buttons+0xc4>)
    b620:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b624:	4620      	mov	r0, r4
    b626:	f7ff fd03 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b62a:	4620      	mov	r0, r4
    b62c:	f7ff fa64 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    b630:	492c      	ldr	r1, [pc, #176]	; (b6e4 <configure_all_buttons+0xc8>)
    b632:	4b2d      	ldr	r3, [pc, #180]	; (b6e8 <configure_all_buttons+0xcc>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b634:	4c2d      	ldr	r4, [pc, #180]	; (b6ec <configure_all_buttons+0xd0>)
    b636:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b638:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b63c:	4620      	mov	r0, r4
    b63e:	608b      	str	r3, [r1, #8]
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b640:	4d2b      	ldr	r5, [pc, #172]	; (b6f0 <configure_all_buttons+0xd4>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b642:	f01e fc16 	bl	29e72 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b646:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b648:	4f2a      	ldr	r7, [pc, #168]	; (b6f4 <configure_all_buttons+0xd8>)
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b64a:	2217      	movs	r2, #23
    b64c:	4631      	mov	r1, r6
    b64e:	4628      	mov	r0, r5
    b650:	f01e fe71 	bl	2a336 <printk>
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b654:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b658:	4638      	mov	r0, r7
    b65a:	f7ff fce9 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b65e:	4638      	mov	r0, r7
    b660:	f7ff fa4a 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b664:	4924      	ldr	r1, [pc, #144]	; (b6f8 <configure_all_buttons+0xdc>)
    b666:	4b25      	ldr	r3, [pc, #148]	; (b6fc <configure_all_buttons+0xe0>)
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b668:	4620      	mov	r0, r4
    b66a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b66c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b670:	4f23      	ldr	r7, [pc, #140]	; (b700 <configure_all_buttons+0xe4>)
    b672:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b674:	f01e fbfd 	bl	29e72 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    b678:	2218      	movs	r2, #24
    b67a:	4631      	mov	r1, r6
    b67c:	4628      	mov	r0, r5
    b67e:	f01e fe5a 	bl	2a336 <printk>
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b682:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b686:	4638      	mov	r0, r7
    b688:	f7ff fcd2 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON3_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b68c:	4638      	mov	r0, r7
    b68e:	f7ff fa33 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b692:	491c      	ldr	r1, [pc, #112]	; (b704 <configure_all_buttons+0xe8>)
    b694:	4b1c      	ldr	r3, [pc, #112]	; (b708 <configure_all_buttons+0xec>)
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b696:	4620      	mov	r0, r4
    b698:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b69a:	f44f 7380 	mov.w	r3, #256	; 0x100
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b69e:	4f1b      	ldr	r7, [pc, #108]	; (b70c <configure_all_buttons+0xf0>)
    b6a0:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b6a2:	f01e fbe6 	bl	29e72 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    b6a6:	2208      	movs	r2, #8
    b6a8:	4631      	mov	r1, r6
    b6aa:	4628      	mov	r0, r5
    b6ac:	f01e fe43 	bl	2a336 <printk>
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b6b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b6b4:	4638      	mov	r0, r7
    b6b6:	f7ff fcbb 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON4_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b6ba:	4638      	mov	r0, r7
    b6bc:	f7ff fa1c 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b6c0:	4913      	ldr	r1, [pc, #76]	; (b710 <configure_all_buttons+0xf4>)
    b6c2:	4b14      	ldr	r3, [pc, #80]	; (b714 <configure_all_buttons+0xf8>)
 gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    b6c4:	4620      	mov	r0, r4
    b6c6:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b6c8:	f44f 7300 	mov.w	r3, #512	; 0x200
    b6cc:	608b      	str	r3, [r1, #8]
    b6ce:	f01e fbd0 	bl	29e72 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b6d2:	4631      	mov	r1, r6
    b6d4:	4628      	mov	r0, r5
}
    b6d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b6da:	2209      	movs	r2, #9
    b6dc:	f01e be2b 	b.w	2a336 <printk>
    b6e0:	00031908 	.word	0x00031908
    b6e4:	2000a390 	.word	0x2000a390
    b6e8:	0000af05 	.word	0x0000af05
    b6ec:	00030f4c 	.word	0x00030f4c
    b6f0:	00032b62 	.word	0x00032b62
    b6f4:	00031900 	.word	0x00031900
    b6f8:	2000a384 	.word	0x2000a384
    b6fc:	0000b4f1 	.word	0x0000b4f1
    b700:	000318f8 	.word	0x000318f8
    b704:	2000a378 	.word	0x2000a378
    b708:	0000b4d1 	.word	0x0000b4d1
    b70c:	000318f0 	.word	0x000318f0
    b710:	2000a36c 	.word	0x2000a36c
    b714:	0000b4b1 	.word	0x0000b4b1

0000b718 <configure_digital_inputs>:
void configure_digital_inputs(void){
    b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT );
    b71a:	4c2e      	ldr	r4, [pc, #184]	; (b7d4 <configure_digital_inputs+0xbc>)
    b71c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b720:	4620      	mov	r0, r4
    b722:	f7ff fc85 	bl	b030 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 4 Value:%d \n",gpio_pin_get_dt(DIG_0_ADR));
    b726:	4620      	mov	r0, r4
    b728:	f7ff f8ea 	bl	a900 <gpio_pin_get_dt>
    b72c:	4601      	mov	r1, r0
    b72e:	482a      	ldr	r0, [pc, #168]	; (b7d8 <configure_digital_inputs+0xc0>)
    b730:	f01e fe01 	bl	2a336 <printk>
 gpio_pin_interrupt_configure_dt(DIG_0_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b734:	4620      	mov	r0, r4
    b736:	f7ff f9df 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b73a:	4928      	ldr	r1, [pc, #160]	; (b7dc <configure_digital_inputs+0xc4>)
    b73c:	4b28      	ldr	r3, [pc, #160]	; (b7e0 <configure_digital_inputs+0xc8>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b73e:	4c29      	ldr	r4, [pc, #164]	; (b7e4 <configure_digital_inputs+0xcc>)
    b740:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b742:	2310      	movs	r3, #16
    b744:	4620      	mov	r0, r4
    b746:	608b      	str	r3, [r1, #8]
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b748:	4d27      	ldr	r5, [pc, #156]	; (b7e8 <configure_digital_inputs+0xd0>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b74a:	f01e fb92 	bl	29e72 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b74e:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b750:	4f26      	ldr	r7, [pc, #152]	; (b7ec <configure_digital_inputs+0xd4>)
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b752:	2204      	movs	r2, #4
    b754:	4631      	mov	r1, r6
    b756:	4628      	mov	r0, r5
    b758:	f01e fded 	bl	2a336 <printk>
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b75c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b760:	4638      	mov	r0, r7
    b762:	f7ff fc65 	bl	b030 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 5 Value:%d \n",gpio_pin_get_dt(DIG_1_ADR));
    b766:	4638      	mov	r0, r7
    b768:	f7ff f8ca 	bl	a900 <gpio_pin_get_dt>
    b76c:	4601      	mov	r1, r0
    b76e:	4820      	ldr	r0, [pc, #128]	; (b7f0 <configure_digital_inputs+0xd8>)
    b770:	f01e fde1 	bl	2a336 <printk>
 gpio_pin_interrupt_configure_dt(DIG_1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b774:	4638      	mov	r0, r7
    b776:	f7ff f9bf 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b77a:	491e      	ldr	r1, [pc, #120]	; (b7f4 <configure_digital_inputs+0xdc>)
    b77c:	4b1e      	ldr	r3, [pc, #120]	; (b7f8 <configure_digital_inputs+0xe0>)
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b77e:	4f1f      	ldr	r7, [pc, #124]	; (b7fc <configure_digital_inputs+0xe4>)
    b780:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b782:	2320      	movs	r3, #32
 gpio_add_callback(DIG_1.port, DIG_1_CB);
    b784:	4620      	mov	r0, r4
    b786:	608b      	str	r3, [r1, #8]
    b788:	f01e fb73 	bl	29e72 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    b78c:	2205      	movs	r2, #5
    b78e:	4631      	mov	r1, r6
    b790:	4628      	mov	r0, r5
    b792:	f01e fdd0 	bl	2a336 <printk>
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b796:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b79a:	4638      	mov	r0, r7
    b79c:	f7ff fc48 	bl	b030 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 6 Value:%d \n",gpio_pin_get_dt(DIG_2_ADR));
    b7a0:	4638      	mov	r0, r7
    b7a2:	f7ff f8ad 	bl	a900 <gpio_pin_get_dt>
    b7a6:	4601      	mov	r1, r0
    b7a8:	4815      	ldr	r0, [pc, #84]	; (b800 <configure_digital_inputs+0xe8>)
    b7aa:	f01e fdc4 	bl	2a336 <printk>
 gpio_pin_interrupt_configure_dt(DIG_2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b7ae:	4638      	mov	r0, r7
    b7b0:	f7ff f9a2 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b7b4:	4913      	ldr	r1, [pc, #76]	; (b804 <configure_digital_inputs+0xec>)
    b7b6:	4b14      	ldr	r3, [pc, #80]	; (b808 <configure_digital_inputs+0xf0>)
 gpio_add_callback(DIG_2.port, DIG_2_CB);
    b7b8:	4620      	mov	r0, r4
    b7ba:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b7bc:	2340      	movs	r3, #64	; 0x40
    b7be:	608b      	str	r3, [r1, #8]
    b7c0:	f01e fb57 	bl	29e72 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b7c4:	4631      	mov	r1, r6
    b7c6:	4628      	mov	r0, r5
}
    b7c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b7cc:	2206      	movs	r2, #6
    b7ce:	f01e bdb2 	b.w	2a336 <printk>
    b7d2:	bf00      	nop
    b7d4:	000318e8 	.word	0x000318e8
    b7d8:	00032b7e 	.word	0x00032b7e
    b7dc:	2000a360 	.word	0x2000a360
    b7e0:	0000a961 	.word	0x0000a961
    b7e4:	00030f34 	.word	0x00030f34
    b7e8:	00032b96 	.word	0x00032b96
    b7ec:	000318e0 	.word	0x000318e0
    b7f0:	00032bb9 	.word	0x00032bb9
    b7f4:	2000a354 	.word	0x2000a354
    b7f8:	0000a985 	.word	0x0000a985
    b7fc:	000318d8 	.word	0x000318d8
    b800:	00032bd1 	.word	0x00032bd1
    b804:	2000a348 	.word	0x2000a348
    b808:	0000a9a9 	.word	0x0000a9a9

0000b80c <configure_led>:
void configure_led(void){
    b80c:	b508      	push	{r3, lr}
 gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    b80e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b812:	480a      	ldr	r0, [pc, #40]	; (b83c <configure_led+0x30>)
    b814:	f7ff fc0c 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    b818:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b81c:	4808      	ldr	r0, [pc, #32]	; (b840 <configure_led+0x34>)
    b81e:	f7ff fc07 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    b822:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b826:	4807      	ldr	r0, [pc, #28]	; (b844 <configure_led+0x38>)
    b828:	f7ff fc02 	bl	b030 <gpio_pin_configure_dt.isra.0>
}
    b82c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    b830:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b834:	4804      	ldr	r0, [pc, #16]	; (b848 <configure_led+0x3c>)
    b836:	f7ff bbfb 	b.w	b030 <gpio_pin_configure_dt.isra.0>
    b83a:	bf00      	nop
    b83c:	000318d0 	.word	0x000318d0
    b840:	000318c8 	.word	0x000318c8
    b844:	000318c0 	.word	0x000318c0
    b848:	000318b8 	.word	0x000318b8

0000b84c <turn_off_all_leds>:
void turn_off_all_leds(void){
    b84c:	b508      	push	{r3, lr}
       gpio_pin_set_dt(LED1, OFF);
    b84e:	2100      	movs	r1, #0
    b850:	4808      	ldr	r0, [pc, #32]	; (b874 <turn_off_all_leds+0x28>)
    b852:	f7ff fb25 	bl	aea0 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED2, OFF);
    b856:	2100      	movs	r1, #0
    b858:	4807      	ldr	r0, [pc, #28]	; (b878 <turn_off_all_leds+0x2c>)
    b85a:	f7ff fb21 	bl	aea0 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED3, OFF);
    b85e:	2100      	movs	r1, #0
    b860:	4806      	ldr	r0, [pc, #24]	; (b87c <turn_off_all_leds+0x30>)
    b862:	f7ff fb1d 	bl	aea0 <gpio_pin_set_dt.isra.0>
}
    b866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       gpio_pin_set_dt(LED4, OFF);
    b86a:	2100      	movs	r1, #0
    b86c:	4804      	ldr	r0, [pc, #16]	; (b880 <turn_off_all_leds+0x34>)
    b86e:	f7ff bb17 	b.w	aea0 <gpio_pin_set_dt.isra.0>
    b872:	bf00      	nop
    b874:	000318d0 	.word	0x000318d0
    b878:	000318c8 	.word	0x000318c8
    b87c:	000318c0 	.word	0x000318c0
    b880:	000318b8 	.word	0x000318b8

0000b884 <configure_adc>:
void configure_adc(void){
    b884:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b886:	2500      	movs	r5, #0
    b888:	4c12      	ldr	r4, [pc, #72]	; (b8d4 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev)) {
    b88a:	f854 0c06 	ldr.w	r0, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b88e:	f024 fc24 	bl	300da <z_device_is_ready>
    b892:	b920      	cbnz	r0, b89e <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    b894:	4810      	ldr	r0, [pc, #64]	; (b8d8 <configure_adc+0x54>)
}
    b896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    b89a:	f01e bd4c 	b.w	2a336 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b89e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b8a2:	b16b      	cbz	r3, b8c0 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    b8a4:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    b8a8:	6883      	ldr	r3, [r0, #8]
    b8aa:	4621      	mov	r1, r4
    b8ac:	681b      	ldr	r3, [r3, #0]
    b8ae:	4798      	blx	r3
		if (err < 0) {
    b8b0:	1e02      	subs	r2, r0, #0
    b8b2:	da08      	bge.n	b8c6 <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b8b4:	4629      	mov	r1, r5
}
    b8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    b8ba:	4808      	ldr	r0, [pc, #32]	; (b8dc <configure_adc+0x58>)
    b8bc:	f01e bd3b 	b.w	2a336 <printk>
		return -ENOTSUP;
    b8c0:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b8c4:	e7f6      	b.n	b8b4 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b8c6:	3501      	adds	r5, #1
    b8c8:	2d06      	cmp	r5, #6
    b8ca:	f104 0414 	add.w	r4, r4, #20
    b8ce:	d1dc      	bne.n	b88a <configure_adc+0x6>
}
    b8d0:	bd38      	pop	{r3, r4, r5, pc}
    b8d2:	bf00      	nop
    b8d4:	00031846 	.word	0x00031846
    b8d8:	00032be9 	.word	0x00032be9
    b8dc:	00032c0a 	.word	0x00032c0a

0000b8e0 <main>:
{
    b8e0:	b570      	push	{r4, r5, r6, lr}
    b8e2:	b08a      	sub	sp, #40	; 0x28
	return z_impl_k_mutex_init(mutex);
    b8e4:	4862      	ldr	r0, [pc, #392]	; (ba70 <main+0x190>)
    b8e6:	f024 fc4b 	bl	30180 <z_impl_k_mutex_init>
	configure_led();
    b8ea:	f7ff ff8f 	bl	b80c <configure_led>
	turn_off_all_leds();
    b8ee:	f7ff ffad 	bl	b84c <turn_off_all_leds>
 	configure_all_buttons();
    b8f2:	f7ff fe93 	bl	b61c <configure_all_buttons>
	configure_digital_inputs();
    b8f6:	f7ff ff0f 	bl	b718 <configure_digital_inputs>
	configure_adc();
    b8fa:	f7ff ffc3 	bl	b884 <configure_adc>
    b8fe:	4d5d      	ldr	r5, [pc, #372]	; (ba74 <main+0x194>)
    b900:	4628      	mov	r0, r5
    b902:	f024 fbea 	bl	300da <z_device_is_ready>
	if (!device_is_ready(uart)) {
    b906:	b1d0      	cbz	r0, b93e <main+0x5e>
	rx = k_malloc(sizeof(*rx));
    b908:	2030      	movs	r0, #48	; 0x30
    b90a:	f024 fe0d 	bl	30528 <k_malloc>
	if (rx) {
    b90e:	4604      	mov	r4, r0
    b910:	b1a8      	cbz	r0, b93e <main+0x5e>
		rx->len = 0;
    b912:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    b914:	4958      	ldr	r1, [pc, #352]	; (ba78 <main+0x198>)
		rx->len = 0;
    b916:	8586      	strh	r6, [r0, #44]	; 0x2c
	k_work_init_delayable(&uart_work, uart_work_handler);
    b918:	4858      	ldr	r0, [pc, #352]	; (ba7c <main+0x19c>)
    b91a:	f01a fad9 	bl	25ed0 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b91e:	68ab      	ldr	r3, [r5, #8]
    b920:	681b      	ldr	r3, [r3, #0]
    b922:	b973      	cbnz	r3, b942 <main+0x62>
		k_free(rx);
    b924:	4620      	mov	r0, r4
    b926:	f024 fdf8 	bl	3051a <k_free>
		LOG_ERR("Cannot initialize UART callback");
    b92a:	4b55      	ldr	r3, [pc, #340]	; (ba80 <main+0x1a0>)
    b92c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b930:	9309      	str	r3, [sp, #36]	; 0x24
    b932:	2302      	movs	r3, #2
    b934:	4853      	ldr	r0, [pc, #332]	; (ba84 <main+0x1a4>)
    b936:	aa08      	add	r2, sp, #32
    b938:	9308      	str	r3, [sp, #32]
    b93a:	f01e fa85 	bl	29e48 <z_log_msg_static_create.constprop.0>
		error();
    b93e:	f01e fab4 	bl	29eaa <error>
	return api->callback_set(dev, callback, user_data);
    b942:	4632      	mov	r2, r6
    b944:	4628      	mov	r0, r5
    b946:	4950      	ldr	r1, [pc, #320]	; (ba88 <main+0x1a8>)
    b948:	4798      	blx	r3
	if (err) {
    b94a:	2800      	cmp	r0, #0
    b94c:	d1ea      	bne.n	b924 <main+0x44>
	tx = k_malloc(sizeof(*tx));
    b94e:	2030      	movs	r0, #48	; 0x30
    b950:	f024 fdea 	bl	30528 <k_malloc>
	if (tx) {
    b954:	4606      	mov	r6, r0
    b956:	2800      	cmp	r0, #0
    b958:	d0f1      	beq.n	b93e <main+0x5e>
		pos = snprintf(tx->data, sizeof(tx->data),
    b95a:	1d03      	adds	r3, r0, #4
    b95c:	4618      	mov	r0, r3
    b95e:	494b      	ldr	r1, [pc, #300]	; (ba8c <main+0x1ac>)
    b960:	f024 ff74 	bl	3084c <strcpy>
		tx->len = pos;
    b964:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b966:	4601      	mov	r1, r0
		tx->len = pos;
    b968:	85b2      	strh	r2, [r6, #44]	; 0x2c
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b96a:	4628      	mov	r0, r5
    b96c:	f01e fa77 	bl	29e5e <uart_tx.constprop.0>
	if (err) {
    b970:	4601      	mov	r1, r0
    b972:	b118      	cbz	r0, b97c <main+0x9c>
		printf("Cannot display welcome message (err: %d)", err);
    b974:	4846      	ldr	r0, [pc, #280]	; (ba90 <main+0x1b0>)
    b976:	f01d fab5 	bl	28ee4 <iprintf>
	if (err) {
    b97a:	e7e0      	b.n	b93e <main+0x5e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
    b97c:	1d21      	adds	r1, r4, #4
    b97e:	4628      	mov	r0, r5
    b980:	f01e fa65 	bl	29e4e <uart_rx_enable.constprop.0>
	if (err) {
    b984:	4604      	mov	r4, r0
    b986:	2800      	cmp	r0, #0
    b988:	d1d9      	bne.n	b93e <main+0x5e>
    b98a:	4e42      	ldr	r6, [pc, #264]	; (ba94 <main+0x1b4>)
    b98c:	4630      	mov	r0, r6
    b98e:	f024 fba4 	bl	300da <z_device_is_ready>
	if (!device_is_ready(uart_2)) {
    b992:	2800      	cmp	r0, #0
    b994:	d0d3      	beq.n	b93e <main+0x5e>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b996:	2030      	movs	r0, #48	; 0x30
    b998:	f024 fdc6 	bl	30528 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b99c:	493e      	ldr	r1, [pc, #248]	; (ba98 <main+0x1b8>)
	rx_uart2->len = 0;
    b99e:	8584      	strh	r4, [r0, #44]	; 0x2c
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b9a0:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b9a2:	483e      	ldr	r0, [pc, #248]	; (ba9c <main+0x1bc>)
    b9a4:	f01a fa94 	bl	25ed0 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b9a8:	68b3      	ldr	r3, [r6, #8]
    b9aa:	681b      	ldr	r3, [r3, #0]
    b9ac:	b11b      	cbz	r3, b9b6 <main+0xd6>
	return api->callback_set(dev, callback, user_data);
    b9ae:	4622      	mov	r2, r4
    b9b0:	4630      	mov	r0, r6
    b9b2:	493b      	ldr	r1, [pc, #236]	; (baa0 <main+0x1c0>)
    b9b4:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), 50);
    b9b6:	4837      	ldr	r0, [pc, #220]	; (ba94 <main+0x1b4>)
    b9b8:	1d29      	adds	r1, r5, #4
    b9ba:	f01e fa48 	bl	29e4e <uart_rx_enable.constprop.0>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    b9be:	4839      	ldr	r0, [pc, #228]	; (baa4 <main+0x1c4>)
    b9c0:	f009 fefe 	bl	157c0 <bt_conn_auth_cb_register>
		if (err) {
    b9c4:	b128      	cbz	r0, b9d2 <main+0xf2>
			printk("Failed to register authorization callbacks.\n");
    b9c6:	4838      	ldr	r0, [pc, #224]	; (baa8 <main+0x1c8>)
}
    b9c8:	b00a      	add	sp, #40	; 0x28
    b9ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    b9ce:	f01e bcb2 	b.w	2a336 <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    b9d2:	4836      	ldr	r0, [pc, #216]	; (baac <main+0x1cc>)
    b9d4:	f009 ff0e 	bl	157f4 <bt_conn_auth_info_cb_register>
		if (err) {
    b9d8:	b108      	cbz	r0, b9de <main+0xfe>
			printk("Failed to register authorization info callbacks.\n");
    b9da:	4835      	ldr	r0, [pc, #212]	; (bab0 <main+0x1d0>)
    b9dc:	e7f4      	b.n	b9c8 <main+0xe8>
	err = bt_enable(NULL);
    b9de:	f007 fd81 	bl	134e4 <bt_enable>
	if (err) {
    b9e2:	2800      	cmp	r0, #0
    b9e4:	d1ab      	bne.n	b93e <main+0x5e>
	printf("Bluetooth initialized \n\r");
    b9e6:	4833      	ldr	r0, [pc, #204]	; (bab4 <main+0x1d4>)
    b9e8:	f01d fa7c 	bl	28ee4 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    b9ec:	4832      	ldr	r0, [pc, #200]	; (bab8 <main+0x1d8>)
    b9ee:	f01d fa79 	bl	28ee4 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    b9f2:	4832      	ldr	r0, [pc, #200]	; (babc <main+0x1dc>)
    b9f4:	f01d fa76 	bl	28ee4 <iprintf>
	z_impl_k_sem_give(sem);
    b9f8:	4831      	ldr	r0, [pc, #196]	; (bac0 <main+0x1e0>)
    b9fa:	f019 fde5 	bl	255c8 <z_impl_k_sem_give>
		settings_load();
    b9fe:	f01f fc53 	bl	2b2a8 <settings_load>
	err = bt_nus_init(&nus_cb);
    ba02:	4830      	ldr	r0, [pc, #192]	; (bac4 <main+0x1e4>)
    ba04:	f004 fdde 	bl	105c4 <bt_nus_init>
	if (err) {
    ba08:	4601      	mov	r1, r0
    ba0a:	b128      	cbz	r0, ba18 <main+0x138>
		printf("Failed to initialize UART service (err: %d)", err);
    ba0c:	482e      	ldr	r0, [pc, #184]	; (bac8 <main+0x1e8>)
}
    ba0e:	b00a      	add	sp, #40	; 0x28
    ba10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    ba14:	f01d ba66 	b.w	28ee4 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    ba18:	4d2c      	ldr	r5, [pc, #176]	; (bacc <main+0x1ec>)
    ba1a:	ac04      	add	r4, sp, #16
    ba1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ba1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ba20:	682b      	ldr	r3, [r5, #0]
    ba22:	2501      	movs	r5, #1
    ba24:	6023      	str	r3, [r4, #0]
    ba26:	2202      	movs	r2, #2
    ba28:	4b29      	ldr	r3, [pc, #164]	; (bad0 <main+0x1f0>)
    ba2a:	492a      	ldr	r1, [pc, #168]	; (bad4 <main+0x1f4>)
    ba2c:	9500      	str	r5, [sp, #0]
    ba2e:	a804      	add	r0, sp, #16
    ba30:	f008 fc32 	bl	14298 <bt_le_adv_start>
	if (err) {
    ba34:	4604      	mov	r4, r0
    ba36:	b128      	cbz	r0, ba44 <main+0x164>
		printf("Advertising failed to start (err %d)", err);
    ba38:	4601      	mov	r1, r0
    ba3a:	4827      	ldr	r0, [pc, #156]	; (bad8 <main+0x1f8>)
    ba3c:	f01d fa52 	bl	28ee4 <iprintf>
}
    ba40:	b00a      	add	sp, #40	; 0x28
    ba42:	bd70      	pop	{r4, r5, r6, pc}
	flag=1;//print ad values once
    ba44:	4b25      	ldr	r3, [pc, #148]	; (badc <main+0x1fc>)
    ba46:	4e26      	ldr	r6, [pc, #152]	; (bae0 <main+0x200>)
    ba48:	601d      	str	r5, [r3, #0]
    ba4a:	ad02      	add	r5, sp, #8
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ba4c:	3401      	adds	r4, #1
		uart2_teste();
    ba4e:	f7ff fd65 	bl	b51c <uart2_teste>
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ba52:	e896 0003 	ldmia.w	r6, {r0, r1}
    ba56:	e885 0003 	stmia.w	r5, {r0, r1}
        gpio_pin_set_dt(&led, value);
    ba5a:	4628      	mov	r0, r5
    ba5c:	f004 0101 	and.w	r1, r4, #1
    ba60:	f7ff fa1e 	bl	aea0 <gpio_pin_set_dt.isra.0>
	return z_impl_k_sleep(timeout);
    ba64:	2100      	movs	r1, #0
    ba66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ba6a:	f01b fca1 	bl	273b0 <z_impl_k_sleep>
	for (;;) {
    ba6e:	e7ed      	b.n	ba4c <main+0x16c>
    ba70:	2000a334 	.word	0x2000a334
    ba74:	00030fac 	.word	0x00030fac
    ba78:	0000aa5d 	.word	0x0000aa5d
    ba7c:	20009228 	.word	0x20009228
    ba80:	00032c2c 	.word	0x00032c2c
    ba84:	000315ac 	.word	0x000315ac
    ba88:	0000b109 	.word	0x0000b109
    ba8c:	00032c4c 	.word	0x00032c4c
    ba90:	00032c73 	.word	0x00032c73
    ba94:	00030f94 	.word	0x00030f94
    ba98:	0000aa35 	.word	0x0000aa35
    ba9c:	200091f8 	.word	0x200091f8
    baa0:	00029e47 	.word	0x00029e47
    baa4:	200083cc 	.word	0x200083cc
    baa8:	00032c9c 	.word	0x00032c9c
    baac:	200083bc 	.word	0x200083bc
    bab0:	00032cc9 	.word	0x00032cc9
    bab4:	00032cfb 	.word	0x00032cfb
    bab8:	00032d14 	.word	0x00032d14
    babc:	00032d35 	.word	0x00032d35
    bac0:	20008ba4 	.word	0x20008ba4
    bac4:	200083b0 	.word	0x200083b0
    bac8:	00032d5e 	.word	0x00032d5e
    bacc:	00031680 	.word	0x00031680
    bad0:	00031828 	.word	0x00031828
    bad4:	00031830 	.word	0x00031830
    bad8:	00032d8a 	.word	0x00032d8a
    badc:	2000a330 	.word	0x2000a330
    bae0:	000318c8 	.word	0x000318c8

0000bae4 <time_stamp_function>:
uint32_t time_stamp_function(void){
    bae4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    bae6:	f024 fc29 	bl	3033c <z_impl_k_uptime_ticks>
    baea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    baee:	fba0 0302 	umull	r0, r3, r0, r2
    baf2:	fb02 3101 	mla	r1, r2, r1, r3
    baf6:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    baf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bafc:	2300      	movs	r3, #0
    bafe:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    bb02:	0bc9      	lsrs	r1, r1, #15
    bb04:	f7fd f9a4 	bl	8e50 <__aeabi_ldivmod>
    bb08:	4603      	mov	r3, r0
}
    bb0a:	4801      	ldr	r0, [pc, #4]	; (bb10 <time_stamp_function+0x2c>)
    bb0c:	4418      	add	r0, r3
    bb0e:	bd08      	pop	{r3, pc}
    bb10:	61cf9980 	.word	0x61cf9980

0000bb14 <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    bb14:	b538      	push	{r3, r4, r5, lr}
    bb16:	460d      	mov	r5, r1
    bb18:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    bb1a:	f7ff ffe3 	bl	bae4 <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    bb1e:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    bb20:	4b04      	ldr	r3, [pc, #16]	; (bb34 <values_of_digital_sensor+0x20>)
    bb22:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    bb26:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    bb2a:	e9c4 0200 	strd	r0, r2, [r4]
}
    bb2e:	4620      	mov	r0, r4
    bb30:	bd38      	pop	{r3, r4, r5, pc}
    bb32:	bf00      	nop
    bb34:	20021af0 	.word	0x20021af0

0000bb38 <feed_circular_buffer>:
void feed_circular_buffer(void){
    bb38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bb3c:	4d2f      	ldr	r5, [pc, #188]	; (bbfc <feed_circular_buffer+0xc4>)
    bb3e:	4b30      	ldr	r3, [pc, #192]	; (bc00 <feed_circular_buffer+0xc8>)
    bb40:	682e      	ldr	r6, [r5, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bb42:	f5b6 6fb4 	cmp.w	r6, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bb46:	601e      	str	r6, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bb48:	d256      	bcs.n	bbf8 <feed_circular_buffer+0xc0>
  gnss_return_value.timestamp=time_stamp_function();
    bb4a:	f7ff ffcb 	bl	bae4 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bb4e:	f04f 0800 	mov.w	r8, #0
    bb52:	4c2c      	ldr	r4, [pc, #176]	; (bc04 <feed_circular_buffer+0xcc>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb54:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bb56:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bb5a:	e9c6 8802 	strd	r8, r8, [r6, #8]
    bb5e:	6070      	str	r0, [r6, #4]
  analog_return_value.timestamp=time_stamp_function();
    bb60:	f7ff ffc0 	bl	bae4 <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    bb64:	4e28      	ldr	r6, [pc, #160]	; (bc08 <feed_circular_buffer+0xd0>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb66:	eb04 1387 	add.w	r3, r4, r7, lsl #6
  analog_return_value.value=adc_value[channel];
    bb6a:	f9b6 2000 	ldrsh.w	r2, [r6]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb6e:	466f      	mov	r7, sp
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb70:	e9c3 0204 	strd	r0, r2, [r3, #16]
  ntc_return.timestamp=time_stamp_function();
    bb74:	f7ff ffb6 	bl	bae4 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    bb78:	682b      	ldr	r3, [r5, #0]
    bb7a:	8872      	ldrh	r2, [r6, #2]
    bb7c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb80:	839a      	strh	r2, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    bb82:	f7ff ffaf 	bl	bae4 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    bb86:	682b      	ldr	r3, [r5, #0]
    bb88:	88b2      	ldrh	r2, [r6, #4]
    bb8a:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb8e:	849a      	strh	r2, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    bb90:	f7ff ffa8 	bl	bae4 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    bb94:	682b      	ldr	r3, [r5, #0]
    bb96:	88f2      	ldrh	r2, [r6, #6]
    bb98:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  ntc_return.timestamp=time_stamp_function();
    bb9e:	f7ff ffa1 	bl	bae4 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    bba2:	682b      	ldr	r3, [r5, #0]
    bba4:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bba8:	6198      	str	r0, [r3, #24]
  ntc_return.timestamp=time_stamp_function();
    bbaa:	f7ff ff9b 	bl	bae4 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    bbae:	682b      	ldr	r3, [r5, #0]
    bbb0:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bbb4:	6218      	str	r0, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    bbb6:	f7ff ff95 	bl	bae4 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bbba:	682e      	ldr	r6, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbbc:	4641      	mov	r1, r8
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bbbe:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bbc2:	62b0      	str	r0, [r6, #40]	; 0x28
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbc4:	4638      	mov	r0, r7
    bbc6:	f7ff ffa5 	bl	bb14 <values_of_digital_sensor>
    bbca:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbce:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbd0:	3630      	adds	r6, #48	; 0x30
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbd2:	eb04 1483 	add.w	r4, r4, r3, lsl #6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbd6:	e886 0003 	stmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbda:	3438      	adds	r4, #56	; 0x38
    bbdc:	2101      	movs	r1, #1
    bbde:	4638      	mov	r0, r7
    bbe0:	f7ff ff98 	bl	bb14 <values_of_digital_sensor>
    bbe4:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer_Free_Position++;
    bbe8:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbea:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer_Free_Position++;
    bbee:	3301      	adds	r3, #1
    bbf0:	602b      	str	r3, [r5, #0]
}
    bbf2:	b002      	add	sp, #8
    bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbf8:	2300      	movs	r3, #0
    bbfa:	e7f9      	b.n	bbf0 <feed_circular_buffer+0xb8>
    bbfc:	2002146c 	.word	0x2002146c
    bc00:	20021468 	.word	0x20021468
    bc04:	2000ac68 	.word	0x2000ac68
    bc08:	20021b00 	.word	0x20021b00

0000bc0c <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    bc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    bc0e:	4b1c      	ldr	r3, [pc, #112]	; (bc80 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    bc10:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    bc12:	6818      	ldr	r0, [r3, #0]
    bc14:	889b      	ldrh	r3, [r3, #4]
    bc16:	9000      	str	r0, [sp, #0]
    bc18:	2218      	movs	r2, #24
    bc1a:	2100      	movs	r1, #0
    bc1c:	f10d 0006 	add.w	r0, sp, #6
    bc20:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    bc24:	2601      	movs	r6, #1
   char tag[30]="10203";
    bc26:	f024 fcdc 	bl	305e2 <memset>
     msg.positions.timestamp=1;
    bc2a:	2300      	movs	r3, #0
    msg.timestamp=0;
    bc2c:	4c15      	ldr	r4, [pc, #84]	; (bc84 <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    bc2e:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    bc30:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    bc34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bc38:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    bc3a:	4b13      	ldr	r3, [pc, #76]	; (bc88 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bc3c:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    bc3e:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    bc40:	230b      	movs	r3, #11
    bc42:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    bc44:	4b11      	ldr	r3, [pc, #68]	; (bc8c <fill_fields_to_test+0x80>)
    bc46:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    bc48:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    bc4a:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    bc4c:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    bc4e:	7766      	strb	r6, [r4, #29]
    bc50:	f104 001e 	add.w	r0, r4, #30
    bc54:	f024 fdfa 	bl	3084c <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc58:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    bc5c:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bc60:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc64:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc66:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    bc6a:	f7fc ff4d 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    bc6e:	3501      	adds	r5, #1
    bc70:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc72:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    bc74:	f104 0424 	add.w	r4, r4, #36	; 0x24
    bc78:	d1e6      	bne.n	bc48 <fill_fields_to_test+0x3c>
}
    bc7a:	4802      	ldr	r0, [pc, #8]	; (bc84 <fill_fields_to_test+0x78>)
    bc7c:	b009      	add	sp, #36	; 0x24
    bc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc80:	000316d4 	.word	0x000316d4
    bc84:	2000ab78 	.word	0x2000ab78
    bc88:	40400000 	.word	0x40400000
    bc8c:	41400000 	.word	0x41400000

0000bc90 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    bc90:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc92:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    bc96:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    bc98:	f7ff ffb8 	bl	bc0c <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    bc9c:	2202      	movs	r2, #2
    bc9e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    bca2:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    bca6:	4a3a      	ldr	r2, [pc, #232]	; (bd90 <send_array_dd_v0+0x100>)
    bca8:	ae0c      	add	r6, sp, #48	; 0x30
    bcaa:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bcac:	4631      	mov	r1, r6
    bcae:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    bcb0:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bcb2:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bcb4:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bcb6:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    bcb8:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bcba:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bcbc:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bcbe:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    bcc0:	f101 010c 	add.w	r1, r1, #12
    bcc4:	d1f8      	bne.n	bcb8 <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bcc6:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bcc8:	6958      	ldr	r0, [r3, #20]
    bcca:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    bccc:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bcce:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bcd0:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bcd4:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    bcd8:	f101 0108 	add.w	r1, r1, #8
    bcdc:	d1f6      	bne.n	bccc <send_array_dd_v0+0x3c>
    bcde:	f103 051e 	add.w	r5, r3, #30
    bce2:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    bce6:	f855 3c06 	ldr.w	r3, [r5, #-6]
    bcea:	4629      	mov	r1, r5
    bcec:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    bcf0:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    bcf4:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    bcf8:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    bcfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    bd00:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    bd04:	f024 fda2 	bl	3084c <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bd08:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    bd0a:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bd0c:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bd10:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bd12:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bd16:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bd1a:	4633      	mov	r3, r6
    bd1c:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    bd20:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bd22:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bd24:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bd28:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    bd2c:	f103 0308 	add.w	r3, r3, #8
    bd30:	d1f6      	bne.n	bd20 <send_array_dd_v0+0x90>
   while (sensor_id<6){
    bd32:	3524      	adds	r5, #36	; 0x24
    bd34:	42a5      	cmp	r5, r4
    bd36:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    bd3a:	d1d4      	bne.n	bce6 <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bd3c:	466c      	mov	r4, sp
    bd3e:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    bd42:	4668      	mov	r0, sp
    bd44:	4913      	ldr	r1, [pc, #76]	; (bd94 <send_array_dd_v0+0x104>)
    bd46:	ad07      	add	r5, sp, #28
    bd48:	f000 f906 	bl	bf58 <pb_ostream_from_buffer>
    bd4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd50:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd52:	4911      	ldr	r1, [pc, #68]	; (bd98 <send_array_dd_v0+0x108>)
    bd54:	aa0c      	add	r2, sp, #48	; 0x30
    bd56:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bd58:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd5a:	f000 fb7d 	bl	c458 <pb_encode>
   int j=0;
    bd5e:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    bd60:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    bd62:	490c      	ldr	r1, [pc, #48]	; (bd94 <send_array_dd_v0+0x104>)
    bd64:	4a0d      	ldr	r2, [pc, #52]	; (bd9c <send_array_dd_v0+0x10c>)
    bd66:	4283      	cmp	r3, r0
    bd68:	d10b      	bne.n	bd82 <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    bd6a:	490d      	ldr	r1, [pc, #52]	; (bda0 <send_array_dd_v0+0x110>)
    return function_return;
    bd6c:	f240 72dc 	movw	r2, #2012	; 0x7dc
    bd70:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    bd72:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    bd76:	f024 fbfa 	bl	3056e <memcpy>
}
    bd7a:	4638      	mov	r0, r7
    bd7c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    bd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    bd82:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    bd86:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    bd88:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    bd8c:	e7eb      	b.n	bd66 <send_array_dd_v0+0xd6>
    bd8e:	bf00      	nop
    bd90:	0012d687 	.word	0x0012d687
    bd94:	20021b2f 	.word	0x20021b2f
    bd98:	0003191c 	.word	0x0003191c
    bd9c:	2000a39f 	.word	0x2000a39f
    bda0:	2000a39c 	.word	0x2000a39c

0000bda4 <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    bda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bda8:	4604      	mov	r4, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bdaa:	4d30      	ldr	r5, [pc, #192]	; (be6c <print_current_position_cb+0xc8>)
    printf("\n\n####Position %d #####\n",pos);
    bdac:	4601      	mov	r1, r0
void print_current_position_cb(uint32_t pos){
    bdae:	b085      	sub	sp, #20
    printf("\n\n####Position %d #####\n",pos);
    bdb0:	482f      	ldr	r0, [pc, #188]	; (be70 <print_current_position_cb+0xcc>)
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bdb2:	01a6      	lsls	r6, r4, #6
    bdb4:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    bdb8:	f01d f894 	bl	28ee4 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bdbc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    bdc0:	6863      	ldr	r3, [r4, #4]
    bdc2:	482c      	ldr	r0, [pc, #176]	; (be74 <print_current_position_cb+0xd0>)
    bdc4:	f01d f88e 	bl	28ee4 <iprintf>
	if (!spec->channel_cfg_dt_node_exists) {
    bdc8:	4a2b      	ldr	r2, [pc, #172]	; (be78 <print_current_position_cb+0xd4>)
    val_mv = C_Buffer[pos].analog.value;
    bdca:	6967      	ldr	r7, [r4, #20]
    bdcc:	7953      	ldrb	r3, [r2, #5]
    bdce:	b1cb      	cbz	r3, be04 <print_current_position_cb+0x60>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bdd0:	79d3      	ldrb	r3, [r2, #7]
	if (spec->channel_cfg.differential) {
    bdd2:	7a91      	ldrb	r1, [r2, #10]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bdd4:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    bdd6:	bf0a      	itet	eq
    bdd8:	6813      	ldreq	r3, [r2, #0]
		vref_mv = spec->vref_mv;
    bdda:	89d3      	ldrhne	r3, [r2, #14]
	return api->ref_internal;
    bddc:	689b      	ldreq	r3, [r3, #8]
	resolution = spec->resolution;
    bdde:	7c14      	ldrb	r4, [r2, #16]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bde0:	bf08      	it	eq
    bde2:	891b      	ldrheq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    bde4:	0689      	lsls	r1, r1, #26
	int32_t adc_mv = *valp * ref_mv;
    bde6:	fb07 f303 	mul.w	r3, r7, r3
		resolution -= 1U;
    bdea:	bf48      	it	mi
    bdec:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int ret = adc_gain_invert(gain, &adc_mv);
    bdf0:	7990      	ldrb	r0, [r2, #6]
    bdf2:	a903      	add	r1, sp, #12
		resolution -= 1U;
    bdf4:	bf48      	it	mi
    bdf6:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    bdf8:	9303      	str	r3, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    bdfa:	f00f fd13 	bl	1b824 <adc_gain_invert>
	if (ret == 0) {
    bdfe:	b908      	cbnz	r0, be04 <print_current_position_cb+0x60>
		*valp = (adc_mv >> resolution);
    be00:	9f03      	ldr	r7, [sp, #12]
    be02:	4127      	asrs	r7, r4
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    be04:	19ac      	adds	r4, r5, r6
    be06:	463b      	mov	r3, r7
    be08:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    be0c:	481b      	ldr	r0, [pc, #108]	; (be7c <print_current_position_cb+0xd8>)
    be0e:	f01d f869 	bl	28ee4 <iprintf>
    int i=0;
    be12:	2700      	movs	r7, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be14:	f8df 9068 	ldr.w	r9, [pc, #104]	; be80 <print_current_position_cb+0xdc>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    be18:	f107 0801 	add.w	r8, r7, #1
    be1c:	8ba0      	ldrh	r0, [r4, #28]
    be1e:	fa5f f188 	uxtb.w	r1, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be22:	f8d4 a018 	ldr.w	sl, [r4, #24]
      C_Buffer[pos].ntc[i].value,
    be26:	f9b4 b01c 	ldrsh.w	fp, [r4, #28]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    be2a:	f7fd fab5 	bl	9398 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be2e:	f7fc faf7 	bl	8420 <__aeabi_f2d>
    be32:	e9cd 0100 	strd	r0, r1, [sp]
    be36:	4639      	mov	r1, r7
      i++;
    be38:	4647      	mov	r7, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be3a:	465b      	mov	r3, fp
    be3c:	4652      	mov	r2, sl
    be3e:	4648      	mov	r0, r9
    be40:	f01d f850 	bl	28ee4 <iprintf>
    while (i<3){
    be44:	2f03      	cmp	r7, #3
    be46:	f104 0408 	add.w	r4, r4, #8
    be4a:	d1e5      	bne.n	be18 <print_current_position_cb+0x74>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    be4c:	4435      	add	r5, r6
    be4e:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
    be52:	2100      	movs	r1, #0
    be54:	480b      	ldr	r0, [pc, #44]	; (be84 <print_current_position_cb+0xe0>)
    be56:	f01d f845 	bl	28ee4 <iprintf>
    be5a:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    be5e:	2101      	movs	r1, #1
    be60:	4808      	ldr	r0, [pc, #32]	; (be84 <print_current_position_cb+0xe0>)
}
    be62:	b005      	add	sp, #20
    be64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    be68:	f01d b83c 	b.w	28ee4 <iprintf>
    be6c:	2000ac68 	.word	0x2000ac68
    be70:	00032e3d 	.word	0x00032e3d
    be74:	00032e56 	.word	0x00032e56
    be78:	00031840 	.word	0x00031840
    be7c:	00032e82 	.word	0x00032e82
    be80:	00032ea8 	.word	0x00032ea8
    be84:	00032ece 	.word	0x00032ece

0000be88 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    be88:	b500      	push	{lr}
    pb_type_t type = field->type;
    be8a:	7d83      	ldrb	r3, [r0, #22]
{
    be8c:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    be8e:	2b3f      	cmp	r3, #63	; 0x3f
{
    be90:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    be92:	d849      	bhi.n	bf28 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    be94:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    be98:	d01c      	beq.n	bed4 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    be9a:	2820      	cmp	r0, #32
    be9c:	d102      	bne.n	bea4 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    be9e:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    bea0:	8818      	ldrh	r0, [r3, #0]
    bea2:	e006      	b.n	beb2 <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    bea4:	2830      	cmp	r0, #48	; 0x30
    bea6:	d0fa      	beq.n	be9e <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    bea8:	2810      	cmp	r0, #16
    beaa:	d106      	bne.n	beba <pb_check_proto3_default_value+0x32>
    beac:	6a0a      	ldr	r2, [r1, #32]
    beae:	b122      	cbz	r2, beba <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    beb0:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    beb2:	fab0 f080 	clz	r0, r0
    beb6:	0940      	lsrs	r0, r0, #5
    beb8:	e00c      	b.n	bed4 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    beba:	680a      	ldr	r2, [r1, #0]
    bebc:	6890      	ldr	r0, [r2, #8]
    bebe:	b980      	cbnz	r0, bee2 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    bec0:	f003 020f 	and.w	r2, r3, #15
    bec4:	2a05      	cmp	r2, #5
    bec6:	d80e      	bhi.n	bee6 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    bec8:	69cb      	ldr	r3, [r1, #28]
    beca:	8a4a      	ldrh	r2, [r1, #18]
    becc:	441a      	add	r2, r3
    bece:	4293      	cmp	r3, r2
    bed0:	d103      	bne.n	beda <pb_check_proto3_default_value+0x52>
            return true;
    bed2:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    bed4:	b00b      	add	sp, #44	; 0x2c
    bed6:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    beda:	f813 1b01 	ldrb.w	r1, [r3], #1
    bede:	2900      	cmp	r1, #0
    bee0:	d0f5      	beq.n	bece <pb_check_proto3_default_value+0x46>
            return false;
    bee2:	2000      	movs	r0, #0
    bee4:	e7f6      	b.n	bed4 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    bee6:	2a06      	cmp	r2, #6
    bee8:	d101      	bne.n	beee <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    beea:	69cb      	ldr	r3, [r1, #28]
    beec:	e7d8      	b.n	bea0 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    beee:	2a07      	cmp	r2, #7
    bef0:	d102      	bne.n	bef8 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    bef2:	69cb      	ldr	r3, [r1, #28]
    bef4:	7818      	ldrb	r0, [r3, #0]
    bef6:	e7dc      	b.n	beb2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    bef8:	2a0b      	cmp	r2, #11
    befa:	d101      	bne.n	bf00 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    befc:	8a48      	ldrh	r0, [r1, #18]
    befe:	e7d8      	b.n	beb2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    bf00:	f003 030e 	and.w	r3, r3, #14
    bf04:	2b08      	cmp	r3, #8
    bf06:	d1e5      	bne.n	bed4 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    bf08:	69ca      	ldr	r2, [r1, #28]
    bf0a:	4668      	mov	r0, sp
    bf0c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    bf0e:	f01e f877 	bl	2a000 <pb_field_iter_begin>
    bf12:	2800      	cmp	r0, #0
    bf14:	d0dd      	beq.n	bed2 <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    bf16:	4668      	mov	r0, sp
    bf18:	f7ff ffb6 	bl	be88 <pb_check_proto3_default_value>
    bf1c:	2800      	cmp	r0, #0
    bf1e:	d0d9      	beq.n	bed4 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    bf20:	4668      	mov	r0, sp
    bf22:	f01e f890 	bl	2a046 <pb_field_iter_next>
    bf26:	e7f4      	b.n	bf12 <pb_check_proto3_default_value+0x8a>
    bf28:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    bf2c:	2a80      	cmp	r2, #128	; 0x80
    bf2e:	d101      	bne.n	bf34 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    bf30:	69c0      	ldr	r0, [r0, #28]
    bf32:	e7be      	b.n	beb2 <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    bf34:	2a40      	cmp	r2, #64	; 0x40
    bf36:	d1d4      	bne.n	bee2 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    bf38:	f003 030f 	and.w	r3, r3, #15
    bf3c:	2b0a      	cmp	r3, #10
    bf3e:	d102      	bne.n	bf46 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    bf40:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    bf42:	6818      	ldr	r0, [r3, #0]
    bf44:	e7b5      	b.n	beb2 <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    bf46:	6803      	ldr	r3, [r0, #0]
    bf48:	4a02      	ldr	r2, [pc, #8]	; (bf54 <pb_check_proto3_default_value+0xcc>)
    bf4a:	68d8      	ldr	r0, [r3, #12]
    bf4c:	4290      	cmp	r0, r2
    bf4e:	d1b0      	bne.n	beb2 <pb_check_proto3_default_value+0x2a>
    bf50:	e7f6      	b.n	bf40 <pb_check_proto3_default_value+0xb8>
    bf52:	bf00      	nop
    bf54:	0002a065 	.word	0x0002a065

0000bf58 <pb_ostream_from_buffer>:
    return stream;
    bf58:	6082      	str	r2, [r0, #8]
    bf5a:	2200      	movs	r2, #0
{
    bf5c:	b510      	push	{r4, lr}
    return stream;
    bf5e:	4c03      	ldr	r4, [pc, #12]	; (bf6c <pb_ostream_from_buffer+0x14>)
    bf60:	e9c0 2203 	strd	r2, r2, [r0, #12]
    bf64:	e9c0 4100 	strd	r4, r1, [r0]
}
    bf68:	bd10      	pop	{r4, pc}
    bf6a:	bf00      	nop
    bf6c:	0002a095 	.word	0x0002a095

0000bf70 <pb_write>:
{
    bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf72:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    bf74:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    bf76:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    bf78:	b19a      	cbz	r2, bfa2 <pb_write+0x32>
    bf7a:	6806      	ldr	r6, [r0, #0]
    bf7c:	b18e      	cbz	r6, bfa2 <pb_write+0x32>
    bf7e:	18d3      	adds	r3, r2, r3
    bf80:	d202      	bcs.n	bf88 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    bf82:	6887      	ldr	r7, [r0, #8]
    bf84:	429f      	cmp	r7, r3
    bf86:	d207      	bcs.n	bf98 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    bf88:	6923      	ldr	r3, [r4, #16]
    bf8a:	4a08      	ldr	r2, [pc, #32]	; (bfac <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	bf08      	it	eq
    bf90:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    bf92:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    bf94:	6123      	str	r3, [r4, #16]
}
    bf96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    bf98:	47b0      	blx	r6
    bf9a:	b910      	cbnz	r0, bfa2 <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    bf9c:	6923      	ldr	r3, [r4, #16]
    bf9e:	4a04      	ldr	r2, [pc, #16]	; (bfb0 <pb_write+0x40>)
    bfa0:	e7f4      	b.n	bf8c <pb_write+0x1c>
    stream->bytes_written += count;
    bfa2:	68e3      	ldr	r3, [r4, #12]
    return true;
    bfa4:	2001      	movs	r0, #1
    stream->bytes_written += count;
    bfa6:	442b      	add	r3, r5
    bfa8:	60e3      	str	r3, [r4, #12]
    return true;
    bfaa:	e7f4      	b.n	bf96 <pb_write+0x26>
    bfac:	00032ef0 	.word	0x00032ef0
    bfb0:	00032efc 	.word	0x00032efc

0000bfb4 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    bfb4:	b410      	push	{r4}
    bfb6:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    bfb8:	8a4b      	ldrh	r3, [r1, #18]
    bfba:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    bfbe:	2c02      	cmp	r4, #2
    bfc0:	d117      	bne.n	bff2 <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    bfc2:	2b01      	cmp	r3, #1
    bfc4:	d105      	bne.n	bfd2 <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    bfc6:	69cb      	ldr	r3, [r1, #28]
    bfc8:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    bfca:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    bfcc:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    bfce:	f01e b86a 	b.w	2a0a6 <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    bfd2:	2b02      	cmp	r3, #2
    bfd4:	d102      	bne.n	bfdc <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    bfd6:	69cb      	ldr	r3, [r1, #28]
    bfd8:	881a      	ldrh	r2, [r3, #0]
    bfda:	e7f6      	b.n	bfca <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    bfdc:	2b04      	cmp	r3, #4
    bfde:	d102      	bne.n	bfe6 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    bfe0:	69cb      	ldr	r3, [r1, #28]
    bfe2:	681a      	ldr	r2, [r3, #0]
    bfe4:	e7f1      	b.n	bfca <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    bfe6:	2b08      	cmp	r3, #8
    bfe8:	d11f      	bne.n	c02a <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    bfea:	69cb      	ldr	r3, [r1, #28]
    bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
    bff0:	e7ec      	b.n	bfcc <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    bff2:	2b01      	cmp	r3, #1
    bff4:	d108      	bne.n	c008 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    bff6:	69cb      	ldr	r3, [r1, #28]
    bff8:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    bffc:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    bffe:	2c03      	cmp	r4, #3
    c000:	d1e4      	bne.n	bfcc <pb_enc_varint+0x18>
}
    c002:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    c004:	f01e b88e 	b.w	2a124 <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    c008:	2b02      	cmp	r3, #2
    c00a:	d103      	bne.n	c014 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    c00c:	69cb      	ldr	r3, [r1, #28]
    c00e:	f9b3 2000 	ldrsh.w	r2, [r3]
    c012:	e7f3      	b.n	bffc <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    c014:	2b04      	cmp	r3, #4
    c016:	d102      	bne.n	c01e <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    c018:	69cb      	ldr	r3, [r1, #28]
    c01a:	681a      	ldr	r2, [r3, #0]
    c01c:	e7ee      	b.n	bffc <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    c01e:	2b08      	cmp	r3, #8
    c020:	d103      	bne.n	c02a <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    c022:	69cb      	ldr	r3, [r1, #28]
    c024:	e9d3 2300 	ldrd	r2, r3, [r3]
    c028:	e7e9      	b.n	bffe <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    c02a:	6903      	ldr	r3, [r0, #16]
    c02c:	4a03      	ldr	r2, [pc, #12]	; (c03c <pb_enc_varint+0x88>)
    c02e:	2b00      	cmp	r3, #0
    c030:	bf08      	it	eq
    c032:	4613      	moveq	r3, r2
    c034:	6103      	str	r3, [r0, #16]
}
    c036:	bc10      	pop	{r4}
    c038:	2000      	movs	r0, #0
    c03a:	4770      	bx	lr
    c03c:	00032f05 	.word	0x00032f05

0000c040 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    c040:	8a4a      	ldrh	r2, [r1, #18]
    c042:	2a04      	cmp	r2, #4
    c044:	d102      	bne.n	c04c <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    c046:	69c9      	ldr	r1, [r1, #28]
    c048:	f01e b875 	b.w	2a136 <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    c04c:	2a08      	cmp	r2, #8
    c04e:	d102      	bne.n	c056 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    c050:	69c9      	ldr	r1, [r1, #28]
    c052:	f01e b873 	b.w	2a13c <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    c056:	6902      	ldr	r2, [r0, #16]
    c058:	4903      	ldr	r1, [pc, #12]	; (c068 <pb_enc_fixed+0x28>)
    c05a:	2a00      	cmp	r2, #0
    c05c:	bf08      	it	eq
    c05e:	460a      	moveq	r2, r1
    c060:	6102      	str	r2, [r0, #16]
    }
}
    c062:	2000      	movs	r0, #0
    c064:	4770      	bx	lr
    c066:	bf00      	nop
    c068:	00032f05 	.word	0x00032f05

0000c06c <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    c06c:	7d8a      	ldrb	r2, [r1, #22]
{
    c06e:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    c070:	f002 020f 	and.w	r2, r2, #15
    c074:	2a0b      	cmp	r2, #11
    c076:	d811      	bhi.n	c09c <pb_encode_tag_for_field+0x30>
    c078:	e8df f002 	tbb	[pc, r2]
    c07c:	0c0c0c0c 	.word	0x0c0c0c0c
    c080:	0a0a060e 	.word	0x0a0a060e
    c084:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    c088:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    c08a:	8a1a      	ldrh	r2, [r3, #16]
    c08c:	f01e b859 	b.w	2a142 <pb_encode_tag>
            wiretype = PB_WT_STRING;
    c090:	2102      	movs	r1, #2
            break;
    c092:	e7fa      	b.n	c08a <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    c094:	2100      	movs	r1, #0
    c096:	e7f8      	b.n	c08a <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    c098:	2105      	movs	r1, #5
    c09a:	e7f6      	b.n	c08a <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    c09c:	6903      	ldr	r3, [r0, #16]
    c09e:	4a03      	ldr	r2, [pc, #12]	; (c0ac <pb_encode_tag_for_field+0x40>)
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	bf08      	it	eq
    c0a4:	4613      	moveq	r3, r2
    c0a6:	6103      	str	r3, [r0, #16]
}
    c0a8:	2000      	movs	r0, #0
    c0aa:	4770      	bx	lr
    c0ac:	00032f17 	.word	0x00032f17

0000c0b0 <pb_encode_submessage>:
{
    c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0b4:	460e      	mov	r6, r1
    c0b6:	4617      	mov	r7, r2
    c0b8:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c0ba:	2214      	movs	r2, #20
    c0bc:	2100      	movs	r1, #0
{
    c0be:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c0c0:	a801      	add	r0, sp, #4
    c0c2:	f024 fa8e 	bl	305e2 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    c0c6:	463a      	mov	r2, r7
    c0c8:	4631      	mov	r1, r6
    c0ca:	a801      	add	r0, sp, #4
    c0cc:	f000 f9c4 	bl	c458 <pb_encode>
    c0d0:	b910      	cbnz	r0, c0d8 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    c0d2:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    c0d4:	6123      	str	r3, [r4, #16]
    c0d6:	e008      	b.n	c0ea <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c0d8:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    c0dc:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c0de:	4643      	mov	r3, r8
    c0e0:	462a      	mov	r2, r5
    c0e2:	4620      	mov	r0, r4
    c0e4:	f01d ffdf 	bl	2a0a6 <pb_encode_varint>
    c0e8:	b918      	cbnz	r0, c0f2 <pb_encode_submessage+0x42>
        return false;
    c0ea:	2000      	movs	r0, #0
}
    c0ec:	b006      	add	sp, #24
    c0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    c0f2:	6821      	ldr	r1, [r4, #0]
    c0f4:	b921      	cbnz	r1, c100 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    c0f6:	462a      	mov	r2, r5
    c0f8:	4620      	mov	r0, r4
    c0fa:	f7ff ff39 	bl	bf70 <pb_write>
    c0fe:	e7f5      	b.n	c0ec <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    c100:	68e3      	ldr	r3, [r4, #12]
    c102:	68a2      	ldr	r2, [r4, #8]
    c104:	442b      	add	r3, r5
    c106:	4293      	cmp	r3, r2
    c108:	d905      	bls.n	c116 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    c10a:	6923      	ldr	r3, [r4, #16]
    c10c:	4a0e      	ldr	r2, [pc, #56]	; (c148 <pb_encode_submessage+0x98>)
    c10e:	2b00      	cmp	r3, #0
    c110:	bf08      	it	eq
    c112:	4613      	moveq	r3, r2
    c114:	e7de      	b.n	c0d4 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    c116:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    c118:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    c11a:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    c11c:	a801      	add	r0, sp, #4
    c11e:	4631      	mov	r1, r6
    substream.max_size = size;
    c120:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    c124:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    c128:	f000 f996 	bl	c458 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    c12c:	9a04      	ldr	r2, [sp, #16]
    c12e:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    c130:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    c132:	4413      	add	r3, r2
    c134:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    c136:	9b02      	ldr	r3, [sp, #8]
    c138:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    c13a:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    c13c:	d101      	bne.n	c142 <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    c13e:	6123      	str	r3, [r4, #16]
    c140:	e7d4      	b.n	c0ec <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    c142:	4a02      	ldr	r2, [pc, #8]	; (c14c <pb_encode_submessage+0x9c>)
    c144:	e7e3      	b.n	c10e <pb_encode_submessage+0x5e>
    c146:	bf00      	nop
    c148:	00032ef0 	.word	0x00032ef0
    c14c:	00032f2a 	.word	0x00032f2a

0000c150 <encode_basic_field>:
{
    c150:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    c152:	69cb      	ldr	r3, [r1, #28]
{
    c154:	4604      	mov	r4, r0
    c156:	460d      	mov	r5, r1
    if (!field->pData)
    c158:	2b00      	cmp	r3, #0
    c15a:	d07f      	beq.n	c25c <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    c15c:	f7ff ff86 	bl	c06c <pb_encode_tag_for_field>
    c160:	2800      	cmp	r0, #0
    c162:	d073      	beq.n	c24c <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    c164:	7da8      	ldrb	r0, [r5, #22]
    c166:	f000 030f 	and.w	r3, r0, #15
    c16a:	2b0b      	cmp	r3, #11
    c16c:	d873      	bhi.n	c256 <encode_basic_field+0x106>
    c16e:	e8df f003 	tbb	[pc, r3]
    c172:	1106      	.short	0x1106
    c174:	17171111 	.word	0x17171111
    c178:	5252351d 	.word	0x5252351d
    c17c:	6f72      	.short	0x6f72
        if (p[i] != 0)
    c17e:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    c180:	4620      	mov	r0, r4
}
    c182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    c186:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    c188:	2300      	movs	r3, #0
    c18a:	3a00      	subs	r2, #0
    c18c:	bf18      	it	ne
    c18e:	2201      	movne	r2, #1
    c190:	f01d bf89 	b.w	2a0a6 <pb_encode_varint>
            return pb_enc_varint(stream, field);
    c194:	4629      	mov	r1, r5
    c196:	4620      	mov	r0, r4
}
    c198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    c19c:	f7ff bf0a 	b.w	bfb4 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    c1a0:	4629      	mov	r1, r5
    c1a2:	4620      	mov	r0, r4
}
    c1a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    c1a8:	f7ff bf4a 	b.w	c040 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    c1ac:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    c1ae:	b909      	cbnz	r1, c1b4 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    c1b0:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    c1b2:	e00e      	b.n	c1d2 <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c1b4:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c1b6:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c1b8:	d80a      	bhi.n	c1d0 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c1ba:	8a6b      	ldrh	r3, [r5, #18]
    c1bc:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c1be:	4293      	cmp	r3, r2
    c1c0:	d206      	bcs.n	c1d0 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    c1c2:	6923      	ldr	r3, [r4, #16]
    c1c4:	4a26      	ldr	r2, [pc, #152]	; (c260 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    c1c6:	2b00      	cmp	r3, #0
    c1c8:	bf08      	it	eq
    c1ca:	4613      	moveq	r3, r2
    c1cc:	6123      	str	r3, [r4, #16]
    c1ce:	e03d      	b.n	c24c <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    c1d0:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c1d2:	4620      	mov	r0, r4
}
    c1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c1d8:	f01d bfb9 	b.w	2a14e <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c1dc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    c1e0:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    c1e2:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    c1e4:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c1e6:	d00e      	beq.n	c206 <encode_basic_field+0xb6>
        if (max_size == 0)
    c1e8:	b913      	cbnz	r3, c1f0 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    c1ea:	6923      	ldr	r3, [r4, #16]
    c1ec:	4a1d      	ldr	r2, [pc, #116]	; (c264 <encode_basic_field+0x114>)
    c1ee:	e7ea      	b.n	c1c6 <encode_basic_field+0x76>
        max_size -= 1;
    c1f0:	3b01      	subs	r3, #1
    if (str == NULL)
    c1f2:	2900      	cmp	r1, #0
    c1f4:	d0dc      	beq.n	c1b0 <encode_basic_field+0x60>
    size_t size = 0;
    c1f6:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    c1f8:	429a      	cmp	r2, r3
    c1fa:	5c88      	ldrb	r0, [r1, r2]
    c1fc:	d006      	beq.n	c20c <encode_basic_field+0xbc>
    c1fe:	2800      	cmp	r0, #0
    c200:	d0e7      	beq.n	c1d2 <encode_basic_field+0x82>
            size++;
    c202:	3201      	adds	r2, #1
            p++;
    c204:	e7f8      	b.n	c1f8 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    c206:	f04f 33ff 	mov.w	r3, #4294967295
    c20a:	e7f2      	b.n	c1f2 <encode_basic_field+0xa2>
        if (*p != '\0')
    c20c:	2800      	cmp	r0, #0
    c20e:	d0e0      	beq.n	c1d2 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    c210:	6923      	ldr	r3, [r4, #16]
    c212:	4a15      	ldr	r2, [pc, #84]	; (c268 <encode_basic_field+0x118>)
    c214:	e7d7      	b.n	c1c6 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    c216:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c218:	b912      	cbnz	r2, c220 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    c21a:	6923      	ldr	r3, [r4, #16]
    c21c:	4a13      	ldr	r2, [pc, #76]	; (c26c <encode_basic_field+0x11c>)
    c21e:	e7d2      	b.n	c1c6 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c220:	2b09      	cmp	r3, #9
    c222:	d006      	beq.n	c232 <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c224:	4620      	mov	r0, r4
    c226:	69ea      	ldr	r2, [r5, #28]
    c228:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    c22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c22e:	f7ff bf3f 	b.w	c0b0 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c232:	6a2a      	ldr	r2, [r5, #32]
    c234:	2a00      	cmp	r2, #0
    c236:	d0f5      	beq.n	c224 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    c238:	f852 3c08 	ldr.w	r3, [r2, #-8]
    c23c:	2b00      	cmp	r3, #0
    c23e:	d0f1      	beq.n	c224 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    c240:	4629      	mov	r1, r5
    c242:	4620      	mov	r0, r4
    c244:	3a04      	subs	r2, #4
    c246:	4798      	blx	r3
    c248:	2800      	cmp	r0, #0
    c24a:	d1eb      	bne.n	c224 <encode_basic_field+0xd4>
        return false;
    c24c:	2000      	movs	r0, #0
}
    c24e:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c250:	8a6a      	ldrh	r2, [r5, #18]
    c252:	69e9      	ldr	r1, [r5, #28]
    c254:	e7bd      	b.n	c1d2 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    c256:	6923      	ldr	r3, [r4, #16]
    c258:	4a05      	ldr	r2, [pc, #20]	; (c270 <encode_basic_field+0x120>)
    c25a:	e7b4      	b.n	c1c6 <encode_basic_field+0x76>
        return true;
    c25c:	2001      	movs	r0, #1
    c25e:	e7f6      	b.n	c24e <encode_basic_field+0xfe>
    c260:	00032f3e 	.word	0x00032f3e
    c264:	00032f52 	.word	0x00032f52
    c268:	00032f65 	.word	0x00032f65
    c26c:	00032f79 	.word	0x00032f79
    c270:	00032f17 	.word	0x00032f17

0000c274 <encode_field>:
{
    c274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c278:	7d8b      	ldrb	r3, [r1, #22]
{
    c27a:	4605      	mov	r5, r0
    c27c:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c280:	2a30      	cmp	r2, #48	; 0x30
{
    c282:	460c      	mov	r4, r1
    c284:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c286:	d112      	bne.n	c2ae <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    c288:	6a0b      	ldr	r3, [r1, #32]
    c28a:	881a      	ldrh	r2, [r3, #0]
    c28c:	8a0b      	ldrh	r3, [r1, #16]
    c28e:	429a      	cmp	r2, r3
    c290:	d114      	bne.n	c2bc <encode_field+0x48>
    if (!field->pData)
    c292:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c294:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    c296:	b9ea      	cbnz	r2, c2d4 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c298:	f013 0f30 	tst.w	r3, #48	; 0x30
    c29c:	d10e      	bne.n	c2bc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    c29e:	692b      	ldr	r3, [r5, #16]
    c2a0:	4a69      	ldr	r2, [pc, #420]	; (c448 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	bf08      	it	eq
    c2a6:	4613      	moveq	r3, r2
    c2a8:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c2aa:	2000      	movs	r0, #0
    c2ac:	e007      	b.n	c2be <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    c2ae:	2a10      	cmp	r2, #16
    c2b0:	d1ef      	bne.n	c292 <encode_field+0x1e>
        if (field->pSize)
    c2b2:	6a0a      	ldr	r2, [r1, #32]
    c2b4:	b132      	cbz	r2, c2c4 <encode_field+0x50>
        if (p[i] != 0)
    c2b6:	7813      	ldrb	r3, [r2, #0]
    c2b8:	2b00      	cmp	r3, #0
    c2ba:	d1ea      	bne.n	c292 <encode_field+0x1e>
            return true;
    c2bc:	2001      	movs	r0, #1
}
    c2be:	b007      	add	sp, #28
    c2c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    c2c4:	2b3f      	cmp	r3, #63	; 0x3f
    c2c6:	d8e4      	bhi.n	c292 <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    c2c8:	4608      	mov	r0, r1
    c2ca:	f7ff fddd 	bl	be88 <pb_check_proto3_default_value>
    c2ce:	2800      	cmp	r0, #0
    c2d0:	d0df      	beq.n	c292 <encode_field+0x1e>
    c2d2:	e7f3      	b.n	c2bc <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    c2d4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    c2d8:	2a40      	cmp	r2, #64	; 0x40
    c2da:	d10c      	bne.n	c2f6 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    c2dc:	6823      	ldr	r3, [r4, #0]
    c2de:	68db      	ldr	r3, [r3, #12]
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d0eb      	beq.n	c2bc <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    c2e4:	4622      	mov	r2, r4
    c2e6:	4629      	mov	r1, r5
    c2e8:	2000      	movs	r0, #0
    c2ea:	4798      	blx	r3
    c2ec:	2800      	cmp	r0, #0
    c2ee:	d1e5      	bne.n	c2bc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    c2f0:	692b      	ldr	r3, [r5, #16]
    c2f2:	4a56      	ldr	r2, [pc, #344]	; (c44c <encode_field+0x1d8>)
    c2f4:	e7d5      	b.n	c2a2 <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    c2f6:	f003 0130 	and.w	r1, r3, #48	; 0x30
    c2fa:	2920      	cmp	r1, #32
    c2fc:	f040 809d 	bne.w	c43a <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    c300:	6a21      	ldr	r1, [r4, #32]
    c302:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    c304:	2e00      	cmp	r6, #0
    c306:	d0d9      	beq.n	c2bc <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c308:	2a80      	cmp	r2, #128	; 0x80
    c30a:	d120      	bne.n	c34e <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    c30c:	f003 030f 	and.w	r3, r3, #15
    c310:	2b05      	cmp	r3, #5
    c312:	d85e      	bhi.n	c3d2 <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    c314:	2102      	movs	r1, #2
    c316:	4628      	mov	r0, r5
    c318:	8a22      	ldrh	r2, [r4, #16]
    c31a:	f01d ff12 	bl	2a142 <pb_encode_tag>
    c31e:	2800      	cmp	r0, #0
    c320:	d0c3      	beq.n	c2aa <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    c322:	7da3      	ldrb	r3, [r4, #22]
    c324:	f003 030f 	and.w	r3, r3, #15
    c328:	2b04      	cmp	r3, #4
    c32a:	d116      	bne.n	c35a <encode_field+0xe6>
            size = 4 * (size_t)count;
    c32c:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c32e:	463a      	mov	r2, r7
    c330:	2300      	movs	r3, #0
    c332:	4628      	mov	r0, r5
    c334:	f01d feb7 	bl	2a0a6 <pb_encode_varint>
    c338:	2800      	cmp	r0, #0
    c33a:	d0b6      	beq.n	c2aa <encode_field+0x36>
        if (stream->callback == NULL)
    c33c:	6829      	ldr	r1, [r5, #0]
    c33e:	bb79      	cbnz	r1, c3a0 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c340:	463a      	mov	r2, r7
    c342:	4628      	mov	r0, r5
}
    c344:	b007      	add	sp, #28
    c346:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c34a:	f7ff be11 	b.w	bf70 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c34e:	8aa2      	ldrh	r2, [r4, #20]
    c350:	42b2      	cmp	r2, r6
    c352:	d2db      	bcs.n	c30c <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c354:	692b      	ldr	r3, [r5, #16]
    c356:	4a3e      	ldr	r2, [pc, #248]	; (c450 <encode_field+0x1dc>)
    c358:	e7a3      	b.n	c2a2 <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c35a:	2b05      	cmp	r3, #5
    c35c:	d101      	bne.n	c362 <encode_field+0xee>
            size = 8 * (size_t)count;
    c35e:	00f7      	lsls	r7, r6, #3
    c360:	e7e5      	b.n	c32e <encode_field+0xba>
            void *pData_orig = field->pData;
    c362:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    c364:	2214      	movs	r2, #20
    c366:	2100      	movs	r1, #0
    c368:	a801      	add	r0, sp, #4
    c36a:	f024 f93a 	bl	305e2 <memset>
            void *pData_orig = field->pData;
    c36e:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    c372:	4621      	mov	r1, r4
    c374:	a801      	add	r0, sp, #4
    c376:	f7ff fe1d 	bl	bfb4 <pb_enc_varint>
    c37a:	b928      	cbnz	r0, c388 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c37c:	692b      	ldr	r3, [r5, #16]
    c37e:	2b00      	cmp	r3, #0
    c380:	d192      	bne.n	c2a8 <encode_field+0x34>
    c382:	9b05      	ldr	r3, [sp, #20]
    c384:	4a33      	ldr	r2, [pc, #204]	; (c454 <encode_field+0x1e0>)
    c386:	e78c      	b.n	c2a2 <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    c388:	69e3      	ldr	r3, [r4, #28]
    c38a:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    c38c:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    c38e:	4413      	add	r3, r2
    c390:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    c392:	b2bb      	uxth	r3, r7
    c394:	429e      	cmp	r6, r3
    c396:	d8ec      	bhi.n	c372 <encode_field+0xfe>
            size = sizestream.bytes_written;
    c398:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    c39a:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    c39e:	e7c6      	b.n	c32e <encode_field+0xba>
    c3a0:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c3a2:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    c3a4:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c3a6:	f003 030e 	and.w	r3, r3, #14
    c3aa:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    c3ac:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c3ae:	d10d      	bne.n	c3cc <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    c3b0:	f7ff fe46 	bl	c040 <pb_enc_fixed>
    c3b4:	2800      	cmp	r0, #0
    c3b6:	f43f af78 	beq.w	c2aa <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c3ba:	69e3      	ldr	r3, [r4, #28]
    c3bc:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c3be:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    c3c0:	4413      	add	r3, r2
    c3c2:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c3c4:	b2bb      	uxth	r3, r7
    c3c6:	429e      	cmp	r6, r3
    c3c8:	d8eb      	bhi.n	c3a2 <encode_field+0x12e>
    c3ca:	e777      	b.n	c2bc <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    c3cc:	f7ff fdf2 	bl	bfb4 <pb_enc_varint>
    c3d0:	e7f0      	b.n	c3b4 <encode_field+0x140>
    c3d2:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    c3d6:	7da3      	ldrb	r3, [r4, #22]
    c3d8:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    c3dc:	2b86      	cmp	r3, #134	; 0x86
    c3de:	d127      	bne.n	c430 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    c3e0:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    c3e2:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    c3e4:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    c3e8:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    c3ea:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    c3ee:	f1b9 0f00 	cmp.w	r9, #0
    c3f2:	d11a      	bne.n	c42a <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    c3f4:	f7ff fe3a 	bl	c06c <pb_encode_tag_for_field>
    c3f8:	b908      	cbnz	r0, c3fe <encode_field+0x18a>
                field->pData = pData_orig;
    c3fa:	61e7      	str	r7, [r4, #28]
                if (!status)
    c3fc:	e755      	b.n	c2aa <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    c3fe:	2201      	movs	r2, #1
    c400:	4628      	mov	r0, r5
    c402:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    c404:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    c408:	f7ff fdb2 	bl	bf70 <pb_write>
                field->pData = pData_orig;
    c40c:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    c40e:	2800      	cmp	r0, #0
    c410:	f43f af4b 	beq.w	c2aa <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c414:	69e3      	ldr	r3, [r4, #28]
    c416:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c418:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    c41c:	4413      	add	r3, r2
    c41e:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c420:	fa1f f388 	uxth.w	r3, r8
    c424:	429e      	cmp	r6, r3
    c426:	d8d6      	bhi.n	c3d6 <encode_field+0x162>
    c428:	e748      	b.n	c2bc <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    c42a:	f7ff fe91 	bl	c150 <encode_basic_field>
    c42e:	e7ed      	b.n	c40c <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    c430:	4621      	mov	r1, r4
    c432:	4628      	mov	r0, r5
    c434:	f7ff fe8c 	bl	c150 <encode_basic_field>
    c438:	e7e9      	b.n	c40e <encode_field+0x19a>
        return encode_basic_field(stream, field);
    c43a:	4621      	mov	r1, r4
    c43c:	4628      	mov	r0, r5
}
    c43e:	b007      	add	sp, #28
    c440:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    c444:	f7ff be84 	b.w	c150 <encode_basic_field>
    c448:	00032f92 	.word	0x00032f92
    c44c:	00032fa9 	.word	0x00032fa9
    c450:	00032fb8 	.word	0x00032fb8
    c454:	00032fd0 	.word	0x00032fd0

0000c458 <pb_encode>:
{
    c458:	b530      	push	{r4, r5, lr}
    c45a:	b095      	sub	sp, #84	; 0x54
    c45c:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    c45e:	4668      	mov	r0, sp
    c460:	f01d fdfc 	bl	2a05c <pb_field_iter_begin_const>
    c464:	b370      	cbz	r0, c4c4 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    c466:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c46a:	f003 030f 	and.w	r3, r3, #15
    c46e:	2b0a      	cmp	r3, #10
    c470:	d121      	bne.n	c4b6 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c472:	9b07      	ldr	r3, [sp, #28]
    c474:	681d      	ldr	r5, [r3, #0]
    while (extension)
    c476:	b91d      	cbnz	r5, c480 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    c478:	4668      	mov	r0, sp
    c47a:	f01d fde4 	bl	2a046 <pb_field_iter_next>
    c47e:	e7f1      	b.n	c464 <pb_encode+0xc>
        if (extension->type->encode)
    c480:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    c482:	4629      	mov	r1, r5
        if (extension->type->encode)
    c484:	685b      	ldr	r3, [r3, #4]
    c486:	b123      	cbz	r3, c492 <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    c488:	4620      	mov	r0, r4
    c48a:	4798      	blx	r3
        if (!status)
    c48c:	b158      	cbz	r0, c4a6 <pb_encode+0x4e>
        extension = extension->next;
    c48e:	68ad      	ldr	r5, [r5, #8]
    c490:	e7f1      	b.n	c476 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    c492:	a80a      	add	r0, sp, #40	; 0x28
    c494:	f01d fde4 	bl	2a060 <pb_field_iter_begin_extension_const>
    c498:	b940      	cbnz	r0, c4ac <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    c49a:	6923      	ldr	r3, [r4, #16]
    c49c:	4a0a      	ldr	r2, [pc, #40]	; (c4c8 <pb_encode+0x70>)
    c49e:	2b00      	cmp	r3, #0
    c4a0:	bf08      	it	eq
    c4a2:	4613      	moveq	r3, r2
    c4a4:	6123      	str	r3, [r4, #16]
                return false;
    c4a6:	2000      	movs	r0, #0
}
    c4a8:	b015      	add	sp, #84	; 0x54
    c4aa:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    c4ac:	4620      	mov	r0, r4
    c4ae:	a90a      	add	r1, sp, #40	; 0x28
    c4b0:	f7ff fee0 	bl	c274 <encode_field>
    c4b4:	e7ea      	b.n	c48c <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    c4b6:	4669      	mov	r1, sp
    c4b8:	4620      	mov	r0, r4
    c4ba:	f7ff fedb 	bl	c274 <encode_field>
    c4be:	2800      	cmp	r0, #0
    c4c0:	d1da      	bne.n	c478 <pb_encode+0x20>
    c4c2:	e7f0      	b.n	c4a6 <pb_encode+0x4e>
        return true; /* Empty message type */
    c4c4:	2001      	movs	r0, #1
    c4c6:	e7ef      	b.n	c4a8 <pb_encode+0x50>
    c4c8:	00032fd7 	.word	0x00032fd7

0000c4cc <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    c4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4d0:	b097      	sub	sp, #92	; 0x5c
    c4d2:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(in_packaged != NULL);
    c4d4:	4604      	mov	r4, r0
{
    c4d6:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
    c4da:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
    c4de:	61fb      	str	r3, [r7, #28]
	__ASSERT_NO_MSG(in_packaged != NULL);
    c4e0:	b958      	cbnz	r0, c4fa <cbprintf_package_convert+0x2e>
    c4e2:	49ab      	ldr	r1, [pc, #684]	; (c790 <cbprintf_package_convert+0x2c4>)
    c4e4:	f44f 7365 	mov.w	r3, #916	; 0x394
    c4e8:	4aaa      	ldr	r2, [pc, #680]	; (c794 <cbprintf_package_convert+0x2c8>)
    c4ea:	48ab      	ldr	r0, [pc, #684]	; (c798 <cbprintf_package_convert+0x2cc>)
    c4ec:	f01e f8e5 	bl	2a6ba <assert_print>
    c4f0:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c4f4:	48a7      	ldr	r0, [pc, #668]	; (c794 <cbprintf_package_convert+0x2c8>)
    c4f6:	f01e f8d9 	bl	2a6ac <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    c4fa:	f3ca 03c0 	ubfx	r3, sl, #3, #1
    c4fe:	617b      	str	r3, [r7, #20]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c502:	b953      	cbnz	r3, c51a <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
    c504:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    c506:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    c508:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
    c50a:	6abd      	ldr	r5, [r7, #40]	; 0x28
	buf += ros_nbr;
    c50c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c510:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    c512:	42b5      	cmp	r5, r6
    c514:	d319      	bcc.n	c54a <cbprintf_package_convert+0x7e>
	return (size_t)(uintptr_t)(buf - start);
    c516:	1b03      	subs	r3, r0, r4
    c518:	62bb      	str	r3, [r7, #40]	; 0x28
	rws_nbr = in_desc->rw_str_cnt;
    c51a:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    c51c:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    c520:	61bb      	str	r3, [r7, #24]
	ro_cpy = ros_nbr &&
    c522:	f1bb 0f00 	cmp.w	fp, #0
    c526:	d002      	beq.n	c52e <cbprintf_package_convert+0x62>
    c528:	f01a 0f01 	tst.w	sl, #1
    c52c:	d116      	bne.n	c55c <cbprintf_package_convert+0x90>
	rw_cpy = rws_nbr > 0 &&
    c52e:	69bb      	ldr	r3, [r7, #24]
    c530:	bb53      	cbnz	r3, c588 <cbprintf_package_convert+0xbc>
		if (cb) {
    c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c534:	b11b      	cbz	r3, c53e <cbprintf_package_convert+0x72>
			cb(in_packaged, in_len, ctx);
    c536:	4620      	mov	r0, r4
    c538:	69fa      	ldr	r2, [r7, #28]
    c53a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    c53c:	4798      	blx	r3
		return in_len;
    c53e:	6abd      	ldr	r5, [r7, #40]	; 0x28

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    c540:	4628      	mov	r0, r5
    c542:	375c      	adds	r7, #92	; 0x5c
    c544:	46bd      	mov	sp, r7
    c546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    c54a:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    c54e:	4640      	mov	r0, r8
    c550:	f7fc ff19 	bl	9386 <strlen>
    c554:	3001      	adds	r0, #1
    c556:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    c558:	3501      	adds	r5, #1
    c55a:	e7da      	b.n	c512 <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
    c55c:	7823      	ldrb	r3, [r4, #0]
    c55e:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    c560:	627b      	str	r3, [r7, #36]	; 0x24
    c562:	009b      	lsls	r3, r3, #2
    c564:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
    c566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c568:	623a      	str	r2, [r7, #32]
	uint8_t *str_pos = &buf[args_size];
    c56a:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
    c56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c570:	2b00      	cmp	r3, #0
    c572:	f040 8101 	bne.w	c778 <cbprintf_package_convert+0x2ac>
		out_len = (int)in_len;
    c576:	46c8      	mov	r8, r9
	size_t strl_cnt = 0;
    c578:	2600      	movs	r6, #0
		out_len = (int)in_len;
    c57a:	6abd      	ldr	r5, [r7, #40]	; 0x28
		if (ro_cpy) {
    c57c:	eb09 030b 	add.w	r3, r9, fp
			for (int i = 0; i < ros_nbr; i++) {
    c580:	4543      	cmp	r3, r8
    c582:	d14e      	bne.n	c622 <cbprintf_package_convert+0x156>
    c584:	44d9      	add	r9, fp
    c586:	e013      	b.n	c5b0 <cbprintf_package_convert+0xe4>
	rw_cpy = rws_nbr > 0 &&
    c588:	f01a 0f02 	tst.w	sl, #2
    c58c:	d0d1      	beq.n	c532 <cbprintf_package_convert+0x66>
	args_size = in_desc->len * sizeof(int);
    c58e:	7823      	ldrb	r3, [r4, #0]
    c590:	4699      	mov	r9, r3
    c592:	627b      	str	r3, [r7, #36]	; 0x24
    c594:	009b      	lsls	r3, r3, #2
    c596:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c598:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    c59a:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c59e:	623b      	str	r3, [r7, #32]
	if (cb == NULL) {
    c5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5a2:	2b00      	cmp	r3, #0
    c5a4:	d17c      	bne.n	c6a0 <cbprintf_package_convert+0x1d4>
		out_len = (int)in_len;
    c5a6:	6abd      	ldr	r5, [r7, #40]	; 0x28
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c5a8:	f1bb 0f00 	cmp.w	fp, #0
    c5ac:	d150      	bne.n	c650 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
    c5ae:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
    c5b0:	f01a 0f05 	tst.w	sl, #5
    c5b4:	bf0c      	ite	eq
    c5b6:	2302      	moveq	r3, #2
    c5b8:	2301      	movne	r3, #1
    c5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    c5bc:	69bb      	ldr	r3, [r7, #24]
    c5be:	eb09 0b43 	add.w	fp, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c5c2:	f00a 0302 	and.w	r3, sl, #2
    c5c6:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < rws_nbr; i++) {
    c5c8:	45d9      	cmp	r9, fp
    c5ca:	d0b9      	beq.n	c540 <cbprintf_package_convert+0x74>
			uint8_t arg_idx = *str_pos++;
    c5cc:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
    c5d0:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c5d4:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c5d8:	4b70      	ldr	r3, [pc, #448]	; (c79c <cbprintf_package_convert+0x2d0>)
    c5da:	4598      	cmp	r8, r3
    c5dc:	d302      	bcc.n	c5e4 <cbprintf_package_convert+0x118>
    c5de:	4b70      	ldr	r3, [pc, #448]	; (c7a0 <cbprintf_package_convert+0x2d4>)
    c5e0:	4598      	cmp	r8, r3
    c5e2:	d33b      	bcc.n	c65c <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c5e4:	697b      	ldr	r3, [r7, #20]
    c5e6:	2b00      	cmp	r3, #0
    c5e8:	d045      	beq.n	c676 <cbprintf_package_convert+0x1aa>
    c5ea:	6a38      	ldr	r0, [r7, #32]
    c5ec:	f01d fdf0 	bl	2a1d0 <is_ptr>
    c5f0:	2800      	cmp	r0, #0
    c5f2:	d040      	beq.n	c676 <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    c5f4:	46e8      	mov	r8, sp
    c5f6:	b08a      	sub	sp, #40	; 0x28
    c5f8:	466a      	mov	r2, sp
    c5fa:	4b6a      	ldr	r3, [pc, #424]	; (c7a4 <cbprintf_package_convert+0x2d8>)
    c5fc:	6153      	str	r3, [r2, #20]
    c5fe:	6a3b      	ldr	r3, [r7, #32]
    c600:	e9c2 3106 	strd	r3, r1, [r2, #24]
    c604:	f44f 7300 	mov.w	r3, #512	; 0x200
    c608:	8413      	strh	r3, [r2, #32]
    c60a:	4b67      	ldr	r3, [pc, #412]	; (c7a8 <cbprintf_package_convert+0x2dc>)
    c60c:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    c610:	2300      	movs	r3, #0
    c612:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    c616:	4865      	ldr	r0, [pc, #404]	; (c7ac <cbprintf_package_convert+0x2e0>)
    c618:	f002 f93a 	bl	e890 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    c61c:	3d02      	subs	r5, #2
    c61e:	46c5      	mov	sp, r8
				continue;
    c620:	e7d2      	b.n	c5c8 <cbprintf_package_convert+0xfc>
				const char *str = *(const char **)&buf32[*str_pos];
    c622:	f818 2b01 	ldrb.w	r2, [r8], #1
    c626:	62fb      	str	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c628:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    c62c:	f7fc feab 	bl	9386 <strlen>
				if (strl && strl_cnt < strl_len) {
    c630:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c636:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    c638:	b142      	cbz	r2, c64c <cbprintf_package_convert+0x180>
    c63a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    c63e:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    c640:	bf3e      	ittt	cc
    c642:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
    c646:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    c64a:	3601      	addcc	r6, #1
				out_len += len;
    c64c:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    c64e:	e797      	b.n	c580 <cbprintf_package_convert+0xb4>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c650:	f01a 0604 	ands.w	r6, sl, #4
	size_t strl_cnt = 0;
    c654:	bf1c      	itt	ne
    c656:	6afe      	ldrne	r6, [r7, #44]	; 0x2c
				str_pos += ros_nbr;
    c658:	44d9      	addne	r9, fp
    c65a:	e7a9      	b.n	c5b0 <cbprintf_package_convert+0xe4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c65c:	697b      	ldr	r3, [r7, #20]
    c65e:	b123      	cbz	r3, c66a <cbprintf_package_convert+0x19e>
    c660:	6a38      	ldr	r0, [r7, #32]
    c662:	f01d fdb5 	bl	2a1d0 <is_ptr>
    c666:	2800      	cmp	r0, #0
    c668:	d1c4      	bne.n	c5f4 <cbprintf_package_convert+0x128>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c66a:	f01a 0f01 	tst.w	sl, #1
    c66e:	d105      	bne.n	c67c <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
    c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c672:	1aed      	subs	r5, r5, r3
    c674:	e7a8      	b.n	c5c8 <cbprintf_package_convert+0xfc>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c678:	2b00      	cmp	r3, #0
    c67a:	d0a5      	beq.n	c5c8 <cbprintf_package_convert+0xfc>
		return 1 + strlen(str);
    c67c:	4640      	mov	r0, r8
    c67e:	f7fc fe82 	bl	9386 <strlen>
				if (strl && strl_cnt < strl_len) {
    c682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c686:	b14b      	cbz	r3, c69c <cbprintf_package_convert+0x1d0>
    c688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    c68c:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    c68e:	bf3f      	itttt	cc
    c690:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
		return 1 + strlen(str);
    c694:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    c696:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    c69a:	3601      	addcc	r6, #1
				out_len += (len - 1);
    c69c:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    c69e:	e793      	b.n	c5c8 <cbprintf_package_convert+0xfc>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c6a0:	f1bb 0f00 	cmp.w	fp, #0
    c6a4:	d06e      	beq.n	c784 <cbprintf_package_convert+0x2b8>
    c6a6:	f01a 0604 	ands.w	r6, sl, #4
    c6aa:	d06e      	beq.n	c78a <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
    c6ac:	46d8      	mov	r8, fp
		scpy_cnt = 0;
    c6ae:	2600      	movs	r6, #0
		dst = keep_str_pos;
    c6b0:	f107 0048 	add.w	r0, r7, #72	; 0x48
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c6b4:	465a      	mov	r2, fp
    c6b6:	4649      	mov	r1, r9
    c6b8:	f023 ff59 	bl	3056e <memcpy>
	str_pos += ros_nbr;
    c6bc:	69bb      	ldr	r3, [r7, #24]
    c6be:	44d9      	add	r9, fp
	for (int i = 0; i < rws_nbr; i++) {
    c6c0:	005b      	lsls	r3, r3, #1
    c6c2:	60fb      	str	r3, [r7, #12]
    c6c4:	69bb      	ldr	r3, [r7, #24]
    c6c6:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    c6ca:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c6cc:	f00a 0302 	and.w	r3, sl, #2
    c6d0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    c6d2:	68bb      	ldr	r3, [r7, #8]
    c6d4:	454b      	cmp	r3, r9
    c6d6:	d16b      	bne.n	c7b0 <cbprintf_package_convert+0x2e4>
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c6d8:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c6da:	f01a 0f02 	tst.w	sl, #2
    c6de:	bf18      	it	ne
    c6e0:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c6e2:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c6e6:	bf08      	it	eq
    c6e8:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c6ec:	f01a 0f01 	tst.w	sl, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c6f0:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c6f2:	f040 80e1 	bne.w	c8b8 <cbprintf_package_convert+0x3ec>
    c6f6:	f01a 0f04 	tst.w	sl, #4
    c6fa:	bf14      	ite	ne
    c6fc:	4640      	movne	r0, r8
    c6fe:	2000      	moveq	r0, #0
    c700:	623b      	str	r3, [r7, #32]
	*in_desc = out_desc;
    c702:	7062      	strb	r2, [r4, #1]
    c704:	70a0      	strb	r0, [r4, #2]
    c706:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    c708:	4620      	mov	r0, r4
    c70a:	69fa      	ldr	r2, [r7, #28]
    c70c:	6939      	ldr	r1, [r7, #16]
    c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c710:	4798      	blx	r3
	if (rv < 0) {
    c712:	1e05      	subs	r5, r0, #0
    c714:	f6ff af14 	blt.w	c540 <cbprintf_package_convert+0x74>
	*in_desc = in_desc_backup;
    c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c71a:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    c71c:	7023      	strb	r3, [r4, #0]
    c71e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c720:	69fa      	ldr	r2, [r7, #28]
	*in_desc = in_desc_backup;
    c722:	7063      	strb	r3, [r4, #1]
    c724:	69bb      	ldr	r3, [r7, #24]
    c726:	f884 b002 	strb.w	fp, [r4, #2]
    c72a:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c72c:	f107 0048 	add.w	r0, r7, #72	; 0x48
    c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c732:	4798      	blx	r3
	if (rv < 0) {
    c734:	f1b0 0800 	subs.w	r8, r0, #0
    c738:	f2c0 80ec 	blt.w	c914 <cbprintf_package_convert+0x448>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	rv = cb(str_pos, strs_len, ctx);
    c73e:	4648      	mov	r0, r9
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c740:	eba3 010b 	sub.w	r1, r3, fp
    c744:	693b      	ldr	r3, [r7, #16]
	rv = cb(str_pos, strs_len, ctx);
    c746:	69fa      	ldr	r2, [r7, #28]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c748:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    c74a:	68fb      	ldr	r3, [r7, #12]
    c74c:	1ac9      	subs	r1, r1, r3
    c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c750:	4798      	blx	r3
	if (rv < 0) {
    c752:	2800      	cmp	r0, #0
    c754:	f2c0 80e0 	blt.w	c918 <cbprintf_package_convert+0x44c>
	for (int i = 0; i < scpy_cnt; i++) {
    c758:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    c75c:	44a8      	add	r8, r5
	out_len += rv;
    c75e:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    c762:	f107 0a38 	add.w	sl, r7, #56	; 0x38
	for (int i = 0; i < scpy_cnt; i++) {
    c766:	45b3      	cmp	fp, r6
    c768:	f2c0 80a8 	blt.w	c8bc <cbprintf_package_convert+0x3f0>
	(void)cb(NULL, 0, ctx);
    c76c:	2100      	movs	r1, #0
    c76e:	69fa      	ldr	r2, [r7, #28]
    c770:	4608      	mov	r0, r1
    c772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c774:	4798      	blx	r3
	return out_len;
    c776:	e6e3      	b.n	c540 <cbprintf_package_convert+0x74>
	if (cb == NULL) {
    c778:	465e      	mov	r6, fp
    c77a:	f04f 0800 	mov.w	r8, #0
    c77e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    c782:	e797      	b.n	c6b4 <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
    c784:	465e      	mov	r6, fp
		keep_cnt = 0;
    c786:	46d8      	mov	r8, fp
    c788:	e798      	b.n	c6bc <cbprintf_package_convert+0x1f0>
    c78a:	46b0      	mov	r8, r6
    c78c:	e796      	b.n	c6bc <cbprintf_package_convert+0x1f0>
    c78e:	bf00      	nop
    c790:	0003307e 	.word	0x0003307e
    c794:	00032fe9 	.word	0x00032fe9
    c798:	00032659 	.word	0x00032659
    c79c:	00030e1c 	.word	0x00030e1c
    c7a0:	00038e54 	.word	0x00038e54
    c7a4:	00033099 	.word	0x00033099
    c7a8:	01000004 	.word	0x01000004
    c7ac:	0003152c 	.word	0x0003152c
		uint8_t arg_idx = *str_pos++;
    c7b0:	f819 1b02 	ldrb.w	r1, [r9], #2
    c7b4:	4b59      	ldr	r3, [pc, #356]	; (c91c <cbprintf_package_convert+0x450>)
		uint8_t arg_pos = *str_pos++;
    c7b6:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    c7ba:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    c7be:	4298      	cmp	r0, r3
    c7c0:	d302      	bcc.n	c7c8 <cbprintf_package_convert+0x2fc>
    c7c2:	4b57      	ldr	r3, [pc, #348]	; (c920 <cbprintf_package_convert+0x454>)
    c7c4:	4298      	cmp	r0, r3
    c7c6:	d316      	bcc.n	c7f6 <cbprintf_package_convert+0x32a>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c7c8:	697b      	ldr	r3, [r7, #20]
    c7ca:	b12b      	cbz	r3, c7d8 <cbprintf_package_convert+0x30c>
    c7cc:	6a38      	ldr	r0, [r7, #32]
    c7ce:	f01d fcff 	bl	2a1d0 <is_ptr>
    c7d2:	2800      	cmp	r0, #0
    c7d4:	f47f af7d 	bne.w	c6d2 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c7d8:	687b      	ldr	r3, [r7, #4]
    c7da:	2b00      	cmp	r3, #0
    c7dc:	d04a      	beq.n	c874 <cbprintf_package_convert+0x3a8>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c7de:	2e0f      	cmp	r6, #15
    c7e0:	d93e      	bls.n	c860 <cbprintf_package_convert+0x394>
    c7e2:	4950      	ldr	r1, [pc, #320]	; (c924 <cbprintf_package_convert+0x458>)
    c7e4:	f44f 6389 	mov.w	r3, #1096	; 0x448
    c7e8:	4a4f      	ldr	r2, [pc, #316]	; (c928 <cbprintf_package_convert+0x45c>)
    c7ea:	4850      	ldr	r0, [pc, #320]	; (c92c <cbprintf_package_convert+0x460>)
    c7ec:	f01d ff65 	bl	2a6ba <assert_print>
    c7f0:	f44f 6189 	mov.w	r1, #1096	; 0x448
    c7f4:	e67e      	b.n	c4f4 <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c7f6:	697b      	ldr	r3, [r7, #20]
    c7f8:	b12b      	cbz	r3, c806 <cbprintf_package_convert+0x33a>
    c7fa:	6a38      	ldr	r0, [r7, #32]
    c7fc:	f01d fce8 	bl	2a1d0 <is_ptr>
    c800:	2800      	cmp	r0, #0
    c802:	f47f af66 	bne.w	c6d2 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c806:	f01a 0f01 	tst.w	sl, #1
    c80a:	d00b      	beq.n	c824 <cbprintf_package_convert+0x358>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c80c:	2e0f      	cmp	r6, #15
    c80e:	d927      	bls.n	c860 <cbprintf_package_convert+0x394>
    c810:	4944      	ldr	r1, [pc, #272]	; (c924 <cbprintf_package_convert+0x458>)
    c812:	f240 433e 	movw	r3, #1086	; 0x43e
    c816:	4a44      	ldr	r2, [pc, #272]	; (c928 <cbprintf_package_convert+0x45c>)
    c818:	4844      	ldr	r0, [pc, #272]	; (c92c <cbprintf_package_convert+0x460>)
    c81a:	f01d ff4e 	bl	2a6ba <assert_print>
    c81e:	f240 413e 	movw	r1, #1086	; 0x43e
    c822:	e667      	b.n	c4f4 <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c824:	f01a 0f04 	tst.w	sl, #4
    c828:	f43f af53 	beq.w	c6d2 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c82c:	f1b8 0f0f 	cmp.w	r8, #15
    c830:	d909      	bls.n	c846 <cbprintf_package_convert+0x37a>
    c832:	493f      	ldr	r1, [pc, #252]	; (c930 <cbprintf_package_convert+0x464>)
    c834:	f240 4341 	movw	r3, #1089	; 0x441
    c838:	4a3b      	ldr	r2, [pc, #236]	; (c928 <cbprintf_package_convert+0x45c>)
    c83a:	483c      	ldr	r0, [pc, #240]	; (c92c <cbprintf_package_convert+0x460>)
    c83c:	f01d ff3d 	bl	2a6ba <assert_print>
    c840:	f240 4141 	movw	r1, #1089	; 0x441
    c844:	e656      	b.n	c4f4 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
    c846:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c84a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c84e:	f108 0101 	add.w	r1, r8, #1
    c852:	eb03 0802 	add.w	r8, r3, r2
    c856:	f808 5c10 	strb.w	r5, [r8, #-16]
    c85a:	fa5f f881 	uxtb.w	r8, r1
    c85e:	e738      	b.n	c6d2 <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    c860:	f106 0328 	add.w	r3, r6, #40	; 0x28
    c864:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c868:	1c71      	adds	r1, r6, #1
    c86a:	189e      	adds	r6, r3, r2
    c86c:	f806 5c20 	strb.w	r5, [r6, #-32]
    c870:	b2ce      	uxtb	r6, r1
    c872:	e72e      	b.n	c6d2 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c874:	f1b8 0f0f 	cmp.w	r8, #15
    c878:	d909      	bls.n	c88e <cbprintf_package_convert+0x3c2>
    c87a:	492d      	ldr	r1, [pc, #180]	; (c930 <cbprintf_package_convert+0x464>)
    c87c:	f240 434b 	movw	r3, #1099	; 0x44b
    c880:	4a29      	ldr	r2, [pc, #164]	; (c928 <cbprintf_package_convert+0x45c>)
    c882:	482a      	ldr	r0, [pc, #168]	; (c92c <cbprintf_package_convert+0x460>)
    c884:	f01d ff19 	bl	2a6ba <assert_print>
    c888:	f240 414b 	movw	r1, #1099	; 0x44b
    c88c:	e632      	b.n	c4f4 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
    c88e:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c892:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c896:	f108 0001 	add.w	r0, r8, #1
    c89a:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    c89e:	f107 0358 	add.w	r3, r7, #88	; 0x58
    c8a2:	f108 0802 	add.w	r8, r8, #2
    c8a6:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    c8aa:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    c8ae:	fa5f f888 	uxtb.w	r8, r8
    c8b2:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    c8b6:	e70c      	b.n	c6d2 <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c8b8:	2000      	movs	r0, #0
    c8ba:	e721      	b.n	c700 <cbprintf_package_convert+0x234>
		uint8_t loc = cpy_str_pos[i];
    c8bc:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    c8c0:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    c8c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint16_t str_len = strl ? strl[i] : 0;
    c8c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c8cc:	b1fb      	cbz	r3, c90e <cbprintf_package_convert+0x442>
    c8ce:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    c8d2:	2101      	movs	r1, #1
    c8d4:	69fa      	ldr	r2, [r7, #28]
    c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8d8:	f107 0037 	add.w	r0, r7, #55	; 0x37
    c8dc:	4798      	blx	r3
		if (rv < 0) {
    c8de:	2800      	cmp	r0, #0
    c8e0:	db1a      	blt.n	c918 <cbprintf_package_convert+0x44c>
		out_len += rv;
    c8e2:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    c8e4:	f1b8 0f00 	cmp.w	r8, #0
    c8e8:	d106      	bne.n	c8f8 <cbprintf_package_convert+0x42c>
    c8ea:	4648      	mov	r0, r9
    c8ec:	f7fc fd4b 	bl	9386 <strlen>
    c8f0:	f100 0801 	add.w	r8, r0, #1
    c8f4:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    c8f8:	4641      	mov	r1, r8
    c8fa:	4648      	mov	r0, r9
    c8fc:	69fa      	ldr	r2, [r7, #28]
    c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c900:	4798      	blx	r3
		if (rv < 0) {
    c902:	2800      	cmp	r0, #0
    c904:	db08      	blt.n	c918 <cbprintf_package_convert+0x44c>
		out_len += rv;
    c906:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    c908:	f10b 0b01 	add.w	fp, fp, #1
    c90c:	e72b      	b.n	c766 <cbprintf_package_convert+0x29a>
		uint16_t str_len = strl ? strl[i] : 0;
    c90e:	f8d7 8084 	ldr.w	r8, [r7, #132]	; 0x84
    c912:	e7de      	b.n	c8d2 <cbprintf_package_convert+0x406>
    c914:	4645      	mov	r5, r8
    c916:	e613      	b.n	c540 <cbprintf_package_convert+0x74>
    c918:	4605      	mov	r5, r0
    c91a:	e611      	b.n	c540 <cbprintf_package_convert+0x74>
    c91c:	00030e1c 	.word	0x00030e1c
    c920:	00038e54 	.word	0x00038e54
    c924:	0003313c 	.word	0x0003313c
    c928:	00032fe9 	.word	0x00032fe9
    c92c:	00032659 	.word	0x00032659
    c930:	0003315b 	.word	0x0003315b

0000c934 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    c934:	4b01      	ldr	r3, [pc, #4]	; (c93c <char_out+0x8>)
    c936:	681b      	ldr	r3, [r3, #0]
    c938:	4718      	bx	r3
    c93a:	bf00      	nop
    c93c:	200083f8 	.word	0x200083f8

0000c940 <__printk_hook_install>:
	_char_out = fn;
    c940:	4b01      	ldr	r3, [pc, #4]	; (c948 <__printk_hook_install+0x8>)
    c942:	6018      	str	r0, [r3, #0]
}
    c944:	4770      	bx	lr
    c946:	bf00      	nop
    c948:	200083f8 	.word	0x200083f8

0000c94c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    c94c:	b507      	push	{r0, r1, r2, lr}
    c94e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c950:	2100      	movs	r1, #0
    c952:	4602      	mov	r2, r0
    c954:	9100      	str	r1, [sp, #0]
    c956:	4803      	ldr	r0, [pc, #12]	; (c964 <vprintk+0x18>)
    c958:	f000 fcb0 	bl	d2bc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    c95c:	b003      	add	sp, #12
    c95e:	f85d fb04 	ldr.w	pc, [sp], #4
    c962:	bf00      	nop
    c964:	0000c935 	.word	0x0000c935

0000c968 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c968:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    c96a:	2500      	movs	r5, #0
{
    c96c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    c96e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    c972:	4604      	mov	r4, r0
    c974:	9500      	str	r5, [sp, #0]
    c976:	a903      	add	r1, sp, #12
    c978:	4805      	ldr	r0, [pc, #20]	; (c990 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    c97a:	9505      	str	r5, [sp, #20]
    c97c:	f000 fc9e 	bl	d2bc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    c980:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    c984:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    c986:	bfb8      	it	lt
    c988:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    c98a:	b007      	add	sp, #28
    c98c:	bd30      	pop	{r4, r5, pc}
    c98e:	bf00      	nop
    c990:	0002a311 	.word	0x0002a311

0000c994 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    c994:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    c996:	460c      	mov	r4, r1
    c998:	2900      	cmp	r1, #0
    c99a:	d034      	beq.n	ca06 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    c99c:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c99e:	1f0b      	subs	r3, r1, #4
    c9a0:	1a9b      	subs	r3, r3, r2
    c9a2:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    c9a4:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c9a8:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c9aa:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    c9ac:	07e8      	lsls	r0, r5, #31
    c9ae:	d40d      	bmi.n	c9cc <sys_heap_free+0x38>
    c9b0:	23af      	movs	r3, #175	; 0xaf
    c9b2:	4a15      	ldr	r2, [pc, #84]	; (ca08 <sys_heap_free+0x74>)
    c9b4:	4915      	ldr	r1, [pc, #84]	; (ca0c <sys_heap_free+0x78>)
    c9b6:	4816      	ldr	r0, [pc, #88]	; (ca10 <sys_heap_free+0x7c>)
    c9b8:	f01d fe7f 	bl	2a6ba <assert_print>
    c9bc:	4621      	mov	r1, r4
    c9be:	4815      	ldr	r0, [pc, #84]	; (ca14 <sys_heap_free+0x80>)
    c9c0:	f01d fe7b 	bl	2a6ba <assert_print>
    c9c4:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    c9c6:	4810      	ldr	r0, [pc, #64]	; (ca08 <sys_heap_free+0x74>)
    c9c8:	f01d fe70 	bl	2a6ac <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    c9cc:	4610      	mov	r0, r2
    c9ce:	f01d fcd6 	bl	2a37e <chunk_size>
    c9d2:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    c9d4:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c9d8:	1b80      	subs	r0, r0, r6
    c9da:	4281      	cmp	r1, r0
    c9dc:	d00b      	beq.n	c9f6 <sys_heap_free+0x62>
    c9de:	23b7      	movs	r3, #183	; 0xb7
    c9e0:	4a09      	ldr	r2, [pc, #36]	; (ca08 <sys_heap_free+0x74>)
    c9e2:	490d      	ldr	r1, [pc, #52]	; (ca18 <sys_heap_free+0x84>)
    c9e4:	480a      	ldr	r0, [pc, #40]	; (ca10 <sys_heap_free+0x7c>)
    c9e6:	f01d fe68 	bl	2a6ba <assert_print>
    c9ea:	4621      	mov	r1, r4
    c9ec:	480b      	ldr	r0, [pc, #44]	; (ca1c <sys_heap_free+0x88>)
    c9ee:	f01d fe64 	bl	2a6ba <assert_print>
    c9f2:	21b7      	movs	r1, #183	; 0xb7
    c9f4:	e7e7      	b.n	c9c6 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c9f6:	f025 0501 	bic.w	r5, r5, #1
    c9fa:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    c9fc:	4610      	mov	r0, r2
}
    c9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    ca02:	f01d bd79 	b.w	2a4f8 <free_chunk>
}
    ca06:	bd70      	pop	{r4, r5, r6, pc}
    ca08:	0003318c 	.word	0x0003318c
    ca0c:	000331ad 	.word	0x000331ad
    ca10:	00032659 	.word	0x00032659
    ca14:	000331be 	.word	0x000331be
    ca18:	000331f6 	.word	0x000331f6
    ca1c:	0003321c 	.word	0x0003321c

0000ca20 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    ca20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca24:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    ca26:	400b      	ands	r3, r1
{
    ca28:	460f      	mov	r7, r1
    ca2a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    ca2c:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    ca2e:	d010      	beq.n	ca52 <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    ca30:	f1c1 0900 	rsb	r9, r1, #0
    ca34:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    ca38:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca3a:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    ca3c:	2a04      	cmp	r2, #4
    ca3e:	bf28      	it	cs
    ca40:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca42:	4219      	tst	r1, r3
    ca44:	d10c      	bne.n	ca60 <sys_heap_aligned_alloc+0x40>
    ca46:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    ca48:	b9e4      	cbnz	r4, ca84 <sys_heap_aligned_alloc+0x64>
		return NULL;
    ca4a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ca4c:	4628      	mov	r0, r5
    ca4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ca52:	2904      	cmp	r1, #4
    ca54:	d813      	bhi.n	ca7e <sys_heap_aligned_alloc+0x5e>
}
    ca56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    ca5a:	4611      	mov	r1, r2
    ca5c:	f01d bd7d 	b.w	2a55a <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca60:	492c      	ldr	r1, [pc, #176]	; (cb14 <sys_heap_aligned_alloc+0xf4>)
    ca62:	f44f 73a2 	mov.w	r3, #324	; 0x144
    ca66:	4a2c      	ldr	r2, [pc, #176]	; (cb18 <sys_heap_aligned_alloc+0xf8>)
    ca68:	482c      	ldr	r0, [pc, #176]	; (cb1c <sys_heap_aligned_alloc+0xfc>)
    ca6a:	f01d fe26 	bl	2a6ba <assert_print>
    ca6e:	482c      	ldr	r0, [pc, #176]	; (cb20 <sys_heap_aligned_alloc+0x100>)
    ca70:	f01d fe23 	bl	2a6ba <assert_print>
    ca74:	f44f 71a2 	mov.w	r1, #324	; 0x144
    ca78:	4827      	ldr	r0, [pc, #156]	; (cb18 <sys_heap_aligned_alloc+0xf8>)
    ca7a:	f01d fe17 	bl	2a6ac <assert_post_action>
		rew = 0;
    ca7e:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    ca80:	2204      	movs	r2, #4
    ca82:	e7e1      	b.n	ca48 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    ca84:	68b3      	ldr	r3, [r6, #8]
    ca86:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    ca8a:	d9de      	bls.n	ca4a <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ca8c:	f104 010b 	add.w	r1, r4, #11
    ca90:	4439      	add	r1, r7
    ca92:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ca94:	4630      	mov	r0, r6
    ca96:	08c9      	lsrs	r1, r1, #3
    ca98:	f01d fcc7 	bl	2a42a <alloc_chunk>
	if (c0 == 0) {
    ca9c:	4680      	mov	r8, r0
    ca9e:	2800      	cmp	r0, #0
    caa0:	d0d3      	beq.n	ca4a <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    caa2:	f109 0504 	add.w	r5, r9, #4
    caa6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    caaa:	1e7b      	subs	r3, r7, #1
    caac:	4435      	add	r5, r6
    caae:	441d      	add	r5, r3
    cab0:	427f      	negs	r7, r7
    cab2:	403d      	ands	r5, r7
    cab4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cab8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    caba:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cabc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cabe:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cac0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    cac4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    cac6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    caca:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    cace:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    cad2:	d208      	bcs.n	cae6 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    cad4:	4601      	mov	r1, r0
    cad6:	463a      	mov	r2, r7
    cad8:	4630      	mov	r0, r6
    cada:	f01d fcf3 	bl	2a4c4 <split_chunks>
		free_list_add(h, c0);
    cade:	4641      	mov	r1, r8
    cae0:	4630      	mov	r0, r6
    cae2:	f01d fc51 	bl	2a388 <free_list_add>
	return c + chunk_size(h, c);
    cae6:	4639      	mov	r1, r7
    cae8:	4630      	mov	r0, r6
    caea:	f01d fc48 	bl	2a37e <chunk_size>
    caee:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    caf0:	4284      	cmp	r4, r0
    caf2:	d207      	bcs.n	cb04 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    caf4:	4630      	mov	r0, r6
    caf6:	4622      	mov	r2, r4
    caf8:	f01d fce4 	bl	2a4c4 <split_chunks>
		free_list_add(h, c_end);
    cafc:	4621      	mov	r1, r4
    cafe:	4630      	mov	r0, r6
    cb00:	f01d fc42 	bl	2a388 <free_list_add>
	void *cmem = &buf[c];
    cb04:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cb08:	8873      	ldrh	r3, [r6, #2]
    cb0a:	f043 0301 	orr.w	r3, r3, #1
    cb0e:	8073      	strh	r3, [r6, #2]
    cb10:	e79c      	b.n	ca4c <sys_heap_aligned_alloc+0x2c>
    cb12:	bf00      	nop
    cb14:	00033258 	.word	0x00033258
    cb18:	0003318c 	.word	0x0003318c
    cb1c:	00032659 	.word	0x00032659
    cb20:	00033273 	.word	0x00033273

0000cb24 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cb24:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb2a:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cb2c:	d30e      	bcc.n	cb4c <sys_heap_init+0x28>
    cb2e:	493a      	ldr	r1, [pc, #232]	; (cc18 <sys_heap_init+0xf4>)
    cb30:	f240 13eb 	movw	r3, #491	; 0x1eb
    cb34:	4a39      	ldr	r2, [pc, #228]	; (cc1c <sys_heap_init+0xf8>)
    cb36:	483a      	ldr	r0, [pc, #232]	; (cc20 <sys_heap_init+0xfc>)
    cb38:	f01d fdbf 	bl	2a6ba <assert_print>
    cb3c:	4839      	ldr	r0, [pc, #228]	; (cc24 <sys_heap_init+0x100>)
    cb3e:	f01d fdbc 	bl	2a6ba <assert_print>
    cb42:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    cb46:	4835      	ldr	r0, [pc, #212]	; (cc1c <sys_heap_init+0xf8>)
    cb48:	f01d fdb0 	bl	2a6ac <assert_post_action>
    cb4c:	2a04      	cmp	r2, #4
    cb4e:	d80c      	bhi.n	cb6a <sys_heap_init+0x46>
    cb50:	4935      	ldr	r1, [pc, #212]	; (cc28 <sys_heap_init+0x104>)
    cb52:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    cb56:	4a31      	ldr	r2, [pc, #196]	; (cc1c <sys_heap_init+0xf8>)
    cb58:	4831      	ldr	r0, [pc, #196]	; (cc20 <sys_heap_init+0xfc>)
    cb5a:	f01d fdae 	bl	2a6ba <assert_print>
    cb5e:	4833      	ldr	r0, [pc, #204]	; (cc2c <sys_heap_init+0x108>)
    cb60:	f01d fdab 	bl	2a6ba <assert_print>
    cb64:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    cb68:	e7ed      	b.n	cb46 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    cb6a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cb6c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cb6e:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cb70:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cb74:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cb78:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cb7a:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cb7c:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cb80:	d80c      	bhi.n	cb9c <sys_heap_init+0x78>
    cb82:	492b      	ldr	r1, [pc, #172]	; (cc30 <sys_heap_init+0x10c>)
    cb84:	f240 13fb 	movw	r3, #507	; 0x1fb
    cb88:	4a24      	ldr	r2, [pc, #144]	; (cc1c <sys_heap_init+0xf8>)
    cb8a:	4825      	ldr	r0, [pc, #148]	; (cc20 <sys_heap_init+0xfc>)
    cb8c:	f01d fd95 	bl	2a6ba <assert_print>
    cb90:	4826      	ldr	r0, [pc, #152]	; (cc2c <sys_heap_init+0x108>)
    cb92:	f01d fd92 	bl	2a6ba <assert_print>
    cb96:	f240 11fb 	movw	r1, #507	; 0x1fb
    cb9a:	e7d4      	b.n	cb46 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    cb9c:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    cba0:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    cba2:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cba4:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cba8:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    cbac:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cbae:	3107      	adds	r1, #7
    cbb0:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cbb2:	1c4d      	adds	r5, r1, #1
    cbb4:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    cbb6:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    cbb8:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cbba:	d90c      	bls.n	cbd6 <sys_heap_init+0xb2>
    cbbc:	491d      	ldr	r1, [pc, #116]	; (cc34 <sys_heap_init+0x110>)
    cbbe:	f44f 7303 	mov.w	r3, #524	; 0x20c
    cbc2:	4a16      	ldr	r2, [pc, #88]	; (cc1c <sys_heap_init+0xf8>)
    cbc4:	4816      	ldr	r0, [pc, #88]	; (cc20 <sys_heap_init+0xfc>)
    cbc6:	f01d fd78 	bl	2a6ba <assert_print>
    cbca:	4818      	ldr	r0, [pc, #96]	; (cc2c <sys_heap_init+0x108>)
    cbcc:	f01d fd75 	bl	2a6ba <assert_print>
    cbd0:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cbd4:	e7b7      	b.n	cb46 <sys_heap_init+0x22>
    cbd6:	f100 050c 	add.w	r5, r0, #12
    cbda:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    cbde:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    cbe2:	42b5      	cmp	r5, r6
    cbe4:	d1fb      	bne.n	cbde <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cbe6:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cbe8:	f045 0501 	orr.w	r5, r5, #1
    cbec:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    cbee:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    cbf0:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cbf4:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    cbf6:	8004      	strh	r4, [r0, #0]
    cbf8:	8077      	strh	r7, [r6, #2]
    cbfa:	1886      	adds	r6, r0, r2
    cbfc:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    cc00:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    cc04:	8074      	strh	r4, [r6, #2]
    cc06:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cc08:	885a      	ldrh	r2, [r3, #2]
    cc0a:	f042 0201 	orr.w	r2, r2, #1
    cc0e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    cc10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    cc14:	f01d bbb8 	b.w	2a388 <free_list_add>
    cc18:	00033290 	.word	0x00033290
    cc1c:	0003318c 	.word	0x0003318c
    cc20:	00032659 	.word	0x00032659
    cc24:	000332a6 	.word	0x000332a6
    cc28:	000332bd 	.word	0x000332bd
    cc2c:	000332de 	.word	0x000332de
    cc30:	000332f7 	.word	0x000332f7
    cc34:	00033320 	.word	0x00033320

0000cc38 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    cc38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc3c:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cc3e:	8ba3      	ldrh	r3, [r4, #28]
{
    cc40:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cc42:	0719      	lsls	r1, r3, #28
{
    cc44:	4615      	mov	r5, r2
	if (processing) {
    cc46:	d412      	bmi.n	cc6e <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    cc48:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cc4a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    cc4e:	d164      	bne.n	cd1a <process_event+0xe2>
			evt = process_recheck(mgr);
    cc50:	4620      	mov	r0, r4
    cc52:	f01d fcab 	bl	2a5ac <process_recheck>
		}

		if (evt == EVT_NOP) {
    cc56:	b188      	cbz	r0, cc7c <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    cc58:	3801      	subs	r0, #1
    cc5a:	2804      	cmp	r0, #4
    cc5c:	f200 8134 	bhi.w	cec8 <process_event+0x290>
    cc60:	e8df f010 	tbh	[pc, r0, lsl #1]
    cc64:	0132005b 	.word	0x0132005b
    cc68:	00d10081 	.word	0x00d10081
    cc6c:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    cc6e:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    cc70:	bf0c      	ite	eq
    cc72:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cc76:	f043 0120 	orrne.w	r1, r3, #32
    cc7a:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    cc7c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc7e:	4620      	mov	r0, r4
    cc80:	f018 f9f8 	bl	25074 <z_spin_unlock_valid>
    cc84:	2800      	cmp	r0, #0
    cc86:	f040 819b 	bne.w	cfc0 <process_event+0x388>
    cc8a:	4998      	ldr	r1, [pc, #608]	; (ceec <process_event+0x2b4>)
    cc8c:	23c2      	movs	r3, #194	; 0xc2
    cc8e:	4a98      	ldr	r2, [pc, #608]	; (cef0 <process_event+0x2b8>)
    cc90:	4898      	ldr	r0, [pc, #608]	; (cef4 <process_event+0x2bc>)
    cc92:	f01d fd12 	bl	2a6ba <assert_print>
    cc96:	4621      	mov	r1, r4
    cc98:	e0b0      	b.n	cdfc <process_event+0x1c4>
    cc9a:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    cc9e:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    cca0:	2801      	cmp	r0, #1
    cca2:	d81e      	bhi.n	cce2 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    cca4:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    cca6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    cca8:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    ccaa:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    ccae:	d114      	bne.n	ccda <process_event+0xa2>
		*clients = mgr->clients;
    ccb0:	463a      	mov	r2, r7
    ccb2:	e003      	b.n	ccbc <process_event+0x84>
				mgr->refs += 1U;
    ccb4:	8be0      	ldrh	r0, [r4, #30]
    ccb6:	3001      	adds	r0, #1
    ccb8:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    ccba:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ccbc:	2a00      	cmp	r2, #0
    ccbe:	d1f9      	bne.n	ccb4 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ccc0:	f023 0307 	bic.w	r3, r3, #7
    ccc4:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    ccc8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ccca:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cccc:	f01d fc6e 	bl	2a5ac <process_recheck>
    ccd0:	b390      	cbz	r0, cd38 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ccd2:	f042 0220 	orr.w	r2, r2, #32
    ccd6:	83a2      	strh	r2, [r4, #28]
    ccd8:	e02e      	b.n	cd38 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ccda:	f023 0307 	bic.w	r3, r3, #7
    ccde:	b29a      	uxth	r2, r3
}
    cce0:	e7f2      	b.n	ccc8 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cce2:	2a04      	cmp	r2, #4
    cce4:	d133      	bne.n	cd4e <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cce6:	f023 0307 	bic.w	r3, r3, #7
    ccea:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    ccec:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ccee:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    ccf0:	f01d fc5c 	bl	2a5ac <process_recheck>
    ccf4:	b110      	cbz	r0, ccfc <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ccf6:	f042 0220 	orr.w	r2, r2, #32
    ccfa:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ccfc:	8ba3      	ldrh	r3, [r4, #28]
    ccfe:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cd02:	4589      	cmp	r9, r1
    cd04:	f040 80ea 	bne.w	cedc <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cd08:	8ba1      	ldrh	r1, [r4, #28]
    cd0a:	06ca      	lsls	r2, r1, #27
    cd0c:	f140 814f 	bpl.w	cfae <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cd10:	f021 0310 	bic.w	r3, r1, #16
    cd14:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cd16:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    cd1a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd1e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    cd20:	f1b8 0f00 	cmp.w	r8, #0
    cd24:	dab9      	bge.n	cc9a <process_event+0x62>
	list->head = NULL;
    cd26:	2200      	movs	r2, #0
		*clients = mgr->clients;
    cd28:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd2a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    cd2e:	e9c4 2200 	strd	r2, r2, [r4]
    cd32:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd36:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd38:	8ba3      	ldrh	r3, [r4, #28]
    cd3a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cd3e:	4589      	cmp	r9, r1
    cd40:	f040 80cd 	bne.w	cede <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    cd44:	2f00      	cmp	r7, #0
    cd46:	d0df      	beq.n	cd08 <process_event+0xd0>
    cd48:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd4a:	46b2      	mov	sl, r6
    cd4c:	e044      	b.n	cdd8 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    cd4e:	496a      	ldr	r1, [pc, #424]	; (cef8 <process_event+0x2c0>)
    cd50:	f240 131b 	movw	r3, #283	; 0x11b
    cd54:	4a69      	ldr	r2, [pc, #420]	; (cefc <process_event+0x2c4>)
    cd56:	4867      	ldr	r0, [pc, #412]	; (cef4 <process_event+0x2bc>)
    cd58:	f01d fcaf 	bl	2a6ba <assert_print>
    cd5c:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    cd60:	4866      	ldr	r0, [pc, #408]	; (cefc <process_event+0x2c4>)
    cd62:	f01d fca3 	bl	2a6ac <assert_post_action>
    cd66:	b149      	cbz	r1, cd7c <process_event+0x144>
    cd68:	4965      	ldr	r1, [pc, #404]	; (cf00 <process_event+0x2c8>)
    cd6a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    cd6e:	4a63      	ldr	r2, [pc, #396]	; (cefc <process_event+0x2c4>)
    cd70:	4860      	ldr	r0, [pc, #384]	; (cef4 <process_event+0x2bc>)
    cd72:	f01d fca2 	bl	2a6ba <assert_print>
    cd76:	f44f 71ab 	mov.w	r1, #342	; 0x156
    cd7a:	e7f1      	b.n	cd60 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    cd7c:	6823      	ldr	r3, [r4, #0]
    cd7e:	b94b      	cbnz	r3, cd94 <process_event+0x15c>
    cd80:	4960      	ldr	r1, [pc, #384]	; (cf04 <process_event+0x2cc>)
    cd82:	f240 1357 	movw	r3, #343	; 0x157
    cd86:	4a5d      	ldr	r2, [pc, #372]	; (cefc <process_event+0x2c4>)
    cd88:	485a      	ldr	r0, [pc, #360]	; (cef4 <process_event+0x2bc>)
    cd8a:	f01d fc96 	bl	2a6ba <assert_print>
    cd8e:	f240 1157 	movw	r1, #343	; 0x157
    cd92:	e7e5      	b.n	cd60 <process_event+0x128>
			transit = mgr->transitions->start;
    cd94:	6923      	ldr	r3, [r4, #16]
    cd96:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    cd98:	b94e      	cbnz	r6, cdae <process_event+0x176>
    cd9a:	495b      	ldr	r1, [pc, #364]	; (cf08 <process_event+0x2d0>)
    cd9c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    cda0:	4a56      	ldr	r2, [pc, #344]	; (cefc <process_event+0x2c4>)
    cda2:	4854      	ldr	r0, [pc, #336]	; (cef4 <process_event+0x2bc>)
    cda4:	f01d fc89 	bl	2a6ba <assert_print>
    cda8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    cdac:	e7d8      	b.n	cd60 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    cdae:	460f      	mov	r7, r1
		res = 0;
    cdb0:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cdb2:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cdb6:	8ba3      	ldrh	r3, [r4, #28]
    cdb8:	f023 0307 	bic.w	r3, r3, #7
    cdbc:	f043 0306 	orr.w	r3, r3, #6
    cdc0:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    cdc2:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    cdc4:	68a2      	ldr	r2, [r4, #8]
    cdc6:	2a00      	cmp	r2, #0
    cdc8:	f040 808b 	bne.w	cee2 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    cdcc:	2f00      	cmp	r7, #0
    cdce:	f040 808b 	bne.w	cee8 <process_event+0x2b0>
		    || (transit != NULL)) {
    cdd2:	2e00      	cmp	r6, #0
    cdd4:	d098      	beq.n	cd08 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cdd6:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cdd8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    cddc:	f104 0b14 	add.w	fp, r4, #20
    cde0:	4658      	mov	r0, fp
			mgr->flags = flags;
    cde2:	83a3      	strh	r3, [r4, #28]
    cde4:	f018 f946 	bl	25074 <z_spin_unlock_valid>
    cde8:	2800      	cmp	r0, #0
    cdea:	f040 8097 	bne.w	cf1c <process_event+0x2e4>
    cdee:	493f      	ldr	r1, [pc, #252]	; (ceec <process_event+0x2b4>)
    cdf0:	23c2      	movs	r3, #194	; 0xc2
    cdf2:	4a3f      	ldr	r2, [pc, #252]	; (cef0 <process_event+0x2b8>)
    cdf4:	483f      	ldr	r0, [pc, #252]	; (cef4 <process_event+0x2bc>)
    cdf6:	f01d fc60 	bl	2a6ba <assert_print>
    cdfa:	4659      	mov	r1, fp
    cdfc:	4843      	ldr	r0, [pc, #268]	; (cf0c <process_event+0x2d4>)
    cdfe:	f01d fc5c 	bl	2a6ba <assert_print>
    ce02:	21c2      	movs	r1, #194	; 0xc2
    ce04:	e0ae      	b.n	cf64 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    ce06:	2902      	cmp	r1, #2
    ce08:	d009      	beq.n	ce1e <process_event+0x1e6>
    ce0a:	4941      	ldr	r1, [pc, #260]	; (cf10 <process_event+0x2d8>)
    ce0c:	f240 135d 	movw	r3, #349	; 0x15d
    ce10:	4a3a      	ldr	r2, [pc, #232]	; (cefc <process_event+0x2c4>)
    ce12:	4838      	ldr	r0, [pc, #224]	; (cef4 <process_event+0x2bc>)
    ce14:	f01d fc51 	bl	2a6ba <assert_print>
    ce18:	f240 115d 	movw	r1, #349	; 0x15d
    ce1c:	e7a0      	b.n	cd60 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    ce1e:	8be7      	ldrh	r7, [r4, #30]
    ce20:	b14f      	cbz	r7, ce36 <process_event+0x1fe>
    ce22:	493c      	ldr	r1, [pc, #240]	; (cf14 <process_event+0x2dc>)
    ce24:	f44f 73af 	mov.w	r3, #350	; 0x15e
    ce28:	4a34      	ldr	r2, [pc, #208]	; (cefc <process_event+0x2c4>)
    ce2a:	4832      	ldr	r0, [pc, #200]	; (cef4 <process_event+0x2bc>)
    ce2c:	f01d fc45 	bl	2a6ba <assert_print>
    ce30:	f44f 71af 	mov.w	r1, #350	; 0x15e
    ce34:	e794      	b.n	cd60 <process_event+0x128>
			transit = mgr->transitions->stop;
    ce36:	6923      	ldr	r3, [r4, #16]
    ce38:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    ce3a:	b94e      	cbnz	r6, ce50 <process_event+0x218>
    ce3c:	4932      	ldr	r1, [pc, #200]	; (cf08 <process_event+0x2d0>)
    ce3e:	f240 1361 	movw	r3, #353	; 0x161
    ce42:	4a2e      	ldr	r2, [pc, #184]	; (cefc <process_event+0x2c4>)
    ce44:	482b      	ldr	r0, [pc, #172]	; (cef4 <process_event+0x2bc>)
    ce46:	f01d fc38 	bl	2a6ba <assert_print>
    ce4a:	f240 1161 	movw	r1, #353	; 0x161
    ce4e:	e787      	b.n	cd60 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce50:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    ce52:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce54:	f023 0307 	bic.w	r3, r3, #7
    ce58:	f043 0304 	orr.w	r3, r3, #4
    ce5c:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce5e:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce62:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce64:	e7ae      	b.n	cdc4 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    ce66:	2901      	cmp	r1, #1
    ce68:	d009      	beq.n	ce7e <process_event+0x246>
    ce6a:	492b      	ldr	r1, [pc, #172]	; (cf18 <process_event+0x2e0>)
    ce6c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    ce70:	4a22      	ldr	r2, [pc, #136]	; (cefc <process_event+0x2c4>)
    ce72:	4820      	ldr	r0, [pc, #128]	; (cef4 <process_event+0x2bc>)
    ce74:	f01d fc21 	bl	2a6ba <assert_print>
    ce78:	f44f 71b2 	mov.w	r1, #356	; 0x164
    ce7c:	e770      	b.n	cd60 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ce7e:	6823      	ldr	r3, [r4, #0]
    ce80:	b94b      	cbnz	r3, ce96 <process_event+0x25e>
    ce82:	4920      	ldr	r1, [pc, #128]	; (cf04 <process_event+0x2cc>)
    ce84:	f240 1365 	movw	r3, #357	; 0x165
    ce88:	4a1c      	ldr	r2, [pc, #112]	; (cefc <process_event+0x2c4>)
    ce8a:	481a      	ldr	r0, [pc, #104]	; (cef4 <process_event+0x2bc>)
    ce8c:	f01d fc15 	bl	2a6ba <assert_print>
    ce90:	f240 1165 	movw	r1, #357	; 0x165
    ce94:	e764      	b.n	cd60 <process_event+0x128>
			transit = mgr->transitions->reset;
    ce96:	6923      	ldr	r3, [r4, #16]
    ce98:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    ce9a:	b94e      	cbnz	r6, ceb0 <process_event+0x278>
    ce9c:	491a      	ldr	r1, [pc, #104]	; (cf08 <process_event+0x2d0>)
    ce9e:	f44f 73b4 	mov.w	r3, #360	; 0x168
    cea2:	4a16      	ldr	r2, [pc, #88]	; (cefc <process_event+0x2c4>)
    cea4:	4813      	ldr	r0, [pc, #76]	; (cef4 <process_event+0x2bc>)
    cea6:	f01d fc08 	bl	2a6ba <assert_print>
    ceaa:	f44f 71b4 	mov.w	r1, #360	; 0x168
    ceae:	e757      	b.n	cd60 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    ceb0:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ceb2:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    ceb4:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ceb6:	f023 0307 	bic.w	r3, r3, #7
    ceba:	f043 0305 	orr.w	r3, r3, #5
    cebe:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cec0:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    cec4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cec6:	e77d      	b.n	cdc4 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    cec8:	490b      	ldr	r1, [pc, #44]	; (cef8 <process_event+0x2c0>)
    ceca:	f240 136b 	movw	r3, #363	; 0x16b
    cece:	4a0b      	ldr	r2, [pc, #44]	; (cefc <process_event+0x2c4>)
    ced0:	4808      	ldr	r0, [pc, #32]	; (cef4 <process_event+0x2bc>)
    ced2:	f01d fbf2 	bl	2a6ba <assert_print>
    ced6:	f240 116b 	movw	r1, #363	; 0x16b
    ceda:	e741      	b.n	cd60 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    cedc:	2700      	movs	r7, #0
    cede:	2600      	movs	r6, #0
    cee0:	e770      	b.n	cdc4 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cee2:	f04f 0a01 	mov.w	sl, #1
    cee6:	e777      	b.n	cdd8 <process_event+0x1a0>
    cee8:	4692      	mov	sl, r2
    ceea:	e775      	b.n	cdd8 <process_event+0x1a0>
    ceec:	0003341b 	.word	0x0003341b
    cef0:	000333ee 	.word	0x000333ee
    cef4:	00032659 	.word	0x00032659
    cef8:	00037b2a 	.word	0x00037b2a
    cefc:	0003334b 	.word	0x0003334b
    cf00:	0003336d 	.word	0x0003336d
    cf04:	00033379 	.word	0x00033379
    cf08:	0003339c 	.word	0x0003339c
    cf0c:	00033432 	.word	0x00033432
    cf10:	000333b3 	.word	0x000333b3
    cf14:	000333c9 	.word	0x000333c9
    cf18:	000333d8 	.word	0x000333d8
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cf1c:	f385 8811 	msr	BASEPRI, r5
    cf20:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cf24:	f1ba 0f00 	cmp.w	sl, #0
    cf28:	d11e      	bne.n	cf68 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    cf2a:	2f00      	cmp	r7, #0
    cf2c:	d12f      	bne.n	cf8e <process_event+0x356>
			if (transit != NULL) {
    cf2e:	b116      	cbz	r6, cf36 <process_event+0x2fe>
				transit(mgr, transition_complete);
    cf30:	4620      	mov	r0, r4
    cf32:	4926      	ldr	r1, [pc, #152]	; (cfcc <process_event+0x394>)
    cf34:	47b0      	blx	r6
	__asm__ volatile(
    cf36:	f04f 0320 	mov.w	r3, #32
    cf3a:	f3ef 8511 	mrs	r5, BASEPRI
    cf3e:	f383 8812 	msr	BASEPRI_MAX, r3
    cf42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf46:	4658      	mov	r0, fp
    cf48:	f018 f886 	bl	25058 <z_spin_lock_valid>
    cf4c:	bb38      	cbnz	r0, cf9e <process_event+0x366>
    cf4e:	2394      	movs	r3, #148	; 0x94
    cf50:	4a1f      	ldr	r2, [pc, #124]	; (cfd0 <process_event+0x398>)
    cf52:	4920      	ldr	r1, [pc, #128]	; (cfd4 <process_event+0x39c>)
    cf54:	4820      	ldr	r0, [pc, #128]	; (cfd8 <process_event+0x3a0>)
    cf56:	f01d fbb0 	bl	2a6ba <assert_print>
    cf5a:	4659      	mov	r1, fp
    cf5c:	481f      	ldr	r0, [pc, #124]	; (cfdc <process_event+0x3a4>)
    cf5e:	f01d fbac 	bl	2a6ba <assert_print>
    cf62:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf64:	481a      	ldr	r0, [pc, #104]	; (cfd0 <process_event+0x398>)
    cf66:	e6fc      	b.n	cd62 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    cf68:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cf6a:	2900      	cmp	r1, #0
    cf6c:	d0dd      	beq.n	cf2a <process_event+0x2f2>
	return node->next;
    cf6e:	680d      	ldr	r5, [r1, #0]
    cf70:	2900      	cmp	r1, #0
    cf72:	d0da      	beq.n	cf2a <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    cf74:	4643      	mov	r3, r8
    cf76:	464a      	mov	r2, r9
    cf78:	4620      	mov	r0, r4
    cf7a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    cf7e:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cf80:	b11d      	cbz	r5, cf8a <process_event+0x352>
    cf82:	682b      	ldr	r3, [r5, #0]
    cf84:	4629      	mov	r1, r5
    cf86:	461d      	mov	r5, r3
    cf88:	e7f2      	b.n	cf70 <process_event+0x338>
    cf8a:	462b      	mov	r3, r5
    cf8c:	e7fa      	b.n	cf84 <process_event+0x34c>
    cf8e:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    cf90:	4643      	mov	r3, r8
    cf92:	464a      	mov	r2, r9
    cf94:	4620      	mov	r0, r4
    cf96:	683f      	ldr	r7, [r7, #0]
    cf98:	f01d fb34 	bl	2a604 <notify_one>
    cf9c:	e7c5      	b.n	cf2a <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    cf9e:	4658      	mov	r0, fp
    cfa0:	f018 f876 	bl	25090 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cfa4:	8ba3      	ldrh	r3, [r4, #28]
    cfa6:	f023 0308 	bic.w	r3, r3, #8
    cfaa:	83a3      	strh	r3, [r4, #28]
    cfac:	e6ac      	b.n	cd08 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    cfae:	068b      	lsls	r3, r1, #26
    cfb0:	f57f ae64 	bpl.w	cc7c <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    cfb4:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cfb8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cfba:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    cfbe:	e647      	b.n	cc50 <process_event+0x18>
	__asm__ volatile(
    cfc0:	f385 8811 	msr	BASEPRI, r5
    cfc4:	f3bf 8f6f 	isb	sy
}
    cfc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfcc:	0000cfe1 	.word	0x0000cfe1
    cfd0:	000333ee 	.word	0x000333ee
    cfd4:	00033447 	.word	0x00033447
    cfd8:	00032659 	.word	0x00032659
    cfdc:	0003345c 	.word	0x0003345c

0000cfe0 <transition_complete>:
{
    cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfe2:	4604      	mov	r4, r0
    cfe4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    cfe6:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    cfea:	f04f 0320 	mov.w	r3, #32
    cfee:	f3ef 8711 	mrs	r7, BASEPRI
    cff2:	f383 8812 	msr	BASEPRI_MAX, r3
    cff6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cffa:	4630      	mov	r0, r6
    cffc:	f018 f82c 	bl	25058 <z_spin_lock_valid>
    d000:	b968      	cbnz	r0, d01e <transition_complete+0x3e>
    d002:	2394      	movs	r3, #148	; 0x94
    d004:	4a0b      	ldr	r2, [pc, #44]	; (d034 <transition_complete+0x54>)
    d006:	490c      	ldr	r1, [pc, #48]	; (d038 <transition_complete+0x58>)
    d008:	480c      	ldr	r0, [pc, #48]	; (d03c <transition_complete+0x5c>)
    d00a:	f01d fb56 	bl	2a6ba <assert_print>
    d00e:	4631      	mov	r1, r6
    d010:	480b      	ldr	r0, [pc, #44]	; (d040 <transition_complete+0x60>)
    d012:	f01d fb52 	bl	2a6ba <assert_print>
    d016:	2194      	movs	r1, #148	; 0x94
    d018:	4806      	ldr	r0, [pc, #24]	; (d034 <transition_complete+0x54>)
    d01a:	f01d fb47 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
    d01e:	4630      	mov	r0, r6
    d020:	f018 f836 	bl	25090 <z_spin_lock_set_owner>
	mgr->last_res = res;
    d024:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    d026:	463a      	mov	r2, r7
    d028:	4620      	mov	r0, r4
}
    d02a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    d02e:	2101      	movs	r1, #1
    d030:	f7ff be02 	b.w	cc38 <process_event>
    d034:	000333ee 	.word	0x000333ee
    d038:	00033447 	.word	0x00033447
    d03c:	00032659 	.word	0x00032659
    d040:	0003345c 	.word	0x0003345c

0000d044 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    d044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d048:	4604      	mov	r4, r0
    d04a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    d04c:	f01d faca 	bl	2a5e4 <validate_args>

	if (rv < 0) {
    d050:	1e05      	subs	r5, r0, #0
    d052:	db67      	blt.n	d124 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d054:	f104 0914 	add.w	r9, r4, #20
    d058:	f04f 0320 	mov.w	r3, #32
    d05c:	f3ef 8a11 	mrs	sl, BASEPRI
    d060:	f383 8812 	msr	BASEPRI_MAX, r3
    d064:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d068:	4648      	mov	r0, r9
    d06a:	f017 fff5 	bl	25058 <z_spin_lock_valid>
    d06e:	4680      	mov	r8, r0
    d070:	b960      	cbnz	r0, d08c <onoff_request+0x48>
    d072:	2394      	movs	r3, #148	; 0x94
    d074:	4a37      	ldr	r2, [pc, #220]	; (d154 <onoff_request+0x110>)
    d076:	4938      	ldr	r1, [pc, #224]	; (d158 <onoff_request+0x114>)
    d078:	4838      	ldr	r0, [pc, #224]	; (d15c <onoff_request+0x118>)
    d07a:	f01d fb1e 	bl	2a6ba <assert_print>
    d07e:	4649      	mov	r1, r9
    d080:	4837      	ldr	r0, [pc, #220]	; (d160 <onoff_request+0x11c>)
    d082:	f01d fb1a 	bl	2a6ba <assert_print>
    d086:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d088:	4832      	ldr	r0, [pc, #200]	; (d154 <onoff_request+0x110>)
    d08a:	e040      	b.n	d10e <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    d08c:	4648      	mov	r0, r9
    d08e:	f017 ffff 	bl	25090 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d092:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d096:	8be3      	ldrh	r3, [r4, #30]
    d098:	8ba6      	ldrh	r6, [r4, #28]
    d09a:	4293      	cmp	r3, r2
    d09c:	f006 0607 	and.w	r6, r6, #7
    d0a0:	d043      	beq.n	d12a <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d0a2:	2e02      	cmp	r6, #2
    d0a4:	d113      	bne.n	d0ce <onoff_request+0x8a>
	rv = state;
    d0a6:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    d0a8:	3301      	adds	r3, #1
    d0aa:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d0ac:	4648      	mov	r0, r9
    d0ae:	f017 ffe1 	bl	25074 <z_spin_unlock_valid>
    d0b2:	2800      	cmp	r0, #0
    d0b4:	d13f      	bne.n	d136 <onoff_request+0xf2>
    d0b6:	23c2      	movs	r3, #194	; 0xc2
    d0b8:	4a26      	ldr	r2, [pc, #152]	; (d154 <onoff_request+0x110>)
    d0ba:	492a      	ldr	r1, [pc, #168]	; (d164 <onoff_request+0x120>)
    d0bc:	4827      	ldr	r0, [pc, #156]	; (d15c <onoff_request+0x118>)
    d0be:	f01d fafc 	bl	2a6ba <assert_print>
    d0c2:	4649      	mov	r1, r9
    d0c4:	4828      	ldr	r0, [pc, #160]	; (d168 <onoff_request+0x124>)
    d0c6:	f01d faf8 	bl	2a6ba <assert_print>
    d0ca:	21c2      	movs	r1, #194	; 0xc2
    d0cc:	e7dc      	b.n	d088 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    d0ce:	2e06      	cmp	r6, #6
    d0d0:	d813      	bhi.n	d0fa <onoff_request+0xb6>
    d0d2:	e8df f006 	tbb	[pc, r6]
    d0d6:	2d09      	.short	0x2d09
    d0d8:	04091212 	.word	0x04091212
    d0dc:	09          	.byte	0x09
    d0dd:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    d0de:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d0e2:	f04f 0800 	mov.w	r8, #0
    d0e6:	e7e1      	b.n	d0ac <onoff_request+0x68>
	parent->next = child;
    d0e8:	2300      	movs	r3, #0
    d0ea:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    d0ec:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d0ee:	b983      	cbnz	r3, d112 <onoff_request+0xce>
	list->head = node;
    d0f0:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    d0f4:	b186      	cbz	r6, d118 <onoff_request+0xd4>
	rv = state;
    d0f6:	4635      	mov	r5, r6
    d0f8:	e7f3      	b.n	d0e2 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d0fa:	491c      	ldr	r1, [pc, #112]	; (d16c <onoff_request+0x128>)
    d0fc:	4817      	ldr	r0, [pc, #92]	; (d15c <onoff_request+0x118>)
    d0fe:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d102:	4a1b      	ldr	r2, [pc, #108]	; (d170 <onoff_request+0x12c>)
    d104:	f01d fad9 	bl	2a6ba <assert_print>
    d108:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d10c:	4818      	ldr	r0, [pc, #96]	; (d170 <onoff_request+0x12c>)
    d10e:	f01d facd 	bl	2a6ac <assert_post_action>
	parent->next = child;
    d112:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d114:	6067      	str	r7, [r4, #4]
}
    d116:	e7ed      	b.n	d0f4 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    d118:	4652      	mov	r2, sl
    d11a:	2102      	movs	r1, #2
    d11c:	4620      	mov	r0, r4
    d11e:	f7ff fd8b 	bl	cc38 <process_event>
    d122:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    d124:	4628      	mov	r0, r5
    d126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    d12a:	f06f 050a 	mvn.w	r5, #10
    d12e:	e7d8      	b.n	d0e2 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    d130:	f06f 0504 	mvn.w	r5, #4
    d134:	e7d5      	b.n	d0e2 <onoff_request+0x9e>
	__asm__ volatile(
    d136:	f38a 8811 	msr	BASEPRI, sl
    d13a:	f3bf 8f6f 	isb	sy
		if (notify) {
    d13e:	f1b8 0f00 	cmp.w	r8, #0
    d142:	d0ef      	beq.n	d124 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    d144:	2300      	movs	r3, #0
    d146:	4632      	mov	r2, r6
    d148:	4639      	mov	r1, r7
    d14a:	4620      	mov	r0, r4
    d14c:	f01d fa5a 	bl	2a604 <notify_one>
    d150:	e7e8      	b.n	d124 <onoff_request+0xe0>
    d152:	bf00      	nop
    d154:	000333ee 	.word	0x000333ee
    d158:	00033447 	.word	0x00033447
    d15c:	00032659 	.word	0x00032659
    d160:	0003345c 	.word	0x0003345c
    d164:	0003341b 	.word	0x0003341b
    d168:	00033432 	.word	0x00033432
    d16c:	000333d8 	.word	0x000333d8
    d170:	0003334b 	.word	0x0003334b

0000d174 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d174:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d176:	6842      	ldr	r2, [r0, #4]
    d178:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d17a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d17e:	2a02      	cmp	r2, #2
	notify->result = res;
    d180:	6081      	str	r1, [r0, #8]
	switch (method) {
    d182:	d00a      	beq.n	d19a <sys_notify_finalize+0x26>
    d184:	2a03      	cmp	r2, #3
    d186:	f04f 0100 	mov.w	r1, #0
    d18a:	d003      	beq.n	d194 <sys_notify_finalize+0x20>
    d18c:	2a01      	cmp	r2, #1
    d18e:	d10a      	bne.n	d1a6 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d190:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d192:	e006      	b.n	d1a2 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    d194:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d196:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d198:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    d19a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d19c:	2200      	movs	r2, #0
    d19e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d1a0:	b958      	cbnz	r0, d1ba <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    d1a2:	2000      	movs	r0, #0
    d1a4:	e7f8      	b.n	d198 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    d1a6:	4906      	ldr	r1, [pc, #24]	; (d1c0 <sys_notify_finalize+0x4c>)
    d1a8:	4806      	ldr	r0, [pc, #24]	; (d1c4 <sys_notify_finalize+0x50>)
    d1aa:	2345      	movs	r3, #69	; 0x45
    d1ac:	4a06      	ldr	r2, [pc, #24]	; (d1c8 <sys_notify_finalize+0x54>)
    d1ae:	f01d fa84 	bl	2a6ba <assert_print>
    d1b2:	2145      	movs	r1, #69	; 0x45
    d1b4:	4804      	ldr	r0, [pc, #16]	; (d1c8 <sys_notify_finalize+0x54>)
    d1b6:	f01d fa79 	bl	2a6ac <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d1ba:	f01b f953 	bl	28464 <z_impl_k_poll_signal_raise>
    d1be:	e7f0      	b.n	d1a2 <sys_notify_finalize+0x2e>
    d1c0:	00037b2a 	.word	0x00037b2a
    d1c4:	00032659 	.word	0x00032659
    d1c8:	00033474 	.word	0x00033474

0000d1cc <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    d1cc:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d1ce:	4c09      	ldr	r4, [pc, #36]	; (d1f4 <crc8_ccitt+0x28>)
    d1d0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    d1d2:	4291      	cmp	r1, r2
    d1d4:	d100      	bne.n	d1d8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    d1d6:	bd10      	pop	{r4, pc}
		val ^= p[i];
    d1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
    d1dc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d1de:	0903      	lsrs	r3, r0, #4
    d1e0:	5ce3      	ldrb	r3, [r4, r3]
    d1e2:	0100      	lsls	r0, r0, #4
    d1e4:	b2c0      	uxtb	r0, r0
    d1e6:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d1e8:	0918      	lsrs	r0, r3, #4
    d1ea:	5c20      	ldrb	r0, [r4, r0]
    d1ec:	011b      	lsls	r3, r3, #4
    d1ee:	b2db      	uxtb	r3, r3
    d1f0:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    d1f2:	e7ee      	b.n	d1d2 <crc8_ccitt+0x6>
    d1f4:	00033497 	.word	0x00033497

0000d1f8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    d1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1fa:	4602      	mov	r2, r0
    d1fc:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    d1fe:	270a      	movs	r7, #10
	size_t val = 0;
    d200:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    d202:	4e07      	ldr	r6, [pc, #28]	; (d220 <extract_decimal+0x28>)
    d204:	460b      	mov	r3, r1
    d206:	781c      	ldrb	r4, [r3, #0]
    d208:	3101      	adds	r1, #1
    d20a:	5d35      	ldrb	r5, [r6, r4]
    d20c:	076d      	lsls	r5, r5, #29
    d20e:	d401      	bmi.n	d214 <extract_decimal+0x1c>
	}
	*str = sp;
    d210:	6013      	str	r3, [r2, #0]
	return val;
}
    d212:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    d214:	fb07 4300 	mla	r3, r7, r0, r4
    d218:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d21c:	e7f2      	b.n	d204 <extract_decimal+0xc>
    d21e:	bf00      	nop
    d220:	00038bb5 	.word	0x00038bb5

0000d224 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    d224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d228:	4615      	mov	r5, r2
    d22a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    d22c:	78d3      	ldrb	r3, [r2, #3]
    d22e:	4a22      	ldr	r2, [pc, #136]	; (d2b8 <encode_uint+0x94>)
	switch (specifier) {
    d230:	2b6f      	cmp	r3, #111	; 0x6f
    d232:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    d236:	4680      	mov	r8, r0
    d238:	460f      	mov	r7, r1
    d23a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    d23e:	d029      	beq.n	d294 <encode_uint+0x70>
    d240:	d824      	bhi.n	d28c <encode_uint+0x68>
		return 10;
    d242:	2b58      	cmp	r3, #88	; 0x58
    d244:	bf0c      	ite	eq
    d246:	2610      	moveq	r6, #16
    d248:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    d24a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    d24e:	4632      	mov	r2, r6
    d250:	2300      	movs	r3, #0
    d252:	4640      	mov	r0, r8
    d254:	4639      	mov	r1, r7
    d256:	f7fb fe4b 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    d25a:	2a09      	cmp	r2, #9
    d25c:	b2d4      	uxtb	r4, r2
    d25e:	d81e      	bhi.n	d29e <encode_uint+0x7a>
    d260:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    d262:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d264:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    d266:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d26a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    d26e:	d301      	bcc.n	d274 <encode_uint+0x50>
    d270:	45d1      	cmp	r9, sl
    d272:	d811      	bhi.n	d298 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    d274:	782b      	ldrb	r3, [r5, #0]
    d276:	069b      	lsls	r3, r3, #26
    d278:	d505      	bpl.n	d286 <encode_uint+0x62>
		if (radix == 8) {
    d27a:	2e08      	cmp	r6, #8
    d27c:	d115      	bne.n	d2aa <encode_uint+0x86>
			conv->altform_0 = true;
    d27e:	78ab      	ldrb	r3, [r5, #2]
    d280:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    d284:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    d286:	4648      	mov	r0, r9
    d288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    d28c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    d290:	2b70      	cmp	r3, #112	; 0x70
    d292:	e7d7      	b.n	d244 <encode_uint+0x20>
	switch (specifier) {
    d294:	2608      	movs	r6, #8
    d296:	e7d8      	b.n	d24a <encode_uint+0x26>
		value /= radix;
    d298:	4680      	mov	r8, r0
    d29a:	460f      	mov	r7, r1
    d29c:	e7d7      	b.n	d24e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d29e:	f1bb 0f01 	cmp.w	fp, #1
    d2a2:	bf0c      	ite	eq
    d2a4:	3437      	addeq	r4, #55	; 0x37
    d2a6:	3457      	addne	r4, #87	; 0x57
    d2a8:	e7db      	b.n	d262 <encode_uint+0x3e>
		} else if (radix == 16) {
    d2aa:	2e10      	cmp	r6, #16
    d2ac:	d1eb      	bne.n	d286 <encode_uint+0x62>
			conv->altform_0c = true;
    d2ae:	78ab      	ldrb	r3, [r5, #2]
    d2b0:	f043 0310 	orr.w	r3, r3, #16
    d2b4:	e7e6      	b.n	d284 <encode_uint+0x60>
    d2b6:	bf00      	nop
    d2b8:	00038bb5 	.word	0x00038bb5

0000d2bc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    d2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2c0:	4682      	mov	sl, r0
    d2c2:	4617      	mov	r7, r2
    d2c4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d2c6:	2500      	movs	r5, #0
{
    d2c8:	b097      	sub	sp, #92	; 0x5c
    d2ca:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d2cc:	7838      	ldrb	r0, [r7, #0]
    d2ce:	b908      	cbnz	r0, d2d4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d2d0:	4628      	mov	r0, r5
    d2d2:	e349      	b.n	d968 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    d2d4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    d2d6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    d2d8:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    d2da:	d006      	beq.n	d2ea <z_cbvprintf_impl+0x2e>
			OUTC('%');
    d2dc:	9903      	ldr	r1, [sp, #12]
    d2de:	47d0      	blx	sl
    d2e0:	2800      	cmp	r0, #0
    d2e2:	f2c0 8341 	blt.w	d968 <z_cbvprintf_impl+0x6ac>
    d2e6:	3501      	adds	r5, #1
		if (bps == NULL) {
    d2e8:	e1f0      	b.n	d6cc <z_cbvprintf_impl+0x410>
		} state = {
    d2ea:	2218      	movs	r2, #24
    d2ec:	2100      	movs	r1, #0
    d2ee:	a810      	add	r0, sp, #64	; 0x40
    d2f0:	f023 f977 	bl	305e2 <memset>
	if (*sp == '%') {
    d2f4:	787b      	ldrb	r3, [r7, #1]
    d2f6:	2b25      	cmp	r3, #37	; 0x25
    d2f8:	f000 80a3 	beq.w	d442 <z_cbvprintf_impl+0x186>
    d2fc:	2300      	movs	r3, #0
    d2fe:	4698      	mov	r8, r3
    d300:	469e      	mov	lr, r3
    d302:	469c      	mov	ip, r3
    d304:	4618      	mov	r0, r3
    d306:	1c79      	adds	r1, r7, #1
    d308:	460e      	mov	r6, r1
		switch (*sp) {
    d30a:	f811 2b01 	ldrb.w	r2, [r1], #1
    d30e:	2a2b      	cmp	r2, #43	; 0x2b
    d310:	f000 80c6 	beq.w	d4a0 <z_cbvprintf_impl+0x1e4>
    d314:	f200 80bd 	bhi.w	d492 <z_cbvprintf_impl+0x1d6>
    d318:	2a20      	cmp	r2, #32
    d31a:	f000 80c4 	beq.w	d4a6 <z_cbvprintf_impl+0x1ea>
    d31e:	2a23      	cmp	r2, #35	; 0x23
    d320:	f000 80c4 	beq.w	d4ac <z_cbvprintf_impl+0x1f0>
    d324:	b12b      	cbz	r3, d332 <z_cbvprintf_impl+0x76>
    d326:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d32e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d332:	f1b8 0f00 	cmp.w	r8, #0
    d336:	d005      	beq.n	d344 <z_cbvprintf_impl+0x88>
    d338:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d33c:	f043 0320 	orr.w	r3, r3, #32
    d340:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d344:	f1be 0f00 	cmp.w	lr, #0
    d348:	d005      	beq.n	d356 <z_cbvprintf_impl+0x9a>
    d34a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d34e:	f043 0310 	orr.w	r3, r3, #16
    d352:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d356:	f1bc 0f00 	cmp.w	ip, #0
    d35a:	d005      	beq.n	d368 <z_cbvprintf_impl+0xac>
    d35c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d360:	f043 0308 	orr.w	r3, r3, #8
    d364:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d368:	b128      	cbz	r0, d376 <z_cbvprintf_impl+0xba>
    d36a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d36e:	f043 0304 	orr.w	r3, r3, #4
    d372:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d376:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d37a:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d37e:	2944      	cmp	r1, #68	; 0x44
    d380:	d103      	bne.n	d38a <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    d382:	f36f 1386 	bfc	r3, #6, #1
    d386:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d38a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d38e:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d394:	9609      	str	r6, [sp, #36]	; 0x24
    d396:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d39a:	f040 808c 	bne.w	d4b6 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    d39e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d3a2:	f043 0301 	orr.w	r3, r3, #1
    d3a6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d3aa:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    d3ac:	781a      	ldrb	r2, [r3, #0]
    d3ae:	2a2e      	cmp	r2, #46	; 0x2e
    d3b0:	bf0c      	ite	eq
    d3b2:	2101      	moveq	r1, #1
    d3b4:	2100      	movne	r1, #0
    d3b6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d3ba:	f361 0241 	bfi	r2, r1, #1, #1
    d3be:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d3c2:	d10c      	bne.n	d3de <z_cbvprintf_impl+0x122>
	++sp;
    d3c4:	1c5a      	adds	r2, r3, #1
    d3c6:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d3c8:	785a      	ldrb	r2, [r3, #1]
    d3ca:	2a2a      	cmp	r2, #42	; 0x2a
    d3cc:	f040 8083 	bne.w	d4d6 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    d3d0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d3d4:	3302      	adds	r3, #2
		conv->prec_star = true;
    d3d6:	f042 0204 	orr.w	r2, r2, #4
    d3da:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d3de:	781a      	ldrb	r2, [r3, #0]
    d3e0:	2a6c      	cmp	r2, #108	; 0x6c
    d3e2:	f000 80a4 	beq.w	d52e <z_cbvprintf_impl+0x272>
    d3e6:	f200 8086 	bhi.w	d4f6 <z_cbvprintf_impl+0x23a>
    d3ea:	2a68      	cmp	r2, #104	; 0x68
    d3ec:	f000 808c 	beq.w	d508 <z_cbvprintf_impl+0x24c>
    d3f0:	2a6a      	cmp	r2, #106	; 0x6a
    d3f2:	f000 80a5 	beq.w	d540 <z_cbvprintf_impl+0x284>
    d3f6:	2a4c      	cmp	r2, #76	; 0x4c
    d3f8:	f000 80aa 	beq.w	d550 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    d3fc:	461a      	mov	r2, r3
    d3fe:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d402:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d404:	9204      	str	r2, [sp, #16]
    d406:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d40a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d40e:	f200 8117 	bhi.w	d640 <z_cbvprintf_impl+0x384>
    d412:	2b6d      	cmp	r3, #109	; 0x6d
    d414:	f200 80a9 	bhi.w	d56a <z_cbvprintf_impl+0x2ae>
    d418:	2b69      	cmp	r3, #105	; 0x69
    d41a:	f200 8111 	bhi.w	d640 <z_cbvprintf_impl+0x384>
    d41e:	2b57      	cmp	r3, #87	; 0x57
    d420:	f200 80be 	bhi.w	d5a0 <z_cbvprintf_impl+0x2e4>
    d424:	2b41      	cmp	r3, #65	; 0x41
    d426:	d003      	beq.n	d430 <z_cbvprintf_impl+0x174>
    d428:	3b45      	subs	r3, #69	; 0x45
    d42a:	2b02      	cmp	r3, #2
    d42c:	f200 8108 	bhi.w	d640 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    d430:	2204      	movs	r2, #4
    d432:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d436:	f362 0302 	bfi	r3, r2, #0, #3
    d43a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d43e:	2301      	movs	r3, #1
			break;
    d440:	e0ca      	b.n	d5d8 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    d442:	1cba      	adds	r2, r7, #2
    d444:	9204      	str	r2, [sp, #16]
    d446:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d44a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d44e:	07da      	lsls	r2, r3, #31
    d450:	f140 80fd 	bpl.w	d64e <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    d454:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d458:	f1b9 0f00 	cmp.w	r9, #0
    d45c:	da07      	bge.n	d46e <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    d45e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d462:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d466:	f042 0204 	orr.w	r2, r2, #4
    d46a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d46e:	075e      	lsls	r6, r3, #29
    d470:	f140 80f6 	bpl.w	d660 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    d474:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d478:	f1bb 0f00 	cmp.w	fp, #0
    d47c:	f280 80f5 	bge.w	d66a <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    d480:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d484:	f36f 0341 	bfc	r3, #1, #1
    d488:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d48c:	f04f 3bff 	mov.w	fp, #4294967295
    d490:	e0eb      	b.n	d66a <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    d492:	2a2d      	cmp	r2, #45	; 0x2d
    d494:	d00d      	beq.n	d4b2 <z_cbvprintf_impl+0x1f6>
    d496:	2a30      	cmp	r2, #48	; 0x30
    d498:	f47f af44 	bne.w	d324 <z_cbvprintf_impl+0x68>
    d49c:	2301      	movs	r3, #1
	} while (loop);
    d49e:	e733      	b.n	d308 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    d4a0:	f04f 0c01 	mov.w	ip, #1
    d4a4:	e730      	b.n	d308 <z_cbvprintf_impl+0x4c>
    d4a6:	f04f 0e01 	mov.w	lr, #1
    d4aa:	e72d      	b.n	d308 <z_cbvprintf_impl+0x4c>
    d4ac:	f04f 0801 	mov.w	r8, #1
    d4b0:	e72a      	b.n	d308 <z_cbvprintf_impl+0x4c>
    d4b2:	2001      	movs	r0, #1
    d4b4:	e728      	b.n	d308 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    d4b6:	a809      	add	r0, sp, #36	; 0x24
    d4b8:	f7ff fe9e 	bl	d1f8 <extract_decimal>
	if (sp != wp) {
    d4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4be:	42b3      	cmp	r3, r6
    d4c0:	f43f af74 	beq.w	d3ac <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    d4c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d4c8:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d4ca:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d4cc:	f360 0241 	bfi	r2, r0, #1, #1
    d4d0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d4d4:	e76a      	b.n	d3ac <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    d4d6:	a809      	add	r0, sp, #36	; 0x24
    d4d8:	f7ff fe8e 	bl	d1f8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d4dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d4e0:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d4e2:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d4e6:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d4ea:	f362 0341 	bfi	r3, r2, #1, #1
    d4ee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4f4:	e773      	b.n	d3de <z_cbvprintf_impl+0x122>
	switch (*sp) {
    d4f6:	2a74      	cmp	r2, #116	; 0x74
    d4f8:	d026      	beq.n	d548 <z_cbvprintf_impl+0x28c>
    d4fa:	2a7a      	cmp	r2, #122	; 0x7a
    d4fc:	f47f af7e 	bne.w	d3fc <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    d500:	2106      	movs	r1, #6
    d502:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d506:	e00c      	b.n	d522 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    d508:	785a      	ldrb	r2, [r3, #1]
    d50a:	2a68      	cmp	r2, #104	; 0x68
    d50c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d510:	d106      	bne.n	d520 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    d512:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d514:	f361 02c6 	bfi	r2, r1, #3, #4
    d518:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d51c:	3302      	adds	r3, #2
    d51e:	e76d      	b.n	d3fc <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    d520:	2102      	movs	r1, #2
    d522:	f361 02c6 	bfi	r2, r1, #3, #4
    d526:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d52a:	3301      	adds	r3, #1
    d52c:	e766      	b.n	d3fc <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    d52e:	785a      	ldrb	r2, [r3, #1]
    d530:	2a6c      	cmp	r2, #108	; 0x6c
    d532:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d536:	d101      	bne.n	d53c <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    d538:	2104      	movs	r1, #4
    d53a:	e7eb      	b.n	d514 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    d53c:	2103      	movs	r1, #3
    d53e:	e7f0      	b.n	d522 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    d540:	2105      	movs	r1, #5
    d542:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d546:	e7ec      	b.n	d522 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    d548:	2107      	movs	r1, #7
    d54a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d54e:	e7e8      	b.n	d522 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    d550:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d554:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d558:	f022 0202 	bic.w	r2, r2, #2
    d55c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d560:	f042 0202 	orr.w	r2, r2, #2
    d564:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d568:	e7df      	b.n	d52a <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    d56a:	3b6e      	subs	r3, #110	; 0x6e
    d56c:	b2d9      	uxtb	r1, r3
    d56e:	2301      	movs	r3, #1
    d570:	408b      	lsls	r3, r1
    d572:	f240 4182 	movw	r1, #1154	; 0x482
    d576:	420b      	tst	r3, r1
    d578:	d138      	bne.n	d5ec <z_cbvprintf_impl+0x330>
    d57a:	f013 0f24 	tst.w	r3, #36	; 0x24
    d57e:	d152      	bne.n	d626 <z_cbvprintf_impl+0x36a>
    d580:	07d8      	lsls	r0, r3, #31
    d582:	d55d      	bpl.n	d640 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    d584:	2103      	movs	r1, #3
    d586:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d58a:	f361 0302 	bfi	r3, r1, #0, #3
    d58e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d592:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d596:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    d59a:	424b      	negs	r3, r1
    d59c:	414b      	adcs	r3, r1
    d59e:	e01b      	b.n	d5d8 <z_cbvprintf_impl+0x31c>
    d5a0:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d5a2:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d5a6:	b2c9      	uxtb	r1, r1
    d5a8:	fa00 f101 	lsl.w	r1, r0, r1
    d5ac:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d5b0:	f47f af3e 	bne.w	d430 <z_cbvprintf_impl+0x174>
    d5b4:	f640 0601 	movw	r6, #2049	; 0x801
    d5b8:	4231      	tst	r1, r6
    d5ba:	d11d      	bne.n	d5f8 <z_cbvprintf_impl+0x33c>
    d5bc:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d5c0:	d03e      	beq.n	d640 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    d5c2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d5c6:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5ca:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d5ce:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d5d0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5d4:	d034      	beq.n	d640 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    d5d6:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d5d8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d5dc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    d5e0:	430b      	orrs	r3, r1
    d5e2:	f363 0241 	bfi	r2, r3, #1, #1
    d5e6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    d5ea:	e72e      	b.n	d44a <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    d5ec:	2102      	movs	r1, #2
    d5ee:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d5f2:	f361 0302 	bfi	r3, r1, #0, #3
    d5f6:	e7e8      	b.n	d5ca <z_cbvprintf_impl+0x30e>
    d5f8:	2002      	movs	r0, #2
    d5fa:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5fe:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    d602:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d606:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    d608:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    d60c:	bf02      	ittt	eq
    d60e:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    d612:	f041 0101 	orreq.w	r1, r1, #1
    d616:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    d61a:	2b63      	cmp	r3, #99	; 0x63
    d61c:	d1db      	bne.n	d5d6 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    d61e:	1e13      	subs	r3, r2, #0
    d620:	bf18      	it	ne
    d622:	2301      	movne	r3, #1
    d624:	e7d8      	b.n	d5d8 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    d626:	2103      	movs	r1, #3
    d628:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d62c:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    d630:	f361 0302 	bfi	r3, r1, #0, #3
    d634:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d638:	bf14      	ite	ne
    d63a:	2301      	movne	r3, #1
    d63c:	2300      	moveq	r3, #0
    d63e:	e7cb      	b.n	d5d8 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    d640:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d644:	f043 0301 	orr.w	r3, r3, #1
    d648:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    d64c:	e7c3      	b.n	d5d6 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    d64e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    d652:	2a00      	cmp	r2, #0
		int width = -1;
    d654:	bfac      	ite	ge
    d656:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    d65a:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    d65e:	e706      	b.n	d46e <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    d660:	0798      	lsls	r0, r3, #30
    d662:	f57f af13 	bpl.w	d48c <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    d666:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    d66a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    d66c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    d670:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    d674:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    d678:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    d67c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    d67e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    d682:	d133      	bne.n	d6ec <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    d684:	1ecb      	subs	r3, r1, #3
    d686:	2b04      	cmp	r3, #4
    d688:	d804      	bhi.n	d694 <z_cbvprintf_impl+0x3d8>
    d68a:	e8df f003 	tbb	[pc, r3]
    d68e:	4621      	.short	0x4621
    d690:	2146      	.short	0x2146
    d692:	21          	.byte	0x21
    d693:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    d694:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    d696:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    d698:	ea4f 72e3 	mov.w	r2, r3, asr #31
    d69c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d6a0:	d11c      	bne.n	d6dc <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    d6a2:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    d6a6:	17da      	asrs	r2, r3, #31
    d6a8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    d6ac:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    d6ae:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d6b2:	f013 0603 	ands.w	r6, r3, #3
    d6b6:	d050      	beq.n	d75a <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    d6b8:	463a      	mov	r2, r7
    d6ba:	4650      	mov	r0, sl
    d6bc:	9b04      	ldr	r3, [sp, #16]
    d6be:	9903      	ldr	r1, [sp, #12]
    d6c0:	f01c ffdd 	bl	2a67e <outs>
    d6c4:	2800      	cmp	r0, #0
    d6c6:	f2c0 814f 	blt.w	d968 <z_cbvprintf_impl+0x6ac>
    d6ca:	4405      	add	r5, r0
			continue;
    d6cc:	9f04      	ldr	r7, [sp, #16]
    d6ce:	e5fd      	b.n	d2cc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    d6d0:	f854 3b04 	ldr.w	r3, [r4], #4
    d6d4:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    d6d6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    d6da:	e7e8      	b.n	d6ae <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    d6dc:	2902      	cmp	r1, #2
    d6de:	d1e5      	bne.n	d6ac <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    d6e0:	b21a      	sxth	r2, r3
    d6e2:	f343 33c0 	sbfx	r3, r3, #15, #1
    d6e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d6ea:	e7df      	b.n	d6ac <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    d6ec:	2b02      	cmp	r3, #2
    d6ee:	d124      	bne.n	d73a <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    d6f0:	1ecb      	subs	r3, r1, #3
    d6f2:	2b04      	cmp	r3, #4
    d6f4:	d804      	bhi.n	d700 <z_cbvprintf_impl+0x444>
    d6f6:	e8df f003 	tbb	[pc, r3]
    d6fa:	1018      	.short	0x1018
    d6fc:	1810      	.short	0x1810
    d6fe:	18          	.byte	0x18
    d6ff:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    d700:	2901      	cmp	r1, #1
    d702:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    d706:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    d70a:	d014      	beq.n	d736 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    d70c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    d70e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    d712:	d1cc      	bne.n	d6ae <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    d714:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    d716:	9310      	str	r3, [sp, #64]	; 0x40
    d718:	e7c9      	b.n	d6ae <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    d71a:	3407      	adds	r4, #7
    d71c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    d720:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    d724:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d728:	e7c1      	b.n	d6ae <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    d72a:	f854 3b04 	ldr.w	r3, [r4], #4
    d72e:	9310      	str	r3, [sp, #64]	; 0x40
    d730:	2300      	movs	r3, #0
    d732:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    d734:	e7bb      	b.n	d6ae <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    d736:	b2db      	uxtb	r3, r3
    d738:	e7cd      	b.n	d6d6 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    d73a:	2b04      	cmp	r3, #4
    d73c:	d108      	bne.n	d750 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    d73e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    d740:	f024 0407 	bic.w	r4, r4, #7
    d744:	e9d4 2300 	ldrd	r2, r3, [r4]
    d748:	3408      	adds	r4, #8
    d74a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d74e:	e7ae      	b.n	d6ae <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    d750:	2b03      	cmp	r3, #3
    d752:	d1ac      	bne.n	d6ae <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    d754:	f854 3b04 	ldr.w	r3, [r4], #4
    d758:	e7dd      	b.n	d716 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    d75a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d75e:	2878      	cmp	r0, #120	; 0x78
    d760:	d8b4      	bhi.n	d6cc <z_cbvprintf_impl+0x410>
    d762:	2862      	cmp	r0, #98	; 0x62
    d764:	d81c      	bhi.n	d7a0 <z_cbvprintf_impl+0x4e4>
    d766:	2825      	cmp	r0, #37	; 0x25
    d768:	f43f adb8 	beq.w	d2dc <z_cbvprintf_impl+0x20>
    d76c:	2858      	cmp	r0, #88	; 0x58
    d76e:	d1ad      	bne.n	d6cc <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    d770:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d774:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d778:	9300      	str	r3, [sp, #0]
    d77a:	aa12      	add	r2, sp, #72	; 0x48
    d77c:	ab0a      	add	r3, sp, #40	; 0x28
    d77e:	f7ff fd51 	bl	d224 <encode_uint>
			if (precision >= 0) {
    d782:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    d786:	4607      	mov	r7, r0
			if (precision >= 0) {
    d788:	f280 8097 	bge.w	d8ba <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    d78c:	2f00      	cmp	r7, #0
    d78e:	d09d      	beq.n	d6cc <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d790:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d794:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    d798:	2e00      	cmp	r6, #0
    d79a:	d04e      	beq.n	d83a <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    d79c:	3001      	adds	r0, #1
    d79e:	e04c      	b.n	d83a <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    d7a0:	3863      	subs	r0, #99	; 0x63
    d7a2:	2815      	cmp	r0, #21
    d7a4:	d892      	bhi.n	d6cc <z_cbvprintf_impl+0x410>
    d7a6:	a201      	add	r2, pc, #4	; (adr r2, d7ac <z_cbvprintf_impl+0x4f0>)
    d7a8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    d7ac:	0000d82b 	.word	0x0000d82b
    d7b0:	0000d891 	.word	0x0000d891
    d7b4:	0000d6cd 	.word	0x0000d6cd
    d7b8:	0000d6cd 	.word	0x0000d6cd
    d7bc:	0000d6cd 	.word	0x0000d6cd
    d7c0:	0000d6cd 	.word	0x0000d6cd
    d7c4:	0000d891 	.word	0x0000d891
    d7c8:	0000d6cd 	.word	0x0000d6cd
    d7cc:	0000d6cd 	.word	0x0000d6cd
    d7d0:	0000d6cd 	.word	0x0000d6cd
    d7d4:	0000d6cd 	.word	0x0000d6cd
    d7d8:	0000d919 	.word	0x0000d919
    d7dc:	0000d8b5 	.word	0x0000d8b5
    d7e0:	0000d8db 	.word	0x0000d8db
    d7e4:	0000d6cd 	.word	0x0000d6cd
    d7e8:	0000d6cd 	.word	0x0000d6cd
    d7ec:	0000d805 	.word	0x0000d805
    d7f0:	0000d6cd 	.word	0x0000d6cd
    d7f4:	0000d8b5 	.word	0x0000d8b5
    d7f8:	0000d6cd 	.word	0x0000d6cd
    d7fc:	0000d6cd 	.word	0x0000d6cd
    d800:	0000d8b5 	.word	0x0000d8b5
			if (precision >= 0) {
    d804:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    d808:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    d80a:	db0a      	blt.n	d822 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    d80c:	4659      	mov	r1, fp
    d80e:	4638      	mov	r0, r7
    d810:	f023 f85a 	bl	308c8 <strnlen>
			bpe = bps + len;
    d814:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    d818:	2f00      	cmp	r7, #0
    d81a:	f43f af57 	beq.w	d6cc <z_cbvprintf_impl+0x410>
		char sign = 0;
    d81e:	2600      	movs	r6, #0
    d820:	e00b      	b.n	d83a <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    d822:	4638      	mov	r0, r7
    d824:	f7fb fdaf 	bl	9386 <strlen>
    d828:	e7f4      	b.n	d814 <z_cbvprintf_impl+0x558>
		char sign = 0;
    d82a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    d82c:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d82e:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    d830:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d834:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    d838:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    d83a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d83e:	f013 0210 	ands.w	r2, r3, #16
    d842:	9205      	str	r2, [sp, #20]
    d844:	f000 8083 	beq.w	d94e <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    d848:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    d84a:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    d84c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    d850:	bf48      	it	mi
    d852:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    d854:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    d856:	bf48      	it	mi
    d858:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    d85a:	f1b9 0f00 	cmp.w	r9, #0
    d85e:	f340 8090 	ble.w	d982 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    d862:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    d866:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    d86a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    d86e:	0750      	lsls	r0, r2, #29
    d870:	9306      	str	r3, [sp, #24]
    d872:	f100 8086 	bmi.w	d982 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    d876:	0651      	lsls	r1, r2, #25
    d878:	d579      	bpl.n	d96e <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    d87a:	b13e      	cbz	r6, d88c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    d87c:	4630      	mov	r0, r6
    d87e:	9903      	ldr	r1, [sp, #12]
    d880:	47d0      	blx	sl
    d882:	2800      	cmp	r0, #0
    d884:	db70      	blt.n	d968 <z_cbvprintf_impl+0x6ac>
    d886:	9b06      	ldr	r3, [sp, #24]
    d888:	3501      	adds	r5, #1
    d88a:	461e      	mov	r6, r3
					pad = '0';
    d88c:	2230      	movs	r2, #48	; 0x30
    d88e:	e06f      	b.n	d970 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    d890:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    d892:	bf5a      	itte	pl
    d894:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    d898:	015e      	lslpl	r6, r3, #5
				sign = '+';
    d89a:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    d89c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    d8a0:	2b00      	cmp	r3, #0
    d8a2:	f6bf af65 	bge.w	d770 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    d8a6:	4252      	negs	r2, r2
    d8a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    d8ac:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    d8ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d8b2:	e75d      	b.n	d770 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    d8b4:	2600      	movs	r6, #0
    d8b6:	e75b      	b.n	d770 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    d8b8:	2600      	movs	r6, #0
				conv->flag_zero = false;
    d8ba:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    d8be:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d8c2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    d8c4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    d8c8:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    d8ca:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    d8ce:	f67f af5d 	bls.w	d78c <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    d8d2:	ebab 0303 	sub.w	r3, fp, r3
    d8d6:	9313      	str	r3, [sp, #76]	; 0x4c
    d8d8:	e758      	b.n	d78c <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    d8da:	9810      	ldr	r0, [sp, #64]	; 0x40
    d8dc:	b380      	cbz	r0, d940 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d8de:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d8e2:	ab0a      	add	r3, sp, #40	; 0x28
    d8e4:	2100      	movs	r1, #0
    d8e6:	f8cd 8000 	str.w	r8, [sp]
    d8ea:	aa12      	add	r2, sp, #72	; 0x48
    d8ec:	f7ff fc9a 	bl	d224 <encode_uint>
				conv->altform_0c = true;
    d8f0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d8f4:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    d8f8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d8fc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    d900:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d904:	4607      	mov	r7, r0
				conv->altform_0c = true;
    d906:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d90a:	dad5      	bge.n	d8b8 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    d90c:	2800      	cmp	r0, #0
    d90e:	f43f aedd 	beq.w	d6cc <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d912:	eba8 0000 	sub.w	r0, r8, r0
    d916:	e782      	b.n	d81e <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    d918:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    d91a:	2907      	cmp	r1, #7
    d91c:	f63f aed6 	bhi.w	d6cc <z_cbvprintf_impl+0x410>
    d920:	e8df f001 	tbb	[pc, r1]
    d924:	0c06040c 	.word	0x0c06040c
    d928:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    d92c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    d92e:	e6cd      	b.n	d6cc <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    d930:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    d932:	e6cb      	b.n	d6cc <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    d934:	17ea      	asrs	r2, r5, #31
    d936:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    d93a:	e6c7      	b.n	d6cc <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    d93c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    d93e:	e6c5      	b.n	d6cc <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    d940:	f8df 80bc 	ldr.w	r8, [pc, #188]	; da00 <z_cbvprintf_impl+0x744>
		char sign = 0;
    d944:	4606      	mov	r6, r0
    d946:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    d94a:	2005      	movs	r0, #5
    d94c:	e775      	b.n	d83a <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    d94e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    d950:	bf48      	it	mi
    d952:	3001      	addmi	r0, #1
    d954:	e779      	b.n	d84a <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    d956:	4610      	mov	r0, r2
    d958:	9307      	str	r3, [sp, #28]
    d95a:	9206      	str	r2, [sp, #24]
    d95c:	9903      	ldr	r1, [sp, #12]
    d95e:	47d0      	blx	sl
    d960:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d964:	2800      	cmp	r0, #0
    d966:	da04      	bge.n	d972 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    d968:	b017      	add	sp, #92	; 0x5c
    d96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    d96e:	2220      	movs	r2, #32
					pad = '0';
    d970:	464b      	mov	r3, r9
				while (width-- > 0) {
    d972:	4619      	mov	r1, r3
    d974:	2900      	cmp	r1, #0
    d976:	f103 33ff 	add.w	r3, r3, #4294967295
    d97a:	dcec      	bgt.n	d956 <z_cbvprintf_impl+0x69a>
    d97c:	444d      	add	r5, r9
    d97e:	4699      	mov	r9, r3
    d980:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    d982:	b12e      	cbz	r6, d990 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    d984:	4630      	mov	r0, r6
    d986:	9903      	ldr	r1, [sp, #12]
    d988:	47d0      	blx	sl
    d98a:	2800      	cmp	r0, #0
    d98c:	dbec      	blt.n	d968 <z_cbvprintf_impl+0x6ac>
    d98e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    d990:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d994:	06da      	lsls	r2, r3, #27
    d996:	d401      	bmi.n	d99c <z_cbvprintf_impl+0x6e0>
    d998:	071b      	lsls	r3, r3, #28
    d99a:	d505      	bpl.n	d9a8 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    d99c:	2030      	movs	r0, #48	; 0x30
    d99e:	9903      	ldr	r1, [sp, #12]
    d9a0:	47d0      	blx	sl
    d9a2:	2800      	cmp	r0, #0
    d9a4:	dbe0      	blt.n	d968 <z_cbvprintf_impl+0x6ac>
    d9a6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    d9a8:	9b05      	ldr	r3, [sp, #20]
    d9aa:	b133      	cbz	r3, d9ba <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    d9ac:	9903      	ldr	r1, [sp, #12]
    d9ae:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d9b2:	47d0      	blx	sl
    d9b4:	2800      	cmp	r0, #0
    d9b6:	dbd7      	blt.n	d968 <z_cbvprintf_impl+0x6ac>
    d9b8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d9ba:	44ab      	add	fp, r5
    d9bc:	e005      	b.n	d9ca <z_cbvprintf_impl+0x70e>
				OUTC('0');
    d9be:	2030      	movs	r0, #48	; 0x30
    d9c0:	9903      	ldr	r1, [sp, #12]
    d9c2:	47d0      	blx	sl
    d9c4:	2800      	cmp	r0, #0
    d9c6:	dbcf      	blt.n	d968 <z_cbvprintf_impl+0x6ac>
    d9c8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d9ca:	ebab 0305 	sub.w	r3, fp, r5
    d9ce:	2b00      	cmp	r3, #0
    d9d0:	dcf5      	bgt.n	d9be <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    d9d2:	4643      	mov	r3, r8
    d9d4:	463a      	mov	r2, r7
    d9d6:	4650      	mov	r0, sl
    d9d8:	9903      	ldr	r1, [sp, #12]
    d9da:	f01c fe50 	bl	2a67e <outs>
    d9de:	2800      	cmp	r0, #0
    d9e0:	dbc2      	blt.n	d968 <z_cbvprintf_impl+0x6ac>
    d9e2:	4405      	add	r5, r0
		while (width > 0) {
    d9e4:	44a9      	add	r9, r5
    d9e6:	eba9 0305 	sub.w	r3, r9, r5
    d9ea:	2b00      	cmp	r3, #0
    d9ec:	f77f ae6e 	ble.w	d6cc <z_cbvprintf_impl+0x410>
			OUTC(' ');
    d9f0:	2020      	movs	r0, #32
    d9f2:	9903      	ldr	r1, [sp, #12]
    d9f4:	47d0      	blx	sl
    d9f6:	2800      	cmp	r0, #0
    d9f8:	dbb6      	blt.n	d968 <z_cbvprintf_impl+0x6ac>
    d9fa:	3501      	adds	r5, #1
			--width;
    d9fc:	e7f3      	b.n	d9e6 <z_cbvprintf_impl+0x72a>
    d9fe:	bf00      	nop
    da00:	000334ac 	.word	0x000334ac

0000da04 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    da04:	b538      	push	{r3, r4, r5, lr}
    da06:	460d      	mov	r5, r1
    da08:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    da0a:	2220      	movs	r2, #32
    da0c:	2100      	movs	r1, #0
    da0e:	f022 fde8 	bl	305e2 <memset>
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    da12:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    da14:	68eb      	ldr	r3, [r5, #12]
    da16:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    da18:	68ab      	ldr	r3, [r5, #8]
    da1a:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    da1c:	682b      	ldr	r3, [r5, #0]
    da1e:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    da20:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    da22:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    da24:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    da26:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    da28:	b123      	cbz	r3, da34 <mpsc_pbuf_init+0x30>
    da2a:	1e59      	subs	r1, r3, #1
    da2c:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    da2e:	bf08      	it	eq
    da30:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    da34:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    da36:	2201      	movs	r2, #1
    da38:	2100      	movs	r1, #0
    da3a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    da3e:	f022 fbd4 	bl	301ea <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    da42:	b148      	cbz	r0, da58 <mpsc_pbuf_init+0x54>
    da44:	4905      	ldr	r1, [pc, #20]	; (da5c <mpsc_pbuf_init+0x58>)
    da46:	4806      	ldr	r0, [pc, #24]	; (da60 <mpsc_pbuf_init+0x5c>)
    da48:	232e      	movs	r3, #46	; 0x2e
    da4a:	4a06      	ldr	r2, [pc, #24]	; (da64 <mpsc_pbuf_init+0x60>)
    da4c:	f01c fe35 	bl	2a6ba <assert_print>
    da50:	212e      	movs	r1, #46	; 0x2e
    da52:	4804      	ldr	r0, [pc, #16]	; (da64 <mpsc_pbuf_init+0x60>)
    da54:	f01c fe2a 	bl	2a6ac <assert_post_action>
	ARG_UNUSED(err);
}
    da58:	bd38      	pop	{r3, r4, r5, pc}
    da5a:	bf00      	nop
    da5c:	000334d3 	.word	0x000334d3
    da60:	00032659 	.word	0x00032659
    da64:	000334ad 	.word	0x000334ad

0000da68 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da6c:	b087      	sub	sp, #28
    da6e:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    da72:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    da74:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    da76:	3b01      	subs	r3, #1
    da78:	428b      	cmp	r3, r1
{
    da7a:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
    da7c:	f0c0 80a0 	bcc.w	dbc0 <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
    da80:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
    da82:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    da84:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    da88:	f04f 0320 	mov.w	r3, #32
    da8c:	f3ef 8b11 	mrs	fp, BASEPRI
    da90:	f383 8812 	msr	BASEPRI_MAX, r3
    da94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    da98:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
    da9a:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    da9c:	f017 fadc 	bl	25058 <z_spin_lock_valid>
    daa0:	b958      	cbnz	r0, daba <mpsc_pbuf_alloc+0x52>
    daa2:	2394      	movs	r3, #148	; 0x94
    daa4:	4a49      	ldr	r2, [pc, #292]	; (dbcc <mpsc_pbuf_alloc+0x164>)
    daa6:	494a      	ldr	r1, [pc, #296]	; (dbd0 <mpsc_pbuf_alloc+0x168>)
    daa8:	484a      	ldr	r0, [pc, #296]	; (dbd4 <mpsc_pbuf_alloc+0x16c>)
    daaa:	f01c fe06 	bl	2a6ba <assert_print>
    daae:	4629      	mov	r1, r5
    dab0:	4849      	ldr	r0, [pc, #292]	; (dbd8 <mpsc_pbuf_alloc+0x170>)
    dab2:	f01c fe02 	bl	2a6ba <assert_print>
    dab6:	2194      	movs	r1, #148	; 0x94
    dab8:	e050      	b.n	db5c <mpsc_pbuf_alloc+0xf4>
	z_spin_lock_set_owner(l);
    daba:	4628      	mov	r0, r5
    dabc:	f017 fae8 	bl	25090 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    dac0:	a905      	add	r1, sp, #20
    dac2:	4620      	mov	r0, r4
    dac4:	f01c fe06 	bl	2a6d4 <free_space>

		if (free_wlen >= wlen) {
    dac8:	9905      	ldr	r1, [sp, #20]
		wrap = free_space(buffer, &free_wlen);
    daca:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
    dacc:	42b9      	cmp	r1, r7
    dace:	d328      	bcc.n	db22 <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    dad0:	6822      	ldr	r2, [r4, #0]
			item =
    dad2:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    dad4:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    dad6:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    dada:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    dade:	f021 0103 	bic.w	r1, r1, #3
    dae2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    dae6:	6821      	ldr	r1, [r4, #0]
    dae8:	463a      	mov	r2, r7
    daea:	f01c fe15 	bl	2a718 <idx_inc>
		cont = false;
    daee:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    daf2:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    daf4:	4628      	mov	r0, r5
    daf6:	f017 fabd 	bl	25074 <z_spin_unlock_valid>
    dafa:	b320      	cbz	r0, db46 <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
    dafc:	f389 8811 	msr	BASEPRI, r9
    db00:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    db04:	f1b8 0f00 	cmp.w	r8, #0
    db08:	d05c      	beq.n	dbc4 <mpsc_pbuf_alloc+0x15c>
    db0a:	b146      	cbz	r6, db1e <mpsc_pbuf_alloc+0xb6>
    db0c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    db10:	2b00      	cmp	r3, #0
    db12:	d0b9      	beq.n	da88 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    db14:	69a3      	ldr	r3, [r4, #24]
    db16:	b113      	cbz	r3, db1e <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
    db18:	4631      	mov	r1, r6
    db1a:	4620      	mov	r0, r4
    db1c:	4798      	blx	r3
{
    db1e:	2600      	movs	r6, #0
    db20:	e7b2      	b.n	da88 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
    db22:	b118      	cbz	r0, db2c <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
    db24:	4620      	mov	r0, r4
    db26:	f01c fe05 	bl	2a734 <add_skip_item>
			cont = true;
    db2a:	e7e3      	b.n	daf4 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    db2c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    db30:	4313      	orrs	r3, r2
    db32:	d036      	beq.n	dba2 <mpsc_pbuf_alloc+0x13a>
    db34:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
    db36:	f022 fb07 	bl	30148 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    db3a:	9903      	ldr	r1, [sp, #12]
    db3c:	bb88      	cbnz	r0, dba2 <mpsc_pbuf_alloc+0x13a>
    db3e:	4628      	mov	r0, r5
    db40:	f017 fa98 	bl	25074 <z_spin_unlock_valid>
    db44:	b968      	cbnz	r0, db62 <mpsc_pbuf_alloc+0xfa>
    db46:	23c2      	movs	r3, #194	; 0xc2
    db48:	4a20      	ldr	r2, [pc, #128]	; (dbcc <mpsc_pbuf_alloc+0x164>)
    db4a:	4924      	ldr	r1, [pc, #144]	; (dbdc <mpsc_pbuf_alloc+0x174>)
    db4c:	4821      	ldr	r0, [pc, #132]	; (dbd4 <mpsc_pbuf_alloc+0x16c>)
    db4e:	f01c fdb4 	bl	2a6ba <assert_print>
    db52:	4629      	mov	r1, r5
    db54:	4822      	ldr	r0, [pc, #136]	; (dbe0 <mpsc_pbuf_alloc+0x178>)
    db56:	f01c fdb0 	bl	2a6ba <assert_print>
    db5a:	21c2      	movs	r1, #194	; 0xc2
    db5c:	481b      	ldr	r0, [pc, #108]	; (dbcc <mpsc_pbuf_alloc+0x164>)
    db5e:	f01c fda5 	bl	2a6ac <assert_post_action>
    db62:	f38b 8811 	msr	BASEPRI, fp
    db66:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    db6a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    db6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    db72:	f017 fd6d 	bl	25650 <z_impl_k_sem_take>
    db76:	4680      	mov	r8, r0
	__asm__ volatile(
    db78:	f04f 0320 	mov.w	r3, #32
    db7c:	f3ef 8911 	mrs	r9, BASEPRI
    db80:	f383 8812 	msr	BASEPRI_MAX, r3
    db84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    db88:	4628      	mov	r0, r5
    db8a:	f017 fa65 	bl	25058 <z_spin_lock_valid>
    db8e:	2800      	cmp	r0, #0
    db90:	d087      	beq.n	daa2 <mpsc_pbuf_alloc+0x3a>
			if (err == 0) {
    db92:	fab8 f888 	clz	r8, r8
	z_spin_lock_set_owner(l);
    db96:	4628      	mov	r0, r5
    db98:	f017 fa7a 	bl	25090 <z_spin_lock_set_owner>
    db9c:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dba0:	e7a8      	b.n	daf4 <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    dba2:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    dba4:	4620      	mov	r0, r4
    dba6:	f10d 0313 	add.w	r3, sp, #19
    dbaa:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dbae:	f01c fde4 	bl	2a77a <drop_item_locked>
			cont = dropped_item != NULL;
    dbb2:	f1b0 0800 	subs.w	r8, r0, #0
    dbb6:	4606      	mov	r6, r0
    dbb8:	bf18      	it	ne
    dbba:	f04f 0801 	movne.w	r8, #1
    dbbe:	e799      	b.n	daf4 <mpsc_pbuf_alloc+0x8c>
		return NULL;
    dbc0:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    dbc4:	4650      	mov	r0, sl
    dbc6:	b007      	add	sp, #28
    dbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbcc:	000333ee 	.word	0x000333ee
    dbd0:	00033447 	.word	0x00033447
    dbd4:	00032659 	.word	0x00032659
    dbd8:	0003345c 	.word	0x0003345c
    dbdc:	0003341b 	.word	0x0003341b
    dbe0:	00033432 	.word	0x00033432

0000dbe4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    dbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbe8:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    dbea:	69c3      	ldr	r3, [r0, #28]
    dbec:	4608      	mov	r0, r1
{
    dbee:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    dbf0:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    dbf2:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    dbf6:	4607      	mov	r7, r0
    dbf8:	f04f 0320 	mov.w	r3, #32
    dbfc:	f3ef 8811 	mrs	r8, BASEPRI
    dc00:	f383 8812 	msr	BASEPRI_MAX, r3
    dc04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dc08:	4628      	mov	r0, r5
    dc0a:	f017 fa25 	bl	25058 <z_spin_lock_valid>
    dc0e:	b968      	cbnz	r0, dc2c <mpsc_pbuf_commit+0x48>
    dc10:	2394      	movs	r3, #148	; 0x94
    dc12:	4a19      	ldr	r2, [pc, #100]	; (dc78 <mpsc_pbuf_commit+0x94>)
    dc14:	4919      	ldr	r1, [pc, #100]	; (dc7c <mpsc_pbuf_commit+0x98>)
    dc16:	481a      	ldr	r0, [pc, #104]	; (dc80 <mpsc_pbuf_commit+0x9c>)
    dc18:	f01c fd4f 	bl	2a6ba <assert_print>
    dc1c:	4629      	mov	r1, r5
    dc1e:	4819      	ldr	r0, [pc, #100]	; (dc84 <mpsc_pbuf_commit+0xa0>)
    dc20:	f01c fd4b 	bl	2a6ba <assert_print>
    dc24:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dc26:	4814      	ldr	r0, [pc, #80]	; (dc78 <mpsc_pbuf_commit+0x94>)
    dc28:	f01c fd40 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
    dc2c:	4628      	mov	r0, r5
    dc2e:	f017 fa2f 	bl	25090 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    dc32:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    dc34:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    dc36:	f043 0301 	orr.w	r3, r3, #1
    dc3a:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    dc3c:	6861      	ldr	r1, [r4, #4]
    dc3e:	4620      	mov	r0, r4
    dc40:	f01c fd6a 	bl	2a718 <idx_inc>
    dc44:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    dc46:	4620      	mov	r0, r4
    dc48:	f01c fd8a 	bl	2a760 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dc4c:	4628      	mov	r0, r5
    dc4e:	f017 fa11 	bl	25074 <z_spin_unlock_valid>
    dc52:	b958      	cbnz	r0, dc6c <mpsc_pbuf_commit+0x88>
    dc54:	23c2      	movs	r3, #194	; 0xc2
    dc56:	4a08      	ldr	r2, [pc, #32]	; (dc78 <mpsc_pbuf_commit+0x94>)
    dc58:	490b      	ldr	r1, [pc, #44]	; (dc88 <mpsc_pbuf_commit+0xa4>)
    dc5a:	4809      	ldr	r0, [pc, #36]	; (dc80 <mpsc_pbuf_commit+0x9c>)
    dc5c:	f01c fd2d 	bl	2a6ba <assert_print>
    dc60:	4629      	mov	r1, r5
    dc62:	480a      	ldr	r0, [pc, #40]	; (dc8c <mpsc_pbuf_commit+0xa8>)
    dc64:	f01c fd29 	bl	2a6ba <assert_print>
    dc68:	21c2      	movs	r1, #194	; 0xc2
    dc6a:	e7dc      	b.n	dc26 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    dc6c:	f388 8811 	msr	BASEPRI, r8
    dc70:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    dc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc78:	000333ee 	.word	0x000333ee
    dc7c:	00033447 	.word	0x00033447
    dc80:	00032659 	.word	0x00032659
    dc84:	0003345c 	.word	0x0003345c
    dc88:	0003341b 	.word	0x0003341b
    dc8c:	00033432 	.word	0x00033432

0000dc90 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    dc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc94:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    dc96:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    dc9a:	f04f 0320 	mov.w	r3, #32
    dc9e:	f3ef 8811 	mrs	r8, BASEPRI
    dca2:	f383 8812 	msr	BASEPRI_MAX, r3
    dca6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dcaa:	4638      	mov	r0, r7
    dcac:	f017 f9d4 	bl	25058 <z_spin_lock_valid>
    dcb0:	4605      	mov	r5, r0
    dcb2:	b968      	cbnz	r0, dcd0 <mpsc_pbuf_claim+0x40>
    dcb4:	2394      	movs	r3, #148	; 0x94
    dcb6:	4a33      	ldr	r2, [pc, #204]	; (dd84 <mpsc_pbuf_claim+0xf4>)
    dcb8:	4933      	ldr	r1, [pc, #204]	; (dd88 <mpsc_pbuf_claim+0xf8>)
    dcba:	4834      	ldr	r0, [pc, #208]	; (dd8c <mpsc_pbuf_claim+0xfc>)
    dcbc:	f01c fcfd 	bl	2a6ba <assert_print>
    dcc0:	4639      	mov	r1, r7
    dcc2:	4833      	ldr	r0, [pc, #204]	; (dd90 <mpsc_pbuf_claim+0x100>)
    dcc4:	f01c fcf9 	bl	2a6ba <assert_print>
    dcc8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dcca:	482e      	ldr	r0, [pc, #184]	; (dd84 <mpsc_pbuf_claim+0xf4>)
    dccc:	f01c fcee 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
    dcd0:	4638      	mov	r0, r7
    dcd2:	f017 f9dd 	bl	25090 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    dcd6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    dcda:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    dcdc:	bf88      	it	hi
    dcde:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    dce0:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    dce2:	2b00      	cmp	r3, #0
    dce4:	d03f      	beq.n	dd66 <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
    dce6:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    dce8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    dcec:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    dcf0:	f013 0003 	ands.w	r0, r3, #3
    dcf4:	d03a      	beq.n	dd6c <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
    dcf6:	2802      	cmp	r0, #2
    dcf8:	d103      	bne.n	dd02 <mpsc_pbuf_claim+0x72>
		return item->skip.len;
    dcfa:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    dcfe:	08b6      	lsrs	r6, r6, #2
    dd00:	d105      	bne.n	dd0e <mpsc_pbuf_claim+0x7e>
    dd02:	07d8      	lsls	r0, r3, #31
    dd04:	d41f      	bmi.n	dd46 <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    dd06:	4648      	mov	r0, r9
    dd08:	69e3      	ldr	r3, [r4, #28]
    dd0a:	4798      	blx	r3
    dd0c:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    dd0e:	68a1      	ldr	r1, [r4, #8]
    dd10:	4632      	mov	r2, r6
    dd12:	4620      	mov	r0, r4
    dd14:	f01c fd00 	bl	2a718 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    dd18:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    dd1a:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    dd1c:	4632      	mov	r2, r6
    dd1e:	4620      	mov	r0, r4
    dd20:	f01c fcfa 	bl	2a718 <idx_inc>
				buffer->rd_idx =
    dd24:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd26:	4638      	mov	r0, r7
    dd28:	f017 f9a4 	bl	25074 <z_spin_unlock_valid>
    dd2c:	bb00      	cbnz	r0, dd70 <mpsc_pbuf_claim+0xe0>
    dd2e:	23c2      	movs	r3, #194	; 0xc2
    dd30:	4a14      	ldr	r2, [pc, #80]	; (dd84 <mpsc_pbuf_claim+0xf4>)
    dd32:	4918      	ldr	r1, [pc, #96]	; (dd94 <mpsc_pbuf_claim+0x104>)
    dd34:	4815      	ldr	r0, [pc, #84]	; (dd8c <mpsc_pbuf_claim+0xfc>)
    dd36:	f01c fcc0 	bl	2a6ba <assert_print>
    dd3a:	4639      	mov	r1, r7
    dd3c:	4816      	ldr	r0, [pc, #88]	; (dd98 <mpsc_pbuf_claim+0x108>)
    dd3e:	f01c fcbc 	bl	2a6ba <assert_print>
    dd42:	21c2      	movs	r1, #194	; 0xc2
    dd44:	e7c1      	b.n	dcca <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    dd46:	f043 0302 	orr.w	r3, r3, #2
    dd4a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    dd4e:	69e3      	ldr	r3, [r4, #28]
    dd50:	4648      	mov	r0, r9
    dd52:	68a5      	ldr	r5, [r4, #8]
    dd54:	4798      	blx	r3
    dd56:	4629      	mov	r1, r5
    dd58:	4602      	mov	r2, r0
    dd5a:	4620      	mov	r0, r4
    dd5c:	f01c fcdc 	bl	2a718 <idx_inc>
		cont = false;
    dd60:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    dd62:	60a0      	str	r0, [r4, #8]
    dd64:	e7df      	b.n	dd26 <mpsc_pbuf_claim+0x96>
		cont = false;
    dd66:	461d      	mov	r5, r3
			item = NULL;
    dd68:	46a9      	mov	r9, r5
    dd6a:	e7dc      	b.n	dd26 <mpsc_pbuf_claim+0x96>
		cont = false;
    dd6c:	4605      	mov	r5, r0
    dd6e:	e7fb      	b.n	dd68 <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
    dd70:	f388 8811 	msr	BASEPRI, r8
    dd74:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    dd78:	2d00      	cmp	r5, #0
    dd7a:	d18e      	bne.n	dc9a <mpsc_pbuf_claim+0xa>

	return item;
}
    dd7c:	4648      	mov	r0, r9
    dd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd82:	bf00      	nop
    dd84:	000333ee 	.word	0x000333ee
    dd88:	00033447 	.word	0x00033447
    dd8c:	00032659 	.word	0x00032659
    dd90:	0003345c 	.word	0x0003345c
    dd94:	0003341b 	.word	0x0003341b
    dd98:	00033432 	.word	0x00033432

0000dd9c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    dd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dda0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    dda2:	69c3      	ldr	r3, [r0, #28]
    dda4:	4608      	mov	r0, r1
{
    dda6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    dda8:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    ddaa:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    ddae:	4607      	mov	r7, r0
	__asm__ volatile(
    ddb0:	f04f 0320 	mov.w	r3, #32
    ddb4:	f3ef 8811 	mrs	r8, BASEPRI
    ddb8:	f383 8812 	msr	BASEPRI_MAX, r3
    ddbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ddc0:	4630      	mov	r0, r6
    ddc2:	f017 f949 	bl	25058 <z_spin_lock_valid>
    ddc6:	b968      	cbnz	r0, dde4 <mpsc_pbuf_free+0x48>
    ddc8:	2394      	movs	r3, #148	; 0x94
    ddca:	4a23      	ldr	r2, [pc, #140]	; (de58 <mpsc_pbuf_free+0xbc>)
    ddcc:	4923      	ldr	r1, [pc, #140]	; (de5c <mpsc_pbuf_free+0xc0>)
    ddce:	4824      	ldr	r0, [pc, #144]	; (de60 <mpsc_pbuf_free+0xc4>)
    ddd0:	f01c fc73 	bl	2a6ba <assert_print>
    ddd4:	4631      	mov	r1, r6
    ddd6:	4823      	ldr	r0, [pc, #140]	; (de64 <mpsc_pbuf_free+0xc8>)
    ddd8:	f01c fc6f 	bl	2a6ba <assert_print>
    dddc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ddde:	481e      	ldr	r0, [pc, #120]	; (de58 <mpsc_pbuf_free+0xbc>)
    dde0:	f01c fc64 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
    dde4:	4630      	mov	r0, r6
    dde6:	f017 f953 	bl	25090 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    ddea:	782b      	ldrb	r3, [r5, #0]
    ddec:	f36f 0300 	bfc	r3, #0, #1
    ddf0:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ddf2:	6923      	ldr	r3, [r4, #16]
    ddf4:	079b      	lsls	r3, r3, #30
    ddf6:	d505      	bpl.n	de04 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    ddf8:	68e2      	ldr	r2, [r4, #12]
    ddfa:	6a23      	ldr	r3, [r4, #32]
    ddfc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    de00:	429d      	cmp	r5, r3
    de02:	d119      	bne.n	de38 <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
    de04:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    de06:	463a      	mov	r2, r7
		witem->hdr.busy = 0;
    de08:	f36f 0341 	bfc	r3, #1, #1
    de0c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    de0e:	68e1      	ldr	r1, [r4, #12]
    de10:	4620      	mov	r0, r4
    de12:	f01c fc81 	bl	2a718 <idx_inc>
    de16:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    de18:	4630      	mov	r0, r6
    de1a:	f017 f92b 	bl	25074 <z_spin_unlock_valid>
    de1e:	b980      	cbnz	r0, de42 <mpsc_pbuf_free+0xa6>
    de20:	23c2      	movs	r3, #194	; 0xc2
    de22:	4a0d      	ldr	r2, [pc, #52]	; (de58 <mpsc_pbuf_free+0xbc>)
    de24:	4910      	ldr	r1, [pc, #64]	; (de68 <mpsc_pbuf_free+0xcc>)
    de26:	480e      	ldr	r0, [pc, #56]	; (de60 <mpsc_pbuf_free+0xc4>)
    de28:	f01c fc47 	bl	2a6ba <assert_print>
    de2c:	4631      	mov	r1, r6
    de2e:	480f      	ldr	r0, [pc, #60]	; (de6c <mpsc_pbuf_free+0xd0>)
    de30:	f01c fc43 	bl	2a6ba <assert_print>
    de34:	21c2      	movs	r1, #194	; 0xc2
    de36:	e7d2      	b.n	ddde <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
    de38:	682b      	ldr	r3, [r5, #0]
    de3a:	f367 039f 	bfi	r3, r7, #2, #30
    de3e:	602b      	str	r3, [r5, #0]
    de40:	e7ea      	b.n	de18 <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
    de42:	f388 8811 	msr	BASEPRI, r8
    de46:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    de4a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    de4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de52:	f017 bbb9 	b.w	255c8 <z_impl_k_sem_give>
    de56:	bf00      	nop
    de58:	000333ee 	.word	0x000333ee
    de5c:	00033447 	.word	0x00033447
    de60:	00032659 	.word	0x00032659
    de64:	0003345c 	.word	0x0003345c
    de68:	0003341b 	.word	0x0003341b
    de6c:	00033432 	.word	0x00033432

0000de70 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    de70:	b148      	cbz	r0, de86 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    de72:	4b05      	ldr	r3, [pc, #20]	; (de88 <arch_busy_wait+0x18>)
    de74:	4a05      	ldr	r2, [pc, #20]	; (de8c <arch_busy_wait+0x1c>)
    de76:	681b      	ldr	r3, [r3, #0]
    de78:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    de7c:	4358      	muls	r0, r3
    de7e:	4b04      	ldr	r3, [pc, #16]	; (de90 <arch_busy_wait+0x20>)
    de80:	f043 0301 	orr.w	r3, r3, #1
    de84:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    de86:	4770      	bx	lr
    de88:	20008694 	.word	0x20008694
    de8c:	000f4240 	.word	0x000f4240
    de90:	00031730 	.word	0x00031730

0000de94 <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    de94:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    de96:	b570      	push	{r4, r5, r6, lr}
    de98:	4605      	mov	r5, r0
    de9a:	461e      	mov	r6, r3
    de9c:	4608      	mov	r0, r1
    de9e:	d90b      	bls.n	deb8 <ppi_ipc_to_rtc.isra.0+0x24>
    dea0:	491d      	ldr	r1, [pc, #116]	; (df18 <ppi_ipc_to_rtc.isra.0+0x84>)
    dea2:	481e      	ldr	r0, [pc, #120]	; (df1c <ppi_ipc_to_rtc.isra.0+0x88>)
    dea4:	f240 13e7 	movw	r3, #487	; 0x1e7
    dea8:	4a1d      	ldr	r2, [pc, #116]	; (df20 <ppi_ipc_to_rtc.isra.0+0x8c>)
    deaa:	f01c fc06 	bl	2a6ba <assert_print>
    deae:	f240 11e7 	movw	r1, #487	; 0x1e7
    deb2:	481b      	ldr	r0, [pc, #108]	; (df20 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    deb4:	f01c fbfa 	bl	2a6ac <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    deb8:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    deba:	f010 fa39 	bl	1e330 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    debe:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    dec2:	b1ae      	cbz	r6, def0 <ppi_ipc_to_rtc.isra.0+0x5c>
    dec4:	b950      	cbnz	r0, dedc <ppi_ipc_to_rtc.isra.0+0x48>
    dec6:	4917      	ldr	r1, [pc, #92]	; (df24 <ppi_ipc_to_rtc.isra.0+0x90>)
    dec8:	f240 234e 	movw	r3, #590	; 0x24e
    decc:	4a16      	ldr	r2, [pc, #88]	; (df28 <ppi_ipc_to_rtc.isra.0+0x94>)
    dece:	4813      	ldr	r0, [pc, #76]	; (df1c <ppi_ipc_to_rtc.isra.0+0x88>)
    ded0:	f01c fbf3 	bl	2a6ba <assert_print>
    ded4:	f240 214e 	movw	r1, #590	; 0x24e
    ded8:	4813      	ldr	r0, [pc, #76]	; (df28 <ppi_ipc_to_rtc.isra.0+0x94>)
    deda:	e7eb      	b.n	deb4 <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    dedc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    dee0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    dee4:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    dee8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    deec:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    deee:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    def0:	b948      	cbnz	r0, df06 <ppi_ipc_to_rtc.isra.0+0x72>
    def2:	490c      	ldr	r1, [pc, #48]	; (df24 <ppi_ipc_to_rtc.isra.0+0x90>)
    def4:	f240 2363 	movw	r3, #611	; 0x263
    def8:	4a0b      	ldr	r2, [pc, #44]	; (df28 <ppi_ipc_to_rtc.isra.0+0x94>)
    defa:	4808      	ldr	r0, [pc, #32]	; (df1c <ppi_ipc_to_rtc.isra.0+0x88>)
    defc:	f01c fbdd 	bl	2a6ba <assert_print>
    df00:	f240 2163 	movw	r1, #611	; 0x263
    df04:	e7e8      	b.n	ded8 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    df06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    df0a:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    df0e:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    df12:	6016      	str	r6, [r2, #0]
    df14:	e7eb      	b.n	deee <ppi_ipc_to_rtc.isra.0+0x5a>
    df16:	bf00      	nop
    df18:	00033512 	.word	0x00033512
    df1c:	00032659 	.word	0x00032659
    df20:	000334e0 	.word	0x000334e0
    df24:	00033555 	.word	0x00033555
    df28:	0003351d 	.word	0x0003351d

0000df2c <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    df2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    df2e:	b083      	sub	sp, #12
    df30:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    df32:	1d38      	adds	r0, r7, #4
    df34:	f011 f8a4 	bl	1f080 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    df38:	4b24      	ldr	r3, [pc, #144]	; (dfcc <sync_rtc_setup+0xa0>)
    df3a:	4298      	cmp	r0, r3
    df3c:	d143      	bne.n	dfc6 <sync_rtc_setup+0x9a>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    df3e:	f010 fbeb 	bl	1e718 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    df42:	1e04      	subs	r4, r0, #0
    df44:	da13      	bge.n	df6e <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    df46:	7938      	ldrb	r0, [r7, #4]
    df48:	f011 f8a0 	bl	1f08c <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    df4c:	466d      	mov	r5, sp
    df4e:	b088      	sub	sp, #32
    df50:	466a      	mov	r2, sp
    df52:	4b1f      	ldr	r3, [pc, #124]	; (dfd0 <sync_rtc_setup+0xa4>)
    df54:	e9c2 3405 	strd	r3, r4, [r2, #20]
    df58:	2303      	movs	r3, #3
    df5a:	f842 3f10 	str.w	r3, [r2, #16]!
    df5e:	2300      	movs	r3, #0
    df60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df64:	481b      	ldr	r0, [pc, #108]	; (dfd4 <sync_rtc_setup+0xa8>)
    df66:	f000 fc93 	bl	e890 <z_impl_z_log_msg_static_create>
    df6a:	46ad      	mov	sp, r5
	}

	return rv;
    df6c:	e027      	b.n	dfbe <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    df6e:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    df72:	4d19      	ldr	r5, [pc, #100]	; (dfd8 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    df74:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    df76:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    df78:	80fb      	strh	r3, [r7, #6]
    df7a:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    df7c:	687b      	ldr	r3, [r7, #4]
    df7e:	b914      	cbnz	r4, df86 <sync_rtc_setup+0x5a>
		return -ENOSYS;
    df80:	f06f 0457 	mvn.w	r4, #87	; 0x57
    df84:	e7e2      	b.n	df4c <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    df86:	2108      	movs	r1, #8
    df88:	4628      	mov	r0, r5
    df8a:	4a14      	ldr	r2, [pc, #80]	; (dfdc <sync_rtc_setup+0xb0>)
    df8c:	47a0      	blx	r4
	if (err < 0) {
    df8e:	1e04      	subs	r4, r0, #0
    df90:	dbdc      	blt.n	df4c <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    df92:	6933      	ldr	r3, [r6, #16]
    df94:	2b00      	cmp	r3, #0
    df96:	d0f3      	beq.n	df80 <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    df98:	2201      	movs	r2, #1
    df9a:	2108      	movs	r1, #8
    df9c:	4628      	mov	r0, r5
    df9e:	4798      	blx	r3
	if (rv < 0) {
    dfa0:	1e04      	subs	r4, r0, #0
    dfa2:	dbd3      	blt.n	df4c <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    dfa4:	2301      	movs	r3, #1
    dfa6:	7938      	ldrb	r0, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    dfa8:	4a0d      	ldr	r2, [pc, #52]	; (dfe0 <sync_rtc_setup+0xb4>)
    dfaa:	fa03 f100 	lsl.w	r1, r3, r0
    dfae:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    dfb2:	79fa      	ldrb	r2, [r7, #7]
    dfb4:	7979      	ldrb	r1, [r7, #5]
    dfb6:	f7ff ff6d 	bl	de94 <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    dfba:	2c00      	cmp	r4, #0
    dfbc:	d1c6      	bne.n	df4c <sync_rtc_setup+0x20>
}
    dfbe:	4620      	mov	r0, r4
    dfc0:	370c      	adds	r7, #12
    dfc2:	46bd      	mov	sp, r7
    dfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    dfc6:	f06f 0412 	mvn.w	r4, #18
    dfca:	e7bf      	b.n	df4c <sync_rtc_setup+0x20>
    dfcc:	0bad0000 	.word	0x0bad0000
    dfd0:	00033559 	.word	0x00033559
    dfd4:	000315dc 	.word	0x000315dc
    dfd8:	0003100c 	.word	0x0003100c
    dfdc:	0000e095 	.word	0x0000e095
    dfe0:	40017000 	.word	0x40017000

0000dfe4 <rtc_cb>:
{
    dfe4:	b570      	push	{r4, r5, r6, lr}
    dfe6:	9e04      	ldr	r6, [sp, #16]
    dfe8:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    dfec:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    dfee:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dff2:	4630      	mov	r0, r6
    dff4:	f010 f982 	bl	1e2fc <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    dff8:	2c0f      	cmp	r4, #15
    dffa:	d90b      	bls.n	e014 <rtc_cb+0x30>
    dffc:	491b      	ldr	r1, [pc, #108]	; (e06c <rtc_cb+0x88>)
    dffe:	481c      	ldr	r0, [pc, #112]	; (e070 <rtc_cb+0x8c>)
    e000:	f240 13e1 	movw	r3, #481	; 0x1e1
    e004:	4a1b      	ldr	r2, [pc, #108]	; (e074 <rtc_cb+0x90>)
    e006:	f01c fb58 	bl	2a6ba <assert_print>
    e00a:	f240 11e1 	movw	r1, #481	; 0x1e1
    e00e:	4819      	ldr	r0, [pc, #100]	; (e074 <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    e010:	f01c fb4c 	bl	2a6ac <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    e014:	00a4      	lsls	r4, r4, #2
    e016:	b2e4      	uxtb	r4, r4
    e018:	b950      	cbnz	r0, e030 <rtc_cb+0x4c>
    e01a:	4917      	ldr	r1, [pc, #92]	; (e078 <rtc_cb+0x94>)
    e01c:	4814      	ldr	r0, [pc, #80]	; (e070 <rtc_cb+0x8c>)
    e01e:	f44f 7317 	mov.w	r3, #604	; 0x25c
    e022:	4a16      	ldr	r2, [pc, #88]	; (e07c <rtc_cb+0x98>)
    e024:	f01c fb49 	bl	2a6ba <assert_print>
    e028:	f44f 7117 	mov.w	r1, #604	; 0x25c
    e02c:	4813      	ldr	r0, [pc, #76]	; (e07c <rtc_cb+0x98>)
    e02e:	e7ef      	b.n	e010 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    e030:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    e032:	4b13      	ldr	r3, [pc, #76]	; (e080 <rtc_cb+0x9c>)
    e034:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    e038:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    e03a:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    e03c:	4a11      	ldr	r2, [pc, #68]	; (e084 <rtc_cb+0xa0>)
    e03e:	40ab      	lsls	r3, r5
    e040:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    e044:	4630      	mov	r0, r6
    e046:	f010 fb85 	bl	1e754 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    e04a:	4628      	mov	r0, r5
    e04c:	f011 f81e 	bl	1f08c <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    e050:	4b0d      	ldr	r3, [pc, #52]	; (e088 <rtc_cb+0xa4>)
    e052:	4298      	cmp	r0, r3
    e054:	d008      	beq.n	e068 <rtc_cb+0x84>
    e056:	490d      	ldr	r1, [pc, #52]	; (e08c <rtc_cb+0xa8>)
    e058:	4805      	ldr	r0, [pc, #20]	; (e070 <rtc_cb+0x8c>)
    e05a:	2374      	movs	r3, #116	; 0x74
    e05c:	4a0c      	ldr	r2, [pc, #48]	; (e090 <rtc_cb+0xac>)
    e05e:	f01c fb2c 	bl	2a6ba <assert_print>
    e062:	2174      	movs	r1, #116	; 0x74
    e064:	480a      	ldr	r0, [pc, #40]	; (e090 <rtc_cb+0xac>)
    e066:	e7d3      	b.n	e010 <rtc_cb+0x2c>
}
    e068:	bd70      	pop	{r4, r5, r6, pc}
    e06a:	bf00      	nop
    e06c:	00033512 	.word	0x00033512
    e070:	00032659 	.word	0x00032659
    e074:	000334e0 	.word	0x000334e0
    e078:	00033581 	.word	0x00033581
    e07c:	0003351d 	.word	0x0003351d
    e080:	4002a080 	.word	0x4002a080
    e084:	40017000 	.word	0x40017000
    e088:	0bad0000 	.word	0x0bad0000
    e08c:	000335bc 	.word	0x000335bc
    e090:	00033585 	.word	0x00033585

0000e094 <mbox_callback>:
{
    e094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e098:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    e09a:	6883      	ldr	r3, [r0, #8]
    e09c:	691b      	ldr	r3, [r3, #16]
    e09e:	b94b      	cbnz	r3, e0b4 <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    e0a0:	4927      	ldr	r1, [pc, #156]	; (e140 <mbox_callback+0xac>)
    e0a2:	4828      	ldr	r0, [pc, #160]	; (e144 <mbox_callback+0xb0>)
    e0a4:	23ca      	movs	r3, #202	; 0xca
    e0a6:	4a28      	ldr	r2, [pc, #160]	; (e148 <mbox_callback+0xb4>)
    e0a8:	f01c fb07 	bl	2a6ba <assert_print>
    e0ac:	21ca      	movs	r1, #202	; 0xca
    e0ae:	4826      	ldr	r0, [pc, #152]	; (e148 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    e0b0:	f01c fafc 	bl	2a6ac <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    e0b4:	2200      	movs	r2, #0
    e0b6:	4798      	blx	r3
    e0b8:	4606      	mov	r6, r0
    e0ba:	2800      	cmp	r0, #0
    e0bc:	d1f0      	bne.n	e0a0 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e0be:	f3c4 2907 	ubfx	r9, r4, #8, #8
    e0c2:	4648      	mov	r0, r9
    e0c4:	f010 f94e 	bl	1e364 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    e0c8:	fa5f f884 	uxtb.w	r8, r4
    e0cc:	4633      	mov	r3, r6
    e0ce:	4649      	mov	r1, r9
    e0d0:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e0d2:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    e0d4:	4640      	mov	r0, r8
    e0d6:	f7ff fedd 	bl	de94 <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    e0da:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    e0de:	4648      	mov	r0, r9
    e0e0:	f010 f90c 	bl	1e2fc <z_nrf_rtc_timer_compare_evt_address_get>
    e0e4:	2d0f      	cmp	r5, #15
    e0e6:	d90a      	bls.n	e0fe <mbox_callback+0x6a>
    e0e8:	4918      	ldr	r1, [pc, #96]	; (e14c <mbox_callback+0xb8>)
    e0ea:	4816      	ldr	r0, [pc, #88]	; (e144 <mbox_callback+0xb0>)
    e0ec:	f240 13e1 	movw	r3, #481	; 0x1e1
    e0f0:	4a17      	ldr	r2, [pc, #92]	; (e150 <mbox_callback+0xbc>)
    e0f2:	f01c fae2 	bl	2a6ba <assert_print>
    e0f6:	f240 11e1 	movw	r1, #481	; 0x1e1
    e0fa:	4815      	ldr	r0, [pc, #84]	; (e150 <mbox_callback+0xbc>)
    e0fc:	e7d8      	b.n	e0b0 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e0fe:	4a15      	ldr	r2, [pc, #84]	; (e154 <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    e100:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e102:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    e104:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e108:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    e10a:	b950      	cbnz	r0, e122 <mbox_callback+0x8e>
    e10c:	4912      	ldr	r1, [pc, #72]	; (e158 <mbox_callback+0xc4>)
    e10e:	480d      	ldr	r0, [pc, #52]	; (e144 <mbox_callback+0xb0>)
    e110:	f44f 7312 	mov.w	r3, #584	; 0x248
    e114:	4a11      	ldr	r2, [pc, #68]	; (e15c <mbox_callback+0xc8>)
    e116:	f01c fad0 	bl	2a6ba <assert_print>
    e11a:	f44f 7112 	mov.w	r1, #584	; 0x248
    e11e:	480f      	ldr	r0, [pc, #60]	; (e15c <mbox_callback+0xc8>)
    e120:	e7c6      	b.n	e0b0 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    e122:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    e126:	4b0e      	ldr	r3, [pc, #56]	; (e160 <mbox_callback+0xcc>)
    e128:	f107 0232 	add.w	r2, r7, #50	; 0x32
    e12c:	9300      	str	r3, [sp, #0]
    e12e:	4648      	mov	r0, r9
    e130:	4633      	mov	r3, r6
    e132:	9401      	str	r4, [sp, #4]
    e134:	0052      	lsls	r2, r2, #1
    e136:	f010 f9ff 	bl	1e538 <z_nrf_rtc_timer_set>
}
    e13a:	b003      	add	sp, #12
    e13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e140:	000334d3 	.word	0x000334d3
    e144:	00032659 	.word	0x00032659
    e148:	00033585 	.word	0x00033585
    e14c:	00033512 	.word	0x00033512
    e150:	000334e0 	.word	0x000334e0
    e154:	4002a080 	.word	0x4002a080
    e158:	00033581 	.word	0x00033581
    e15c:	0003351d 	.word	0x0003351d
    e160:	0000dfe5 	.word	0x0000dfe5

0000e164 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e164:	f020 bc9f 	b.w	2eaa6 <SystemInit>

0000e168 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    e168:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    e16a:	aa01      	add	r2, sp, #4
    e16c:	f020 fc82 	bl	2ea74 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    e170:	4604      	mov	r4, r0
    e172:	b168      	cbz	r0, e190 <soc_secure_gpio_pin_mcu_select+0x28>
    e174:	2316      	movs	r3, #22
    e176:	4a0e      	ldr	r2, [pc, #56]	; (e1b0 <soc_secure_gpio_pin_mcu_select+0x48>)
    e178:	490e      	ldr	r1, [pc, #56]	; (e1b4 <soc_secure_gpio_pin_mcu_select+0x4c>)
    e17a:	480f      	ldr	r0, [pc, #60]	; (e1b8 <soc_secure_gpio_pin_mcu_select+0x50>)
    e17c:	f01c fa9d 	bl	2a6ba <assert_print>
    e180:	4621      	mov	r1, r4
    e182:	480e      	ldr	r0, [pc, #56]	; (e1bc <soc_secure_gpio_pin_mcu_select+0x54>)
    e184:	f01c fa99 	bl	2a6ba <assert_print>
    e188:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    e18a:	4809      	ldr	r0, [pc, #36]	; (e1b0 <soc_secure_gpio_pin_mcu_select+0x48>)
    e18c:	f01c fa8e 	bl	2a6ac <assert_post_action>
    e190:	9b01      	ldr	r3, [sp, #4]
    e192:	b15b      	cbz	r3, e1ac <soc_secure_gpio_pin_mcu_select+0x44>
    e194:	2317      	movs	r3, #23
    e196:	4a06      	ldr	r2, [pc, #24]	; (e1b0 <soc_secure_gpio_pin_mcu_select+0x48>)
    e198:	4909      	ldr	r1, [pc, #36]	; (e1c0 <soc_secure_gpio_pin_mcu_select+0x58>)
    e19a:	4807      	ldr	r0, [pc, #28]	; (e1b8 <soc_secure_gpio_pin_mcu_select+0x50>)
    e19c:	f01c fa8d 	bl	2a6ba <assert_print>
    e1a0:	9901      	ldr	r1, [sp, #4]
    e1a2:	4808      	ldr	r0, [pc, #32]	; (e1c4 <soc_secure_gpio_pin_mcu_select+0x5c>)
    e1a4:	f01c fa89 	bl	2a6ba <assert_print>
    e1a8:	2117      	movs	r1, #23
    e1aa:	e7ee      	b.n	e18a <soc_secure_gpio_pin_mcu_select+0x22>
}
    e1ac:	b002      	add	sp, #8
    e1ae:	bd10      	pop	{r4, pc}
    e1b0:	000335d9 	.word	0x000335d9
    e1b4:	00033613 	.word	0x00033613
    e1b8:	00032659 	.word	0x00032659
    e1bc:	00033633 	.word	0x00033633
    e1c0:	0003364d 	.word	0x0003364d
    e1c4:	00033659 	.word	0x00033659

0000e1c8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    e1c8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e1ca:	2200      	movs	r2, #0
{
    e1cc:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    e1ce:	490f      	ldr	r1, [pc, #60]	; (e20c <enable_logger+0x44>)
    e1d0:	480f      	ldr	r0, [pc, #60]	; (e210 <enable_logger+0x48>)
    e1d2:	f022 f8db 	bl	3038c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e1d6:	2200      	movs	r2, #0
    e1d8:	2300      	movs	r3, #0
    e1da:	2400      	movs	r4, #0
    e1dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e1e0:	230e      	movs	r3, #14
    e1e2:	4d0c      	ldr	r5, [pc, #48]	; (e214 <enable_logger+0x4c>)
    e1e4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    e1e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e1ec:	4628      	mov	r0, r5
    e1ee:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e1f2:	4b09      	ldr	r3, [pc, #36]	; (e218 <enable_logger+0x50>)
    e1f4:	4909      	ldr	r1, [pc, #36]	; (e21c <enable_logger+0x54>)
    e1f6:	9400      	str	r4, [sp, #0]
    e1f8:	f016 fe64 	bl	24ec4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e1fc:	4908      	ldr	r1, [pc, #32]	; (e220 <enable_logger+0x58>)
    e1fe:	4628      	mov	r0, r5
    e200:	f021 ffa8 	bl	30154 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    e204:	4620      	mov	r0, r4
    e206:	b009      	add	sp, #36	; 0x24
    e208:	bd30      	pop	{r4, r5, pc}
    e20a:	bf00      	nop
    e20c:	0000e369 	.word	0x0000e369
    e210:	200096e8 	.word	0x200096e8
    e214:	20009258 	.word	0x20009258
    e218:	0000e639 	.word	0x0000e639
    e21c:	20031688 	.word	0x20031688
    e220:	00033673 	.word	0x00033673

0000e224 <activate_foreach_backend>:
{
    e224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e228:	4604      	mov	r4, r0
	while (mask_cpy) {
    e22a:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    e22c:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e230:	f8df 8050 	ldr.w	r8, [pc, #80]	; e284 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    e234:	b914      	cbnz	r4, e23c <activate_foreach_backend+0x18>
}
    e236:	4638      	mov	r0, r7
    e238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    e23c:	fa94 f5a4 	rbit	r5, r4
    e240:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    e244:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e248:	012e      	lsls	r6, r5, #4
    e24a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    e24e:	ea6f 0a03 	mvn.w	sl, r3
    e252:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e256:	7b2b      	ldrb	r3, [r5, #12]
    e258:	2b00      	cmp	r3, #0
    e25a:	d0eb      	beq.n	e234 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    e25c:	f858 3006 	ldr.w	r3, [r8, r6]
    e260:	691b      	ldr	r3, [r3, #16]
    e262:	b94b      	cbnz	r3, e278 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    e264:	4446      	add	r6, r8
			log_backend_enable(backend,
    e266:	6873      	ldr	r3, [r6, #4]
    e268:	2204      	movs	r2, #4
    e26a:	4628      	mov	r0, r5
    e26c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    e26e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    e272:	f000 fae7 	bl	e844 <log_backend_enable>
    e276:	e7dd      	b.n	e234 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    e278:	4628      	mov	r0, r5
    e27a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e27c:	2800      	cmp	r0, #0
    e27e:	d1d9      	bne.n	e234 <activate_foreach_backend+0x10>
    e280:	e7f0      	b.n	e264 <activate_foreach_backend+0x40>
    e282:	bf00      	nop
    e284:	000315ec 	.word	0x000315ec

0000e288 <z_log_init>:
{
    e288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e28c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; e348 <z_log_init+0xc0>
    e290:	4c2e      	ldr	r4, [pc, #184]	; (e34c <z_log_init+0xc4>)
    e292:	4680      	mov	r8, r0
    e294:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e298:	2b9f      	cmp	r3, #159	; 0x9f
{
    e29a:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e29c:	d90b      	bls.n	e2b6 <z_log_init+0x2e>
    e29e:	492c      	ldr	r1, [pc, #176]	; (e350 <z_log_init+0xc8>)
    e2a0:	f240 1315 	movw	r3, #277	; 0x115
    e2a4:	4a2b      	ldr	r2, [pc, #172]	; (e354 <z_log_init+0xcc>)
    e2a6:	482c      	ldr	r0, [pc, #176]	; (e358 <z_log_init+0xd0>)
    e2a8:	f01c fa07 	bl	2a6ba <assert_print>
    e2ac:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2b0:	4828      	ldr	r0, [pc, #160]	; (e354 <z_log_init+0xcc>)
    e2b2:	f01c f9fb 	bl	2a6ac <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    e2b6:	4829      	ldr	r0, [pc, #164]	; (e35c <z_log_init+0xd4>)
    e2b8:	f01c fb30 	bl	2a91c <atomic_inc>
    e2bc:	4606      	mov	r6, r0
    e2be:	b360      	cbz	r0, e31a <z_log_init+0x92>
	uint32_t mask = 0;
    e2c0:	2500      	movs	r5, #0
}
    e2c2:	4628      	mov	r0, r5
    e2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    e2c8:	7b23      	ldrb	r3, [r4, #12]
    e2ca:	b173      	cbz	r3, e2ea <z_log_init+0x62>
	if (backend->api->init) {
    e2cc:	6823      	ldr	r3, [r4, #0]
    e2ce:	68db      	ldr	r3, [r3, #12]
    e2d0:	b10b      	cbz	r3, e2d6 <z_log_init+0x4e>
		backend->api->init(backend);
    e2d2:	4620      	mov	r0, r4
    e2d4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    e2d6:	6823      	ldr	r3, [r4, #0]
    e2d8:	691b      	ldr	r3, [r3, #16]
    e2da:	b9b3      	cbnz	r3, e30a <z_log_init+0x82>
				log_backend_enable(backend,
    e2dc:	6863      	ldr	r3, [r4, #4]
    e2de:	2204      	movs	r2, #4
    e2e0:	4620      	mov	r0, r4
    e2e2:	6819      	ldr	r1, [r3, #0]
    e2e4:	f000 faae 	bl	e844 <log_backend_enable>
			i++;
    e2e8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2ea:	3410      	adds	r4, #16
    e2ec:	454c      	cmp	r4, r9
    e2ee:	d918      	bls.n	e322 <z_log_init+0x9a>
    e2f0:	491b      	ldr	r1, [pc, #108]	; (e360 <z_log_init+0xd8>)
    e2f2:	f44f 7391 	mov.w	r3, #290	; 0x122
    e2f6:	4a17      	ldr	r2, [pc, #92]	; (e354 <z_log_init+0xcc>)
    e2f8:	4817      	ldr	r0, [pc, #92]	; (e358 <z_log_init+0xd0>)
    e2fa:	f01c f9de 	bl	2a6ba <assert_print>
    e2fe:	4819      	ldr	r0, [pc, #100]	; (e364 <z_log_init+0xdc>)
    e300:	f01c f9db 	bl	2a6ba <assert_print>
    e304:	f44f 7191 	mov.w	r1, #290	; 0x122
    e308:	e7d2      	b.n	e2b0 <z_log_init+0x28>
		return backend->api->is_ready(backend);
    e30a:	4620      	mov	r0, r4
    e30c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    e30e:	2800      	cmp	r0, #0
    e310:	d0e4      	beq.n	e2dc <z_log_init+0x54>
				mask |= BIT(i);
    e312:	fa0a f306 	lsl.w	r3, sl, r6
    e316:	431d      	orrs	r5, r3
    e318:	e7e6      	b.n	e2e8 <z_log_init+0x60>
	uint32_t mask = 0;
    e31a:	4605      	mov	r5, r0
				mask |= BIT(i);
    e31c:	f04f 0a01 	mov.w	sl, #1
    e320:	e7e4      	b.n	e2ec <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e322:	d3d1      	bcc.n	e2c8 <z_log_init+0x40>
	if (blocking) {
    e324:	f1b8 0f00 	cmp.w	r8, #0
    e328:	d0cb      	beq.n	e2c2 <z_log_init+0x3a>
		while (mask) {
    e32a:	2d00      	cmp	r5, #0
    e32c:	d0c8      	beq.n	e2c0 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    e32e:	4628      	mov	r0, r5
    e330:	f7ff ff78 	bl	e224 <activate_foreach_backend>
    e334:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    e336:	2f00      	cmp	r7, #0
    e338:	d0f7      	beq.n	e32a <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    e33a:	2100      	movs	r1, #0
    e33c:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e340:	f019 f836 	bl	273b0 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    e344:	e7f1      	b.n	e32a <z_log_init+0xa2>
    e346:	bf00      	nop
    e348:	000315fc 	.word	0x000315fc
    e34c:	000315ec 	.word	0x000315ec
    e350:	000336a8 	.word	0x000336a8
    e354:	0003367b 	.word	0x0003367b
    e358:	00032659 	.word	0x00032659
    e35c:	20021484 	.word	0x20021484
    e360:	000336cc 	.word	0x000336cc
    e364:	000336ed 	.word	0x000336ed

0000e368 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    e368:	4801      	ldr	r0, [pc, #4]	; (e370 <log_process_thread_timer_expiry_fn+0x8>)
    e36a:	f017 b92d 	b.w	255c8 <z_impl_k_sem_give>
    e36e:	bf00      	nop
    e370:	20008c04 	.word	0x20008c04

0000e374 <log_format_func_t_get>:
}
    e374:	4b01      	ldr	r3, [pc, #4]	; (e37c <log_format_func_t_get+0x8>)
    e376:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e37a:	4770      	bx	lr
    e37c:	00031b48 	.word	0x00031b48

0000e380 <log_set_timestamp_func>:
{
    e380:	b508      	push	{r3, lr}
    e382:	4603      	mov	r3, r0
    e384:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    e386:	b12b      	cbz	r3, e394 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    e388:	4a04      	ldr	r2, [pc, #16]	; (e39c <log_set_timestamp_func+0x1c>)
    e38a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    e38c:	f000 fcfc 	bl	ed88 <log_output_timestamp_freq_set>
	return 0;
    e390:	2000      	movs	r0, #0
}
    e392:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e394:	f06f 0015 	mvn.w	r0, #21
    e398:	e7fb      	b.n	e392 <log_set_timestamp_func+0x12>
    e39a:	bf00      	nop
    e39c:	200083fc 	.word	0x200083fc

0000e3a0 <z_log_notify_backend_enabled>:
{
    e3a0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    e3a2:	4c04      	ldr	r4, [pc, #16]	; (e3b4 <z_log_notify_backend_enabled+0x14>)
    e3a4:	7823      	ldrb	r3, [r4, #0]
    e3a6:	b913      	cbnz	r3, e3ae <z_log_notify_backend_enabled+0xe>
    e3a8:	4803      	ldr	r0, [pc, #12]	; (e3b8 <z_log_notify_backend_enabled+0x18>)
    e3aa:	f017 f90d 	bl	255c8 <z_impl_k_sem_give>
	backend_attached = true;
    e3ae:	2301      	movs	r3, #1
    e3b0:	7023      	strb	r3, [r4, #0]
}
    e3b2:	bd10      	pop	{r4, pc}
    e3b4:	20022302 	.word	0x20022302
    e3b8:	20008c04 	.word	0x20008c04

0000e3bc <z_log_dropped>:
{
    e3bc:	b510      	push	{r4, lr}
    e3be:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    e3c0:	4806      	ldr	r0, [pc, #24]	; (e3dc <z_log_dropped+0x20>)
    e3c2:	f01c faab 	bl	2a91c <atomic_inc>
	if (buffered) {
    e3c6:	b13c      	cbz	r4, e3d8 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e3c8:	4b05      	ldr	r3, [pc, #20]	; (e3e0 <z_log_dropped+0x24>)
    e3ca:	e8d3 1fef 	ldaex	r1, [r3]
    e3ce:	3901      	subs	r1, #1
    e3d0:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e3d4:	2a00      	cmp	r2, #0
    e3d6:	d1f8      	bne.n	e3ca <z_log_dropped+0xe>
}
    e3d8:	bd10      	pop	{r4, pc}
    e3da:	bf00      	nop
    e3dc:	2002147c 	.word	0x2002147c
    e3e0:	20021480 	.word	0x20021480

0000e3e4 <z_log_dropped_read_and_clear>:
}
    e3e4:	2000      	movs	r0, #0
    e3e6:	4601      	mov	r1, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e3e8:	4b03      	ldr	r3, [pc, #12]	; (e3f8 <z_log_dropped_read_and_clear+0x14>)
    e3ea:	e8d3 0fef 	ldaex	r0, [r3]
    e3ee:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e3f2:	2a00      	cmp	r2, #0
    e3f4:	d1f9      	bne.n	e3ea <z_log_dropped_read_and_clear+0x6>
    e3f6:	4770      	bx	lr
    e3f8:	2002147c 	.word	0x2002147c

0000e3fc <dropped_notify>:
{
    e3fc:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    e3fe:	f7ff fff1 	bl	e3e4 <z_log_dropped_read_and_clear>
    e402:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e404:	4c0f      	ldr	r4, [pc, #60]	; (e444 <dropped_notify+0x48>)
    e406:	4e10      	ldr	r6, [pc, #64]	; (e448 <dropped_notify+0x4c>)
    e408:	42b4      	cmp	r4, r6
    e40a:	d919      	bls.n	e440 <dropped_notify+0x44>
    e40c:	490f      	ldr	r1, [pc, #60]	; (e44c <dropped_notify+0x50>)
    e40e:	f240 13cd 	movw	r3, #461	; 0x1cd
    e412:	4a0f      	ldr	r2, [pc, #60]	; (e450 <dropped_notify+0x54>)
    e414:	480f      	ldr	r0, [pc, #60]	; (e454 <dropped_notify+0x58>)
    e416:	f01c f950 	bl	2a6ba <assert_print>
    e41a:	480f      	ldr	r0, [pc, #60]	; (e458 <dropped_notify+0x5c>)
    e41c:	f01c f94d 	bl	2a6ba <assert_print>
    e420:	f240 11cd 	movw	r1, #461	; 0x1cd
    e424:	480a      	ldr	r0, [pc, #40]	; (e450 <dropped_notify+0x54>)
    e426:	f01c f941 	bl	2a6ac <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e42a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e42c:	795b      	ldrb	r3, [r3, #5]
    e42e:	b12b      	cbz	r3, e43c <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    e430:	6823      	ldr	r3, [r4, #0]
    e432:	685b      	ldr	r3, [r3, #4]
    e434:	b113      	cbz	r3, e43c <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    e436:	4629      	mov	r1, r5
    e438:	4620      	mov	r0, r4
    e43a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e43c:	3410      	adds	r4, #16
    e43e:	e7e3      	b.n	e408 <dropped_notify+0xc>
    e440:	d3f3      	bcc.n	e42a <dropped_notify+0x2e>
}
    e442:	bd70      	pop	{r4, r5, r6, pc}
    e444:	000315ec 	.word	0x000315ec
    e448:	000315fc 	.word	0x000315fc
    e44c:	000336cc 	.word	0x000336cc
    e450:	0003367b 	.word	0x0003367b
    e454:	00032659 	.word	0x00032659
    e458:	000336ed 	.word	0x000336ed

0000e45c <z_log_msg_init>:
{
    e45c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    e45e:	4c04      	ldr	r4, [pc, #16]	; (e470 <z_log_msg_init+0x14>)
    e460:	4904      	ldr	r1, [pc, #16]	; (e474 <z_log_msg_init+0x18>)
    e462:	4620      	mov	r0, r4
    e464:	f7ff face 	bl	da04 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    e468:	4b03      	ldr	r3, [pc, #12]	; (e478 <z_log_msg_init+0x1c>)
    e46a:	601c      	str	r4, [r3, #0]
}
    e46c:	bd10      	pop	{r4, pc}
    e46e:	bf00      	nop
    e470:	20008a14 	.word	0x20008a14
    e474:	00031b34 	.word	0x00031b34
    e478:	20021474 	.word	0x20021474

0000e47c <log_core_init>:
{
    e47c:	b508      	push	{r3, lr}
	panic_mode = false;
    e47e:	2300      	movs	r3, #0
    e480:	4a06      	ldr	r2, [pc, #24]	; (e49c <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    e482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    e486:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    e488:	4a05      	ldr	r2, [pc, #20]	; (e4a0 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    e48a:	4806      	ldr	r0, [pc, #24]	; (e4a4 <log_core_init+0x28>)
	dropped_cnt = 0;
    e48c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    e48e:	f7ff ff77 	bl	e380 <log_set_timestamp_func>
}
    e492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    e496:	f7ff bfe1 	b.w	e45c <z_log_msg_init>
    e49a:	bf00      	nop
    e49c:	20022303 	.word	0x20022303
    e4a0:	2002147c 	.word	0x2002147c
    e4a4:	0002a919 	.word	0x0002a919

0000e4a8 <z_log_msg_alloc>:
{
    e4a8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    e4aa:	2200      	movs	r2, #0
    e4ac:	2300      	movs	r3, #0
    e4ae:	4801      	ldr	r0, [pc, #4]	; (e4b4 <z_log_msg_alloc+0xc>)
    e4b0:	f7ff bada 	b.w	da68 <mpsc_pbuf_alloc>
    e4b4:	20008a14 	.word	0x20008a14

0000e4b8 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    e4b8:	4801      	ldr	r0, [pc, #4]	; (e4c0 <z_log_msg_local_claim+0x8>)
    e4ba:	f7ff bbe9 	b.w	dc90 <mpsc_pbuf_claim>
    e4be:	bf00      	nop
    e4c0:	20008a14 	.word	0x20008a14

0000e4c4 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    e4c4:	4b02      	ldr	r3, [pc, #8]	; (e4d0 <z_log_msg_free+0xc>)
{
    e4c6:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    e4c8:	6818      	ldr	r0, [r3, #0]
    e4ca:	f7ff bc67 	b.w	dd9c <mpsc_pbuf_free>
    e4ce:	bf00      	nop
    e4d0:	20021474 	.word	0x20021474

0000e4d4 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    e4d4:	4801      	ldr	r0, [pc, #4]	; (e4dc <z_log_msg_pending+0x8>)
    e4d6:	f01c b9aa 	b.w	2a82e <mpsc_pbuf_is_pending>
    e4da:	bf00      	nop
    e4dc:	20008a14 	.word	0x20008a14

0000e4e0 <z_impl_log_process>:
{
    e4e0:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    e4e2:	4b2e      	ldr	r3, [pc, #184]	; (e59c <z_impl_log_process+0xbc>)
    e4e4:	7818      	ldrb	r0, [r3, #0]
    e4e6:	2800      	cmp	r0, #0
    e4e8:	d057      	beq.n	e59a <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    e4ea:	f7ff ffe5 	bl	e4b8 <z_log_msg_local_claim>
	if (msg) {
    e4ee:	4605      	mov	r5, r0
    e4f0:	b340      	cbz	r0, e544 <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e4f2:	4b2b      	ldr	r3, [pc, #172]	; (e5a0 <z_impl_log_process+0xc0>)
    e4f4:	e8d3 1fef 	ldaex	r1, [r3]
    e4f8:	3901      	subs	r1, #1
    e4fa:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e4fe:	2a00      	cmp	r2, #0
    e500:	d1f8      	bne.n	e4f4 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e502:	4c28      	ldr	r4, [pc, #160]	; (e5a4 <z_impl_log_process+0xc4>)
    e504:	4e28      	ldr	r6, [pc, #160]	; (e5a8 <z_impl_log_process+0xc8>)
    e506:	42b4      	cmp	r4, r6
    e508:	d918      	bls.n	e53c <z_impl_log_process+0x5c>
    e50a:	4928      	ldr	r1, [pc, #160]	; (e5ac <z_impl_log_process+0xcc>)
    e50c:	f240 13c1 	movw	r3, #449	; 0x1c1
    e510:	4a27      	ldr	r2, [pc, #156]	; (e5b0 <z_impl_log_process+0xd0>)
    e512:	4828      	ldr	r0, [pc, #160]	; (e5b4 <z_impl_log_process+0xd4>)
    e514:	f01c f8d1 	bl	2a6ba <assert_print>
    e518:	4827      	ldr	r0, [pc, #156]	; (e5b8 <z_impl_log_process+0xd8>)
    e51a:	f01c f8ce 	bl	2a6ba <assert_print>
    e51e:	f240 11c1 	movw	r1, #449	; 0x1c1
    e522:	4823      	ldr	r0, [pc, #140]	; (e5b0 <z_impl_log_process+0xd0>)
    e524:	f01c f8c2 	bl	2a6ac <assert_post_action>
	return backend->cb->active;
    e528:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    e52a:	795b      	ldrb	r3, [r3, #5]
    e52c:	b123      	cbz	r3, e538 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    e52e:	6823      	ldr	r3, [r4, #0]
    e530:	4629      	mov	r1, r5
    e532:	4620      	mov	r0, r4
    e534:	681b      	ldr	r3, [r3, #0]
    e536:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e538:	3410      	adds	r4, #16
    e53a:	e7e4      	b.n	e506 <z_impl_log_process+0x26>
    e53c:	d3f4      	bcc.n	e528 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    e53e:	4628      	mov	r0, r5
    e540:	f7ff ffc0 	bl	e4c4 <z_log_msg_free>
	return dropped_cnt > 0;
    e544:	4b1d      	ldr	r3, [pc, #116]	; (e5bc <z_impl_log_process+0xdc>)
    e546:	4c1e      	ldr	r4, [pc, #120]	; (e5c0 <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    e548:	681b      	ldr	r3, [r3, #0]
    e54a:	2b00      	cmp	r3, #0
    e54c:	dd19      	ble.n	e582 <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    e54e:	f021 fef5 	bl	3033c <z_impl_k_uptime_ticks>
    e552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e556:	fba0 0302 	umull	r0, r3, r0, r2
    e55a:	fb02 3101 	mla	r1, r2, r1, r3
    e55e:	0bc3      	lsrs	r3, r0, #15
    e560:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e564:	e9d4 2000 	ldrd	r2, r0, [r4]
    e568:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    e56a:	f240 32e9 	movw	r2, #1001	; 0x3e9
    e56e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e572:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    e576:	4293      	cmp	r3, r2
    e578:	f171 0100 	sbcs.w	r1, r1, #0
    e57c:	d301      	bcc.n	e582 <z_impl_log_process+0xa2>
				dropped_notify();
    e57e:	f7ff ff3d 	bl	e3fc <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    e582:	e9d4 3200 	ldrd	r3, r2, [r4]
    e586:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    e58a:	f142 0200 	adc.w	r2, r2, #0
    e58e:	e9c4 3200 	strd	r3, r2, [r4]
}
    e592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    e596:	f7ff bf9d 	b.w	e4d4 <z_log_msg_pending>
}
    e59a:	bd70      	pop	{r4, r5, r6, pc}
    e59c:	20022302 	.word	0x20022302
    e5a0:	20021480 	.word	0x20021480
    e5a4:	000315ec 	.word	0x000315ec
    e5a8:	000315fc 	.word	0x000315fc
    e5ac:	000336cc 	.word	0x000336cc
    e5b0:	0003367b 	.word	0x0003367b
    e5b4:	00032659 	.word	0x00032659
    e5b8:	000336ed 	.word	0x000336ed
    e5bc:	2002147c 	.word	0x2002147c
    e5c0:	200096e0 	.word	0x200096e0

0000e5c4 <z_impl_log_panic>:
{
    e5c4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    e5c6:	4d15      	ldr	r5, [pc, #84]	; (e61c <z_impl_log_panic+0x58>)
    e5c8:	7829      	ldrb	r1, [r5, #0]
    e5ca:	bb29      	cbnz	r1, e618 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    e5cc:	2001      	movs	r0, #1
    e5ce:	f7ff fe5b 	bl	e288 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e5d2:	4c13      	ldr	r4, [pc, #76]	; (e620 <z_impl_log_panic+0x5c>)
    e5d4:	4e13      	ldr	r6, [pc, #76]	; (e624 <z_impl_log_panic+0x60>)
    e5d6:	42b4      	cmp	r4, r6
    e5d8:	d917      	bls.n	e60a <z_impl_log_panic+0x46>
    e5da:	4913      	ldr	r1, [pc, #76]	; (e628 <z_impl_log_panic+0x64>)
    e5dc:	f44f 73c2 	mov.w	r3, #388	; 0x184
    e5e0:	4a12      	ldr	r2, [pc, #72]	; (e62c <z_impl_log_panic+0x68>)
    e5e2:	4813      	ldr	r0, [pc, #76]	; (e630 <z_impl_log_panic+0x6c>)
    e5e4:	f01c f869 	bl	2a6ba <assert_print>
    e5e8:	4812      	ldr	r0, [pc, #72]	; (e634 <z_impl_log_panic+0x70>)
    e5ea:	f01c f866 	bl	2a6ba <assert_print>
    e5ee:	f44f 71c2 	mov.w	r1, #388	; 0x184
    e5f2:	480e      	ldr	r0, [pc, #56]	; (e62c <z_impl_log_panic+0x68>)
    e5f4:	f01c f85a 	bl	2a6ac <assert_post_action>
	return backend->cb->active;
    e5f8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e5fa:	795b      	ldrb	r3, [r3, #5]
    e5fc:	b11b      	cbz	r3, e606 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    e5fe:	6823      	ldr	r3, [r4, #0]
    e600:	4620      	mov	r0, r4
    e602:	689b      	ldr	r3, [r3, #8]
    e604:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e606:	3410      	adds	r4, #16
    e608:	e7e5      	b.n	e5d6 <z_impl_log_panic+0x12>
    e60a:	d3f5      	bcc.n	e5f8 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    e60c:	f7ff ff68 	bl	e4e0 <z_impl_log_process>
		while (log_process() == true) {
    e610:	2800      	cmp	r0, #0
    e612:	d1fb      	bne.n	e60c <z_impl_log_panic+0x48>
	panic_mode = true;
    e614:	2301      	movs	r3, #1
    e616:	702b      	strb	r3, [r5, #0]
}
    e618:	bd70      	pop	{r4, r5, r6, pc}
    e61a:	bf00      	nop
    e61c:	20022303 	.word	0x20022303
    e620:	000315ec 	.word	0x000315ec
    e624:	000315fc 	.word	0x000315fc
    e628:	000336cc 	.word	0x000336cc
    e62c:	0003367b 	.word	0x0003367b
    e630:	00032659 	.word	0x00032659
    e634:	000336ed 	.word	0x000336ed

0000e638 <log_process_thread_func>:
{
    e638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e63c:	4b2f      	ldr	r3, [pc, #188]	; (e6fc <log_process_thread_func+0xc4>)
    e63e:	4f30      	ldr	r7, [pc, #192]	; (e700 <log_process_thread_func+0xc8>)
    e640:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    e642:	091b      	lsrs	r3, r3, #4
    e644:	d10b      	bne.n	e65e <log_process_thread_func+0x26>
    e646:	492f      	ldr	r1, [pc, #188]	; (e704 <log_process_thread_func+0xcc>)
    e648:	f240 3347 	movw	r3, #839	; 0x347
    e64c:	4a2e      	ldr	r2, [pc, #184]	; (e708 <log_process_thread_func+0xd0>)
    e64e:	482f      	ldr	r0, [pc, #188]	; (e70c <log_process_thread_func+0xd4>)
    e650:	f01c f833 	bl	2a6ba <assert_print>
    e654:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e658:	482b      	ldr	r0, [pc, #172]	; (e708 <log_process_thread_func+0xd0>)
    e65a:	f01c f827 	bl	2a6ac <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    e65e:	2100      	movs	r1, #0
    e660:	4608      	mov	r0, r1
    e662:	f7ff fe11 	bl	e288 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e666:	4604      	mov	r4, r0
    e668:	b340      	cbz	r0, e6bc <log_process_thread_func+0x84>
    e66a:	f240 6867 	movw	r8, #1639	; 0x667
    e66e:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    e672:	f018 fed1 	bl	27418 <z_impl_z_current_get>
	proc_tid = process_tid;
    e676:	4b26      	ldr	r3, [pc, #152]	; (e710 <log_process_thread_func+0xd8>)
    e678:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e67a:	b130      	cbz	r0, e68a <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    e67c:	4b25      	ldr	r3, [pc, #148]	; (e714 <log_process_thread_func+0xdc>)
	    process_tid &&
    e67e:	681b      	ldr	r3, [r3, #0]
    e680:	2b09      	cmp	r3, #9
    e682:	dd02      	ble.n	e68a <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    e684:	4824      	ldr	r0, [pc, #144]	; (e718 <log_process_thread_func+0xe0>)
    e686:	f016 ff9f 	bl	255c8 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e68a:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    e68c:	f8df a088 	ldr.w	sl, [pc, #136]	; e718 <log_process_thread_func+0xe0>
		if (activate_mask) {
    e690:	b144      	cbz	r4, e6a4 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    e692:	4620      	mov	r0, r4
    e694:	f7ff fdc6 	bl	e224 <activate_foreach_backend>
			if (!activate_mask) {
    e698:	4604      	mov	r4, r0
    e69a:	b918      	cbnz	r0, e6a4 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    e69c:	f04f 38ff 	mov.w	r8, #4294967295
    e6a0:	f04f 39ff 	mov.w	r9, #4294967295
    e6a4:	f7ff ff1c 	bl	e4e0 <z_impl_log_process>
		if (log_process() == false) {
    e6a8:	4606      	mov	r6, r0
    e6aa:	b928      	cbnz	r0, e6b8 <log_process_thread_func+0x80>
			if (processed_any) {
    e6ac:	b95d      	cbnz	r5, e6c6 <log_process_thread_func+0x8e>
    e6ae:	4642      	mov	r2, r8
    e6b0:	464b      	mov	r3, r9
    e6b2:	4650      	mov	r0, sl
    e6b4:	f016 ffcc 	bl	25650 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e6b8:	4635      	mov	r5, r6
    e6ba:	e7e9      	b.n	e690 <log_process_thread_func+0x58>
    e6bc:	f04f 38ff 	mov.w	r8, #4294967295
    e6c0:	f04f 39ff 	mov.w	r9, #4294967295
    e6c4:	e7d5      	b.n	e672 <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e6c6:	4d0d      	ldr	r5, [pc, #52]	; (e6fc <log_process_thread_func+0xc4>)
    e6c8:	e008      	b.n	e6dc <log_process_thread_func+0xa4>
    e6ca:	d2f0      	bcs.n	e6ae <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    e6cc:	682b      	ldr	r3, [r5, #0]
    e6ce:	699b      	ldr	r3, [r3, #24]
    e6d0:	b11b      	cbz	r3, e6da <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    e6d2:	2200      	movs	r2, #0
    e6d4:	4628      	mov	r0, r5
    e6d6:	4611      	mov	r1, r2
    e6d8:	4798      	blx	r3
    e6da:	3510      	adds	r5, #16
    e6dc:	42bd      	cmp	r5, r7
    e6de:	d9f4      	bls.n	e6ca <log_process_thread_func+0x92>
    e6e0:	490e      	ldr	r1, [pc, #56]	; (e71c <log_process_thread_func+0xe4>)
    e6e2:	f240 333b 	movw	r3, #827	; 0x33b
    e6e6:	4a08      	ldr	r2, [pc, #32]	; (e708 <log_process_thread_func+0xd0>)
    e6e8:	4808      	ldr	r0, [pc, #32]	; (e70c <log_process_thread_func+0xd4>)
    e6ea:	f01b ffe6 	bl	2a6ba <assert_print>
    e6ee:	480c      	ldr	r0, [pc, #48]	; (e720 <log_process_thread_func+0xe8>)
    e6f0:	f01b ffe3 	bl	2a6ba <assert_print>
    e6f4:	f240 313b 	movw	r1, #827	; 0x33b
    e6f8:	e7ae      	b.n	e658 <log_process_thread_func+0x20>
    e6fa:	bf00      	nop
    e6fc:	000315ec 	.word	0x000315ec
    e700:	000315fc 	.word	0x000315fc
    e704:	0003370c 	.word	0x0003370c
    e708:	0003367b 	.word	0x0003367b
    e70c:	00032659 	.word	0x00032659
    e710:	20021478 	.word	0x20021478
    e714:	20021480 	.word	0x20021480
    e718:	20008c04 	.word	0x20008c04
    e71c:	000336cc 	.word	0x000336cc
    e720:	000336ed 	.word	0x000336ed

0000e724 <z_log_msg_post_finalize>:
{
    e724:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    e726:	482b      	ldr	r0, [pc, #172]	; (e7d4 <z_log_msg_post_finalize+0xb0>)
    e728:	f01c f8f8 	bl	2a91c <atomic_inc>
	if (panic_mode) {
    e72c:	4b2a      	ldr	r3, [pc, #168]	; (e7d8 <z_log_msg_post_finalize+0xb4>)
    e72e:	781b      	ldrb	r3, [r3, #0]
    e730:	2b00      	cmp	r3, #0
    e732:	d034      	beq.n	e79e <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    e734:	f04f 0320 	mov.w	r3, #32
    e738:	f3ef 8411 	mrs	r4, BASEPRI
    e73c:	f383 8812 	msr	BASEPRI_MAX, r3
    e740:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e744:	4825      	ldr	r0, [pc, #148]	; (e7dc <z_log_msg_post_finalize+0xb8>)
    e746:	f016 fc87 	bl	25058 <z_spin_lock_valid>
    e74a:	b968      	cbnz	r0, e768 <z_log_msg_post_finalize+0x44>
    e74c:	2394      	movs	r3, #148	; 0x94
    e74e:	4a24      	ldr	r2, [pc, #144]	; (e7e0 <z_log_msg_post_finalize+0xbc>)
    e750:	4924      	ldr	r1, [pc, #144]	; (e7e4 <z_log_msg_post_finalize+0xc0>)
    e752:	4825      	ldr	r0, [pc, #148]	; (e7e8 <z_log_msg_post_finalize+0xc4>)
    e754:	f01b ffb1 	bl	2a6ba <assert_print>
    e758:	4920      	ldr	r1, [pc, #128]	; (e7dc <z_log_msg_post_finalize+0xb8>)
    e75a:	4824      	ldr	r0, [pc, #144]	; (e7ec <z_log_msg_post_finalize+0xc8>)
    e75c:	f01b ffad 	bl	2a6ba <assert_print>
    e760:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e762:	481f      	ldr	r0, [pc, #124]	; (e7e0 <z_log_msg_post_finalize+0xbc>)
    e764:	f01b ffa2 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
    e768:	481c      	ldr	r0, [pc, #112]	; (e7dc <z_log_msg_post_finalize+0xb8>)
    e76a:	f016 fc91 	bl	25090 <z_spin_lock_set_owner>
    e76e:	f7ff feb7 	bl	e4e0 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e772:	481a      	ldr	r0, [pc, #104]	; (e7dc <z_log_msg_post_finalize+0xb8>)
    e774:	f016 fc7e 	bl	25074 <z_spin_unlock_valid>
    e778:	b958      	cbnz	r0, e792 <z_log_msg_post_finalize+0x6e>
    e77a:	23c2      	movs	r3, #194	; 0xc2
    e77c:	4a18      	ldr	r2, [pc, #96]	; (e7e0 <z_log_msg_post_finalize+0xbc>)
    e77e:	491c      	ldr	r1, [pc, #112]	; (e7f0 <z_log_msg_post_finalize+0xcc>)
    e780:	4819      	ldr	r0, [pc, #100]	; (e7e8 <z_log_msg_post_finalize+0xc4>)
    e782:	f01b ff9a 	bl	2a6ba <assert_print>
    e786:	4915      	ldr	r1, [pc, #84]	; (e7dc <z_log_msg_post_finalize+0xb8>)
    e788:	481a      	ldr	r0, [pc, #104]	; (e7f4 <z_log_msg_post_finalize+0xd0>)
    e78a:	f01b ff96 	bl	2a6ba <assert_print>
    e78e:	21c2      	movs	r1, #194	; 0xc2
    e790:	e7e7      	b.n	e762 <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    e792:	f384 8811 	msr	BASEPRI, r4
    e796:	f3bf 8f6f 	isb	sy
}
    e79a:	b002      	add	sp, #8
    e79c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    e79e:	4b16      	ldr	r3, [pc, #88]	; (e7f8 <z_log_msg_post_finalize+0xd4>)
    e7a0:	681b      	ldr	r3, [r3, #0]
    e7a2:	2b00      	cmp	r3, #0
    e7a4:	d0f9      	beq.n	e79a <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    e7a6:	b950      	cbnz	r0, e7be <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    e7a8:	2200      	movs	r2, #0
    e7aa:	2300      	movs	r3, #0
    e7ac:	4813      	ldr	r0, [pc, #76]	; (e7fc <z_log_msg_post_finalize+0xd8>)
    e7ae:	e9cd 2300 	strd	r2, r3, [sp]
    e7b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e7b6:	2300      	movs	r3, #0
    e7b8:	f019 fb18 	bl	27dec <z_impl_k_timer_start>
    e7bc:	e7ed      	b.n	e79a <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e7be:	280a      	cmp	r0, #10
    e7c0:	d1eb      	bne.n	e79a <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    e7c2:	480e      	ldr	r0, [pc, #56]	; (e7fc <z_log_msg_post_finalize+0xd8>)
    e7c4:	f021 fdee 	bl	303a4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    e7c8:	480d      	ldr	r0, [pc, #52]	; (e800 <z_log_msg_post_finalize+0xdc>)
}
    e7ca:	b002      	add	sp, #8
    e7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7d0:	f016 befa 	b.w	255c8 <z_impl_k_sem_give>
    e7d4:	20021480 	.word	0x20021480
    e7d8:	20022303 	.word	0x20022303
    e7dc:	20021470 	.word	0x20021470
    e7e0:	000333ee 	.word	0x000333ee
    e7e4:	00033447 	.word	0x00033447
    e7e8:	00032659 	.word	0x00032659
    e7ec:	0003345c 	.word	0x0003345c
    e7f0:	0003341b 	.word	0x0003341b
    e7f4:	00033432 	.word	0x00033432
    e7f8:	20021478 	.word	0x20021478
    e7fc:	200096e8 	.word	0x200096e8
    e800:	20008c04 	.word	0x20008c04

0000e804 <z_log_msg_commit>:
{
    e804:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    e806:	4b06      	ldr	r3, [pc, #24]	; (e820 <z_log_msg_commit+0x1c>)
{
    e808:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    e80a:	681b      	ldr	r3, [r3, #0]
    e80c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    e80e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    e810:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    e812:	4804      	ldr	r0, [pc, #16]	; (e824 <z_log_msg_commit+0x20>)
    e814:	f7ff f9e6 	bl	dbe4 <mpsc_pbuf_commit>
}
    e818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    e81c:	f7ff bf82 	b.w	e724 <z_log_msg_post_finalize>
    e820:	200083fc 	.word	0x200083fc
    e824:	20008a14 	.word	0x20008a14

0000e828 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    e828:	4a04      	ldr	r2, [pc, #16]	; (e83c <log_source_name_get+0x14>)
    e82a:	4b05      	ldr	r3, [pc, #20]	; (e840 <log_source_name_get+0x18>)
    e82c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    e82e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    e832:	bf34      	ite	cc
    e834:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    e838:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    e83a:	4770      	bx	lr
    e83c:	0003147c 	.word	0x0003147c
    e840:	000315ec 	.word	0x000315ec

0000e844 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    e844:	4b0e      	ldr	r3, [pc, #56]	; (e880 <log_backend_enable+0x3c>)
{
    e846:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    e848:	1ac3      	subs	r3, r0, r3
    e84a:	111b      	asrs	r3, r3, #4
    e84c:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    e84e:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    e850:	b948      	cbnz	r0, e866 <log_backend_enable+0x22>
    e852:	490c      	ldr	r1, [pc, #48]	; (e884 <log_backend_enable+0x40>)
    e854:	480c      	ldr	r0, [pc, #48]	; (e888 <log_backend_enable+0x44>)
    e856:	23de      	movs	r3, #222	; 0xde
    e858:	4a0c      	ldr	r2, [pc, #48]	; (e88c <log_backend_enable+0x48>)
    e85a:	f01b ff2e 	bl	2a6ba <assert_print>
    e85e:	21de      	movs	r1, #222	; 0xde
    e860:	480a      	ldr	r0, [pc, #40]	; (e88c <log_backend_enable+0x48>)
    e862:	f01b ff23 	bl	2a6ac <assert_post_action>
	backend->cb->id = id;
    e866:	6844      	ldr	r4, [r0, #4]
    e868:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    e86a:	6843      	ldr	r3, [r0, #4]
    e86c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    e86e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    e870:	6843      	ldr	r3, [r0, #4]
    e872:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    e874:	6843      	ldr	r3, [r0, #4]
    e876:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    e878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    e87c:	f7ff bd90 	b.w	e3a0 <z_log_notify_backend_enabled>
    e880:	000315ec 	.word	0x000315ec
    e884:	000337ac 	.word	0x000337ac
    e888:	00032659 	.word	0x00032659
    e88c:	00033774 	.word	0x00033774

0000e890 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    e894:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    e898:	b08f      	sub	sp, #60	; 0x3c
    e89a:	f3c1 2649 	ubfx	r6, r1, #9, #10
    e89e:	460d      	mov	r5, r1
    e8a0:	4690      	mov	r8, r2
    e8a2:	4699      	mov	r9, r3
    e8a4:	9005      	str	r0, [sp, #20]
    e8a6:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    e8a8:	2e00      	cmp	r6, #0
    e8aa:	d03d      	beq.n	e928 <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
    e8ac:	f04f 0b04 	mov.w	fp, #4
    e8b0:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    e8b4:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    e8b6:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    e8b8:	4631      	mov	r1, r6
    e8ba:	ab0b      	add	r3, sp, #44	; 0x2c
    e8bc:	4640      	mov	r0, r8
    e8be:	f8cd b008 	str.w	fp, [sp, #8]
    e8c2:	9701      	str	r7, [sp, #4]
    e8c4:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    e8c8:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    e8cc:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e8ce:	9607      	str	r6, [sp, #28]
    e8d0:	f7fd fdfc 	bl	c4cc <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    e8d4:	f3c0 0309 	ubfx	r3, r0, #0, #10
    e8d8:	1918      	adds	r0, r3, r4
    e8da:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e8de:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    e8e0:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e8e2:	f363 2552 	bfi	r5, r3, #9, #10
    e8e6:	9306      	str	r3, [sp, #24]
    e8e8:	f7ff fdde 	bl	e4a8 <z_log_msg_alloc>
		if (msg) {
    e8ec:	4604      	mov	r4, r0
    e8ee:	b308      	cbz	r0, e934 <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
    e8f0:	2200      	movs	r2, #0
    e8f2:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    e8f4:	3010      	adds	r0, #16
    e8f6:	900b      	str	r0, [sp, #44]	; 0x2c
    e8f8:	930c      	str	r3, [sp, #48]	; 0x30
    e8fa:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e8fc:	4640      	mov	r0, r8
    e8fe:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    e902:	4a12      	ldr	r2, [pc, #72]	; (e94c <z_impl_z_log_msg_static_create+0xbc>)
    e904:	9907      	ldr	r1, [sp, #28]
    e906:	f8cd a000 	str.w	sl, [sp]
    e90a:	ab0b      	add	r3, sp, #44	; 0x2c
    e90c:	f7fd fdde 	bl	c4cc <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    e910:	2800      	cmp	r0, #0
    e912:	da0f      	bge.n	e934 <z_impl_z_log_msg_static_create+0xa4>
    e914:	490e      	ldr	r1, [pc, #56]	; (e950 <z_impl_z_log_msg_static_create+0xc0>)
    e916:	480f      	ldr	r0, [pc, #60]	; (e954 <z_impl_z_log_msg_static_create+0xc4>)
    e918:	2349      	movs	r3, #73	; 0x49
    e91a:	4a0f      	ldr	r2, [pc, #60]	; (e958 <z_impl_z_log_msg_static_create+0xc8>)
    e91c:	f01b fecd 	bl	2a6ba <assert_print>
    e920:	2149      	movs	r1, #73	; 0x49
    e922:	480d      	ldr	r0, [pc, #52]	; (e958 <z_impl_z_log_msg_static_create+0xc8>)
    e924:	f01b fec2 	bl	2a6ac <assert_post_action>
    e928:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e92c:	0880      	lsrs	r0, r0, #2
    e92e:	f7ff fdbb 	bl	e4a8 <z_log_msg_alloc>
    e932:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    e934:	f366 2552 	bfi	r5, r6, #9, #10
    e938:	464b      	mov	r3, r9
    e93a:	462a      	mov	r2, r5
    e93c:	4620      	mov	r0, r4
    e93e:	9905      	ldr	r1, [sp, #20]
}
    e940:	b00f      	add	sp, #60	; 0x3c
    e942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    e946:	f01c b80d 	b.w	2a964 <z_log_msg_finalize>
    e94a:	bf00      	nop
    e94c:	0002a939 	.word	0x0002a939
    e950:	000337f8 	.word	0x000337f8
    e954:	00032659 	.word	0x00032659
    e958:	000337cc 	.word	0x000337cc

0000e95c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    e95c:	b40e      	push	{r1, r2, r3}
    e95e:	b503      	push	{r0, r1, lr}
    e960:	ab03      	add	r3, sp, #12
    e962:	f853 2b04 	ldr.w	r2, [r3], #4
    e966:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e968:	4804      	ldr	r0, [pc, #16]	; (e97c <print_formatted+0x20>)
	va_start(args, fmt);
    e96a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e96c:	f01c f821 	bl	2a9b2 <cbvprintf>
	va_end(args);

	return length;
}
    e970:	b002      	add	sp, #8
    e972:	f85d eb04 	ldr.w	lr, [sp], #4
    e976:	b003      	add	sp, #12
    e978:	4770      	bx	lr
    e97a:	bf00      	nop
    e97c:	0000e99d 	.word	0x0000e99d

0000e980 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e980:	06ca      	lsls	r2, r1, #27
    e982:	d405      	bmi.n	e990 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e984:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    e986:	bf4c      	ite	mi
    e988:	4902      	ldrmi	r1, [pc, #8]	; (e994 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    e98a:	4903      	ldrpl	r1, [pc, #12]	; (e998 <newline_print+0x18>)
    e98c:	f7ff bfe6 	b.w	e95c <print_formatted>
	}
}
    e990:	4770      	bx	lr
    e992:	bf00      	nop
    e994:	000368eb 	.word	0x000368eb
    e998:	00032c70 	.word	0x00032c70

0000e99c <out_func>:
{
    e99c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    e99e:	684b      	ldr	r3, [r1, #4]
{
    e9a0:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    e9a2:	681a      	ldr	r2, [r3, #0]
    e9a4:	68cb      	ldr	r3, [r1, #12]
{
    e9a6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    e9a8:	429a      	cmp	r2, r3
    e9aa:	d102      	bne.n	e9b2 <out_func+0x16>
		log_output_flush(out_ctx);
    e9ac:	4608      	mov	r0, r1
    e9ae:	f01c f807 	bl	2a9c0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e9b2:	6863      	ldr	r3, [r4, #4]
    e9b4:	e8d3 2fef 	ldaex	r2, [r3]
    e9b8:	1c51      	adds	r1, r2, #1
    e9ba:	e8c3 1fe0 	stlex	r0, r1, [r3]
    e9be:	2800      	cmp	r0, #0
    e9c0:	d1f8      	bne.n	e9b4 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    e9c2:	68a3      	ldr	r3, [r4, #8]
    e9c4:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    e9c6:	6863      	ldr	r3, [r4, #4]
    e9c8:	681a      	ldr	r2, [r3, #0]
    e9ca:	68e3      	ldr	r3, [r4, #12]
    e9cc:	429a      	cmp	r2, r3
    e9ce:	d909      	bls.n	e9e4 <out_func+0x48>
    e9d0:	4905      	ldr	r1, [pc, #20]	; (e9e8 <out_func+0x4c>)
    e9d2:	4806      	ldr	r0, [pc, #24]	; (e9ec <out_func+0x50>)
    e9d4:	2379      	movs	r3, #121	; 0x79
    e9d6:	4a06      	ldr	r2, [pc, #24]	; (e9f0 <out_func+0x54>)
    e9d8:	f01b fe6f 	bl	2a6ba <assert_print>
    e9dc:	2179      	movs	r1, #121	; 0x79
    e9de:	4804      	ldr	r0, [pc, #16]	; (e9f0 <out_func+0x54>)
    e9e0:	f01b fe64 	bl	2a6ac <assert_post_action>
}
    e9e4:	2000      	movs	r0, #0
    e9e6:	bd38      	pop	{r3, r4, r5, pc}
    e9e8:	00033830 	.word	0x00033830
    e9ec:	00032659 	.word	0x00032659
    e9f0:	00033801 	.word	0x00033801

0000e9f4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    e9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9f8:	b089      	sub	sp, #36	; 0x24
    e9fa:	469a      	mov	sl, r3
    e9fc:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    ea00:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    ea04:	9305      	str	r3, [sp, #20]
    ea06:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ea08:	4604      	mov	r4, r0
    ea0a:	460d      	mov	r5, r1
    ea0c:	9e16      	ldr	r6, [sp, #88]	; 0x58
    ea0e:	9206      	str	r2, [sp, #24]
    ea10:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    ea12:	f1bb 0f00 	cmp.w	fp, #0
    ea16:	f000 8085 	beq.w	eb24 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ea1a:	f006 0308 	and.w	r3, r6, #8
    ea1e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    ea20:	f01b ff88 	bl	2a934 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    ea24:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    ea28:	4602      	mov	r2, r0
    ea2a:	2800      	cmp	r0, #0
    ea2c:	d049      	beq.n	eac2 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    ea2e:	4620      	mov	r0, r4
    ea30:	498c      	ldr	r1, [pc, #560]	; (ec64 <log_output_process+0x270>)
    ea32:	f7ff ff93 	bl	e95c <print_formatted>
    ea36:	4680      	mov	r8, r0
	if (stamp) {
    ea38:	f1b9 0f00 	cmp.w	r9, #0
    ea3c:	d008      	beq.n	ea50 <log_output_process+0x5c>
	if (!format) {
    ea3e:	f016 0f44 	tst.w	r6, #68	; 0x44
    ea42:	d140      	bne.n	eac6 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    ea44:	462a      	mov	r2, r5
    ea46:	4620      	mov	r0, r4
    ea48:	4987      	ldr	r1, [pc, #540]	; (ec68 <log_output_process+0x274>)
    ea4a:	f7ff ff87 	bl	e95c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    ea4e:	4480      	add	r8, r0
	if (color) {
    ea50:	f006 0301 	and.w	r3, r6, #1
    ea54:	b153      	cbz	r3, ea6c <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    ea56:	4b85      	ldr	r3, [pc, #532]	; (ec6c <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    ea58:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    ea5a:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    ea5e:	4b84      	ldr	r3, [pc, #528]	; (ec70 <log_output_process+0x27c>)
    ea60:	4984      	ldr	r1, [pc, #528]	; (ec74 <log_output_process+0x280>)
    ea62:	2a00      	cmp	r2, #0
    ea64:	bf08      	it	eq
    ea66:	461a      	moveq	r2, r3
    ea68:	f7ff ff78 	bl	e95c <print_formatted>
	if (level_on) {
    ea6c:	f006 0308 	and.w	r3, r6, #8
    ea70:	2b00      	cmp	r3, #0
    ea72:	d054      	beq.n	eb1e <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    ea74:	4b80      	ldr	r3, [pc, #512]	; (ec78 <log_output_process+0x284>)
    ea76:	4620      	mov	r0, r4
    ea78:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    ea7c:	497f      	ldr	r1, [pc, #508]	; (ec7c <log_output_process+0x288>)
    ea7e:	f7ff ff6d 	bl	e95c <print_formatted>
    ea82:	4605      	mov	r5, r0
	if (domain) {
    ea84:	9b06      	ldr	r3, [sp, #24]
    ea86:	b12b      	cbz	r3, ea94 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    ea88:	461a      	mov	r2, r3
    ea8a:	4620      	mov	r0, r4
    ea8c:	497c      	ldr	r1, [pc, #496]	; (ec80 <log_output_process+0x28c>)
    ea8e:	f7ff ff65 	bl	e95c <print_formatted>
    ea92:	4405      	add	r5, r0
	if (source) {
    ea94:	f1ba 0f00 	cmp.w	sl, #0
    ea98:	d005      	beq.n	eaa6 <log_output_process+0xb2>
		total += print_formatted(output,
    ea9a:	4652      	mov	r2, sl
    ea9c:	4620      	mov	r0, r4
    ea9e:	4979      	ldr	r1, [pc, #484]	; (ec84 <log_output_process+0x290>)
    eaa0:	f7ff ff5c 	bl	e95c <print_formatted>
    eaa4:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    eaa6:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    eaa8:	2f00      	cmp	r7, #0
    eaaa:	d149      	bne.n	eb40 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    eaac:	9b04      	ldr	r3, [sp, #16]
    eaae:	2b00      	cmp	r3, #0
    eab0:	d160      	bne.n	eb74 <log_output_process+0x180>
	if (color) {
    eab2:	07f3      	lsls	r3, r6, #31
    eab4:	f100 80cf 	bmi.w	ec56 <log_output_process+0x262>
	newline_print(output, flags);
    eab8:	4631      	mov	r1, r6
    eaba:	4620      	mov	r0, r4
    eabc:	f7ff ff60 	bl	e980 <newline_print>
}
    eac0:	e0c3      	b.n	ec4a <log_output_process+0x256>
	uint32_t length = 0U;
    eac2:	4680      	mov	r8, r0
    eac4:	e7b8      	b.n	ea38 <log_output_process+0x44>
	} else if (freq != 0U) {
    eac6:	4b70      	ldr	r3, [pc, #448]	; (ec88 <log_output_process+0x294>)
    eac8:	6818      	ldr	r0, [r3, #0]
    eaca:	2800      	cmp	r0, #0
    eacc:	d0bf      	beq.n	ea4e <log_output_process+0x5a>
		timestamp /= timestamp_div;
    eace:	4b6f      	ldr	r3, [pc, #444]	; (ec8c <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    ead0:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    ead4:	681b      	ldr	r3, [r3, #0]
    ead6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    eada:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    eade:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    eae2:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    eae6:	fb09 f505 	mul.w	r5, r9, r5
    eaea:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eaee:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    eaf2:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    eaf6:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eafa:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    eafe:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eb02:	fb09 f505 	mul.w	r5, r9, r5
    eb06:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    eb0a:	fb0c 1113 	mls	r1, ip, r3, r1
    eb0e:	4620      	mov	r0, r4
    eb10:	9100      	str	r1, [sp, #0]
    eb12:	e9cd e501 	strd	lr, r5, [sp, #4]
    eb16:	495e      	ldr	r1, [pc, #376]	; (ec90 <log_output_process+0x29c>)
    eb18:	f7ff ff20 	bl	e95c <print_formatted>
    eb1c:	e797      	b.n	ea4e <log_output_process+0x5a>
	int total = 0;
    eb1e:	f006 0508 	and.w	r5, r6, #8
    eb22:	e7af      	b.n	ea84 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    eb24:	f1ba 0f01 	cmp.w	sl, #1
    eb28:	d106      	bne.n	eb38 <log_output_process+0x144>
	if (package) {
    eb2a:	b9ef      	cbnz	r7, eb68 <log_output_process+0x174>
	if (data_len) {
    eb2c:	9b04      	ldr	r3, [sp, #16]
    eb2e:	2b00      	cmp	r3, #0
    eb30:	f000 808b 	beq.w	ec4a <log_output_process+0x256>
		prefix_offset = 0;
    eb34:	2500      	movs	r5, #0
    eb36:	e01d      	b.n	eb74 <log_output_process+0x180>
	if (package) {
    eb38:	2f00      	cmp	r7, #0
    eb3a:	d0f7      	beq.n	eb2c <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    eb3c:	4855      	ldr	r0, [pc, #340]	; (ec94 <log_output_process+0x2a0>)
    eb3e:	e014      	b.n	eb6a <log_output_process+0x176>
		cb = out_func;
    eb40:	4855      	ldr	r0, [pc, #340]	; (ec98 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    eb42:	463b      	mov	r3, r7
    eb44:	4622      	mov	r2, r4
    eb46:	4955      	ldr	r1, [pc, #340]	; (ec9c <log_output_process+0x2a8>)
    eb48:	f01b fb11 	bl	2a16e <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    eb4c:	2800      	cmp	r0, #0
    eb4e:	da0e      	bge.n	eb6e <log_output_process+0x17a>
    eb50:	4953      	ldr	r1, [pc, #332]	; (eca0 <log_output_process+0x2ac>)
    eb52:	4854      	ldr	r0, [pc, #336]	; (eca4 <log_output_process+0x2b0>)
    eb54:	f44f 7300 	mov.w	r3, #512	; 0x200
    eb58:	4a53      	ldr	r2, [pc, #332]	; (eca8 <log_output_process+0x2b4>)
    eb5a:	f01b fdae 	bl	2a6ba <assert_print>
    eb5e:	f44f 7100 	mov.w	r1, #512	; 0x200
    eb62:	4851      	ldr	r0, [pc, #324]	; (eca8 <log_output_process+0x2b4>)
    eb64:	f01b fda2 	bl	2a6ac <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    eb68:	484b      	ldr	r0, [pc, #300]	; (ec98 <log_output_process+0x2a4>)
		prefix_offset = 0;
    eb6a:	465d      	mov	r5, fp
    eb6c:	e7e9      	b.n	eb42 <log_output_process+0x14e>
	if (data_len) {
    eb6e:	9b04      	ldr	r3, [sp, #16]
    eb70:	2b00      	cmp	r3, #0
    eb72:	d066      	beq.n	ec42 <log_output_process+0x24e>
		print_formatted(output, " ");
    eb74:	f8df 8134 	ldr.w	r8, [pc, #308]	; ecac <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    eb78:	f8df 9134 	ldr.w	r9, [pc, #308]	; ecb0 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    eb7c:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    eb7e:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    eb80:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    eb82:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    eb84:	bf28      	it	cs
    eb86:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    eb88:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    eb8c:	f7ff fef8 	bl	e980 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    eb90:	4555      	cmp	r5, sl
    eb92:	dc43      	bgt.n	ec1c <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    eb94:	9b05      	ldr	r3, [sp, #20]
    eb96:	4649      	mov	r1, r9
    eb98:	4620      	mov	r0, r4
    eb9a:	781a      	ldrb	r2, [r3, #0]
    eb9c:	f7ff fede 	bl	e95c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    eba0:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    eba4:	f01a 0f07 	tst.w	sl, #7
    eba8:	d103      	bne.n	ebb2 <log_output_process+0x1be>
			print_formatted(output, " ");
    ebaa:	4641      	mov	r1, r8
    ebac:	4620      	mov	r0, r4
    ebae:	f7ff fed5 	bl	e95c <print_formatted>
		if (i < length) {
    ebb2:	4557      	cmp	r7, sl
    ebb4:	d939      	bls.n	ec2a <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    ebb6:	9b05      	ldr	r3, [sp, #20]
    ebb8:	4649      	mov	r1, r9
    ebba:	4620      	mov	r0, r4
    ebbc:	f813 200a 	ldrb.w	r2, [r3, sl]
    ebc0:	f7ff fecc 	bl	e95c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ebc4:	f10a 0a01 	add.w	sl, sl, #1
    ebc8:	f1ba 0f10 	cmp.w	sl, #16
    ebcc:	d1ea      	bne.n	eba4 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ebce:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    ebd2:	4620      	mov	r0, r4
    ebd4:	4937      	ldr	r1, [pc, #220]	; (ecb4 <log_output_process+0x2c0>)
    ebd6:	f7ff fec1 	bl	e95c <print_formatted>
		if (i < length) {
    ebda:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    ebdc:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    ebde:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    ebe0:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    ebe2:	4b35      	ldr	r3, [pc, #212]	; (ecb8 <log_output_process+0x2c4>)
    ebe4:	5c99      	ldrb	r1, [r3, r2]
    ebe6:	f011 0f97 	tst.w	r1, #151	; 0x97
    ebea:	bf08      	it	eq
    ebec:	222e      	moveq	r2, #46	; 0x2e
    ebee:	4933      	ldr	r1, [pc, #204]	; (ecbc <log_output_process+0x2c8>)
    ebf0:	f7ff feb4 	bl	e95c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ebf4:	f10a 0a01 	add.w	sl, sl, #1
    ebf8:	f1ba 0f10 	cmp.w	sl, #16
    ebfc:	d01a      	beq.n	ec34 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    ebfe:	f01a 0f07 	tst.w	sl, #7
    ec02:	d103      	bne.n	ec0c <log_output_process+0x218>
			print_formatted(output, " ");
    ec04:	4641      	mov	r1, r8
    ec06:	4620      	mov	r0, r4
    ec08:	f7ff fea8 	bl	e95c <print_formatted>
		if (i < length) {
    ec0c:	4557      	cmp	r7, sl
    ec0e:	4652      	mov	r2, sl
    ec10:	d8e4      	bhi.n	ebdc <log_output_process+0x1e8>
			print_formatted(output, " ");
    ec12:	4641      	mov	r1, r8
    ec14:	4620      	mov	r0, r4
    ec16:	f7ff fea1 	bl	e95c <print_formatted>
    ec1a:	e7eb      	b.n	ebf4 <log_output_process+0x200>
		print_formatted(output, " ");
    ec1c:	4641      	mov	r1, r8
    ec1e:	4620      	mov	r0, r4
    ec20:	f7ff fe9c 	bl	e95c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    ec24:	f10a 0a01 	add.w	sl, sl, #1
    ec28:	e7b2      	b.n	eb90 <log_output_process+0x19c>
			print_formatted(output, "   ");
    ec2a:	4620      	mov	r0, r4
    ec2c:	4924      	ldr	r1, [pc, #144]	; (ecc0 <log_output_process+0x2cc>)
    ec2e:	f7ff fe95 	bl	e95c <print_formatted>
    ec32:	e7c7      	b.n	ebc4 <log_output_process+0x1d0>
		data += length;
    ec34:	9b05      	ldr	r3, [sp, #20]
    ec36:	443b      	add	r3, r7
    ec38:	9305      	str	r3, [sp, #20]
	} while (len);
    ec3a:	9b04      	ldr	r3, [sp, #16]
    ec3c:	1bdb      	subs	r3, r3, r7
    ec3e:	9304      	str	r3, [sp, #16]
    ec40:	d19c      	bne.n	eb7c <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    ec42:	f1bb 0f00 	cmp.w	fp, #0
    ec46:	f47f af34 	bne.w	eab2 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    ec4a:	4620      	mov	r0, r4
}
    ec4c:	b009      	add	sp, #36	; 0x24
    ec4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    ec52:	f01b beb5 	b.w	2a9c0 <log_output_flush>
		print_formatted(output, "%s", log_color);
    ec56:	4620      	mov	r0, r4
    ec58:	4a05      	ldr	r2, [pc, #20]	; (ec70 <log_output_process+0x27c>)
    ec5a:	4906      	ldr	r1, [pc, #24]	; (ec74 <log_output_process+0x280>)
    ec5c:	f7ff fe7e 	bl	e95c <print_formatted>
}
    ec60:	e72a      	b.n	eab8 <log_output_process+0xc4>
    ec62:	bf00      	nop
    ec64:	00033865 	.word	0x00033865
    ec68:	00033869 	.word	0x00033869
    ec6c:	00031b58 	.word	0x00031b58
    ec70:	00033860 	.word	0x00033860
    ec74:	0003280c 	.word	0x0003280c
    ec78:	00031b6c 	.word	0x00031b6c
    ec7c:	0003388e 	.word	0x0003388e
    ec80:	00033894 	.word	0x00033894
    ec84:	00033898 	.word	0x00033898
    ec88:	2002148c 	.word	0x2002148c
    ec8c:	20021488 	.word	0x20021488
    ec90:	00033872 	.word	0x00033872
    ec94:	0002a9db 	.word	0x0002a9db
    ec98:	0000e99d 	.word	0x0000e99d
    ec9c:	0002a9b3 	.word	0x0002a9b3
    eca0:	0003389d 	.word	0x0003389d
    eca4:	00032659 	.word	0x00032659
    eca8:	00033801 	.word	0x00033801
    ecac:	00037a69 	.word	0x00037a69
    ecb0:	000338a6 	.word	0x000338a6
    ecb4:	000338ac 	.word	0x000338ac
    ecb8:	00038bb5 	.word	0x00038bb5
    ecbc:	000338ae 	.word	0x000338ae
    ecc0:	00037a67 	.word	0x00037a67

0000ecc4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    ecc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    ecc8:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    ecca:	684b      	ldr	r3, [r1, #4]
    eccc:	4605      	mov	r5, r0
    ecce:	460c      	mov	r4, r1
    ecd0:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    ecd2:	688e      	ldr	r6, [r1, #8]
    ecd4:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    ecd6:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    ecda:	b15b      	cbz	r3, ecf4 <log_output_msg_process+0x30>
    ecdc:	4a13      	ldr	r2, [pc, #76]	; (ed2c <log_output_msg_process+0x68>)
    ecde:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    ece0:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ece4:	2900      	cmp	r1, #0
    ece6:	db1f      	blt.n	ed28 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    ece8:	7820      	ldrb	r0, [r4, #0]
    ecea:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ecee:	f7ff fd9b 	bl	e828 <log_source_name_get>
    ecf2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    ecf4:	4621      	mov	r1, r4
    ecf6:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    ecfa:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    ecfc:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    ed00:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    ed02:	eb01 0402 	add.w	r4, r1, r2
    ed06:	bf08      	it	eq
    ed08:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    ed0a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    ed0e:	e9cd 0803 	strd	r0, r8, [sp, #12]
    ed12:	e9cd 1401 	strd	r1, r4, [sp, #4]
    ed16:	2200      	movs	r2, #0
    ed18:	4631      	mov	r1, r6
    ed1a:	4628      	mov	r0, r5
    ed1c:	9700      	str	r7, [sp, #0]
    ed1e:	f7ff fe69 	bl	e9f4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    ed22:	b006      	add	sp, #24
    ed24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ed28:	2300      	movs	r3, #0
    ed2a:	e7e3      	b.n	ecf4 <log_output_msg_process+0x30>
    ed2c:	0003147c 	.word	0x0003147c

0000ed30 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ed30:	f242 730f 	movw	r3, #9999	; 0x270f
{
    ed34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ed36:	428b      	cmp	r3, r1
    ed38:	bf28      	it	cs
    ed3a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    ed3c:	6805      	ldr	r5, [r0, #0]
{
    ed3e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ed40:	2105      	movs	r1, #5
    ed42:	4668      	mov	r0, sp
    ed44:	4a0d      	ldr	r2, [pc, #52]	; (ed7c <log_output_dropped_process+0x4c>)
    ed46:	f01b fb03 	bl	2a350 <snprintk>
    ed4a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    ed4c:	6863      	ldr	r3, [r4, #4]
    ed4e:	4628      	mov	r0, r5
    ed50:	220b      	movs	r2, #11
    ed52:	685b      	ldr	r3, [r3, #4]
    ed54:	490a      	ldr	r1, [pc, #40]	; (ed80 <log_output_dropped_process+0x50>)
    ed56:	f01b fe1f 	bl	2a998 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    ed5a:	6863      	ldr	r3, [r4, #4]
    ed5c:	4632      	mov	r2, r6
    ed5e:	4669      	mov	r1, sp
    ed60:	4628      	mov	r0, r5
    ed62:	685b      	ldr	r3, [r3, #4]
    ed64:	f01b fe18 	bl	2a998 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    ed68:	6863      	ldr	r3, [r4, #4]
    ed6a:	221b      	movs	r2, #27
    ed6c:	4628      	mov	r0, r5
    ed6e:	685b      	ldr	r3, [r3, #4]
    ed70:	4904      	ldr	r1, [pc, #16]	; (ed84 <log_output_dropped_process+0x54>)
    ed72:	f01b fe11 	bl	2a998 <buffer_write>
		     output->control_block->ctx);
}
    ed76:	b002      	add	sp, #8
    ed78:	bd70      	pop	{r4, r5, r6, pc}
    ed7a:	bf00      	nop
    ed7c:	000327f6 	.word	0x000327f6
    ed80:	000338cd 	.word	0x000338cd
    ed84:	000338b1 	.word	0x000338b1

0000ed88 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    ed88:	2100      	movs	r1, #0
    ed8a:	2301      	movs	r3, #1
    ed8c:	4a06      	ldr	r2, [pc, #24]	; (eda8 <log_output_timestamp_freq_set+0x20>)
    ed8e:	4290      	cmp	r0, r2
    ed90:	d806      	bhi.n	eda0 <log_output_timestamp_freq_set+0x18>
    ed92:	4a06      	ldr	r2, [pc, #24]	; (edac <log_output_timestamp_freq_set+0x24>)
    ed94:	b901      	cbnz	r1, ed98 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    ed96:	2301      	movs	r3, #1
    ed98:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    ed9a:	4b05      	ldr	r3, [pc, #20]	; (edb0 <log_output_timestamp_freq_set+0x28>)
    ed9c:	6018      	str	r0, [r3, #0]
}
    ed9e:	4770      	bx	lr
		timestamp_div *= 2U;
    eda0:	2101      	movs	r1, #1
		frequency /= 2U;
    eda2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    eda4:	005b      	lsls	r3, r3, #1
    eda6:	e7f2      	b.n	ed8e <log_output_timestamp_freq_set+0x6>
    eda8:	000f4240 	.word	0x000f4240
    edac:	20021488 	.word	0x20021488
    edb0:	2002148c 	.word	0x2002148c

0000edb4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    edb4:	2201      	movs	r2, #1
    edb6:	4b01      	ldr	r3, [pc, #4]	; (edbc <log_backend_rtt_init+0x8>)
    edb8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    edba:	4770      	bx	lr
    edbc:	20022304 	.word	0x20022304

0000edc0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    edc0:	4b01      	ldr	r3, [pc, #4]	; (edc8 <format_set+0x8>)
	return 0;
}
    edc2:	2000      	movs	r0, #0
	log_format_current = log_type;
    edc4:	6019      	str	r1, [r3, #0]
}
    edc6:	4770      	bx	lr
    edc8:	200214a4 	.word	0x200214a4

0000edcc <panic>:
	panic_mode = true;
    edcc:	2201      	movs	r2, #1
    edce:	4b02      	ldr	r3, [pc, #8]	; (edd8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    edd0:	4802      	ldr	r0, [pc, #8]	; (eddc <panic+0x10>)
    edd2:	701a      	strb	r2, [r3, #0]
    edd4:	f01b bdf4 	b.w	2a9c0 <log_output_flush>
    edd8:	20022305 	.word	0x20022305
    eddc:	00031b9c 	.word	0x00031b9c

0000ede0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    ede0:	4801      	ldr	r0, [pc, #4]	; (ede8 <dropped+0x8>)
    ede2:	f7ff bfa5 	b.w	ed30 <log_output_dropped_process>
    ede6:	bf00      	nop
    ede8:	00031b9c 	.word	0x00031b9c

0000edec <process>:
{
    edec:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    edee:	4b06      	ldr	r3, [pc, #24]	; (ee08 <process+0x1c>)
{
    edf0:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    edf2:	6818      	ldr	r0, [r3, #0]
    edf4:	f7ff fabe 	bl	e374 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    edf8:	4621      	mov	r1, r4
}
    edfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    edfe:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    ee00:	220f      	movs	r2, #15
    ee02:	4802      	ldr	r0, [pc, #8]	; (ee0c <process+0x20>)
    ee04:	4718      	bx	r3
    ee06:	bf00      	nop
    ee08:	200214a4 	.word	0x200214a4
    ee0c:	00031b9c 	.word	0x00031b9c

0000ee10 <on_failed_write>:
	if (retry_cnt == 0) {
    ee10:	b910      	cbnz	r0, ee18 <on_failed_write+0x8>
		host_present = false;
    ee12:	4b07      	ldr	r3, [pc, #28]	; (ee30 <on_failed_write+0x20>)
    ee14:	7018      	strb	r0, [r3, #0]
}
    ee16:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    ee18:	4b06      	ldr	r3, [pc, #24]	; (ee34 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    ee1a:	781b      	ldrb	r3, [r3, #0]
    ee1c:	b11b      	cbz	r3, ee26 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    ee1e:	f241 3088 	movw	r0, #5000	; 0x1388
    ee22:	f021 ba8d 	b.w	30340 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    ee26:	20a4      	movs	r0, #164	; 0xa4
    ee28:	2100      	movs	r1, #0
    ee2a:	f018 bac1 	b.w	273b0 <z_impl_k_sleep>
    ee2e:	bf00      	nop
    ee30:	20022304 	.word	0x20022304
    ee34:	20022305 	.word	0x20022305

0000ee38 <data_out_block_mode>:
{
    ee38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee3c:	4680      	mov	r8, r0
    ee3e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    ee40:	2404      	movs	r4, #4
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    ee42:	f8df 9070 	ldr.w	r9, [pc, #112]	; eeb4 <data_out_block_mode+0x7c>
    ee46:	4f1c      	ldr	r7, [pc, #112]	; (eeb8 <data_out_block_mode+0x80>)
		if (!is_sync_mode()) {
    ee48:	f899 5000 	ldrb.w	r5, [r9]
    ee4c:	b995      	cbnz	r5, ee74 <data_out_block_mode+0x3c>
			RTT_LOCK();
    ee4e:	f015 fc3d 	bl	246cc <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    ee52:	4628      	mov	r0, r5
    ee54:	4632      	mov	r2, r6
    ee56:	4641      	mov	r1, r8
    ee58:	f015 fbe6 	bl	24628 <SEGGER_RTT_WriteSkipNoLock>
    ee5c:	4605      	mov	r5, r0
			RTT_UNLOCK();
    ee5e:	f015 fc3f 	bl	246e0 <zephyr_rtt_mutex_unlock>
		if (ret) {
    ee62:	b1e5      	cbz	r5, ee9e <data_out_block_mode+0x66>
	host_present = true;
    ee64:	2301      	movs	r3, #1
    ee66:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    ee68:	f899 3000 	ldrb.w	r3, [r9]
    ee6c:	b973      	cbnz	r3, ee8c <data_out_block_mode+0x54>
}
    ee6e:	4630      	mov	r0, r6
    ee70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    ee74:	4632      	mov	r2, r6
    ee76:	4641      	mov	r1, r8
    ee78:	2000      	movs	r0, #0
    ee7a:	f015 fbd5 	bl	24628 <SEGGER_RTT_WriteSkipNoLock>
    ee7e:	4605      	mov	r5, r0
    ee80:	e7ef      	b.n	ee62 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    ee82:	4620      	mov	r0, r4
    ee84:	1e65      	subs	r5, r4, #1
    ee86:	f7ff ffc3 	bl	ee10 <on_failed_write>
    ee8a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    ee8c:	2000      	movs	r0, #0
    ee8e:	f015 fc13 	bl	246b8 <SEGGER_RTT_HasDataUp>
    ee92:	2800      	cmp	r0, #0
    ee94:	d0eb      	beq.n	ee6e <data_out_block_mode+0x36>
    ee96:	783b      	ldrb	r3, [r7, #0]
    ee98:	2b00      	cmp	r3, #0
    ee9a:	d1f2      	bne.n	ee82 <data_out_block_mode+0x4a>
    ee9c:	e7e7      	b.n	ee6e <data_out_block_mode+0x36>
		} else if (host_present) {
    ee9e:	783b      	ldrb	r3, [r7, #0]
    eea0:	2b00      	cmp	r3, #0
    eea2:	d0e4      	beq.n	ee6e <data_out_block_mode+0x36>
			retry_cnt--;
    eea4:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    eea6:	4620      	mov	r0, r4
    eea8:	f7ff ffb2 	bl	ee10 <on_failed_write>
	} while ((ret == 0) && host_present);
    eeac:	783b      	ldrb	r3, [r7, #0]
    eeae:	2b00      	cmp	r3, #0
    eeb0:	d1ca      	bne.n	ee48 <data_out_block_mode+0x10>
    eeb2:	e7dc      	b.n	ee6e <data_out_block_mode+0x36>
    eeb4:	20022305 	.word	0x20022305
    eeb8:	20022304 	.word	0x20022304

0000eebc <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    eebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    eec0:	460f      	mov	r7, r1
    eec2:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    eec4:	2108      	movs	r1, #8
    eec6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    eec8:	f01b fe25 	bl	2ab16 <nvs_al_size.isra.0>
    eecc:	4680      	mov	r8, r0

	*addr -= ate_size;
    eece:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    eed0:	f8df 9048 	ldr.w	r9, [pc, #72]	; ef1c <nvs_recover_last_ate+0x60>
	*addr -= ate_size;
    eed4:	1a24      	subs	r4, r4, r0
    eed6:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    eed8:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    eedc:	42ac      	cmp	r4, r5
    eede:	d803      	bhi.n	eee8 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    eee0:	2000      	movs	r0, #0
}
    eee2:	b003      	add	sp, #12
    eee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    eee8:	2308      	movs	r3, #8
    eeea:	466a      	mov	r2, sp
    eeec:	4621      	mov	r1, r4
    eeee:	4630      	mov	r0, r6
    eef0:	f01b fd81 	bl	2a9f6 <nvs_flash_rd>
		if (rc) {
    eef4:	2800      	cmp	r0, #0
    eef6:	d1f4      	bne.n	eee2 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    eef8:	4669      	mov	r1, sp
    eefa:	4630      	mov	r0, r6
    eefc:	f01b fe15 	bl	2ab2a <nvs_ate_valid>
    ef00:	b140      	cbz	r0, ef14 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    ef02:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ef06:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    ef0a:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    ef0e:	4413      	add	r3, r2
    ef10:	441d      	add	r5, r3
			*addr = ate_end_addr;
    ef12:	603c      	str	r4, [r7, #0]
		ate_end_addr -= ate_size;
    ef14:	eba4 0408 	sub.w	r4, r4, r8
    ef18:	e7e0      	b.n	eedc <nvs_recover_last_ate+0x20>
    ef1a:	bf00      	nop
    ef1c:	ffff0000 	.word	0xffff0000

0000ef20 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    ef20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef24:	b08f      	sub	sp, #60	; 0x3c
    ef26:	4604      	mov	r4, r0
    ef28:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    ef2a:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
    ef2e:	4640      	mov	r0, r8
    ef30:	f021 f926 	bl	30180 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    ef34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    ef36:	6883      	ldr	r3, [r0, #8]
    ef38:	68db      	ldr	r3, [r3, #12]
    ef3a:	4798      	blx	r3
    ef3c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    ef3e:	b988      	cbnz	r0, ef64 <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
    ef40:	4b8d      	ldr	r3, [pc, #564]	; (f178 <nvs_mount+0x258>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
    ef42:	637b      	str	r3, [r7, #52]	; 0x34
    ef44:	2302      	movs	r3, #2
		return -EINVAL;
    ef46:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Unsupported write block size");
    ef4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ef4e:	488b      	ldr	r0, [pc, #556]	; (f17c <nvs_mount+0x25c>)
    ef50:	633b      	str	r3, [r7, #48]	; 0x30
    ef52:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ef56:	f01b fddb 	bl	2ab10 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    ef5a:	4628      	mov	r0, r5
    ef5c:	373c      	adds	r7, #60	; 0x3c
    ef5e:	46bd      	mov	sp, r7
    ef60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    ef64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    ef66:	6883      	ldr	r3, [r0, #8]
    ef68:	68db      	ldr	r3, [r3, #12]
    ef6a:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    ef6c:	6803      	ldr	r3, [r0, #0]
    ef6e:	3b01      	subs	r3, #1
    ef70:	2b1f      	cmp	r3, #31
    ef72:	d901      	bls.n	ef78 <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
    ef74:	4b82      	ldr	r3, [pc, #520]	; (f180 <nvs_mount+0x260>)
    ef76:	e7e4      	b.n	ef42 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    ef78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ef7a:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    ef7c:	f107 0214 	add.w	r2, r7, #20
    ef80:	f01f f9e1 	bl	2e346 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    ef84:	b108      	cbz	r0, ef8a <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
    ef86:	4b7f      	ldr	r3, [pc, #508]	; (f184 <nvs_mount+0x264>)
    ef88:	e7db      	b.n	ef42 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
    ef8a:	89a5      	ldrh	r5, [r4, #12]
    ef8c:	b12d      	cbz	r5, ef9a <nvs_mount+0x7a>
    ef8e:	69bb      	ldr	r3, [r7, #24]
    ef90:	fbb5 f2f3 	udiv	r2, r5, r3
    ef94:	fb03 5512 	mls	r5, r3, r2, r5
    ef98:	b10d      	cbz	r5, ef9e <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
    ef9a:	4b7b      	ldr	r3, [pc, #492]	; (f188 <nvs_mount+0x268>)
    ef9c:	e7d1      	b.n	ef42 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
    ef9e:	89e3      	ldrh	r3, [r4, #14]
    efa0:	2b01      	cmp	r3, #1
    efa2:	d801      	bhi.n	efa8 <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
    efa4:	4b79      	ldr	r3, [pc, #484]	; (f18c <nvs_mount+0x26c>)
    efa6:	e7cc      	b.n	ef42 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    efa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    efaa:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    efac:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    efb0:	f04f 33ff 	mov.w	r3, #4294967295
    efb4:	f04f 32ff 	mov.w	r2, #4294967295
    efb8:	4640      	mov	r0, r8
    efba:	f016 f8a3 	bl	25104 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    efbe:	2108      	movs	r1, #8
    efc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    efc2:	f01b fda8 	bl	2ab16 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    efc6:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    efc8:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    efca:	89e3      	ldrh	r3, [r4, #14]
    efcc:	fa1f fb85 	uxth.w	fp, r5
    efd0:	455b      	cmp	r3, fp
    efd2:	d808      	bhi.n	efe6 <nvs_mount+0xc6>
	if (closed_sectors == fs->sector_count) {
    efd4:	89e3      	ldrh	r3, [r4, #14]
    efd6:	454b      	cmp	r3, r9
    efd8:	d123      	bne.n	f022 <nvs_mount+0x102>
	return z_impl_k_mutex_unlock(mutex);
    efda:	4640      	mov	r0, r8
    efdc:	f016 f962 	bl	252a4 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    efe0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    efe4:	e7b9      	b.n	ef5a <nvs_mount+0x3a>
		       (uint16_t)(fs->sector_size - ate_size);
    efe6:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    efe8:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    efea:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    efec:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    eff0:	4652      	mov	r2, sl
    eff2:	2308      	movs	r3, #8
    eff4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    eff6:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    eff8:	f01b fd4b 	bl	2aa92 <nvs_flash_cmp_const>
		if (rc) {
    effc:	b178      	cbz	r0, f01e <nvs_mount+0xfe>
			nvs_sector_advance(fs, &addr);
    effe:	4639      	mov	r1, r7
    f000:	4620      	mov	r0, r4
    f002:	f01b fd06 	bl	2aa12 <nvs_sector_advance>
			closed_sectors++;
    f006:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f00a:	2308      	movs	r3, #8
    f00c:	4652      	mov	r2, sl
    f00e:	4620      	mov	r0, r4
    f010:	6839      	ldr	r1, [r7, #0]
			closed_sectors++;
    f012:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f016:	f01b fd3c 	bl	2aa92 <nvs_flash_cmp_const>
			if (!rc) {
    f01a:	2800      	cmp	r0, #0
    f01c:	d0da      	beq.n	efd4 <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
    f01e:	3501      	adds	r5, #1
    f020:	e7d3      	b.n	efca <nvs_mount+0xaa>
	if (i == fs->sector_count) {
    f022:	455b      	cmp	r3, fp
    f024:	d10b      	bne.n	f03e <nvs_mount+0x11e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    f026:	6839      	ldr	r1, [r7, #0]
    f028:	2308      	movs	r3, #8
    f02a:	4652      	mov	r2, sl
    f02c:	4620      	mov	r0, r4
    f02e:	1b89      	subs	r1, r1, r6
    f030:	f01b fd2f 	bl	2aa92 <nvs_flash_cmp_const>
		if (!rc) {
    f034:	b918      	cbnz	r0, f03e <nvs_mount+0x11e>
			nvs_sector_advance(fs, &addr);
    f036:	4639      	mov	r1, r7
    f038:	4620      	mov	r0, r4
    f03a:	f01b fcea 	bl	2aa12 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    f03e:	4639      	mov	r1, r7
    f040:	4620      	mov	r0, r4
    f042:	f7ff ff3b 	bl	eebc <nvs_recover_last_ate>
	if (rc) {
    f046:	4605      	mov	r5, r0
    f048:	b118      	cbz	r0, f052 <nvs_mount+0x132>
    f04a:	4640      	mov	r0, r8
    f04c:	f016 f92a 	bl	252a4 <z_impl_k_mutex_unlock>
	if (rc) {
    f050:	e783      	b.n	ef5a <nvs_mount+0x3a>
	fs->ate_wra = addr;
    f052:	683b      	ldr	r3, [r7, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f054:	ea4f 4913 	mov.w	r9, r3, lsr #16
    f058:	ea4f 4909 	mov.w	r9, r9, lsl #16
	fs->ate_wra = addr;
    f05c:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f05e:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    f062:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    f066:	4299      	cmp	r1, r3
    f068:	d30f      	bcc.n	f08a <nvs_mount+0x16a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f06a:	2308      	movs	r3, #8
    f06c:	4620      	mov	r0, r4
    f06e:	1d3a      	adds	r2, r7, #4
    f070:	f01b fcc1 	bl	2a9f6 <nvs_flash_rd>
		if (rc) {
    f074:	4605      	mov	r5, r0
    f076:	2800      	cmp	r0, #0
    f078:	d1e7      	bne.n	f04a <nvs_mount+0x12a>
    f07a:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
    f07c:	f813 2b01 	ldrb.w	r2, [r3], #1
    f080:	4592      	cmp	sl, r2
    f082:	d144      	bne.n	f10e <nvs_mount+0x1ee>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    f084:	3501      	adds	r5, #1
    f086:	2d08      	cmp	r5, #8
    f088:	d1f8      	bne.n	f07c <nvs_mount+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f08a:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    f08c:	4639      	mov	r1, r7
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f08e:	0c1b      	lsrs	r3, r3, #16
    f090:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    f092:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f094:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
    f096:	f01b fcbc 	bl	2aa12 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    f09a:	4652      	mov	r2, sl
    f09c:	4620      	mov	r0, r4
    f09e:	89a3      	ldrh	r3, [r4, #12]
    f0a0:	6839      	ldr	r1, [r7, #0]
    f0a2:	f01b fcf6 	bl	2aa92 <nvs_flash_cmp_const>
	if (rc < 0) {
    f0a6:	1e05      	subs	r5, r0, #0
    f0a8:	dbcf      	blt.n	f04a <nvs_mount+0x12a>
		addr = fs->ate_wra + ate_size;
    f0aa:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    f0ac:	f000 8082 	beq.w	f1b4 <nvs_mount+0x294>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f0b0:	f64f 7aff 	movw	sl, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    f0b4:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f0b8:	89a3      	ldrh	r3, [r4, #12]
    f0ba:	fa1f f289 	uxth.w	r2, r9
    f0be:	1b9b      	subs	r3, r3, r6
    f0c0:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    f0c2:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f0c6:	d33c      	bcc.n	f142 <nvs_mount+0x222>
		LOG_INF("No GC Done marker found: restarting gc");
    f0c8:	4b31      	ldr	r3, [pc, #196]	; (f190 <nvs_mount+0x270>)
    f0ca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f0ce:	637b      	str	r3, [r7, #52]	; 0x34
    f0d0:	2302      	movs	r3, #2
    f0d2:	482a      	ldr	r0, [pc, #168]	; (f17c <nvs_mount+0x25c>)
    f0d4:	633b      	str	r3, [r7, #48]	; 0x30
    f0d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f0da:	f01b fd19 	bl	2ab10 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f0de:	4620      	mov	r0, r4
    f0e0:	6861      	ldr	r1, [r4, #4]
    f0e2:	f01b fcfb 	bl	2aadc <nvs_flash_erase_sector>
		if (rc) {
    f0e6:	4605      	mov	r5, r0
    f0e8:	2800      	cmp	r0, #0
    f0ea:	d1ae      	bne.n	f04a <nvs_mount+0x12a>
		fs->ate_wra &= ADDR_SECT_MASK;
    f0ec:	6863      	ldr	r3, [r4, #4]
    f0ee:	4a29      	ldr	r2, [pc, #164]	; (f194 <nvs_mount+0x274>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f0f0:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    f0f2:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f0f4:	440b      	add	r3, r1
    f0f6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    f0fa:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f0fc:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    f0fe:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f100:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f102:	f01b fdf4 	bl	2acee <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    f106:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f108:	2d00      	cmp	r5, #0
    f10a:	d06f      	beq.n	f1ec <nvs_mount+0x2cc>
    f10c:	e79d      	b.n	f04a <nvs_mount+0x12a>
		if (nvs_ate_valid(fs, &last_ate)) {
    f10e:	4620      	mov	r0, r4
    f110:	1d39      	adds	r1, r7, #4
    f112:	f01b fd0a 	bl	2ab2a <nvs_ate_valid>
    f116:	6862      	ldr	r2, [r4, #4]
    f118:	b910      	cbnz	r0, f120 <nvs_mount+0x200>
		fs->ate_wra -= ate_size;
    f11a:	1b92      	subs	r2, r2, r6
    f11c:	6062      	str	r2, [r4, #4]
    f11e:	e7a0      	b.n	f062 <nvs_mount+0x142>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f120:	893d      	ldrh	r5, [r7, #8]
    f122:	88f9      	ldrh	r1, [r7, #6]
    f124:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    f126:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f12a:	4429      	add	r1, r5
    f12c:	f01b fcf3 	bl	2ab16 <nvs_al_size.isra.0>
    f130:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f132:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f134:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f136:	d1f0      	bne.n	f11a <nvs_mount+0x1fa>
    f138:	2d00      	cmp	r5, #0
    f13a:	d0ee      	beq.n	f11a <nvs_mount+0x1fa>
				rc = -ESPIPE;
    f13c:	f06f 051c 	mvn.w	r5, #28
    f140:	e09c      	b.n	f27c <nvs_mount+0x35c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f142:	2308      	movs	r3, #8
    f144:	4649      	mov	r1, r9
    f146:	4620      	mov	r0, r4
    f148:	f107 020c 	add.w	r2, r7, #12
    f14c:	f01b fc53 	bl	2a9f6 <nvs_flash_rd>
			if (rc) {
    f150:	4605      	mov	r5, r0
    f152:	2800      	cmp	r0, #0
    f154:	f47f af79 	bne.w	f04a <nvs_mount+0x12a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    f158:	4620      	mov	r0, r4
    f15a:	f107 010c 	add.w	r1, r7, #12
    f15e:	f01b fce4 	bl	2ab2a <nvs_ate_valid>
    f162:	b130      	cbz	r0, f172 <nvs_mount+0x252>
    f164:	89bb      	ldrh	r3, [r7, #12]
    f166:	4553      	cmp	r3, sl
    f168:	d103      	bne.n	f172 <nvs_mount+0x252>
			    (gc_done_ate.id == 0xffff) &&
    f16a:	8a3b      	ldrh	r3, [r7, #16]
    f16c:	2b00      	cmp	r3, #0
    f16e:	f000 808b 	beq.w	f288 <nvs_mount+0x368>
			addr += ate_size;
    f172:	44b1      	add	r9, r6
    f174:	e7a0      	b.n	f0b8 <nvs_mount+0x198>
    f176:	bf00      	nop
    f178:	0003391d 	.word	0x0003391d
    f17c:	0003155c 	.word	0x0003155c
    f180:	0003393f 	.word	0x0003393f
    f184:	0003395c 	.word	0x0003395c
    f188:	00033974 	.word	0x00033974
    f18c:	00033988 	.word	0x00033988
    f190:	000339e5 	.word	0x000339e5
    f194:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    f198:	4652      	mov	r2, sl
    f19a:	4620      	mov	r0, r4
    f19c:	1a5b      	subs	r3, r3, r1
    f19e:	f01b fc78 	bl	2aa92 <nvs_flash_cmp_const>
		if (rc < 0) {
    f1a2:	1e05      	subs	r5, r0, #0
    f1a4:	f6ff af51 	blt.w	f04a <nvs_mount+0x12a>
		if (!rc) {
    f1a8:	d008      	beq.n	f1bc <nvs_mount+0x29c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    f1aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f1ac:	68a3      	ldr	r3, [r4, #8]
    f1ae:	6812      	ldr	r2, [r2, #0]
    f1b0:	4413      	add	r3, r2
    f1b2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    f1b4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    f1b8:	428b      	cmp	r3, r1
    f1ba:	d8ed      	bhi.n	f198 <nvs_mount+0x278>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f1bc:	6861      	ldr	r1, [r4, #4]
    f1be:	89a3      	ldrh	r3, [r4, #12]
    f1c0:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    f1c4:	429a      	cmp	r2, r3
    f1c6:	d19f      	bne.n	f108 <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f1c8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; f2b8 <nvs_mount+0x398>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f1cc:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f1ce:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f1d2:	4293      	cmp	r3, r2
    f1d4:	d098      	beq.n	f108 <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f1d6:	4620      	mov	r0, r4
    f1d8:	f01b fc80 	bl	2aadc <nvs_flash_erase_sector>
		if (rc) {
    f1dc:	4605      	mov	r5, r0
    f1de:	2800      	cmp	r0, #0
    f1e0:	f47f af33 	bne.w	f04a <nvs_mount+0x12a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f1e4:	6863      	ldr	r3, [r4, #4]
    f1e6:	ea03 0309 	and.w	r3, r3, r9
    f1ea:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    f1ec:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f1ee:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    f1f0:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f1f4:	429a      	cmp	r2, r3
    f1f6:	d03d      	beq.n	f274 <nvs_mount+0x354>
    f1f8:	4640      	mov	r0, r8
    f1fa:	f016 f853 	bl	252a4 <z_impl_k_mutex_unlock>
	fs->ready = true;
    f1fe:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f200:	46e8      	mov	r8, sp
    f202:	b088      	sub	sp, #32
	fs->ready = true;
    f204:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f206:	466d      	mov	r5, sp
    f208:	89e2      	ldrh	r2, [r4, #14]
    f20a:	89a3      	ldrh	r3, [r4, #12]
    f20c:	f04f 0904 	mov.w	r9, #4
    f210:	462e      	mov	r6, r5
    f212:	492a      	ldr	r1, [pc, #168]	; (f2bc <nvs_mount+0x39c>)
    f214:	61eb      	str	r3, [r5, #28]
    f216:	e9c5 1205 	strd	r1, r2, [r5, #20]
    f21a:	f846 9f10 	str.w	r9, [r6, #16]!
    f21e:	4632      	mov	r2, r6
    f220:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f224:	4826      	ldr	r0, [pc, #152]	; (f2c0 <nvs_mount+0x3a0>)
    f226:	f01b fc73 	bl	2ab10 <z_log_msg_static_create.constprop.0>
    f22a:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
    f22c:	6863      	ldr	r3, [r4, #4]
    f22e:	46ad      	mov	sp, r5
    f230:	4a24      	ldr	r2, [pc, #144]	; (f2c4 <nvs_mount+0x3a4>)
    f232:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f236:	616a      	str	r2, [r5, #20]
    f238:	0c1a      	lsrs	r2, r3, #16
    f23a:	b29b      	uxth	r3, r3
    f23c:	61aa      	str	r2, [r5, #24]
    f23e:	61eb      	str	r3, [r5, #28]
    f240:	4632      	mov	r2, r6
    f242:	481f      	ldr	r0, [pc, #124]	; (f2c0 <nvs_mount+0x3a0>)
    f244:	f8c5 9010 	str.w	r9, [r5, #16]
    f248:	f01b fc62 	bl	2ab10 <z_log_msg_static_create.constprop.0>
    f24c:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
    f24e:	68a3      	ldr	r3, [r4, #8]
    f250:	46ad      	mov	sp, r5
    f252:	4a1d      	ldr	r2, [pc, #116]	; (f2c8 <nvs_mount+0x3a8>)
    f254:	f8c5 9010 	str.w	r9, [r5, #16]
    f258:	616a      	str	r2, [r5, #20]
    f25a:	0c1a      	lsrs	r2, r3, #16
    f25c:	b29b      	uxth	r3, r3
    f25e:	61aa      	str	r2, [r5, #24]
    f260:	61eb      	str	r3, [r5, #28]
    f262:	4632      	mov	r2, r6
    f264:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f268:	4815      	ldr	r0, [pc, #84]	; (f2c0 <nvs_mount+0x3a0>)
    f26a:	f01b fc51 	bl	2ab10 <z_log_msg_static_create.constprop.0>
	return 0;
    f26e:	2500      	movs	r5, #0
    f270:	46c5      	mov	sp, r8
    f272:	e672      	b.n	ef5a <nvs_mount+0x3a>
		rc = nvs_add_gc_done_ate(fs);
    f274:	4620      	mov	r0, r4
    f276:	f01b fd25 	bl	2acc4 <nvs_add_gc_done_ate>
    f27a:	4605      	mov	r5, r0
    f27c:	4640      	mov	r0, r8
    f27e:	f016 f811 	bl	252a4 <z_impl_k_mutex_unlock>
	if (rc) {
    f282:	2d00      	cmp	r5, #0
    f284:	d0bb      	beq.n	f1fe <nvs_mount+0x2de>
    f286:	e668      	b.n	ef5a <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
    f288:	4b10      	ldr	r3, [pc, #64]	; (f2cc <nvs_mount+0x3ac>)
    f28a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f28e:	637b      	str	r3, [r7, #52]	; 0x34
    f290:	2302      	movs	r3, #2
    f292:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f296:	633b      	str	r3, [r7, #48]	; 0x30
    f298:	4809      	ldr	r0, [pc, #36]	; (f2c0 <nvs_mount+0x3a0>)
    f29a:	f01b fc39 	bl	2ab10 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f29e:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    f2a0:	4639      	mov	r1, r7
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f2a2:	0c1b      	lsrs	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    f2a4:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f2a6:	041b      	lsls	r3, r3, #16
    f2a8:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
    f2aa:	f01b fbb2 	bl	2aa12 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    f2ae:	4620      	mov	r0, r4
    f2b0:	6839      	ldr	r1, [r7, #0]
    f2b2:	f01b fc13 	bl	2aadc <nvs_flash_erase_sector>
    f2b6:	e726      	b.n	f106 <nvs_mount+0x1e6>
    f2b8:	ffff0000 	.word	0xffff0000
    f2bc:	000339ab 	.word	0x000339ab
    f2c0:	0003155c 	.word	0x0003155c
    f2c4:	000339c2 	.word	0x000339c2
    f2c8:	000339d4 	.word	0x000339d4
    f2cc:	00033a0c 	.word	0x00033a0c

0000f2d0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    f2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2d4:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    f2d6:	7c03      	ldrb	r3, [r0, #16]
{
    f2d8:	4604      	mov	r4, r0
    f2da:	4689      	mov	r9, r1
    f2dc:	4690      	mov	r8, r2
    f2de:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    f2e0:	b97b      	cbnz	r3, f302 <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
    f2e2:	4b66      	ldr	r3, [pc, #408]	; (f47c <nvs_write+0x1ac>)
		return -EACCES;
    f2e4:	f06f 060c 	mvn.w	r6, #12
		LOG_ERR("NVS not initialized");
    f2e8:	930b      	str	r3, [sp, #44]	; 0x2c
    f2ea:	2302      	movs	r3, #2
    f2ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f2f0:	4863      	ldr	r0, [pc, #396]	; (f480 <nvs_write+0x1b0>)
    f2f2:	aa0a      	add	r2, sp, #40	; 0x28
    f2f4:	930a      	str	r3, [sp, #40]	; 0x28
    f2f6:	f01b fc0b 	bl	2ab10 <z_log_msg_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    f2fa:	4630      	mov	r0, r6
    f2fc:	b00d      	add	sp, #52	; 0x34
    f2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f302:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    f304:	2108      	movs	r1, #8
    f306:	4610      	mov	r0, r2
    f308:	f01b fc05 	bl	2ab16 <nvs_al_size.isra.0>
    f30c:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    f30e:	4629      	mov	r1, r5
    f310:	4610      	mov	r0, r2
    f312:	f01b fc00 	bl	2ab16 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f316:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    f318:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f31a:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    f31e:	42ab      	cmp	r3, r5
    f320:	f0c0 80a9 	bcc.w	f476 <nvs_write+0x1a6>
    f324:	b11d      	cbz	r5, f32e <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    f326:	f1b8 0f00 	cmp.w	r8, #0
    f32a:	f000 80a4 	beq.w	f476 <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
    f32e:	6863      	ldr	r3, [r4, #4]
    f330:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f332:	4620      	mov	r0, r4
    f334:	aa04      	add	r2, sp, #16
    f336:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    f338:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f33c:	f01b fc2d 	bl	2ab9a <nvs_prev_ate>
		if (rc) {
    f340:	4606      	mov	r6, r0
    f342:	2800      	cmp	r0, #0
    f344:	d1d9      	bne.n	f2fa <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f346:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f34a:	454b      	cmp	r3, r9
    f34c:	d005      	beq.n	f35a <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    f34e:	6862      	ldr	r2, [r4, #4]
    f350:	9b03      	ldr	r3, [sp, #12]
    f352:	429a      	cmp	r2, r3
    f354:	d1ed      	bne.n	f332 <nvs_write+0x62>
		if (len == 0) {
    f356:	b9e5      	cbnz	r5, f392 <nvs_write+0xc2>
    f358:	e7cf      	b.n	f2fa <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f35a:	4620      	mov	r0, r4
    f35c:	a904      	add	r1, sp, #16
    f35e:	f01b fbe4 	bl	2ab2a <nvs_ate_valid>
    f362:	2800      	cmp	r0, #0
    f364:	d0f3      	beq.n	f34e <nvs_write+0x7e>
		rd_addr += wlk_ate.offset;
    f366:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
    f36a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    f36e:	b175      	cbz	r5, f38e <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    f370:	42ab      	cmp	r3, r5
    f372:	d10e      	bne.n	f392 <nvs_write+0xc2>
		rd_addr &= ADDR_SECT_MASK;
    f374:	ea4f 411b 	mov.w	r1, fp, lsr #16
    f378:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    f37a:	4401      	add	r1, r0
    f37c:	462b      	mov	r3, r5
    f37e:	4642      	mov	r2, r8
    f380:	4620      	mov	r0, r4
    f382:	f01b fb53 	bl	2aa2c <nvs_flash_block_cmp>
			if (rc <= 0) {
    f386:	2800      	cmp	r0, #0
    f388:	dc03      	bgt.n	f392 <nvs_write+0xc2>
    f38a:	4606      	mov	r6, r0
    f38c:	e7b5      	b.n	f2fa <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    f38e:	2b00      	cmp	r3, #0
    f390:	d0b3      	beq.n	f2fa <nvs_write+0x2a>
	if (data_size) {
    f392:	2f00      	cmp	r7, #0
    f394:	d13e      	bne.n	f414 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    f396:	f104 0314 	add.w	r3, r4, #20
    f39a:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    f39c:	f04f 32ff 	mov.w	r2, #4294967295
    f3a0:	f04f 33ff 	mov.w	r3, #4294967295
    f3a4:	f104 0014 	add.w	r0, r4, #20
    f3a8:	f015 feac 	bl	25104 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    f3ac:	f8df b0d4 	ldr.w	fp, [pc, #212]	; f484 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    f3b0:	89e3      	ldrh	r3, [r4, #14]
    f3b2:	429e      	cmp	r6, r3
    f3b4:	d05c      	beq.n	f470 <nvs_write+0x1a0>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    f3b6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    f3ba:	18f9      	adds	r1, r7, r3
    f3bc:	428a      	cmp	r2, r1
    f3be:	d32c      	bcc.n	f41a <nvs_write+0x14a>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f3c0:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    f3c4:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    f3c6:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    f3c8:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    f3cc:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    f3d0:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
    f3d4:	f01b fb54 	bl	2aa80 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f3d8:	462b      	mov	r3, r5
    f3da:	4642      	mov	r2, r8
    f3dc:	68a1      	ldr	r1, [r4, #8]
    f3de:	4620      	mov	r0, r4
    f3e0:	f01b fc25 	bl	2ac2e <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    f3e4:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f3e6:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    f3e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3ea:	f01b fb94 	bl	2ab16 <nvs_al_size.isra.0>
    f3ee:	68a2      	ldr	r2, [r4, #8]
    f3f0:	4402      	add	r2, r0
    f3f2:	60a2      	str	r2, [r4, #8]
	if (rc) {
    f3f4:	f1ba 0f00 	cmp.w	sl, #0
    f3f8:	d107      	bne.n	f40a <nvs_write+0x13a>
	rc = nvs_flash_ate_wrt(fs, &entry);
    f3fa:	4620      	mov	r0, r4
    f3fc:	a906      	add	r1, sp, #24
    f3fe:	f01b fc50 	bl	2aca2 <nvs_flash_ate_wrt>
	rc = len;
    f402:	2800      	cmp	r0, #0
    f404:	bf14      	ite	ne
    f406:	4682      	movne	sl, r0
    f408:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    f40a:	9801      	ldr	r0, [sp, #4]
    f40c:	f015 ff4a 	bl	252a4 <z_impl_k_mutex_unlock>
	return rc;
    f410:	4656      	mov	r6, sl
    f412:	e772      	b.n	f2fa <nvs_write+0x2a>
		required_space = data_size + ate_size;
    f414:	4457      	add	r7, sl
    f416:	b2bf      	uxth	r7, r7
    f418:	e7bd      	b.n	f396 <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f41a:	2108      	movs	r1, #8
    f41c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f41e:	f01b fb7a 	bl	2ab16 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    f422:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f426:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    f42a:	2300      	movs	r3, #0
    f42c:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    f430:	1813      	adds	r3, r2, r0
    f432:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    f436:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    f438:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    f43c:	441a      	add	r2, r3
    f43e:	1a10      	subs	r0, r2, r0
    f440:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    f442:	a806      	add	r0, sp, #24
    f444:	f01b fb1c 	bl	2aa80 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    f448:	a906      	add	r1, sp, #24
    f44a:	4620      	mov	r0, r4
    f44c:	f01b fc29 	bl	2aca2 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    f450:	4620      	mov	r0, r4
    f452:	1d21      	adds	r1, r4, #4
    f454:	f01b fadd 	bl	2aa12 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f458:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    f45a:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f45c:	ea03 030b 	and.w	r3, r3, fp
    f460:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f462:	f01b fc44 	bl	2acee <nvs_gc>
		if (rc) {
    f466:	4682      	mov	sl, r0
    f468:	2800      	cmp	r0, #0
    f46a:	d1ce      	bne.n	f40a <nvs_write+0x13a>
		gc_count++;
    f46c:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    f46e:	e79f      	b.n	f3b0 <nvs_write+0xe0>
			rc = -ENOSPC;
    f470:	f06f 0a1b 	mvn.w	sl, #27
    f474:	e7c9      	b.n	f40a <nvs_write+0x13a>
		return -EINVAL;
    f476:	f06f 0615 	mvn.w	r6, #21
    f47a:	e73e      	b.n	f2fa <nvs_write+0x2a>
    f47c:	00033909 	.word	0x00033909
    f480:	0003155c 	.word	0x0003155c
    f484:	ffff0000 	.word	0xffff0000

0000f488 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    f488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f48c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    f48e:	7c03      	ldrb	r3, [r0, #16]
{
    f490:	b088      	sub	sp, #32
    f492:	4604      	mov	r4, r0
    f494:	460f      	mov	r7, r1
    f496:	4690      	mov	r8, r2
    f498:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    f49c:	b973      	cbnz	r3, f4bc <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
    f49e:	4b2f      	ldr	r3, [pc, #188]	; (f55c <nvs_read_hist+0xd4>)
    f4a0:	482f      	ldr	r0, [pc, #188]	; (f560 <nvs_read_hist+0xd8>)
    f4a2:	9307      	str	r3, [sp, #28]
    f4a4:	2302      	movs	r3, #2
    f4a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f4aa:	aa06      	add	r2, sp, #24
    f4ac:	9306      	str	r3, [sp, #24]
    f4ae:	f01b fb2f 	bl	2ab10 <z_log_msg_static_create.constprop.0>
		return -EACCES;
    f4b2:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    f4b6:	b008      	add	sp, #32
    f4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f4bc:	2108      	movs	r1, #8
    f4be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f4c0:	f01b fb29 	bl	2ab16 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    f4c4:	89a3      	ldrh	r3, [r4, #12]
    f4c6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    f4ca:	42b3      	cmp	r3, r6
    f4cc:	d343      	bcc.n	f556 <nvs_read_hist+0xce>
	cnt_his = 0U;
    f4ce:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    f4d0:	f8d4 a004 	ldr.w	sl, [r4, #4]
    f4d4:	f8cd a004 	str.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f4d8:	454d      	cmp	r5, r9
    f4da:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    f4dc:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f4e0:	d909      	bls.n	f4f6 <nvs_read_hist+0x6e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f4e2:	6863      	ldr	r3, [r4, #4]
    f4e4:	4553      	cmp	r3, sl
    f4e6:	d11e      	bne.n	f526 <nvs_read_hist+0x9e>
    f4e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f4ec:	42bb      	cmp	r3, r7
    f4ee:	d01a      	beq.n	f526 <nvs_read_hist+0x9e>
		return -ENOENT;
    f4f0:	f06f 0001 	mvn.w	r0, #1
    f4f4:	e7df      	b.n	f4b6 <nvs_read_hist+0x2e>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f4f6:	4620      	mov	r0, r4
    f4f8:	aa02      	add	r2, sp, #8
    f4fa:	a901      	add	r1, sp, #4
    f4fc:	f01b fb4d 	bl	2ab9a <nvs_prev_ate>
		if (rc) {
    f500:	2800      	cmp	r0, #0
    f502:	d1d8      	bne.n	f4b6 <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    f504:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f508:	42bb      	cmp	r3, r7
    f50a:	d106      	bne.n	f51a <nvs_read_hist+0x92>
    f50c:	4620      	mov	r0, r4
    f50e:	a902      	add	r1, sp, #8
    f510:	f01b fb0b 	bl	2ab2a <nvs_ate_valid>
    f514:	b108      	cbz	r0, f51a <nvs_read_hist+0x92>
			cnt_his++;
    f516:	3501      	adds	r5, #1
    f518:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    f51a:	6862      	ldr	r2, [r4, #4]
    f51c:	9b01      	ldr	r3, [sp, #4]
    f51e:	429a      	cmp	r2, r3
    f520:	d1da      	bne.n	f4d8 <nvs_read_hist+0x50>
		rd_addr = wlk_addr;
    f522:	4651      	mov	r1, sl
    f524:	e7e0      	b.n	f4e8 <nvs_read_hist+0x60>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f526:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f52a:	2b00      	cmp	r3, #0
    f52c:	d0e0      	beq.n	f4f0 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f52e:	45a9      	cmp	r9, r5
    f530:	d8de      	bhi.n	f4f0 <nvs_read_hist+0x68>
	rd_addr += wlk_ate.offset;
    f532:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    f536:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f538:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    f53a:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f53e:	bf28      	it	cs
    f540:	4633      	movcs	r3, r6
    f542:	4401      	add	r1, r0
    f544:	4642      	mov	r2, r8
    f546:	4620      	mov	r0, r4
    f548:	f01b fa55 	bl	2a9f6 <nvs_flash_rd>
	if (rc) {
    f54c:	2800      	cmp	r0, #0
    f54e:	d1b2      	bne.n	f4b6 <nvs_read_hist+0x2e>
	return wlk_ate.len;
    f550:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    f554:	e7af      	b.n	f4b6 <nvs_read_hist+0x2e>
		return -EINVAL;
    f556:	f06f 0015 	mvn.w	r0, #21
    f55a:	e7ac      	b.n	f4b6 <nvs_read_hist+0x2e>
    f55c:	00033909 	.word	0x00033909
    f560:	0003155c 	.word	0x0003155c

0000f564 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    f564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    f566:	b970      	cbnz	r0, f586 <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    f568:	4b12      	ldr	r3, [pc, #72]	; (f5b4 <ipc_service_open_instance+0x50>)
    f56a:	4813      	ldr	r0, [pc, #76]	; (f5b8 <ipc_service_open_instance+0x54>)
    f56c:	9305      	str	r3, [sp, #20]
    f56e:	2302      	movs	r3, #2
    f570:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f574:	aa04      	add	r2, sp, #16
    f576:	9304      	str	r3, [sp, #16]
    f578:	f01b fc91 	bl	2ae9e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f57c:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    f580:	b007      	add	sp, #28
    f582:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    f586:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    f588:	b963      	cbnz	r3, f5a4 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    f58a:	4b0c      	ldr	r3, [pc, #48]	; (f5bc <ipc_service_open_instance+0x58>)
    f58c:	480a      	ldr	r0, [pc, #40]	; (f5b8 <ipc_service_open_instance+0x54>)
    f58e:	9305      	str	r3, [sp, #20]
    f590:	2302      	movs	r3, #2
    f592:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f596:	aa04      	add	r2, sp, #16
    f598:	9304      	str	r3, [sp, #16]
    f59a:	f01b fc80 	bl	2ae9e <z_log_msg_static_create.constprop.0>
		return -EIO;
    f59e:	f06f 0004 	mvn.w	r0, #4
    f5a2:	e7ed      	b.n	f580 <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    f5a4:	681b      	ldr	r3, [r3, #0]
    f5a6:	b11b      	cbz	r3, f5b0 <ipc_service_open_instance+0x4c>
}
    f5a8:	b007      	add	sp, #28
    f5aa:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    f5ae:	4718      	bx	r3
		return 0;
    f5b0:	4618      	mov	r0, r3
    f5b2:	e7e5      	b.n	f580 <ipc_service_open_instance+0x1c>
    f5b4:	00033a28 	.word	0x00033a28
    f5b8:	00031564 	.word	0x00031564
    f5bc:	00033a39 	.word	0x00033a39

0000f5c0 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    f5c0:	b530      	push	{r4, r5, lr}
    f5c2:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    f5c4:	b108      	cbz	r0, f5ca <ipc_service_register_endpoint+0xa>
    f5c6:	b101      	cbz	r1, f5ca <ipc_service_register_endpoint+0xa>
    f5c8:	b96a      	cbnz	r2, f5e6 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    f5ca:	4b13      	ldr	r3, [pc, #76]	; (f618 <ipc_service_register_endpoint+0x58>)
    f5cc:	4813      	ldr	r0, [pc, #76]	; (f61c <ipc_service_register_endpoint+0x5c>)
    f5ce:	9305      	str	r3, [sp, #20]
    f5d0:	2302      	movs	r3, #2
    f5d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5d6:	aa04      	add	r2, sp, #16
    f5d8:	9304      	str	r3, [sp, #16]
    f5da:	f01b fc60 	bl	2ae9e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f5de:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    f5e2:	b007      	add	sp, #28
    f5e4:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    f5e6:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    f5e8:	b10c      	cbz	r4, f5ee <ipc_service_register_endpoint+0x2e>
    f5ea:	68e5      	ldr	r5, [r4, #12]
    f5ec:	b965      	cbnz	r5, f608 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    f5ee:	4b0c      	ldr	r3, [pc, #48]	; (f620 <ipc_service_register_endpoint+0x60>)
    f5f0:	480a      	ldr	r0, [pc, #40]	; (f61c <ipc_service_register_endpoint+0x5c>)
    f5f2:	9305      	str	r3, [sp, #20]
    f5f4:	2302      	movs	r3, #2
    f5f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5fa:	aa04      	add	r2, sp, #16
    f5fc:	9304      	str	r3, [sp, #16]
    f5fe:	f01b fc4e 	bl	2ae9e <z_log_msg_static_create.constprop.0>
		return -EIO;
    f602:	f06f 0004 	mvn.w	r0, #4
    f606:	e7ec      	b.n	f5e2 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    f608:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    f60c:	68e3      	ldr	r3, [r4, #12]
}
    f60e:	b007      	add	sp, #28
    f610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    f614:	4718      	bx	r3
    f616:	bf00      	nop
    f618:	00033a57 	.word	0x00033a57
    f61c:	00031564 	.word	0x00031564
    f620:	00033a39 	.word	0x00033a39

0000f624 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    f624:	b530      	push	{r4, r5, lr}
    f626:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    f628:	4604      	mov	r4, r0
{
    f62a:	b087      	sub	sp, #28
	if (!ept) {
    f62c:	b968      	cbnz	r0, f64a <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    f62e:	4b1a      	ldr	r3, [pc, #104]	; (f698 <ipc_service_send+0x74>)
    f630:	481a      	ldr	r0, [pc, #104]	; (f69c <ipc_service_send+0x78>)
    f632:	9305      	str	r3, [sp, #20]
    f634:	2302      	movs	r3, #2
    f636:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f63a:	aa04      	add	r2, sp, #16
    f63c:	9304      	str	r3, [sp, #16]
    f63e:	f01b fc2e 	bl	2ae9e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f642:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    f646:	b007      	add	sp, #28
    f648:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    f64a:	6800      	ldr	r0, [r0, #0]
    f64c:	b960      	cbnz	r0, f668 <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    f64e:	4b14      	ldr	r3, [pc, #80]	; (f6a0 <ipc_service_send+0x7c>)
    f650:	4812      	ldr	r0, [pc, #72]	; (f69c <ipc_service_send+0x78>)
    f652:	9305      	str	r3, [sp, #20]
    f654:	2302      	movs	r3, #2
    f656:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f65a:	aa04      	add	r2, sp, #16
    f65c:	9304      	str	r3, [sp, #16]
    f65e:	f01b fc1e 	bl	2ae9e <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    f662:	f06f 0001 	mvn.w	r0, #1
    f666:	e7ee      	b.n	f646 <ipc_service_send+0x22>
	backend = ept->instance->api;
    f668:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    f66a:	b10a      	cbz	r2, f670 <ipc_service_send+0x4c>
    f66c:	6895      	ldr	r5, [r2, #8]
    f66e:	b965      	cbnz	r5, f68a <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    f670:	4b0c      	ldr	r3, [pc, #48]	; (f6a4 <ipc_service_send+0x80>)
    f672:	480a      	ldr	r0, [pc, #40]	; (f69c <ipc_service_send+0x78>)
    f674:	9305      	str	r3, [sp, #20]
    f676:	2302      	movs	r3, #2
    f678:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f67c:	aa04      	add	r2, sp, #16
    f67e:	9304      	str	r3, [sp, #16]
    f680:	f01b fc0d 	bl	2ae9e <z_log_msg_static_create.constprop.0>
		return -EIO;
    f684:	f06f 0004 	mvn.w	r0, #4
    f688:	e7dd      	b.n	f646 <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    f68a:	460a      	mov	r2, r1
    f68c:	46ac      	mov	ip, r5
    f68e:	6861      	ldr	r1, [r4, #4]
}
    f690:	b007      	add	sp, #28
    f692:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    f696:	4760      	bx	ip
    f698:	00033a83 	.word	0x00033a83
    f69c:	00031564 	.word	0x00031564
    f6a0:	00033a94 	.word	0x00033a94
    f6a4:	00033a39 	.word	0x00033a39

0000f6a8 <shared_memory_prepare>:
    f6a8:	2000      	movs	r0, #0
    f6aa:	4b01      	ldr	r3, [pc, #4]	; (f6b0 <shared_memory_prepare+0x8>)
    f6ac:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    f6ae:	4770      	bx	lr
    f6b0:	20070000 	.word	0x20070000

0000f6b4 <advertise_ept>:
{
    f6b4:	b530      	push	{r4, r5, lr}
    f6b6:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f6b8:	490e      	ldr	r1, [pc, #56]	; (f6f4 <advertise_ept+0x40>)
{
    f6ba:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f6bc:	9102      	str	r1, [sp, #8]
    f6be:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    f6c2:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f6c4:	e9cd 3100 	strd	r3, r1, [sp]
    f6c8:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f6cc:	f04f 33ff 	mov.w	r3, #4294967295
    f6d0:	4620      	mov	r0, r4
    f6d2:	f014 fc6f 	bl	23fb4 <rpmsg_create_ept>
	if (err != 0) {
    f6d6:	b950      	cbnz	r0, f6ee <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    f6d8:	2301      	movs	r3, #1
    f6da:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    f6de:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    f6e2:	b123      	cbz	r3, f6ee <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    f6e4:	4620      	mov	r0, r4
}
    f6e6:	b005      	add	sp, #20
    f6e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    f6ec:	4718      	bx	r3
}
    f6ee:	b005      	add	sp, #20
    f6f0:	bd30      	pop	{r4, r5, pc}
    f6f2:	bf00      	nop
    f6f4:	0002af95 	.word	0x0002af95

0000f6f8 <get_ept>:
{
    f6f8:	b538      	push	{r3, r4, r5, lr}
    f6fa:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f6fc:	4611      	mov	r1, r2
{
    f6fe:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f700:	f01b fc4a 	bl	2af98 <get_ept_slot_with_name>
	if (ept != NULL) {
    f704:	4603      	mov	r3, r0
    f706:	b938      	cbnz	r0, f718 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f708:	4628      	mov	r0, r5
    f70a:	4904      	ldr	r1, [pc, #16]	; (f71c <get_ept+0x24>)
    f70c:	f01b fc44 	bl	2af98 <get_ept_slot_with_name>
    f710:	4603      	mov	r3, r0
	if (ept != NULL) {
    f712:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    f714:	6023      	str	r3, [r4, #0]
}
    f716:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    f718:	2001      	movs	r0, #1
    f71a:	e7fb      	b.n	f714 <get_ept+0x1c>
    f71c:	000368ec 	.word	0x000368ec

0000f720 <open>:
{
    f720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f724:	2301      	movs	r3, #1
    f726:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    f728:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f72a:	6846      	ldr	r6, [r0, #4]
{
    f72c:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    f72e:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f732:	e8d7 2fef 	ldaex	r2, [r7]
    f736:	2a00      	cmp	r2, #0
    f738:	d103      	bne.n	f742 <open+0x22>
    f73a:	e8c7 3fe1 	stlex	r1, r3, [r7]
    f73e:	2900      	cmp	r1, #0
    f740:	d1f7      	bne.n	f732 <open+0x12>
    f742:	f040 80b8 	bne.w	f8b6 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    f746:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f748:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    f74a:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f74c:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    f74e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    f752:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    f756:	bf26      	itte	cs
    f758:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    f75c:	fab3 f383 	clzcs	r3, r3
		return 0;
    f760:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    f762:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    f766:	bf28      	it	cs
    f768:	f1c3 0320 	rsbcs	r3, r3, #32
    f76c:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    f76e:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    f770:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    f774:	f000 8099 	beq.w	f8aa <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    f778:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f77a:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    f77c:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    f77e:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    f780:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    f784:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f786:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    f788:	3209      	adds	r2, #9
    f78a:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    f78e:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    f790:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    f794:	440a      	add	r2, r1
	return (buf_size * num);
    f796:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f798:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    f79c:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    f79e:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    f7a2:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    f7a6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f7a8:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    f7aa:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    f7ae:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    f7b2:	3303      	adds	r3, #3
    f7b4:	4413      	add	r3, r2
    f7b6:	f023 0303 	bic.w	r3, r3, #3
    f7ba:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    f7be:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    f7c0:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    f7c4:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    f7c8:	4b3c      	ldr	r3, [pc, #240]	; (f8bc <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f7ca:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    f7cc:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f7d0:	6831      	ldr	r1, [r6, #0]
    f7d2:	f000 fa1d 	bl	fc10 <ipc_static_vrings_init>
	if (err != 0) {
    f7d6:	4604      	mov	r4, r0
    f7d8:	bb30      	cbnz	r0, f828 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    f7da:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    f7de:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f7e2:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    f7e6:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f7ea:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    f7ec:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f7ee:	bf08      	it	eq
    f7f0:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    f7f2:	f016 fa5d 	bl	25cb0 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    f7f6:	2300      	movs	r3, #0
    f7f8:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    f7fc:	4930      	ldr	r1, [pc, #192]	; (f8c0 <open+0x1a0>)
    f7fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f802:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    f806:	9300      	str	r3, [sp, #0]
    f808:	4658      	mov	r0, fp
    f80a:	4623      	mov	r3, r4
    f80c:	f016 fa6a 	bl	25ce4 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    f810:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    f814:	492b      	ldr	r1, [pc, #172]	; (f8c4 <open+0x1a4>)
    f816:	f016 f97f 	bl	25b18 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    f81a:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    f81e:	6883      	ldr	r3, [r0, #8]
    f820:	685c      	ldr	r4, [r3, #4]
    f822:	b91c      	cbnz	r4, f82c <open+0x10c>
		return -ENOSYS;
    f824:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    f828:	2100      	movs	r1, #0
    f82a:	e037      	b.n	f89c <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f82c:	464b      	mov	r3, r9
    f82e:	4a26      	ldr	r2, [pc, #152]	; (f8c8 <open+0x1a8>)
    f830:	f8da 1018 	ldr.w	r1, [sl, #24]
    f834:	47a0      	blx	r4
	if (err != 0) {
    f836:	4604      	mov	r4, r0
    f838:	2800      	cmp	r0, #0
    f83a:	d1f5      	bne.n	f828 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    f83c:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    f840:	6883      	ldr	r3, [r0, #8]
    f842:	691b      	ldr	r3, [r3, #16]
    f844:	2b00      	cmp	r3, #0
    f846:	d0ed      	beq.n	f824 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    f848:	2201      	movs	r2, #1
    f84a:	f8da 1018 	ldr.w	r1, [sl, #24]
    f84e:	4798      	blx	r3
	if (err != 0) {
    f850:	4604      	mov	r4, r0
    f852:	2800      	cmp	r0, #0
    f854:	d1e8      	bne.n	f828 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    f856:	4b1d      	ldr	r3, [pc, #116]	; (f8cc <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f858:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    f85a:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    f85e:	4b1c      	ldr	r3, [pc, #112]	; (f8d0 <open+0x1b0>)
    f860:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f864:	4b1b      	ldr	r3, [pc, #108]	; (f8d4 <open+0x1b4>)
    f866:	9303      	str	r3, [sp, #12]
    f868:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    f86c:	9302      	str	r3, [sp, #8]
    f86e:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    f872:	e9cd 8300 	strd	r8, r3, [sp]
    f876:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    f87a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    f87c:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f880:	f000 f98e 	bl	fba0 <ipc_rpmsg_init>
	if (err != 0) {
    f884:	4604      	mov	r4, r0
    f886:	2800      	cmp	r0, #0
    f888:	d1ce      	bne.n	f828 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f88a:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    f88e:	f014 fd35 	bl	242fc <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    f892:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f894:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    f898:	db0a      	blt.n	f8b0 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    f89a:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    f89c:	4638      	mov	r0, r7
    f89e:	f01b fbb0 	bl	2b002 <atomic_set.isra.0>
}
    f8a2:	4620      	mov	r0, r4
    f8a4:	b005      	add	sp, #20
    f8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    f8aa:	f06f 040b 	mvn.w	r4, #11
    f8ae:	e7bb      	b.n	f828 <open+0x108>
		err = -EINVAL;
    f8b0:	f06f 0415 	mvn.w	r4, #21
    f8b4:	e7b8      	b.n	f828 <open+0x108>
		return -EALREADY;
    f8b6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f8ba:	e7f2      	b.n	f8a2 <open+0x182>
    f8bc:	0002afeb 	.word	0x0002afeb
    f8c0:	20031e88 	.word	0x20031e88
    f8c4:	0002afd1 	.word	0x0002afd1
    f8c8:	0002afc5 	.word	0x0002afc5
    f8cc:	0000f99d 	.word	0x0000f99d
    f8d0:	0002b0a3 	.word	0x0002b0a3
    f8d4:	0002b033 	.word	0x0002b033

0000f8d8 <close>:
{
    f8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f8dc:	4606      	mov	r6, r0
    f8de:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    f8e2:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f8e4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    f8e8:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f8ec:	e8d7 3fef 	ldaex	r3, [r7]
    f8f0:	2b02      	cmp	r3, #2
    f8f2:	d103      	bne.n	f8fc <close+0x24>
    f8f4:	e8c7 9fe2 	stlex	r2, r9, [r7]
    f8f8:	2a00      	cmp	r2, #0
    f8fa:	d1f7      	bne.n	f8ec <close+0x14>
    f8fc:	d149      	bne.n	f992 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    f8fe:	4826      	ldr	r0, [pc, #152]	; (f998 <close+0xc0>)
    f900:	f105 0140 	add.w	r1, r5, #64	; 0x40
    f904:	f7f9 fd35 	bl	9372 <strcmp>
    f908:	b120      	cbz	r0, f914 <close+0x3c>
		return -EBUSY;
    f90a:	f06f 040f 	mvn.w	r4, #15
}
    f90e:	4620      	mov	r0, r4
    f910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    f914:	4820      	ldr	r0, [pc, #128]	; (f998 <close+0xc0>)
    f916:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    f91a:	f7f9 fd2a 	bl	9372 <strcmp>
    f91e:	2800      	cmp	r0, #0
    f920:	d1f3      	bne.n	f90a <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    f922:	4628      	mov	r0, r5
    f924:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f928:	f01b fbee 	bl	2b108 <ipc_rpmsg_deinit>
	if (err != 0) {
    f92c:	4604      	mov	r4, r0
    f92e:	bb70      	cbnz	r0, f98e <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    f930:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    f932:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    f934:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    f936:	6883      	ldr	r3, [r0, #8]
    f938:	691b      	ldr	r3, [r3, #16]
    f93a:	b333      	cbz	r3, f98a <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    f93c:	4622      	mov	r2, r4
    f93e:	6989      	ldr	r1, [r1, #24]
    f940:	4798      	blx	r3
	if (err != 0) {
    f942:	4604      	mov	r4, r0
    f944:	bb18      	cbnz	r0, f98e <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    f946:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    f94a:	4649      	mov	r1, r9
    f94c:	4630      	mov	r0, r6
    f94e:	f016 fa31 	bl	25db4 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    f952:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    f954:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    f958:	f001 fd68 	bl	1142c <z_impl_k_thread_abort>
    f95c:	4630      	mov	r0, r6
    f95e:	f8d8 1000 	ldr.w	r1, [r8]
    f962:	f01b fc0e 	bl	2b182 <ipc_static_vrings_deinit>
	if (err != 0) {
    f966:	4604      	mov	r4, r0
    f968:	b988      	cbnz	r0, f98e <close+0xb6>
    f96a:	4601      	mov	r1, r0
    f96c:	22e8      	movs	r2, #232	; 0xe8
    f96e:	4630      	mov	r0, r6
    f970:	f020 fe37 	bl	305e2 <memset>
    f974:	4621      	mov	r1, r4
    f976:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    f97a:	4628      	mov	r0, r5
    f97c:	f020 fe31 	bl	305e2 <memset>
	atomic_set(&data->state, STATE_READY);
    f980:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    f982:	4638      	mov	r0, r7
    f984:	f01b fb3d 	bl	2b002 <atomic_set.isra.0>
	return err;
    f988:	e7c1      	b.n	f90e <close+0x36>
		return -ENOSYS;
    f98a:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    f98e:	2102      	movs	r1, #2
    f990:	e7f7      	b.n	f982 <close+0xaa>
		return -EALREADY;
    f992:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f996:	e7ba      	b.n	f90e <close+0x36>
    f998:	000368ec 	.word	0x000368ec

0000f99c <bound_cb>:
{
    f99c:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    f99e:	4604      	mov	r4, r0
    f9a0:	b140      	cbz	r0, f9b4 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    f9a2:	2300      	movs	r3, #0
    f9a4:	2201      	movs	r2, #1
    f9a6:	e9cd 3200 	strd	r3, r2, [sp]
    f9aa:	4b07      	ldr	r3, [pc, #28]	; (f9c8 <bound_cb+0x2c>)
    f9ac:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f9b0:	f014 fab4 	bl	23f1c <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    f9b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f9b6:	681b      	ldr	r3, [r3, #0]
    f9b8:	b123      	cbz	r3, f9c4 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    f9ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    f9bc:	b002      	add	sp, #8
    f9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    f9c2:	4718      	bx	r3
}
    f9c4:	b002      	add	sp, #8
    f9c6:	bd10      	pop	{r4, pc}
    f9c8:	000368ec 	.word	0x000368ec

0000f9cc <send>:
{
    f9cc:	b513      	push	{r0, r1, r4, lr}
    f9ce:	4604      	mov	r4, r0
    f9d0:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f9d2:	6921      	ldr	r1, [r4, #16]
    f9d4:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    f9d8:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    f9dc:	2902      	cmp	r1, #2
    f9de:	d110      	bne.n	fa02 <send+0x36>
	if (len == 0) {
    f9e0:	b193      	cbz	r3, fa08 <send+0x3c>
	if (!rpmsg_ept) {
    f9e2:	b1a0      	cbz	r0, fa0e <send+0x42>
    f9e4:	2101      	movs	r1, #1
    f9e6:	e9cd 3100 	strd	r3, r1, [sp]
    f9ea:	4613      	mov	r3, r2
    f9ec:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f9f0:	f014 fa94 	bl	23f1c <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    f9f4:	4b07      	ldr	r3, [pc, #28]	; (fa14 <send+0x48>)
		return -ENOMEM;
    f9f6:	4298      	cmp	r0, r3
    f9f8:	bf08      	it	eq
    f9fa:	f06f 000b 	mvneq.w	r0, #11
}
    f9fe:	b002      	add	sp, #8
    fa00:	bd10      	pop	{r4, pc}
		return -EBUSY;
    fa02:	f06f 000f 	mvn.w	r0, #15
    fa06:	e7fa      	b.n	f9fe <send+0x32>
		return -EBADMSG;
    fa08:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    fa0c:	e7f7      	b.n	f9fe <send+0x32>
		return -ENOENT;
    fa0e:	f06f 0001 	mvn.w	r0, #1
    fa12:	e7f4      	b.n	f9fe <send+0x32>
    fa14:	fffff82e 	.word	0xfffff82e

0000fa18 <register_ept>:
{
    fa18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    fa1c:	4688      	mov	r8, r1
    fa1e:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    fa20:	6906      	ldr	r6, [r0, #16]
    fa22:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    fa26:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    fa2a:	2b02      	cmp	r3, #2
    fa2c:	d15f      	bne.n	faee <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    fa2e:	6813      	ldr	r3, [r2, #0]
    fa30:	b923      	cbnz	r3, fa3c <register_ept+0x24>
		return -EINVAL;
    fa32:	f06f 0015 	mvn.w	r0, #21
}
    fa36:	b003      	add	sp, #12
    fa38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    fa3c:	781b      	ldrb	r3, [r3, #0]
    fa3e:	2b00      	cmp	r3, #0
    fa40:	d0f7      	beq.n	fa32 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    fa42:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    fa46:	f1b9 0f00 	cmp.w	r9, #0
    fa4a:	d133      	bne.n	fab4 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    fa4c:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    fa50:	f04f 32ff 	mov.w	r2, #4294967295
    fa54:	f04f 33ff 	mov.w	r3, #4294967295
    fa58:	4638      	mov	r0, r7
    fa5a:	f015 fb53 	bl	25104 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    fa5e:	4630      	mov	r0, r6
    fa60:	682a      	ldr	r2, [r5, #0]
    fa62:	a901      	add	r1, sp, #4
    fa64:	f7ff fe48 	bl	f6f8 <get_ept>
	if (rpmsg_ept == NULL) {
    fa68:	9c01      	ldr	r4, [sp, #4]
    fa6a:	b91c      	cbnz	r4, fa74 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    fa6c:	4638      	mov	r0, r7
    fa6e:	f01b fac6 	bl	2affe <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    fa72:	e7de      	b.n	fa32 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    fa74:	f105 0308 	add.w	r3, r5, #8
    fa78:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    fa7a:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    fa7c:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    fa80:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    fa82:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    fa84:	b160      	cbz	r0, faa0 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    fa86:	4638      	mov	r0, r7
    fa88:	f01b fab9 	bl	2affe <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    fa8c:	4621      	mov	r1, r4
    fa8e:	4630      	mov	r0, r6
    fa90:	6e23      	ldr	r3, [r4, #96]	; 0x60
    fa92:	682a      	ldr	r2, [r5, #0]
    fa94:	f7ff fe0e 	bl	f6b4 <advertise_ept>
	return 0;
    fa98:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    fa9a:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    fa9e:	e7ca      	b.n	fa36 <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    faa0:	2220      	movs	r2, #32
    faa2:	6829      	ldr	r1, [r5, #0]
    faa4:	f104 0040 	add.w	r0, r4, #64	; 0x40
    faa8:	f020 fefb 	bl	308a2 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    faac:	4638      	mov	r0, r7
    faae:	f01b faa6 	bl	2affe <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    fab2:	e7f1      	b.n	fa98 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    fab4:	4630      	mov	r0, r6
    fab6:	490f      	ldr	r1, [pc, #60]	; (faf4 <register_ept+0xdc>)
    fab8:	f01b fa6e 	bl	2af98 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    fabc:	4604      	mov	r4, r0
    fabe:	2800      	cmp	r0, #0
    fac0:	d0b7      	beq.n	fa32 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    fac2:	f105 0308 	add.w	r3, r5, #8
    fac6:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    fac8:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    faca:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    facc:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    face:	2300      	movs	r3, #0
    fad0:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    fad4:	2220      	movs	r2, #32
    fad6:	6829      	ldr	r1, [r5, #0]
    fad8:	3040      	adds	r0, #64	; 0x40
    fada:	f020 fee2 	bl	308a2 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    fade:	4622      	mov	r2, r4
    fae0:	2101      	movs	r1, #1
    fae2:	4630      	mov	r0, r6
    fae4:	f000 f83e 	bl	fb64 <ipc_rpmsg_register_ept>
	if (err != 0) {
    fae8:	2800      	cmp	r0, #0
    faea:	d0d5      	beq.n	fa98 <register_ept+0x80>
    faec:	e7a1      	b.n	fa32 <register_ept+0x1a>
		return -EBUSY;
    faee:	f06f 000f 	mvn.w	r0, #15
    faf2:	e7a0      	b.n	fa36 <register_ept+0x1e>
    faf4:	000368ec 	.word	0x000368ec

0000faf8 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fafc:	4605      	mov	r5, r0
    fafe:	460e      	mov	r6, r1
    fb00:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fb02:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    fb04:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    fb08:	b085      	sub	sp, #20
    fb0a:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    fb0e:	4621      	mov	r1, r4
    fb10:	4630      	mov	r0, r6
    fb12:	f7f9 fc2e 	bl	9372 <strcmp>
    fb16:	b9e0      	cbnz	r0, fb52 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    fb18:	4b11      	ldr	r3, [pc, #68]	; (fb60 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    fb1a:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    fb1e:	9302      	str	r3, [sp, #8]
    fb20:	f8da 3010 	ldr.w	r3, [sl, #16]
    fb24:	4632      	mov	r2, r6
    fb26:	e9cd 8300 	strd	r8, r3, [sp]
    fb2a:	4629      	mov	r1, r5
    fb2c:	f04f 33ff 	mov.w	r3, #4294967295
    fb30:	4658      	mov	r0, fp
    fb32:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    fb36:	f014 fa3d 	bl	23fb4 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    fb3a:	b960      	cbnz	r0, fb56 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    fb3c:	2370      	movs	r3, #112	; 0x70
    fb3e:	2201      	movs	r2, #1
    fb40:	fb03 9307 	mla	r3, r3, r7, r9
    fb44:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    fb48:	f8da 300c 	ldr.w	r3, [sl, #12]
    fb4c:	b10b      	cbz	r3, fb52 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    fb4e:	4658      	mov	r0, fp
    fb50:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fb52:	3470      	adds	r4, #112	; 0x70
    fb54:	b117      	cbz	r7, fb5c <ns_bind_cb+0x64>
			}
		}
	}
}
    fb56:	b005      	add	sp, #20
    fb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fb5c:	2701      	movs	r7, #1
    fb5e:	e7d6      	b.n	fb0e <ns_bind_cb+0x16>
    fb60:	0002b105 	.word	0x0002b105

0000fb64 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    fb64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fb66:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    fb68:	b190      	cbz	r0, fb90 <ipc_rpmsg_register_ept+0x2c>
    fb6a:	b18a      	cbz	r2, fb90 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    fb6c:	2901      	cmp	r1, #1
    fb6e:	d112      	bne.n	fb96 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    fb70:	4b0a      	ldr	r3, [pc, #40]	; (fb9c <ipc_rpmsg_register_ept+0x38>)
    fb72:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    fb76:	9302      	str	r3, [sp, #8]
    fb78:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    fb7c:	3240      	adds	r2, #64	; 0x40
    fb7e:	9301      	str	r3, [sp, #4]
    fb80:	f04f 33ff 	mov.w	r3, #4294967295
    fb84:	4620      	mov	r0, r4
    fb86:	9300      	str	r3, [sp, #0]
    fb88:	f014 fa14 	bl	23fb4 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    fb8c:	b004      	add	sp, #16
    fb8e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    fb90:	f06f 0015 	mvn.w	r0, #21
    fb94:	e7fa      	b.n	fb8c <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    fb96:	2000      	movs	r0, #0
    fb98:	e7f8      	b.n	fb8c <ipc_rpmsg_register_ept+0x28>
    fb9a:	bf00      	nop
    fb9c:	0002b105 	.word	0x0002b105

0000fba0 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    fba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fba4:	b087      	sub	sp, #28
    fba6:	460e      	mov	r6, r1
    fba8:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    fbac:	4614      	mov	r4, r2
    fbae:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    fbb2:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    fbb4:	b330      	cbz	r0, fc04 <ipc_rpmsg_init+0x64>
    fbb6:	b329      	cbz	r1, fc04 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    fbb8:	f8df c050 	ldr.w	ip, [pc, #80]	; fc0c <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    fbbc:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    fbc0:	2d00      	cmp	r5, #0
    fbc2:	bf08      	it	eq
    fbc4:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    fbc6:	b99e      	cbnz	r6, fbf0 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    fbc8:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    fbcc:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    fbd0:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    fbd2:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    fbd4:	f020 fa64 	bl	300a0 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    fbd8:	ab03      	add	r3, sp, #12
    fbda:	e9cd 4300 	strd	r4, r3, [sp]
    fbde:	462a      	mov	r2, r5
    fbe0:	463b      	mov	r3, r7
    fbe2:	4641      	mov	r1, r8
    fbe4:	4648      	mov	r0, r9
    fbe6:	f014 fbaf 	bl	24348 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    fbea:	b007      	add	sp, #28
    fbec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    fbf0:	2200      	movs	r2, #0
    fbf2:	4641      	mov	r1, r8
    fbf4:	920e      	str	r2, [sp, #56]	; 0x38
    fbf6:	4648      	mov	r0, r9
    fbf8:	462a      	mov	r2, r5
}
    fbfa:	b007      	add	sp, #28
    fbfc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    fc00:	f014 bccc 	b.w	2459c <rpmsg_init_vdev>
		return -EINVAL;
    fc04:	f06f 0015 	mvn.w	r0, #21
    fc08:	e7ef      	b.n	fbea <ipc_rpmsg_init+0x4a>
    fc0a:	bf00      	nop
    fc0c:	0000faf9 	.word	0x0000faf9

0000fc10 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    fc10:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc12:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    fc14:	4604      	mov	r4, r0
{
    fc16:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    fc18:	2800      	cmp	r0, #0
    fc1a:	d06f      	beq.n	fcfc <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    fc1c:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    fc1e:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    fc20:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fc22:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    fc24:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    fc28:	4f36      	ldr	r7, [pc, #216]	; (fd04 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fc2a:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    fc2c:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    fc30:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fc34:	e9cd 3301 	strd	r3, r3, [sp, #4]
    fc38:	f04f 33ff 	mov.w	r3, #4294967295
    fc3c:	9300      	str	r3, [sp, #0]
    fc3e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    fc40:	f01f f83f 	bl	2ecc2 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    fc44:	4a30      	ldr	r2, [pc, #192]	; (fd08 <ipc_static_vrings_init+0xf8>)
    fc46:	ab06      	add	r3, sp, #24
    fc48:	e892 0003 	ldmia.w	r2, {r0, r1}
    fc4c:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    fc50:	4618      	mov	r0, r3
    fc52:	f010 fe95 	bl	20980 <metal_init>
	if (err != 0) {
    fc56:	4605      	mov	r5, r0
    fc58:	b9d8      	cbnz	r0, fc92 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    fc5a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    fc5e:	f010 fe6f 	bl	20940 <metal_register_generic_device>
	if (err != 0) {
    fc62:	4605      	mov	r5, r0
    fc64:	b9a8      	cbnz	r0, fc92 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    fc66:	4639      	mov	r1, r7
    fc68:	4828      	ldr	r0, [pc, #160]	; (fd0c <ipc_static_vrings_init+0xfc>)
    fc6a:	aa05      	add	r2, sp, #20
    fc6c:	f01f f801 	bl	2ec72 <metal_device_open>
	if (err != 0) {
    fc70:	4605      	mov	r5, r0
    fc72:	b970      	cbnz	r0, fc92 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    fc74:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    fc76:	689a      	ldr	r2, [r3, #8]
    fc78:	b172      	cbz	r2, fc98 <ipc_static_vrings_init+0x88>
    fc7a:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fc7c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    fc80:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fc84:	f01b fa6f 	bl	2b166 <virtqueue_allocate>
    fc88:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    fc8c:	b930      	cbnz	r0, fc9c <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    fc8e:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    fc92:	4628      	mov	r0, r5
    fc94:	b009      	add	sp, #36	; 0x24
    fc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc98:	4603      	mov	r3, r0
    fc9a:	e7ef      	b.n	fc7c <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    fc9c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    fca0:	f01b fa61 	bl	2b166 <virtqueue_allocate>
    fca4:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    fca8:	2800      	cmp	r0, #0
    fcaa:	d0f0      	beq.n	fc8e <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fcac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fcb0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fcb4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    fcb8:	2304      	movs	r3, #4
    fcba:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    fcbe:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    fcc2:	2302      	movs	r3, #2
    fcc4:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    fcc6:	4b12      	ldr	r3, [pc, #72]	; (fd10 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fcc8:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fccc:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fcd0:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    fcd4:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fcd8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    fcdc:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fcde:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fce2:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fce6:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fcea:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    fcee:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    fcf2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    fcf6:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fcf8:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    fcfa:	e7ca      	b.n	fc92 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    fcfc:	f06f 0515 	mvn.w	r5, #21
    fd00:	e7c7      	b.n	fc92 <ipc_static_vrings_init+0x82>
    fd02:	bf00      	nop
    fd04:	00033abe 	.word	0x00033abe
    fd08:	00031694 	.word	0x00031694
    fd0c:	00033ac8 	.word	0x00033ac8
    fd10:	00031bd8 	.word	0x00031bd8

0000fd14 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    fd14:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    fd16:	4b11      	ldr	r3, [pc, #68]	; (fd5c <flash_area_open+0x48>)
{
    fd18:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    fd1a:	681c      	ldr	r4, [r3, #0]
    fd1c:	b1dc      	cbz	r4, fd56 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    fd1e:	4b10      	ldr	r3, [pc, #64]	; (fd60 <flash_area_open+0x4c>)
    fd20:	6819      	ldr	r1, [r3, #0]
    fd22:	2300      	movs	r3, #0
    fd24:	428b      	cmp	r3, r1
    fd26:	db02      	blt.n	fd2e <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    fd28:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    fd2c:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    fd2e:	4622      	mov	r2, r4
    fd30:	f812 6b10 	ldrb.w	r6, [r2], #16
    fd34:	4286      	cmp	r6, r0
    fd36:	d002      	beq.n	fd3e <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    fd38:	4614      	mov	r4, r2
    fd3a:	3301      	adds	r3, #1
    fd3c:	e7f2      	b.n	fd24 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fd3e:	68e0      	ldr	r0, [r4, #12]
    fd40:	b910      	cbnz	r0, fd48 <flash_area_open+0x34>
		return -ENODEV;
    fd42:	f06f 0012 	mvn.w	r0, #18
    fd46:	e7f1      	b.n	fd2c <flash_area_open+0x18>
    fd48:	f020 f9c7 	bl	300da <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fd4c:	2800      	cmp	r0, #0
    fd4e:	d0f8      	beq.n	fd42 <flash_area_open+0x2e>
	return 0;
    fd50:	2000      	movs	r0, #0
	*fap = area;
    fd52:	602c      	str	r4, [r5, #0]
	return 0;
    fd54:	e7ea      	b.n	fd2c <flash_area_open+0x18>
		return -EACCES;
    fd56:	f06f 000c 	mvn.w	r0, #12
    fd5a:	e7e7      	b.n	fd2c <flash_area_open+0x18>
    fd5c:	2000846c 	.word	0x2000846c
    fd60:	00031c74 	.word	0x00031c74

0000fd64 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    fd64:	b570      	push	{r4, r5, r6, lr}
    fd66:	b088      	sub	sp, #32
    fd68:	4605      	mov	r5, r0
    fd6a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    fd6c:	b2c0      	uxtb	r0, r0
    fd6e:	4669      	mov	r1, sp
{
    fd70:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    fd72:	f7ff ffcf 	bl	fd14 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    fd76:	2800      	cmp	r0, #0
    fd78:	db1b      	blt.n	fdb2 <flash_area_get_sectors+0x4e>
    fd7a:	9800      	ldr	r0, [sp, #0]
    fd7c:	b1c8      	cbz	r0, fdb2 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    fd7e:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    fd80:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    fd82:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    fd84:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    fd86:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    fd88:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    fd8c:	2300      	movs	r3, #0
	cb_data->status = 0;
    fd8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    fd92:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    fd94:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    fd96:	f01b fa24 	bl	2b1e2 <flash_area_close>
	if (flash_dev == NULL) {
    fd9a:	b16d      	cbz	r5, fdb8 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    fd9c:	4628      	mov	r0, r5
    fd9e:	4908      	ldr	r1, [pc, #32]	; (fdc0 <flash_area_get_sectors+0x5c>)
    fda0:	aa01      	add	r2, sp, #4
    fda2:	f01e fad4 	bl	2e34e <flash_page_foreach>
	if (cb_data->status == 0) {
    fda6:	9807      	ldr	r0, [sp, #28]
    fda8:	b908      	cbnz	r0, fdae <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    fdaa:	9b05      	ldr	r3, [sp, #20]
    fdac:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    fdae:	b008      	add	sp, #32
    fdb0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    fdb2:	f06f 0015 	mvn.w	r0, #21
    fdb6:	e7fa      	b.n	fdae <flash_area_get_sectors+0x4a>
		return -ENODEV;
    fdb8:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    fdbc:	e7f7      	b.n	fdae <flash_area_get_sectors+0x4a>
    fdbe:	bf00      	nop
    fdc0:	0002b265 	.word	0x0002b265

0000fdc4 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
    fdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    fdc8:	4b0f      	ldr	r3, [pc, #60]	; (fe08 <settings_save_one+0x44>)
{
    fdca:	4605      	mov	r5, r0
	cs = settings_save_dst;
    fdcc:	681c      	ldr	r4, [r3, #0]
{
    fdce:	460e      	mov	r6, r1
    fdd0:	4617      	mov	r7, r2
	if (!cs) {
    fdd2:	b1ac      	cbz	r4, fe00 <settings_save_one+0x3c>
    fdd4:	f04f 32ff 	mov.w	r2, #4294967295
    fdd8:	f04f 33ff 	mov.w	r3, #4294967295
    fddc:	480b      	ldr	r0, [pc, #44]	; (fe0c <settings_save_one+0x48>)
    fdde:	f015 f991 	bl	25104 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    fde2:	6863      	ldr	r3, [r4, #4]
    fde4:	4632      	mov	r2, r6
    fde6:	f8d3 8008 	ldr.w	r8, [r3, #8]
    fdea:	4629      	mov	r1, r5
    fdec:	463b      	mov	r3, r7
    fdee:	4620      	mov	r0, r4
    fdf0:	47c0      	blx	r8
    fdf2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    fdf4:	4805      	ldr	r0, [pc, #20]	; (fe0c <settings_save_one+0x48>)
    fdf6:	f015 fa55 	bl	252a4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    fdfa:	4620      	mov	r0, r4
    fdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    fe00:	f06f 0401 	mvn.w	r4, #1
    fe04:	e7f9      	b.n	fdfa <settings_save_one+0x36>
    fe06:	bf00      	nop
    fe08:	200214a8 	.word	0x200214a8
    fe0c:	20008b7c 	.word	0x20008b7c

0000fe10 <settings_src_register>:
	parent->next = child;
    fe10:	2300      	movs	r3, #0
    fe12:	6003      	str	r3, [r0, #0]
	return list->tail;
    fe14:	4b04      	ldr	r3, [pc, #16]	; (fe28 <settings_src_register+0x18>)
    fe16:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    fe18:	b912      	cbnz	r2, fe20 <settings_src_register+0x10>
	list->head = node;
    fe1a:	e9c3 0000 	strd	r0, r0, [r3]
}
    fe1e:	4770      	bx	lr
	parent->next = child;
    fe20:	6010      	str	r0, [r2, #0]
	list->tail = node;
    fe22:	6058      	str	r0, [r3, #4]
}
    fe24:	4770      	bx	lr
    fe26:	bf00      	nop
    fe28:	200214ac 	.word	0x200214ac

0000fe2c <settings_dst_register>:
	settings_save_dst = cs;
    fe2c:	4b01      	ldr	r3, [pc, #4]	; (fe34 <settings_dst_register+0x8>)
    fe2e:	6018      	str	r0, [r3, #0]
}
    fe30:	4770      	bx	lr
    fe32:	bf00      	nop
    fe34:	200214a8 	.word	0x200214a8

0000fe38 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    fe38:	2300      	movs	r3, #0
{
    fe3a:	b530      	push	{r4, r5, lr}
    fe3c:	b085      	sub	sp, #20
    fe3e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    fe40:	e9cd 3302 	strd	r3, r3, [sp, #8]
    fe44:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    fe46:	f04f 33ff 	mov.w	r3, #4294967295
    fe4a:	f04f 32ff 	mov.w	r2, #4294967295
    fe4e:	480b      	ldr	r0, [pc, #44]	; (fe7c <settings_load_subtree+0x44>)
    fe50:	f015 f958 	bl	25104 <z_impl_k_mutex_lock>
	return list->head;
    fe54:	4b0a      	ldr	r3, [pc, #40]	; (fe80 <settings_load_subtree+0x48>)
    fe56:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    fe58:	b94c      	cbnz	r4, fe6e <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
    fe5a:	4628      	mov	r0, r5
    fe5c:	f000 f8f6 	bl	1004c <settings_commit_subtree>
    fe60:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    fe62:	4806      	ldr	r0, [pc, #24]	; (fe7c <settings_load_subtree+0x44>)
    fe64:	f015 fa1e 	bl	252a4 <z_impl_k_mutex_unlock>
}
    fe68:	4620      	mov	r0, r4
    fe6a:	b005      	add	sp, #20
    fe6c:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
    fe6e:	6863      	ldr	r3, [r4, #4]
    fe70:	4620      	mov	r0, r4
    fe72:	681b      	ldr	r3, [r3, #0]
    fe74:	a901      	add	r1, sp, #4
    fe76:	4798      	blx	r3
	return node->next;
    fe78:	6824      	ldr	r4, [r4, #0]
    fe7a:	e7ed      	b.n	fe58 <settings_load_subtree+0x20>
    fe7c:	20008b7c 	.word	0x20008b7c
    fe80:	200214ac 	.word	0x200214ac

0000fe84 <settings_load_subtree_direct>:
{
    fe84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    fe86:	e9cd 0101 	strd	r0, r1, [sp, #4]
    fe8a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    fe8c:	f04f 33ff 	mov.w	r3, #4294967295
    fe90:	f04f 32ff 	mov.w	r2, #4294967295
    fe94:	4809      	ldr	r0, [pc, #36]	; (febc <settings_load_subtree_direct+0x38>)
    fe96:	f015 f935 	bl	25104 <z_impl_k_mutex_lock>
	return list->head;
    fe9a:	4b09      	ldr	r3, [pc, #36]	; (fec0 <settings_load_subtree_direct+0x3c>)
    fe9c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    fe9e:	b92c      	cbnz	r4, feac <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
    fea0:	4806      	ldr	r0, [pc, #24]	; (febc <settings_load_subtree_direct+0x38>)
    fea2:	f015 f9ff 	bl	252a4 <z_impl_k_mutex_unlock>
}
    fea6:	4620      	mov	r0, r4
    fea8:	b004      	add	sp, #16
    feaa:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
    feac:	6863      	ldr	r3, [r4, #4]
    feae:	4620      	mov	r0, r4
    feb0:	681b      	ldr	r3, [r3, #0]
    feb2:	a901      	add	r1, sp, #4
    feb4:	4798      	blx	r3
	return node->next;
    feb6:	6824      	ldr	r4, [r4, #0]
    feb8:	e7f1      	b.n	fe9e <settings_load_subtree_direct+0x1a>
    feba:	bf00      	nop
    febc:	20008b7c 	.word	0x20008b7c
    fec0:	200214ac 	.word	0x200214ac

0000fec4 <settings_store_init>:
	list->head = NULL;
    fec4:	2200      	movs	r2, #0
    fec6:	4b02      	ldr	r3, [pc, #8]	; (fed0 <settings_store_init+0xc>)
	list->tail = NULL;
    fec8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    fecc:	4770      	bx	lr
    fece:	bf00      	nop
    fed0:	200214ac 	.word	0x200214ac

0000fed4 <settings_init>:
	list->head = NULL;
    fed4:	2200      	movs	r2, #0
    fed6:	4b02      	ldr	r3, [pc, #8]	; (fee0 <settings_init+0xc>)
	list->tail = NULL;
    fed8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    fedc:	f7ff bff2 	b.w	fec4 <settings_store_init>
    fee0:	200214b4 	.word	0x200214b4

0000fee4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    fee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    fee8:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    feea:	460c      	mov	r4, r1
    feec:	b109      	cbz	r1, fef2 <settings_parse_and_lookup+0xe>
		*next = NULL;
    feee:	2300      	movs	r3, #0
    fef0:	600b      	str	r3, [r1, #0]
{
    fef2:	2600      	movs	r6, #0
    fef4:	4d25      	ldr	r5, [pc, #148]	; (ff8c <settings_parse_and_lookup+0xa8>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    fef6:	f8df 9098 	ldr.w	r9, [pc, #152]	; ff90 <settings_parse_and_lookup+0xac>
    fefa:	454d      	cmp	r5, r9
    fefc:	d924      	bls.n	ff48 <settings_parse_and_lookup+0x64>
    fefe:	4925      	ldr	r1, [pc, #148]	; (ff94 <settings_parse_and_lookup+0xb0>)
    ff00:	2394      	movs	r3, #148	; 0x94
    ff02:	4a25      	ldr	r2, [pc, #148]	; (ff98 <settings_parse_and_lookup+0xb4>)
    ff04:	4825      	ldr	r0, [pc, #148]	; (ff9c <settings_parse_and_lookup+0xb8>)
    ff06:	f01a fbd8 	bl	2a6ba <assert_print>
    ff0a:	4825      	ldr	r0, [pc, #148]	; (ffa0 <settings_parse_and_lookup+0xbc>)
    ff0c:	f01a fbd5 	bl	2a6ba <assert_print>
    ff10:	2194      	movs	r1, #148	; 0x94
    ff12:	4821      	ldr	r0, [pc, #132]	; (ff98 <settings_parse_and_lookup+0xb4>)
    ff14:	f01a fbca 	bl	2a6ac <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff18:	f8d5 8000 	ldr.w	r8, [r5]
    ff1c:	4638      	mov	r0, r7
    ff1e:	4641      	mov	r1, r8
    ff20:	aa01      	add	r2, sp, #4
    ff22:	f01b f9c8 	bl	2b2b6 <settings_name_steq>
    ff26:	b150      	cbz	r0, ff3e <settings_parse_and_lookup+0x5a>
			continue;
		}
		if (!bestmatch) {
    ff28:	b916      	cbnz	r6, ff30 <settings_parse_and_lookup+0x4c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
    ff2a:	b954      	cbnz	r4, ff42 <settings_parse_and_lookup+0x5e>
{
    ff2c:	462e      	mov	r6, r5
    ff2e:	e006      	b.n	ff3e <settings_parse_and_lookup+0x5a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ff30:	2200      	movs	r2, #0
    ff32:	4640      	mov	r0, r8
    ff34:	6831      	ldr	r1, [r6, #0]
    ff36:	f01b f9be 	bl	2b2b6 <settings_name_steq>
    ff3a:	2800      	cmp	r0, #0
    ff3c:	d1f5      	bne.n	ff2a <settings_parse_and_lookup+0x46>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ff3e:	3514      	adds	r5, #20
    ff40:	e7db      	b.n	fefa <settings_parse_and_lookup+0x16>
				*next = tmpnext;
    ff42:	9b01      	ldr	r3, [sp, #4]
    ff44:	6023      	str	r3, [r4, #0]
    ff46:	e7f1      	b.n	ff2c <settings_parse_and_lookup+0x48>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ff48:	d3e6      	bcc.n	ff18 <settings_parse_and_lookup+0x34>
	return list->head;
    ff4a:	4b16      	ldr	r3, [pc, #88]	; (ffa4 <settings_parse_and_lookup+0xc0>)
    ff4c:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ff4e:	b1c5      	cbz	r5, ff82 <settings_parse_and_lookup+0x9e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff50:	f855 8c14 	ldr.w	r8, [r5, #-20]
    ff54:	4638      	mov	r0, r7
    ff56:	4641      	mov	r1, r8
    ff58:	aa01      	add	r2, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ff5a:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff5c:	f01b f9ab 	bl	2b2b6 <settings_name_steq>
    ff60:	b150      	cbz	r0, ff78 <settings_parse_and_lookup+0x94>
			continue;
		}
		if (!bestmatch) {
    ff62:	b916      	cbnz	r6, ff6a <settings_parse_and_lookup+0x86>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
    ff64:	b954      	cbnz	r4, ff7c <settings_parse_and_lookup+0x98>
{
    ff66:	462e      	mov	r6, r5
    ff68:	e006      	b.n	ff78 <settings_parse_and_lookup+0x94>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ff6a:	2200      	movs	r2, #0
    ff6c:	4640      	mov	r0, r8
    ff6e:	6831      	ldr	r1, [r6, #0]
    ff70:	f01b f9a1 	bl	2b2b6 <settings_name_steq>
    ff74:	2800      	cmp	r0, #0
    ff76:	d1f5      	bne.n	ff64 <settings_parse_and_lookup+0x80>
	return node->next;
    ff78:	696d      	ldr	r5, [r5, #20]
    ff7a:	e7e8      	b.n	ff4e <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    ff7c:	9b01      	ldr	r3, [sp, #4]
    ff7e:	6023      	str	r3, [r4, #0]
    ff80:	e7f1      	b.n	ff66 <settings_parse_and_lookup+0x82>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    ff82:	4630      	mov	r0, r6
    ff84:	b003      	add	sp, #12
    ff86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ff8a:	bf00      	nop
    ff8c:	000315fc 	.word	0x000315fc
    ff90:	00031674 	.word	0x00031674
    ff94:	00033b02 	.word	0x00033b02
    ff98:	00033ad0 	.word	0x00033ad0
    ff9c:	00032659 	.word	0x00032659
    ffa0:	000336ed 	.word	0x000336ed
    ffa4:	200214b4 	.word	0x200214b4

0000ffa8 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    ffa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffac:	b084      	sub	sp, #16
    ffae:	af02      	add	r7, sp, #8
    ffb0:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
    ffb4:	4604      	mov	r4, r0
    ffb6:	460d      	mov	r5, r1
    ffb8:	4616      	mov	r6, r2
    ffba:	4698      	mov	r8, r3
	int rc;
	const char *name_key = name;
    ffbc:	6078      	str	r0, [r7, #4]

	if (load_arg && load_arg->subtree &&
    ffbe:	f1b9 0f00 	cmp.w	r9, #0
    ffc2:	d007      	beq.n	ffd4 <settings_call_set_handler+0x2c>
    ffc4:	f8d9 1000 	ldr.w	r1, [r9]
    ffc8:	bb31      	cbnz	r1, 10018 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
    ffca:	f8d9 a004 	ldr.w	sl, [r9, #4]
    ffce:	f1ba 0f00 	cmp.w	sl, #0
    ffd2:	d128      	bne.n	10026 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x26>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
    ffd4:	4620      	mov	r0, r4
    ffd6:	1d39      	adds	r1, r7, #4
    ffd8:	f7ff ff84 	bl	fee4 <settings_parse_and_lookup>
		if (!ch) {
    ffdc:	b308      	cbz	r0, 10022 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x22>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    ffde:	f8d0 9008 	ldr.w	r9, [r0, #8]
    ffe2:	4643      	mov	r3, r8
    ffe4:	4632      	mov	r2, r6
    ffe6:	4629      	mov	r1, r5
    ffe8:	6878      	ldr	r0, [r7, #4]
    ffea:	47c8      	blx	r9

		if (rc != 0) {
    ffec:	b1c8      	cbz	r0, 10022 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x22>
			LOG_ERR("set-value failure. key: %s error(%d)",
    ffee:	466d      	mov	r5, sp
    fff0:	b08a      	sub	sp, #40	; 0x28
    fff2:	aa02      	add	r2, sp, #8
    fff4:	4b12      	ldr	r3, [pc, #72]	; (10040 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x40>)
    fff6:	61d0      	str	r0, [r2, #28]
    fff8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    fffc:	f44f 7300 	mov.w	r3, #512	; 0x200
   10000:	8413      	strh	r3, [r2, #32]
   10002:	4b10      	ldr	r3, [pc, #64]	; (10044 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x44>)
   10004:	f842 3f10 	str.w	r3, [r2, #16]!
   10008:	2300      	movs	r3, #0
   1000a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1000e:	480e      	ldr	r0, [pc, #56]	; (10048 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x48>)
   10010:	f7fe fc3e 	bl	e890 <z_impl_z_log_msg_static_create>
   10014:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
   10016:	e004      	b.n	10022 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x22>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   10018:	1d3a      	adds	r2, r7, #4
   1001a:	f01b f94c 	bl	2b2b6 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1001e:	2800      	cmp	r0, #0
   10020:	d1d3      	bne.n	ffca <settings_call_set_handler+0x22>
		return 0;
   10022:	2000      	movs	r0, #0
   10024:	e007      	b.n	10036 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x36>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   10026:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1002a:	4632      	mov	r2, r6
   1002c:	9300      	str	r3, [sp, #0]
   1002e:	4629      	mov	r1, r5
   10030:	4643      	mov	r3, r8
   10032:	6878      	ldr	r0, [r7, #4]
   10034:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   10036:	3708      	adds	r7, #8
   10038:	46bd      	mov	sp, r7
   1003a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1003e:	bf00      	nop
   10040:	00033b2a 	.word	0x00033b2a
   10044:	01000004 	.word	0x01000004
   10048:	000315c4 	.word	0x000315c4

0001004c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   1004c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1004e:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   10050:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   10052:	4c1e      	ldr	r4, [pc, #120]	; (100cc <settings_commit_subtree+0x80>)
   10054:	4f1e      	ldr	r7, [pc, #120]	; (100d0 <settings_commit_subtree+0x84>)
   10056:	42bc      	cmp	r4, r7
   10058:	d91f      	bls.n	1009a <settings_commit_subtree+0x4e>
   1005a:	491e      	ldr	r1, [pc, #120]	; (100d4 <settings_commit_subtree+0x88>)
   1005c:	23f4      	movs	r3, #244	; 0xf4
   1005e:	4a1e      	ldr	r2, [pc, #120]	; (100d8 <settings_commit_subtree+0x8c>)
   10060:	481e      	ldr	r0, [pc, #120]	; (100dc <settings_commit_subtree+0x90>)
   10062:	f01a fb2a 	bl	2a6ba <assert_print>
   10066:	481e      	ldr	r0, [pc, #120]	; (100e0 <settings_commit_subtree+0x94>)
   10068:	f01a fb27 	bl	2a6ba <assert_print>
   1006c:	21f4      	movs	r1, #244	; 0xf4
   1006e:	481a      	ldr	r0, [pc, #104]	; (100d8 <settings_commit_subtree+0x8c>)
   10070:	f01a fb1c 	bl	2a6ac <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10074:	b92e      	cbnz	r6, 10082 <settings_commit_subtree+0x36>
			continue;
		}
		if (ch->h_commit) {
   10076:	68e3      	ldr	r3, [r4, #12]
   10078:	b95b      	cbnz	r3, 10092 <settings_commit_subtree+0x46>
{
   1007a:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1007c:	4605      	mov	r5, r0
   1007e:	3414      	adds	r4, #20
   10080:	e7e9      	b.n	10056 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10082:	2200      	movs	r2, #0
   10084:	4631      	mov	r1, r6
   10086:	6820      	ldr	r0, [r4, #0]
   10088:	f01b f915 	bl	2b2b6 <settings_name_steq>
   1008c:	2800      	cmp	r0, #0
   1008e:	d1f2      	bne.n	10076 <settings_commit_subtree+0x2a>
   10090:	e7f3      	b.n	1007a <settings_commit_subtree+0x2e>
			rc2 = ch->h_commit();
   10092:	4798      	blx	r3
			if (!rc) {
   10094:	2d00      	cmp	r5, #0
   10096:	d1f0      	bne.n	1007a <settings_commit_subtree+0x2e>
   10098:	e7f0      	b.n	1007c <settings_commit_subtree+0x30>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1009a:	d3eb      	bcc.n	10074 <settings_commit_subtree+0x28>
	return list->head;
   1009c:	4b11      	ldr	r3, [pc, #68]	; (100e4 <settings_commit_subtree+0x98>)
   1009e:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   100a0:	b194      	cbz	r4, 100c8 <settings_commit_subtree+0x7c>
   100a2:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   100a4:	b91e      	cbnz	r6, 100ae <settings_commit_subtree+0x62>
			continue;
		}
		if (ch->h_commit) {
   100a6:	68e3      	ldr	r3, [r4, #12]
   100a8:	b94b      	cbnz	r3, 100be <settings_commit_subtree+0x72>
	return node->next;
   100aa:	6964      	ldr	r4, [r4, #20]
   100ac:	e7f8      	b.n	100a0 <settings_commit_subtree+0x54>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   100ae:	2200      	movs	r2, #0
   100b0:	4631      	mov	r1, r6
   100b2:	6820      	ldr	r0, [r4, #0]
   100b4:	f01b f8ff 	bl	2b2b6 <settings_name_steq>
   100b8:	2800      	cmp	r0, #0
   100ba:	d1f4      	bne.n	100a6 <settings_commit_subtree+0x5a>
   100bc:	e7f5      	b.n	100aa <settings_commit_subtree+0x5e>
			rc2 = ch->h_commit();
   100be:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   100c0:	2d00      	cmp	r5, #0
   100c2:	bf08      	it	eq
   100c4:	4605      	moveq	r5, r0
   100c6:	e7f0      	b.n	100aa <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   100c8:	4628      	mov	r0, r5
   100ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100cc:	000315fc 	.word	0x000315fc
   100d0:	00031674 	.word	0x00031674
   100d4:	00033b02 	.word	0x00033b02
   100d8:	00033ad0 	.word	0x00033ad0
   100dc:	00032659 	.word	0x00032659
   100e0:	000336ed 	.word	0x000336ed
   100e4:	200214b4 	.word	0x200214b4

000100e8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   100e8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   100ea:	4c07      	ldr	r4, [pc, #28]	; (10108 <settings_subsys_init+0x20>)
   100ec:	7823      	ldrb	r3, [r4, #0]
   100ee:	b10b      	cbz	r3, 100f4 <settings_subsys_init+0xc>
		return 0;
   100f0:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   100f2:	bd10      	pop	{r4, pc}
	settings_init();
   100f4:	f7ff feee 	bl	fed4 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   100f8:	f000 f866 	bl	101c8 <settings_backend_init>
	if (!err) {
   100fc:	2800      	cmp	r0, #0
   100fe:	d1f8      	bne.n	100f2 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   10100:	2301      	movs	r3, #1
   10102:	7023      	strb	r3, [r4, #0]
   10104:	e7f4      	b.n	100f0 <settings_subsys_init+0x8>
   10106:	bf00      	nop
   10108:	20022316 	.word	0x20022316

0001010c <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   1010c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10110:	4680      	mov	r8, r0
   10112:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   10114:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   10116:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 101c4 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   1011a:	3401      	adds	r4, #1
{
   1011c:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
   1011e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   10120:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   10124:	1e65      	subs	r5, r4, #1
   10126:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   10128:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1012c:	d047      	beq.n	101be <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1012e:	234a      	movs	r3, #74	; 0x4a
   10130:	4629      	mov	r1, r5
   10132:	aa05      	add	r2, sp, #20
   10134:	4630      	mov	r0, r6
   10136:	f01a feab 	bl	2ae90 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1013a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1013e:	343f      	adds	r4, #63	; 0x3f
   10140:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   10142:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   10144:	4621      	mov	r1, r4
   10146:	2301      	movs	r3, #1
   10148:	4630      	mov	r0, r6
   1014a:	f10d 020b 	add.w	r2, sp, #11
   1014e:	f01a fe9f 	bl	2ae90 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   10152:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   10154:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   10156:	dc03      	bgt.n	10160 <settings_nvs_load+0x54>
   10158:	2800      	cmp	r0, #0
   1015a:	dc03      	bgt.n	10164 <settings_nvs_load+0x58>
{
   1015c:	462c      	mov	r4, r5
   1015e:	e7e1      	b.n	10124 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   10160:	2800      	cmp	r0, #0
   10162:	dc16      	bgt.n	10192 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   10164:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   10168:	42ab      	cmp	r3, r5
   1016a:	d109      	bne.n	10180 <settings_nvs_load+0x74>
				cf->last_name_id--;
   1016c:	4642      	mov	r2, r8
   1016e:	1e6b      	subs	r3, r5, #1
   10170:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   10174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10178:	2302      	movs	r3, #2
   1017a:	4630      	mov	r0, r6
   1017c:	f7ff f8a8 	bl	f2d0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   10180:	4629      	mov	r1, r5
   10182:	4630      	mov	r0, r6
   10184:	f01a fe80 	bl	2ae88 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   10188:	4621      	mov	r1, r4
   1018a:	4630      	mov	r0, r6
   1018c:	f01a fe7c 	bl	2ae88 <nvs_delete>
			continue;
   10190:	e7e4      	b.n	1015c <settings_nvs_load+0x50>
		name[rc1] = '\0';
   10192:	f107 0360 	add.w	r3, r7, #96	; 0x60
   10196:	eb0d 0703 	add.w	r7, sp, r3
   1019a:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
   1019c:	4652      	mov	r2, sl
		name[rc1] = '\0';
   1019e:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   101a2:	a805      	add	r0, sp, #20
   101a4:	f8cd 9000 	str.w	r9, [sp]
   101a8:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
   101aa:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   101ac:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   101b0:	f7ff fefa 	bl	ffa8 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   101b4:	2800      	cmp	r0, #0
   101b6:	d0d1      	beq.n	1015c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   101b8:	b018      	add	sp, #96	; 0x60
   101ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101be:	2000      	movs	r0, #0
	return ret;
   101c0:	e7fa      	b.n	101b8 <settings_nvs_load+0xac>
   101c2:	bf00      	nop
   101c4:	0002b327 	.word	0x0002b327

000101c8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   101c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   101ca:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   101cc:	4669      	mov	r1, sp
   101ce:	2009      	movs	r0, #9
	uint32_t sector_cnt = 1;
   101d0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   101d2:	f7ff fd9f 	bl	fd14 <flash_area_open>
	if (rc) {
   101d6:	4604      	mov	r4, r0
   101d8:	2800      	cmp	r0, #0
   101da:	d134      	bne.n	10246 <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   101dc:	2009      	movs	r0, #9
   101de:	aa02      	add	r2, sp, #8
   101e0:	a901      	add	r1, sp, #4
   101e2:	f7ff fdbf 	bl	fd64 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   101e6:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   101ea:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   101ec:	d02b      	beq.n	10246 <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   101ee:	b138      	cbz	r0, 10200 <settings_backend_init+0x38>
   101f0:	340c      	adds	r4, #12
   101f2:	d005      	beq.n	10200 <settings_backend_init+0x38>
		k_panic();
   101f4:	4040      	eors	r0, r0
   101f6:	f380 8811 	msr	BASEPRI, r0
   101fa:	f04f 0004 	mov.w	r0, #4
   101fe:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   10200:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   10202:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   10206:	d223      	bcs.n	10250 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   10208:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
   1020a:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
   1020c:	9a00      	ldr	r2, [sp, #0]
   1020e:	6894      	ldr	r4, [r2, #8]
		nvs_size += nvs_sector_size;
   10210:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   10212:	4284      	cmp	r4, r0
   10214:	d31a      	bcc.n	1024c <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   10216:	3301      	adds	r3, #1
   10218:	2b08      	cmp	r3, #8
   1021a:	d1f9      	bne.n	10210 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   1021c:	4d0e      	ldr	r5, [pc, #56]	; (10258 <settings_backend_init+0x90>)
   1021e:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   10220:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   10222:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   10224:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   10226:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
   10228:	68d3      	ldr	r3, [r2, #12]
   1022a:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   1022c:	f01b f915 	bl	2b45a <settings_nvs_backend_init>
	if (rc) {
   10230:	4604      	mov	r4, r0
   10232:	b940      	cbnz	r0, 10246 <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10234:	4e09      	ldr	r6, [pc, #36]	; (1025c <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
   10236:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10238:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   1023a:	f7ff fde9 	bl	fe10 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   1023e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10240:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   10242:	f7ff fdf3 	bl	fe2c <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   10246:	4620      	mov	r0, r4
   10248:	b004      	add	sp, #16
   1024a:	bd70      	pop	{r4, r5, r6, pc}
   1024c:	b29b      	uxth	r3, r3
   1024e:	e7e5      	b.n	1021c <settings_backend_init+0x54>
		return -EDOM;
   10250:	f06f 0420 	mvn.w	r4, #32
   10254:	e7f7      	b.n	10246 <settings_backend_init+0x7e>
   10256:	bf00      	nop
   10258:	200214bc 	.word	0x200214bc
   1025c:	2000842c 	.word	0x2000842c

00010260 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10264:	4605      	mov	r5, r0
	__asm__ volatile(
   10266:	f04f 0320 	mov.w	r3, #32
   1026a:	f3ef 8611 	mrs	r6, BASEPRI
   1026e:	f383 8812 	msr	BASEPRI_MAX, r3
   10272:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10276:	4820      	ldr	r0, [pc, #128]	; (102f8 <pm_state_notify+0x98>)
   10278:	f014 feee 	bl	25058 <z_spin_lock_valid>
   1027c:	b968      	cbnz	r0, 1029a <pm_state_notify+0x3a>
   1027e:	2394      	movs	r3, #148	; 0x94
   10280:	4a1e      	ldr	r2, [pc, #120]	; (102fc <pm_state_notify+0x9c>)
   10282:	491f      	ldr	r1, [pc, #124]	; (10300 <pm_state_notify+0xa0>)
   10284:	481f      	ldr	r0, [pc, #124]	; (10304 <pm_state_notify+0xa4>)
   10286:	f01a fa18 	bl	2a6ba <assert_print>
   1028a:	491b      	ldr	r1, [pc, #108]	; (102f8 <pm_state_notify+0x98>)
   1028c:	481e      	ldr	r0, [pc, #120]	; (10308 <pm_state_notify+0xa8>)
   1028e:	f01a fa14 	bl	2a6ba <assert_print>
   10292:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10294:	4819      	ldr	r0, [pc, #100]	; (102fc <pm_state_notify+0x9c>)
   10296:	f01a fa09 	bl	2a6ac <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1029a:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
   1029e:	4816      	ldr	r0, [pc, #88]	; (102f8 <pm_state_notify+0x98>)
   102a0:	f014 fef6 	bl	25090 <z_spin_lock_set_owner>
	return list->head;
   102a4:	4b19      	ldr	r3, [pc, #100]	; (1030c <pm_state_notify+0xac>)
   102a6:	4f1a      	ldr	r7, [pc, #104]	; (10310 <pm_state_notify+0xb0>)
   102a8:	681c      	ldr	r4, [r3, #0]
   102aa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 10314 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   102ae:	b97c      	cbnz	r4, 102d0 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   102b0:	4811      	ldr	r0, [pc, #68]	; (102f8 <pm_state_notify+0x98>)
   102b2:	f014 fedf 	bl	25074 <z_spin_unlock_valid>
   102b6:	b9c8      	cbnz	r0, 102ec <pm_state_notify+0x8c>
   102b8:	23c2      	movs	r3, #194	; 0xc2
   102ba:	4a10      	ldr	r2, [pc, #64]	; (102fc <pm_state_notify+0x9c>)
   102bc:	4916      	ldr	r1, [pc, #88]	; (10318 <pm_state_notify+0xb8>)
   102be:	4811      	ldr	r0, [pc, #68]	; (10304 <pm_state_notify+0xa4>)
   102c0:	f01a f9fb 	bl	2a6ba <assert_print>
   102c4:	490c      	ldr	r1, [pc, #48]	; (102f8 <pm_state_notify+0x98>)
   102c6:	4815      	ldr	r0, [pc, #84]	; (1031c <pm_state_notify+0xbc>)
   102c8:	f01a f9f7 	bl	2a6ba <assert_print>
   102cc:	21c2      	movs	r1, #194	; 0xc2
   102ce:	e7e1      	b.n	10294 <pm_state_notify+0x34>
			callback = notifier->state_exit;
   102d0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   102d4:	2d00      	cmp	r5, #0
   102d6:	bf18      	it	ne
   102d8:	4613      	movne	r3, r2
		if (callback) {
   102da:	b12b      	cbz	r3, 102e8 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   102dc:	f898 2014 	ldrb.w	r2, [r8, #20]
   102e0:	fb09 f202 	mul.w	r2, r9, r2
   102e4:	5cb8      	ldrb	r0, [r7, r2]
   102e6:	4798      	blx	r3
	return node->next;
   102e8:	6824      	ldr	r4, [r4, #0]
   102ea:	e7e0      	b.n	102ae <pm_state_notify+0x4e>
	__asm__ volatile(
   102ec:	f386 8811 	msr	BASEPRI, r6
   102f0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   102f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   102f8:	200214fc 	.word	0x200214fc
   102fc:	000333ee 	.word	0x000333ee
   10300:	00033447 	.word	0x00033447
   10304:	00032659 	.word	0x00032659
   10308:	0003345c 	.word	0x0003345c
   1030c:	2002151c 	.word	0x2002151c
   10310:	20021510 	.word	0x20021510
   10314:	20021a88 	.word	0x20021a88
   10318:	0003341b 	.word	0x0003341b
   1031c:	00033432 	.word	0x00033432

00010320 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10320:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   10322:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10324:	4b16      	ldr	r3, [pc, #88]	; (10380 <pm_system_resume+0x60>)
   10326:	7d1c      	ldrb	r4, [r3, #20]
   10328:	f004 031f 	and.w	r3, r4, #31
   1032c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1032e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10330:	4b14      	ldr	r3, [pc, #80]	; (10384 <pm_system_resume+0x64>)
   10332:	0961      	lsrs	r1, r4, #5
   10334:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10338:	e8d3 1fef 	ldaex	r1, [r3]
   1033c:	ea01 0500 	and.w	r5, r1, r0
   10340:	e8c3 5fe6 	stlex	r6, r5, [r3]
   10344:	2e00      	cmp	r6, #0
   10346:	d1f7      	bne.n	10338 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10348:	420a      	tst	r2, r1
   1034a:	d013      	beq.n	10374 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   1034c:	4b0e      	ldr	r3, [pc, #56]	; (10388 <pm_system_resume+0x68>)
   1034e:	4d0f      	ldr	r5, [pc, #60]	; (1038c <pm_system_resume+0x6c>)
   10350:	b18b      	cbz	r3, 10376 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10352:	230c      	movs	r3, #12
   10354:	4363      	muls	r3, r4
   10356:	18ea      	adds	r2, r5, r3
   10358:	7851      	ldrb	r1, [r2, #1]
   1035a:	5ce8      	ldrb	r0, [r5, r3]
   1035c:	f01a faa9 	bl	2a8b2 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10360:	2000      	movs	r0, #0
   10362:	f7ff ff7d 	bl	10260 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10366:	230c      	movs	r3, #12
   10368:	435c      	muls	r4, r3
   1036a:	2300      	movs	r3, #0
   1036c:	192a      	adds	r2, r5, r4
   1036e:	512b      	str	r3, [r5, r4]
   10370:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10374:	bd70      	pop	{r4, r5, r6, pc}
   10376:	f383 8811 	msr	BASEPRI, r3
   1037a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1037e:	e7ef      	b.n	10360 <pm_system_resume+0x40>
   10380:	20021a88 	.word	0x20021a88
   10384:	20021524 	.word	0x20021524
   10388:	0002a8b3 	.word	0x0002a8b3
   1038c:	20021510 	.word	0x20021510

00010390 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10394:	4b45      	ldr	r3, [pc, #276]	; (104ac <pm_system_suspend+0x11c>)
{
   10396:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10398:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1039a:	f04f 0320 	mov.w	r3, #32
   1039e:	f3ef 8811 	mrs	r8, BASEPRI
   103a2:	f383 8812 	msr	BASEPRI_MAX, r3
   103a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   103aa:	4841      	ldr	r0, [pc, #260]	; (104b0 <pm_system_suspend+0x120>)
   103ac:	f014 fe54 	bl	25058 <z_spin_lock_valid>
   103b0:	b968      	cbnz	r0, 103ce <pm_system_suspend+0x3e>
   103b2:	2394      	movs	r3, #148	; 0x94
   103b4:	4a3f      	ldr	r2, [pc, #252]	; (104b4 <pm_system_suspend+0x124>)
   103b6:	4940      	ldr	r1, [pc, #256]	; (104b8 <pm_system_suspend+0x128>)
   103b8:	4840      	ldr	r0, [pc, #256]	; (104bc <pm_system_suspend+0x12c>)
   103ba:	f01a f97e 	bl	2a6ba <assert_print>
   103be:	493c      	ldr	r1, [pc, #240]	; (104b0 <pm_system_suspend+0x120>)
   103c0:	483f      	ldr	r0, [pc, #252]	; (104c0 <pm_system_suspend+0x130>)
   103c2:	f01a f97a 	bl	2a6ba <assert_print>
   103c6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   103c8:	483a      	ldr	r0, [pc, #232]	; (104b4 <pm_system_suspend+0x124>)
   103ca:	f01a f96f 	bl	2a6ac <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   103ce:	240c      	movs	r4, #12
   103d0:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
   103d2:	4837      	ldr	r0, [pc, #220]	; (104b0 <pm_system_suspend+0x120>)
   103d4:	f014 fe5c 	bl	25090 <z_spin_lock_set_owner>
   103d8:	4b3a      	ldr	r3, [pc, #232]	; (104c4 <pm_system_suspend+0x134>)
   103da:	4e3b      	ldr	r6, [pc, #236]	; (104c8 <pm_system_suspend+0x138>)
   103dc:	5d19      	ldrb	r1, [r3, r4]
   103de:	191a      	adds	r2, r3, r4
   103e0:	b1b9      	cbz	r1, 10412 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   103e2:	ca07      	ldmia	r2, {r0, r1, r2}
   103e4:	eb06 0c04 	add.w	ip, r6, r4
   103e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   103ec:	2200      	movs	r2, #0
   103ee:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   103f0:	482f      	ldr	r0, [pc, #188]	; (104b0 <pm_system_suspend+0x120>)
   103f2:	f014 fe3f 	bl	25074 <z_spin_unlock_valid>
   103f6:	4604      	mov	r4, r0
   103f8:	b9b0      	cbnz	r0, 10428 <pm_system_suspend+0x98>
   103fa:	23c2      	movs	r3, #194	; 0xc2
   103fc:	4a2d      	ldr	r2, [pc, #180]	; (104b4 <pm_system_suspend+0x124>)
   103fe:	4933      	ldr	r1, [pc, #204]	; (104cc <pm_system_suspend+0x13c>)
   10400:	482e      	ldr	r0, [pc, #184]	; (104bc <pm_system_suspend+0x12c>)
   10402:	f01a f95a 	bl	2a6ba <assert_print>
   10406:	492a      	ldr	r1, [pc, #168]	; (104b0 <pm_system_suspend+0x120>)
   10408:	4831      	ldr	r0, [pc, #196]	; (104d0 <pm_system_suspend+0x140>)
   1040a:	f01a f956 	bl	2a6ba <assert_print>
   1040e:	21c2      	movs	r1, #194	; 0xc2
   10410:	e7da      	b.n	103c8 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   10412:	4639      	mov	r1, r7
   10414:	4628      	mov	r0, r5
   10416:	f000 f865 	bl	104e4 <pm_policy_next_state>
		if (info != NULL) {
   1041a:	2800      	cmp	r0, #0
   1041c:	d0e8      	beq.n	103f0 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   1041e:	c807      	ldmia	r0, {r0, r1, r2}
   10420:	4434      	add	r4, r6
   10422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10426:	e7e3      	b.n	103f0 <pm_system_suspend+0x60>
	__asm__ volatile(
   10428:	f388 8811 	msr	BASEPRI, r8
   1042c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10430:	230c      	movs	r3, #12
   10432:	436b      	muls	r3, r5
   10434:	18f2      	adds	r2, r6, r3
   10436:	5cf3      	ldrb	r3, [r6, r3]
   10438:	b3ab      	cbz	r3, 104a6 <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1043a:	1c7b      	adds	r3, r7, #1
   1043c:	d00f      	beq.n	1045e <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1043e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10442:	2100      	movs	r1, #0
   10444:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10448:	4822      	ldr	r0, [pc, #136]	; (104d4 <pm_system_suspend+0x144>)
   1044a:	2300      	movs	r3, #0
   1044c:	fbee 010c 	umlal	r0, r1, lr, ip
   10450:	4a21      	ldr	r2, [pc, #132]	; (104d8 <pm_system_suspend+0x148>)
   10452:	f7f8 fd4d 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10456:	2101      	movs	r1, #1
   10458:	1a38      	subs	r0, r7, r0
   1045a:	f017 fadb 	bl	27a14 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1045e:	f016 f959 	bl	26714 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10462:	2001      	movs	r0, #1
   10464:	f7ff fefc 	bl	10260 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10468:	4b1c      	ldr	r3, [pc, #112]	; (104dc <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1046a:	096a      	lsrs	r2, r5, #5
   1046c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10470:	2201      	movs	r2, #1
   10472:	f005 011f 	and.w	r1, r5, #31
   10476:	408a      	lsls	r2, r1
   10478:	e8d3 0fef 	ldaex	r0, [r3]
   1047c:	4310      	orrs	r0, r2
   1047e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   10482:	2900      	cmp	r1, #0
   10484:	d1f8      	bne.n	10478 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
   10486:	4b16      	ldr	r3, [pc, #88]	; (104e0 <pm_system_suspend+0x150>)
   10488:	b133      	cbz	r3, 10498 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
   1048a:	230c      	movs	r3, #12
   1048c:	436b      	muls	r3, r5
   1048e:	18f2      	adds	r2, r6, r3
   10490:	7851      	ldrb	r1, [r2, #1]
   10492:	5cf0      	ldrb	r0, [r6, r3]
   10494:	f01a fa01 	bl	2a89a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10498:	f7ff ff42 	bl	10320 <pm_system_resume>
	k_sched_unlock();
   1049c:	f016 f9a6 	bl	267ec <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   104a0:	4620      	mov	r0, r4
   104a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   104a6:	461c      	mov	r4, r3
   104a8:	e7fa      	b.n	104a0 <pm_system_suspend+0x110>
   104aa:	bf00      	nop
   104ac:	20021a88 	.word	0x20021a88
   104b0:	20021500 	.word	0x20021500
   104b4:	000333ee 	.word	0x000333ee
   104b8:	00033447 	.word	0x00033447
   104bc:	00032659 	.word	0x00032659
   104c0:	0003345c 	.word	0x0003345c
   104c4:	20021504 	.word	0x20021504
   104c8:	20021510 	.word	0x20021510
   104cc:	0003341b 	.word	0x0003341b
   104d0:	00033432 	.word	0x00033432
   104d4:	000f423f 	.word	0x000f423f
   104d8:	000f4240 	.word	0x000f4240
   104dc:	20021524 	.word	0x20021524
   104e0:	0002a89b 	.word	0x0002a89b

000104e4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   104e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104e8:	b085      	sub	sp, #20
   104ea:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   104ec:	a903      	add	r1, sp, #12
   104ee:	f000 f843 	bl	10578 <pm_state_cpu_get_all>
   104f2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   104f6:	4604      	mov	r4, r0
   104f8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   104fc:	4b1b      	ldr	r3, [pc, #108]	; (1056c <pm_policy_next_state+0x88>)
   104fe:	9d03      	ldr	r5, [sp, #12]
   10500:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10504:	1e43      	subs	r3, r0, #1
   10506:	b21b      	sxth	r3, r3
   10508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1050c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10570 <pm_policy_next_state+0x8c>
   10510:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10514:	b924      	cbnz	r4, 10520 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10516:	46a1      	mov	r9, r4
}
   10518:	4648      	mov	r0, r9
   1051a:	b005      	add	sp, #20
   1051c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10520:	46c4      	mov	ip, r8
   10522:	4659      	mov	r1, fp
   10524:	6868      	ldr	r0, [r5, #4]
   10526:	2300      	movs	r3, #0
   10528:	fbe0 c107 	umlal	ip, r1, r0, r7
   1052c:	4a11      	ldr	r2, [pc, #68]	; (10574 <pm_policy_next_state+0x90>)
   1052e:	4660      	mov	r0, ip
   10530:	f7f8 fcde 	bl	8ef0 <__aeabi_uldivmod>
   10534:	46c4      	mov	ip, r8
   10536:	4659      	mov	r1, fp
   10538:	9001      	str	r0, [sp, #4]
   1053a:	68a8      	ldr	r0, [r5, #8]
   1053c:	2300      	movs	r3, #0
   1053e:	fbe0 c107 	umlal	ip, r1, r0, r7
   10542:	4a0c      	ldr	r2, [pc, #48]	; (10574 <pm_policy_next_state+0x90>)
   10544:	4660      	mov	r0, ip
   10546:	f7f8 fcd3 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1054a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1054e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10550:	d001      	beq.n	10556 <pm_policy_next_state+0x72>
   10552:	4582      	cmp	sl, r0
   10554:	d905      	bls.n	10562 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10556:	1c73      	adds	r3, r6, #1
   10558:	d0de      	beq.n	10518 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1055a:	9b01      	ldr	r3, [sp, #4]
   1055c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1055e:	42b0      	cmp	r0, r6
   10560:	d9da      	bls.n	10518 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10562:	3c01      	subs	r4, #1
   10564:	b2a4      	uxth	r4, r4
   10566:	3d0c      	subs	r5, #12
   10568:	e7d4      	b.n	10514 <pm_policy_next_state+0x30>
   1056a:	bf00      	nop
   1056c:	20008440 	.word	0x20008440
   10570:	000f423f 	.word	0x000f423f
   10574:	000f4240 	.word	0x000f4240

00010578 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10578:	b908      	cbnz	r0, 1057e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1057a:	4b02      	ldr	r3, [pc, #8]	; (10584 <pm_state_cpu_get_all+0xc>)
   1057c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1057e:	2000      	movs	r0, #0
   10580:	4770      	bx	lr
   10582:	bf00      	nop
   10584:	00031bfc 	.word	0x00031bfc

00010588 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   10588:	4b03      	ldr	r3, [pc, #12]	; (10598 <nus_ccc_cfg_changed+0x10>)
   1058a:	689b      	ldr	r3, [r3, #8]
   1058c:	b11b      	cbz	r3, 10596 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   1058e:	1e48      	subs	r0, r1, #1
   10590:	bf18      	it	ne
   10592:	2001      	movne	r0, #1
   10594:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   10596:	4770      	bx	lr
   10598:	20021528 	.word	0x20021528

0001059c <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   1059c:	b510      	push	{r4, lr}
   1059e:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   105a0:	4b03      	ldr	r3, [pc, #12]	; (105b0 <on_receive+0x14>)
{
   105a2:	4611      	mov	r1, r2
	if (nus_cb.received) {
   105a4:	681b      	ldr	r3, [r3, #0]
   105a6:	b10b      	cbz	r3, 105ac <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   105a8:	4622      	mov	r2, r4
   105aa:	4798      	blx	r3
}
	return len;
}
   105ac:	4620      	mov	r0, r4
   105ae:	bd10      	pop	{r4, pc}
   105b0:	20021528 	.word	0x20021528

000105b4 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   105b4:	4b02      	ldr	r3, [pc, #8]	; (105c0 <on_sent+0xc>)
   105b6:	685b      	ldr	r3, [r3, #4]
   105b8:	b103      	cbz	r3, 105bc <on_sent+0x8>
		nus_cb.sent(conn);
   105ba:	4718      	bx	r3
	}
}
   105bc:	4770      	bx	lr
   105be:	bf00      	nop
   105c0:	20021528 	.word	0x20021528

000105c4 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   105c4:	b130      	cbz	r0, 105d4 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   105c6:	4b04      	ldr	r3, [pc, #16]	; (105d8 <bt_nus_init+0x14>)
   105c8:	6802      	ldr	r2, [r0, #0]
   105ca:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   105cc:	6842      	ldr	r2, [r0, #4]
   105ce:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   105d0:	6882      	ldr	r2, [r0, #8]
   105d2:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   105d4:	2000      	movs	r0, #0
   105d6:	4770      	bx	lr
   105d8:	20021528 	.word	0x20021528

000105dc <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   105dc:	b570      	push	{r4, r5, r6, lr}
   105de:	460e      	mov	r6, r1
   105e0:	4615      	mov	r5, r2
   105e2:	4604      	mov	r4, r0
   105e4:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   105e6:	2100      	movs	r1, #0
   105e8:	2218      	movs	r2, #24
   105ea:	4668      	mov	r0, sp
   105ec:	f01f fff9 	bl	305e2 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   105f0:	490b      	ldr	r1, [pc, #44]	; (10620 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   105f2:	4b0c      	ldr	r3, [pc, #48]	; (10624 <bt_nus_send+0x48>)
	params.data = data;
   105f4:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   105f8:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   105fc:	9304      	str	r3, [sp, #16]

	if (!conn) {
   105fe:	b92c      	cbnz	r4, 1060c <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   10600:	4669      	mov	r1, sp
   10602:	4620      	mov	r0, r4
   10604:	f007 ff0a 	bl	1841c <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   10608:	b006      	add	sp, #24
   1060a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   1060c:	2201      	movs	r2, #1
   1060e:	4620      	mov	r0, r4
   10610:	f007 fbd2 	bl	17db8 <bt_gatt_is_subscribed>
   10614:	2800      	cmp	r0, #0
   10616:	d1f3      	bne.n	10600 <bt_nus_send+0x24>
		return -EINVAL;
   10618:	f06f 0015 	mvn.w	r0, #21
   1061c:	e7f4      	b.n	10608 <bt_nus_send+0x2c>
   1061e:	bf00      	nop
   10620:	00031c24 	.word	0x00031c24
   10624:	000105b5 	.word	0x000105b5

00010628 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10628:	4904      	ldr	r1, [pc, #16]	; (1063c <sub_bytes+0x14>)
   1062a:	1e43      	subs	r3, r0, #1
   1062c:	300f      	adds	r0, #15
   1062e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10632:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   10634:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   10636:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10638:	d1f9      	bne.n	1062e <sub_bytes+0x6>
	}
}
   1063a:	4770      	bx	lr
   1063c:	00033b59 	.word	0x00033b59

00010640 <tc_aes128_set_encrypt_key>:
{
   10640:	b5f0      	push	{r4, r5, r6, r7, lr}
   10642:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   10644:	4e26      	ldr	r6, [pc, #152]	; (106e0 <tc_aes128_set_encrypt_key+0xa0>)
{
   10646:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10648:	ad01      	add	r5, sp, #4
{
   1064a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1064c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1064e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10650:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10654:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10658:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   1065c:	4638      	mov	r0, r7
   1065e:	2f00      	cmp	r7, #0
   10660:	d039      	beq.n	106d6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   10662:	2c00      	cmp	r4, #0
   10664:	d039      	beq.n	106da <tc_aes128_set_encrypt_key+0x9a>
   10666:	1f38      	subs	r0, r7, #4
   10668:	4602      	mov	r2, r0
   1066a:	4621      	mov	r1, r4
   1066c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1066e:	784b      	ldrb	r3, [r1, #1]
   10670:	780d      	ldrb	r5, [r1, #0]
   10672:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10674:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10678:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   1067a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1067c:	432b      	orrs	r3, r5
   1067e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   10682:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10684:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10688:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1068c:	d1ef      	bne.n	1066e <tc_aes128_set_encrypt_key+0x2e>
   1068e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10690:	4c14      	ldr	r4, [pc, #80]	; (106e4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   10692:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10694:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   10696:	d116      	bne.n	106c6 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10698:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1069c:	5ca5      	ldrb	r5, [r4, r2]
   1069e:	0e1a      	lsrs	r2, r3, #24
   106a0:	5ca2      	ldrb	r2, [r4, r2]
   106a2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   106a6:	f3c3 2507 	ubfx	r5, r3, #8, #8
   106aa:	5d65      	ldrb	r5, [r4, r5]
   106ac:	b2db      	uxtb	r3, r3
   106ae:	5ce3      	ldrb	r3, [r4, r3]
   106b0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   106b4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   106b8:	f021 0303 	bic.w	r3, r1, #3
   106bc:	3330      	adds	r3, #48	; 0x30
   106be:	446b      	add	r3, sp
   106c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   106c4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   106c6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   106ca:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   106cc:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   106ce:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   106d0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   106d2:	d1de      	bne.n	10692 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   106d4:	2001      	movs	r0, #1
}
   106d6:	b00d      	add	sp, #52	; 0x34
   106d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   106da:	4620      	mov	r0, r4
   106dc:	e7fb      	b.n	106d6 <tc_aes128_set_encrypt_key+0x96>
   106de:	bf00      	nop
   106e0:	0003169c 	.word	0x0003169c
   106e4:	00033b59 	.word	0x00033b59

000106e8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   106e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   106ec:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   106ee:	6803      	ldr	r3, [r0, #0]
{
   106f0:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   106f2:	9302      	str	r3, [sp, #8]
   106f4:	6843      	ldr	r3, [r0, #4]
   106f6:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 108b4 <compress+0x1cc>
   106fa:	9303      	str	r3, [sp, #12]
   106fc:	6883      	ldr	r3, [r0, #8]
   106fe:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   10702:	9304      	str	r3, [sp, #16]
   10704:	68c3      	ldr	r3, [r0, #12]
   10706:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10708:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1070a:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1070e:	9306      	str	r3, [sp, #24]
   10710:	6943      	ldr	r3, [r0, #20]
   10712:	9307      	str	r3, [sp, #28]
   10714:	6983      	ldr	r3, [r0, #24]
   10716:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   1071a:	9308      	str	r3, [sp, #32]
   1071c:	69c3      	ldr	r3, [r0, #28]
   1071e:	4698      	mov	r8, r3
   10720:	9309      	str	r3, [sp, #36]	; 0x24
   10722:	9b08      	ldr	r3, [sp, #32]
   10724:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   10726:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   10728:	ab0c      	add	r3, sp, #48	; 0x30
   1072a:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1072c:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   10730:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   10732:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10736:	44a9      	add	r9, r5
   10738:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   1073c:	9d00      	ldr	r5, [sp, #0]
   1073e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   10742:	444b      	add	r3, r9
   10744:	ea25 0502 	bic.w	r5, r5, r2
   10748:	ea02 090c 	and.w	r9, r2, ip
   1074c:	ea85 0509 	eor.w	r5, r5, r9
   10750:	442b      	add	r3, r5
   10752:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   10754:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   10758:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   1075c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   10760:	4025      	ands	r5, r4
   10762:	ea06 090b 	and.w	r9, r6, fp
   10766:	ea85 0509 	eor.w	r5, r5, r9
   1076a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   1076e:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   10770:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   10772:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   10774:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   10778:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   1077a:	46de      	mov	lr, fp
   1077c:	f8dd 8000 	ldr.w	r8, [sp]
   10780:	f040 8088 	bne.w	10894 <compress+0x1ac>
   10784:	f04f 0a10 	mov.w	sl, #16
   10788:	494b      	ldr	r1, [pc, #300]	; (108b8 <compress+0x1d0>)
   1078a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   1078c:	4651      	mov	r1, sl
   1078e:	f10a 0a01 	add.w	sl, sl, #1
   10792:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10796:	f00a 070f 	and.w	r7, sl, #15
   1079a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   1079e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107a2:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   107a6:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   107aa:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   107ac:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   107b0:	f101 070e 	add.w	r7, r1, #14
   107b4:	f007 070f 	and.w	r7, r7, #15
   107b8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   107bc:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107c0:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   107c2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   107c6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   107ca:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107ce:	f001 010f 	and.w	r1, r1, #15
   107d2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   107d6:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   107da:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   107de:	f859 ec40 	ldr.w	lr, [r9, #-64]
   107e2:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   107e6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107ea:	4471      	add	r1, lr
		s0 = sigma0(s0);
   107ec:	f8dd e004 	ldr.w	lr, [sp, #4]
   107f0:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   107f4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107f8:	4441      	add	r1, r8
		s1 = sigma1(s1);
   107fa:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107fe:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10800:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   10804:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10808:	ea2c 0705 	bic.w	r7, ip, r5
   1080c:	ea87 0708 	eor.w	r7, r7, r8
   10810:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   10814:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10818:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   1081c:	4477      	add	r7, lr
   1081e:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10822:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10826:	4477      	add	r7, lr
   10828:	440f      	add	r7, r1
   1082a:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   1082c:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10830:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   10832:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10836:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   1083a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   1083e:	ea07 0703 	and.w	r7, r7, r3
   10842:	ea04 0806 	and.w	r8, r4, r6
   10846:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   1084a:	ea87 0708 	eor.w	r7, r7, r8
   1084e:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   10850:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   10852:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   10856:	f8cd c000 	str.w	ip, [sp]
   1085a:	46b3      	mov	fp, r6
   1085c:	d122      	bne.n	108a4 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   1085e:	9902      	ldr	r1, [sp, #8]
   10860:	4439      	add	r1, r7
   10862:	6001      	str	r1, [r0, #0]
   10864:	9903      	ldr	r1, [sp, #12]
   10866:	4419      	add	r1, r3
   10868:	9b04      	ldr	r3, [sp, #16]
   1086a:	6041      	str	r1, [r0, #4]
   1086c:	4423      	add	r3, r4
   1086e:	6083      	str	r3, [r0, #8]
   10870:	9b05      	ldr	r3, [sp, #20]
   10872:	4433      	add	r3, r6
   10874:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   10876:	9b06      	ldr	r3, [sp, #24]
   10878:	4473      	add	r3, lr
   1087a:	6103      	str	r3, [r0, #16]
   1087c:	9b07      	ldr	r3, [sp, #28]
   1087e:	442b      	add	r3, r5
   10880:	6143      	str	r3, [r0, #20]
   10882:	9b08      	ldr	r3, [sp, #32]
   10884:	4413      	add	r3, r2
   10886:	6183      	str	r3, [r0, #24]
   10888:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1088a:	4463      	add	r3, ip
   1088c:	61c3      	str	r3, [r0, #28]
}
   1088e:	b01d      	add	sp, #116	; 0x74
   10890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10894:	46b3      	mov	fp, r6
   10896:	f8cd c000 	str.w	ip, [sp]
   1089a:	4626      	mov	r6, r4
   1089c:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   1089e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   108a0:	462a      	mov	r2, r5
   108a2:	e740      	b.n	10726 <compress+0x3e>
   108a4:	4694      	mov	ip, r2
   108a6:	4626      	mov	r6, r4
   108a8:	462a      	mov	r2, r5
   108aa:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   108ac:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   108ae:	463b      	mov	r3, r7
   108b0:	e76c      	b.n	1078c <compress+0xa4>
   108b2:	bf00      	nop
   108b4:	00031d28 	.word	0x00031d28
   108b8:	00031d64 	.word	0x00031d64

000108bc <tc_sha256_init>:
{
   108bc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   108be:	4604      	mov	r4, r0
   108c0:	b1c8      	cbz	r0, 108f6 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   108c2:	2270      	movs	r2, #112	; 0x70
   108c4:	2100      	movs	r1, #0
   108c6:	f01a fdf6 	bl	2b4b6 <_set>
	s->iv[1] = 0xbb67ae85;
   108ca:	4b0b      	ldr	r3, [pc, #44]	; (108f8 <tc_sha256_init+0x3c>)
   108cc:	4a0b      	ldr	r2, [pc, #44]	; (108fc <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   108ce:	490c      	ldr	r1, [pc, #48]	; (10900 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   108d0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   108d4:	4b0b      	ldr	r3, [pc, #44]	; (10904 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   108d6:	480c      	ldr	r0, [pc, #48]	; (10908 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   108d8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   108dc:	4b0b      	ldr	r3, [pc, #44]	; (1090c <tc_sha256_init+0x50>)
   108de:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   108e2:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   108e4:	4b0a      	ldr	r3, [pc, #40]	; (10910 <tc_sha256_init+0x54>)
   108e6:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   108e8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   108ec:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   108f0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   108f4:	61e3      	str	r3, [r4, #28]
}
   108f6:	bd10      	pop	{r4, pc}
   108f8:	bb67ae85 	.word	0xbb67ae85
   108fc:	6a09e667 	.word	0x6a09e667
   10900:	3c6ef372 	.word	0x3c6ef372
   10904:	a54ff53a 	.word	0xa54ff53a
   10908:	510e527f 	.word	0x510e527f
   1090c:	9b05688c 	.word	0x9b05688c
   10910:	1f83d9ab 	.word	0x1f83d9ab

00010914 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10914:	4901      	ldr	r1, [pc, #4]	; (1091c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   10916:	2210      	movs	r2, #16
	str	r2, [r1]
   10918:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1091a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1091c:	e000ed10 	.word	0xe000ed10

00010920 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10920:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10922:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10924:	f380 8811 	msr	BASEPRI, r0
	isb
   10928:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1092c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10930:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   10932:	b662      	cpsie	i
	isb
   10934:	f3bf 8f6f 	isb	sy

	bx	lr
   10938:	4770      	bx	lr
   1093a:	bf00      	nop

0001093c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1093c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1093e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10940:	f381 8811 	msr	BASEPRI, r1

	wfe
   10944:	bf20      	wfe

	msr	BASEPRI, r0
   10946:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1094a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1094c:	4770      	bx	lr
   1094e:	bf00      	nop

00010950 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10954:	4681      	mov	r9, r0

	if (esf != NULL) {
   10956:	460c      	mov	r4, r1
{
   10958:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   1095a:	2900      	cmp	r1, #0
   1095c:	d04c      	beq.n	109f8 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1095e:	e9d1 1200 	ldrd	r1, r2, [r1]
   10962:	466e      	mov	r6, sp
   10964:	b08a      	sub	sp, #40	; 0x28
   10966:	68a3      	ldr	r3, [r4, #8]
   10968:	466d      	mov	r5, sp
   1096a:	f04f 0a05 	mov.w	sl, #5
   1096e:	46a8      	mov	r8, r5
   10970:	4825      	ldr	r0, [pc, #148]	; (10a08 <z_arm_fatal_error+0xb8>)
   10972:	e9c5 2307 	strd	r2, r3, [r5, #28]
   10976:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1097a:	f848 af10 	str.w	sl, [r8, #16]!
   1097e:	2300      	movs	r3, #0
   10980:	4642      	mov	r2, r8
   10982:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   10986:	4821      	ldr	r0, [pc, #132]	; (10a0c <z_arm_fatal_error+0xbc>)
   10988:	f7fd ff82 	bl	e890 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1098c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   10990:	46b5      	mov	sp, r6
   10992:	6963      	ldr	r3, [r4, #20]
   10994:	46ad      	mov	sp, r5
   10996:	481e      	ldr	r0, [pc, #120]	; (10a10 <z_arm_fatal_error+0xc0>)
   10998:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1099c:	e9c5 0105 	strd	r0, r1, [r5, #20]
   109a0:	f8c5 a010 	str.w	sl, [r5, #16]
   109a4:	2300      	movs	r3, #0
   109a6:	4642      	mov	r2, r8
   109a8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   109ac:	4817      	ldr	r0, [pc, #92]	; (10a0c <z_arm_fatal_error+0xbc>)
   109ae:	f7fd ff6f 	bl	e890 <z_impl_z_log_msg_static_create>
   109b2:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   109b4:	b088      	sub	sp, #32
   109b6:	69e3      	ldr	r3, [r4, #28]
   109b8:	466d      	mov	r5, sp
   109ba:	f04f 0a03 	mov.w	sl, #3
   109be:	46a8      	mov	r8, r5
   109c0:	4a14      	ldr	r2, [pc, #80]	; (10a14 <z_arm_fatal_error+0xc4>)
   109c2:	e9c5 2305 	strd	r2, r3, [r5, #20]
   109c6:	f848 af10 	str.w	sl, [r8, #16]!
   109ca:	2300      	movs	r3, #0
   109cc:	4642      	mov	r2, r8
   109ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   109d2:	480e      	ldr	r0, [pc, #56]	; (10a0c <z_arm_fatal_error+0xbc>)
   109d4:	f7fd ff5c 	bl	e890 <z_impl_z_log_msg_static_create>
   109d8:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   109da:	69a3      	ldr	r3, [r4, #24]
   109dc:	46ad      	mov	sp, r5
   109de:	4a0e      	ldr	r2, [pc, #56]	; (10a18 <z_arm_fatal_error+0xc8>)
   109e0:	f8c5 a010 	str.w	sl, [r5, #16]
   109e4:	e9c5 2305 	strd	r2, r3, [r5, #20]
   109e8:	2300      	movs	r3, #0
   109ea:	4642      	mov	r2, r8
   109ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   109f0:	4806      	ldr	r0, [pc, #24]	; (10a0c <z_arm_fatal_error+0xbc>)
   109f2:	f7fd ff4d 	bl	e890 <z_impl_z_log_msg_static_create>
   109f6:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   109f8:	4621      	mov	r1, r4
   109fa:	4648      	mov	r0, r9
   109fc:	f013 fe7c 	bl	246f8 <z_fatal_error>
}
   10a00:	46bd      	mov	sp, r7
   10a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10a06:	bf00      	nop
   10a08:	00033c59 	.word	0x00033c59
   10a0c:	000315a4 	.word	0x000315a4
   10a10:	00033c88 	.word	0x00033c88
   10a14:	00033cb7 	.word	0x00033cb7
   10a18:	00033cc6 	.word	0x00033cc6

00010a1c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10a1c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10a1e:	2800      	cmp	r0, #0
   10a20:	db07      	blt.n	10a32 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10a22:	2301      	movs	r3, #1
   10a24:	0941      	lsrs	r1, r0, #5
   10a26:	4a03      	ldr	r2, [pc, #12]	; (10a34 <arch_irq_enable+0x18>)
   10a28:	f000 001f 	and.w	r0, r0, #31
   10a2c:	4083      	lsls	r3, r0
   10a2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10a32:	4770      	bx	lr
   10a34:	e000e100 	.word	0xe000e100

00010a38 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10a38:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10a3a:	2800      	cmp	r0, #0
   10a3c:	db0c      	blt.n	10a58 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10a3e:	2201      	movs	r2, #1
   10a40:	4906      	ldr	r1, [pc, #24]	; (10a5c <arch_irq_disable+0x24>)
   10a42:	0943      	lsrs	r3, r0, #5
   10a44:	f000 001f 	and.w	r0, r0, #31
   10a48:	4082      	lsls	r2, r0
   10a4a:	3320      	adds	r3, #32
   10a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10a54:	f3bf 8f6f 	isb	sy
}
   10a58:	4770      	bx	lr
   10a5a:	bf00      	nop
   10a5c:	e000e100 	.word	0xe000e100

00010a60 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   10a60:	4b05      	ldr	r3, [pc, #20]	; (10a78 <arch_irq_is_enabled+0x18>)
   10a62:	0942      	lsrs	r2, r0, #5
   10a64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   10a68:	2301      	movs	r3, #1
   10a6a:	f000 001f 	and.w	r0, r0, #31
   10a6e:	fa03 f000 	lsl.w	r0, r3, r0
}
   10a72:	4010      	ands	r0, r2
   10a74:	4770      	bx	lr
   10a76:	bf00      	nop
   10a78:	e000e100 	.word	0xe000e100

00010a7c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   10a7c:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   10a7e:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10a80:	2b07      	cmp	r3, #7
{
   10a82:	4604      	mov	r4, r0
   10a84:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10a86:	d90f      	bls.n	10aa8 <z_arm_irq_priority_set+0x2c>
   10a88:	235b      	movs	r3, #91	; 0x5b
   10a8a:	4a10      	ldr	r2, [pc, #64]	; (10acc <z_arm_irq_priority_set+0x50>)
   10a8c:	4910      	ldr	r1, [pc, #64]	; (10ad0 <z_arm_irq_priority_set+0x54>)
   10a8e:	4811      	ldr	r0, [pc, #68]	; (10ad4 <z_arm_irq_priority_set+0x58>)
   10a90:	f019 fe13 	bl	2a6ba <assert_print>
   10a94:	4629      	mov	r1, r5
   10a96:	4810      	ldr	r0, [pc, #64]	; (10ad8 <z_arm_irq_priority_set+0x5c>)
   10a98:	2307      	movs	r3, #7
   10a9a:	4622      	mov	r2, r4
   10a9c:	f019 fe0d 	bl	2a6ba <assert_print>
   10aa0:	215b      	movs	r1, #91	; 0x5b
   10aa2:	480a      	ldr	r0, [pc, #40]	; (10acc <z_arm_irq_priority_set+0x50>)
   10aa4:	f019 fe02 	bl	2a6ac <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10aa8:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   10aaa:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10aac:	bfac      	ite	ge
   10aae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ab2:	4a0a      	ldrlt	r2, [pc, #40]	; (10adc <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ab4:	ea4f 1343 	mov.w	r3, r3, lsl #5
   10ab8:	b2db      	uxtb	r3, r3
   10aba:	bfab      	itete	ge
   10abc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ac0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ac4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ac8:	5413      	strblt	r3, [r2, r0]
}
   10aca:	bd38      	pop	{r3, r4, r5, pc}
   10acc:	00033cf4 	.word	0x00033cf4
   10ad0:	00033d2a 	.word	0x00033d2a
   10ad4:	00032659 	.word	0x00032659
   10ad8:	00033d45 	.word	0x00033d45
   10adc:	e000ed14 	.word	0xe000ed14

00010ae0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10ae0:	bf30      	wfi
    b z_SysNmiOnReset
   10ae2:	f7ff bffd 	b.w	10ae0 <z_SysNmiOnReset>
   10ae6:	bf00      	nop

00010ae8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10ae8:	4a0b      	ldr	r2, [pc, #44]	; (10b18 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   10aea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10aec:	4b0b      	ldr	r3, [pc, #44]	; (10b1c <z_arm_prep_c+0x34>)
   10aee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10af2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   10af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10af8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10afc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10b00:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   10b08:	f013 fec8 	bl	2489c <z_bss_zero>
	z_data_copy();
   10b0c:	f016 fdc2 	bl	27694 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10b10:	f000 fc06 	bl	11320 <z_arm_interrupt_init>
	z_cstart();
   10b14:	f013 ff02 	bl	2491c <z_cstart>
   10b18:	00008000 	.word	0x00008000
   10b1c:	e000ed00 	.word	0xe000ed00

00010b20 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10b20:	4a09      	ldr	r2, [pc, #36]	; (10b48 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10b22:	490a      	ldr	r1, [pc, #40]	; (10b4c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   10b24:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   10b26:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   10b28:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   10b2a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10b2c:	4908      	ldr	r1, [pc, #32]	; (10b50 <arch_swap+0x30>)
   10b2e:	684b      	ldr	r3, [r1, #4]
   10b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10b34:	604b      	str	r3, [r1, #4]
   10b36:	2300      	movs	r3, #0
   10b38:	f383 8811 	msr	BASEPRI, r3
   10b3c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10b40:	6893      	ldr	r3, [r2, #8]
}
   10b42:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   10b44:	4770      	bx	lr
   10b46:	bf00      	nop
   10b48:	20021a88 	.word	0x20021a88
   10b4c:	00032534 	.word	0x00032534
   10b50:	e000ed00 	.word	0xe000ed00

00010b54 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10b54:	4915      	ldr	r1, [pc, #84]	; (10bac <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   10b56:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   10b58:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10b5c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10b60:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10b62:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10b66:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10b6a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   10b6c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10b70:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10b74:	4f0e      	ldr	r7, [pc, #56]	; (10bb0 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10b76:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10b7a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   10b7c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10b7e:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   10b80:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10b84:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   10b86:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10b88:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10b8a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10b8e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   10b92:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10b96:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   10b9a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   10b9e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   10ba0:	f01b f8d6 	bl	2bd50 <configure_builtin_stack_guard>
    pop {r2, lr}
   10ba4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   10ba8:	4770      	bx	lr
   10baa:	0000      	.short	0x0000
    ldr r1, =_kernel
   10bac:	20021a88 	.word	0x20021a88
    ldr v4, =_SCS_ICSR
   10bb0:	e000ed04 	.word	0xe000ed04

00010bb4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   10bb4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10bb8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10bba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   10bbe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   10bc2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10bc4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10bc8:	2902      	cmp	r1, #2
    beq _oops
   10bca:	d0ff      	beq.n	10bcc <_oops>

00010bcc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10bcc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   10bce:	f01b f8b0 	bl	2bd32 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   10bd2:	bd01      	pop	{r0, pc}

00010bd4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   10bd4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   10bd8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   10bda:	490d      	ldr	r1, [pc, #52]	; (10c10 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   10bdc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   10be0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   10be2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   10be6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   10bea:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   10bec:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   10bf0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   10bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10bf8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   10bfc:	2300      	movs	r3, #0
   10bfe:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   10c00:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   10c04:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   10c06:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   10c08:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10c0c:	4770      	bx	lr
   10c0e:	bf00      	nop
   10c10:	0002a36b 	.word	0x0002a36b

00010c14 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   10c14:	4b08      	ldr	r3, [pc, #32]	; (10c38 <arch_switch_to_main_thread+0x24>)
   10c16:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   10c18:	6e83      	ldr	r3, [r0, #104]	; 0x68
   10c1a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10c1e:	4610      	mov	r0, r2
   10c20:	f381 8809 	msr	PSP, r1
   10c24:	2100      	movs	r1, #0
   10c26:	b663      	cpsie	if
   10c28:	f381 8811 	msr	BASEPRI, r1
   10c2c:	f3bf 8f6f 	isb	sy
   10c30:	2200      	movs	r2, #0
   10c32:	2300      	movs	r3, #0
   10c34:	f019 fb99 	bl	2a36a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10c38:	20021a88 	.word	0x20021a88

00010c3c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10c3c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   10c3e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10c40:	4a0b      	ldr	r2, [pc, #44]	; (10c70 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10c42:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   10c44:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10c46:	bf1e      	ittt	ne
	movne	r1, #0
   10c48:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10c4a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   10c4c:	f01f fa89 	blne	30162 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10c50:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10c52:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10c56:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   10c5a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   10c5e:	4905      	ldr	r1, [pc, #20]	; (10c74 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10c60:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10c62:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10c64:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10c66:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   10c6a:	4903      	ldr	r1, [pc, #12]	; (10c78 <_isr_wrapper+0x3c>)
	bx r1
   10c6c:	4708      	bx	r1
   10c6e:	0000      	.short	0x0000
	ldr r2, =_kernel
   10c70:	20021a88 	.word	0x20021a88
	ldr r1, =_sw_isr_table
   10c74:	00031054 	.word	0x00031054
	ldr r1, =z_arm_int_exit
   10c78:	00010c7d 	.word	0x00010c7d

00010c7c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10c7c:	4b04      	ldr	r3, [pc, #16]	; (10c90 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10c7e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10c80:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10c82:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10c84:	d003      	beq.n	10c8e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   10c86:	4903      	ldr	r1, [pc, #12]	; (10c94 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10c8c:	600a      	str	r2, [r1, #0]

00010c8e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10c8e:	4770      	bx	lr
	ldr r3, =_kernel
   10c90:	20021a88 	.word	0x20021a88
	ldr r1, =_SCS_ICSR
   10c94:	e000ed04 	.word	0xe000ed04

00010c98 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c9c:	b086      	sub	sp, #24
   10c9e:	4606      	mov	r6, r0
   10ca0:	460d      	mov	r5, r1
   10ca2:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   10ca4:	2402      	movs	r4, #2
   10ca6:	4b4b      	ldr	r3, [pc, #300]	; (10dd4 <mem_manage_fault.constprop.0+0x13c>)
   10ca8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10cac:	617b      	str	r3, [r7, #20]
   10cae:	484a      	ldr	r0, [pc, #296]	; (10dd8 <mem_manage_fault.constprop.0+0x140>)
   10cb0:	613c      	str	r4, [r7, #16]
   10cb2:	f107 0210 	add.w	r2, r7, #16
   10cb6:	f01b f84f 	bl	2bd58 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10cba:	4b48      	ldr	r3, [pc, #288]	; (10ddc <mem_manage_fault.constprop.0+0x144>)
   10cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10cbe:	06db      	lsls	r3, r3, #27
   10cc0:	d509      	bpl.n	10cd6 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   10cc2:	4b47      	ldr	r3, [pc, #284]	; (10de0 <mem_manage_fault.constprop.0+0x148>)
   10cc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10cc8:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10ccc:	4842      	ldr	r0, [pc, #264]	; (10dd8 <mem_manage_fault.constprop.0+0x140>)
   10cce:	f107 0210 	add.w	r2, r7, #16
   10cd2:	f01b f841 	bl	2bd58 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10cd6:	4b41      	ldr	r3, [pc, #260]	; (10ddc <mem_manage_fault.constprop.0+0x144>)
   10cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10cda:	0718      	lsls	r0, r3, #28
   10cdc:	d50a      	bpl.n	10cf4 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   10cde:	4b41      	ldr	r3, [pc, #260]	; (10de4 <mem_manage_fault.constprop.0+0x14c>)
   10ce0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ce4:	617b      	str	r3, [r7, #20]
   10ce6:	2302      	movs	r3, #2
   10ce8:	483b      	ldr	r0, [pc, #236]	; (10dd8 <mem_manage_fault.constprop.0+0x140>)
   10cea:	613b      	str	r3, [r7, #16]
   10cec:	f107 0210 	add.w	r2, r7, #16
   10cf0:	f01b f832 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10cf4:	4c39      	ldr	r4, [pc, #228]	; (10ddc <mem_manage_fault.constprop.0+0x144>)
   10cf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10cf8:	0799      	lsls	r1, r3, #30
   10cfa:	d522      	bpl.n	10d42 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   10cfc:	46e8      	mov	r8, sp
   10cfe:	4b3a      	ldr	r3, [pc, #232]	; (10de8 <mem_manage_fault.constprop.0+0x150>)
   10d00:	f107 0210 	add.w	r2, r7, #16
   10d04:	617b      	str	r3, [r7, #20]
   10d06:	2302      	movs	r3, #2
   10d08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d0c:	613b      	str	r3, [r7, #16]
   10d0e:	4832      	ldr	r0, [pc, #200]	; (10dd8 <mem_manage_fault.constprop.0+0x140>)
   10d10:	f01b f822 	bl	2bd58 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   10d14:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10d16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10d18:	0612      	lsls	r2, r2, #24
   10d1a:	d512      	bpl.n	10d42 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10d1c:	b088      	sub	sp, #32
   10d1e:	466a      	mov	r2, sp
   10d20:	4932      	ldr	r1, [pc, #200]	; (10dec <mem_manage_fault.constprop.0+0x154>)
   10d22:	482d      	ldr	r0, [pc, #180]	; (10dd8 <mem_manage_fault.constprop.0+0x140>)
   10d24:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10d28:	2303      	movs	r3, #3
   10d2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10d2e:	f842 3f10 	str.w	r3, [r2, #16]!
   10d32:	f01b f811 	bl	2bd58 <z_log_msg_static_create.constprop.0>
   10d36:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10d38:	b11e      	cbz	r6, 10d42 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10d3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10d40:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10d42:	4b26      	ldr	r3, [pc, #152]	; (10ddc <mem_manage_fault.constprop.0+0x144>)
   10d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d46:	07db      	lsls	r3, r3, #31
   10d48:	d50a      	bpl.n	10d60 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   10d4a:	4b29      	ldr	r3, [pc, #164]	; (10df0 <mem_manage_fault.constprop.0+0x158>)
   10d4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d50:	617b      	str	r3, [r7, #20]
   10d52:	2302      	movs	r3, #2
   10d54:	4820      	ldr	r0, [pc, #128]	; (10dd8 <mem_manage_fault.constprop.0+0x140>)
   10d56:	613b      	str	r3, [r7, #16]
   10d58:	f107 0210 	add.w	r2, r7, #16
   10d5c:	f01a fffc 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10d60:	4b1e      	ldr	r3, [pc, #120]	; (10ddc <mem_manage_fault.constprop.0+0x144>)
   10d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d64:	069e      	lsls	r6, r3, #26
   10d66:	d50a      	bpl.n	10d7e <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   10d68:	4b22      	ldr	r3, [pc, #136]	; (10df4 <mem_manage_fault.constprop.0+0x15c>)
   10d6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d6e:	617b      	str	r3, [r7, #20]
   10d70:	2302      	movs	r3, #2
   10d72:	4819      	ldr	r0, [pc, #100]	; (10dd8 <mem_manage_fault.constprop.0+0x140>)
   10d74:	613b      	str	r3, [r7, #16]
   10d76:	f107 0210 	add.w	r2, r7, #16
   10d7a:	f01a ffed 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10d7e:	4b17      	ldr	r3, [pc, #92]	; (10ddc <mem_manage_fault.constprop.0+0x144>)
   10d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10d82:	06d4      	lsls	r4, r2, #27
   10d84:	d402      	bmi.n	10d8c <mem_manage_fault.constprop.0+0xf4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   10d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10d88:	0790      	lsls	r0, r2, #30
   10d8a:	d511      	bpl.n	10db0 <mem_manage_fault.constprop.0+0x118>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   10d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d8e:	06d9      	lsls	r1, r3, #27
   10d90:	d50e      	bpl.n	10db0 <mem_manage_fault.constprop.0+0x118>
   10d92:	4919      	ldr	r1, [pc, #100]	; (10df8 <mem_manage_fault.constprop.0+0x160>)
   10d94:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   10d98:	4a18      	ldr	r2, [pc, #96]	; (10dfc <mem_manage_fault.constprop.0+0x164>)
   10d9a:	4819      	ldr	r0, [pc, #100]	; (10e00 <mem_manage_fault.constprop.0+0x168>)
   10d9c:	f019 fc8d 	bl	2a6ba <assert_print>
   10da0:	4818      	ldr	r0, [pc, #96]	; (10e04 <mem_manage_fault.constprop.0+0x16c>)
   10da2:	f019 fc8a 	bl	2a6ba <assert_print>
   10da6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   10daa:	4814      	ldr	r0, [pc, #80]	; (10dfc <mem_manage_fault.constprop.0+0x164>)
   10dac:	f019 fc7e 	bl	2a6ac <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   10db0:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10db2:	4b0a      	ldr	r3, [pc, #40]	; (10ddc <mem_manage_fault.constprop.0+0x144>)

	return reason;
}
   10db4:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10db8:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   10dba:	bf42      	ittt	mi
   10dbc:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   10dbe:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   10dc2:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10dc6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   10dca:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10dcc:	7028      	strb	r0, [r5, #0]
}
   10dce:	46bd      	mov	sp, r7
   10dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dd4:	00033d85 	.word	0x00033d85
   10dd8:	000315a4 	.word	0x000315a4
   10ddc:	e000ed00 	.word	0xe000ed00
   10de0:	00033d9b 	.word	0x00033d9b
   10de4:	00033dce 	.word	0x00033dce
   10de8:	00033de1 	.word	0x00033de1
   10dec:	00033df9 	.word	0x00033df9
   10df0:	00033e0f 	.word	0x00033e0f
   10df4:	00033e2e 	.word	0x00033e2e
   10df8:	00033e97 	.word	0x00033e97
   10dfc:	00033e5d 	.word	0x00033e5d
   10e00:	00032659 	.word	0x00032659
   10e04:	00033ee1 	.word	0x00033ee1

00010e08 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e0c:	b086      	sub	sp, #24
   10e0e:	4606      	mov	r6, r0
   10e10:	460d      	mov	r5, r1
   10e12:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   10e14:	2402      	movs	r4, #2
   10e16:	4b3e      	ldr	r3, [pc, #248]	; (10f10 <bus_fault.constprop.0+0x108>)
   10e18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e1c:	617b      	str	r3, [r7, #20]
   10e1e:	483d      	ldr	r0, [pc, #244]	; (10f14 <bus_fault.constprop.0+0x10c>)
   10e20:	613c      	str	r4, [r7, #16]
   10e22:	f107 0210 	add.w	r2, r7, #16
   10e26:	f01a ff97 	bl	2bd58 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10e2a:	4b3b      	ldr	r3, [pc, #236]	; (10f18 <bus_fault.constprop.0+0x110>)
   10e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e2e:	04d9      	lsls	r1, r3, #19
   10e30:	d509      	bpl.n	10e46 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   10e32:	4b3a      	ldr	r3, [pc, #232]	; (10f1c <bus_fault.constprop.0+0x114>)
   10e34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e38:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10e3c:	4835      	ldr	r0, [pc, #212]	; (10f14 <bus_fault.constprop.0+0x10c>)
   10e3e:	f107 0210 	add.w	r2, r7, #16
   10e42:	f01a ff89 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10e46:	4b34      	ldr	r3, [pc, #208]	; (10f18 <bus_fault.constprop.0+0x110>)
   10e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e4a:	051a      	lsls	r2, r3, #20
   10e4c:	d50a      	bpl.n	10e64 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   10e4e:	4b34      	ldr	r3, [pc, #208]	; (10f20 <bus_fault.constprop.0+0x118>)
   10e50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e54:	617b      	str	r3, [r7, #20]
   10e56:	2302      	movs	r3, #2
   10e58:	482e      	ldr	r0, [pc, #184]	; (10f14 <bus_fault.constprop.0+0x10c>)
   10e5a:	613b      	str	r3, [r7, #16]
   10e5c:	f107 0210 	add.w	r2, r7, #16
   10e60:	f01a ff7a 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10e64:	4c2c      	ldr	r4, [pc, #176]	; (10f18 <bus_fault.constprop.0+0x110>)
   10e66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10e68:	059b      	lsls	r3, r3, #22
   10e6a:	d522      	bpl.n	10eb2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   10e6c:	46e8      	mov	r8, sp
   10e6e:	4b2d      	ldr	r3, [pc, #180]	; (10f24 <bus_fault.constprop.0+0x11c>)
   10e70:	4828      	ldr	r0, [pc, #160]	; (10f14 <bus_fault.constprop.0+0x10c>)
   10e72:	617b      	str	r3, [r7, #20]
   10e74:	2302      	movs	r3, #2
   10e76:	f107 0210 	add.w	r2, r7, #16
   10e7a:	613b      	str	r3, [r7, #16]
   10e7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e80:	f01a ff6a 	bl	2bd58 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10e84:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10e86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10e88:	0410      	lsls	r0, r2, #16
   10e8a:	d512      	bpl.n	10eb2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10e8c:	b088      	sub	sp, #32
   10e8e:	466a      	mov	r2, sp
   10e90:	4925      	ldr	r1, [pc, #148]	; (10f28 <bus_fault.constprop.0+0x120>)
   10e92:	4820      	ldr	r0, [pc, #128]	; (10f14 <bus_fault.constprop.0+0x10c>)
   10e94:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10e98:	2303      	movs	r3, #3
   10e9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10e9e:	f842 3f10 	str.w	r3, [r2, #16]!
   10ea2:	f01a ff59 	bl	2bd58 <z_log_msg_static_create.constprop.0>
   10ea6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10ea8:	b11e      	cbz	r6, 10eb2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10eaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10eac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10eb0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10eb2:	4b19      	ldr	r3, [pc, #100]	; (10f18 <bus_fault.constprop.0+0x110>)
   10eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10eb6:	0559      	lsls	r1, r3, #21
   10eb8:	d50a      	bpl.n	10ed0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   10eba:	4b1c      	ldr	r3, [pc, #112]	; (10f2c <bus_fault.constprop.0+0x124>)
   10ebc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ec0:	617b      	str	r3, [r7, #20]
   10ec2:	2302      	movs	r3, #2
   10ec4:	4813      	ldr	r0, [pc, #76]	; (10f14 <bus_fault.constprop.0+0x10c>)
   10ec6:	613b      	str	r3, [r7, #16]
   10ec8:	f107 0210 	add.w	r2, r7, #16
   10ecc:	f01a ff44 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10ed0:	4b11      	ldr	r3, [pc, #68]	; (10f18 <bus_fault.constprop.0+0x110>)
   10ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10ed4:	05d2      	lsls	r2, r2, #23
   10ed6:	d515      	bpl.n	10f04 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   10ed8:	4b15      	ldr	r3, [pc, #84]	; (10f30 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10eda:	617b      	str	r3, [r7, #20]
   10edc:	2302      	movs	r3, #2
   10ede:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ee2:	480c      	ldr	r0, [pc, #48]	; (10f14 <bus_fault.constprop.0+0x10c>)
   10ee4:	613b      	str	r3, [r7, #16]
   10ee6:	f107 0210 	add.w	r2, r7, #16
   10eea:	f01a ff35 	bl	2bd58 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   10eee:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10ef0:	4a09      	ldr	r2, [pc, #36]	; (10f18 <bus_fault.constprop.0+0x110>)

	return reason;
}
   10ef2:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10ef4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10ef6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10efa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10efc:	7028      	strb	r0, [r5, #0]
}
   10efe:	46bd      	mov	sp, r7
   10f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f06:	049b      	lsls	r3, r3, #18
   10f08:	d5f1      	bpl.n	10eee <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10f0a:	4b0a      	ldr	r3, [pc, #40]	; (10f34 <bus_fault.constprop.0+0x12c>)
   10f0c:	e7e5      	b.n	10eda <bus_fault.constprop.0+0xd2>
   10f0e:	bf00      	nop
   10f10:	00033f45 	.word	0x00033f45
   10f14:	000315a4 	.word	0x000315a4
   10f18:	e000ed00 	.word	0xe000ed00
   10f1c:	00033f5b 	.word	0x00033f5b
   10f20:	00033dce 	.word	0x00033dce
   10f24:	00033f6c 	.word	0x00033f6c
   10f28:	00033f85 	.word	0x00033f85
   10f2c:	00033f9a 	.word	0x00033f9a
   10f30:	00033fb5 	.word	0x00033fb5
   10f34:	00033e2e 	.word	0x00033e2e

00010f38 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   10f38:	b510      	push	{r4, lr}
   10f3a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   10f3c:	2402      	movs	r4, #2
   10f3e:	4b3a      	ldr	r3, [pc, #232]	; (11028 <usage_fault.constprop.0+0xf0>)
   10f40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f44:	4839      	ldr	r0, [pc, #228]	; (1102c <usage_fault.constprop.0+0xf4>)
   10f46:	aa04      	add	r2, sp, #16
   10f48:	9305      	str	r3, [sp, #20]
   10f4a:	9404      	str	r4, [sp, #16]
   10f4c:	f01a ff04 	bl	2bd58 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   10f50:	4b37      	ldr	r3, [pc, #220]	; (11030 <usage_fault.constprop.0+0xf8>)
   10f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f54:	019b      	lsls	r3, r3, #6
   10f56:	d508      	bpl.n	10f6a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   10f58:	4b36      	ldr	r3, [pc, #216]	; (11034 <usage_fault.constprop.0+0xfc>)
   10f5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f5e:	4833      	ldr	r0, [pc, #204]	; (1102c <usage_fault.constprop.0+0xf4>)
   10f60:	aa04      	add	r2, sp, #16
   10f62:	e9cd 4304 	strd	r4, r3, [sp, #16]
   10f66:	f01a fef7 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   10f6a:	4b31      	ldr	r3, [pc, #196]	; (11030 <usage_fault.constprop.0+0xf8>)
   10f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f6e:	01dc      	lsls	r4, r3, #7
   10f70:	d509      	bpl.n	10f86 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   10f72:	4b31      	ldr	r3, [pc, #196]	; (11038 <usage_fault.constprop.0+0x100>)
   10f74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f78:	9305      	str	r3, [sp, #20]
   10f7a:	2302      	movs	r3, #2
   10f7c:	482b      	ldr	r0, [pc, #172]	; (1102c <usage_fault.constprop.0+0xf4>)
   10f7e:	aa04      	add	r2, sp, #16
   10f80:	9304      	str	r3, [sp, #16]
   10f82:	f01a fee9 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   10f86:	4b2a      	ldr	r3, [pc, #168]	; (11030 <usage_fault.constprop.0+0xf8>)
   10f88:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   10f8a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   10f8e:	d009      	beq.n	10fa4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   10f90:	2402      	movs	r4, #2
   10f92:	4b2a      	ldr	r3, [pc, #168]	; (1103c <usage_fault.constprop.0+0x104>)
   10f94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f98:	4824      	ldr	r0, [pc, #144]	; (1102c <usage_fault.constprop.0+0xf4>)
   10f9a:	aa04      	add	r2, sp, #16
   10f9c:	9305      	str	r3, [sp, #20]
   10f9e:	9404      	str	r4, [sp, #16]
   10fa0:	f01a feda 	bl	2bd58 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10fa4:	4b22      	ldr	r3, [pc, #136]	; (11030 <usage_fault.constprop.0+0xf8>)
   10fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fa8:	0318      	lsls	r0, r3, #12
   10faa:	d509      	bpl.n	10fc0 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
   10fac:	4b24      	ldr	r3, [pc, #144]	; (11040 <usage_fault.constprop.0+0x108>)
   10fae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fb2:	9305      	str	r3, [sp, #20]
   10fb4:	2302      	movs	r3, #2
   10fb6:	481d      	ldr	r0, [pc, #116]	; (1102c <usage_fault.constprop.0+0xf4>)
   10fb8:	aa04      	add	r2, sp, #16
   10fba:	9304      	str	r3, [sp, #16]
   10fbc:	f01a fecc 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   10fc0:	4b1b      	ldr	r3, [pc, #108]	; (11030 <usage_fault.constprop.0+0xf8>)
   10fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fc4:	0359      	lsls	r1, r3, #13
   10fc6:	d509      	bpl.n	10fdc <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   10fc8:	4b1e      	ldr	r3, [pc, #120]	; (11044 <usage_fault.constprop.0+0x10c>)
   10fca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fce:	9305      	str	r3, [sp, #20]
   10fd0:	2302      	movs	r3, #2
   10fd2:	4816      	ldr	r0, [pc, #88]	; (1102c <usage_fault.constprop.0+0xf4>)
   10fd4:	aa04      	add	r2, sp, #16
   10fd6:	9304      	str	r3, [sp, #16]
   10fd8:	f01a febe 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   10fdc:	4b14      	ldr	r3, [pc, #80]	; (11030 <usage_fault.constprop.0+0xf8>)
   10fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fe0:	039a      	lsls	r2, r3, #14
   10fe2:	d509      	bpl.n	10ff8 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   10fe4:	4b18      	ldr	r3, [pc, #96]	; (11048 <usage_fault.constprop.0+0x110>)
   10fe6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fea:	9305      	str	r3, [sp, #20]
   10fec:	2302      	movs	r3, #2
   10fee:	480f      	ldr	r0, [pc, #60]	; (1102c <usage_fault.constprop.0+0xf4>)
   10ff0:	aa04      	add	r2, sp, #16
   10ff2:	9304      	str	r3, [sp, #16]
   10ff4:	f01a feb0 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   10ff8:	4b0d      	ldr	r3, [pc, #52]	; (11030 <usage_fault.constprop.0+0xf8>)
   10ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10ffc:	03db      	lsls	r3, r3, #15
   10ffe:	d509      	bpl.n	11014 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11000:	4b12      	ldr	r3, [pc, #72]	; (1104c <usage_fault.constprop.0+0x114>)
   11002:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11006:	9305      	str	r3, [sp, #20]
   11008:	2302      	movs	r3, #2
   1100a:	4808      	ldr	r0, [pc, #32]	; (1102c <usage_fault.constprop.0+0xf4>)
   1100c:	aa04      	add	r2, sp, #16
   1100e:	9304      	str	r3, [sp, #16]
   11010:	f01a fea2 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11014:	4a06      	ldr	r2, [pc, #24]	; (11030 <usage_fault.constprop.0+0xf8>)

	return reason;
}
   11016:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11018:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1101a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1101e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   11022:	6293      	str	r3, [r2, #40]	; 0x28
}
   11024:	b006      	add	sp, #24
   11026:	bd10      	pop	{r4, pc}
   11028:	00033fcd 	.word	0x00033fcd
   1102c:	000315a4 	.word	0x000315a4
   11030:	e000ed00 	.word	0xe000ed00
   11034:	00033fe5 	.word	0x00033fe5
   11038:	00033ff8 	.word	0x00033ff8
   1103c:	00034012 	.word	0x00034012
   11040:	0003403c 	.word	0x0003403c
   11044:	0003405a 	.word	0x0003405a
   11048:	0003407f 	.word	0x0003407f
   1104c:	00034099 	.word	0x00034099

00011050 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11054:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11056:	4b93      	ldr	r3, [pc, #588]	; (112a4 <z_arm_fault+0x254>)
{
   11058:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1105a:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   1105e:	4688      	mov	r8, r1
   11060:	4616      	mov	r6, r2
   11062:	2300      	movs	r3, #0
   11064:	af00      	add	r7, sp, #0
   11066:	f3ca 0908 	ubfx	r9, sl, #0, #9
   1106a:	f383 8811 	msr	BASEPRI, r3
   1106e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11072:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11076:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1107a:	d00e      	beq.n	1109a <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1107c:	498a      	ldr	r1, [pc, #552]	; (112a8 <z_arm_fault+0x258>)
   1107e:	f44f 6384 	mov.w	r3, #1056	; 0x420
   11082:	4a8a      	ldr	r2, [pc, #552]	; (112ac <z_arm_fault+0x25c>)
   11084:	488a      	ldr	r0, [pc, #552]	; (112b0 <z_arm_fault+0x260>)
   11086:	f019 fb18 	bl	2a6ba <assert_print>
   1108a:	488a      	ldr	r0, [pc, #552]	; (112b4 <z_arm_fault+0x264>)
   1108c:	f019 fb15 	bl	2a6ba <assert_print>
   11090:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   11094:	4885      	ldr	r0, [pc, #532]	; (112ac <z_arm_fault+0x25c>)
   11096:	f019 fb09 	bl	2a6ac <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1109a:	f012 0401 	ands.w	r4, r2, #1
   1109e:	d1ed      	bne.n	1107c <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   110a0:	0653      	lsls	r3, r2, #25
   110a2:	d404      	bmi.n	110ae <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   110a4:	0710      	lsls	r0, r2, #28
   110a6:	d40f      	bmi.n	110c8 <z_arm_fault+0x78>
			*nested_exc = true;
   110a8:	f04f 0801 	mov.w	r8, #1
   110ac:	e00f      	b.n	110ce <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   110ae:	4b82      	ldr	r3, [pc, #520]	; (112b8 <z_arm_fault+0x268>)
   110b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   110b4:	61fb      	str	r3, [r7, #28]
   110b6:	2302      	movs	r3, #2
   110b8:	4880      	ldr	r0, [pc, #512]	; (112bc <z_arm_fault+0x26c>)
   110ba:	61bb      	str	r3, [r7, #24]
   110bc:	f107 0218 	add.w	r2, r7, #24
   110c0:	f01a fe4a 	bl	2bd58 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   110c4:	0771      	lsls	r1, r6, #29
   110c6:	d500      	bpl.n	110ca <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
   110c8:	4645      	mov	r5, r8
	*nested_exc = false;
   110ca:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
   110ce:	2d00      	cmp	r5, #0
   110d0:	d0d4      	beq.n	1107c <z_arm_fault+0x2c>
	*recoverable = false;
   110d2:	2300      	movs	r3, #0
   110d4:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   110d6:	f1a9 0303 	sub.w	r3, r9, #3
   110da:	2b09      	cmp	r3, #9
   110dc:	f200 80c1 	bhi.w	11262 <z_arm_fault+0x212>
   110e0:	e8df f003 	tbb	[pc, r3]
   110e4:	97b7b405 	.word	0x97b7b405
   110e8:	bfbfbfbf 	.word	0xbfbfbfbf
   110ec:	babf      	.short	0xbabf
	PR_FAULT_INFO("***** HARD FAULT *****");
   110ee:	46e9      	mov	r9, sp
   110f0:	f04f 0a02 	mov.w	sl, #2
   110f4:	4b72      	ldr	r3, [pc, #456]	; (112c0 <z_arm_fault+0x270>)
   110f6:	f107 0218 	add.w	r2, r7, #24
   110fa:	61fb      	str	r3, [r7, #28]
   110fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11100:	486e      	ldr	r0, [pc, #440]	; (112bc <z_arm_fault+0x26c>)
   11102:	f8c7 a018 	str.w	sl, [r7, #24]
   11106:	f01a fe27 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   1110a:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1110c:	4e65      	ldr	r6, [pc, #404]	; (112a4 <z_arm_fault+0x254>)
	*recoverable = false;
   1110e:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11110:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11112:	079a      	lsls	r2, r3, #30
   11114:	d50a      	bpl.n	1112c <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
   11116:	4b6b      	ldr	r3, [pc, #428]	; (112c4 <z_arm_fault+0x274>)
		PR_EXC("  Debug event");
   11118:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   1111c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11120:	4866      	ldr	r0, [pc, #408]	; (112bc <z_arm_fault+0x26c>)
   11122:	f107 0218 	add.w	r2, r7, #24
   11126:	f01a fe17 	bl	2bd58 <z_log_msg_static_create.constprop.0>
}
   1112a:	e042      	b.n	111b2 <z_arm_fault+0x162>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1112c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1112e:	2b00      	cmp	r3, #0
   11130:	da01      	bge.n	11136 <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
   11132:	4b65      	ldr	r3, [pc, #404]	; (112c8 <z_arm_fault+0x278>)
   11134:	e7f0      	b.n	11118 <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11136:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11138:	005b      	lsls	r3, r3, #1
   1113a:	d57a      	bpl.n	11232 <z_arm_fault+0x1e2>
		PR_EXC("  Fault escalation (see below)");
   1113c:	4b63      	ldr	r3, [pc, #396]	; (112cc <z_arm_fault+0x27c>)
   1113e:	f107 0218 	add.w	r2, r7, #24
   11142:	e9c7 a306 	strd	sl, r3, [r7, #24]
   11146:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1114a:	485c      	ldr	r0, [pc, #368]	; (112bc <z_arm_fault+0x26c>)
   1114c:	f01a fe04 	bl	2bd58 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11150:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   11152:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11158:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1115a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1115e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11162:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   11164:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1116c:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1116e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11172:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11176:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1117a:	429a      	cmp	r2, r3
   1117c:	d009      	beq.n	11192 <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1117e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   11180:	b2db      	uxtb	r3, r3
   11182:	2b00      	cmp	r3, #0
   11184:	d038      	beq.n	111f8 <z_arm_fault+0x1a8>
			reason = mem_manage_fault(esf, 1, recoverable);
   11186:	2001      	movs	r0, #1
   11188:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1118a:	f7ff fd85 	bl	10c98 <mem_manage_fault.constprop.0>
   1118e:	4604      	mov	r4, r0
		break;
   11190:	e00f      	b.n	111b2 <z_arm_fault+0x162>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   11192:	b088      	sub	sp, #32
   11194:	682b      	ldr	r3, [r5, #0]
   11196:	466a      	mov	r2, sp
   11198:	494d      	ldr	r1, [pc, #308]	; (112d0 <z_arm_fault+0x280>)
   1119a:	4848      	ldr	r0, [pc, #288]	; (112bc <z_arm_fault+0x26c>)
   1119c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   111a0:	2303      	movs	r3, #3
   111a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   111a6:	f842 3f10 	str.w	r3, [r2, #16]!
   111aa:	f01a fdd5 	bl	2bd58 <z_log_msg_static_create.constprop.0>
   111ae:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   111b0:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   111b2:	79fb      	ldrb	r3, [r7, #7]
   111b4:	b9e3      	cbnz	r3, 111f0 <z_arm_fault+0x1a0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   111b6:	f107 0208 	add.w	r2, r7, #8
   111ba:	f105 0620 	add.w	r6, r5, #32
   111be:	4613      	mov	r3, r2
   111c0:	6828      	ldr	r0, [r5, #0]
   111c2:	6869      	ldr	r1, [r5, #4]
   111c4:	3508      	adds	r5, #8
   111c6:	c303      	stmia	r3!, {r0, r1}
   111c8:	42b5      	cmp	r5, r6
   111ca:	461a      	mov	r2, r3
   111cc:	d1f7      	bne.n	111be <z_arm_fault+0x16e>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   111ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111d0:	f1b8 0f00 	cmp.w	r8, #0
   111d4:	d061      	beq.n	1129a <z_arm_fault+0x24a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   111d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   111da:	b922      	cbnz	r2, 111e6 <z_arm_fault+0x196>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   111dc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   111e0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   111e4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   111e6:	4620      	mov	r0, r4
   111e8:	f107 0108 	add.w	r1, r7, #8
   111ec:	f7ff fbb0 	bl	10950 <z_arm_fatal_error>
}
   111f0:	3728      	adds	r7, #40	; 0x28
   111f2:	46bd      	mov	sp, r7
   111f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   111f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   111fa:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   111fe:	d004      	beq.n	1120a <z_arm_fault+0x1ba>
			reason = bus_fault(esf, 1, recoverable);
   11200:	2001      	movs	r0, #1
   11202:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   11204:	f7ff fe00 	bl	10e08 <bus_fault.constprop.0>
   11208:	e7c1      	b.n	1118e <z_arm_fault+0x13e>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1120a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1120c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   11210:	d302      	bcc.n	11218 <z_arm_fault+0x1c8>
		reason = usage_fault(esf);
   11212:	f7ff fe91 	bl	10f38 <usage_fault.constprop.0>
   11216:	e7ba      	b.n	1118e <z_arm_fault+0x13e>
			__ASSERT(0,
   11218:	492e      	ldr	r1, [pc, #184]	; (112d4 <z_arm_fault+0x284>)
   1121a:	f240 23f2 	movw	r3, #754	; 0x2f2
   1121e:	4a23      	ldr	r2, [pc, #140]	; (112ac <z_arm_fault+0x25c>)
   11220:	4823      	ldr	r0, [pc, #140]	; (112b0 <z_arm_fault+0x260>)
   11222:	f019 fa4a 	bl	2a6ba <assert_print>
   11226:	482c      	ldr	r0, [pc, #176]	; (112d8 <z_arm_fault+0x288>)
   11228:	f019 fa47 	bl	2a6ba <assert_print>
   1122c:	f240 21f2 	movw	r1, #754	; 0x2f2
   11230:	e730      	b.n	11094 <z_arm_fault+0x44>
		__ASSERT(0,
   11232:	4928      	ldr	r1, [pc, #160]	; (112d4 <z_arm_fault+0x284>)
   11234:	f240 23f6 	movw	r3, #758	; 0x2f6
   11238:	4a1c      	ldr	r2, [pc, #112]	; (112ac <z_arm_fault+0x25c>)
   1123a:	481d      	ldr	r0, [pc, #116]	; (112b0 <z_arm_fault+0x260>)
   1123c:	f019 fa3d 	bl	2a6ba <assert_print>
   11240:	4826      	ldr	r0, [pc, #152]	; (112dc <z_arm_fault+0x28c>)
   11242:	f019 fa3a 	bl	2a6ba <assert_print>
   11246:	f240 21f6 	movw	r1, #758	; 0x2f6
   1124a:	e723      	b.n	11094 <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   1124c:	2000      	movs	r0, #0
   1124e:	1df9      	adds	r1, r7, #7
   11250:	e79b      	b.n	1118a <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
   11252:	2000      	movs	r0, #0
   11254:	1df9      	adds	r1, r7, #7
   11256:	e7d5      	b.n	11204 <z_arm_fault+0x1b4>
	PR_FAULT_INFO(
   11258:	4b21      	ldr	r3, [pc, #132]	; (112e0 <z_arm_fault+0x290>)
   1125a:	61fb      	str	r3, [r7, #28]
   1125c:	2302      	movs	r3, #2
   1125e:	61bb      	str	r3, [r7, #24]
   11260:	e75c      	b.n	1111c <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
   11262:	4a20      	ldr	r2, [pc, #128]	; (112e4 <z_arm_fault+0x294>)
   11264:	466e      	mov	r6, sp
   11266:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   1126a:	b08a      	sub	sp, #40	; 0x28
   1126c:	4b1e      	ldr	r3, [pc, #120]	; (112e8 <z_arm_fault+0x298>)
   1126e:	bf18      	it	ne
   11270:	4613      	movne	r3, r2
   11272:	466a      	mov	r2, sp
   11274:	491d      	ldr	r1, [pc, #116]	; (112ec <z_arm_fault+0x29c>)
   11276:	4811      	ldr	r0, [pc, #68]	; (112bc <z_arm_fault+0x26c>)
   11278:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1127c:	f1a9 0310 	sub.w	r3, r9, #16
   11280:	61d3      	str	r3, [r2, #28]
   11282:	f44f 7300 	mov.w	r3, #512	; 0x200
   11286:	8413      	strh	r3, [r2, #32]
   11288:	4b19      	ldr	r3, [pc, #100]	; (112f0 <z_arm_fault+0x2a0>)
   1128a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1128e:	f842 3f10 	str.w	r3, [r2, #16]!
   11292:	f01a fd61 	bl	2bd58 <z_log_msg_static_create.constprop.0>
   11296:	46b5      	mov	sp, r6
}
   11298:	e78b      	b.n	111b2 <z_arm_fault+0x162>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1129a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1129e:	f023 0301 	bic.w	r3, r3, #1
   112a2:	e79f      	b.n	111e4 <z_arm_fault+0x194>
   112a4:	e000ed00 	.word	0xe000ed00
   112a8:	000340f2 	.word	0x000340f2
   112ac:	00033e5d 	.word	0x00033e5d
   112b0:	00032659 	.word	0x00032659
   112b4:	00034105 	.word	0x00034105
   112b8:	00034143 	.word	0x00034143
   112bc:	000315a4 	.word	0x000315a4
   112c0:	00034166 	.word	0x00034166
   112c4:	0003417d 	.word	0x0003417d
   112c8:	0003419e 	.word	0x0003419e
   112cc:	000341ac 	.word	0x000341ac
   112d0:	000341cb 	.word	0x000341cb
   112d4:	00037b2a 	.word	0x00037b2a
   112d8:	000341e7 	.word	0x000341e7
   112dc:	0003420b 	.word	0x0003420b
   112e0:	0003423b 	.word	0x0003423b
   112e4:	000340d9 	.word	0x000340d9
   112e8:	000340c4 	.word	0x000340c4
   112ec:	0003425f 	.word	0x0003425f
   112f0:	01000004 	.word	0x01000004

000112f4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   112f4:	4b04      	ldr	r3, [pc, #16]	; (11308 <z_arm_fault_init+0x14>)
   112f6:	695a      	ldr	r2, [r3, #20]
   112f8:	f042 0210 	orr.w	r2, r2, #16
   112fc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   112fe:	695a      	ldr	r2, [r3, #20]
   11300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   11304:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11306:	4770      	bx	lr
   11308:	e000ed00 	.word	0xe000ed00

0001130c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1130c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11310:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11314:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11316:	4672      	mov	r2, lr
	bl z_arm_fault
   11318:	f7ff fe9a 	bl	11050 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1131c:	bd01      	pop	{r0, pc}
   1131e:	bf00      	nop

00011320 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11320:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11322:	2120      	movs	r1, #32
   11324:	4803      	ldr	r0, [pc, #12]	; (11334 <z_arm_interrupt_init+0x14>)
   11326:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11328:	3301      	adds	r3, #1
   1132a:	2b45      	cmp	r3, #69	; 0x45
   1132c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11330:	d1f9      	bne.n	11326 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11332:	4770      	bx	lr
   11334:	e000e100 	.word	0xe000e100

00011338 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11338:	2000      	movs	r0, #0
    msr CONTROL, r0
   1133a:	f380 8814 	msr	CONTROL, r0
    isb
   1133e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   11342:	2000      	movs	r0, #0
    msr MSPLIM, r0
   11344:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   11348:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1134c:	f7fc ff0a 	bl	e164 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11350:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11352:	490e      	ldr	r1, [pc, #56]	; (1138c <__start+0x54>)
    str r0, [r1]
   11354:	6008      	str	r0, [r1, #0]
    dsb
   11356:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1135a:	480d      	ldr	r0, [pc, #52]	; (11390 <__start+0x58>)
    msr msp, r0
   1135c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11360:	f000 f83e 	bl	113e0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11364:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11366:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1136a:	480a      	ldr	r0, [pc, #40]	; (11394 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1136c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11370:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11372:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11376:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1137a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1137c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1137e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11382:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11386:	f7ff fbaf 	bl	10ae8 <z_arm_prep_c>
   1138a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1138c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11390:	200343f0 	.word	0x200343f0
    ldr r0, =z_interrupt_stacks
   11394:	200336b0 	.word	0x200336b0

00011398 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11398:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1139c:	4905      	ldr	r1, [pc, #20]	; (113b4 <sys_arch_reboot+0x1c>)
   1139e:	4b06      	ldr	r3, [pc, #24]	; (113b8 <sys_arch_reboot+0x20>)
   113a0:	68ca      	ldr	r2, [r1, #12]
   113a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   113a6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   113a8:	60cb      	str	r3, [r1, #12]
   113aa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   113ae:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   113b0:	e7fd      	b.n	113ae <sys_arch_reboot+0x16>
   113b2:	bf00      	nop
   113b4:	e000ed00 	.word	0xe000ed00
   113b8:	05fa0004 	.word	0x05fa0004

000113bc <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   113bc:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   113be:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   113c0:	4906      	ldr	r1, [pc, #24]	; (113dc <z_arm_clear_arm_mpu_config+0x20>)
   113c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   113c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   113ca:	4293      	cmp	r3, r2
   113cc:	db00      	blt.n	113d0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   113ce:	4770      	bx	lr
  mpu->RNR = rnr;
   113d0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   113d4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   113d8:	3301      	adds	r3, #1
   113da:	e7f6      	b.n	113ca <z_arm_clear_arm_mpu_config+0xe>
   113dc:	e000ed00 	.word	0xe000ed00

000113e0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   113e0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   113e2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   113e4:	2400      	movs	r4, #0
   113e6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   113ea:	f7ff ffe7 	bl	113bc <z_arm_clear_arm_mpu_config>
   113ee:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   113f0:	f04f 30ff 	mov.w	r0, #4294967295
   113f4:	4a0c      	ldr	r2, [pc, #48]	; (11428 <z_arm_init_arch_hw_at_boot+0x48>)
   113f6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   113fa:	3301      	adds	r3, #1
   113fc:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   113fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11402:	d1f8      	bne.n	113f6 <z_arm_init_arch_hw_at_boot+0x16>
   11404:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11406:	f04f 30ff 	mov.w	r0, #4294967295
   1140a:	4a07      	ldr	r2, [pc, #28]	; (11428 <z_arm_init_arch_hw_at_boot+0x48>)
   1140c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11410:	3301      	adds	r3, #1
   11412:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11414:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11418:	d1f8      	bne.n	1140c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1141a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1141c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11420:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11424:	bd10      	pop	{r4, pc}
   11426:	bf00      	nop
   11428:	e000e100 	.word	0xe000e100

0001142c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1142c:	4b08      	ldr	r3, [pc, #32]	; (11450 <z_impl_k_thread_abort+0x24>)
   1142e:	689b      	ldr	r3, [r3, #8]
   11430:	4283      	cmp	r3, r0
   11432:	d10b      	bne.n	1144c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11434:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11438:	b143      	cbz	r3, 1144c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1143a:	4b06      	ldr	r3, [pc, #24]	; (11454 <z_impl_k_thread_abort+0x28>)
   1143c:	685a      	ldr	r2, [r3, #4]
   1143e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11442:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   11444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1144a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   1144c:	f015 bfea 	b.w	27424 <z_thread_abort>
   11450:	20021a88 	.word	0x20021a88
   11454:	e000ed00 	.word	0xe000ed00

00011458 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1145a:	4c09      	ldr	r4, [pc, #36]	; (11480 <z_arm_configure_static_mpu_regions+0x28>)
   1145c:	4a09      	ldr	r2, [pc, #36]	; (11484 <z_arm_configure_static_mpu_regions+0x2c>)
   1145e:	4623      	mov	r3, r4
   11460:	2101      	movs	r1, #1
   11462:	4809      	ldr	r0, [pc, #36]	; (11488 <z_arm_configure_static_mpu_regions+0x30>)
   11464:	f000 f92a 	bl	116bc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11468:	2300      	movs	r3, #0
   1146a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1146c:	4b07      	ldr	r3, [pc, #28]	; (1148c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1146e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11470:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11472:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11474:	9301      	str	r3, [sp, #4]
   11476:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11478:	f000 f944 	bl	11704 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1147c:	b004      	add	sp, #16
   1147e:	bd10      	pop	{r4, pc}
   11480:	20070000 	.word	0x20070000
   11484:	20008000 	.word	0x20008000
   11488:	00031e28 	.word	0x00031e28
   1148c:	20008e40 	.word	0x20008e40

00011490 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11490:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   11492:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11494:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11496:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1149a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   1149e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   114a0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   114a2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   114a4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   114a8:	4905      	ldr	r1, [pc, #20]	; (114c0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   114aa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   114ae:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   114b2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   114b6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   114ba:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   114be:	bd10      	pop	{r4, pc}
   114c0:	e000ed00 	.word	0xe000ed00

000114c4 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   114c4:	b580      	push	{r7, lr}
   114c6:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   114c8:	b088      	sub	sp, #32
   114ca:	466a      	mov	r2, sp
   114cc:	4b07      	ldr	r3, [pc, #28]	; (114ec <region_allocate_and_init.part.0+0x28>)
   114ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
   114d2:	2303      	movs	r3, #3
   114d4:	f842 3f10 	str.w	r3, [r2, #16]!
   114d8:	2300      	movs	r3, #0
   114da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   114de:	4804      	ldr	r0, [pc, #16]	; (114f0 <region_allocate_and_init.part.0+0x2c>)
   114e0:	f7fd f9d6 	bl	e890 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   114e4:	f06f 0015 	mvn.w	r0, #21
   114e8:	46bd      	mov	sp, r7
   114ea:	bd80      	pop	{r7, pc}
   114ec:	00034276 	.word	0x00034276
   114f0:	0003158c 	.word	0x0003158c

000114f4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   114f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114f8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   114fa:	4606      	mov	r6, r0
   114fc:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11500:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   11502:	4d5f      	ldr	r5, [pc, #380]	; (11680 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11504:	af00      	add	r7, sp, #0
   11506:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   11508:	687b      	ldr	r3, [r7, #4]
   1150a:	4599      	cmp	r9, r3
   1150c:	da35      	bge.n	1157a <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   1150e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   11512:	f1b8 0f00 	cmp.w	r8, #0
   11516:	d054      	beq.n	115c2 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   11518:	f1b8 0f1f 	cmp.w	r8, #31
   1151c:	d91b      	bls.n	11556 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   1151e:	f018 0f1f 	tst.w	r8, #31
   11522:	d118      	bne.n	11556 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   11524:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11528:	f01b 0f1f 	tst.w	fp, #31
   1152c:	d113      	bne.n	11556 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1152e:	4658      	mov	r0, fp
   11530:	f01a fc17 	bl	2bd62 <arm_cmse_mpu_region_get>
   11534:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11536:	eb08 000b 	add.w	r0, r8, fp
   1153a:	3801      	subs	r0, #1
   1153c:	f01a fc11 	bl	2bd62 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11540:	4582      	cmp	sl, r0
   11542:	d01f      	beq.n	11584 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   11544:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11548:	466c      	mov	r4, sp
   1154a:	b088      	sub	sp, #32
   1154c:	466a      	mov	r2, sp
   1154e:	494d      	ldr	r1, [pc, #308]	; (11684 <mpu_configure_regions_and_partition.constprop.0+0x190>)
   11550:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   11554:	e005      	b.n	11562 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   11556:	466c      	mov	r4, sp
   11558:	b088      	sub	sp, #32
   1155a:	466a      	mov	r2, sp
   1155c:	4b4a      	ldr	r3, [pc, #296]	; (11688 <mpu_configure_regions_and_partition.constprop.0+0x194>)
   1155e:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   11562:	2303      	movs	r3, #3
   11564:	f842 3f10 	str.w	r3, [r2, #16]!
   11568:	2300      	movs	r3, #0
   1156a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1156e:	4847      	ldr	r0, [pc, #284]	; (1168c <mpu_configure_regions_and_partition.constprop.0+0x198>)
   11570:	f7fd f98e 	bl	e890 <z_impl_z_log_msg_static_create>
   11574:	46a5      	mov	sp, r4
			return -EINVAL;
   11576:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1157a:	4620      	mov	r0, r4
   1157c:	371c      	adds	r7, #28
   1157e:	46bd      	mov	sp, r7
   11580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   11584:	f11a 0f16 	cmn.w	sl, #22
   11588:	d0de      	beq.n	11548 <mpu_configure_regions_and_partition.constprop.0+0x54>
   1158a:	4554      	cmp	r4, sl
   1158c:	dddc      	ble.n	11548 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   1158e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   11592:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   11596:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   1159a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1159e:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   115a2:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   115a6:	e9d6 2100 	ldrd	r2, r1, [r6]
   115aa:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   115ac:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   115ae:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   115b2:	d11e      	bne.n	115f2 <mpu_configure_regions_and_partition.constprop.0+0xfe>
   115b4:	45d8      	cmp	r8, fp
   115b6:	d108      	bne.n	115ca <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   115b8:	4631      	mov	r1, r6
   115ba:	fa5f f08a 	uxtb.w	r0, sl
   115be:	f01a fbd9 	bl	2bd74 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   115c2:	f109 0901 	add.w	r9, r9, #1
   115c6:	360c      	adds	r6, #12
   115c8:	e79e      	b.n	11508 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   115ca:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   115ce:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   115d2:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   115d6:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   115da:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   115dc:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   115de:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   115e2:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   115e4:	f01a fbc6 	bl	2bd74 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   115e8:	f110 0f16 	cmn.w	r0, #22
   115ec:	d0c3      	beq.n	11576 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   115ee:	1c44      	adds	r4, r0, #1
   115f0:	e7e7      	b.n	115c2 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   115f2:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   115f4:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   115f6:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   115f8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   115fc:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   11600:	d108      	bne.n	11614 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   11602:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   11606:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11608:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1160c:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   1160e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   11612:	e7e7      	b.n	115e4 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   11614:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11618:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1161c:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   1161e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   11622:	4631      	mov	r1, r6
   11624:	f01a fba6 	bl	2bd74 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11628:	f110 0f16 	cmn.w	r0, #22
   1162c:	d0a3      	beq.n	11576 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   1162e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   11632:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11636:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11638:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   1163c:	f362 0304 	bfi	r3, r2, #0, #5
   11640:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   11642:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11646:	7c3a      	ldrb	r2, [r7, #16]
   11648:	085b      	lsrs	r3, r3, #1
   1164a:	f363 1247 	bfi	r2, r3, #5, #3
   1164e:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   11650:	e9d6 3200 	ldrd	r3, r2, [r6]
   11654:	4413      	add	r3, r2
   11656:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   11658:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1165c:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1165e:	4443      	add	r3, r8
   11660:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   11664:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   11666:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1166a:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
   1166c:	617b      	str	r3, [r7, #20]
   1166e:	d902      	bls.n	11676 <mpu_configure_regions_and_partition.constprop.0+0x182>
   11670:	f7ff ff28 	bl	114c4 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   11674:	e7b8      	b.n	115e8 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   11676:	f107 0108 	add.w	r1, r7, #8
   1167a:	f7ff ff09 	bl	11490 <region_init>
   1167e:	e7b6      	b.n	115ee <mpu_configure_regions_and_partition.constprop.0+0xfa>
   11680:	e000ed00 	.word	0xe000ed00
   11684:	000342bf 	.word	0x000342bf
   11688:	0003429c 	.word	0x0003429c
   1168c:	0003158c 	.word	0x0003158c

00011690 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11690:	2205      	movs	r2, #5
   11692:	4b04      	ldr	r3, [pc, #16]	; (116a4 <arm_core_mpu_enable+0x14>)
   11694:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1169c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   116a0:	4770      	bx	lr
   116a2:	bf00      	nop
   116a4:	e000ed00 	.word	0xe000ed00

000116a8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   116a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   116ac:	2200      	movs	r2, #0
   116ae:	4b02      	ldr	r3, [pc, #8]	; (116b8 <arm_core_mpu_disable+0x10>)
   116b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   116b4:	4770      	bx	lr
   116b6:	bf00      	nop
   116b8:	e000ed00 	.word	0xe000ed00

000116bc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   116bc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   116be:	4d0c      	ldr	r5, [pc, #48]	; (116f0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   116c0:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   116c2:	782a      	ldrb	r2, [r5, #0]
   116c4:	f7ff ff16 	bl	114f4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   116c8:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   116ca:	3016      	adds	r0, #22
   116cc:	d10f      	bne.n	116ee <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   116ce:	f44f 738d 	mov.w	r3, #282	; 0x11a
   116d2:	4a08      	ldr	r2, [pc, #32]	; (116f4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   116d4:	4908      	ldr	r1, [pc, #32]	; (116f8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   116d6:	4809      	ldr	r0, [pc, #36]	; (116fc <arm_core_mpu_configure_static_mpu_regions+0x40>)
   116d8:	f018 ffef 	bl	2a6ba <assert_print>
   116dc:	4621      	mov	r1, r4
   116de:	4808      	ldr	r0, [pc, #32]	; (11700 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   116e0:	f018 ffeb 	bl	2a6ba <assert_print>
   116e4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   116e8:	4802      	ldr	r0, [pc, #8]	; (116f4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   116ea:	f018 ffdf 	bl	2a6ac <assert_post_action>
			regions_num);
	}
}
   116ee:	bd38      	pop	{r3, r4, r5, pc}
   116f0:	20022317 	.word	0x20022317
   116f4:	000342e2 	.word	0x000342e2
   116f8:	00037b2a 	.word	0x00037b2a
   116fc:	00032659 	.word	0x00032659
   11700:	00034319 	.word	0x00034319

00011704 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   11704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11708:	4e31      	ldr	r6, [pc, #196]	; (117d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1170a:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1170c:	4605      	mov	r5, r0
   1170e:	f04f 0800 	mov.w	r8, #0
   11712:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   11714:	4f2f      	ldr	r7, [pc, #188]	; (117d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11716:	45c8      	cmp	r8, r9
   11718:	db02      	blt.n	11720 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1171a:	b003      	add	sp, #12
   1171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   11720:	f8d5 a004 	ldr.w	sl, [r5, #4]
   11724:	f1ba 0f00 	cmp.w	sl, #0
   11728:	d04c      	beq.n	117c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1172a:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1172c:	4608      	mov	r0, r1
   1172e:	9101      	str	r1, [sp, #4]
   11730:	f01a fb17 	bl	2bd62 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11734:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11736:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11738:	eb0a 0001 	add.w	r0, sl, r1
   1173c:	3801      	subs	r0, #1
   1173e:	f01a fb10 	bl	2bd62 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11742:	4284      	cmp	r4, r0
   11744:	f04f 0214 	mov.w	r2, #20
   11748:	4b23      	ldr	r3, [pc, #140]	; (117d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1174a:	d015      	beq.n	11778 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   1174c:	fb02 f308 	mul.w	r3, r2, r8
   11750:	f06f 0215 	mvn.w	r2, #21
   11754:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   11758:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1175c:	4a1f      	ldr	r2, [pc, #124]	; (117dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1175e:	4920      	ldr	r1, [pc, #128]	; (117e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   11760:	4820      	ldr	r0, [pc, #128]	; (117e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   11762:	f018 ffaa 	bl	2a6ba <assert_print>
   11766:	4649      	mov	r1, r9
   11768:	481f      	ldr	r0, [pc, #124]	; (117e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   1176a:	f018 ffa6 	bl	2a6ba <assert_print>
   1176e:	f44f 7195 	mov.w	r1, #298	; 0x12a
   11772:	481a      	ldr	r0, [pc, #104]	; (117dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11774:	f018 ff9a 	bl	2a6ac <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11778:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1177c:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1177e:	d0eb      	beq.n	11758 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11780:	7819      	ldrb	r1, [r3, #0]
   11782:	42a1      	cmp	r1, r4
   11784:	dde8      	ble.n	11758 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   11786:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   1178a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   1178e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   11792:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11796:	f100 0108 	add.w	r1, r0, #8
   1179a:	7b00      	ldrb	r0, [r0, #12]
   1179c:	f364 0004 	bfi	r0, r4, #0, #5
   117a0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   117a2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   117a6:	790c      	ldrb	r4, [r1, #4]
   117a8:	0840      	lsrs	r0, r0, #1
   117aa:	f360 1447 	bfi	r4, r0, #5, #3
   117ae:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   117b0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   117b4:	f021 011f 	bic.w	r1, r1, #31
   117b8:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   117ba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   117be:	f021 011f 	bic.w	r1, r1, #31
   117c2:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   117c4:	f108 0801 	add.w	r8, r8, #1
   117c8:	3614      	adds	r6, #20
   117ca:	350c      	adds	r5, #12
   117cc:	e7a3      	b.n	11716 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   117ce:	bf00      	nop
   117d0:	20021534 	.word	0x20021534
   117d4:	e000ed00 	.word	0xe000ed00
   117d8:	20022317 	.word	0x20022317
   117dc:	000342e2 	.word	0x000342e2
   117e0:	00037b2a 	.word	0x00037b2a
   117e4:	00032659 	.word	0x00032659
   117e8:	00034345 	.word	0x00034345

000117ec <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   117ec:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   117ee:	4d1f      	ldr	r5, [pc, #124]	; (1186c <z_arm_mpu_init+0x80>)
   117f0:	682c      	ldr	r4, [r5, #0]
   117f2:	2c08      	cmp	r4, #8
   117f4:	d910      	bls.n	11818 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   117f6:	f240 1351 	movw	r3, #337	; 0x151
   117fa:	4a1d      	ldr	r2, [pc, #116]	; (11870 <z_arm_mpu_init+0x84>)
   117fc:	491d      	ldr	r1, [pc, #116]	; (11874 <z_arm_mpu_init+0x88>)
   117fe:	481e      	ldr	r0, [pc, #120]	; (11878 <z_arm_mpu_init+0x8c>)
   11800:	f018 ff5b 	bl	2a6ba <assert_print>
   11804:	4621      	mov	r1, r4
   11806:	2208      	movs	r2, #8
   11808:	481c      	ldr	r0, [pc, #112]	; (1187c <z_arm_mpu_init+0x90>)
   1180a:	f018 ff56 	bl	2a6ba <assert_print>
   1180e:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   11812:	4817      	ldr	r0, [pc, #92]	; (11870 <z_arm_mpu_init+0x84>)
   11814:	f018 ff4a 	bl	2a6ac <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11818:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   1181a:	f7ff ff45 	bl	116a8 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   1181e:	4b18      	ldr	r3, [pc, #96]	; (11880 <z_arm_mpu_init+0x94>)
   11820:	4a18      	ldr	r2, [pc, #96]	; (11884 <z_arm_mpu_init+0x98>)
   11822:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11826:	4284      	cmp	r4, r0
   11828:	d117      	bne.n	1185a <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   1182a:	4b17      	ldr	r3, [pc, #92]	; (11888 <z_arm_mpu_init+0x9c>)
   1182c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1182e:	f7ff ff2f 	bl	11690 <arm_core_mpu_enable>
	__ASSERT(
   11832:	4b13      	ldr	r3, [pc, #76]	; (11880 <z_arm_mpu_init+0x94>)
   11834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   11838:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1183c:	2b08      	cmp	r3, #8
   1183e:	d013      	beq.n	11868 <z_arm_mpu_init+0x7c>
   11840:	4912      	ldr	r1, [pc, #72]	; (1188c <z_arm_mpu_init+0xa0>)
   11842:	f240 13bb 	movw	r3, #443	; 0x1bb
   11846:	4a0a      	ldr	r2, [pc, #40]	; (11870 <z_arm_mpu_init+0x84>)
   11848:	480b      	ldr	r0, [pc, #44]	; (11878 <z_arm_mpu_init+0x8c>)
   1184a:	f018 ff36 	bl	2a6ba <assert_print>
   1184e:	4810      	ldr	r0, [pc, #64]	; (11890 <z_arm_mpu_init+0xa4>)
   11850:	f018 ff33 	bl	2a6ba <assert_print>
   11854:	f240 11bb 	movw	r1, #443	; 0x1bb
   11858:	e7db      	b.n	11812 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1185a:	6869      	ldr	r1, [r5, #4]
   1185c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11860:	f7ff fe16 	bl	11490 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11864:	3001      	adds	r0, #1
   11866:	e7de      	b.n	11826 <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11868:	2000      	movs	r0, #0
   1186a:	bd38      	pop	{r3, r4, r5, pc}
   1186c:	00031e34 	.word	0x00031e34
   11870:	000342e2 	.word	0x000342e2
   11874:	00037b2a 	.word	0x00037b2a
   11878:	00032659 	.word	0x00032659
   1187c:	00034374 	.word	0x00034374
   11880:	e000ed00 	.word	0xe000ed00
   11884:	0044ffaa 	.word	0x0044ffaa
   11888:	20022317 	.word	0x20022317
   1188c:	000343a8 	.word	0x000343a8
   11890:	000343f8 	.word	0x000343f8

00011894 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11894:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   11896:	4b0b      	ldr	r3, [pc, #44]	; (118c4 <malloc_prepare+0x30>)
   11898:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   1189c:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   118a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   118a4:	d20c      	bcs.n	118c0 <malloc_prepare+0x2c>
   118a6:	4908      	ldr	r1, [pc, #32]	; (118c8 <malloc_prepare+0x34>)
   118a8:	2381      	movs	r3, #129	; 0x81
   118aa:	4a08      	ldr	r2, [pc, #32]	; (118cc <malloc_prepare+0x38>)
   118ac:	4808      	ldr	r0, [pc, #32]	; (118d0 <malloc_prepare+0x3c>)
   118ae:	f018 ff04 	bl	2a6ba <assert_print>
   118b2:	4808      	ldr	r0, [pc, #32]	; (118d4 <malloc_prepare+0x40>)
   118b4:	f018 ff01 	bl	2a6ba <assert_print>
   118b8:	2181      	movs	r1, #129	; 0x81
   118ba:	4804      	ldr	r0, [pc, #16]	; (118cc <malloc_prepare+0x38>)
   118bc:	f018 fef6 	bl	2a6ac <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   118c0:	2000      	movs	r0, #0
   118c2:	bd08      	pop	{r3, pc}
   118c4:	200385c0 	.word	0x200385c0
   118c8:	00034449 	.word	0x00034449
   118cc:	00034419 	.word	0x00034419
   118d0:	00032659 	.word	0x00032659
   118d4:	00034490 	.word	0x00034490

000118d8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   118d8:	4b01      	ldr	r3, [pc, #4]	; (118e0 <__stdout_hook_install+0x8>)
   118da:	6018      	str	r0, [r3, #0]
}
   118dc:	4770      	bx	lr
   118de:	bf00      	nop
   118e0:	20008474 	.word	0x20008474

000118e4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   118e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118e6:	4606      	mov	r6, r0
   118e8:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   118ea:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   118ec:	4f06      	ldr	r7, [pc, #24]	; (11908 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   118ee:	42ac      	cmp	r4, r5
   118f0:	da08      	bge.n	11904 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   118f2:	683b      	ldr	r3, [r7, #0]
   118f4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   118f6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   118f8:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   118fa:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   118fe:	d001      	beq.n	11904 <z_impl_zephyr_read_stdin+0x20>
   11900:	280d      	cmp	r0, #13
   11902:	d1f4      	bne.n	118ee <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   11904:	4620      	mov	r0, r4
   11906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11908:	20008470 	.word	0x20008470

0001190c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1190e:	460d      	mov	r5, r1
   11910:	4f09      	ldr	r7, [pc, #36]	; (11938 <z_impl_zephyr_write_stdout+0x2c>)
   11912:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11914:	f1c0 0401 	rsb	r4, r0, #1
   11918:	19a3      	adds	r3, r4, r6
   1191a:	429d      	cmp	r5, r3
   1191c:	dc01      	bgt.n	11922 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1191e:	4628      	mov	r0, r5
   11920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11922:	7873      	ldrb	r3, [r6, #1]
   11924:	2b0a      	cmp	r3, #10
   11926:	d102      	bne.n	1192e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11928:	200d      	movs	r0, #13
   1192a:	683b      	ldr	r3, [r7, #0]
   1192c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1192e:	683b      	ldr	r3, [r7, #0]
   11930:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11934:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11936:	e7ef      	b.n	11918 <z_impl_zephyr_write_stdout+0xc>
   11938:	20008474 	.word	0x20008474

0001193c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1193c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1193e:	2105      	movs	r1, #5
   11940:	4801      	ldr	r0, [pc, #4]	; (11948 <_exit+0xc>)
   11942:	f7ff ffe3 	bl	1190c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11946:	e7fe      	b.n	11946 <_exit+0xa>
   11948:	00034517 	.word	0x00034517

0001194c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1194c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1194e:	4c07      	ldr	r4, [pc, #28]	; (1196c <_sbrk+0x20>)
   11950:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11952:	18c2      	adds	r2, r0, r3
   11954:	4806      	ldr	r0, [pc, #24]	; (11970 <_sbrk+0x24>)
   11956:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1195a:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   1195e:	428a      	cmp	r2, r1
		heap_sz += count;
   11960:	bf36      	itet	cc
   11962:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11964:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11968:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   1196a:	bd10      	pop	{r4, pc}
   1196c:	20021548 	.word	0x20021548
   11970:	200385c0 	.word	0x200385c0

00011974 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   11974:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11976:	4604      	mov	r4, r0
   11978:	b958      	cbnz	r0, 11992 <__retarget_lock_init_recursive+0x1e>
   1197a:	4911      	ldr	r1, [pc, #68]	; (119c0 <__retarget_lock_init_recursive+0x4c>)
   1197c:	f240 137b 	movw	r3, #379	; 0x17b
   11980:	4a10      	ldr	r2, [pc, #64]	; (119c4 <__retarget_lock_init_recursive+0x50>)
   11982:	4811      	ldr	r0, [pc, #68]	; (119c8 <__retarget_lock_init_recursive+0x54>)
   11984:	f018 fe99 	bl	2a6ba <assert_print>
   11988:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   1198c:	480d      	ldr	r0, [pc, #52]	; (119c4 <__retarget_lock_init_recursive+0x50>)
   1198e:	f018 fe8d 	bl	2a6ac <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   11992:	2014      	movs	r0, #20
   11994:	f016 fe8e 	bl	286b4 <malloc>
   11998:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   1199a:	b960      	cbnz	r0, 119b6 <__retarget_lock_init_recursive+0x42>
   1199c:	490b      	ldr	r1, [pc, #44]	; (119cc <__retarget_lock_init_recursive+0x58>)
   1199e:	f240 1383 	movw	r3, #387	; 0x183
   119a2:	4a08      	ldr	r2, [pc, #32]	; (119c4 <__retarget_lock_init_recursive+0x50>)
   119a4:	4808      	ldr	r0, [pc, #32]	; (119c8 <__retarget_lock_init_recursive+0x54>)
   119a6:	f018 fe88 	bl	2a6ba <assert_print>
   119aa:	4809      	ldr	r0, [pc, #36]	; (119d0 <__retarget_lock_init_recursive+0x5c>)
   119ac:	f018 fe85 	bl	2a6ba <assert_print>
   119b0:	f240 1183 	movw	r1, #387	; 0x183
   119b4:	e7ea      	b.n	1198c <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   119b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   119ba:	f01e bbe1 	b.w	30180 <z_impl_k_mutex_init>
   119be:	bf00      	nop
   119c0:	0003451e 	.word	0x0003451e
   119c4:	00034419 	.word	0x00034419
   119c8:	00032659 	.word	0x00032659
   119cc:	0003451d 	.word	0x0003451d
   119d0:	00034559 	.word	0x00034559

000119d4 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   119d4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   119d6:	b958      	cbnz	r0, 119f0 <__retarget_lock_acquire_recursive+0x1c>
   119d8:	4909      	ldr	r1, [pc, #36]	; (11a00 <__retarget_lock_acquire_recursive+0x2c>)
   119da:	480a      	ldr	r0, [pc, #40]	; (11a04 <__retarget_lock_acquire_recursive+0x30>)
   119dc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   119e0:	4a09      	ldr	r2, [pc, #36]	; (11a08 <__retarget_lock_acquire_recursive+0x34>)
   119e2:	f018 fe6a 	bl	2a6ba <assert_print>
   119e6:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   119ea:	4807      	ldr	r0, [pc, #28]	; (11a08 <__retarget_lock_acquire_recursive+0x34>)
   119ec:	f018 fe5e 	bl	2a6ac <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   119f0:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   119f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   119f8:	f04f 33ff 	mov.w	r3, #4294967295
   119fc:	f013 bb82 	b.w	25104 <z_impl_k_mutex_lock>
   11a00:	0003451e 	.word	0x0003451e
   11a04:	00032659 	.word	0x00032659
   11a08:	00034419 	.word	0x00034419

00011a0c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   11a0c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11a0e:	b958      	cbnz	r0, 11a28 <__retarget_lock_release_recursive+0x1c>
   11a10:	4907      	ldr	r1, [pc, #28]	; (11a30 <__retarget_lock_release_recursive+0x24>)
   11a12:	4808      	ldr	r0, [pc, #32]	; (11a34 <__retarget_lock_release_recursive+0x28>)
   11a14:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   11a18:	4a07      	ldr	r2, [pc, #28]	; (11a38 <__retarget_lock_release_recursive+0x2c>)
   11a1a:	f018 fe4e 	bl	2a6ba <assert_print>
   11a1e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   11a22:	4805      	ldr	r0, [pc, #20]	; (11a38 <__retarget_lock_release_recursive+0x2c>)
   11a24:	f018 fe42 	bl	2a6ac <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   11a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   11a2c:	f013 bc3a 	b.w	252a4 <z_impl_k_mutex_unlock>
   11a30:	0003451e 	.word	0x0003451e
   11a34:	00032659 	.word	0x00032659
   11a38:	00034419 	.word	0x00034419

00011a3c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11a3c:	b508      	push	{r3, lr}
   11a3e:	211d      	movs	r1, #29
   11a40:	4804      	ldr	r0, [pc, #16]	; (11a54 <__chk_fail+0x18>)
   11a42:	f7ff ff63 	bl	1190c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11a46:	4040      	eors	r0, r0
   11a48:	f380 8811 	msr	BASEPRI, r0
   11a4c:	f04f 0003 	mov.w	r0, #3
   11a50:	df02      	svc	2
	CODE_UNREACHABLE;
   11a52:	bf00      	nop
   11a54:	0003457c 	.word	0x0003457c

00011a58 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   11a58:	2000      	movs	r0, #0
   11a5a:	4b02      	ldr	r3, [pc, #8]	; (11a64 <remoteproc_mgr_boot+0xc>)
   11a5c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11a60:	4770      	bx	lr
   11a62:	bf00      	nop
   11a64:	40005000 	.word	0x40005000

00011a68 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11a68:	4b0e      	ldr	r3, [pc, #56]	; (11aa4 <bt_hex+0x3c>)
   11a6a:	2940      	cmp	r1, #64	; 0x40
   11a6c:	bf28      	it	cs
   11a6e:	2140      	movcs	r1, #64	; 0x40
{
   11a70:	b570      	push	{r4, r5, r6, lr}
   11a72:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   11a74:	4c0c      	ldr	r4, [pc, #48]	; (11aa8 <bt_hex+0x40>)
   11a76:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   11a78:	42b0      	cmp	r0, r6
   11a7a:	f103 0302 	add.w	r3, r3, #2
   11a7e:	d104      	bne.n	11a8a <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11a80:	2300      	movs	r3, #0
   11a82:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   11a86:	4807      	ldr	r0, [pc, #28]	; (11aa4 <bt_hex+0x3c>)
   11a88:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   11a8a:	7802      	ldrb	r2, [r0, #0]
   11a8c:	0912      	lsrs	r2, r2, #4
   11a8e:	5ca2      	ldrb	r2, [r4, r2]
   11a90:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11a94:	f810 2b01 	ldrb.w	r2, [r0], #1
   11a98:	f002 020f 	and.w	r2, r2, #15
   11a9c:	5ca2      	ldrb	r2, [r4, r2]
   11a9e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   11aa2:	e7e9      	b.n	11a78 <bt_hex+0x10>
   11aa4:	20022336 	.word	0x20022336
   11aa8:	000345dc 	.word	0x000345dc

00011aac <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   11aac:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   11aae:	7803      	ldrb	r3, [r0, #0]
   11ab0:	b08b      	sub	sp, #44	; 0x2c
   11ab2:	4604      	mov	r4, r0
   11ab4:	ad07      	add	r5, sp, #28
   11ab6:	2b03      	cmp	r3, #3
   11ab8:	d821      	bhi.n	11afe <bt_addr_le_str+0x52>
   11aba:	e8df f003 	tbb	[pc, r3]
   11abe:	1a02      	.short	0x1a02
   11ac0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   11ac2:	4912      	ldr	r1, [pc, #72]	; (11b0c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   11ac4:	4628      	mov	r0, r5
   11ac6:	f01e fec1 	bl	3084c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11aca:	9505      	str	r5, [sp, #20]
   11acc:	7863      	ldrb	r3, [r4, #1]
   11ace:	211e      	movs	r1, #30
   11ad0:	9304      	str	r3, [sp, #16]
   11ad2:	78a3      	ldrb	r3, [r4, #2]
   11ad4:	4a0e      	ldr	r2, [pc, #56]	; (11b10 <bt_addr_le_str+0x64>)
   11ad6:	9303      	str	r3, [sp, #12]
   11ad8:	78e3      	ldrb	r3, [r4, #3]
   11ada:	480e      	ldr	r0, [pc, #56]	; (11b14 <bt_addr_le_str+0x68>)
   11adc:	9302      	str	r3, [sp, #8]
   11ade:	7923      	ldrb	r3, [r4, #4]
   11ae0:	9301      	str	r3, [sp, #4]
   11ae2:	7963      	ldrb	r3, [r4, #5]
   11ae4:	9300      	str	r3, [sp, #0]
   11ae6:	79a3      	ldrb	r3, [r4, #6]
   11ae8:	f018 fc32 	bl	2a350 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   11aec:	4809      	ldr	r0, [pc, #36]	; (11b14 <bt_addr_le_str+0x68>)
   11aee:	b00b      	add	sp, #44	; 0x2c
   11af0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   11af2:	4909      	ldr	r1, [pc, #36]	; (11b18 <bt_addr_le_str+0x6c>)
   11af4:	e7e6      	b.n	11ac4 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   11af6:	4909      	ldr	r1, [pc, #36]	; (11b1c <bt_addr_le_str+0x70>)
   11af8:	e7e4      	b.n	11ac4 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   11afa:	4909      	ldr	r1, [pc, #36]	; (11b20 <bt_addr_le_str+0x74>)
   11afc:	e7e2      	b.n	11ac4 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11afe:	210a      	movs	r1, #10
   11b00:	4628      	mov	r0, r5
   11b02:	4a08      	ldr	r2, [pc, #32]	; (11b24 <bt_addr_le_str+0x78>)
   11b04:	f018 fc24 	bl	2a350 <snprintk>
		break;
   11b08:	e7df      	b.n	11aca <bt_addr_le_str+0x1e>
   11b0a:	bf00      	nop
   11b0c:	0003272d 	.word	0x0003272d
   11b10:	0003274f 	.word	0x0003274f
   11b14:	20022318 	.word	0x20022318
   11b18:	00032734 	.word	0x00032734
   11b1c:	0003273b 	.word	0x0003273b
   11b20:	00032745 	.word	0x00032745
   11b24:	00036234 	.word	0x00036234

00011b28 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   11b28:	b590      	push	{r4, r7, lr}
   11b2a:	b087      	sub	sp, #28
	int err;
	LOG_INF("Saving ID");
   11b2c:	466c      	mov	r4, sp
{
   11b2e:	af00      	add	r7, sp, #0
	LOG_INF("Saving ID");
   11b30:	4b12      	ldr	r3, [pc, #72]	; (11b7c <save_id+0x54>)
   11b32:	617b      	str	r3, [r7, #20]
   11b34:	2302      	movs	r3, #2
   11b36:	613b      	str	r3, [r7, #16]
   11b38:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11b3c:	4810      	ldr	r0, [pc, #64]	; (11b80 <save_id+0x58>)
   11b3e:	f107 0210 	add.w	r2, r7, #16
   11b42:	2300      	movs	r3, #0
   11b44:	f7fc fea4 	bl	e890 <z_impl_z_log_msg_static_create>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   11b48:	490e      	ldr	r1, [pc, #56]	; (11b84 <save_id+0x5c>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   11b4a:	480f      	ldr	r0, [pc, #60]	; (11b88 <save_id+0x60>)
   11b4c:	79ca      	ldrb	r2, [r1, #7]
   11b4e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   11b52:	f7fe f937 	bl	fdc4 <settings_save_one>
	if (err) {
   11b56:	b170      	cbz	r0, 11b76 <save_id+0x4e>
		LOG_ERR("Failed to save ID (err %d)", err);
   11b58:	b088      	sub	sp, #32
   11b5a:	466a      	mov	r2, sp
   11b5c:	4b0b      	ldr	r3, [pc, #44]	; (11b8c <save_id+0x64>)
   11b5e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11b62:	2303      	movs	r3, #3
   11b64:	f842 3f10 	str.w	r3, [r2, #16]!
   11b68:	2300      	movs	r3, #0
   11b6a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b6e:	4804      	ldr	r0, [pc, #16]	; (11b80 <save_id+0x58>)
   11b70:	f7fc fe8e 	bl	e890 <z_impl_z_log_msg_static_create>
   11b74:	46a5      	mov	sp, r4
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   11b76:	371c      	adds	r7, #28
   11b78:	46bd      	mov	sp, r7
   11b7a:	bd90      	pop	{r4, r7, pc}
   11b7c:	000345f4 	.word	0x000345f4
   11b80:	0003151c 	.word	0x0003151c
   11b84:	20008000 	.word	0x20008000
   11b88:	000345fe 	.word	0x000345fe
   11b8c:	00034604 	.word	0x00034604

00011b90 <set_setting>:
{
   11b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b94:	4604      	mov	r4, r0
   11b96:	4617      	mov	r7, r2
   11b98:	4698      	mov	r8, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11b9a:	4e29      	ldr	r6, [pc, #164]	; (11c40 <set_setting+0xb0>)
   11b9c:	b088      	sub	sp, #32
   11b9e:	e8d6 3faf 	lda	r3, [r6]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11ba2:	07d9      	lsls	r1, r3, #31
   11ba4:	d529      	bpl.n	11bfa <set_setting+0x6a>
	if (!name) {
   11ba6:	b968      	cbnz	r0, 11bc4 <set_setting+0x34>
		LOG_ERR("Insufficient number of arguments");
   11ba8:	4b26      	ldr	r3, [pc, #152]	; (11c44 <set_setting+0xb4>)
   11baa:	9307      	str	r3, [sp, #28]
   11bac:	2302      	movs	r3, #2
   11bae:	9306      	str	r3, [sp, #24]
   11bb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11bb4:	4603      	mov	r3, r0
   11bb6:	aa06      	add	r2, sp, #24
   11bb8:	4823      	ldr	r0, [pc, #140]	; (11c48 <set_setting+0xb8>)
   11bba:	f7fc fe69 	bl	e890 <z_impl_z_log_msg_static_create>
		return -ENOENT;
   11bbe:	f06f 0001 	mvn.w	r0, #1
   11bc2:	e01b      	b.n	11bfc <set_setting+0x6c>
	len = settings_name_next(name, &next);
   11bc4:	a901      	add	r1, sp, #4
   11bc6:	f019 fb9a 	bl	2b2fe <settings_name_next>
	if (!strncmp(name, "id", len)) {
   11bca:	4920      	ldr	r1, [pc, #128]	; (11c4c <set_setting+0xbc>)
	len = settings_name_next(name, &next);
   11bcc:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   11bce:	4620      	mov	r0, r4
   11bd0:	f01e fe55 	bl	3087e <strncmp>
   11bd4:	4603      	mov	r3, r0
   11bd6:	2800      	cmp	r0, #0
   11bd8:	d1f1      	bne.n	11bbe <set_setting+0x2e>
   11bda:	e8d6 2faf 	lda	r2, [r6]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   11bde:	f3c2 05c0 	ubfx	r5, r2, #3, #1
   11be2:	0712      	lsls	r2, r2, #28
   11be4:	d50d      	bpl.n	11c02 <set_setting+0x72>
			LOG_WRN("Ignoring identities stored in flash");
   11be6:	4a1a      	ldr	r2, [pc, #104]	; (11c50 <set_setting+0xc0>)
   11be8:	9207      	str	r2, [sp, #28]
   11bea:	2202      	movs	r2, #2
   11bec:	9206      	str	r2, [sp, #24]
   11bee:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11bf2:	4815      	ldr	r0, [pc, #84]	; (11c48 <set_setting+0xb8>)
   11bf4:	aa06      	add	r2, sp, #24
   11bf6:	f7fc fe4b 	bl	e890 <z_impl_z_log_msg_static_create>
		return 0;
   11bfa:	2000      	movs	r0, #0
}
   11bfc:	b008      	add	sp, #32
   11bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   11c02:	f1a6 04cc 	sub.w	r4, r6, #204	; 0xcc
   11c06:	2207      	movs	r2, #7
   11c08:	4621      	mov	r1, r4
   11c0a:	4640      	mov	r0, r8
   11c0c:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   11c0e:	2806      	cmp	r0, #6
   11c10:	d810      	bhi.n	11c34 <set_setting+0xa4>
				LOG_ERR("Invalid length ID address in storage");
   11c12:	4b10      	ldr	r3, [pc, #64]	; (11c54 <set_setting+0xc4>)
   11c14:	9307      	str	r3, [sp, #28]
   11c16:	2302      	movs	r3, #2
   11c18:	9306      	str	r3, [sp, #24]
   11c1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11c1e:	462b      	mov	r3, r5
   11c20:	4809      	ldr	r0, [pc, #36]	; (11c48 <set_setting+0xb8>)
   11c22:	aa06      	add	r2, sp, #24
   11c24:	f7fc fe34 	bl	e890 <z_impl_z_log_msg_static_create>
			(void)memset(bt_dev.id_addr, 0,
   11c28:	f846 5ccc 	str.w	r5, [r6, #-204]
			bt_dev.id_count = 0U;
   11c2c:	71e5      	strb	r5, [r4, #7]
			(void)memset(bt_dev.id_addr, 0,
   11c2e:	f8c4 5003 	str.w	r5, [r4, #3]
			bt_dev.id_count = 0U;
   11c32:	e7e2      	b.n	11bfa <set_setting+0x6a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   11c34:	2307      	movs	r3, #7
   11c36:	fbb0 f0f3 	udiv	r0, r0, r3
   11c3a:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   11c3c:	e7dd      	b.n	11bfa <set_setting+0x6a>
   11c3e:	bf00      	nop
   11c40:	200080cc 	.word	0x200080cc
   11c44:	0003461f 	.word	0x0003461f
   11c48:	0003151c 	.word	0x0003151c
   11c4c:	00032742 	.word	0x00032742
   11c50:	00034640 	.word	0x00034640
   11c54:	00034664 	.word	0x00034664

00011c58 <bt_settings_encode_key>:
{
   11c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c5c:	b088      	sub	sp, #32
   11c5e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   11c62:	799c      	ldrb	r4, [r3, #6]
   11c64:	795d      	ldrb	r5, [r3, #5]
   11c66:	791e      	ldrb	r6, [r3, #4]
   11c68:	78df      	ldrb	r7, [r3, #3]
   11c6a:	f893 c002 	ldrb.w	ip, [r3, #2]
   11c6e:	f893 e001 	ldrb.w	lr, [r3, #1]
   11c72:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   11c74:	f1b8 0f00 	cmp.w	r8, #0
   11c78:	d00e      	beq.n	11c98 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   11c7a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   11c7e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   11c82:	4613      	mov	r3, r2
   11c84:	e9cd 6702 	strd	r6, r7, [sp, #8]
   11c88:	e9cd 4500 	strd	r4, r5, [sp]
   11c8c:	4a08      	ldr	r2, [pc, #32]	; (11cb0 <bt_settings_encode_key+0x58>)
   11c8e:	f018 fb5f 	bl	2a350 <snprintk>
}
   11c92:	b008      	add	sp, #32
   11c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   11c98:	e9cd e305 	strd	lr, r3, [sp, #20]
   11c9c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   11ca0:	4613      	mov	r3, r2
   11ca2:	e9cd 5601 	strd	r5, r6, [sp, #4]
   11ca6:	4a03      	ldr	r2, [pc, #12]	; (11cb4 <bt_settings_encode_key+0x5c>)
   11ca8:	9400      	str	r4, [sp, #0]
   11caa:	f018 fb51 	bl	2a350 <snprintk>
}
   11cae:	e7f0      	b.n	11c92 <bt_settings_encode_key+0x3a>
   11cb0:	00034689 	.word	0x00034689
   11cb4:	000346ad 	.word	0x000346ad

00011cb8 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   11cb8:	4801      	ldr	r0, [pc, #4]	; (11cc0 <bt_settings_save_id+0x8>)
   11cba:	f013 bff3 	b.w	25ca4 <k_work_submit>
   11cbe:	bf00      	nop
   11cc0:	20008478 	.word	0x20008478

00011cc4 <commit_settings>:
}

static int commit_settings(void)
{
   11cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cc8:	4d1d      	ldr	r5, [pc, #116]	; (11d40 <commit_settings+0x7c>)
   11cca:	b086      	sub	sp, #24
   11ccc:	e8d5 3faf 	lda	r3, [r5]
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11cd0:	f013 0f01 	tst.w	r3, #1
   11cd4:	462f      	mov	r7, r5
   11cd6:	d031      	beq.n	11d3c <commit_settings+0x78>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   11cd8:	f815 6cc5 	ldrb.w	r6, [r5, #-197]
   11cdc:	f1a5 08cc 	sub.w	r8, r5, #204	; 0xcc
   11ce0:	b9d6      	cbnz	r6, 11d18 <commit_settings+0x54>
		err = bt_setup_public_id_addr();
   11ce2:	f001 ffc5 	bl	13c70 <bt_setup_public_id_addr>
		if (err) {
   11ce6:	4604      	mov	r4, r0
   11ce8:	b170      	cbz	r0, 11d08 <commit_settings+0x44>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   11cea:	4b16      	ldr	r3, [pc, #88]	; (11d44 <commit_settings+0x80>)
   11cec:	9305      	str	r3, [sp, #20]
   11cee:	2302      	movs	r3, #2
   11cf0:	9304      	str	r3, [sp, #16]
   11cf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11cf6:	4633      	mov	r3, r6
   11cf8:	4813      	ldr	r0, [pc, #76]	; (11d48 <commit_settings+0x84>)
   11cfa:	aa04      	add	r2, sp, #16
   11cfc:	f7fc fdc8 	bl	e890 <z_impl_z_log_msg_static_create>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   11d00:	4620      	mov	r0, r4
   11d02:	b006      	add	sp, #24
   11d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_dev.id_count) {
   11d08:	f898 6007 	ldrb.w	r6, [r8, #7]
   11d0c:	b926      	cbnz	r6, 11d18 <commit_settings+0x54>
		err = bt_setup_random_id_addr();
   11d0e:	f002 f813 	bl	13d38 <bt_setup_random_id_addr>
		if (err) {
   11d12:	4604      	mov	r4, r0
   11d14:	2800      	cmp	r0, #0
   11d16:	d1e8      	bne.n	11cea <commit_settings+0x26>
   11d18:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11d1c:	075a      	lsls	r2, r3, #29
   11d1e:	d401      	bmi.n	11d24 <commit_settings+0x60>
		bt_finalize_init();
   11d20:	f001 fbae 	bl	13480 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11d24:	e8d7 3fef 	ldaex	r3, [r7]
   11d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   11d2c:	e8c7 2fe1 	stlex	r1, r2, [r7]
   11d30:	2900      	cmp	r1, #0
   11d32:	d1f7      	bne.n	11d24 <commit_settings+0x60>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   11d34:	03db      	lsls	r3, r3, #15
   11d36:	d501      	bpl.n	11d3c <commit_settings+0x78>
		bt_settings_save_id();
   11d38:	f7ff ffbe 	bl	11cb8 <bt_settings_save_id>
		return 0;
   11d3c:	2400      	movs	r4, #0
   11d3e:	e7df      	b.n	11d00 <commit_settings+0x3c>
   11d40:	200080cc 	.word	0x200080cc
   11d44:	000346ce 	.word	0x000346ce
   11d48:	0003151c 	.word	0x0003151c

00011d4c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   11d4c:	b5b0      	push	{r4, r5, r7, lr}
   11d4e:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   11d50:	f7fe f9ca 	bl	100e8 <settings_subsys_init>
	if (err) {
   11d54:	4604      	mov	r4, r0
   11d56:	b178      	cbz	r0, 11d78 <bt_settings_init+0x2c>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   11d58:	466d      	mov	r5, sp
   11d5a:	b088      	sub	sp, #32
   11d5c:	466a      	mov	r2, sp
   11d5e:	4b08      	ldr	r3, [pc, #32]	; (11d80 <bt_settings_init+0x34>)
   11d60:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11d64:	2303      	movs	r3, #3
   11d66:	f842 3f10 	str.w	r3, [r2, #16]!
   11d6a:	2300      	movs	r3, #0
   11d6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11d70:	4804      	ldr	r0, [pc, #16]	; (11d84 <bt_settings_init+0x38>)
   11d72:	f7fc fd8d 	bl	e890 <z_impl_z_log_msg_static_create>
   11d76:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   11d78:	4620      	mov	r0, r4
   11d7a:	46bd      	mov	sp, r7
   11d7c:	bdb0      	pop	{r4, r5, r7, pc}
   11d7e:	bf00      	nop
   11d80:	000346f2 	.word	0x000346f2
   11d84:	0003151c 	.word	0x0003151c

00011d88 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   11d88:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11d8a:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   11d8c:	4d09      	ldr	r5, [pc, #36]	; (11db4 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11d8e:	4b0a      	ldr	r3, [pc, #40]	; (11db8 <long_wq_init+0x30>)
{
   11d90:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   11d92:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11d94:	9302      	str	r3, [sp, #8]
   11d96:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   11d98:	f013 ff8a 	bl	25cb0 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   11d9c:	ab02      	add	r3, sp, #8
   11d9e:	4628      	mov	r0, r5
   11da0:	9300      	str	r3, [sp, #0]
   11da2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   11da6:	230a      	movs	r3, #10
   11da8:	4904      	ldr	r1, [pc, #16]	; (11dbc <long_wq_init+0x34>)
   11daa:	f013 ff9b 	bl	25ce4 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   11dae:	4620      	mov	r0, r4
   11db0:	b005      	add	sp, #20
   11db2:	bd30      	pop	{r4, r5, pc}
   11db4:	20009a98 	.word	0x20009a98
   11db8:	00034726 	.word	0x00034726
   11dbc:	20032288 	.word	0x20032288

00011dc0 <bt_long_wq_schedule>:
{
   11dc0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   11dc2:	4801      	ldr	r0, [pc, #4]	; (11dc8 <bt_long_wq_schedule+0x8>)
   11dc4:	f014 b8b0 	b.w	25f28 <k_work_schedule_for_queue>
   11dc8:	20009a98 	.word	0x20009a98

00011dcc <bt_long_wq_reschedule>:
{
   11dcc:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   11dce:	4801      	ldr	r0, [pc, #4]	; (11dd4 <bt_long_wq_reschedule+0x8>)
   11dd0:	f014 b926 	b.w	26020 <k_work_reschedule_for_queue>
   11dd4:	20009a98 	.word	0x20009a98

00011dd8 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   11dd8:	7803      	ldrb	r3, [r0, #0]
{
   11dda:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   11ddc:	2b01      	cmp	r3, #1
   11dde:	d013      	beq.n	11e08 <uuid_to_uuid128+0x30>
   11de0:	2b02      	cmp	r3, #2
   11de2:	d027      	beq.n	11e34 <uuid_to_uuid128+0x5c>
   11de4:	b97b      	cbnz	r3, 11e06 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11de6:	460a      	mov	r2, r1
   11de8:	4b18      	ldr	r3, [pc, #96]	; (11e4c <uuid_to_uuid128+0x74>)
   11dea:	f103 0410 	add.w	r4, r3, #16
   11dee:	f853 5b04 	ldr.w	r5, [r3], #4
   11df2:	42a3      	cmp	r3, r4
   11df4:	f842 5b04 	str.w	r5, [r2], #4
   11df8:	d1f9      	bne.n	11dee <uuid_to_uuid128+0x16>
   11dfa:	781b      	ldrb	r3, [r3, #0]
   11dfc:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   11dfe:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   11e00:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   11e02:	0a1b      	lsrs	r3, r3, #8
   11e04:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11e06:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   11e08:	460a      	mov	r2, r1
   11e0a:	4b10      	ldr	r3, [pc, #64]	; (11e4c <uuid_to_uuid128+0x74>)
   11e0c:	f103 0410 	add.w	r4, r3, #16
   11e10:	f853 5b04 	ldr.w	r5, [r3], #4
   11e14:	42a3      	cmp	r3, r4
   11e16:	f842 5b04 	str.w	r5, [r2], #4
   11e1a:	d1f9      	bne.n	11e10 <uuid_to_uuid128+0x38>
   11e1c:	781b      	ldrb	r3, [r3, #0]
   11e1e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   11e20:	6843      	ldr	r3, [r0, #4]
   11e22:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   11e26:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   11e28:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   11e2a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   11e2c:	0a1b      	lsrs	r3, r3, #8
   11e2e:	738a      	strb	r2, [r1, #14]
   11e30:	740b      	strb	r3, [r1, #16]
}
   11e32:	e7e8      	b.n	11e06 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11e34:	f100 0310 	add.w	r3, r0, #16
   11e38:	f850 2b04 	ldr.w	r2, [r0], #4
   11e3c:	4298      	cmp	r0, r3
   11e3e:	f841 2b04 	str.w	r2, [r1], #4
   11e42:	d1f9      	bne.n	11e38 <uuid_to_uuid128+0x60>
   11e44:	7803      	ldrb	r3, [r0, #0]
   11e46:	700b      	strb	r3, [r1, #0]
   11e48:	e7dd      	b.n	11e06 <uuid_to_uuid128+0x2e>
   11e4a:	bf00      	nop
   11e4c:	0003472f 	.word	0x0003472f

00011e50 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11e50:	b538      	push	{r3, r4, r5, lr}
   11e52:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11e54:	2d01      	cmp	r5, #1
{
   11e56:	4610      	mov	r0, r2
   11e58:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11e5a:	d010      	beq.n	11e7e <bt_buf_get_rx+0x2e>
   11e5c:	2d03      	cmp	r5, #3
   11e5e:	d01a      	beq.n	11e96 <bt_buf_get_rx+0x46>
   11e60:	2d05      	cmp	r5, #5
   11e62:	d018      	beq.n	11e96 <bt_buf_get_rx+0x46>
   11e64:	490e      	ldr	r1, [pc, #56]	; (11ea0 <bt_buf_get_rx+0x50>)
   11e66:	233d      	movs	r3, #61	; 0x3d
   11e68:	4a0e      	ldr	r2, [pc, #56]	; (11ea4 <bt_buf_get_rx+0x54>)
   11e6a:	480f      	ldr	r0, [pc, #60]	; (11ea8 <bt_buf_get_rx+0x58>)
   11e6c:	f018 fc25 	bl	2a6ba <assert_print>
   11e70:	480e      	ldr	r0, [pc, #56]	; (11eac <bt_buf_get_rx+0x5c>)
   11e72:	f018 fc22 	bl	2a6ba <assert_print>
   11e76:	213d      	movs	r1, #61	; 0x3d
   11e78:	480a      	ldr	r0, [pc, #40]	; (11ea4 <bt_buf_get_rx+0x54>)
   11e7a:	f018 fc17 	bl	2a6ac <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11e7e:	480c      	ldr	r0, [pc, #48]	; (11eb0 <bt_buf_get_rx+0x60>)
   11e80:	f01c f8a7 	bl	2dfd2 <net_buf_alloc_fixed>
   11e84:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11e86:	b120      	cbz	r0, 11e92 <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   11e88:	2101      	movs	r1, #1
   11e8a:	300c      	adds	r0, #12
   11e8c:	f009 fa6a 	bl	1b364 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11e90:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11e92:	4620      	mov	r0, r4
   11e94:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11e96:	4602      	mov	r2, r0
   11e98:	460b      	mov	r3, r1
   11e9a:	4806      	ldr	r0, [pc, #24]	; (11eb4 <bt_buf_get_rx+0x64>)
   11e9c:	e7f0      	b.n	11e80 <bt_buf_get_rx+0x30>
   11e9e:	bf00      	nop
   11ea0:	0003476f 	.word	0x0003476f
   11ea4:	00034740 	.word	0x00034740
   11ea8:	00032659 	.word	0x00032659
   11eac:	000347b4 	.word	0x000347b4
   11eb0:	20008d70 	.word	0x20008d70
   11eb4:	20008cd4 	.word	0x20008cd4

00011eb8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11eb8:	b510      	push	{r4, lr}
   11eba:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   11ebc:	490a      	ldr	r1, [pc, #40]	; (11ee8 <bt_buf_get_cmd_complete+0x30>)
{
   11ebe:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11ec0:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   11ec4:	b920      	cbnz	r0, 11ed0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11eca:	2001      	movs	r0, #1
   11ecc:	f7ff bfc0 	b.w	11e50 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11ed0:	f009 fb9e 	bl	1b610 <net_buf_ref>
   11ed4:	2101      	movs	r1, #1
		buf->len = 0U;
   11ed6:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   11ed8:	4604      	mov	r4, r0
   11eda:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   11edc:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   11ede:	300c      	adds	r0, #12
   11ee0:	f009 fa40 	bl	1b364 <net_buf_simple_reserve>
}
   11ee4:	4620      	mov	r0, r4
   11ee6:	bd10      	pop	{r4, pc}
   11ee8:	20008000 	.word	0x20008000

00011eec <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11eec:	b570      	push	{r4, r5, r6, lr}
   11eee:	4604      	mov	r4, r0
	switch (evt) {
   11ef0:	2c0f      	cmp	r4, #15
{
   11ef2:	460d      	mov	r5, r1
   11ef4:	4610      	mov	r0, r2
   11ef6:	4619      	mov	r1, r3
	switch (evt) {
   11ef8:	d805      	bhi.n	11f06 <bt_buf_get_evt+0x1a>
   11efa:	2c0d      	cmp	r4, #13
   11efc:	d90d      	bls.n	11f1a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11f02:	f7ff bfd9 	b.w	11eb8 <bt_buf_get_cmd_complete>
	switch (evt) {
   11f06:	2c13      	cmp	r4, #19
   11f08:	d107      	bne.n	11f1a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   11f0a:	480c      	ldr	r0, [pc, #48]	; (11f3c <bt_buf_get_evt+0x50>)
   11f0c:	f01c f861 	bl	2dfd2 <net_buf_alloc_fixed>
			if (buf) {
   11f10:	4604      	mov	r4, r0
   11f12:	b938      	cbnz	r0, 11f24 <bt_buf_get_evt+0x38>
{
   11f14:	2400      	movs	r4, #0
}
   11f16:	4620      	mov	r0, r4
   11f18:	bd70      	pop	{r4, r5, r6, pc}
   11f1a:	4602      	mov	r2, r0
   11f1c:	460b      	mov	r3, r1
		if (discardable) {
   11f1e:	b145      	cbz	r5, 11f32 <bt_buf_get_evt+0x46>
   11f20:	4807      	ldr	r0, [pc, #28]	; (11f40 <bt_buf_get_evt+0x54>)
   11f22:	e7f3      	b.n	11f0c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   11f24:	2101      	movs	r1, #1
   11f26:	300c      	adds	r0, #12
   11f28:	f009 fa1c 	bl	1b364 <net_buf_simple_reserve>
   11f2c:	2301      	movs	r3, #1
   11f2e:	7623      	strb	r3, [r4, #24]
}
   11f30:	e7f1      	b.n	11f16 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11f32:	2001      	movs	r0, #1
}
   11f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11f38:	f7ff bf8a 	b.w	11e50 <bt_buf_get_rx>
   11f3c:	20008e0c 	.word	0x20008e0c
   11f40:	20008d3c 	.word	0x20008d3c

00011f44 <hci_disconn_complete_prio>:
{
   11f44:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11f46:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11f48:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   11f4c:	781b      	ldrb	r3, [r3, #0]
   11f4e:	b963      	cbnz	r3, 11f6a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   11f50:	4620      	mov	r0, r4
   11f52:	f002 ffa7 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   11f56:	4605      	mov	r5, r0
   11f58:	b940      	cbnz	r0, 11f6c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11f5a:	4b08      	ldr	r3, [pc, #32]	; (11f7c <hci_disconn_complete_prio+0x38>)
   11f5c:	881a      	ldrh	r2, [r3, #0]
   11f5e:	b922      	cbnz	r2, 11f6a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   11f60:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11f64:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   11f68:	8018      	strh	r0, [r3, #0]
}
   11f6a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11f6c:	2101      	movs	r1, #1
   11f6e:	f002 ffa1 	bl	14eb4 <bt_conn_set_state>
	bt_conn_unref(conn);
   11f72:	4628      	mov	r0, r5
}
   11f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11f78:	f002 bf64 	b.w	14e44 <bt_conn_unref>
   11f7c:	20021b12 	.word	0x20021b12

00011f80 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11f80:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11f82:	4c08      	ldr	r4, [pc, #32]	; (11fa4 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11f84:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11f86:	2205      	movs	r2, #5
   11f88:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11f8c:	f003 fa80 	bl	15490 <bt_conn_lookup_state_le>
		if (!conn) {
   11f90:	b938      	cbnz	r0, 11fa2 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11f92:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11f96:	2204      	movs	r2, #4
}
   11f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11f9c:	4902      	ldr	r1, [pc, #8]	; (11fa8 <find_pending_connect.part.0+0x28>)
   11f9e:	f003 ba77 	b.w	15490 <bt_conn_lookup_state_le>
}
   11fa2:	bd10      	pop	{r4, pc}
   11fa4:	20008000 	.word	0x20008000
   11fa8:	000345c2 	.word	0x000345c2

00011fac <hci_data_buf_overflow>:
{
   11fac:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11fae:	68c3      	ldr	r3, [r0, #12]
{
   11fb0:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11fb2:	b088      	sub	sp, #32
   11fb4:	466a      	mov	r2, sp
   11fb6:	781b      	ldrb	r3, [r3, #0]
   11fb8:	4906      	ldr	r1, [pc, #24]	; (11fd4 <hci_data_buf_overflow+0x28>)
   11fba:	4807      	ldr	r0, [pc, #28]	; (11fd8 <hci_data_buf_overflow+0x2c>)
   11fbc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11fc0:	2303      	movs	r3, #3
   11fc2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11fc6:	f842 3f10 	str.w	r3, [r2, #16]!
   11fca:	f01a f800 	bl	2bfce <z_log_msg_static_create.constprop.0>
}
   11fce:	46bd      	mov	sp, r7
   11fd0:	bd80      	pop	{r7, pc}
   11fd2:	bf00      	nop
   11fd4:	000347d4 	.word	0x000347d4
   11fd8:	000314dc 	.word	0x000314dc

00011fdc <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   11fdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   11fde:	4b06      	ldr	r3, [pc, #24]	; (11ff8 <le_conn_param_neg_reply.part.0+0x1c>)
   11fe0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11fe4:	9305      	str	r3, [sp, #20]
   11fe6:	2302      	movs	r3, #2
   11fe8:	4804      	ldr	r0, [pc, #16]	; (11ffc <le_conn_param_neg_reply.part.0+0x20>)
   11fea:	aa04      	add	r2, sp, #16
   11fec:	9304      	str	r3, [sp, #16]
   11fee:	f019 ffee 	bl	2bfce <z_log_msg_static_create.constprop.0>
}
   11ff2:	b007      	add	sp, #28
   11ff4:	f85d fb04 	ldr.w	pc, [sp], #4
   11ff8:	000347fc 	.word	0x000347fc
   11ffc:	000314dc 	.word	0x000314dc

00012000 <rx_queue_put>:
{
   12000:	b598      	push	{r3, r4, r7, lr}
   12002:	4601      	mov	r1, r0
   12004:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   12006:	480d      	ldr	r0, [pc, #52]	; (1203c <rx_queue_put+0x3c>)
   12008:	f009 f9d2 	bl	1b3b0 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1200c:	490c      	ldr	r1, [pc, #48]	; (12040 <rx_queue_put+0x40>)
   1200e:	480d      	ldr	r0, [pc, #52]	; (12044 <rx_queue_put+0x44>)
   12010:	f01e f94e 	bl	302b0 <k_work_submit_to_queue>
	if (err < 0) {
   12014:	2800      	cmp	r0, #0
   12016:	da0e      	bge.n	12036 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   12018:	466c      	mov	r4, sp
   1201a:	b088      	sub	sp, #32
   1201c:	466a      	mov	r2, sp
   1201e:	4b0a      	ldr	r3, [pc, #40]	; (12048 <rx_queue_put+0x48>)
   12020:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12024:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12028:	2303      	movs	r3, #3
   1202a:	4808      	ldr	r0, [pc, #32]	; (1204c <rx_queue_put+0x4c>)
   1202c:	f842 3f10 	str.w	r3, [r2, #16]!
   12030:	f019 ffcd 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12034:	46a5      	mov	sp, r4
}
   12036:	46bd      	mov	sp, r7
   12038:	bd98      	pop	{r3, r4, r7, pc}
   1203a:	bf00      	nop
   1203c:	2000813c 	.word	0x2000813c
   12040:	200084c4 	.word	0x200084c4
   12044:	20009bc8 	.word	0x20009bc8
   12048:	00034816 	.word	0x00034816
   1204c:	000314dc 	.word	0x000314dc

00012050 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   12050:	460b      	mov	r3, r1
   12052:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   12054:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   12056:	af00      	add	r7, sp, #0
   12058:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1205a:	4629      	mov	r1, r5
   1205c:	68d8      	ldr	r0, [r3, #12]
   1205e:	f7ff fd03 	bl	11a68 <bt_hex>
   12062:	b08a      	sub	sp, #40	; 0x28
   12064:	466a      	mov	r2, sp
   12066:	4b09      	ldr	r3, [pc, #36]	; (1208c <handle_event.part.0+0x3c>)
   12068:	e9c2 5007 	strd	r5, r0, [r2, #28]
   1206c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12070:	f240 4302 	movw	r3, #1026	; 0x402
   12074:	8493      	strh	r3, [r2, #36]	; 0x24
   12076:	4b06      	ldr	r3, [pc, #24]	; (12090 <handle_event.part.0+0x40>)
   12078:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   1207c:	4805      	ldr	r0, [pc, #20]	; (12094 <handle_event.part.0+0x44>)
   1207e:	f842 3f10 	str.w	r3, [r2, #16]!
   12082:	f019 ffa4 	bl	2bfce <z_log_msg_static_create.constprop.0>
}
   12086:	46bd      	mov	sp, r7
   12088:	bdb0      	pop	{r4, r5, r7, pc}
   1208a:	bf00      	nop
   1208c:	00034833 	.word	0x00034833
   12090:	01000005 	.word	0x01000005
   12094:	000314dc 	.word	0x000314dc

00012098 <hci_hardware_error>:
{
   12098:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1209a:	2101      	movs	r1, #1
   1209c:	af00      	add	r7, sp, #0
   1209e:	300c      	adds	r0, #12
   120a0:	f009 fb76 	bl	1b790 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   120a4:	b088      	sub	sp, #32
   120a6:	466a      	mov	r2, sp
   120a8:	7803      	ldrb	r3, [r0, #0]
   120aa:	4906      	ldr	r1, [pc, #24]	; (120c4 <hci_hardware_error+0x2c>)
   120ac:	4806      	ldr	r0, [pc, #24]	; (120c8 <hci_hardware_error+0x30>)
   120ae:	e9c2 1305 	strd	r1, r3, [r2, #20]
   120b2:	2303      	movs	r3, #3
   120b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   120b8:	f842 3f10 	str.w	r3, [r2, #16]!
   120bc:	f019 ff87 	bl	2bfce <z_log_msg_static_create.constprop.0>
}
   120c0:	46bd      	mov	sp, r7
   120c2:	bd80      	pop	{r7, pc}
   120c4:	00034855 	.word	0x00034855
   120c8:	000314dc 	.word	0x000314dc

000120cc <le_data_len_change>:
{
   120cc:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120ce:	68c3      	ldr	r3, [r0, #12]
{
   120d0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120d2:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   120d4:	4620      	mov	r0, r4
   120d6:	f002 fee5 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   120da:	b980      	cbnz	r0, 120fe <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   120dc:	466d      	mov	r5, sp
   120de:	b088      	sub	sp, #32
   120e0:	466a      	mov	r2, sp
   120e2:	4b08      	ldr	r3, [pc, #32]	; (12104 <le_data_len_change+0x38>)
   120e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   120e8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   120ec:	2303      	movs	r3, #3
   120ee:	4806      	ldr	r0, [pc, #24]	; (12108 <le_data_len_change+0x3c>)
   120f0:	f842 3f10 	str.w	r3, [r2, #16]!
   120f4:	f019 ff6b 	bl	2bfce <z_log_msg_static_create.constprop.0>
   120f8:	46ad      	mov	sp, r5
}
   120fa:	46bd      	mov	sp, r7
   120fc:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   120fe:	f002 fea1 	bl	14e44 <bt_conn_unref>
   12102:	e7fa      	b.n	120fa <le_data_len_change+0x2e>
   12104:	00034877 	.word	0x00034877
   12108:	000314dc 	.word	0x000314dc

0001210c <le_phy_update_complete>:
{
   1210c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1210e:	68c3      	ldr	r3, [r0, #12]
{
   12110:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12112:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   12116:	4620      	mov	r0, r4
   12118:	f002 fec4 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   1211c:	b980      	cbnz	r0, 12140 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1211e:	466d      	mov	r5, sp
   12120:	b088      	sub	sp, #32
   12122:	466a      	mov	r2, sp
   12124:	4b08      	ldr	r3, [pc, #32]	; (12148 <le_phy_update_complete+0x3c>)
   12126:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1212a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1212e:	2303      	movs	r3, #3
   12130:	4806      	ldr	r0, [pc, #24]	; (1214c <le_phy_update_complete+0x40>)
   12132:	f842 3f10 	str.w	r3, [r2, #16]!
   12136:	f019 ff4a 	bl	2bfce <z_log_msg_static_create.constprop.0>
   1213a:	46ad      	mov	sp, r5
}
   1213c:	46bd      	mov	sp, r7
   1213e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   12140:	f002 fe80 	bl	14e44 <bt_conn_unref>
   12144:	e7fa      	b.n	1213c <le_phy_update_complete+0x30>
   12146:	bf00      	nop
   12148:	00034877 	.word	0x00034877
   1214c:	000314dc 	.word	0x000314dc

00012150 <hci_disconn_complete>:
{
   12150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12154:	68c5      	ldr	r5, [r0, #12]
{
   12156:	af00      	add	r7, sp, #0
	if (evt->status) {
   12158:	782e      	ldrb	r6, [r5, #0]
   1215a:	b9ae      	cbnz	r6, 12188 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1215c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12160:	4640      	mov	r0, r8
   12162:	f002 fe9f 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   12166:	4604      	mov	r4, r0
   12168:	b988      	cbnz	r0, 1218e <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1216a:	466c      	mov	r4, sp
   1216c:	b088      	sub	sp, #32
   1216e:	466a      	mov	r2, sp
   12170:	4b0b      	ldr	r3, [pc, #44]	; (121a0 <hci_disconn_complete+0x50>)
   12172:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12176:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1217a:	2303      	movs	r3, #3
   1217c:	4809      	ldr	r0, [pc, #36]	; (121a4 <hci_disconn_complete+0x54>)
   1217e:	f842 3f10 	str.w	r3, [r2, #16]!
   12182:	f019 ff24 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12186:	46a5      	mov	sp, r4
}
   12188:	46bd      	mov	sp, r7
   1218a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   1218e:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12190:	4631      	mov	r1, r6
	conn->err = evt->reason;
   12192:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12194:	f002 fe8e 	bl	14eb4 <bt_conn_set_state>
		bt_conn_unref(conn);
   12198:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   1219a:	f002 fe53 	bl	14e44 <bt_conn_unref>
   1219e:	e7f3      	b.n	12188 <hci_disconn_complete+0x38>
   121a0:	0003489b 	.word	0x0003489b
   121a4:	000314dc 	.word	0x000314dc

000121a8 <handle_event>:
{
   121a8:	b5b0      	push	{r4, r5, r7, lr}
   121aa:	4604      	mov	r4, r0
   121ac:	af00      	add	r7, sp, #0
   121ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   121b2:	4293      	cmp	r3, r2
   121b4:	d103      	bne.n	121be <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   121b6:	4620      	mov	r0, r4
   121b8:	f7ff ff4a 	bl	12050 <handle_event.part.0>
}
   121bc:	e018      	b.n	121f0 <handle_event+0x48>
		if (handler->event != event) {
   121be:	4610      	mov	r0, r2
   121c0:	f810 5b08 	ldrb.w	r5, [r0], #8
   121c4:	42a5      	cmp	r5, r4
   121c6:	d119      	bne.n	121fc <handle_event+0x54>
		if (buf->len < handler->min_len) {
   121c8:	8a0b      	ldrh	r3, [r1, #16]
   121ca:	7850      	ldrb	r0, [r2, #1]
   121cc:	4298      	cmp	r0, r3
   121ce:	d911      	bls.n	121f4 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   121d0:	466d      	mov	r5, sp
   121d2:	b088      	sub	sp, #32
   121d4:	466a      	mov	r2, sp
   121d6:	490a      	ldr	r1, [pc, #40]	; (12200 <handle_event+0x58>)
   121d8:	61d4      	str	r4, [r2, #28]
   121da:	e9c2 1305 	strd	r1, r3, [r2, #20]
   121de:	2304      	movs	r3, #4
   121e0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   121e4:	4807      	ldr	r0, [pc, #28]	; (12204 <handle_event+0x5c>)
   121e6:	f842 3f10 	str.w	r3, [r2, #16]!
   121ea:	f019 fef0 	bl	2bfce <z_log_msg_static_create.constprop.0>
   121ee:	46ad      	mov	sp, r5
}
   121f0:	46bd      	mov	sp, r7
   121f2:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   121f4:	4608      	mov	r0, r1
   121f6:	6853      	ldr	r3, [r2, #4]
   121f8:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   121fa:	e7f9      	b.n	121f0 <handle_event+0x48>
   121fc:	4602      	mov	r2, r0
   121fe:	e7d8      	b.n	121b2 <handle_event+0xa>
   12200:	000348c1 	.word	0x000348c1
   12204:	000314dc 	.word	0x000314dc

00012208 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   12208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1220a:	4855      	ldr	r0, [pc, #340]	; (12360 <rx_work_handler+0x158>)
{
   1220c:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1220e:	f009 f939 	bl	1b484 <net_buf_slist_get>
	if (!buf) {
   12212:	4604      	mov	r4, r0
   12214:	2800      	cmp	r0, #0
   12216:	d06a      	beq.n	122ee <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12218:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1221a:	2b01      	cmp	r3, #1
   1221c:	d069      	beq.n	122f2 <rx_work_handler+0xea>
   1221e:	2b03      	cmp	r3, #3
   12220:	f040 8099 	bne.w	12356 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12224:	8a03      	ldrh	r3, [r0, #16]
   12226:	2b03      	cmp	r3, #3
   12228:	d80c      	bhi.n	12244 <rx_work_handler+0x3c>
   1222a:	f240 13ed 	movw	r3, #493	; 0x1ed
   1222e:	4a4d      	ldr	r2, [pc, #308]	; (12364 <rx_work_handler+0x15c>)
   12230:	494d      	ldr	r1, [pc, #308]	; (12368 <rx_work_handler+0x160>)
   12232:	484e      	ldr	r0, [pc, #312]	; (1236c <rx_work_handler+0x164>)
   12234:	f018 fa41 	bl	2a6ba <assert_print>
   12238:	4040      	eors	r0, r0
   1223a:	f380 8811 	msr	BASEPRI, r0
   1223e:	f04f 0003 	mov.w	r0, #3
   12242:	df02      	svc	2
   12244:	2104      	movs	r1, #4
   12246:	f104 000c 	add.w	r0, r4, #12
   1224a:	f009 faa1 	bl	1b790 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1224e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   12250:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   12252:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   12254:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   12256:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1225a:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   1225c:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1225e:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   12260:	d010      	beq.n	12284 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   12262:	466d      	mov	r5, sp
   12264:	b088      	sub	sp, #32
   12266:	466a      	mov	r2, sp
   12268:	4841      	ldr	r0, [pc, #260]	; (12370 <rx_work_handler+0x168>)
   1226a:	61d3      	str	r3, [r2, #28]
   1226c:	2304      	movs	r3, #4
   1226e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   12272:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12276:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1227a:	483e      	ldr	r0, [pc, #248]	; (12374 <rx_work_handler+0x16c>)
   1227c:	f019 fea7 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12280:	46ad      	mov	sp, r5
   12282:	e064      	b.n	1234e <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   12284:	f002 fe0e 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   12288:	4605      	mov	r5, r0
   1228a:	b960      	cbnz	r0, 122a6 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1228c:	466d      	mov	r5, sp
   1228e:	b088      	sub	sp, #32
   12290:	8b63      	ldrh	r3, [r4, #26]
   12292:	466a      	mov	r2, sp
   12294:	4938      	ldr	r1, [pc, #224]	; (12378 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   12296:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1229a:	2303      	movs	r3, #3
   1229c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   122a0:	f842 3f10 	str.w	r3, [r2, #16]!
   122a4:	e7e9      	b.n	1227a <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   122a6:	f002 fef9 	bl	1509c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   122aa:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   122ac:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   122ae:	0b32      	lsrs	r2, r6, #12
   122b0:	4628      	mov	r0, r5
   122b2:	f002 fc63 	bl	14b7c <bt_conn_recv>
	bt_conn_unref(conn);
   122b6:	4628      	mov	r0, r5
   122b8:	f002 fdc4 	bl	14e44 <bt_conn_unref>
	return list->head;
   122bc:	4b2f      	ldr	r3, [pc, #188]	; (1237c <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   122be:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   122c2:	b1a3      	cbz	r3, 122ee <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   122c4:	492e      	ldr	r1, [pc, #184]	; (12380 <rx_work_handler+0x178>)
   122c6:	482f      	ldr	r0, [pc, #188]	; (12384 <rx_work_handler+0x17c>)
   122c8:	f01d fff2 	bl	302b0 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   122cc:	2800      	cmp	r0, #0
   122ce:	da0e      	bge.n	122ee <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   122d0:	466c      	mov	r4, sp
   122d2:	b088      	sub	sp, #32
   122d4:	466a      	mov	r2, sp
   122d6:	4b2c      	ldr	r3, [pc, #176]	; (12388 <rx_work_handler+0x180>)
   122d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   122dc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   122e0:	2303      	movs	r3, #3
   122e2:	4824      	ldr	r0, [pc, #144]	; (12374 <rx_work_handler+0x16c>)
   122e4:	f842 3f10 	str.w	r3, [r2, #16]!
   122e8:	f019 fe71 	bl	2bfce <z_log_msg_static_create.constprop.0>
   122ec:	46a5      	mov	sp, r4
		}
	}
}
   122ee:	46bd      	mov	sp, r7
   122f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   122f2:	8a03      	ldrh	r3, [r0, #16]
   122f4:	2b01      	cmp	r3, #1
   122f6:	d80c      	bhi.n	12312 <rx_work_handler+0x10a>
   122f8:	f640 136d 	movw	r3, #2413	; 0x96d
   122fc:	4a19      	ldr	r2, [pc, #100]	; (12364 <rx_work_handler+0x15c>)
   122fe:	491a      	ldr	r1, [pc, #104]	; (12368 <rx_work_handler+0x160>)
   12300:	481a      	ldr	r0, [pc, #104]	; (1236c <rx_work_handler+0x164>)
   12302:	f018 f9da 	bl	2a6ba <assert_print>
   12306:	4040      	eors	r0, r0
   12308:	f380 8811 	msr	BASEPRI, r0
   1230c:	f04f 0003 	mov.w	r0, #3
   12310:	df02      	svc	2
   12312:	2102      	movs	r1, #2
   12314:	f104 000c 	add.w	r0, r4, #12
   12318:	f009 fa3a 	bl	1b790 <net_buf_simple_pull_mem>
   1231c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1231e:	7800      	ldrb	r0, [r0, #0]
   12320:	f019 fe13 	bl	2bf4a <bt_hci_evt_get_flags>
   12324:	0783      	lsls	r3, r0, #30
   12326:	d40c      	bmi.n	12342 <rx_work_handler+0x13a>
   12328:	f640 1371 	movw	r3, #2417	; 0x971
   1232c:	4a0d      	ldr	r2, [pc, #52]	; (12364 <rx_work_handler+0x15c>)
   1232e:	4917      	ldr	r1, [pc, #92]	; (1238c <rx_work_handler+0x184>)
   12330:	480e      	ldr	r0, [pc, #56]	; (1236c <rx_work_handler+0x164>)
   12332:	f018 f9c2 	bl	2a6ba <assert_print>
   12336:	4040      	eors	r0, r0
   12338:	f380 8811 	msr	BASEPRI, r0
   1233c:	f04f 0003 	mov.w	r0, #3
   12340:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12342:	2306      	movs	r3, #6
   12344:	4621      	mov	r1, r4
   12346:	4a12      	ldr	r2, [pc, #72]	; (12390 <rx_work_handler+0x188>)
   12348:	7828      	ldrb	r0, [r5, #0]
   1234a:	f7ff ff2d 	bl	121a8 <handle_event>
		net_buf_unref(buf);
   1234e:	4620      	mov	r0, r4
   12350:	f009 f91a 	bl	1b588 <net_buf_unref>
		break;
   12354:	e7b2      	b.n	122bc <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12356:	466d      	mov	r5, sp
   12358:	b088      	sub	sp, #32
   1235a:	466a      	mov	r2, sp
   1235c:	490d      	ldr	r1, [pc, #52]	; (12394 <rx_work_handler+0x18c>)
   1235e:	e79a      	b.n	12296 <rx_work_handler+0x8e>
   12360:	2000813c 	.word	0x2000813c
   12364:	000348e3 	.word	0x000348e3
   12368:	00034917 	.word	0x00034917
   1236c:	00032659 	.word	0x00032659
   12370:	00034930 	.word	0x00034930
   12374:	000314dc 	.word	0x000314dc
   12378:	00034954 	.word	0x00034954
   1237c:	20008000 	.word	0x20008000
   12380:	200084c4 	.word	0x200084c4
   12384:	20009bc8 	.word	0x20009bc8
   12388:	00034816 	.word	0x00034816
   1238c:	00034976 	.word	0x00034976
   12390:	00031ec4 	.word	0x00031ec4
   12394:	000349a4 	.word	0x000349a4

00012398 <hci_le_meta_event>:
{
   12398:	b510      	push	{r4, lr}
   1239a:	2101      	movs	r1, #1
   1239c:	4604      	mov	r4, r0
   1239e:	300c      	adds	r0, #12
   123a0:	f009 f9f6 	bl	1b790 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   123a4:	4621      	mov	r1, r4
}
   123a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   123aa:	230a      	movs	r3, #10
   123ac:	4a01      	ldr	r2, [pc, #4]	; (123b4 <hci_le_meta_event+0x1c>)
   123ae:	7800      	ldrb	r0, [r0, #0]
   123b0:	f7ff befa 	b.w	121a8 <handle_event>
   123b4:	00031ef4 	.word	0x00031ef4

000123b8 <le_remote_feat_complete>:
{
   123b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   123ba:	68c5      	ldr	r5, [r0, #12]
{
   123bc:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   123be:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   123c2:	4630      	mov	r0, r6
   123c4:	f002 fd6e 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   123c8:	4604      	mov	r4, r0
   123ca:	b980      	cbnz	r0, 123ee <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   123cc:	466c      	mov	r4, sp
   123ce:	b088      	sub	sp, #32
   123d0:	466a      	mov	r2, sp
   123d2:	4b10      	ldr	r3, [pc, #64]	; (12414 <le_remote_feat_complete+0x5c>)
   123d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   123d8:	e9c2 3605 	strd	r3, r6, [r2, #20]
   123dc:	2303      	movs	r3, #3
   123de:	480e      	ldr	r0, [pc, #56]	; (12418 <le_remote_feat_complete+0x60>)
   123e0:	f842 3f10 	str.w	r3, [r2, #16]!
   123e4:	f019 fdf3 	bl	2bfce <z_log_msg_static_create.constprop.0>
   123e8:	46a5      	mov	sp, r4
}
   123ea:	46bd      	mov	sp, r7
   123ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   123ee:	782b      	ldrb	r3, [r5, #0]
   123f0:	b93b      	cbnz	r3, 12402 <le_remote_feat_complete+0x4a>
   123f2:	f8d5 3003 	ldr.w	r3, [r5, #3]
   123f6:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   123fa:	f8d5 3007 	ldr.w	r3, [r5, #7]
   123fe:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   12406:	1d20      	adds	r0, r4, #4
   12408:	f019 fdca 	bl	2bfa0 <atomic_or>
	bt_conn_unref(conn);
   1240c:	4620      	mov	r0, r4
   1240e:	f002 fd19 	bl	14e44 <bt_conn_unref>
   12412:	e7ea      	b.n	123ea <le_remote_feat_complete+0x32>
   12414:	00034877 	.word	0x00034877
   12418:	000314dc 	.word	0x000314dc

0001241c <hci_cmd_done>:
{
   1241c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12420:	4606      	mov	r6, r0
   12422:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12424:	7a90      	ldrb	r0, [r2, #10]
{
   12426:	4688      	mov	r8, r1
   12428:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1242a:	f008 fe73 	bl	1b114 <net_buf_pool_get>
   1242e:	4d41      	ldr	r5, [pc, #260]	; (12534 <hci_cmd_done+0x118>)
   12430:	4285      	cmp	r5, r0
   12432:	d018      	beq.n	12466 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   12434:	7aa4      	ldrb	r4, [r4, #10]
   12436:	46e8      	mov	r8, sp
   12438:	4620      	mov	r0, r4
   1243a:	f008 fe6b 	bl	1b114 <net_buf_pool_get>
   1243e:	b08a      	sub	sp, #40	; 0x28
   12440:	466a      	mov	r2, sp
   12442:	4b3d      	ldr	r3, [pc, #244]	; (12538 <hci_cmd_done+0x11c>)
   12444:	e9c2 4007 	strd	r4, r0, [r2, #28]
   12448:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1244c:	2306      	movs	r3, #6
   1244e:	6255      	str	r5, [r2, #36]	; 0x24
   12450:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   12454:	4839      	ldr	r0, [pc, #228]	; (1253c <hci_cmd_done+0x120>)
   12456:	f842 3f10 	str.w	r3, [r2, #16]!
   1245a:	f019 fdb8 	bl	2bfce <z_log_msg_static_create.constprop.0>
   1245e:	46c5      	mov	sp, r8
}
   12460:	46bd      	mov	sp, r7
   12462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   12466:	4620      	mov	r0, r4
   12468:	f008 fe5c 	bl	1b124 <net_buf_id>
   1246c:	f04f 090c 	mov.w	r9, #12
   12470:	4d33      	ldr	r5, [pc, #204]	; (12540 <hci_cmd_done+0x124>)
   12472:	fb09 5000 	mla	r0, r9, r0, r5
   12476:	8843      	ldrh	r3, [r0, #2]
   12478:	42b3      	cmp	r3, r6
   1247a:	d016      	beq.n	124aa <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1247c:	4620      	mov	r0, r4
   1247e:	f008 fe51 	bl	1b124 <net_buf_id>
   12482:	fb09 5000 	mla	r0, r9, r0, r5
   12486:	466c      	mov	r4, sp
   12488:	b088      	sub	sp, #32
   1248a:	466a      	mov	r2, sp
   1248c:	8843      	ldrh	r3, [r0, #2]
   1248e:	61d3      	str	r3, [r2, #28]
   12490:	2304      	movs	r3, #4
   12492:	492c      	ldr	r1, [pc, #176]	; (12544 <hci_cmd_done+0x128>)
   12494:	4829      	ldr	r0, [pc, #164]	; (1253c <hci_cmd_done+0x120>)
   12496:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1249a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1249e:	f842 3f10 	str.w	r3, [r2, #16]!
   124a2:	f019 fd94 	bl	2bfce <z_log_msg_static_create.constprop.0>
   124a6:	46a5      	mov	sp, r4
		return;
   124a8:	e7da      	b.n	12460 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   124aa:	4e27      	ldr	r6, [pc, #156]	; (12548 <hci_cmd_done+0x12c>)
   124ac:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   124b0:	b120      	cbz	r0, 124bc <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   124b2:	f009 f869 	bl	1b588 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   124b6:	2300      	movs	r3, #0
   124b8:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   124bc:	4620      	mov	r0, r4
   124be:	f008 fe31 	bl	1b124 <net_buf_id>
   124c2:	260c      	movs	r6, #12
   124c4:	fb06 5000 	mla	r0, r6, r0, r5
   124c8:	6843      	ldr	r3, [r0, #4]
   124ca:	b1ab      	cbz	r3, 124f8 <hci_cmd_done+0xdc>
   124cc:	f1b8 0f00 	cmp.w	r8, #0
   124d0:	d112      	bne.n	124f8 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   124d2:	4620      	mov	r0, r4
   124d4:	f008 fe26 	bl	1b124 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   124d8:	2101      	movs	r1, #1
   124da:	fb06 5000 	mla	r0, r6, r0, r5
   124de:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   124e0:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   124e4:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   124e6:	f003 061f 	and.w	r6, r3, #31
   124ea:	40b1      	lsls	r1, r6
	if (val) {
   124ec:	095b      	lsrs	r3, r3, #5
   124ee:	b1da      	cbz	r2, 12528 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   124f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   124f4:	f019 fd54 	bl	2bfa0 <atomic_or>
	if (cmd(buf)->sync) {
   124f8:	4620      	mov	r0, r4
   124fa:	f008 fe13 	bl	1b124 <net_buf_id>
   124fe:	260c      	movs	r6, #12
   12500:	fb06 5000 	mla	r0, r6, r0, r5
   12504:	6883      	ldr	r3, [r0, #8]
   12506:	2b00      	cmp	r3, #0
   12508:	d0aa      	beq.n	12460 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   1250a:	4620      	mov	r0, r4
   1250c:	f008 fe0a 	bl	1b124 <net_buf_id>
   12510:	4370      	muls	r0, r6
   12512:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   12516:	4620      	mov	r0, r4
   12518:	f008 fe04 	bl	1b124 <net_buf_id>
   1251c:	fb06 5500 	mla	r5, r6, r0, r5
   12520:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   12522:	f013 f851 	bl	255c8 <z_impl_k_sem_give>
}
   12526:	e79b      	b.n	12460 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12528:	43c9      	mvns	r1, r1
   1252a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1252e:	f019 fd51 	bl	2bfd4 <atomic_and.isra.0>
   12532:	e7e1      	b.n	124f8 <hci_cmd_done+0xdc>
   12534:	20008dd8 	.word	0x20008dd8
   12538:	000349b8 	.word	0x000349b8
   1253c:	000314dc 	.word	0x000314dc
   12540:	2002154c 	.word	0x2002154c
   12544:	000349ed 	.word	0x000349ed
   12548:	20008000 	.word	0x20008000

0001254c <hci_cmd_status>:
{
   1254c:	b538      	push	{r3, r4, r5, lr}
   1254e:	2104      	movs	r1, #4
   12550:	4604      	mov	r4, r0
   12552:	300c      	adds	r0, #12
   12554:	f009 f91c 	bl	1b790 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12558:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1255a:	7801      	ldrb	r1, [r0, #0]
   1255c:	4622      	mov	r2, r4
   1255e:	8840      	ldrh	r0, [r0, #2]
   12560:	f7ff ff5c 	bl	1241c <hci_cmd_done>
	if (ncmd) {
   12564:	b125      	cbz	r5, 12570 <hci_cmd_status+0x24>
}
   12566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1256a:	4802      	ldr	r0, [pc, #8]	; (12574 <hci_cmd_status+0x28>)
   1256c:	f013 b82c 	b.w	255c8 <z_impl_k_sem_give>
   12570:	bd38      	pop	{r3, r4, r5, pc}
   12572:	bf00      	nop
   12574:	20008120 	.word	0x20008120

00012578 <hci_cmd_complete>:
{
   12578:	b538      	push	{r3, r4, r5, lr}
   1257a:	2103      	movs	r1, #3
   1257c:	4604      	mov	r4, r0
   1257e:	300c      	adds	r0, #12
   12580:	f009 f906 	bl	1b790 <net_buf_simple_pull_mem>
	status = buf->data[0];
   12584:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   12586:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   12588:	4622      	mov	r2, r4
   1258a:	7819      	ldrb	r1, [r3, #0]
   1258c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   12590:	f7ff ff44 	bl	1241c <hci_cmd_done>
	if (ncmd) {
   12594:	b125      	cbz	r5, 125a0 <hci_cmd_complete+0x28>
}
   12596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1259a:	4802      	ldr	r0, [pc, #8]	; (125a4 <hci_cmd_complete+0x2c>)
   1259c:	f013 b814 	b.w	255c8 <z_impl_k_sem_give>
   125a0:	bd38      	pop	{r3, r4, r5, pc}
   125a2:	bf00      	nop
   125a4:	20008120 	.word	0x20008120

000125a8 <hci_num_completed_packets>:
{
   125a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   125ac:	2500      	movs	r5, #0
{
   125ae:	b087      	sub	sp, #28
			tx->pending_no_cb = 0U;
   125b0:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   125b2:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   125b6:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 126b4 <hci_num_completed_packets+0x10c>
{
   125ba:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
   125bc:	f898 3000 	ldrb.w	r3, [r8]
   125c0:	429d      	cmp	r5, r3
   125c2:	db03      	blt.n	125cc <hci_num_completed_packets+0x24>
}
   125c4:	371c      	adds	r7, #28
   125c6:	46bd      	mov	sp, r7
   125c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   125cc:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   125d0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   125d4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   125d8:	4658      	mov	r0, fp
   125da:	f002 fc63 	bl	14ea4 <bt_conn_lookup_handle>
		if (!conn) {
   125de:	4604      	mov	r4, r0
   125e0:	b1d8      	cbz	r0, 1261a <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   125e2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   125e6:	2e00      	cmp	r6, #0
   125e8:	d039      	beq.n	1265e <hci_num_completed_packets+0xb6>
	__asm__ volatile(
   125ea:	f04f 0320 	mov.w	r3, #32
   125ee:	f3ef 8211 	mrs	r2, BASEPRI
   125f2:	f383 8812 	msr	BASEPRI_MAX, r3
   125f6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   125fa:	69e3      	ldr	r3, [r4, #28]
   125fc:	b1f3      	cbz	r3, 1263c <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   125fe:	3b01      	subs	r3, #1
   12600:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   12602:	f382 8811 	msr	BASEPRI, r2
   12606:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1260a:	4620      	mov	r0, r4
   1260c:	f002 fa3a 	bl	14a84 <bt_conn_get_pkts>
   12610:	3e01      	subs	r6, #1
   12612:	f012 ffd9 	bl	255c8 <z_impl_k_sem_give>
   12616:	b2b6      	uxth	r6, r6
   12618:	e7e5      	b.n	125e6 <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
   1261a:	466c      	mov	r4, sp
   1261c:	b088      	sub	sp, #32
   1261e:	466a      	mov	r2, sp
   12620:	4b25      	ldr	r3, [pc, #148]	; (126b8 <hci_num_completed_packets+0x110>)
   12622:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12626:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   1262a:	2303      	movs	r3, #3
   1262c:	4823      	ldr	r0, [pc, #140]	; (126bc <hci_num_completed_packets+0x114>)
   1262e:	f842 3f10 	str.w	r3, [r2, #16]!
   12632:	f019 fccc 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12636:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   12638:	3501      	adds	r5, #1
   1263a:	e7bf      	b.n	125bc <hci_num_completed_packets+0x14>
   1263c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1263e:	b993      	cbnz	r3, 12666 <hci_num_completed_packets+0xbe>
   12640:	f382 8811 	msr	BASEPRI, r2
   12644:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   12648:	2302      	movs	r3, #2
   1264a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1264e:	481b      	ldr	r0, [pc, #108]	; (126bc <hci_num_completed_packets+0x114>)
   12650:	f8c7 a014 	str.w	sl, [r7, #20]
   12654:	613b      	str	r3, [r7, #16]
   12656:	f107 0210 	add.w	r2, r7, #16
   1265a:	f019 fcb8 	bl	2bfce <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1265e:	4620      	mov	r0, r4
   12660:	f002 fbf0 	bl	14e44 <bt_conn_unref>
   12664:	e7e8      	b.n	12638 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12666:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   12668:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1266a:	428b      	cmp	r3, r1
	list->head = node;
   1266c:	6160      	str	r0, [r4, #20]
	list->tail = node;
   1266e:	bf08      	it	eq
   12670:	61a0      	streq	r0, [r4, #24]
   12672:	f382 8811 	msr	BASEPRI, r2
   12676:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1267a:	f04f 0220 	mov.w	r2, #32
   1267e:	f3ef 8111 	mrs	r1, BASEPRI
   12682:	f382 8812 	msr	BASEPRI_MAX, r2
   12686:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1268a:	68da      	ldr	r2, [r3, #12]
   1268c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   1268e:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   12692:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   12696:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   12698:	b94a      	cbnz	r2, 126ae <hci_num_completed_packets+0x106>
	list->head = node;
   1269a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1269e:	f381 8811 	msr	BASEPRI, r1
   126a2:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   126a6:	4658      	mov	r0, fp
   126a8:	f013 fafc 	bl	25ca4 <k_work_submit>
   126ac:	e7ad      	b.n	1260a <hci_num_completed_packets+0x62>
	parent->next = child;
   126ae:	6013      	str	r3, [r2, #0]
	list->tail = node;
   126b0:	6263      	str	r3, [r4, #36]	; 0x24
}
   126b2:	e7f4      	b.n	1269e <hci_num_completed_packets+0xf6>
   126b4:	00034a3c 	.word	0x00034a3c
   126b8:	00034a20 	.word	0x00034a20
   126bc:	000314dc 	.word	0x000314dc

000126c0 <le_conn_update_complete>:
{
   126c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   126c2:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   126c4:	68c5      	ldr	r5, [r0, #12]
{
   126c6:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   126c8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   126cc:	4630      	mov	r0, r6
   126ce:	f002 fbe9 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   126d2:	4604      	mov	r4, r0
   126d4:	b988      	cbnz	r0, 126fa <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   126d6:	466c      	mov	r4, sp
   126d8:	b088      	sub	sp, #32
   126da:	466a      	mov	r2, sp
   126dc:	4b2b      	ldr	r3, [pc, #172]	; (1278c <le_conn_update_complete+0xcc>)
   126de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   126e2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   126e6:	2303      	movs	r3, #3
   126e8:	4829      	ldr	r0, [pc, #164]	; (12790 <le_conn_update_complete+0xd0>)
   126ea:	f842 3f10 	str.w	r3, [r2, #16]!
   126ee:	f019 fc6e 	bl	2bfce <z_log_msg_static_create.constprop.0>
   126f2:	46a5      	mov	sp, r4
}
   126f4:	370c      	adds	r7, #12
   126f6:	46bd      	mov	sp, r7
   126f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   126fa:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   126fc:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   126fe:	2b1a      	cmp	r3, #26
   12700:	d117      	bne.n	12732 <le_conn_update_complete+0x72>
   12702:	78c3      	ldrb	r3, [r0, #3]
   12704:	2b01      	cmp	r3, #1
   12706:	d128      	bne.n	1275a <le_conn_update_complete+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12708:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1270c:	4630      	mov	r0, r6
   1270e:	f019 fc47 	bl	2bfa0 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   12712:	0542      	lsls	r2, r0, #21
   12714:	d40d      	bmi.n	12732 <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
   12716:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   1271a:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
   1271c:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   1271e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   12722:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
   12724:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   12726:	f003 f9eb 	bl	15b00 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   1272a:	4620      	mov	r0, r4
   1272c:	f002 fb8a 	bl	14e44 <bt_conn_unref>
   12730:	e7e0      	b.n	126f4 <le_conn_update_complete+0x34>
		if (!evt->status) {
   12732:	782b      	ldrb	r3, [r5, #0]
   12734:	b98b      	cbnz	r3, 1275a <le_conn_update_complete+0x9a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   12736:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1273a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   1273e:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   12742:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12746:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1274a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1274e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   12752:	4630      	mov	r0, r6
   12754:	f019 fc3e 	bl	2bfd4 <atomic_and.isra.0>
}
   12758:	e014      	b.n	12784 <le_conn_update_complete+0xc4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1275a:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   1275e:	05db      	lsls	r3, r3, #23
   12760:	d5f5      	bpl.n	1274e <le_conn_update_complete+0x8e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   12762:	782b      	ldrb	r3, [r5, #0]
   12764:	2b20      	cmp	r3, #32
   12766:	d1f2      	bne.n	1274e <le_conn_update_complete+0x8e>
			   conn->le.conn_param_retry_countdown) {
   12768:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   1276c:	2b00      	cmp	r3, #0
   1276e:	d0ee      	beq.n	1274e <le_conn_update_complete+0x8e>
			conn->le.conn_param_retry_countdown--;
   12770:	3b01      	subs	r3, #1
   12772:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   12776:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1277a:	2300      	movs	r3, #0
   1277c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   12780:	f013 fc48 	bl	26014 <k_work_schedule>
		notify_le_param_updated(conn);
   12784:	4620      	mov	r0, r4
   12786:	f002 fced 	bl	15164 <notify_le_param_updated>
   1278a:	e7ce      	b.n	1272a <le_conn_update_complete+0x6a>
   1278c:	00034877 	.word	0x00034877
   12790:	000314dc 	.word	0x000314dc

00012794 <bt_hci_cmd_state_set_init>:
{
   12794:	b510      	push	{r4, lr}
	state->bit = bit;
   12796:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1279a:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   1279e:	460c      	mov	r4, r1
	state->val = val;
   127a0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   127a2:	f008 fcbf 	bl	1b124 <net_buf_id>
   127a6:	220c      	movs	r2, #12
   127a8:	4b02      	ldr	r3, [pc, #8]	; (127b4 <bt_hci_cmd_state_set_init+0x20>)
   127aa:	fb02 3300 	mla	r3, r2, r0, r3
   127ae:	605c      	str	r4, [r3, #4]
}
   127b0:	bd10      	pop	{r4, pc}
   127b2:	bf00      	nop
   127b4:	2002154c 	.word	0x2002154c

000127b8 <bt_hci_cmd_create>:
{
   127b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   127bc:	f04f 32ff 	mov.w	r2, #4294967295
   127c0:	4606      	mov	r6, r0
   127c2:	f04f 33ff 	mov.w	r3, #4294967295
   127c6:	481e      	ldr	r0, [pc, #120]	; (12840 <bt_hci_cmd_create+0x88>)
   127c8:	460f      	mov	r7, r1
   127ca:	f01b fc02 	bl	2dfd2 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   127ce:	4604      	mov	r4, r0
   127d0:	b958      	cbnz	r0, 127ea <bt_hci_cmd_create+0x32>
   127d2:	491c      	ldr	r1, [pc, #112]	; (12844 <bt_hci_cmd_create+0x8c>)
   127d4:	481c      	ldr	r0, [pc, #112]	; (12848 <bt_hci_cmd_create+0x90>)
   127d6:	f240 1301 	movw	r3, #257	; 0x101
   127da:	4a1c      	ldr	r2, [pc, #112]	; (1284c <bt_hci_cmd_create+0x94>)
   127dc:	f017 ff6d 	bl	2a6ba <assert_print>
   127e0:	f240 1101 	movw	r1, #257	; 0x101
   127e4:	4819      	ldr	r0, [pc, #100]	; (1284c <bt_hci_cmd_create+0x94>)
   127e6:	f017 ff61 	bl	2a6ac <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   127ea:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   127ee:	f100 0a0c 	add.w	sl, r0, #12
   127f2:	2101      	movs	r1, #1
   127f4:	4650      	mov	r0, sl
   127f6:	f008 fdb5 	bl	1b364 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   127fa:	4620      	mov	r0, r4
   127fc:	f884 8018 	strb.w	r8, [r4, #24]
   12800:	f008 fc90 	bl	1b124 <net_buf_id>
   12804:	f04f 090c 	mov.w	r9, #12
   12808:	4d11      	ldr	r5, [pc, #68]	; (12850 <bt_hci_cmd_create+0x98>)
   1280a:	fb09 5000 	mla	r0, r9, r0, r5
   1280e:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   12810:	4620      	mov	r0, r4
   12812:	f008 fc87 	bl	1b124 <net_buf_id>
   12816:	fb09 5000 	mla	r0, r9, r0, r5
   1281a:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1281e:	4620      	mov	r0, r4
   12820:	f008 fc80 	bl	1b124 <net_buf_id>
   12824:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   12828:	2103      	movs	r1, #3
   1282a:	4650      	mov	r0, sl
   1282c:	f8c5 8004 	str.w	r8, [r5, #4]
   12830:	f008 ffcc 	bl	1b7cc <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   12834:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   12836:	7087      	strb	r7, [r0, #2]
}
   12838:	4620      	mov	r0, r4
   1283a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1283e:	bf00      	nop
   12840:	20008dd8 	.word	0x20008dd8
   12844:	00036969 	.word	0x00036969
   12848:	00032659 	.word	0x00032659
   1284c:	000348e3 	.word	0x000348e3
   12850:	2002154c 	.word	0x2002154c

00012854 <bt_hci_cmd_send_sync>:
{
   12854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12858:	b087      	sub	sp, #28
   1285a:	4680      	mov	r8, r0
   1285c:	4615      	mov	r5, r2
	if (!buf) {
   1285e:	460c      	mov	r4, r1
{
   12860:	af00      	add	r7, sp, #0
	if (!buf) {
   12862:	b921      	cbnz	r1, 1286e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   12864:	f7ff ffa8 	bl	127b8 <bt_hci_cmd_create>
		if (!buf) {
   12868:	4604      	mov	r4, r0
   1286a:	2800      	cmp	r0, #0
   1286c:	d05a      	beq.n	12924 <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1286e:	2201      	movs	r2, #1
   12870:	2100      	movs	r1, #0
   12872:	4638      	mov	r0, r7
   12874:	f01d fcb9 	bl	301ea <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   12878:	4620      	mov	r0, r4
   1287a:	f008 fc53 	bl	1b124 <net_buf_id>
   1287e:	230c      	movs	r3, #12
   12880:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1292c <bt_hci_cmd_send_sync+0xd8>
   12884:	fb03 9000 	mla	r0, r3, r0, r9
   12888:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1288a:	4620      	mov	r0, r4
   1288c:	f008 fec0 	bl	1b610 <net_buf_ref>
   12890:	4601      	mov	r1, r0
   12892:	4827      	ldr	r0, [pc, #156]	; (12930 <bt_hci_cmd_send_sync+0xdc>)
   12894:	f008 fe52 	bl	1b53c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   12898:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1289c:	2300      	movs	r3, #0
   1289e:	4638      	mov	r0, r7
   128a0:	f012 fed6 	bl	25650 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   128a4:	4606      	mov	r6, r0
   128a6:	b180      	cbz	r0, 128ca <bt_hci_cmd_send_sync+0x76>
   128a8:	f240 1349 	movw	r3, #329	; 0x149
   128ac:	4a21      	ldr	r2, [pc, #132]	; (12934 <bt_hci_cmd_send_sync+0xe0>)
   128ae:	4922      	ldr	r1, [pc, #136]	; (12938 <bt_hci_cmd_send_sync+0xe4>)
   128b0:	4822      	ldr	r0, [pc, #136]	; (1293c <bt_hci_cmd_send_sync+0xe8>)
   128b2:	f017 ff02 	bl	2a6ba <assert_print>
   128b6:	4631      	mov	r1, r6
   128b8:	4821      	ldr	r0, [pc, #132]	; (12940 <bt_hci_cmd_send_sync+0xec>)
   128ba:	f017 fefe 	bl	2a6ba <assert_print>
   128be:	4040      	eors	r0, r0
   128c0:	f380 8811 	msr	BASEPRI, r0
   128c4:	f04f 0003 	mov.w	r0, #3
   128c8:	df02      	svc	2
	status = cmd(buf)->status;
   128ca:	4620      	mov	r0, r4
   128cc:	f008 fc2a 	bl	1b124 <net_buf_id>
   128d0:	230c      	movs	r3, #12
   128d2:	4358      	muls	r0, r3
   128d4:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   128d8:	b1e6      	cbz	r6, 12914 <bt_hci_cmd_send_sync+0xc0>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   128da:	466d      	mov	r5, sp
   128dc:	b088      	sub	sp, #32
   128de:	466a      	mov	r2, sp
   128e0:	4b18      	ldr	r3, [pc, #96]	; (12944 <bt_hci_cmd_send_sync+0xf0>)
   128e2:	61d6      	str	r6, [r2, #28]
   128e4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   128e8:	2304      	movs	r3, #4
   128ea:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   128ee:	4816      	ldr	r0, [pc, #88]	; (12948 <bt_hci_cmd_send_sync+0xf4>)
   128f0:	f842 3f10 	str.w	r3, [r2, #16]!
   128f4:	f019 fb6b 	bl	2bfce <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   128f8:	4620      	mov	r0, r4
   128fa:	46ad      	mov	sp, r5
   128fc:	f008 fe44 	bl	1b588 <net_buf_unref>
			return -ECONNREFUSED;
   12900:	2e09      	cmp	r6, #9
   12902:	bf14      	ite	ne
   12904:	f06f 0004 	mvnne.w	r0, #4
   12908:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   1290c:	371c      	adds	r7, #28
   1290e:	46bd      	mov	sp, r7
   12910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   12914:	b115      	cbz	r5, 1291c <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   12916:	602c      	str	r4, [r5, #0]
	return 0;
   12918:	2000      	movs	r0, #0
   1291a:	e7f7      	b.n	1290c <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   1291c:	4620      	mov	r0, r4
   1291e:	f008 fe33 	bl	1b588 <net_buf_unref>
   12922:	e7f9      	b.n	12918 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
   12924:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12928:	e7f0      	b.n	1290c <bt_hci_cmd_send_sync+0xb8>
   1292a:	bf00      	nop
   1292c:	2002154c 	.word	0x2002154c
   12930:	20008144 	.word	0x20008144
   12934:	000348e3 	.word	0x000348e3
   12938:	000334d3 	.word	0x000334d3
   1293c:	00032659 	.word	0x00032659
   12940:	00034a53 	.word	0x00034a53
   12944:	00034a73 	.word	0x00034a73
   12948:	000314dc 	.word	0x000314dc

0001294c <hci_le_read_max_data_len>:
{
   1294c:	b570      	push	{r4, r5, r6, lr}
   1294e:	b088      	sub	sp, #32
   12950:	4606      	mov	r6, r0
   12952:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   12954:	f242 002f 	movw	r0, #8239	; 0x202f
   12958:	2100      	movs	r1, #0
   1295a:	aa01      	add	r2, sp, #4
   1295c:	f7ff ff7a 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
   12960:	4604      	mov	r4, r0
   12962:	b160      	cbz	r0, 1297e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   12964:	4b0b      	ldr	r3, [pc, #44]	; (12994 <hci_le_read_max_data_len+0x48>)
   12966:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1296a:	9307      	str	r3, [sp, #28]
   1296c:	2302      	movs	r3, #2
   1296e:	480a      	ldr	r0, [pc, #40]	; (12998 <hci_le_read_max_data_len+0x4c>)
   12970:	aa06      	add	r2, sp, #24
   12972:	9306      	str	r3, [sp, #24]
   12974:	f019 fb2b 	bl	2bfce <z_log_msg_static_create.constprop.0>
}
   12978:	4620      	mov	r0, r4
   1297a:	b008      	add	sp, #32
   1297c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1297e:	9801      	ldr	r0, [sp, #4]
   12980:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   12982:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12986:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   12988:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1298c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1298e:	f008 fdfb 	bl	1b588 <net_buf_unref>
	return 0;
   12992:	e7f1      	b.n	12978 <hci_le_read_max_data_len+0x2c>
   12994:	00034a8f 	.word	0x00034a8f
   12998:	000314dc 	.word	0x000314dc

0001299c <bt_hci_le_rand>:
{
   1299c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1299e:	4b14      	ldr	r3, [pc, #80]	; (129f0 <bt_hci_le_rand+0x54>)
{
   129a0:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   129a2:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   129a6:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   129a8:	2b00      	cmp	r3, #0
   129aa:	da1d      	bge.n	129e8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   129ac:	b914      	cbnz	r4, 129b4 <bt_hci_le_rand+0x18>
	return 0;
   129ae:	4620      	mov	r0, r4
}
   129b0:	b003      	add	sp, #12
   129b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   129b4:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   129b6:	f04f 0100 	mov.w	r1, #0
   129ba:	f242 0018 	movw	r0, #8216	; 0x2018
   129be:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   129c0:	4626      	mov	r6, r4
   129c2:	bf28      	it	cs
   129c4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   129c6:	f7ff ff45 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
   129ca:	2800      	cmp	r0, #0
   129cc:	d1f0      	bne.n	129b0 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   129ce:	9f01      	ldr	r7, [sp, #4]
   129d0:	4632      	mov	r2, r6
   129d2:	68f9      	ldr	r1, [r7, #12]
   129d4:	4628      	mov	r0, r5
   129d6:	3101      	adds	r1, #1
   129d8:	f01d fdc9 	bl	3056e <memcpy>
		net_buf_unref(rsp);
   129dc:	4638      	mov	r0, r7
   129de:	f008 fdd3 	bl	1b588 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   129e2:	4435      	add	r5, r6
		len -= count;
   129e4:	1ba4      	subs	r4, r4, r6
   129e6:	e7e1      	b.n	129ac <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   129e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   129ec:	e7e0      	b.n	129b0 <bt_hci_le_rand+0x14>
   129ee:	bf00      	nop
   129f0:	20008000 	.word	0x20008000

000129f4 <bt_hci_le_enh_conn_complete>:
{
   129f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f8:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   129fa:	f8b0 9001 	ldrh.w	r9, [r0, #1]
   129fe:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   12a00:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   12a04:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   12a08:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   12a0a:	4aa9      	ldr	r2, [pc, #676]	; (12cb0 <bt_hci_le_enh_conn_complete+0x2bc>)
   12a0c:	b29b      	uxth	r3, r3
   12a0e:	8811      	ldrh	r1, [r2, #0]
{
   12a10:	af02      	add	r7, sp, #8
		if (disconnected_handles[i] == handle) {
   12a12:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   12a14:	bf04      	itt	eq
   12a16:	8016      	strheq	r6, [r2, #0]
			return true;
   12a18:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   12a1a:	f000 ff99 	bl	13950 <bt_id_pending_keys_update>
	if (evt->status) {
   12a1e:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12a20:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   12a24:	b3a4      	cbz	r4, 12a90 <bt_hci_le_enh_conn_complete+0x9c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12a26:	2c3c      	cmp	r4, #60	; 0x3c
   12a28:	d122      	bne.n	12a70 <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12a2a:	f001 fafb 	bl	14024 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12a2e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12a32:	3010      	adds	r0, #16
   12a34:	f019 face 	bl	2bfd4 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12a38:	2000      	movs	r0, #0
   12a3a:	f7ff faa1 	bl	11f80 <find_pending_connect.part.0>
		if (!conn) {
   12a3e:	4605      	mov	r5, r0
   12a40:	b970      	cbnz	r0, 12a60 <bt_hci_le_enh_conn_complete+0x6c>
			LOG_ERR("No pending peripheral connection");
   12a42:	4b9c      	ldr	r3, [pc, #624]	; (12cb4 <bt_hci_le_enh_conn_complete+0x2c0>)
   12a44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a48:	627b      	str	r3, [r7, #36]	; 0x24
   12a4a:	2302      	movs	r3, #2
   12a4c:	489a      	ldr	r0, [pc, #616]	; (12cb8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12a4e:	623b      	str	r3, [r7, #32]
   12a50:	f107 0220 	add.w	r2, r7, #32
   12a54:	f019 fabb 	bl	2bfce <z_log_msg_static_create.constprop.0>
}
   12a58:	372c      	adds	r7, #44	; 0x2c
   12a5a:	46bd      	mov	sp, r7
   12a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12a60:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12a62:	2100      	movs	r1, #0
   12a64:	f002 fa26 	bl	14eb4 <bt_conn_set_state>
		bt_conn_unref(conn);
   12a68:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   12a6a:	f002 f9eb 	bl	14e44 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12a6e:	e7f3      	b.n	12a58 <bt_hci_le_enh_conn_complete+0x64>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   12a70:	466d      	mov	r5, sp
   12a72:	b088      	sub	sp, #32
   12a74:	aa02      	add	r2, sp, #8
   12a76:	4b91      	ldr	r3, [pc, #580]	; (12cbc <bt_hci_le_enh_conn_complete+0x2c8>)
   12a78:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12a7c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12a80:	2303      	movs	r3, #3
   12a82:	488d      	ldr	r0, [pc, #564]	; (12cb8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12a84:	f842 3f10 	str.w	r3, [r2, #16]!
   12a88:	f019 faa1 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12a8c:	46ad      	mov	sp, r5
		return;
   12a8e:	e7e3      	b.n	12a58 <bt_hci_le_enh_conn_complete+0x64>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12a90:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12a92:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12a96:	3b02      	subs	r3, #2
   12a98:	2b01      	cmp	r3, #1
   12a9a:	d82c      	bhi.n	12af6 <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12a9c:	4651      	mov	r1, sl
   12a9e:	f107 0010 	add.w	r0, r7, #16
   12aa2:	f019 fa8d 	bl	2bfc0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12aa6:	7c3b      	ldrb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12aa8:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12aac:	3b02      	subs	r3, #2
   12aae:	743b      	strb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12ab0:	f107 0009 	add.w	r0, r7, #9
   12ab4:	f019 fa7f 	bl	2bfb6 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12ab8:	2301      	movs	r3, #1
   12aba:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12abc:	78eb      	ldrb	r3, [r5, #3]
   12abe:	2b01      	cmp	r3, #1
   12ac0:	d02e      	beq.n	12b20 <bt_hci_le_enh_conn_complete+0x12c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   12ac2:	4650      	mov	r0, sl
   12ac4:	f7fe fff2 	bl	11aac <bt_addr_le_str>
   12ac8:	466c      	mov	r4, sp
   12aca:	b088      	sub	sp, #32
   12acc:	aa02      	add	r2, sp, #8
   12ace:	4b7c      	ldr	r3, [pc, #496]	; (12cc0 <bt_hci_le_enh_conn_complete+0x2cc>)
   12ad0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12ad4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
   12adc:	8393      	strh	r3, [r2, #28]
   12ade:	4b79      	ldr	r3, [pc, #484]	; (12cc4 <bt_hci_le_enh_conn_complete+0x2d0>)
   12ae0:	4875      	ldr	r0, [pc, #468]	; (12cb8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12ae2:	f842 3f10 	str.w	r3, [r2, #16]!
   12ae6:	f019 fa72 	bl	2bfce <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   12aea:	211f      	movs	r1, #31
   12aec:	46a5      	mov	sp, r4
   12aee:	4640      	mov	r0, r8
   12af0:	f019 fa88 	bl	2c004 <bt_hci_disconnect>
		return;
   12af4:	e7b0      	b.n	12a58 <bt_hci_le_enh_conn_complete+0x64>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12af6:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   12af8:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12afa:	2b01      	cmp	r3, #1
   12afc:	bf04      	itt	eq
   12afe:	4b72      	ldreq	r3, [pc, #456]	; (12cc8 <bt_hci_le_enh_conn_complete+0x2d4>)
   12b00:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12b04:	4620      	mov	r0, r4
   12b06:	f019 fbc2 	bl	2c28e <bt_lookup_id_addr>
   12b0a:	4601      	mov	r1, r0
   12b0c:	f107 0010 	add.w	r0, r7, #16
   12b10:	f019 fa56 	bl	2bfc0 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   12b14:	4651      	mov	r1, sl
   12b16:	f107 0008 	add.w	r0, r7, #8
   12b1a:	f019 fa51 	bl	2bfc0 <bt_addr_le_copy>
   12b1e:	e7cd      	b.n	12abc <bt_hci_le_enh_conn_complete+0xc8>
   12b20:	f107 0010 	add.w	r0, r7, #16
   12b24:	f7ff fa2c 	bl	11f80 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b28:	78eb      	ldrb	r3, [r5, #3]
   12b2a:	4604      	mov	r4, r0
   12b2c:	2b01      	cmp	r3, #1
   12b2e:	d10a      	bne.n	12b46 <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12b30:	f001 fa78 	bl	14024 <bt_le_adv_lookup_legacy>
   12b34:	4683      	mov	fp, r0
   12b36:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12b3a:	3010      	adds	r0, #16
   12b3c:	f019 fa4a 	bl	2bfd4 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   12b40:	4658      	mov	r0, fp
   12b42:	f019 fcc5 	bl	2c4d0 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   12b46:	2c00      	cmp	r4, #0
   12b48:	d0bb      	beq.n	12ac2 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   12b4a:	4620      	mov	r0, r4
	conn->err = 0U;
   12b4c:	2200      	movs	r2, #0
	conn->handle = handle;
   12b4e:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12b52:	f107 0110 	add.w	r1, r7, #16
   12b56:	f019 fa33 	bl	2bfc0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12b5a:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   12b5e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12b62:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   12b66:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12b6a:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   12b6e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12b72:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   12b74:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b76:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   12b78:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b7a:	d116      	bne.n	12baa <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   12b7c:	f107 0108 	add.w	r1, r7, #8
   12b80:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12b84:	f019 fa1c 	bl	2bfc0 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12b88:	f001 fa4c 	bl	14024 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   12b8c:	7a21      	ldrb	r1, [r4, #8]
   12b8e:	4a4e      	ldr	r2, [pc, #312]	; (12cc8 <bt_hci_le_enh_conn_complete+0x2d4>)
   12b90:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   12b94:	4411      	add	r1, r2
   12b96:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12b9a:	f019 fa11 	bl	2bfc0 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   12b9e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   12ba2:	065d      	lsls	r5, r3, #25
   12ba4:	d501      	bpl.n	12baa <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   12ba6:	f001 fc03 	bl	143b0 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12baa:	2107      	movs	r1, #7
   12bac:	4620      	mov	r0, r4
   12bae:	f002 f981 	bl	14eb4 <bt_conn_set_state>
	if (is_disconnected) {
   12bb2:	b11e      	cbz	r6, 12bbc <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12bb4:	2101      	movs	r1, #1
   12bb6:	4620      	mov	r0, r4
   12bb8:	f002 f97c 	bl	14eb4 <bt_conn_set_state>
	bt_conn_connected(conn);
   12bbc:	4620      	mov	r0, r4
   12bbe:	f019 fd0d 	bl	2c5dc <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   12bc2:	7b63      	ldrb	r3, [r4, #13]
   12bc4:	2b07      	cmp	r3, #7
   12bc6:	d16e      	bne.n	12ca6 <bt_hci_le_enh_conn_complete+0x2b2>
   12bc8:	1d23      	adds	r3, r4, #4
   12bca:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12bce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12bd2:	4d3d      	ldr	r5, [pc, #244]	; (12cc8 <bt_hci_le_enh_conn_complete+0x2d4>)
   12bd4:	d129      	bne.n	12c2a <bt_hci_le_enh_conn_complete+0x236>
   12bd6:	78e3      	ldrb	r3, [r4, #3]
   12bd8:	b11b      	cbz	r3, 12be2 <bt_hci_le_enh_conn_complete+0x1ee>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   12bda:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12bde:	0718      	lsls	r0, r3, #28
   12be0:	d523      	bpl.n	12c2a <bt_hci_le_enh_conn_complete+0x236>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12be2:	2102      	movs	r1, #2
   12be4:	f242 0016 	movw	r0, #8214	; 0x2016
   12be8:	f7ff fde6 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   12bec:	4606      	mov	r6, r0
   12bee:	2800      	cmp	r0, #0
   12bf0:	d05b      	beq.n	12caa <bt_hci_le_enh_conn_complete+0x2b6>
   12bf2:	2102      	movs	r1, #2
   12bf4:	300c      	adds	r0, #12
   12bf6:	f008 fde9 	bl	1b7cc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12bfa:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12bfc:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   12bfe:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12c00:	4631      	mov	r1, r6
   12c02:	f242 0016 	movw	r0, #8214	; 0x2016
   12c06:	f7ff fe25 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
   12c0a:	b170      	cbz	r0, 12c2a <bt_hci_le_enh_conn_complete+0x236>
			LOG_ERR("Failed read remote features (%d)", err);
   12c0c:	466e      	mov	r6, sp
   12c0e:	b088      	sub	sp, #32
   12c10:	aa02      	add	r2, sp, #8
   12c12:	4b2e      	ldr	r3, [pc, #184]	; (12ccc <bt_hci_le_enh_conn_complete+0x2d8>)
   12c14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c18:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12c1c:	2303      	movs	r3, #3
   12c1e:	4826      	ldr	r0, [pc, #152]	; (12cb8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12c20:	f842 3f10 	str.w	r3, [r2, #16]!
   12c24:	f019 f9d3 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12c28:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12c2a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   12c2e:	07d9      	lsls	r1, r3, #31
   12c30:	d516      	bpl.n	12c60 <bt_hci_le_enh_conn_complete+0x26c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12c32:	2100      	movs	r1, #0
   12c34:	2302      	movs	r3, #2
   12c36:	4620      	mov	r0, r4
   12c38:	461a      	mov	r2, r3
   12c3a:	9100      	str	r1, [sp, #0]
   12c3c:	f019 fa1b 	bl	2c076 <bt_le_set_phy>
		if (err) {
   12c40:	b170      	cbz	r0, 12c60 <bt_hci_le_enh_conn_complete+0x26c>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   12c42:	466e      	mov	r6, sp
   12c44:	b088      	sub	sp, #32
   12c46:	aa02      	add	r2, sp, #8
   12c48:	4b21      	ldr	r3, [pc, #132]	; (12cd0 <bt_hci_le_enh_conn_complete+0x2dc>)
   12c4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c4e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12c52:	2303      	movs	r3, #3
   12c54:	4818      	ldr	r0, [pc, #96]	; (12cb8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12c56:	f842 3f10 	str.w	r3, [r2, #16]!
   12c5a:	f019 f9b8 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12c5e:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12c60:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12c64:	069a      	lsls	r2, r3, #26
   12c66:	d51e      	bpl.n	12ca6 <bt_hci_le_enh_conn_complete+0x2b2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12c68:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   12c6c:	689b      	ldr	r3, [r3, #8]
   12c6e:	079b      	lsls	r3, r3, #30
   12c70:	d519      	bpl.n	12ca6 <bt_hci_le_enh_conn_complete+0x2b2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12c72:	1db9      	adds	r1, r7, #6
   12c74:	1d38      	adds	r0, r7, #4
   12c76:	f7ff fe69 	bl	1294c <hci_le_read_max_data_len>
			if (!err) {
   12c7a:	b9a0      	cbnz	r0, 12ca6 <bt_hci_le_enh_conn_complete+0x2b2>
				err = bt_le_set_data_len(conn,
   12c7c:	4620      	mov	r0, r4
   12c7e:	88fa      	ldrh	r2, [r7, #6]
   12c80:	88b9      	ldrh	r1, [r7, #4]
   12c82:	f019 f9da 	bl	2c03a <bt_le_set_data_len>
				if (err) {
   12c86:	b170      	cbz	r0, 12ca6 <bt_hci_le_enh_conn_complete+0x2b2>
					LOG_ERR("Failed to set data len (%d)", err);
   12c88:	466d      	mov	r5, sp
   12c8a:	b088      	sub	sp, #32
   12c8c:	aa02      	add	r2, sp, #8
   12c8e:	4b11      	ldr	r3, [pc, #68]	; (12cd4 <bt_hci_le_enh_conn_complete+0x2e0>)
   12c90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c94:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12c98:	2303      	movs	r3, #3
   12c9a:	4807      	ldr	r0, [pc, #28]	; (12cb8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12c9c:	f842 3f10 	str.w	r3, [r2, #16]!
   12ca0:	f019 f995 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12ca4:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   12ca6:	4620      	mov	r0, r4
   12ca8:	e6df      	b.n	12a6a <bt_hci_le_enh_conn_complete+0x76>
		return -ENOBUFS;
   12caa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12cae:	e7ad      	b.n	12c0c <bt_hci_le_enh_conn_complete+0x218>
   12cb0:	20021b12 	.word	0x20021b12
   12cb4:	00034aaf 	.word	0x00034aaf
   12cb8:	000314dc 	.word	0x000314dc
   12cbc:	00034ad0 	.word	0x00034ad0
   12cc0:	00034ae9 	.word	0x00034ae9
   12cc4:	01000003 	.word	0x01000003
   12cc8:	20008000 	.word	0x20008000
   12ccc:	00034b05 	.word	0x00034b05
   12cd0:	00034b26 	.word	0x00034b26
   12cd4:	00034b3d 	.word	0x00034b3d

00012cd8 <le_legacy_conn_complete>:
{
   12cd8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   12cda:	68c1      	ldr	r1, [r0, #12]
{
   12cdc:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   12cde:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12ce0:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   12ce2:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   12ce6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12cea:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   12cec:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   12cf0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12cf4:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   12cf8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   12cfc:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   12d00:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   12d04:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   12d08:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   12d0c:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   12d10:	7b4b      	ldrb	r3, [r1, #13]
   12d12:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12d16:	f019 f953 	bl	2bfc0 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   12d1a:	4907      	ldr	r1, [pc, #28]	; (12d38 <le_legacy_conn_complete+0x60>)
   12d1c:	f10d 000b 	add.w	r0, sp, #11
   12d20:	f019 f949 	bl	2bfb6 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12d24:	f10d 0011 	add.w	r0, sp, #17
   12d28:	f019 f945 	bl	2bfb6 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   12d2c:	4668      	mov	r0, sp
   12d2e:	f7ff fe61 	bl	129f4 <bt_hci_le_enh_conn_complete>
}
   12d32:	b009      	add	sp, #36	; 0x24
   12d34:	f85d fb04 	ldr.w	pc, [sp], #4
   12d38:	000345d6 	.word	0x000345d6

00012d3c <bt_security_err_get>:
	switch (hci_err) {
   12d3c:	2829      	cmp	r0, #41	; 0x29
   12d3e:	bf9a      	itte	ls
   12d40:	4b01      	ldrls	r3, [pc, #4]	; (12d48 <bt_security_err_get+0xc>)
   12d42:	5c18      	ldrbls	r0, [r3, r0]
{
   12d44:	2009      	movhi	r0, #9
}
   12d46:	4770      	bx	lr
   12d48:	00034df2 	.word	0x00034df2

00012d4c <hci_encrypt_key_refresh_complete>:
{
   12d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d4e:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   12d50:	68c3      	ldr	r3, [r0, #12]
{
   12d52:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   12d54:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   12d58:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   12d5a:	4630      	mov	r0, r6
   12d5c:	f002 f8a2 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   12d60:	4604      	mov	r4, r0
   12d62:	b988      	cbnz	r0, 12d88 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12d64:	466c      	mov	r4, sp
   12d66:	b088      	sub	sp, #32
   12d68:	466a      	mov	r2, sp
   12d6a:	4b1f      	ldr	r3, [pc, #124]	; (12de8 <hci_encrypt_key_refresh_complete+0x9c>)
   12d6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12d70:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12d74:	2303      	movs	r3, #3
   12d76:	481d      	ldr	r0, [pc, #116]	; (12dec <hci_encrypt_key_refresh_complete+0xa0>)
   12d78:	f842 3f10 	str.w	r3, [r2, #16]!
   12d7c:	f019 f927 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12d80:	46a5      	mov	sp, r4
}
   12d82:	371c      	adds	r7, #28
   12d84:	46bd      	mov	sp, r7
   12d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   12d88:	b15d      	cbz	r5, 12da2 <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12d8a:	4628      	mov	r0, r5
   12d8c:	f7ff ffd6 	bl	12d3c <bt_security_err_get>
   12d90:	4629      	mov	r1, r5
   12d92:	4602      	mov	r2, r0
   12d94:	4620      	mov	r0, r4
   12d96:	f002 fad5 	bl	15344 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12d9a:	4620      	mov	r0, r4
   12d9c:	f002 f852 	bl	14e44 <bt_conn_unref>
   12da0:	e7ef      	b.n	12d82 <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   12da2:	7883      	ldrb	r3, [r0, #2]
   12da4:	2b01      	cmp	r3, #1
   12da6:	d1f0      	bne.n	12d8a <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   12da8:	f007 fa32 	bl	1a210 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12dac:	4620      	mov	r0, r4
   12dae:	f019 f8de 	bl	2bf6e <update_sec_level>
   12db2:	2800      	cmp	r0, #0
   12db4:	d1e9      	bne.n	12d8a <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12db6:	2005      	movs	r0, #5
   12db8:	f7ff ffc0 	bl	12d3c <bt_security_err_get>
   12dbc:	2105      	movs	r1, #5
   12dbe:	4602      	mov	r2, r0
   12dc0:	4620      	mov	r0, r4
   12dc2:	f002 fabf 	bl	15344 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12dc6:	4b0a      	ldr	r3, [pc, #40]	; (12df0 <hci_encrypt_key_refresh_complete+0xa4>)
   12dc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12dcc:	617b      	str	r3, [r7, #20]
   12dce:	2302      	movs	r3, #2
   12dd0:	4806      	ldr	r0, [pc, #24]	; (12dec <hci_encrypt_key_refresh_complete+0xa0>)
   12dd2:	613b      	str	r3, [r7, #16]
   12dd4:	f107 0210 	add.w	r2, r7, #16
   12dd8:	f019 f8f9 	bl	2bfce <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12ddc:	2105      	movs	r1, #5
   12dde:	4620      	mov	r0, r4
   12de0:	f019 fc05 	bl	2c5ee <bt_conn_disconnect>
   12de4:	e7d9      	b.n	12d9a <hci_encrypt_key_refresh_complete+0x4e>
   12de6:	bf00      	nop
   12de8:	0003489b 	.word	0x0003489b
   12dec:	000314dc 	.word	0x000314dc
   12df0:	00034b59 	.word	0x00034b59

00012df4 <hci_encrypt_change>:
{
   12df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12df8:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   12dfa:	68c6      	ldr	r6, [r0, #12]
{
   12dfc:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12dfe:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   12e02:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   12e04:	4640      	mov	r0, r8
   12e06:	f002 f84d 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   12e0a:	4604      	mov	r4, r0
   12e0c:	b990      	cbnz	r0, 12e34 <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12e0e:	466c      	mov	r4, sp
   12e10:	b088      	sub	sp, #32
   12e12:	466a      	mov	r2, sp
   12e14:	4b23      	ldr	r3, [pc, #140]	; (12ea4 <hci_encrypt_change+0xb0>)
   12e16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e1a:	e9c2 3805 	strd	r3, r8, [r2, #20]
   12e1e:	2303      	movs	r3, #3
   12e20:	4821      	ldr	r0, [pc, #132]	; (12ea8 <hci_encrypt_change+0xb4>)
   12e22:	f842 3f10 	str.w	r3, [r2, #16]!
   12e26:	f019 f8d2 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12e2a:	46a5      	mov	sp, r4
}
   12e2c:	3718      	adds	r7, #24
   12e2e:	46bd      	mov	sp, r7
   12e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   12e34:	b15d      	cbz	r5, 12e4e <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   12e36:	4628      	mov	r0, r5
   12e38:	f7ff ff80 	bl	12d3c <bt_security_err_get>
   12e3c:	4629      	mov	r1, r5
   12e3e:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e40:	4620      	mov	r0, r4
   12e42:	f002 fa7f 	bl	15344 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12e46:	4620      	mov	r0, r4
   12e48:	f001 fffc 	bl	14e44 <bt_conn_unref>
   12e4c:	e7ee      	b.n	12e2c <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   12e4e:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   12e50:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   12e52:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   12e54:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   12e56:	d005      	beq.n	12e64 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e58:	2000      	movs	r0, #0
   12e5a:	f7ff ff6f 	bl	12d3c <bt_security_err_get>
   12e5e:	2100      	movs	r1, #0
   12e60:	4602      	mov	r2, r0
   12e62:	e7ed      	b.n	12e40 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   12e64:	b10b      	cbz	r3, 12e6a <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   12e66:	f007 f9d3 	bl	1a210 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12e6a:	4620      	mov	r0, r4
   12e6c:	f019 f87f 	bl	2bf6e <update_sec_level>
   12e70:	2800      	cmp	r0, #0
   12e72:	d1f1      	bne.n	12e58 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e74:	2005      	movs	r0, #5
   12e76:	f7ff ff61 	bl	12d3c <bt_security_err_get>
   12e7a:	2105      	movs	r1, #5
   12e7c:	4602      	mov	r2, r0
   12e7e:	4620      	mov	r0, r4
   12e80:	f002 fa60 	bl	15344 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12e84:	4b09      	ldr	r3, [pc, #36]	; (12eac <hci_encrypt_change+0xb8>)
   12e86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12e8a:	617b      	str	r3, [r7, #20]
   12e8c:	2302      	movs	r3, #2
   12e8e:	4806      	ldr	r0, [pc, #24]	; (12ea8 <hci_encrypt_change+0xb4>)
   12e90:	613b      	str	r3, [r7, #16]
   12e92:	f107 0210 	add.w	r2, r7, #16
   12e96:	f019 f89a 	bl	2bfce <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12e9a:	2105      	movs	r1, #5
   12e9c:	4620      	mov	r0, r4
   12e9e:	f019 fba6 	bl	2c5ee <bt_conn_disconnect>
   12ea2:	e7d0      	b.n	12e46 <hci_encrypt_change+0x52>
   12ea4:	0003489b 	.word	0x0003489b
   12ea8:	000314dc 	.word	0x000314dc
   12eac:	00034b59 	.word	0x00034b59

00012eb0 <bt_send>:
	return bt_dev.drv->send(buf);
   12eb0:	4b02      	ldr	r3, [pc, #8]	; (12ebc <bt_send+0xc>)
   12eb2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   12eb6:	695b      	ldr	r3, [r3, #20]
   12eb8:	4718      	bx	r3
   12eba:	bf00      	nop
   12ebc:	20008000 	.word	0x20008000

00012ec0 <bt_hci_cmd_send>:
{
   12ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ec2:	4605      	mov	r5, r0
	if (!buf) {
   12ec4:	460c      	mov	r4, r1
{
   12ec6:	af00      	add	r7, sp, #0
	if (!buf) {
   12ec8:	b919      	cbnz	r1, 12ed2 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   12eca:	f7ff fc75 	bl	127b8 <bt_hci_cmd_create>
		if (!buf) {
   12ece:	4604      	mov	r4, r0
   12ed0:	b318      	cbz	r0, 12f1a <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12ed2:	f640 4335 	movw	r3, #3125	; 0xc35
   12ed6:	429d      	cmp	r5, r3
   12ed8:	d119      	bne.n	12f0e <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   12eda:	4620      	mov	r0, r4
   12edc:	f7ff ffe8 	bl	12eb0 <bt_send>
		if (err) {
   12ee0:	4605      	mov	r5, r0
   12ee2:	b188      	cbz	r0, 12f08 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   12ee4:	466e      	mov	r6, sp
   12ee6:	b088      	sub	sp, #32
   12ee8:	466a      	mov	r2, sp
   12eea:	4b0d      	ldr	r3, [pc, #52]	; (12f20 <bt_hci_cmd_send+0x60>)
   12eec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12ef0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12ef4:	2303      	movs	r3, #3
   12ef6:	480b      	ldr	r0, [pc, #44]	; (12f24 <bt_hci_cmd_send+0x64>)
   12ef8:	f842 3f10 	str.w	r3, [r2, #16]!
   12efc:	f019 f867 	bl	2bfce <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   12f00:	4620      	mov	r0, r4
   12f02:	46b5      	mov	sp, r6
   12f04:	f008 fb40 	bl	1b588 <net_buf_unref>
}
   12f08:	4628      	mov	r0, r5
   12f0a:	46bd      	mov	sp, r7
   12f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12f0e:	4621      	mov	r1, r4
   12f10:	4805      	ldr	r0, [pc, #20]	; (12f28 <bt_hci_cmd_send+0x68>)
   12f12:	f008 fb13 	bl	1b53c <net_buf_put>
	return 0;
   12f16:	2500      	movs	r5, #0
   12f18:	e7f6      	b.n	12f08 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   12f1a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12f1e:	e7f3      	b.n	12f08 <bt_hci_cmd_send+0x48>
   12f20:	00034b7f 	.word	0x00034b7f
   12f24:	000314dc 	.word	0x000314dc
   12f28:	20008144 	.word	0x20008144

00012f2c <bt_hci_host_num_completed_packets>:
{
   12f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f30:	b086      	sub	sp, #24
   12f32:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   12f34:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   12f36:	7e46      	ldrb	r6, [r0, #25]
{
   12f38:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12f3a:	7a80      	ldrb	r0, [r0, #10]
   12f3c:	f008 f8ea 	bl	1b114 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   12f40:	4621      	mov	r1, r4
   12f42:	f01d f948 	bl	301d6 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   12f46:	4b2d      	ldr	r3, [pc, #180]	; (12ffc <bt_hci_host_num_completed_packets+0xd0>)
   12f48:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   12f4c:	069b      	lsls	r3, r3, #26
   12f4e:	d513      	bpl.n	12f78 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
   12f50:	4630      	mov	r0, r6
   12f52:	f002 fc63 	bl	1581c <bt_conn_lookup_index>
	if (!conn) {
   12f56:	4604      	mov	r4, r0
   12f58:	b990      	cbnz	r0, 12f80 <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   12f5a:	466c      	mov	r4, sp
   12f5c:	b088      	sub	sp, #32
   12f5e:	466a      	mov	r2, sp
   12f60:	4b27      	ldr	r3, [pc, #156]	; (13000 <bt_hci_host_num_completed_packets+0xd4>)
   12f62:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12f66:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12f6a:	2303      	movs	r3, #3
   12f6c:	4825      	ldr	r0, [pc, #148]	; (13004 <bt_hci_host_num_completed_packets+0xd8>)
   12f6e:	f842 3f10 	str.w	r3, [r2, #16]!
   12f72:	f019 f82c 	bl	2bfce <z_log_msg_static_create.constprop.0>
   12f76:	46a5      	mov	sp, r4
}
   12f78:	3718      	adds	r7, #24
   12f7a:	46bd      	mov	sp, r7
   12f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   12f80:	7b43      	ldrb	r3, [r0, #13]
   12f82:	3b07      	subs	r3, #7
   12f84:	2b01      	cmp	r3, #1
   12f86:	d90e      	bls.n	12fa6 <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
   12f88:	4b1f      	ldr	r3, [pc, #124]	; (13008 <bt_hci_host_num_completed_packets+0xdc>)
   12f8a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12f8e:	617b      	str	r3, [r7, #20]
   12f90:	2302      	movs	r3, #2
   12f92:	481c      	ldr	r0, [pc, #112]	; (13004 <bt_hci_host_num_completed_packets+0xd8>)
   12f94:	613b      	str	r3, [r7, #16]
   12f96:	f107 0210 	add.w	r2, r7, #16
   12f9a:	f019 f818 	bl	2bfce <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   12f9e:	4620      	mov	r0, r4
   12fa0:	f001 ff50 	bl	14e44 <bt_conn_unref>
		return;
   12fa4:	e7e8      	b.n	12f78 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
   12fa6:	f001 ff4d 	bl	14e44 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   12faa:	2105      	movs	r1, #5
   12fac:	f640 4035 	movw	r0, #3125	; 0xc35
   12fb0:	f7ff fc02 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   12fb4:	4604      	mov	r4, r0
   12fb6:	b958      	cbnz	r0, 12fd0 <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
   12fb8:	4b14      	ldr	r3, [pc, #80]	; (1300c <bt_hci_host_num_completed_packets+0xe0>)
   12fba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12fbe:	617b      	str	r3, [r7, #20]
   12fc0:	2302      	movs	r3, #2
   12fc2:	4810      	ldr	r0, [pc, #64]	; (13004 <bt_hci_host_num_completed_packets+0xd8>)
   12fc4:	613b      	str	r3, [r7, #16]
   12fc6:	f107 0210 	add.w	r2, r7, #16
   12fca:	f019 f800 	bl	2bfce <z_log_msg_static_create.constprop.0>
		return;
   12fce:	e7d3      	b.n	12f78 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
   12fd0:	f100 080c 	add.w	r8, r0, #12
   12fd4:	2101      	movs	r1, #1
   12fd6:	4640      	mov	r0, r8
   12fd8:	f008 fbf8 	bl	1b7cc <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   12fdc:	2601      	movs	r6, #1
   12fde:	2104      	movs	r1, #4
   12fe0:	7006      	strb	r6, [r0, #0]
   12fe2:	4640      	mov	r0, r8
   12fe4:	f008 fbf2 	bl	1b7cc <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   12fe8:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   12fea:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   12fec:	7086      	strb	r6, [r0, #2]
   12fee:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   12ff0:	4621      	mov	r1, r4
   12ff2:	f640 4035 	movw	r0, #3125	; 0xc35
   12ff6:	f7ff ff63 	bl	12ec0 <bt_hci_cmd_send>
   12ffa:	e7bd      	b.n	12f78 <bt_hci_host_num_completed_packets+0x4c>
   12ffc:	20008000 	.word	0x20008000
   13000:	00034ba1 	.word	0x00034ba1
   13004:	000314dc 	.word	0x000314dc
   13008:	00034bca 	.word	0x00034bca
   1300c:	00034bf6 	.word	0x00034bf6

00013010 <le_ltk_request>:
{
   13010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13014:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   13016:	68c4      	ldr	r4, [r0, #12]
{
   13018:	af02      	add	r7, sp, #8
	handle = sys_le16_to_cpu(evt->handle);
   1301a:	8826      	ldrh	r6, [r4, #0]
   1301c:	fa1f f886 	uxth.w	r8, r6
	conn = bt_conn_lookup_handle(handle);
   13020:	4640      	mov	r0, r8
   13022:	f001 ff3f 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   13026:	4605      	mov	r5, r0
   13028:	b990      	cbnz	r0, 13050 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1302a:	466c      	mov	r4, sp
   1302c:	b088      	sub	sp, #32
   1302e:	aa02      	add	r2, sp, #8
   13030:	4b2c      	ldr	r3, [pc, #176]	; (130e4 <le_ltk_request+0xd4>)
   13032:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13036:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1303a:	2303      	movs	r3, #3
   1303c:	482a      	ldr	r0, [pc, #168]	; (130e8 <le_ltk_request+0xd8>)
   1303e:	f842 3f10 	str.w	r3, [r2, #16]!
   13042:	f018 ffc4 	bl	2bfce <z_log_msg_static_create.constprop.0>
   13046:	46a5      	mov	sp, r4
}
   13048:	3728      	adds	r7, #40	; 0x28
   1304a:	46bd      	mov	sp, r7
   1304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   13050:	f8d4 2002 	ldr.w	r2, [r4, #2]
   13054:	f8d4 3006 	ldr.w	r3, [r4, #6]
   13058:	9701      	str	r7, [sp, #4]
   1305a:	8961      	ldrh	r1, [r4, #10]
   1305c:	9100      	str	r1, [sp, #0]
   1305e:	f01a fc3e 	bl	2d8de <bt_smp_request_ltk>
   13062:	b370      	cbz	r0, 130c2 <le_ltk_request+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   13064:	2112      	movs	r1, #18
   13066:	f242 001a 	movw	r0, #8218	; 0x201a
   1306a:	f7ff fba5 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   1306e:	4604      	mov	r4, r0
   13070:	b970      	cbnz	r0, 13090 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
   13072:	4b1e      	ldr	r3, [pc, #120]	; (130ec <le_ltk_request+0xdc>)
   13074:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13078:	627b      	str	r3, [r7, #36]	; 0x24
   1307a:	2302      	movs	r3, #2
   1307c:	481a      	ldr	r0, [pc, #104]	; (130e8 <le_ltk_request+0xd8>)
   1307e:	623b      	str	r3, [r7, #32]
   13080:	f107 0220 	add.w	r2, r7, #32
   13084:	f018 ffa3 	bl	2bfce <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   13088:	4628      	mov	r0, r5
   1308a:	f001 fedb 	bl	14e44 <bt_conn_unref>
   1308e:	e7db      	b.n	13048 <le_ltk_request+0x38>
   13090:	2112      	movs	r1, #18
   13092:	300c      	adds	r0, #12
   13094:	f008 fb9a 	bl	1b7cc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   13098:	4603      	mov	r3, r0
   1309a:	463a      	mov	r2, r7
   1309c:	f823 6b02 	strh.w	r6, [r3], #2
   130a0:	f107 0c10 	add.w	ip, r7, #16
   130a4:	4616      	mov	r6, r2
   130a6:	ce03      	ldmia	r6!, {r0, r1}
   130a8:	4566      	cmp	r6, ip
   130aa:	6018      	str	r0, [r3, #0]
   130ac:	6059      	str	r1, [r3, #4]
   130ae:	4632      	mov	r2, r6
   130b0:	f103 0308 	add.w	r3, r3, #8
   130b4:	d1f6      	bne.n	130a4 <le_ltk_request+0x94>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   130b6:	4621      	mov	r1, r4
   130b8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   130bc:	f7ff ff00 	bl	12ec0 <bt_hci_cmd_send>
   130c0:	e7e2      	b.n	13088 <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   130c2:	2102      	movs	r1, #2
   130c4:	f242 001b 	movw	r0, #8219	; 0x201b
   130c8:	f7ff fb76 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   130cc:	4604      	mov	r4, r0
   130ce:	2800      	cmp	r0, #0
   130d0:	d0cf      	beq.n	13072 <le_ltk_request+0x62>
   130d2:	2102      	movs	r1, #2
   130d4:	300c      	adds	r0, #12
   130d6:	f008 fb79 	bl	1b7cc <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   130da:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   130dc:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   130de:	f242 001b 	movw	r0, #8219	; 0x201b
   130e2:	e7eb      	b.n	130bc <le_ltk_request+0xac>
   130e4:	00034877 	.word	0x00034877
   130e8:	000314dc 	.word	0x000314dc
   130ec:	00034c19 	.word	0x00034c19

000130f0 <le_conn_param_req>:
{
   130f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   130f2:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   130f4:	68c3      	ldr	r3, [r0, #12]
{
   130f6:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   130f8:	78d9      	ldrb	r1, [r3, #3]
   130fa:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   130fc:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   130fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13102:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   13104:	7959      	ldrb	r1, [r3, #5]
   13106:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   13108:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1310a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1310e:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   13110:	799a      	ldrb	r2, [r3, #6]
   13112:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   13114:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   13116:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1311a:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1311c:	7a1a      	ldrb	r2, [r3, #8]
   1311e:	7a5b      	ldrb	r3, [r3, #9]
   13120:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   13124:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   13126:	f001 febd 	bl	14ea4 <bt_conn_lookup_handle>
	if (!conn) {
   1312a:	4605      	mov	r5, r0
   1312c:	b9a8      	cbnz	r0, 1315a <le_conn_param_req+0x6a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1312e:	466d      	mov	r5, sp
   13130:	b088      	sub	sp, #32
   13132:	466a      	mov	r2, sp
   13134:	4b1e      	ldr	r3, [pc, #120]	; (131b0 <le_conn_param_req+0xc0>)
   13136:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1313a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1313e:	2303      	movs	r3, #3
   13140:	481c      	ldr	r0, [pc, #112]	; (131b4 <le_conn_param_req+0xc4>)
   13142:	f842 3f10 	str.w	r3, [r2, #16]!
   13146:	f018 ff42 	bl	2bfce <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1314a:	2102      	movs	r1, #2
   1314c:	46ad      	mov	sp, r5
   1314e:	4620      	mov	r0, r4
   13150:	f018 ffdd 	bl	2c10e <le_conn_param_neg_reply>
}
   13154:	370c      	adds	r7, #12
   13156:	46bd      	mov	sp, r7
   13158:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1315a:	4639      	mov	r1, r7
   1315c:	f002 f85a 	bl	15214 <le_param_req>
   13160:	b938      	cbnz	r0, 13172 <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   13162:	211e      	movs	r1, #30
   13164:	4620      	mov	r0, r4
   13166:	f018 ffd2 	bl	2c10e <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1316a:	4628      	mov	r0, r5
   1316c:	f001 fe6a 	bl	14e44 <bt_conn_unref>
   13170:	e7f0      	b.n	13154 <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   13172:	210e      	movs	r1, #14
   13174:	f242 0020 	movw	r0, #8224	; 0x2020
   13178:	f7ff fb1e 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   1317c:	4604      	mov	r4, r0
   1317e:	2800      	cmp	r0, #0
   13180:	d0f3      	beq.n	1316a <le_conn_param_req+0x7a>
   13182:	210e      	movs	r1, #14
   13184:	300c      	adds	r0, #12
   13186:	f008 fb21 	bl	1b7cc <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1318a:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   1318c:	8006      	strh	r6, [r0, #0]
   1318e:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   13192:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   13194:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   13196:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   13198:	887b      	ldrh	r3, [r7, #2]
   1319a:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1319c:	88bb      	ldrh	r3, [r7, #4]
   1319e:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   131a0:	88fb      	ldrh	r3, [r7, #6]
   131a2:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   131a4:	f242 0020 	movw	r0, #8224	; 0x2020
   131a8:	f7ff fe8a 	bl	12ec0 <bt_hci_cmd_send>
   131ac:	e7dd      	b.n	1316a <le_conn_param_req+0x7a>
   131ae:	bf00      	nop
   131b0:	00034877 	.word	0x00034877
   131b4:	000314dc 	.word	0x000314dc

000131b8 <hci_tx_thread>:
{
   131b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   131bc:	f8df 8154 	ldr.w	r8, [pc, #340]	; 13314 <hci_tx_thread+0x15c>
{
   131c0:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
   131c2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 13318 <hci_tx_thread+0x160>
{
   131c6:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   131c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   131cc:	4853      	ldr	r0, [pc, #332]	; (1331c <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   131ce:	f36f 3394 	bfc	r3, #14, #7
   131d2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   131d6:	f001 fdd5 	bl	14d84 <bt_conn_prepare_events>
   131da:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   131dc:	f04f 32ff 	mov.w	r2, #4294967295
   131e0:	f04f 33ff 	mov.w	r3, #4294967295
   131e4:	4629      	mov	r1, r5
   131e6:	484b      	ldr	r0, [pc, #300]	; (13314 <hci_tx_thread+0x15c>)
   131e8:	f015 f860 	bl	282ac <z_impl_k_poll>
		BT_ASSERT(err == 0);
   131ec:	b160      	cbz	r0, 13208 <hci_tx_thread+0x50>
   131ee:	f640 13e6 	movw	r3, #2534	; 0x9e6
   131f2:	464a      	mov	r2, r9
   131f4:	494a      	ldr	r1, [pc, #296]	; (13320 <hci_tx_thread+0x168>)
   131f6:	484b      	ldr	r0, [pc, #300]	; (13324 <hci_tx_thread+0x16c>)
   131f8:	f017 fa5f 	bl	2a6ba <assert_print>
   131fc:	4040      	eors	r0, r0
   131fe:	f380 8811 	msr	BASEPRI, r0
   13202:	f04f 0003 	mov.w	r0, #3
   13206:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   13208:	f04f 0a03 	mov.w	sl, #3
{
   1320c:	4e41      	ldr	r6, [pc, #260]	; (13314 <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
   1320e:	b915      	cbnz	r5, 13216 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   13210:	f013 ff94 	bl	2713c <z_impl_k_yield>
	while (1) {
   13214:	e7d8      	b.n	131c8 <hci_tx_thread+0x10>
		switch (ev->state) {
   13216:	68f3      	ldr	r3, [r6, #12]
   13218:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1321c:	2b01      	cmp	r3, #1
   1321e:	d960      	bls.n	132e2 <hci_tx_thread+0x12a>
   13220:	2b04      	cmp	r3, #4
   13222:	d168      	bne.n	132f6 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   13224:	7b33      	ldrb	r3, [r6, #12]
   13226:	2b00      	cmp	r3, #0
   13228:	d15e      	bne.n	132e8 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1322a:	2200      	movs	r2, #0
   1322c:	2300      	movs	r3, #0
   1322e:	483e      	ldr	r0, [pc, #248]	; (13328 <hci_tx_thread+0x170>)
   13230:	f01a fed4 	bl	2dfdc <net_buf_get>
	BT_ASSERT(buf);
   13234:	4604      	mov	r4, r0
   13236:	b960      	cbnz	r0, 13252 <hci_tx_thread+0x9a>
   13238:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1323c:	464a      	mov	r2, r9
   1323e:	493b      	ldr	r1, [pc, #236]	; (1332c <hci_tx_thread+0x174>)
   13240:	4838      	ldr	r0, [pc, #224]	; (13324 <hci_tx_thread+0x16c>)
   13242:	f017 fa3a 	bl	2a6ba <assert_print>
   13246:	4040      	eors	r0, r0
   13248:	f380 8811 	msr	BASEPRI, r0
   1324c:	f04f 0003 	mov.w	r0, #3
   13250:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   13252:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 13330 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   13256:	f04f 33ff 	mov.w	r3, #4294967295
   1325a:	f04f 32ff 	mov.w	r2, #4294967295
   1325e:	4835      	ldr	r0, [pc, #212]	; (13334 <hci_tx_thread+0x17c>)
   13260:	f012 f9f6 	bl	25650 <z_impl_k_sem_take>
   13264:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   13268:	b18b      	cbz	r3, 1328e <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   1326a:	4b33      	ldr	r3, [pc, #204]	; (13338 <hci_tx_thread+0x180>)
   1326c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13270:	617b      	str	r3, [r7, #20]
   13272:	2302      	movs	r3, #2
   13274:	4831      	ldr	r0, [pc, #196]	; (1333c <hci_tx_thread+0x184>)
   13276:	613b      	str	r3, [r7, #16]
   13278:	f107 0210 	add.w	r2, r7, #16
   1327c:	f018 fea7 	bl	2bfce <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   13280:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   13284:	f008 f980 	bl	1b588 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13288:	2300      	movs	r3, #0
   1328a:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1328e:	4620      	mov	r0, r4
   13290:	f008 f9be 	bl	1b610 <net_buf_ref>
   13294:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   13298:	4620      	mov	r0, r4
   1329a:	f7ff fe09 	bl	12eb0 <bt_send>
	if (err) {
   1329e:	b300      	cbz	r0, 132e2 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   132a0:	46eb      	mov	fp, sp
   132a2:	b088      	sub	sp, #32
   132a4:	466a      	mov	r2, sp
   132a6:	4b26      	ldr	r3, [pc, #152]	; (13340 <hci_tx_thread+0x188>)
   132a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   132ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   132b0:	2303      	movs	r3, #3
   132b2:	4822      	ldr	r0, [pc, #136]	; (1333c <hci_tx_thread+0x184>)
   132b4:	f842 3f10 	str.w	r3, [r2, #16]!
   132b8:	f018 fe89 	bl	2bfce <z_log_msg_static_create.constprop.0>
   132bc:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   132be:	481d      	ldr	r0, [pc, #116]	; (13334 <hci_tx_thread+0x17c>)
   132c0:	f012 f982 	bl	255c8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   132c4:	4620      	mov	r0, r4
   132c6:	f007 ff2d 	bl	1b124 <net_buf_id>
   132ca:	220c      	movs	r2, #12
   132cc:	4b1d      	ldr	r3, [pc, #116]	; (13344 <hci_tx_thread+0x18c>)
   132ce:	211f      	movs	r1, #31
   132d0:	fb02 3000 	mla	r0, r2, r0, r3
   132d4:	4622      	mov	r2, r4
   132d6:	8840      	ldrh	r0, [r0, #2]
   132d8:	f7ff f8a0 	bl	1241c <hci_cmd_done>
		net_buf_unref(buf);
   132dc:	4620      	mov	r0, r4
   132de:	f008 f953 	bl	1b588 <net_buf_unref>
	for (; count; ev++, count--) {
   132e2:	3614      	adds	r6, #20
   132e4:	3d01      	subs	r5, #1
   132e6:	e792      	b.n	1320e <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   132e8:	2b01      	cmp	r3, #1
   132ea:	d1fa      	bne.n	132e2 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   132ec:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   132ee:	3838      	subs	r0, #56	; 0x38
   132f0:	f002 f9fe 	bl	156f0 <bt_conn_process_tx>
   132f4:	e7f5      	b.n	132e2 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   132f6:	466c      	mov	r4, sp
   132f8:	b088      	sub	sp, #32
   132fa:	466a      	mov	r2, sp
   132fc:	4912      	ldr	r1, [pc, #72]	; (13348 <hci_tx_thread+0x190>)
   132fe:	480f      	ldr	r0, [pc, #60]	; (1333c <hci_tx_thread+0x184>)
		switch (ev->state) {
   13300:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   13304:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13308:	f842 af10 	str.w	sl, [r2, #16]!
   1330c:	f018 fe5f 	bl	2bfce <z_log_msg_static_create.constprop.0>
   13310:	46a5      	mov	sp, r4
   13312:	e7e6      	b.n	132e2 <hci_tx_thread+0x12a>
   13314:	20008488 	.word	0x20008488
   13318:	000348e3 	.word	0x000348e3
   1331c:	2000849c 	.word	0x2000849c
   13320:	000334d3 	.word	0x000334d3
   13324:	00032659 	.word	0x00032659
   13328:	20008144 	.word	0x20008144
   1332c:	00036969 	.word	0x00036969
   13330:	20008000 	.word	0x20008000
   13334:	20008120 	.word	0x20008120
   13338:	00034c30 	.word	0x00034c30
   1333c:	000314dc 	.word	0x000314dc
   13340:	00034b7f 	.word	0x00034b7f
   13344:	2002154c 	.word	0x2002154c
   13348:	00034c4b 	.word	0x00034c4b

0001334c <hci_event_prio>:
{
   1334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13350:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   13352:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   13356:	4630      	mov	r0, r6
   13358:	f01a fe51 	bl	2dffe <net_buf_simple_headroom>
	state->len = buf->len;
   1335c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   13360:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13362:	f1b8 0f01 	cmp.w	r8, #1
   13366:	d80c      	bhi.n	13382 <hci_event_prio+0x36>
   13368:	f640 537b 	movw	r3, #3451	; 0xd7b
   1336c:	4a1b      	ldr	r2, [pc, #108]	; (133dc <hci_event_prio+0x90>)
   1336e:	491c      	ldr	r1, [pc, #112]	; (133e0 <hci_event_prio+0x94>)
   13370:	481c      	ldr	r0, [pc, #112]	; (133e4 <hci_event_prio+0x98>)
   13372:	f017 f9a2 	bl	2a6ba <assert_print>
   13376:	4040      	eors	r0, r0
   13378:	f380 8811 	msr	BASEPRI, r0
   1337c:	f04f 0003 	mov.w	r0, #3
   13380:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   13382:	4630      	mov	r0, r6
   13384:	2102      	movs	r1, #2
   13386:	f008 fa03 	bl	1b790 <net_buf_simple_pull_mem>
   1338a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1338c:	7800      	ldrb	r0, [r0, #0]
   1338e:	f018 fddc 	bl	2bf4a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13392:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13394:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13396:	d40c      	bmi.n	133b2 <hci_event_prio+0x66>
   13398:	f640 537f 	movw	r3, #3455	; 0xd7f
   1339c:	4a0f      	ldr	r2, [pc, #60]	; (133dc <hci_event_prio+0x90>)
   1339e:	4912      	ldr	r1, [pc, #72]	; (133e8 <hci_event_prio+0x9c>)
   133a0:	4810      	ldr	r0, [pc, #64]	; (133e4 <hci_event_prio+0x98>)
   133a2:	f017 f98a 	bl	2a6ba <assert_print>
   133a6:	4040      	eors	r0, r0
   133a8:	f380 8811 	msr	BASEPRI, r0
   133ac:	f04f 0003 	mov.w	r0, #3
   133b0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   133b2:	2305      	movs	r3, #5
   133b4:	4621      	mov	r1, r4
   133b6:	4a0d      	ldr	r2, [pc, #52]	; (133ec <hci_event_prio+0xa0>)
   133b8:	7838      	ldrb	r0, [r7, #0]
   133ba:	f7fe fef5 	bl	121a8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   133be:	07b3      	lsls	r3, r6, #30
   133c0:	d507      	bpl.n	133d2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   133c2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   133c4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   133c8:	fa13 f585 	uxtah	r5, r3, r5
   133cc:	60e5      	str	r5, [r4, #12]
}
   133ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   133d2:	4620      	mov	r0, r4
}
   133d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   133d8:	f008 b8d6 	b.w	1b588 <net_buf_unref>
   133dc:	000348e3 	.word	0x000348e3
   133e0:	00034917 	.word	0x00034917
   133e4:	00032659 	.word	0x00032659
   133e8:	00034c6c 	.word	0x00034c6c
   133ec:	00031e9c 	.word	0x00031e9c

000133f0 <bt_recv>:
{
   133f0:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   133f2:	7e03      	ldrb	r3, [r0, #24]
   133f4:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   133f6:	2b01      	cmp	r3, #1
{
   133f8:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   133fa:	d006      	beq.n	1340a <bt_recv+0x1a>
   133fc:	2b03      	cmp	r3, #3
   133fe:	d112      	bne.n	13426 <bt_recv+0x36>
			rx_queue_put(buf);
   13400:	f7fe fdfe 	bl	12000 <rx_queue_put>
		return 0;
   13404:	2000      	movs	r0, #0
}
   13406:	46bd      	mov	sp, r7
   13408:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1340a:	68c3      	ldr	r3, [r0, #12]
   1340c:	7818      	ldrb	r0, [r3, #0]
   1340e:	f018 fd9c 	bl	2bf4a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13412:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13414:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13416:	d502      	bpl.n	1341e <bt_recv+0x2e>
			hci_event_prio(buf);
   13418:	4620      	mov	r0, r4
   1341a:	f7ff ff97 	bl	1334c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1341e:	07ab      	lsls	r3, r5, #30
   13420:	d5f0      	bpl.n	13404 <bt_recv+0x14>
			rx_queue_put(buf);
   13422:	4620      	mov	r0, r4
   13424:	e7ec      	b.n	13400 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   13426:	466d      	mov	r5, sp
   13428:	b088      	sub	sp, #32
   1342a:	466a      	mov	r2, sp
   1342c:	4908      	ldr	r1, [pc, #32]	; (13450 <bt_recv+0x60>)
   1342e:	4809      	ldr	r0, [pc, #36]	; (13454 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   13430:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   13434:	2303      	movs	r3, #3
   13436:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1343a:	f842 3f10 	str.w	r3, [r2, #16]!
   1343e:	f018 fdc6 	bl	2bfce <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   13442:	4620      	mov	r0, r4
   13444:	46ad      	mov	sp, r5
   13446:	f008 f89f 	bl	1b588 <net_buf_unref>
		return -EINVAL;
   1344a:	f06f 0015 	mvn.w	r0, #21
   1344e:	e7da      	b.n	13406 <bt_recv+0x16>
   13450:	00034c85 	.word	0x00034c85
   13454:	000314dc 	.word	0x000314dc

00013458 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   13458:	4a08      	ldr	r2, [pc, #32]	; (1347c <bt_hci_driver_register+0x24>)
{
   1345a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1345c:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   13460:	b930      	cbnz	r0, 13470 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   13462:	68d9      	ldr	r1, [r3, #12]
   13464:	b139      	cbz	r1, 13476 <bt_hci_driver_register+0x1e>
   13466:	6959      	ldr	r1, [r3, #20]
   13468:	b129      	cbz	r1, 13476 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1346a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   1346e:	4770      	bx	lr
		return -EALREADY;
   13470:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13474:	4770      	bx	lr
		return -EINVAL;
   13476:	f06f 0015 	mvn.w	r0, #21
}
   1347a:	4770      	bx	lr
   1347c:	20008000 	.word	0x20008000

00013480 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13480:	2104      	movs	r1, #4
   13482:	4801      	ldr	r0, [pc, #4]	; (13488 <bt_finalize_init+0x8>)
   13484:	f018 bd8c 	b.w	2bfa0 <atomic_or>
   13488:	200080cc 	.word	0x200080cc

0001348c <bt_init.part.0>:
static int bt_init(void)
   1348c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (!bt_dev.id_count) {
   1348e:	480c      	ldr	r0, [pc, #48]	; (134c0 <bt_init.part.0+0x34>)
   13490:	79c3      	ldrb	r3, [r0, #7]
   13492:	b96b      	cbnz	r3, 134b0 <bt_init.part.0+0x24>
			LOG_INF("No ID address. App must call settings_load()");
   13494:	4b0b      	ldr	r3, [pc, #44]	; (134c4 <bt_init.part.0+0x38>)
   13496:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1349a:	9305      	str	r3, [sp, #20]
   1349c:	2302      	movs	r3, #2
   1349e:	480a      	ldr	r0, [pc, #40]	; (134c8 <bt_init.part.0+0x3c>)
   134a0:	aa04      	add	r2, sp, #16
   134a2:	9304      	str	r3, [sp, #16]
   134a4:	f018 fd93 	bl	2bfce <z_log_msg_static_create.constprop.0>
}
   134a8:	2000      	movs	r0, #0
   134aa:	b007      	add	sp, #28
   134ac:	f85d fb04 	ldr.w	pc, [sp], #4
   134b0:	2108      	movs	r1, #8
   134b2:	30cc      	adds	r0, #204	; 0xcc
   134b4:	f018 fd74 	bl	2bfa0 <atomic_or>
	bt_finalize_init();
   134b8:	f7ff ffe2 	bl	13480 <bt_finalize_init>
	return 0;
   134bc:	e7f4      	b.n	134a8 <bt_init.part.0+0x1c>
   134be:	bf00      	nop
   134c0:	20008000 	.word	0x20008000
   134c4:	00034c99 	.word	0x00034c99
   134c8:	000314dc 	.word	0x000314dc

000134cc <init_work>:
{
   134cc:	b510      	push	{r4, lr}
	err = bt_init();
   134ce:	f7f5 ffcb 	bl	9468 <bt_init>
	if (ready_cb) {
   134d2:	4b03      	ldr	r3, [pc, #12]	; (134e0 <init_work+0x14>)
   134d4:	681b      	ldr	r3, [r3, #0]
   134d6:	b113      	cbz	r3, 134de <init_work+0x12>
}
   134d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   134dc:	4718      	bx	r3
}
   134de:	bd10      	pop	{r4, pc}
   134e0:	200215c4 	.word	0x200215c4

000134e4 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   134e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   134e6:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
   134e8:	4d3d      	ldr	r5, [pc, #244]	; (135e0 <bt_enable+0xfc>)
{
   134ea:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   134ec:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   134f0:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
   134f2:	b983      	cbnz	r3, 13516 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   134f4:	4b3b      	ldr	r3, [pc, #236]	; (135e4 <bt_enable+0x100>)
		return -ENODEV;
   134f6:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   134fa:	617b      	str	r3, [r7, #20]
   134fc:	2302      	movs	r3, #2
   134fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13502:	4839      	ldr	r0, [pc, #228]	; (135e8 <bt_enable+0x104>)
   13504:	613b      	str	r3, [r7, #16]
   13506:	f107 0210 	add.w	r2, r7, #16
   1350a:	f018 fd60 	bl	2bfce <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1350e:	4620      	mov	r0, r4
   13510:	371c      	adds	r7, #28
   13512:	46bd      	mov	sp, r7
   13514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13516:	f06f 0102 	mvn.w	r1, #2
   1351a:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   1351e:	f018 fd59 	bl	2bfd4 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13522:	2101      	movs	r1, #1
   13524:	f018 fd3c 	bl	2bfa0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13528:	07c3      	lsls	r3, r0, #31
   1352a:	d456      	bmi.n	135da <bt_enable+0xf6>
		err = bt_settings_init();
   1352c:	f7fe fc0e 	bl	11d4c <bt_settings_init>
		if (err) {
   13530:	4604      	mov	r4, r0
   13532:	2800      	cmp	r0, #0
   13534:	d1eb      	bne.n	1350e <bt_enable+0x2a>
	ready_cb = cb;
   13536:	4b2d      	ldr	r3, [pc, #180]	; (135ec <bt_enable+0x108>)
   13538:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1353a:	2201      	movs	r2, #1
   1353c:	f505 7090 	add.w	r0, r5, #288	; 0x120
   13540:	4611      	mov	r1, r2
   13542:	f01c fe52 	bl	301ea <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   13546:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   1354a:	f01c fe2c 	bl	301a6 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1354e:	2200      	movs	r2, #0
   13550:	2300      	movs	r3, #0
   13552:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13556:	f06f 0308 	mvn.w	r3, #8
   1355a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1355e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13562:	e9cd 4400 	strd	r4, r4, [sp]
   13566:	4b22      	ldr	r3, [pc, #136]	; (135f0 <bt_enable+0x10c>)
   13568:	4922      	ldr	r1, [pc, #136]	; (135f4 <bt_enable+0x110>)
   1356a:	9404      	str	r4, [sp, #16]
   1356c:	4822      	ldr	r0, [pc, #136]	; (135f8 <bt_enable+0x114>)
   1356e:	f011 fca9 	bl	24ec4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13572:	4922      	ldr	r1, [pc, #136]	; (135fc <bt_enable+0x118>)
   13574:	4820      	ldr	r0, [pc, #128]	; (135f8 <bt_enable+0x114>)
   13576:	f01c fded 	bl	30154 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1357a:	4821      	ldr	r0, [pc, #132]	; (13600 <bt_enable+0x11c>)
   1357c:	f012 fb98 	bl	25cb0 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   13580:	f06f 0307 	mvn.w	r3, #7
   13584:	f640 0298 	movw	r2, #2200	; 0x898
   13588:	491e      	ldr	r1, [pc, #120]	; (13604 <bt_enable+0x120>)
   1358a:	481d      	ldr	r0, [pc, #116]	; (13600 <bt_enable+0x11c>)
   1358c:	9400      	str	r4, [sp, #0]
   1358e:	f012 fba9 	bl	25ce4 <k_work_queue_start>
   13592:	491d      	ldr	r1, [pc, #116]	; (13608 <bt_enable+0x124>)
   13594:	481a      	ldr	r0, [pc, #104]	; (13600 <bt_enable+0x11c>)
   13596:	f01c fddd 	bl	30154 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1359a:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   1359e:	68db      	ldr	r3, [r3, #12]
   135a0:	4798      	blx	r3
	if (err) {
   135a2:	4604      	mov	r4, r0
   135a4:	b178      	cbz	r0, 135c6 <bt_enable+0xe2>
		LOG_ERR("HCI driver open failed (%d)", err);
   135a6:	466d      	mov	r5, sp
   135a8:	b088      	sub	sp, #32
   135aa:	462a      	mov	r2, r5
   135ac:	4b17      	ldr	r3, [pc, #92]	; (1360c <bt_enable+0x128>)
   135ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   135b2:	e9c5 3005 	strd	r3, r0, [r5, #20]
   135b6:	2303      	movs	r3, #3
   135b8:	480b      	ldr	r0, [pc, #44]	; (135e8 <bt_enable+0x104>)
   135ba:	f842 3f10 	str.w	r3, [r2, #16]!
   135be:	f018 fd06 	bl	2bfce <z_log_msg_static_create.constprop.0>
   135c2:	46ad      	mov	sp, r5
		return err;
   135c4:	e7a3      	b.n	1350e <bt_enable+0x2a>
	if (!cb) {
   135c6:	b91e      	cbnz	r6, 135d0 <bt_enable+0xec>
		return bt_init();
   135c8:	f7f5 ff4e 	bl	9468 <bt_init>
   135cc:	4604      	mov	r4, r0
   135ce:	e79e      	b.n	1350e <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   135d0:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   135d4:	f012 fb66 	bl	25ca4 <k_work_submit>
	return 0;
   135d8:	e799      	b.n	1350e <bt_enable+0x2a>
		return -EALREADY;
   135da:	f06f 0477 	mvn.w	r4, #119	; 0x77
   135de:	e796      	b.n	1350e <bt_enable+0x2a>
   135e0:	20008000 	.word	0x20008000
   135e4:	00034db1 	.word	0x00034db1
   135e8:	000314dc 	.word	0x000314dc
   135ec:	200215c4 	.word	0x200215c4
   135f0:	000131b9 	.word	0x000131b9
   135f4:	200327a0 	.word	0x200327a0
   135f8:	20009b40 	.word	0x20009b40
   135fc:	00034dca 	.word	0x00034dca
   13600:	20009bc8 	.word	0x20009bc8
   13604:	20032ba0 	.word	0x20032ba0
   13608:	00034dd0 	.word	0x00034dd0
   1360c:	00034dd6 	.word	0x00034dd6

00013610 <bt_is_ready>:
   13610:	4b02      	ldr	r3, [pc, #8]	; (1361c <bt_is_ready+0xc>)
   13612:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   13616:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1361a:	4770      	bx	lr
   1361c:	200080cc 	.word	0x200080cc

00013620 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13620:	4800      	ldr	r0, [pc, #0]	; (13624 <bt_get_name+0x4>)
   13622:	4770      	bx	lr
   13624:	00032e1e 	.word	0x00032e1e

00013628 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1362a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1362c:	2500      	movs	r5, #0
   1362e:	4f09      	ldr	r7, [pc, #36]	; (13654 <id_find+0x2c>)
   13630:	79fb      	ldrb	r3, [r7, #7]
   13632:	b2ec      	uxtb	r4, r5
   13634:	42a3      	cmp	r3, r4
   13636:	d802      	bhi.n	1363e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13638:	f06f 0001 	mvn.w	r0, #1
   1363c:	e009      	b.n	13652 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1363e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   13642:	4630      	mov	r0, r6
   13644:	4439      	add	r1, r7
   13646:	f018 fd89 	bl	2c15c <bt_addr_le_eq>
   1364a:	3501      	adds	r5, #1
   1364c:	2800      	cmp	r0, #0
   1364e:	d0ef      	beq.n	13630 <id_find+0x8>
   13650:	4620      	mov	r0, r4
}
   13652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13654:	20008000 	.word	0x20008000

00013658 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13658:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1365a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1365c:	460d      	mov	r5, r1
   1365e:	b1a9      	cbz	r1, 1368c <id_create.constprop.0+0x34>
   13660:	4628      	mov	r0, r5
   13662:	4915      	ldr	r1, [pc, #84]	; (136b8 <id_create.constprop.0+0x60>)
   13664:	f018 fd7a 	bl	2c15c <bt_addr_le_eq>
   13668:	b980      	cbnz	r0, 1368c <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1366a:	4629      	mov	r1, r5
   1366c:	4813      	ldr	r0, [pc, #76]	; (136bc <id_create.constprop.0+0x64>)
   1366e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13672:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13674:	f018 fd82 	bl	2c17c <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13678:	4811      	ldr	r0, [pc, #68]	; (136c0 <id_create.constprop.0+0x68>)
   1367a:	f018 fd77 	bl	2c16c <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1367e:	0743      	lsls	r3, r0, #29
   13680:	d501      	bpl.n	13686 <id_create.constprop.0+0x2e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   13682:	f7fe fb19 	bl	11cb8 <bt_settings_save_id>
	}

	return 0;
   13686:	2000      	movs	r0, #0
}
   13688:	b003      	add	sp, #12
   1368a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1368c:	4668      	mov	r0, sp
   1368e:	f018 fc4e 	bl	2bf2e <bt_addr_le_create_static>
			if (err) {
   13692:	2800      	cmp	r0, #0
   13694:	d1f8      	bne.n	13688 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
   13696:	4668      	mov	r0, sp
   13698:	f7ff ffc6 	bl	13628 <id_find>
   1369c:	2800      	cmp	r0, #0
   1369e:	daf5      	bge.n	1368c <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   136a0:	4b06      	ldr	r3, [pc, #24]	; (136bc <id_create.constprop.0+0x64>)
   136a2:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   136a6:	4669      	mov	r1, sp
   136a8:	4418      	add	r0, r3
   136aa:	f018 fd67 	bl	2c17c <bt_addr_le_copy>
		if (addr) {
   136ae:	2d00      	cmp	r5, #0
   136b0:	d0e2      	beq.n	13678 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   136b2:	4601      	mov	r1, r0
   136b4:	4628      	mov	r0, r5
   136b6:	e7dd      	b.n	13674 <id_create.constprop.0+0x1c>
   136b8:	000345c9 	.word	0x000345c9
   136bc:	20008000 	.word	0x20008000
   136c0:	200080cc 	.word	0x200080cc

000136c4 <set_random_address>:
{
   136c4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   136c6:	2206      	movs	r2, #6
   136c8:	4911      	ldr	r1, [pc, #68]	; (13710 <set_random_address+0x4c>)
   136ca:	4605      	mov	r5, r0
   136cc:	f01c ff3f 	bl	3054e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   136d0:	b1c8      	cbz	r0, 13706 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   136d2:	2106      	movs	r1, #6
   136d4:	f242 0005 	movw	r0, #8197	; 0x2005
   136d8:	f7ff f86e 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   136dc:	4604      	mov	r4, r0
   136de:	b1a0      	cbz	r0, 1370a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   136e0:	2206      	movs	r2, #6
   136e2:	4629      	mov	r1, r5
   136e4:	300c      	adds	r0, #12
   136e6:	f01a fc96 	bl	2e016 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   136ea:	2200      	movs	r2, #0
   136ec:	4621      	mov	r1, r4
   136ee:	f242 0005 	movw	r0, #8197	; 0x2005
   136f2:	f7ff f8af 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
   136f6:	b938      	cbnz	r0, 13708 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   136f8:	4805      	ldr	r0, [pc, #20]	; (13710 <set_random_address+0x4c>)
   136fa:	4629      	mov	r1, r5
   136fc:	f018 fd39 	bl	2c172 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13700:	2301      	movs	r3, #1
   13702:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   13706:	2000      	movs	r0, #0
}
   13708:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1370a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1370e:	e7fb      	b.n	13708 <set_random_address+0x44>
   13710:	20008061 	.word	0x20008061

00013714 <find_rl_conflict>:
{
   13714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13718:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   1371a:	460c      	mov	r4, r1
{
   1371c:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   1371e:	b959      	cbnz	r1, 13738 <find_rl_conflict+0x24>
   13720:	492b      	ldr	r1, [pc, #172]	; (137d0 <find_rl_conflict+0xbc>)
   13722:	f44f 7357 	mov.w	r3, #860	; 0x35c
   13726:	4a2b      	ldr	r2, [pc, #172]	; (137d4 <find_rl_conflict+0xc0>)
   13728:	482b      	ldr	r0, [pc, #172]	; (137d8 <find_rl_conflict+0xc4>)
   1372a:	f016 ffc6 	bl	2a6ba <assert_print>
   1372e:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   13732:	4828      	ldr	r0, [pc, #160]	; (137d4 <find_rl_conflict+0xc0>)
   13734:	f016 ffba 	bl	2a6ac <assert_post_action>
   13738:	6808      	ldr	r0, [r1, #0]
   1373a:	b948      	cbnz	r0, 13750 <find_rl_conflict+0x3c>
   1373c:	4927      	ldr	r1, [pc, #156]	; (137dc <find_rl_conflict+0xc8>)
   1373e:	f240 335d 	movw	r3, #861	; 0x35d
   13742:	4a24      	ldr	r2, [pc, #144]	; (137d4 <find_rl_conflict+0xc0>)
   13744:	4824      	ldr	r0, [pc, #144]	; (137d8 <find_rl_conflict+0xc4>)
   13746:	f016 ffb8 	bl	2a6ba <assert_print>
   1374a:	f240 315d 	movw	r1, #861	; 0x35d
   1374e:	e7f0      	b.n	13732 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   13750:	b94d      	cbnz	r5, 13766 <find_rl_conflict+0x52>
   13752:	4923      	ldr	r1, [pc, #140]	; (137e0 <find_rl_conflict+0xcc>)
   13754:	f240 335e 	movw	r3, #862	; 0x35e
   13758:	4a1e      	ldr	r2, [pc, #120]	; (137d4 <find_rl_conflict+0xc0>)
   1375a:	481f      	ldr	r0, [pc, #124]	; (137d8 <find_rl_conflict+0xc4>)
   1375c:	f016 ffad 	bl	2a6ba <assert_print>
   13760:	f240 315e 	movw	r1, #862	; 0x35e
   13764:	e7e5      	b.n	13732 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   13766:	7a03      	ldrb	r3, [r0, #8]
   13768:	075a      	lsls	r2, r3, #29
   1376a:	d509      	bpl.n	13780 <find_rl_conflict+0x6c>
   1376c:	491d      	ldr	r1, [pc, #116]	; (137e4 <find_rl_conflict+0xd0>)
   1376e:	f44f 7358 	mov.w	r3, #864	; 0x360
   13772:	4a18      	ldr	r2, [pc, #96]	; (137d4 <find_rl_conflict+0xc0>)
   13774:	4818      	ldr	r0, [pc, #96]	; (137d8 <find_rl_conflict+0xc4>)
   13776:	f016 ffa0 	bl	2a6ba <assert_print>
   1377a:	f44f 7158 	mov.w	r1, #864	; 0x360
   1377e:	e7d8      	b.n	13732 <find_rl_conflict+0x1e>
	if (conflict->found) {
   13780:	684f      	ldr	r7, [r1, #4]
   13782:	b9f7      	cbnz	r7, 137c2 <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   13784:	7a2b      	ldrb	r3, [r5, #8]
   13786:	075b      	lsls	r3, r3, #29
   13788:	d51b      	bpl.n	137c2 <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1378a:	1c69      	adds	r1, r5, #1
   1378c:	3001      	adds	r0, #1
   1378e:	f018 fce5 	bl	2c15c <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   13792:	f8d4 8000 	ldr.w	r8, [r4]
   13796:	2216      	movs	r2, #22
   13798:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1379a:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1379c:	4668      	mov	r0, sp
   1379e:	f01c ff20 	bl	305e2 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   137a2:	2210      	movs	r2, #16
   137a4:	4669      	mov	r1, sp
   137a6:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   137aa:	f01c fed0 	bl	3054e <memcmp>
   137ae:	b158      	cbz	r0, 137c8 <find_rl_conflict+0xb4>
   137b0:	6820      	ldr	r0, [r4, #0]
   137b2:	2210      	movs	r2, #16
   137b4:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   137b8:	302a      	adds	r0, #42	; 0x2a
   137ba:	f01c fec8 	bl	3054e <memcmp>
   137be:	b918      	cbnz	r0, 137c8 <find_rl_conflict+0xb4>
		conflict->found = resident;
   137c0:	6065      	str	r5, [r4, #4]
}
   137c2:	b006      	add	sp, #24
   137c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   137c8:	2e00      	cmp	r6, #0
   137ca:	d1f9      	bne.n	137c0 <find_rl_conflict+0xac>
   137cc:	e7f9      	b.n	137c2 <find_rl_conflict+0xae>
   137ce:	bf00      	nop
   137d0:	00034e56 	.word	0x00034e56
   137d4:	00034e28 	.word	0x00034e28
   137d8:	00032659 	.word	0x00032659
   137dc:	00034e6e 	.word	0x00034e6e
   137e0:	00034e91 	.word	0x00034e91
   137e4:	00034ea9 	.word	0x00034ea9

000137e8 <bt_id_add.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   137e8:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   137ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   137ec:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
   137ee:	4604      	mov	r4, r0
   137f0:	b087      	sub	sp, #28
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   137f2:	4608      	mov	r0, r1
   137f4:	f001 fe4c 	bl	15490 <bt_conn_lookup_state_le>
	if (conn) {
   137f8:	4606      	mov	r6, r0
   137fa:	b188      	cbz	r0, 13820 <bt_id_add.part.0+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   137fc:	4b49      	ldr	r3, [pc, #292]	; (13924 <bt_id_add.part.0+0x13c>)
   137fe:	e8d3 1fef 	ldaex	r1, [r3]
   13802:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   13806:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1380a:	2a00      	cmp	r2, #0
   1380c:	d1f7      	bne.n	137fe <bt_id_add.part.0+0x16>
	keys->state |= flag;
   1380e:	7a23      	ldrb	r3, [r4, #8]
   13810:	f043 0301 	orr.w	r3, r3, #1
   13814:	7223      	strb	r3, [r4, #8]
}
   13816:	b007      	add	sp, #28
   13818:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1381c:	f001 bb12 	b.w	14e44 <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   13820:	4d41      	ldr	r5, [pc, #260]	; (13928 <bt_id_add.part.0+0x140>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13822:	4601      	mov	r1, r0
   13824:	4841      	ldr	r0, [pc, #260]	; (1392c <bt_id_add.part.0+0x144>)
   13826:	f000 fbf7 	bl	14018 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1382a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1382e:	b173      	cbz	r3, 1384e <bt_id_add.part.0+0x66>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13830:	4630      	mov	r0, r6
   13832:	f018 fce9 	bl	2c208 <addr_res_enable>
		if (err) {
   13836:	b150      	cbz	r0, 1384e <bt_id_add.part.0+0x66>
			LOG_WRN("Failed to disable address resolution");
   13838:	4b3d      	ldr	r3, [pc, #244]	; (13930 <bt_id_add.part.0+0x148>)
		LOG_WRN("Set privacy mode command is not supported");
   1383a:	9305      	str	r3, [sp, #20]
   1383c:	2302      	movs	r3, #2
   1383e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13842:	9304      	str	r3, [sp, #16]
   13844:	aa04      	add	r2, sp, #16
		LOG_ERR("Failed to set privacy mode");
   13846:	483b      	ldr	r0, [pc, #236]	; (13934 <bt_id_add.part.0+0x14c>)
   13848:	f018 fcdb 	bl	2c202 <z_log_msg_static_create.constprop.0>
		goto done;
   1384c:	e026      	b.n	1389c <bt_id_add.part.0+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1384e:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   13852:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   13856:	429a      	cmp	r2, r3
   13858:	d12a      	bne.n	138b0 <bt_id_add.part.0+0xc8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   1385a:	2602      	movs	r6, #2
   1385c:	4b36      	ldr	r3, [pc, #216]	; (13938 <bt_id_add.part.0+0x150>)
   1385e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13862:	4834      	ldr	r0, [pc, #208]	; (13934 <bt_id_add.part.0+0x14c>)
   13864:	aa04      	add	r2, sp, #16
   13866:	9305      	str	r3, [sp, #20]
   13868:	9604      	str	r6, [sp, #16]
   1386a:	f018 fcca 	bl	2c202 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1386e:	2200      	movs	r2, #0
   13870:	f242 0029 	movw	r0, #8233	; 0x2029
   13874:	4611      	mov	r1, r2
   13876:	f7fe ffed 	bl	12854 <bt_hci_cmd_send_sync>
		if (err) {
   1387a:	b130      	cbz	r0, 1388a <bt_id_add.part.0+0xa2>
			LOG_ERR("Failed to clear resolution list");
   1387c:	4b2f      	ldr	r3, [pc, #188]	; (1393c <bt_id_add.part.0+0x154>)
   1387e:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
   13882:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13886:	aa04      	add	r2, sp, #16
   13888:	e7dd      	b.n	13846 <bt_id_add.part.0+0x5e>
		bt_dev.le.rl_entries++;
   1388a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1388e:	3301      	adds	r3, #1
   13890:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   13894:	7a23      	ldrb	r3, [r4, #8]
   13896:	f043 0304 	orr.w	r3, r3, #4
   1389a:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1389c:	2001      	movs	r0, #1
   1389e:	f018 fcb3 	bl	2c208 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   138a2:	2100      	movs	r1, #0
   138a4:	4826      	ldr	r0, [pc, #152]	; (13940 <bt_id_add.part.0+0x158>)
}
   138a6:	b007      	add	sp, #28
   138a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   138ac:	f000 bbb4 	b.w	14018 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   138b0:	4622      	mov	r2, r4
   138b2:	1c67      	adds	r7, r4, #1
   138b4:	4639      	mov	r1, r7
   138b6:	f812 0b2a 	ldrb.w	r0, [r2], #42
   138ba:	f018 fc66 	bl	2c18a <hci_id_add>
	if (err) {
   138be:	4606      	mov	r6, r0
   138c0:	b120      	cbz	r0, 138cc <bt_id_add.part.0+0xe4>
		LOG_ERR("Failed to add IRK to controller");
   138c2:	4b20      	ldr	r3, [pc, #128]	; (13944 <bt_id_add.part.0+0x15c>)
		LOG_ERR("Failed to set privacy mode");
   138c4:	9305      	str	r3, [sp, #20]
   138c6:	2302      	movs	r3, #2
   138c8:	9304      	str	r3, [sp, #16]
   138ca:	e7da      	b.n	13882 <bt_id_add.part.0+0x9a>
	bt_dev.le.rl_entries++;
   138cc:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   138d0:	3301      	adds	r3, #1
   138d2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   138d6:	7a23      	ldrb	r3, [r4, #8]
   138d8:	f043 0304 	orr.w	r3, r3, #4
   138dc:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   138de:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   138e2:	075b      	lsls	r3, r3, #29
   138e4:	d401      	bmi.n	138ea <bt_id_add.part.0+0x102>
		LOG_WRN("Set privacy mode command is not supported");
   138e6:	4b18      	ldr	r3, [pc, #96]	; (13948 <bt_id_add.part.0+0x160>)
   138e8:	e7a7      	b.n	1383a <bt_id_add.part.0+0x52>
	bt_addr_le_copy(&cp.id_addr, addr);
   138ea:	4639      	mov	r1, r7
   138ec:	4668      	mov	r0, sp
   138ee:	f018 fc45 	bl	2c17c <bt_addr_le_copy>
	cp.mode = mode;
   138f2:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   138f4:	2108      	movs	r1, #8
   138f6:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   138fa:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   138fe:	f7fe ff5b 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   13902:	4604      	mov	r4, r0
   13904:	b160      	cbz	r0, 13920 <bt_id_add.part.0+0x138>
   13906:	2208      	movs	r2, #8
   13908:	4669      	mov	r1, sp
   1390a:	300c      	adds	r0, #12
   1390c:	f01a fb83 	bl	2e016 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   13910:	4632      	mov	r2, r6
   13912:	4621      	mov	r1, r4
   13914:	f242 004e 	movw	r0, #8270	; 0x204e
   13918:	f7fe ff9c 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
   1391c:	2800      	cmp	r0, #0
   1391e:	d0bd      	beq.n	1389c <bt_id_add.part.0+0xb4>
		LOG_ERR("Failed to set privacy mode");
   13920:	4b0a      	ldr	r3, [pc, #40]	; (1394c <bt_id_add.part.0+0x164>)
   13922:	e7cf      	b.n	138c4 <bt_id_add.part.0+0xdc>
   13924:	200080cc 	.word	0x200080cc
   13928:	20008000 	.word	0x20008000
   1392c:	0002c25f 	.word	0x0002c25f
   13930:	00034ede 	.word	0x00034ede
   13934:	000314f4 	.word	0x000314f4
   13938:	00034f03 	.word	0x00034f03
   1393c:	00034f34 	.word	0x00034f34
   13940:	0002c239 	.word	0x0002c239
   13944:	00034f54 	.word	0x00034f54
   13948:	00034f74 	.word	0x00034f74
   1394c:	00034f9e 	.word	0x00034f9e

00013950 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13950:	4b08      	ldr	r3, [pc, #32]	; (13974 <bt_id_pending_keys_update+0x24>)
   13952:	e8d3 2fef 	ldaex	r2, [r3]
   13956:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1395a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1395e:	2800      	cmp	r0, #0
   13960:	d1f7      	bne.n	13952 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   13962:	0413      	lsls	r3, r2, #16
   13964:	d504      	bpl.n	13970 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   13966:	2200      	movs	r2, #0
   13968:	2002      	movs	r0, #2
   1396a:	4903      	ldr	r1, [pc, #12]	; (13978 <bt_id_pending_keys_update+0x28>)
   1396c:	f006 bd5a 	b.w	1a424 <bt_keys_foreach_type>
}
   13970:	4770      	bx	lr
   13972:	bf00      	nop
   13974:	200080cc 	.word	0x200080cc
   13978:	0002c2ed 	.word	0x0002c2ed

0001397c <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   1397c:	2300      	movs	r3, #0
{
   1397e:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13980:	4905      	ldr	r1, [pc, #20]	; (13998 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   13982:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13986:	466a      	mov	r2, sp
   13988:	2002      	movs	r0, #2
   1398a:	f006 fd4b 	bl	1a424 <bt_keys_foreach_type>
}
   1398e:	9801      	ldr	r0, [sp, #4]
   13990:	b003      	add	sp, #12
   13992:	f85d fb04 	ldr.w	pc, [sp], #4
   13996:	bf00      	nop
   13998:	00013715 	.word	0x00013715

0001399c <bt_id_add>:
	CHECKIF(keys == NULL) {
   1399c:	4603      	mov	r3, r0
{
   1399e:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   139a0:	b170      	cbz	r0, 139c0 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   139a2:	490a      	ldr	r1, [pc, #40]	; (139cc <bt_id_add+0x30>)
   139a4:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   139a8:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
   139ac:	b10c      	cbz	r4, 139b2 <bt_id_add+0x16>
   139ae:	4294      	cmp	r4, r2
   139b0:	d208      	bcs.n	139c4 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   139b2:	3201      	adds	r2, #1
   139b4:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   139b8:	7a1a      	ldrb	r2, [r3, #8]
   139ba:	f042 0204 	orr.w	r2, r2, #4
   139be:	721a      	strb	r2, [r3, #8]
}
   139c0:	bc10      	pop	{r4}
   139c2:	4770      	bx	lr
   139c4:	bc10      	pop	{r4}
   139c6:	f7ff bf0f 	b.w	137e8 <bt_id_add.part.0>
   139ca:	bf00      	nop
   139cc:	20008000 	.word	0x20008000

000139d0 <bt_id_del>:
{
   139d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   139d4:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   139d6:	4605      	mov	r5, r0
{
   139d8:	af00      	add	r7, sp, #0
	CHECKIF(keys == NULL) {
   139da:	b398      	cbz	r0, 13a44 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   139dc:	4c4e      	ldr	r4, [pc, #312]	; (13b18 <bt_id_del+0x148>)
   139de:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   139e2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   139e6:	b1ca      	cbz	r2, 13a1c <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   139e8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   139ea:	4293      	cmp	r3, r2
   139ec:	dc23      	bgt.n	13a36 <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   139ee:	2100      	movs	r1, #0
   139f0:	2206      	movs	r2, #6
   139f2:	4608      	mov	r0, r1
   139f4:	f001 fd4c 	bl	15490 <bt_conn_lookup_state_le>
	if (conn) {
   139f8:	4606      	mov	r6, r0
   139fa:	b338      	cbz	r0, 13a4c <bt_id_del+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   139fc:	34cc      	adds	r4, #204	; 0xcc
   139fe:	e8d4 3fef 	ldaex	r3, [r4]
   13a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13a06:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13a0a:	2a00      	cmp	r2, #0
   13a0c:	d1f7      	bne.n	139fe <bt_id_del+0x2e>
	keys->state |= flag;
   13a0e:	7a2b      	ldrb	r3, [r5, #8]
   13a10:	f043 0302 	orr.w	r3, r3, #2
   13a14:	722b      	strb	r3, [r5, #8]
		bt_conn_unref(conn);
   13a16:	f001 fa15 	bl	14e44 <bt_conn_unref>
		return;
   13a1a:	e013      	b.n	13a44 <bt_id_del+0x74>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   13a1c:	b95b      	cbnz	r3, 13a36 <bt_id_del+0x66>
   13a1e:	493f      	ldr	r1, [pc, #252]	; (13b1c <bt_id_del+0x14c>)
   13a20:	483f      	ldr	r0, [pc, #252]	; (13b20 <bt_id_del+0x150>)
   13a22:	f240 4323 	movw	r3, #1059	; 0x423
   13a26:	4a3f      	ldr	r2, [pc, #252]	; (13b24 <bt_id_del+0x154>)
   13a28:	f016 fe47 	bl	2a6ba <assert_print>
   13a2c:	f240 4123 	movw	r1, #1059	; 0x423
   13a30:	483c      	ldr	r0, [pc, #240]	; (13b24 <bt_id_del+0x154>)
   13a32:	f016 fe3b 	bl	2a6ac <assert_post_action>
			bt_dev.le.rl_entries--;
   13a36:	3b01      	subs	r3, #1
   13a38:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13a3c:	7a2b      	ldrb	r3, [r5, #8]
   13a3e:	f023 0304 	bic.w	r3, r3, #4
   13a42:	722b      	strb	r3, [r5, #8]
}
   13a44:	371c      	adds	r7, #28
   13a46:	46bd      	mov	sp, r7
   13a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13a4c:	4601      	mov	r1, r0
   13a4e:	4836      	ldr	r0, [pc, #216]	; (13b28 <bt_id_del+0x158>)
   13a50:	f000 fae2 	bl	14018 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13a54:	4630      	mov	r0, r6
   13a56:	f018 fbd7 	bl	2c208 <addr_res_enable>
	if (err) {
   13a5a:	4606      	mov	r6, r0
   13a5c:	b1d0      	cbz	r0, 13a94 <bt_id_del+0xc4>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   13a5e:	466d      	mov	r5, sp
   13a60:	b088      	sub	sp, #32
   13a62:	466b      	mov	r3, sp
   13a64:	4a31      	ldr	r2, [pc, #196]	; (13b2c <bt_id_del+0x15c>)
   13a66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13a6a:	e9c3 2005 	strd	r2, r0, [r3, #20]
   13a6e:	461a      	mov	r2, r3
   13a70:	2303      	movs	r3, #3
   13a72:	482f      	ldr	r0, [pc, #188]	; (13b30 <bt_id_del+0x160>)
   13a74:	f842 3f10 	str.w	r3, [r2, #16]!
   13a78:	f018 fbc3 	bl	2c202 <z_log_msg_static_create.constprop.0>
   13a7c:	46ad      	mov	sp, r5
	if (bt_dev.le.rl_entries) {
   13a7e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13a82:	b113      	cbz	r3, 13a8a <bt_id_del+0xba>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13a84:	2001      	movs	r0, #1
   13a86:	f018 fbbf 	bl	2c208 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13a8a:	2100      	movs	r1, #0
   13a8c:	4829      	ldr	r0, [pc, #164]	; (13b34 <bt_id_del+0x164>)
   13a8e:	f000 fac3 	bl	14018 <bt_le_ext_adv_foreach>
   13a92:	e7d7      	b.n	13a44 <bt_id_del+0x74>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13a94:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13a98:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   13a9c:	429a      	cmp	r2, r3
   13a9e:	d20c      	bcs.n	13aba <bt_id_del+0xea>
		bt_dev.le.rl_entries--;
   13aa0:	3b01      	subs	r3, #1
   13aa2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13aa6:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13aa8:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   13aaa:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13aae:	2002      	movs	r0, #2
   13ab0:	4921      	ldr	r1, [pc, #132]	; (13b38 <bt_id_del+0x168>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   13ab2:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13ab4:	f006 fcb6 	bl	1a424 <bt_keys_foreach_type>
		goto done;
   13ab8:	e7e1      	b.n	13a7e <bt_id_del+0xae>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   13aba:	2107      	movs	r1, #7
   13abc:	f242 0028 	movw	r0, #8232	; 0x2028
   13ac0:	f7fe fe7a 	bl	127b8 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   13ac4:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
   13ac8:	4680      	mov	r8, r0
   13aca:	b958      	cbnz	r0, 13ae4 <bt_id_del+0x114>
		LOG_ERR("Failed to remove IRK from controller");
   13acc:	4b1b      	ldr	r3, [pc, #108]	; (13b3c <bt_id_del+0x16c>)
   13ace:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13ad2:	617b      	str	r3, [r7, #20]
   13ad4:	2302      	movs	r3, #2
   13ad6:	4816      	ldr	r0, [pc, #88]	; (13b30 <bt_id_del+0x160>)
   13ad8:	613b      	str	r3, [r7, #16]
   13ada:	f107 0210 	add.w	r2, r7, #16
   13ade:	f018 fb90 	bl	2c202 <z_log_msg_static_create.constprop.0>
		goto done;
   13ae2:	e7cc      	b.n	13a7e <bt_id_del+0xae>
	return net_buf_simple_add(&buf->b, len);
   13ae4:	2107      	movs	r1, #7
   13ae6:	300c      	adds	r0, #12
   13ae8:	f007 fe70 	bl	1b7cc <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13aec:	4649      	mov	r1, r9
   13aee:	f018 fb45 	bl	2c17c <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   13af2:	4632      	mov	r2, r6
   13af4:	4641      	mov	r1, r8
   13af6:	f242 0028 	movw	r0, #8232	; 0x2028
   13afa:	f7fe feab 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
   13afe:	2800      	cmp	r0, #0
   13b00:	d1e4      	bne.n	13acc <bt_id_del+0xfc>
	bt_dev.le.rl_entries--;
   13b02:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13b06:	3b01      	subs	r3, #1
   13b08:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   13b0c:	7a2b      	ldrb	r3, [r5, #8]
   13b0e:	f023 0304 	bic.w	r3, r3, #4
   13b12:	722b      	strb	r3, [r5, #8]
   13b14:	e7b3      	b.n	13a7e <bt_id_del+0xae>
   13b16:	bf00      	nop
   13b18:	20008000 	.word	0x20008000
   13b1c:	00034fb9 	.word	0x00034fb9
   13b20:	00032659 	.word	0x00032659
   13b24:	00034e28 	.word	0x00034e28
   13b28:	0002c25f 	.word	0x0002c25f
   13b2c:	00034fd2 	.word	0x00034fd2
   13b30:	000314f4 	.word	0x000314f4
   13b34:	0002c239 	.word	0x0002c239
   13b38:	0002c1ed 	.word	0x0002c1ed
   13b3c:	00034fff 	.word	0x00034fff

00013b40 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13b40:	b570      	push	{r4, r5, r6, lr}
   13b42:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13b44:	4604      	mov	r4, r0
{
   13b46:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13b48:	b920      	cbnz	r0, 13b54 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13b4a:	b31d      	cbz	r5, 13b94 <bt_id_create+0x54>
			return -EINVAL;
   13b4c:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   13b50:	b006      	add	sp, #24
   13b52:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13b54:	4920      	ldr	r1, [pc, #128]	; (13bd8 <bt_id_create+0x98>)
   13b56:	f018 fb01 	bl	2c15c <bt_addr_le_eq>
   13b5a:	2800      	cmp	r0, #0
   13b5c:	d1f5      	bne.n	13b4a <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13b5e:	7823      	ldrb	r3, [r4, #0]
   13b60:	2b01      	cmp	r3, #1
   13b62:	d104      	bne.n	13b6e <bt_id_create+0x2e>
   13b64:	79a3      	ldrb	r3, [r4, #6]
   13b66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13b6a:	2bc0      	cmp	r3, #192	; 0xc0
   13b6c:	d00a      	beq.n	13b84 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   13b6e:	4b1b      	ldr	r3, [pc, #108]	; (13bdc <bt_id_create+0x9c>)
   13b70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13b74:	9305      	str	r3, [sp, #20]
   13b76:	2302      	movs	r3, #2
   13b78:	4819      	ldr	r0, [pc, #100]	; (13be0 <bt_id_create+0xa0>)
   13b7a:	aa04      	add	r2, sp, #16
   13b7c:	9304      	str	r3, [sp, #16]
   13b7e:	f018 fb40 	bl	2c202 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   13b82:	e7e3      	b.n	13b4c <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   13b84:	4620      	mov	r0, r4
   13b86:	f7ff fd4f 	bl	13628 <id_find>
   13b8a:	2800      	cmp	r0, #0
   13b8c:	dbdd      	blt.n	13b4a <bt_id_create+0xa>
			return -EALREADY;
   13b8e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13b92:	e7dd      	b.n	13b50 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13b94:	4d13      	ldr	r5, [pc, #76]	; (13be4 <bt_id_create+0xa4>)
   13b96:	79eb      	ldrb	r3, [r5, #7]
   13b98:	2b01      	cmp	r3, #1
   13b9a:	d01a      	beq.n	13bd2 <bt_id_create+0x92>
   13b9c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   13ba0:	f018 fae4 	bl	2c16c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13ba4:	07c3      	lsls	r3, r0, #31
   13ba6:	d50b      	bpl.n	13bc0 <bt_id_create+0x80>
	new_id = bt_dev.id_count;
   13ba8:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   13baa:	4621      	mov	r1, r4
   13bac:	4630      	mov	r0, r6
   13bae:	f7ff fd53 	bl	13658 <id_create.constprop.0>
	if (err) {
   13bb2:	2800      	cmp	r0, #0
   13bb4:	d1cc      	bne.n	13b50 <bt_id_create+0x10>
		bt_dev.id_count++;
   13bb6:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   13bb8:	4630      	mov	r0, r6
		bt_dev.id_count++;
   13bba:	3301      	adds	r3, #1
   13bbc:	71eb      	strb	r3, [r5, #7]
	return new_id;
   13bbe:	e7c7      	b.n	13b50 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   13bc0:	2c00      	cmp	r4, #0
   13bc2:	d0c3      	beq.n	13b4c <bt_id_create+0xc>
   13bc4:	4620      	mov	r0, r4
   13bc6:	4904      	ldr	r1, [pc, #16]	; (13bd8 <bt_id_create+0x98>)
   13bc8:	f018 fac8 	bl	2c15c <bt_addr_le_eq>
   13bcc:	2800      	cmp	r0, #0
   13bce:	d0eb      	beq.n	13ba8 <bt_id_create+0x68>
   13bd0:	e7bc      	b.n	13b4c <bt_id_create+0xc>
		return -ENOMEM;
   13bd2:	f06f 000b 	mvn.w	r0, #11
   13bd6:	e7bb      	b.n	13b50 <bt_id_create+0x10>
   13bd8:	000345c9 	.word	0x000345c9
   13bdc:	00035024 	.word	0x00035024
   13be0:	000314f4 	.word	0x000314f4
   13be4:	20008000 	.word	0x20008000

00013be8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13be8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   13bea:	4604      	mov	r4, r0
{
   13bec:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   13bee:	b960      	cbnz	r0, 13c0a <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   13bf0:	4b1a      	ldr	r3, [pc, #104]	; (13c5c <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   13bf2:	9307      	str	r3, [sp, #28]
   13bf4:	2302      	movs	r3, #2
   13bf6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13bfa:	4819      	ldr	r0, [pc, #100]	; (13c60 <bt_id_read_public_addr+0x78>)
   13bfc:	aa06      	add	r2, sp, #24
   13bfe:	9306      	str	r3, [sp, #24]
   13c00:	f018 faff 	bl	2c202 <z_log_msg_static_create.constprop.0>
		return 0U;
   13c04:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13c06:	b008      	add	sp, #32
   13c08:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13c0a:	2100      	movs	r1, #0
   13c0c:	f241 0009 	movw	r0, #4105	; 0x1009
   13c10:	aa01      	add	r2, sp, #4
   13c12:	f7fe fe1f 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
   13c16:	4606      	mov	r6, r0
   13c18:	b108      	cbz	r0, 13c1e <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   13c1a:	4b12      	ldr	r3, [pc, #72]	; (13c64 <bt_id_read_public_addr+0x7c>)
   13c1c:	e7e9      	b.n	13bf2 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   13c1e:	9b01      	ldr	r3, [sp, #4]
   13c20:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13c22:	68dd      	ldr	r5, [r3, #12]
   13c24:	4910      	ldr	r1, [pc, #64]	; (13c68 <bt_id_read_public_addr+0x80>)
   13c26:	3501      	adds	r5, #1
   13c28:	4628      	mov	r0, r5
   13c2a:	f01c fc90 	bl	3054e <memcmp>
   13c2e:	b918      	cbnz	r0, 13c38 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   13c30:	9801      	ldr	r0, [sp, #4]
   13c32:	f007 fca9 	bl	1b588 <net_buf_unref>
		return 0U;
   13c36:	e7e5      	b.n	13c04 <bt_id_read_public_addr+0x1c>
   13c38:	2206      	movs	r2, #6
   13c3a:	4628      	mov	r0, r5
   13c3c:	490b      	ldr	r1, [pc, #44]	; (13c6c <bt_id_read_public_addr+0x84>)
   13c3e:	f01c fc86 	bl	3054e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13c42:	2800      	cmp	r0, #0
   13c44:	d0f4      	beq.n	13c30 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   13c46:	4629      	mov	r1, r5
   13c48:	1c60      	adds	r0, r4, #1
   13c4a:	f018 fa92 	bl	2c172 <bt_addr_copy>
	net_buf_unref(rsp);
   13c4e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13c50:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   13c52:	f007 fc99 	bl	1b588 <net_buf_unref>
	return 1U;
   13c56:	2001      	movs	r0, #1
   13c58:	e7d5      	b.n	13c06 <bt_id_read_public_addr+0x1e>
   13c5a:	bf00      	nop
   13c5c:	00035052 	.word	0x00035052
   13c60:	000314f4 	.word	0x000314f4
   13c64:	0003506b 	.word	0x0003506b
   13c68:	000345d6 	.word	0x000345d6
   13c6c:	000345d0 	.word	0x000345d0

00013c70 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13c70:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13c72:	4668      	mov	r0, sp
   13c74:	f7ff ffb8 	bl	13be8 <bt_id_read_public_addr>
   13c78:	4b04      	ldr	r3, [pc, #16]	; (13c8c <bt_setup_public_id_addr+0x1c>)
   13c7a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13c7c:	b118      	cbz	r0, 13c86 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13c7e:	4669      	mov	r1, sp
   13c80:	2000      	movs	r0, #0
   13c82:	f7ff fce9 	bl	13658 <id_create.constprop.0>
}
   13c86:	b003      	add	sp, #12
   13c88:	f85d fb04 	ldr.w	pc, [sp], #4
   13c8c:	20008000 	.word	0x20008000

00013c90 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13c90:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13c92:	4b24      	ldr	r3, [pc, #144]	; (13d24 <bt_read_static_addr+0x94>)
{
   13c94:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13c96:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   13c9a:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13c9c:	07db      	lsls	r3, r3, #31
{
   13c9e:	b089      	sub	sp, #36	; 0x24
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13ca0:	d40d      	bmi.n	13cbe <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   13ca2:	4b21      	ldr	r3, [pc, #132]	; (13d28 <bt_read_static_addr+0x98>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   13ca4:	9307      	str	r3, [sp, #28]
		return 0;
   13ca6:	2400      	movs	r4, #0
		LOG_WRN("Failed to read static addresses");
   13ca8:	2302      	movs	r3, #2
   13caa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13cae:	481f      	ldr	r0, [pc, #124]	; (13d2c <bt_read_static_addr+0x9c>)
   13cb0:	aa06      	add	r2, sp, #24
   13cb2:	9306      	str	r3, [sp, #24]
   13cb4:	f018 faa5 	bl	2c202 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   13cb8:	4620      	mov	r0, r4
   13cba:	b009      	add	sp, #36	; 0x24
   13cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13cbe:	2100      	movs	r1, #0
   13cc0:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13cc4:	aa01      	add	r2, sp, #4
   13cc6:	f7fe fdc5 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
   13cca:	4603      	mov	r3, r0
   13ccc:	b108      	cbz	r0, 13cd2 <bt_read_static_addr+0x42>
		LOG_WRN("Failed to read static addresses");
   13cce:	4b18      	ldr	r3, [pc, #96]	; (13d30 <bt_read_static_addr+0xa0>)
   13cd0:	e7e8      	b.n	13ca4 <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
   13cd2:	9801      	ldr	r0, [sp, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   13cd4:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   13cd6:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   13cd8:	7854      	ldrb	r4, [r2, #1]
   13cda:	3202      	adds	r2, #2
   13cdc:	42b4      	cmp	r4, r6
   13cde:	bf28      	it	cs
   13ce0:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   13ce2:	429c      	cmp	r4, r3
   13ce4:	dc0e      	bgt.n	13d04 <bt_read_static_addr+0x74>
	net_buf_unref(rsp);
   13ce6:	f007 fc4f 	bl	1b588 <net_buf_unref>
	if (!cnt) {
   13cea:	2c00      	cmp	r4, #0
   13cec:	d1e4      	bne.n	13cb8 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   13cee:	4b11      	ldr	r3, [pc, #68]	; (13d34 <bt_read_static_addr+0xa4>)
   13cf0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13cf4:	9307      	str	r3, [sp, #28]
   13cf6:	2302      	movs	r3, #2
   13cf8:	480c      	ldr	r0, [pc, #48]	; (13d2c <bt_read_static_addr+0x9c>)
   13cfa:	aa06      	add	r2, sp, #24
   13cfc:	9306      	str	r3, [sp, #24]
   13cfe:	f018 fa80 	bl	2c202 <z_log_msg_static_create.constprop.0>
   13d02:	e7d9      	b.n	13cb8 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13d04:	4611      	mov	r1, r2
   13d06:	fb07 5603 	mla	r6, r7, r3, r5
   13d0a:	f102 0c14 	add.w	ip, r2, #20
   13d0e:	f851 eb04 	ldr.w	lr, [r1], #4
   13d12:	4561      	cmp	r1, ip
   13d14:	f846 eb04 	str.w	lr, [r6], #4
   13d18:	d1f9      	bne.n	13d0e <bt_read_static_addr+0x7e>
   13d1a:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   13d1c:	3301      	adds	r3, #1
   13d1e:	8031      	strh	r1, [r6, #0]
   13d20:	3216      	adds	r2, #22
   13d22:	e7de      	b.n	13ce2 <bt_read_static_addr+0x52>
   13d24:	20008000 	.word	0x20008000
   13d28:	00035089 	.word	0x00035089
   13d2c:	000314f4 	.word	0x000314f4
   13d30:	000350b5 	.word	0x000350b5
   13d34:	000350d5 	.word	0x000350d5

00013d38 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13d38:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13d3a:	4d15      	ldr	r5, [pc, #84]	; (13d90 <bt_setup_random_id_addr+0x58>)
{
   13d3c:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   13d3e:	79ec      	ldrb	r4, [r5, #7]
   13d40:	b92c      	cbnz	r4, 13d4e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13d42:	2101      	movs	r1, #1
   13d44:	a802      	add	r0, sp, #8
   13d46:	f7ff ffa3 	bl	13c90 <bt_read_static_addr>
   13d4a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13d4c:	b9c0      	cbnz	r0, 13d80 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13d4e:	2100      	movs	r1, #0
   13d50:	4608      	mov	r0, r1
}
   13d52:	b008      	add	sp, #32
   13d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   13d58:	f7ff bef2 	b.w	13b40 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13d5c:	ab02      	add	r3, sp, #8
   13d5e:	fb06 3102 	mla	r1, r6, r2, r3
   13d62:	f10d 0001 	add.w	r0, sp, #1
   13d66:	f018 fa04 	bl	2c172 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13d6a:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13d6c:	4669      	mov	r1, sp
   13d6e:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   13d70:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13d74:	f7ff fc70 	bl	13658 <id_create.constprop.0>
				if (err) {
   13d78:	3401      	adds	r4, #1
   13d7a:	b110      	cbz	r0, 13d82 <bt_setup_random_id_addr+0x4a>
}
   13d7c:	b008      	add	sp, #32
   13d7e:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13d80:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13d82:	79eb      	ldrb	r3, [r5, #7]
   13d84:	b2e2      	uxtb	r2, r4
   13d86:	4293      	cmp	r3, r2
   13d88:	d8e8      	bhi.n	13d5c <bt_setup_random_id_addr+0x24>
			return 0;
   13d8a:	2000      	movs	r0, #0
   13d8c:	e7f6      	b.n	13d7c <bt_setup_random_id_addr+0x44>
   13d8e:	bf00      	nop
   13d90:	20008000 	.word	0x20008000

00013d94 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d98:	4690      	mov	r8, r2
   13d9a:	460e      	mov	r6, r1
   13d9c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   13d9e:	4602      	mov	r2, r0
   13da0:	2800      	cmp	r0, #0
   13da2:	d04b      	beq.n	13e3c <bt_id_set_adv_own_addr+0xa8>
   13da4:	2b00      	cmp	r3, #0
   13da6:	d049      	beq.n	13e3c <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13da8:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   13daa:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13dac:	d531      	bpl.n	13e12 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13dae:	4f25      	ldr	r7, [pc, #148]	; (13e44 <bt_id_set_adv_own_addr+0xb0>)
   13db0:	f1b8 0f00 	cmp.w	r8, #0
   13db4:	d013      	beq.n	13dde <bt_id_set_adv_own_addr+0x4a>
   13db6:	0688      	lsls	r0, r1, #26
   13db8:	d40a      	bmi.n	13dd0 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13dba:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13dbe:	5cfb      	ldrb	r3, [r7, r3]
   13dc0:	2b01      	cmp	r3, #1
   13dc2:	d015      	beq.n	13df0 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   13dc4:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13dc6:	06b2      	lsls	r2, r6, #26
   13dc8:	d50f      	bpl.n	13dea <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13dca:	f043 0302 	orr.w	r3, r3, #2
   13dce:	e00b      	b.n	13de8 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13dd0:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   13dd4:	0659      	lsls	r1, r3, #25
   13dd6:	d4f0      	bmi.n	13dba <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   13dd8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13ddc:	e006      	b.n	13dec <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13dde:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13de2:	5cfb      	ldrb	r3, [r7, r3]
   13de4:	2b01      	cmp	r3, #1
   13de6:	d003      	beq.n	13df0 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   13de8:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   13dea:	2000      	movs	r0, #0
}
   13dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13df0:	2107      	movs	r1, #7
   13df2:	fb01 7104 	mla	r1, r1, r4, r7
   13df6:	4610      	mov	r0, r2
   13df8:	3101      	adds	r1, #1
   13dfa:	f018 fa54 	bl	2c2a6 <bt_id_set_adv_random_addr>
				if (err) {
   13dfe:	2800      	cmp	r0, #0
   13e00:	d1f4      	bne.n	13dec <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   13e02:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13e06:	5d3b      	ldrb	r3, [r7, r4]
   13e08:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13e0a:	f1b8 0f00 	cmp.w	r8, #0
   13e0e:	d0ec      	beq.n	13dea <bt_id_set_adv_own_addr+0x56>
   13e10:	e7d9      	b.n	13dc6 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13e12:	074b      	lsls	r3, r1, #29
   13e14:	d50e      	bpl.n	13e34 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13e16:	4e0b      	ldr	r6, [pc, #44]	; (13e44 <bt_id_set_adv_own_addr+0xb0>)
   13e18:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   13e1c:	5df3      	ldrb	r3, [r6, r7]
   13e1e:	2b01      	cmp	r3, #1
   13e20:	d1e2      	bne.n	13de8 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13e22:	2107      	movs	r1, #7
   13e24:	fb11 3104 	smlabb	r1, r1, r4, r3
   13e28:	4431      	add	r1, r6
   13e2a:	f018 fa3c 	bl	2c2a6 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   13e2e:	5df3      	ldrb	r3, [r6, r7]
   13e30:	702b      	strb	r3, [r5, #0]
		if (err) {
   13e32:	e7db      	b.n	13dec <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   13e34:	f018 fa3f 	bl	2c2b6 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13e38:	2301      	movs	r3, #1
   13e3a:	e7f9      	b.n	13e30 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   13e3c:	f06f 0015 	mvn.w	r0, #21
   13e40:	e7d4      	b.n	13dec <bt_id_set_adv_own_addr+0x58>
   13e42:	bf00      	nop
   13e44:	20008000 	.word	0x20008000

00013e48 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   13e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e4c:	460c      	mov	r4, r1
   13e4e:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13e50:	2120      	movs	r1, #32
{
   13e52:	4692      	mov	sl, r2
   13e54:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13e56:	f7fe fcaf 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   13e5a:	4605      	mov	r5, r0
   13e5c:	2800      	cmp	r0, #0
   13e5e:	d05b      	beq.n	13f18 <hci_set_ad+0xd0>
   13e60:	2120      	movs	r1, #32
   13e62:	300c      	adds	r0, #12
   13e64:	f007 fcb2 	bl	1b7cc <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13e68:	2220      	movs	r2, #32
   13e6a:	4681      	mov	r9, r0
   13e6c:	2100      	movs	r1, #0
   13e6e:	f01c fbb8 	bl	305e2 <memset>
	uint8_t set_data_len = 0;
   13e72:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   13e74:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   13e78:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   13e7c:	2300      	movs	r3, #0
   13e7e:	f8d4 8000 	ldr.w	r8, [r4]
   13e82:	6862      	ldr	r2, [r4, #4]
   13e84:	4293      	cmp	r3, r2
   13e86:	d30c      	bcc.n	13ea2 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   13e88:	3408      	adds	r4, #8
   13e8a:	45a2      	cmp	sl, r4
   13e8c:	d1f6      	bne.n	13e7c <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13e8e:	2200      	movs	r2, #0
   13e90:	4629      	mov	r1, r5
   13e92:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   13e94:	f889 6000 	strb.w	r6, [r9]
}
   13e98:	b009      	add	sp, #36	; 0x24
   13e9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13e9e:	f7fe bcd9 	b.w	12854 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   13ea2:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   13ea6:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   13ea8:	1811      	adds	r1, r2, r0
   13eaa:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   13eac:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   13eb0:	d91b      	bls.n	13eea <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13eb2:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   13eb6:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13eba:	d101      	bne.n	13ec0 <hci_set_ad+0x78>
   13ebc:	2a00      	cmp	r2, #0
   13ebe:	dc12      	bgt.n	13ee6 <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   13ec0:	4b17      	ldr	r3, [pc, #92]	; (13f20 <hci_set_ad+0xd8>)
   13ec2:	9307      	str	r3, [sp, #28]
   13ec4:	2302      	movs	r3, #2
   13ec6:	9306      	str	r3, [sp, #24]
   13ec8:	2300      	movs	r3, #0
   13eca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13ece:	4815      	ldr	r0, [pc, #84]	; (13f24 <hci_set_ad+0xdc>)
   13ed0:	aa06      	add	r2, sp, #24
   13ed2:	f7fa fcdd 	bl	e890 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   13ed6:	4628      	mov	r0, r5
   13ed8:	f007 fb56 	bl	1b588 <net_buf_unref>
					return -EINVAL;
   13edc:	f06f 0015 	mvn.w	r0, #21
}
   13ee0:	b009      	add	sp, #36	; 0x24
   13ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   13ee6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13eea:	b2d7      	uxtb	r7, r2
   13eec:	1c79      	adds	r1, r7, #1
   13eee:	f80b 1006 	strb.w	r1, [fp, r6]
   13ef2:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   13ef4:	b2c9      	uxtb	r1, r1
   13ef6:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13efa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13efe:	fa5b f080 	uxtab	r0, fp, r0
   13f02:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   13f04:	3702      	adds	r7, #2
   13f06:	f01c fb32 	bl	3056e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13f0a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   13f0c:	4437      	add	r7, r6
   13f0e:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   13f10:	3301      	adds	r3, #1
   13f12:	f108 0808 	add.w	r8, r8, #8
   13f16:	e7b4      	b.n	13e82 <hci_set_ad+0x3a>
		return -ENOBUFS;
   13f18:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13f1c:	e7e0      	b.n	13ee0 <hci_set_ad+0x98>
   13f1e:	bf00      	nop
   13f20:	00035104 	.word	0x00035104
   13f24:	000314ac 	.word	0x000314ac

00013f28 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13f28:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   13f2a:	4605      	mov	r5, r0
   13f2c:	4b16      	ldr	r3, [pc, #88]	; (13f88 <le_adv_start_add_conn+0x60>)
   13f2e:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   13f32:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   13f34:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   13f38:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   13f3a:	2207      	movs	r2, #7
   13f3c:	4628      	mov	r0, r5
   13f3e:	4913      	ldr	r1, [pc, #76]	; (13f8c <le_adv_start_add_conn+0x64>)
   13f40:	f01c fb05 	bl	3054e <memcmp>
   13f44:	4603      	mov	r3, r0
   13f46:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13f48:	b96b      	cbnz	r3, 13f66 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   13f4a:	4911      	ldr	r1, [pc, #68]	; (13f90 <le_adv_start_add_conn+0x68>)
   13f4c:	f001 fa38 	bl	153c0 <bt_conn_add_le>
		if (!conn) {
   13f50:	4604      	mov	r4, r0
   13f52:	b910      	cbnz	r0, 13f5a <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   13f54:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   13f58:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   13f5a:	2104      	movs	r1, #4
   13f5c:	f000 ffaa 	bl	14eb4 <bt_conn_set_state>
		return 0;
   13f60:	2000      	movs	r0, #0
		*out_conn = conn;
   13f62:	6034      	str	r4, [r6, #0]
   13f64:	e7f8      	b.n	13f58 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   13f66:	4629      	mov	r1, r5
   13f68:	f001 fa62 	bl	15430 <bt_conn_exists_le>
   13f6c:	b940      	cbnz	r0, 13f80 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   13f6e:	7820      	ldrb	r0, [r4, #0]
   13f70:	4629      	mov	r1, r5
   13f72:	f001 fa25 	bl	153c0 <bt_conn_add_le>
	if (!conn) {
   13f76:	4604      	mov	r4, r0
   13f78:	2800      	cmp	r0, #0
   13f7a:	d0eb      	beq.n	13f54 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   13f7c:	2105      	movs	r1, #5
   13f7e:	e7ed      	b.n	13f5c <le_adv_start_add_conn+0x34>
		return -EINVAL;
   13f80:	f06f 0015 	mvn.w	r0, #21
   13f84:	e7e8      	b.n	13f58 <le_adv_start_add_conn+0x30>
   13f86:	bf00      	nop
   13f88:	20008000 	.word	0x20008000
   13f8c:	000345c9 	.word	0x000345c9
   13f90:	000345c2 	.word	0x000345c2

00013f94 <valid_adv_param>:
{
   13f94:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13f96:	6843      	ldr	r3, [r0, #4]
{
   13f98:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13f9a:	0558      	lsls	r0, r3, #21
   13f9c:	d501      	bpl.n	13fa2 <valid_adv_param+0xe>
		return false;
   13f9e:	2000      	movs	r0, #0
}
   13fa0:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13fa2:	6922      	ldr	r2, [r4, #16]
   13fa4:	b10a      	cbz	r2, 13faa <valid_adv_param+0x16>
   13fa6:	07d9      	lsls	r1, r3, #31
   13fa8:	d5f9      	bpl.n	13f9e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   13faa:	4d19      	ldr	r5, [pc, #100]	; (14010 <valid_adv_param+0x7c>)
   13fac:	7820      	ldrb	r0, [r4, #0]
   13fae:	79eb      	ldrb	r3, [r5, #7]
   13fb0:	4283      	cmp	r3, r0
   13fb2:	d9f4      	bls.n	13f9e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   13fb4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13fb8:	2207      	movs	r2, #7
   13fba:	4916      	ldr	r1, [pc, #88]	; (14014 <valid_adv_param+0x80>)
   13fbc:	4428      	add	r0, r5
   13fbe:	f01c fac6 	bl	3054e <memcmp>
	if (param->id >= bt_dev.id_count ||
   13fc2:	2800      	cmp	r0, #0
   13fc4:	d0eb      	beq.n	13f9e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13fc6:	6860      	ldr	r0, [r4, #4]
   13fc8:	07c2      	lsls	r2, r0, #31
   13fca:	d406      	bmi.n	13fda <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   13fcc:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   13fd0:	2b08      	cmp	r3, #8
   13fd2:	d802      	bhi.n	13fda <valid_adv_param+0x46>
   13fd4:	68a3      	ldr	r3, [r4, #8]
   13fd6:	2b9f      	cmp	r3, #159	; 0x9f
   13fd8:	d9e1      	bls.n	13f9e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   13fda:	f010 0f30 	tst.w	r0, #48	; 0x30
   13fde:	d002      	beq.n	13fe6 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   13fe0:	6923      	ldr	r3, [r4, #16]
   13fe2:	2b00      	cmp	r3, #0
   13fe4:	d0db      	beq.n	13f9e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   13fe6:	06c3      	lsls	r3, r0, #27
   13fe8:	d401      	bmi.n	13fee <valid_adv_param+0x5a>
   13fea:	6923      	ldr	r3, [r4, #16]
   13fec:	b943      	cbnz	r3, 14000 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   13fee:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   13ff2:	429a      	cmp	r2, r3
   13ff4:	d8d3      	bhi.n	13f9e <valid_adv_param+0xa>
   13ff6:	2a1f      	cmp	r2, #31
   13ff8:	d9d1      	bls.n	13f9e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   13ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   13ffe:	d8ce      	bhi.n	13f9e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   14000:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   14004:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14008:	bf18      	it	ne
   1400a:	2001      	movne	r0, #1
   1400c:	e7c8      	b.n	13fa0 <valid_adv_param+0xc>
   1400e:	bf00      	nop
   14010:	20008000 	.word	0x20008000
   14014:	000345c9 	.word	0x000345c9

00014018 <bt_le_ext_adv_foreach>:
{
   14018:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1401a:	4801      	ldr	r0, [pc, #4]	; (14020 <bt_le_ext_adv_foreach+0x8>)
   1401c:	4718      	bx	r3
   1401e:	bf00      	nop
   14020:	20008018 	.word	0x20008018

00014024 <bt_le_adv_lookup_legacy>:
}
   14024:	4800      	ldr	r0, [pc, #0]	; (14028 <bt_le_adv_lookup_legacy+0x4>)
   14026:	4770      	bx	lr
   14028:	20008018 	.word	0x20008018

0001402c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14030:	b093      	sub	sp, #76	; 0x4c
   14032:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   14034:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   14036:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1403a:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1403c:	ebba 0403 	subs.w	r4, sl, r3
   14040:	4890      	ldr	r0, [pc, #576]	; (14284 <bt_le_adv_start_legacy+0x258>)
   14042:	bf18      	it	ne
   14044:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   14046:	9307      	str	r3, [sp, #28]
   14048:	f018 f971 	bl	2c32e <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1404c:	0747      	lsls	r7, r0, #29
{
   1404e:	460d      	mov	r5, r1
   14050:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14052:	f140 810d 	bpl.w	14270 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   14056:	4608      	mov	r0, r1
   14058:	f7ff ff9c 	bl	13f94 <valid_adv_param>
   1405c:	b928      	cbnz	r0, 1406a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1405e:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   14062:	4620      	mov	r0, r4
   14064:	b013      	add	sp, #76	; 0x4c
   14066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1406a:	4628      	mov	r0, r5
   1406c:	f018 f93a 	bl	2c2e4 <bt_id_adv_random_addr_check>
   14070:	4681      	mov	r9, r0
   14072:	2800      	cmp	r0, #0
   14074:	d0f3      	beq.n	1405e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14076:	f106 0810 	add.w	r8, r6, #16
   1407a:	4640      	mov	r0, r8
   1407c:	f018 f957 	bl	2c32e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14080:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   14084:	0600      	lsls	r0, r0, #24
   14086:	f100 80f6 	bmi.w	14276 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   1408a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1408e:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14092:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14094:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14096:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1409a:	68eb      	ldr	r3, [r5, #12]
   1409c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   140a0:	f018 f936 	bl	2c310 <get_adv_channel_map>
	if (adv->id != param->id) {
   140a4:	7832      	ldrb	r2, [r6, #0]
   140a6:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   140a8:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   140ac:	429a      	cmp	r2, r3
   140ae:	d004      	beq.n	140ba <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   140b0:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   140b4:	4873      	ldr	r0, [pc, #460]	; (14284 <bt_le_adv_start_legacy+0x258>)
   140b6:	f018 f93d 	bl	2c334 <atomic_and>
	adv->id = param->id;
   140ba:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   140bc:	4a72      	ldr	r2, [pc, #456]	; (14288 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   140be:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   140c0:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   140c4:	4630      	mov	r0, r6
   140c6:	4622      	mov	r2, r4
   140c8:	6869      	ldr	r1, [r5, #4]
   140ca:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   140ce:	f7ff fe61 	bl	13d94 <bt_id_set_adv_own_addr>
	if (err) {
   140d2:	4604      	mov	r4, r0
   140d4:	2800      	cmp	r0, #0
   140d6:	d1c4      	bne.n	14062 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   140d8:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   140dc:	f1ba 0f00 	cmp.w	sl, #0
   140e0:	d013      	beq.n	1410a <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   140e2:	6929      	ldr	r1, [r5, #16]
   140e4:	f018 f931 	bl	2c34a <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   140e8:	4628      	mov	r0, r5
   140ea:	f018 f9ba 	bl	2c462 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   140ee:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   140f0:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   140f2:	07d9      	lsls	r1, r3, #31
   140f4:	d416      	bmi.n	14124 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   140f6:	059b      	lsls	r3, r3, #22
   140f8:	d403      	bmi.n	14102 <bt_le_adv_start_legacy+0xd6>
   140fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   140fc:	b90b      	cbnz	r3, 14102 <bt_le_adv_start_legacy+0xd6>
   140fe:	2f02      	cmp	r7, #2
   14100:	d159      	bne.n	141b6 <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   14102:	2302      	movs	r3, #2
   14104:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14108:	e019      	b.n	1413e <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1410a:	4960      	ldr	r1, [pc, #384]	; (1428c <bt_le_adv_start_legacy+0x260>)
   1410c:	f018 f91d 	bl	2c34a <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   14110:	4628      	mov	r0, r5
   14112:	f018 f9a6 	bl	2c462 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14116:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   14118:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1411a:	07da      	lsls	r2, r3, #31
   1411c:	d5eb      	bpl.n	140f6 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   1411e:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   14122:	e00c      	b.n	1413e <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   14124:	f013 0f10 	tst.w	r3, #16
   14128:	bf0c      	ite	eq
   1412a:	2301      	moveq	r3, #1
   1412c:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1412e:	6929      	ldr	r1, [r5, #16]
   14130:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   14134:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   14138:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1413a:	f018 f906 	bl	2c34a <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1413e:	210f      	movs	r1, #15
   14140:	f242 0006 	movw	r0, #8198	; 0x2006
   14144:	f7fe fb38 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   14148:	4604      	mov	r4, r0
   1414a:	2800      	cmp	r0, #0
   1414c:	f000 8096 	beq.w	1427c <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14150:	220f      	movs	r2, #15
   14152:	a908      	add	r1, sp, #32
   14154:	300c      	adds	r0, #12
   14156:	f019 ff5e 	bl	2e016 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1415a:	4621      	mov	r1, r4
   1415c:	2200      	movs	r2, #0
   1415e:	f242 0006 	movw	r0, #8198	; 0x2006
   14162:	f7fe fb77 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
   14166:	4604      	mov	r4, r0
   14168:	2800      	cmp	r0, #0
   1416a:	f47f af7a 	bne.w	14062 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1416e:	f1ba 0f00 	cmp.w	sl, #0
   14172:	d026      	beq.n	141c2 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14174:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14176:	07dc      	lsls	r4, r3, #31
   14178:	d431      	bmi.n	141de <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1417a:	2101      	movs	r1, #1
   1417c:	4630      	mov	r0, r6
   1417e:	f018 f980 	bl	2c482 <bt_le_adv_set_enable_legacy>
	if (err) {
   14182:	4604      	mov	r4, r0
   14184:	2800      	cmp	r0, #0
   14186:	d06b      	beq.n	14260 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   14188:	4b41      	ldr	r3, [pc, #260]	; (14290 <bt_le_adv_start_legacy+0x264>)
   1418a:	9311      	str	r3, [sp, #68]	; 0x44
   1418c:	2302      	movs	r3, #2
   1418e:	9310      	str	r3, [sp, #64]	; 0x40
   14190:	2300      	movs	r3, #0
   14192:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14196:	483f      	ldr	r0, [pc, #252]	; (14294 <bt_le_adv_start_legacy+0x268>)
   14198:	aa10      	add	r2, sp, #64	; 0x40
   1419a:	f7fa fb79 	bl	e890 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1419e:	9d07      	ldr	r5, [sp, #28]
   141a0:	2d00      	cmp	r5, #0
   141a2:	f43f af5e 	beq.w	14062 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   141a6:	4628      	mov	r0, r5
   141a8:	2100      	movs	r1, #0
   141aa:	f000 fe83 	bl	14eb4 <bt_conn_set_state>
			bt_conn_unref(conn);
   141ae:	4628      	mov	r0, r5
   141b0:	f000 fe48 	bl	14e44 <bt_conn_unref>
   141b4:	e755      	b.n	14062 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   141b6:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   141b8:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   141bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   141c0:	e7bd      	b.n	1413e <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   141c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   141c4:	4659      	mov	r1, fp
   141c6:	9300      	str	r3, [sp, #0]
   141c8:	4630      	mov	r0, r6
   141ca:	e9cd 9701 	strd	r9, r7, [sp, #4]
   141ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   141d0:	9a05      	ldr	r2, [sp, #20]
   141d2:	f018 f8d4 	bl	2c37e <le_adv_update.constprop.0>
		if (err) {
   141d6:	4604      	mov	r4, r0
   141d8:	2800      	cmp	r0, #0
   141da:	d0cb      	beq.n	14174 <bt_le_adv_start_legacy+0x148>
   141dc:	e741      	b.n	14062 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   141de:	4630      	mov	r0, r6
   141e0:	a907      	add	r1, sp, #28
   141e2:	f7ff fea1 	bl	13f28 <le_adv_start_add_conn>
		if (err) {
   141e6:	4604      	mov	r4, r0
   141e8:	2800      	cmp	r0, #0
   141ea:	d0c6      	beq.n	1417a <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   141ec:	f110 0f0c 	cmn.w	r0, #12
   141f0:	f47f af37 	bne.w	14062 <bt_le_adv_start_legacy+0x36>
   141f4:	f1ba 0f00 	cmp.w	sl, #0
   141f8:	f47f af33 	bne.w	14062 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   141fc:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   141fe:	0798      	lsls	r0, r3, #30
   14200:	f53f af2f 	bmi.w	14062 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14204:	686c      	ldr	r4, [r5, #4]
   14206:	f084 0402 	eor.w	r4, r4, #2
   1420a:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1420e:	f004 0201 	and.w	r2, r4, #1
   14212:	210e      	movs	r1, #14
   14214:	4640      	mov	r0, r8
   14216:	f018 f89f 	bl	2c358 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1421a:	1e7b      	subs	r3, r7, #1
   1421c:	425a      	negs	r2, r3
   1421e:	415a      	adcs	r2, r3
   14220:	2108      	movs	r1, #8
   14222:	4640      	mov	r0, r8
   14224:	f018 f898 	bl	2c358 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   14228:	1eb9      	subs	r1, r7, #2
   1422a:	424a      	negs	r2, r1
   1422c:	414a      	adcs	r2, r1
   1422e:	4640      	mov	r0, r8
   14230:	2109      	movs	r1, #9
   14232:	f018 f891 	bl	2c358 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   14236:	686a      	ldr	r2, [r5, #4]
   14238:	210a      	movs	r1, #10
   1423a:	4640      	mov	r0, r8
   1423c:	f002 0201 	and.w	r2, r2, #1
   14240:	f018 f88a 	bl	2c358 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   14244:	464a      	mov	r2, r9
   14246:	210b      	movs	r1, #11
   14248:	4640      	mov	r0, r8
   1424a:	f018 f885 	bl	2c358 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1424e:	686a      	ldr	r2, [r5, #4]
   14250:	210d      	movs	r1, #13
   14252:	4640      	mov	r0, r8
   14254:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14258:	f018 f87e 	bl	2c358 <atomic_set_bit_to>
	return 0;
   1425c:	2400      	movs	r4, #0
   1425e:	e700      	b.n	14062 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14260:	9807      	ldr	r0, [sp, #28]
   14262:	b108      	cbz	r0, 14268 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   14264:	f000 fdee 	bl	14e44 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14268:	f1ba 0f00 	cmp.w	sl, #0
   1426c:	d1cf      	bne.n	1420e <bt_le_adv_start_legacy+0x1e2>
   1426e:	e7c9      	b.n	14204 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   14270:	f06f 040a 	mvn.w	r4, #10
   14274:	e6f5      	b.n	14062 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   14276:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1427a:	e6f2      	b.n	14062 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1427c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14280:	e6ef      	b.n	14062 <bt_le_adv_start_legacy+0x36>
   14282:	bf00      	nop
   14284:	200080cc 	.word	0x200080cc
   14288:	20008000 	.word	0x20008000
   1428c:	000345c9 	.word	0x000345c9
   14290:	0003511d 	.word	0x0003511d
   14294:	000314ac 	.word	0x000314ac

00014298 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   14298:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1429a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1429c:	9a06      	ldr	r2, [sp, #24]
{
   1429e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   142a0:	e9cd 3200 	strd	r3, r2, [sp]
   142a4:	462b      	mov	r3, r5
   142a6:	460a      	mov	r2, r1
   142a8:	4601      	mov	r1, r0
   142aa:	4811      	ldr	r0, [pc, #68]	; (142f0 <bt_le_adv_start+0x58>)
   142ac:	f7ff febe 	bl	1402c <bt_le_adv_start_legacy>
   142b0:	4621      	mov	r1, r4
   142b2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   142b4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   142b6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   142ba:	429d      	cmp	r5, r3
   142bc:	d102      	bne.n	142c4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   142be:	4630      	mov	r0, r6
   142c0:	b002      	add	sp, #8
   142c2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   142c4:	880a      	ldrh	r2, [r1, #0]
   142c6:	4282      	cmp	r2, r0
   142c8:	d104      	bne.n	142d4 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   142ca:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   142cc:	b112      	cbz	r2, 142d4 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   142ce:	7812      	ldrb	r2, [r2, #0]
   142d0:	07d2      	lsls	r2, r2, #31
   142d2:	d402      	bmi.n	142da <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   142d4:	3301      	adds	r3, #1
   142d6:	3108      	adds	r1, #8
   142d8:	e7ef      	b.n	142ba <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   142da:	4906      	ldr	r1, [pc, #24]	; (142f4 <bt_le_adv_start+0x5c>)
   142dc:	4806      	ldr	r0, [pc, #24]	; (142f8 <bt_le_adv_start+0x60>)
   142de:	f011 fdf7 	bl	25ed0 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   142e2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   142e6:	2300      	movs	r3, #0
   142e8:	4803      	ldr	r0, [pc, #12]	; (142f8 <bt_le_adv_start+0x60>)
   142ea:	f011 ff0d 	bl	26108 <k_work_reschedule>
   142ee:	e7e6      	b.n	142be <bt_le_adv_start+0x26>
   142f0:	20008018 	.word	0x20008018
   142f4:	00014381 	.word	0x00014381
   142f8:	20008030 	.word	0x20008030

000142fc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   142fc:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   142fe:	481a      	ldr	r0, [pc, #104]	; (14368 <bt_le_adv_stop+0x6c>)
   14300:	f018 f8e6 	bl	2c4d0 <bt_le_lim_adv_cancel_timeout>
   14304:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   14308:	4818      	ldr	r0, [pc, #96]	; (1436c <bt_le_adv_stop+0x70>)
   1430a:	f018 f813 	bl	2c334 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1430e:	4817      	ldr	r0, [pc, #92]	; (1436c <bt_le_adv_stop+0x70>)
   14310:	f018 f80d 	bl	2c32e <atomic_get>
   14314:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14316:	061a      	lsls	r2, r3, #24
   14318:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   1431c:	d523      	bpl.n	14366 <bt_le_adv_stop+0x6a>
   1431e:	4813      	ldr	r0, [pc, #76]	; (1436c <bt_le_adv_stop+0x70>)
   14320:	f018 f805 	bl	2c32e <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14324:	0543      	lsls	r3, r0, #21
   14326:	d514      	bpl.n	14352 <bt_le_adv_stop+0x56>
   14328:	2207      	movs	r2, #7
   1432a:	4911      	ldr	r1, [pc, #68]	; (14370 <bt_le_adv_stop+0x74>)
   1432c:	4811      	ldr	r0, [pc, #68]	; (14374 <bt_le_adv_stop+0x78>)
   1432e:	f01c f90e 	bl	3054e <memcmp>
   14332:	4b11      	ldr	r3, [pc, #68]	; (14378 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14334:	b998      	cbnz	r0, 1435e <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   14336:	2204      	movs	r2, #4
   14338:	4910      	ldr	r1, [pc, #64]	; (1437c <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1433a:	7e18      	ldrb	r0, [r3, #24]
   1433c:	f001 f8a8 	bl	15490 <bt_conn_lookup_state_le>
   14340:	4604      	mov	r4, r0
	if (conn) {
   14342:	b130      	cbz	r0, 14352 <bt_le_adv_stop+0x56>
		conn->err = status;
   14344:	2100      	movs	r1, #0
   14346:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14348:	f000 fdb4 	bl	14eb4 <bt_conn_set_state>
		bt_conn_unref(conn);
   1434c:	4620      	mov	r0, r4
   1434e:	f000 fd79 	bl	14e44 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   14352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   14356:	2100      	movs	r1, #0
   14358:	4803      	ldr	r0, [pc, #12]	; (14368 <bt_le_adv_stop+0x6c>)
   1435a:	f018 b892 	b.w	2c482 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1435e:	2205      	movs	r2, #5
   14360:	f103 0121 	add.w	r1, r3, #33	; 0x21
   14364:	e7e9      	b.n	1433a <bt_le_adv_stop+0x3e>
}
   14366:	bd10      	pop	{r4, pc}
   14368:	20008018 	.word	0x20008018
   1436c:	20008028 	.word	0x20008028
   14370:	000345c9 	.word	0x000345c9
   14374:	20008021 	.word	0x20008021
   14378:	20008000 	.word	0x20008000
   1437c:	000345c2 	.word	0x000345c2

00014380 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   14380:	b580      	push	{r7, lr}
   14382:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   14384:	f7ff ffba 	bl	142fc <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   14388:	b088      	sub	sp, #32
   1438a:	466a      	mov	r2, sp
   1438c:	4b06      	ldr	r3, [pc, #24]	; (143a8 <adv_timeout+0x28>)
   1438e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14392:	2303      	movs	r3, #3
   14394:	f842 3f10 	str.w	r3, [r2, #16]!
   14398:	2300      	movs	r3, #0
   1439a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1439e:	4803      	ldr	r0, [pc, #12]	; (143ac <adv_timeout+0x2c>)
   143a0:	f7fa fa76 	bl	e890 <z_impl_z_log_msg_static_create>
}
   143a4:	46bd      	mov	sp, r7
   143a6:	bd80      	pop	{r7, pc}
   143a8:	00035138 	.word	0x00035138
   143ac:	000314ac 	.word	0x000314ac

000143b0 <bt_le_adv_resume>:
{
   143b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   143b2:	4c1e      	ldr	r4, [pc, #120]	; (1442c <bt_le_adv_resume+0x7c>)
   143b4:	4620      	mov	r0, r4
   143b6:	f017 ffba 	bl	2c32e <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   143ba:	0440      	lsls	r0, r0, #17
   143bc:	d534      	bpl.n	14428 <bt_le_adv_resume+0x78>
   143be:	4620      	mov	r0, r4
   143c0:	f017 ffb5 	bl	2c32e <atomic_get>
   143c4:	0601      	lsls	r1, r0, #24
   143c6:	d42f      	bmi.n	14428 <bt_le_adv_resume+0x78>
   143c8:	4620      	mov	r0, r4
   143ca:	f017 ffb0 	bl	2c32e <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   143ce:	0542      	lsls	r2, r0, #21
   143d0:	d52a      	bpl.n	14428 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   143d2:	a901      	add	r1, sp, #4
   143d4:	f1a4 0010 	sub.w	r0, r4, #16
   143d8:	f7ff fda6 	bl	13f28 <le_adv_start_add_conn>
	if (err) {
   143dc:	4605      	mov	r5, r0
   143de:	bb18      	cbnz	r0, 14428 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   143e0:	2101      	movs	r1, #1
   143e2:	f1a4 0010 	sub.w	r0, r4, #16
   143e6:	f018 f84c 	bl	2c482 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   143ea:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   143ec:	b928      	cbnz	r0, 143fa <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   143ee:	4630      	mov	r0, r6
}
   143f0:	b002      	add	sp, #8
   143f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   143f6:	f000 bd25 	b.w	14e44 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   143fa:	4629      	mov	r1, r5
   143fc:	4630      	mov	r0, r6
   143fe:	f000 fd59 	bl	14eb4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14402:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   14406:	4620      	mov	r0, r4
   14408:	f017 ff94 	bl	2c334 <atomic_and>
   1440c:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1440e:	4630      	mov	r0, r6
   14410:	f000 fd18 	bl	14e44 <bt_conn_unref>
	if (persist_paused) {
   14414:	046b      	lsls	r3, r5, #17
   14416:	d507      	bpl.n	14428 <bt_le_adv_resume+0x78>
   14418:	e8d4 3fef 	ldaex	r3, [r4]
   1441c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   14420:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14424:	2a00      	cmp	r2, #0
   14426:	d1f7      	bne.n	14418 <bt_le_adv_resume+0x68>
}
   14428:	b002      	add	sp, #8
   1442a:	bd70      	pop	{r4, r5, r6, pc}
   1442c:	20008028 	.word	0x20008028

00014430 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14430:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   14432:	b508      	push	{r3, lr}
   14434:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14438:	d910      	bls.n	1445c <sys_memcpy_swap.constprop.0+0x2c>
   1443a:	4298      	cmp	r0, r3
   1443c:	d213      	bcs.n	14466 <sys_memcpy_swap.constprop.0+0x36>
   1443e:	490e      	ldr	r1, [pc, #56]	; (14478 <sys_memcpy_swap.constprop.0+0x48>)
   14440:	f240 2315 	movw	r3, #533	; 0x215
   14444:	4a0d      	ldr	r2, [pc, #52]	; (1447c <sys_memcpy_swap.constprop.0+0x4c>)
   14446:	480e      	ldr	r0, [pc, #56]	; (14480 <sys_memcpy_swap.constprop.0+0x50>)
   14448:	f016 f937 	bl	2a6ba <assert_print>
   1444c:	480d      	ldr	r0, [pc, #52]	; (14484 <sys_memcpy_swap.constprop.0+0x54>)
   1444e:	f016 f934 	bl	2a6ba <assert_print>
   14452:	f240 2115 	movw	r1, #533	; 0x215
   14456:	4809      	ldr	r0, [pc, #36]	; (1447c <sys_memcpy_swap.constprop.0+0x4c>)
   14458:	f016 f928 	bl	2a6ac <assert_post_action>
   1445c:	d0ef      	beq.n	1443e <sys_memcpy_swap.constprop.0+0xe>
   1445e:	f100 0210 	add.w	r2, r0, #16
   14462:	4291      	cmp	r1, r2
   14464:	e7ea      	b.n	1443c <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   14466:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   14468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1446c:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   1446e:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   14472:	d1f9      	bne.n	14468 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   14474:	bd08      	pop	{r3, pc}
   14476:	bf00      	nop
   14478:	00035190 	.word	0x00035190
   1447c:	0003515e 	.word	0x0003515e
   14480:	00032659 	.word	0x00032659
   14484:	000351e7 	.word	0x000351e7

00014488 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   14488:	b530      	push	{r4, r5, lr}
   1448a:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1448c:	2120      	movs	r1, #32
   1448e:	a80a      	add	r0, sp, #40	; 0x28
   14490:	f7fe fa84 	bl	1299c <bt_hci_le_rand>
	if (ret) {
   14494:	4604      	mov	r4, r0
   14496:	bb18      	cbnz	r0, 144e0 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   14498:	f01b ff50 	bl	3033c <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1449c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   144a0:	fba0 2305 	umull	r2, r3, r0, r5
   144a4:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   144a8:	2308      	movs	r3, #8
   144aa:	0bd2      	lsrs	r2, r2, #15
   144ac:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   144b0:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   144b2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   144b6:	9300      	str	r3, [sp, #0]
   144b8:	2220      	movs	r2, #32
   144ba:	480b      	ldr	r0, [pc, #44]	; (144e8 <prng_reseed.constprop.0+0x60>)
   144bc:	446b      	add	r3, sp
   144be:	a90a      	add	r1, sp, #40	; 0x28
   144c0:	f017 fbd7 	bl	2bc72 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   144c4:	b960      	cbnz	r0, 144e0 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
   144c6:	4b09      	ldr	r3, [pc, #36]	; (144ec <prng_reseed.constprop.0+0x64>)
   144c8:	9309      	str	r3, [sp, #36]	; 0x24
   144ca:	2302      	movs	r3, #2
   144cc:	9308      	str	r3, [sp, #32]
   144ce:	4623      	mov	r3, r4
   144d0:	f06f 0404 	mvn.w	r4, #4
   144d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144d8:	4805      	ldr	r0, [pc, #20]	; (144f0 <prng_reseed.constprop.0+0x68>)
   144da:	aa08      	add	r2, sp, #32
   144dc:	f7fa f9d8 	bl	e890 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   144e0:	4620      	mov	r0, r4
   144e2:	b013      	add	sp, #76	; 0x4c
   144e4:	bd30      	pop	{r4, r5, pc}
   144e6:	bf00      	nop
   144e8:	20009c70 	.word	0x20009c70
   144ec:	00035219 	.word	0x00035219
   144f0:	000314ec 	.word	0x000314ec

000144f4 <prng_init>:

int prng_init(void)
{
   144f4:	b510      	push	{r4, lr}
   144f6:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   144f8:	2108      	movs	r1, #8
   144fa:	4668      	mov	r0, sp
   144fc:	f7fe fa4e 	bl	1299c <bt_hci_le_rand>
	if (ret) {
   14500:	4604      	mov	r4, r0
   14502:	b990      	cbnz	r0, 1452a <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   14504:	2208      	movs	r2, #8
   14506:	4669      	mov	r1, sp
   14508:	480b      	ldr	r0, [pc, #44]	; (14538 <prng_init+0x44>)
   1450a:	f017 fb92 	bl	2bc32 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1450e:	b978      	cbnz	r0, 14530 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
   14510:	4b0a      	ldr	r3, [pc, #40]	; (1453c <prng_init+0x48>)
   14512:	9307      	str	r3, [sp, #28]
   14514:	2302      	movs	r3, #2
   14516:	9306      	str	r3, [sp, #24]
   14518:	4623      	mov	r3, r4
		return -EIO;
   1451a:	f06f 0404 	mvn.w	r4, #4
   1451e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14522:	4807      	ldr	r0, [pc, #28]	; (14540 <prng_init+0x4c>)
   14524:	aa06      	add	r2, sp, #24
   14526:	f7fa f9b3 	bl	e890 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1452a:	4620      	mov	r0, r4
   1452c:	b008      	add	sp, #32
   1452e:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   14530:	f7ff ffaa 	bl	14488 <prng_reseed.constprop.0>
   14534:	4604      	mov	r4, r0
   14536:	e7f8      	b.n	1452a <prng_init+0x36>
   14538:	20009c70 	.word	0x20009c70
   1453c:	00035230 	.word	0x00035230
   14540:	000314ec 	.word	0x000314ec

00014544 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   14544:	b538      	push	{r3, r4, r5, lr}
   14546:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   14548:	4604      	mov	r4, r0
   1454a:	b198      	cbz	r0, 14574 <bt_rand+0x30>
   1454c:	b191      	cbz	r1, 14574 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1454e:	4a0b      	ldr	r2, [pc, #44]	; (1457c <bt_rand+0x38>)
   14550:	f017 fba8 	bl	2bca4 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   14554:	1c43      	adds	r3, r0, #1
   14556:	d107      	bne.n	14568 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   14558:	f7ff ff96 	bl	14488 <prng_reseed.constprop.0>
		if (ret) {
   1455c:	b948      	cbnz	r0, 14572 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1455e:	4629      	mov	r1, r5
   14560:	4620      	mov	r0, r4
   14562:	4a06      	ldr	r2, [pc, #24]	; (1457c <bt_rand+0x38>)
   14564:	f017 fb9e 	bl	2bca4 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   14568:	2801      	cmp	r0, #1
   1456a:	bf0c      	ite	eq
   1456c:	2000      	moveq	r0, #0
   1456e:	f06f 0004 	mvnne.w	r0, #4
}
   14572:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14574:	f06f 0015 	mvn.w	r0, #21
   14578:	e7fb      	b.n	14572 <bt_rand+0x2e>
   1457a:	bf00      	nop
   1457c:	20009c70 	.word	0x20009c70

00014580 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14580:	2240      	movs	r2, #64	; 0x40
{
   14582:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14584:	4903      	ldr	r1, [pc, #12]	; (14594 <bt_pub_key_is_debug+0x14>)
   14586:	f01b ffe2 	bl	3054e <memcmp>
}
   1458a:	fab0 f080 	clz	r0, r0
   1458e:	0940      	lsrs	r0, r0, #5
   14590:	bd08      	pop	{r3, pc}
   14592:	bf00      	nop
   14594:	000352e0 	.word	0x000352e0

00014598 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   14598:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1459a:	4b3d      	ldr	r3, [pc, #244]	; (14690 <bt_pub_key_gen+0xf8>)
{
   1459c:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1459e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   145a2:	f003 0306 	and.w	r3, r3, #6
   145a6:	2b06      	cmp	r3, #6
   145a8:	d00f      	beq.n	145ca <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   145aa:	4b3a      	ldr	r3, [pc, #232]	; (14694 <bt_pub_key_gen+0xfc>)
   145ac:	9305      	str	r3, [sp, #20]
   145ae:	2302      	movs	r3, #2
   145b0:	9304      	str	r3, [sp, #16]
		return -ENOTSUP;
   145b2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   145b6:	2300      	movs	r3, #0
   145b8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   145bc:	4836      	ldr	r0, [pc, #216]	; (14698 <bt_pub_key_gen+0x100>)
   145be:	aa04      	add	r2, sp, #16
   145c0:	f7fa f966 	bl	e890 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   145c4:	4628      	mov	r0, r5
   145c6:	b007      	add	sp, #28
   145c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   145ca:	2800      	cmp	r0, #0
   145cc:	d05d      	beq.n	1468a <bt_pub_key_gen+0xf2>
	return list->head;
   145ce:	4e33      	ldr	r6, [pc, #204]	; (1469c <bt_pub_key_gen+0x104>)
   145d0:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   145d2:	b1a2      	cbz	r2, 145fe <bt_pub_key_gen+0x66>
   145d4:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   145d6:	4283      	cmp	r3, r0
   145d8:	d10d      	bne.n	145f6 <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
   145da:	4b31      	ldr	r3, [pc, #196]	; (146a0 <bt_pub_key_gen+0x108>)
   145dc:	9305      	str	r3, [sp, #20]
   145de:	2302      	movs	r3, #2
   145e0:	9304      	str	r3, [sp, #16]
   145e2:	2300      	movs	r3, #0
   145e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   145e8:	482b      	ldr	r0, [pc, #172]	; (14698 <bt_pub_key_gen+0x100>)
   145ea:	aa04      	add	r2, sp, #16
   145ec:	f7fa f950 	bl	e890 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   145f0:	f06f 0577 	mvn.w	r5, #119	; 0x77
   145f4:	e7e6      	b.n	145c4 <bt_pub_key_gen+0x2c>
	return node->next;
   145f6:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   145f8:	b10b      	cbz	r3, 145fe <bt_pub_key_gen+0x66>
   145fa:	3b04      	subs	r3, #4
   145fc:	e7eb      	b.n	145d6 <bt_pub_key_gen+0x3e>
	parent->next = child;
   145fe:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   14600:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   14602:	1d03      	adds	r3, r0, #4
	list->head = node;
   14604:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   14606:	b902      	cbnz	r2, 1460a <bt_pub_key_gen+0x72>
	list->tail = node;
   14608:	6073      	str	r3, [r6, #4]
   1460a:	4c26      	ldr	r4, [pc, #152]	; (146a4 <bt_pub_key_gen+0x10c>)
   1460c:	e8d4 7fef 	ldaex	r7, [r4]
   14610:	f047 0320 	orr.w	r3, r7, #32
   14614:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14618:	2a00      	cmp	r2, #0
   1461a:	d1f7      	bne.n	1460c <bt_pub_key_gen+0x74>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1461c:	f017 0720 	ands.w	r7, r7, #32
   14620:	d001      	beq.n	14626 <bt_pub_key_gen+0x8e>
	return 0;
   14622:	2500      	movs	r5, #0
   14624:	e7ce      	b.n	145c4 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14626:	e8d4 3fef 	ldaex	r3, [r4]
   1462a:	f023 0310 	bic.w	r3, r3, #16
   1462e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14632:	2a00      	cmp	r2, #0
   14634:	d1f7      	bne.n	14626 <bt_pub_key_gen+0x8e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   14636:	463a      	mov	r2, r7
   14638:	4639      	mov	r1, r7
   1463a:	f242 0025 	movw	r0, #8229	; 0x2025
   1463e:	f7fe f909 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
   14642:	4605      	mov	r5, r0
   14644:	2800      	cmp	r0, #0
   14646:	d0ec      	beq.n	14622 <bt_pub_key_gen+0x8a>
		LOG_ERR("Sending LE P256 Public Key command failed");
   14648:	4b17      	ldr	r3, [pc, #92]	; (146a8 <bt_pub_key_gen+0x110>)
   1464a:	9305      	str	r3, [sp, #20]
   1464c:	2302      	movs	r3, #2
   1464e:	9304      	str	r3, [sp, #16]
   14650:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14654:	463b      	mov	r3, r7
   14656:	4810      	ldr	r0, [pc, #64]	; (14698 <bt_pub_key_gen+0x100>)
   14658:	aa04      	add	r2, sp, #16
   1465a:	f7fa f919 	bl	e890 <z_impl_z_log_msg_static_create>
   1465e:	e8d4 3fef 	ldaex	r3, [r4]
   14662:	f023 0320 	bic.w	r3, r3, #32
   14666:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1466a:	2a00      	cmp	r2, #0
   1466c:	d1f7      	bne.n	1465e <bt_pub_key_gen+0xc6>
	return list->head;
   1466e:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14670:	b13c      	cbz	r4, 14682 <bt_pub_key_gen+0xea>
			if (cb->func) {
   14672:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14676:	3c04      	subs	r4, #4
			if (cb->func) {
   14678:	b10b      	cbz	r3, 1467e <bt_pub_key_gen+0xe6>
				cb->func(NULL);
   1467a:	2000      	movs	r0, #0
   1467c:	4798      	blx	r3
	return node->next;
   1467e:	6864      	ldr	r4, [r4, #4]
   14680:	e7f6      	b.n	14670 <bt_pub_key_gen+0xd8>
	list->head = NULL;
   14682:	2300      	movs	r3, #0
	list->tail = NULL;
   14684:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   14688:	e79c      	b.n	145c4 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   1468a:	f06f 0515 	mvn.w	r5, #21
   1468e:	e799      	b.n	145c4 <bt_pub_key_gen+0x2c>
   14690:	20008000 	.word	0x20008000
   14694:	00035259 	.word	0x00035259
   14698:	000314cc 	.word	0x000314cc
   1469c:	200215cc 	.word	0x200215cc
   146a0:	00035278 	.word	0x00035278
   146a4:	200080cc 	.word	0x200080cc
   146a8:	00035294 	.word	0x00035294

000146ac <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   146ac:	4b04      	ldr	r3, [pc, #16]	; (146c0 <bt_pub_key_get+0x14>)
   146ae:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   146b2:	f013 0f10 	tst.w	r3, #16
}
   146b6:	4803      	ldr	r0, [pc, #12]	; (146c4 <bt_pub_key_get+0x18>)
   146b8:	bf08      	it	eq
   146ba:	2000      	moveq	r0, #0
   146bc:	4770      	bx	lr
   146be:	bf00      	nop
   146c0:	200080cc 	.word	0x200080cc
   146c4:	200223b7 	.word	0x200223b7

000146c8 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   146c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   146ca:	4e27      	ldr	r6, [pc, #156]	; (14768 <bt_dh_key_gen+0xa0>)
{
   146cc:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   146ce:	6833      	ldr	r3, [r6, #0]
{
   146d0:	af00      	add	r7, sp, #0
	if (dh_key_cb == cb) {
   146d2:	428b      	cmp	r3, r1
   146d4:	d041      	beq.n	1475a <bt_dh_key_gen+0x92>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   146d6:	b123      	cbz	r3, 146e2 <bt_dh_key_gen+0x1a>
		return -EBUSY;
   146d8:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   146dc:	4620      	mov	r0, r4
   146de:	46bd      	mov	sp, r7
   146e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   146e2:	4b22      	ldr	r3, [pc, #136]	; (1476c <bt_dh_key_gen+0xa4>)
   146e4:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   146e8:	0692      	lsls	r2, r2, #26
   146ea:	d4f5      	bmi.n	146d8 <bt_dh_key_gen+0x10>
   146ec:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   146f0:	06db      	lsls	r3, r3, #27
   146f2:	d535      	bpl.n	14760 <bt_dh_key_gen+0x98>
	dh_key_cb = cb;
   146f4:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   146f6:	f242 0026 	movw	r0, #8230	; 0x2026
   146fa:	2140      	movs	r1, #64	; 0x40
   146fc:	f7fe f85c 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   14700:	4605      	mov	r5, r0
   14702:	b338      	cbz	r0, 14754 <bt_dh_key_gen+0x8c>
	return net_buf_simple_add(&buf->b, len);
   14704:	2140      	movs	r1, #64	; 0x40
   14706:	300c      	adds	r0, #12
   14708:	f007 f860 	bl	1b7cc <net_buf_simple_add>
   1470c:	4623      	mov	r3, r4
   1470e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14712:	f853 1b04 	ldr.w	r1, [r3], #4
   14716:	4293      	cmp	r3, r2
   14718:	f840 1b04 	str.w	r1, [r0], #4
   1471c:	d1f9      	bne.n	14712 <bt_dh_key_gen+0x4a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1471e:	2200      	movs	r2, #0
   14720:	4629      	mov	r1, r5
   14722:	f242 0026 	movw	r0, #8230	; 0x2026
   14726:	f7fe f895 	bl	12854 <bt_hci_cmd_send_sync>
	if (err) {
   1472a:	4604      	mov	r4, r0
   1472c:	2800      	cmp	r0, #0
   1472e:	d0d5      	beq.n	146dc <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
   14730:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   14732:	466d      	mov	r5, sp
   14734:	b088      	sub	sp, #32
   14736:	466a      	mov	r2, sp
		dh_key_cb = NULL;
   14738:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1473a:	490d      	ldr	r1, [pc, #52]	; (14770 <bt_dh_key_gen+0xa8>)
   1473c:	e9c2 1405 	strd	r1, r4, [r2, #20]
   14740:	2103      	movs	r1, #3
   14742:	f842 1f10 	str.w	r1, [r2, #16]!
   14746:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1474a:	480a      	ldr	r0, [pc, #40]	; (14774 <bt_dh_key_gen+0xac>)
   1474c:	f7fa f8a0 	bl	e890 <z_impl_z_log_msg_static_create>
   14750:	46ad      	mov	sp, r5
		return err;
   14752:	e7c3      	b.n	146dc <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   14754:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14758:	e7ea      	b.n	14730 <bt_dh_key_gen+0x68>
		return -EALREADY;
   1475a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1475e:	e7bd      	b.n	146dc <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   14760:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   14764:	e7ba      	b.n	146dc <bt_dh_key_gen+0x14>
   14766:	bf00      	nop
   14768:	200215c8 	.word	0x200215c8
   1476c:	200080cc 	.word	0x200080cc
   14770:	000352be 	.word	0x000352be
   14774:	000314cc 	.word	0x000314cc

00014778 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   14778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1477a:	4b19      	ldr	r3, [pc, #100]	; (147e0 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1477c:	68c5      	ldr	r5, [r0, #12]
   1477e:	e8d3 2fef 	ldaex	r2, [r3]
   14782:	f022 0220 	bic.w	r2, r2, #32
   14786:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1478a:	2900      	cmp	r1, #0
   1478c:	d1f7      	bne.n	1477e <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1478e:	782a      	ldrb	r2, [r5, #0]
   14790:	b98a      	cbnz	r2, 147b6 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   14792:	4914      	ldr	r1, [pc, #80]	; (147e4 <bt_hci_evt_le_pkey_complete+0x6c>)
   14794:	1c6a      	adds	r2, r5, #1
   14796:	f105 0041 	add.w	r0, r5, #65	; 0x41
   1479a:	f852 4b04 	ldr.w	r4, [r2], #4
   1479e:	4282      	cmp	r2, r0
   147a0:	f841 4b04 	str.w	r4, [r1], #4
   147a4:	d1f9      	bne.n	1479a <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   147a6:	e8d3 1fef 	ldaex	r1, [r3]
   147aa:	f041 0110 	orr.w	r1, r1, #16
   147ae:	e8c3 1fe2 	stlex	r2, r1, [r3]
   147b2:	2a00      	cmp	r2, #0
   147b4:	d1f7      	bne.n	147a6 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   147b6:	4e0c      	ldr	r6, [pc, #48]	; (147e8 <bt_hci_evt_le_pkey_complete+0x70>)
   147b8:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147ba:	b16c      	cbz	r4, 147d8 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   147bc:	4f09      	ldr	r7, [pc, #36]	; (147e4 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147be:	3c04      	subs	r4, #4
		if (cb->func) {
   147c0:	6823      	ldr	r3, [r4, #0]
   147c2:	b12b      	cbz	r3, 147d0 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   147c4:	782a      	ldrb	r2, [r5, #0]
   147c6:	2a00      	cmp	r2, #0
   147c8:	bf0c      	ite	eq
   147ca:	4638      	moveq	r0, r7
   147cc:	2000      	movne	r0, #0
   147ce:	4798      	blx	r3
	return node->next;
   147d0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147d2:	b10c      	cbz	r4, 147d8 <bt_hci_evt_le_pkey_complete+0x60>
   147d4:	3c04      	subs	r4, #4
   147d6:	e7f3      	b.n	147c0 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   147d8:	2300      	movs	r3, #0
	list->tail = NULL;
   147da:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   147de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   147e0:	200080cc 	.word	0x200080cc
   147e4:	200223b7 	.word	0x200223b7
   147e8:	200215cc 	.word	0x200215cc

000147ec <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   147ec:	4905      	ldr	r1, [pc, #20]	; (14804 <bt_hci_evt_le_dhkey_complete+0x18>)
   147ee:	680b      	ldr	r3, [r1, #0]
   147f0:	b133      	cbz	r3, 14800 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   147f2:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   147f4:	2000      	movs	r0, #0
   147f6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   147f8:	7811      	ldrb	r1, [r2, #0]
   147fa:	b901      	cbnz	r1, 147fe <bt_hci_evt_le_dhkey_complete+0x12>
   147fc:	1c50      	adds	r0, r2, #1
   147fe:	4718      	bx	r3
	}
}
   14800:	4770      	bx	lr
   14802:	bf00      	nop
   14804:	200215c8 	.word	0x200215c8

00014808 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   14808:	b570      	push	{r4, r5, r6, lr}
   1480a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1480c:	4b12      	ldr	r3, [pc, #72]	; (14858 <notify_connected+0x50>)
   1480e:	681d      	ldr	r5, [r3, #0]
   14810:	b995      	cbnz	r5, 14838 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14812:	4d12      	ldr	r5, [pc, #72]	; (1485c <notify_connected+0x54>)
   14814:	4e12      	ldr	r6, [pc, #72]	; (14860 <notify_connected+0x58>)
   14816:	42b5      	cmp	r5, r6
   14818:	d91c      	bls.n	14854 <notify_connected+0x4c>
   1481a:	4912      	ldr	r1, [pc, #72]	; (14864 <notify_connected+0x5c>)
   1481c:	f240 535b 	movw	r3, #1371	; 0x55b
   14820:	4a11      	ldr	r2, [pc, #68]	; (14868 <notify_connected+0x60>)
   14822:	4812      	ldr	r0, [pc, #72]	; (1486c <notify_connected+0x64>)
   14824:	f015 ff49 	bl	2a6ba <assert_print>
   14828:	4811      	ldr	r0, [pc, #68]	; (14870 <notify_connected+0x68>)
   1482a:	f015 ff46 	bl	2a6ba <assert_print>
   1482e:	f240 515b 	movw	r1, #1371	; 0x55b
   14832:	480d      	ldr	r0, [pc, #52]	; (14868 <notify_connected+0x60>)
   14834:	f015 ff3a 	bl	2a6ac <assert_post_action>
		if (cb->connected) {
   14838:	682b      	ldr	r3, [r5, #0]
   1483a:	b113      	cbz	r3, 14842 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   1483c:	4620      	mov	r0, r4
   1483e:	7b21      	ldrb	r1, [r4, #12]
   14840:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14842:	69ad      	ldr	r5, [r5, #24]
   14844:	e7e4      	b.n	14810 <notify_connected+0x8>
		if (cb->connected) {
   14846:	682b      	ldr	r3, [r5, #0]
   14848:	b113      	cbz	r3, 14850 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   1484a:	4620      	mov	r0, r4
   1484c:	7b21      	ldrb	r1, [r4, #12]
   1484e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14850:	351c      	adds	r5, #28
   14852:	e7e0      	b.n	14816 <notify_connected+0xe>
   14854:	d3f7      	bcc.n	14846 <notify_connected+0x3e>
		}
	}
}
   14856:	bd70      	pop	{r4, r5, r6, pc}
   14858:	200215f4 	.word	0x200215f4
   1485c:	00031448 	.word	0x00031448
   14860:	00031464 	.word	0x00031464
   14864:	00035357 	.word	0x00035357
   14868:	00035327 	.word	0x00035327
   1486c:	00032659 	.word	0x00032659
   14870:	000336ed 	.word	0x000336ed

00014874 <tx_notify>:
{
   14874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14878:	4604      	mov	r4, r0
	tx->cb = NULL;
   1487a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   1487e:	4f14      	ldr	r7, [pc, #80]	; (148d0 <tx_notify+0x5c>)
	__asm__ volatile(
   14880:	f04f 0220 	mov.w	r2, #32
   14884:	f3ef 8311 	mrs	r3, BASEPRI
   14888:	f382 8812 	msr	BASEPRI_MAX, r2
   1488c:	f3bf 8f6f 	isb	sy
	return list->head;
   14890:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   14892:	b929      	cbnz	r1, 148a0 <tx_notify+0x2c>
	__asm__ volatile(
   14894:	f383 8811 	msr	BASEPRI, r3
   14898:	f3bf 8f6f 	isb	sy
}
   1489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   148a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   148a2:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   148a4:	4281      	cmp	r1, r0
	list->tail = node;
   148a6:	bf08      	it	eq
   148a8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   148aa:	6222      	str	r2, [r4, #32]
   148ac:	f383 8811 	msr	BASEPRI, r3
   148b0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   148b4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   148b8:	4638      	mov	r0, r7
	tx->user_data = NULL;
   148ba:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   148be:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   148c2:	f01b fc7d 	bl	301c0 <k_queue_append>
		cb(conn, user_data, 0);
   148c6:	2200      	movs	r2, #0
   148c8:	4631      	mov	r1, r6
   148ca:	4620      	mov	r0, r4
   148cc:	47a8      	blx	r5
	while (1) {
   148ce:	e7d7      	b.n	14880 <tx_notify+0xc>
   148d0:	20008cb8 	.word	0x20008cb8

000148d4 <conn_tx_destroy>:
{
   148d4:	b570      	push	{r4, r5, r6, lr}
   148d6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   148d8:	b949      	cbnz	r1, 148ee <conn_tx_destroy+0x1a>
   148da:	490d      	ldr	r1, [pc, #52]	; (14910 <conn_tx_destroy+0x3c>)
   148dc:	480d      	ldr	r0, [pc, #52]	; (14914 <conn_tx_destroy+0x40>)
   148de:	2339      	movs	r3, #57	; 0x39
   148e0:	4a0d      	ldr	r2, [pc, #52]	; (14918 <conn_tx_destroy+0x44>)
   148e2:	f015 feea 	bl	2a6ba <assert_print>
   148e6:	2139      	movs	r1, #57	; 0x39
   148e8:	480b      	ldr	r0, [pc, #44]	; (14918 <conn_tx_destroy+0x44>)
   148ea:	f015 fedf 	bl	2a6ac <assert_post_action>
	tx->cb = NULL;
   148ee:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   148f0:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   148f4:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   148f6:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   148fa:	4808      	ldr	r0, [pc, #32]	; (1491c <conn_tx_destroy+0x48>)
   148fc:	f01b fc60 	bl	301c0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   14900:	4631      	mov	r1, r6
   14902:	4620      	mov	r0, r4
   14904:	462b      	mov	r3, r5
}
   14906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1490a:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1490e:	4718      	bx	r3
   14910:	00035372 	.word	0x00035372
   14914:	00032659 	.word	0x00032659
   14918:	00035327 	.word	0x00035327
   1491c:	20008cb8 	.word	0x20008cb8

00014920 <send_frag>:
{
   14920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14924:	4604      	mov	r4, r0
   14926:	460e      	mov	r6, r1
   14928:	4692      	mov	sl, r2
   1492a:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1492c:	698d      	ldr	r5, [r1, #24]
{
   1492e:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   14930:	f04f 33ff 	mov.w	r3, #4294967295
   14934:	f04f 32ff 	mov.w	r2, #4294967295
   14938:	484c      	ldr	r0, [pc, #304]	; (14a6c <send_frag+0x14c>)
   1493a:	f010 fe89 	bl	25650 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1493e:	7b63      	ldrb	r3, [r4, #13]
   14940:	2b07      	cmp	r3, #7
   14942:	f040 8086 	bne.w	14a52 <send_frag+0x132>
	__asm__ volatile(
   14946:	f04f 0320 	mov.w	r3, #32
   1494a:	f3ef 8211 	mrs	r2, BASEPRI
   1494e:	f383 8812 	msr	BASEPRI_MAX, r3
   14952:	f3bf 8f6f 	isb	sy
	if (tx) {
   14956:	2d00      	cmp	r5, #0
   14958:	d04e      	beq.n	149f8 <send_frag+0xd8>
	parent->next = child;
   1495a:	2300      	movs	r3, #0
   1495c:	602b      	str	r3, [r5, #0]
	return list->tail;
   1495e:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   14960:	2b00      	cmp	r3, #0
   14962:	d146      	bne.n	149f2 <send_frag+0xd2>
	list->head = node;
   14964:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14968:	f382 8811 	msr	BASEPRI, r2
   1496c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14970:	2104      	movs	r1, #4
   14972:	f106 000c 	add.w	r0, r6, #12
   14976:	f006 fecd 	bl	1b714 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1497a:	8823      	ldrh	r3, [r4, #0]
   1497c:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   14980:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   14984:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14988:	8a33      	ldrh	r3, [r6, #16]
   1498a:	3b04      	subs	r3, #4
   1498c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1498e:	2302      	movs	r3, #2
	return bt_send(buf);
   14990:	4630      	mov	r0, r6
   14992:	7633      	strb	r3, [r6, #24]
   14994:	f7fe fa8c 	bl	12eb0 <bt_send>
	if (err) {
   14998:	2800      	cmp	r0, #0
   1499a:	d064      	beq.n	14a66 <send_frag+0x146>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1499c:	46ea      	mov	sl, sp
   1499e:	b088      	sub	sp, #32
   149a0:	466a      	mov	r2, sp
   149a2:	4b33      	ldr	r3, [pc, #204]	; (14a70 <send_frag+0x150>)
   149a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   149a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   149ac:	2303      	movs	r3, #3
   149ae:	4831      	ldr	r0, [pc, #196]	; (14a74 <send_frag+0x154>)
   149b0:	f842 3f10 	str.w	r3, [r2, #16]!
   149b4:	f017 fde1 	bl	2c57a <z_log_msg_static_create.constprop.0>
   149b8:	46d5      	mov	sp, sl
	__asm__ volatile(
   149ba:	f04f 0320 	mov.w	r3, #32
   149be:	f3ef 8a11 	mrs	sl, BASEPRI
   149c2:	f383 8812 	msr	BASEPRI_MAX, r3
   149c6:	f3bf 8f6f 	isb	sy
		if (tx) {
   149ca:	b315      	cbz	r5, 14a12 <send_frag+0xf2>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   149cc:	4629      	mov	r1, r5
   149ce:	f104 0014 	add.w	r0, r4, #20
   149d2:	f017 fdac 	bl	2c52e <sys_slist_find_and_remove>
	__asm__ volatile(
   149d6:	f38a 8811 	msr	BASEPRI, sl
   149da:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   149de:	4823      	ldr	r0, [pc, #140]	; (14a6c <send_frag+0x14c>)
   149e0:	f010 fdf2 	bl	255c8 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   149e4:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   149e6:	4629      	mov	r1, r5
   149e8:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   149ea:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   149ec:	f7ff ff72 	bl	148d4 <conn_tx_destroy>
   149f0:	e028      	b.n	14a44 <send_frag+0x124>
	parent->next = child;
   149f2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   149f4:	61a5      	str	r5, [r4, #24]
}
   149f6:	e7b7      	b.n	14968 <send_frag+0x48>
	return list->tail;
   149f8:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   149fa:	b133      	cbz	r3, 14a0a <send_frag+0xea>
			pending_no_cb = &tail_tx->pending_no_cb;
   149fc:	f103 080c 	add.w	r8, r3, #12
   14a00:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14a02:	3301      	adds	r3, #1
   14a04:	f8c8 3000 	str.w	r3, [r8]
   14a08:	e7ae      	b.n	14968 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   14a0a:	69e3      	ldr	r3, [r4, #28]
   14a0c:	f104 081c 	add.w	r8, r4, #28
   14a10:	e7f7      	b.n	14a02 <send_frag+0xe2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   14a12:	f8d8 3000 	ldr.w	r3, [r8]
   14a16:	b95b      	cbnz	r3, 14a30 <send_frag+0x110>
   14a18:	4917      	ldr	r1, [pc, #92]	; (14a78 <send_frag+0x158>)
   14a1a:	4818      	ldr	r0, [pc, #96]	; (14a7c <send_frag+0x15c>)
   14a1c:	f240 2327 	movw	r3, #551	; 0x227
   14a20:	4a17      	ldr	r2, [pc, #92]	; (14a80 <send_frag+0x160>)
   14a22:	f015 fe4a 	bl	2a6ba <assert_print>
   14a26:	f240 2127 	movw	r1, #551	; 0x227
   14a2a:	4815      	ldr	r0, [pc, #84]	; (14a80 <send_frag+0x160>)
   14a2c:	f015 fe3e 	bl	2a6ac <assert_post_action>
			(*pending_no_cb)--;
   14a30:	3b01      	subs	r3, #1
   14a32:	f8c8 3000 	str.w	r3, [r8]
   14a36:	f38a 8811 	msr	BASEPRI, sl
   14a3a:	f3bf 8f6f 	isb	sy
   14a3e:	480b      	ldr	r0, [pc, #44]	; (14a6c <send_frag+0x14c>)
   14a40:	f010 fdc2 	bl	255c8 <z_impl_k_sem_give>
	if (always_consume) {
   14a44:	f1b9 0f00 	cmp.w	r9, #0
   14a48:	d109      	bne.n	14a5e <send_frag+0x13e>
	return false;
   14a4a:	2000      	movs	r0, #0
}
   14a4c:	46bd      	mov	sp, r7
   14a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a52:	4806      	ldr	r0, [pc, #24]	; (14a6c <send_frag+0x14c>)
   14a54:	f010 fdb8 	bl	255c8 <z_impl_k_sem_give>
	if (tx) {
   14a58:	2d00      	cmp	r5, #0
   14a5a:	d1c3      	bne.n	149e4 <send_frag+0xc4>
   14a5c:	e7f2      	b.n	14a44 <send_frag+0x124>
		net_buf_unref(buf);
   14a5e:	4630      	mov	r0, r6
   14a60:	f006 fd92 	bl	1b588 <net_buf_unref>
   14a64:	e7f1      	b.n	14a4a <send_frag+0x12a>
	return true;
   14a66:	2001      	movs	r0, #1
   14a68:	e7f0      	b.n	14a4c <send_frag+0x12c>
   14a6a:	bf00      	nop
   14a6c:	20008100 	.word	0x20008100
   14a70:	00034b7f 	.word	0x00034b7f
   14a74:	000314bc 	.word	0x000314bc
   14a78:	00035375 	.word	0x00035375
   14a7c:	00032659 	.word	0x00032659
   14a80:	00035327 	.word	0x00035327

00014a84 <bt_conn_get_pkts>:
}
   14a84:	4800      	ldr	r0, [pc, #0]	; (14a88 <bt_conn_get_pkts+0x4>)
   14a86:	4770      	bx	lr
   14a88:	20008100 	.word	0x20008100

00014a8c <bt_conn_new>:
{
   14a8c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   14a8e:	2200      	movs	r2, #0
   14a90:	4604      	mov	r4, r0
   14a92:	428a      	cmp	r2, r1
   14a94:	d102      	bne.n	14a9c <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14a96:	2400      	movs	r4, #0
}
   14a98:	4620      	mov	r0, r4
   14a9a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14a9c:	2001      	movs	r0, #1
   14a9e:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   14aa2:	e8d3 5fef 	ldaex	r5, [r3]
   14aa6:	2d00      	cmp	r5, #0
   14aa8:	d104      	bne.n	14ab4 <bt_conn_new+0x28>
   14aaa:	e8c3 0fec 	stlex	ip, r0, [r3]
   14aae:	f1bc 0f00 	cmp.w	ip, #0
   14ab2:	d1f6      	bne.n	14aa2 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14ab4:	d002      	beq.n	14abc <bt_conn_new+0x30>
   14ab6:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   14ab8:	4402      	add	r2, r0
   14aba:	e7ea      	b.n	14a92 <bt_conn_new+0x6>
	if (!conn) {
   14abc:	2c00      	cmp	r4, #0
   14abe:	d0ea      	beq.n	14a96 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   14ac0:	22c4      	movs	r2, #196	; 0xc4
   14ac2:	2100      	movs	r1, #0
   14ac4:	4620      	mov	r0, r4
   14ac6:	f01b fd8c 	bl	305e2 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14aca:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14ace:	4904      	ldr	r1, [pc, #16]	; (14ae0 <bt_conn_new+0x54>)
   14ad0:	f011 f9fe 	bl	25ed0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14ad4:	4903      	ldr	r1, [pc, #12]	; (14ae4 <bt_conn_new+0x58>)
   14ad6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14ada:	f011 f81d 	bl	25b18 <k_work_init>
	return conn;
   14ade:	e7db      	b.n	14a98 <bt_conn_new+0xc>
   14ae0:	0001553d 	.word	0x0001553d
   14ae4:	0002c581 	.word	0x0002c581

00014ae8 <conn_cleanup>:
{
   14ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14aec:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   14aee:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   14af0:	f104 0638 	add.w	r6, r4, #56	; 0x38
   14af4:	2300      	movs	r3, #0
   14af6:	2200      	movs	r2, #0
   14af8:	4630      	mov	r0, r6
   14afa:	f019 fa6f 	bl	2dfdc <net_buf_get>
   14afe:	4603      	mov	r3, r0
   14b00:	b980      	cbnz	r0, 14b24 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   14b02:	6963      	ldr	r3, [r4, #20]
   14b04:	b1cb      	cbz	r3, 14b3a <conn_cleanup+0x52>
   14b06:	4918      	ldr	r1, [pc, #96]	; (14b68 <conn_cleanup+0x80>)
   14b08:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   14b0c:	4a17      	ldr	r2, [pc, #92]	; (14b6c <conn_cleanup+0x84>)
   14b0e:	4818      	ldr	r0, [pc, #96]	; (14b70 <conn_cleanup+0x88>)
   14b10:	f015 fdd3 	bl	2a6ba <assert_print>
   14b14:	4817      	ldr	r0, [pc, #92]	; (14b74 <conn_cleanup+0x8c>)
   14b16:	f015 fdd0 	bl	2a6ba <assert_print>
   14b1a:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14b1e:	4813      	ldr	r0, [pc, #76]	; (14b6c <conn_cleanup+0x84>)
   14b20:	f015 fdc4 	bl	2a6ac <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14b24:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   14b26:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   14b28:	f006 fd2e 	bl	1b588 <net_buf_unref>
		if (tx) {
   14b2c:	2d00      	cmp	r5, #0
   14b2e:	d0e1      	beq.n	14af4 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   14b30:	4629      	mov	r1, r5
   14b32:	4620      	mov	r0, r4
   14b34:	f7ff fece 	bl	148d4 <conn_tx_destroy>
   14b38:	e7da      	b.n	14af0 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14b3a:	69e3      	ldr	r3, [r4, #28]
   14b3c:	b14b      	cbz	r3, 14b52 <conn_cleanup+0x6a>
   14b3e:	490e      	ldr	r1, [pc, #56]	; (14b78 <conn_cleanup+0x90>)
   14b40:	f240 23b5 	movw	r3, #693	; 0x2b5
   14b44:	4a09      	ldr	r2, [pc, #36]	; (14b6c <conn_cleanup+0x84>)
   14b46:	480a      	ldr	r0, [pc, #40]	; (14b70 <conn_cleanup+0x88>)
   14b48:	f015 fdb7 	bl	2a6ba <assert_print>
   14b4c:	f240 21b5 	movw	r1, #693	; 0x2b5
   14b50:	e7e5      	b.n	14b1e <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   14b52:	4620      	mov	r0, r4
   14b54:	f017 fd17 	bl	2c586 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14b58:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14b5c:	2200      	movs	r2, #0
}
   14b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14b62:	2300      	movs	r3, #0
   14b64:	f011 bad0 	b.w	26108 <k_work_reschedule>
   14b68:	00035388 	.word	0x00035388
   14b6c:	00035327 	.word	0x00035327
   14b70:	00032659 	.word	0x00032659
   14b74:	000353ae 	.word	0x000353ae
   14b78:	000353c3 	.word	0x000353c3

00014b7c <bt_conn_recv>:
{
   14b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b80:	4616      	mov	r6, r2
   14b82:	b086      	sub	sp, #24
   14b84:	af00      	add	r7, sp, #0
   14b86:	4604      	mov	r4, r0
   14b88:	460d      	mov	r5, r1
	tx_notify(conn);
   14b8a:	f7ff fe73 	bl	14874 <tx_notify>
	switch (flags) {
   14b8e:	2e01      	cmp	r6, #1
   14b90:	d030      	beq.n	14bf4 <bt_conn_recv+0x78>
   14b92:	2e02      	cmp	r6, #2
   14b94:	d16a      	bne.n	14c6c <bt_conn_recv+0xf0>
		if (conn->rx) {
   14b96:	6923      	ldr	r3, [r4, #16]
   14b98:	b163      	cbz	r3, 14bb4 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   14b9a:	4b40      	ldr	r3, [pc, #256]	; (14c9c <bt_conn_recv+0x120>)
   14b9c:	4840      	ldr	r0, [pc, #256]	; (14ca0 <bt_conn_recv+0x124>)
   14b9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ba2:	e9c7 6304 	strd	r6, r3, [r7, #16]
   14ba6:	f107 0210 	add.w	r2, r7, #16
   14baa:	f017 fce6 	bl	2c57a <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   14bae:	4620      	mov	r0, r4
   14bb0:	f017 fce9 	bl	2c586 <bt_conn_reset_rx_state>
		conn->rx = buf;
   14bb4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   14bb6:	6921      	ldr	r1, [r4, #16]
   14bb8:	8a08      	ldrh	r0, [r1, #16]
   14bba:	2801      	cmp	r0, #1
   14bbc:	d930      	bls.n	14c20 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   14bbe:	68cb      	ldr	r3, [r1, #12]
   14bc0:	881b      	ldrh	r3, [r3, #0]
   14bc2:	3304      	adds	r3, #4
   14bc4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   14bc6:	4298      	cmp	r0, r3
   14bc8:	d32a      	bcc.n	14c20 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   14bca:	d95f      	bls.n	14c8c <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   14bcc:	466d      	mov	r5, sp
   14bce:	b088      	sub	sp, #32
   14bd0:	466a      	mov	r2, sp
   14bd2:	61d3      	str	r3, [r2, #28]
   14bd4:	2304      	movs	r3, #4
   14bd6:	4933      	ldr	r1, [pc, #204]	; (14ca4 <bt_conn_recv+0x128>)
   14bd8:	e9c2 1005 	strd	r1, r0, [r2, #20]
   14bdc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14be0:	482f      	ldr	r0, [pc, #188]	; (14ca0 <bt_conn_recv+0x124>)
   14be2:	f842 3f10 	str.w	r3, [r2, #16]!
   14be6:	f017 fcc8 	bl	2c57a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14bea:	4620      	mov	r0, r4
   14bec:	46ad      	mov	sp, r5
   14bee:	f017 fcca 	bl	2c586 <bt_conn_reset_rx_state>
		return;
   14bf2:	e015      	b.n	14c20 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   14bf4:	6920      	ldr	r0, [r4, #16]
   14bf6:	b970      	cbnz	r0, 14c16 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   14bf8:	4b2b      	ldr	r3, [pc, #172]	; (14ca8 <bt_conn_recv+0x12c>)
   14bfa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14bfe:	617b      	str	r3, [r7, #20]
   14c00:	2302      	movs	r3, #2
   14c02:	4827      	ldr	r0, [pc, #156]	; (14ca0 <bt_conn_recv+0x124>)
   14c04:	613b      	str	r3, [r7, #16]
   14c06:	f107 0210 	add.w	r2, r7, #16
   14c0a:	f017 fcb6 	bl	2c57a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14c0e:	4620      	mov	r0, r4
   14c10:	f017 fcb9 	bl	2c586 <bt_conn_reset_rx_state>
   14c14:	e001      	b.n	14c1a <bt_conn_recv+0x9e>
		if (!buf->len) {
   14c16:	8a2e      	ldrh	r6, [r5, #16]
   14c18:	b936      	cbnz	r6, 14c28 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   14c1a:	4628      	mov	r0, r5
   14c1c:	f006 fcb4 	bl	1b588 <net_buf_unref>
}
   14c20:	3718      	adds	r7, #24
   14c22:	46bd      	mov	sp, r7
   14c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14c28:	300c      	adds	r0, #12
   14c2a:	f019 f9ec 	bl	2e006 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   14c2e:	4286      	cmp	r6, r0
   14c30:	d912      	bls.n	14c58 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   14c32:	4b1e      	ldr	r3, [pc, #120]	; (14cac <bt_conn_recv+0x130>)
   14c34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c38:	617b      	str	r3, [r7, #20]
   14c3a:	2302      	movs	r3, #2
   14c3c:	4818      	ldr	r0, [pc, #96]	; (14ca0 <bt_conn_recv+0x124>)
   14c3e:	613b      	str	r3, [r7, #16]
   14c40:	f107 0210 	add.w	r2, r7, #16
   14c44:	f017 fc99 	bl	2c57a <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   14c48:	2200      	movs	r2, #0
   14c4a:	4620      	mov	r0, r4
   14c4c:	6921      	ldr	r1, [r4, #16]
   14c4e:	f000 ff19 	bl	15a84 <bt_l2cap_recv>
			conn->rx = NULL;
   14c52:	2300      	movs	r3, #0
   14c54:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   14c56:	e7e0      	b.n	14c1a <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14c58:	6920      	ldr	r0, [r4, #16]
   14c5a:	8a2a      	ldrh	r2, [r5, #16]
   14c5c:	68e9      	ldr	r1, [r5, #12]
   14c5e:	300c      	adds	r0, #12
   14c60:	f019 f9d9 	bl	2e016 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14c64:	4628      	mov	r0, r5
   14c66:	f006 fc8f 	bl	1b588 <net_buf_unref>
		break;
   14c6a:	e7a4      	b.n	14bb6 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14c6c:	46e8      	mov	r8, sp
   14c6e:	b088      	sub	sp, #32
   14c70:	466a      	mov	r2, sp
   14c72:	4b0f      	ldr	r3, [pc, #60]	; (14cb0 <bt_conn_recv+0x134>)
   14c74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
   14c78:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14c7c:	2303      	movs	r3, #3
   14c7e:	4808      	ldr	r0, [pc, #32]	; (14ca0 <bt_conn_recv+0x124>)
   14c80:	f842 3f10 	str.w	r3, [r2, #16]!
   14c84:	f017 fc79 	bl	2c57a <z_log_msg_static_create.constprop.0>
   14c88:	46c5      	mov	sp, r8
   14c8a:	e7c0      	b.n	14c0e <bt_conn_recv+0x92>
	conn->rx = NULL;
   14c8c:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   14c8e:	2201      	movs	r2, #1
   14c90:	4620      	mov	r0, r4
	conn->rx = NULL;
   14c92:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   14c94:	f000 fef6 	bl	15a84 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   14c98:	e7c2      	b.n	14c20 <bt_conn_recv+0xa4>
   14c9a:	bf00      	nop
   14c9c:	000353dc 	.word	0x000353dc
   14ca0:	000314bc 	.word	0x000314bc
   14ca4:	0003545c 	.word	0x0003545c
   14ca8:	000353f9 	.word	0x000353f9
   14cac:	00035417 	.word	0x00035417
   14cb0:	0003543e 	.word	0x0003543e

00014cb4 <bt_conn_send_cb>:
{
   14cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14cb8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14cba:	7b43      	ldrb	r3, [r0, #13]
{
   14cbc:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14cbe:	2b07      	cmp	r3, #7
{
   14cc0:	460f      	mov	r7, r1
   14cc2:	4616      	mov	r6, r2
   14cc4:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   14cc6:	d00c      	beq.n	14ce2 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   14cc8:	4b28      	ldr	r3, [pc, #160]	; (14d6c <bt_conn_send_cb+0xb8>)
   14cca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14cce:	9305      	str	r3, [sp, #20]
   14cd0:	2302      	movs	r3, #2
   14cd2:	4827      	ldr	r0, [pc, #156]	; (14d70 <bt_conn_send_cb+0xbc>)
   14cd4:	aa04      	add	r2, sp, #16
   14cd6:	9304      	str	r3, [sp, #16]
   14cd8:	f017 fc4f 	bl	2c57a <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   14cdc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14ce0:	e01d      	b.n	14d1e <bt_conn_send_cb+0x6a>
	if (cb) {
   14ce2:	2a00      	cmp	r2, #0
   14ce4:	d040      	beq.n	14d68 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   14ce6:	f012 fb97 	bl	27418 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14cea:	4b22      	ldr	r3, [pc, #136]	; (14d74 <bt_conn_send_cb+0xc0>)
   14cec:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14cee:	4822      	ldr	r0, [pc, #136]	; (14d78 <bt_conn_send_cb+0xc4>)
   14cf0:	bf07      	ittee	eq
   14cf2:	2200      	moveq	r2, #0
   14cf4:	2300      	moveq	r3, #0
   14cf6:	f04f 32ff 	movne.w	r2, #4294967295
   14cfa:	f04f 33ff 	movne.w	r3, #4294967295
   14cfe:	f010 fbf9 	bl	254f4 <z_impl_k_queue_get>
   14d02:	4604      	mov	r4, r0
		if (!tx) {
   14d04:	b970      	cbnz	r0, 14d24 <bt_conn_send_cb+0x70>
			LOG_ERR("Unable to allocate TX context");
   14d06:	4b1d      	ldr	r3, [pc, #116]	; (14d7c <bt_conn_send_cb+0xc8>)
   14d08:	4819      	ldr	r0, [pc, #100]	; (14d70 <bt_conn_send_cb+0xbc>)
   14d0a:	9305      	str	r3, [sp, #20]
   14d0c:	2302      	movs	r3, #2
   14d0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d12:	aa04      	add	r2, sp, #16
   14d14:	9304      	str	r3, [sp, #16]
   14d16:	f017 fc30 	bl	2c57a <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   14d1a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14d1e:	b006      	add	sp, #24
   14d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14d24:	7b6b      	ldrb	r3, [r5, #13]
   14d26:	2b07      	cmp	r3, #7
   14d28:	d012      	beq.n	14d50 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   14d2a:	4b15      	ldr	r3, [pc, #84]	; (14d80 <bt_conn_send_cb+0xcc>)
   14d2c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14d30:	9305      	str	r3, [sp, #20]
   14d32:	2302      	movs	r3, #2
   14d34:	480e      	ldr	r0, [pc, #56]	; (14d70 <bt_conn_send_cb+0xbc>)
   14d36:	aa04      	add	r2, sp, #16
   14d38:	9304      	str	r3, [sp, #16]
   14d3a:	f017 fc1e 	bl	2c57a <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   14d3e:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
   14d40:	4621      	mov	r1, r4
	tx->user_data = NULL;
   14d42:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   14d46:	480c      	ldr	r0, [pc, #48]	; (14d78 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   14d48:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   14d4a:	f01b fa39 	bl	301c0 <k_queue_append>
}
   14d4e:	e7c5      	b.n	14cdc <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   14d50:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14d52:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   14d56:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   14d58:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14d5c:	4639      	mov	r1, r7
		tx_data(buf)->tx = tx;
   14d5e:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   14d60:	f006 fbec 	bl	1b53c <net_buf_put>
	return 0;
   14d64:	2000      	movs	r0, #0
   14d66:	e7da      	b.n	14d1e <bt_conn_send_cb+0x6a>
   14d68:	4614      	mov	r4, r2
   14d6a:	e7f5      	b.n	14d58 <bt_conn_send_cb+0xa4>
   14d6c:	00035477 	.word	0x00035477
   14d70:	000314bc 	.word	0x000314bc
   14d74:	2000a270 	.word	0x2000a270
   14d78:	20008cb8 	.word	0x20008cb8
   14d7c:	00035486 	.word	0x00035486
   14d80:	000354a4 	.word	0x000354a4

00014d84 <bt_conn_prepare_events>:
{
   14d84:	b570      	push	{r4, r5, r6, lr}
   14d86:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   14d88:	4817      	ldr	r0, [pc, #92]	; (14de8 <bt_conn_prepare_events+0x64>)
   14d8a:	f01b fbc1 	bl	30510 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14d8e:	2200      	movs	r2, #0
   14d90:	2101      	movs	r1, #1
   14d92:	4620      	mov	r0, r4
   14d94:	4b14      	ldr	r3, [pc, #80]	; (14de8 <bt_conn_prepare_events+0x64>)
   14d96:	f013 fa47 	bl	28228 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14d9a:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14d9e:	4b13      	ldr	r3, [pc, #76]	; (14dec <bt_conn_prepare_events+0x68>)
   14da0:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   14da4:	b90a      	cbnz	r2, 14daa <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14da6:	2001      	movs	r0, #1
}
   14da8:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14daa:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   14dae:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   14db2:	b953      	cbnz	r3, 14dca <bt_conn_prepare_events+0x46>
   14db4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14db8:	1d28      	adds	r0, r5, #4
   14dba:	f017 fbd3 	bl	2c564 <atomic_and>
   14dbe:	0643      	lsls	r3, r0, #25
   14dc0:	d503      	bpl.n	14dca <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   14dc2:	4628      	mov	r0, r5
   14dc4:	f7ff fe90 	bl	14ae8 <conn_cleanup>
		return -ENOTCONN;
   14dc8:	e7ed      	b.n	14da6 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   14dca:	7b6b      	ldrb	r3, [r5, #13]
   14dcc:	2b07      	cmp	r3, #7
   14dce:	d1ea      	bne.n	14da6 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   14dd0:	4630      	mov	r0, r6
   14dd2:	4b07      	ldr	r3, [pc, #28]	; (14df0 <bt_conn_prepare_events+0x6c>)
   14dd4:	2200      	movs	r2, #0
   14dd6:	2104      	movs	r1, #4
   14dd8:	f013 fa26 	bl	28228 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14ddc:	2301      	movs	r3, #1
			ev_count++;
   14dde:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14de0:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   14de4:	e7e0      	b.n	14da8 <bt_conn_prepare_events+0x24>
   14de6:	bf00      	nop
   14de8:	200084d4 	.word	0x200084d4
   14dec:	20009e6c 	.word	0x20009e6c
   14df0:	20009de0 	.word	0x20009de0

00014df4 <bt_conn_ref>:
{
   14df4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   14df6:	b180      	cbz	r0, 14e1a <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   14df8:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   14dfc:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   14e00:	b1bb      	cbz	r3, 14e32 <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   14e02:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14e04:	e8d2 4fef 	ldaex	r4, [r2]
   14e08:	429c      	cmp	r4, r3
   14e0a:	d104      	bne.n	14e16 <bt_conn_ref+0x22>
   14e0c:	e8c2 1fec 	stlex	ip, r1, [r2]
   14e10:	f1bc 0f00 	cmp.w	ip, #0
   14e14:	d1f6      	bne.n	14e04 <bt_conn_ref+0x10>
   14e16:	d1f1      	bne.n	14dfc <bt_conn_ref+0x8>
}
   14e18:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   14e1a:	4907      	ldr	r1, [pc, #28]	; (14e38 <bt_conn_ref+0x44>)
   14e1c:	4807      	ldr	r0, [pc, #28]	; (14e3c <bt_conn_ref+0x48>)
   14e1e:	f240 437c 	movw	r3, #1148	; 0x47c
   14e22:	4a07      	ldr	r2, [pc, #28]	; (14e40 <bt_conn_ref+0x4c>)
   14e24:	f015 fc49 	bl	2a6ba <assert_print>
   14e28:	f240 417c 	movw	r1, #1148	; 0x47c
   14e2c:	4804      	ldr	r0, [pc, #16]	; (14e40 <bt_conn_ref+0x4c>)
   14e2e:	f015 fc3d 	bl	2a6ac <assert_post_action>
			return NULL;
   14e32:	4618      	mov	r0, r3
   14e34:	e7f0      	b.n	14e18 <bt_conn_ref+0x24>
   14e36:	bf00      	nop
   14e38:	00034bf1 	.word	0x00034bf1
   14e3c:	00032659 	.word	0x00032659
   14e40:	00035327 	.word	0x00035327

00014e44 <bt_conn_unref>:
{
   14e44:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   14e46:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14e4a:	e8d3 2fef 	ldaex	r2, [r3]
   14e4e:	1e51      	subs	r1, r2, #1
   14e50:	e8c3 1fe4 	stlex	r4, r1, [r3]
   14e54:	2c00      	cmp	r4, #0
   14e56:	d1f8      	bne.n	14e4a <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   14e58:	2a00      	cmp	r2, #0
   14e5a:	dc0e      	bgt.n	14e7a <bt_conn_unref+0x36>
   14e5c:	490d      	ldr	r1, [pc, #52]	; (14e94 <bt_conn_unref+0x50>)
   14e5e:	f44f 6393 	mov.w	r3, #1176	; 0x498
   14e62:	4a0d      	ldr	r2, [pc, #52]	; (14e98 <bt_conn_unref+0x54>)
   14e64:	480d      	ldr	r0, [pc, #52]	; (14e9c <bt_conn_unref+0x58>)
   14e66:	f015 fc28 	bl	2a6ba <assert_print>
   14e6a:	480d      	ldr	r0, [pc, #52]	; (14ea0 <bt_conn_unref+0x5c>)
   14e6c:	f015 fc25 	bl	2a6ba <assert_print>
   14e70:	f44f 6193 	mov.w	r1, #1176	; 0x498
   14e74:	4808      	ldr	r0, [pc, #32]	; (14e98 <bt_conn_unref+0x54>)
   14e76:	f015 fc19 	bl	2a6ac <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   14e7a:	f240 1201 	movw	r2, #257	; 0x101
   14e7e:	8841      	ldrh	r1, [r0, #2]
   14e80:	4291      	cmp	r1, r2
   14e82:	d106      	bne.n	14e92 <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14e84:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   14e88:	b91b      	cbnz	r3, 14e92 <bt_conn_unref+0x4e>
}
   14e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   14e8e:	f7ff ba8f 	b.w	143b0 <bt_le_adv_resume>
}
   14e92:	bd10      	pop	{r4, pc}
   14e94:	000354ca 	.word	0x000354ca
   14e98:	00035327 	.word	0x00035327
   14e9c:	00032659 	.word	0x00032659
   14ea0:	000354d2 	.word	0x000354d2

00014ea4 <bt_conn_lookup_handle>:
{
   14ea4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14ea6:	2101      	movs	r1, #1
   14ea8:	4801      	ldr	r0, [pc, #4]	; (14eb0 <bt_conn_lookup_handle+0xc>)
   14eaa:	f017 bb75 	b.w	2c598 <conn_lookup_handle>
   14eae:	bf00      	nop
   14eb0:	20009da8 	.word	0x20009da8

00014eb4 <bt_conn_set_state>:
{
   14eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   14eb6:	7b46      	ldrb	r6, [r0, #13]
{
   14eb8:	4604      	mov	r4, r0
	if (conn->state == state) {
   14eba:	428e      	cmp	r6, r1
{
   14ebc:	460d      	mov	r5, r1
   14ebe:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   14ec0:	d119      	bne.n	14ef6 <bt_conn_set_state+0x42>
	switch (state) {
   14ec2:	2e08      	cmp	r6, #8
   14ec4:	bf98      	it	ls
   14ec6:	4b6c      	ldrls	r3, [pc, #432]	; (15078 <bt_conn_set_state+0x1c4>)
		LOG_WRN("no transition %s", state2str(state));
   14ec8:	466c      	mov	r4, sp
   14eca:	b088      	sub	sp, #32
   14ecc:	bf94      	ite	ls
   14ece:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
   14ed2:	4b6a      	ldrhi	r3, [pc, #424]	; (1507c <bt_conn_set_state+0x1c8>)
		LOG_WRN("no transition %s", state2str(state));
   14ed4:	466a      	mov	r2, sp
   14ed6:	496a      	ldr	r1, [pc, #424]	; (15080 <bt_conn_set_state+0x1cc>)
   14ed8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14edc:	f44f 7300 	mov.w	r3, #512	; 0x200
   14ee0:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   14ee4:	8393      	strh	r3, [r2, #28]
   14ee6:	4b67      	ldr	r3, [pc, #412]	; (15084 <bt_conn_set_state+0x1d0>)
   14ee8:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
   14eec:	4866      	ldr	r0, [pc, #408]	; (15088 <bt_conn_set_state+0x1d4>)
   14eee:	f017 fb44 	bl	2c57a <z_log_msg_static_create.constprop.0>
   14ef2:	46a5      	mov	sp, r4
   14ef4:	e043      	b.n	14f7e <bt_conn_set_state+0xca>
	conn->state = state;
   14ef6:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   14ef8:	b926      	cbnz	r6, 14f04 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14efa:	7883      	ldrb	r3, [r0, #2]
   14efc:	2b08      	cmp	r3, #8
   14efe:	d001      	beq.n	14f04 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   14f00:	f7ff ff78 	bl	14df4 <bt_conn_ref>
	switch (conn->state) {
   14f04:	7b63      	ldrb	r3, [r4, #13]
   14f06:	2b08      	cmp	r3, #8
   14f08:	f200 80b0 	bhi.w	1506c <bt_conn_set_state+0x1b8>
   14f0c:	e8df f003 	tbb	[pc, r3]
   14f10:	37370539 	.word	0x37370539
   14f14:	1c373737 	.word	0x1c373737
   14f18:	37          	.byte	0x37
   14f19:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   14f1a:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   14f1c:	4d5b      	ldr	r5, [pc, #364]	; (1508c <bt_conn_set_state+0x1d8>)
	__asm__ volatile(
   14f1e:	f04f 0220 	mov.w	r2, #32
   14f22:	f3ef 8311 	mrs	r3, BASEPRI
   14f26:	f382 8812 	msr	BASEPRI_MAX, r2
   14f2a:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14f2e:	69e2      	ldr	r2, [r4, #28]
   14f30:	2a00      	cmp	r2, #0
   14f32:	d077      	beq.n	15024 <bt_conn_set_state+0x170>
			conn->pending_no_cb--;
   14f34:	3a01      	subs	r2, #1
   14f36:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   14f38:	f383 8811 	msr	BASEPRI, r3
   14f3c:	f3bf 8f6f 	isb	sy
   14f40:	4628      	mov	r0, r5
   14f42:	f010 fb41 	bl	255c8 <z_impl_k_sem_give>
}
   14f46:	e7ea      	b.n	14f1e <bt_conn_set_state+0x6a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14f48:	78a3      	ldrb	r3, [r4, #2]
   14f4a:	2b04      	cmp	r3, #4
   14f4c:	d017      	beq.n	14f7e <bt_conn_set_state+0xca>
	z_impl_k_queue_init(queue);
   14f4e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14f52:	f01b f928 	bl	301a6 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   14f56:	2100      	movs	r1, #0
   14f58:	484d      	ldr	r0, [pc, #308]	; (15090 <bt_conn_set_state+0x1dc>)
   14f5a:	f013 fa83 	bl	28464 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14f5e:	2300      	movs	r3, #0
	list->tail = NULL;
   14f60:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14f64:	78e3      	ldrb	r3, [r4, #3]
   14f66:	2b01      	cmp	r3, #1
   14f68:	d109      	bne.n	14f7e <bt_conn_set_state+0xca>
			conn->le.conn_param_retry_countdown =
   14f6a:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   14f6c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   14f70:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   14f74:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14f78:	2300      	movs	r3, #0
   14f7a:	f011 f84b 	bl	26014 <k_work_schedule>
}
   14f7e:	46bd      	mov	sp, r7
   14f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   14f82:	78a3      	ldrb	r3, [r4, #2]
   14f84:	2b04      	cmp	r3, #4
   14f86:	d103      	bne.n	14f90 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   14f88:	4620      	mov	r0, r4
   14f8a:	f7ff ff5b 	bl	14e44 <bt_conn_unref>
			break;
   14f8e:	e7f6      	b.n	14f7e <bt_conn_set_state+0xca>
		switch (old_state) {
   14f90:	2e08      	cmp	r6, #8
   14f92:	d8f4      	bhi.n	14f7e <bt_conn_set_state+0xca>
   14f94:	a301      	add	r3, pc, #4	; (adr r3, 14f9c <bt_conn_set_state+0xe8>)
   14f96:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   14f9a:	bf00      	nop
   14f9c:	0001500d 	.word	0x0001500d
   14fa0:	00014fc1 	.word	0x00014fc1
   14fa4:	00014fff 	.word	0x00014fff
   14fa8:	00014f89 	.word	0x00014f89
   14fac:	00014f89 	.word	0x00014f89
   14fb0:	00014fff 	.word	0x00014fff
   14fb4:	00014fff 	.word	0x00014fff
   14fb8:	00014f7f 	.word	0x00014f7f
   14fbc:	0001500d 	.word	0x0001500d
			tx_notify(conn);
   14fc0:	4620      	mov	r0, r4
   14fc2:	f7ff fc57 	bl	14874 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14fc6:	78a3      	ldrb	r3, [r4, #2]
   14fc8:	2b01      	cmp	r3, #1
   14fca:	d10a      	bne.n	14fe2 <bt_conn_set_state+0x12e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   14fcc:	f104 0560 	add.w	r5, r4, #96	; 0x60
   14fd0:	4628      	mov	r0, r5
   14fd2:	f01b f97e 	bl	302d2 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14fd6:	f010 0f0c 	tst.w	r0, #12
   14fda:	d002      	beq.n	14fe2 <bt_conn_set_state+0x12e>
				k_work_cancel_delayable(&conn->deferred_work);
   14fdc:	4628      	mov	r0, r5
   14fde:	f011 f899 	bl	26114 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14fe2:	3404      	adds	r4, #4
   14fe4:	e8d4 3fef 	ldaex	r3, [r4]
   14fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14fec:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14ff0:	2a00      	cmp	r2, #0
   14ff2:	d1f7      	bne.n	14fe4 <bt_conn_set_state+0x130>
   14ff4:	2100      	movs	r1, #0
   14ff6:	4826      	ldr	r0, [pc, #152]	; (15090 <bt_conn_set_state+0x1dc>)
   14ff8:	f013 fa34 	bl	28464 <z_impl_k_poll_signal_raise>
   14ffc:	e7bf      	b.n	14f7e <bt_conn_set_state+0xca>
			if (conn->err) {
   14ffe:	7b23      	ldrb	r3, [r4, #12]
   15000:	2b00      	cmp	r3, #0
   15002:	d0c1      	beq.n	14f88 <bt_conn_set_state+0xd4>
				notify_connected(conn);
   15004:	4620      	mov	r0, r4
   15006:	f7ff fbff 	bl	14808 <notify_connected>
   1500a:	e7bd      	b.n	14f88 <bt_conn_set_state+0xd4>
			LOG_WRN("Invalid (%u) old state", state);
   1500c:	466c      	mov	r4, sp
   1500e:	b088      	sub	sp, #32
   15010:	466a      	mov	r2, sp
   15012:	4b20      	ldr	r3, [pc, #128]	; (15094 <bt_conn_set_state+0x1e0>)
		LOG_WRN("no valid (%u) state was set", state);
   15014:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15018:	2303      	movs	r3, #3
   1501a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1501e:	f842 3f10 	str.w	r3, [r2, #16]!
   15022:	e763      	b.n	14eec <bt_conn_set_state+0x38>
	return list->head;
   15024:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   15026:	b921      	cbnz	r1, 15032 <bt_conn_set_state+0x17e>
   15028:	f383 8811 	msr	BASEPRI, r3
   1502c:	f3bf 8f6f 	isb	sy
		if (!node) {
   15030:	e7a5      	b.n	14f7e <bt_conn_set_state+0xca>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15032:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   15034:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15036:	4281      	cmp	r1, r0
	list->tail = node;
   15038:	bf08      	it	eq
   1503a:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   1503c:	6162      	str	r2, [r4, #20]
   1503e:	f383 8811 	msr	BASEPRI, r3
   15042:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15046:	f04f 0220 	mov.w	r2, #32
   1504a:	f3ef 8311 	mrs	r3, BASEPRI
   1504e:	f382 8812 	msr	BASEPRI_MAX, r2
   15052:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   15056:	68ca      	ldr	r2, [r1, #12]
   15058:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1505a:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   1505c:	f383 8811 	msr	BASEPRI, r3
   15060:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   15064:	4620      	mov	r0, r4
   15066:	f7ff fc35 	bl	148d4 <conn_tx_destroy>
   1506a:	e769      	b.n	14f40 <bt_conn_set_state+0x8c>
		LOG_WRN("no valid (%u) state was set", state);
   1506c:	466c      	mov	r4, sp
   1506e:	b088      	sub	sp, #32
   15070:	466a      	mov	r2, sp
   15072:	4b09      	ldr	r3, [pc, #36]	; (15098 <bt_conn_set_state+0x1e4>)
   15074:	e7ce      	b.n	15014 <bt_conn_set_state+0x160>
   15076:	bf00      	nop
   15078:	00031f54 	.word	0x00031f54
   1507c:	000354f0 	.word	0x000354f0
   15080:	000354fa 	.word	0x000354fa
   15084:	01000003 	.word	0x01000003
   15088:	000314bc 	.word	0x000314bc
   1508c:	20008100 	.word	0x20008100
   15090:	200084d4 	.word	0x200084d4
   15094:	0003550b 	.word	0x0003550b
   15098:	00035522 	.word	0x00035522

0001509c <bt_conn_index>:
		index = conn - acl_conns;
   1509c:	4a0c      	ldr	r2, [pc, #48]	; (150d0 <bt_conn_index+0x34>)
{
   1509e:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   150a0:	490c      	ldr	r1, [pc, #48]	; (150d4 <bt_conn_index+0x38>)
   150a2:	1a83      	subs	r3, r0, r2
   150a4:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   150a6:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   150a8:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   150ac:	d00e      	beq.n	150cc <bt_conn_index+0x30>
   150ae:	490a      	ldr	r1, [pc, #40]	; (150d8 <bt_conn_index+0x3c>)
   150b0:	f240 43b6 	movw	r3, #1206	; 0x4b6
   150b4:	4a09      	ldr	r2, [pc, #36]	; (150dc <bt_conn_index+0x40>)
   150b6:	480a      	ldr	r0, [pc, #40]	; (150e0 <bt_conn_index+0x44>)
   150b8:	f015 faff 	bl	2a6ba <assert_print>
   150bc:	4809      	ldr	r0, [pc, #36]	; (150e4 <bt_conn_index+0x48>)
   150be:	f015 fafc 	bl	2a6ba <assert_print>
   150c2:	f240 41b6 	movw	r1, #1206	; 0x4b6
   150c6:	4805      	ldr	r0, [pc, #20]	; (150dc <bt_conn_index+0x40>)
   150c8:	f015 faf0 	bl	2a6ac <assert_post_action>
}
   150cc:	b2d8      	uxtb	r0, r3
   150ce:	bd08      	pop	{r3, pc}
   150d0:	20009da8 	.word	0x20009da8
   150d4:	c28f5c29 	.word	0xc28f5c29
   150d8:	0003553e 	.word	0x0003553e
   150dc:	00035327 	.word	0x00035327
   150e0:	00032659 	.word	0x00032659
   150e4:	00035607 	.word	0x00035607

000150e8 <bt_conn_create_pdu_timeout>:
{
   150e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   150ea:	b087      	sub	sp, #28
   150ec:	4604      	mov	r4, r0
   150ee:	460d      	mov	r5, r1
   150f0:	4617      	mov	r7, r2
   150f2:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   150f4:	f01b f828 	bl	30148 <k_is_in_isr>
   150f8:	b158      	cbz	r0, 15112 <bt_conn_create_pdu_timeout+0x2a>
   150fa:	4914      	ldr	r1, [pc, #80]	; (1514c <bt_conn_create_pdu_timeout+0x64>)
   150fc:	4814      	ldr	r0, [pc, #80]	; (15150 <bt_conn_create_pdu_timeout+0x68>)
   150fe:	f240 43d2 	movw	r3, #1234	; 0x4d2
   15102:	4a14      	ldr	r2, [pc, #80]	; (15154 <bt_conn_create_pdu_timeout+0x6c>)
   15104:	f015 fad9 	bl	2a6ba <assert_print>
   15108:	f240 41d2 	movw	r1, #1234	; 0x4d2
   1510c:	4811      	ldr	r0, [pc, #68]	; (15154 <bt_conn_create_pdu_timeout+0x6c>)
   1510e:	f015 facd 	bl	2a6ac <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   15112:	4911      	ldr	r1, [pc, #68]	; (15158 <bt_conn_create_pdu_timeout+0x70>)
   15114:	463a      	mov	r2, r7
   15116:	2c00      	cmp	r4, #0
   15118:	bf14      	ite	ne
   1511a:	4620      	movne	r0, r4
   1511c:	4608      	moveq	r0, r1
   1511e:	4633      	mov	r3, r6
   15120:	f018 ff57 	bl	2dfd2 <net_buf_alloc_fixed>
	if (!buf) {
   15124:	4604      	mov	r4, r0
   15126:	b960      	cbnz	r0, 15142 <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   15128:	4b0c      	ldr	r3, [pc, #48]	; (1515c <bt_conn_create_pdu_timeout+0x74>)
   1512a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1512e:	9305      	str	r3, [sp, #20]
   15130:	2302      	movs	r3, #2
   15132:	480b      	ldr	r0, [pc, #44]	; (15160 <bt_conn_create_pdu_timeout+0x78>)
   15134:	aa04      	add	r2, sp, #16
   15136:	9304      	str	r3, [sp, #16]
   15138:	f017 fa1f 	bl	2c57a <z_log_msg_static_create.constprop.0>
}
   1513c:	4620      	mov	r0, r4
   1513e:	b007      	add	sp, #28
   15140:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   15142:	1d69      	adds	r1, r5, #5
   15144:	300c      	adds	r0, #12
   15146:	f006 f90d 	bl	1b364 <net_buf_simple_reserve>
	return buf;
   1514a:	e7f7      	b.n	1513c <bt_conn_create_pdu_timeout+0x54>
   1514c:	00035621 	.word	0x00035621
   15150:	00032659 	.word	0x00032659
   15154:	00035327 	.word	0x00035327
   15158:	20008d08 	.word	0x20008d08
   1515c:	00035630 	.word	0x00035630
   15160:	000314bc 	.word	0x000314bc

00015164 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   15164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15166:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15168:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1516a:	e8d0 3faf 	lda	r3, [r0]
   1516e:	059b      	lsls	r3, r3, #22
   15170:	d511      	bpl.n	15196 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   15172:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15176:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   1517a:	429a      	cmp	r2, r3
   1517c:	d80b      	bhi.n	15196 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1517e:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   15182:	429a      	cmp	r2, r3
   15184:	d307      	bcc.n	15196 <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   15186:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   1518a:	429a      	cmp	r2, r3
   1518c:	d103      	bne.n	15196 <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1518e:	f46f 7100 	mvn.w	r1, #512	; 0x200
   15192:	f017 f9e7 	bl	2c564 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   15196:	4b18      	ldr	r3, [pc, #96]	; (151f8 <notify_le_param_updated+0x94>)
   15198:	681d      	ldr	r5, [r3, #0]
   1519a:	b995      	cbnz	r5, 151c2 <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1519c:	4d17      	ldr	r5, [pc, #92]	; (151fc <notify_le_param_updated+0x98>)
   1519e:	4f18      	ldr	r7, [pc, #96]	; (15200 <notify_le_param_updated+0x9c>)
   151a0:	42bd      	cmp	r5, r7
   151a2:	d926      	bls.n	151f2 <notify_le_param_updated+0x8e>
   151a4:	4917      	ldr	r1, [pc, #92]	; (15204 <notify_le_param_updated+0xa0>)
   151a6:	f240 53a5 	movw	r3, #1445	; 0x5a5
   151aa:	4a17      	ldr	r2, [pc, #92]	; (15208 <notify_le_param_updated+0xa4>)
   151ac:	4817      	ldr	r0, [pc, #92]	; (1520c <notify_le_param_updated+0xa8>)
   151ae:	f015 fa84 	bl	2a6ba <assert_print>
   151b2:	4817      	ldr	r0, [pc, #92]	; (15210 <notify_le_param_updated+0xac>)
   151b4:	f015 fa81 	bl	2a6ba <assert_print>
   151b8:	f240 51a5 	movw	r1, #1445	; 0x5a5
   151bc:	4812      	ldr	r0, [pc, #72]	; (15208 <notify_le_param_updated+0xa4>)
   151be:	f015 fa75 	bl	2a6ac <assert_post_action>
		if (cb->le_param_updated) {
   151c2:	68ee      	ldr	r6, [r5, #12]
   151c4:	b13e      	cbz	r6, 151d6 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   151c6:	4620      	mov	r0, r4
   151c8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   151cc:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   151d0:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   151d4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   151d6:	69ad      	ldr	r5, [r5, #24]
   151d8:	e7df      	b.n	1519a <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   151da:	68ee      	ldr	r6, [r5, #12]
   151dc:	b13e      	cbz	r6, 151ee <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   151de:	4620      	mov	r0, r4
   151e0:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   151e4:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   151e8:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   151ec:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   151ee:	351c      	adds	r5, #28
   151f0:	e7d6      	b.n	151a0 <notify_le_param_updated+0x3c>
   151f2:	d3f2      	bcc.n	151da <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   151f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151f6:	bf00      	nop
   151f8:	200215f4 	.word	0x200215f4
   151fc:	00031448 	.word	0x00031448
   15200:	00031464 	.word	0x00031464
   15204:	00035357 	.word	0x00035357
   15208:	00035327 	.word	0x00035327
   1520c:	00032659 	.word	0x00032659
   15210:	000336ed 	.word	0x000336ed

00015214 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   15214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15218:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1521a:	4608      	mov	r0, r1
{
   1521c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1521e:	f016 ff55 	bl	2c0cc <bt_le_conn_params_valid>
   15222:	4605      	mov	r5, r0
   15224:	b918      	cbnz	r0, 1522e <le_param_req+0x1a>
		return false;
   15226:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   15228:	4628      	mov	r0, r5
   1522a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1522e:	4b1b      	ldr	r3, [pc, #108]	; (1529c <le_param_req+0x88>)
   15230:	681e      	ldr	r6, [r3, #0]
   15232:	b99e      	cbnz	r6, 1525c <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15234:	4e1a      	ldr	r6, [pc, #104]	; (152a0 <le_param_req+0x8c>)
   15236:	f8df 806c 	ldr.w	r8, [pc, #108]	; 152a4 <le_param_req+0x90>
   1523a:	4546      	cmp	r6, r8
   1523c:	d927      	bls.n	1528e <le_param_req+0x7a>
   1523e:	491a      	ldr	r1, [pc, #104]	; (152a8 <le_param_req+0x94>)
   15240:	f240 53ed 	movw	r3, #1517	; 0x5ed
   15244:	4a19      	ldr	r2, [pc, #100]	; (152ac <le_param_req+0x98>)
   15246:	481a      	ldr	r0, [pc, #104]	; (152b0 <le_param_req+0x9c>)
   15248:	f015 fa37 	bl	2a6ba <assert_print>
   1524c:	4819      	ldr	r0, [pc, #100]	; (152b4 <le_param_req+0xa0>)
   1524e:	f015 fa34 	bl	2a6ba <assert_print>
   15252:	f240 51ed 	movw	r1, #1517	; 0x5ed
   15256:	4815      	ldr	r0, [pc, #84]	; (152ac <le_param_req+0x98>)
   15258:	f015 fa28 	bl	2a6ac <assert_post_action>
		if (!cb->le_param_req) {
   1525c:	68b3      	ldr	r3, [r6, #8]
   1525e:	b90b      	cbnz	r3, 15264 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   15260:	69b6      	ldr	r6, [r6, #24]
   15262:	e7e6      	b.n	15232 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15264:	4621      	mov	r1, r4
   15266:	4638      	mov	r0, r7
   15268:	4798      	blx	r3
   1526a:	2800      	cmp	r0, #0
   1526c:	d0db      	beq.n	15226 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1526e:	4620      	mov	r0, r4
   15270:	f016 ff2c 	bl	2c0cc <bt_le_conn_params_valid>
   15274:	2800      	cmp	r0, #0
   15276:	d1f3      	bne.n	15260 <le_param_req+0x4c>
   15278:	e7d5      	b.n	15226 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1527a:	4621      	mov	r1, r4
   1527c:	4638      	mov	r0, r7
   1527e:	4798      	blx	r3
   15280:	2800      	cmp	r0, #0
   15282:	d0d0      	beq.n	15226 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15284:	4620      	mov	r0, r4
   15286:	f016 ff21 	bl	2c0cc <bt_le_conn_params_valid>
   1528a:	b920      	cbnz	r0, 15296 <le_param_req+0x82>
   1528c:	e7cb      	b.n	15226 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1528e:	d2cb      	bcs.n	15228 <le_param_req+0x14>
		if (!cb->le_param_req) {
   15290:	68b3      	ldr	r3, [r6, #8]
   15292:	2b00      	cmp	r3, #0
   15294:	d1f1      	bne.n	1527a <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15296:	361c      	adds	r6, #28
   15298:	e7cf      	b.n	1523a <le_param_req+0x26>
   1529a:	bf00      	nop
   1529c:	200215f4 	.word	0x200215f4
   152a0:	00031448 	.word	0x00031448
   152a4:	00031464 	.word	0x00031464
   152a8:	00035357 	.word	0x00035357
   152ac:	00035327 	.word	0x00035327
   152b0:	00032659 	.word	0x00032659
   152b4:	000336ed 	.word	0x000336ed

000152b8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   152b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   152bc:	78c3      	ldrb	r3, [r0, #3]
{
   152be:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   152c0:	b9db      	cbnz	r3, 152fa <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   152c2:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   152c6:	4b18      	ldr	r3, [pc, #96]	; (15328 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   152c8:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   152cc:	681d      	ldr	r5, [r3, #0]
   152ce:	b9bd      	cbnz	r5, 15300 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152d0:	4d16      	ldr	r5, [pc, #88]	; (1532c <bt_conn_identity_resolved+0x74>)
   152d2:	4f17      	ldr	r7, [pc, #92]	; (15330 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   152d4:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152d8:	42bd      	cmp	r5, r7
   152da:	d921      	bls.n	15320 <bt_conn_identity_resolved+0x68>
   152dc:	4915      	ldr	r1, [pc, #84]	; (15334 <bt_conn_identity_resolved+0x7c>)
   152de:	f240 73bc 	movw	r3, #1980	; 0x7bc
   152e2:	4a15      	ldr	r2, [pc, #84]	; (15338 <bt_conn_identity_resolved+0x80>)
   152e4:	4815      	ldr	r0, [pc, #84]	; (1533c <bt_conn_identity_resolved+0x84>)
   152e6:	f015 f9e8 	bl	2a6ba <assert_print>
   152ea:	4815      	ldr	r0, [pc, #84]	; (15340 <bt_conn_identity_resolved+0x88>)
   152ec:	f015 f9e5 	bl	2a6ba <assert_print>
   152f0:	f240 71bc 	movw	r1, #1980	; 0x7bc
   152f4:	4810      	ldr	r0, [pc, #64]	; (15338 <bt_conn_identity_resolved+0x80>)
   152f6:	f015 f9d9 	bl	2a6ac <assert_post_action>
		rpa = &conn->le.init_addr;
   152fa:	f100 0697 	add.w	r6, r0, #151	; 0x97
   152fe:	e7e2      	b.n	152c6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   15300:	692b      	ldr	r3, [r5, #16]
   15302:	b11b      	cbz	r3, 1530c <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15304:	463a      	mov	r2, r7
   15306:	4631      	mov	r1, r6
   15308:	4620      	mov	r0, r4
   1530a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1530c:	69ad      	ldr	r5, [r5, #24]
   1530e:	e7de      	b.n	152ce <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   15310:	692b      	ldr	r3, [r5, #16]
   15312:	b11b      	cbz	r3, 1531c <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15314:	4642      	mov	r2, r8
   15316:	4631      	mov	r1, r6
   15318:	4620      	mov	r0, r4
   1531a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1531c:	351c      	adds	r5, #28
   1531e:	e7db      	b.n	152d8 <bt_conn_identity_resolved+0x20>
   15320:	d3f6      	bcc.n	15310 <bt_conn_identity_resolved+0x58>
		}
	}
}
   15322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15326:	bf00      	nop
   15328:	200215f4 	.word	0x200215f4
   1532c:	00031448 	.word	0x00031448
   15330:	00031464 	.word	0x00031464
   15334:	00035357 	.word	0x00035357
   15338:	00035327 	.word	0x00035327
   1533c:	00032659 	.word	0x00032659
   15340:	000336ed 	.word	0x000336ed

00015344 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   15344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   15346:	7a43      	ldrb	r3, [r0, #9]
{
   15348:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1534a:	7283      	strb	r3, [r0, #10]
{
   1534c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1534e:	f017 fa33 	bl	2c7b8 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   15352:	4b14      	ldr	r3, [pc, #80]	; (153a4 <bt_conn_security_changed+0x60>)
   15354:	681d      	ldr	r5, [r3, #0]
   15356:	b995      	cbnz	r5, 1537e <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15358:	4d13      	ldr	r5, [pc, #76]	; (153a8 <bt_conn_security_changed+0x64>)
   1535a:	4f14      	ldr	r7, [pc, #80]	; (153ac <bt_conn_security_changed+0x68>)
   1535c:	42bd      	cmp	r5, r7
   1535e:	d91e      	bls.n	1539e <bt_conn_security_changed+0x5a>
   15360:	4913      	ldr	r1, [pc, #76]	; (153b0 <bt_conn_security_changed+0x6c>)
   15362:	f640 0328 	movw	r3, #2088	; 0x828
   15366:	4a13      	ldr	r2, [pc, #76]	; (153b4 <bt_conn_security_changed+0x70>)
   15368:	4813      	ldr	r0, [pc, #76]	; (153b8 <bt_conn_security_changed+0x74>)
   1536a:	f015 f9a6 	bl	2a6ba <assert_print>
   1536e:	4813      	ldr	r0, [pc, #76]	; (153bc <bt_conn_security_changed+0x78>)
   15370:	f015 f9a3 	bl	2a6ba <assert_print>
   15374:	f640 0128 	movw	r1, #2088	; 0x828
   15378:	480e      	ldr	r0, [pc, #56]	; (153b4 <bt_conn_security_changed+0x70>)
   1537a:	f015 f997 	bl	2a6ac <assert_post_action>
		if (cb->security_changed) {
   1537e:	696b      	ldr	r3, [r5, #20]
   15380:	b11b      	cbz	r3, 1538a <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   15382:	4632      	mov	r2, r6
   15384:	4620      	mov	r0, r4
   15386:	7a61      	ldrb	r1, [r4, #9]
   15388:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1538a:	69ad      	ldr	r5, [r5, #24]
   1538c:	e7e3      	b.n	15356 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1538e:	696b      	ldr	r3, [r5, #20]
   15390:	b11b      	cbz	r3, 1539a <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   15392:	4632      	mov	r2, r6
   15394:	4620      	mov	r0, r4
   15396:	7a61      	ldrb	r1, [r4, #9]
   15398:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1539a:	351c      	adds	r5, #28
   1539c:	e7de      	b.n	1535c <bt_conn_security_changed+0x18>
   1539e:	d3f6      	bcc.n	1538e <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   153a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153a2:	bf00      	nop
   153a4:	200215f4 	.word	0x200215f4
   153a8:	00031448 	.word	0x00031448
   153ac:	00031464 	.word	0x00031464
   153b0:	00035357 	.word	0x00035357
   153b4:	00035327 	.word	0x00035327
   153b8:	00032659 	.word	0x00032659
   153bc:	000336ed 	.word	0x000336ed

000153c0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   153c0:	b538      	push	{r3, r4, r5, lr}
   153c2:	4605      	mov	r5, r0
   153c4:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   153c6:	480b      	ldr	r0, [pc, #44]	; (153f4 <bt_conn_add_le+0x34>)
   153c8:	2101      	movs	r1, #1
   153ca:	f7ff fb5f 	bl	14a8c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   153ce:	b180      	cbz	r0, 153f2 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   153d0:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   153d2:	6823      	ldr	r3, [r4, #0]
   153d4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   153d8:	88a3      	ldrh	r3, [r4, #4]
   153da:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   153de:	79a3      	ldrb	r3, [r4, #6]
   153e0:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   153e4:	2301      	movs	r3, #1
   153e6:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   153e8:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   153ea:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   153ec:	4b02      	ldr	r3, [pc, #8]	; (153f8 <bt_conn_add_le+0x38>)
   153ee:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   153f2:	bd38      	pop	{r3, r4, r5, pc}
   153f4:	20009da8 	.word	0x20009da8
   153f8:	00280018 	.word	0x00280018

000153fc <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   153fc:	b570      	push	{r4, r5, r6, lr}
   153fe:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15400:	480a      	ldr	r0, [pc, #40]	; (1542c <bt_conn_lookup_addr_le+0x30>)
{
   15402:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15404:	f7ff fcf6 	bl	14df4 <bt_conn_ref>
   15408:	4604      	mov	r4, r0

		if (!conn) {
   1540a:	b120      	cbz	r0, 15416 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1540c:	7883      	ldrb	r3, [r0, #2]
   1540e:	2b01      	cmp	r3, #1
   15410:	d004      	beq.n	1541c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   15412:	f7ff fd17 	bl	14e44 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15416:	2400      	movs	r4, #0
}
   15418:	4620      	mov	r0, r4
   1541a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1541c:	4632      	mov	r2, r6
   1541e:	4629      	mov	r1, r5
   15420:	f017 f933 	bl	2c68a <bt_conn_is_peer_addr_le>
   15424:	2800      	cmp	r0, #0
   15426:	d1f7      	bne.n	15418 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   15428:	4620      	mov	r0, r4
   1542a:	e7f2      	b.n	15412 <bt_conn_lookup_addr_le+0x16>
   1542c:	20009da8 	.word	0x20009da8

00015430 <bt_conn_exists_le>:
{
   15430:	b5b0      	push	{r4, r5, r7, lr}
   15432:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   15434:	f7ff ffe2 	bl	153fc <bt_conn_lookup_addr_le>
	if (conn) {
   15438:	4604      	mov	r4, r0
   1543a:	b1e8      	cbz	r0, 15478 <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1543c:	7b43      	ldrb	r3, [r0, #13]
   1543e:	466d      	mov	r5, sp
   15440:	2b08      	cmp	r3, #8
   15442:	bf98      	it	ls
   15444:	4a0d      	ldrls	r2, [pc, #52]	; (1547c <bt_conn_exists_le+0x4c>)
   15446:	b088      	sub	sp, #32
   15448:	bf94      	ite	ls
   1544a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1544e:	4b0c      	ldrhi	r3, [pc, #48]	; (15480 <bt_conn_exists_le+0x50>)
   15450:	466a      	mov	r2, sp
   15452:	490c      	ldr	r1, [pc, #48]	; (15484 <bt_conn_exists_le+0x54>)
   15454:	480c      	ldr	r0, [pc, #48]	; (15488 <bt_conn_exists_le+0x58>)
   15456:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1545a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1545e:	8393      	strh	r3, [r2, #28]
   15460:	4b0a      	ldr	r3, [pc, #40]	; (1548c <bt_conn_exists_le+0x5c>)
   15462:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   15466:	f842 3f10 	str.w	r3, [r2, #16]!
   1546a:	f017 f886 	bl	2c57a <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1546e:	4620      	mov	r0, r4
   15470:	46ad      	mov	sp, r5
   15472:	f7ff fce7 	bl	14e44 <bt_conn_unref>
		return true;
   15476:	2001      	movs	r0, #1
}
   15478:	46bd      	mov	sp, r7
   1547a:	bdb0      	pop	{r4, r5, r7, pc}
   1547c:	00031f54 	.word	0x00031f54
   15480:	000354f0 	.word	0x000354f0
   15484:	00035659 	.word	0x00035659
   15488:	000314bc 	.word	0x000314bc
   1548c:	01000003 	.word	0x01000003

00015490 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15492:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15494:	480e      	ldr	r0, [pc, #56]	; (154d0 <bt_conn_lookup_state_le+0x40>)
{
   15496:	460e      	mov	r6, r1
   15498:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1549a:	f7ff fcab 	bl	14df4 <bt_conn_ref>

		if (!conn) {
   1549e:	4604      	mov	r4, r0
   154a0:	b120      	cbz	r0, 154ac <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   154a2:	7883      	ldrb	r3, [r0, #2]
   154a4:	2b01      	cmp	r3, #1
   154a6:	d003      	beq.n	154b0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   154a8:	f7ff fccc 	bl	14e44 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   154ac:	2400      	movs	r4, #0
   154ae:	e00d      	b.n	154cc <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   154b0:	b136      	cbz	r6, 154c0 <bt_conn_lookup_state_le+0x30>
   154b2:	4632      	mov	r2, r6
   154b4:	4629      	mov	r1, r5
   154b6:	f017 f8e8 	bl	2c68a <bt_conn_is_peer_addr_le>
   154ba:	b908      	cbnz	r0, 154c0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   154bc:	4620      	mov	r0, r4
   154be:	e7f3      	b.n	154a8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   154c0:	7b63      	ldrb	r3, [r4, #13]
   154c2:	42bb      	cmp	r3, r7
   154c4:	d1fa      	bne.n	154bc <bt_conn_lookup_state_le+0x2c>
   154c6:	7a23      	ldrb	r3, [r4, #8]
   154c8:	42ab      	cmp	r3, r5
   154ca:	d1f7      	bne.n	154bc <bt_conn_lookup_state_le+0x2c>
}
   154cc:	4620      	mov	r0, r4
   154ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154d0:	20009da8 	.word	0x20009da8

000154d4 <send_conn_le_param_update>:
{
   154d4:	b538      	push	{r3, r4, r5, lr}
   154d6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   154d8:	4608      	mov	r0, r1
{
   154da:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   154dc:	f016 fdf6 	bl	2c0cc <bt_le_conn_params_valid>
   154e0:	b338      	cbz	r0, 15532 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   154e2:	4b15      	ldr	r3, [pc, #84]	; (15538 <send_conn_le_param_update+0x64>)
   154e4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   154e8:	0799      	lsls	r1, r3, #30
   154ea:	d407      	bmi.n	154fc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   154ec:	78e3      	ldrb	r3, [r4, #3]
   154ee:	b173      	cbz	r3, 1550e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   154f0:	4629      	mov	r1, r5
   154f2:	4620      	mov	r0, r4
}
   154f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   154f8:	f000 bb02 	b.w	15b00 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   154fc:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   15500:	079a      	lsls	r2, r3, #30
   15502:	d5f3      	bpl.n	154ec <send_conn_le_param_update+0x18>
   15504:	1d23      	adds	r3, r4, #4
   15506:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1550a:	055b      	lsls	r3, r3, #21
   1550c:	d4ee      	bmi.n	154ec <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1550e:	4629      	mov	r1, r5
   15510:	4620      	mov	r0, r4
   15512:	f017 f8dc 	bl	2c6ce <bt_conn_le_conn_update>
		if (rc == 0) {
   15516:	b958      	cbnz	r0, 15530 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   15518:	882b      	ldrh	r3, [r5, #0]
   1551a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1551e:	886b      	ldrh	r3, [r5, #2]
   15520:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   15524:	88ab      	ldrh	r3, [r5, #4]
   15526:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1552a:	88eb      	ldrh	r3, [r5, #6]
   1552c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   15530:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15532:	f06f 0015 	mvn.w	r0, #21
   15536:	e7fb      	b.n	15530 <send_conn_le_param_update+0x5c>
   15538:	20008000 	.word	0x20008000

0001553c <deferred_work>:
{
   1553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15540:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   15542:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   15546:	4604      	mov	r4, r0
   15548:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1554a:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1554e:	bb8b      	cbnz	r3, 155b4 <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   15550:	4630      	mov	r0, r6
   15552:	f017 f919 	bl	2c788 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15556:	4b3d      	ldr	r3, [pc, #244]	; (1564c <deferred_work+0x110>)
   15558:	681d      	ldr	r5, [r3, #0]
   1555a:	b99d      	cbnz	r5, 15584 <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1555c:	4d3c      	ldr	r5, [pc, #240]	; (15650 <deferred_work+0x114>)
   1555e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 15654 <deferred_work+0x118>
   15562:	4545      	cmp	r5, r8
   15564:	d91e      	bls.n	155a4 <deferred_work+0x68>
   15566:	493c      	ldr	r1, [pc, #240]	; (15658 <deferred_work+0x11c>)
   15568:	f240 536c 	movw	r3, #1388	; 0x56c
   1556c:	4a3b      	ldr	r2, [pc, #236]	; (1565c <deferred_work+0x120>)
   1556e:	483c      	ldr	r0, [pc, #240]	; (15660 <deferred_work+0x124>)
   15570:	f015 f8a3 	bl	2a6ba <assert_print>
   15574:	483b      	ldr	r0, [pc, #236]	; (15664 <deferred_work+0x128>)
   15576:	f015 f8a0 	bl	2a6ba <assert_print>
   1557a:	f240 516c 	movw	r1, #1388	; 0x56c
   1557e:	4837      	ldr	r0, [pc, #220]	; (1565c <deferred_work+0x120>)
   15580:	f015 f894 	bl	2a6ac <assert_post_action>
		if (cb->disconnected) {
   15584:	686b      	ldr	r3, [r5, #4]
   15586:	b11b      	cbz	r3, 15590 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   15588:	4630      	mov	r0, r6
   1558a:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   1558e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15590:	69ad      	ldr	r5, [r5, #24]
   15592:	e7e2      	b.n	1555a <deferred_work+0x1e>
		if (cb->disconnected) {
   15594:	686b      	ldr	r3, [r5, #4]
   15596:	b11b      	cbz	r3, 155a0 <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   15598:	4630      	mov	r0, r6
   1559a:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   1559e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   155a0:	351c      	adds	r5, #28
   155a2:	e7de      	b.n	15562 <deferred_work+0x26>
   155a4:	d3f6      	bcc.n	15594 <deferred_work+0x58>
		bt_conn_unref(conn);
   155a6:	4630      	mov	r0, r6
   155a8:	f7ff fc4c 	bl	14e44 <bt_conn_unref>
}
   155ac:	3708      	adds	r7, #8
   155ae:	46bd      	mov	sp, r7
   155b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   155b4:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   155b8:	2b01      	cmp	r3, #1
   155ba:	d1f7      	bne.n	155ac <deferred_work+0x70>
	if (atomic_test_and_clear_bit(conn->flags,
   155bc:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   155c0:	f46f 7100 	mvn.w	r1, #512	; 0x200
   155c4:	4628      	mov	r0, r5
   155c6:	f016 ffcd 	bl	2c564 <atomic_and>
   155ca:	0581      	lsls	r1, r0, #22
   155cc:	d526      	bpl.n	1561c <deferred_work+0xe0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   155ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   155d0:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   155d2:	603b      	str	r3, [r7, #0]
   155d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   155d6:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   155d8:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   155da:	f7ff ff7b 	bl	154d4 <send_conn_le_param_update>
		if (!err) {
   155de:	b968      	cbnz	r0, 155fc <deferred_work+0xc0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   155e0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   155e4:	4628      	mov	r0, r5
   155e6:	f016 ffbd 	bl	2c564 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   155ea:	e8d5 3fef 	ldaex	r3, [r5]
   155ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   155f2:	e8c5 3fe2 	stlex	r2, r3, [r5]
   155f6:	2a00      	cmp	r2, #0
   155f8:	d0d8      	beq.n	155ac <deferred_work+0x70>
   155fa:	e7f6      	b.n	155ea <deferred_work+0xae>
			LOG_WRN("Send LE param update failed (err %d)", err);
   155fc:	466c      	mov	r4, sp
   155fe:	b088      	sub	sp, #32
   15600:	466a      	mov	r2, sp
   15602:	4b19      	ldr	r3, [pc, #100]	; (15668 <deferred_work+0x12c>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   15604:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15608:	2303      	movs	r3, #3
   1560a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1560e:	4817      	ldr	r0, [pc, #92]	; (1566c <deferred_work+0x130>)
   15610:	f842 3f10 	str.w	r3, [r2, #16]!
   15614:	f016 ffb1 	bl	2c57a <z_log_msg_static_create.constprop.0>
   15618:	46a5      	mov	sp, r4
   1561a:	e7e6      	b.n	155ea <deferred_work+0xae>
		param = BT_LE_CONN_PARAM(
   1561c:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   15620:	4a13      	ldr	r2, [pc, #76]	; (15670 <deferred_work+0x134>)
		err = send_conn_le_param_update(conn, param);
   15622:	4639      	mov	r1, r7
   15624:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(
   15626:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   1562a:	f7ff ff53 	bl	154d4 <send_conn_le_param_update>
		if (!err) {
   1562e:	b940      	cbnz	r0, 15642 <deferred_work+0x106>
   15630:	e8d5 3fef 	ldaex	r3, [r5]
   15634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15638:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1563c:	2a00      	cmp	r2, #0
   1563e:	d0d4      	beq.n	155ea <deferred_work+0xae>
   15640:	e7f6      	b.n	15630 <deferred_work+0xf4>
			LOG_WRN("Send auto LE param update failed (err %d)",
   15642:	466c      	mov	r4, sp
   15644:	b088      	sub	sp, #32
   15646:	466a      	mov	r2, sp
   15648:	4b0a      	ldr	r3, [pc, #40]	; (15674 <deferred_work+0x138>)
   1564a:	e7db      	b.n	15604 <deferred_work+0xc8>
   1564c:	200215f4 	.word	0x200215f4
   15650:	00031448 	.word	0x00031448
   15654:	00031464 	.word	0x00031464
   15658:	00035357 	.word	0x00035357
   1565c:	00035327 	.word	0x00035327
   15660:	00032659 	.word	0x00032659
   15664:	000336ed 	.word	0x000336ed
   15668:	0003567c 	.word	0x0003567c
   1566c:	000314bc 	.word	0x000314bc
   15670:	00280018 	.word	0x00280018
   15674:	000356a1 	.word	0x000356a1

00015678 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15678:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1567a:	4801      	ldr	r0, [pc, #4]	; (15680 <bt_conn_create_frag_timeout+0x8>)
   1567c:	f7ff bd34 	b.w	150e8 <bt_conn_create_pdu_timeout>
   15680:	20008da4 	.word	0x20008da4

00015684 <create_frag>:
{
   15684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15688:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1568a:	f04f 33ff 	mov.w	r3, #4294967295
   1568e:	f04f 32ff 	mov.w	r2, #4294967295
   15692:	2000      	movs	r0, #0
{
   15694:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   15696:	f7ff ffef 	bl	15678 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1569a:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   1569c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1569e:	2b07      	cmp	r3, #7
   156a0:	f04f 0600 	mov.w	r6, #0
   156a4:	d005      	beq.n	156b2 <create_frag+0x2e>
		net_buf_unref(frag);
   156a6:	f005 ff6f 	bl	1b588 <net_buf_unref>
		return NULL;
   156aa:	4635      	mov	r5, r6
}
   156ac:	4628      	mov	r0, r5
   156ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   156b2:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   156b4:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   156b8:	4e0c      	ldr	r6, [pc, #48]	; (156ec <create_frag+0x68>)
   156ba:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   156bc:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   156c0:	f018 fca1 	bl	2e006 <net_buf_simple_tailroom>
   156c4:	4580      	cmp	r8, r0
   156c6:	d20c      	bcs.n	156e2 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   156c8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   156cc:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   156d0:	4632      	mov	r2, r6
   156d2:	4638      	mov	r0, r7
   156d4:	f018 fc9f 	bl	2e016 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   156d8:	4631      	mov	r1, r6
   156da:	4620      	mov	r0, r4
   156dc:	f006 f83a 	bl	1b754 <net_buf_simple_pull>
   156e0:	e7e4      	b.n	156ac <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   156e2:	4638      	mov	r0, r7
   156e4:	f018 fc8f 	bl	2e006 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   156e8:	b286      	uxth	r6, r0
   156ea:	e7ef      	b.n	156cc <create_frag+0x48>
   156ec:	20008000 	.word	0x20008000

000156f0 <bt_conn_process_tx>:
{
   156f0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   156f2:	7b43      	ldrb	r3, [r0, #13]
{
   156f4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   156f6:	b95b      	cbnz	r3, 15710 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   156f8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   156fc:	3004      	adds	r0, #4
   156fe:	f016 ff31 	bl	2c564 <atomic_and>
   15702:	0643      	lsls	r3, r0, #25
   15704:	d504      	bpl.n	15710 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   15706:	4620      	mov	r0, r4
}
   15708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1570c:	f7ff b9ec 	b.w	14ae8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15710:	2200      	movs	r2, #0
   15712:	2300      	movs	r3, #0
   15714:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15718:	f018 fc60 	bl	2dfdc <net_buf_get>
	BT_ASSERT(buf);
   1571c:	4605      	mov	r5, r0
   1571e:	b960      	cbnz	r0, 1573a <bt_conn_process_tx+0x4a>
   15720:	f240 331a 	movw	r3, #794	; 0x31a
   15724:	4a22      	ldr	r2, [pc, #136]	; (157b0 <bt_conn_process_tx+0xc0>)
   15726:	4923      	ldr	r1, [pc, #140]	; (157b4 <bt_conn_process_tx+0xc4>)
   15728:	4823      	ldr	r0, [pc, #140]	; (157b8 <bt_conn_process_tx+0xc8>)
   1572a:	f014 ffc6 	bl	2a6ba <assert_print>
   1572e:	4040      	eors	r0, r0
   15730:	f380 8811 	msr	BASEPRI, r0
   15734:	f04f 0003 	mov.w	r0, #3
   15738:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1573a:	4e20      	ldr	r6, [pc, #128]	; (157bc <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1573c:	8a2a      	ldrh	r2, [r5, #16]
   1573e:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15742:	429a      	cmp	r2, r3
   15744:	d807      	bhi.n	15756 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15746:	2300      	movs	r3, #0
   15748:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1574a:	4629      	mov	r1, r5
   1574c:	4620      	mov	r0, r4
   1574e:	f7ff f8e7 	bl	14920 <send_frag>
	if (!send_buf(conn, buf)) {
   15752:	b968      	cbnz	r0, 15770 <bt_conn_process_tx+0x80>
   15754:	e005      	b.n	15762 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   15756:	4629      	mov	r1, r5
   15758:	4620      	mov	r0, r4
   1575a:	f7ff ff93 	bl	15684 <create_frag>
	if (!frag) {
   1575e:	4601      	mov	r1, r0
   15760:	b938      	cbnz	r0, 15772 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   15762:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   15764:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   15766:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   15768:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1576a:	f005 ff0d 	bl	1b588 <net_buf_unref>
		if (tx) {
   1576e:	b9ce      	cbnz	r6, 157a4 <bt_conn_process_tx+0xb4>
}
   15770:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15772:	2301      	movs	r3, #1
   15774:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15776:	4620      	mov	r0, r4
   15778:	f7ff f8d2 	bl	14920 <send_frag>
   1577c:	2800      	cmp	r0, #0
   1577e:	d0f0      	beq.n	15762 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   15780:	8a2a      	ldrh	r2, [r5, #16]
   15782:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15786:	429a      	cmp	r2, r3
   15788:	d802      	bhi.n	15790 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   1578a:	2300      	movs	r3, #0
   1578c:	2203      	movs	r2, #3
   1578e:	e7dc      	b.n	1574a <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   15790:	4629      	mov	r1, r5
   15792:	4620      	mov	r0, r4
   15794:	f7ff ff76 	bl	15684 <create_frag>
		if (!frag) {
   15798:	4601      	mov	r1, r0
   1579a:	2800      	cmp	r0, #0
   1579c:	d0e1      	beq.n	15762 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1579e:	2301      	movs	r3, #1
   157a0:	461a      	mov	r2, r3
   157a2:	e7e8      	b.n	15776 <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   157a4:	4631      	mov	r1, r6
   157a6:	4620      	mov	r0, r4
}
   157a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   157ac:	f7ff b892 	b.w	148d4 <conn_tx_destroy>
   157b0:	00035327 	.word	0x00035327
   157b4:	00036969 	.word	0x00036969
   157b8:	00032659 	.word	0x00032659
   157bc:	20008000 	.word	0x20008000

000157c0 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   157c0:	4b0b      	ldr	r3, [pc, #44]	; (157f0 <bt_conn_auth_cb_register+0x30>)
   157c2:	b158      	cbz	r0, 157dc <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   157c4:	681a      	ldr	r2, [r3, #0]
   157c6:	b962      	cbnz	r2, 157e2 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   157c8:	6902      	ldr	r2, [r0, #16]
   157ca:	b93a      	cbnz	r2, 157dc <bt_conn_auth_cb_register+0x1c>
   157cc:	6802      	ldr	r2, [r0, #0]
   157ce:	b95a      	cbnz	r2, 157e8 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   157d0:	6842      	ldr	r2, [r0, #4]
   157d2:	b94a      	cbnz	r2, 157e8 <bt_conn_auth_cb_register+0x28>
   157d4:	6882      	ldr	r2, [r0, #8]
   157d6:	b93a      	cbnz	r2, 157e8 <bt_conn_auth_cb_register+0x28>
   157d8:	6942      	ldr	r2, [r0, #20]
   157da:	b92a      	cbnz	r2, 157e8 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   157dc:	6018      	str	r0, [r3, #0]
		return 0;
   157de:	2000      	movs	r0, #0
   157e0:	4770      	bx	lr
		return -EALREADY;
   157e2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   157e6:	4770      	bx	lr
		return -EINVAL;
   157e8:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   157ec:	4770      	bx	lr
   157ee:	bf00      	nop
   157f0:	20021600 	.word	0x20021600

000157f4 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   157f4:	b168      	cbz	r0, 15812 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   157f6:	2300      	movs	r3, #0
   157f8:	60c3      	str	r3, [r0, #12]
	return list->tail;
   157fa:	4b07      	ldr	r3, [pc, #28]	; (15818 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   157fc:	f100 020c 	add.w	r2, r0, #12
   15800:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   15802:	b919      	cbnz	r1, 1580c <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   15804:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   15808:	2000      	movs	r0, #0
   1580a:	4770      	bx	lr
	parent->next = child;
   1580c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1580e:	605a      	str	r2, [r3, #4]
}
   15810:	e7fa      	b.n	15808 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   15812:	f06f 0015 	mvn.w	r0, #21
}
   15816:	4770      	bx	lr
   15818:	200215f8 	.word	0x200215f8

0001581c <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1581c:	b910      	cbnz	r0, 15824 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1581e:	4802      	ldr	r0, [pc, #8]	; (15828 <bt_conn_lookup_index+0xc>)
   15820:	f7ff bae8 	b.w	14df4 <bt_conn_ref>
}
   15824:	2000      	movs	r0, #0
   15826:	4770      	bx	lr
   15828:	20009da8 	.word	0x20009da8

0001582c <bt_conn_init>:

int bt_conn_init(void)
{
   1582c:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1582e:	480a      	ldr	r0, [pc, #40]	; (15858 <bt_conn_init+0x2c>)
   15830:	f01a fcb9 	bl	301a6 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15834:	4909      	ldr	r1, [pc, #36]	; (1585c <bt_conn_init+0x30>)
   15836:	4808      	ldr	r0, [pc, #32]	; (15858 <bt_conn_init+0x2c>)
   15838:	f01a fcc2 	bl	301c0 <k_queue_append>
   1583c:	4908      	ldr	r1, [pc, #32]	; (15860 <bt_conn_init+0x34>)
   1583e:	4806      	ldr	r0, [pc, #24]	; (15858 <bt_conn_init+0x2c>)
   15840:	f01a fcbe 	bl	301c0 <k_queue_append>
	}

	bt_att_init();
   15844:	f001 f932 	bl	16aac <bt_att_init>

	err = bt_smp_init();
   15848:	f004 fd80 	bl	1a34c <bt_smp_init>
	if (err) {
   1584c:	4604      	mov	r4, r0
   1584e:	b908      	cbnz	r0, 15854 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   15850:	f016 fffd 	bl	2c84e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15854:	4620      	mov	r0, r4
   15856:	bd10      	pop	{r4, pc}
   15858:	20008cb8 	.word	0x20008cb8
   1585c:	200215d4 	.word	0x200215d4
   15860:	200215e4 	.word	0x200215e4

00015864 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   15864:	b580      	push	{r7, lr}
   15866:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   15868:	b088      	sub	sp, #32
   1586a:	466a      	mov	r2, sp
   1586c:	4b06      	ldr	r3, [pc, #24]	; (15888 <l2cap_create_le_sig_pdu.part.0+0x24>)
   1586e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15872:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15876:	2303      	movs	r3, #3
   15878:	4804      	ldr	r0, [pc, #16]	; (1588c <l2cap_create_le_sig_pdu.part.0+0x28>)
   1587a:	f842 3f10 	str.w	r3, [r2, #16]!
   1587e:	f016 ff4f 	bl	2c720 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   15882:	2000      	movs	r0, #0
   15884:	46bd      	mov	sp, r7
   15886:	bd80      	pop	{r7, pc}
   15888:	00035744 	.word	0x00035744
   1588c:	00031504 	.word	0x00031504

00015890 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   15890:	b580      	push	{r7, lr}
   15892:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   15894:	b088      	sub	sp, #32
   15896:	466a      	mov	r2, sp
   15898:	4b07      	ldr	r3, [pc, #28]	; (158b8 <l2cap_accept.part.0+0x28>)
   1589a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1589e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   158a2:	2303      	movs	r3, #3
   158a4:	4805      	ldr	r0, [pc, #20]	; (158bc <l2cap_accept.part.0+0x2c>)
   158a6:	f842 3f10 	str.w	r3, [r2, #16]!
   158aa:	f016 ff39 	bl	2c720 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   158ae:	f06f 000b 	mvn.w	r0, #11
   158b2:	46bd      	mov	sp, r7
   158b4:	bd80      	pop	{r7, pc}
   158b6:	bf00      	nop
   158b8:	0003576c 	.word	0x0003576c
   158bc:	00031504 	.word	0x00031504

000158c0 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   158c0:	4b04      	ldr	r3, [pc, #16]	; (158d4 <l2cap_accept+0x14>)
   158c2:	681a      	ldr	r2, [r3, #0]
   158c4:	b10a      	cbz	r2, 158ca <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   158c6:	f7ff bfe3 	b.w	15890 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   158ca:	4803      	ldr	r0, [pc, #12]	; (158d8 <l2cap_accept+0x18>)
   158cc:	6058      	str	r0, [r3, #4]
}
   158ce:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   158d0:	600b      	str	r3, [r1, #0]
}
   158d2:	4770      	bx	lr
   158d4:	20021604 	.word	0x20021604
   158d8:	00031f98 	.word	0x00031f98

000158dc <bt_l2cap_connected>:
{
   158dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   158de:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   158e0:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   158e2:	4d27      	ldr	r5, [pc, #156]	; (15980 <bt_l2cap_connected+0xa4>)
   158e4:	4f27      	ldr	r7, [pc, #156]	; (15984 <bt_l2cap_connected+0xa8>)
   158e6:	42bd      	cmp	r5, r7
   158e8:	d946      	bls.n	15978 <bt_l2cap_connected+0x9c>
   158ea:	4927      	ldr	r1, [pc, #156]	; (15988 <bt_l2cap_connected+0xac>)
   158ec:	f240 1381 	movw	r3, #385	; 0x181
   158f0:	4a26      	ldr	r2, [pc, #152]	; (1598c <bt_l2cap_connected+0xb0>)
   158f2:	4827      	ldr	r0, [pc, #156]	; (15990 <bt_l2cap_connected+0xb4>)
   158f4:	f014 fee1 	bl	2a6ba <assert_print>
   158f8:	4826      	ldr	r0, [pc, #152]	; (15994 <bt_l2cap_connected+0xb8>)
   158fa:	f014 fede 	bl	2a6ba <assert_print>
   158fe:	f240 1181 	movw	r1, #385	; 0x181
   15902:	4822      	ldr	r0, [pc, #136]	; (1598c <bt_l2cap_connected+0xb0>)
   15904:	f014 fed2 	bl	2a6ac <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   15908:	4620      	mov	r0, r4
   1590a:	686b      	ldr	r3, [r5, #4]
   1590c:	a901      	add	r1, sp, #4
   1590e:	4798      	blx	r3
   15910:	2800      	cmp	r0, #0
   15912:	db2c      	blt.n	1596e <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   15914:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   15916:	882a      	ldrh	r2, [r5, #0]
   15918:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1591a:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1591c:	68a8      	ldr	r0, [r5, #8]
   1591e:	f103 0210 	add.w	r2, r3, #16
   15922:	e8d2 1fef 	ldaex	r1, [r2]
   15926:	e8c2 6fec 	stlex	ip, r6, [r2]
   1592a:	f1bc 0f00 	cmp.w	ip, #0
   1592e:	d1f8      	bne.n	15922 <bt_l2cap_connected+0x46>
	parent->next = child;
   15930:	609e      	str	r6, [r3, #8]
	return list->tail;
   15932:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   15934:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   15938:	b9d9      	cbnz	r1, 15972 <bt_l2cap_connected+0x96>
	list->head = node;
   1593a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   1593e:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   15940:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15942:	9801      	ldr	r0, [sp, #4]
   15944:	6843      	ldr	r3, [r0, #4]
   15946:	681b      	ldr	r3, [r3, #0]
   15948:	b103      	cbz	r3, 1594c <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   1594a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1594c:	9b01      	ldr	r3, [sp, #4]
   1594e:	3310      	adds	r3, #16
   15950:	e8d3 1fef 	ldaex	r1, [r3]
   15954:	f041 0101 	orr.w	r1, r1, #1
   15958:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1595c:	2a00      	cmp	r2, #0
   1595e:	d1f7      	bne.n	15950 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   15960:	9801      	ldr	r0, [sp, #4]
   15962:	6843      	ldr	r3, [r0, #4]
   15964:	69db      	ldr	r3, [r3, #28]
   15966:	b113      	cbz	r3, 1596e <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   15968:	f100 0110 	add.w	r1, r0, #16
   1596c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1596e:	350c      	adds	r5, #12
   15970:	e7b9      	b.n	158e6 <bt_l2cap_connected+0xa>
	parent->next = child;
   15972:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15974:	65a2      	str	r2, [r4, #88]	; 0x58
}
   15976:	e7e2      	b.n	1593e <bt_l2cap_connected+0x62>
   15978:	d3c6      	bcc.n	15908 <bt_l2cap_connected+0x2c>
}
   1597a:	b003      	add	sp, #12
   1597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1597e:	bf00      	nop
   15980:	00031424 	.word	0x00031424
   15984:	00031448 	.word	0x00031448
   15988:	000357c4 	.word	0x000357c4
   1598c:	00035793 	.word	0x00035793
   15990:	00032659 	.word	0x00032659
   15994:	000336ed 	.word	0x000336ed

00015998 <l2cap_recv>:
{
   15998:	b5f0      	push	{r4, r5, r6, r7, lr}
   1599a:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   1599c:	8a0b      	ldrh	r3, [r1, #16]
{
   1599e:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   159a0:	2b03      	cmp	r3, #3
{
   159a2:	460d      	mov	r5, r1
   159a4:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   159a6:	d80b      	bhi.n	159c0 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   159a8:	4b30      	ldr	r3, [pc, #192]	; (15a6c <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   159aa:	617b      	str	r3, [r7, #20]
   159ac:	2302      	movs	r3, #2
   159ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   159b2:	482f      	ldr	r0, [pc, #188]	; (15a70 <l2cap_recv+0xd8>)
   159b4:	613b      	str	r3, [r7, #16]
   159b6:	f107 0210 	add.w	r2, r7, #16
   159ba:	f016 feb1 	bl	2c720 <z_log_msg_static_create.constprop.0>
		return 0;
   159be:	e019      	b.n	159f4 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   159c0:	2104      	movs	r1, #4
   159c2:	f105 000c 	add.w	r0, r5, #12
   159c6:	f005 fee3 	bl	1b790 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   159ca:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   159cc:	8843      	ldrh	r3, [r0, #2]
   159ce:	4604      	mov	r4, r0
	if (buf->len != len) {
   159d0:	4299      	cmp	r1, r3
   159d2:	d013      	beq.n	159fc <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   159d4:	466c      	mov	r4, sp
   159d6:	b088      	sub	sp, #32
   159d8:	aa02      	add	r2, sp, #8
   159da:	61d3      	str	r3, [r2, #28]
   159dc:	2304      	movs	r3, #4
   159de:	4825      	ldr	r0, [pc, #148]	; (15a74 <l2cap_recv+0xdc>)
   159e0:	e9c2 0105 	strd	r0, r1, [r2, #20]
   159e4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   159e8:	4821      	ldr	r0, [pc, #132]	; (15a70 <l2cap_recv+0xd8>)
   159ea:	f842 3f10 	str.w	r3, [r2, #16]!
   159ee:	f016 fe97 	bl	2c720 <z_log_msg_static_create.constprop.0>
   159f2:	46a5      	mov	sp, r4
}
   159f4:	2000      	movs	r0, #0
   159f6:	371c      	adds	r7, #28
   159f8:	46bd      	mov	sp, r7
   159fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   159fc:	7843      	ldrb	r3, [r0, #1]
   159fe:	b90b      	cbnz	r3, 15a04 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   15a00:	4b1d      	ldr	r3, [pc, #116]	; (15a78 <l2cap_recv+0xe0>)
   15a02:	e7d2      	b.n	159aa <l2cap_recv+0x12>
	switch (hdr->code) {
   15a04:	7803      	ldrb	r3, [r0, #0]
   15a06:	2b01      	cmp	r3, #1
   15a08:	d0f4      	beq.n	159f4 <l2cap_recv+0x5c>
   15a0a:	2b13      	cmp	r3, #19
   15a0c:	d103      	bne.n	15a16 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   15a0e:	2901      	cmp	r1, #1
   15a10:	d8f0      	bhi.n	159f4 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   15a12:	4b1a      	ldr	r3, [pc, #104]	; (15a7c <l2cap_recv+0xe4>)
   15a14:	e7c9      	b.n	159aa <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15a16:	466d      	mov	r5, sp
   15a18:	b088      	sub	sp, #32
   15a1a:	aa02      	add	r2, sp, #8
   15a1c:	4918      	ldr	r1, [pc, #96]	; (15a80 <l2cap_recv+0xe8>)
   15a1e:	4814      	ldr	r0, [pc, #80]	; (15a70 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   15a20:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15a24:	2303      	movs	r3, #3
   15a26:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15a2a:	f842 3f10 	str.w	r3, [r2, #16]!
   15a2e:	f016 fe77 	bl	2c720 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15a32:	2202      	movs	r2, #2
   15a34:	46ad      	mov	sp, r5
   15a36:	7861      	ldrb	r1, [r4, #1]
   15a38:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   15a3a:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15a3c:	f016 fe73 	bl	2c726 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15a40:	4604      	mov	r4, r0
   15a42:	2800      	cmp	r0, #0
   15a44:	d0d6      	beq.n	159f4 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   15a46:	2102      	movs	r1, #2
   15a48:	300c      	adds	r0, #12
   15a4a:	f005 febf 	bl	1b7cc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   15a4e:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15a50:	4622      	mov	r2, r4
   15a52:	7003      	strb	r3, [r0, #0]
   15a54:	7043      	strb	r3, [r0, #1]
   15a56:	2105      	movs	r1, #5
   15a58:	4628      	mov	r0, r5
   15a5a:	9300      	str	r3, [sp, #0]
   15a5c:	f016 fecc 	bl	2c7f8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   15a60:	2800      	cmp	r0, #0
   15a62:	d0c7      	beq.n	159f4 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   15a64:	4620      	mov	r0, r4
   15a66:	f005 fd8f 	bl	1b588 <net_buf_unref>
   15a6a:	e7c3      	b.n	159f4 <l2cap_recv+0x5c>
   15a6c:	000357eb 	.word	0x000357eb
   15a70:	00031504 	.word	0x00031504
   15a74:	00035809 	.word	0x00035809
   15a78:	0003582a 	.word	0x0003582a
   15a7c:	0003584b 	.word	0x0003584b
   15a80:	00035867 	.word	0x00035867

00015a84 <bt_l2cap_recv>:
{
   15a84:	b5b0      	push	{r4, r5, r7, lr}
   15a86:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15a88:	8a0b      	ldrh	r3, [r1, #16]
{
   15a8a:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   15a8c:	2b03      	cmp	r3, #3
{
   15a8e:	460c      	mov	r4, r1
   15a90:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   15a92:	d810      	bhi.n	15ab6 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   15a94:	4b17      	ldr	r3, [pc, #92]	; (15af4 <bt_l2cap_recv+0x70>)
   15a96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a9a:	617b      	str	r3, [r7, #20]
   15a9c:	2302      	movs	r3, #2
   15a9e:	4816      	ldr	r0, [pc, #88]	; (15af8 <bt_l2cap_recv+0x74>)
   15aa0:	613b      	str	r3, [r7, #16]
   15aa2:	f107 0210 	add.w	r2, r7, #16
   15aa6:	f016 fe3b 	bl	2c720 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   15aaa:	4620      	mov	r0, r4
   15aac:	f005 fd6c 	bl	1b588 <net_buf_unref>
}
   15ab0:	3718      	adds	r7, #24
   15ab2:	46bd      	mov	sp, r7
   15ab4:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15ab6:	2104      	movs	r1, #4
   15ab8:	f104 000c 	add.w	r0, r4, #12
   15abc:	f005 fe68 	bl	1b790 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   15ac0:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   15ac2:	4628      	mov	r0, r5
   15ac4:	f016 feba 	bl	2c83c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15ac8:	b978      	cbnz	r0, 15aea <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   15aca:	466d      	mov	r5, sp
   15acc:	b088      	sub	sp, #32
   15ace:	466a      	mov	r2, sp
   15ad0:	4b0a      	ldr	r3, [pc, #40]	; (15afc <bt_l2cap_recv+0x78>)
   15ad2:	4809      	ldr	r0, [pc, #36]	; (15af8 <bt_l2cap_recv+0x74>)
   15ad4:	e9c2 3105 	strd	r3, r1, [r2, #20]
   15ad8:	2303      	movs	r3, #3
   15ada:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15ade:	f842 3f10 	str.w	r3, [r2, #16]!
   15ae2:	f016 fe1d 	bl	2c720 <z_log_msg_static_create.constprop.0>
   15ae6:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   15ae8:	e7df      	b.n	15aaa <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   15aea:	6843      	ldr	r3, [r0, #4]
   15aec:	4621      	mov	r1, r4
   15aee:	695b      	ldr	r3, [r3, #20]
   15af0:	4798      	blx	r3
   15af2:	e7da      	b.n	15aaa <bt_l2cap_recv+0x26>
   15af4:	0003588f 	.word	0x0003588f
   15af8:	00031504 	.word	0x00031504
   15afc:	000358ac 	.word	0x000358ac

00015b00 <bt_l2cap_update_conn_param>:
{
   15b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   15b02:	4b17      	ldr	r3, [pc, #92]	; (15b60 <bt_l2cap_update_conn_param+0x60>)
{
   15b04:	460e      	mov	r6, r1
	ident++;
   15b06:	7819      	ldrb	r1, [r3, #0]
{
   15b08:	4605      	mov	r5, r0
	ident++;
   15b0a:	3101      	adds	r1, #1
   15b0c:	b2c9      	uxtb	r1, r1
   15b0e:	2901      	cmp	r1, #1
   15b10:	bf38      	it	cc
   15b12:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15b14:	2208      	movs	r2, #8
   15b16:	2012      	movs	r0, #18
	ident++;
   15b18:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15b1a:	f016 fe04 	bl	2c726 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15b1e:	4604      	mov	r4, r0
   15b20:	b1d0      	cbz	r0, 15b58 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   15b22:	2108      	movs	r1, #8
   15b24:	300c      	adds	r0, #12
   15b26:	f005 fe51 	bl	1b7cc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15b2a:	8833      	ldrh	r3, [r6, #0]
   15b2c:	4622      	mov	r2, r4
   15b2e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15b30:	8873      	ldrh	r3, [r6, #2]
   15b32:	2105      	movs	r1, #5
   15b34:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15b36:	88b3      	ldrh	r3, [r6, #4]
   15b38:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15b3a:	88f3      	ldrh	r3, [r6, #6]
   15b3c:	80c3      	strh	r3, [r0, #6]
   15b3e:	2300      	movs	r3, #0
   15b40:	4628      	mov	r0, r5
   15b42:	9300      	str	r3, [sp, #0]
   15b44:	f016 fe58 	bl	2c7f8 <bt_l2cap_send_cb>
	if (err) {
   15b48:	4605      	mov	r5, r0
   15b4a:	b110      	cbz	r0, 15b52 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   15b4c:	4620      	mov	r0, r4
   15b4e:	f005 fd1b 	bl	1b588 <net_buf_unref>
}
   15b52:	4628      	mov	r0, r5
   15b54:	b002      	add	sp, #8
   15b56:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15b58:	f06f 050b 	mvn.w	r5, #11
   15b5c:	e7f9      	b.n	15b52 <bt_l2cap_update_conn_param+0x52>
   15b5e:	bf00      	nop
   15b60:	200223f7 	.word	0x200223f7

00015b64 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   15b64:	2823      	cmp	r0, #35	; 0x23
   15b66:	d81f      	bhi.n	15ba8 <att_op_get_type+0x44>
   15b68:	281a      	cmp	r0, #26
   15b6a:	d804      	bhi.n	15b76 <att_op_get_type+0x12>
   15b6c:	1e43      	subs	r3, r0, #1
   15b6e:	2b18      	cmp	r3, #24
   15b70:	d90e      	bls.n	15b90 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   15b72:	2006      	movs	r0, #6
   15b74:	4770      	bx	lr
	switch (op) {
   15b76:	f1a0 031b 	sub.w	r3, r0, #27
   15b7a:	2b08      	cmp	r3, #8
   15b7c:	d81e      	bhi.n	15bbc <att_op_get_type+0x58>
   15b7e:	e8df f003 	tbb	[pc, r3]
   15b82:	1d05      	.short	0x1d05
   15b84:	191d231b 	.word	0x191d231b
   15b88:	1d25      	.short	0x1d25
   15b8a:	05          	.byte	0x05
   15b8b:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   15b8c:	2003      	movs	r0, #3
   15b8e:	4770      	bx	lr
   15b90:	2301      	movs	r3, #1
	switch (op) {
   15b92:	4a0f      	ldr	r2, [pc, #60]	; (15bd0 <att_op_get_type+0x6c>)
   15b94:	4083      	lsls	r3, r0
   15b96:	401a      	ands	r2, r3
   15b98:	b9c2      	cbnz	r2, 15bcc <att_op_get_type+0x68>
   15b9a:	4a0e      	ldr	r2, [pc, #56]	; (15bd4 <att_op_get_type+0x70>)
   15b9c:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   15b9e:	2a00      	cmp	r2, #0
   15ba0:	bf14      	ite	ne
   15ba2:	2001      	movne	r0, #1
   15ba4:	2006      	moveq	r0, #6
   15ba6:	4770      	bx	lr
	switch (op) {
   15ba8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   15bac:	2b52      	cmp	r3, #82	; 0x52
   15bae:	d105      	bne.n	15bbc <att_op_get_type+0x58>
		return ATT_COMMAND;
   15bb0:	2000      	movs	r0, #0
}
   15bb2:	4770      	bx	lr
		return ATT_REQUEST;
   15bb4:	2001      	movs	r0, #1
   15bb6:	4770      	bx	lr
		return ATT_INDICATION;
   15bb8:	2005      	movs	r0, #5
   15bba:	4770      	bx	lr
		return ATT_COMMAND;
   15bbc:	f010 0f40 	tst.w	r0, #64	; 0x40
   15bc0:	bf0c      	ite	eq
   15bc2:	2006      	moveq	r0, #6
   15bc4:	2000      	movne	r0, #0
   15bc6:	4770      	bx	lr
	switch (op) {
   15bc8:	2004      	movs	r0, #4
   15bca:	4770      	bx	lr
		return ATT_RESPONSE;
   15bcc:	2002      	movs	r0, #2
   15bce:	4770      	bx	lr
   15bd0:	028aaaaa 	.word	0x028aaaaa
   15bd4:	01455554 	.word	0x01455554

00015bd8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15bd8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15bda:	3804      	subs	r0, #4
   15bdc:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15bde:	a901      	add	r1, sp, #4
   15be0:	4802      	ldr	r0, [pc, #8]	; (15bec <bt_att_released+0x14>)
   15be2:	f00f f8b9 	bl	24d58 <k_mem_slab_free>
}
   15be6:	b003      	add	sp, #12
   15be8:	f85d fb04 	ldr.w	pc, [sp], #4
   15bec:	20008a7c 	.word	0x20008a7c

00015bf0 <tx_meta_data_free>:
{
   15bf0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   15bf2:	4604      	mov	r4, r0
   15bf4:	b948      	cbnz	r0, 15c0a <tx_meta_data_free+0x1a>
   15bf6:	490a      	ldr	r1, [pc, #40]	; (15c20 <tx_meta_data_free+0x30>)
   15bf8:	480a      	ldr	r0, [pc, #40]	; (15c24 <tx_meta_data_free+0x34>)
   15bfa:	23a6      	movs	r3, #166	; 0xa6
   15bfc:	4a0a      	ldr	r2, [pc, #40]	; (15c28 <tx_meta_data_free+0x38>)
   15bfe:	f014 fd5c 	bl	2a6ba <assert_print>
   15c02:	21a6      	movs	r1, #166	; 0xa6
   15c04:	4808      	ldr	r0, [pc, #32]	; (15c28 <tx_meta_data_free+0x38>)
   15c06:	f014 fd51 	bl	2a6ac <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   15c0a:	2100      	movs	r1, #0
   15c0c:	2214      	movs	r2, #20
   15c0e:	f01a fce8 	bl	305e2 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   15c12:	4621      	mov	r1, r4
}
   15c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   15c18:	4804      	ldr	r0, [pc, #16]	; (15c2c <tx_meta_data_free+0x3c>)
   15c1a:	f01a bad1 	b.w	301c0 <k_queue_append>
   15c1e:	bf00      	nop
   15c20:	00035439 	.word	0x00035439
   15c24:	00032659 	.word	0x00032659
   15c28:	000358e1 	.word	0x000358e1
   15c2c:	20008c9c 	.word	0x20008c9c

00015c30 <find_type_cb>:
{
   15c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c34:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   15c36:	f8d2 a000 	ldr.w	sl, [r2]
{
   15c3a:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   15c3c:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c40:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   15c42:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c44:	f642 0301 	movw	r3, #10241	; 0x2801
{
   15c48:	4680      	mov	r8, r0
   15c4a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c4c:	6800      	ldr	r0, [r0, #0]
   15c4e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   15c52:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15c54:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   15c58:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c5a:	f016 f91a 	bl	2be92 <bt_uuid_cmp>
   15c5e:	2800      	cmp	r0, #0
   15c60:	d070      	beq.n	15d44 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   15c62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15c66:	f8d8 0000 	ldr.w	r0, [r8]
   15c6a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   15c6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15c70:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   15c74:	f016 f90d 	bl	2be92 <bt_uuid_cmp>
   15c78:	b138      	cbz	r0, 15c8a <find_type_cb+0x5a>
		if (data->group &&
   15c7a:	68a3      	ldr	r3, [r4, #8]
   15c7c:	b11b      	cbz	r3, 15c86 <find_type_cb+0x56>
   15c7e:	885a      	ldrh	r2, [r3, #2]
   15c80:	42b2      	cmp	r2, r6
   15c82:	d200      	bcs.n	15c86 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   15c84:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15c86:	2001      	movs	r0, #1
   15c88:	e009      	b.n	15c9e <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   15c8a:	6861      	ldr	r1, [r4, #4]
   15c8c:	4608      	mov	r0, r1
   15c8e:	f016 fde9 	bl	2c864 <net_buf_frags_len>
   15c92:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15c96:	1a1b      	subs	r3, r3, r0
   15c98:	2b03      	cmp	r3, #3
   15c9a:	d804      	bhi.n	15ca6 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   15c9c:	2000      	movs	r0, #0
}
   15c9e:	3744      	adds	r7, #68	; 0x44
   15ca0:	46bd      	mov	sp, r7
   15ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   15ca6:	4608      	mov	r0, r1
   15ca8:	f005 fcca 	bl	1b640 <net_buf_frag_last>
   15cac:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   15cae:	6860      	ldr	r0, [r4, #4]
   15cb0:	f016 fdd8 	bl	2c864 <net_buf_frags_len>
   15cb4:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   15cb8:	f105 090c 	add.w	r9, r5, #12
   15cbc:	ebab 0b00 	sub.w	fp, fp, r0
   15cc0:	4648      	mov	r0, r9
   15cc2:	f018 f9a0 	bl	2e006 <net_buf_simple_tailroom>
   15cc6:	4558      	cmp	r0, fp
   15cc8:	d93f      	bls.n	15d4a <find_type_cb+0x11a>
   15cca:	6860      	ldr	r0, [r4, #4]
   15ccc:	f016 fdca 	bl	2c864 <net_buf_frags_len>
   15cd0:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15cd4:	1a18      	subs	r0, r3, r0
	if (!len) {
   15cd6:	b970      	cbnz	r0, 15cf6 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   15cd8:	6863      	ldr	r3, [r4, #4]
   15cda:	7a98      	ldrb	r0, [r3, #10]
   15cdc:	f005 fa1a 	bl	1b114 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15ce0:	2200      	movs	r2, #0
   15ce2:	2300      	movs	r3, #0
   15ce4:	f018 f975 	bl	2dfd2 <net_buf_alloc_fixed>
		if (!frag) {
   15ce8:	4605      	mov	r5, r0
   15cea:	2800      	cmp	r0, #0
   15cec:	d0d6      	beq.n	15c9c <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   15cee:	4601      	mov	r1, r0
   15cf0:	6860      	ldr	r0, [r4, #4]
   15cf2:	f005 fceb 	bl	1b6cc <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   15cf6:	2300      	movs	r3, #0
   15cf8:	9300      	str	r3, [sp, #0]
   15cfa:	4641      	mov	r1, r8
   15cfc:	f8d8 a004 	ldr.w	sl, [r8, #4]
   15d00:	2310      	movs	r3, #16
   15d02:	6878      	ldr	r0, [r7, #4]
   15d04:	f107 0208 	add.w	r2, r7, #8
   15d08:	47d0      	blx	sl
	if (read < 0) {
   15d0a:	f1b0 0800 	subs.w	r8, r0, #0
   15d0e:	db19      	blt.n	15d44 <find_type_cb+0x114>
	if (read != data->value_len) {
   15d10:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15d12:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   15d14:	4542      	cmp	r2, r8
   15d16:	d03f      	beq.n	15d98 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15d18:	4601      	mov	r1, r0
   15d1a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15d1e:	f016 f8e6 	bl	2beee <bt_uuid_create>
   15d22:	b9b0      	cbnz	r0, 15d52 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   15d24:	466d      	mov	r5, sp
   15d26:	b088      	sub	sp, #32
   15d28:	7c23      	ldrb	r3, [r4, #16]
   15d2a:	aa02      	add	r2, sp, #8
   15d2c:	491d      	ldr	r1, [pc, #116]	; (15da4 <find_type_cb+0x174>)
   15d2e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   15d32:	2303      	movs	r3, #3
   15d34:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15d38:	481b      	ldr	r0, [pc, #108]	; (15da8 <find_type_cb+0x178>)
   15d3a:	f842 3f10 	str.w	r3, [r2, #16]!
   15d3e:	f016 fe80 	bl	2ca42 <z_log_msg_static_create.constprop.0>
   15d42:	46ad      	mov	sp, r5
	data->group = NULL;
   15d44:	2300      	movs	r3, #0
   15d46:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   15d48:	e79d      	b.n	15c86 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   15d4a:	4648      	mov	r0, r9
   15d4c:	f018 f95b 	bl	2e006 <net_buf_simple_tailroom>
   15d50:	e7c1      	b.n	15cd6 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   15d52:	fa5f f288 	uxtb.w	r2, r8
   15d56:	f107 0108 	add.w	r1, r7, #8
   15d5a:	f107 0018 	add.w	r0, r7, #24
   15d5e:	f016 f8c6 	bl	2beee <bt_uuid_create>
   15d62:	b930      	cbnz	r0, 15d72 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   15d64:	466d      	mov	r5, sp
   15d66:	b088      	sub	sp, #32
   15d68:	aa02      	add	r2, sp, #8
   15d6a:	4b10      	ldr	r3, [pc, #64]	; (15dac <find_type_cb+0x17c>)
   15d6c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15d70:	e7df      	b.n	15d32 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15d72:	f107 0118 	add.w	r1, r7, #24
   15d76:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15d7a:	f016 f88a 	bl	2be92 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15d7e:	2800      	cmp	r0, #0
   15d80:	d1e0      	bne.n	15d44 <find_type_cb+0x114>
	data->err = 0x00;
   15d82:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   15d84:	2104      	movs	r1, #4
   15d86:	7463      	strb	r3, [r4, #17]
   15d88:	f105 000c 	add.w	r0, r5, #12
   15d8c:	f005 fd1e 	bl	1b7cc <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15d90:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15d92:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15d94:	68a3      	ldr	r3, [r4, #8]
   15d96:	e775      	b.n	15c84 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   15d98:	f107 0108 	add.w	r1, r7, #8
   15d9c:	f01a fbd7 	bl	3054e <memcmp>
   15da0:	e7ed      	b.n	15d7e <find_type_cb+0x14e>
   15da2:	bf00      	nop
   15da4:	00035910 	.word	0x00035910
   15da8:	000314b4 	.word	0x000314b4
   15dac:	0003592f 	.word	0x0003592f

00015db0 <chan_send>:
{
   15db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15db4:	4606      	mov	r6, r0
   15db6:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   15db8:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   15dbc:	68cb      	ldr	r3, [r1, #12]
{
   15dbe:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15dc0:	2102      	movs	r1, #2
   15dc2:	3098      	adds	r0, #152	; 0x98
   15dc4:	f016 fd68 	bl	2c898 <atomic_test_bit>
   15dc8:	2800      	cmp	r0, #0
   15dca:	d053      	beq.n	15e74 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15dcc:	781b      	ldrb	r3, [r3, #0]
   15dce:	2bd2      	cmp	r3, #210	; 0xd2
   15dd0:	d11a      	bne.n	15e08 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   15dd2:	6833      	ldr	r3, [r6, #0]
   15dd4:	4621      	mov	r1, r4
   15dd6:	6818      	ldr	r0, [r3, #0]
   15dd8:	f017 fe0b 	bl	2d9f2 <bt_smp_sign>
		if (err) {
   15ddc:	4605      	mov	r5, r0
   15dde:	b198      	cbz	r0, 15e08 <chan_send+0x58>
			LOG_ERR("Error signing data");
   15de0:	4b26      	ldr	r3, [pc, #152]	; (15e7c <chan_send+0xcc>)
   15de2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15de6:	9307      	str	r3, [sp, #28]
   15de8:	2302      	movs	r3, #2
   15dea:	4825      	ldr	r0, [pc, #148]	; (15e80 <chan_send+0xd0>)
   15dec:	aa06      	add	r2, sp, #24
   15dee:	9306      	str	r3, [sp, #24]
   15df0:	f016 fe27 	bl	2ca42 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   15df4:	69a0      	ldr	r0, [r4, #24]
   15df6:	f7ff fefb 	bl	15bf0 <tx_meta_data_free>
			net_buf_unref(buf);
   15dfa:	4620      	mov	r0, r4
   15dfc:	f005 fbc4 	bl	1b588 <net_buf_unref>
}
   15e00:	4628      	mov	r0, r5
   15e02:	b009      	add	sp, #36	; 0x24
   15e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15e08:	f104 000c 	add.w	r0, r4, #12
   15e0c:	f018 f8f7 	bl	2dffe <net_buf_simple_headroom>
	state->len = buf->len;
   15e10:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   15e14:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15e18:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   15e1a:	4607      	mov	r7, r0
   15e1c:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   15e1e:	68e3      	ldr	r3, [r4, #12]
   15e20:	7818      	ldrb	r0, [r3, #0]
   15e22:	f7ff fe9f 	bl	15b64 <att_op_get_type>
   15e26:	2805      	cmp	r0, #5
   15e28:	4605      	mov	r5, r0
	switch (op_type) {
   15e2a:	d813      	bhi.n	15e54 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15e2c:	4b15      	ldr	r3, [pc, #84]	; (15e84 <chan_send+0xd4>)
   15e2e:	4622      	mov	r2, r4
   15e30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15e34:	2104      	movs	r1, #4
   15e36:	4630      	mov	r0, r6
   15e38:	f8cd 9000 	str.w	r9, [sp]
   15e3c:	f016 fcdc 	bl	2c7f8 <bt_l2cap_send_cb>
	if (err) {
   15e40:	4605      	mov	r5, r0
   15e42:	2800      	cmp	r0, #0
   15e44:	d0dc      	beq.n	15e00 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   15e46:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15e48:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15e4c:	fa13 f787 	uxtah	r7, r3, r7
   15e50:	60e7      	str	r7, [r4, #12]
}
   15e52:	e7d5      	b.n	15e00 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   15e54:	f240 2357 	movw	r3, #599	; 0x257
   15e58:	4a0b      	ldr	r2, [pc, #44]	; (15e88 <chan_send+0xd8>)
   15e5a:	490c      	ldr	r1, [pc, #48]	; (15e8c <chan_send+0xdc>)
   15e5c:	480c      	ldr	r0, [pc, #48]	; (15e90 <chan_send+0xe0>)
   15e5e:	f014 fc2c 	bl	2a6ba <assert_print>
   15e62:	4629      	mov	r1, r5
   15e64:	480b      	ldr	r0, [pc, #44]	; (15e94 <chan_send+0xe4>)
   15e66:	f014 fc28 	bl	2a6ba <assert_print>
   15e6a:	f240 2157 	movw	r1, #599	; 0x257
   15e6e:	4806      	ldr	r0, [pc, #24]	; (15e88 <chan_send+0xd8>)
   15e70:	f014 fc1c 	bl	2a6ac <assert_post_action>
		return -EINVAL;
   15e74:	f06f 0515 	mvn.w	r5, #21
   15e78:	e7c2      	b.n	15e00 <chan_send+0x50>
   15e7a:	bf00      	nop
   15e7c:	0003594e 	.word	0x0003594e
   15e80:	000314b4 	.word	0x000314b4
   15e84:	00031fc0 	.word	0x00031fc0
   15e88:	000358e1 	.word	0x000358e1
   15e8c:	00037b2a 	.word	0x00037b2a
   15e90:	00032659 	.word	0x00032659
   15e94:	00035961 	.word	0x00035961

00015e98 <bt_att_chan_req_send>:
{
   15e98:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   15e9a:	b958      	cbnz	r0, 15eb4 <bt_att_chan_req_send+0x1c>
   15e9c:	4919      	ldr	r1, [pc, #100]	; (15f04 <bt_att_chan_req_send+0x6c>)
   15e9e:	f44f 7346 	mov.w	r3, #792	; 0x318
   15ea2:	4a19      	ldr	r2, [pc, #100]	; (15f08 <bt_att_chan_req_send+0x70>)
   15ea4:	4819      	ldr	r0, [pc, #100]	; (15f0c <bt_att_chan_req_send+0x74>)
   15ea6:	f014 fc08 	bl	2a6ba <assert_print>
   15eaa:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   15eae:	4816      	ldr	r0, [pc, #88]	; (15f08 <bt_att_chan_req_send+0x70>)
   15eb0:	f014 fbfc 	bl	2a6ac <assert_post_action>
   15eb4:	b949      	cbnz	r1, 15eca <bt_att_chan_req_send+0x32>
   15eb6:	4916      	ldr	r1, [pc, #88]	; (15f10 <bt_att_chan_req_send+0x78>)
   15eb8:	f240 3319 	movw	r3, #793	; 0x319
   15ebc:	4a12      	ldr	r2, [pc, #72]	; (15f08 <bt_att_chan_req_send+0x70>)
   15ebe:	4813      	ldr	r0, [pc, #76]	; (15f0c <bt_att_chan_req_send+0x74>)
   15ec0:	f014 fbfb 	bl	2a6ba <assert_print>
   15ec4:	f240 3119 	movw	r1, #793	; 0x319
   15ec8:	e7f1      	b.n	15eae <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   15eca:	684a      	ldr	r2, [r1, #4]
   15ecc:	b94a      	cbnz	r2, 15ee2 <bt_att_chan_req_send+0x4a>
   15ece:	4911      	ldr	r1, [pc, #68]	; (15f14 <bt_att_chan_req_send+0x7c>)
   15ed0:	f240 331a 	movw	r3, #794	; 0x31a
   15ed4:	4a0c      	ldr	r2, [pc, #48]	; (15f08 <bt_att_chan_req_send+0x70>)
   15ed6:	480d      	ldr	r0, [pc, #52]	; (15f0c <bt_att_chan_req_send+0x74>)
   15ed8:	f014 fbef 	bl	2a6ba <assert_print>
   15edc:	f240 311a 	movw	r1, #794	; 0x31a
   15ee0:	e7e5      	b.n	15eae <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   15ee2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   15ee6:	b14b      	cbz	r3, 15efc <bt_att_chan_req_send+0x64>
   15ee8:	490b      	ldr	r1, [pc, #44]	; (15f18 <bt_att_chan_req_send+0x80>)
   15eea:	f240 331b 	movw	r3, #795	; 0x31b
   15eee:	4a06      	ldr	r2, [pc, #24]	; (15f08 <bt_att_chan_req_send+0x70>)
   15ef0:	4806      	ldr	r0, [pc, #24]	; (15f0c <bt_att_chan_req_send+0x74>)
   15ef2:	f014 fbe2 	bl	2a6ba <assert_print>
   15ef6:	f240 311b 	movw	r1, #795	; 0x31b
   15efa:	e7d8      	b.n	15eae <bt_att_chan_req_send+0x16>
}
   15efc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   15f00:	f016 bda2 	b.w	2ca48 <chan_req_send>
   15f04:	0003597a 	.word	0x0003597a
   15f08:	000358e1 	.word	0x000358e1
   15f0c:	00032659 	.word	0x00032659
   15f10:	00035990 	.word	0x00035990
   15f14:	0003597f 	.word	0x0003597f
   15f18:	00035989 	.word	0x00035989

00015f1c <att_get>:
{
   15f1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   15f1e:	7b43      	ldrb	r3, [r0, #13]
   15f20:	2b07      	cmp	r3, #7
   15f22:	d00d      	beq.n	15f40 <att_get+0x24>
		LOG_WRN("Not connected");
   15f24:	4b18      	ldr	r3, [pc, #96]	; (15f88 <att_get+0x6c>)
   15f26:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15f2a:	9305      	str	r3, [sp, #20]
   15f2c:	2302      	movs	r3, #2
   15f2e:	aa04      	add	r2, sp, #16
   15f30:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
   15f32:	4816      	ldr	r0, [pc, #88]	; (15f8c <att_get+0x70>)
   15f34:	f016 fd85 	bl	2ca42 <z_log_msg_static_create.constprop.0>
		return NULL;
   15f38:	2000      	movs	r0, #0
}
   15f3a:	b007      	add	sp, #28
   15f3c:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   15f40:	2104      	movs	r1, #4
   15f42:	f016 fc7b 	bl	2c83c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15f46:	4603      	mov	r3, r0
   15f48:	b938      	cbnz	r0, 15f5a <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   15f4a:	4b11      	ldr	r3, [pc, #68]	; (15f90 <att_get+0x74>)
   15f4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15f50:	9305      	str	r3, [sp, #20]
   15f52:	2302      	movs	r3, #2
   15f54:	aa04      	add	r2, sp, #16
   15f56:	9304      	str	r3, [sp, #16]
   15f58:	e7eb      	b.n	15f32 <att_get+0x16>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   15f5a:	2102      	movs	r1, #2
   15f5c:	3094      	adds	r0, #148	; 0x94
   15f5e:	f016 fc9b 	bl	2c898 <atomic_test_bit>
   15f62:	b970      	cbnz	r0, 15f82 <att_get+0x66>
   15f64:	490b      	ldr	r1, [pc, #44]	; (15f94 <att_get+0x78>)
   15f66:	f640 332a 	movw	r3, #2858	; 0xb2a
   15f6a:	4a0b      	ldr	r2, [pc, #44]	; (15f98 <att_get+0x7c>)
   15f6c:	480b      	ldr	r0, [pc, #44]	; (15f9c <att_get+0x80>)
   15f6e:	f014 fba4 	bl	2a6ba <assert_print>
   15f72:	480b      	ldr	r0, [pc, #44]	; (15fa0 <att_get+0x84>)
   15f74:	f014 fba1 	bl	2a6ba <assert_print>
   15f78:	f640 312a 	movw	r1, #2858	; 0xb2a
   15f7c:	4806      	ldr	r0, [pc, #24]	; (15f98 <att_get+0x7c>)
   15f7e:	f014 fb95 	bl	2a6ac <assert_post_action>
	return att_chan->att;
   15f82:	f853 0c04 	ldr.w	r0, [r3, #-4]
   15f86:	e7d8      	b.n	15f3a <att_get+0x1e>
   15f88:	00035994 	.word	0x00035994
   15f8c:	000314b4 	.word	0x000314b4
   15f90:	000359a2 	.word	0x000359a2
   15f94:	000359bd 	.word	0x000359bd
   15f98:	000358e1 	.word	0x000358e1
   15f9c:	00032659 	.word	0x00032659
   15fa0:	000359ed 	.word	0x000359ed

00015fa4 <bt_att_connected>:
{
   15fa4:	b510      	push	{r4, lr}
   15fa6:	4604      	mov	r4, r0
   15fa8:	f100 0394 	add.w	r3, r0, #148	; 0x94
   15fac:	e8d3 1fef 	ldaex	r1, [r3]
   15fb0:	f041 0104 	orr.w	r1, r1, #4
   15fb4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15fb8:	2a00      	cmp	r2, #0
   15fba:	d1f7      	bne.n	15fac <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15fbc:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   15fbe:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15fc0:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15fc2:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   15fc4:	f016 fcaa 	bl	2c91c <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15fc8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   15fcc:	4903      	ldr	r1, [pc, #12]	; (15fdc <bt_att_connected+0x38>)
   15fce:	f00f ff7f 	bl	25ed0 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   15fd2:	6820      	ldr	r0, [r4, #0]
}
   15fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   15fd8:	f002 bb54 	b.w	18684 <bt_gatt_connected>
   15fdc:	00016cad 	.word	0x00016cad

00015fe0 <read_group_cb>:
{
   15fe0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15fe4:	f04f 0800 	mov.w	r8, #0
   15fe8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   15fec:	4605      	mov	r5, r0
   15fee:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15ff0:	6800      	ldr	r0, [r0, #0]
   15ff2:	a902      	add	r1, sp, #8
{
   15ff4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   15ff6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15ff8:	f88d 8008 	strb.w	r8, [sp, #8]
   15ffc:	f8ad 300a 	strh.w	r3, [sp, #10]
   16000:	f015 ff47 	bl	2be92 <bt_uuid_cmp>
   16004:	b1a0      	cbz	r0, 16030 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16006:	f642 0301 	movw	r3, #10241	; 0x2801
   1600a:	6828      	ldr	r0, [r5, #0]
   1600c:	a903      	add	r1, sp, #12
   1600e:	f88d 800c 	strb.w	r8, [sp, #12]
   16012:	f8ad 300e 	strh.w	r3, [sp, #14]
   16016:	f015 ff3c 	bl	2be92 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1601a:	b148      	cbz	r0, 16030 <read_group_cb+0x50>
		if (data->group &&
   1601c:	6923      	ldr	r3, [r4, #16]
   1601e:	b11b      	cbz	r3, 16028 <read_group_cb+0x48>
   16020:	885a      	ldrh	r2, [r3, #2]
   16022:	42b2      	cmp	r2, r6
   16024:	d200      	bcs.n	16028 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16026:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16028:	2001      	movs	r0, #1
}
   1602a:	b004      	add	sp, #16
   1602c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16030:	6861      	ldr	r1, [r4, #4]
   16032:	6828      	ldr	r0, [r5, #0]
   16034:	f015 ff2d 	bl	2be92 <bt_uuid_cmp>
   16038:	b110      	cbz	r0, 16040 <read_group_cb+0x60>
		data->group = NULL;
   1603a:	2300      	movs	r3, #0
   1603c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1603e:	e7f3      	b.n	16028 <read_group_cb+0x48>
	if (data->rsp->len &&
   16040:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16042:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   16044:	781a      	ldrb	r2, [r3, #0]
   16046:	b132      	cbz	r2, 16056 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16048:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1604a:	8a01      	ldrh	r1, [r0, #16]
   1604c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1604e:	4293      	cmp	r3, r2
   16050:	da01      	bge.n	16056 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   16052:	2000      	movs	r0, #0
   16054:	e7e9      	b.n	1602a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   16056:	2104      	movs	r1, #4
   16058:	300c      	adds	r0, #12
   1605a:	f005 fbb7 	bl	1b7cc <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1605e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16060:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16062:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16064:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   16066:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16068:	4b07      	ldr	r3, [pc, #28]	; (16088 <read_group_cb+0xa8>)
   1606a:	9401      	str	r4, [sp, #4]
   1606c:	9300      	str	r3, [sp, #0]
   1606e:	4638      	mov	r0, r7
   16070:	2300      	movs	r3, #0
   16072:	68a2      	ldr	r2, [r4, #8]
   16074:	f016 fd29 	bl	2caca <att_chan_read>
	if (read < 0) {
   16078:	2800      	cmp	r0, #0
   1607a:	dbea      	blt.n	16052 <read_group_cb+0x72>
	if (!data->group) {
   1607c:	6920      	ldr	r0, [r4, #16]
   1607e:	3800      	subs	r0, #0
   16080:	bf18      	it	ne
   16082:	2001      	movne	r0, #1
   16084:	e7d1      	b.n	1602a <read_group_cb+0x4a>
   16086:	bf00      	nop
   16088:	0002c983 	.word	0x0002c983

0001608c <read_type_cb>:
{
   1608c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16090:	6817      	ldr	r7, [r2, #0]
{
   16092:	4605      	mov	r5, r0
   16094:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16096:	6800      	ldr	r0, [r0, #0]
   16098:	6851      	ldr	r1, [r2, #4]
{
   1609a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1609c:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1609e:	f015 fef8 	bl	2be92 <bt_uuid_cmp>
   160a2:	4681      	mov	r9, r0
   160a4:	2800      	cmp	r0, #0
   160a6:	d13c      	bne.n	16122 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   160a8:	4630      	mov	r0, r6
   160aa:	2295      	movs	r2, #149	; 0x95
   160ac:	4629      	mov	r1, r5
   160ae:	f017 f9d0 	bl	2d452 <bt_gatt_check_perm>
   160b2:	4606      	mov	r6, r0
   160b4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   160b6:	b140      	cbz	r0, 160ca <read_type_cb+0x3e>
		if (data->rsp->len) {
   160b8:	68e3      	ldr	r3, [r4, #12]
   160ba:	781b      	ldrb	r3, [r3, #0]
   160bc:	b10b      	cbz	r3, 160c2 <read_type_cb+0x36>
			data->err = 0x00;
   160be:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   160c2:	2000      	movs	r0, #0
}
   160c4:	b003      	add	sp, #12
   160c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   160ca:	68a0      	ldr	r0, [r4, #8]
   160cc:	f005 fab8 	bl	1b640 <net_buf_frag_last>
   160d0:	2102      	movs	r1, #2
   160d2:	300c      	adds	r0, #12
   160d4:	f005 fb7a 	bl	1b7cc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   160d8:	4b13      	ldr	r3, [pc, #76]	; (16128 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   160da:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   160dc:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   160e0:	9300      	str	r3, [sp, #0]
   160e2:	9401      	str	r4, [sp, #4]
   160e4:	4633      	mov	r3, r6
   160e6:	4629      	mov	r1, r5
   160e8:	4638      	mov	r0, r7
   160ea:	68a2      	ldr	r2, [r4, #8]
   160ec:	f016 fced 	bl	2caca <att_chan_read>
	if (read < 0) {
   160f0:	2800      	cmp	r0, #0
   160f2:	da07      	bge.n	16104 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   160f4:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   160f8:	bf32      	itee	cc
   160fa:	200e      	movcc	r0, #14
		return -err;
   160fc:	4240      	negcs	r0, r0
   160fe:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   16100:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16102:	e7de      	b.n	160c2 <read_type_cb+0x36>
	if (!data->item) {
   16104:	6923      	ldr	r3, [r4, #16]
   16106:	2b00      	cmp	r3, #0
   16108:	d0db      	beq.n	160c2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1610a:	68a0      	ldr	r0, [r4, #8]
   1610c:	f016 fbaa 	bl	2c864 <net_buf_frags_len>
   16110:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   16112:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16114:	68e3      	ldr	r3, [r4, #12]
   16116:	781b      	ldrb	r3, [r3, #0]
   16118:	4298      	cmp	r0, r3
   1611a:	bf94      	ite	ls
   1611c:	2000      	movls	r0, #0
   1611e:	2001      	movhi	r0, #1
   16120:	e7d0      	b.n	160c4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16122:	2001      	movs	r0, #1
   16124:	e7ce      	b.n	160c4 <read_type_cb+0x38>
   16126:	bf00      	nop
   16128:	0002c875 	.word	0x0002c875

0001612c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1612c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16130:	b082      	sub	sp, #8
   16132:	af00      	add	r7, sp, #0
   16134:	4604      	mov	r4, r0
   16136:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16138:	2200      	movs	r2, #0
   1613a:	2300      	movs	r3, #0
   1613c:	4639      	mov	r1, r7
   1613e:	483a      	ldr	r0, [pc, #232]	; (16228 <bt_att_accept+0xfc>)
   16140:	f00e fda0 	bl	24c84 <k_mem_slab_alloc>
   16144:	4605      	mov	r5, r0
   16146:	b1a8      	cbz	r0, 16174 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   16148:	466d      	mov	r5, sp
   1614a:	b088      	sub	sp, #32
   1614c:	466a      	mov	r2, sp
   1614e:	4b37      	ldr	r3, [pc, #220]	; (1622c <bt_att_accept+0x100>)
   16150:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16154:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16158:	2303      	movs	r3, #3
   1615a:	4835      	ldr	r0, [pc, #212]	; (16230 <bt_att_accept+0x104>)
   1615c:	f842 3f10 	str.w	r3, [r2, #16]!
   16160:	f016 fc6f 	bl	2ca42 <z_log_msg_static_create.constprop.0>
   16164:	46ad      	mov	sp, r5
		return -ENOMEM;
   16166:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1616a:	4628      	mov	r0, r5
   1616c:	3708      	adds	r7, #8
   1616e:	46bd      	mov	sp, r7
   16170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   16174:	f011 f950 	bl	27418 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   16178:	4b2e      	ldr	r3, [pc, #184]	; (16234 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   1617a:	f8d7 8000 	ldr.w	r8, [r7]
   1617e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   16180:	6018      	str	r0, [r3, #0]
   16182:	222c      	movs	r2, #44	; 0x2c
   16184:	f108 0004 	add.w	r0, r8, #4
   16188:	f01a fa2b 	bl	305e2 <memset>
	att->conn = conn;
   1618c:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   16190:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16192:	2200      	movs	r2, #0
	list->tail = NULL;
   16194:	e9c4 5501 	strd	r5, r5, [r4, #4]
   16198:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   1619c:	2300      	movs	r3, #0
   1619e:	4826      	ldr	r0, [pc, #152]	; (16238 <bt_att_accept+0x10c>)
   161a0:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   161a2:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   161a4:	f00e fd6e 	bl	24c84 <k_mem_slab_alloc>
   161a8:	4605      	mov	r5, r0
   161aa:	b180      	cbz	r0, 161ce <bt_att_accept+0xa2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   161ac:	6823      	ldr	r3, [r4, #0]
   161ae:	466c      	mov	r4, sp
   161b0:	b088      	sub	sp, #32
   161b2:	466a      	mov	r2, sp
   161b4:	4921      	ldr	r1, [pc, #132]	; (1623c <bt_att_accept+0x110>)
   161b6:	481e      	ldr	r0, [pc, #120]	; (16230 <bt_att_accept+0x104>)
   161b8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   161bc:	2303      	movs	r3, #3
   161be:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   161c2:	f842 3f10 	str.w	r3, [r2, #16]!
   161c6:	f016 fc3c 	bl	2ca42 <z_log_msg_static_create.constprop.0>
   161ca:	46a5      	mov	sp, r4
	if (!chan) {
   161cc:	e7cb      	b.n	16166 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   161ce:	687b      	ldr	r3, [r7, #4]
   161d0:	4601      	mov	r1, r0
   161d2:	22f8      	movs	r2, #248	; 0xf8
   161d4:	4618      	mov	r0, r3
   161d6:	f01a fa04 	bl	305e2 <memset>
	chan->chan.chan.ops = &ops;
   161da:	4a19      	ldr	r2, [pc, #100]	; (16240 <bt_att_accept+0x114>)
   161dc:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   161de:	30a0      	adds	r0, #160	; 0xa0
   161e0:	f019 ffe1 	bl	301a6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   161e4:	687b      	ldr	r3, [r7, #4]
   161e6:	3398      	adds	r3, #152	; 0x98
   161e8:	e8d3 2fef 	ldaex	r2, [r3]
   161ec:	e8c3 5fe1 	stlex	r1, r5, [r3]
   161f0:	2900      	cmp	r1, #0
   161f2:	d1f9      	bne.n	161e8 <bt_att_accept+0xbc>
	chan->att = att;
   161f4:	687b      	ldr	r3, [r7, #4]
   161f6:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   161f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   161fa:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   161fe:	b91b      	cbnz	r3, 16208 <bt_att_accept+0xdc>
   16200:	f104 000c 	add.w	r0, r4, #12
   16204:	f019 ffcf 	bl	301a6 <z_impl_k_queue_init>
	return list->head;
   16208:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1620a:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	parent->next = child;
   1620e:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   16212:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   16214:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   16216:	b902      	cbnz	r2, 1621a <bt_att_accept+0xee>
	list->tail = node;
   16218:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   1621a:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1621c:	2b00      	cmp	r3, #0
   1621e:	d0a2      	beq.n	16166 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   16220:	3304      	adds	r3, #4
   16222:	6033      	str	r3, [r6, #0]
	return 0;
   16224:	e7a1      	b.n	1616a <bt_att_accept+0x3e>
   16226:	bf00      	nop
   16228:	20008a5c 	.word	0x20008a5c
   1622c:	00035a09 	.word	0x00035a09
   16230:	000314b4 	.word	0x000314b4
   16234:	200216c0 	.word	0x200216c0
   16238:	20008a7c 	.word	0x20008a7c
   1623c:	00035a2e 	.word	0x00035a2e
   16240:	200084e4 	.word	0x200084e4

00016244 <bt_att_chan_create_pdu>:
{
   16244:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   16248:	b086      	sub	sp, #24
   1624a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1624c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1624e:	1c53      	adds	r3, r2, #1
   16250:	428b      	cmp	r3, r1
{
   16252:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16254:	d915      	bls.n	16282 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   16256:	466c      	mov	r4, sp
   16258:	b088      	sub	sp, #32
   1625a:	466a      	mov	r2, sp
   1625c:	4829      	ldr	r0, [pc, #164]	; (16304 <bt_att_chan_create_pdu+0xc0>)
   1625e:	61d3      	str	r3, [r2, #28]
   16260:	2304      	movs	r3, #4
   16262:	e9c2 0105 	strd	r0, r1, [r2, #20]
   16266:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1626a:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1626e:	4826      	ldr	r0, [pc, #152]	; (16308 <bt_att_chan_create_pdu+0xc4>)
   16270:	f016 fbe7 	bl	2ca42 <z_log_msg_static_create.constprop.0>
   16274:	46a5      	mov	sp, r4
		return NULL;
   16276:	2400      	movs	r4, #0
}
   16278:	4620      	mov	r0, r4
   1627a:	3718      	adds	r7, #24
   1627c:	46bd      	mov	sp, r7
   1627e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   16282:	4628      	mov	r0, r5
   16284:	f7ff fc6e 	bl	15b64 <att_op_get_type>
   16288:	2802      	cmp	r0, #2
   1628a:	d019      	beq.n	162c0 <bt_att_chan_create_pdu+0x7c>
   1628c:	2804      	cmp	r0, #4
   1628e:	d017      	beq.n	162c0 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   16290:	f04f 38ff 	mov.w	r8, #4294967295
   16294:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   16298:	2100      	movs	r1, #0
   1629a:	4642      	mov	r2, r8
   1629c:	464b      	mov	r3, r9
   1629e:	4608      	mov	r0, r1
   162a0:	f016 faa7 	bl	2c7f2 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   162a4:	4604      	mov	r4, r0
   162a6:	b980      	cbnz	r0, 162ca <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   162a8:	466c      	mov	r4, sp
   162aa:	b088      	sub	sp, #32
   162ac:	466a      	mov	r2, sp
   162ae:	4b17      	ldr	r3, [pc, #92]	; (1630c <bt_att_chan_create_pdu+0xc8>)
   162b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   162b4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   162b8:	2303      	movs	r3, #3
   162ba:	f842 3f10 	str.w	r3, [r2, #16]!
   162be:	e7d6      	b.n	1626e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   162c0:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   162c4:	f04f 0900 	mov.w	r9, #0
   162c8:	e7e6      	b.n	16298 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   162ca:	4811      	ldr	r0, [pc, #68]	; (16310 <bt_att_chan_create_pdu+0xcc>)
   162cc:	4642      	mov	r2, r8
   162ce:	464b      	mov	r3, r9
   162d0:	f00f f910 	bl	254f4 <z_impl_k_queue_get>
	if (!data) {
   162d4:	b970      	cbnz	r0, 162f4 <bt_att_chan_create_pdu+0xb0>
		LOG_WRN("Unable to allocate ATT TX meta");
   162d6:	4b0f      	ldr	r3, [pc, #60]	; (16314 <bt_att_chan_create_pdu+0xd0>)
   162d8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   162dc:	617b      	str	r3, [r7, #20]
   162de:	2302      	movs	r3, #2
   162e0:	4809      	ldr	r0, [pc, #36]	; (16308 <bt_att_chan_create_pdu+0xc4>)
   162e2:	613b      	str	r3, [r7, #16]
   162e4:	f107 0210 	add.w	r2, r7, #16
   162e8:	f016 fbab 	bl	2ca42 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   162ec:	4620      	mov	r0, r4
   162ee:	f005 f94b 	bl	1b588 <net_buf_unref>
		return NULL;
   162f2:	e7c0      	b.n	16276 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   162f4:	61a0      	str	r0, [r4, #24]
   162f6:	2101      	movs	r1, #1
   162f8:	f104 000c 	add.w	r0, r4, #12
   162fc:	f005 fa66 	bl	1b7cc <net_buf_simple_add>
	hdr->code = op;
   16300:	7005      	strb	r5, [r0, #0]
	return buf;
   16302:	e7b9      	b.n	16278 <bt_att_chan_create_pdu+0x34>
   16304:	00035a53 	.word	0x00035a53
   16308:	000314b4 	.word	0x000314b4
   1630c:	00035744 	.word	0x00035744
   16310:	20008c9c 	.word	0x20008c9c
   16314:	00035a78 	.word	0x00035a78

00016318 <bt_att_recv>:
{
   16318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1631c:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1631e:	8a0b      	ldrh	r3, [r1, #16]
{
   16320:	4682      	mov	sl, r0
   16322:	460c      	mov	r4, r1
   16324:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   16326:	b97b      	cbnz	r3, 16348 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   16328:	4b4c      	ldr	r3, [pc, #304]	; (1645c <bt_att_recv+0x144>)
   1632a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1632e:	617b      	str	r3, [r7, #20]
   16330:	2302      	movs	r3, #2
   16332:	f107 0210 	add.w	r2, r7, #16
   16336:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   16338:	4849      	ldr	r0, [pc, #292]	; (16460 <bt_att_recv+0x148>)
   1633a:	f016 fb82 	bl	2ca42 <z_log_msg_static_create.constprop.0>
}
   1633e:	2000      	movs	r0, #0
   16340:	371c      	adds	r7, #28
   16342:	46bd      	mov	sp, r7
   16344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16348:	2101      	movs	r1, #1
   1634a:	f104 000c 	add.w	r0, r4, #12
   1634e:	f005 fa1f 	bl	1b790 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16352:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   16356:	4605      	mov	r5, r0
   16358:	2b00      	cmp	r3, #0
   1635a:	d0f0      	beq.n	1633e <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1635c:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1635e:	7801      	ldrb	r1, [r0, #0]
   16360:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16464 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16364:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   16368:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   1636c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   16370:	4288      	cmp	r0, r1
   16372:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   16376:	d114      	bne.n	163a2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   16378:	f892 9002 	ldrb.w	r9, [r2, #2]
   1637c:	f1b9 0f01 	cmp.w	r9, #1
   16380:	d131      	bne.n	163e6 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16382:	2100      	movs	r1, #0
   16384:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   16388:	f016 fc45 	bl	2cc16 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1638c:	2800      	cmp	r0, #0
   1638e:	d035      	beq.n	163fc <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   16390:	4b35      	ldr	r3, [pc, #212]	; (16468 <bt_att_recv+0x150>)
   16392:	617b      	str	r3, [r7, #20]
   16394:	2302      	movs	r3, #2
   16396:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1639a:	613b      	str	r3, [r7, #16]
   1639c:	f107 0210 	add.w	r2, r7, #16
   163a0:	e7ca      	b.n	16338 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   163a2:	3301      	adds	r3, #1
   163a4:	2b0e      	cmp	r3, #14
   163a6:	d1df      	bne.n	16368 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   163a8:	466c      	mov	r4, sp
   163aa:	b088      	sub	sp, #32
   163ac:	466a      	mov	r2, sp
   163ae:	4b2f      	ldr	r3, [pc, #188]	; (1646c <bt_att_recv+0x154>)
   163b0:	482b      	ldr	r0, [pc, #172]	; (16460 <bt_att_recv+0x148>)
   163b2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   163b6:	2303      	movs	r3, #3
   163b8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   163bc:	f842 3f10 	str.w	r3, [r2, #16]!
   163c0:	f016 fb3f 	bl	2ca42 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   163c4:	7829      	ldrb	r1, [r5, #0]
   163c6:	46a5      	mov	sp, r4
   163c8:	4608      	mov	r0, r1
   163ca:	f7ff fbcb 	bl	15b64 <att_op_get_type>
   163ce:	2800      	cmp	r0, #0
   163d0:	d0b5      	beq.n	1633e <bt_att_recv+0x26>
   163d2:	2805      	cmp	r0, #5
   163d4:	d0b3      	beq.n	1633e <bt_att_recv+0x26>
	if (!req) {
   163d6:	2900      	cmp	r1, #0
   163d8:	d0b1      	beq.n	1633e <bt_att_recv+0x26>
   163da:	2306      	movs	r3, #6
   163dc:	2200      	movs	r2, #0
   163de:	4630      	mov	r0, r6
   163e0:	f016 fd7d 	bl	2cede <send_err_rsp.part.0>
   163e4:	e7ab      	b.n	1633e <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   163e6:	f1b9 0f05 	cmp.w	r9, #5
   163ea:	d107      	bne.n	163fc <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   163ec:	2101      	movs	r1, #1
   163ee:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   163f2:	f016 fc10 	bl	2cc16 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   163f6:	b108      	cbz	r0, 163fc <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   163f8:	4b1d      	ldr	r3, [pc, #116]	; (16470 <bt_att_recv+0x158>)
   163fa:	e7ca      	b.n	16392 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   163fc:	44d8      	add	r8, fp
   163fe:	8a23      	ldrh	r3, [r4, #16]
   16400:	f898 2001 	ldrb.w	r2, [r8, #1]
   16404:	429a      	cmp	r2, r3
   16406:	d916      	bls.n	16436 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   16408:	46e9      	mov	r9, sp
   1640a:	b088      	sub	sp, #32
   1640c:	466a      	mov	r2, sp
   1640e:	7829      	ldrb	r1, [r5, #0]
   16410:	2404      	movs	r4, #4
   16412:	4818      	ldr	r0, [pc, #96]	; (16474 <bt_att_recv+0x15c>)
   16414:	61d1      	str	r1, [r2, #28]
   16416:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1641a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1641e:	4810      	ldr	r0, [pc, #64]	; (16460 <bt_att_recv+0x148>)
   16420:	f842 4f10 	str.w	r4, [r2, #16]!
   16424:	f016 fb0d 	bl	2ca42 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   16428:	f898 3002 	ldrb.w	r3, [r8, #2]
   1642c:	46cd      	mov	sp, r9
   1642e:	2b01      	cmp	r3, #1
   16430:	d185      	bne.n	1633e <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   16432:	4623      	mov	r3, r4
   16434:	e00c      	b.n	16450 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   16436:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1643a:	4621      	mov	r1, r4
   1643c:	4630      	mov	r0, r6
   1643e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16440:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   16444:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   16446:	f47f af7a 	bne.w	1633e <bt_att_recv+0x26>
   1644a:	2800      	cmp	r0, #0
   1644c:	f43f af77 	beq.w	1633e <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16450:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   16452:	2900      	cmp	r1, #0
   16454:	f43f af73 	beq.w	1633e <bt_att_recv+0x26>
   16458:	e7c0      	b.n	163dc <bt_att_recv+0xc4>
   1645a:	bf00      	nop
   1645c:	00035a97 	.word	0x00035a97
   16460:	000314b4 	.word	0x000314b4
   16464:	00031fd8 	.word	0x00031fd8
   16468:	00035acc 	.word	0x00035acc
   1646c:	00035ab2 	.word	0x00035ab2
   16470:	00035ae8 	.word	0x00035ae8
   16474:	00035b07 	.word	0x00035b07

00016478 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1647a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1647c:	6803      	ldr	r3, [r0, #0]
   1647e:	460d      	mov	r5, r1
   16480:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16482:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16484:	bf18      	it	ne
   16486:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16488:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1648a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1648c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1648e:	f017 f814 	bl	2d4ba <bt_gatt_change_aware>
   16492:	b948      	cbnz	r0, 164a8 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16494:	2105      	movs	r1, #5
   16496:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1649a:	f016 fbbc 	bl	2cc16 <atomic_test_and_set_bit>
   1649e:	2800      	cmp	r0, #0
   164a0:	d048      	beq.n	16534 <att_write_rsp.constprop.0+0xbc>
			return 0;
   164a2:	2000      	movs	r0, #0
}
   164a4:	b007      	add	sp, #28
   164a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   164a8:	2e00      	cmp	r6, #0
   164aa:	d045      	beq.n	16538 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   164ac:	2218      	movs	r2, #24
   164ae:	2100      	movs	r1, #0
   164b0:	4668      	mov	r0, sp
   164b2:	f01a f896 	bl	305e2 <memset>
	if (rsp) {
   164b6:	bb67      	cbnz	r7, 16512 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   164b8:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   164ba:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   164bc:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   164be:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   164c0:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   164c2:	2300      	movs	r3, #0
   164c4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   164c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   164ca:	4a1c      	ldr	r2, [pc, #112]	; (1653c <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   164cc:	9303      	str	r3, [sp, #12]
	data.len = len;
   164ce:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   164d2:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   164d6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   164da:	2301      	movs	r3, #1
   164dc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   164e0:	466b      	mov	r3, sp
   164e2:	f016 fa10 	bl	2c906 <bt_gatt_foreach_attr>
	if (data.err) {
   164e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   164ea:	b1e3      	cbz	r3, 16526 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   164ec:	2f00      	cmp	r7, #0
   164ee:	d0d8      	beq.n	164a2 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   164f0:	9b01      	ldr	r3, [sp, #4]
   164f2:	6998      	ldr	r0, [r3, #24]
   164f4:	f7ff fb7c 	bl	15bf0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   164f8:	9801      	ldr	r0, [sp, #4]
   164fa:	f005 f845 	bl	1b588 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   164fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   16502:	2d00      	cmp	r5, #0
   16504:	d0cd      	beq.n	164a2 <att_write_rsp.constprop.0+0x2a>
   16506:	4632      	mov	r2, r6
   16508:	4629      	mov	r1, r5
   1650a:	4620      	mov	r0, r4
   1650c:	f016 fce7 	bl	2cede <send_err_rsp.part.0>
   16510:	e7c7      	b.n	164a2 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16512:	2200      	movs	r2, #0
   16514:	4639      	mov	r1, r7
   16516:	4620      	mov	r0, r4
   16518:	f7ff fe94 	bl	16244 <bt_att_chan_create_pdu>
   1651c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1651e:	2800      	cmp	r0, #0
   16520:	d1ca      	bne.n	164b8 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   16522:	200e      	movs	r0, #14
   16524:	e7be      	b.n	164a4 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   16526:	9901      	ldr	r1, [sp, #4]
   16528:	2900      	cmp	r1, #0
   1652a:	d0ba      	beq.n	164a2 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1652c:	4620      	mov	r0, r4
   1652e:	f016 fabe 	bl	2caae <bt_att_chan_send_rsp>
   16532:	e7b6      	b.n	164a2 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16534:	2012      	movs	r0, #18
   16536:	e7b5      	b.n	164a4 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16538:	2001      	movs	r0, #1
   1653a:	e7b3      	b.n	164a4 <att_write_rsp.constprop.0+0x2c>
   1653c:	0002c8a5 	.word	0x0002c8a5

00016540 <bt_att_create_pdu>:
{
   16540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16542:	af00      	add	r7, sp, #0
   16544:	460e      	mov	r6, r1
   16546:	4615      	mov	r5, r2
	att = att_get(conn);
   16548:	f7ff fce8 	bl	15f1c <att_get>
	if (!att) {
   1654c:	b1e0      	cbz	r0, 16588 <bt_att_create_pdu+0x48>
	return list->head;
   1654e:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16550:	4618      	mov	r0, r3
   16552:	b11b      	cbz	r3, 1655c <bt_att_create_pdu+0x1c>
	return node->next;
   16554:	f850 39f0 	ldr.w	r3, [r0], #-240
   16558:	b103      	cbz	r3, 1655c <bt_att_create_pdu+0x1c>
   1655a:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1655c:	1c6c      	adds	r4, r5, #1
   1655e:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16560:	b118      	cbz	r0, 1656a <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16562:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16564:	42a1      	cmp	r1, r4
   16566:	d219      	bcs.n	1659c <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16568:	b983      	cbnz	r3, 1658c <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1656a:	466d      	mov	r5, sp
   1656c:	b088      	sub	sp, #32
   1656e:	466a      	mov	r2, sp
   16570:	4b0e      	ldr	r3, [pc, #56]	; (165ac <bt_att_create_pdu+0x6c>)
   16572:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16576:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1657a:	2303      	movs	r3, #3
   1657c:	480c      	ldr	r0, [pc, #48]	; (165b0 <bt_att_create_pdu+0x70>)
   1657e:	f842 3f10 	str.w	r3, [r2, #16]!
   16582:	f016 fa5e 	bl	2ca42 <z_log_msg_static_create.constprop.0>
   16586:	46ad      	mov	sp, r5
		return NULL;
   16588:	2000      	movs	r0, #0
   1658a:	e00b      	b.n	165a4 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1658c:	4618      	mov	r0, r3
   1658e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   16592:	b14b      	cbz	r3, 165a8 <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16594:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16596:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16598:	428a      	cmp	r2, r1
   1659a:	d8f7      	bhi.n	1658c <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   1659c:	462a      	mov	r2, r5
   1659e:	4631      	mov	r1, r6
   165a0:	f7ff fe50 	bl	16244 <bt_att_chan_create_pdu>
}
   165a4:	46bd      	mov	sp, r7
   165a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   165a8:	4614      	mov	r4, r2
   165aa:	e7da      	b.n	16562 <bt_att_create_pdu+0x22>
   165ac:	00035b26 	.word	0x00035b26
   165b0:	000314b4 	.word	0x000314b4

000165b4 <att_read_group_req>:
{
   165b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   165b8:	8a0e      	ldrh	r6, [r1, #16]
{
   165ba:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   165bc:	3e04      	subs	r6, #4
   165be:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   165c0:	2e02      	cmp	r6, #2
{
   165c2:	4608      	mov	r0, r1
   165c4:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   165c6:	d001      	beq.n	165cc <att_read_group_req+0x18>
   165c8:	2e10      	cmp	r6, #16
   165ca:	d16a      	bne.n	166a2 <att_read_group_req+0xee>
   165cc:	2104      	movs	r1, #4
   165ce:	300c      	adds	r0, #12
   165d0:	f005 f8de 	bl	1b790 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   165d4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   165d8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   165da:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   165dc:	1d01      	adds	r1, r0, #4
   165de:	4632      	mov	r2, r6
   165e0:	4640      	mov	r0, r8
   165e2:	f015 fc84 	bl	2beee <bt_uuid_create>
   165e6:	2800      	cmp	r0, #0
   165e8:	d05d      	beq.n	166a6 <att_read_group_req+0xf2>
	if (!start || !end) {
   165ea:	2d00      	cmp	r5, #0
   165ec:	d03a      	beq.n	16664 <att_read_group_req+0xb0>
   165ee:	2600      	movs	r6, #0
   165f0:	2f00      	cmp	r7, #0
   165f2:	d036      	beq.n	16662 <att_read_group_req+0xae>
	if (start > end) {
   165f4:	42bd      	cmp	r5, r7
   165f6:	d835      	bhi.n	16664 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   165f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   165fc:	4640      	mov	r0, r8
   165fe:	a901      	add	r1, sp, #4
   16600:	f88d 6004 	strb.w	r6, [sp, #4]
   16604:	f8ad 3006 	strh.w	r3, [sp, #6]
   16608:	f015 fc43 	bl	2be92 <bt_uuid_cmp>
   1660c:	bb70      	cbnz	r0, 1666c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1660e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16610:	2214      	movs	r2, #20
   16612:	2100      	movs	r1, #0
   16614:	a807      	add	r0, sp, #28
   16616:	f019 ffe4 	bl	305e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1661a:	2201      	movs	r2, #1
   1661c:	2111      	movs	r1, #17
   1661e:	4630      	mov	r0, r6
   16620:	f7ff ff8e 	bl	16540 <bt_att_create_pdu>
   16624:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16626:	2800      	cmp	r0, #0
   16628:	d03d      	beq.n	166a6 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1662a:	2101      	movs	r1, #1
   1662c:	300c      	adds	r0, #12
	data.uuid = uuid;
   1662e:	e9cd 4807 	strd	r4, r8, [sp, #28]
   16632:	f005 f8cb 	bl	1b7cc <net_buf_simple_add>
	data.rsp->len = 0U;
   16636:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16638:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1663a:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1663c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1663e:	4a1b      	ldr	r2, [pc, #108]	; (166ac <att_read_group_req+0xf8>)
	data.group = NULL;
   16640:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16642:	4628      	mov	r0, r5
   16644:	ab07      	add	r3, sp, #28
   16646:	f016 f95e 	bl	2c906 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1664a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1664c:	781b      	ldrb	r3, [r3, #0]
   1664e:	bb1b      	cbnz	r3, 16698 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16650:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16652:	6998      	ldr	r0, [r3, #24]
   16654:	f7ff facc 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16658:	9809      	ldr	r0, [sp, #36]	; 0x24
   1665a:	f004 ff95 	bl	1b588 <net_buf_unref>
	if (!req) {
   1665e:	230a      	movs	r3, #10
   16660:	e001      	b.n	16666 <att_read_group_req+0xb2>
			*err = 0U;
   16662:	463d      	mov	r5, r7
	if (!req) {
   16664:	2301      	movs	r3, #1
   16666:	462a      	mov	r2, r5
   16668:	2110      	movs	r1, #16
   1666a:	e00e      	b.n	1668a <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1666c:	f642 0301 	movw	r3, #10241	; 0x2801
   16670:	4640      	mov	r0, r8
   16672:	a907      	add	r1, sp, #28
   16674:	f88d 601c 	strb.w	r6, [sp, #28]
   16678:	f8ad 301e 	strh.w	r3, [sp, #30]
   1667c:	f015 fc09 	bl	2be92 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16680:	2800      	cmp	r0, #0
   16682:	d0c4      	beq.n	1660e <att_read_group_req+0x5a>
	if (!req) {
   16684:	2310      	movs	r3, #16
   16686:	462a      	mov	r2, r5
   16688:	4619      	mov	r1, r3
   1668a:	4620      	mov	r0, r4
   1668c:	f016 fc27 	bl	2cede <send_err_rsp.part.0>
		return 0;
   16690:	2000      	movs	r0, #0
}
   16692:	b00c      	add	sp, #48	; 0x30
   16694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   16698:	4620      	mov	r0, r4
   1669a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1669c:	f016 fa07 	bl	2caae <bt_att_chan_send_rsp>
	return 0;
   166a0:	e7f6      	b.n	16690 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   166a2:	2004      	movs	r0, #4
   166a4:	e7f5      	b.n	16692 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   166a6:	200e      	movs	r0, #14
   166a8:	e7f3      	b.n	16692 <att_read_group_req+0xde>
   166aa:	bf00      	nop
   166ac:	00015fe1 	.word	0x00015fe1

000166b0 <att_read_mult_vl_req>:
{
   166b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   166b4:	6846      	ldr	r6, [r0, #4]
{
   166b6:	4604      	mov	r4, r0
   166b8:	460d      	mov	r5, r1
   166ba:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   166bc:	2101      	movs	r1, #1
   166be:	4630      	mov	r0, r6
   166c0:	f016 fefb 	bl	2d4ba <bt_gatt_change_aware>
   166c4:	b950      	cbnz	r0, 166dc <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   166c6:	2105      	movs	r1, #5
   166c8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   166cc:	f016 faa3 	bl	2cc16 <atomic_test_and_set_bit>
   166d0:	2800      	cmp	r0, #0
   166d2:	d13b      	bne.n	1674c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   166d4:	2012      	movs	r0, #18
}
   166d6:	b005      	add	sp, #20
   166d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   166dc:	2210      	movs	r2, #16
   166de:	2100      	movs	r1, #0
   166e0:	4668      	mov	r0, sp
   166e2:	f019 ff7e 	bl	305e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   166e6:	2200      	movs	r2, #0
   166e8:	2121      	movs	r1, #33	; 0x21
   166ea:	4630      	mov	r0, r6
   166ec:	f7ff ff28 	bl	16540 <bt_att_create_pdu>
   166f0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   166f2:	b368      	cbz	r0, 16750 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   166f4:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   166f8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16754 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   166fc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   166fe:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   16702:	8a2b      	ldrh	r3, [r5, #16]
   16704:	2b01      	cmp	r3, #1
   16706:	d804      	bhi.n	16712 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16708:	4620      	mov	r0, r4
   1670a:	9902      	ldr	r1, [sp, #8]
   1670c:	f016 f9cf 	bl	2caae <bt_att_chan_send_rsp>
	return 0;
   16710:	e01c      	b.n	1674c <att_read_mult_vl_req+0x9c>
   16712:	4638      	mov	r0, r7
   16714:	f017 fc6b 	bl	2dfee <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16718:	466b      	mov	r3, sp
   1671a:	464a      	mov	r2, r9
   1671c:	4601      	mov	r1, r0
   1671e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16720:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16724:	f016 f8ef 	bl	2c906 <bt_gatt_foreach_attr>
		if (data.err) {
   16728:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1672c:	2b00      	cmp	r3, #0
   1672e:	d0e8      	beq.n	16702 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16730:	9b02      	ldr	r3, [sp, #8]
   16732:	6998      	ldr	r0, [r3, #24]
   16734:	f7ff fa5c 	bl	15bf0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16738:	9802      	ldr	r0, [sp, #8]
   1673a:	f004 ff25 	bl	1b588 <net_buf_unref>
	if (!req) {
   1673e:	4632      	mov	r2, r6
   16740:	2120      	movs	r1, #32
   16742:	4620      	mov	r0, r4
   16744:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16748:	f016 fbc9 	bl	2cede <send_err_rsp.part.0>
			return 0;
   1674c:	2000      	movs	r0, #0
   1674e:	e7c2      	b.n	166d6 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16750:	200e      	movs	r0, #14
   16752:	e7c0      	b.n	166d6 <att_read_mult_vl_req+0x26>
   16754:	0002cc7f 	.word	0x0002cc7f

00016758 <att_read_mult_req>:
{
   16758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1675c:	6846      	ldr	r6, [r0, #4]
{
   1675e:	4604      	mov	r4, r0
   16760:	460d      	mov	r5, r1
   16762:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   16764:	2101      	movs	r1, #1
   16766:	4630      	mov	r0, r6
   16768:	f016 fea7 	bl	2d4ba <bt_gatt_change_aware>
   1676c:	b950      	cbnz	r0, 16784 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1676e:	2105      	movs	r1, #5
   16770:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16774:	f016 fa4f 	bl	2cc16 <atomic_test_and_set_bit>
   16778:	2800      	cmp	r0, #0
   1677a:	d13b      	bne.n	167f4 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1677c:	2012      	movs	r0, #18
}
   1677e:	b005      	add	sp, #20
   16780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   16784:	2210      	movs	r2, #16
   16786:	2100      	movs	r1, #0
   16788:	4668      	mov	r0, sp
   1678a:	f019 ff2a 	bl	305e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1678e:	2200      	movs	r2, #0
   16790:	210f      	movs	r1, #15
   16792:	4630      	mov	r0, r6
   16794:	f7ff fed4 	bl	16540 <bt_att_create_pdu>
   16798:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1679a:	b368      	cbz	r0, 167f8 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1679c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   167a0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 167fc <att_read_mult_req+0xa4>
	data.chan = chan;
   167a4:	9400      	str	r4, [sp, #0]
   167a6:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   167aa:	8a2b      	ldrh	r3, [r5, #16]
   167ac:	2b01      	cmp	r3, #1
   167ae:	d804      	bhi.n	167ba <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   167b0:	4620      	mov	r0, r4
   167b2:	9902      	ldr	r1, [sp, #8]
   167b4:	f016 f97b 	bl	2caae <bt_att_chan_send_rsp>
	return 0;
   167b8:	e01c      	b.n	167f4 <att_read_mult_req+0x9c>
   167ba:	4638      	mov	r0, r7
   167bc:	f017 fc17 	bl	2dfee <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   167c0:	466b      	mov	r3, sp
   167c2:	464a      	mov	r2, r9
   167c4:	4601      	mov	r1, r0
   167c6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   167c8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   167cc:	f016 f89b 	bl	2c906 <bt_gatt_foreach_attr>
		if (data.err) {
   167d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   167d4:	2b00      	cmp	r3, #0
   167d6:	d0e8      	beq.n	167aa <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   167d8:	9b02      	ldr	r3, [sp, #8]
   167da:	6998      	ldr	r0, [r3, #24]
   167dc:	f7ff fa08 	bl	15bf0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   167e0:	9802      	ldr	r0, [sp, #8]
   167e2:	f004 fed1 	bl	1b588 <net_buf_unref>
	if (!req) {
   167e6:	4632      	mov	r2, r6
   167e8:	210e      	movs	r1, #14
   167ea:	4620      	mov	r0, r4
   167ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   167f0:	f016 fb75 	bl	2cede <send_err_rsp.part.0>
			return 0;
   167f4:	2000      	movs	r0, #0
   167f6:	e7c2      	b.n	1677e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   167f8:	200e      	movs	r0, #14
   167fa:	e7c0      	b.n	1677e <att_read_mult_req+0x26>
   167fc:	0002cc39 	.word	0x0002cc39

00016800 <att_read_rsp>:
{
   16800:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16804:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   16808:	4604      	mov	r4, r0
   1680a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1680c:	4640      	mov	r0, r8
   1680e:	2101      	movs	r1, #1
{
   16810:	4617      	mov	r7, r2
   16812:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   16814:	f016 fe51 	bl	2d4ba <bt_gatt_change_aware>
   16818:	b948      	cbnz	r0, 1682e <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1681a:	2105      	movs	r1, #5
   1681c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16820:	f016 f9f9 	bl	2cc16 <atomic_test_and_set_bit>
   16824:	bb78      	cbnz	r0, 16886 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16826:	2012      	movs	r0, #18
}
   16828:	b004      	add	sp, #16
   1682a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1682e:	b38d      	cbz	r5, 16894 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   16830:	2210      	movs	r2, #16
   16832:	2100      	movs	r1, #0
   16834:	4668      	mov	r0, sp
   16836:	f019 fed4 	bl	305e2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1683a:	2200      	movs	r2, #0
   1683c:	4639      	mov	r1, r7
   1683e:	4640      	mov	r0, r8
   16840:	f7ff fe7e 	bl	16540 <bt_att_create_pdu>
   16844:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16846:	b338      	cbz	r0, 16898 <att_read_rsp+0x98>
	data.offset = offset;
   16848:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1684c:	4629      	mov	r1, r5
	data.offset = offset;
   1684e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16852:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16854:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16856:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1685a:	4a10      	ldr	r2, [pc, #64]	; (1689c <att_read_rsp+0x9c>)
   1685c:	466b      	mov	r3, sp
	data.chan = chan;
   1685e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16860:	f016 f851 	bl	2c906 <bt_gatt_foreach_attr>
	if (data.err) {
   16864:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16868:	b17b      	cbz	r3, 1688a <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1686a:	9b02      	ldr	r3, [sp, #8]
   1686c:	6998      	ldr	r0, [r3, #24]
   1686e:	f7ff f9bf 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16872:	9802      	ldr	r0, [sp, #8]
   16874:	f004 fe88 	bl	1b588 <net_buf_unref>
	if (!req) {
   16878:	462a      	mov	r2, r5
   1687a:	4631      	mov	r1, r6
   1687c:	4620      	mov	r0, r4
   1687e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16882:	f016 fb2c 	bl	2cede <send_err_rsp.part.0>
			return 0;
   16886:	2000      	movs	r0, #0
   16888:	e7ce      	b.n	16828 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1688a:	4620      	mov	r0, r4
   1688c:	9902      	ldr	r1, [sp, #8]
   1688e:	f016 f90e 	bl	2caae <bt_att_chan_send_rsp>
	return 0;
   16892:	e7f8      	b.n	16886 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   16894:	2001      	movs	r0, #1
   16896:	e7c7      	b.n	16828 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   16898:	200e      	movs	r0, #14
   1689a:	e7c5      	b.n	16828 <att_read_rsp+0x28>
   1689c:	0002cc39 	.word	0x0002cc39

000168a0 <att_read_type_req>:
{
   168a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   168a4:	8a0d      	ldrh	r5, [r1, #16]
{
   168a6:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   168a8:	3d04      	subs	r5, #4
   168aa:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   168ac:	2d02      	cmp	r5, #2
{
   168ae:	4608      	mov	r0, r1
   168b0:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   168b2:	d001      	beq.n	168b8 <att_read_type_req+0x18>
   168b4:	2d10      	cmp	r5, #16
   168b6:	d150      	bne.n	1695a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   168b8:	2104      	movs	r1, #4
   168ba:	300c      	adds	r0, #12
   168bc:	f004 ff68 	bl	1b790 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   168c0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   168c4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   168c6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   168c8:	1d01      	adds	r1, r0, #4
   168ca:	462a      	mov	r2, r5
   168cc:	4640      	mov	r0, r8
   168ce:	f015 fb0e 	bl	2beee <bt_uuid_create>
   168d2:	b188      	cbz	r0, 168f8 <att_read_type_req+0x58>
	if (!start || !end) {
   168d4:	b19e      	cbz	r6, 168fe <att_read_type_req+0x5e>
   168d6:	b18f      	cbz	r7, 168fc <att_read_type_req+0x5c>
	if (start > end) {
   168d8:	42b7      	cmp	r7, r6
   168da:	d310      	bcc.n	168fe <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   168dc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   168de:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   168e0:	2100      	movs	r1, #0
   168e2:	eb0d 0002 	add.w	r0, sp, r2
   168e6:	f019 fe7c 	bl	305e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   168ea:	2201      	movs	r2, #1
   168ec:	2109      	movs	r1, #9
   168ee:	4628      	mov	r0, r5
   168f0:	f7ff fe26 	bl	16540 <bt_att_create_pdu>
   168f4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   168f6:	b960      	cbnz	r0, 16912 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   168f8:	200e      	movs	r0, #14
   168fa:	e007      	b.n	1690c <att_read_type_req+0x6c>
			*err = 0U;
   168fc:	463e      	mov	r6, r7
	if (!req) {
   168fe:	2301      	movs	r3, #1
   16900:	4632      	mov	r2, r6
   16902:	2108      	movs	r1, #8
   16904:	4620      	mov	r0, r4
   16906:	f016 faea 	bl	2cede <send_err_rsp.part.0>
		return 0;
   1690a:	2000      	movs	r0, #0
}
   1690c:	b00c      	add	sp, #48	; 0x30
   1690e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   16912:	2101      	movs	r1, #1
   16914:	300c      	adds	r0, #12
	data.uuid = uuid;
   16916:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1691a:	f004 ff57 	bl	1b7cc <net_buf_simple_add>
	data.rsp->len = 0U;
   1691e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16920:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   16922:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16924:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16926:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16928:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1692c:	4630      	mov	r0, r6
   1692e:	ab06      	add	r3, sp, #24
   16930:	4a0b      	ldr	r2, [pc, #44]	; (16960 <att_read_type_req+0xc0>)
   16932:	f015 ffe8 	bl	2c906 <bt_gatt_foreach_attr>
	if (data.err) {
   16936:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1693a:	b14b      	cbz	r3, 16950 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1693c:	9b08      	ldr	r3, [sp, #32]
   1693e:	6998      	ldr	r0, [r3, #24]
   16940:	f7ff f956 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16944:	9808      	ldr	r0, [sp, #32]
   16946:	f004 fe1f 	bl	1b588 <net_buf_unref>
	if (!req) {
   1694a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1694e:	e7d7      	b.n	16900 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   16950:	4620      	mov	r0, r4
   16952:	9908      	ldr	r1, [sp, #32]
   16954:	f016 f8ab 	bl	2caae <bt_att_chan_send_rsp>
	return 0;
   16958:	e7d7      	b.n	1690a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1695a:	2004      	movs	r0, #4
   1695c:	e7d6      	b.n	1690c <att_read_type_req+0x6c>
   1695e:	bf00      	nop
   16960:	0001608d 	.word	0x0001608d

00016964 <att_find_type_req>:
{
   16964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16968:	460f      	mov	r7, r1
   1696a:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1696c:	2106      	movs	r1, #6
   1696e:	b086      	sub	sp, #24
   16970:	f107 000c 	add.w	r0, r7, #12
   16974:	f004 ff0c 	bl	1b790 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16978:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1697a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1697e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   16980:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   16984:	b1c5      	cbz	r5, 169b8 <att_find_type_req+0x54>
   16986:	2300      	movs	r3, #0
   16988:	f1b8 0f00 	cmp.w	r8, #0
   1698c:	d013      	beq.n	169b6 <att_find_type_req+0x52>
	if (start > end) {
   1698e:	4545      	cmp	r5, r8
   16990:	d812      	bhi.n	169b8 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16992:	f88d 3000 	strb.w	r3, [sp]
   16996:	f88d 3004 	strb.w	r3, [sp, #4]
   1699a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1699e:	4668      	mov	r0, sp
   169a0:	a901      	add	r1, sp, #4
   169a2:	f8ad 2002 	strh.w	r2, [sp, #2]
   169a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   169aa:	f015 fa72 	bl	2be92 <bt_uuid_cmp>
   169ae:	4606      	mov	r6, r0
   169b0:	b160      	cbz	r0, 169cc <att_find_type_req+0x68>
	if (!req) {
   169b2:	230a      	movs	r3, #10
   169b4:	e001      	b.n	169ba <att_find_type_req+0x56>
			*err = 0U;
   169b6:	4645      	mov	r5, r8
	if (!req) {
   169b8:	2301      	movs	r3, #1
   169ba:	462a      	mov	r2, r5
   169bc:	2106      	movs	r1, #6
   169be:	4620      	mov	r0, r4
   169c0:	f016 fa8d 	bl	2cede <send_err_rsp.part.0>
		return 0;
   169c4:	2000      	movs	r0, #0
}
   169c6:	b006      	add	sp, #24
   169c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   169cc:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   169d0:	4601      	mov	r1, r0
   169d2:	2214      	movs	r2, #20
   169d4:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   169d6:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   169d8:	f019 fe03 	bl	305e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   169dc:	4632      	mov	r2, r6
   169de:	2107      	movs	r1, #7
   169e0:	4650      	mov	r0, sl
   169e2:	f7ff fdad 	bl	16540 <bt_att_create_pdu>
   169e6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   169e8:	b1f8      	cbz	r0, 16a2a <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   169ea:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   169ec:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   169ee:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   169f2:	4628      	mov	r0, r5
   169f4:	ab01      	add	r3, sp, #4
   169f6:	4a0e      	ldr	r2, [pc, #56]	; (16a30 <att_find_type_req+0xcc>)
	data.value = value;
   169f8:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   169fc:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   169fe:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16a02:	f015 ff80 	bl	2c906 <bt_gatt_foreach_attr>
	if (data.err) {
   16a06:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16a0a:	b14b      	cbz	r3, 16a20 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16a0c:	9b02      	ldr	r3, [sp, #8]
   16a0e:	6998      	ldr	r0, [r3, #24]
   16a10:	f7ff f8ee 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16a14:	9802      	ldr	r0, [sp, #8]
   16a16:	f004 fdb7 	bl	1b588 <net_buf_unref>
	if (!req) {
   16a1a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16a1e:	e7cc      	b.n	169ba <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   16a20:	4620      	mov	r0, r4
   16a22:	9902      	ldr	r1, [sp, #8]
   16a24:	f016 f843 	bl	2caae <bt_att_chan_send_rsp>
	return 0;
   16a28:	e7cc      	b.n	169c4 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   16a2a:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16a2c:	e7cb      	b.n	169c6 <att_find_type_req+0x62>
   16a2e:	bf00      	nop
   16a30:	00015c31 	.word	0x00015c31

00016a34 <att_find_info_req>:
{
   16a34:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16a36:	68cb      	ldr	r3, [r1, #12]
{
   16a38:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   16a3a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16a3c:	885e      	ldrh	r6, [r3, #2]
{
   16a3e:	b085      	sub	sp, #20
	if (!start || !end) {
   16a40:	b195      	cbz	r5, 16a68 <att_find_info_req+0x34>
   16a42:	b186      	cbz	r6, 16a66 <att_find_info_req+0x32>
	if (start > end) {
   16a44:	42b5      	cmp	r5, r6
   16a46:	d80f      	bhi.n	16a68 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16a48:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   16a4a:	2210      	movs	r2, #16
   16a4c:	2100      	movs	r1, #0
   16a4e:	4668      	mov	r0, sp
   16a50:	f019 fdc7 	bl	305e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16a54:	2200      	movs	r2, #0
   16a56:	2105      	movs	r1, #5
   16a58:	4638      	mov	r0, r7
   16a5a:	f7ff fd71 	bl	16540 <bt_att_create_pdu>
   16a5e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16a60:	b958      	cbnz	r0, 16a7a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16a62:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16a64:	e007      	b.n	16a76 <att_find_info_req+0x42>
			*err = 0U;
   16a66:	4635      	mov	r5, r6
	if (!req) {
   16a68:	2301      	movs	r3, #1
   16a6a:	462a      	mov	r2, r5
   16a6c:	2104      	movs	r1, #4
   16a6e:	4620      	mov	r0, r4
   16a70:	f016 fa35 	bl	2cede <send_err_rsp.part.0>
		return 0;
   16a74:	2000      	movs	r0, #0
}
   16a76:	b005      	add	sp, #20
   16a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16a7a:	466b      	mov	r3, sp
   16a7c:	4631      	mov	r1, r6
   16a7e:	4628      	mov	r0, r5
   16a80:	4a09      	ldr	r2, [pc, #36]	; (16aa8 <att_find_info_req+0x74>)
	data.chan = chan;
   16a82:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16a84:	f015 ff3f 	bl	2c906 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16a88:	9b02      	ldr	r3, [sp, #8]
   16a8a:	b943      	cbnz	r3, 16a9e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16a8c:	9b01      	ldr	r3, [sp, #4]
   16a8e:	6998      	ldr	r0, [r3, #24]
   16a90:	f7ff f8ae 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16a94:	9801      	ldr	r0, [sp, #4]
   16a96:	f004 fd77 	bl	1b588 <net_buf_unref>
	if (!req) {
   16a9a:	230a      	movs	r3, #10
   16a9c:	e7e5      	b.n	16a6a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   16a9e:	4620      	mov	r0, r4
   16aa0:	9901      	ldr	r1, [sp, #4]
   16aa2:	f016 f804 	bl	2caae <bt_att_chan_send_rsp>
	return 0;
   16aa6:	e7e5      	b.n	16a74 <att_find_info_req+0x40>
   16aa8:	0002c9a3 	.word	0x0002c9a3

00016aac <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   16aac:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   16aae:	4c09      	ldr	r4, [pc, #36]	; (16ad4 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16ab0:	4d09      	ldr	r5, [pc, #36]	; (16ad8 <bt_att_init+0x2c>)
   16ab2:	4620      	mov	r0, r4
   16ab4:	f019 fb77 	bl	301a6 <z_impl_k_queue_init>
   16ab8:	4629      	mov	r1, r5
   16aba:	4620      	mov	r0, r4
   16abc:	f019 fb80 	bl	301c0 <k_queue_append>
   16ac0:	4620      	mov	r0, r4
   16ac2:	f105 0114 	add.w	r1, r5, #20
   16ac6:	f019 fb7b 	bl	301c0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   16aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   16ace:	f000 bec5 	b.w	1785c <bt_gatt_init>
   16ad2:	bf00      	nop
   16ad4:	20008c9c 	.word	0x20008c9c
   16ad8:	20021698 	.word	0x20021698

00016adc <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   16adc:	2300      	movs	r3, #0
{
   16ade:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16ae0:	4605      	mov	r5, r0
   16ae2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   16ae4:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   16ae6:	f010 fc97 	bl	27418 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   16aea:	4b0c      	ldr	r3, [pc, #48]	; (16b1c <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16aec:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   16aee:	681b      	ldr	r3, [r3, #0]
   16af0:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   16af2:	bf04      	itt	eq
   16af4:	2500      	moveq	r5, #0
   16af6:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16af8:	462a      	mov	r2, r5
   16afa:	4623      	mov	r3, r4
   16afc:	4808      	ldr	r0, [pc, #32]	; (16b20 <bt_att_req_alloc+0x44>)
   16afe:	f00e f8c1 	bl	24c84 <k_mem_slab_alloc>
   16b02:	4601      	mov	r1, r0
   16b04:	b940      	cbnz	r0, 16b18 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16b06:	9b01      	ldr	r3, [sp, #4]
   16b08:	221c      	movs	r2, #28
   16b0a:	4618      	mov	r0, r3
   16b0c:	f019 fd69 	bl	305e2 <memset>
   16b10:	4603      	mov	r3, r0

	return req;
}
   16b12:	4618      	mov	r0, r3
   16b14:	b003      	add	sp, #12
   16b16:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16b18:	2300      	movs	r3, #0
   16b1a:	e7fa      	b.n	16b12 <bt_att_req_alloc+0x36>
   16b1c:	200216c0 	.word	0x200216c0
   16b20:	20008adc 	.word	0x20008adc

00016b24 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16b24:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   16b26:	6883      	ldr	r3, [r0, #8]
{
   16b28:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   16b2a:	b14b      	cbz	r3, 16b40 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   16b2c:	6998      	ldr	r0, [r3, #24]
   16b2e:	f7ff f85f 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(req->buf);
   16b32:	9b01      	ldr	r3, [sp, #4]
   16b34:	6898      	ldr	r0, [r3, #8]
   16b36:	f004 fd27 	bl	1b588 <net_buf_unref>
		req->buf = NULL;
   16b3a:	2200      	movs	r2, #0
   16b3c:	9b01      	ldr	r3, [sp, #4]
   16b3e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16b40:	4803      	ldr	r0, [pc, #12]	; (16b50 <bt_att_req_free+0x2c>)
   16b42:	a901      	add	r1, sp, #4
   16b44:	f00e f908 	bl	24d58 <k_mem_slab_free>
}
   16b48:	b003      	add	sp, #12
   16b4a:	f85d fb04 	ldr.w	pc, [sp], #4
   16b4e:	bf00      	nop
   16b50:	20008adc 	.word	0x20008adc

00016b54 <att_handle_rsp>:
{
   16b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b58:	4604      	mov	r4, r0
   16b5a:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   16b5c:	30c0      	adds	r0, #192	; 0xc0
{
   16b5e:	460e      	mov	r6, r1
   16b60:	4617      	mov	r7, r2
   16b62:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16b64:	f00f fad6 	bl	26114 <k_work_cancel_delayable>
	if (!chan->req) {
   16b68:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16b6c:	b980      	cbnz	r0, 16b90 <att_handle_rsp+0x3c>
		LOG_WRN("No pending ATT request");
   16b6e:	4b1a      	ldr	r3, [pc, #104]	; (16bd8 <att_handle_rsp+0x84>)
   16b70:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16b74:	9307      	str	r3, [sp, #28]
   16b76:	2302      	movs	r3, #2
   16b78:	4818      	ldr	r0, [pc, #96]	; (16bdc <att_handle_rsp+0x88>)
   16b7a:	aa06      	add	r2, sp, #24
   16b7c:	9306      	str	r3, [sp, #24]
   16b7e:	f015 ff60 	bl	2ca42 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   16b82:	6820      	ldr	r0, [r4, #0]
   16b84:	f016 f8e3 	bl	2cd4e <att_req_send_process>
}
   16b88:	2000      	movs	r0, #0
   16b8a:	b008      	add	sp, #32
   16b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   16b90:	4b13      	ldr	r3, [pc, #76]	; (16be0 <att_handle_rsp+0x8c>)
   16b92:	f04f 0800 	mov.w	r8, #0
   16b96:	4298      	cmp	r0, r3
   16b98:	d102      	bne.n	16ba0 <att_handle_rsp+0x4c>
		chan->req = NULL;
   16b9a:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   16b9e:	e7f0      	b.n	16b82 <att_handle_rsp+0x2e>
	func = chan->req->func;
   16ba0:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   16ba4:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   16ba8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16bac:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   16bb0:	f7ff ffb8 	bl	16b24 <bt_att_req_free>
	att_req_send_process(chan->att);
   16bb4:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   16bb6:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   16bba:	f016 f8c8 	bl	2cd4e <att_req_send_process>
	if (func) {
   16bbe:	f1b9 0f00 	cmp.w	r9, #0
   16bc2:	d0e1      	beq.n	16b88 <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   16bc4:	6820      	ldr	r0, [r4, #0]
   16bc6:	f8cd a000 	str.w	sl, [sp]
   16bca:	463b      	mov	r3, r7
   16bcc:	4632      	mov	r2, r6
   16bce:	4629      	mov	r1, r5
   16bd0:	6800      	ldr	r0, [r0, #0]
   16bd2:	47c8      	blx	r9
   16bd4:	e7d8      	b.n	16b88 <att_handle_rsp+0x34>
   16bd6:	bf00      	nop
   16bd8:	00035b41 	.word	0x00035b41
   16bdc:	000314b4 	.word	0x000314b4
   16be0:	200216c4 	.word	0x200216c4

00016be4 <bt_att_disconnected>:
{
   16be4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   16be8:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   16bec:	4604      	mov	r4, r0
	if (!att_chan->att) {
   16bee:	2e00      	cmp	r6, #0
   16bf0:	d056      	beq.n	16ca0 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   16bf2:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   16bf6:	f106 0028 	add.w	r0, r6, #40	; 0x28
   16bfa:	f015 fff1 	bl	2cbe0 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   16bfe:	1f27      	subs	r7, r4, #4
   16c00:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   16c04:	2200      	movs	r2, #0
   16c06:	2300      	movs	r3, #0
   16c08:	4640      	mov	r0, r8
   16c0a:	f017 f9e7 	bl	2dfdc <net_buf_get>
   16c0e:	4605      	mov	r5, r0
   16c10:	bb28      	cbnz	r0, 16c5e <bt_att_disconnected+0x7a>
	if (chan->req) {
   16c12:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16c16:	b12b      	cbz	r3, 16c24 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16c18:	4602      	mov	r2, r0
   16c1a:	4601      	mov	r1, r0
   16c1c:	230e      	movs	r3, #14
   16c1e:	4638      	mov	r0, r7
   16c20:	f7ff ff98 	bl	16b54 <att_handle_rsp>
	chan->att = NULL;
   16c24:	2300      	movs	r3, #0
   16c26:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   16c2a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   16c2c:	2b00      	cmp	r3, #0
   16c2e:	d137      	bne.n	16ca0 <bt_att_disconnected+0xbc>
	att_reset(att);
   16c30:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16c32:	9803      	ldr	r0, [sp, #12]
   16c34:	2200      	movs	r2, #0
   16c36:	2300      	movs	r3, #0
   16c38:	300c      	adds	r0, #12
   16c3a:	f017 f9cf 	bl	2dfdc <net_buf_get>
   16c3e:	4605      	mov	r5, r0
   16c40:	b9a0      	cbnz	r0, 16c6c <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   16c42:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16c44:	6845      	ldr	r5, [r0, #4]
   16c46:	b9c5      	cbnz	r5, 16c7a <bt_att_disconnected+0x96>
	att->conn = NULL;
   16c48:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   16c4a:	a903      	add	r1, sp, #12
   16c4c:	4816      	ldr	r0, [pc, #88]	; (16ca8 <bt_att_disconnected+0xc4>)
   16c4e:	f00e f883 	bl	24d58 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   16c52:	6820      	ldr	r0, [r4, #0]
}
   16c54:	b004      	add	sp, #16
   16c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   16c5a:	f001 bdd7 	b.w	1880c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16c5e:	69a8      	ldr	r0, [r5, #24]
   16c60:	f7fe ffc6 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(buf);
   16c64:	4628      	mov	r0, r5
   16c66:	f004 fc8f 	bl	1b588 <net_buf_unref>
   16c6a:	e7cb      	b.n	16c04 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16c6c:	69a8      	ldr	r0, [r5, #24]
   16c6e:	f7fe ffbf 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(buf);
   16c72:	4628      	mov	r0, r5
   16c74:	f004 fc88 	bl	1b588 <net_buf_unref>
   16c78:	e7db      	b.n	16c32 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16c7a:	6882      	ldr	r2, [r0, #8]
	return node->next;
   16c7c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16c7e:	4295      	cmp	r5, r2
	list->head = node;
   16c80:	6043      	str	r3, [r0, #4]
	list->tail = node;
   16c82:	bf08      	it	eq
   16c84:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   16c86:	686e      	ldr	r6, [r5, #4]
   16c88:	b136      	cbz	r6, 16c98 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16c8a:	69ab      	ldr	r3, [r5, #24]
   16c8c:	210e      	movs	r1, #14
   16c8e:	9300      	str	r3, [sp, #0]
   16c90:	2300      	movs	r3, #0
   16c92:	6800      	ldr	r0, [r0, #0]
   16c94:	461a      	mov	r2, r3
   16c96:	47b0      	blx	r6
		bt_att_req_free(req);
   16c98:	4628      	mov	r0, r5
   16c9a:	f7ff ff43 	bl	16b24 <bt_att_req_free>
   16c9e:	e7d0      	b.n	16c42 <bt_att_disconnected+0x5e>
}
   16ca0:	b004      	add	sp, #16
   16ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16ca6:	bf00      	nop
   16ca8:	20008a5c 	.word	0x20008a5c

00016cac <att_timeout>:
{
   16cac:	b510      	push	{r4, lr}
   16cae:	4604      	mov	r4, r0
   16cb0:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   16cb2:	4b08      	ldr	r3, [pc, #32]	; (16cd4 <att_timeout+0x28>)
   16cb4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16cb8:	9305      	str	r3, [sp, #20]
   16cba:	2302      	movs	r3, #2
   16cbc:	4806      	ldr	r0, [pc, #24]	; (16cd8 <att_timeout+0x2c>)
   16cbe:	aa04      	add	r2, sp, #16
   16cc0:	9304      	str	r3, [sp, #16]
   16cc2:	f015 febe 	bl	2ca42 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   16cc6:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   16cca:	b006      	add	sp, #24
   16ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   16cd0:	f7ff bf88 	b.w	16be4 <bt_att_disconnected>
   16cd4:	00035b58 	.word	0x00035b58
   16cd8:	000314b4 	.word	0x000314b4

00016cdc <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   16cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cde:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   16ce0:	b958      	cbnz	r0, 16cfa <bt_att_send+0x1e>
   16ce2:	4929      	ldr	r1, [pc, #164]	; (16d88 <bt_att_send+0xac>)
   16ce4:	f640 63a4 	movw	r3, #3748	; 0xea4
   16ce8:	4a28      	ldr	r2, [pc, #160]	; (16d8c <bt_att_send+0xb0>)
   16cea:	4829      	ldr	r0, [pc, #164]	; (16d90 <bt_att_send+0xb4>)
   16cec:	f013 fce5 	bl	2a6ba <assert_print>
   16cf0:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   16cf4:	4825      	ldr	r0, [pc, #148]	; (16d8c <bt_att_send+0xb0>)
   16cf6:	f013 fcd9 	bl	2a6ac <assert_post_action>
   16cfa:	b949      	cbnz	r1, 16d10 <bt_att_send+0x34>
   16cfc:	4925      	ldr	r1, [pc, #148]	; (16d94 <bt_att_send+0xb8>)
   16cfe:	f640 63a5 	movw	r3, #3749	; 0xea5
   16d02:	4a22      	ldr	r2, [pc, #136]	; (16d8c <bt_att_send+0xb0>)
   16d04:	4822      	ldr	r0, [pc, #136]	; (16d90 <bt_att_send+0xb4>)
   16d06:	f013 fcd8 	bl	2a6ba <assert_print>
   16d0a:	f640 61a5 	movw	r1, #3749	; 0xea5
   16d0e:	e7f1      	b.n	16cf4 <bt_att_send+0x18>

	att = att_get(conn);
   16d10:	f7ff f904 	bl	15f1c <att_get>
	if (!att) {
   16d14:	4605      	mov	r5, r0
   16d16:	b940      	cbnz	r0, 16d2a <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16d18:	69a0      	ldr	r0, [r4, #24]
   16d1a:	f7fe ff69 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(buf);
   16d1e:	4620      	mov	r0, r4
   16d20:	f004 fc32 	bl	1b588 <net_buf_unref>
		return -ENOTCONN;
   16d24:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   16d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   16d2a:	f100 060c 	add.w	r6, r0, #12
   16d2e:	4621      	mov	r1, r4
   16d30:	4630      	mov	r0, r6
   16d32:	f004 fc03 	bl	1b53c <net_buf_put>
	return list->head;
   16d36:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16d38:	b14d      	cbz	r5, 16d4e <bt_att_send+0x72>
	return node->next;
   16d3a:	f855 49f0 	ldr.w	r4, [r5], #-240
   16d3e:	b104      	cbz	r4, 16d42 <bt_att_send+0x66>
   16d40:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   16d42:	4631      	mov	r1, r6
   16d44:	4628      	mov	r0, r5
   16d46:	f015 fe99 	bl	2ca7c <process_queue>
		if (!err) {
   16d4a:	4603      	mov	r3, r0
   16d4c:	b980      	cbnz	r0, 16d70 <bt_att_send+0x94>
	return 0;
   16d4e:	2000      	movs	r0, #0
   16d50:	e7ea      	b.n	16d28 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   16d52:	2103      	movs	r1, #3
   16d54:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16d58:	f015 fd9e 	bl	2c898 <atomic_test_bit>
   16d5c:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   16d5e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16d62:	f015 fd99 	bl	2c898 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   16d66:	4287      	cmp	r7, r0
   16d68:	f06f 0301 	mvn.w	r3, #1
   16d6c:	d107      	bne.n	16d7e <bt_att_send+0xa2>
   16d6e:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16d70:	2c00      	cmp	r4, #0
   16d72:	d0ec      	beq.n	16d4e <bt_att_send+0x72>
   16d74:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   16d78:	b922      	cbnz	r2, 16d84 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   16d7a:	3302      	adds	r3, #2
   16d7c:	d0e9      	beq.n	16d52 <bt_att_send+0x76>
{
   16d7e:	4625      	mov	r5, r4
   16d80:	4614      	mov	r4, r2
   16d82:	e7de      	b.n	16d42 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16d84:	3af0      	subs	r2, #240	; 0xf0
   16d86:	e7f8      	b.n	16d7a <bt_att_send+0x9e>
   16d88:	00034bf1 	.word	0x00034bf1
   16d8c:	000358e1 	.word	0x000358e1
   16d90:	00032659 	.word	0x00032659
   16d94:	00036969 	.word	0x00036969

00016d98 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   16d98:	b510      	push	{r4, lr}
   16d9a:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   16d9c:	b958      	cbnz	r0, 16db6 <bt_att_req_send+0x1e>
   16d9e:	4915      	ldr	r1, [pc, #84]	; (16df4 <bt_att_req_send+0x5c>)
   16da0:	f640 63ba 	movw	r3, #3770	; 0xeba
   16da4:	4a14      	ldr	r2, [pc, #80]	; (16df8 <bt_att_req_send+0x60>)
   16da6:	4815      	ldr	r0, [pc, #84]	; (16dfc <bt_att_req_send+0x64>)
   16da8:	f013 fc87 	bl	2a6ba <assert_print>
   16dac:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   16db0:	4811      	ldr	r0, [pc, #68]	; (16df8 <bt_att_req_send+0x60>)
   16db2:	f013 fc7b 	bl	2a6ac <assert_post_action>
   16db6:	b949      	cbnz	r1, 16dcc <bt_att_req_send+0x34>
   16db8:	4911      	ldr	r1, [pc, #68]	; (16e00 <bt_att_req_send+0x68>)
   16dba:	f640 63bb 	movw	r3, #3771	; 0xebb
   16dbe:	4a0e      	ldr	r2, [pc, #56]	; (16df8 <bt_att_req_send+0x60>)
   16dc0:	480e      	ldr	r0, [pc, #56]	; (16dfc <bt_att_req_send+0x64>)
   16dc2:	f013 fc7a 	bl	2a6ba <assert_print>
   16dc6:	f640 61bb 	movw	r1, #3771	; 0xebb
   16dca:	e7f1      	b.n	16db0 <bt_att_req_send+0x18>

	att = att_get(conn);
   16dcc:	f7ff f8a6 	bl	15f1c <att_get>
	if (!att) {
   16dd0:	b160      	cbz	r0, 16dec <bt_att_req_send+0x54>
	parent->next = child;
   16dd2:	2300      	movs	r3, #0
   16dd4:	6023      	str	r3, [r4, #0]
	return list->tail;
   16dd6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   16dd8:	b92b      	cbnz	r3, 16de6 <bt_att_req_send+0x4e>
	list->head = node;
   16dda:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   16dde:	f015 ffb6 	bl	2cd4e <att_req_send_process>

	return 0;
   16de2:	2000      	movs	r0, #0
}
   16de4:	bd10      	pop	{r4, pc}
	parent->next = child;
   16de6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16de8:	6084      	str	r4, [r0, #8]
}
   16dea:	e7f8      	b.n	16dde <bt_att_req_send+0x46>
		return -ENOTCONN;
   16dec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16df0:	e7f8      	b.n	16de4 <bt_att_req_send+0x4c>
   16df2:	bf00      	nop
   16df4:	00034bf1 	.word	0x00034bf1
   16df8:	000358e1 	.word	0x000358e1
   16dfc:	00032659 	.word	0x00032659
   16e00:	00035990 	.word	0x00035990

00016e04 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16e04:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16e06:	4606      	mov	r6, r0
   16e08:	4d13      	ldr	r5, [pc, #76]	; (16e58 <find_cf_cfg+0x54>)
   16e0a:	b140      	cbz	r0, 16e1e <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16e0c:	462a      	mov	r2, r5
   16e0e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16e12:	1e6c      	subs	r4, r5, #1
   16e14:	f015 fc39 	bl	2c68a <bt_conn_is_peer_addr_le>
   16e18:	b198      	cbz	r0, 16e42 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e1a:	4620      	mov	r0, r4
   16e1c:	e00c      	b.n	16e38 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16e1e:	4628      	mov	r0, r5
   16e20:	490e      	ldr	r1, [pc, #56]	; (16e5c <find_cf_cfg+0x58>)
   16e22:	f016 f9d2 	bl	2d1ca <bt_addr_le_eq>
   16e26:	b940      	cbnz	r0, 16e3a <find_cf_cfg+0x36>
   16e28:	490c      	ldr	r1, [pc, #48]	; (16e5c <find_cf_cfg+0x58>)
   16e2a:	f105 0010 	add.w	r0, r5, #16
   16e2e:	f016 f9cc 	bl	2d1ca <bt_addr_le_eq>
   16e32:	b120      	cbz	r0, 16e3e <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e34:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   16e38:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e3a:	1e68      	subs	r0, r5, #1
   16e3c:	e7fc      	b.n	16e38 <find_cf_cfg+0x34>
	return NULL;
   16e3e:	2000      	movs	r0, #0
   16e40:	e7fa      	b.n	16e38 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16e42:	4630      	mov	r0, r6
   16e44:	7c21      	ldrb	r1, [r4, #16]
   16e46:	f104 0211 	add.w	r2, r4, #17
   16e4a:	f015 fc1e 	bl	2c68a <bt_conn_is_peer_addr_le>
   16e4e:	2800      	cmp	r0, #0
   16e50:	d0f5      	beq.n	16e3e <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e52:	f104 0010 	add.w	r0, r4, #16
   16e56:	e7ef      	b.n	16e38 <find_cf_cfg+0x34>
   16e58:	200216f9 	.word	0x200216f9
   16e5c:	000345c9 	.word	0x000345c9

00016e60 <find_sc_cfg>:
{
   16e60:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   16e62:	4c0e      	ldr	r4, [pc, #56]	; (16e9c <find_sc_cfg+0x3c>)
{
   16e64:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   16e66:	7823      	ldrb	r3, [r4, #0]
{
   16e68:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   16e6a:	4283      	cmp	r3, r0
   16e6c:	d00c      	beq.n	16e88 <find_sc_cfg+0x28>
   16e6e:	7b23      	ldrb	r3, [r4, #12]
   16e70:	42ab      	cmp	r3, r5
   16e72:	d110      	bne.n	16e96 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16e74:	4631      	mov	r1, r6
   16e76:	480a      	ldr	r0, [pc, #40]	; (16ea0 <find_sc_cfg+0x40>)
   16e78:	f016 f9a7 	bl	2d1ca <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16e7c:	b158      	cbz	r0, 16e96 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16e7e:	2301      	movs	r3, #1
			return &sc_cfg[i];
   16e80:	220c      	movs	r2, #12
   16e82:	fb02 4003 	mla	r0, r2, r3, r4
   16e86:	e007      	b.n	16e98 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16e88:	1c60      	adds	r0, r4, #1
   16e8a:	f016 f99e 	bl	2d1ca <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16e8e:	2800      	cmp	r0, #0
   16e90:	d0ed      	beq.n	16e6e <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16e92:	2300      	movs	r3, #0
   16e94:	e7f4      	b.n	16e80 <find_sc_cfg+0x20>
	return NULL;
   16e96:	2000      	movs	r0, #0
}
   16e98:	bd70      	pop	{r4, r5, r6, pc}
   16e9a:	bf00      	nop
   16e9c:	20021b14 	.word	0x20021b14
   16ea0:	20021b21 	.word	0x20021b21

00016ea4 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   16ea4:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   16ea6:	1c4a      	adds	r2, r1, #1
{
   16ea8:	460c      	mov	r4, r1
		if (conn) {
   16eaa:	b138      	cbz	r0, 16ebc <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   16eac:	7809      	ldrb	r1, [r1, #0]
   16eae:	f015 fbec 	bl	2c68a <bt_conn_is_peer_addr_le>
   16eb2:	b108      	cbz	r0, 16eb8 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   16eb4:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   16eb6:	bd10      	pop	{r4, pc}
	return NULL;
   16eb8:	2000      	movs	r0, #0
   16eba:	e7fc      	b.n	16eb6 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16ebc:	4610      	mov	r0, r2
   16ebe:	4902      	ldr	r1, [pc, #8]	; (16ec8 <find_ccc_cfg+0x24>)
   16ec0:	f016 f983 	bl	2d1ca <bt_addr_le_eq>
   16ec4:	e7f5      	b.n	16eb2 <find_ccc_cfg+0xe>
   16ec6:	bf00      	nop
   16ec8:	000345c9 	.word	0x000345c9

00016ecc <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   16ecc:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   16ece:	4c0e      	ldr	r4, [pc, #56]	; (16f08 <find_cf_cfg_by_addr+0x3c>)
{
   16ed0:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
   16ed2:	7823      	ldrb	r3, [r4, #0]
{
   16ed4:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   16ed6:	4283      	cmp	r3, r0
   16ed8:	d00b      	beq.n	16ef2 <find_cf_cfg_by_addr+0x26>
   16eda:	7c23      	ldrb	r3, [r4, #16]
   16edc:	42b3      	cmp	r3, r6
   16ede:	d110      	bne.n	16f02 <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16ee0:	4628      	mov	r0, r5
   16ee2:	490a      	ldr	r1, [pc, #40]	; (16f0c <find_cf_cfg_by_addr+0x40>)
   16ee4:	f016 f971 	bl	2d1ca <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16ee8:	b158      	cbz	r0, 16f02 <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16eea:	2301      	movs	r3, #1
				return &cf_cfg[i];
   16eec:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   16ef0:	e008      	b.n	16f04 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16ef2:	4628      	mov	r0, r5
   16ef4:	1c61      	adds	r1, r4, #1
   16ef6:	f016 f968 	bl	2d1ca <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16efa:	2800      	cmp	r0, #0
   16efc:	d0ed      	beq.n	16eda <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16efe:	2300      	movs	r3, #0
   16f00:	e7f4      	b.n	16eec <find_cf_cfg_by_addr+0x20>
			}
		}
	}

	return NULL;
   16f02:	2000      	movs	r0, #0
}
   16f04:	bd70      	pop	{r4, r5, r6, pc}
   16f06:	bf00      	nop
   16f08:	200216f8 	.word	0x200216f8
   16f0c:	20021709 	.word	0x20021709

00016f10 <ccc_load>:
{
   16f10:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16f12:	4b20      	ldr	r3, [pc, #128]	; (16f94 <ccc_load+0x84>)
{
   16f14:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16f16:	6882      	ldr	r2, [r0, #8]
   16f18:	429a      	cmp	r2, r3
   16f1a:	d10f      	bne.n	16f3c <ccc_load+0x2c>
	if (!load->entry) {
   16f1c:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   16f1e:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   16f20:	b975      	cbnz	r5, 16f40 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   16f22:	7922      	ldrb	r2, [r4, #4]
   16f24:	4630      	mov	r0, r6
   16f26:	6821      	ldr	r1, [r4, #0]
   16f28:	f016 f957 	bl	2d1da <ccc_find_cfg>
	if (!cfg) {
   16f2c:	4602      	mov	r2, r0
   16f2e:	b128      	cbz	r0, 16f3c <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16f30:	4919      	ldr	r1, [pc, #100]	; (16f98 <ccc_load+0x88>)
   16f32:	3001      	adds	r0, #1
   16f34:	f016 f977 	bl	2d226 <bt_addr_le_copy>
	cfg->id = 0U;
   16f38:	7015      	strb	r5, [r2, #0]
	cfg->value = 0U;
   16f3a:	8115      	strh	r5, [r2, #8]
		return BT_GATT_ITER_CONTINUE;
   16f3c:	2001      	movs	r0, #1
}
   16f3e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   16f40:	68e0      	ldr	r0, [r4, #12]
   16f42:	2800      	cmp	r0, #0
   16f44:	d0fb      	beq.n	16f3e <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   16f46:	882b      	ldrh	r3, [r5, #0]
   16f48:	428b      	cmp	r3, r1
   16f4a:	d00a      	beq.n	16f62 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   16f4c:	d2f6      	bcs.n	16f3c <ccc_load+0x2c>
	load->count--;
   16f4e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   16f50:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   16f52:	3801      	subs	r0, #1
	load->entry++;
   16f54:	3304      	adds	r3, #4
	load->count--;
   16f56:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16f58:	3800      	subs	r0, #0
   16f5a:	bf18      	it	ne
   16f5c:	2001      	movne	r0, #1
	load->entry++;
   16f5e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16f60:	e7ed      	b.n	16f3e <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   16f62:	7922      	ldrb	r2, [r4, #4]
   16f64:	4630      	mov	r0, r6
   16f66:	6821      	ldr	r1, [r4, #0]
   16f68:	f016 f937 	bl	2d1da <ccc_find_cfg>
	if (!cfg) {
   16f6c:	4602      	mov	r2, r0
   16f6e:	b960      	cbnz	r0, 16f8a <ccc_load+0x7a>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   16f70:	4630      	mov	r0, r6
   16f72:	4909      	ldr	r1, [pc, #36]	; (16f98 <ccc_load+0x88>)
   16f74:	f016 f931 	bl	2d1da <ccc_find_cfg>
		if (!cfg) {
   16f78:	4602      	mov	r2, r0
   16f7a:	2800      	cmp	r0, #0
   16f7c:	d0e7      	beq.n	16f4e <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   16f7e:	6821      	ldr	r1, [r4, #0]
   16f80:	3001      	adds	r0, #1
   16f82:	f016 f950 	bl	2d226 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   16f86:	7923      	ldrb	r3, [r4, #4]
   16f88:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   16f8a:	68a3      	ldr	r3, [r4, #8]
   16f8c:	885b      	ldrh	r3, [r3, #2]
   16f8e:	8113      	strh	r3, [r2, #8]
   16f90:	e7dd      	b.n	16f4e <ccc_load+0x3e>
   16f92:	bf00      	nop
   16f94:	000176cd 	.word	0x000176cd
   16f98:	000345c9 	.word	0x000345c9

00016f9c <read_ppcp>:
{
   16f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16f9e:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16fa0:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   16fa4:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16fa6:	4a06      	ldr	r2, [pc, #24]	; (16fc0 <read_ppcp+0x24>)
   16fa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   16fac:	2308      	movs	r3, #8
   16fae:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   16fb2:	9300      	str	r3, [sp, #0]
   16fb4:	446b      	add	r3, sp
   16fb6:	f016 f942 	bl	2d23e <bt_gatt_attr_read.constprop.0>
}
   16fba:	b005      	add	sp, #20
   16fbc:	f85d fb04 	ldr.w	pc, [sp], #4
   16fc0:	00280018 	.word	0x00280018

00016fc4 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   16fc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			LOG_ERR("Invalid key");
   16fc6:	4b07      	ldr	r3, [pc, #28]	; (16fe4 <ccc_set_direct.part.0+0x20>)
   16fc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16fcc:	9305      	str	r3, [sp, #20]
   16fce:	2302      	movs	r3, #2
   16fd0:	4805      	ldr	r0, [pc, #20]	; (16fe8 <ccc_set_direct.part.0+0x24>)
   16fd2:	aa04      	add	r2, sp, #16
   16fd4:	9304      	str	r3, [sp, #16]
   16fd6:	f016 f9ba 	bl	2d34e <z_log_msg_static_create.constprop.0>
}
   16fda:	f06f 0015 	mvn.w	r0, #21
   16fde:	b007      	add	sp, #28
   16fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   16fe4:	00035b6b 	.word	0x00035b6b
   16fe8:	000314d4 	.word	0x000314d4

00016fec <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   16fec:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16fee:	2108      	movs	r1, #8
   16ff0:	af00      	add	r7, sp, #0
   16ff2:	480f      	ldr	r0, [pc, #60]	; (17030 <db_hash_commit+0x44>)
   16ff4:	f016 f901 	bl	2d1fa <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   16ff8:	2200      	movs	r2, #0
   16ffa:	2300      	movs	r3, #0
   16ffc:	480d      	ldr	r0, [pc, #52]	; (17034 <db_hash_commit+0x48>)
   16ffe:	f7fa fee5 	bl	11dcc <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   17002:	1e04      	subs	r4, r0, #0
   17004:	da11      	bge.n	1702a <db_hash_commit+0x3e>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   17006:	466d      	mov	r5, sp
   17008:	b088      	sub	sp, #32
   1700a:	466a      	mov	r2, sp
   1700c:	4b0a      	ldr	r3, [pc, #40]	; (17038 <db_hash_commit+0x4c>)
   1700e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17012:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17016:	2303      	movs	r3, #3
   17018:	4808      	ldr	r0, [pc, #32]	; (1703c <db_hash_commit+0x50>)
   1701a:	f842 3f10 	str.w	r3, [r2, #16]!
   1701e:	f016 f996 	bl	2d34e <z_log_msg_static_create.constprop.0>
   17022:	46ad      	mov	sp, r5
	}

	return err;
}
   17024:	4620      	mov	r0, r4
   17026:	46bd      	mov	sp, r7
   17028:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1702a:	2400      	movs	r4, #0
	return err;
   1702c:	e7fa      	b.n	17024 <db_hash_commit+0x38>
   1702e:	bf00      	nop
   17030:	20009f70 	.word	0x20009f70
   17034:	20009ec8 	.word	0x20009ec8
   17038:	00035b77 	.word	0x00035b77
   1703c:	000314d4 	.word	0x000314d4

00017040 <sc_set>:
{
   17040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17044:	b08b      	sub	sp, #44	; 0x2c
   17046:	460e      	mov	r6, r1
   17048:	4690      	mov	r8, r2
   1704a:	4699      	mov	r9, r3
	if (!name) {
   1704c:	4604      	mov	r4, r0
{
   1704e:	af00      	add	r7, sp, #0
	if (!name) {
   17050:	b988      	cbnz	r0, 17076 <sc_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   17052:	4b43      	ldr	r3, [pc, #268]	; (17160 <sc_set+0x120>)
   17054:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17058:	627b      	str	r3, [r7, #36]	; 0x24
   1705a:	2302      	movs	r3, #2
   1705c:	4841      	ldr	r0, [pc, #260]	; (17164 <sc_set+0x124>)
   1705e:	623b      	str	r3, [r7, #32]
   17060:	f107 0220 	add.w	r2, r7, #32
   17064:	f016 f973 	bl	2d34e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17068:	f06f 0515 	mvn.w	r5, #21
}
   1706c:	4628      	mov	r0, r5
   1706e:	372c      	adds	r7, #44	; 0x2c
   17070:	46bd      	mov	sp, r7
   17072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   17076:	f107 0108 	add.w	r1, r7, #8
   1707a:	f014 fee6 	bl	2be4a <bt_settings_decode_key>
	if (err) {
   1707e:	4605      	mov	r5, r0
   17080:	b190      	cbz	r0, 170a8 <sc_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   17082:	466d      	mov	r5, sp
   17084:	b088      	sub	sp, #32
   17086:	466a      	mov	r2, sp
   17088:	4b37      	ldr	r3, [pc, #220]	; (17168 <sc_set+0x128>)
   1708a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1708e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17092:	f44f 7300 	mov.w	r3, #512	; 0x200
   17096:	8393      	strh	r3, [r2, #28]
   17098:	4b34      	ldr	r3, [pc, #208]	; (1716c <sc_set+0x12c>)
   1709a:	4832      	ldr	r0, [pc, #200]	; (17164 <sc_set+0x124>)
   1709c:	f842 3f10 	str.w	r3, [r2, #16]!
   170a0:	f016 f955 	bl	2d34e <z_log_msg_static_create.constprop.0>
   170a4:	46ad      	mov	sp, r5
		return -EINVAL;
   170a6:	e7df      	b.n	17068 <sc_set+0x28>
	settings_name_next(name, &next);
   170a8:	4620      	mov	r0, r4
   170aa:	1d39      	adds	r1, r7, #4
   170ac:	f014 f927 	bl	2b2fe <settings_name_next>
	if (!next) {
   170b0:	6878      	ldr	r0, [r7, #4]
   170b2:	b1a0      	cbz	r0, 170de <sc_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   170b4:	220a      	movs	r2, #10
   170b6:	4629      	mov	r1, r5
   170b8:	f011 ffae 	bl	29018 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   170bc:	b178      	cbz	r0, 170de <sc_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   170be:	466c      	mov	r4, sp
   170c0:	b088      	sub	sp, #32
   170c2:	466a      	mov	r2, sp
   170c4:	4b2a      	ldr	r3, [pc, #168]	; (17170 <sc_set+0x130>)
   170c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   170ca:	e9c2 3005 	strd	r3, r0, [r2, #20]
   170ce:	2303      	movs	r3, #3
   170d0:	4824      	ldr	r0, [pc, #144]	; (17164 <sc_set+0x124>)
   170d2:	f842 3f10 	str.w	r3, [r2, #16]!
   170d6:	f016 f93a 	bl	2d34e <z_log_msg_static_create.constprop.0>
   170da:	46a5      	mov	sp, r4
			return -EINVAL;
   170dc:	e7c4      	b.n	17068 <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   170de:	2000      	movs	r0, #0
   170e0:	f107 0108 	add.w	r1, r7, #8
   170e4:	f7ff febc 	bl	16e60 <find_sc_cfg>
	if (!cfg && len_rd) {
   170e8:	4604      	mov	r4, r0
   170ea:	bb98      	cbnz	r0, 17154 <sc_set+0x114>
   170ec:	2e00      	cmp	r6, #0
   170ee:	d0bd      	beq.n	1706c <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   170f0:	4920      	ldr	r1, [pc, #128]	; (17174 <sc_set+0x134>)
   170f2:	f7ff feb5 	bl	16e60 <find_sc_cfg>
		if (!cfg) {
   170f6:	4604      	mov	r4, r0
   170f8:	b968      	cbnz	r0, 17116 <sc_set+0xd6>
			LOG_ERR("Unable to restore SC: no cfg left");
   170fa:	4b1f      	ldr	r3, [pc, #124]	; (17178 <sc_set+0x138>)
   170fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17100:	627b      	str	r3, [r7, #36]	; 0x24
   17102:	2302      	movs	r3, #2
   17104:	4817      	ldr	r0, [pc, #92]	; (17164 <sc_set+0x124>)
   17106:	623b      	str	r3, [r7, #32]
   17108:	f107 0220 	add.w	r2, r7, #32
   1710c:	f016 f91f 	bl	2d34e <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   17110:	f06f 050b 	mvn.w	r5, #11
   17114:	e7aa      	b.n	1706c <sc_set+0x2c>
		cfg->id = id;
   17116:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   17118:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   1711c:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   17120:	f016 f881 	bl	2d226 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   17124:	f104 0108 	add.w	r1, r4, #8
   17128:	2204      	movs	r2, #4
   1712a:	4648      	mov	r0, r9
   1712c:	47c0      	blx	r8
		if (len < 0) {
   1712e:	1e04      	subs	r4, r0, #0
   17130:	da9c      	bge.n	1706c <sc_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   17132:	466d      	mov	r5, sp
   17134:	b088      	sub	sp, #32
   17136:	466a      	mov	r2, sp
   17138:	4b10      	ldr	r3, [pc, #64]	; (1717c <sc_set+0x13c>)
   1713a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1713e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17142:	2303      	movs	r3, #3
   17144:	4807      	ldr	r0, [pc, #28]	; (17164 <sc_set+0x124>)
   17146:	f842 3f10 	str.w	r3, [r2, #16]!
   1714a:	f016 f900 	bl	2d34e <z_log_msg_static_create.constprop.0>
   1714e:	46ad      	mov	sp, r5
			return len;
   17150:	4625      	mov	r5, r4
   17152:	e78b      	b.n	1706c <sc_set+0x2c>
	if (len_rd) {
   17154:	2e00      	cmp	r6, #0
   17156:	d1e5      	bne.n	17124 <sc_set+0xe4>
   17158:	6006      	str	r6, [r0, #0]
   1715a:	6046      	str	r6, [r0, #4]
   1715c:	6086      	str	r6, [r0, #8]
   1715e:	e785      	b.n	1706c <sc_set+0x2c>
   17160:	0003461f 	.word	0x0003461f
   17164:	000314d4 	.word	0x000314d4
   17168:	00035bab 	.word	0x00035bab
   1716c:	01000003 	.word	0x01000003
   17170:	00035bc7 	.word	0x00035bc7
   17174:	000345c9 	.word	0x000345c9
   17178:	00035be2 	.word	0x00035be2
   1717c:	00035c04 	.word	0x00035c04

00017180 <bt_gatt_clear_sc>:
{
   17180:	b5b0      	push	{r4, r5, r7, lr}
   17182:	b08c      	sub	sp, #48	; 0x30
   17184:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   17186:	f7ff fe6b 	bl	16e60 <find_sc_cfg>
	if (!cfg) {
   1718a:	4604      	mov	r4, r0
   1718c:	b320      	cbz	r0, 171d8 <bt_gatt_clear_sc+0x58>
		if (cfg->id) {
   1718e:	4605      	mov	r5, r0
   17190:	f815 2b01 	ldrb.w	r2, [r5], #1
   17194:	b322      	cbz	r2, 171e0 <bt_gatt_clear_sc+0x60>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   17196:	2104      	movs	r1, #4
   17198:	4638      	mov	r0, r7
   1719a:	f013 f83e 	bl	2a21a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1719e:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   171a0:	1d38      	adds	r0, r7, #4
   171a2:	462b      	mov	r3, r5
   171a4:	2124      	movs	r1, #36	; 0x24
   171a6:	4a0f      	ldr	r2, [pc, #60]	; (171e4 <bt_gatt_clear_sc+0x64>)
   171a8:	f7fa fd56 	bl	11c58 <bt_settings_encode_key>
		err = settings_delete(key);
   171ac:	1d38      	adds	r0, r7, #4
   171ae:	f014 f87e 	bl	2b2ae <settings_delete>
		if (err) {
   171b2:	b170      	cbz	r0, 171d2 <bt_gatt_clear_sc+0x52>
			LOG_ERR("failed to delete SC (err %d)", err);
   171b4:	466d      	mov	r5, sp
   171b6:	b088      	sub	sp, #32
   171b8:	aa02      	add	r2, sp, #8
   171ba:	4b0b      	ldr	r3, [pc, #44]	; (171e8 <bt_gatt_clear_sc+0x68>)
   171bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   171c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   171c4:	2303      	movs	r3, #3
   171c6:	4809      	ldr	r0, [pc, #36]	; (171ec <bt_gatt_clear_sc+0x6c>)
   171c8:	f842 3f10 	str.w	r3, [r2, #16]!
   171cc:	f016 f8bf 	bl	2d34e <z_log_msg_static_create.constprop.0>
   171d0:	46ad      	mov	sp, r5
	clear_sc_cfg(cfg);
   171d2:	4620      	mov	r0, r4
   171d4:	f016 f82e 	bl	2d234 <clear_sc_cfg>
}
   171d8:	2000      	movs	r0, #0
   171da:	3728      	adds	r7, #40	; 0x28
   171dc:	46bd      	mov	sp, r7
   171de:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   171e0:	9200      	str	r2, [sp, #0]
   171e2:	e7dd      	b.n	171a0 <bt_gatt_clear_sc+0x20>
   171e4:	00035fb5 	.word	0x00035fb5
   171e8:	00035c25 	.word	0x00035c25
   171ec:	000314d4 	.word	0x000314d4

000171f0 <sc_clear>:
{
   171f0:	b5b0      	push	{r4, r5, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171f2:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   171f6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171f8:	4629      	mov	r1, r5
   171fa:	7a00      	ldrb	r0, [r0, #8]
{
   171fc:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171fe:	f014 ffa4 	bl	2c14a <bt_addr_le_is_bonded>
   17202:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   17204:	4629      	mov	r1, r5
   17206:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17208:	b19b      	cbz	r3, 17232 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1720a:	f7ff ffb9 	bl	17180 <bt_gatt_clear_sc>
		if (err) {
   1720e:	b170      	cbz	r0, 1722e <sc_clear+0x3e>
			LOG_ERR("Failed to clear SC %d", err);
   17210:	466c      	mov	r4, sp
   17212:	b088      	sub	sp, #32
   17214:	466a      	mov	r2, sp
   17216:	4b0a      	ldr	r3, [pc, #40]	; (17240 <sc_clear+0x50>)
   17218:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1721c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17220:	2303      	movs	r3, #3
   17222:	4808      	ldr	r0, [pc, #32]	; (17244 <sc_clear+0x54>)
   17224:	f842 3f10 	str.w	r3, [r2, #16]!
   17228:	f016 f891 	bl	2d34e <z_log_msg_static_create.constprop.0>
   1722c:	46a5      	mov	sp, r4
}
   1722e:	46bd      	mov	sp, r7
   17230:	bdb0      	pop	{r4, r5, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17232:	f7ff fe15 	bl	16e60 <find_sc_cfg>
		if (cfg) {
   17236:	2800      	cmp	r0, #0
   17238:	d0f9      	beq.n	1722e <sc_clear+0x3e>
			clear_sc_cfg(cfg);
   1723a:	f015 fffb 	bl	2d234 <clear_sc_cfg>
}
   1723e:	e7f6      	b.n	1722e <sc_clear+0x3e>
   17240:	00035c42 	.word	0x00035c42
   17244:	000314d4 	.word	0x000314d4

00017248 <sc_store>:
{
   17248:	b5b0      	push	{r4, r5, r7, lr}
   1724a:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1724c:	4605      	mov	r5, r0
   1724e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   17252:	4604      	mov	r4, r0
   17254:	af02      	add	r7, sp, #8
	if (cfg->id) {
   17256:	b31a      	cbz	r2, 172a0 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   17258:	2104      	movs	r1, #4
   1725a:	4638      	mov	r0, r7
   1725c:	f012 ffdd 	bl	2a21a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   17260:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   17262:	2124      	movs	r1, #36	; 0x24
   17264:	4a0f      	ldr	r2, [pc, #60]	; (172a4 <sc_store+0x5c>)
   17266:	1d38      	adds	r0, r7, #4
   17268:	462b      	mov	r3, r5
   1726a:	f7fa fcf5 	bl	11c58 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1726e:	2204      	movs	r2, #4
   17270:	f104 0108 	add.w	r1, r4, #8
   17274:	18b8      	adds	r0, r7, r2
   17276:	f7f8 fda5 	bl	fdc4 <settings_save_one>
	if (err) {
   1727a:	b170      	cbz	r0, 1729a <sc_store+0x52>
		LOG_ERR("failed to store SC (err %d)", err);
   1727c:	466c      	mov	r4, sp
   1727e:	b088      	sub	sp, #32
   17280:	aa02      	add	r2, sp, #8
   17282:	4b09      	ldr	r3, [pc, #36]	; (172a8 <sc_store+0x60>)
   17284:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17288:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1728c:	2303      	movs	r3, #3
   1728e:	4807      	ldr	r0, [pc, #28]	; (172ac <sc_store+0x64>)
   17290:	f842 3f10 	str.w	r3, [r2, #16]!
   17294:	f016 f85b 	bl	2d34e <z_log_msg_static_create.constprop.0>
   17298:	46a5      	mov	sp, r4
}
   1729a:	3728      	adds	r7, #40	; 0x28
   1729c:	46bd      	mov	sp, r7
   1729e:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   172a0:	9200      	str	r2, [sp, #0]
   172a2:	e7de      	b.n	17262 <sc_store+0x1a>
   172a4:	00035fb5 	.word	0x00035fb5
   172a8:	00035c58 	.word	0x00035c58
   172ac:	000314d4 	.word	0x000314d4

000172b0 <sc_save>:
{
   172b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172b4:	b086      	sub	sp, #24
   172b6:	4680      	mov	r8, r0
   172b8:	460f      	mov	r7, r1
   172ba:	4616      	mov	r6, r2
   172bc:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   172be:	f7ff fdcf 	bl	16e60 <find_sc_cfg>
	if (!cfg) {
   172c2:	4604      	mov	r4, r0
   172c4:	b9b0      	cbnz	r0, 172f4 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   172c6:	4919      	ldr	r1, [pc, #100]	; (1732c <sc_save+0x7c>)
   172c8:	f7ff fdca 	bl	16e60 <find_sc_cfg>
		if (!cfg) {
   172cc:	4604      	mov	r4, r0
   172ce:	b960      	cbnz	r0, 172ea <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   172d0:	4b17      	ldr	r3, [pc, #92]	; (17330 <sc_save+0x80>)
   172d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   172d6:	9305      	str	r3, [sp, #20]
   172d8:	2302      	movs	r3, #2
   172da:	4816      	ldr	r0, [pc, #88]	; (17334 <sc_save+0x84>)
   172dc:	aa04      	add	r2, sp, #16
   172de:	9304      	str	r3, [sp, #16]
   172e0:	f016 f835 	bl	2d34e <z_log_msg_static_create.constprop.0>
}
   172e4:	b006      	add	sp, #24
   172e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   172ea:	4639      	mov	r1, r7
		cfg->id = id;
   172ec:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   172f0:	f015 ff99 	bl	2d226 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   172f4:	8922      	ldrh	r2, [r4, #8]
   172f6:	8963      	ldrh	r3, [r4, #10]
   172f8:	b97a      	cbnz	r2, 1731a <sc_save+0x6a>
   172fa:	b983      	cbnz	r3, 1731e <sc_save+0x6e>
		cfg->data.start = start;
   172fc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   172fe:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   17300:	4621      	mov	r1, r4
   17302:	f811 0b01 	ldrb.w	r0, [r1], #1
   17306:	f014 ff20 	bl	2c14a <bt_addr_le_is_bonded>
   1730a:	2800      	cmp	r0, #0
   1730c:	d0ea      	beq.n	172e4 <sc_save+0x34>
		sc_store(cfg);
   1730e:	4620      	mov	r0, r4
}
   17310:	b006      	add	sp, #24
   17312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   17316:	f7ff bf97 	b.w	17248 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1731a:	4296      	cmp	r6, r2
   1731c:	d302      	bcc.n	17324 <sc_save+0x74>
   1731e:	429d      	cmp	r5, r3
   17320:	d8ed      	bhi.n	172fe <sc_save+0x4e>
   17322:	e7df      	b.n	172e4 <sc_save+0x34>
	if (*end < new_end) {
   17324:	429d      	cmp	r5, r3
		*start = new_start;
   17326:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   17328:	d9ea      	bls.n	17300 <sc_save+0x50>
   1732a:	e7e8      	b.n	172fe <sc_save+0x4e>
   1732c:	000345c9 	.word	0x000345c9
   17330:	00035c74 	.word	0x00035c74
   17334:	000314d4 	.word	0x000314d4

00017338 <cf_write>:
{
   17338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1733c:	b086      	sub	sp, #24
   1733e:	461f      	mov	r7, r3
   17340:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   17344:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   17346:	2b01      	cmp	r3, #1
{
   17348:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1734a:	d83c      	bhi.n	173c6 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1734c:	443b      	add	r3, r7
   1734e:	2b01      	cmp	r3, #1
   17350:	463d      	mov	r5, r7
   17352:	dc3b      	bgt.n	173cc <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   17354:	f7ff fd56 	bl	16e04 <find_cf_cfg>
	if (!cfg) {
   17358:	4604      	mov	r4, r0
   1735a:	b998      	cbnz	r0, 17384 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1735c:	f7ff fd52 	bl	16e04 <find_cf_cfg>
	if (!cfg) {
   17360:	4604      	mov	r4, r0
   17362:	b978      	cbnz	r0, 17384 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   17364:	4b1c      	ldr	r3, [pc, #112]	; (173d8 <cf_write+0xa0>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17366:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1736a:	9305      	str	r3, [sp, #20]
   1736c:	2302      	movs	r3, #2
   1736e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17372:	481a      	ldr	r0, [pc, #104]	; (173dc <cf_write+0xa4>)
   17374:	aa04      	add	r2, sp, #16
   17376:	9304      	str	r3, [sp, #16]
   17378:	f015 ffe9 	bl	2d34e <z_log_msg_static_create.constprop.0>
}
   1737c:	4628      	mov	r0, r5
   1737e:	b006      	add	sp, #24
   17380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17384:	b197      	cbz	r7, 173ac <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   17386:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17388:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1738a:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1738e:	fa21 f003 	lsr.w	r0, r1, r3
   17392:	07c7      	lsls	r7, r0, #31
   17394:	d503      	bpl.n	1739e <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   17396:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1739a:	07c0      	lsls	r0, r0, #31
   1739c:	d519      	bpl.n	173d2 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1739e:	3301      	adds	r3, #1
   173a0:	2b03      	cmp	r3, #3
   173a2:	d1f4      	bne.n	1738e <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   173a4:	f002 0207 	and.w	r2, r2, #7
   173a8:	4311      	orrs	r1, r2
   173aa:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   173ac:	f106 0190 	add.w	r1, r6, #144	; 0x90
   173b0:	1c60      	adds	r0, r4, #1
   173b2:	f015 ff38 	bl	2d226 <bt_addr_le_copy>
	cfg->id = conn->id;
   173b6:	4620      	mov	r0, r4
   173b8:	7a33      	ldrb	r3, [r6, #8]
   173ba:	2101      	movs	r1, #1
   173bc:	f800 3b0c 	strb.w	r3, [r0], #12
   173c0:	f015 ff1b 	bl	2d1fa <atomic_or>
}
   173c4:	e7da      	b.n	1737c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   173c6:	f06f 0506 	mvn.w	r5, #6
   173ca:	e7d7      	b.n	1737c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   173cc:	f06f 050c 	mvn.w	r5, #12
   173d0:	e7d4      	b.n	1737c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   173d2:	f06f 0512 	mvn.w	r5, #18
   173d6:	e7d1      	b.n	1737c <cf_write+0x44>
   173d8:	00035c93 	.word	0x00035c93
   173dc:	000314d4 	.word	0x000314d4

000173e0 <db_hash_store>:
{
   173e0:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   173e2:	2210      	movs	r2, #16
{
   173e4:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   173e6:	490b      	ldr	r1, [pc, #44]	; (17414 <db_hash_store+0x34>)
   173e8:	480b      	ldr	r0, [pc, #44]	; (17418 <db_hash_store+0x38>)
   173ea:	f7f8 fceb 	bl	fdc4 <settings_save_one>
	if (err) {
   173ee:	b170      	cbz	r0, 1740e <db_hash_store+0x2e>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   173f0:	466c      	mov	r4, sp
   173f2:	b088      	sub	sp, #32
   173f4:	466a      	mov	r2, sp
   173f6:	4b09      	ldr	r3, [pc, #36]	; (1741c <db_hash_store+0x3c>)
   173f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   173fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17400:	2303      	movs	r3, #3
   17402:	4807      	ldr	r0, [pc, #28]	; (17420 <db_hash_store+0x40>)
   17404:	f842 3f10 	str.w	r3, [r2, #16]!
   17408:	f015 ffa1 	bl	2d34e <z_log_msg_static_create.constprop.0>
   1740c:	46a5      	mov	sp, r4
}
   1740e:	46bd      	mov	sp, r7
   17410:	bd98      	pop	{r3, r4, r7, pc}
   17412:	bf00      	nop
   17414:	20009ea8 	.word	0x20009ea8
   17418:	00035cbf 	.word	0x00035cbf
   1741c:	00035cc7 	.word	0x00035cc7
   17420:	000314d4 	.word	0x000314d4

00017424 <db_hash_set>:
{
   17424:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17426:	4618      	mov	r0, r3
{
   17428:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1742a:	490d      	ldr	r1, [pc, #52]	; (17460 <db_hash_set+0x3c>)
   1742c:	2210      	movs	r2, #16
{
   1742e:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17430:	47a0      	blx	r4
	if (len < 0) {
   17432:	1e04      	subs	r4, r0, #0
   17434:	da11      	bge.n	1745a <db_hash_set+0x36>
		LOG_ERR("Failed to decode value (err %zd)", len);
   17436:	466d      	mov	r5, sp
   17438:	b088      	sub	sp, #32
   1743a:	466a      	mov	r2, sp
   1743c:	4b09      	ldr	r3, [pc, #36]	; (17464 <db_hash_set+0x40>)
   1743e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17442:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17446:	2303      	movs	r3, #3
   17448:	4807      	ldr	r0, [pc, #28]	; (17468 <db_hash_set+0x44>)
   1744a:	f842 3f10 	str.w	r3, [r2, #16]!
   1744e:	f015 ff7e 	bl	2d34e <z_log_msg_static_create.constprop.0>
   17452:	46ad      	mov	sp, r5
}
   17454:	4620      	mov	r0, r4
   17456:	46bd      	mov	sp, r7
   17458:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1745a:	2400      	movs	r4, #0
   1745c:	e7fa      	b.n	17454 <db_hash_set+0x30>
   1745e:	bf00      	nop
   17460:	20009eb8 	.word	0x20009eb8
   17464:	00035c04 	.word	0x00035c04
   17468:	000314d4 	.word	0x000314d4

0001746c <clear_cf_cfg>:
{
   1746c:	4602      	mov	r2, r0
   1746e:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17470:	4907      	ldr	r1, [pc, #28]	; (17490 <clear_cf_cfg+0x24>)
   17472:	3001      	adds	r0, #1
   17474:	f015 fed7 	bl	2d226 <bt_addr_le_copy>
   17478:	2300      	movs	r3, #0
   1747a:	320c      	adds	r2, #12
   1747c:	f802 3c04 	strb.w	r3, [r2, #-4]
   17480:	e8d2 1fef 	ldaex	r1, [r2]
   17484:	e8c2 3fe0 	stlex	r0, r3, [r2]
   17488:	2800      	cmp	r0, #0
   1748a:	d1f9      	bne.n	17480 <clear_cf_cfg+0x14>
}
   1748c:	bd08      	pop	{r3, pc}
   1748e:	bf00      	nop
   17490:	000345c9 	.word	0x000345c9

00017494 <cf_set>:
{
   17494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17498:	b08b      	sub	sp, #44	; 0x2c
   1749a:	4689      	mov	r9, r1
   1749c:	4616      	mov	r6, r2
   1749e:	4698      	mov	r8, r3
	if (!name) {
   174a0:	4604      	mov	r4, r0
{
   174a2:	af00      	add	r7, sp, #0
	if (!name) {
   174a4:	b988      	cbnz	r0, 174ca <cf_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   174a6:	4b42      	ldr	r3, [pc, #264]	; (175b0 <cf_set+0x11c>)
   174a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   174ac:	627b      	str	r3, [r7, #36]	; 0x24
   174ae:	2302      	movs	r3, #2
   174b0:	4840      	ldr	r0, [pc, #256]	; (175b4 <cf_set+0x120>)
   174b2:	623b      	str	r3, [r7, #32]
   174b4:	f107 0220 	add.w	r2, r7, #32
   174b8:	f015 ff49 	bl	2d34e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   174bc:	f06f 0515 	mvn.w	r5, #21
}
   174c0:	4628      	mov	r0, r5
   174c2:	372c      	adds	r7, #44	; 0x2c
   174c4:	46bd      	mov	sp, r7
   174c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   174ca:	f107 0108 	add.w	r1, r7, #8
   174ce:	f014 fcbc 	bl	2be4a <bt_settings_decode_key>
	if (err) {
   174d2:	4605      	mov	r5, r0
   174d4:	b190      	cbz	r0, 174fc <cf_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   174d6:	466d      	mov	r5, sp
   174d8:	b088      	sub	sp, #32
   174da:	466a      	mov	r2, sp
   174dc:	4b36      	ldr	r3, [pc, #216]	; (175b8 <cf_set+0x124>)
   174de:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   174e2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   174e6:	f44f 7300 	mov.w	r3, #512	; 0x200
   174ea:	8393      	strh	r3, [r2, #28]
   174ec:	4b33      	ldr	r3, [pc, #204]	; (175bc <cf_set+0x128>)
   174ee:	4831      	ldr	r0, [pc, #196]	; (175b4 <cf_set+0x120>)
   174f0:	f842 3f10 	str.w	r3, [r2, #16]!
   174f4:	f015 ff2b 	bl	2d34e <z_log_msg_static_create.constprop.0>
   174f8:	46ad      	mov	sp, r5
		return -EINVAL;
   174fa:	e7df      	b.n	174bc <cf_set+0x28>
	settings_name_next(name, &next);
   174fc:	4620      	mov	r0, r4
   174fe:	1d39      	adds	r1, r7, #4
   17500:	f013 fefd 	bl	2b2fe <settings_name_next>
	if (!next) {
   17504:	6878      	ldr	r0, [r7, #4]
   17506:	b1a0      	cbz	r0, 17532 <cf_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   17508:	220a      	movs	r2, #10
   1750a:	4629      	mov	r1, r5
   1750c:	f011 fd84 	bl	29018 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   17510:	b178      	cbz	r0, 17532 <cf_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   17512:	466c      	mov	r4, sp
   17514:	b088      	sub	sp, #32
   17516:	466a      	mov	r2, sp
   17518:	4b29      	ldr	r3, [pc, #164]	; (175c0 <cf_set+0x12c>)
   1751a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1751e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17522:	2303      	movs	r3, #3
   17524:	4823      	ldr	r0, [pc, #140]	; (175b4 <cf_set+0x120>)
   17526:	f842 3f10 	str.w	r3, [r2, #16]!
   1752a:	f015 ff10 	bl	2d34e <z_log_msg_static_create.constprop.0>
   1752e:	46a5      	mov	sp, r4
			return -EINVAL;
   17530:	e7c4      	b.n	174bc <cf_set+0x28>
	cfg = find_cf_cfg_by_addr(id, &addr);
   17532:	2000      	movs	r0, #0
   17534:	f107 0108 	add.w	r1, r7, #8
   17538:	f7ff fcc8 	bl	16ecc <find_cf_cfg_by_addr>
	if (!cfg) {
   1753c:	4604      	mov	r4, r0
   1753e:	b9c0      	cbnz	r0, 17572 <cf_set+0xde>
		cfg = find_cf_cfg(NULL);
   17540:	f7ff fc60 	bl	16e04 <find_cf_cfg>
		if (!cfg) {
   17544:	4604      	mov	r4, r0
   17546:	b968      	cbnz	r0, 17564 <cf_set+0xd0>
			LOG_ERR("Unable to restore CF: no cfg left");
   17548:	4b1e      	ldr	r3, [pc, #120]	; (175c4 <cf_set+0x130>)
   1754a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1754e:	627b      	str	r3, [r7, #36]	; 0x24
   17550:	2302      	movs	r3, #2
   17552:	4818      	ldr	r0, [pc, #96]	; (175b4 <cf_set+0x120>)
   17554:	623b      	str	r3, [r7, #32]
   17556:	f107 0220 	add.w	r2, r7, #32
   1755a:	f015 fef8 	bl	2d34e <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1755e:	f06f 050b 	mvn.w	r5, #11
   17562:	e7ad      	b.n	174c0 <cf_set+0x2c>
		cfg->id = id;
   17564:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   17566:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   1756a:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1756e:	f015 fe5a 	bl	2d226 <bt_addr_le_copy>
	if (len_rd) {
   17572:	f1b9 0f00 	cmp.w	r9, #0
   17576:	d017      	beq.n	175a8 <cf_set+0x114>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   17578:	f104 0108 	add.w	r1, r4, #8
   1757c:	2201      	movs	r2, #1
   1757e:	4640      	mov	r0, r8
   17580:	47b0      	blx	r6
		if (len < 0) {
   17582:	1e04      	subs	r4, r0, #0
   17584:	da9c      	bge.n	174c0 <cf_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   17586:	466d      	mov	r5, sp
   17588:	b088      	sub	sp, #32
   1758a:	466a      	mov	r2, sp
   1758c:	4b0e      	ldr	r3, [pc, #56]	; (175c8 <cf_set+0x134>)
   1758e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17592:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17596:	2303      	movs	r3, #3
   17598:	4806      	ldr	r0, [pc, #24]	; (175b4 <cf_set+0x120>)
   1759a:	f842 3f10 	str.w	r3, [r2, #16]!
   1759e:	f015 fed6 	bl	2d34e <z_log_msg_static_create.constprop.0>
   175a2:	46ad      	mov	sp, r5
			return len;
   175a4:	4625      	mov	r5, r4
   175a6:	e78b      	b.n	174c0 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   175a8:	4620      	mov	r0, r4
   175aa:	f7ff ff5f 	bl	1746c <clear_cf_cfg>
   175ae:	e787      	b.n	174c0 <cf_set+0x2c>
   175b0:	0003461f 	.word	0x0003461f
   175b4:	000314d4 	.word	0x000314d4
   175b8:	00035bab 	.word	0x00035bab
   175bc:	01000003 	.word	0x01000003
   175c0:	00035bc7 	.word	0x00035bc7
   175c4:	00035ced 	.word	0x00035ced
   175c8:	00035c04 	.word	0x00035c04

000175cc <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   175cc:	b508      	push	{r3, lr}
   175ce:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   175d0:	6881      	ldr	r1, [r0, #8]
   175d2:	4a07      	ldr	r2, [pc, #28]	; (175f0 <remove_peer_from_attr+0x24>)
   175d4:	4291      	cmp	r1, r2
   175d6:	d109      	bne.n	175ec <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   175d8:	791a      	ldrb	r2, [r3, #4]
   175da:	6819      	ldr	r1, [r3, #0]
   175dc:	68c0      	ldr	r0, [r0, #12]
   175de:	f015 fdfc 	bl	2d1da <ccc_find_cfg>
	if (cfg) {
   175e2:	b118      	cbz	r0, 175ec <remove_peer_from_attr+0x20>
   175e4:	2300      	movs	r3, #0
   175e6:	6003      	str	r3, [r0, #0]
   175e8:	6043      	str	r3, [r0, #4]
   175ea:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   175ec:	2001      	movs	r0, #1
   175ee:	bd08      	pop	{r3, pc}
   175f0:	000176cd 	.word	0x000176cd

000175f4 <ccc_save>:
{
   175f4:	b538      	push	{r3, r4, r5, lr}
   175f6:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   175f8:	4b0b      	ldr	r3, [pc, #44]	; (17628 <ccc_save+0x34>)
   175fa:	6882      	ldr	r2, [r0, #8]
{
   175fc:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   175fe:	429a      	cmp	r2, r3
   17600:	d10f      	bne.n	17622 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   17602:	7922      	ldrb	r2, [r4, #4]
   17604:	6821      	ldr	r1, [r4, #0]
   17606:	68c0      	ldr	r0, [r0, #12]
   17608:	f015 fde7 	bl	2d1da <ccc_find_cfg>
	if (!cfg) {
   1760c:	b148      	cbz	r0, 17622 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1760e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   17612:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   17616:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   17618:	8901      	ldrh	r1, [r0, #8]
	save->count++;
   1761a:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
   1761c:	8151      	strh	r1, [r2, #10]
	save->count++;
   1761e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   17622:	2001      	movs	r0, #1
   17624:	bd38      	pop	{r3, r4, r5, pc}
   17626:	bf00      	nop
   17628:	000176cd 	.word	0x000176cd

0001762c <disconnected_cb>:
{
   1762c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17630:	4b23      	ldr	r3, [pc, #140]	; (176c0 <disconnected_cb+0x94>)
{
   17632:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17634:	6882      	ldr	r2, [r0, #8]
{
   17636:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17638:	429a      	cmp	r2, r3
   1763a:	d102      	bne.n	17642 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1763c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1763e:	8963      	ldrh	r3, [r4, #10]
   17640:	bb33      	cbnz	r3, 17690 <disconnected_cb+0x64>
}
   17642:	2001      	movs	r0, #1
   17644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   17648:	f7fd fbfc 	bl	14e44 <bt_conn_unref>
		ccc->value = 0U;
   1764c:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1764e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   17650:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   17652:	2b00      	cmp	r3, #0
   17654:	d0f5      	beq.n	17642 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   17656:	4638      	mov	r0, r7
   17658:	4798      	blx	r3
   1765a:	e7f2      	b.n	17642 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1765c:	f105 0890 	add.w	r8, r5, #144	; 0x90
   17660:	4641      	mov	r1, r8
   17662:	7a28      	ldrb	r0, [r5, #8]
   17664:	f014 fd71 	bl	2c14a <bt_addr_le_is_bonded>
   17668:	b968      	cbnz	r0, 17686 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1766a:	4b16      	ldr	r3, [pc, #88]	; (176c4 <disconnected_cb+0x98>)
   1766c:	429c      	cmp	r4, r3
   1766e:	d102      	bne.n	17676 <disconnected_cb+0x4a>
					sc_clear(conn);
   17670:	4628      	mov	r0, r5
   17672:	f7ff fdbd 	bl	171f0 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17676:	4630      	mov	r0, r6
   17678:	4913      	ldr	r1, [pc, #76]	; (176c8 <disconnected_cb+0x9c>)
   1767a:	f015 fdd4 	bl	2d226 <bt_addr_le_copy>
	cfg->id = 0U;
   1767e:	2300      	movs	r3, #0
   17680:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   17682:	8123      	strh	r3, [r4, #8]
}
   17684:	e7e2      	b.n	1764c <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17686:	4641      	mov	r1, r8
   17688:	4630      	mov	r0, r6
   1768a:	f015 fdcc 	bl	2d226 <bt_addr_le_copy>
   1768e:	e7dd      	b.n	1764c <disconnected_cb+0x20>
		if (!cfg->value) {
   17690:	8923      	ldrh	r3, [r4, #8]
   17692:	2b00      	cmp	r3, #0
   17694:	d0da      	beq.n	1764c <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17696:	4626      	mov	r6, r4
   17698:	f816 1b01 	ldrb.w	r1, [r6], #1
   1769c:	4628      	mov	r0, r5
   1769e:	4632      	mov	r2, r6
   176a0:	f014 fff3 	bl	2c68a <bt_conn_is_peer_addr_le>
   176a4:	2800      	cmp	r0, #0
   176a6:	d1d9      	bne.n	1765c <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   176a8:	4631      	mov	r1, r6
   176aa:	7820      	ldrb	r0, [r4, #0]
   176ac:	f7fd fea6 	bl	153fc <bt_conn_lookup_addr_le>
			if (tmp) {
   176b0:	2800      	cmp	r0, #0
   176b2:	d0cb      	beq.n	1764c <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   176b4:	7b43      	ldrb	r3, [r0, #13]
   176b6:	2b07      	cmp	r3, #7
   176b8:	d1c6      	bne.n	17648 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   176ba:	f7fd fbc3 	bl	14e44 <bt_conn_unref>
	if (!value_used) {
   176be:	e7c0      	b.n	17642 <disconnected_cb+0x16>
   176c0:	000176cd 	.word	0x000176cd
   176c4:	20008524 	.word	0x20008524
   176c8:	000345c9 	.word	0x000345c9

000176cc <bt_gatt_attr_write_ccc>:
{
   176cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   176d0:	b086      	sub	sp, #24
   176d2:	461f      	mov	r7, r3
   176d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   176d8:	4605      	mov	r5, r0
   176da:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   176dc:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   176e0:	2b00      	cmp	r3, #0
   176e2:	d16d      	bne.n	177c0 <bt_gatt_attr_write_ccc+0xf4>
	if (!len || len > sizeof(uint16_t)) {
   176e4:	1e7b      	subs	r3, r7, #1
   176e6:	2b01      	cmp	r3, #1
   176e8:	d86d      	bhi.n	177c6 <bt_gatt_attr_write_ccc+0xfa>
	if (len < sizeof(uint16_t)) {
   176ea:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   176ec:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   176ee:	7816      	ldrb	r6, [r2, #0]
   176f0:	bf18      	it	ne
   176f2:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   176f4:	f7ff fbd6 	bl	16ea4 <find_ccc_cfg>
	if (!cfg) {
   176f8:	4604      	mov	r4, r0
   176fa:	b9e8      	cbnz	r0, 17738 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
   176fc:	b91e      	cbnz	r6, 17706 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   176fe:	4638      	mov	r0, r7
}
   17700:	b006      	add	sp, #24
   17702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   17706:	4649      	mov	r1, r9
   17708:	f7ff fbcc 	bl	16ea4 <find_ccc_cfg>
		if (!cfg) {
   1770c:	4604      	mov	r4, r0
   1770e:	b960      	cbnz	r0, 1772a <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   17710:	4b2e      	ldr	r3, [pc, #184]	; (177cc <bt_gatt_attr_write_ccc+0x100>)
   17712:	482f      	ldr	r0, [pc, #188]	; (177d0 <bt_gatt_attr_write_ccc+0x104>)
   17714:	9305      	str	r3, [sp, #20]
   17716:	2302      	movs	r3, #2
   17718:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1771c:	aa04      	add	r2, sp, #16
   1771e:	9304      	str	r3, [sp, #16]
   17720:	f015 fe15 	bl	2d34e <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17724:	f06f 0010 	mvn.w	r0, #16
   17728:	e7ea      	b.n	17700 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1772a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1772e:	3001      	adds	r0, #1
   17730:	f015 fd79 	bl	2d226 <bt_addr_le_copy>
		cfg->id = conn->id;
   17734:	7a2b      	ldrb	r3, [r5, #8]
   17736:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   17738:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1773c:	bba3      	cbnz	r3, 177a8 <bt_gatt_attr_write_ccc+0xdc>
	value_changed = cfg->value != value;
   1773e:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   17742:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   17744:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   17748:	42b3      	cmp	r3, r6
   1774a:	d003      	beq.n	17754 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   1774c:	4649      	mov	r1, r9
   1774e:	4640      	mov	r0, r8
   17750:	f015 fcc5 	bl	2d0de <gatt_ccc_changed>
	if (value_changed) {
   17754:	45b2      	cmp	sl, r6
   17756:	d01e      	beq.n	17796 <bt_gatt_attr_write_ccc+0xca>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   17758:	4628      	mov	r0, r5
   1775a:	f7fd fc9f 	bl	1509c <bt_conn_index>
   1775e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 177d4 <bt_gatt_attr_write_ccc+0x108>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17762:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   17766:	429d      	cmp	r5, r3
   17768:	d015      	beq.n	17796 <bt_gatt_attr_write_ccc+0xca>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1776a:	7a28      	ldrb	r0, [r5, #8]
   1776c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17770:	f014 fceb 	bl	2c14a <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17774:	b178      	cbz	r0, 17796 <bt_gatt_attr_write_ccc+0xca>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   17776:	4628      	mov	r0, r5
   17778:	f7fd fc90 	bl	1509c <bt_conn_index>
   1777c:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1777e:	4628      	mov	r0, r5
   17780:	f7fd fb38 	bl	14df4 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   17784:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   17788:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1778c:	2300      	movs	r3, #0
   1778e:	f108 0008 	add.w	r0, r8, #8
   17792:	f00e fcb9 	bl	26108 <k_work_reschedule>
	if (!value) {
   17796:	2e00      	cmp	r6, #0
   17798:	d1b1      	bne.n	176fe <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1779a:	490f      	ldr	r1, [pc, #60]	; (177d8 <bt_gatt_attr_write_ccc+0x10c>)
   1779c:	1c60      	adds	r0, r4, #1
   1779e:	f015 fd42 	bl	2d226 <bt_addr_le_copy>
	cfg->id = 0U;
   177a2:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   177a4:	8126      	strh	r6, [r4, #8]
}
   177a6:	e7aa      	b.n	176fe <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   177a8:	4632      	mov	r2, r6
   177aa:	4641      	mov	r1, r8
   177ac:	4628      	mov	r0, r5
   177ae:	4798      	blx	r3
		if (write < 0) {
   177b0:	2800      	cmp	r0, #0
   177b2:	dba5      	blt.n	17700 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   177b4:	3801      	subs	r0, #1
   177b6:	2801      	cmp	r0, #1
   177b8:	d9c1      	bls.n	1773e <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   177ba:	f06f 000d 	mvn.w	r0, #13
   177be:	e79f      	b.n	17700 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   177c0:	f06f 0006 	mvn.w	r0, #6
   177c4:	e79c      	b.n	17700 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   177c6:	f06f 000c 	mvn.w	r0, #12
   177ca:	e799      	b.n	17700 <bt_gatt_attr_write_ccc+0x34>
   177cc:	00035d0f 	.word	0x00035d0f
   177d0:	000314d4 	.word	0x000314d4
   177d4:	20009e70 	.word	0x20009e70
   177d8:	000345c9 	.word	0x000345c9

000177dc <sc_commit>:
{
   177dc:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   177de:	f06f 0102 	mvn.w	r1, #2
   177e2:	4808      	ldr	r0, [pc, #32]	; (17804 <sc_commit+0x28>)
   177e4:	f015 fd14 	bl	2d210 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   177e8:	4806      	ldr	r0, [pc, #24]	; (17804 <sc_commit+0x28>)
   177ea:	f015 fd03 	bl	2d1f4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   177ee:	07c3      	lsls	r3, r0, #31
   177f0:	d505      	bpl.n	177fe <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   177f2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   177f6:	2300      	movs	r3, #0
   177f8:	4803      	ldr	r0, [pc, #12]	; (17808 <sc_commit+0x2c>)
   177fa:	f00e fc85 	bl	26108 <k_work_reschedule>
}
   177fe:	2000      	movs	r0, #0
   17800:	bd08      	pop	{r3, pc}
   17802:	bf00      	nop
   17804:	20009f70 	.word	0x20009f70
   17808:	20009f40 	.word	0x20009f40

0001780c <sc_indicate_rsp>:
{
   1780c:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1780e:	f06f 0102 	mvn.w	r1, #2
   17812:	4604      	mov	r4, r0
   17814:	480f      	ldr	r0, [pc, #60]	; (17854 <sc_indicate_rsp+0x48>)
   17816:	f015 fcfb 	bl	2d210 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1781a:	480e      	ldr	r0, [pc, #56]	; (17854 <sc_indicate_rsp+0x48>)
   1781c:	f015 fcea 	bl	2d1f4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17820:	07c2      	lsls	r2, r0, #31
   17822:	d504      	bpl.n	1782e <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   17824:	2200      	movs	r2, #0
   17826:	2300      	movs	r3, #0
   17828:	480b      	ldr	r0, [pc, #44]	; (17858 <sc_indicate_rsp+0x4c>)
   1782a:	f00e fc6d 	bl	26108 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1782e:	4620      	mov	r0, r4
   17830:	f015 fc28 	bl	2d084 <bt_att_fixed_chan_only>
   17834:	b160      	cbz	r0, 17850 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   17836:	4620      	mov	r0, r4
   17838:	f7ff fae4 	bl	16e04 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1783c:	b140      	cbz	r0, 17850 <sc_indicate_rsp+0x44>
   1783e:	7a03      	ldrb	r3, [r0, #8]
   17840:	07db      	lsls	r3, r3, #31
   17842:	d505      	bpl.n	17850 <sc_indicate_rsp+0x44>
}
   17844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17848:	2101      	movs	r1, #1
   1784a:	300c      	adds	r0, #12
   1784c:	f015 bcd5 	b.w	2d1fa <atomic_or>
   17850:	bd10      	pop	{r4, pc}
   17852:	bf00      	nop
   17854:	20009f70 	.word	0x20009f70
   17858:	20009f40 	.word	0x20009f40

0001785c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1785c:	2201      	movs	r2, #1
{
   1785e:	b510      	push	{r4, lr}
   17860:	4b28      	ldr	r3, [pc, #160]	; (17904 <bt_gatt_init+0xa8>)
   17862:	e8d3 1fef 	ldaex	r1, [r3]
   17866:	2900      	cmp	r1, #0
   17868:	d103      	bne.n	17872 <bt_gatt_init+0x16>
   1786a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1786e:	2800      	cmp	r0, #0
   17870:	d1f7      	bne.n	17862 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   17872:	d146      	bne.n	17902 <bt_gatt_init+0xa6>
   17874:	4b24      	ldr	r3, [pc, #144]	; (17908 <bt_gatt_init+0xac>)
   17876:	e8d3 1fef 	ldaex	r1, [r3]
   1787a:	2900      	cmp	r1, #0
   1787c:	d103      	bne.n	17886 <bt_gatt_init+0x2a>
   1787e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17882:	2800      	cmp	r0, #0
   17884:	d1f7      	bne.n	17876 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   17886:	d120      	bne.n	178ca <bt_gatt_init+0x6e>
   17888:	2000      	movs	r0, #0
   1788a:	4920      	ldr	r1, [pc, #128]	; (1790c <bt_gatt_init+0xb0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1788c:	4a20      	ldr	r2, [pc, #128]	; (17910 <bt_gatt_init+0xb4>)
   1788e:	880b      	ldrh	r3, [r1, #0]
   17890:	4c20      	ldr	r4, [pc, #128]	; (17914 <bt_gatt_init+0xb8>)
   17892:	42a2      	cmp	r2, r4
   17894:	d916      	bls.n	178c4 <bt_gatt_init+0x68>
   17896:	b100      	cbz	r0, 1789a <bt_gatt_init+0x3e>
   17898:	800b      	strh	r3, [r1, #0]
   1789a:	491f      	ldr	r1, [pc, #124]	; (17918 <bt_gatt_init+0xbc>)
   1789c:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   178a0:	4a1e      	ldr	r2, [pc, #120]	; (1791c <bt_gatt_init+0xc0>)
   178a2:	481f      	ldr	r0, [pc, #124]	; (17920 <bt_gatt_init+0xc4>)
   178a4:	f012 ff09 	bl	2a6ba <assert_print>
   178a8:	481e      	ldr	r0, [pc, #120]	; (17924 <bt_gatt_init+0xc8>)
   178aa:	f012 ff06 	bl	2a6ba <assert_print>
   178ae:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   178b2:	481a      	ldr	r0, [pc, #104]	; (1791c <bt_gatt_init+0xc0>)
   178b4:	f012 fefa 	bl	2a6ac <assert_post_action>
		last_static_handle += svc->attr_count;
   178b8:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178ba:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   178bc:	4403      	add	r3, r0
   178be:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178c0:	2001      	movs	r0, #1
   178c2:	e7e6      	b.n	17892 <bt_gatt_init+0x36>
   178c4:	d3f8      	bcc.n	178b8 <bt_gatt_init+0x5c>
   178c6:	b100      	cbz	r0, 178ca <bt_gatt_init+0x6e>
   178c8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   178ca:	2200      	movs	r2, #0
   178cc:	4b16      	ldr	r3, [pc, #88]	; (17928 <bt_gatt_init+0xcc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   178ce:	4917      	ldr	r1, [pc, #92]	; (1792c <bt_gatt_init+0xd0>)
   178d0:	4817      	ldr	r0, [pc, #92]	; (17930 <bt_gatt_init+0xd4>)
	list->tail = NULL;
   178d2:	e9c3 2200 	strd	r2, r2, [r3]
   178d6:	f00e fafb 	bl	25ed0 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   178da:	f44f 72a4 	mov.w	r2, #328	; 0x148
   178de:	2300      	movs	r3, #0
   178e0:	4813      	ldr	r0, [pc, #76]	; (17930 <bt_gatt_init+0xd4>)
   178e2:	f7fa fa6d 	bl	11dc0 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   178e6:	4913      	ldr	r1, [pc, #76]	; (17934 <bt_gatt_init+0xd8>)
   178e8:	4813      	ldr	r0, [pc, #76]	; (17938 <bt_gatt_init+0xdc>)
   178ea:	f00e faf1 	bl	25ed0 <k_work_init_delayable>
   178ee:	2102      	movs	r1, #2
   178f0:	4812      	ldr	r0, [pc, #72]	; (1793c <bt_gatt_init+0xe0>)
   178f2:	f015 fc82 	bl	2d1fa <atomic_or>
}
   178f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   178fa:	4911      	ldr	r1, [pc, #68]	; (17940 <bt_gatt_init+0xe4>)
   178fc:	4811      	ldr	r0, [pc, #68]	; (17944 <bt_gatt_init+0xe8>)
   178fe:	f00e bae7 	b.w	25ed0 <k_work_init_delayable>
}
   17902:	bd10      	pop	{r4, pc}
   17904:	2002171c 	.word	0x2002171c
   17908:	20021718 	.word	0x20021718
   1790c:	20021b2c 	.word	0x20021b2c
   17910:	00031464 	.word	0x00031464
   17914:	0003147c 	.word	0x0003147c
   17918:	00035d60 	.word	0x00035d60
   1791c:	00035d29 	.word	0x00035d29
   17920:	00032659 	.word	0x00032659
   17924:	000336ed 	.word	0x000336ed
   17928:	20021720 	.word	0x20021720
   1792c:	00017bb5 	.word	0x00017bb5
   17930:	20009ec8 	.word	0x20009ec8
   17934:	00018199 	.word	0x00018199
   17938:	20009f40 	.word	0x20009f40
   1793c:	20009f70 	.word	0x20009f70
   17940:	0002d523 	.word	0x0002d523
   17944:	20009e78 	.word	0x20009e78

00017948 <bt_gatt_attr_get_handle>:
	if (!attr) {
   17948:	4603      	mov	r3, r0
{
   1794a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1794e:	b398      	cbz	r0, 179b8 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   17950:	8a00      	ldrh	r0, [r0, #16]
   17952:	bb88      	cbnz	r0, 179b8 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   17954:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17956:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1795a:	4919      	ldr	r1, [pc, #100]	; (179c0 <bt_gatt_attr_get_handle+0x78>)
   1795c:	f8df e064 	ldr.w	lr, [pc, #100]	; 179c4 <bt_gatt_attr_get_handle+0x7c>
   17960:	4571      	cmp	r1, lr
   17962:	d928      	bls.n	179b6 <bt_gatt_attr_get_handle+0x6e>
   17964:	4918      	ldr	r1, [pc, #96]	; (179c8 <bt_gatt_attr_get_handle+0x80>)
   17966:	f240 635d 	movw	r3, #1629	; 0x65d
   1796a:	4a18      	ldr	r2, [pc, #96]	; (179cc <bt_gatt_attr_get_handle+0x84>)
   1796c:	4818      	ldr	r0, [pc, #96]	; (179d0 <bt_gatt_attr_get_handle+0x88>)
   1796e:	f012 fea4 	bl	2a6ba <assert_print>
   17972:	4818      	ldr	r0, [pc, #96]	; (179d4 <bt_gatt_attr_get_handle+0x8c>)
   17974:	f012 fea1 	bl	2a6ba <assert_print>
   17978:	f240 615d 	movw	r1, #1629	; 0x65d
   1797c:	4813      	ldr	r0, [pc, #76]	; (179cc <bt_gatt_attr_get_handle+0x84>)
   1797e:	f012 fe95 	bl	2a6ac <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17982:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   17986:	42bb      	cmp	r3, r7
   17988:	d304      	bcc.n	17994 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1798a:	fb0c 7206 	mla	r2, ip, r6, r7
   1798e:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17990:	4293      	cmp	r3, r2
   17992:	d90e      	bls.n	179b2 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   17994:	4434      	add	r4, r6
   17996:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17998:	4614      	mov	r4, r2
   1799a:	3108      	adds	r1, #8
   1799c:	e7e0      	b.n	17960 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1799e:	fb0c 7805 	mla	r8, ip, r5, r7
   179a2:	4543      	cmp	r3, r8
   179a4:	d00a      	beq.n	179bc <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   179a6:	3501      	adds	r5, #1
   179a8:	1962      	adds	r2, r4, r5
   179aa:	42b5      	cmp	r5, r6
   179ac:	b292      	uxth	r2, r2
   179ae:	d1f6      	bne.n	1799e <bt_gatt_attr_get_handle+0x56>
   179b0:	e7f2      	b.n	17998 <bt_gatt_attr_get_handle+0x50>
   179b2:	2500      	movs	r5, #0
   179b4:	e7f8      	b.n	179a8 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   179b6:	d3e4      	bcc.n	17982 <bt_gatt_attr_get_handle+0x3a>
}
   179b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179bc:	4610      	mov	r0, r2
   179be:	e7fb      	b.n	179b8 <bt_gatt_attr_get_handle+0x70>
   179c0:	00031464 	.word	0x00031464
   179c4:	0003147c 	.word	0x0003147c
   179c8:	00035d59 	.word	0x00035d59
   179cc:	00035d29 	.word	0x00035d29
   179d0:	00032659 	.word	0x00032659
   179d4:	000336ed 	.word	0x000336ed

000179d8 <bt_gatt_foreach_attr_type>:
{
   179d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179dc:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   179de:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   179e2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   179e6:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   179e8:	2d00      	cmp	r5, #0
   179ea:	bf08      	it	eq
   179ec:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   179ee:	4b2b      	ldr	r3, [pc, #172]	; (17a9c <bt_gatt_foreach_attr_type+0xc4>)
{
   179f0:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   179f2:	881b      	ldrh	r3, [r3, #0]
{
   179f4:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   179f6:	4283      	cmp	r3, r0
   179f8:	d232      	bcs.n	17a60 <bt_gatt_foreach_attr_type+0x88>
}
   179fa:	b003      	add	sp, #12
   179fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17a00:	4640      	mov	r0, r8
   17a02:	5889      	ldr	r1, [r1, r2]
   17a04:	9301      	str	r3, [sp, #4]
   17a06:	f014 fa44 	bl	2be92 <bt_uuid_cmp>
   17a0a:	9b01      	ldr	r3, [sp, #4]
   17a0c:	b190      	cbz	r0, 17a34 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17a0e:	3401      	adds	r4, #1
   17a10:	f10a 0a01 	add.w	sl, sl, #1
   17a14:	b2a4      	uxth	r4, r4
   17a16:	6873      	ldr	r3, [r6, #4]
   17a18:	4553      	cmp	r3, sl
   17a1a:	d92c      	bls.n	17a76 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   17a1c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a1e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   17a20:	429c      	cmp	r4, r3
   17a22:	d8ea      	bhi.n	179fa <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   17a24:	42bc      	cmp	r4, r7
   17a26:	d3f2      	bcc.n	17a0e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a28:	fb0b f20a 	mul.w	r2, fp, sl
   17a2c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17a2e:	f1b8 0f00 	cmp.w	r8, #0
   17a32:	d1e5      	bne.n	17a00 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   17a34:	f1b9 0f00 	cmp.w	r9, #0
   17a38:	d10b      	bne.n	17a52 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   17a3a:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   17a3c:	4618      	mov	r0, r3
	*num_matches -= 1;
   17a3e:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17a40:	4621      	mov	r1, r4
   17a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17a46:	4798      	blx	r3
	if (!*num_matches) {
   17a48:	2d00      	cmp	r5, #0
   17a4a:	d0d6      	beq.n	179fa <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a4c:	2800      	cmp	r0, #0
   17a4e:	d1de      	bne.n	17a0e <bt_gatt_foreach_attr_type+0x36>
   17a50:	e7d3      	b.n	179fa <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17a52:	68da      	ldr	r2, [r3, #12]
   17a54:	4591      	cmp	r9, r2
   17a56:	d1da      	bne.n	17a0e <bt_gatt_foreach_attr_type+0x36>
   17a58:	e7ef      	b.n	17a3a <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17a5a:	f04f 0a00 	mov.w	sl, #0
   17a5e:	e7da      	b.n	17a16 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   17a60:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a62:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a66:	4e0e      	ldr	r6, [pc, #56]	; (17aa0 <bt_gatt_foreach_attr_type+0xc8>)
   17a68:	e006      	b.n	17a78 <bt_gatt_foreach_attr_type+0xa0>
   17a6a:	d2c6      	bcs.n	179fa <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   17a6c:	6873      	ldr	r3, [r6, #4]
   17a6e:	4423      	add	r3, r4
   17a70:	42bb      	cmp	r3, r7
   17a72:	d2f2      	bcs.n	17a5a <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   17a74:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a76:	3608      	adds	r6, #8
   17a78:	4b0a      	ldr	r3, [pc, #40]	; (17aa4 <bt_gatt_foreach_attr_type+0xcc>)
   17a7a:	429e      	cmp	r6, r3
   17a7c:	d9f5      	bls.n	17a6a <bt_gatt_foreach_attr_type+0x92>
   17a7e:	490a      	ldr	r1, [pc, #40]	; (17aa8 <bt_gatt_foreach_attr_type+0xd0>)
   17a80:	f240 7321 	movw	r3, #1825	; 0x721
   17a84:	4a09      	ldr	r2, [pc, #36]	; (17aac <bt_gatt_foreach_attr_type+0xd4>)
   17a86:	480a      	ldr	r0, [pc, #40]	; (17ab0 <bt_gatt_foreach_attr_type+0xd8>)
   17a88:	f012 fe17 	bl	2a6ba <assert_print>
   17a8c:	4809      	ldr	r0, [pc, #36]	; (17ab4 <bt_gatt_foreach_attr_type+0xdc>)
   17a8e:	f012 fe14 	bl	2a6ba <assert_print>
   17a92:	f240 7121 	movw	r1, #1825	; 0x721
   17a96:	4805      	ldr	r0, [pc, #20]	; (17aac <bt_gatt_foreach_attr_type+0xd4>)
   17a98:	f012 fe08 	bl	2a6ac <assert_post_action>
   17a9c:	20021b2c 	.word	0x20021b2c
   17aa0:	00031464 	.word	0x00031464
   17aa4:	0003147c 	.word	0x0003147c
   17aa8:	00035d59 	.word	0x00035d59
   17aac:	00035d29 	.word	0x00035d29
   17ab0:	00032659 	.word	0x00032659
   17ab4:	000336ed 	.word	0x000336ed

00017ab8 <db_hash_gen>:
{
   17ab8:	b530      	push	{r4, r5, lr}
	uint8_t key[16] = {};
   17aba:	2400      	movs	r4, #0
{
   17abc:	b0cf      	sub	sp, #316	; 0x13c
   17abe:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17ac0:	4669      	mov	r1, sp
   17ac2:	aa22      	add	r2, sp, #136	; 0x88
   17ac4:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   17ac6:	e9cd 4400 	strd	r4, r4, [sp]
   17aca:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17ace:	f013 fe45 	bl	2b75c <tc_cmac_setup>
   17ad2:	b958      	cbnz	r0, 17aec <db_hash_gen+0x34>
		LOG_ERR("Unable to setup AES CMAC");
   17ad4:	4b16      	ldr	r3, [pc, #88]	; (17b30 <db_hash_gen+0x78>)
		LOG_ERR("Unable to calculate hash");
   17ad6:	9309      	str	r3, [sp, #36]	; 0x24
   17ad8:	2302      	movs	r3, #2
   17ada:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17ade:	4815      	ldr	r0, [pc, #84]	; (17b34 <db_hash_gen+0x7c>)
   17ae0:	aa08      	add	r2, sp, #32
   17ae2:	9308      	str	r3, [sp, #32]
   17ae4:	f015 fc33 	bl	2d34e <z_log_msg_static_create.constprop.0>
}
   17ae8:	b04f      	add	sp, #316	; 0x13c
   17aea:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   17aec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17af0:	2001      	movs	r0, #1
   17af2:	4a11      	ldr	r2, [pc, #68]	; (17b38 <db_hash_gen+0x80>)
   17af4:	ab0a      	add	r3, sp, #40	; 0x28
   17af6:	f015 fca1 	bl	2d43c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   17afa:	4810      	ldr	r0, [pc, #64]	; (17b3c <db_hash_gen+0x84>)
   17afc:	a90a      	add	r1, sp, #40	; 0x28
   17afe:	f013 fec2 	bl	2b886 <tc_cmac_final>
   17b02:	b908      	cbnz	r0, 17b08 <db_hash_gen+0x50>
		LOG_ERR("Unable to calculate hash");
   17b04:	4b0e      	ldr	r3, [pc, #56]	; (17b40 <db_hash_gen+0x88>)
   17b06:	e7e6      	b.n	17ad6 <db_hash_gen+0x1e>
   17b08:	4b0c      	ldr	r3, [pc, #48]	; (17b3c <db_hash_gen+0x84>)
   17b0a:	f103 0210 	add.w	r2, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   17b0e:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17b10:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   17b14:	3401      	adds	r4, #1
   17b16:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17b18:	f803 0b01 	strb.w	r0, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17b1c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   17b1e:	d1f6      	bne.n	17b0e <db_hash_gen+0x56>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   17b20:	b10d      	cbz	r5, 17b26 <db_hash_gen+0x6e>
		db_hash_store();
   17b22:	f7ff fc5d 	bl	173e0 <db_hash_store>
   17b26:	2104      	movs	r1, #4
   17b28:	4806      	ldr	r0, [pc, #24]	; (17b44 <db_hash_gen+0x8c>)
   17b2a:	f015 fb66 	bl	2d1fa <atomic_or>
   17b2e:	e7db      	b.n	17ae8 <db_hash_gen+0x30>
   17b30:	00035d88 	.word	0x00035d88
   17b34:	000314d4 	.word	0x000314d4
   17b38:	0002d125 	.word	0x0002d125
   17b3c:	20009ea8 	.word	0x20009ea8
   17b40:	00035da1 	.word	0x00035da1
   17b44:	20009f70 	.word	0x20009f70

00017b48 <db_hash_read>:
{
   17b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b4c:	4916      	ldr	r1, [pc, #88]	; (17ba8 <db_hash_read+0x60>)
{
   17b4e:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b50:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   17b54:	4615      	mov	r5, r2
   17b56:	461e      	mov	r6, r3
   17b58:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b5c:	f00e fb34 	bl	261c8 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17b60:	4812      	ldr	r0, [pc, #72]	; (17bac <db_hash_read+0x64>)
   17b62:	f015 fb47 	bl	2d1f4 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17b66:	0741      	lsls	r1, r0, #29
   17b68:	d402      	bmi.n	17b70 <db_hash_read+0x28>
		db_hash_gen(true);
   17b6a:	2001      	movs	r0, #1
   17b6c:	f7ff ffa4 	bl	17ab8 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   17b70:	4620      	mov	r0, r4
   17b72:	f7ff f947 	bl	16e04 <find_cf_cfg>
	if (cfg &&
   17b76:	b168      	cbz	r0, 17b94 <db_hash_read+0x4c>
   17b78:	7a03      	ldrb	r3, [r0, #8]
   17b7a:	07da      	lsls	r2, r3, #31
   17b7c:	d50a      	bpl.n	17b94 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   17b7e:	f100 040c 	add.w	r4, r0, #12
   17b82:	4620      	mov	r0, r4
   17b84:	f015 fb36 	bl	2d1f4 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   17b88:	07c3      	lsls	r3, r0, #31
   17b8a:	d403      	bmi.n	17b94 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17b8c:	2102      	movs	r1, #2
   17b8e:	4620      	mov	r0, r4
   17b90:	f015 fb33 	bl	2d1fa <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17b94:	2310      	movs	r3, #16
   17b96:	463a      	mov	r2, r7
   17b98:	9306      	str	r3, [sp, #24]
   17b9a:	4631      	mov	r1, r6
   17b9c:	4628      	mov	r0, r5
}
   17b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17ba2:	4b03      	ldr	r3, [pc, #12]	; (17bb0 <db_hash_read+0x68>)
   17ba4:	f015 bb4b 	b.w	2d23e <bt_gatt_attr_read.constprop.0>
   17ba8:	20009ef8 	.word	0x20009ef8
   17bac:	20009f70 	.word	0x20009f70
   17bb0:	20009ea8 	.word	0x20009ea8

00017bb4 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17bb4:	f06f 0108 	mvn.w	r1, #8
{
   17bb8:	b508      	push	{r3, lr}
   17bba:	4826      	ldr	r0, [pc, #152]	; (17c54 <db_hash_process+0xa0>)
   17bbc:	f015 fb28 	bl	2d210 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   17bc0:	0701      	lsls	r1, r0, #28
   17bc2:	d542      	bpl.n	17c4a <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17bc4:	4823      	ldr	r0, [pc, #140]	; (17c54 <db_hash_process+0xa0>)
   17bc6:	f015 fb15 	bl	2d1f4 <atomic_get>
   17bca:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17bcc:	075a      	lsls	r2, r3, #29
   17bce:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17bd2:	d401      	bmi.n	17bd8 <db_hash_process+0x24>
			db_hash_gen(false);
   17bd4:	f7ff ff70 	bl	17ab8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   17bd8:	2210      	movs	r2, #16
   17bda:	491f      	ldr	r1, [pc, #124]	; (17c58 <db_hash_process+0xa4>)
   17bdc:	1888      	adds	r0, r1, r2
   17bde:	f018 fcb6 	bl	3054e <memcmp>
   17be2:	b948      	cbnz	r0, 17bf8 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   17be4:	481d      	ldr	r0, [pc, #116]	; (17c5c <db_hash_process+0xa8>)
   17be6:	f00e fa95 	bl	26114 <k_work_cancel_delayable>
}
   17bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17bee:	f06f 0101 	mvn.w	r1, #1
   17bf2:	4818      	ldr	r0, [pc, #96]	; (17c54 <db_hash_process+0xa0>)
   17bf4:	f015 bb0c 	b.w	2d210 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17bf8:	2101      	movs	r1, #1
   17bfa:	4816      	ldr	r0, [pc, #88]	; (17c54 <db_hash_process+0xa0>)
   17bfc:	f015 fafd 	bl	2d1fa <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17c00:	f010 0f01 	tst.w	r0, #1
   17c04:	4b16      	ldr	r3, [pc, #88]	; (17c60 <db_hash_process+0xac>)
   17c06:	d110      	bne.n	17c2a <db_hash_process+0x76>
		gatt_sc.start = start;
   17c08:	4a16      	ldr	r2, [pc, #88]	; (17c64 <db_hash_process+0xb0>)
   17c0a:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17c0c:	4811      	ldr	r0, [pc, #68]	; (17c54 <db_hash_process+0xa0>)
   17c0e:	f015 faf1 	bl	2d1f4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   17c12:	0783      	lsls	r3, r0, #30
   17c14:	d405      	bmi.n	17c22 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   17c16:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17c1a:	2300      	movs	r3, #0
   17c1c:	480f      	ldr	r0, [pc, #60]	; (17c5c <db_hash_process+0xa8>)
   17c1e:	f00e fa73 	bl	26108 <k_work_reschedule>
}
   17c22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   17c26:	f7ff bbdb 	b.w	173e0 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   17c2a:	8b1a      	ldrh	r2, [r3, #24]
   17c2c:	8b58      	ldrh	r0, [r3, #26]
   17c2e:	2a01      	cmp	r2, #1
   17c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c34:	d805      	bhi.n	17c42 <db_hash_process+0x8e>
   17c36:	4290      	cmp	r0, r2
   17c38:	d0f3      	beq.n	17c22 <db_hash_process+0x6e>
		*end = new_end;
   17c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c3e:	835a      	strh	r2, [r3, #26]
   17c40:	e7e4      	b.n	17c0c <db_hash_process+0x58>
	if (*end < new_end) {
   17c42:	4290      	cmp	r0, r2
		*start = new_start;
   17c44:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   17c46:	d0e1      	beq.n	17c0c <db_hash_process+0x58>
   17c48:	e7f7      	b.n	17c3a <db_hash_process+0x86>
	db_hash_gen(true);
   17c4a:	2001      	movs	r0, #1
}
   17c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   17c50:	f7ff bf32 	b.w	17ab8 <db_hash_gen>
   17c54:	20009f70 	.word	0x20009f70
   17c58:	20009ea8 	.word	0x20009ea8
   17c5c:	20009f40 	.word	0x20009f40
   17c60:	20009f20 	.word	0x20009f20
   17c64:	ffff0001 	.word	0xffff0001

00017c68 <ccc_set_direct>:
{
   17c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c6c:	b0b8      	sub	sp, #224	; 0xe0
   17c6e:	af00      	add	r7, sp, #0
   17c70:	460c      	mov	r4, r1
   17c72:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   17c74:	493f      	ldr	r1, [pc, #252]	; (17d74 <ccc_set_direct+0x10c>)
   17c76:	463a      	mov	r2, r7
   17c78:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
{
   17c7c:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   17c7e:	f013 fb1a 	bl	2b2b6 <settings_name_steq>
   17c82:	b938      	cbnz	r0, 17c94 <ccc_set_direct+0x2c>
   17c84:	f7ff f99e 	bl	16fc4 <ccc_set_direct.part.0>
   17c88:	4605      	mov	r5, r0
}
   17c8a:	4628      	mov	r0, r5
   17c8c:	37e0      	adds	r7, #224	; 0xe0
   17c8e:	46bd      	mov	sp, r7
   17c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   17c94:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   17c96:	1d39      	adds	r1, r7, #4
   17c98:	4630      	mov	r0, r6
   17c9a:	f013 fb30 	bl	2b2fe <settings_name_next>
		if (!name) {
   17c9e:	b96e      	cbnz	r6, 17cbc <ccc_set_direct+0x54>
			LOG_ERR("Insufficient number of arguments");
   17ca0:	4b35      	ldr	r3, [pc, #212]	; (17d78 <ccc_set_direct+0x110>)
   17ca2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17ca6:	637b      	str	r3, [r7, #52]	; 0x34
   17ca8:	2302      	movs	r3, #2
   17caa:	4834      	ldr	r0, [pc, #208]	; (17d7c <ccc_set_direct+0x114>)
   17cac:	633b      	str	r3, [r7, #48]	; 0x30
   17cae:	f107 0230 	add.w	r2, r7, #48	; 0x30
   17cb2:	f015 fb4c 	bl	2d34e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17cb6:	f06f 0415 	mvn.w	r4, #21
   17cba:	e049      	b.n	17d50 <ccc_set_direct+0xe8>
		} else if (!next) {
   17cbc:	6878      	ldr	r0, [r7, #4]
   17cbe:	b9c0      	cbnz	r0, 17cf2 <ccc_set_direct+0x8a>
			load.addr_with_id.id = BT_ID_DEFAULT;
   17cc0:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   17cc2:	f107 0a08 	add.w	sl, r7, #8
   17cc6:	4651      	mov	r1, sl
   17cc8:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   17cca:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   17ccc:	f014 f8bd 	bl	2be4a <bt_settings_decode_key>
		if (err) {
   17cd0:	4605      	mov	r5, r0
   17cd2:	b320      	cbz	r0, 17d1e <ccc_set_direct+0xb6>
			LOG_ERR("Unable to decode address %s", name);
   17cd4:	466c      	mov	r4, sp
   17cd6:	b088      	sub	sp, #32
   17cd8:	466a      	mov	r2, sp
   17cda:	4b29      	ldr	r3, [pc, #164]	; (17d80 <ccc_set_direct+0x118>)
   17cdc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   17ce0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   17ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
   17ce8:	8393      	strh	r3, [r2, #28]
   17cea:	4b26      	ldr	r3, [pc, #152]	; (17d84 <ccc_set_direct+0x11c>)
   17cec:	f842 3f10 	str.w	r3, [r2, #16]!
   17cf0:	e010      	b.n	17d14 <ccc_set_direct+0xac>
			unsigned long next_id = strtoul(next, NULL, 10);
   17cf2:	220a      	movs	r2, #10
   17cf4:	2100      	movs	r1, #0
   17cf6:	f011 f98f 	bl	29018 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   17cfa:	2800      	cmp	r0, #0
   17cfc:	d0e0      	beq.n	17cc0 <ccc_set_direct+0x58>
				LOG_ERR("Invalid local identity %lu", next_id);
   17cfe:	466c      	mov	r4, sp
   17d00:	b088      	sub	sp, #32
   17d02:	466a      	mov	r2, sp
   17d04:	4b20      	ldr	r3, [pc, #128]	; (17d88 <ccc_set_direct+0x120>)
   17d06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17d0a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17d0e:	2303      	movs	r3, #3
   17d10:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Unable to decode address %s", name);
   17d14:	4819      	ldr	r0, [pc, #100]	; (17d7c <ccc_set_direct+0x114>)
   17d16:	f015 fb1a 	bl	2d34e <z_log_msg_static_create.constprop.0>
   17d1a:	46a5      	mov	sp, r4
			return -EINVAL;
   17d1c:	e7cb      	b.n	17cb6 <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   17d1e:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   17d22:	b32c      	cbz	r4, 17d70 <ccc_set_direct+0x108>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   17d24:	22c0      	movs	r2, #192	; 0xc0
   17d26:	4648      	mov	r0, r9
   17d28:	f107 0120 	add.w	r1, r7, #32
   17d2c:	47c0      	blx	r8
			if (len < 0) {
   17d2e:	1e04      	subs	r4, r0, #0
   17d30:	da10      	bge.n	17d54 <ccc_set_direct+0xec>
				LOG_ERR("Failed to decode value (err %zd)", len);
   17d32:	466d      	mov	r5, sp
   17d34:	b088      	sub	sp, #32
   17d36:	466a      	mov	r2, sp
   17d38:	4b14      	ldr	r3, [pc, #80]	; (17d8c <ccc_set_direct+0x124>)
   17d3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17d3e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17d42:	2303      	movs	r3, #3
   17d44:	480d      	ldr	r0, [pc, #52]	; (17d7c <ccc_set_direct+0x114>)
   17d46:	f842 3f10 	str.w	r3, [r2, #16]!
   17d4a:	f015 fb00 	bl	2d34e <z_log_msg_static_create.constprop.0>
   17d4e:	46ad      	mov	sp, r5
			return -EINVAL;
   17d50:	4625      	mov	r5, r4
   17d52:	e79a      	b.n	17c8a <ccc_set_direct+0x22>
			load.count = len / sizeof(*ccc_store);
   17d54:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   17d56:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   17d5a:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   17d5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17d62:	2001      	movs	r0, #1
   17d64:	4a0a      	ldr	r2, [pc, #40]	; (17d90 <ccc_set_direct+0x128>)
   17d66:	f107 0310 	add.w	r3, r7, #16
   17d6a:	f015 fb67 	bl	2d43c <bt_gatt_foreach_attr>
	return 0;
   17d6e:	e78c      	b.n	17c8a <ccc_set_direct+0x22>
   17d70:	4623      	mov	r3, r4
   17d72:	e7f2      	b.n	17d5a <ccc_set_direct+0xf2>
   17d74:	00035dba 	.word	0x00035dba
   17d78:	0003461f 	.word	0x0003461f
   17d7c:	000314d4 	.word	0x000314d4
   17d80:	00035bab 	.word	0x00035bab
   17d84:	01000003 	.word	0x01000003
   17d88:	00035bc7 	.word	0x00035bc7
   17d8c:	00035c04 	.word	0x00035c04
   17d90:	00016f11 	.word	0x00016f11

00017d94 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   17d94:	2300      	movs	r3, #0
{
   17d96:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   17d98:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   17d9a:	f7ff fdd5 	bl	17948 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   17d9e:	1c41      	adds	r1, r0, #1
   17da0:	b289      	uxth	r1, r1
   17da2:	4608      	mov	r0, r1
   17da4:	4a03      	ldr	r2, [pc, #12]	; (17db4 <bt_gatt_attr_next+0x20>)
   17da6:	ab01      	add	r3, sp, #4
   17da8:	f015 fb48 	bl	2d43c <bt_gatt_foreach_attr>
}
   17dac:	9801      	ldr	r0, [sp, #4]
   17dae:	b003      	add	sp, #12
   17db0:	f85d fb04 	ldr.w	pc, [sp], #4
   17db4:	0002d0d9 	.word	0x0002d0d9

00017db8 <bt_gatt_is_subscribed>:
{
   17db8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17dbc:	460c      	mov	r4, r1
   17dbe:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   17dc0:	4605      	mov	r5, r0
   17dc2:	b970      	cbnz	r0, 17de2 <bt_gatt_is_subscribed+0x2a>
   17dc4:	495b      	ldr	r1, [pc, #364]	; (17f34 <bt_gatt_is_subscribed+0x17c>)
   17dc6:	f640 434d 	movw	r3, #3149	; 0xc4d
   17dca:	4a5b      	ldr	r2, [pc, #364]	; (17f38 <bt_gatt_is_subscribed+0x180>)
   17dcc:	485b      	ldr	r0, [pc, #364]	; (17f3c <bt_gatt_is_subscribed+0x184>)
   17dce:	f012 fc74 	bl	2a6ba <assert_print>
   17dd2:	485b      	ldr	r0, [pc, #364]	; (17f40 <bt_gatt_is_subscribed+0x188>)
   17dd4:	f012 fc71 	bl	2a6ba <assert_print>
   17dd8:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   17ddc:	4856      	ldr	r0, [pc, #344]	; (17f38 <bt_gatt_is_subscribed+0x180>)
   17dde:	f012 fc65 	bl	2a6ac <assert_post_action>
   17de2:	b961      	cbnz	r1, 17dfe <bt_gatt_is_subscribed+0x46>
   17de4:	4957      	ldr	r1, [pc, #348]	; (17f44 <bt_gatt_is_subscribed+0x18c>)
   17de6:	f640 434e 	movw	r3, #3150	; 0xc4e
   17dea:	4a53      	ldr	r2, [pc, #332]	; (17f38 <bt_gatt_is_subscribed+0x180>)
   17dec:	4853      	ldr	r0, [pc, #332]	; (17f3c <bt_gatt_is_subscribed+0x184>)
   17dee:	f012 fc64 	bl	2a6ba <assert_print>
   17df2:	4853      	ldr	r0, [pc, #332]	; (17f40 <bt_gatt_is_subscribed+0x188>)
   17df4:	f012 fc61 	bl	2a6ba <assert_print>
   17df8:	f640 414e 	movw	r1, #3150	; 0xc4e
   17dfc:	e7ee      	b.n	17ddc <bt_gatt_is_subscribed+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   17dfe:	7b43      	ldrb	r3, [r0, #13]
   17e00:	2b07      	cmp	r3, #7
   17e02:	d110      	bne.n	17e26 <bt_gatt_is_subscribed+0x6e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   17e04:	2300      	movs	r3, #0
   17e06:	f88d 300c 	strb.w	r3, [sp, #12]
   17e0a:	f642 0303 	movw	r3, #10243	; 0x2803
   17e0e:	6820      	ldr	r0, [r4, #0]
   17e10:	a903      	add	r1, sp, #12
   17e12:	f8ad 300e 	strh.w	r3, [sp, #14]
   17e16:	f014 f83c 	bl	2be92 <bt_uuid_cmp>
   17e1a:	b9d0      	cbnz	r0, 17e52 <bt_gatt_is_subscribed+0x9a>
		if (!(chrc->properties &
   17e1c:	68e3      	ldr	r3, [r4, #12]
   17e1e:	799b      	ldrb	r3, [r3, #6]
   17e20:	f013 0f30 	tst.w	r3, #48	; 0x30
   17e24:	d103      	bne.n	17e2e <bt_gatt_is_subscribed+0x76>
		return false;
   17e26:	2000      	movs	r0, #0
}
   17e28:	b004      	add	sp, #16
   17e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   17e2e:	4620      	mov	r0, r4
   17e30:	f7ff ffb0 	bl	17d94 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17e34:	4604      	mov	r4, r0
   17e36:	b960      	cbnz	r0, 17e52 <bt_gatt_is_subscribed+0x9a>
   17e38:	4942      	ldr	r1, [pc, #264]	; (17f44 <bt_gatt_is_subscribed+0x18c>)
   17e3a:	f640 435f 	movw	r3, #3167	; 0xc5f
   17e3e:	4a3e      	ldr	r2, [pc, #248]	; (17f38 <bt_gatt_is_subscribed+0x180>)
   17e40:	483e      	ldr	r0, [pc, #248]	; (17f3c <bt_gatt_is_subscribed+0x184>)
   17e42:	f012 fc3a 	bl	2a6ba <assert_print>
   17e46:	4840      	ldr	r0, [pc, #256]	; (17f48 <bt_gatt_is_subscribed+0x190>)
   17e48:	f012 fc37 	bl	2a6ba <assert_print>
   17e4c:	f640 415f 	movw	r1, #3167	; 0xc5f
   17e50:	e7c4      	b.n	17ddc <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17e52:	2300      	movs	r3, #0
   17e54:	6820      	ldr	r0, [r4, #0]
   17e56:	f88d 300c 	strb.w	r3, [sp, #12]
   17e5a:	f642 1302 	movw	r3, #10498	; 0x2902
   17e5e:	a903      	add	r1, sp, #12
   17e60:	f8ad 300e 	strh.w	r3, [sp, #14]
   17e64:	f014 f815 	bl	2be92 <bt_uuid_cmp>
   17e68:	b188      	cbz	r0, 17e8e <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   17e6a:	4620      	mov	r0, r4
   17e6c:	f7ff ff92 	bl	17d94 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17e70:	4604      	mov	r4, r0
   17e72:	b960      	cbnz	r0, 17e8e <bt_gatt_is_subscribed+0xd6>
   17e74:	4933      	ldr	r1, [pc, #204]	; (17f44 <bt_gatt_is_subscribed+0x18c>)
   17e76:	f640 4365 	movw	r3, #3173	; 0xc65
   17e7a:	4a2f      	ldr	r2, [pc, #188]	; (17f38 <bt_gatt_is_subscribed+0x180>)
   17e7c:	482f      	ldr	r0, [pc, #188]	; (17f3c <bt_gatt_is_subscribed+0x184>)
   17e7e:	f012 fc1c 	bl	2a6ba <assert_print>
   17e82:	4831      	ldr	r0, [pc, #196]	; (17f48 <bt_gatt_is_subscribed+0x190>)
   17e84:	f012 fc19 	bl	2a6ba <assert_print>
   17e88:	f640 4165 	movw	r1, #3173	; 0xc65
   17e8c:	e7a6      	b.n	17ddc <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17e8e:	2600      	movs	r6, #0
   17e90:	f642 1802 	movw	r8, #10498	; 0x2902
   17e94:	6820      	ldr	r0, [r4, #0]
   17e96:	4669      	mov	r1, sp
   17e98:	f88d 6000 	strb.w	r6, [sp]
   17e9c:	f8ad 8002 	strh.w	r8, [sp, #2]
   17ea0:	f013 fff7 	bl	2be92 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17ea4:	b9d8      	cbnz	r0, 17ede <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17ea6:	2300      	movs	r3, #0
   17ea8:	6820      	ldr	r0, [r4, #0]
   17eaa:	f88d 300c 	strb.w	r3, [sp, #12]
   17eae:	f642 1302 	movw	r3, #10498	; 0x2902
   17eb2:	a903      	add	r1, sp, #12
   17eb4:	f8ad 300e 	strh.w	r3, [sp, #14]
   17eb8:	f013 ffeb 	bl	2be92 <bt_uuid_cmp>
   17ebc:	2800      	cmp	r0, #0
   17ebe:	d1b2      	bne.n	17e26 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   17ec0:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   17ec2:	4628      	mov	r0, r5
   17ec4:	4622      	mov	r2, r4
   17ec6:	f812 1b01 	ldrb.w	r1, [r2], #1
   17eca:	f014 fbde 	bl	2c68a <bt_conn_is_peer_addr_le>
   17ece:	2800      	cmp	r0, #0
   17ed0:	d0a9      	beq.n	17e26 <bt_gatt_is_subscribed+0x6e>
   17ed2:	8923      	ldrh	r3, [r4, #8]
   17ed4:	421f      	tst	r7, r3
   17ed6:	bf14      	ite	ne
   17ed8:	2001      	movne	r0, #1
   17eda:	2000      	moveq	r0, #0
   17edc:	e7a4      	b.n	17e28 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17ede:	f642 0303 	movw	r3, #10243	; 0x2803
   17ee2:	6820      	ldr	r0, [r4, #0]
   17ee4:	a901      	add	r1, sp, #4
   17ee6:	f88d 6004 	strb.w	r6, [sp, #4]
   17eea:	f8ad 3006 	strh.w	r3, [sp, #6]
   17eee:	f013 ffd0 	bl	2be92 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17ef2:	2800      	cmp	r0, #0
   17ef4:	d0d7      	beq.n	17ea6 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17ef6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17efa:	6820      	ldr	r0, [r4, #0]
   17efc:	a902      	add	r1, sp, #8
   17efe:	f88d 6008 	strb.w	r6, [sp, #8]
   17f02:	f8ad 300a 	strh.w	r3, [sp, #10]
   17f06:	f013 ffc4 	bl	2be92 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17f0a:	2800      	cmp	r0, #0
   17f0c:	d0cb      	beq.n	17ea6 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17f0e:	f642 0301 	movw	r3, #10241	; 0x2801
   17f12:	6820      	ldr	r0, [r4, #0]
   17f14:	a903      	add	r1, sp, #12
   17f16:	f88d 600c 	strb.w	r6, [sp, #12]
   17f1a:	f8ad 300e 	strh.w	r3, [sp, #14]
   17f1e:	f013 ffb8 	bl	2be92 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17f22:	2800      	cmp	r0, #0
   17f24:	d0bf      	beq.n	17ea6 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   17f26:	4620      	mov	r0, r4
   17f28:	f7ff ff34 	bl	17d94 <bt_gatt_attr_next>
		if (!attr) {
   17f2c:	4604      	mov	r4, r0
   17f2e:	2800      	cmp	r0, #0
   17f30:	d1b0      	bne.n	17e94 <bt_gatt_is_subscribed+0xdc>
   17f32:	e778      	b.n	17e26 <bt_gatt_is_subscribed+0x6e>
   17f34:	00034bf1 	.word	0x00034bf1
   17f38:	00035d29 	.word	0x00035d29
   17f3c:	00032659 	.word	0x00032659
   17f40:	00035dc1 	.word	0x00035dc1
   17f44:	00035dd6 	.word	0x00035dd6
   17f48:	00035ddb 	.word	0x00035ddb

00017f4c <gatt_indicate>:
{
   17f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17f50:	4615      	mov	r5, r2
   17f52:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17f54:	2294      	movs	r2, #148	; 0x94
   17f56:	6869      	ldr	r1, [r5, #4]
{
   17f58:	b086      	sub	sp, #24
   17f5a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17f5c:	f015 fa79 	bl	2d452 <bt_gatt_check_perm>
   17f60:	4680      	mov	r8, r0
   17f62:	b178      	cbz	r0, 17f84 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   17f64:	4b36      	ldr	r3, [pc, #216]	; (18040 <gatt_indicate+0xf4>)
		return -EPERM;
   17f66:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   17f6a:	9305      	str	r3, [sp, #20]
   17f6c:	2302      	movs	r3, #2
   17f6e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17f72:	4834      	ldr	r0, [pc, #208]	; (18044 <gatt_indicate+0xf8>)
   17f74:	aa04      	add	r2, sp, #16
   17f76:	9304      	str	r3, [sp, #16]
   17f78:	f015 f9e9 	bl	2d34e <z_log_msg_static_create.constprop.0>
}
   17f7c:	4628      	mov	r0, r5
   17f7e:	b006      	add	sp, #24
   17f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   17f84:	2202      	movs	r2, #2
   17f86:	4630      	mov	r0, r6
   17f88:	6869      	ldr	r1, [r5, #4]
   17f8a:	f7ff ff15 	bl	17db8 <bt_gatt_is_subscribed>
   17f8e:	b960      	cbnz	r0, 17faa <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   17f90:	4b2d      	ldr	r3, [pc, #180]	; (18048 <gatt_indicate+0xfc>)
   17f92:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17f96:	9305      	str	r3, [sp, #20]
   17f98:	2302      	movs	r3, #2
   17f9a:	482a      	ldr	r0, [pc, #168]	; (18044 <gatt_indicate+0xf8>)
   17f9c:	aa04      	add	r2, sp, #16
   17f9e:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   17fa0:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   17fa4:	f015 f9d3 	bl	2d34e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17fa8:	e7e8      	b.n	17f7c <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17faa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17fae:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17fb0:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17fb2:	f7fe fd93 	bl	16adc <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   17fb6:	3702      	adds	r7, #2
	if (!req) {
   17fb8:	4604      	mov	r4, r0
   17fba:	b1d0      	cbz	r0, 17ff2 <gatt_indicate+0xa6>
	req->att_op = op;
   17fbc:	211d      	movs	r1, #29
	req->func = func;
   17fbe:	4b23      	ldr	r3, [pc, #140]	; (1804c <gatt_indicate+0x100>)
	req->len = len;
   17fc0:	6147      	str	r7, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17fc2:	463a      	mov	r2, r7
	req->att_op = op;
   17fc4:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   17fc6:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   17fca:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   17fcc:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17fce:	4630      	mov	r0, r6
   17fd0:	f7fe fab6 	bl	16540 <bt_att_create_pdu>
	if (!buf) {
   17fd4:	4607      	mov	r7, r0
   17fd6:	b978      	cbnz	r0, 17ff8 <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   17fd8:	4b1d      	ldr	r3, [pc, #116]	; (18050 <gatt_indicate+0x104>)
   17fda:	481a      	ldr	r0, [pc, #104]	; (18044 <gatt_indicate+0xf8>)
   17fdc:	9305      	str	r3, [sp, #20]
   17fde:	2302      	movs	r3, #2
   17fe0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17fe4:	aa04      	add	r2, sp, #16
   17fe6:	9304      	str	r3, [sp, #16]
   17fe8:	f015 f9b1 	bl	2d34e <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   17fec:	4620      	mov	r0, r4
   17fee:	f7fe fd99 	bl	16b24 <bt_att_req_free>
		return -ENOMEM;
   17ff2:	f06f 050b 	mvn.w	r5, #11
   17ff6:	e7c1      	b.n	17f7c <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   17ff8:	2301      	movs	r3, #1
   17ffa:	4642      	mov	r2, r8
   17ffc:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   17ffe:	f107 0a0c 	add.w	sl, r7, #12
   18002:	f015 f862 	bl	2d0ca <bt_att_set_tx_meta_data>
   18006:	2102      	movs	r1, #2
   18008:	4650      	mov	r0, sl
   1800a:	f003 fbdf 	bl	1b7cc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1800e:	4680      	mov	r8, r0
   18010:	f828 9b02 	strh.w	r9, [r8], #2
   18014:	8aa9      	ldrh	r1, [r5, #20]
   18016:	4650      	mov	r0, sl
   18018:	f003 fbd8 	bl	1b7cc <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1801c:	8aaa      	ldrh	r2, [r5, #20]
   1801e:	6929      	ldr	r1, [r5, #16]
   18020:	4640      	mov	r0, r8
   18022:	f018 faa4 	bl	3056e <memcpy>
	err = bt_att_req_send(conn, req);
   18026:	4621      	mov	r1, r4
   18028:	4630      	mov	r0, r6
	req->buf = buf;
   1802a:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1802c:	f7fe feb4 	bl	16d98 <bt_att_req_send>
	if (err) {
   18030:	4605      	mov	r5, r0
   18032:	2800      	cmp	r0, #0
   18034:	d0a2      	beq.n	17f7c <gatt_indicate+0x30>
		bt_att_req_free(req);
   18036:	4620      	mov	r0, r4
   18038:	f7fe fd74 	bl	16b24 <bt_att_req_free>
   1803c:	e79e      	b.n	17f7c <gatt_indicate+0x30>
   1803e:	bf00      	nop
   18040:	00035df1 	.word	0x00035df1
   18044:	000314d4 	.word	0x000314d4
   18048:	00035e07 	.word	0x00035e07
   1804c:	0002d0f3 	.word	0x0002d0f3
   18050:	00035e32 	.word	0x00035e32

00018054 <bt_gatt_indicate>:
{
   18054:	b530      	push	{r4, r5, lr}
   18056:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   18058:	460c      	mov	r4, r1
{
   1805a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1805c:	b971      	cbnz	r1, 1807c <bt_gatt_indicate+0x28>
   1805e:	4946      	ldr	r1, [pc, #280]	; (18178 <bt_gatt_indicate+0x124>)
   18060:	f640 330d 	movw	r3, #2829	; 0xb0d
   18064:	4a45      	ldr	r2, [pc, #276]	; (1817c <bt_gatt_indicate+0x128>)
   18066:	4846      	ldr	r0, [pc, #280]	; (18180 <bt_gatt_indicate+0x12c>)
   18068:	f012 fb27 	bl	2a6ba <assert_print>
   1806c:	4845      	ldr	r0, [pc, #276]	; (18184 <bt_gatt_indicate+0x130>)
   1806e:	f012 fb24 	bl	2a6ba <assert_print>
   18072:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   18076:	4841      	ldr	r0, [pc, #260]	; (1817c <bt_gatt_indicate+0x128>)
   18078:	f012 fb18 	bl	2a6ac <assert_post_action>
   1807c:	684b      	ldr	r3, [r1, #4]
   1807e:	b973      	cbnz	r3, 1809e <bt_gatt_indicate+0x4a>
   18080:	680b      	ldr	r3, [r1, #0]
   18082:	b963      	cbnz	r3, 1809e <bt_gatt_indicate+0x4a>
   18084:	4940      	ldr	r1, [pc, #256]	; (18188 <bt_gatt_indicate+0x134>)
   18086:	f640 330e 	movw	r3, #2830	; 0xb0e
   1808a:	4a3c      	ldr	r2, [pc, #240]	; (1817c <bt_gatt_indicate+0x128>)
   1808c:	483c      	ldr	r0, [pc, #240]	; (18180 <bt_gatt_indicate+0x12c>)
   1808e:	f012 fb14 	bl	2a6ba <assert_print>
   18092:	483c      	ldr	r0, [pc, #240]	; (18184 <bt_gatt_indicate+0x130>)
   18094:	f012 fb11 	bl	2a6ba <assert_print>
   18098:	f640 310e 	movw	r1, #2830	; 0xb0e
   1809c:	e7eb      	b.n	18076 <bt_gatt_indicate+0x22>
   1809e:	483b      	ldr	r0, [pc, #236]	; (1818c <bt_gatt_indicate+0x138>)
   180a0:	f015 f8a8 	bl	2d1f4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   180a4:	0742      	lsls	r2, r0, #29
   180a6:	d561      	bpl.n	1816c <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   180a8:	b115      	cbz	r5, 180b0 <bt_gatt_indicate+0x5c>
   180aa:	7b6b      	ldrb	r3, [r5, #13]
   180ac:	2b07      	cmp	r3, #7
   180ae:	d160      	bne.n	18172 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   180b0:	6860      	ldr	r0, [r4, #4]
   180b2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   180b4:	f7ff fc48 	bl	17948 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   180b8:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   180ba:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   180be:	b33a      	cbz	r2, 18110 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   180c0:	a905      	add	r1, sp, #20
   180c2:	9102      	str	r1, [sp, #8]
   180c4:	4932      	ldr	r1, [pc, #200]	; (18190 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   180c6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   180c8:	9101      	str	r1, [sp, #4]
   180ca:	2101      	movs	r1, #1
   180cc:	9100      	str	r1, [sp, #0]
   180ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   180d2:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   180d4:	f7ff fc80 	bl	179d8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   180d8:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   180da:	b91b      	cbnz	r3, 180e4 <bt_gatt_indicate+0x90>
			return -ENOENT;
   180dc:	f06f 0001 	mvn.w	r0, #1
}
   180e0:	b00b      	add	sp, #44	; 0x2c
   180e2:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   180e4:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   180e6:	9b05      	ldr	r3, [sp, #20]
   180e8:	a904      	add	r1, sp, #16
   180ea:	6818      	ldr	r0, [r3, #0]
   180ec:	2300      	movs	r3, #0
   180ee:	f88d 3010 	strb.w	r3, [sp, #16]
   180f2:	f642 0303 	movw	r3, #10243	; 0x2803
   180f6:	f8ad 3012 	strh.w	r3, [sp, #18]
   180fa:	f013 feca 	bl	2be92 <bt_uuid_cmp>
   180fe:	b970      	cbnz	r0, 1811e <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   18100:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   18102:	68c3      	ldr	r3, [r0, #12]
   18104:	799b      	ldrb	r3, [r3, #6]
   18106:	069b      	lsls	r3, r3, #26
   18108:	d405      	bmi.n	18116 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1810a:	f06f 0015 	mvn.w	r0, #21
   1810e:	e7e7      	b.n	180e0 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   18110:	2800      	cmp	r0, #0
   18112:	d1e8      	bne.n	180e6 <bt_gatt_indicate+0x92>
   18114:	e7e2      	b.n	180dc <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   18116:	f015 f94a 	bl	2d3ae <bt_gatt_attr_value_handle>
   1811a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1811e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   18122:	b13d      	cbz	r5, 18134 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   18124:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   18126:	4601      	mov	r1, r0
   18128:	4622      	mov	r2, r4
   1812a:	4628      	mov	r0, r5
		params->_ref = 1;
   1812c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1812e:	f7ff ff0d 	bl	17f4c <gatt_indicate>
   18132:	e7d5      	b.n	180e0 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   18134:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   18138:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1813a:	2302      	movs	r3, #2
   1813c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18140:	f642 1302 	movw	r3, #10498	; 0x2902
   18144:	f8ad 3012 	strh.w	r3, [sp, #18]
   18148:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1814a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1814c:	9302      	str	r3, [sp, #8]
   1814e:	4b11      	ldr	r3, [pc, #68]	; (18194 <bt_gatt_indicate+0x140>)
   18150:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18154:	9301      	str	r3, [sp, #4]
   18156:	2301      	movs	r3, #1
   18158:	aa04      	add	r2, sp, #16
   1815a:	9300      	str	r3, [sp, #0]
   1815c:	462b      	mov	r3, r5
	data.ind_params = params;
   1815e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18160:	f88d 5010 	strb.w	r5, [sp, #16]
   18164:	f7ff fc38 	bl	179d8 <bt_gatt_foreach_attr_type>
	return data.err;
   18168:	9807      	ldr	r0, [sp, #28]
   1816a:	e7b9      	b.n	180e0 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1816c:	f06f 000a 	mvn.w	r0, #10
   18170:	e7b6      	b.n	180e0 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   18172:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18176:	e7b3      	b.n	180e0 <bt_gatt_indicate+0x8c>
   18178:	00035e59 	.word	0x00035e59
   1817c:	00035d29 	.word	0x00035d29
   18180:	00032659 	.word	0x00032659
   18184:	00035e60 	.word	0x00035e60
   18188:	00035e76 	.word	0x00035e76
   1818c:	200080cc 	.word	0x200080cc
   18190:	0002d119 	.word	0x0002d119
   18194:	00018559 	.word	0x00018559

00018198 <sc_process>:
{
   18198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1819a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1819e:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   181a0:	f1a0 0720 	sub.w	r7, r0, #32
   181a4:	4628      	mov	r0, r5
   181a6:	f015 f825 	bl	2d1f4 <atomic_get>
   181aa:	0783      	lsls	r3, r0, #30
   181ac:	f3c0 0640 	ubfx	r6, r0, #1, #1
   181b0:	d50e      	bpl.n	181d0 <sc_process+0x38>
   181b2:	4919      	ldr	r1, [pc, #100]	; (18218 <sc_process+0x80>)
   181b4:	f240 439a 	movw	r3, #1178	; 0x49a
   181b8:	4a18      	ldr	r2, [pc, #96]	; (1821c <sc_process+0x84>)
   181ba:	4819      	ldr	r0, [pc, #100]	; (18220 <sc_process+0x88>)
   181bc:	f012 fa7d 	bl	2a6ba <assert_print>
   181c0:	4818      	ldr	r0, [pc, #96]	; (18224 <sc_process+0x8c>)
   181c2:	f012 fa7a 	bl	2a6ba <assert_print>
   181c6:	f240 419a 	movw	r1, #1178	; 0x49a
   181ca:	4814      	ldr	r0, [pc, #80]	; (1821c <sc_process+0x84>)
   181cc:	f012 fa6e 	bl	2a6ac <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   181d0:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   181d4:	f06f 0101 	mvn.w	r1, #1
   181d8:	4628      	mov	r0, r5
   181da:	9301      	str	r3, [sp, #4]
   181dc:	f015 f818 	bl	2d210 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   181e0:	4b11      	ldr	r3, [pc, #68]	; (18228 <sc_process+0x90>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   181e2:	4639      	mov	r1, r7
	sc->params.attr = &_1_gatt_svc.attrs[2];
   181e4:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   181e8:	4b10      	ldr	r3, [pc, #64]	; (1822c <sc_process+0x94>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   181ea:	4630      	mov	r0, r6
	sc->params.func = sc_indicate_rsp;
   181ec:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   181f0:	ab01      	add	r3, sp, #4
   181f2:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   181f6:	2304      	movs	r3, #4
	sc->start = 0U;
   181f8:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   181fc:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   18200:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   18204:	f7ff ff26 	bl	18054 <bt_gatt_indicate>
   18208:	b918      	cbnz	r0, 18212 <sc_process+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1820a:	2102      	movs	r1, #2
   1820c:	4628      	mov	r0, r5
   1820e:	f014 fff4 	bl	2d1fa <atomic_or>
}
   18212:	b003      	add	sp, #12
   18214:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18216:	bf00      	nop
   18218:	00035e93 	.word	0x00035e93
   1821c:	00035d29 	.word	0x00035d29
   18220:	00032659 	.word	0x00032659
   18224:	00035ec4 	.word	0x00035ec4
   18228:	00032070 	.word	0x00032070
   1822c:	0001780d 	.word	0x0001780d

00018230 <update_ccc>:
{
   18230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18234:	b089      	sub	sp, #36	; 0x24
   18236:	4690      	mov	r8, r2
	struct bt_conn *conn = data->conn;
   18238:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1823a:	4b3b      	ldr	r3, [pc, #236]	; (18328 <update_ccc+0xf8>)
   1823c:	6882      	ldr	r2, [r0, #8]
{
   1823e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18240:	429a      	cmp	r2, r3
{
   18242:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18244:	d11f      	bne.n	18286 <update_ccc+0x56>
	ccc = attr->user_data;
   18246:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   18248:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1824a:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1824c:	b1db      	cbz	r3, 18286 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1824e:	4620      	mov	r0, r4
   18250:	7831      	ldrb	r1, [r6, #0]
   18252:	f014 fa1a 	bl	2c68a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   18256:	b1b0      	cbz	r0, 18286 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   18258:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1825c:	4629      	mov	r1, r5
   1825e:	4620      	mov	r0, r4
   18260:	f015 f8f7 	bl	2d452 <bt_gatt_check_perm>
		if (err) {
   18264:	b330      	cbz	r0, 182b4 <update_ccc+0x84>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   18266:	2803      	cmp	r0, #3
   18268:	d112      	bne.n	18290 <update_ccc+0x60>
				LOG_WRN("CCC %p not writable", attr);
   1826a:	466c      	mov	r4, sp
   1826c:	b088      	sub	sp, #32
   1826e:	466a      	mov	r2, sp
   18270:	4b2e      	ldr	r3, [pc, #184]	; (1832c <update_ccc+0xfc>)
   18272:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18276:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1827a:	f842 0f10 	str.w	r0, [r2, #16]!
   1827e:	482c      	ldr	r0, [pc, #176]	; (18330 <update_ccc+0x100>)
   18280:	f015 f865 	bl	2d34e <z_log_msg_static_create.constprop.0>
   18284:	46a5      	mov	sp, r4
}
   18286:	2001      	movs	r0, #1
   18288:	3724      	adds	r7, #36	; 0x24
   1828a:	46bd      	mov	sp, r7
   1828c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			sec = BT_SECURITY_L2;
   18290:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   18292:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   18294:	bf0c      	ite	eq
   18296:	f04f 0903 	moveq.w	r9, #3
   1829a:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1829e:	f014 f9f2 	bl	2c686 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   182a2:	4581      	cmp	r9, r0
   182a4:	d906      	bls.n	182b4 <update_ccc+0x84>
				if (data->sec < sec) {
   182a6:	f898 3004 	ldrb.w	r3, [r8, #4]
   182aa:	454b      	cmp	r3, r9
   182ac:	d2eb      	bcs.n	18286 <update_ccc+0x56>
					data->sec = sec;
   182ae:	f888 9004 	strb.w	r9, [r8, #4]
   182b2:	e7e8      	b.n	18286 <update_ccc+0x56>
		gatt_ccc_changed(attr, ccc);
   182b4:	4631      	mov	r1, r6
   182b6:	4628      	mov	r0, r5
   182b8:	f014 ff11 	bl	2d0de <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   182bc:	4b1d      	ldr	r3, [pc, #116]	; (18334 <update_ccc+0x104>)
   182be:	429e      	cmp	r6, r3
   182c0:	d1e1      	bne.n	18286 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   182c2:	7a20      	ldrb	r0, [r4, #8]
   182c4:	f104 0190 	add.w	r1, r4, #144	; 0x90
   182c8:	f7fe fdca 	bl	16e60 <find_sc_cfg>
	if (!cfg) {
   182cc:	2800      	cmp	r0, #0
   182ce:	d0da      	beq.n	18286 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   182d0:	8902      	ldrh	r2, [r0, #8]
   182d2:	8943      	ldrh	r3, [r0, #10]
   182d4:	ea52 0103 	orrs.w	r1, r2, r3
   182d8:	d0d5      	beq.n	18286 <update_ccc+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   182da:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   182dc:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   182de:	4620      	mov	r0, r4
   182e0:	f7fc fedc 	bl	1509c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   182e4:	2318      	movs	r3, #24
   182e6:	4914      	ldr	r1, [pc, #80]	; (18338 <update_ccc+0x108>)
   182e8:	4a14      	ldr	r2, [pc, #80]	; (1833c <update_ccc+0x10c>)
   182ea:	fb03 1300 	mla	r3, r3, r0, r1
   182ee:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   182f0:	4a13      	ldr	r2, [pc, #76]	; (18340 <update_ccc+0x110>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   182f2:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   182f4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   182f6:	1d3a      	adds	r2, r7, #4
   182f8:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   182fa:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   182fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18300:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   18304:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18306:	4620      	mov	r0, r4
   18308:	f7ff fea4 	bl	18054 <bt_gatt_indicate>
   1830c:	2800      	cmp	r0, #0
   1830e:	d0ba      	beq.n	18286 <update_ccc+0x56>
		LOG_ERR("SC restore indication failed");
   18310:	4b0c      	ldr	r3, [pc, #48]	; (18344 <update_ccc+0x114>)
   18312:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18316:	61fb      	str	r3, [r7, #28]
   18318:	2302      	movs	r3, #2
   1831a:	4805      	ldr	r0, [pc, #20]	; (18330 <update_ccc+0x100>)
   1831c:	61bb      	str	r3, [r7, #24]
   1831e:	f107 0218 	add.w	r2, r7, #24
   18322:	f015 f814 	bl	2d34e <z_log_msg_static_create.constprop.0>
   18326:	e7ae      	b.n	18286 <update_ccc+0x56>
   18328:	000176cd 	.word	0x000176cd
   1832c:	00035edf 	.word	0x00035edf
   18330:	000314d4 	.word	0x000314d4
   18334:	20008524 	.word	0x20008524
   18338:	200216e0 	.word	0x200216e0
   1833c:	00032070 	.word	0x00032070
   18340:	0002d373 	.word	0x0002d373
   18344:	00035ef3 	.word	0x00035ef3

00018348 <gatt_notify>:
{
   18348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1834c:	4614      	mov	r4, r2
   1834e:	4688      	mov	r8, r1
   18350:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18352:	2294      	movs	r2, #148	; 0x94
   18354:	6861      	ldr	r1, [r4, #4]
{
   18356:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18358:	f015 f87b 	bl	2d452 <bt_gatt_check_perm>
   1835c:	b170      	cbz	r0, 1837c <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1835e:	4b2b      	ldr	r3, [pc, #172]	; (1840c <gatt_notify+0xc4>)
   18360:	482b      	ldr	r0, [pc, #172]	; (18410 <gatt_notify+0xc8>)
   18362:	9305      	str	r3, [sp, #20]
   18364:	2302      	movs	r3, #2
   18366:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1836a:	aa04      	add	r2, sp, #16
   1836c:	9304      	str	r3, [sp, #16]
   1836e:	f014 ffee 	bl	2d34e <z_log_msg_static_create.constprop.0>
		return -EPERM;
   18372:	f04f 30ff 	mov.w	r0, #4294967295
}
   18376:	b007      	add	sp, #28
   18378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1837c:	2201      	movs	r2, #1
   1837e:	4630      	mov	r0, r6
   18380:	6861      	ldr	r1, [r4, #4]
   18382:	f7ff fd19 	bl	17db8 <bt_gatt_is_subscribed>
   18386:	b960      	cbnz	r0, 183a2 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   18388:	4b22      	ldr	r3, [pc, #136]	; (18414 <gatt_notify+0xcc>)
   1838a:	4821      	ldr	r0, [pc, #132]	; (18410 <gatt_notify+0xc8>)
   1838c:	9305      	str	r3, [sp, #20]
   1838e:	2302      	movs	r3, #2
   18390:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18394:	aa04      	add	r2, sp, #16
   18396:	9304      	str	r3, [sp, #16]
   18398:	f014 ffd9 	bl	2d34e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1839c:	f06f 0015 	mvn.w	r0, #21
   183a0:	e7e9      	b.n	18376 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   183a2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   183a4:	211b      	movs	r1, #27
   183a6:	4630      	mov	r0, r6
   183a8:	3202      	adds	r2, #2
   183aa:	f7fe f8c9 	bl	16540 <bt_att_create_pdu>
	if (!buf) {
   183ae:	4605      	mov	r5, r0
   183b0:	b960      	cbnz	r0, 183cc <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   183b2:	4b19      	ldr	r3, [pc, #100]	; (18418 <gatt_notify+0xd0>)
   183b4:	4816      	ldr	r0, [pc, #88]	; (18410 <gatt_notify+0xc8>)
   183b6:	9305      	str	r3, [sp, #20]
   183b8:	2302      	movs	r3, #2
   183ba:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   183be:	aa04      	add	r2, sp, #16
   183c0:	9304      	str	r3, [sp, #16]
   183c2:	f014 ffc4 	bl	2d34e <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   183c6:	f06f 000b 	mvn.w	r0, #11
   183ca:	e7d4      	b.n	18376 <gatt_notify+0x2e>
   183cc:	f100 090c 	add.w	r9, r0, #12
   183d0:	2102      	movs	r1, #2
   183d2:	4648      	mov	r0, r9
   183d4:	f003 f9fa 	bl	1b7cc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   183d8:	4607      	mov	r7, r0
   183da:	f827 8b02 	strh.w	r8, [r7], #2
   183de:	89a1      	ldrh	r1, [r4, #12]
   183e0:	4648      	mov	r0, r9
   183e2:	f003 f9f3 	bl	1b7cc <net_buf_simple_add>
   183e6:	89a2      	ldrh	r2, [r4, #12]
   183e8:	68a1      	ldr	r1, [r4, #8]
   183ea:	4638      	mov	r0, r7
   183ec:	f018 f8bf 	bl	3056e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   183f0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   183f4:	4628      	mov	r0, r5
   183f6:	2301      	movs	r3, #1
   183f8:	f014 fe67 	bl	2d0ca <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   183fc:	4629      	mov	r1, r5
   183fe:	4630      	mov	r0, r6
}
   18400:	b007      	add	sp, #28
   18402:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   18406:	f7fe bc69 	b.w	16cdc <bt_att_send>
   1840a:	bf00      	nop
   1840c:	00035df1 	.word	0x00035df1
   18410:	000314d4 	.word	0x000314d4
   18414:	00035e07 	.word	0x00035e07
   18418:	00035f10 	.word	0x00035f10

0001841c <bt_gatt_notify_cb>:
{
   1841c:	b530      	push	{r4, r5, lr}
   1841e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   18420:	460c      	mov	r4, r1
{
   18422:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   18424:	b971      	cbnz	r1, 18444 <bt_gatt_notify_cb+0x28>
   18426:	4944      	ldr	r1, [pc, #272]	; (18538 <bt_gatt_notify_cb+0x11c>)
   18428:	f640 232d 	movw	r3, #2605	; 0xa2d
   1842c:	4a43      	ldr	r2, [pc, #268]	; (1853c <bt_gatt_notify_cb+0x120>)
   1842e:	4844      	ldr	r0, [pc, #272]	; (18540 <bt_gatt_notify_cb+0x124>)
   18430:	f012 f943 	bl	2a6ba <assert_print>
   18434:	4843      	ldr	r0, [pc, #268]	; (18544 <bt_gatt_notify_cb+0x128>)
   18436:	f012 f940 	bl	2a6ba <assert_print>
   1843a:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1843e:	483f      	ldr	r0, [pc, #252]	; (1853c <bt_gatt_notify_cb+0x120>)
   18440:	f012 f934 	bl	2a6ac <assert_post_action>
   18444:	684b      	ldr	r3, [r1, #4]
   18446:	b973      	cbnz	r3, 18466 <bt_gatt_notify_cb+0x4a>
   18448:	680b      	ldr	r3, [r1, #0]
   1844a:	b963      	cbnz	r3, 18466 <bt_gatt_notify_cb+0x4a>
   1844c:	493e      	ldr	r1, [pc, #248]	; (18548 <bt_gatt_notify_cb+0x12c>)
   1844e:	f640 232e 	movw	r3, #2606	; 0xa2e
   18452:	4a3a      	ldr	r2, [pc, #232]	; (1853c <bt_gatt_notify_cb+0x120>)
   18454:	483a      	ldr	r0, [pc, #232]	; (18540 <bt_gatt_notify_cb+0x124>)
   18456:	f012 f930 	bl	2a6ba <assert_print>
   1845a:	483a      	ldr	r0, [pc, #232]	; (18544 <bt_gatt_notify_cb+0x128>)
   1845c:	f012 f92d 	bl	2a6ba <assert_print>
   18460:	f640 212e 	movw	r1, #2606	; 0xa2e
   18464:	e7eb      	b.n	1843e <bt_gatt_notify_cb+0x22>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18466:	4839      	ldr	r0, [pc, #228]	; (1854c <bt_gatt_notify_cb+0x130>)
   18468:	f014 fec4 	bl	2d1f4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1846c:	0742      	lsls	r2, r0, #29
   1846e:	d55d      	bpl.n	1852c <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18470:	b115      	cbz	r5, 18478 <bt_gatt_notify_cb+0x5c>
   18472:	7b6b      	ldrb	r3, [r5, #13]
   18474:	2b07      	cmp	r3, #7
   18476:	d15c      	bne.n	18532 <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   18478:	6860      	ldr	r0, [r4, #4]
   1847a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1847c:	f7ff fa64 	bl	17948 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   18480:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18482:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   18486:	b33a      	cbz	r2, 184d8 <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18488:	a905      	add	r1, sp, #20
   1848a:	9102      	str	r1, [sp, #8]
   1848c:	4930      	ldr	r1, [pc, #192]	; (18550 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   1848e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18490:	9101      	str	r1, [sp, #4]
   18492:	2101      	movs	r1, #1
   18494:	9100      	str	r1, [sp, #0]
   18496:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1849a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1849c:	f7ff fa9c 	bl	179d8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   184a0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   184a2:	b91b      	cbnz	r3, 184ac <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   184a4:	f06f 0001 	mvn.w	r0, #1
}
   184a8:	b00b      	add	sp, #44	; 0x2c
   184aa:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   184ac:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   184ae:	9b05      	ldr	r3, [sp, #20]
   184b0:	a904      	add	r1, sp, #16
   184b2:	6818      	ldr	r0, [r3, #0]
   184b4:	2300      	movs	r3, #0
   184b6:	f88d 3010 	strb.w	r3, [sp, #16]
   184ba:	f642 0303 	movw	r3, #10243	; 0x2803
   184be:	f8ad 3012 	strh.w	r3, [sp, #18]
   184c2:	f013 fce6 	bl	2be92 <bt_uuid_cmp>
   184c6:	b970      	cbnz	r0, 184e6 <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   184c8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   184ca:	68c3      	ldr	r3, [r0, #12]
   184cc:	799b      	ldrb	r3, [r3, #6]
   184ce:	06db      	lsls	r3, r3, #27
   184d0:	d405      	bmi.n	184de <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   184d2:	f06f 0015 	mvn.w	r0, #21
   184d6:	e7e7      	b.n	184a8 <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   184d8:	2800      	cmp	r0, #0
   184da:	d1e8      	bne.n	184ae <bt_gatt_notify_cb+0x92>
   184dc:	e7e2      	b.n	184a4 <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   184de:	f014 ff66 	bl	2d3ae <bt_gatt_attr_value_handle>
   184e2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   184e6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   184ea:	b12d      	cbz	r5, 184f8 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   184ec:	4601      	mov	r1, r0
   184ee:	4622      	mov	r2, r4
   184f0:	4628      	mov	r0, r5
   184f2:	f7ff ff29 	bl	18348 <gatt_notify>
   184f6:	e7d7      	b.n	184a8 <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   184f8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   184fc:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   18500:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   18502:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18504:	f8ad 2012 	strh.w	r2, [sp, #18]
   18508:	aa05      	add	r2, sp, #20
   1850a:	9202      	str	r2, [sp, #8]
   1850c:	4a11      	ldr	r2, [pc, #68]	; (18554 <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   1850e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18512:	e9cd 3200 	strd	r3, r2, [sp]
   18516:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1851a:	462b      	mov	r3, r5
   1851c:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1851e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18520:	f88d 5010 	strb.w	r5, [sp, #16]
   18524:	f7ff fa58 	bl	179d8 <bt_gatt_foreach_attr_type>
	return data.err;
   18528:	9807      	ldr	r0, [sp, #28]
   1852a:	e7bd      	b.n	184a8 <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   1852c:	f06f 000a 	mvn.w	r0, #10
   18530:	e7ba      	b.n	184a8 <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   18532:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18536:	e7b7      	b.n	184a8 <bt_gatt_notify_cb+0x8c>
   18538:	00035e59 	.word	0x00035e59
   1853c:	00035d29 	.word	0x00035d29
   18540:	00032659 	.word	0x00032659
   18544:	00035e60 	.word	0x00035e60
   18548:	00035e76 	.word	0x00035e76
   1854c:	200080cc 	.word	0x200080cc
   18550:	0002d119 	.word	0x0002d119
   18554:	00018559 	.word	0x00018559

00018558 <notify_cb>:
{
   18558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1855c:	4b43      	ldr	r3, [pc, #268]	; (1866c <notify_cb+0x114>)
{
   1855e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18560:	6882      	ldr	r2, [r0, #8]
{
   18562:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18564:	429a      	cmp	r2, r3
{
   18566:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   18568:	d004      	beq.n	18574 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1856a:	2701      	movs	r7, #1
}
   1856c:	4638      	mov	r0, r7
   1856e:	b007      	add	sp, #28
   18570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   18574:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18576:	4b3e      	ldr	r3, [pc, #248]	; (18670 <notify_cb+0x118>)
   18578:	429e      	cmp	r6, r3
   1857a:	d010      	beq.n	1859e <notify_cb+0x46>
		if (cfg->value != data->type) {
   1857c:	8932      	ldrh	r2, [r6, #8]
   1857e:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18580:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   18582:	429a      	cmp	r2, r3
   18584:	d1f1      	bne.n	1856a <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18586:	7830      	ldrb	r0, [r6, #0]
   18588:	f7fc ff38 	bl	153fc <bt_conn_lookup_addr_le>
		if (!conn) {
   1858c:	4604      	mov	r4, r0
   1858e:	2800      	cmp	r0, #0
   18590:	d0eb      	beq.n	1856a <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   18592:	7b43      	ldrb	r3, [r0, #13]
   18594:	2b07      	cmp	r3, #7
   18596:	d026      	beq.n	185e6 <notify_cb+0x8e>
			bt_conn_unref(conn);
   18598:	f7fc fc54 	bl	14e44 <bt_conn_unref>
			continue;
   1859c:	e7e5      	b.n	1856a <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1859e:	f04f 0800 	mov.w	r8, #0
   185a2:	4c34      	ldr	r4, [pc, #208]	; (18674 <notify_cb+0x11c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   185a4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 18678 <notify_cb+0x120>
   185a8:	4649      	mov	r1, r9
   185aa:	4620      	mov	r0, r4
   185ac:	f014 fe0d 	bl	2d1ca <bt_addr_le_eq>
   185b0:	b978      	cbnz	r0, 185d2 <notify_cb+0x7a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   185b2:	2207      	movs	r2, #7
   185b4:	4621      	mov	r1, r4
   185b6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   185ba:	f7fc ff69 	bl	15490 <bt_conn_lookup_state_le>
			if (!conn) {
   185be:	b978      	cbnz	r0, 185e0 <notify_cb+0x88>
				sc = (struct sc_data *)data->ind_params->data;
   185c0:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   185c2:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   185c4:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   185c6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   185ca:	8853      	ldrh	r3, [r2, #2]
   185cc:	8812      	ldrh	r2, [r2, #0]
   185ce:	f7fe fe6f 	bl	172b0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   185d2:	340c      	adds	r4, #12
   185d4:	f1b8 0f00 	cmp.w	r8, #0
   185d8:	d1d0      	bne.n	1857c <notify_cb+0x24>
   185da:	f04f 0801 	mov.w	r8, #1
   185de:	e7e3      	b.n	185a8 <notify_cb+0x50>
			bt_conn_unref(conn);
   185e0:	f7fc fc30 	bl	14e44 <bt_conn_unref>
   185e4:	e7f5      	b.n	185d2 <notify_cb+0x7a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   185e6:	6973      	ldr	r3, [r6, #20]
   185e8:	b123      	cbz	r3, 185f4 <notify_cb+0x9c>
   185ea:	4639      	mov	r1, r7
   185ec:	4798      	blx	r3
   185ee:	b908      	cbnz	r0, 185f4 <notify_cb+0x9c>
			bt_conn_unref(conn);
   185f0:	4620      	mov	r0, r4
   185f2:	e7d1      	b.n	18598 <notify_cb+0x40>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   185f4:	4639      	mov	r1, r7
   185f6:	2294      	movs	r2, #148	; 0x94
   185f8:	4620      	mov	r0, r4
   185fa:	f014 ff2a 	bl	2d452 <bt_gatt_check_perm>
   185fe:	4607      	mov	r7, r0
   18600:	b150      	cbz	r0, 18618 <notify_cb+0xc0>
			LOG_WRN("Link is not encrypted");
   18602:	4b1e      	ldr	r3, [pc, #120]	; (1867c <notify_cb+0x124>)
   18604:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18608:	9305      	str	r3, [sp, #20]
   1860a:	2302      	movs	r3, #2
   1860c:	481c      	ldr	r0, [pc, #112]	; (18680 <notify_cb+0x128>)
   1860e:	aa04      	add	r2, sp, #16
   18610:	9304      	str	r3, [sp, #16]
   18612:	f014 fe9c 	bl	2d34e <z_log_msg_static_create.constprop.0>
   18616:	e7eb      	b.n	185f0 <notify_cb+0x98>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   18618:	89ab      	ldrh	r3, [r5, #12]
   1861a:	2b02      	cmp	r3, #2
   1861c:	d114      	bne.n	18648 <notify_cb+0xf0>
   1861e:	8933      	ldrh	r3, [r6, #8]
   18620:	079a      	lsls	r2, r3, #30
   18622:	d405      	bmi.n	18630 <notify_cb+0xd8>
		bt_conn_unref(conn);
   18624:	4620      	mov	r0, r4
   18626:	f7fc fc0d 	bl	14e44 <bt_conn_unref>
		data->err = 0;
   1862a:	2300      	movs	r3, #0
   1862c:	60ab      	str	r3, [r5, #8]
   1862e:	e79c      	b.n	1856a <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   18630:	4620      	mov	r0, r4
   18632:	692a      	ldr	r2, [r5, #16]
   18634:	88a9      	ldrh	r1, [r5, #4]
   18636:	f7ff fc89 	bl	17f4c <gatt_indicate>
			if (err == 0) {
   1863a:	4606      	mov	r6, r0
   1863c:	b978      	cbnz	r0, 1865e <notify_cb+0x106>
				data->ind_params->_ref++;
   1863e:	692a      	ldr	r2, [r5, #16]
   18640:	7d93      	ldrb	r3, [r2, #22]
   18642:	3301      	adds	r3, #1
   18644:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18646:	e7ed      	b.n	18624 <notify_cb+0xcc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   18648:	2b01      	cmp	r3, #1
   1864a:	d1eb      	bne.n	18624 <notify_cb+0xcc>
   1864c:	8933      	ldrh	r3, [r6, #8]
   1864e:	07db      	lsls	r3, r3, #31
   18650:	d5e8      	bpl.n	18624 <notify_cb+0xcc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18652:	4620      	mov	r0, r4
   18654:	692a      	ldr	r2, [r5, #16]
   18656:	88a9      	ldrh	r1, [r5, #4]
   18658:	f7ff fe76 	bl	18348 <gatt_notify>
   1865c:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1865e:	4620      	mov	r0, r4
   18660:	f7fc fbf0 	bl	14e44 <bt_conn_unref>
		if (err < 0) {
   18664:	2e00      	cmp	r6, #0
   18666:	db81      	blt.n	1856c <notify_cb+0x14>
   18668:	e7df      	b.n	1862a <notify_cb+0xd2>
   1866a:	bf00      	nop
   1866c:	000176cd 	.word	0x000176cd
   18670:	20008524 	.word	0x20008524
   18674:	20021b15 	.word	0x20021b15
   18678:	000345c9 	.word	0x000345c9
   1867c:	00035df1 	.word	0x00035df1
   18680:	000314d4 	.word	0x000314d4

00018684 <bt_gatt_connected>:
{
   18684:	b5b0      	push	{r4, r5, r7, lr}
   18686:	b08e      	sub	sp, #56	; 0x38
	data.sec = BT_SECURITY_L1;
   18688:	2301      	movs	r3, #1
{
   1868a:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1868c:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   18690:	4604      	mov	r4, r0
	data.conn = conn;
   18692:	6078      	str	r0, [r7, #4]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18694:	4629      	mov	r1, r5
   18696:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   18698:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1869a:	f013 fd56 	bl	2c14a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1869e:	b198      	cbz	r0, 186c8 <bt_gatt_connected+0x44>
		if (conn->id) {
   186a0:	7a22      	ldrb	r2, [r4, #8]
   186a2:	b3a2      	cbz	r2, 1870e <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   186a4:	2104      	movs	r1, #4
   186a6:	4638      	mov	r0, r7
   186a8:	f011 fdb7 	bl	2a21a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   186ac:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   186ae:	2124      	movs	r1, #36	; 0x24
   186b0:	4a18      	ldr	r2, [pc, #96]	; (18714 <bt_gatt_connected+0x90>)
   186b2:	f107 000c 	add.w	r0, r7, #12
   186b6:	462b      	mov	r3, r5
   186b8:	f7f9 face 	bl	11c58 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   186bc:	f107 020c 	add.w	r2, r7, #12
   186c0:	4610      	mov	r0, r2
   186c2:	4915      	ldr	r1, [pc, #84]	; (18718 <bt_gatt_connected+0x94>)
   186c4:	f7f7 fbde 	bl	fe84 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   186c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   186cc:	2001      	movs	r0, #1
   186ce:	4a13      	ldr	r2, [pc, #76]	; (1871c <bt_gatt_connected+0x98>)
   186d0:	1d3b      	adds	r3, r7, #4
   186d2:	f014 feb3 	bl	2d43c <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   186d6:	4620      	mov	r0, r4
   186d8:	f013 ffd5 	bl	2c686 <bt_conn_get_security>
   186dc:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   186de:	4288      	cmp	r0, r1
   186e0:	d212      	bcs.n	18708 <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   186e2:	4620      	mov	r0, r4
   186e4:	f013 ffa3 	bl	2c62e <bt_conn_set_security>
		if (err) {
   186e8:	b170      	cbz	r0, 18708 <bt_gatt_connected+0x84>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   186ea:	466c      	mov	r4, sp
   186ec:	b088      	sub	sp, #32
   186ee:	aa02      	add	r2, sp, #8
   186f0:	4b0b      	ldr	r3, [pc, #44]	; (18720 <bt_gatt_connected+0x9c>)
   186f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   186f6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   186fa:	2303      	movs	r3, #3
   186fc:	4809      	ldr	r0, [pc, #36]	; (18724 <bt_gatt_connected+0xa0>)
   186fe:	f842 3f10 	str.w	r3, [r2, #16]!
   18702:	f014 fe24 	bl	2d34e <z_log_msg_static_create.constprop.0>
   18706:	46a5      	mov	sp, r4
}
   18708:	3730      	adds	r7, #48	; 0x30
   1870a:	46bd      	mov	sp, r7
   1870c:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1870e:	9200      	str	r2, [sp, #0]
   18710:	e7cd      	b.n	186ae <bt_gatt_connected+0x2a>
   18712:	bf00      	nop
   18714:	00035dbd 	.word	0x00035dbd
   18718:	00017c69 	.word	0x00017c69
   1871c:	00018231 	.word	0x00018231
   18720:	00035f39 	.word	0x00035f39
   18724:	000314d4 	.word	0x000314d4

00018728 <bt_gatt_att_max_mtu_changed>:
{
   18728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1872a:	4605      	mov	r5, r0
   1872c:	460e      	mov	r6, r1
   1872e:	4617      	mov	r7, r2
	return list->head;
   18730:	4b06      	ldr	r3, [pc, #24]	; (1874c <bt_gatt_att_max_mtu_changed+0x24>)
   18732:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18734:	b14c      	cbz	r4, 1874a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   18736:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1873a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1873c:	b11b      	cbz	r3, 18746 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1873e:	463a      	mov	r2, r7
   18740:	4631      	mov	r1, r6
   18742:	4628      	mov	r0, r5
   18744:	4798      	blx	r3
	return node->next;
   18746:	6864      	ldr	r4, [r4, #4]
   18748:	e7f4      	b.n	18734 <bt_gatt_att_max_mtu_changed+0xc>
}
   1874a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1874c:	20021720 	.word	0x20021720

00018750 <bt_gatt_encrypt_change>:
{
   18750:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
   18752:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   18754:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18756:	466b      	mov	r3, sp
   18758:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1875c:	4a03      	ldr	r2, [pc, #12]	; (1876c <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1875e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18762:	f014 fe6b 	bl	2d43c <bt_gatt_foreach_attr>
}
   18766:	b003      	add	sp, #12
   18768:	f85d fb04 	ldr.w	pc, [sp], #4
   1876c:	00018231 	.word	0x00018231

00018770 <bt_gatt_store_ccc>:
	save.count = 0;
   18770:	2300      	movs	r3, #0
{
   18772:	b5f0      	push	{r4, r5, r6, r7, lr}
   18774:	4604      	mov	r4, r0
   18776:	b0c1      	sub	sp, #260	; 0x104
   18778:	af02      	add	r7, sp, #8
   1877a:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1877c:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1877e:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   18782:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   18786:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1878a:	2001      	movs	r0, #1
   1878c:	4a1b      	ldr	r2, [pc, #108]	; (187fc <bt_gatt_store_ccc+0x8c>)
   1878e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   18792:	f014 fe53 	bl	2d43c <bt_gatt_foreach_attr>
	if (id) {
   18796:	b364      	cbz	r4, 187f2 <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   18798:	1d3e      	adds	r6, r7, #4
   1879a:	4622      	mov	r2, r4
   1879c:	2104      	movs	r1, #4
   1879e:	4630      	mov	r0, r6
   187a0:	f011 fd3b 	bl	2a21a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   187a4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   187a6:	4a16      	ldr	r2, [pc, #88]	; (18800 <bt_gatt_store_ccc+0x90>)
   187a8:	462b      	mov	r3, r5
   187aa:	2124      	movs	r1, #36	; 0x24
   187ac:	f107 0008 	add.w	r0, r7, #8
   187b0:	f7f9 fa52 	bl	11c58 <bt_settings_encode_key>
	if (save.count) {
   187b4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   187b8:	b1ea      	cbz	r2, 187f6 <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   187ba:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   187bc:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   187c0:	f107 0008 	add.w	r0, r7, #8
   187c4:	f7f7 fafe 	bl	fdc4 <settings_save_one>
	if (err) {
   187c8:	4604      	mov	r4, r0
   187ca:	b170      	cbz	r0, 187ea <bt_gatt_store_ccc+0x7a>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   187cc:	466d      	mov	r5, sp
   187ce:	b088      	sub	sp, #32
   187d0:	aa02      	add	r2, sp, #8
   187d2:	4b0c      	ldr	r3, [pc, #48]	; (18804 <bt_gatt_store_ccc+0x94>)
   187d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   187d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   187dc:	2303      	movs	r3, #3
   187de:	480a      	ldr	r0, [pc, #40]	; (18808 <bt_gatt_store_ccc+0x98>)
   187e0:	f842 3f10 	str.w	r3, [r2, #16]!
   187e4:	f014 fdb3 	bl	2d34e <z_log_msg_static_create.constprop.0>
   187e8:	46ad      	mov	sp, r5
}
   187ea:	4620      	mov	r0, r4
   187ec:	37fc      	adds	r7, #252	; 0xfc
   187ee:	46bd      	mov	sp, r7
   187f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   187f2:	9400      	str	r4, [sp, #0]
   187f4:	e7d7      	b.n	187a6 <bt_gatt_store_ccc+0x36>
		str = NULL;
   187f6:	4611      	mov	r1, r2
   187f8:	e7e2      	b.n	187c0 <bt_gatt_store_ccc+0x50>
   187fa:	bf00      	nop
   187fc:	000175f5 	.word	0x000175f5
   18800:	00035dbd 	.word	0x00035dbd
   18804:	00035f65 	.word	0x00035f65
   18808:	000314d4 	.word	0x000314d4

0001880c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18810:	4604      	mov	r4, r0
   18812:	b08c      	sub	sp, #48	; 0x30
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18814:	4603      	mov	r3, r0
   18816:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1881a:	2001      	movs	r0, #1
   1881c:	4a3d      	ldr	r2, [pc, #244]	; (18914 <bt_gatt_disconnected+0x108>)
{
   1881e:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18820:	f014 fe0c 	bl	2d43c <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   18824:	4620      	mov	r0, r4
   18826:	f7fc fc39 	bl	1509c <bt_conn_index>
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1882a:	4e3b      	ldr	r6, [pc, #236]	; (18918 <bt_gatt_disconnected+0x10c>)
	uint8_t index = bt_conn_index(conn);
   1882c:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1882e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   18832:	b120      	cbz	r0, 1883e <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   18834:	f7fc fb06 	bl	14e44 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   18838:	2300      	movs	r3, #0
   1883a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1883e:	4837      	ldr	r0, [pc, #220]	; (1891c <bt_gatt_disconnected+0x110>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18840:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   18844:	f00d fc66 	bl	26114 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18848:	4629      	mov	r1, r5
   1884a:	7a20      	ldrb	r0, [r4, #8]
   1884c:	f013 fc7d 	bl	2c14a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18850:	2800      	cmp	r0, #0
   18852:	d038      	beq.n	188c6 <bt_gatt_disconnected+0xba>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   18854:	4629      	mov	r1, r5
   18856:	7a20      	ldrb	r0, [r4, #8]
   18858:	f7ff ff8a 	bl	18770 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1885c:	4620      	mov	r0, r4
   1885e:	f7fe fad1 	bl	16e04 <find_cf_cfg>
	if (!cfg) {
   18862:	4606      	mov	r6, r0
   18864:	2800      	cmp	r0, #0
   18866:	d04e      	beq.n	18906 <bt_gatt_disconnected+0xfa>
		if (conn->id) {
   18868:	7a22      	ldrb	r2, [r4, #8]
		len = 0;
   1886a:	f04f 0801 	mov.w	r8, #1
		str = (char *)cfg->data;
   1886e:	3608      	adds	r6, #8
		if (conn->id) {
   18870:	b162      	cbz	r2, 1888c <bt_gatt_disconnected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   18872:	2104      	movs	r1, #4
   18874:	4638      	mov	r0, r7
   18876:	f011 fcd0 	bl	2a21a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1887a:	462b      	mov	r3, r5
   1887c:	2124      	movs	r1, #36	; 0x24
   1887e:	4a28      	ldr	r2, [pc, #160]	; (18920 <bt_gatt_disconnected+0x114>)
   18880:	9700      	str	r7, [sp, #0]
   18882:	1d38      	adds	r0, r7, #4
   18884:	f7f9 f9e8 	bl	11c58 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   18888:	7a23      	ldrb	r3, [r4, #8]
   1888a:	b93b      	cbnz	r3, 1889c <bt_gatt_disconnected+0x90>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1888c:	2300      	movs	r3, #0
   1888e:	2124      	movs	r1, #36	; 0x24
   18890:	9300      	str	r3, [sp, #0]
   18892:	4a23      	ldr	r2, [pc, #140]	; (18920 <bt_gatt_disconnected+0x114>)
   18894:	462b      	mov	r3, r5
   18896:	1d38      	adds	r0, r7, #4
   18898:	f7f9 f9de 	bl	11c58 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1889c:	4642      	mov	r2, r8
   1889e:	4631      	mov	r1, r6
   188a0:	1d38      	adds	r0, r7, #4
   188a2:	f7f7 fa8f 	bl	fdc4 <settings_save_one>
	if (err) {
   188a6:	b170      	cbz	r0, 188c6 <bt_gatt_disconnected+0xba>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   188a8:	466e      	mov	r6, sp
   188aa:	b088      	sub	sp, #32
   188ac:	aa02      	add	r2, sp, #8
   188ae:	4b1d      	ldr	r3, [pc, #116]	; (18924 <bt_gatt_disconnected+0x118>)
   188b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   188b4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   188b8:	2303      	movs	r3, #3
   188ba:	481b      	ldr	r0, [pc, #108]	; (18928 <bt_gatt_disconnected+0x11c>)
   188bc:	f842 3f10 	str.w	r3, [r2, #16]!
   188c0:	f014 fd45 	bl	2d34e <z_log_msg_static_create.constprop.0>
   188c4:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   188c6:	4629      	mov	r1, r5
   188c8:	7a20      	ldrb	r0, [r4, #8]
   188ca:	f013 fc3e 	bl	2c14a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   188ce:	b148      	cbz	r0, 188e4 <bt_gatt_disconnected+0xd8>
		struct addr_with_id addr_with_id = {
   188d0:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   188d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   188d6:	723b      	strb	r3, [r7, #8]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   188d8:	2001      	movs	r0, #1
   188da:	4a14      	ldr	r2, [pc, #80]	; (1892c <bt_gatt_disconnected+0x120>)
		struct addr_with_id addr_with_id = {
   188dc:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   188de:	1d3b      	adds	r3, r7, #4
   188e0:	f014 fdac 	bl	2d43c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   188e4:	4620      	mov	r0, r4
   188e6:	f7fe fa8d 	bl	16e04 <find_cf_cfg>
	if (!cfg) {
   188ea:	4606      	mov	r6, r0
   188ec:	b138      	cbz	r0, 188fe <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   188ee:	4629      	mov	r1, r5
   188f0:	7a20      	ldrb	r0, [r4, #8]
   188f2:	f013 fc2a 	bl	2c14a <bt_addr_le_is_bonded>
   188f6:	b940      	cbnz	r0, 1890a <bt_gatt_disconnected+0xfe>
		clear_cf_cfg(cfg);
   188f8:	4630      	mov	r0, r6
   188fa:	f7fe fdb7 	bl	1746c <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   188fe:	3728      	adds	r7, #40	; 0x28
   18900:	46bd      	mov	sp, r7
   18902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   18906:	4680      	mov	r8, r0
   18908:	e7c0      	b.n	1888c <bt_gatt_disconnected+0x80>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1890a:	4629      	mov	r1, r5
   1890c:	1c70      	adds	r0, r6, #1
   1890e:	f014 fc8a 	bl	2d226 <bt_addr_le_copy>
}
   18912:	e7f4      	b.n	188fe <bt_gatt_disconnected+0xf2>
   18914:	0001762d 	.word	0x0001762d
   18918:	20009e70 	.word	0x20009e70
   1891c:	20009e78 	.word	0x20009e78
   18920:	00035faf 	.word	0x00035faf
   18924:	00035f83 	.word	0x00035f83
   18928:	000314d4 	.word	0x000314d4
   1892c:	000175cd 	.word	0x000175cd

00018930 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   18930:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   18932:	4b05      	ldr	r3, [pc, #20]	; (18948 <smp_find+0x18>)
{
   18934:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   18936:	4618      	mov	r0, r3
   18938:	f014 fe0c 	bl	2d554 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1893c:	3b04      	subs	r3, #4
   1893e:	2800      	cmp	r0, #0
}
   18940:	bf14      	ite	ne
   18942:	4618      	movne	r0, r3
   18944:	2000      	moveq	r0, #0
   18946:	bd08      	pop	{r3, pc}
   18948:	20009f7c 	.word	0x20009f7c

0001894c <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1894c:	4b08      	ldr	r3, [pc, #32]	; (18970 <latch_auth_cb+0x24>)
   1894e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18952:	681a      	ldr	r2, [r3, #0]
   18954:	4b07      	ldr	r3, [pc, #28]	; (18974 <latch_auth_cb+0x28>)
   18956:	e8d0 1fef 	ldaex	r1, [r0]
   1895a:	4299      	cmp	r1, r3
   1895c:	d104      	bne.n	18968 <latch_auth_cb+0x1c>
   1895e:	e8c0 2fec 	stlex	ip, r2, [r0]
   18962:	f1bc 0f00 	cmp.w	ip, #0
   18966:	d1f6      	bne.n	18956 <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18968:	e8d0 0faf 	lda	r0, [r0]
}
   1896c:	4770      	bx	lr
   1896e:	bf00      	nop
   18970:	20021600 	.word	0x20021600
   18974:	20009f78 	.word	0x20009f78

00018978 <get_io_capa>:
{
   18978:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1897a:	f7ff ffe7 	bl	1894c <latch_auth_cb>
	if (!smp_auth_cb) {
   1897e:	4603      	mov	r3, r0
   18980:	b1c8      	cbz	r0, 189b6 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   18982:	e9d0 1200 	ldrd	r1, r2, [r0]
   18986:	b921      	cbnz	r1, 18992 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   18988:	2a00      	cmp	r2, #0
   1898a:	bf0c      	ite	eq
   1898c:	2003      	moveq	r0, #3
   1898e:	2002      	movne	r0, #2
   18990:	e010      	b.n	189b4 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   18992:	b132      	cbz	r2, 189a2 <get_io_capa+0x2a>
   18994:	6883      	ldr	r3, [r0, #8]
   18996:	b913      	cbnz	r3, 1899e <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   18998:	4b09      	ldr	r3, [pc, #36]	; (189c0 <get_io_capa+0x48>)
   1899a:	781b      	ldrb	r3, [r3, #0]
   1899c:	b933      	cbnz	r3, 189ac <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1899e:	2004      	movs	r0, #4
   189a0:	e008      	b.n	189b4 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   189a2:	4907      	ldr	r1, [pc, #28]	; (189c0 <get_io_capa+0x48>)
   189a4:	7808      	ldrb	r0, [r1, #0]
   189a6:	b128      	cbz	r0, 189b4 <get_io_capa+0x3c>
   189a8:	689b      	ldr	r3, [r3, #8]
   189aa:	b933      	cbnz	r3, 189ba <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   189ac:	3a00      	subs	r2, #0
   189ae:	bf18      	it	ne
   189b0:	2201      	movne	r2, #1
   189b2:	0050      	lsls	r0, r2, #1
}
   189b4:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   189b6:	2003      	movs	r0, #3
   189b8:	e7fc      	b.n	189b4 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   189ba:	2001      	movs	r0, #1
   189bc:	e7fa      	b.n	189b4 <get_io_capa+0x3c>
   189be:	bf00      	nop
   189c0:	200223f8 	.word	0x200223f8

000189c4 <get_auth>:
{
   189c4:	b510      	push	{r4, lr}
	if (sc_supported) {
   189c6:	4b0c      	ldr	r3, [pc, #48]	; (189f8 <get_auth+0x34>)
   189c8:	781b      	ldrb	r3, [r3, #0]
   189ca:	b17b      	cbz	r3, 189ec <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   189cc:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   189d0:	f7ff ffd2 	bl	18978 <get_io_capa>
	if (bondable) {
   189d4:	4b09      	ldr	r3, [pc, #36]	; (189fc <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   189d6:	2803      	cmp	r0, #3
	if (bondable) {
   189d8:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   189da:	bf0c      	ite	eq
   189dc:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   189e0:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   189e4:	b12b      	cbz	r3, 189f2 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   189e6:	f044 0001 	orr.w	r0, r4, #1
}
   189ea:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   189ec:	f001 0407 	and.w	r4, r1, #7
   189f0:	e7ee      	b.n	189d0 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   189f2:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   189f6:	e7f8      	b.n	189ea <get_auth+0x26>
   189f8:	200223f8 	.word	0x200223f8
   189fc:	200089f6 	.word	0x200089f6

00018a00 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   18a00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   18a02:	4b06      	ldr	r3, [pc, #24]	; (18a1c <bt_smp_pkey_ready.part.0+0x1c>)
   18a04:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18a08:	9305      	str	r3, [sp, #20]
   18a0a:	2302      	movs	r3, #2
   18a0c:	4804      	ldr	r0, [pc, #16]	; (18a20 <bt_smp_pkey_ready.part.0+0x20>)
   18a0e:	aa04      	add	r2, sp, #16
   18a10:	9304      	str	r3, [sp, #16]
   18a12:	f014 fdf7 	bl	2d604 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   18a16:	b007      	add	sp, #28
   18a18:	f85d fb04 	ldr.w	pc, [sp], #4
   18a1c:	00035fc0 	.word	0x00035fc0
   18a20:	00031524 	.word	0x00031524

00018a24 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   18a24:	b580      	push	{r7, lr}
   18a26:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   18a28:	b088      	sub	sp, #32
   18a2a:	466a      	mov	r2, sp
   18a2c:	4b07      	ldr	r3, [pc, #28]	; (18a4c <bt_smp_accept.part.0+0x28>)
   18a2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18a32:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18a36:	2303      	movs	r3, #3
   18a38:	4805      	ldr	r0, [pc, #20]	; (18a50 <bt_smp_accept.part.0+0x2c>)
   18a3a:	f842 3f10 	str.w	r3, [r2, #16]!
   18a3e:	f014 fde1 	bl	2d604 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   18a42:	f06f 000b 	mvn.w	r0, #11
   18a46:	46bd      	mov	sp, r7
   18a48:	bd80      	pop	{r7, pc}
   18a4a:	bf00      	nop
   18a4c:	00035fd9 	.word	0x00035fd9
   18a50:	00031524 	.word	0x00031524

00018a54 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   18a54:	4b05      	ldr	r3, [pc, #20]	; (18a6c <bt_smp_accept+0x18>)
   18a56:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   18a5a:	b10a      	cbz	r2, 18a60 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18a5c:	f7ff bfe2 	b.w	18a24 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   18a60:	4803      	ldr	r0, [pc, #12]	; (18a70 <bt_smp_accept+0x1c>)
		*chan = &smp->chan.chan;
   18a62:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   18a64:	6058      	str	r0, [r3, #4]
}
   18a66:	4610      	mov	r0, r2
		*chan = &smp->chan.chan;
   18a68:	600b      	str	r3, [r1, #0]
}
   18a6a:	4770      	bx	lr
   18a6c:	20009f78 	.word	0x20009f78
   18a70:	00032174 	.word	0x00032174

00018a74 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   18a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   18a76:	4b07      	ldr	r3, [pc, #28]	; (18a94 <smp_chan_get.part.0+0x20>)
   18a78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18a7c:	9305      	str	r3, [sp, #20]
   18a7e:	2302      	movs	r3, #2
   18a80:	4805      	ldr	r0, [pc, #20]	; (18a98 <smp_chan_get.part.0+0x24>)
   18a82:	aa04      	add	r2, sp, #16
   18a84:	9304      	str	r3, [sp, #16]
   18a86:	f014 fdbd 	bl	2d604 <z_log_msg_static_create.constprop.0>
}
   18a8a:	2000      	movs	r0, #0
   18a8c:	b007      	add	sp, #28
   18a8e:	f85d fb04 	ldr.w	pc, [sp], #4
   18a92:	bf00      	nop
   18a94:	00035ffe 	.word	0x00035ffe
   18a98:	00031524 	.word	0x00031524

00018a9c <smp_init>:
{
   18a9c:	b538      	push	{r3, r4, r5, lr}
   18a9e:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   18aa0:	22ec      	movs	r2, #236	; 0xec
   18aa2:	2100      	movs	r1, #0
   18aa4:	f017 fd9d 	bl	305e2 <memset>
	if (bt_rand(smp->prnd, 16)) {
   18aa8:	2110      	movs	r1, #16
   18aaa:	f105 0027 	add.w	r0, r5, #39	; 0x27
   18aae:	f7fb fd49 	bl	14544 <bt_rand>
   18ab2:	4604      	mov	r4, r0
   18ab4:	b948      	cbnz	r0, 18aca <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   18ab6:	2105      	movs	r1, #5
   18ab8:	4628      	mov	r0, r5
   18aba:	f014 fdb1 	bl	2d620 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   18abe:	f7fb fdf5 	bl	146ac <bt_pub_key_get>
   18ac2:	4b03      	ldr	r3, [pc, #12]	; (18ad0 <smp_init+0x34>)
   18ac4:	6018      	str	r0, [r3, #0]
}
   18ac6:	4620      	mov	r0, r4
   18ac8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   18aca:	2408      	movs	r4, #8
   18acc:	e7fb      	b.n	18ac6 <smp_init+0x2a>
   18ace:	bf00      	nop
   18ad0:	20021728 	.word	0x20021728

00018ad4 <smp_dhkey_generate>:
{
   18ad4:	b530      	push	{r4, r5, lr}
   18ad6:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18ad8:	1d05      	adds	r5, r0, #4
   18ada:	2108      	movs	r1, #8
   18adc:	4628      	mov	r0, r5
{
   18ade:	b087      	sub	sp, #28
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18ae0:	f014 fd9e 	bl	2d620 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   18ae4:	490b      	ldr	r1, [pc, #44]	; (18b14 <smp_dhkey_generate+0x40>)
   18ae6:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18aea:	f7fb fded 	bl	146c8 <bt_dh_key_gen>
	if (err) {
   18aee:	b170      	cbz	r0, 18b0e <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18af0:	2108      	movs	r1, #8
   18af2:	4628      	mov	r0, r5
   18af4:	f014 fd55 	bl	2d5a2 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   18af8:	4b07      	ldr	r3, [pc, #28]	; (18b18 <smp_dhkey_generate+0x44>)
   18afa:	4808      	ldr	r0, [pc, #32]	; (18b1c <smp_dhkey_generate+0x48>)
   18afc:	9305      	str	r3, [sp, #20]
   18afe:	2302      	movs	r3, #2
   18b00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b04:	aa04      	add	r2, sp, #16
   18b06:	9304      	str	r3, [sp, #16]
   18b08:	f014 fd7c 	bl	2d604 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18b0c:	2008      	movs	r0, #8
}
   18b0e:	b007      	add	sp, #28
   18b10:	bd30      	pop	{r4, r5, pc}
   18b12:	bf00      	nop
   18b14:	0002d9f9 	.word	0x0002d9f9
   18b18:	00036019 	.word	0x00036019
   18b1c:	00031524 	.word	0x00031524

00018b20 <smp_ident_info>:
{
   18b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b22:	4605      	mov	r5, r0
   18b24:	460b      	mov	r3, r1
   18b26:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18b28:	210d      	movs	r1, #13
   18b2a:	3004      	adds	r0, #4
   18b2c:	f014 fd12 	bl	2d554 <atomic_test_bit>
   18b30:	b368      	cbz	r0, 18b8e <smp_ident_info+0x6e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   18b32:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18b34:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   18b38:	2002      	movs	r0, #2
   18b3a:	f103 0690 	add.w	r6, r3, #144	; 0x90
   18b3e:	4632      	mov	r2, r6
   18b40:	7a19      	ldrb	r1, [r3, #8]
   18b42:	f001 fd5b 	bl	1a5fc <bt_keys_get_type>
		if (!keys) {
   18b46:	b9b8      	cbnz	r0, 18b78 <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18b48:	4630      	mov	r0, r6
   18b4a:	f7f8 ffaf 	bl	11aac <bt_addr_le_str>
   18b4e:	466c      	mov	r4, sp
   18b50:	b088      	sub	sp, #32
   18b52:	466a      	mov	r2, sp
   18b54:	4b11      	ldr	r3, [pc, #68]	; (18b9c <smp_ident_info+0x7c>)
   18b56:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18b5a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
   18b62:	8393      	strh	r3, [r2, #28]
   18b64:	4b0e      	ldr	r3, [pc, #56]	; (18ba0 <smp_ident_info+0x80>)
   18b66:	480f      	ldr	r0, [pc, #60]	; (18ba4 <smp_ident_info+0x84>)
   18b68:	f842 3f10 	str.w	r3, [r2, #16]!
   18b6c:	f014 fd4a 	bl	2d604 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18b70:	2008      	movs	r0, #8
   18b72:	46a5      	mov	sp, r4
}
   18b74:	46bd      	mov	sp, r7
   18b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18b78:	4622      	mov	r2, r4
   18b7a:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   18b7e:	f104 0110 	add.w	r1, r4, #16
   18b82:	f852 0b04 	ldr.w	r0, [r2], #4
   18b86:	428a      	cmp	r2, r1
   18b88:	f843 0b04 	str.w	r0, [r3], #4
   18b8c:	d1f9      	bne.n	18b82 <smp_ident_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   18b8e:	4628      	mov	r0, r5
   18b90:	2109      	movs	r1, #9
   18b92:	f014 fd45 	bl	2d620 <atomic_set_bit>
	return 0;
   18b96:	2000      	movs	r0, #0
   18b98:	e7ec      	b.n	18b74 <smp_ident_info+0x54>
   18b9a:	bf00      	nop
   18b9c:	00036032 	.word	0x00036032
   18ba0:	01000003 	.word	0x01000003
   18ba4:	00031524 	.word	0x00031524

00018ba8 <smp_encrypt_info>:
{
   18ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18baa:	4605      	mov	r5, r0
   18bac:	460b      	mov	r3, r1
   18bae:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18bb0:	210d      	movs	r1, #13
   18bb2:	3004      	adds	r0, #4
   18bb4:	f014 fcce 	bl	2d554 <atomic_test_bit>
   18bb8:	b368      	cbz	r0, 18c16 <smp_encrypt_info+0x6e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   18bba:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18bbc:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   18bc0:	2004      	movs	r0, #4
   18bc2:	f103 0690 	add.w	r6, r3, #144	; 0x90
   18bc6:	4632      	mov	r2, r6
   18bc8:	7a19      	ldrb	r1, [r3, #8]
   18bca:	f001 fd17 	bl	1a5fc <bt_keys_get_type>
		if (!keys) {
   18bce:	b9b8      	cbnz	r0, 18c00 <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18bd0:	4630      	mov	r0, r6
   18bd2:	f7f8 ff6b 	bl	11aac <bt_addr_le_str>
   18bd6:	466c      	mov	r4, sp
   18bd8:	b088      	sub	sp, #32
   18bda:	466a      	mov	r2, sp
   18bdc:	4b11      	ldr	r3, [pc, #68]	; (18c24 <smp_encrypt_info+0x7c>)
   18bde:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18be2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18be6:	f44f 7300 	mov.w	r3, #512	; 0x200
   18bea:	8393      	strh	r3, [r2, #28]
   18bec:	4b0e      	ldr	r3, [pc, #56]	; (18c28 <smp_encrypt_info+0x80>)
   18bee:	480f      	ldr	r0, [pc, #60]	; (18c2c <smp_encrypt_info+0x84>)
   18bf0:	f842 3f10 	str.w	r3, [r2, #16]!
   18bf4:	f014 fd06 	bl	2d604 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18bf8:	2008      	movs	r0, #8
   18bfa:	46a5      	mov	sp, r4
}
   18bfc:	46bd      	mov	sp, r7
   18bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c00:	4622      	mov	r2, r4
   18c02:	f100 031a 	add.w	r3, r0, #26
   18c06:	f104 0110 	add.w	r1, r4, #16
   18c0a:	f852 0b04 	ldr.w	r0, [r2], #4
   18c0e:	428a      	cmp	r2, r1
   18c10:	f843 0b04 	str.w	r0, [r3], #4
   18c14:	d1f9      	bne.n	18c0a <smp_encrypt_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   18c16:	4628      	mov	r0, r5
   18c18:	2107      	movs	r1, #7
   18c1a:	f014 fd01 	bl	2d620 <atomic_set_bit>
	return 0;
   18c1e:	2000      	movs	r0, #0
   18c20:	e7ec      	b.n	18bfc <smp_encrypt_info+0x54>
   18c22:	bf00      	nop
   18c24:	00036032 	.word	0x00036032
   18c28:	01000003 	.word	0x01000003
   18c2c:	00031524 	.word	0x00031524

00018c30 <smp_send_pairing_confirm>:
{
   18c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c32:	b083      	sub	sp, #12
	switch (smp->method) {
   18c34:	7a04      	ldrb	r4, [r0, #8]
{
   18c36:	4605      	mov	r5, r0
	switch (smp->method) {
   18c38:	2c02      	cmp	r4, #2
{
   18c3a:	af02      	add	r7, sp, #8
	switch (smp->method) {
   18c3c:	d823      	bhi.n	18c86 <smp_send_pairing_confirm+0x56>
   18c3e:	b144      	cbz	r4, 18c52 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18c40:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   18c44:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   18c48:	40dc      	lsrs	r4, r3
   18c4a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   18c4e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   18c52:	2103      	movs	r1, #3
   18c54:	4628      	mov	r0, r5
   18c56:	f014 fcf3 	bl	2d640 <smp_create_pdu.constprop.0>
	if (!buf) {
   18c5a:	4606      	mov	r6, r0
   18c5c:	b320      	cbz	r0, 18ca8 <smp_send_pairing_confirm+0x78>
   18c5e:	2110      	movs	r1, #16
   18c60:	300c      	adds	r0, #12
   18c62:	f002 fdb3 	bl	1b7cc <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   18c66:	9000      	str	r0, [sp, #0]
   18c68:	4818      	ldr	r0, [pc, #96]	; (18ccc <smp_send_pairing_confirm+0x9c>)
   18c6a:	4623      	mov	r3, r4
   18c6c:	6800      	ldr	r0, [r0, #0]
   18c6e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   18c72:	f105 0157 	add.w	r1, r5, #87	; 0x57
   18c76:	f014 ff65 	bl	2db44 <bt_crypto_f4>
   18c7a:	4604      	mov	r4, r0
   18c7c:	b1d0      	cbz	r0, 18cb4 <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   18c7e:	4630      	mov	r0, r6
   18c80:	f002 fc82 	bl	1b588 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   18c84:	e010      	b.n	18ca8 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   18c86:	2c03      	cmp	r4, #3
   18c88:	d012      	beq.n	18cb0 <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18c8a:	466d      	mov	r5, sp
   18c8c:	b088      	sub	sp, #32
   18c8e:	aa02      	add	r2, sp, #8
   18c90:	4b0f      	ldr	r3, [pc, #60]	; (18cd0 <smp_send_pairing_confirm+0xa0>)
   18c92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (smp->method) {
   18c96:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18c9a:	2303      	movs	r3, #3
   18c9c:	480d      	ldr	r0, [pc, #52]	; (18cd4 <smp_send_pairing_confirm+0xa4>)
   18c9e:	f842 3f10 	str.w	r3, [r2, #16]!
   18ca2:	f014 fcaf 	bl	2d604 <z_log_msg_static_create.constprop.0>
   18ca6:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   18ca8:	2008      	movs	r0, #8
}
   18caa:	3704      	adds	r7, #4
   18cac:	46bd      	mov	sp, r7
   18cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   18cb0:	2400      	movs	r4, #0
   18cb2:	e7ce      	b.n	18c52 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   18cb4:	4602      	mov	r2, r0
   18cb6:	4631      	mov	r1, r6
   18cb8:	4628      	mov	r0, r5
   18cba:	f014 fc86 	bl	2d5ca <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   18cbe:	1d28      	adds	r0, r5, #4
   18cc0:	4621      	mov	r1, r4
   18cc2:	f014 fc6e 	bl	2d5a2 <atomic_clear_bit>
	return 0;
   18cc6:	4620      	mov	r0, r4
   18cc8:	e7ef      	b.n	18caa <smp_send_pairing_confirm+0x7a>
   18cca:	bf00      	nop
   18ccc:	20021728 	.word	0x20021728
   18cd0:	0003604c 	.word	0x0003604c
   18cd4:	00031524 	.word	0x00031524

00018cd8 <smp_public_key_periph>:
{
   18cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cdc:	b086      	sub	sp, #24
   18cde:	4604      	mov	r4, r0
   18ce0:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18ce2:	f7ff fe33 	bl	1894c <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18ce6:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18ce8:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18cea:	210e      	movs	r1, #14
   18cec:	4628      	mov	r0, r5
   18cee:	f014 fc31 	bl	2d554 <atomic_test_bit>
   18cf2:	b9a0      	cbnz	r0, 18d1e <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   18cf4:	4b54      	ldr	r3, [pc, #336]	; (18e48 <smp_public_key_periph+0x170>)
   18cf6:	2220      	movs	r2, #32
   18cf8:	6819      	ldr	r1, [r3, #0]
   18cfa:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18cfe:	f017 fc26 	bl	3054e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18d02:	b960      	cbnz	r0, 18d1e <smp_public_key_periph+0x46>
		LOG_WRN("Remote public key rejected");
   18d04:	4b51      	ldr	r3, [pc, #324]	; (18e4c <smp_public_key_periph+0x174>)
   18d06:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18d0a:	617b      	str	r3, [r7, #20]
   18d0c:	2302      	movs	r3, #2
   18d0e:	4850      	ldr	r0, [pc, #320]	; (18e50 <smp_public_key_periph+0x178>)
   18d10:	613b      	str	r3, [r7, #16]
   18d12:	f107 0210 	add.w	r2, r7, #16
   18d16:	f014 fc75 	bl	2d604 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18d1a:	2008      	movs	r0, #8
   18d1c:	e034      	b.n	18d88 <smp_public_key_periph+0xb0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   18d1e:	210c      	movs	r1, #12
   18d20:	4620      	mov	r0, r4
   18d22:	f014 fc8d 	bl	2d640 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   18d26:	4680      	mov	r8, r0
   18d28:	2800      	cmp	r0, #0
   18d2a:	d0f6      	beq.n	18d1a <smp_public_key_periph+0x42>
   18d2c:	2140      	movs	r1, #64	; 0x40
   18d2e:	300c      	adds	r0, #12
   18d30:	f002 fd4c 	bl	1b7cc <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   18d34:	4b44      	ldr	r3, [pc, #272]	; (18e48 <smp_public_key_periph+0x170>)
   18d36:	4602      	mov	r2, r0
   18d38:	681b      	ldr	r3, [r3, #0]
   18d3a:	4601      	mov	r1, r0
   18d3c:	f103 0020 	add.w	r0, r3, #32
   18d40:	f853 cb04 	ldr.w	ip, [r3], #4
   18d44:	4283      	cmp	r3, r0
   18d46:	f841 cb04 	str.w	ip, [r1], #4
   18d4a:	d1f9      	bne.n	18d40 <smp_public_key_periph+0x68>
   18d4c:	3220      	adds	r2, #32
   18d4e:	f103 0120 	add.w	r1, r3, #32
   18d52:	f853 0b04 	ldr.w	r0, [r3], #4
   18d56:	428b      	cmp	r3, r1
   18d58:	f842 0b04 	str.w	r0, [r2], #4
   18d5c:	d1f9      	bne.n	18d52 <smp_public_key_periph+0x7a>
	smp_send(smp, req_buf, NULL, NULL);
   18d5e:	2200      	movs	r2, #0
   18d60:	4641      	mov	r1, r8
   18d62:	4620      	mov	r0, r4
   18d64:	f014 fc31 	bl	2d5ca <smp_send.constprop.0>
	switch (smp->method) {
   18d68:	7a23      	ldrb	r3, [r4, #8]
   18d6a:	2b05      	cmp	r3, #5
   18d6c:	d85a      	bhi.n	18e24 <smp_public_key_periph+0x14c>
   18d6e:	e8df f003 	tbb	[pc, r3]
   18d72:	3b03      	.short	0x3b03
   18d74:	5659030f 	.word	0x5659030f
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18d78:	2104      	movs	r1, #4
   18d7a:	4620      	mov	r0, r4
   18d7c:	f014 fc50 	bl	2d620 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   18d80:	f7ff ff56 	bl	18c30 <smp_send_pairing_confirm>
		if (err) {
   18d84:	2800      	cmp	r0, #0
   18d86:	d03e      	beq.n	18e06 <smp_public_key_periph+0x12e>
}
   18d88:	3718      	adds	r7, #24
   18d8a:	46bd      	mov	sp, r7
   18d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d90:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   18d92:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d96:	f7ff fdd9 	bl	1894c <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18d9a:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d9c:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18d9e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   18da2:	f7fb fbcf 	bl	14544 <bt_rand>
   18da6:	2800      	cmp	r0, #0
   18da8:	d1b7      	bne.n	18d1a <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   18daa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18dae:	4a29      	ldr	r2, [pc, #164]	; (18e54 <smp_public_key_periph+0x17c>)
	smp->passkey_round = 0U;
   18db0:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   18db4:	fbb3 f1f2 	udiv	r1, r3, r2
   18db8:	fb02 3311 	mls	r3, r2, r1, r3
   18dbc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   18dc0:	b156      	cbz	r6, 18dd8 <smp_public_key_periph+0x100>
   18dc2:	6833      	ldr	r3, [r6, #0]
   18dc4:	b143      	cbz	r3, 18dd8 <smp_public_key_periph+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18dc6:	210b      	movs	r1, #11
   18dc8:	4628      	mov	r0, r5
   18dca:	f014 fc29 	bl	2d620 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   18dce:	4640      	mov	r0, r8
   18dd0:	6833      	ldr	r3, [r6, #0]
   18dd2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   18dd6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18dd8:	2103      	movs	r1, #3
   18dda:	4620      	mov	r0, r4
   18ddc:	f014 fc20 	bl	2d620 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18de0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18de2:	f014 fc1d 	bl	2d620 <atomic_set_bit>
		break;
   18de6:	e00e      	b.n	18e06 <smp_public_key_periph+0x12e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18de8:	4620      	mov	r0, r4
   18dea:	2103      	movs	r1, #3
   18dec:	f014 fc18 	bl	2d620 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18df0:	210e      	movs	r1, #14
   18df2:	f014 fc15 	bl	2d620 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18df6:	4628      	mov	r0, r5
   18df8:	210a      	movs	r1, #10
   18dfa:	f014 fc11 	bl	2d620 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   18dfe:	6873      	ldr	r3, [r6, #4]
   18e00:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18e04:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   18e06:	4628      	mov	r0, r5
   18e08:	2107      	movs	r1, #7
   18e0a:	f014 fc09 	bl	2d620 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   18e0e:	2008      	movs	r0, #8
   18e10:	f7ff fd8e 	bl	18930 <smp_find>
   18e14:	b9b0      	cbnz	r0, 18e44 <smp_public_key_periph+0x16c>
		return smp_dhkey_generate(smp);
   18e16:	4620      	mov	r0, r4
   18e18:	f7ff fe5c 	bl	18ad4 <smp_dhkey_generate>
   18e1c:	e7b4      	b.n	18d88 <smp_public_key_periph+0xb0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18e1e:	2104      	movs	r1, #4
   18e20:	4620      	mov	r0, r4
   18e22:	e7de      	b.n	18de2 <smp_public_key_periph+0x10a>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18e24:	466c      	mov	r4, sp
   18e26:	b088      	sub	sp, #32
   18e28:	466a      	mov	r2, sp
   18e2a:	490b      	ldr	r1, [pc, #44]	; (18e58 <smp_public_key_periph+0x180>)
   18e2c:	4808      	ldr	r0, [pc, #32]	; (18e50 <smp_public_key_periph+0x178>)
	switch (smp->method) {
   18e2e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18e32:	2303      	movs	r3, #3
   18e34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18e38:	f842 3f10 	str.w	r3, [r2, #16]!
   18e3c:	f014 fbe2 	bl	2d604 <z_log_msg_static_create.constprop.0>
   18e40:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   18e42:	e76a      	b.n	18d1a <smp_public_key_periph+0x42>
	return 0;
   18e44:	2000      	movs	r0, #0
   18e46:	e79f      	b.n	18d88 <smp_public_key_periph+0xb0>
   18e48:	20021728 	.word	0x20021728
   18e4c:	00036068 	.word	0x00036068
   18e50:	00031524 	.word	0x00031524
   18e54:	000f4240 	.word	0x000f4240
   18e58:	0003604c 	.word	0x0003604c

00018e5c <smp_public_key>:
{
   18e5c:	b530      	push	{r4, r5, lr}
   18e5e:	4604      	mov	r4, r0
   18e60:	460d      	mov	r5, r1
   18e62:	b087      	sub	sp, #28
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18e64:	f7ff fd72 	bl	1894c <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   18e68:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18e6c:	4602      	mov	r2, r0
   18e6e:	68eb      	ldr	r3, [r5, #12]
   18e70:	f103 0120 	add.w	r1, r3, #32
   18e74:	f853 5b04 	ldr.w	r5, [r3], #4
   18e78:	428b      	cmp	r3, r1
   18e7a:	f842 5b04 	str.w	r5, [r2], #4
   18e7e:	d1f9      	bne.n	18e74 <smp_public_key+0x18>
   18e80:	f104 0277 	add.w	r2, r4, #119	; 0x77
   18e84:	f103 0120 	add.w	r1, r3, #32
   18e88:	f853 5b04 	ldr.w	r5, [r3], #4
   18e8c:	428b      	cmp	r3, r1
   18e8e:	f842 5b04 	str.w	r5, [r2], #4
   18e92:	d1f9      	bne.n	18e88 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   18e94:	f7fb fb74 	bl	14580 <bt_pub_key_is_debug>
   18e98:	b940      	cbnz	r0, 18eac <smp_public_key+0x50>
	if (!sc_public_key) {
   18e9a:	4b1c      	ldr	r3, [pc, #112]	; (18f0c <smp_public_key+0xb0>)
   18e9c:	681d      	ldr	r5, [r3, #0]
   18e9e:	bb75      	cbnz	r5, 18efe <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   18ea0:	1d20      	adds	r0, r4, #4
   18ea2:	2106      	movs	r1, #6
   18ea4:	f014 fbbc 	bl	2d620 <atomic_set_bit>
	return 0;
   18ea8:	4628      	mov	r0, r5
		return 0;
   18eaa:	e026      	b.n	18efa <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   18eac:	4b18      	ldr	r3, [pc, #96]	; (18f10 <smp_public_key+0xb4>)
   18eae:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   18eb2:	9305      	str	r3, [sp, #20]
   18eb4:	2302      	movs	r3, #2
   18eb6:	4817      	ldr	r0, [pc, #92]	; (18f14 <smp_public_key+0xb8>)
   18eb8:	aa04      	add	r2, sp, #16
   18eba:	9304      	str	r3, [sp, #16]
   18ebc:	f014 fba2 	bl	2d604 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   18ec0:	210e      	movs	r1, #14
   18ec2:	1d20      	adds	r0, r4, #4
   18ec4:	f014 fbac 	bl	2d620 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   18ec8:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   18ecc:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18ed0:	b933      	cbnz	r3, 18ee0 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18ed2:	7a28      	ldrb	r0, [r5, #8]
   18ed4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   18ed8:	f001 fa8e 	bl	1a3f8 <bt_keys_get_addr>
   18edc:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   18ee0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18ee4:	2b00      	cmp	r3, #0
   18ee6:	d0d8      	beq.n	18e9a <smp_public_key+0x3e>
   18ee8:	89da      	ldrh	r2, [r3, #14]
   18eea:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18eee:	2a00      	cmp	r2, #0
   18ef0:	d0d3      	beq.n	18e9a <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   18ef2:	7b5b      	ldrb	r3, [r3, #13]
   18ef4:	079b      	lsls	r3, r3, #30
   18ef6:	d4d0      	bmi.n	18e9a <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18ef8:	2003      	movs	r0, #3
}
   18efa:	b007      	add	sp, #28
   18efc:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   18efe:	4620      	mov	r0, r4
}
   18f00:	b007      	add	sp, #28
   18f02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   18f06:	f7ff bee7 	b.w	18cd8 <smp_public_key_periph>
   18f0a:	bf00      	nop
   18f0c:	20021728 	.word	0x20021728
   18f10:	00036083 	.word	0x00036083
   18f14:	00031524 	.word	0x00031524

00018f18 <smp_pairing_req>:
{
   18f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18f1c:	b087      	sub	sp, #28
   18f1e:	460d      	mov	r5, r1
   18f20:	af00      	add	r7, sp, #0
   18f22:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18f24:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18f28:	f7ff fd10 	bl	1894c <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   18f2c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18f30:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   18f32:	f899 3003 	ldrb.w	r3, [r9, #3]
   18f36:	3b07      	subs	r3, #7
   18f38:	2b09      	cmp	r3, #9
   18f3a:	d904      	bls.n	18f46 <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   18f3c:	2006      	movs	r0, #6
}
   18f3e:	371c      	adds	r7, #28
   18f40:	46bd      	mov	sp, r7
   18f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   18f46:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   18f4a:	b15b      	cbz	r3, 18f64 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   18f4c:	1d25      	adds	r5, r4, #4
   18f4e:	210f      	movs	r1, #15
   18f50:	4628      	mov	r0, r5
   18f52:	f014 faff 	bl	2d554 <atomic_test_bit>
   18f56:	b980      	cbnz	r0, 18f7a <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   18f58:	4620      	mov	r0, r4
   18f5a:	f7ff fd9f 	bl	18a9c <smp_init>
		if (ret) {
   18f5e:	b160      	cbz	r0, 18f7a <smp_pairing_req+0x62>
			return ret;
   18f60:	b2c0      	uxtb	r0, r0
   18f62:	e7ec      	b.n	18f3e <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18f64:	7a30      	ldrb	r0, [r6, #8]
   18f66:	f106 0190 	add.w	r1, r6, #144	; 0x90
   18f6a:	f001 fa45 	bl	1a3f8 <bt_keys_get_addr>
   18f6e:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   18f72:	2800      	cmp	r0, #0
   18f74:	d1ea      	bne.n	18f4c <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   18f76:	2008      	movs	r0, #8
   18f78:	e7e1      	b.n	18f3e <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   18f7a:	2301      	movs	r3, #1
   18f7c:	7263      	strb	r3, [r4, #9]
   18f7e:	f8d9 3000 	ldr.w	r3, [r9]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18f82:	4620      	mov	r0, r4
   18f84:	f8c4 300a 	str.w	r3, [r4, #10]
   18f88:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   18f8c:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   18f8e:	2302      	movs	r3, #2
   18f90:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18f92:	f899 1002 	ldrb.w	r1, [r9, #2]
   18f96:	f7ff fd15 	bl	189c4 <get_auth>
   18f9a:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   18f9c:	4620      	mov	r0, r4
   18f9e:	f7ff fceb 	bl	18978 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18fa2:	4bac      	ldr	r3, [pc, #688]	; (19254 <smp_pairing_req+0x33c>)
	rsp->io_capability = get_io_capa(smp);
   18fa4:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18fa6:	781b      	ldrb	r3, [r3, #0]
   18fa8:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   18faa:	2310      	movs	r3, #16
   18fac:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   18fae:	f899 3004 	ldrb.w	r3, [r9, #4]
   18fb2:	f003 0303 	and.w	r3, r3, #3
   18fb6:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   18fb8:	f899 3005 	ldrb.w	r3, [r9, #5]
   18fbc:	f003 0301 	and.w	r3, r3, #1
   18fc0:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   18fc2:	7ce3      	ldrb	r3, [r4, #19]
   18fc4:	071b      	lsls	r3, r3, #28
   18fc6:	d50d      	bpl.n	18fe4 <smp_pairing_req+0xcc>
   18fc8:	f899 3002 	ldrb.w	r3, [r9, #2]
   18fcc:	0718      	lsls	r0, r3, #28
   18fce:	d509      	bpl.n	18fe4 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   18fd0:	2105      	movs	r1, #5
   18fd2:	4628      	mov	r0, r5
   18fd4:	f014 fb24 	bl	2d620 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   18fd8:	7d63      	ldrb	r3, [r4, #21]
   18fda:	f003 0302 	and.w	r3, r3, #2
   18fde:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   18fe0:	2300      	movs	r3, #0
   18fe2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   18fe4:	7ce3      	ldrb	r3, [r4, #19]
   18fe6:	0699      	lsls	r1, r3, #26
   18fe8:	d507      	bpl.n	18ffa <smp_pairing_req+0xe2>
   18fea:	f899 3002 	ldrb.w	r3, [r9, #2]
   18fee:	069a      	lsls	r2, r3, #26
   18ff0:	d503      	bpl.n	18ffa <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   18ff2:	2114      	movs	r1, #20
   18ff4:	4628      	mov	r0, r5
   18ff6:	f014 fb13 	bl	2d620 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   18ffa:	7da3      	ldrb	r3, [r4, #22]
   18ffc:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   19000:	7d63      	ldrb	r3, [r4, #21]
   19002:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   19006:	7ce3      	ldrb	r3, [r4, #19]
   19008:	07db      	lsls	r3, r3, #31
   1900a:	d507      	bpl.n	1901c <smp_pairing_req+0x104>
   1900c:	f899 3002 	ldrb.w	r3, [r9, #2]
   19010:	07d8      	lsls	r0, r3, #31
   19012:	d503      	bpl.n	1901c <smp_pairing_req+0x104>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   19014:	210d      	movs	r1, #13
   19016:	4628      	mov	r0, r5
   19018:	f014 fb02 	bl	2d620 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1901c:	2103      	movs	r1, #3
   1901e:	4628      	mov	r0, r5
   19020:	f014 fafe 	bl	2d620 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19024:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   19026:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1902a:	f014 fa93 	bl	2d554 <atomic_test_bit>
   1902e:	bb40      	cbnz	r0, 19082 <smp_pairing_req+0x16a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   19030:	f1b9 0f04 	cmp.w	r9, #4
   19034:	d845      	bhi.n	190c2 <smp_pairing_req+0x1aa>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   19036:	7ae3      	ldrb	r3, [r4, #11]
   19038:	7ca2      	ldrb	r2, [r4, #18]
   1903a:	4013      	ands	r3, r2
   1903c:	07d9      	lsls	r1, r3, #31
   1903e:	d43e      	bmi.n	190be <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   19040:	7b21      	ldrb	r1, [r4, #12]
   19042:	7ce3      	ldrb	r3, [r4, #19]
   19044:	4319      	orrs	r1, r3
   19046:	f011 0104 	ands.w	r1, r1, #4
   1904a:	d011      	beq.n	19070 <smp_pairing_req+0x158>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1904c:	4620      	mov	r0, r4
   1904e:	f7ff fc93 	bl	18978 <get_io_capa>
   19052:	4b81      	ldr	r3, [pc, #516]	; (19258 <smp_pairing_req+0x340>)
   19054:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   19058:	4499      	add	r9, r3
   1905a:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   1905e:	2904      	cmp	r1, #4
   19060:	d106      	bne.n	19070 <smp_pairing_req+0x158>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   19062:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   19066:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   19068:	2b00      	cmp	r3, #0
   1906a:	bf14      	ite	ne
   1906c:	2101      	movne	r1, #1
   1906e:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   19070:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   19072:	4620      	mov	r0, r4
   19074:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   19078:	f014 fa72 	bl	2d560 <update_keys_check>
   1907c:	bb18      	cbnz	r0, 190c6 <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1907e:	2003      	movs	r0, #3
   19080:	e75d      	b.n	18f3e <smp_pairing_req+0x26>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   19082:	7b23      	ldrb	r3, [r4, #12]
   19084:	7ce0      	ldrb	r0, [r4, #19]
   19086:	ea03 0200 	and.w	r2, r3, r0
   1908a:	0712      	lsls	r2, r2, #28
   1908c:	d506      	bpl.n	1909c <smp_pairing_req+0x184>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1908e:	7ae2      	ldrb	r2, [r4, #11]
   19090:	f894 c012 	ldrb.w	ip, [r4, #18]
   19094:	ea42 020c 	orr.w	r2, r2, ip
   19098:	07d2      	lsls	r2, r2, #31
   1909a:	d4e9      	bmi.n	19070 <smp_pairing_req+0x158>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1909c:	f1b9 0f04 	cmp.w	r9, #4
   190a0:	d80f      	bhi.n	190c2 <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   190a2:	ea43 0100 	orr.w	r1, r3, r0
   190a6:	f011 0104 	ands.w	r1, r1, #4
   190aa:	d0e1      	beq.n	19070 <smp_pairing_req+0x158>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   190ac:	4620      	mov	r0, r4
   190ae:	f7ff fc63 	bl	18978 <get_io_capa>
   190b2:	4b6a      	ldr	r3, [pc, #424]	; (1925c <smp_pairing_req+0x344>)
   190b4:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   190b8:	444b      	add	r3, r9
   190ba:	5c19      	ldrb	r1, [r3, r0]
   190bc:	e7d8      	b.n	19070 <smp_pairing_req+0x158>
		return LEGACY_OOB;
   190be:	2106      	movs	r1, #6
   190c0:	e7d6      	b.n	19070 <smp_pairing_req+0x158>
		return JUST_WORKS;
   190c2:	2100      	movs	r1, #0
   190c4:	e7d4      	b.n	19070 <smp_pairing_req+0x158>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   190c6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   190ca:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   190cc:	2b03      	cmp	r3, #3
   190ce:	d03e      	beq.n	1914e <smp_pairing_req+0x236>
   190d0:	d82c      	bhi.n	1912c <smp_pairing_req+0x214>
   190d2:	3b01      	subs	r3, #1
   190d4:	2b01      	cmp	r3, #1
   190d6:	f63f af4e 	bhi.w	18f76 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   190da:	2105      	movs	r1, #5
   190dc:	4628      	mov	r0, r5
   190de:	f014 fa39 	bl	2d554 <atomic_test_bit>
   190e2:	2800      	cmp	r0, #0
   190e4:	f040 80c4 	bne.w	19270 <smp_pairing_req+0x358>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   190e8:	4620      	mov	r0, r4
   190ea:	f7ff fc2f 	bl	1894c <latch_auth_cb>
   190ee:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   190f0:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   190f2:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   190f6:	f7ff fc29 	bl	1894c <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   190fa:	f109 0190 	add.w	r1, r9, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   190fe:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   19100:	f899 0008 	ldrb.w	r0, [r9, #8]
   19104:	f001 fa3e 	bl	1a584 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   19108:	7a23      	ldrb	r3, [r4, #8]
   1910a:	b320      	cbz	r0, 19156 <smp_pairing_req+0x23e>
   1910c:	7b42      	ldrb	r2, [r0, #13]
   1910e:	07d2      	lsls	r2, r2, #31
   19110:	d521      	bpl.n	19156 <smp_pairing_req+0x23e>
   19112:	bb03      	cbnz	r3, 19156 <smp_pairing_req+0x23e>
		LOG_ERR("JustWorks failed, authenticated keys present");
   19114:	4b52      	ldr	r3, [pc, #328]	; (19260 <smp_pairing_req+0x348>)
   19116:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1911a:	617b      	str	r3, [r7, #20]
   1911c:	2302      	movs	r3, #2
   1911e:	4851      	ldr	r0, [pc, #324]	; (19264 <smp_pairing_req+0x34c>)
   19120:	613b      	str	r3, [r7, #16]
   19122:	f107 0210 	add.w	r2, r7, #16
   19126:	f014 fa6d 	bl	2d604 <z_log_msg_static_create.constprop.0>
	if (ret) {
   1912a:	e724      	b.n	18f76 <smp_pairing_req+0x5e>
	switch (sec) {
   1912c:	2b04      	cmp	r3, #4
   1912e:	f47f af22 	bne.w	18f76 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   19132:	7d23      	ldrb	r3, [r4, #20]
   19134:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   19136:	4293      	cmp	r3, r2
   19138:	bf28      	it	cs
   1913a:	4613      	movcs	r3, r2
   1913c:	2b10      	cmp	r3, #16
   1913e:	f47f aefd 	bne.w	18f3c <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19142:	2105      	movs	r1, #5
   19144:	4628      	mov	r0, r5
   19146:	f014 fa05 	bl	2d554 <atomic_test_bit>
   1914a:	2800      	cmp	r0, #0
   1914c:	d097      	beq.n	1907e <smp_pairing_req+0x166>
		if (smp->method == JUST_WORKS) {
   1914e:	7a23      	ldrb	r3, [r4, #8]
   19150:	2b00      	cmp	r3, #0
   19152:	d1c2      	bne.n	190da <smp_pairing_req+0x1c2>
   19154:	e793      	b.n	1907e <smp_pairing_req+0x166>
	switch (smp->method) {
   19156:	2b06      	cmp	r3, #6
   19158:	d85f      	bhi.n	1921a <smp_pairing_req+0x302>
   1915a:	e8df f003 	tbb	[pc, r3]
   1915e:	5617      	.short	0x5617
   19160:	5e5e5e2f 	.word	0x5e5e5e2f
   19164:	04          	.byte	0x04
   19165:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   19166:	2e00      	cmp	r6, #0
   19168:	d067      	beq.n	1923a <smp_pairing_req+0x322>
   1916a:	68f3      	ldr	r3, [r6, #12]
   1916c:	2b00      	cmp	r3, #0
   1916e:	d064      	beq.n	1923a <smp_pairing_req+0x322>
			struct bt_conn_oob_info info = {
   19170:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19172:	210a      	movs	r1, #10
   19174:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   19176:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19178:	f014 fa52 	bl	2d620 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1917c:	4639      	mov	r1, r7
   1917e:	68f3      	ldr	r3, [r6, #12]
   19180:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   19184:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19186:	7a23      	ldrb	r3, [r4, #8]
   19188:	2b00      	cmp	r3, #0
   1918a:	d158      	bne.n	1923e <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1918c:	210f      	movs	r1, #15
   1918e:	4628      	mov	r0, r5
   19190:	f014 f9e0 	bl	2d554 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19194:	2800      	cmp	r0, #0
   19196:	d152      	bne.n	1923e <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19198:	f1b8 0f00 	cmp.w	r8, #0
   1919c:	d04f      	beq.n	1923e <smp_pairing_req+0x326>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1919e:	f8d8 3014 	ldr.w	r3, [r8, #20]
   191a2:	2b00      	cmp	r3, #0
   191a4:	d04b      	beq.n	1923e <smp_pairing_req+0x326>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   191a6:	4628      	mov	r0, r5
   191a8:	210a      	movs	r1, #10
   191aa:	f014 fa39 	bl	2d620 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   191ae:	f8d8 3014 	ldr.w	r3, [r8, #20]
   191b2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   191b6:	4798      	blx	r3
		return 0;
   191b8:	2000      	movs	r0, #0
   191ba:	e6c0      	b.n	18f3e <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   191bc:	2104      	movs	r1, #4
   191be:	4638      	mov	r0, r7
   191c0:	f7fb f9c0 	bl	14544 <bt_rand>
   191c4:	2800      	cmp	r0, #0
   191c6:	f47f aed6 	bne.w	18f76 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   191ca:	683b      	ldr	r3, [r7, #0]
   191cc:	4a26      	ldr	r2, [pc, #152]	; (19268 <smp_pairing_req+0x350>)
   191ce:	fbb3 f1f2 	udiv	r1, r3, r2
   191d2:	fb02 3311 	mls	r3, r2, r1, r3
   191d6:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   191d8:	b14e      	cbz	r6, 191ee <smp_pairing_req+0x2d6>
   191da:	6833      	ldr	r3, [r6, #0]
   191dc:	b13b      	cbz	r3, 191ee <smp_pairing_req+0x2d6>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   191de:	210b      	movs	r1, #11
   191e0:	4628      	mov	r0, r5
   191e2:	f014 fa1d 	bl	2d620 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   191e6:	4648      	mov	r0, r9
   191e8:	6833      	ldr	r3, [r6, #0]
   191ea:	6839      	ldr	r1, [r7, #0]
   191ec:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   191ee:	683b      	ldr	r3, [r7, #0]
	dst[1] = val >> 8;
   191f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   191f4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   191f8:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   191fa:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   191fe:	0a1b      	lsrs	r3, r3, #8
   19200:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   19204:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   19208:	e7bd      	b.n	19186 <smp_pairing_req+0x26e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1920a:	4628      	mov	r0, r5
   1920c:	210a      	movs	r1, #10
   1920e:	f014 fa07 	bl	2d620 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   19212:	4648      	mov	r0, r9
   19214:	6873      	ldr	r3, [r6, #4]
   19216:	4798      	blx	r3
	if (ret) {
   19218:	e7b5      	b.n	19186 <smp_pairing_req+0x26e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1921a:	466c      	mov	r4, sp
   1921c:	b088      	sub	sp, #32
   1921e:	466a      	mov	r2, sp
   19220:	4912      	ldr	r1, [pc, #72]	; (1926c <smp_pairing_req+0x354>)
   19222:	4810      	ldr	r0, [pc, #64]	; (19264 <smp_pairing_req+0x34c>)
	switch (smp->method) {
   19224:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19228:	2303      	movs	r3, #3
   1922a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1922e:	f842 3f10 	str.w	r3, [r2, #16]!
   19232:	f014 f9e7 	bl	2d604 <z_log_msg_static_create.constprop.0>
   19236:	46a5      	mov	sp, r4
	if (ret) {
   19238:	e69d      	b.n	18f76 <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1923a:	2002      	movs	r0, #2
   1923c:	e67f      	b.n	18f3e <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1923e:	2103      	movs	r1, #3
   19240:	4620      	mov	r0, r4
   19242:	f014 f9ed 	bl	2d620 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   19246:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   19248:	f014 f9ea 	bl	2d620 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1924c:	f014 fa17 	bl	2d67e <send_pairing_rsp>
   19250:	e675      	b.n	18f3e <smp_pairing_req+0x26>
   19252:	bf00      	nop
   19254:	200223f9 	.word	0x200223f9
   19258:	0003640b 	.word	0x0003640b
   1925c:	000363f2 	.word	0x000363f2
   19260:	000360a4 	.word	0x000360a4
   19264:	00031524 	.word	0x00031524
   19268:	000f4240 	.word	0x000f4240
   1926c:	0003604c 	.word	0x0003604c
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   19270:	7a23      	ldrb	r3, [r4, #8]
   19272:	b993      	cbnz	r3, 1929a <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19274:	210f      	movs	r1, #15
   19276:	4628      	mov	r0, r5
   19278:	f014 f96c 	bl	2d554 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1927c:	b968      	cbnz	r0, 1929a <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1927e:	f1b8 0f00 	cmp.w	r8, #0
   19282:	d00a      	beq.n	1929a <smp_pairing_req+0x382>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   19284:	f8d8 3014 	ldr.w	r3, [r8, #20]
   19288:	b13b      	cbz	r3, 1929a <smp_pairing_req+0x382>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1928a:	4628      	mov	r0, r5
   1928c:	210a      	movs	r1, #10
   1928e:	f014 f9c7 	bl	2d620 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   19292:	4630      	mov	r0, r6
   19294:	f8d8 3014 	ldr.w	r3, [r8, #20]
   19298:	e78d      	b.n	191b6 <smp_pairing_req+0x29e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1929a:	210c      	movs	r1, #12
   1929c:	4620      	mov	r0, r4
   1929e:	e7d3      	b.n	19248 <smp_pairing_req+0x330>

000192a0 <compute_and_check_and_send_periph_dhcheck>:
{
   192a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   192a4:	4604      	mov	r4, r0
   192a6:	b096      	sub	sp, #88	; 0x58
   192a8:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   192aa:	f107 0520 	add.w	r5, r7, #32
   192ae:	2210      	movs	r2, #16
   192b0:	2100      	movs	r1, #0
   192b2:	4628      	mov	r0, r5
   192b4:	f017 f995 	bl	305e2 <memset>
	switch (smp->method) {
   192b8:	7a23      	ldrb	r3, [r4, #8]
   192ba:	2b05      	cmp	r3, #5
   192bc:	d83a      	bhi.n	19334 <compute_and_check_and_send_periph_dhcheck+0x94>
   192be:	e8df f003 	tbb	[pc, r3]
   192c2:	0306      	.short	0x0306
   192c4:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   192c8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   192cc:	623b      	str	r3, [r7, #32]
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   192ce:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   192d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
   192d6:	f104 08c7 	add.w	r8, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   192da:	e9cd 8201 	strd	r8, r2, [sp, #4]
   192de:	f104 0937 	add.w	r9, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   192e2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   192e6:	f104 0a27 	add.w	sl, r4, #39	; 0x27
   192ea:	9200      	str	r2, [sp, #0]
   192ec:	4649      	mov	r1, r9
   192ee:	4652      	mov	r2, sl
   192f0:	3397      	adds	r3, #151	; 0x97
   192f2:	f104 0097 	add.w	r0, r4, #151	; 0x97
   192f6:	f001 fb2f 	bl	1a958 <bt_crypto_f5>
   192fa:	b378      	cbz	r0, 1935c <compute_and_check_and_send_periph_dhcheck+0xbc>
		LOG_ERR("Calculate LTK failed");
   192fc:	4b4c      	ldr	r3, [pc, #304]	; (19430 <compute_and_check_and_send_periph_dhcheck+0x190>)
   192fe:	647b      	str	r3, [r7, #68]	; 0x44
   19300:	2302      	movs	r3, #2
   19302:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19306:	484b      	ldr	r0, [pc, #300]	; (19434 <compute_and_check_and_send_periph_dhcheck+0x194>)
   19308:	643b      	str	r3, [r7, #64]	; 0x40
   1930a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1930e:	f014 f979 	bl	2d604 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   19312:	e01e      	b.n	19352 <compute_and_check_and_send_periph_dhcheck+0xb2>
		if (smp->oobd_remote) {
   19314:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   19318:	2b00      	cmp	r3, #0
   1931a:	d0d8      	beq.n	192ce <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1931c:	462e      	mov	r6, r5
   1931e:	f103 0c10 	add.w	ip, r3, #16
   19322:	4632      	mov	r2, r6
   19324:	6818      	ldr	r0, [r3, #0]
   19326:	6859      	ldr	r1, [r3, #4]
   19328:	3308      	adds	r3, #8
   1932a:	c203      	stmia	r2!, {r0, r1}
   1932c:	4563      	cmp	r3, ip
   1932e:	4616      	mov	r6, r2
   19330:	d1f7      	bne.n	19322 <compute_and_check_and_send_periph_dhcheck+0x82>
   19332:	e7cc      	b.n	192ce <compute_and_check_and_send_periph_dhcheck+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19334:	466c      	mov	r4, sp
   19336:	b088      	sub	sp, #32
   19338:	aa04      	add	r2, sp, #16
   1933a:	493f      	ldr	r1, [pc, #252]	; (19438 <compute_and_check_and_send_periph_dhcheck+0x198>)
   1933c:	483d      	ldr	r0, [pc, #244]	; (19434 <compute_and_check_and_send_periph_dhcheck+0x194>)
	switch (smp->method) {
   1933e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19342:	2303      	movs	r3, #3
   19344:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19348:	f842 3f10 	str.w	r3, [r2, #16]!
   1934c:	f014 f95a 	bl	2d604 <z_log_msg_static_create.constprop.0>
   19350:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   19352:	2008      	movs	r0, #8
}
   19354:	3748      	adds	r7, #72	; 0x48
   19356:	46bd      	mov	sp, r7
   19358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1935c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   19360:	f107 0610 	add.w	r6, r7, #16
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   19364:	f103 0297 	add.w	r2, r3, #151	; 0x97
   19368:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1936a:	9301      	str	r3, [sp, #4]
   1936c:	f104 0311 	add.w	r3, r4, #17
   19370:	9202      	str	r2, [sp, #8]
   19372:	9300      	str	r3, [sp, #0]
   19374:	464a      	mov	r2, r9
   19376:	462b      	mov	r3, r5
   19378:	4651      	mov	r1, sl
   1937a:	4640      	mov	r0, r8
   1937c:	9603      	str	r6, [sp, #12]
   1937e:	f014 fc06 	bl	2db8e <bt_crypto_f6>
   19382:	b108      	cbz	r0, 19388 <compute_and_check_and_send_periph_dhcheck+0xe8>
		LOG_ERR("Calculate local DHKey check failed");
   19384:	4b2d      	ldr	r3, [pc, #180]	; (1943c <compute_and_check_and_send_periph_dhcheck+0x19c>)
   19386:	e7ba      	b.n	192fe <compute_and_check_and_send_periph_dhcheck+0x5e>
	if (smp->method == LE_SC_OOB) {
   19388:	7a23      	ldrb	r3, [r4, #8]
   1938a:	2b05      	cmp	r3, #5
   1938c:	d10e      	bne.n	193ac <compute_and_check_and_send_periph_dhcheck+0x10c>
		if (smp->oobd_local) {
   1938e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   19392:	b1f9      	cbz	r1, 193d4 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   19394:	460b      	mov	r3, r1
   19396:	46ac      	mov	ip, r5
   19398:	f101 0e10 	add.w	lr, r1, #16
   1939c:	4662      	mov	r2, ip
   1939e:	6818      	ldr	r0, [r3, #0]
   193a0:	6859      	ldr	r1, [r3, #4]
   193a2:	3308      	adds	r3, #8
   193a4:	c203      	stmia	r2!, {r0, r1}
   193a6:	4573      	cmp	r3, lr
   193a8:	4694      	mov	ip, r2
   193aa:	d1f7      	bne.n	1939c <compute_and_check_and_send_periph_dhcheck+0xfc>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   193ac:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   193b0:	4649      	mov	r1, r9
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   193b2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   193b6:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   193b8:	9301      	str	r3, [sp, #4]
   193ba:	f104 030a 	add.w	r3, r4, #10
   193be:	9202      	str	r2, [sp, #8]
   193c0:	9300      	str	r3, [sp, #0]
   193c2:	4652      	mov	r2, sl
   193c4:	462b      	mov	r3, r5
   193c6:	4640      	mov	r0, r8
   193c8:	9703      	str	r7, [sp, #12]
   193ca:	f014 fbe0 	bl	2db8e <bt_crypto_f6>
   193ce:	b130      	cbz	r0, 193de <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   193d0:	4b1b      	ldr	r3, [pc, #108]	; (19440 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   193d2:	e794      	b.n	192fe <compute_and_check_and_send_periph_dhcheck+0x5e>
			memset(r, 0, sizeof(r));
   193d4:	2210      	movs	r2, #16
   193d6:	4628      	mov	r0, r5
   193d8:	f017 f903 	bl	305e2 <memset>
   193dc:	e7e6      	b.n	193ac <compute_and_check_and_send_periph_dhcheck+0x10c>
	if (memcmp(smp->e, re, 16)) {
   193de:	2210      	movs	r2, #16
   193e0:	4639      	mov	r1, r7
   193e2:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   193e6:	f017 f8b2 	bl	3054e <memcmp>
   193ea:	b9f8      	cbnz	r0, 1942c <compute_and_check_and_send_periph_dhcheck+0x18c>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   193ec:	210d      	movs	r1, #13
   193ee:	4620      	mov	r0, r4
   193f0:	f014 f926 	bl	2d640 <smp_create_pdu.constprop.0>
	if (!buf) {
   193f4:	4680      	mov	r8, r0
   193f6:	2800      	cmp	r0, #0
   193f8:	d0ab      	beq.n	19352 <compute_and_check_and_send_periph_dhcheck+0xb2>
   193fa:	2110      	movs	r1, #16
   193fc:	300c      	adds	r0, #12
   193fe:	f002 f9e5 	bl	1b7cc <net_buf_simple_add>
   19402:	4603      	mov	r3, r0
   19404:	4632      	mov	r2, r6
   19406:	ca03      	ldmia	r2!, {r0, r1}
   19408:	42aa      	cmp	r2, r5
   1940a:	6018      	str	r0, [r3, #0]
   1940c:	6059      	str	r1, [r3, #4]
   1940e:	4616      	mov	r6, r2
   19410:	f103 0308 	add.w	r3, r3, #8
   19414:	d1f6      	bne.n	19404 <compute_and_check_and_send_periph_dhcheck+0x164>
	smp_send(smp, buf, NULL, NULL);
   19416:	2200      	movs	r2, #0
   19418:	4641      	mov	r1, r8
   1941a:	4620      	mov	r0, r4
   1941c:	f014 f8d5 	bl	2d5ca <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   19420:	1d20      	adds	r0, r4, #4
   19422:	2101      	movs	r1, #1
   19424:	f014 f8fc 	bl	2d620 <atomic_set_bit>
	return 0;
   19428:	2000      	movs	r0, #0
   1942a:	e793      	b.n	19354 <compute_and_check_and_send_periph_dhcheck+0xb4>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1942c:	200b      	movs	r0, #11
   1942e:	e791      	b.n	19354 <compute_and_check_and_send_periph_dhcheck+0xb4>
   19430:	000360d1 	.word	0x000360d1
   19434:	00031524 	.word	0x00031524
   19438:	0003604c 	.word	0x0003604c
   1943c:	000360e6 	.word	0x000360e6
   19440:	00036109 	.word	0x00036109

00019444 <bt_smp_connected>:
{
   19444:	b538      	push	{r3, r4, r5, lr}
   19446:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   19448:	4908      	ldr	r1, [pc, #32]	; (1946c <bt_smp_connected+0x28>)
   1944a:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1944e:	3094      	adds	r0, #148	; 0x94
   19450:	f00c fd3e 	bl	25ed0 <k_work_init_delayable>
	smp_reset(smp);
   19454:	4628      	mov	r0, r5
   19456:	f014 f98c 	bl	2d772 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1945a:	4b05      	ldr	r3, [pc, #20]	; (19470 <bt_smp_connected+0x2c>)
   1945c:	34c4      	adds	r4, #196	; 0xc4
   1945e:	e8d4 2fef 	ldaex	r2, [r4]
   19462:	e8c4 3fe1 	stlex	r1, r3, [r4]
   19466:	2900      	cmp	r1, #0
   19468:	d1f9      	bne.n	1945e <bt_smp_connected+0x1a>
}
   1946a:	bd38      	pop	{r3, r4, r5, pc}
   1946c:	0001a175 	.word	0x0001a175
   19470:	20009f78 	.word	0x20009f78

00019474 <smp_pairing_confirm>:
{
   19474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19476:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   19478:	68cd      	ldr	r5, [r1, #12]
{
   1947a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1947c:	210b      	movs	r1, #11
   1947e:	4630      	mov	r0, r6
{
   19480:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19482:	f014 f88e 	bl	2d5a2 <atomic_clear_bit>
   19486:	462b      	mov	r3, r5
   19488:	f104 0217 	add.w	r2, r4, #23
   1948c:	f105 0110 	add.w	r1, r5, #16
   19490:	f853 0b04 	ldr.w	r0, [r3], #4
   19494:	428b      	cmp	r3, r1
   19496:	f842 0b04 	str.w	r0, [r2], #4
   1949a:	d1f9      	bne.n	19490 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1949c:	2105      	movs	r1, #5
   1949e:	4630      	mov	r0, r6
   194a0:	f014 f858 	bl	2d554 <atomic_test_bit>
   194a4:	b920      	cbnz	r0, 194b0 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   194a6:	4620      	mov	r0, r4
   194a8:	f014 f9d9 	bl	2d85e <legacy_pairing_confirm>
}
   194ac:	46bd      	mov	sp, r7
   194ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   194b0:	7a23      	ldrb	r3, [r4, #8]
   194b2:	2b01      	cmp	r3, #1
   194b4:	d008      	beq.n	194c8 <smp_pairing_confirm+0x54>
   194b6:	2b02      	cmp	r3, #2
   194b8:	d112      	bne.n	194e0 <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   194ba:	2104      	movs	r1, #4
   194bc:	4620      	mov	r0, r4
   194be:	f014 f8af 	bl	2d620 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   194c2:	f7ff fbb5 	bl	18c30 <smp_send_pairing_confirm>
   194c6:	e7f1      	b.n	194ac <smp_pairing_confirm+0x38>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   194c8:	210a      	movs	r1, #10
   194ca:	4630      	mov	r0, r6
   194cc:	f014 f842 	bl	2d554 <atomic_test_bit>
   194d0:	2800      	cmp	r0, #0
   194d2:	d0f2      	beq.n	194ba <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   194d4:	4630      	mov	r0, r6
   194d6:	2100      	movs	r1, #0
   194d8:	f014 f8a2 	bl	2d620 <atomic_set_bit>
			return 0;
   194dc:	2000      	movs	r0, #0
   194de:	e7e5      	b.n	194ac <smp_pairing_confirm+0x38>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   194e0:	466c      	mov	r4, sp
   194e2:	b088      	sub	sp, #32
   194e4:	466a      	mov	r2, sp
   194e6:	4907      	ldr	r1, [pc, #28]	; (19504 <smp_pairing_confirm+0x90>)
   194e8:	4807      	ldr	r0, [pc, #28]	; (19508 <smp_pairing_confirm+0x94>)
	switch (smp->method) {
   194ea:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   194ee:	2303      	movs	r3, #3
   194f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   194f4:	f842 3f10 	str.w	r3, [r2, #16]!
   194f8:	f014 f884 	bl	2d604 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   194fc:	2008      	movs	r0, #8
   194fe:	46a5      	mov	sp, r4
   19500:	e7d4      	b.n	194ac <smp_pairing_confirm+0x38>
   19502:	bf00      	nop
   19504:	0003604c 	.word	0x0003604c
   19508:	00031524 	.word	0x00031524

0001950c <smp_pairing_random>:
{
   1950c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19510:	b08e      	sub	sp, #56	; 0x38
   19512:	4604      	mov	r4, r0
   19514:	af04      	add	r7, sp, #16
   19516:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19518:	f7ff fa18 	bl	1894c <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1951c:	f104 0837 	add.w	r8, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19520:	4605      	mov	r5, r0
   19522:	4642      	mov	r2, r8
   19524:	68f3      	ldr	r3, [r6, #12]
   19526:	f103 0110 	add.w	r1, r3, #16
   1952a:	f853 0b04 	ldr.w	r0, [r3], #4
   1952e:	428b      	cmp	r3, r1
   19530:	f842 0b04 	str.w	r0, [r2], #4
   19534:	d1f9      	bne.n	1952a <smp_pairing_random+0x1e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19536:	1d26      	adds	r6, r4, #4
   19538:	2105      	movs	r1, #5
   1953a:	4630      	mov	r0, r6
   1953c:	f014 f80a 	bl	2d554 <atomic_test_bit>
   19540:	2800      	cmp	r0, #0
   19542:	d150      	bne.n	195e6 <smp_pairing_random+0xda>
	struct bt_conn *conn = smp->chan.chan.conn;
   19544:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19548:	f104 0547 	add.w	r5, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1954c:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   19550:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19552:	9201      	str	r2, [sp, #4]
   19554:	9300      	str	r3, [sp, #0]
   19556:	4641      	mov	r1, r8
   19558:	4628      	mov	r0, r5
   1955a:	9702      	str	r7, [sp, #8]
   1955c:	f104 0310 	add.w	r3, r4, #16
   19560:	f104 0209 	add.w	r2, r4, #9
   19564:	f014 f920 	bl	2d7a8 <smp_c1>
	if (err) {
   19568:	bb18      	cbnz	r0, 195b2 <smp_pairing_random+0xa6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1956a:	2210      	movs	r2, #16
   1956c:	4639      	mov	r1, r7
   1956e:	f104 0017 	add.w	r0, r4, #23
   19572:	f016 ffec 	bl	3054e <memcmp>
   19576:	2800      	cmp	r0, #0
   19578:	d176      	bne.n	19668 <smp_pairing_random+0x15c>
	memcpy(out, r2, 8);
   1957a:	463b      	mov	r3, r7
   1957c:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   19580:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return bt_encrypt_le(k, out, out);
   19584:	463a      	mov	r2, r7
	memcpy(out, r2, 8);
   19586:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   19588:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1958c:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   19590:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   19592:	4639      	mov	r1, r7
   19594:	4628      	mov	r0, r5
   19596:	f012 ff9e 	bl	2c4d6 <bt_encrypt_le>
		if (err) {
   1959a:	b178      	cbz	r0, 195bc <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   1959c:	4b63      	ldr	r3, [pc, #396]	; (1972c <smp_pairing_random+0x220>)
		LOG_ERR("Calculate confirm failed");
   1959e:	627b      	str	r3, [r7, #36]	; 0x24
   195a0:	2302      	movs	r3, #2
   195a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   195a6:	4862      	ldr	r0, [pc, #392]	; (19730 <smp_pairing_random+0x224>)
   195a8:	623b      	str	r3, [r7, #32]
   195aa:	f107 0220 	add.w	r2, r7, #32
   195ae:	f014 f829 	bl	2d604 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   195b2:	2008      	movs	r0, #8
}
   195b4:	3728      	adds	r7, #40	; 0x28
   195b6:	46bd      	mov	sp, r7
   195b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   195bc:	463b      	mov	r3, r7
   195be:	462a      	mov	r2, r5
   195c0:	f107 0c10 	add.w	ip, r7, #16
   195c4:	461d      	mov	r5, r3
   195c6:	cd03      	ldmia	r5!, {r0, r1}
   195c8:	4565      	cmp	r5, ip
   195ca:	6010      	str	r0, [r2, #0]
   195cc:	6051      	str	r1, [r2, #4]
   195ce:	462b      	mov	r3, r5
   195d0:	f102 0208 	add.w	r2, r2, #8
   195d4:	d1f6      	bne.n	195c4 <smp_pairing_random+0xb8>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   195d6:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   195d8:	4630      	mov	r0, r6
   195da:	f014 f821 	bl	2d620 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   195de:	4620      	mov	r0, r4
   195e0:	f014 f867 	bl	2d6b2 <smp_send_pairing_random>
   195e4:	e7e6      	b.n	195b4 <smp_pairing_random+0xa8>
	switch (smp->method) {
   195e6:	7a23      	ldrb	r3, [r4, #8]
   195e8:	2b05      	cmp	r3, #5
   195ea:	f200 808c 	bhi.w	19706 <smp_pairing_random+0x1fa>
   195ee:	e8df f003 	tbb	[pc, r3]
   195f2:	201a      	.short	0x201a
   195f4:	618a0320 	.word	0x618a0320
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   195f8:	f107 0310 	add.w	r3, r7, #16
   195fc:	494d      	ldr	r1, [pc, #308]	; (19734 <smp_pairing_random+0x228>)
   195fe:	9300      	str	r3, [sp, #0]
   19600:	4642      	mov	r2, r8
   19602:	6809      	ldr	r1, [r1, #0]
   19604:	f104 0327 	add.w	r3, r4, #39	; 0x27
   19608:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1960c:	f001 fa0c 	bl	1aa28 <bt_crypto_g2>
   19610:	2800      	cmp	r0, #0
   19612:	d1ce      	bne.n	195b2 <smp_pairing_random+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19614:	210a      	movs	r1, #10
   19616:	4630      	mov	r0, r6
   19618:	f014 f802 	bl	2d620 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1961c:	68ab      	ldr	r3, [r5, #8]
   1961e:	6939      	ldr	r1, [r7, #16]
   19620:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   19624:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   19626:	210d      	movs	r1, #13
   19628:	4620      	mov	r0, r4
   1962a:	f013 fff9 	bl	2d620 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1962e:	2110      	movs	r1, #16
   19630:	e7d2      	b.n	195d8 <smp_pairing_random+0xcc>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19632:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   19636:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1963a:	493e      	ldr	r1, [pc, #248]	; (19734 <smp_pairing_random+0x228>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1963c:	40d3      	lsrs	r3, r2
   1963e:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19642:	9700      	str	r7, [sp, #0]
   19644:	4642      	mov	r2, r8
   19646:	6809      	ldr	r1, [r1, #0]
   19648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1964c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19650:	f014 fa78 	bl	2db44 <bt_crypto_f4>
   19654:	b108      	cbz	r0, 1965a <smp_pairing_random+0x14e>
		LOG_ERR("Calculate confirm failed");
   19656:	4b38      	ldr	r3, [pc, #224]	; (19738 <smp_pairing_random+0x22c>)
   19658:	e7a1      	b.n	1959e <smp_pairing_random+0x92>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1965a:	2210      	movs	r2, #16
   1965c:	4639      	mov	r1, r7
   1965e:	f104 0017 	add.w	r0, r4, #23
   19662:	f016 ff74 	bl	3054e <memcmp>
   19666:	b108      	cbz	r0, 1966c <smp_pairing_random+0x160>
		return BT_SMP_ERR_CONFIRM_FAILED;
   19668:	2004      	movs	r0, #4
   1966a:	e7a3      	b.n	195b4 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->allowed_cmds,
   1966c:	2103      	movs	r1, #3
   1966e:	4620      	mov	r0, r4
   19670:	f013 ffd6 	bl	2d620 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   19674:	f014 f81d 	bl	2d6b2 <smp_send_pairing_random>
		if (err) {
   19678:	2800      	cmp	r0, #0
   1967a:	d19b      	bne.n	195b4 <smp_pairing_random+0xa8>
		smp->passkey_round++;
   1967c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   19680:	3301      	adds	r3, #1
   19682:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   19684:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   19686:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1968a:	d109      	bne.n	196a0 <smp_pairing_random+0x194>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1968c:	210d      	movs	r1, #13
   1968e:	4620      	mov	r0, r4
   19690:	f013 ffc6 	bl	2d620 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   19694:	2110      	movs	r1, #16
   19696:	4630      	mov	r0, r6
   19698:	f013 ffc2 	bl	2d620 <atomic_set_bit>
			return 0;
   1969c:	2000      	movs	r0, #0
   1969e:	e789      	b.n	195b4 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   196a0:	2110      	movs	r1, #16
   196a2:	f104 0027 	add.w	r0, r4, #39	; 0x27
   196a6:	f7fa ff4d 	bl	14544 <bt_rand>
   196aa:	3800      	subs	r0, #0
   196ac:	bf18      	it	ne
   196ae:	2001      	movne	r0, #1
   196b0:	00c0      	lsls	r0, r0, #3
   196b2:	e77f      	b.n	195b4 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   196b4:	2110      	movs	r1, #16
   196b6:	f104 0027 	add.w	r0, r4, #39	; 0x27
   196ba:	f7fa ff43 	bl	14544 <bt_rand>
   196be:	2800      	cmp	r0, #0
   196c0:	f47f af77 	bne.w	195b2 <smp_pairing_random+0xa6>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   196c4:	b37d      	cbz	r5, 19726 <smp_pairing_random+0x21a>
   196c6:	68eb      	ldr	r3, [r5, #12]
   196c8:	b36b      	cbz	r3, 19726 <smp_pairing_random+0x21a>
			struct bt_conn_oob_info info = {
   196ca:	4b1c      	ldr	r3, [pc, #112]	; (1973c <smp_pairing_random+0x230>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   196cc:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   196ce:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   196d0:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   196d2:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   196d4:	7ca3      	ldrb	r3, [r4, #18]
   196d6:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   196da:	d412      	bmi.n	19702 <smp_pairing_random+0x1f6>
   196dc:	2b00      	cmp	r3, #0
   196de:	bf14      	ite	ne
   196e0:	2301      	movne	r3, #1
   196e2:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   196e4:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   196e6:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   196e8:	4630      	mov	r0, r6
			smp->oobd_remote = NULL;
   196ea:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   196ee:	210c      	movs	r1, #12
   196f0:	f013 ff96 	bl	2d620 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   196f4:	68eb      	ldr	r3, [r5, #12]
   196f6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   196fa:	f107 0110 	add.w	r1, r7, #16
   196fe:	4798      	blx	r3
			return 0;
   19700:	e7cc      	b.n	1969c <smp_pairing_random+0x190>
		if (rsp_oob_present) {
   19702:	005b      	lsls	r3, r3, #1
   19704:	e7ee      	b.n	196e4 <smp_pairing_random+0x1d8>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19706:	466c      	mov	r4, sp
   19708:	b088      	sub	sp, #32
   1970a:	aa04      	add	r2, sp, #16
   1970c:	490c      	ldr	r1, [pc, #48]	; (19740 <smp_pairing_random+0x234>)
   1970e:	4808      	ldr	r0, [pc, #32]	; (19730 <smp_pairing_random+0x224>)
	switch (smp->method) {
   19710:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19714:	2303      	movs	r3, #3
   19716:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1971a:	f842 3f10 	str.w	r3, [r2, #16]!
   1971e:	f013 ff71 	bl	2d604 <z_log_msg_static_create.constprop.0>
   19722:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   19724:	e745      	b.n	195b2 <smp_pairing_random+0xa6>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   19726:	2002      	movs	r0, #2
   19728:	e744      	b.n	195b4 <smp_pairing_random+0xa8>
   1972a:	bf00      	nop
   1972c:	0003612d 	.word	0x0003612d
   19730:	00031524 	.word	0x00031524
   19734:	20021728 	.word	0x20021728
   19738:	00036142 	.word	0x00036142
   1973c:	000316f2 	.word	0x000316f2
   19740:	0003604c 	.word	0x0003604c

00019744 <bt_smp_start_security>:
{
   19744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   19748:	78c6      	ldrb	r6, [r0, #3]
{
   1974a:	4604      	mov	r4, r0
	switch (conn->role) {
   1974c:	2e01      	cmp	r6, #1
   1974e:	d005      	beq.n	1975c <bt_smp_start_security+0x18>
		return -EINVAL;
   19750:	f06f 0415 	mvn.w	r4, #21
}
   19754:	4620      	mov	r0, r4
   19756:	b003      	add	sp, #12
   19758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1975c:	f013 ff55 	bl	2d60a <smp_chan_get>
	if (!smp) {
   19760:	4605      	mov	r5, r0
   19762:	2800      	cmp	r0, #0
   19764:	f000 80ac 	beq.w	198c0 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19768:	1d07      	adds	r7, r0, #4
   1976a:	2104      	movs	r1, #4
   1976c:	4638      	mov	r0, r7
   1976e:	f013 fef1 	bl	2d554 <atomic_test_bit>
   19772:	2800      	cmp	r0, #0
   19774:	f040 80a7 	bne.w	198c6 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19778:	2103      	movs	r1, #3
   1977a:	4638      	mov	r0, r7
   1977c:	f013 feea 	bl	2d554 <atomic_test_bit>
   19780:	b110      	cbz	r0, 19788 <bt_smp_start_security+0x44>
		return -EBUSY;
   19782:	f06f 040f 	mvn.w	r4, #15
   19786:	e7e5      	b.n	19754 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19788:	4631      	mov	r1, r6
   1978a:	4638      	mov	r0, r7
   1978c:	f013 fee2 	bl	2d554 <atomic_test_bit>
   19790:	2800      	cmp	r0, #0
   19792:	d1f6      	bne.n	19782 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19794:	4628      	mov	r0, r5
   19796:	f7ff f8d9 	bl	1894c <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1979a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1979e:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   197a0:	7a9b      	ldrb	r3, [r3, #10]
   197a2:	2b03      	cmp	r3, #3
   197a4:	d042      	beq.n	1982c <bt_smp_start_security+0xe8>
   197a6:	d832      	bhi.n	1980e <bt_smp_start_security+0xca>
   197a8:	3b01      	subs	r3, #1
   197aa:	2b01      	cmp	r3, #1
   197ac:	d948      	bls.n	19840 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   197ae:	210b      	movs	r1, #11
   197b0:	1d20      	adds	r0, r4, #4
   197b2:	f013 fecf 	bl	2d554 <atomic_test_bit>
   197b6:	2800      	cmp	r0, #0
   197b8:	d1ca      	bne.n	19750 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   197ba:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   197be:	b983      	cbnz	r3, 197e2 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   197c0:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   197c4:	4632      	mov	r2, r6
   197c6:	2020      	movs	r0, #32
   197c8:	7a21      	ldrb	r1, [r4, #8]
   197ca:	f000 fe55 	bl	1a478 <bt_keys_find>
   197ce:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   197d2:	b930      	cbnz	r0, 197e2 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   197d4:	4632      	mov	r2, r6
   197d6:	2004      	movs	r0, #4
   197d8:	7a21      	ldrb	r1, [r4, #8]
   197da:	f000 fe4d 	bl	1a478 <bt_keys_find>
   197de:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   197e2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   197e6:	2b00      	cmp	r3, #0
   197e8:	d0b2      	beq.n	19750 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   197ea:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   197ec:	f012 0f24 	tst.w	r2, #36	; 0x24
   197f0:	d0ae      	beq.n	19750 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   197f2:	7aa1      	ldrb	r1, [r4, #10]
   197f4:	2902      	cmp	r1, #2
   197f6:	d923      	bls.n	19840 <bt_smp_start_security+0xfc>
   197f8:	7b58      	ldrb	r0, [r3, #13]
   197fa:	07c0      	lsls	r0, r0, #31
   197fc:	d5a8      	bpl.n	19750 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   197fe:	2903      	cmp	r1, #3
   19800:	d01e      	beq.n	19840 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   19802:	0692      	lsls	r2, r2, #26
   19804:	d5a4      	bpl.n	19750 <bt_smp_start_security+0xc>
   19806:	7b1b      	ldrb	r3, [r3, #12]
   19808:	2b10      	cmp	r3, #16
   1980a:	d1a1      	bne.n	19750 <bt_smp_start_security+0xc>
   1980c:	e018      	b.n	19840 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1980e:	2b04      	cmp	r3, #4
   19810:	d1cd      	bne.n	197ae <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19812:	4628      	mov	r0, r5
   19814:	f7ff f8b0 	bl	18978 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19818:	2803      	cmp	r0, #3
   1981a:	d104      	bne.n	19826 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1981c:	2e00      	cmp	r6, #0
   1981e:	d0c6      	beq.n	197ae <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19820:	68f3      	ldr	r3, [r6, #12]
   19822:	2b00      	cmp	r3, #0
   19824:	d0c3      	beq.n	197ae <bt_smp_start_security+0x6a>
   19826:	4b29      	ldr	r3, [pc, #164]	; (198cc <bt_smp_start_security+0x188>)
   19828:	781b      	ldrb	r3, [r3, #0]
   1982a:	e007      	b.n	1983c <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1982c:	4628      	mov	r0, r5
   1982e:	f7ff f8a3 	bl	18978 <get_io_capa>
   19832:	2803      	cmp	r0, #3
   19834:	d104      	bne.n	19840 <bt_smp_start_security+0xfc>
   19836:	2e00      	cmp	r6, #0
   19838:	d0b9      	beq.n	197ae <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1983a:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1983c:	2b00      	cmp	r3, #0
   1983e:	d0b6      	beq.n	197ae <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   19840:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19844:	b13b      	cbz	r3, 19856 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   19846:	4628      	mov	r0, r5
   19848:	f7ff f928 	bl	18a9c <smp_init>
   1984c:	4680      	mov	r8, r0
   1984e:	b170      	cbz	r0, 1986e <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   19850:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19854:	e77e      	b.n	19754 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19856:	7a20      	ldrb	r0, [r4, #8]
   19858:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1985c:	f000 fdcc 	bl	1a3f8 <bt_keys_get_addr>
   19860:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   19864:	2800      	cmp	r0, #0
   19866:	d1ee      	bne.n	19846 <bt_smp_start_security+0x102>
			return -ENOMEM;
   19868:	f06f 040b 	mvn.w	r4, #11
   1986c:	e772      	b.n	19754 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1986e:	210b      	movs	r1, #11
   19870:	4628      	mov	r0, r5
   19872:	f013 fee5 	bl	2d640 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   19876:	4606      	mov	r6, r0
   19878:	2800      	cmp	r0, #0
   1987a:	d0e9      	beq.n	19850 <bt_smp_start_security+0x10c>
   1987c:	2101      	movs	r1, #1
   1987e:	300c      	adds	r0, #12
   19880:	f001 ffa4 	bl	1b7cc <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   19884:	2109      	movs	r1, #9
   19886:	4681      	mov	r9, r0
   19888:	4628      	mov	r0, r5
   1988a:	f7ff f89b 	bl	189c4 <get_auth>
   1988e:	4643      	mov	r3, r8
   19890:	f889 0000 	strb.w	r0, [r9]
   19894:	4632      	mov	r2, r6
   19896:	4620      	mov	r0, r4
   19898:	2106      	movs	r1, #6
   1989a:	f8cd 8000 	str.w	r8, [sp]
   1989e:	f012 ffab 	bl	2c7f8 <bt_l2cap_send_cb>
	if (err) {
   198a2:	4604      	mov	r4, r0
   198a4:	b118      	cbz	r0, 198ae <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   198a6:	4630      	mov	r0, r6
   198a8:	f001 fe6e 	bl	1b588 <net_buf_unref>
		return err;
   198ac:	e752      	b.n	19754 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   198ae:	4638      	mov	r0, r7
   198b0:	210f      	movs	r1, #15
   198b2:	f013 feb5 	bl	2d620 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   198b6:	2101      	movs	r1, #1
   198b8:	4628      	mov	r0, r5
   198ba:	f013 feb1 	bl	2d620 <atomic_set_bit>
	return 0;
   198be:	e749      	b.n	19754 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   198c0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   198c4:	e746      	b.n	19754 <bt_smp_start_security+0x10>
		return -EIO;
   198c6:	f06f 0404 	mvn.w	r4, #4
   198ca:	e743      	b.n	19754 <bt_smp_start_security+0x10>
   198cc:	200223f8 	.word	0x200223f8

000198d0 <smp_pairing_complete>:
{
   198d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198d2:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   198d4:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   198d8:	1d04      	adds	r4, r0, #4
	if (!status) {
   198da:	bb61      	cbnz	r1, 19936 <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   198dc:	210d      	movs	r1, #13
   198de:	4620      	mov	r0, r4
   198e0:	f013 fe38 	bl	2d554 <atomic_test_bit>
		if (bond_flag) {
   198e4:	4607      	mov	r7, r0
   198e6:	b118      	cbz	r0, 198f0 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   198e8:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   198ec:	f000 ffbe 	bl	1a86c <bt_keys_store>
	return list->head;
   198f0:	4b36      	ldr	r3, [pc, #216]	; (199cc <smp_pairing_complete+0xfc>)
   198f2:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   198f4:	b19b      	cbz	r3, 1991e <smp_pairing_complete+0x4e>
	return node->next;
   198f6:	681c      	ldr	r4, [r3, #0]
   198f8:	b104      	cbz	r4, 198fc <smp_pairing_complete+0x2c>
   198fa:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   198fc:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   19900:	b113      	cbz	r3, 19908 <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   19902:	4639      	mov	r1, r7
   19904:	4628      	mov	r0, r5
   19906:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   19908:	b14c      	cbz	r4, 1991e <smp_pairing_complete+0x4e>
   1990a:	4623      	mov	r3, r4
   1990c:	68e4      	ldr	r4, [r4, #12]
   1990e:	681b      	ldr	r3, [r3, #0]
   19910:	b11c      	cbz	r4, 1991a <smp_pairing_complete+0x4a>
   19912:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   19914:	2b00      	cmp	r3, #0
   19916:	d1f4      	bne.n	19902 <smp_pairing_complete+0x32>
   19918:	e7f7      	b.n	1990a <smp_pairing_complete+0x3a>
   1991a:	2b00      	cmp	r3, #0
   1991c:	d1f1      	bne.n	19902 <smp_pairing_complete+0x32>
	smp_reset(smp);
   1991e:	4630      	mov	r0, r6
   19920:	f013 ff27 	bl	2d772 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   19924:	7a6a      	ldrb	r2, [r5, #9]
   19926:	7aab      	ldrb	r3, [r5, #10]
   19928:	429a      	cmp	r2, r3
   1992a:	d04d      	beq.n	199c8 <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   1992c:	4628      	mov	r0, r5
}
   1992e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   19932:	f7ff bf07 	b.w	19744 <bt_smp_start_security>
	switch (smp_err) {
   19936:	3901      	subs	r1, #1
   19938:	b2c9      	uxtb	r1, r1
   1993a:	290e      	cmp	r1, #14
   1993c:	bf96      	itet	ls
   1993e:	4b24      	ldrls	r3, [pc, #144]	; (199d0 <smp_pairing_complete+0x100>)
	if (!status) {
   19940:	2709      	movhi	r7, #9
   19942:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   19944:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   19948:	b143      	cbz	r3, 1995c <smp_pairing_complete+0x8c>
   1994a:	7b1b      	ldrb	r3, [r3, #12]
   1994c:	bb33      	cbnz	r3, 1999c <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   1994e:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   19952:	f000 fe77 	bl	1a644 <bt_keys_clear>
			conn->le.keys = NULL;
   19956:	2300      	movs	r3, #0
   19958:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1995c:	2102      	movs	r1, #2
   1995e:	4620      	mov	r0, r4
   19960:	f013 fdf8 	bl	2d554 <atomic_test_bit>
   19964:	b948      	cbnz	r0, 1997a <smp_pairing_complete+0xaa>
	switch (err) {
   19966:	2f07      	cmp	r7, #7
   19968:	bf94      	ite	ls
   1996a:	4b1a      	ldrls	r3, [pc, #104]	; (199d4 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1996c:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   1996e:	463a      	mov	r2, r7
   19970:	4628      	mov	r0, r5
   19972:	bf98      	it	ls
   19974:	5dd9      	ldrbls	r1, [r3, r7]
   19976:	f7fb fce5 	bl	15344 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1997a:	2103      	movs	r1, #3
   1997c:	4620      	mov	r0, r4
   1997e:	f013 fde9 	bl	2d554 <atomic_test_bit>
   19982:	2800      	cmp	r0, #0
   19984:	d0cb      	beq.n	1991e <smp_pairing_complete+0x4e>
	return list->head;
   19986:	4b11      	ldr	r3, [pc, #68]	; (199cc <smp_pairing_complete+0xfc>)
   19988:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1998a:	2b00      	cmp	r3, #0
   1998c:	d0c7      	beq.n	1991e <smp_pairing_complete+0x4e>
	return node->next;
   1998e:	681c      	ldr	r4, [r3, #0]
   19990:	b104      	cbz	r4, 19994 <smp_pairing_complete+0xc4>
   19992:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   19994:	f853 3c08 	ldr.w	r3, [r3, #-8]
   19998:	b94b      	cbnz	r3, 199ae <smp_pairing_complete+0xde>
   1999a:	e00b      	b.n	199b4 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1999c:	2102      	movs	r1, #2
   1999e:	4620      	mov	r0, r4
   199a0:	f013 fdd8 	bl	2d554 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   199a4:	2800      	cmp	r0, #0
   199a6:	d1d2      	bne.n	1994e <smp_pairing_complete+0x7e>
   199a8:	e7d8      	b.n	1995c <smp_pairing_complete+0x8c>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   199aa:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   199ac:	b123      	cbz	r3, 199b8 <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   199ae:	4639      	mov	r1, r7
   199b0:	4628      	mov	r0, r5
   199b2:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   199b4:	2c00      	cmp	r4, #0
   199b6:	d0b2      	beq.n	1991e <smp_pairing_complete+0x4e>
   199b8:	4623      	mov	r3, r4
   199ba:	68e4      	ldr	r4, [r4, #12]
   199bc:	685b      	ldr	r3, [r3, #4]
   199be:	2c00      	cmp	r4, #0
   199c0:	d1f3      	bne.n	199aa <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   199c2:	2b00      	cmp	r3, #0
   199c4:	d1f3      	bne.n	199ae <smp_pairing_complete+0xde>
   199c6:	e7aa      	b.n	1991e <smp_pairing_complete+0x4e>
}
   199c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199ca:	bf00      	nop
   199cc:	200215f8 	.word	0x200215f8
   199d0:	000363e3 	.word	0x000363e3
   199d4:	000363d2 	.word	0x000363d2

000199d8 <smp_error>:
{
   199d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   199da:	1d03      	adds	r3, r0, #4
{
   199dc:	4606      	mov	r6, r0
   199de:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   199e0:	4618      	mov	r0, r3
   199e2:	2102      	movs	r1, #2
{
   199e4:	b089      	sub	sp, #36	; 0x24
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   199e6:	f013 fdb5 	bl	2d554 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   199ea:	4604      	mov	r4, r0
   199ec:	b120      	cbz	r0, 199f8 <smp_error+0x20>
   199ee:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   199f2:	fab4 f484 	clz	r4, r4
   199f6:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   199f8:	2103      	movs	r1, #3
   199fa:	4618      	mov	r0, r3
   199fc:	f013 fdaa 	bl	2d554 <atomic_test_bit>
   19a00:	b1b0      	cbz	r0, 19a30 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   19a02:	4639      	mov	r1, r7
   19a04:	4630      	mov	r0, r6
   19a06:	f7ff ff63 	bl	198d0 <smp_pairing_complete>
	if (remote_already_completed) {
   19a0a:	b1f4      	cbz	r4, 19a4a <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   19a0c:	4b1d      	ldr	r3, [pc, #116]	; (19a84 <smp_error+0xac>)
   19a0e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19a12:	9307      	str	r3, [sp, #28]
   19a14:	2302      	movs	r3, #2
   19a16:	481c      	ldr	r0, [pc, #112]	; (19a88 <smp_error+0xb0>)
   19a18:	aa06      	add	r2, sp, #24
   19a1a:	9306      	str	r3, [sp, #24]
   19a1c:	f013 fdf2 	bl	2d604 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   19a20:	2105      	movs	r1, #5
   19a22:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19a26:	f012 fde2 	bl	2c5ee <bt_conn_disconnect>
		return 0;
   19a2a:	2000      	movs	r0, #0
}
   19a2c:	b009      	add	sp, #36	; 0x24
   19a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19a30:	2101      	movs	r1, #1
   19a32:	4618      	mov	r0, r3
   19a34:	f013 fd8e 	bl	2d554 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19a38:	2800      	cmp	r0, #0
   19a3a:	d1e2      	bne.n	19a02 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19a3c:	210f      	movs	r1, #15
   19a3e:	4618      	mov	r0, r3
   19a40:	f013 fd88 	bl	2d554 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19a44:	2800      	cmp	r0, #0
   19a46:	d1dc      	bne.n	19a02 <smp_error+0x2a>
   19a48:	e7df      	b.n	19a0a <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   19a4a:	2105      	movs	r1, #5
   19a4c:	4630      	mov	r0, r6
   19a4e:	f013 fdf7 	bl	2d640 <smp_create_pdu.constprop.0>
	if (!buf) {
   19a52:	4605      	mov	r5, r0
   19a54:	b190      	cbz	r0, 19a7c <smp_error+0xa4>
   19a56:	2101      	movs	r1, #1
   19a58:	300c      	adds	r0, #12
   19a5a:	f001 feb7 	bl	1b7cc <net_buf_simple_add>
	rsp->reason = reason;
   19a5e:	7007      	strb	r7, [r0, #0]
   19a60:	9400      	str	r4, [sp, #0]
   19a62:	4623      	mov	r3, r4
   19a64:	462a      	mov	r2, r5
   19a66:	2106      	movs	r1, #6
   19a68:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19a6c:	f012 fec4 	bl	2c7f8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   19a70:	2800      	cmp	r0, #0
   19a72:	d0da      	beq.n	19a2a <smp_error+0x52>
		net_buf_unref(buf);
   19a74:	4628      	mov	r0, r5
   19a76:	f001 fd87 	bl	1b588 <net_buf_unref>
   19a7a:	e7d6      	b.n	19a2a <smp_error+0x52>
		return -ENOBUFS;
   19a7c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19a80:	e7d4      	b.n	19a2c <smp_error+0x54>
   19a82:	bf00      	nop
   19a84:	0003615b 	.word	0x0003615b
   19a88:	00031524 	.word	0x00031524

00019a8c <bt_smp_recv>:
{
   19a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a90:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   19a92:	8a0b      	ldrh	r3, [r1, #16]
{
   19a94:	4680      	mov	r8, r0
   19a96:	460d      	mov	r5, r1
   19a98:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   19a9a:	b97b      	cbnz	r3, 19abc <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   19a9c:	4b44      	ldr	r3, [pc, #272]	; (19bb0 <bt_smp_recv+0x124>)
   19a9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19aa2:	617b      	str	r3, [r7, #20]
   19aa4:	2302      	movs	r3, #2
   19aa6:	4843      	ldr	r0, [pc, #268]	; (19bb4 <bt_smp_recv+0x128>)
   19aa8:	613b      	str	r3, [r7, #16]
   19aaa:	f107 0210 	add.w	r2, r7, #16
   19aae:	f013 fda9 	bl	2d604 <z_log_msg_static_create.constprop.0>
}
   19ab2:	2000      	movs	r0, #0
   19ab4:	3718      	adds	r7, #24
   19ab6:	46bd      	mov	sp, r7
   19ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19abc:	2101      	movs	r1, #1
   19abe:	f105 000c 	add.w	r0, r5, #12
   19ac2:	f001 fe65 	bl	1b790 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19ac6:	2104      	movs	r1, #4
   19ac8:	4606      	mov	r6, r0
   19aca:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   19ace:	f013 fd41 	bl	2d554 <atomic_test_bit>
   19ad2:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   19ad6:	7831      	ldrb	r1, [r6, #0]
   19ad8:	b178      	cbz	r0, 19afa <bt_smp_recv+0x6e>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   19ada:	466c      	mov	r4, sp
   19adc:	b088      	sub	sp, #32
   19ade:	466a      	mov	r2, sp
   19ae0:	4b35      	ldr	r3, [pc, #212]	; (19bb8 <bt_smp_recv+0x12c>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   19ae2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19ae6:	2303      	movs	r3, #3
   19ae8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19aec:	4831      	ldr	r0, [pc, #196]	; (19bb4 <bt_smp_recv+0x128>)
   19aee:	f842 3f10 	str.w	r3, [r2, #16]!
   19af2:	f013 fd87 	bl	2d604 <z_log_msg_static_create.constprop.0>
   19af6:	46a5      	mov	sp, r4
		return 0;
   19af8:	e7db      	b.n	19ab2 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   19afa:	290e      	cmp	r1, #14
   19afc:	d904      	bls.n	19b08 <bt_smp_recv+0x7c>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   19afe:	466c      	mov	r4, sp
   19b00:	b088      	sub	sp, #32
   19b02:	466a      	mov	r2, sp
   19b04:	4b2d      	ldr	r3, [pc, #180]	; (19bbc <bt_smp_recv+0x130>)
   19b06:	e7ec      	b.n	19ae2 <bt_smp_recv+0x56>
	if (!handlers[hdr->code].func) {
   19b08:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19bc0 <bt_smp_recv+0x134>
   19b0c:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   19b10:	b99b      	cbnz	r3, 19b3a <bt_smp_recv+0xae>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   19b12:	466d      	mov	r5, sp
   19b14:	b088      	sub	sp, #32
   19b16:	466a      	mov	r2, sp
   19b18:	4b2a      	ldr	r3, [pc, #168]	; (19bc4 <bt_smp_recv+0x138>)
   19b1a:	4826      	ldr	r0, [pc, #152]	; (19bb4 <bt_smp_recv+0x128>)
   19b1c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19b20:	2303      	movs	r3, #3
   19b22:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19b26:	f842 3f10 	str.w	r3, [r2, #16]!
   19b2a:	f013 fd6b 	bl	2d604 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   19b2e:	2107      	movs	r1, #7
   19b30:	46ad      	mov	sp, r5
		smp_error(smp, err);
   19b32:	4620      	mov	r0, r4
   19b34:	f7ff ff50 	bl	199d8 <smp_error>
   19b38:	e7bb      	b.n	19ab2 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   19b3a:	4620      	mov	r0, r4
   19b3c:	f013 fe07 	bl	2d74e <atomic_test_and_clear_bit>
   19b40:	7833      	ldrb	r3, [r6, #0]
   19b42:	b998      	cbnz	r0, 19b6c <bt_smp_recv+0xe0>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   19b44:	466d      	mov	r5, sp
   19b46:	b088      	sub	sp, #32
   19b48:	466a      	mov	r2, sp
   19b4a:	491f      	ldr	r1, [pc, #124]	; (19bc8 <bt_smp_recv+0x13c>)
   19b4c:	4819      	ldr	r0, [pc, #100]	; (19bb4 <bt_smp_recv+0x128>)
   19b4e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19b52:	2303      	movs	r3, #3
   19b54:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19b58:	f842 3f10 	str.w	r3, [r2, #16]!
   19b5c:	f013 fd52 	bl	2d604 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   19b60:	7833      	ldrb	r3, [r6, #0]
   19b62:	46ad      	mov	sp, r5
   19b64:	2b05      	cmp	r3, #5
   19b66:	d0a4      	beq.n	19ab2 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19b68:	2108      	movs	r1, #8
   19b6a:	e7e2      	b.n	19b32 <bt_smp_recv+0xa6>
	if (buf->len != handlers[hdr->code].expect_len) {
   19b6c:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   19b70:	8a29      	ldrh	r1, [r5, #16]
   19b72:	7912      	ldrb	r2, [r2, #4]
   19b74:	428a      	cmp	r2, r1
   19b76:	d011      	beq.n	19b9c <bt_smp_recv+0x110>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19b78:	466d      	mov	r5, sp
   19b7a:	b088      	sub	sp, #32
   19b7c:	466a      	mov	r2, sp
   19b7e:	61d3      	str	r3, [r2, #28]
   19b80:	2304      	movs	r3, #4
   19b82:	4812      	ldr	r0, [pc, #72]	; (19bcc <bt_smp_recv+0x140>)
   19b84:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19b88:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19b8c:	4809      	ldr	r0, [pc, #36]	; (19bb4 <bt_smp_recv+0x128>)
   19b8e:	f842 3f10 	str.w	r3, [r2, #16]!
   19b92:	f013 fd37 	bl	2d604 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   19b96:	210a      	movs	r1, #10
   19b98:	46ad      	mov	sp, r5
   19b9a:	e7ca      	b.n	19b32 <bt_smp_recv+0xa6>
	err = handlers[hdr->code].func(smp, buf);
   19b9c:	4629      	mov	r1, r5
   19b9e:	4620      	mov	r0, r4
   19ba0:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   19ba4:	4798      	blx	r3
	if (err) {
   19ba6:	4601      	mov	r1, r0
   19ba8:	2800      	cmp	r0, #0
   19baa:	d082      	beq.n	19ab2 <bt_smp_recv+0x26>
   19bac:	e7c1      	b.n	19b32 <bt_smp_recv+0xa6>
   19bae:	bf00      	nop
   19bb0:	000361b3 	.word	0x000361b3
   19bb4:	00031524 	.word	0x00031524
   19bb8:	000361ce 	.word	0x000361ce
   19bbc:	000361ff 	.word	0x000361ff
   19bc0:	0003219c 	.word	0x0003219c
   19bc4:	00036221 	.word	0x00036221
   19bc8:	0003623b 	.word	0x0003623b
   19bcc:	00035b07 	.word	0x00035b07

00019bd0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   19bd0:	4b0c      	ldr	r3, [pc, #48]	; (19c04 <bt_smp_pkey_ready+0x34>)
{
   19bd2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   19bd4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   19bd6:	b918      	cbnz	r0, 19be0 <bt_smp_pkey_ready+0x10>
}
   19bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19bdc:	f7fe bf10 	b.w	18a00 <bt_smp_pkey_ready.part.0>
	z_impl_k_sem_give(sem);
   19be0:	4809      	ldr	r0, [pc, #36]	; (19c08 <bt_smp_pkey_ready+0x38>)
   19be2:	f00b fcf1 	bl	255c8 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19be6:	4b09      	ldr	r3, [pc, #36]	; (19c0c <bt_smp_pkey_ready+0x3c>)
		err = smp_public_key_periph(smp);
   19be8:	1f1c      	subs	r4, r3, #4
   19bea:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   19bee:	065b      	lsls	r3, r3, #25
   19bf0:	d507      	bpl.n	19c02 <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   19bf2:	4620      	mov	r0, r4
   19bf4:	f7ff f870 	bl	18cd8 <smp_public_key_periph>
		if (err) {
   19bf8:	4601      	mov	r1, r0
   19bfa:	b110      	cbz	r0, 19c02 <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   19bfc:	4620      	mov	r0, r4
   19bfe:	f7ff feeb 	bl	199d8 <smp_error>
}
   19c02:	bd10      	pop	{r4, pc}
   19c04:	20021728 	.word	0x20021728
   19c08:	20008c34 	.word	0x20008c34
   19c0c:	20009f7c 	.word	0x20009f7c

00019c10 <smp_ident_addr_info>:
{
   19c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c14:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19c16:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   19c1a:	f8d1 800c 	ldr.w	r8, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19c1e:	f023 0302 	bic.w	r3, r3, #2
   19c22:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   19c26:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19c2a:	f898 3000 	ldrb.w	r3, [r8]
{
   19c2e:	4604      	mov	r4, r0
   19c30:	af00      	add	r7, sp, #0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19c32:	f106 0990 	add.w	r9, r6, #144	; 0x90
   19c36:	b3ab      	cbz	r3, 19ca4 <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   19c38:	f898 3006 	ldrb.w	r3, [r8, #6]
   19c3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19c40:	2bc0      	cmp	r3, #192	; 0xc0
   19c42:	d02f      	beq.n	19ca4 <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   19c44:	4640      	mov	r0, r8
   19c46:	f7f7 ff31 	bl	11aac <bt_addr_le_str>
   19c4a:	466e      	mov	r6, sp
   19c4c:	b088      	sub	sp, #32
   19c4e:	466c      	mov	r4, sp
   19c50:	f44f 7a00 	mov.w	sl, #512	; 0x200
   19c54:	4625      	mov	r5, r4
   19c56:	4b65      	ldr	r3, [pc, #404]	; (19dec <smp_ident_addr_info+0x1dc>)
   19c58:	f8df 8194 	ldr.w	r8, [pc, #404]	; 19df0 <smp_ident_addr_info+0x1e0>
   19c5c:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19c60:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19c64:	f845 8f10 	str.w	r8, [r5, #16]!
   19c68:	462a      	mov	r2, r5
   19c6a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19c6e:	4861      	ldr	r0, [pc, #388]	; (19df4 <smp_ident_addr_info+0x1e4>)
   19c70:	f013 fcc8 	bl	2d604 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19c74:	4648      	mov	r0, r9
   19c76:	46b5      	mov	sp, r6
   19c78:	f7f7 ff18 	bl	11aac <bt_addr_le_str>
   19c7c:	46a5      	mov	sp, r4
   19c7e:	4b5e      	ldr	r3, [pc, #376]	; (19df8 <smp_ident_addr_info+0x1e8>)
   19c80:	462a      	mov	r2, r5
   19c82:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19c86:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19c8a:	485a      	ldr	r0, [pc, #360]	; (19df4 <smp_ident_addr_info+0x1e4>)
   19c8c:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19c90:	f8c4 8010 	str.w	r8, [r4, #16]
   19c94:	f013 fcb6 	bl	2d604 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   19c98:	200a      	movs	r0, #10
   19c9a:	46b5      	mov	sp, r6
}
   19c9c:	3718      	adds	r7, #24
   19c9e:	46bd      	mov	sp, r7
   19ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   19ca4:	2207      	movs	r2, #7
   19ca6:	4641      	mov	r1, r8
   19ca8:	4648      	mov	r0, r9
   19caa:	f016 fc50 	bl	3054e <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   19cae:	b168      	cbz	r0, 19ccc <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   19cb0:	4641      	mov	r1, r8
   19cb2:	7a30      	ldrb	r0, [r6, #8]
   19cb4:	f000 fc66 	bl	1a584 <bt_keys_find_addr>
		if (keys) {
   19cb8:	4605      	mov	r5, r0
   19cba:	b138      	cbz	r0, 19ccc <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   19cbc:	4601      	mov	r1, r0
   19cbe:	4620      	mov	r0, r4
   19cc0:	f013 fc4e 	bl	2d560 <update_keys_check>
   19cc4:	b320      	cbz	r0, 19d10 <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   19cc6:	4628      	mov	r0, r5
   19cc8:	f000 fcbc 	bl	1a644 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19ccc:	210d      	movs	r1, #13
   19cce:	1d20      	adds	r0, r4, #4
   19cd0:	f013 fc40 	bl	2d554 <atomic_test_bit>
   19cd4:	2800      	cmp	r0, #0
   19cd6:	d078      	beq.n	19dca <smp_ident_addr_info+0x1ba>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   19cd8:	464a      	mov	r2, r9
   19cda:	2002      	movs	r0, #2
   19cdc:	7a31      	ldrb	r1, [r6, #8]
   19cde:	f000 fc8d 	bl	1a5fc <bt_keys_get_type>
		if (!keys) {
   19ce2:	4605      	mov	r5, r0
   19ce4:	b9b0      	cbnz	r0, 19d14 <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19ce6:	4648      	mov	r0, r9
   19ce8:	f7f7 fee0 	bl	11aac <bt_addr_le_str>
   19cec:	466c      	mov	r4, sp
   19cee:	b088      	sub	sp, #32
   19cf0:	466a      	mov	r2, sp
   19cf2:	4b42      	ldr	r3, [pc, #264]	; (19dfc <smp_ident_addr_info+0x1ec>)
   19cf4:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19cf8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
   19d00:	8393      	strh	r3, [r2, #28]
   19d02:	4b3b      	ldr	r3, [pc, #236]	; (19df0 <smp_ident_addr_info+0x1e0>)
   19d04:	483b      	ldr	r0, [pc, #236]	; (19df4 <smp_ident_addr_info+0x1e4>)
   19d06:	f842 3f10 	str.w	r3, [r2, #16]!
   19d0a:	f013 fc7b 	bl	2d604 <z_log_msg_static_create.constprop.0>
   19d0e:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   19d10:	2008      	movs	r0, #8
   19d12:	e7c3      	b.n	19c9c <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19d14:	78f3      	ldrb	r3, [r6, #3]
   19d16:	bb9b      	cbnz	r3, 19d80 <smp_ident_addr_info+0x170>
			dst = &conn->le.resp_addr;
   19d18:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19d1c:	781a      	ldrb	r2, [r3, #0]
   19d1e:	2a01      	cmp	r2, #1
   19d20:	d11e      	bne.n	19d60 <smp_ident_addr_info+0x150>
		if (bt_addr_le_is_rpa(dst)) {
   19d22:	799a      	ldrb	r2, [r3, #6]
   19d24:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19d28:	2a40      	cmp	r2, #64	; 0x40
   19d2a:	d119      	bne.n	19d60 <smp_ident_addr_info+0x150>
   19d2c:	f8d3 2001 	ldr.w	r2, [r3, #1]
   19d30:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   19d34:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   19d38:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19d3a:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   19d3e:	b17b      	cbz	r3, 19d60 <smp_ident_addr_info+0x150>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   19d40:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   19d44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19d48:	2bc0      	cmp	r3, #192	; 0xc0
   19d4a:	d009      	beq.n	19d60 <smp_ident_addr_info+0x150>
				bt_addr_le_copy(&keys->addr, &req->addr);
   19d4c:	4641      	mov	r1, r8
   19d4e:	1c68      	adds	r0, r5, #1
   19d50:	f013 fc32 	bl	2d5b8 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   19d54:	4648      	mov	r0, r9
   19d56:	f013 fc2f 	bl	2d5b8 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   19d5a:	4630      	mov	r0, r6
   19d5c:	f7fb faac 	bl	152b8 <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   19d60:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19d64:	079a      	lsls	r2, r3, #30
   19d66:	d50e      	bpl.n	19d86 <smp_ident_addr_info+0x176>
   19d68:	4925      	ldr	r1, [pc, #148]	; (19e00 <smp_ident_addr_info+0x1f0>)
   19d6a:	f640 6363 	movw	r3, #3683	; 0xe63
   19d6e:	4a25      	ldr	r2, [pc, #148]	; (19e04 <smp_ident_addr_info+0x1f4>)
   19d70:	4825      	ldr	r0, [pc, #148]	; (19e08 <smp_ident_addr_info+0x1f8>)
   19d72:	f010 fca2 	bl	2a6ba <assert_print>
   19d76:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19d7a:	4822      	ldr	r0, [pc, #136]	; (19e04 <smp_ident_addr_info+0x1f4>)
   19d7c:	f010 fc96 	bl	2a6ac <assert_post_action>
			dst = &conn->le.init_addr;
   19d80:	f106 0397 	add.w	r3, r6, #151	; 0x97
   19d84:	e7ca      	b.n	19d1c <smp_ident_addr_info+0x10c>
	conflict = bt_id_find_conflict(new_bond);
   19d86:	4628      	mov	r0, r5
   19d88:	f7f9 fdf8 	bl	1397c <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   19d8c:	b160      	cbz	r0, 19da8 <smp_ident_addr_info+0x198>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   19d8e:	4b1f      	ldr	r3, [pc, #124]	; (19e0c <smp_ident_addr_info+0x1fc>)
   19d90:	4818      	ldr	r0, [pc, #96]	; (19df4 <smp_ident_addr_info+0x1e4>)
   19d92:	617b      	str	r3, [r7, #20]
   19d94:	2302      	movs	r3, #2
   19d96:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19d9a:	613b      	str	r3, [r7, #16]
   19d9c:	f107 0210 	add.w	r2, r7, #16
   19da0:	f013 fc30 	bl	2d604 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19da4:	2003      	movs	r0, #3
   19da6:	e779      	b.n	19c9c <smp_ident_addr_info+0x8c>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19da8:	4628      	mov	r0, r5
   19daa:	f7f9 fde7 	bl	1397c <bt_id_find_conflict>
   19dae:	b148      	cbz	r0, 19dc4 <smp_ident_addr_info+0x1b4>
   19db0:	4917      	ldr	r1, [pc, #92]	; (19e10 <smp_ident_addr_info+0x200>)
   19db2:	f640 637f 	movw	r3, #3711	; 0xe7f
   19db6:	4a13      	ldr	r2, [pc, #76]	; (19e04 <smp_ident_addr_info+0x1f4>)
   19db8:	4813      	ldr	r0, [pc, #76]	; (19e08 <smp_ident_addr_info+0x1f8>)
   19dba:	f010 fc7e 	bl	2a6ba <assert_print>
   19dbe:	f640 617f 	movw	r1, #3711	; 0xe7f
   19dc2:	e7da      	b.n	19d7a <smp_ident_addr_info+0x16a>
	bt_id_add(new_bond);
   19dc4:	4628      	mov	r0, r5
   19dc6:	f7f9 fde9 	bl	1399c <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19dca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19dce:	075b      	lsls	r3, r3, #29
   19dd0:	d503      	bpl.n	19dda <smp_ident_addr_info+0x1ca>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19dd2:	210a      	movs	r1, #10
   19dd4:	4620      	mov	r0, r4
   19dd6:	f013 fc23 	bl	2d620 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19dda:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19dde:	b109      	cbz	r1, 19de4 <smp_ident_addr_info+0x1d4>
	return 0;
   19de0:	2000      	movs	r0, #0
   19de2:	e75b      	b.n	19c9c <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   19de4:	4620      	mov	r0, r4
   19de6:	f7ff fd73 	bl	198d0 <smp_pairing_complete>
   19dea:	e7f9      	b.n	19de0 <smp_ident_addr_info+0x1d0>
   19dec:	00036256 	.word	0x00036256
   19df0:	01000003 	.word	0x01000003
   19df4:	00031524 	.word	0x00031524
   19df8:	0003633d 	.word	0x0003633d
   19dfc:	00036032 	.word	0x00036032
   19e00:	00036299 	.word	0x00036299
   19e04:	0003626a 	.word	0x0003626a
   19e08:	00032659 	.word	0x00032659
   19e0c:	000362b4 	.word	0x000362b4
   19e10:	000362ef 	.word	0x000362ef

00019e14 <smp_central_ident>:
{
   19e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e18:	460b      	mov	r3, r1
   19e1a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19e1c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   19e20:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19e22:	210d      	movs	r1, #13
   19e24:	3004      	adds	r0, #4
   19e26:	f013 fb95 	bl	2d554 <atomic_test_bit>
   19e2a:	b358      	cbz	r0, 19e84 <smp_central_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19e2c:	f108 0690 	add.w	r6, r8, #144	; 0x90
   19e30:	4632      	mov	r2, r6
   19e32:	2004      	movs	r0, #4
   19e34:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   19e38:	68dd      	ldr	r5, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19e3a:	f000 fbdf 	bl	1a5fc <bt_keys_get_type>
		if (!keys) {
   19e3e:	b9c0      	cbnz	r0, 19e72 <smp_central_ident+0x5e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19e40:	4630      	mov	r0, r6
   19e42:	f7f7 fe33 	bl	11aac <bt_addr_le_str>
   19e46:	466c      	mov	r4, sp
   19e48:	b088      	sub	sp, #32
   19e4a:	466a      	mov	r2, sp
   19e4c:	4b1a      	ldr	r3, [pc, #104]	; (19eb8 <smp_central_ident+0xa4>)
   19e4e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19e52:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19e56:	f44f 7300 	mov.w	r3, #512	; 0x200
   19e5a:	8393      	strh	r3, [r2, #28]
   19e5c:	4b17      	ldr	r3, [pc, #92]	; (19ebc <smp_central_ident+0xa8>)
   19e5e:	4818      	ldr	r0, [pc, #96]	; (19ec0 <smp_central_ident+0xac>)
   19e60:	f842 3f10 	str.w	r3, [r2, #16]!
   19e64:	f013 fbce 	bl	2d604 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   19e68:	2008      	movs	r0, #8
   19e6a:	46a5      	mov	sp, r4
}
   19e6c:	46bd      	mov	sp, r7
   19e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e72:	462a      	mov	r2, r5
   19e74:	f832 3b02 	ldrh.w	r3, [r2], #2
   19e78:	8303      	strh	r3, [r0, #24]
   19e7a:	f8d5 3002 	ldr.w	r3, [r5, #2]
   19e7e:	6103      	str	r3, [r0, #16]
   19e80:	6853      	ldr	r3, [r2, #4]
   19e82:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   19e84:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19e88:	f023 0201 	bic.w	r2, r3, #1
   19e8c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19e90:	079a      	lsls	r2, r3, #30
   19e92:	d508      	bpl.n	19ea6 <smp_central_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   19e94:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19e96:	4620      	mov	r0, r4
   19e98:	f013 fbc2 	bl	2d620 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19e9c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19ea0:	b129      	cbz	r1, 19eae <smp_central_ident+0x9a>
	return 0;
   19ea2:	2000      	movs	r0, #0
   19ea4:	e7e2      	b.n	19e6c <smp_central_ident+0x58>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19ea6:	075b      	lsls	r3, r3, #29
   19ea8:	d5f8      	bpl.n	19e9c <smp_central_ident+0x88>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19eaa:	210a      	movs	r1, #10
   19eac:	e7f3      	b.n	19e96 <smp_central_ident+0x82>
		smp_pairing_complete(smp, 0);
   19eae:	4620      	mov	r0, r4
   19eb0:	f7ff fd0e 	bl	198d0 <smp_pairing_complete>
   19eb4:	e7f5      	b.n	19ea2 <smp_central_ident+0x8e>
   19eb6:	bf00      	nop
   19eb8:	00036032 	.word	0x00036032
   19ebc:	01000003 	.word	0x01000003
   19ec0:	00031524 	.word	0x00031524

00019ec4 <smp_pairing_failed>:
{
   19ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ec8:	460e      	mov	r6, r1
   19eca:	af00      	add	r7, sp, #0
   19ecc:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19ece:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19ed2:	f7fe fd3b 	bl	1894c <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   19ed6:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19ed8:	46e9      	mov	r9, sp
   19eda:	b088      	sub	sp, #32
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19edc:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19ede:	466a      	mov	r2, sp
   19ee0:	7833      	ldrb	r3, [r6, #0]
   19ee2:	4914      	ldr	r1, [pc, #80]	; (19f34 <smp_pairing_failed+0x70>)
   19ee4:	4814      	ldr	r0, [pc, #80]	; (19f38 <smp_pairing_failed+0x74>)
   19ee6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19eea:	2303      	movs	r3, #3
   19eec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19ef0:	f842 3f10 	str.w	r3, [r2, #16]!
   19ef4:	f013 fb86 	bl	2d604 <z_log_msg_static_create.constprop.0>
   19ef8:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19efa:	f104 0904 	add.w	r9, r4, #4
   19efe:	210a      	movs	r1, #10
   19f00:	4648      	mov	r0, r9
   19f02:	f013 fc24 	bl	2d74e <atomic_test_and_clear_bit>
   19f06:	b140      	cbz	r0, 19f1a <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19f08:	b975      	cbnz	r5, 19f28 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   19f0a:	4620      	mov	r0, r4
   19f0c:	7831      	ldrb	r1, [r6, #0]
   19f0e:	f7ff fcdf 	bl	198d0 <smp_pairing_complete>
}
   19f12:	2000      	movs	r0, #0
   19f14:	46bd      	mov	sp, r7
   19f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   19f1a:	210b      	movs	r1, #11
   19f1c:	4648      	mov	r0, r9
   19f1e:	f013 fc16 	bl	2d74e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19f22:	2800      	cmp	r0, #0
   19f24:	d1f0      	bne.n	19f08 <smp_pairing_failed+0x44>
   19f26:	e7f0      	b.n	19f0a <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19f28:	692b      	ldr	r3, [r5, #16]
   19f2a:	2b00      	cmp	r3, #0
   19f2c:	d0ed      	beq.n	19f0a <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   19f2e:	4640      	mov	r0, r8
   19f30:	4798      	blx	r3
   19f32:	e7ea      	b.n	19f0a <smp_pairing_failed+0x46>
   19f34:	0003630e 	.word	0x0003630e
   19f38:	00031524 	.word	0x00031524

00019f3c <bt_smp_encrypt_change>:
{
   19f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f40:	b08f      	sub	sp, #60	; 0x3c
	struct bt_conn *conn = chan->conn;
   19f42:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19f44:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   19f48:	4604      	mov	r4, r0
   19f4a:	4688      	mov	r8, r1
   19f4c:	af00      	add	r7, sp, #0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19f4e:	2101      	movs	r1, #1
   19f50:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   19f52:	f855 99ec 	ldr.w	r9, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19f56:	f013 fbfa 	bl	2d74e <atomic_test_and_clear_bit>
   19f5a:	b338      	cbz	r0, 19fac <bt_smp_encrypt_change+0x70>
	if (hci_status) {
   19f5c:	f1b8 0f00 	cmp.w	r8, #0
   19f60:	d019      	beq.n	19f96 <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19f62:	2103      	movs	r1, #3
   19f64:	4630      	mov	r0, r6
   19f66:	f013 faf5 	bl	2d554 <atomic_test_bit>
   19f6a:	b1f8      	cbz	r0, 19fac <bt_smp_encrypt_change+0x70>
			uint8_t smp_err = smp_err_get(
   19f6c:	4640      	mov	r0, r8
   19f6e:	f7f8 fee5 	bl	12d3c <bt_security_err_get>
	switch (auth_err) {
   19f72:	3801      	subs	r0, #1
   19f74:	b2c0      	uxtb	r0, r0
   19f76:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   19f78:	bf8c      	ite	hi
   19f7a:	2400      	movhi	r4, #0
   19f7c:	4b75      	ldrls	r3, [pc, #468]	; (1a154 <bt_smp_encrypt_change+0x218>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19f7e:	f04f 0102 	mov.w	r1, #2
   19f82:	bf98      	it	ls
   19f84:	5c1c      	ldrbls	r4, [r3, r0]
   19f86:	4630      	mov	r0, r6
   19f88:	f013 fb4a 	bl	2d620 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   19f8c:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   19f8e:	4628      	mov	r0, r5
   19f90:	f7ff fc9e 	bl	198d0 <smp_pairing_complete>
   19f94:	e00a      	b.n	19fac <bt_smp_encrypt_change+0x70>
	if (!conn->encrypt) {
   19f96:	f899 300b 	ldrb.w	r3, [r9, #11]
   19f9a:	b13b      	cbz	r3, 19fac <bt_smp_encrypt_change+0x70>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19f9c:	2103      	movs	r1, #3
   19f9e:	4630      	mov	r0, r6
   19fa0:	f013 fad8 	bl	2d554 <atomic_test_bit>
   19fa4:	b930      	cbnz	r0, 19fb4 <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   19fa6:	4628      	mov	r0, r5
   19fa8:	f013 fbe3 	bl	2d772 <smp_reset>
}
   19fac:	373c      	adds	r7, #60	; 0x3c
   19fae:	46bd      	mov	sp, r7
   19fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19fb4:	2105      	movs	r1, #5
   19fb6:	4630      	mov	r0, r6
   19fb8:	f013 facc 	bl	2d554 <atomic_test_bit>
   19fbc:	b1b8      	cbz	r0, 19fee <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   19fbe:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19fc2:	071a      	lsls	r2, r3, #28
   19fc4:	d507      	bpl.n	19fd6 <bt_smp_encrypt_change+0x9a>
   19fc6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19fca:	071b      	lsls	r3, r3, #28
   19fcc:	d503      	bpl.n	19fd6 <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   19fce:	2111      	movs	r1, #17
   19fd0:	4630      	mov	r0, r6
   19fd2:	f013 fb25 	bl	2d620 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   19fd6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19fda:	f023 0308 	bic.w	r3, r3, #8
   19fde:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   19fe2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19fe6:	f023 0308 	bic.w	r3, r3, #8
   19fea:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   19fee:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19ff2:	07d8      	lsls	r0, r3, #31
   19ff4:	d522      	bpl.n	1a03c <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   19ff6:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19ff8:	4628      	mov	r0, r5
   19ffa:	f013 fb11 	bl	2d620 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19ffe:	2102      	movs	r1, #2
   1a000:	4630      	mov	r0, r6
   1a002:	f013 fb0d 	bl	2d620 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1a006:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1a008:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1a00c:	b9f2      	cbnz	r2, 1a04c <bt_smp_encrypt_change+0x110>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1a00e:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1a012:	f7f7 fd4b 	bl	11aac <bt_addr_le_str>
   1a016:	466c      	mov	r4, sp
   1a018:	b088      	sub	sp, #32
   1a01a:	466a      	mov	r2, sp
   1a01c:	4b4e      	ldr	r3, [pc, #312]	; (1a158 <bt_smp_encrypt_change+0x21c>)
   1a01e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a022:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a026:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a02a:	8393      	strh	r3, [r2, #28]
   1a02c:	4b4b      	ldr	r3, [pc, #300]	; (1a15c <bt_smp_encrypt_change+0x220>)
   1a02e:	484c      	ldr	r0, [pc, #304]	; (1a160 <bt_smp_encrypt_change+0x224>)
   1a030:	f842 3f10 	str.w	r3, [r2, #16]!
   1a034:	f013 fae6 	bl	2d604 <z_log_msg_static_create.constprop.0>
   1a038:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1a03a:	e7b7      	b.n	19fac <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1a03c:	0799      	lsls	r1, r3, #30
   1a03e:	d501      	bpl.n	1a044 <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1a040:	2108      	movs	r1, #8
   1a042:	e7d9      	b.n	19ff8 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1a044:	075a      	lsls	r2, r3, #29
   1a046:	d5da      	bpl.n	19ffe <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a048:	210a      	movs	r1, #10
   1a04a:	e7d5      	b.n	19ff8 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a04c:	2105      	movs	r1, #5
   1a04e:	f013 fa81 	bl	2d554 <atomic_test_bit>
   1a052:	b9c0      	cbnz	r0, 1a086 <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1a054:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1a058:	07db      	lsls	r3, r3, #31
   1a05a:	d514      	bpl.n	1a086 <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   1a05c:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a05e:	211a      	movs	r1, #26
   1a060:	f107 001c 	add.w	r0, r7, #28
	struct bt_keys *keys = conn->le.keys;
   1a064:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a068:	f7fa fa6c 	bl	14544 <bt_rand>
   1a06c:	4682      	mov	sl, r0
   1a06e:	b178      	cbz	r0, 1a090 <bt_smp_encrypt_change+0x154>
			LOG_ERR("Unable to get random bytes");
   1a070:	4b3c      	ldr	r3, [pc, #240]	; (1a164 <bt_smp_encrypt_change+0x228>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1a072:	617b      	str	r3, [r7, #20]
   1a074:	2302      	movs	r3, #2
   1a076:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a07a:	4839      	ldr	r0, [pc, #228]	; (1a160 <bt_smp_encrypt_change+0x224>)
   1a07c:	613b      	str	r3, [r7, #16]
   1a07e:	f107 0210 	add.w	r2, r7, #16
   1a082:	f013 fabf 	bl	2d604 <z_log_msg_static_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1a086:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1a08a:	2900      	cmp	r1, #0
   1a08c:	d18e      	bne.n	19fac <bt_smp_encrypt_change+0x70>
   1a08e:	e77e      	b.n	19f8e <bt_smp_encrypt_change+0x52>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1a090:	2106      	movs	r1, #6
   1a092:	4628      	mov	r0, r5
   1a094:	f013 fad4 	bl	2d640 <smp_create_pdu.constprop.0>
		if (!buf) {
   1a098:	4681      	mov	r9, r0
   1a09a:	b908      	cbnz	r0, 1a0a0 <bt_smp_encrypt_change+0x164>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1a09c:	4b32      	ldr	r3, [pc, #200]	; (1a168 <bt_smp_encrypt_change+0x22c>)
   1a09e:	e7e8      	b.n	1a072 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   1a0a0:	2110      	movs	r1, #16
   1a0a2:	300c      	adds	r0, #12
   1a0a4:	f001 fb92 	bl	1b7cc <net_buf_simple_add>
   1a0a8:	f898 200c 	ldrb.w	r2, [r8, #12]
   1a0ac:	f107 011c 	add.w	r1, r7, #28
   1a0b0:	4683      	mov	fp, r0
   1a0b2:	f016 fa5c 	bl	3056e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1a0b6:	f898 000c 	ldrb.w	r0, [r8, #12]
   1a0ba:	280f      	cmp	r0, #15
   1a0bc:	d805      	bhi.n	1a0ca <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   1a0be:	f1c0 0210 	rsb	r2, r0, #16
   1a0c2:	4651      	mov	r1, sl
   1a0c4:	4458      	add	r0, fp
   1a0c6:	f016 fa8c 	bl	305e2 <memset>
		smp_send(smp, buf, NULL, NULL);
   1a0ca:	4649      	mov	r1, r9
   1a0cc:	2200      	movs	r2, #0
   1a0ce:	4628      	mov	r0, r5
   1a0d0:	f013 fa7b 	bl	2d5ca <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1a0d4:	2107      	movs	r1, #7
   1a0d6:	4628      	mov	r0, r5
   1a0d8:	f013 fab2 	bl	2d640 <smp_create_pdu.constprop.0>
		if (!buf) {
   1a0dc:	4681      	mov	r9, r0
   1a0de:	b908      	cbnz	r0, 1a0e4 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1a0e0:	4b22      	ldr	r3, [pc, #136]	; (1a16c <bt_smp_encrypt_change+0x230>)
   1a0e2:	e7c6      	b.n	1a072 <bt_smp_encrypt_change+0x136>
   1a0e4:	210a      	movs	r1, #10
   1a0e6:	300c      	adds	r0, #12
   1a0e8:	f001 fb70 	bl	1b7cc <net_buf_simple_add>
   1a0ec:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a0ee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1a0f2:	ca03      	ldmia	r2!, {r0, r1}
   1a0f4:	f8c3 0002 	str.w	r0, [r3, #2]
   1a0f8:	f8c3 1006 	str.w	r1, [r3, #6]
   1a0fc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
		smp_send(smp, buf, smp_ident_sent, NULL);
   1a0fe:	4649      	mov	r1, r9
   1a100:	4628      	mov	r0, r5
   1a102:	801a      	strh	r2, [r3, #0]
   1a104:	4a1a      	ldr	r2, [pc, #104]	; (1a170 <bt_smp_encrypt_change+0x234>)
   1a106:	f013 fa60 	bl	2d5ca <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a10a:	4630      	mov	r0, r6
   1a10c:	210d      	movs	r1, #13
   1a10e:	f013 fa21 	bl	2d554 <atomic_test_bit>
   1a112:	f107 062c 	add.w	r6, r7, #44	; 0x2c
   1a116:	2800      	cmp	r0, #0
   1a118:	d0b5      	beq.n	1a086 <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1a11a:	2101      	movs	r1, #1
   1a11c:	4640      	mov	r0, r8
   1a11e:	f000 fa55 	bl	1a5cc <bt_keys_add_type>
   1a122:	f107 031c 	add.w	r3, r7, #28
   1a126:	f108 0c4a 	add.w	ip, r8, #74	; 0x4a
   1a12a:	461a      	mov	r2, r3
   1a12c:	ca03      	ldmia	r2!, {r0, r1}
   1a12e:	42b2      	cmp	r2, r6
   1a130:	f8cc 0000 	str.w	r0, [ip]
   1a134:	f8cc 1004 	str.w	r1, [ip, #4]
   1a138:	4613      	mov	r3, r2
   1a13a:	f10c 0c08 	add.w	ip, ip, #8
   1a13e:	d1f4      	bne.n	1a12a <bt_smp_encrypt_change+0x1ee>
   1a140:	4633      	mov	r3, r6
   1a142:	cb03      	ldmia	r3!, {r0, r1}
   1a144:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   1a146:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   1a14a:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   1a14e:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   1a152:	e798      	b.n	1a086 <bt_smp_encrypt_change+0x14a>
   1a154:	000363da 	.word	0x000363da
   1a158:	00036330 	.word	0x00036330
   1a15c:	01000003 	.word	0x01000003
   1a160:	00031524 	.word	0x00031524
   1a164:	00036345 	.word	0x00036345
   1a168:	00036360 	.word	0x00036360
   1a16c:	00036387 	.word	0x00036387
   1a170:	0001a1b1 	.word	0x0001a1b1

0001a174 <smp_timeout>:
{
   1a174:	b510      	push	{r4, lr}
   1a176:	4604      	mov	r4, r0
   1a178:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   1a17a:	4b0b      	ldr	r3, [pc, #44]	; (1a1a8 <smp_timeout+0x34>)
   1a17c:	aa04      	add	r2, sp, #16
   1a17e:	9305      	str	r3, [sp, #20]
   1a180:	2302      	movs	r3, #2
   1a182:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a186:	4809      	ldr	r0, [pc, #36]	; (1a1ac <smp_timeout+0x38>)
   1a188:	9304      	str	r3, [sp, #16]
   1a18a:	f013 fa3b 	bl	2d604 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1a18e:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1a192:	2108      	movs	r1, #8
   1a194:	f7ff fb9c 	bl	198d0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a198:	2104      	movs	r1, #4
   1a19a:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   1a19e:	b006      	add	sp, #24
   1a1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a1a4:	f013 ba3c 	b.w	2d620 <atomic_set_bit>
   1a1a8:	000363af 	.word	0x000363af
   1a1ac:	00031524 	.word	0x00031524

0001a1b0 <smp_ident_sent>:
{
   1a1b0:	b508      	push	{r3, lr}
	if (!err) {
   1a1b2:	bb1a      	cbnz	r2, 1a1fc <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a1b4:	7883      	ldrb	r3, [r0, #2]
   1a1b6:	2b01      	cmp	r3, #1
   1a1b8:	d120      	bne.n	1a1fc <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1a1ba:	2106      	movs	r1, #6
   1a1bc:	f012 fb35 	bl	2c82a <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1a1c0:	b970      	cbnz	r0, 1a1e0 <smp_ident_sent+0x30>
   1a1c2:	490f      	ldr	r1, [pc, #60]	; (1a200 <smp_ident_sent+0x50>)
   1a1c4:	f240 2365 	movw	r3, #613	; 0x265
   1a1c8:	4a0e      	ldr	r2, [pc, #56]	; (1a204 <smp_ident_sent+0x54>)
   1a1ca:	480f      	ldr	r0, [pc, #60]	; (1a208 <smp_ident_sent+0x58>)
   1a1cc:	f010 fa75 	bl	2a6ba <assert_print>
   1a1d0:	480e      	ldr	r0, [pc, #56]	; (1a20c <smp_ident_sent+0x5c>)
   1a1d2:	f010 fa72 	bl	2a6ba <assert_print>
   1a1d6:	f240 2165 	movw	r1, #613	; 0x265
   1a1da:	480a      	ldr	r0, [pc, #40]	; (1a204 <smp_ident_sent+0x54>)
   1a1dc:	f010 fa66 	bl	2a6ac <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1a1e0:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1a1e4:	f023 0301 	bic.w	r3, r3, #1
   1a1e8:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1a1ec:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1a1f0:	b921      	cbnz	r1, 1a1fc <smp_ident_sent+0x4c>
}
   1a1f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1a1f6:	38ec      	subs	r0, #236	; 0xec
   1a1f8:	f7ff bb6a 	b.w	198d0 <smp_pairing_complete>
}
   1a1fc:	bd08      	pop	{r3, pc}
   1a1fe:	bf00      	nop
   1a200:	0003597a 	.word	0x0003597a
   1a204:	0003626a 	.word	0x0003626a
   1a208:	00032659 	.word	0x00032659
   1a20c:	000363bb 	.word	0x000363bb

0001a210 <bt_smp_update_keys>:
{
   1a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a214:	af00      	add	r7, sp, #0
   1a216:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1a218:	f013 f9f7 	bl	2d60a <smp_chan_get>
	if (!smp) {
   1a21c:	4605      	mov	r5, r0
   1a21e:	b360      	cbz	r0, 1a27a <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a220:	1d06      	adds	r6, r0, #4
   1a222:	2103      	movs	r1, #3
   1a224:	4630      	mov	r0, r6
   1a226:	f013 f995 	bl	2d554 <atomic_test_bit>
   1a22a:	b330      	cbz	r0, 1a27a <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   1a22c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1a230:	b108      	cbz	r0, 1a236 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1a232:	f000 fa07 	bl	1a644 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a236:	f104 0890 	add.w	r8, r4, #144	; 0x90
   1a23a:	4641      	mov	r1, r8
   1a23c:	7a20      	ldrb	r0, [r4, #8]
   1a23e:	f000 f8db 	bl	1a3f8 <bt_keys_get_addr>
   1a242:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   1a246:	b9d8      	cbnz	r0, 1a280 <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1a248:	4640      	mov	r0, r8
   1a24a:	f7f7 fc2f 	bl	11aac <bt_addr_le_str>
   1a24e:	466c      	mov	r4, sp
   1a250:	b088      	sub	sp, #32
   1a252:	466a      	mov	r2, sp
   1a254:	4b3a      	ldr	r3, [pc, #232]	; (1a340 <bt_smp_update_keys+0x130>)
   1a256:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a25a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a25e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a262:	8393      	strh	r3, [r2, #28]
   1a264:	4b37      	ldr	r3, [pc, #220]	; (1a344 <bt_smp_update_keys+0x134>)
   1a266:	4838      	ldr	r0, [pc, #224]	; (1a348 <bt_smp_update_keys+0x138>)
   1a268:	f842 3f10 	str.w	r3, [r2, #16]!
   1a26c:	f013 f9ca 	bl	2d604 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a270:	2108      	movs	r1, #8
   1a272:	46a5      	mov	sp, r4
   1a274:	4628      	mov	r0, r5
   1a276:	f7ff fbaf 	bl	199d8 <smp_error>
}
   1a27a:	46bd      	mov	sp, r7
   1a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1a280:	210e      	movs	r1, #14
   1a282:	4630      	mov	r0, r6
   1a284:	f013 f966 	bl	2d554 <atomic_test_bit>
   1a288:	b128      	cbz	r0, 1a296 <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1a28a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a28e:	7b53      	ldrb	r3, [r2, #13]
   1a290:	f043 0302 	orr.w	r3, r3, #2
   1a294:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1a296:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a298:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   1a29c:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a29e:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1a2a0:	d83a      	bhi.n	1a318 <bt_smp_update_keys+0x108>
   1a2a2:	2a00      	cmp	r2, #0
   1a2a4:	d03f      	beq.n	1a326 <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1a2a6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a2aa:	7b53      	ldrb	r3, [r2, #13]
   1a2ac:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a2b0:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1a2b2:	7d2b      	ldrb	r3, [r5, #20]
   1a2b4:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a2b6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   1a2ba:	428b      	cmp	r3, r1
   1a2bc:	bf28      	it	cs
   1a2be:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a2c0:	4630      	mov	r0, r6
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a2c2:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a2c4:	2105      	movs	r1, #5
   1a2c6:	f013 f945 	bl	2d554 <atomic_test_bit>
   1a2ca:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   1a2ce:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a2d0:	b390      	cbz	r0, 1a338 <bt_smp_update_keys+0x128>
		conn->le.keys->flags |= BT_KEYS_SC;
   1a2d2:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a2d6:	210d      	movs	r1, #13
   1a2d8:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   1a2da:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a2dc:	f013 f93a 	bl	2d554 <atomic_test_bit>
   1a2e0:	2800      	cmp	r0, #0
   1a2e2:	d0ca      	beq.n	1a27a <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1a2e4:	2120      	movs	r1, #32
   1a2e6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1a2ea:	f000 f96f 	bl	1a5cc <bt_keys_add_type>
   1a2ee:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1a2f2:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1a2f6:	331a      	adds	r3, #26
   1a2f8:	3557      	adds	r5, #87	; 0x57
   1a2fa:	f852 1b04 	ldr.w	r1, [r2], #4
   1a2fe:	42aa      	cmp	r2, r5
   1a300:	f843 1b04 	str.w	r1, [r3], #4
   1a304:	d1f9      	bne.n	1a2fa <bt_smp_update_keys+0xea>
__ssp_bos_icheck3(memset, void *, int)
   1a306:	2300      	movs	r3, #0
   1a308:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a30c:	6113      	str	r3, [r2, #16]
   1a30e:	6153      	str	r3, [r2, #20]
   1a310:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a314:	8313      	strh	r3, [r2, #24]
   1a316:	e7b0      	b.n	1a27a <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   1a318:	3a05      	subs	r2, #5
   1a31a:	2a01      	cmp	r2, #1
   1a31c:	d803      	bhi.n	1a326 <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a31e:	f043 0320 	orr.w	r3, r3, #32
   1a322:	734b      	strb	r3, [r1, #13]
   1a324:	e7bf      	b.n	1a2a6 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1a326:	f023 0320 	bic.w	r3, r3, #32
   1a32a:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a32c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a330:	7b53      	ldrb	r3, [r2, #13]
   1a332:	f023 0301 	bic.w	r3, r3, #1
   1a336:	e7bb      	b.n	1a2b0 <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1a338:	f022 0210 	bic.w	r2, r2, #16
   1a33c:	735a      	strb	r2, [r3, #13]
   1a33e:	e79c      	b.n	1a27a <bt_smp_update_keys+0x6a>
   1a340:	00036032 	.word	0x00036032
   1a344:	01000003 	.word	0x01000003
   1a348:	00031524 	.word	0x00031524

0001a34c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1a34c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a34e:	4b07      	ldr	r3, [pc, #28]	; (1a36c <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1a350:	4807      	ldr	r0, [pc, #28]	; (1a370 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a352:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1a356:	f003 0306 	and.w	r3, r3, #6
   1a35a:	1f9a      	subs	r2, r3, #6
   1a35c:	4253      	negs	r3, r2
   1a35e:	4153      	adcs	r3, r2
   1a360:	4a04      	ldr	r2, [pc, #16]	; (1a374 <bt_smp_init+0x28>)
   1a362:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1a364:	f7fa f918 	bl	14598 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1a368:	2000      	movs	r0, #0
   1a36a:	bd08      	pop	{r3, pc}
   1a36c:	20008000 	.word	0x20008000
   1a370:	20008554 	.word	0x20008554
   1a374:	200223f8 	.word	0x200223f8

0001a378 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1a378:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a37a:	b958      	cbnz	r0, 1a394 <id_add+0x1c>
   1a37c:	4907      	ldr	r1, [pc, #28]	; (1a39c <id_add+0x24>)
   1a37e:	4808      	ldr	r0, [pc, #32]	; (1a3a0 <id_add+0x28>)
   1a380:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1a384:	4a07      	ldr	r2, [pc, #28]	; (1a3a4 <id_add+0x2c>)
   1a386:	f010 f998 	bl	2a6ba <assert_print>
   1a38a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1a38e:	4805      	ldr	r0, [pc, #20]	; (1a3a4 <id_add+0x2c>)
   1a390:	f010 f98c 	bl	2a6ac <assert_post_action>

	bt_id_add(keys);
}
   1a394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1a398:	f7f9 bb00 	b.w	1399c <bt_id_add>
   1a39c:	0003645b 	.word	0x0003645b
   1a3a0:	00032659 	.word	0x00032659
   1a3a4:	0003642b 	.word	0x0003642b

0001a3a8 <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a3a8:	b570      	push	{r4, r5, r6, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a3aa:	4c10      	ldr	r4, [pc, #64]	; (1a3ec <bt_keys_get_addr.part.0+0x44>)
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a3ac:	4606      	mov	r6, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a3ae:	f814 3b01 	ldrb.w	r3, [r4], #1
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a3b2:	460d      	mov	r5, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a3b4:	4283      	cmp	r3, r0
   1a3b6:	d007      	beq.n	1a3c8 <bt_keys_get_addr.part.0+0x20>
	return memcmp(a, b, sizeof(*a));
   1a3b8:	2207      	movs	r2, #7
   1a3ba:	490d      	ldr	r1, [pc, #52]	; (1a3f0 <bt_keys_get_addr.part.0+0x48>)
   1a3bc:	480d      	ldr	r0, [pc, #52]	; (1a3f4 <bt_keys_get_addr.part.0+0x4c>)
   1a3be:	f016 f8c6 	bl	3054e <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1a3c2:	b148      	cbz	r0, 1a3d8 <bt_keys_get_addr.part.0+0x30>
	return NULL;
   1a3c4:	2000      	movs	r0, #0
}
   1a3c6:	bd70      	pop	{r4, r5, r6, pc}
   1a3c8:	2207      	movs	r2, #7
   1a3ca:	4620      	mov	r0, r4
   1a3cc:	f016 f8bf 	bl	3054e <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a3d0:	2800      	cmp	r0, #0
   1a3d2:	d1f1      	bne.n	1a3b8 <bt_keys_get_addr.part.0+0x10>
		keys = &key_pool[i];
   1a3d4:	4805      	ldr	r0, [pc, #20]	; (1a3ec <bt_keys_get_addr.part.0+0x44>)
   1a3d6:	e7f6      	b.n	1a3c6 <bt_keys_get_addr.part.0+0x1e>
		keys->id = id;
   1a3d8:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1a3dc:	682b      	ldr	r3, [r5, #0]
   1a3de:	6023      	str	r3, [r4, #0]
   1a3e0:	88ab      	ldrh	r3, [r5, #4]
   1a3e2:	80a3      	strh	r3, [r4, #4]
   1a3e4:	79ab      	ldrb	r3, [r5, #6]
   1a3e6:	71a3      	strb	r3, [r4, #6]
		return keys;
   1a3e8:	e7f4      	b.n	1a3d4 <bt_keys_get_addr.part.0+0x2c>
   1a3ea:	bf00      	nop
   1a3ec:	2002172c 	.word	0x2002172c
   1a3f0:	000345c9 	.word	0x000345c9
   1a3f4:	2002172d 	.word	0x2002172d

0001a3f8 <bt_keys_get_addr>:
{
   1a3f8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a3fa:	b949      	cbnz	r1, 1a410 <bt_keys_get_addr+0x18>
   1a3fc:	4906      	ldr	r1, [pc, #24]	; (1a418 <bt_keys_get_addr+0x20>)
   1a3fe:	4807      	ldr	r0, [pc, #28]	; (1a41c <bt_keys_get_addr+0x24>)
   1a400:	2359      	movs	r3, #89	; 0x59
   1a402:	4a07      	ldr	r2, [pc, #28]	; (1a420 <bt_keys_get_addr+0x28>)
   1a404:	f010 f959 	bl	2a6ba <assert_print>
   1a408:	2159      	movs	r1, #89	; 0x59
   1a40a:	4805      	ldr	r0, [pc, #20]	; (1a420 <bt_keys_get_addr+0x28>)
   1a40c:	f010 f94e 	bl	2a6ac <assert_post_action>
}
   1a410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a414:	f7ff bfc8 	b.w	1a3a8 <bt_keys_get_addr.part.0>
   1a418:	0003646f 	.word	0x0003646f
   1a41c:	00032659 	.word	0x00032659
   1a420:	0003642b 	.word	0x0003642b

0001a424 <bt_keys_foreach_type>:
{
   1a424:	460b      	mov	r3, r1
   1a426:	b510      	push	{r4, lr}
   1a428:	4611      	mov	r1, r2
   1a42a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1a42c:	b963      	cbnz	r3, 1a448 <bt_keys_foreach_type+0x24>
   1a42e:	4909      	ldr	r1, [pc, #36]	; (1a454 <bt_keys_foreach_type+0x30>)
   1a430:	4809      	ldr	r0, [pc, #36]	; (1a458 <bt_keys_foreach_type+0x34>)
   1a432:	23b3      	movs	r3, #179	; 0xb3
   1a434:	4a09      	ldr	r2, [pc, #36]	; (1a45c <bt_keys_foreach_type+0x38>)
   1a436:	f010 f940 	bl	2a6ba <assert_print>
   1a43a:	21b3      	movs	r1, #179	; 0xb3
   1a43c:	4807      	ldr	r0, [pc, #28]	; (1a45c <bt_keys_foreach_type+0x38>)
   1a43e:	f010 f935 	bl	2a6ac <assert_post_action>
}
   1a442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1a446:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1a448:	4805      	ldr	r0, [pc, #20]	; (1a460 <bt_keys_foreach_type+0x3c>)
   1a44a:	89c2      	ldrh	r2, [r0, #14]
   1a44c:	4222      	tst	r2, r4
   1a44e:	d1f8      	bne.n	1a442 <bt_keys_foreach_type+0x1e>
}
   1a450:	bd10      	pop	{r4, pc}
   1a452:	bf00      	nop
   1a454:	00036483 	.word	0x00036483
   1a458:	00032659 	.word	0x00032659
   1a45c:	0003642b 	.word	0x0003642b
   1a460:	2002172c 	.word	0x2002172c

0001a464 <keys_commit>:

static int keys_commit(void)
{
   1a464:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1a466:	2200      	movs	r2, #0
   1a468:	2002      	movs	r0, #2
   1a46a:	4902      	ldr	r1, [pc, #8]	; (1a474 <keys_commit+0x10>)
   1a46c:	f7ff ffda 	bl	1a424 <bt_keys_foreach_type>
	}

	return 0;
}
   1a470:	2000      	movs	r0, #0
   1a472:	bd08      	pop	{r3, pc}
   1a474:	0001a379 	.word	0x0001a379

0001a478 <bt_keys_find>:
{
   1a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a47a:	4605      	mov	r5, r0
   1a47c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a47e:	4614      	mov	r4, r2
   1a480:	b9aa      	cbnz	r2, 1a4ae <bt_keys_find+0x36>
   1a482:	490f      	ldr	r1, [pc, #60]	; (1a4c0 <bt_keys_find+0x48>)
   1a484:	480f      	ldr	r0, [pc, #60]	; (1a4c4 <bt_keys_find+0x4c>)
   1a486:	23c0      	movs	r3, #192	; 0xc0
   1a488:	4a0f      	ldr	r2, [pc, #60]	; (1a4c8 <bt_keys_find+0x50>)
   1a48a:	f010 f916 	bl	2a6ba <assert_print>
   1a48e:	21c0      	movs	r1, #192	; 0xc0
   1a490:	480d      	ldr	r0, [pc, #52]	; (1a4c8 <bt_keys_find+0x50>)
   1a492:	f010 f90b 	bl	2a6ac <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a496:	b18a      	cbz	r2, 1a4bc <bt_keys_find+0x44>
   1a498:	428e      	cmp	r6, r1
   1a49a:	d10f      	bne.n	1a4bc <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   1a49c:	2207      	movs	r2, #7
   1a49e:	4621      	mov	r1, r4
   1a4a0:	480a      	ldr	r0, [pc, #40]	; (1a4cc <bt_keys_find+0x54>)
   1a4a2:	f016 f854 	bl	3054e <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a4a6:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a4a8:	b918      	cbnz	r0, 1a4b2 <bt_keys_find+0x3a>
			return &key_pool[i];
   1a4aa:	4809      	ldr	r0, [pc, #36]	; (1a4d0 <bt_keys_find+0x58>)
   1a4ac:	e007      	b.n	1a4be <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a4ae:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a4b0:	4f07      	ldr	r7, [pc, #28]	; (1a4d0 <bt_keys_find+0x58>)
   1a4b2:	89fa      	ldrh	r2, [r7, #14]
   1a4b4:	7839      	ldrb	r1, [r7, #0]
   1a4b6:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a4b8:	2b00      	cmp	r3, #0
   1a4ba:	d0ec      	beq.n	1a496 <bt_keys_find+0x1e>
	return NULL;
   1a4bc:	2000      	movs	r0, #0
}
   1a4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a4c0:	0003646f 	.word	0x0003646f
   1a4c4:	00032659 	.word	0x00032659
   1a4c8:	0003642b 	.word	0x0003642b
   1a4cc:	2002172d 	.word	0x2002172d
   1a4d0:	2002172c 	.word	0x2002172c

0001a4d4 <bt_keys_find_irk>:
{
   1a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4d6:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1a4d8:	460c      	mov	r4, r1
   1a4da:	b949      	cbnz	r1, 1a4f0 <bt_keys_find_irk+0x1c>
   1a4dc:	4923      	ldr	r1, [pc, #140]	; (1a56c <bt_keys_find_irk+0x98>)
   1a4de:	4824      	ldr	r0, [pc, #144]	; (1a570 <bt_keys_find_irk+0x9c>)
   1a4e0:	23e9      	movs	r3, #233	; 0xe9
   1a4e2:	4a24      	ldr	r2, [pc, #144]	; (1a574 <bt_keys_find_irk+0xa0>)
   1a4e4:	f010 f8e9 	bl	2a6ba <assert_print>
   1a4e8:	21e9      	movs	r1, #233	; 0xe9
   1a4ea:	4822      	ldr	r0, [pc, #136]	; (1a574 <bt_keys_find_irk+0xa0>)
   1a4ec:	f010 f8de 	bl	2a6ac <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1a4f0:	780b      	ldrb	r3, [r1, #0]
   1a4f2:	2b01      	cmp	r3, #1
   1a4f4:	d001      	beq.n	1a4fa <bt_keys_find_irk+0x26>
		return NULL;
   1a4f6:	2000      	movs	r0, #0
}
   1a4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1a4fa:	798b      	ldrb	r3, [r1, #6]
   1a4fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a500:	2b40      	cmp	r3, #64	; 0x40
   1a502:	d1f8      	bne.n	1a4f6 <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a504:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a506:	4d1c      	ldr	r5, [pc, #112]	; (1a578 <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   1a508:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1a50c:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1a50e:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a510:	f002 0202 	and.w	r2, r2, #2
   1a514:	b1db      	cbz	r3, 1a54e <bt_keys_find_irk+0x7a>
   1a516:	2300      	movs	r3, #0
   1a518:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1a51a:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a51c:	f002 0202 	and.w	r2, r2, #2
   1a520:	2b00      	cmp	r3, #0
   1a522:	d1e8      	bne.n	1a4f6 <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a524:	2a00      	cmp	r2, #0
   1a526:	d0e6      	beq.n	1a4f6 <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   1a528:	42b1      	cmp	r1, r6
   1a52a:	d1e4      	bne.n	1a4f6 <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1a52c:	1c67      	adds	r7, r4, #1
   1a52e:	4639      	mov	r1, r7
   1a530:	4812      	ldr	r0, [pc, #72]	; (1a57c <bt_keys_find_irk+0xa8>)
   1a532:	f011 fc61 	bl	2bdf8 <bt_rpa_irk_matches>
   1a536:	2301      	movs	r3, #1
   1a538:	2800      	cmp	r0, #0
   1a53a:	d0ed      	beq.n	1a518 <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   1a53c:	f8d4 3001 	ldr.w	r3, [r4, #1]
   1a540:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   1a544:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   1a548:	4b0d      	ldr	r3, [pc, #52]	; (1a580 <bt_keys_find_irk+0xac>)
   1a54a:	809a      	strh	r2, [r3, #4]
}
   1a54c:	e00b      	b.n	1a566 <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a54e:	2a00      	cmp	r2, #0
   1a550:	d0e2      	beq.n	1a518 <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   1a552:	42b0      	cmp	r0, r6
   1a554:	d1e0      	bne.n	1a518 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1a556:	2206      	movs	r2, #6
   1a558:	4639      	mov	r1, r7
   1a55a:	1c60      	adds	r0, r4, #1
   1a55c:	f015 fff7 	bl	3054e <memcmp>
   1a560:	2301      	movs	r3, #1
   1a562:	2800      	cmp	r0, #0
   1a564:	d1d2      	bne.n	1a50c <bt_keys_find_irk+0x38>
			return &key_pool[i];
   1a566:	4804      	ldr	r0, [pc, #16]	; (1a578 <bt_keys_find_irk+0xa4>)
   1a568:	e7c6      	b.n	1a4f8 <bt_keys_find_irk+0x24>
   1a56a:	bf00      	nop
   1a56c:	0003646f 	.word	0x0003646f
   1a570:	00032659 	.word	0x00032659
   1a574:	0003642b 	.word	0x0003642b
   1a578:	2002172c 	.word	0x2002172c
   1a57c:	20021756 	.word	0x20021756
   1a580:	20021766 	.word	0x20021766

0001a584 <bt_keys_find_addr>:
{
   1a584:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a586:	b959      	cbnz	r1, 1a5a0 <bt_keys_find_addr+0x1c>
   1a588:	490c      	ldr	r1, [pc, #48]	; (1a5bc <bt_keys_find_addr+0x38>)
   1a58a:	480d      	ldr	r0, [pc, #52]	; (1a5c0 <bt_keys_find_addr+0x3c>)
   1a58c:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1a590:	4a0c      	ldr	r2, [pc, #48]	; (1a5c4 <bt_keys_find_addr+0x40>)
   1a592:	f010 f892 	bl	2a6ba <assert_print>
   1a596:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1a59a:	480a      	ldr	r0, [pc, #40]	; (1a5c4 <bt_keys_find_addr+0x40>)
   1a59c:	f010 f886 	bl	2a6ac <assert_post_action>
		if (key_pool[i].id == id &&
   1a5a0:	4c09      	ldr	r4, [pc, #36]	; (1a5c8 <bt_keys_find_addr+0x44>)
   1a5a2:	7823      	ldrb	r3, [r4, #0]
   1a5a4:	4283      	cmp	r3, r0
   1a5a6:	d104      	bne.n	1a5b2 <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   1a5a8:	2207      	movs	r2, #7
   1a5aa:	1c60      	adds	r0, r4, #1
   1a5ac:	f015 ffcf 	bl	3054e <memcmp>
   1a5b0:	b108      	cbz	r0, 1a5b6 <bt_keys_find_addr+0x32>
	return NULL;
   1a5b2:	2000      	movs	r0, #0
}
   1a5b4:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1a5b6:	4620      	mov	r0, r4
   1a5b8:	e7fc      	b.n	1a5b4 <bt_keys_find_addr+0x30>
   1a5ba:	bf00      	nop
   1a5bc:	0003646f 	.word	0x0003646f
   1a5c0:	00032659 	.word	0x00032659
   1a5c4:	0003642b 	.word	0x0003642b
   1a5c8:	2002172c 	.word	0x2002172c

0001a5cc <bt_keys_add_type>:
{
   1a5cc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a5ce:	b958      	cbnz	r0, 1a5e8 <bt_keys_add_type+0x1c>
   1a5d0:	4907      	ldr	r1, [pc, #28]	; (1a5f0 <bt_keys_add_type+0x24>)
   1a5d2:	4808      	ldr	r0, [pc, #32]	; (1a5f4 <bt_keys_add_type+0x28>)
   1a5d4:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1a5d8:	4a07      	ldr	r2, [pc, #28]	; (1a5f8 <bt_keys_add_type+0x2c>)
   1a5da:	f010 f86e 	bl	2a6ba <assert_print>
   1a5de:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1a5e2:	4805      	ldr	r0, [pc, #20]	; (1a5f8 <bt_keys_add_type+0x2c>)
   1a5e4:	f010 f862 	bl	2a6ac <assert_post_action>
	keys->keys |= type;
   1a5e8:	89c3      	ldrh	r3, [r0, #14]
   1a5ea:	4319      	orrs	r1, r3
   1a5ec:	81c1      	strh	r1, [r0, #14]
}
   1a5ee:	bd08      	pop	{r3, pc}
   1a5f0:	0003645b 	.word	0x0003645b
   1a5f4:	00032659 	.word	0x00032659
   1a5f8:	0003642b 	.word	0x0003642b

0001a5fc <bt_keys_get_type>:
{
   1a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5fe:	4606      	mov	r6, r0
   1a600:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a602:	4615      	mov	r5, r2
   1a604:	b94a      	cbnz	r2, 1a61a <bt_keys_get_type+0x1e>
   1a606:	490c      	ldr	r1, [pc, #48]	; (1a638 <bt_keys_get_type+0x3c>)
   1a608:	480c      	ldr	r0, [pc, #48]	; (1a63c <bt_keys_get_type+0x40>)
   1a60a:	23d2      	movs	r3, #210	; 0xd2
   1a60c:	4a0c      	ldr	r2, [pc, #48]	; (1a640 <bt_keys_get_type+0x44>)
   1a60e:	f010 f854 	bl	2a6ba <assert_print>
   1a612:	21d2      	movs	r1, #210	; 0xd2
   1a614:	480a      	ldr	r0, [pc, #40]	; (1a640 <bt_keys_get_type+0x44>)
   1a616:	f010 f849 	bl	2a6ac <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1a61a:	f7ff ff2d 	bl	1a478 <bt_keys_find>
	if (keys) {
   1a61e:	4604      	mov	r4, r0
   1a620:	b940      	cbnz	r0, 1a634 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   1a622:	4629      	mov	r1, r5
   1a624:	4638      	mov	r0, r7
   1a626:	f7ff fee7 	bl	1a3f8 <bt_keys_get_addr>
	if (!keys) {
   1a62a:	4604      	mov	r4, r0
   1a62c:	b110      	cbz	r0, 1a634 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   1a62e:	4631      	mov	r1, r6
   1a630:	f7ff ffcc 	bl	1a5cc <bt_keys_add_type>
}
   1a634:	4620      	mov	r0, r4
   1a636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a638:	0003646f 	.word	0x0003646f
   1a63c:	00032659 	.word	0x00032659
   1a640:	0003642b 	.word	0x0003642b

0001a644 <bt_keys_clear>:
{
   1a644:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a646:	4604      	mov	r4, r0
{
   1a648:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a64a:	b958      	cbnz	r0, 1a664 <bt_keys_clear+0x20>
   1a64c:	4916      	ldr	r1, [pc, #88]	; (1a6a8 <bt_keys_clear+0x64>)
   1a64e:	4817      	ldr	r0, [pc, #92]	; (1a6ac <bt_keys_clear+0x68>)
   1a650:	f240 1331 	movw	r3, #305	; 0x131
   1a654:	4a16      	ldr	r2, [pc, #88]	; (1a6b0 <bt_keys_clear+0x6c>)
   1a656:	f010 f830 	bl	2a6ba <assert_print>
   1a65a:	f240 1131 	movw	r1, #305	; 0x131
   1a65e:	4814      	ldr	r0, [pc, #80]	; (1a6b0 <bt_keys_clear+0x6c>)
   1a660:	f010 f824 	bl	2a6ac <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a664:	7a03      	ldrb	r3, [r0, #8]
   1a666:	075b      	lsls	r3, r3, #29
   1a668:	d501      	bpl.n	1a66e <bt_keys_clear+0x2a>
		bt_id_del(keys);
   1a66a:	f7f9 f9b1 	bl	139d0 <bt_id_del>
		if (keys->id) {
   1a66e:	4625      	mov	r5, r4
   1a670:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a674:	b1b2      	cbz	r2, 1a6a4 <bt_keys_clear+0x60>
			u8_to_dec(id, sizeof(id), keys->id);
   1a676:	ae02      	add	r6, sp, #8
   1a678:	2104      	movs	r1, #4
   1a67a:	4630      	mov	r0, r6
   1a67c:	f00f fdcd 	bl	2a21a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a680:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a682:	462b      	mov	r3, r5
   1a684:	2124      	movs	r1, #36	; 0x24
   1a686:	4a0b      	ldr	r2, [pc, #44]	; (1a6b4 <bt_keys_clear+0x70>)
   1a688:	a803      	add	r0, sp, #12
   1a68a:	f7f7 fae5 	bl	11c58 <bt_settings_encode_key>
		settings_delete(key);
   1a68e:	a803      	add	r0, sp, #12
   1a690:	f010 fe0d 	bl	2b2ae <settings_delete>
   1a694:	225c      	movs	r2, #92	; 0x5c
   1a696:	2100      	movs	r1, #0
   1a698:	4620      	mov	r0, r4
}
   1a69a:	b00c      	add	sp, #48	; 0x30
   1a69c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a6a0:	f015 bf9f 	b.w	305e2 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a6a4:	9200      	str	r2, [sp, #0]
   1a6a6:	e7ec      	b.n	1a682 <bt_keys_clear+0x3e>
   1a6a8:	0003645b 	.word	0x0003645b
   1a6ac:	00032659 	.word	0x00032659
   1a6b0:	0003642b 	.word	0x0003642b
   1a6b4:	00036536 	.word	0x00036536

0001a6b8 <keys_set>:
{
   1a6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6ba:	b099      	sub	sp, #100	; 0x64
   1a6bc:	4614      	mov	r4, r2
	if (!name) {
   1a6be:	4606      	mov	r6, r0
{
   1a6c0:	af00      	add	r7, sp, #0
	if (!name) {
   1a6c2:	b988      	cbnz	r0, 1a6e8 <keys_set+0x30>
		LOG_ERR("Insufficient number of arguments");
   1a6c4:	4b60      	ldr	r3, [pc, #384]	; (1a848 <keys_set+0x190>)
   1a6c6:	627b      	str	r3, [r7, #36]	; 0x24
   1a6c8:	2302      	movs	r3, #2
   1a6ca:	623b      	str	r3, [r7, #32]
   1a6cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a6d0:	4603      	mov	r3, r0
   1a6d2:	f107 0220 	add.w	r2, r7, #32
   1a6d6:	485d      	ldr	r0, [pc, #372]	; (1a84c <keys_set+0x194>)
   1a6d8:	f7f4 f8da 	bl	e890 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1a6dc:	f06f 0515 	mvn.w	r5, #21
}
   1a6e0:	4628      	mov	r0, r5
   1a6e2:	3764      	adds	r7, #100	; 0x64
   1a6e4:	46bd      	mov	sp, r7
   1a6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1a6e8:	2250      	movs	r2, #80	; 0x50
   1a6ea:	4618      	mov	r0, r3
   1a6ec:	f107 0110 	add.w	r1, r7, #16
   1a6f0:	47a0      	blx	r4
	if (len < 0) {
   1a6f2:	1e04      	subs	r4, r0, #0
   1a6f4:	da10      	bge.n	1a718 <keys_set+0x60>
		LOG_ERR("Failed to read value (err %zd)", len);
   1a6f6:	466d      	mov	r5, sp
   1a6f8:	b088      	sub	sp, #32
   1a6fa:	466a      	mov	r2, sp
   1a6fc:	4b54      	ldr	r3, [pc, #336]	; (1a850 <keys_set+0x198>)
   1a6fe:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a702:	2303      	movs	r3, #3
   1a704:	f842 3f10 	str.w	r3, [r2, #16]!
   1a708:	2300      	movs	r3, #0
   1a70a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a70e:	484f      	ldr	r0, [pc, #316]	; (1a84c <keys_set+0x194>)
   1a710:	f7f4 f8be 	bl	e890 <z_impl_z_log_msg_static_create>
   1a714:	46ad      	mov	sp, r5
		return -EINVAL;
   1a716:	e7e1      	b.n	1a6dc <keys_set+0x24>
	err = bt_settings_decode_key(name, &addr);
   1a718:	4630      	mov	r0, r6
   1a71a:	f107 0108 	add.w	r1, r7, #8
   1a71e:	f011 fb94 	bl	2be4a <bt_settings_decode_key>
	if (err) {
   1a722:	4605      	mov	r5, r0
   1a724:	b198      	cbz	r0, 1a74e <keys_set+0x96>
		LOG_ERR("Unable to decode address %s", name);
   1a726:	466c      	mov	r4, sp
   1a728:	b088      	sub	sp, #32
   1a72a:	466a      	mov	r2, sp
   1a72c:	4b49      	ldr	r3, [pc, #292]	; (1a854 <keys_set+0x19c>)
   1a72e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1a732:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a736:	8393      	strh	r3, [r2, #28]
   1a738:	4b47      	ldr	r3, [pc, #284]	; (1a858 <keys_set+0x1a0>)
   1a73a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a73e:	2300      	movs	r3, #0
   1a740:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a744:	4841      	ldr	r0, [pc, #260]	; (1a84c <keys_set+0x194>)
   1a746:	f7f4 f8a3 	bl	e890 <z_impl_z_log_msg_static_create>
   1a74a:	46a5      	mov	sp, r4
			return -EINVAL;
   1a74c:	e7c6      	b.n	1a6dc <keys_set+0x24>
	settings_name_next(name, &next);
   1a74e:	4630      	mov	r0, r6
   1a750:	1d39      	adds	r1, r7, #4
   1a752:	f010 fdd4 	bl	2b2fe <settings_name_next>
	if (!next) {
   1a756:	6878      	ldr	r0, [r7, #4]
   1a758:	b188      	cbz	r0, 1a77e <keys_set+0xc6>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a75a:	220a      	movs	r2, #10
   1a75c:	4629      	mov	r1, r5
   1a75e:	f00e fc5b 	bl	29018 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a762:	b160      	cbz	r0, 1a77e <keys_set+0xc6>
			LOG_ERR("Invalid local identity %lu", next_id);
   1a764:	466c      	mov	r4, sp
   1a766:	b088      	sub	sp, #32
   1a768:	466a      	mov	r2, sp
   1a76a:	4b3c      	ldr	r3, [pc, #240]	; (1a85c <keys_set+0x1a4>)
   1a76c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a770:	2303      	movs	r3, #3
   1a772:	f842 3f10 	str.w	r3, [r2, #16]!
   1a776:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a77a:	462b      	mov	r3, r5
   1a77c:	e7e2      	b.n	1a744 <keys_set+0x8c>
	if (!len) {
   1a77e:	bb1c      	cbnz	r4, 1a7c8 <keys_set+0x110>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1a780:	4621      	mov	r1, r4
   1a782:	203f      	movs	r0, #63	; 0x3f
   1a784:	f107 0208 	add.w	r2, r7, #8
   1a788:	f7ff fe76 	bl	1a478 <bt_keys_find>
		if (keys) {
   1a78c:	b120      	cbz	r0, 1a798 <keys_set+0xe0>
   1a78e:	225c      	movs	r2, #92	; 0x5c
   1a790:	4621      	mov	r1, r4
   1a792:	f015 ff26 	bl	305e2 <memset>
   1a796:	e7a3      	b.n	1a6e0 <keys_set+0x28>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1a798:	f107 0008 	add.w	r0, r7, #8
   1a79c:	f7f7 f986 	bl	11aac <bt_addr_le_str>
   1a7a0:	466e      	mov	r6, sp
   1a7a2:	b088      	sub	sp, #32
   1a7a4:	466a      	mov	r2, sp
   1a7a6:	4b2e      	ldr	r3, [pc, #184]	; (1a860 <keys_set+0x1a8>)
   1a7a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a7ac:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a7b0:	8393      	strh	r3, [r2, #28]
   1a7b2:	4b29      	ldr	r3, [pc, #164]	; (1a858 <keys_set+0x1a0>)
   1a7b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1a7b8:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1a7bc:	4623      	mov	r3, r4
   1a7be:	4823      	ldr	r0, [pc, #140]	; (1a84c <keys_set+0x194>)
   1a7c0:	f7f4 f866 	bl	e890 <z_impl_z_log_msg_static_create>
   1a7c4:	46b5      	mov	sp, r6
   1a7c6:	e78b      	b.n	1a6e0 <keys_set+0x28>
	__ASSERT_NO_MSG(addr != NULL);
   1a7c8:	2000      	movs	r0, #0
   1a7ca:	f107 0108 	add.w	r1, r7, #8
   1a7ce:	f7ff fdeb 	bl	1a3a8 <bt_keys_get_addr.part.0>
	if (!keys) {
   1a7d2:	4606      	mov	r6, r0
   1a7d4:	b9c8      	cbnz	r0, 1a80a <keys_set+0x152>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1a7d6:	f107 0008 	add.w	r0, r7, #8
   1a7da:	f7f7 f967 	bl	11aac <bt_addr_le_str>
   1a7de:	466c      	mov	r4, sp
   1a7e0:	b088      	sub	sp, #32
   1a7e2:	466a      	mov	r2, sp
   1a7e4:	4b1f      	ldr	r3, [pc, #124]	; (1a864 <keys_set+0x1ac>)
   1a7e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a7ea:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a7ee:	8393      	strh	r3, [r2, #28]
   1a7f0:	4b19      	ldr	r3, [pc, #100]	; (1a858 <keys_set+0x1a0>)
   1a7f2:	f842 3f10 	str.w	r3, [r2, #16]!
   1a7f6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a7fa:	4633      	mov	r3, r6
   1a7fc:	4813      	ldr	r0, [pc, #76]	; (1a84c <keys_set+0x194>)
   1a7fe:	f7f4 f847 	bl	e890 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1a802:	f06f 050b 	mvn.w	r5, #11
   1a806:	46a5      	mov	sp, r4
   1a808:	e76a      	b.n	1a6e0 <keys_set+0x28>
	if (len != BT_KEYS_STORAGE_LEN) {
   1a80a:	2c50      	cmp	r4, #80	; 0x50
   1a80c:	d015      	beq.n	1a83a <keys_set+0x182>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1a80e:	466d      	mov	r5, sp
   1a810:	b088      	sub	sp, #32
   1a812:	466a      	mov	r2, sp
   1a814:	4b14      	ldr	r3, [pc, #80]	; (1a868 <keys_set+0x1b0>)
   1a816:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a81a:	2350      	movs	r3, #80	; 0x50
   1a81c:	61d3      	str	r3, [r2, #28]
   1a81e:	2304      	movs	r3, #4
   1a820:	f842 3f10 	str.w	r3, [r2, #16]!
   1a824:	2300      	movs	r3, #0
   1a826:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a82a:	4808      	ldr	r0, [pc, #32]	; (1a84c <keys_set+0x194>)
   1a82c:	f7f4 f830 	bl	e890 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1a830:	4630      	mov	r0, r6
   1a832:	46ad      	mov	sp, r5
   1a834:	f7ff ff06 	bl	1a644 <bt_keys_clear>
			return -EINVAL;
   1a838:	e750      	b.n	1a6dc <keys_set+0x24>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a83a:	4622      	mov	r2, r4
   1a83c:	f107 0110 	add.w	r1, r7, #16
   1a840:	300c      	adds	r0, #12
   1a842:	f015 fe94 	bl	3056e <memcpy>
   1a846:	e74b      	b.n	1a6e0 <keys_set+0x28>
   1a848:	0003461f 	.word	0x0003461f
   1a84c:	000314fc 	.word	0x000314fc
   1a850:	00036497 	.word	0x00036497
   1a854:	00035bab 	.word	0x00035bab
   1a858:	01000003 	.word	0x01000003
   1a85c:	00035bc7 	.word	0x00035bc7
   1a860:	000364b6 	.word	0x000364b6
   1a864:	000364d9 	.word	0x000364d9
   1a868:	000364f8 	.word	0x000364f8

0001a86c <bt_keys_store>:
{
   1a86c:	b5b0      	push	{r4, r5, r7, lr}
   1a86e:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a870:	4604      	mov	r4, r0
{
   1a872:	af02      	add	r7, sp, #8
	__ASSERT_NO_MSG(keys != NULL);
   1a874:	b958      	cbnz	r0, 1a88e <bt_keys_store+0x22>
   1a876:	491c      	ldr	r1, [pc, #112]	; (1a8e8 <bt_keys_store+0x7c>)
   1a878:	481c      	ldr	r0, [pc, #112]	; (1a8ec <bt_keys_store+0x80>)
   1a87a:	f240 1355 	movw	r3, #341	; 0x155
   1a87e:	4a1c      	ldr	r2, [pc, #112]	; (1a8f0 <bt_keys_store+0x84>)
   1a880:	f00f ff1b 	bl	2a6ba <assert_print>
   1a884:	f240 1155 	movw	r1, #341	; 0x155
   1a888:	4819      	ldr	r0, [pc, #100]	; (1a8f0 <bt_keys_store+0x84>)
   1a88a:	f00f ff0f 	bl	2a6ac <assert_post_action>
	if (keys->id) {
   1a88e:	4605      	mov	r5, r0
   1a890:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a894:	b332      	cbz	r2, 1a8e4 <bt_keys_store+0x78>
		u8_to_dec(id, sizeof(id), keys->id);
   1a896:	2104      	movs	r1, #4
   1a898:	4638      	mov	r0, r7
   1a89a:	f00f fcbe 	bl	2a21a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a89e:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a8a0:	462b      	mov	r3, r5
   1a8a2:	2124      	movs	r1, #36	; 0x24
   1a8a4:	4a13      	ldr	r2, [pc, #76]	; (1a8f4 <bt_keys_store+0x88>)
   1a8a6:	1d38      	adds	r0, r7, #4
   1a8a8:	f7f7 f9d6 	bl	11c58 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1a8ac:	f104 010c 	add.w	r1, r4, #12
   1a8b0:	2250      	movs	r2, #80	; 0x50
   1a8b2:	1d38      	adds	r0, r7, #4
   1a8b4:	f7f5 fa86 	bl	fdc4 <settings_save_one>
	if (err) {
   1a8b8:	4604      	mov	r4, r0
   1a8ba:	b178      	cbz	r0, 1a8dc <bt_keys_store+0x70>
		LOG_ERR("Failed to save keys (err %d)", err);
   1a8bc:	466d      	mov	r5, sp
   1a8be:	b088      	sub	sp, #32
   1a8c0:	aa02      	add	r2, sp, #8
   1a8c2:	4b0d      	ldr	r3, [pc, #52]	; (1a8f8 <bt_keys_store+0x8c>)
   1a8c4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a8c8:	2303      	movs	r3, #3
   1a8ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8ce:	2300      	movs	r3, #0
   1a8d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a8d4:	4809      	ldr	r0, [pc, #36]	; (1a8fc <bt_keys_store+0x90>)
   1a8d6:	f7f3 ffdb 	bl	e890 <z_impl_z_log_msg_static_create>
   1a8da:	46ad      	mov	sp, r5
}
   1a8dc:	4620      	mov	r0, r4
   1a8de:	3728      	adds	r7, #40	; 0x28
   1a8e0:	46bd      	mov	sp, r7
   1a8e2:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a8e4:	9200      	str	r2, [sp, #0]
   1a8e6:	e7db      	b.n	1a8a0 <bt_keys_store+0x34>
   1a8e8:	0003645b 	.word	0x0003645b
   1a8ec:	00032659 	.word	0x00032659
   1a8f0:	0003642b 	.word	0x0003642b
   1a8f4:	00036536 	.word	0x00036536
   1a8f8:	00036516 	.word	0x00036516
   1a8fc:	000314fc 	.word	0x000314fc

0001a900 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a900:	4288      	cmp	r0, r1
{
   1a902:	b510      	push	{r4, lr}
   1a904:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a908:	d911      	bls.n	1a92e <sys_memcpy_swap+0x2e>
   1a90a:	188c      	adds	r4, r1, r2
   1a90c:	42a0      	cmp	r0, r4
   1a90e:	d211      	bcs.n	1a934 <sys_memcpy_swap+0x34>
   1a910:	490d      	ldr	r1, [pc, #52]	; (1a948 <sys_memcpy_swap+0x48>)
   1a912:	f240 2315 	movw	r3, #533	; 0x215
   1a916:	4a0d      	ldr	r2, [pc, #52]	; (1a94c <sys_memcpy_swap+0x4c>)
   1a918:	480d      	ldr	r0, [pc, #52]	; (1a950 <sys_memcpy_swap+0x50>)
   1a91a:	f00f fece 	bl	2a6ba <assert_print>
   1a91e:	480d      	ldr	r0, [pc, #52]	; (1a954 <sys_memcpy_swap+0x54>)
   1a920:	f00f fecb 	bl	2a6ba <assert_print>
   1a924:	f240 2115 	movw	r1, #533	; 0x215
   1a928:	4808      	ldr	r0, [pc, #32]	; (1a94c <sys_memcpy_swap+0x4c>)
   1a92a:	f00f febf 	bl	2a6ac <assert_post_action>
   1a92e:	d0ef      	beq.n	1a910 <sys_memcpy_swap+0x10>
   1a930:	4299      	cmp	r1, r3
   1a932:	e7ec      	b.n	1a90e <sys_memcpy_swap+0xe>
	psrc += length - 1;
   1a934:	3a01      	subs	r2, #1
   1a936:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   1a938:	f811 2901 	ldrb.w	r2, [r1], #-1
   1a93c:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   1a940:	4283      	cmp	r3, r0
   1a942:	d1f9      	bne.n	1a938 <sys_memcpy_swap+0x38>
}
   1a944:	bd10      	pop	{r4, pc}
   1a946:	bf00      	nop
   1a948:	00035190 	.word	0x00035190
   1a94c:	0003515e 	.word	0x0003515e
   1a950:	00032659 	.word	0x00032659
   1a954:	000351e7 	.word	0x000351e7

0001a958 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1a958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a95c:	b09a      	sub	sp, #104	; 0x68
   1a95e:	4616      	mov	r6, r2
   1a960:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1a964:	aa0c      	add	r2, sp, #48	; 0x30
{
   1a966:	4684      	mov	ip, r0
   1a968:	468a      	mov	sl, r1
   1a96a:	4690      	mov	r8, r2
   1a96c:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   1a96e:	4b2c      	ldr	r3, [pc, #176]	; (1aa20 <bt_crypto_f5+0xc8>)
   1a970:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1a974:	4614      	mov	r4, r2
   1a976:	6818      	ldr	r0, [r3, #0]
   1a978:	6859      	ldr	r1, [r3, #4]
   1a97a:	3308      	adds	r3, #8
   1a97c:	c403      	stmia	r4!, {r0, r1}
   1a97e:	4573      	cmp	r3, lr
   1a980:	4622      	mov	r2, r4
   1a982:	d1f7      	bne.n	1a974 <bt_crypto_f5+0x1c>
   1a984:	6818      	ldr	r0, [r3, #0]
   1a986:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1a988:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   1a98a:	6020      	str	r0, [r4, #0]
   1a98c:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   1a98e:	2220      	movs	r2, #32
   1a990:	a804      	add	r0, sp, #16
   1a992:	f7ff ffb5 	bl	1a900 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1a996:	466b      	mov	r3, sp
   1a998:	2220      	movs	r2, #32
   1a99a:	4822      	ldr	r0, [pc, #136]	; (1aa24 <bt_crypto_f5+0xcc>)
   1a99c:	a904      	add	r1, sp, #16
   1a99e:	f013 f8b3 	bl	2db08 <bt_crypto_aes_cmac>
	if (err) {
   1a9a2:	4604      	mov	r4, r0
   1a9a4:	bbc0      	cbnz	r0, 1aa18 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1a9a6:	2210      	movs	r2, #16
   1a9a8:	4651      	mov	r1, sl
   1a9aa:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1a9ae:	f7ff ffa7 	bl	1a900 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1a9b2:	2210      	movs	r2, #16
   1a9b4:	4631      	mov	r1, r6
   1a9b6:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1a9ba:	f7ff ffa1 	bl	1a900 <sys_memcpy_swap>
	m[37] = a1->type;
   1a9be:	4629      	mov	r1, r5
   1a9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a9c4:	2206      	movs	r2, #6
   1a9c6:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   1a9ca:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a9ce:	f7ff ff97 	bl	1a900 <sys_memcpy_swap>
	m[44] = a2->type;
   1a9d2:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a9d4:	2206      	movs	r2, #6
	m[44] = a2->type;
   1a9d6:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a9da:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   1a9de:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a9e2:	f7ff ff8d 	bl	1a900 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1a9e6:	464b      	mov	r3, r9
   1a9e8:	2235      	movs	r2, #53	; 0x35
   1a9ea:	4641      	mov	r1, r8
   1a9ec:	4668      	mov	r0, sp
   1a9ee:	f013 f88b 	bl	2db08 <bt_crypto_aes_cmac>
	if (err) {
   1a9f2:	4604      	mov	r4, r0
   1a9f4:	b980      	cbnz	r0, 1aa18 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1a9f6:	4648      	mov	r0, r9
   1a9f8:	f013 f878 	bl	2daec <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1a9fc:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1a9fe:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   1aa00:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1aa04:	4641      	mov	r1, r8
   1aa06:	463b      	mov	r3, r7
   1aa08:	4668      	mov	r0, sp
   1aa0a:	f013 f87d 	bl	2db08 <bt_crypto_aes_cmac>
	if (err) {
   1aa0e:	4604      	mov	r4, r0
   1aa10:	b910      	cbnz	r0, 1aa18 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1aa12:	4638      	mov	r0, r7
   1aa14:	f013 f86a 	bl	2daec <sys_mem_swap.constprop.0>

	return 0;
}
   1aa18:	4620      	mov	r0, r4
   1aa1a:	b01a      	add	sp, #104	; 0x68
   1aa1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aa20:	000316f4 	.word	0x000316f4
   1aa24:	00036543 	.word	0x00036543

0001aa28 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1aa28:	b570      	push	{r4, r5, r6, lr}
   1aa2a:	460e      	mov	r6, r1
   1aa2c:	461d      	mov	r5, r3
   1aa2e:	4614      	mov	r4, r2
   1aa30:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1aa32:	4601      	mov	r1, r0
   1aa34:	2220      	movs	r2, #32
   1aa36:	a804      	add	r0, sp, #16
   1aa38:	f7ff ff62 	bl	1a900 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1aa3c:	2220      	movs	r2, #32
   1aa3e:	4631      	mov	r1, r6
   1aa40:	a80c      	add	r0, sp, #48	; 0x30
   1aa42:	f7ff ff5d 	bl	1a900 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1aa46:	2210      	movs	r2, #16
   1aa48:	4629      	mov	r1, r5
   1aa4a:	a814      	add	r0, sp, #80	; 0x50
   1aa4c:	f7ff ff58 	bl	1a900 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1aa50:	2210      	movs	r2, #16
   1aa52:	4621      	mov	r1, r4
   1aa54:	4668      	mov	r0, sp
   1aa56:	f7ff ff53 	bl	1a900 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1aa5a:	466b      	mov	r3, sp
   1aa5c:	2250      	movs	r2, #80	; 0x50
   1aa5e:	4618      	mov	r0, r3
   1aa60:	a904      	add	r1, sp, #16
   1aa62:	f013 f851 	bl	2db08 <bt_crypto_aes_cmac>
	if (err) {
   1aa66:	b940      	cbnz	r0, 1aa7a <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1aa68:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1aa6a:	4a05      	ldr	r2, [pc, #20]	; (1aa80 <bt_crypto_g2+0x58>)
   1aa6c:	ba1b      	rev	r3, r3
   1aa6e:	fbb3 f1f2 	udiv	r1, r3, r2
   1aa72:	fb02 3311 	mls	r3, r2, r1, r3
   1aa76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1aa78:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1aa7a:	b018      	add	sp, #96	; 0x60
   1aa7c:	bd70      	pop	{r4, r5, r6, pc}
   1aa7e:	bf00      	nop
   1aa80:	000f4240 	.word	0x000f4240

0001aa84 <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
   1aa84:	4b08      	ldr	r3, [pc, #32]	; (1aaa8 <registry_find+0x24>)
{
   1aa86:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
   1aa88:	6859      	ldr	r1, [r3, #4]
   1aa8a:	b111      	cbz	r1, 1aa92 <registry_find+0xe>
   1aa8c:	6819      	ldr	r1, [r3, #0]
   1aa8e:	4288      	cmp	r0, r1
   1aa90:	d007      	beq.n	1aaa2 <registry_find+0x1e>
   1aa92:	68d8      	ldr	r0, [r3, #12]
   1aa94:	b130      	cbz	r0, 1aaa4 <registry_find+0x20>
   1aa96:	6899      	ldr	r1, [r3, #8]
		struct registry_entry *ep = &registry[i];
   1aa98:	4804      	ldr	r0, [pc, #16]	; (1aaac <registry_find+0x28>)
   1aa9a:	428a      	cmp	r2, r1
   1aa9c:	bf18      	it	ne
   1aa9e:	2000      	movne	r0, #0
   1aaa0:	4770      	bx	lr
   1aaa2:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
   1aaa4:	4770      	bx	lr
   1aaa6:	bf00      	nop
   1aaa8:	20021788 	.word	0x20021788
   1aaac:	20021790 	.word	0x20021790

0001aab0 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   1aab0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   1aab2:	4804      	ldr	r0, [pc, #16]	; (1aac4 <fs_init+0x14>)
   1aab4:	f015 fb64 	bl	30180 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1aab8:	4b03      	ldr	r3, [pc, #12]	; (1aac8 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   1aaba:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   1aabc:	e9c3 3300 	strd	r3, r3, [r3]
   1aac0:	bd08      	pop	{r3, pc}
   1aac2:	bf00      	nop
   1aac4:	20021798 	.word	0x20021798
   1aac8:	200217ac 	.word	0x200217ac

0001aacc <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1aacc:	4602      	mov	r2, r0
   1aace:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1aad0:	4801      	ldr	r0, [pc, #4]	; (1aad8 <k_mutex_lock.constprop.0.isra.0+0xc>)
   1aad2:	f00a bb17 	b.w	25104 <z_impl_k_mutex_lock>
   1aad6:	bf00      	nop
   1aad8:	20021798 	.word	0x20021798

0001aadc <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1aadc:	4801      	ldr	r0, [pc, #4]	; (1aae4 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1aade:	f00a bbe1 	b.w	252a4 <z_impl_k_mutex_unlock>
   1aae2:	bf00      	nop
   1aae4:	20021798 	.word	0x20021798

0001aae8 <fs_register>:
{
   1aae8:	b538      	push	{r3, r4, r5, lr}
   1aaea:	4604      	mov	r4, r0
   1aaec:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
   1aaee:	f04f 30ff 	mov.w	r0, #4294967295
   1aaf2:	f04f 31ff 	mov.w	r1, #4294967295
   1aaf6:	f7ff ffe9 	bl	1aacc <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
   1aafa:	4620      	mov	r0, r4
   1aafc:	f7ff ffc2 	bl	1aa84 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   1ab00:	b108      	cbz	r0, 1ab06 <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
   1ab02:	6843      	ldr	r3, [r0, #4]
   1ab04:	b97b      	cbnz	r3, 1ab26 <fs_register+0x3e>
		if (ep->fstp == NULL) {
   1ab06:	4b0b      	ldr	r3, [pc, #44]	; (1ab34 <fs_register+0x4c>)
   1ab08:	685a      	ldr	r2, [r3, #4]
   1ab0a:	b112      	cbz	r2, 1ab12 <fs_register+0x2a>
   1ab0c:	68da      	ldr	r2, [r3, #12]
   1ab0e:	b96a      	cbnz	r2, 1ab2c <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
   1ab10:	2201      	movs	r2, #1
			ep->type = type;
   1ab12:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			rv = 0;
   1ab16:	2400      	movs	r4, #0
			ep->fstp = fstp;
   1ab18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ab1c:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
   1ab1e:	f7ff ffdd 	bl	1aadc <k_mutex_unlock.constprop.0.isra.0>
}
   1ab22:	4620      	mov	r0, r4
   1ab24:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
   1ab26:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1ab2a:	e7f8      	b.n	1ab1e <fs_register+0x36>
	int rv = -ENOSPC;
   1ab2c:	f06f 041b 	mvn.w	r4, #27
   1ab30:	e7f5      	b.n	1ab1e <fs_register+0x36>
   1ab32:	bf00      	nop
   1ab34:	20021788 	.word	0x20021788

0001ab38 <fs_impl_strip_prefix>:
const char *fs_impl_strip_prefix(const char *path,
				 const struct fs_mount_t *mp)
{
	static const char *const root = "/";

	if ((path == NULL) || (mp == NULL)) {
   1ab38:	b138      	cbz	r0, 1ab4a <fs_impl_strip_prefix+0x12>
   1ab3a:	b131      	cbz	r1, 1ab4a <fs_impl_strip_prefix+0x12>
		return path;
	}

	path += mp->mountp_len;
   1ab3c:	698b      	ldr	r3, [r1, #24]
   1ab3e:	4418      	add	r0, r3
	return *path ? path : root;
   1ab40:	7802      	ldrb	r2, [r0, #0]
   1ab42:	4b02      	ldr	r3, [pc, #8]	; (1ab4c <fs_impl_strip_prefix+0x14>)
   1ab44:	2a00      	cmp	r2, #0
   1ab46:	bf08      	it	eq
   1ab48:	4618      	moveq	r0, r3
}
   1ab4a:	4770      	bx	lr
   1ab4c:	00033896 	.word	0x00033896

0001ab50 <littlefs_init>:
	ARG_UNUSED(dev);
	static struct fs_mount_t *partitions[] = {
		DT_INST_FOREACH_STATUS_OKAY(REFERENCE_MOUNT)
	};

	int rc = fs_register(FS_LITTLEFS, &littlefs_fs);
   1ab50:	2001      	movs	r0, #1
   1ab52:	4901      	ldr	r1, [pc, #4]	; (1ab58 <littlefs_init+0x8>)
   1ab54:	f7ff bfc8 	b.w	1aae8 <fs_register>
   1ab58:	00032214 	.word	0x00032214

0001ab5c <release_file_data>:
{
   1ab5c:	b510      	push	{r4, lr}
	struct lfs_file_data *fdp = fp->filep;
   1ab5e:	6803      	ldr	r3, [r0, #0]
{
   1ab60:	4604      	mov	r4, r0
	if (fdp->config.buffer) {
   1ab62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1ab64:	b11a      	cbz	r2, 1ab6e <release_file_data+0x12>
	k_heap_free(&file_cache_heap, buf);
   1ab66:	6e19      	ldr	r1, [r3, #96]	; 0x60
   1ab68:	4804      	ldr	r0, [pc, #16]	; (1ab7c <release_file_data+0x20>)
   1ab6a:	f00a f811 	bl	24b90 <k_heap_free>
	k_mem_slab_free(&file_data_pool, &fp->filep);
   1ab6e:	4621      	mov	r1, r4
   1ab70:	4803      	ldr	r0, [pc, #12]	; (1ab80 <release_file_data+0x24>)
   1ab72:	f00a f8f1 	bl	24d58 <k_mem_slab_free>
	fp->filep = NULL;
   1ab76:	2300      	movs	r3, #0
   1ab78:	6023      	str	r3, [r4, #0]
}
   1ab7a:	bd10      	pop	{r4, pc}
   1ab7c:	20008b14 	.word	0x20008b14
   1ab80:	20008a9c 	.word	0x20008a9c

0001ab84 <lfs_to_errno>:
	if (error >= 0) {
   1ab84:	2800      	cmp	r0, #0
   1ab86:	da07      	bge.n	1ab98 <lfs_to_errno+0x14>
	switch (error) {
   1ab88:	3054      	adds	r0, #84	; 0x54
   1ab8a:	2852      	cmp	r0, #82	; 0x52
   1ab8c:	d802      	bhi.n	1ab94 <lfs_to_errno+0x10>
   1ab8e:	4b03      	ldr	r3, [pc, #12]	; (1ab9c <lfs_to_errno+0x18>)
   1ab90:	5618      	ldrsb	r0, [r3, r0]
   1ab92:	4770      	bx	lr
   1ab94:	f06f 0004 	mvn.w	r0, #4
}
   1ab98:	4770      	bx	lr
   1ab9a:	bf00      	nop
   1ab9c:	00036829 	.word	0x00036829

0001aba0 <errno_to_lfs>:
	if (error >= 0) {
   1aba0:	2800      	cmp	r0, #0
   1aba2:	da05      	bge.n	1abb0 <errno_to_lfs+0x10>
	switch (error) {
   1aba4:	305a      	adds	r0, #90	; 0x5a
   1aba6:	2858      	cmp	r0, #88	; 0x58
   1aba8:	d804      	bhi.n	1abb4 <errno_to_lfs+0x14>
   1abaa:	4b04      	ldr	r3, [pc, #16]	; (1abbc <errno_to_lfs+0x1c>)
   1abac:	5618      	ldrsb	r0, [r3, r0]
   1abae:	4770      	bx	lr
		return LFS_ERR_OK;
   1abb0:	2000      	movs	r0, #0
   1abb2:	4770      	bx	lr
	switch (error) {
   1abb4:	f06f 0004 	mvn.w	r0, #4
}
   1abb8:	4770      	bx	lr
   1abba:	bf00      	nop
   1abbc:	000367d0 	.word	0x000367d0

0001abc0 <littlefs_open>:
{
   1abc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct fs_littlefs *fs = fp->mp->fs_data;
   1abc4:	6843      	ldr	r3, [r0, #4]
{
   1abc6:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   1abc8:	691e      	ldr	r6, [r3, #16]
{
   1abca:	4688      	mov	r8, r1
   1abcc:	4615      	mov	r5, r2
	int ret = k_mem_slab_alloc(&file_data_pool, &fp->filep, K_NO_WAIT);
   1abce:	4601      	mov	r1, r0
   1abd0:	2200      	movs	r2, #0
   1abd2:	2300      	movs	r3, #0
   1abd4:	4823      	ldr	r0, [pc, #140]	; (1ac64 <littlefs_open+0xa4>)
   1abd6:	f00a f855 	bl	24c84 <k_mem_slab_alloc>
   1abda:	4601      	mov	r1, r0
	if (ret != 0) {
   1abdc:	2800      	cmp	r0, #0
   1abde:	d13e      	bne.n	1ac5e <littlefs_open+0x9e>
	struct lfs_file_data *fdp = fp->filep;
   1abe0:	6827      	ldr	r7, [r4, #0]
__ssp_bos_icheck3(memset, void *, int)
   1abe2:	2264      	movs	r2, #100	; 0x64
   1abe4:	4638      	mov	r0, r7
   1abe6:	f015 fcfc 	bl	305e2 <memset>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
   1abea:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
	ret = k_heap_alloc(&file_cache_heap, size, K_NO_WAIT);
   1abee:	2200      	movs	r2, #0
   1abf0:	2300      	movs	r3, #0
   1abf2:	6a89      	ldr	r1, [r1, #40]	; 0x28
   1abf4:	481c      	ldr	r0, [pc, #112]	; (1ac68 <littlefs_open+0xa8>)
   1abf6:	f015 fa87 	bl	30108 <k_heap_alloc>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
   1abfa:	6638      	str	r0, [r7, #96]	; 0x60
	if (fdp->cache_block == NULL) {
   1abfc:	b360      	cbz	r0, 1ac58 <littlefs_open+0x98>
	fdp->config.buffer = fdp->cache_block;
   1abfe:	46b9      	mov	r9, r7
   1ac00:	f849 0f54 	str.w	r0, [r9, #84]!
	path = fs_impl_strip_prefix(path, fp->mp);
   1ac04:	6861      	ldr	r1, [r4, #4]
   1ac06:	4640      	mov	r0, r8
   1ac08:	f7ff ff96 	bl	1ab38 <fs_impl_strip_prefix>
   1ac0c:	4680      	mov	r8, r0
	fs_lock(fs);
   1ac0e:	4630      	mov	r0, r6
   1ac10:	f013 f863 	bl	2dcda <fs_lock>
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   1ac14:	0129      	lsls	r1, r5, #4
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   1ac16:	01ab      	lsls	r3, r5, #6
   1ac18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   1ac1c:	f401 7180 	and.w	r1, r1, #256	; 0x100
   1ac20:	4319      	orrs	r1, r3
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   1ac22:	f005 0303 	and.w	r3, r5, #3
	ret = lfs_file_opencfg(&fs->lfs, &fdp->file,
   1ac26:	430b      	orrs	r3, r1
   1ac28:	4642      	mov	r2, r8
   1ac2a:	4639      	mov	r1, r7
   1ac2c:	f8cd 9000 	str.w	r9, [sp]
   1ac30:	f106 0074 	add.w	r0, r6, #116	; 0x74
   1ac34:	f008 fe18 	bl	23868 <lfs_file_opencfg>
   1ac38:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   1ac3a:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   1ac3e:	f013 f853 	bl	2dce8 <k_mutex_unlock.isra.0>
	if (ret < 0) {
   1ac42:	2d00      	cmp	r5, #0
   1ac44:	da02      	bge.n	1ac4c <littlefs_open+0x8c>
		release_file_data(fp);
   1ac46:	4620      	mov	r0, r4
   1ac48:	f7ff ff88 	bl	1ab5c <release_file_data>
	return lfs_to_errno(ret);
   1ac4c:	4628      	mov	r0, r5
}
   1ac4e:	b003      	add	sp, #12
   1ac50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return lfs_to_errno(ret);
   1ac54:	f7ff bf96 	b.w	1ab84 <lfs_to_errno>
		ret = -ENOMEM;
   1ac58:	f06f 050b 	mvn.w	r5, #11
   1ac5c:	e7f3      	b.n	1ac46 <littlefs_open+0x86>
}
   1ac5e:	b003      	add	sp, #12
   1ac60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ac64:	20008a9c 	.word	0x20008a9c
   1ac68:	20008b14 	.word	0x20008b14

0001ac6c <littlefs_opendir>:
{
   1ac6c:	b570      	push	{r4, r5, r6, lr}
	struct fs_littlefs *fs = dp->mp->fs_data;
   1ac6e:	6843      	ldr	r3, [r0, #4]
{
   1ac70:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   1ac72:	691e      	ldr	r6, [r3, #16]
{
   1ac74:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
   1ac76:	2200      	movs	r2, #0
   1ac78:	4601      	mov	r1, r0
   1ac7a:	2300      	movs	r3, #0
   1ac7c:	4814      	ldr	r0, [pc, #80]	; (1acd0 <littlefs_opendir+0x64>)
   1ac7e:	f00a f801 	bl	24c84 <k_mem_slab_alloc>
   1ac82:	4601      	mov	r1, r0
   1ac84:	bb08      	cbnz	r0, 1acca <littlefs_opendir+0x5e>
   1ac86:	2234      	movs	r2, #52	; 0x34
   1ac88:	6820      	ldr	r0, [r4, #0]
   1ac8a:	f015 fcaa 	bl	305e2 <memset>
	path = fs_impl_strip_prefix(path, dp->mp);
   1ac8e:	6861      	ldr	r1, [r4, #4]
   1ac90:	4628      	mov	r0, r5
   1ac92:	f7ff ff51 	bl	1ab38 <fs_impl_strip_prefix>
   1ac96:	4605      	mov	r5, r0
	fs_lock(fs);
   1ac98:	4630      	mov	r0, r6
   1ac9a:	f013 f81e 	bl	2dcda <fs_lock>
	int ret = lfs_dir_open(&fs->lfs, dp->dirp, path);
   1ac9e:	462a      	mov	r2, r5
   1aca0:	6821      	ldr	r1, [r4, #0]
   1aca2:	f106 0074 	add.w	r0, r6, #116	; 0x74
   1aca6:	f008 ffeb 	bl	23c80 <lfs_dir_open>
   1acaa:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   1acac:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   1acb0:	f013 f81a 	bl	2dce8 <k_mutex_unlock.isra.0>
	if (ret < 0) {
   1acb4:	2d00      	cmp	r5, #0
   1acb6:	da03      	bge.n	1acc0 <littlefs_opendir+0x54>
		k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   1acb8:	4621      	mov	r1, r4
   1acba:	4805      	ldr	r0, [pc, #20]	; (1acd0 <littlefs_opendir+0x64>)
   1acbc:	f00a f84c 	bl	24d58 <k_mem_slab_free>
	return lfs_to_errno(ret);
   1acc0:	4628      	mov	r0, r5
}
   1acc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   1acc6:	f7ff bf5d 	b.w	1ab84 <lfs_to_errno>
}
   1acca:	f06f 000b 	mvn.w	r0, #11
   1acce:	bd70      	pop	{r4, r5, r6, pc}
   1acd0:	20008abc 	.word	0x20008abc

0001acd4 <littlefs_closedir>:
{
   1acd4:	b570      	push	{r4, r5, r6, lr}
   1acd6:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   1acd8:	6843      	ldr	r3, [r0, #4]
   1acda:	691e      	ldr	r6, [r3, #16]
	fs_lock(fs);
   1acdc:	4630      	mov	r0, r6
   1acde:	f012 fffc 	bl	2dcda <fs_lock>
	int ret = lfs_dir_close(&fs->lfs, dp->dirp);
   1ace2:	6821      	ldr	r1, [r4, #0]
   1ace4:	f106 0074 	add.w	r0, r6, #116	; 0x74
   1ace8:	f014 fe07 	bl	2f8fa <lfs_dir_close>
   1acec:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   1acee:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   1acf2:	f012 fff9 	bl	2dce8 <k_mutex_unlock.isra.0>
	k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   1acf6:	4621      	mov	r1, r4
   1acf8:	4803      	ldr	r0, [pc, #12]	; (1ad08 <littlefs_closedir+0x34>)
   1acfa:	f00a f82d 	bl	24d58 <k_mem_slab_free>
	return lfs_to_errno(ret);
   1acfe:	4628      	mov	r0, r5
}
   1ad00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   1ad04:	f7ff bf3e 	b.w	1ab84 <lfs_to_errno>
   1ad08:	20008abc 	.word	0x20008abc

0001ad0c <littlefs_unmount>:
{
   1ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fs->backend = NULL;
   1ad0e:	2600      	movs	r6, #0
{
   1ad10:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
   1ad12:	6904      	ldr	r4, [r0, #16]
{
   1ad14:	af00      	add	r7, sp, #0
	fs_lock(fs);
   1ad16:	4620      	mov	r0, r4
   1ad18:	f012 ffdf 	bl	2dcda <fs_lock>
	lfs_unmount(&fs->lfs);
   1ad1c:	f104 0074 	add.w	r0, r4, #116	; 0x74
   1ad20:	f014 fdd4 	bl	2f8cc <lfs_unmount>
		flash_area_close(fs->backend);
   1ad24:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ad28:	f010 fa5b 	bl	2b1e2 <flash_area_close>
	fs->backend = NULL;
   1ad2c:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
	k_mutex_unlock(&fs->mutex);
   1ad30:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   1ad34:	f012 ffd8 	bl	2dce8 <k_mutex_unlock.isra.0>
	LOG_INF("%s unmounted", mountp->mnt_point);
   1ad38:	b088      	sub	sp, #32
   1ad3a:	466a      	mov	r2, sp
   1ad3c:	68eb      	ldr	r3, [r5, #12]
   1ad3e:	4908      	ldr	r1, [pc, #32]	; (1ad60 <littlefs_unmount+0x54>)
   1ad40:	4808      	ldr	r0, [pc, #32]	; (1ad64 <littlefs_unmount+0x58>)
   1ad42:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ad46:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ad4a:	8393      	strh	r3, [r2, #28]
   1ad4c:	4b06      	ldr	r3, [pc, #24]	; (1ad68 <littlefs_unmount+0x5c>)
   1ad4e:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   1ad52:	f842 3f10 	str.w	r3, [r2, #16]!
   1ad56:	f012 ffbd 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
}
   1ad5a:	4630      	mov	r0, r6
   1ad5c:	46bd      	mov	sp, r7
   1ad5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ad60:	0003655d 	.word	0x0003655d
   1ad64:	0003156c 	.word	0x0003156c
   1ad68:	01000003 	.word	0x01000003

0001ad6c <littlefs_mount>:
{
   1ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad70:	b08b      	sub	sp, #44	; 0x2c
	struct fs_littlefs *fs = mountp->fs_data;
   1ad72:	6904      	ldr	r4, [r0, #16]
{
   1ad74:	af00      	add	r7, sp, #0
	k_mutex_init(&fs->mutex);
   1ad76:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
{
   1ad7a:	4606      	mov	r6, r0
	k_mutex_init(&fs->mutex);
   1ad7c:	603b      	str	r3, [r7, #0]
	return z_impl_k_mutex_init(mutex);
   1ad7e:	4618      	mov	r0, r3
   1ad80:	f015 f9fe 	bl	30180 <z_impl_k_mutex_init>
	fs_lock(fs);
   1ad84:	4620      	mov	r0, r4
   1ad86:	f012 ffa8 	bl	2dcda <fs_lock>
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
   1ad8a:	466d      	mov	r5, sp
   1ad8c:	b08a      	sub	sp, #40	; 0x28
   1ad8e:	466a      	mov	r2, sp
	ret = littlefs_init_fs(fs, (uintptr_t)mountp->storage_dev, mountp->flags);
   1ad90:	f8d6 8014 	ldr.w	r8, [r6, #20]
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
   1ad94:	4bb6      	ldr	r3, [pc, #728]	; (1b070 <littlefs_mount+0x304>)
   1ad96:	2105      	movs	r1, #5
   1ad98:	6153      	str	r3, [r2, #20]
   1ad9a:	2302      	movs	r3, #2
   1ad9c:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1ada0:	6213      	str	r3, [r2, #32]
   1ada2:	2300      	movs	r3, #0
   1ada4:	6253      	str	r3, [r2, #36]	; 0x24
   1ada6:	2306      	movs	r3, #6
   1ada8:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   1adac:	f842 3f10 	str.w	r3, [r2, #16]!
   1adb0:	48b0      	ldr	r0, [pc, #704]	; (1b074 <littlefs_mount+0x308>)
   1adb2:	f012 ff8f 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
	if (fs->backend) {
   1adb6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1adba:	46ad      	mov	sp, r5
   1adbc:	2b00      	cmp	r3, #0
   1adbe:	f040 819f 	bne.w	1b100 <littlefs_mount+0x394>
	ret = flash_area_open(area_id, fap);
   1adc2:	f104 01ec 	add.w	r1, r4, #236	; 0xec
   1adc6:	fa5f f088 	uxtb.w	r0, r8
   1adca:	f7f4 ffa3 	bl	fd14 <flash_area_open>
	if ((ret < 0) || (*fap == NULL)) {
   1adce:	2800      	cmp	r0, #0
   1add0:	db02      	blt.n	1add8 <littlefs_mount+0x6c>
   1add2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1add6:	b9a0      	cbnz	r0, 1ae02 <littlefs_mount+0x96>
		LOG_ERR("can't open flash area %d", area_id);
   1add8:	466d      	mov	r5, sp
   1adda:	b088      	sub	sp, #32
   1addc:	466a      	mov	r2, sp
   1adde:	4ba6      	ldr	r3, [pc, #664]	; (1b078 <littlefs_mount+0x30c>)
   1ade0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ade4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1ade8:	2303      	movs	r3, #3
   1adea:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("can't get flash device: %s",
   1adee:	48a1      	ldr	r0, [pc, #644]	; (1b074 <littlefs_mount+0x308>)
   1adf0:	f012 ff70 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
   1adf4:	46ad      	mov	sp, r5
			ret = -EROFS;
   1adf6:	f06f 0512 	mvn.w	r5, #18
		fs->backend = NULL;
   1adfa:	2300      	movs	r3, #0
   1adfc:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   1ae00:	e115      	b.n	1b02e <littlefs_mount+0x2c2>
	dev = flash_area_get_device(*fap);
   1ae02:	f010 fa2d 	bl	2b260 <flash_area_get_device>
	if (dev == NULL) {
   1ae06:	b988      	cbnz	r0, 1ae2c <littlefs_mount+0xc0>
		LOG_ERR("can't get flash device: %s",
   1ae08:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ae0c:	b088      	sub	sp, #32
   1ae0e:	68db      	ldr	r3, [r3, #12]
   1ae10:	466a      	mov	r2, sp
   1ae12:	681b      	ldr	r3, [r3, #0]
   1ae14:	4999      	ldr	r1, [pc, #612]	; (1b07c <littlefs_mount+0x310>)
   1ae16:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ae1a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ae1e:	8393      	strh	r3, [r2, #28]
   1ae20:	4b97      	ldr	r3, [pc, #604]	; (1b080 <littlefs_mount+0x314>)
   1ae22:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1ae26:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae2a:	e7e0      	b.n	1adee <littlefs_mount+0x82>
	lfs_size_t read_size = lcp->read_size;
   1ae2c:	6963      	ldr	r3, [r4, #20]
	lfs_size_t prog_size = lcp->prog_size;
   1ae2e:	f8d4 9018 	ldr.w	r9, [r4, #24]
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
   1ae32:	2b00      	cmp	r3, #0
   1ae34:	bf08      	it	eq
   1ae36:	2310      	moveq	r3, #16
	lfs_size_t block_size = lcp->block_size;
   1ae38:	69e5      	ldr	r5, [r4, #28]
		prog_size = CONFIG_FS_LITTLEFS_PROG_SIZE;
   1ae3a:	f1b9 0f00 	cmp.w	r9, #0
   1ae3e:	bf08      	it	eq
   1ae40:	f04f 0910 	moveq.w	r9, #16
		LOG_ERR("can't get flash device: %s",
   1ae44:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
   1ae48:	60fb      	str	r3, [r7, #12]
	if (block_size == 0) {
   1ae4a:	b9b5      	cbnz	r5, 1ae7a <littlefs_mount+0x10e>
	struct get_page_ctx ctx = {
   1ae4c:	e9c7 0504 	strd	r0, r5, [r7, #16]
	const struct device *dev = flash_area_get_device(fa);
   1ae50:	f010 fa06 	bl	2b260 <flash_area_get_device>
	flash_page_foreach(dev, get_page_cb, &ctx);
   1ae54:	498b      	ldr	r1, [pc, #556]	; (1b084 <littlefs_mount+0x318>)
   1ae56:	f107 0210 	add.w	r2, r7, #16
   1ae5a:	f013 fa78 	bl	2e34e <flash_page_foreach>
	return ctx.max_size;
   1ae5e:	697d      	ldr	r5, [r7, #20]
	if (block_size == 0) {
   1ae60:	b95d      	cbnz	r5, 1ae7a <littlefs_mount+0x10e>
		__ASSERT_NO_MSG(block_size != 0);
   1ae62:	4989      	ldr	r1, [pc, #548]	; (1b088 <littlefs_mount+0x31c>)
   1ae64:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   1ae68:	4a88      	ldr	r2, [pc, #544]	; (1b08c <littlefs_mount+0x320>)
   1ae6a:	4889      	ldr	r0, [pc, #548]	; (1b090 <littlefs_mount+0x324>)
   1ae6c:	f00f fc25 	bl	2a6ba <assert_print>
   1ae70:	f44f 7133 	mov.w	r1, #716	; 0x2cc
	__ASSERT((block_size % prog_size) == 0,
   1ae74:	4885      	ldr	r0, [pc, #532]	; (1b08c <littlefs_mount+0x320>)
   1ae76:	f00f fc19 	bl	2a6ac <assert_post_action>
	int32_t block_cycles = lcp->block_cycles;
   1ae7a:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
	if (block_cycles == 0) {
   1ae7e:	f1ba 0f00 	cmp.w	sl, #0
   1ae82:	d05b      	beq.n	1af3c <littlefs_mount+0x1d0>
	if (block_cycles <= 0) {
   1ae84:	dc01      	bgt.n	1ae8a <littlefs_mount+0x11e>
		block_cycles = -1;
   1ae86:	f04f 3aff 	mov.w	sl, #4294967295
		block_count = ((struct flash_area *)fs->backend)->fa_size
   1ae8a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
	lfs_size_t cache_size = lcp->cache_size;
   1ae8e:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
			/ block_size;
   1ae92:	6882      	ldr	r2, [r0, #8]
	lfs_size_t lookahead_size = lcp->lookahead_size;
   1ae94:	f8d4 b02c 	ldr.w	fp, [r4, #44]	; 0x2c
			/ block_size;
   1ae98:	fbb2 f3f5 	udiv	r3, r2, r5
		cache_size = CONFIG_FS_LITTLEFS_CACHE_SIZE;
   1ae9c:	f1b8 0f00 	cmp.w	r8, #0
   1aea0:	bf08      	it	eq
   1aea2:	f04f 0840 	moveq.w	r8, #64	; 0x40
		lookahead_size = CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE;
   1aea6:	f1bb 0f00 	cmp.w	fp, #0
   1aeaa:	bf08      	it	eq
   1aeac:	f04f 0b20 	moveq.w	fp, #32
			/ block_size;
   1aeb0:	607b      	str	r3, [r7, #4]
			flash_area_get_device((struct flash_area *)fs->backend);
   1aeb2:	f010 f9d5 	bl	2b260 <flash_area_get_device>
		LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
   1aeb6:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   1aeba:	f8c7 d008 	str.w	sp, [r7, #8]
   1aebe:	b08c      	sub	sp, #48	; 0x30
   1aec0:	6851      	ldr	r1, [r2, #4]
   1aec2:	6800      	ldr	r0, [r0, #0]
   1aec4:	466a      	mov	r2, sp
   1aec6:	61d1      	str	r1, [r2, #28]
   1aec8:	f44f 7100 	mov.w	r1, #512	; 0x200
   1aecc:	4b71      	ldr	r3, [pc, #452]	; (1b094 <littlefs_mount+0x328>)
   1aece:	8591      	strh	r1, [r2, #44]	; 0x2c
   1aed0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1aed4:	4970      	ldr	r1, [pc, #448]	; (1b098 <littlefs_mount+0x32c>)
   1aed6:	687b      	ldr	r3, [r7, #4]
   1aed8:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
   1aedc:	e9c2 3508 	strd	r3, r5, [r2, #32]
   1aee0:	4864      	ldr	r0, [pc, #400]	; (1b074 <littlefs_mount+0x308>)
   1aee2:	f842 1f10 	str.w	r1, [r2, #16]!
   1aee6:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   1aeea:	f012 fef3 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
   1aeee:	f8d7 d008 	ldr.w	sp, [r7, #8]
		LOG_INF("sizes: rd %u ; pr %u ; ca %u ; la %u",
   1aef2:	b08a      	sub	sp, #40	; 0x28
   1aef4:	466a      	mov	r2, sp
   1aef6:	4969      	ldr	r1, [pc, #420]	; (1b09c <littlefs_mount+0x330>)
   1aef8:	68fb      	ldr	r3, [r7, #12]
   1aefa:	6151      	str	r1, [r2, #20]
   1aefc:	2106      	movs	r1, #6
   1aefe:	e9c2 3906 	strd	r3, r9, [r2, #24]
   1af02:	e9c2 8b08 	strd	r8, fp, [r2, #32]
   1af06:	485b      	ldr	r0, [pc, #364]	; (1b074 <littlefs_mount+0x308>)
   1af08:	f842 1f10 	str.w	r1, [r2, #16]!
   1af0c:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   1af10:	f012 fee0 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
	__ASSERT((block_size % prog_size) == 0,
   1af14:	fbb5 f2f9 	udiv	r2, r5, r9
   1af18:	fb09 5212 	mls	r2, r9, r2, r5
   1af1c:	f8d7 d008 	ldr.w	sp, [r7, #8]
   1af20:	b17a      	cbz	r2, 1af42 <littlefs_mount+0x1d6>
   1af22:	495f      	ldr	r1, [pc, #380]	; (1b0a0 <littlefs_mount+0x334>)
   1af24:	f240 3306 	movw	r3, #774	; 0x306
   1af28:	4a58      	ldr	r2, [pc, #352]	; (1b08c <littlefs_mount+0x320>)
   1af2a:	4859      	ldr	r0, [pc, #356]	; (1b090 <littlefs_mount+0x324>)
   1af2c:	f00f fbc5 	bl	2a6ba <assert_print>
   1af30:	485c      	ldr	r0, [pc, #368]	; (1b0a4 <littlefs_mount+0x338>)
   1af32:	f00f fbc2 	bl	2a6ba <assert_print>
   1af36:	f240 3106 	movw	r1, #774	; 0x306
   1af3a:	e79b      	b.n	1ae74 <littlefs_mount+0x108>
		block_cycles = CONFIG_FS_LITTLEFS_BLOCK_CYCLES;
   1af3c:	f44f 7a00 	mov.w	sl, #512	; 0x200
   1af40:	e7a3      	b.n	1ae8a <littlefs_mount+0x11e>
	__ASSERT((block_size % cache_size) == 0,
   1af42:	fbb5 f2f8 	udiv	r2, r5, r8
   1af46:	fb08 5212 	mls	r2, r8, r2, r5
   1af4a:	b162      	cbz	r2, 1af66 <littlefs_mount+0x1fa>
   1af4c:	4956      	ldr	r1, [pc, #344]	; (1b0a8 <littlefs_mount+0x33c>)
   1af4e:	f44f 7342 	mov.w	r3, #776	; 0x308
   1af52:	4a4e      	ldr	r2, [pc, #312]	; (1b08c <littlefs_mount+0x320>)
   1af54:	484e      	ldr	r0, [pc, #312]	; (1b090 <littlefs_mount+0x324>)
   1af56:	f00f fbb0 	bl	2a6ba <assert_print>
   1af5a:	4854      	ldr	r0, [pc, #336]	; (1b0ac <littlefs_mount+0x340>)
   1af5c:	f00f fbad 	bl	2a6ba <assert_print>
   1af60:	f44f 7142 	mov.w	r1, #776	; 0x308
   1af64:	e786      	b.n	1ae74 <littlefs_mount+0x108>
	lcp->context = fs->backend;
   1af66:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   1af6a:	6022      	str	r2, [r4, #0]
		__ASSERT((((struct flash_area *)fs->backend)->fa_size %
   1af6c:	6892      	ldr	r2, [r2, #8]
   1af6e:	fbb2 f1f5 	udiv	r1, r2, r5
   1af72:	fb05 2211 	mls	r2, r5, r1, r2
   1af76:	b162      	cbz	r2, 1af92 <littlefs_mount+0x226>
   1af78:	494d      	ldr	r1, [pc, #308]	; (1b0b0 <littlefs_mount+0x344>)
   1af7a:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1af7e:	4a43      	ldr	r2, [pc, #268]	; (1b08c <littlefs_mount+0x320>)
   1af80:	4843      	ldr	r0, [pc, #268]	; (1b090 <littlefs_mount+0x324>)
   1af82:	f00f fb9a 	bl	2a6ba <assert_print>
   1af86:	484b      	ldr	r0, [pc, #300]	; (1b0b4 <littlefs_mount+0x348>)
   1af88:	f00f fb97 	bl	2a6ba <assert_print>
   1af8c:	f44f 7147 	mov.w	r1, #796	; 0x31c
   1af90:	e770      	b.n	1ae74 <littlefs_mount+0x108>
		lcp->read_size = read_size;
   1af92:	68fb      	ldr	r3, [r7, #12]
		lcp->read = lfs_api_read;
   1af94:	4a48      	ldr	r2, [pc, #288]	; (1b0b8 <littlefs_mount+0x34c>)
		lcp->prog_size = prog_size;
   1af96:	e9c4 3905 	strd	r3, r9, [r4, #20]
		lcp->read = lfs_api_read;
   1af9a:	6062      	str	r2, [r4, #4]
		lcp->sync = lfs_api_sync;
   1af9c:	4b47      	ldr	r3, [pc, #284]	; (1b0bc <littlefs_mount+0x350>)
		lcp->prog = lfs_api_prog;
   1af9e:	4a48      	ldr	r2, [pc, #288]	; (1b0c0 <littlefs_mount+0x354>)
		lcp->sync = lfs_api_sync;
   1afa0:	6123      	str	r3, [r4, #16]
		lcp->prog = lfs_api_prog;
   1afa2:	60a2      	str	r2, [r4, #8]
	lcp->block_count = block_count;
   1afa4:	687b      	ldr	r3, [r7, #4]
		lcp->erase = lfs_api_erase;
   1afa6:	4a47      	ldr	r2, [pc, #284]	; (1b0c4 <littlefs_mount+0x358>)
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   1afa8:	f104 0974 	add.w	r9, r4, #116	; 0x74
	lcp->block_size = block_size;
   1afac:	61e5      	str	r5, [r4, #28]
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   1afae:	4621      	mov	r1, r4
   1afb0:	4648      	mov	r0, r9
		lcp->lookahead_size = lookahead_size;
   1afb2:	e9c4 8b0a 	strd	r8, fp, [r4, #40]	; 0x28
	lcp->block_cycles = block_cycles;
   1afb6:	e9c4 3a08 	strd	r3, sl, [r4, #32]
		lcp->erase = lfs_api_erase;
   1afba:	60e2      	str	r2, [r4, #12]
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   1afbc:	f008 f9a2 	bl	23304 <lfs_mount>
	if (ret < 0 &&
   1afc0:	1e05      	subs	r5, r0, #0
   1afc2:	f280 8089 	bge.w	1b0d8 <littlefs_mount+0x36c>
   1afc6:	f896 3020 	ldrb.w	r3, [r6, #32]
   1afca:	07da      	lsls	r2, r3, #31
   1afcc:	f100 8084 	bmi.w	1b0d8 <littlefs_mount+0x36c>
		LOG_WRN("can't mount (LFS %d); formatting", ret);
   1afd0:	b088      	sub	sp, #32
   1afd2:	466a      	mov	r2, sp
   1afd4:	f04f 0803 	mov.w	r8, #3
   1afd8:	4b3b      	ldr	r3, [pc, #236]	; (1b0c8 <littlefs_mount+0x35c>)
   1afda:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1afde:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1afe2:	4824      	ldr	r0, [pc, #144]	; (1b074 <littlefs_mount+0x308>)
   1afe4:	f842 8f10 	str.w	r8, [r2, #16]!
   1afe8:	f012 fe74 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
		if ((mountp->flags & FS_MOUNT_FLAG_READ_ONLY) == 0) {
   1afec:	f896 3020 	ldrb.w	r3, [r6, #32]
   1aff0:	f8d7 d008 	ldr.w	sp, [r7, #8]
   1aff4:	079b      	lsls	r3, r3, #30
   1aff6:	d422      	bmi.n	1b03e <littlefs_mount+0x2d2>
			ret = lfs_format(&fs->lfs, &fs->cfg);
   1aff8:	4621      	mov	r1, r4
   1affa:	4648      	mov	r0, r9
   1affc:	f008 f91e 	bl	2323c <lfs_format>
			if (ret < 0) {
   1b000:	1e05      	subs	r5, r0, #0
   1b002:	da2a      	bge.n	1b05a <littlefs_mount+0x2ee>
				LOG_ERR("format failed (LFS %d)", ret);
   1b004:	b088      	sub	sp, #32
   1b006:	466a      	mov	r2, sp
   1b008:	4b30      	ldr	r3, [pc, #192]	; (1b0cc <littlefs_mount+0x360>)
			LOG_ERR("remount after format failed (LFS %d)", ret);
   1b00a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1b00e:	4819      	ldr	r0, [pc, #100]	; (1b074 <littlefs_mount+0x308>)
   1b010:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b014:	f842 8f10 	str.w	r8, [r2, #16]!
   1b018:	f012 fe5c 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
			ret = lfs_to_errno(ret);
   1b01c:	4628      	mov	r0, r5
   1b01e:	f8d7 d008 	ldr.w	sp, [r7, #8]
   1b022:	f7ff fdaf 	bl	1ab84 <lfs_to_errno>
   1b026:	4605      	mov	r5, r0
	if (ret < 0) {
   1b028:	2d00      	cmp	r5, #0
   1b02a:	f6ff aee6 	blt.w	1adfa <littlefs_mount+0x8e>
	k_mutex_unlock(&fs->mutex);
   1b02e:	6838      	ldr	r0, [r7, #0]
   1b030:	f012 fe5a 	bl	2dce8 <k_mutex_unlock.isra.0>
}
   1b034:	4628      	mov	r0, r5
   1b036:	372c      	adds	r7, #44	; 0x2c
   1b038:	46bd      	mov	sp, r7
   1b03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("can not format read-only system");
   1b03e:	4b24      	ldr	r3, [pc, #144]	; (1b0d0 <littlefs_mount+0x364>)
   1b040:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b044:	627b      	str	r3, [r7, #36]	; 0x24
   1b046:	2302      	movs	r3, #2
   1b048:	480a      	ldr	r0, [pc, #40]	; (1b074 <littlefs_mount+0x308>)
   1b04a:	623b      	str	r3, [r7, #32]
   1b04c:	f107 0220 	add.w	r2, r7, #32
   1b050:	f012 fe40 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
			ret = -EROFS;
   1b054:	f06f 051d 	mvn.w	r5, #29
   1b058:	e6cf      	b.n	1adfa <littlefs_mount+0x8e>
		ret = lfs_mount(&fs->lfs, &fs->cfg);
   1b05a:	4621      	mov	r1, r4
   1b05c:	4648      	mov	r0, r9
   1b05e:	f008 f951 	bl	23304 <lfs_mount>
		if (ret < 0) {
   1b062:	1e05      	subs	r5, r0, #0
   1b064:	da38      	bge.n	1b0d8 <littlefs_mount+0x36c>
			LOG_ERR("remount after format failed (LFS %d)", ret);
   1b066:	b088      	sub	sp, #32
   1b068:	466a      	mov	r2, sp
   1b06a:	4b1a      	ldr	r3, [pc, #104]	; (1b0d4 <littlefs_mount+0x368>)
   1b06c:	e7cd      	b.n	1b00a <littlefs_mount+0x29e>
   1b06e:	bf00      	nop
   1b070:	0003656a 	.word	0x0003656a
   1b074:	0003156c 	.word	0x0003156c
   1b078:	00036595 	.word	0x00036595
   1b07c:	000365ae 	.word	0x000365ae
   1b080:	01000003 	.word	0x01000003
   1b084:	0002dc33 	.word	0x0002dc33
   1b088:	000365f4 	.word	0x000365f4
   1b08c:	000365c9 	.word	0x000365c9
   1b090:	00032659 	.word	0x00032659
   1b094:	00036604 	.word	0x00036604
   1b098:	01000007 	.word	0x01000007
   1b09c:	00036637 	.word	0x00036637
   1b0a0:	0003665c 	.word	0x0003665c
   1b0a4:	0003667a 	.word	0x0003667a
   1b0a8:	000366a6 	.word	0x000366a6
   1b0ac:	000366c5 	.word	0x000366c5
   1b0b0:	000366ef 	.word	0x000366ef
   1b0b4:	0003672f 	.word	0x0003672f
   1b0b8:	0002dc8f 	.word	0x0002dc8f
   1b0bc:	0002dc2f 	.word	0x0002dc2f
   1b0c0:	0002dc73 	.word	0x0002dc73
   1b0c4:	0002dc5f 	.word	0x0002dc5f
   1b0c8:	0003675f 	.word	0x0003675f
   1b0cc:	000367ae 	.word	0x000367ae
   1b0d0:	00036780 	.word	0x00036780
   1b0d4:	000367a0 	.word	0x000367a0
	LOG_INF("%s mounted", mountp->mnt_point);
   1b0d8:	68f3      	ldr	r3, [r6, #12]
   1b0da:	466e      	mov	r6, sp
   1b0dc:	b088      	sub	sp, #32
   1b0de:	466a      	mov	r2, sp
   1b0e0:	4909      	ldr	r1, [pc, #36]	; (1b108 <littlefs_mount+0x39c>)
   1b0e2:	480a      	ldr	r0, [pc, #40]	; (1b10c <littlefs_mount+0x3a0>)
   1b0e4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b0e8:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b0ec:	8393      	strh	r3, [r2, #28]
   1b0ee:	4b08      	ldr	r3, [pc, #32]	; (1b110 <littlefs_mount+0x3a4>)
   1b0f0:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   1b0f4:	f842 3f10 	str.w	r3, [r2, #16]!
   1b0f8:	f012 fdec 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
   1b0fc:	46b5      	mov	sp, r6
   1b0fe:	e793      	b.n	1b028 <littlefs_mount+0x2bc>
		return -EBUSY;
   1b100:	f06f 050f 	mvn.w	r5, #15
   1b104:	e679      	b.n	1adfa <littlefs_mount+0x8e>
   1b106:	bf00      	nop
   1b108:	000367c5 	.word	0x000367c5
   1b10c:	0003156c 	.word	0x0003156c
   1b110:	01000003 	.word	0x01000003

0001b114 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1b114:	2234      	movs	r2, #52	; 0x34
   1b116:	4b02      	ldr	r3, [pc, #8]	; (1b120 <net_buf_pool_get+0xc>)
   1b118:	fb02 3000 	mla	r0, r2, r0, r3
   1b11c:	4770      	bx	lr
   1b11e:	bf00      	nop
   1b120:	20008cd4 	.word	0x20008cd4

0001b124 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b124:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b126:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b128:	4b06      	ldr	r3, [pc, #24]	; (1b144 <net_buf_id+0x20>)
   1b12a:	fb01 3302 	mla	r3, r1, r2, r3
   1b12e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b134:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b136:	331b      	adds	r3, #27
   1b138:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1b13c:	fbb0 f0f3 	udiv	r0, r0, r3
   1b140:	4770      	bx	lr
   1b142:	bf00      	nop
   1b144:	20008cd4 	.word	0x20008cd4

0001b148 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b148:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b14a:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b14c:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b14e:	4b09      	ldr	r3, [pc, #36]	; (1b174 <fixed_data_alloc+0x2c>)
   1b150:	fb04 3302 	mla	r3, r4, r2, r3
   1b154:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   1b156:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b158:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b15a:	681a      	ldr	r2, [r3, #0]
   1b15c:	4294      	cmp	r4, r2
   1b15e:	bf94      	ite	ls
   1b160:	600c      	strls	r4, [r1, #0]
   1b162:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b164:	e9d3 5400 	ldrd	r5, r4, [r3]
   1b168:	f7ff ffdc 	bl	1b124 <net_buf_id>
}
   1b16c:	fb05 4000 	mla	r0, r5, r0, r4
   1b170:	bd38      	pop	{r3, r4, r5, pc}
   1b172:	bf00      	nop
   1b174:	20008cd4 	.word	0x20008cd4

0001b178 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b17c:	b085      	sub	sp, #20
   1b17e:	9103      	str	r1, [sp, #12]
   1b180:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b182:	4619      	mov	r1, r3
   1b184:	4610      	mov	r0, r2
{
   1b186:	4692      	mov	sl, r2
   1b188:	4699      	mov	r9, r3
   1b18a:	4690      	mov	r8, r2
   1b18c:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b18e:	f015 f8db 	bl	30348 <sys_clock_timeout_end_calc>
   1b192:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1b196:	b945      	cbnz	r5, 1b1aa <net_buf_alloc_len+0x32>
   1b198:	4966      	ldr	r1, [pc, #408]	; (1b334 <net_buf_alloc_len+0x1bc>)
   1b19a:	23f4      	movs	r3, #244	; 0xf4
   1b19c:	4a66      	ldr	r2, [pc, #408]	; (1b338 <net_buf_alloc_len+0x1c0>)
   1b19e:	4867      	ldr	r0, [pc, #412]	; (1b33c <net_buf_alloc_len+0x1c4>)
   1b1a0:	f00f fa8b 	bl	2a6ba <assert_print>
   1b1a4:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1b1a6:	4864      	ldr	r0, [pc, #400]	; (1b338 <net_buf_alloc_len+0x1c0>)
   1b1a8:	e019      	b.n	1b1de <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1b1aa:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1b1ae:	f04f 0320 	mov.w	r3, #32
   1b1b2:	f3ef 8b11 	mrs	fp, BASEPRI
   1b1b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b1be:	4630      	mov	r0, r6
   1b1c0:	f009 ff4a 	bl	25058 <z_spin_lock_valid>
   1b1c4:	b968      	cbnz	r0, 1b1e2 <net_buf_alloc_len+0x6a>
   1b1c6:	2394      	movs	r3, #148	; 0x94
   1b1c8:	4a5d      	ldr	r2, [pc, #372]	; (1b340 <net_buf_alloc_len+0x1c8>)
   1b1ca:	495e      	ldr	r1, [pc, #376]	; (1b344 <net_buf_alloc_len+0x1cc>)
   1b1cc:	485b      	ldr	r0, [pc, #364]	; (1b33c <net_buf_alloc_len+0x1c4>)
   1b1ce:	f00f fa74 	bl	2a6ba <assert_print>
   1b1d2:	4631      	mov	r1, r6
   1b1d4:	485c      	ldr	r0, [pc, #368]	; (1b348 <net_buf_alloc_len+0x1d0>)
   1b1d6:	f00f fa70 	bl	2a6ba <assert_print>
   1b1da:	2194      	movs	r1, #148	; 0x94
   1b1dc:	4858      	ldr	r0, [pc, #352]	; (1b340 <net_buf_alloc_len+0x1c8>)
   1b1de:	f00f fa65 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   1b1e2:	4630      	mov	r0, r6
   1b1e4:	f009 ff54 	bl	25090 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1b1e8:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1b1ea:	2b00      	cmp	r3, #0
   1b1ec:	d070      	beq.n	1b2d0 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1b1ee:	8c2a      	ldrh	r2, [r5, #32]
   1b1f0:	429a      	cmp	r2, r3
   1b1f2:	d94d      	bls.n	1b290 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1b1f4:	2200      	movs	r2, #0
   1b1f6:	2300      	movs	r3, #0
   1b1f8:	4628      	mov	r0, r5
   1b1fa:	f00a f97b 	bl	254f4 <z_impl_k_queue_get>
			if (buf) {
   1b1fe:	4604      	mov	r4, r0
   1b200:	2800      	cmp	r0, #0
   1b202:	d045      	beq.n	1b290 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b204:	4630      	mov	r0, r6
   1b206:	f009 ff35 	bl	25074 <z_spin_unlock_valid>
   1b20a:	b958      	cbnz	r0, 1b224 <net_buf_alloc_len+0xac>
   1b20c:	23c2      	movs	r3, #194	; 0xc2
   1b20e:	4a4c      	ldr	r2, [pc, #304]	; (1b340 <net_buf_alloc_len+0x1c8>)
   1b210:	494e      	ldr	r1, [pc, #312]	; (1b34c <net_buf_alloc_len+0x1d4>)
   1b212:	484a      	ldr	r0, [pc, #296]	; (1b33c <net_buf_alloc_len+0x1c4>)
   1b214:	f00f fa51 	bl	2a6ba <assert_print>
   1b218:	4631      	mov	r1, r6
   1b21a:	484d      	ldr	r0, [pc, #308]	; (1b350 <net_buf_alloc_len+0x1d8>)
   1b21c:	f00f fa4d 	bl	2a6ba <assert_print>
   1b220:	21c2      	movs	r1, #194	; 0xc2
   1b222:	e7db      	b.n	1b1dc <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1b224:	f38b 8811 	msr	BASEPRI, fp
   1b228:	f3bf 8f6f 	isb	sy
	if (size) {
   1b22c:	9d03      	ldr	r5, [sp, #12]
   1b22e:	2d00      	cmp	r5, #0
   1b230:	d074      	beq.n	1b31c <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1b232:	ea59 030a 	orrs.w	r3, r9, sl
   1b236:	d012      	beq.n	1b25e <net_buf_alloc_len+0xe6>
   1b238:	f1b9 3fff 	cmp.w	r9, #4294967295
   1b23c:	bf08      	it	eq
   1b23e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1b242:	d00c      	beq.n	1b25e <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1b244:	f00c fcd6 	bl	27bf4 <sys_clock_tick_get>
   1b248:	9b01      	ldr	r3, [sp, #4]
   1b24a:	ebb3 0800 	subs.w	r8, r3, r0
   1b24e:	9b02      	ldr	r3, [sp, #8]
   1b250:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1b254:	2f00      	cmp	r7, #0
   1b256:	bfbc      	itt	lt
   1b258:	f04f 0800 	movlt.w	r8, #0
   1b25c:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b25e:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b262:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b264:	4e3b      	ldr	r6, [pc, #236]	; (1b354 <net_buf_alloc_len+0x1dc>)
   1b266:	4642      	mov	r2, r8
   1b268:	fb09 6303 	mla	r3, r9, r3, r6
   1b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b26e:	4620      	mov	r0, r4
   1b270:	681b      	ldr	r3, [r3, #0]
   1b272:	a903      	add	r1, sp, #12
   1b274:	f8d3 a000 	ldr.w	sl, [r3]
   1b278:	463b      	mov	r3, r7
   1b27a:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1b27c:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1b27e:	2800      	cmp	r0, #0
   1b280:	d13c      	bne.n	1b2fc <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1b282:	7aa0      	ldrb	r0, [r4, #10]
   1b284:	4621      	mov	r1, r4
   1b286:	fb00 6009 	mla	r0, r0, r9, r6
   1b28a:	f014 ffa4 	bl	301d6 <k_queue_prepend>
}
   1b28e:	e030      	b.n	1b2f2 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1b290:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1b292:	4630      	mov	r0, r6
   1b294:	1e63      	subs	r3, r4, #1
   1b296:	846b      	strh	r3, [r5, #34]	; 0x22
   1b298:	f009 feec 	bl	25074 <z_spin_unlock_valid>
   1b29c:	2800      	cmp	r0, #0
   1b29e:	d0b5      	beq.n	1b20c <net_buf_alloc_len+0x94>
   1b2a0:	f38b 8811 	msr	BASEPRI, fp
   1b2a4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b2a8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b2ac:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b2ae:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b2b0:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b2b2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b2b4:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b2b8:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1b2bc:	4b25      	ldr	r3, [pc, #148]	; (1b354 <net_buf_alloc_len+0x1dc>)
   1b2be:	4a26      	ldr	r2, [pc, #152]	; (1b358 <net_buf_alloc_len+0x1e0>)
   1b2c0:	1aeb      	subs	r3, r5, r3
   1b2c2:	109b      	asrs	r3, r3, #2
   1b2c4:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1b2c6:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1b2c8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1b2cc:	72e3      	strb	r3, [r4, #11]
		goto success;
   1b2ce:	e7ad      	b.n	1b22c <net_buf_alloc_len+0xb4>
   1b2d0:	4630      	mov	r0, r6
   1b2d2:	f009 fecf 	bl	25074 <z_spin_unlock_valid>
   1b2d6:	2800      	cmp	r0, #0
   1b2d8:	d098      	beq.n	1b20c <net_buf_alloc_len+0x94>
   1b2da:	f38b 8811 	msr	BASEPRI, fp
   1b2de:	f3bf 8f6f 	isb	sy
   1b2e2:	4652      	mov	r2, sl
   1b2e4:	464b      	mov	r3, r9
   1b2e6:	4628      	mov	r0, r5
   1b2e8:	f00a f904 	bl	254f4 <z_impl_k_queue_get>
	if (!buf) {
   1b2ec:	4604      	mov	r4, r0
   1b2ee:	2800      	cmp	r0, #0
   1b2f0:	d19c      	bne.n	1b22c <net_buf_alloc_len+0xb4>
		return NULL;
   1b2f2:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1b2f4:	4620      	mov	r0, r4
   1b2f6:	b005      	add	sp, #20
   1b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1b2fc:	9b03      	ldr	r3, [sp, #12]
   1b2fe:	429d      	cmp	r5, r3
   1b300:	d90d      	bls.n	1b31e <net_buf_alloc_len+0x1a6>
   1b302:	4916      	ldr	r1, [pc, #88]	; (1b35c <net_buf_alloc_len+0x1e4>)
   1b304:	f240 1355 	movw	r3, #341	; 0x155
   1b308:	4a0b      	ldr	r2, [pc, #44]	; (1b338 <net_buf_alloc_len+0x1c0>)
   1b30a:	480c      	ldr	r0, [pc, #48]	; (1b33c <net_buf_alloc_len+0x1c4>)
   1b30c:	f00f f9d5 	bl	2a6ba <assert_print>
   1b310:	4813      	ldr	r0, [pc, #76]	; (1b360 <net_buf_alloc_len+0x1e8>)
   1b312:	f00f f9d2 	bl	2a6ba <assert_print>
   1b316:	f240 1155 	movw	r1, #341	; 0x155
   1b31a:	e744      	b.n	1b1a6 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1b31c:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1b31e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1b320:	2201      	movs	r2, #1
	buf->frags = NULL;
   1b322:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1b324:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1b326:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1b328:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1b32a:	6963      	ldr	r3, [r4, #20]
   1b32c:	8262      	strh	r2, [r4, #18]
   1b32e:	60e3      	str	r3, [r4, #12]
}
   1b330:	e7e0      	b.n	1b2f4 <net_buf_alloc_len+0x17c>
   1b332:	bf00      	nop
   1b334:	000368d4 	.word	0x000368d4
   1b338:	00036885 	.word	0x00036885
   1b33c:	00032659 	.word	0x00032659
   1b340:	000333ee 	.word	0x000333ee
   1b344:	00033447 	.word	0x00033447
   1b348:	0003345c 	.word	0x0003345c
   1b34c:	0003341b 	.word	0x0003341b
   1b350:	00033432 	.word	0x00033432
   1b354:	20008cd4 	.word	0x20008cd4
   1b358:	c4ec4ec5 	.word	0xc4ec4ec5
   1b35c:	000368d9 	.word	0x000368d9
   1b360:	000368ea 	.word	0x000368ea

0001b364 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1b364:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b366:	b958      	cbnz	r0, 1b380 <net_buf_simple_reserve+0x1c>
   1b368:	490d      	ldr	r1, [pc, #52]	; (1b3a0 <net_buf_simple_reserve+0x3c>)
   1b36a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1b36e:	4a0d      	ldr	r2, [pc, #52]	; (1b3a4 <net_buf_simple_reserve+0x40>)
   1b370:	480d      	ldr	r0, [pc, #52]	; (1b3a8 <net_buf_simple_reserve+0x44>)
   1b372:	f00f f9a2 	bl	2a6ba <assert_print>
   1b376:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1b37a:	480a      	ldr	r0, [pc, #40]	; (1b3a4 <net_buf_simple_reserve+0x40>)
   1b37c:	f00f f996 	bl	2a6ac <assert_post_action>
   1b380:	8883      	ldrh	r3, [r0, #4]
   1b382:	b14b      	cbz	r3, 1b398 <net_buf_simple_reserve+0x34>
   1b384:	4909      	ldr	r1, [pc, #36]	; (1b3ac <net_buf_simple_reserve+0x48>)
   1b386:	f240 13b9 	movw	r3, #441	; 0x1b9
   1b38a:	4a06      	ldr	r2, [pc, #24]	; (1b3a4 <net_buf_simple_reserve+0x40>)
   1b38c:	4806      	ldr	r0, [pc, #24]	; (1b3a8 <net_buf_simple_reserve+0x44>)
   1b38e:	f00f f994 	bl	2a6ba <assert_print>
   1b392:	f240 11b9 	movw	r1, #441	; 0x1b9
   1b396:	e7f0      	b.n	1b37a <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1b398:	6883      	ldr	r3, [r0, #8]
   1b39a:	440b      	add	r3, r1
   1b39c:	6003      	str	r3, [r0, #0]
}
   1b39e:	bd08      	pop	{r3, pc}
   1b3a0:	00036969 	.word	0x00036969
   1b3a4:	00036885 	.word	0x00036885
   1b3a8:	00032659 	.word	0x00032659
   1b3ac:	000368ed 	.word	0x000368ed

0001b3b0 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1b3b0:	b570      	push	{r4, r5, r6, lr}
   1b3b2:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b3b4:	4605      	mov	r5, r0
   1b3b6:	b958      	cbnz	r0, 1b3d0 <net_buf_slist_put+0x20>
   1b3b8:	4928      	ldr	r1, [pc, #160]	; (1b45c <net_buf_slist_put+0xac>)
   1b3ba:	f240 13c5 	movw	r3, #453	; 0x1c5
   1b3be:	4a28      	ldr	r2, [pc, #160]	; (1b460 <net_buf_slist_put+0xb0>)
   1b3c0:	4828      	ldr	r0, [pc, #160]	; (1b464 <net_buf_slist_put+0xb4>)
   1b3c2:	f00f f97a 	bl	2a6ba <assert_print>
   1b3c6:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1b3ca:	4825      	ldr	r0, [pc, #148]	; (1b460 <net_buf_slist_put+0xb0>)
   1b3cc:	f00f f96e 	bl	2a6ac <assert_post_action>
   1b3d0:	b949      	cbnz	r1, 1b3e6 <net_buf_slist_put+0x36>
   1b3d2:	4925      	ldr	r1, [pc, #148]	; (1b468 <net_buf_slist_put+0xb8>)
   1b3d4:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   1b3d8:	4a21      	ldr	r2, [pc, #132]	; (1b460 <net_buf_slist_put+0xb0>)
   1b3da:	4822      	ldr	r0, [pc, #136]	; (1b464 <net_buf_slist_put+0xb4>)
   1b3dc:	f00f f96d 	bl	2a6ba <assert_print>
   1b3e0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1b3e4:	e7f1      	b.n	1b3ca <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1b3e6:	f04f 0320 	mov.w	r3, #32
   1b3ea:	f3ef 8611 	mrs	r6, BASEPRI
   1b3ee:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3f6:	481d      	ldr	r0, [pc, #116]	; (1b46c <net_buf_slist_put+0xbc>)
   1b3f8:	f009 fe2e 	bl	25058 <z_spin_lock_valid>
   1b3fc:	b960      	cbnz	r0, 1b418 <net_buf_slist_put+0x68>
   1b3fe:	2394      	movs	r3, #148	; 0x94
   1b400:	4a1b      	ldr	r2, [pc, #108]	; (1b470 <net_buf_slist_put+0xc0>)
   1b402:	491c      	ldr	r1, [pc, #112]	; (1b474 <net_buf_slist_put+0xc4>)
   1b404:	4817      	ldr	r0, [pc, #92]	; (1b464 <net_buf_slist_put+0xb4>)
   1b406:	f00f f958 	bl	2a6ba <assert_print>
   1b40a:	4918      	ldr	r1, [pc, #96]	; (1b46c <net_buf_slist_put+0xbc>)
   1b40c:	481a      	ldr	r0, [pc, #104]	; (1b478 <net_buf_slist_put+0xc8>)
   1b40e:	f00f f954 	bl	2a6ba <assert_print>
   1b412:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b414:	4816      	ldr	r0, [pc, #88]	; (1b470 <net_buf_slist_put+0xc0>)
   1b416:	e7d9      	b.n	1b3cc <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1b418:	4814      	ldr	r0, [pc, #80]	; (1b46c <net_buf_slist_put+0xbc>)
   1b41a:	f009 fe39 	bl	25090 <z_spin_lock_set_owner>
	parent->next = child;
   1b41e:	2300      	movs	r3, #0
   1b420:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b422:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1b424:	b98b      	cbnz	r3, 1b44a <net_buf_slist_put+0x9a>
	list->head = node;
   1b426:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b42a:	4810      	ldr	r0, [pc, #64]	; (1b46c <net_buf_slist_put+0xbc>)
   1b42c:	f009 fe22 	bl	25074 <z_spin_unlock_valid>
   1b430:	b970      	cbnz	r0, 1b450 <net_buf_slist_put+0xa0>
   1b432:	23c2      	movs	r3, #194	; 0xc2
   1b434:	4a0e      	ldr	r2, [pc, #56]	; (1b470 <net_buf_slist_put+0xc0>)
   1b436:	4911      	ldr	r1, [pc, #68]	; (1b47c <net_buf_slist_put+0xcc>)
   1b438:	480a      	ldr	r0, [pc, #40]	; (1b464 <net_buf_slist_put+0xb4>)
   1b43a:	f00f f93e 	bl	2a6ba <assert_print>
   1b43e:	490b      	ldr	r1, [pc, #44]	; (1b46c <net_buf_slist_put+0xbc>)
   1b440:	480f      	ldr	r0, [pc, #60]	; (1b480 <net_buf_slist_put+0xd0>)
   1b442:	f00f f93a 	bl	2a6ba <assert_print>
   1b446:	21c2      	movs	r1, #194	; 0xc2
   1b448:	e7e4      	b.n	1b414 <net_buf_slist_put+0x64>
	parent->next = child;
   1b44a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b44c:	606c      	str	r4, [r5, #4]
}
   1b44e:	e7ec      	b.n	1b42a <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1b450:	f386 8811 	msr	BASEPRI, r6
   1b454:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1b458:	bd70      	pop	{r4, r5, r6, pc}
   1b45a:	bf00      	nop
   1b45c:	00034f4f 	.word	0x00034f4f
   1b460:	00036885 	.word	0x00036885
   1b464:	00032659 	.word	0x00032659
   1b468:	00036969 	.word	0x00036969
   1b46c:	200217b4 	.word	0x200217b4
   1b470:	000333ee 	.word	0x000333ee
   1b474:	00033447 	.word	0x00033447
   1b478:	0003345c 	.word	0x0003345c
   1b47c:	0003341b 	.word	0x0003341b
   1b480:	00033432 	.word	0x00033432

0001b484 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1b484:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b486:	4604      	mov	r4, r0
   1b488:	b958      	cbnz	r0, 1b4a2 <net_buf_slist_get+0x1e>
   1b48a:	4923      	ldr	r1, [pc, #140]	; (1b518 <net_buf_slist_get+0x94>)
   1b48c:	4823      	ldr	r0, [pc, #140]	; (1b51c <net_buf_slist_get+0x98>)
   1b48e:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1b492:	4a23      	ldr	r2, [pc, #140]	; (1b520 <net_buf_slist_get+0x9c>)
   1b494:	f00f f911 	bl	2a6ba <assert_print>
   1b498:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1b49c:	4820      	ldr	r0, [pc, #128]	; (1b520 <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b49e:	f00f f905 	bl	2a6ac <assert_post_action>
	__asm__ volatile(
   1b4a2:	f04f 0320 	mov.w	r3, #32
   1b4a6:	f3ef 8611 	mrs	r6, BASEPRI
   1b4aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1b4ae:	f3bf 8f6f 	isb	sy
   1b4b2:	481c      	ldr	r0, [pc, #112]	; (1b524 <net_buf_slist_get+0xa0>)
   1b4b4:	f009 fdd0 	bl	25058 <z_spin_lock_valid>
   1b4b8:	b960      	cbnz	r0, 1b4d4 <net_buf_slist_get+0x50>
   1b4ba:	2394      	movs	r3, #148	; 0x94
   1b4bc:	4a1a      	ldr	r2, [pc, #104]	; (1b528 <net_buf_slist_get+0xa4>)
   1b4be:	491b      	ldr	r1, [pc, #108]	; (1b52c <net_buf_slist_get+0xa8>)
   1b4c0:	4816      	ldr	r0, [pc, #88]	; (1b51c <net_buf_slist_get+0x98>)
   1b4c2:	f00f f8fa 	bl	2a6ba <assert_print>
   1b4c6:	4917      	ldr	r1, [pc, #92]	; (1b524 <net_buf_slist_get+0xa0>)
   1b4c8:	4819      	ldr	r0, [pc, #100]	; (1b530 <net_buf_slist_get+0xac>)
   1b4ca:	f00f f8f6 	bl	2a6ba <assert_print>
   1b4ce:	2194      	movs	r1, #148	; 0x94
   1b4d0:	4815      	ldr	r0, [pc, #84]	; (1b528 <net_buf_slist_get+0xa4>)
   1b4d2:	e7e4      	b.n	1b49e <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1b4d4:	4813      	ldr	r0, [pc, #76]	; (1b524 <net_buf_slist_get+0xa0>)
   1b4d6:	f009 fddb 	bl	25090 <z_spin_lock_set_owner>
	return list->head;
   1b4da:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1b4dc:	b12d      	cbz	r5, 1b4ea <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b4de:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1b4e0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b4e2:	4295      	cmp	r5, r2
	list->head = node;
   1b4e4:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1b4e6:	bf08      	it	eq
   1b4e8:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b4ea:	480e      	ldr	r0, [pc, #56]	; (1b524 <net_buf_slist_get+0xa0>)
   1b4ec:	f009 fdc2 	bl	25074 <z_spin_unlock_valid>
   1b4f0:	b958      	cbnz	r0, 1b50a <net_buf_slist_get+0x86>
   1b4f2:	23c2      	movs	r3, #194	; 0xc2
   1b4f4:	4a0c      	ldr	r2, [pc, #48]	; (1b528 <net_buf_slist_get+0xa4>)
   1b4f6:	490f      	ldr	r1, [pc, #60]	; (1b534 <net_buf_slist_get+0xb0>)
   1b4f8:	4808      	ldr	r0, [pc, #32]	; (1b51c <net_buf_slist_get+0x98>)
   1b4fa:	f00f f8de 	bl	2a6ba <assert_print>
   1b4fe:	4909      	ldr	r1, [pc, #36]	; (1b524 <net_buf_slist_get+0xa0>)
   1b500:	480d      	ldr	r0, [pc, #52]	; (1b538 <net_buf_slist_get+0xb4>)
   1b502:	f00f f8da 	bl	2a6ba <assert_print>
   1b506:	21c2      	movs	r1, #194	; 0xc2
   1b508:	e7e2      	b.n	1b4d0 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1b50a:	f386 8811 	msr	BASEPRI, r6
   1b50e:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1b512:	4628      	mov	r0, r5
   1b514:	bd70      	pop	{r4, r5, r6, pc}
   1b516:	bf00      	nop
   1b518:	00034f4f 	.word	0x00034f4f
   1b51c:	00032659 	.word	0x00032659
   1b520:	00036885 	.word	0x00036885
   1b524:	200217b4 	.word	0x200217b4
   1b528:	000333ee 	.word	0x000333ee
   1b52c:	00033447 	.word	0x00033447
   1b530:	0003345c 	.word	0x0003345c
   1b534:	0003341b 	.word	0x0003341b
   1b538:	00033432 	.word	0x00033432

0001b53c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1b53c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1b53e:	b958      	cbnz	r0, 1b558 <net_buf_put+0x1c>
   1b540:	490d      	ldr	r1, [pc, #52]	; (1b578 <net_buf_put+0x3c>)
   1b542:	f240 13df 	movw	r3, #479	; 0x1df
   1b546:	4a0d      	ldr	r2, [pc, #52]	; (1b57c <net_buf_put+0x40>)
   1b548:	480d      	ldr	r0, [pc, #52]	; (1b580 <net_buf_put+0x44>)
   1b54a:	f00f f8b6 	bl	2a6ba <assert_print>
   1b54e:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1b552:	480a      	ldr	r0, [pc, #40]	; (1b57c <net_buf_put+0x40>)
   1b554:	f00f f8aa 	bl	2a6ac <assert_post_action>
   1b558:	b949      	cbnz	r1, 1b56e <net_buf_put+0x32>
   1b55a:	490a      	ldr	r1, [pc, #40]	; (1b584 <net_buf_put+0x48>)
   1b55c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1b560:	4a06      	ldr	r2, [pc, #24]	; (1b57c <net_buf_put+0x40>)
   1b562:	4807      	ldr	r0, [pc, #28]	; (1b580 <net_buf_put+0x44>)
   1b564:	f00f f8a9 	bl	2a6ba <assert_print>
   1b568:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1b56c:	e7f1      	b.n	1b552 <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1b56e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1b572:	f014 be25 	b.w	301c0 <k_queue_append>
   1b576:	bf00      	nop
   1b578:	000368fc 	.word	0x000368fc
   1b57c:	00036885 	.word	0x00036885
   1b580:	00032659 	.word	0x00032659
   1b584:	00036969 	.word	0x00036969

0001b588 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1b588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1b58c:	4605      	mov	r5, r0
   1b58e:	b328      	cbz	r0, 1b5dc <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1b590:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1b592:	f04f 0834 	mov.w	r8, #52	; 0x34
   1b596:	4e1a      	ldr	r6, [pc, #104]	; (1b600 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   1b598:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1b59a:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1b59c:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1b59e:	3b01      	subs	r3, #1
   1b5a0:	b2db      	uxtb	r3, r3
   1b5a2:	7223      	strb	r3, [r4, #8]
   1b5a4:	b9c3      	cbnz	r3, 1b5d8 <net_buf_unref+0x50>
		if (buf->__buf) {
   1b5a6:	6961      	ldr	r1, [r4, #20]
   1b5a8:	b159      	cbz	r1, 1b5c2 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1b5aa:	7a63      	ldrb	r3, [r4, #9]
   1b5ac:	07db      	lsls	r3, r3, #31
   1b5ae:	d407      	bmi.n	1b5c0 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b5b0:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1b5b2:	4620      	mov	r0, r4
   1b5b4:	fb08 6303 	mla	r3, r8, r3, r6
   1b5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b5ba:	681b      	ldr	r3, [r3, #0]
   1b5bc:	689b      	ldr	r3, [r3, #8]
   1b5be:	4798      	blx	r3
			buf->__buf = NULL;
   1b5c0:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1b5c2:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1b5c4:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1b5c6:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1b5ca:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1b5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b5ce:	b18b      	cbz	r3, 1b5f4 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1b5d0:	4620      	mov	r0, r4
   1b5d2:	4798      	blx	r3
	while (buf) {
   1b5d4:	2d00      	cmp	r5, #0
   1b5d6:	d1df      	bne.n	1b598 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1b5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1b5dc:	4909      	ldr	r1, [pc, #36]	; (1b604 <net_buf_unref+0x7c>)
   1b5de:	480a      	ldr	r0, [pc, #40]	; (1b608 <net_buf_unref+0x80>)
   1b5e0:	f240 13eb 	movw	r3, #491	; 0x1eb
   1b5e4:	4a09      	ldr	r2, [pc, #36]	; (1b60c <net_buf_unref+0x84>)
   1b5e6:	f00f f868 	bl	2a6ba <assert_print>
   1b5ea:	f240 11eb 	movw	r1, #491	; 0x1eb
   1b5ee:	4807      	ldr	r0, [pc, #28]	; (1b60c <net_buf_unref+0x84>)
   1b5f0:	f00f f85c 	bl	2a6ac <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1b5f4:	4621      	mov	r1, r4
   1b5f6:	fb00 6008 	mla	r0, r0, r8, r6
   1b5fa:	f014 fdec 	bl	301d6 <k_queue_prepend>
}
   1b5fe:	e7e9      	b.n	1b5d4 <net_buf_unref+0x4c>
   1b600:	20008cd4 	.word	0x20008cd4
   1b604:	00036969 	.word	0x00036969
   1b608:	00032659 	.word	0x00032659
   1b60c:	00036885 	.word	0x00036885

0001b610 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1b610:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b612:	b958      	cbnz	r0, 1b62c <net_buf_ref+0x1c>
   1b614:	4907      	ldr	r1, [pc, #28]	; (1b634 <net_buf_ref+0x24>)
   1b616:	4808      	ldr	r0, [pc, #32]	; (1b638 <net_buf_ref+0x28>)
   1b618:	f240 231a 	movw	r3, #538	; 0x21a
   1b61c:	4a07      	ldr	r2, [pc, #28]	; (1b63c <net_buf_ref+0x2c>)
   1b61e:	f00f f84c 	bl	2a6ba <assert_print>
   1b622:	f240 211a 	movw	r1, #538	; 0x21a
   1b626:	4805      	ldr	r0, [pc, #20]	; (1b63c <net_buf_ref+0x2c>)
   1b628:	f00f f840 	bl	2a6ac <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b62c:	7a02      	ldrb	r2, [r0, #8]
   1b62e:	3201      	adds	r2, #1
   1b630:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1b632:	bd08      	pop	{r3, pc}
   1b634:	00036969 	.word	0x00036969
   1b638:	00032659 	.word	0x00032659
   1b63c:	00036885 	.word	0x00036885

0001b640 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1b640:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b642:	4603      	mov	r3, r0
   1b644:	b958      	cbnz	r0, 1b65e <net_buf_frag_last+0x1e>
   1b646:	4908      	ldr	r1, [pc, #32]	; (1b668 <net_buf_frag_last+0x28>)
   1b648:	4808      	ldr	r0, [pc, #32]	; (1b66c <net_buf_frag_last+0x2c>)
   1b64a:	f240 2357 	movw	r3, #599	; 0x257
   1b64e:	4a08      	ldr	r2, [pc, #32]	; (1b670 <net_buf_frag_last+0x30>)
   1b650:	f00f f833 	bl	2a6ba <assert_print>
   1b654:	f240 2157 	movw	r1, #599	; 0x257
   1b658:	4805      	ldr	r0, [pc, #20]	; (1b670 <net_buf_frag_last+0x30>)
   1b65a:	f00f f827 	bl	2a6ac <assert_post_action>

	while (buf->frags) {
   1b65e:	4618      	mov	r0, r3
   1b660:	685b      	ldr	r3, [r3, #4]
   1b662:	2b00      	cmp	r3, #0
   1b664:	d1fb      	bne.n	1b65e <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1b666:	bd08      	pop	{r3, pc}
   1b668:	00036969 	.word	0x00036969
   1b66c:	00032659 	.word	0x00032659
   1b670:	00036885 	.word	0x00036885

0001b674 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1b674:	b570      	push	{r4, r5, r6, lr}
   1b676:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1b678:	4604      	mov	r4, r0
   1b67a:	b958      	cbnz	r0, 1b694 <net_buf_frag_insert+0x20>
   1b67c:	490f      	ldr	r1, [pc, #60]	; (1b6bc <net_buf_frag_insert+0x48>)
   1b67e:	f240 2362 	movw	r3, #610	; 0x262
   1b682:	4a0f      	ldr	r2, [pc, #60]	; (1b6c0 <net_buf_frag_insert+0x4c>)
   1b684:	480f      	ldr	r0, [pc, #60]	; (1b6c4 <net_buf_frag_insert+0x50>)
   1b686:	f00f f818 	bl	2a6ba <assert_print>
   1b68a:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1b68e:	480c      	ldr	r0, [pc, #48]	; (1b6c0 <net_buf_frag_insert+0x4c>)
   1b690:	f00f f80c 	bl	2a6ac <assert_post_action>
   1b694:	b949      	cbnz	r1, 1b6aa <net_buf_frag_insert+0x36>
   1b696:	490c      	ldr	r1, [pc, #48]	; (1b6c8 <net_buf_frag_insert+0x54>)
   1b698:	f240 2363 	movw	r3, #611	; 0x263
   1b69c:	4a08      	ldr	r2, [pc, #32]	; (1b6c0 <net_buf_frag_insert+0x4c>)
   1b69e:	4809      	ldr	r0, [pc, #36]	; (1b6c4 <net_buf_frag_insert+0x50>)
   1b6a0:	f00f f80b 	bl	2a6ba <assert_print>
   1b6a4:	f240 2163 	movw	r1, #611	; 0x263
   1b6a8:	e7f1      	b.n	1b68e <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1b6aa:	6846      	ldr	r6, [r0, #4]
   1b6ac:	b11e      	cbz	r6, 1b6b6 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1b6ae:	4608      	mov	r0, r1
   1b6b0:	f7ff ffc6 	bl	1b640 <net_buf_frag_last>
   1b6b4:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1b6b6:	6065      	str	r5, [r4, #4]
}
   1b6b8:	bd70      	pop	{r4, r5, r6, pc}
   1b6ba:	bf00      	nop
   1b6bc:	00036901 	.word	0x00036901
   1b6c0:	00036885 	.word	0x00036885
   1b6c4:	00032659 	.word	0x00032659
   1b6c8:	00036908 	.word	0x00036908

0001b6cc <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1b6cc:	b538      	push	{r3, r4, r5, lr}
   1b6ce:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1b6d0:	460c      	mov	r4, r1
   1b6d2:	b959      	cbnz	r1, 1b6ec <net_buf_frag_add+0x20>
   1b6d4:	490c      	ldr	r1, [pc, #48]	; (1b708 <net_buf_frag_add+0x3c>)
   1b6d6:	480d      	ldr	r0, [pc, #52]	; (1b70c <net_buf_frag_add+0x40>)
   1b6d8:	f240 236e 	movw	r3, #622	; 0x26e
   1b6dc:	4a0c      	ldr	r2, [pc, #48]	; (1b710 <net_buf_frag_add+0x44>)
   1b6de:	f00e ffec 	bl	2a6ba <assert_print>
   1b6e2:	f240 216e 	movw	r1, #622	; 0x26e
   1b6e6:	480a      	ldr	r0, [pc, #40]	; (1b710 <net_buf_frag_add+0x44>)
   1b6e8:	f00e ffe0 	bl	2a6ac <assert_post_action>

	if (!head) {
   1b6ec:	b920      	cbnz	r0, 1b6f8 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1b6ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1b6f2:	4608      	mov	r0, r1
   1b6f4:	f7ff bf8c 	b.w	1b610 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1b6f8:	f7ff ffa2 	bl	1b640 <net_buf_frag_last>
   1b6fc:	4621      	mov	r1, r4
   1b6fe:	f7ff ffb9 	bl	1b674 <net_buf_frag_insert>
}
   1b702:	4628      	mov	r0, r5
   1b704:	bd38      	pop	{r3, r4, r5, pc}
   1b706:	bf00      	nop
   1b708:	00036908 	.word	0x00036908
   1b70c:	00032659 	.word	0x00032659
   1b710:	00036885 	.word	0x00036885

0001b714 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1b714:	b508      	push	{r3, lr}
   1b716:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1b718:	6800      	ldr	r0, [r0, #0]
   1b71a:	689a      	ldr	r2, [r3, #8]
   1b71c:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1b71e:	4291      	cmp	r1, r2
   1b720:	d90b      	bls.n	1b73a <net_buf_simple_push+0x26>
   1b722:	4909      	ldr	r1, [pc, #36]	; (1b748 <net_buf_simple_push+0x34>)
   1b724:	4809      	ldr	r0, [pc, #36]	; (1b74c <net_buf_simple_push+0x38>)
   1b726:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1b72a:	4a09      	ldr	r2, [pc, #36]	; (1b750 <net_buf_simple_push+0x3c>)
   1b72c:	f00e ffc5 	bl	2a6ba <assert_print>
   1b730:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1b734:	4806      	ldr	r0, [pc, #24]	; (1b750 <net_buf_simple_push+0x3c>)
   1b736:	f00e ffb9 	bl	2a6ac <assert_post_action>
	buf->len += len;
   1b73a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1b73c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1b73e:	4411      	add	r1, r2
	buf->data -= len;
   1b740:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1b742:	8099      	strh	r1, [r3, #4]
}
   1b744:	bd08      	pop	{r3, pc}
   1b746:	bf00      	nop
   1b748:	0003691d 	.word	0x0003691d
   1b74c:	00032659 	.word	0x00032659
   1b750:	00036885 	.word	0x00036885

0001b754 <net_buf_simple_pull>:
{
   1b754:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1b756:	8882      	ldrh	r2, [r0, #4]
{
   1b758:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1b75a:	428a      	cmp	r2, r1
   1b75c:	d20b      	bcs.n	1b776 <net_buf_simple_pull+0x22>
   1b75e:	4909      	ldr	r1, [pc, #36]	; (1b784 <net_buf_simple_pull+0x30>)
   1b760:	4809      	ldr	r0, [pc, #36]	; (1b788 <net_buf_simple_pull+0x34>)
   1b762:	f240 4352 	movw	r3, #1106	; 0x452
   1b766:	4a09      	ldr	r2, [pc, #36]	; (1b78c <net_buf_simple_pull+0x38>)
   1b768:	f00e ffa7 	bl	2a6ba <assert_print>
   1b76c:	f240 4152 	movw	r1, #1106	; 0x452
   1b770:	4806      	ldr	r0, [pc, #24]	; (1b78c <net_buf_simple_pull+0x38>)
   1b772:	f00e ff9b 	bl	2a6ac <assert_post_action>
	buf->len -= len;
   1b776:	1a52      	subs	r2, r2, r1
   1b778:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1b77a:	6800      	ldr	r0, [r0, #0]
   1b77c:	4408      	add	r0, r1
   1b77e:	6018      	str	r0, [r3, #0]
}
   1b780:	bd08      	pop	{r3, pc}
   1b782:	bf00      	nop
   1b784:	0003690d 	.word	0x0003690d
   1b788:	00032659 	.word	0x00032659
   1b78c:	00036885 	.word	0x00036885

0001b790 <net_buf_simple_pull_mem>:
{
   1b790:	b508      	push	{r3, lr}
   1b792:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1b794:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1b796:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1b798:	428a      	cmp	r2, r1
   1b79a:	d20b      	bcs.n	1b7b4 <net_buf_simple_pull_mem+0x24>
   1b79c:	4908      	ldr	r1, [pc, #32]	; (1b7c0 <net_buf_simple_pull_mem+0x30>)
   1b79e:	4809      	ldr	r0, [pc, #36]	; (1b7c4 <net_buf_simple_pull_mem+0x34>)
   1b7a0:	f240 435e 	movw	r3, #1118	; 0x45e
   1b7a4:	4a08      	ldr	r2, [pc, #32]	; (1b7c8 <net_buf_simple_pull_mem+0x38>)
   1b7a6:	f00e ff88 	bl	2a6ba <assert_print>
   1b7aa:	f240 415e 	movw	r1, #1118	; 0x45e
   1b7ae:	4806      	ldr	r0, [pc, #24]	; (1b7c8 <net_buf_simple_pull_mem+0x38>)
   1b7b0:	f00e ff7c 	bl	2a6ac <assert_post_action>
	buf->len -= len;
   1b7b4:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1b7b6:	4401      	add	r1, r0
	buf->len -= len;
   1b7b8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1b7ba:	6019      	str	r1, [r3, #0]
}
   1b7bc:	bd08      	pop	{r3, pc}
   1b7be:	bf00      	nop
   1b7c0:	0003690d 	.word	0x0003690d
   1b7c4:	00032659 	.word	0x00032659
   1b7c8:	00036885 	.word	0x00036885

0001b7cc <net_buf_simple_add>:
{
   1b7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1b7ce:	8885      	ldrh	r5, [r0, #4]
   1b7d0:	6803      	ldr	r3, [r0, #0]
   1b7d2:	460e      	mov	r6, r1
   1b7d4:	4604      	mov	r4, r0
   1b7d6:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1b7d8:	f012 fc15 	bl	2e006 <net_buf_simple_tailroom>
   1b7dc:	42b0      	cmp	r0, r6
   1b7de:	d20b      	bcs.n	1b7f8 <net_buf_simple_add+0x2c>
   1b7e0:	4907      	ldr	r1, [pc, #28]	; (1b800 <net_buf_simple_add+0x34>)
   1b7e2:	4808      	ldr	r0, [pc, #32]	; (1b804 <net_buf_simple_add+0x38>)
   1b7e4:	f240 3303 	movw	r3, #771	; 0x303
   1b7e8:	4a07      	ldr	r2, [pc, #28]	; (1b808 <net_buf_simple_add+0x3c>)
   1b7ea:	f00e ff66 	bl	2a6ba <assert_print>
   1b7ee:	f240 3103 	movw	r1, #771	; 0x303
   1b7f2:	4805      	ldr	r0, [pc, #20]	; (1b808 <net_buf_simple_add+0x3c>)
   1b7f4:	f00e ff5a 	bl	2a6ac <assert_post_action>
	buf->len += len;
   1b7f8:	4435      	add	r5, r6
   1b7fa:	80a5      	strh	r5, [r4, #4]
}
   1b7fc:	4638      	mov	r0, r7
   1b7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b800:	00036941 	.word	0x00036941
   1b804:	00032659 	.word	0x00032659
   1b808:	00036885 	.word	0x00036885

0001b80c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1b80c:	b508      	push	{r3, lr}
   1b80e:	4804      	ldr	r0, [pc, #16]	; (1b820 <xoshiro128_initialize+0x14>)
   1b810:	f014 fc63 	bl	300da <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1b814:	2800      	cmp	r0, #0
}
   1b816:	bf0c      	ite	eq
   1b818:	f06f 0012 	mvneq.w	r0, #18
   1b81c:	2000      	movne	r0, #0
   1b81e:	bd08      	pop	{r3, pc}
   1b820:	00030f7c 	.word	0x00030f7c

0001b824 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   1b824:	2813      	cmp	r0, #19
   1b826:	d80e      	bhi.n	1b846 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   1b828:	4a08      	ldr	r2, [pc, #32]	; (1b84c <adc_gain_invert+0x28>)
   1b82a:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1b82e:	b153      	cbz	r3, 1b846 <adc_gain_invert+0x22>
   1b830:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   1b834:	7852      	ldrb	r2, [r2, #1]
   1b836:	b132      	cbz	r2, 1b846 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   1b838:	6808      	ldr	r0, [r1, #0]
   1b83a:	4343      	muls	r3, r0
   1b83c:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   1b840:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   1b842:	600b      	str	r3, [r1, #0]
			rv = 0;
   1b844:	4770      	bx	lr
	int rv = -EINVAL;
   1b846:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1b84a:	4770      	bx	lr
   1b84c:	0003696d 	.word	0x0003696d

0001b850 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1b850:	2201      	movs	r2, #1
   1b852:	4b05      	ldr	r3, [pc, #20]	; (1b868 <adc_context_start_sampling+0x18>)
   1b854:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1b858:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1b85c:	b109      	cbz	r1, 1b862 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b85e:	60da      	str	r2, [r3, #12]
}
   1b860:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b862:	601a      	str	r2, [r3, #0]
   1b864:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1b866:	4770      	bx	lr
   1b868:	4000e000 	.word	0x4000e000

0001b86c <adc_nrfx_channel_setup>:
{
   1b86c:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1b86e:	7908      	ldrb	r0, [r1, #4]
{
   1b870:	b086      	sub	sp, #24
	uint8_t channel_id = channel_cfg->channel_id;
   1b872:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   1b876:	2c07      	cmp	r4, #7
   1b878:	d823      	bhi.n	1b8c2 <adc_nrfx_channel_setup+0x56>
	switch (channel_cfg->gain) {
   1b87a:	780b      	ldrb	r3, [r1, #0]
   1b87c:	2b0b      	cmp	r3, #11
   1b87e:	d815      	bhi.n	1b8ac <adc_nrfx_channel_setup+0x40>
   1b880:	e8df f003 	tbb	[pc, r3]
   1b884:	07070707 	.word	0x07070707
   1b888:	14140614 	.word	0x14140614
   1b88c:	1214100e 	.word	0x1214100e
		config.gain = NRF_SAADC_GAIN1_2;
   1b890:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   1b892:	784a      	ldrb	r2, [r1, #1]
   1b894:	2a03      	cmp	r2, #3
   1b896:	d018      	beq.n	1b8ca <adc_nrfx_channel_setup+0x5e>
   1b898:	2a04      	cmp	r2, #4
   1b89a:	d028      	beq.n	1b8ee <adc_nrfx_channel_setup+0x82>
		LOG_ERR("Selected ADC reference is not valid");
   1b89c:	4b31      	ldr	r3, [pc, #196]	; (1b964 <adc_nrfx_channel_setup+0xf8>)
   1b89e:	e006      	b.n	1b8ae <adc_nrfx_channel_setup+0x42>
		config.gain = NRF_SAADC_GAIN1;
   1b8a0:	2305      	movs	r3, #5
		break;
   1b8a2:	e7f6      	b.n	1b892 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   1b8a4:	2306      	movs	r3, #6
		break;
   1b8a6:	e7f4      	b.n	1b892 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   1b8a8:	2307      	movs	r3, #7
		break;
   1b8aa:	e7f2      	b.n	1b892 <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   1b8ac:	4b2e      	ldr	r3, [pc, #184]	; (1b968 <adc_nrfx_channel_setup+0xfc>)
   1b8ae:	9305      	str	r3, [sp, #20]
   1b8b0:	2302      	movs	r3, #2
   1b8b2:	9304      	str	r3, [sp, #16]
   1b8b4:	2300      	movs	r3, #0
   1b8b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b8ba:	482c      	ldr	r0, [pc, #176]	; (1b96c <adc_nrfx_channel_setup+0x100>)
   1b8bc:	aa04      	add	r2, sp, #16
   1b8be:	f7f2 ffe7 	bl	e890 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1b8c2:	f06f 0015 	mvn.w	r0, #21
}
   1b8c6:	b006      	add	sp, #24
   1b8c8:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   1b8ca:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   1b8cc:	f244 060a 	movw	r6, #16394	; 0x400a
   1b8d0:	884a      	ldrh	r2, [r1, #2]
   1b8d2:	42b2      	cmp	r2, r6
   1b8d4:	d03f      	beq.n	1b956 <adc_nrfx_channel_setup+0xea>
   1b8d6:	d80c      	bhi.n	1b8f2 <adc_nrfx_channel_setup+0x86>
   1b8d8:	f244 0603 	movw	r6, #16387	; 0x4003
   1b8dc:	42b2      	cmp	r2, r6
   1b8de:	d016      	beq.n	1b90e <adc_nrfx_channel_setup+0xa2>
   1b8e0:	f244 0605 	movw	r6, #16389	; 0x4005
   1b8e4:	42b2      	cmp	r2, r6
   1b8e6:	d034      	beq.n	1b952 <adc_nrfx_channel_setup+0xe6>
   1b8e8:	b3aa      	cbz	r2, 1b956 <adc_nrfx_channel_setup+0xea>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1b8ea:	4b21      	ldr	r3, [pc, #132]	; (1b970 <adc_nrfx_channel_setup+0x104>)
   1b8ec:	e7df      	b.n	1b8ae <adc_nrfx_channel_setup+0x42>
	nrf_saadc_channel_config_t config = {
   1b8ee:	2500      	movs	r5, #0
   1b8f0:	e7ec      	b.n	1b8cc <adc_nrfx_channel_setup+0x60>
	switch (channel_cfg->acquisition_time) {
   1b8f2:	f244 0614 	movw	r6, #16404	; 0x4014
   1b8f6:	42b2      	cmp	r2, r6
   1b8f8:	d02f      	beq.n	1b95a <adc_nrfx_channel_setup+0xee>
   1b8fa:	f244 0628 	movw	r6, #16424	; 0x4028
   1b8fe:	42b2      	cmp	r2, r6
   1b900:	d02d      	beq.n	1b95e <adc_nrfx_channel_setup+0xf2>
   1b902:	f244 060f 	movw	r6, #16399	; 0x400f
   1b906:	42b2      	cmp	r2, r6
   1b908:	d1ef      	bne.n	1b8ea <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1b90a:	2203      	movs	r2, #3
   1b90c:	e000      	b.n	1b910 <adc_nrfx_channel_setup+0xa4>
	nrf_saadc_channel_config_t config = {
   1b90e:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b910:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1b914:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b916:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   1b91a:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b91c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1b920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1b924:	0122      	lsls	r2, r4, #4
   1b926:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b92a:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1b92e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1b932:	0123      	lsls	r3, r4, #4
   1b934:	798a      	ldrb	r2, [r1, #6]
   1b936:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b93a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1b93e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1b942:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1b946:	4b0b      	ldr	r3, [pc, #44]	; (1b974 <adc_nrfx_channel_setup+0x108>)
   1b948:	794a      	ldrb	r2, [r1, #5]
   1b94a:	4423      	add	r3, r4
   1b94c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1b950:	e7b9      	b.n	1b8c6 <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
   1b952:	2201      	movs	r2, #1
   1b954:	e7dc      	b.n	1b910 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1b956:	2202      	movs	r2, #2
   1b958:	e7da      	b.n	1b910 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1b95a:	2204      	movs	r2, #4
   1b95c:	e7d8      	b.n	1b910 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1b95e:	2205      	movs	r2, #5
   1b960:	e7d6      	b.n	1b910 <adc_nrfx_channel_setup+0xa4>
   1b962:	bf00      	nop
   1b964:	000369b4 	.word	0x000369b4
   1b968:	00036995 	.word	0x00036995
   1b96c:	000314a4 	.word	0x000314a4
   1b970:	000369d8 	.word	0x000369d8
   1b974:	20008168 	.word	0x20008168

0001b978 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   1b978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b97c:	b088      	sub	sp, #32
   1b97e:	460c      	mov	r4, r1
   1b980:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   1b982:	f04f 33ff 	mov.w	r3, #4294967295
   1b986:	f04f 32ff 	mov.w	r2, #4294967295
   1b98a:	4876      	ldr	r0, [pc, #472]	; (1bb64 <adc_nrfx_read+0x1ec>)
   1b98c:	f009 fe60 	bl	25650 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1b990:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   1b992:	1e73      	subs	r3, r6, #1
   1b994:	2bfe      	cmp	r3, #254	; 0xfe
   1b996:	d90c      	bls.n	1b9b2 <adc_nrfx_read+0x3a>
		LOG_ERR("Invalid selection of channels");
   1b998:	4b73      	ldr	r3, [pc, #460]	; (1bb68 <adc_nrfx_read+0x1f0>)
		LOG_ERR(
   1b99a:	617b      	str	r3, [r7, #20]
   1b99c:	2302      	movs	r3, #2
   1b99e:	613b      	str	r3, [r7, #16]
   1b9a0:	2300      	movs	r3, #0
   1b9a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b9a6:	4871      	ldr	r0, [pc, #452]	; (1bb6c <adc_nrfx_read+0x1f4>)
   1b9a8:	f107 0210 	add.w	r2, r7, #16
   1b9ac:	f7f2 ff70 	bl	e890 <z_impl_z_log_msg_static_create>
	if (error) {
   1b9b0:	e01b      	b.n	1b9ea <adc_nrfx_read+0x72>
   1b9b2:	2100      	movs	r1, #0
	active_channels = 0U;
   1b9b4:	460a      	mov	r2, r1
    p_reg->CH[channel].PSELP = pselp;
   1b9b6:	4d6e      	ldr	r5, [pc, #440]	; (1bb70 <adc_nrfx_read+0x1f8>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b9b8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 1bb74 <adc_nrfx_read+0x1fc>
		if (selected_channels & BIT(channel_id)) {
   1b9bc:	fa26 f301 	lsr.w	r3, r6, r1
   1b9c0:	f013 0301 	ands.w	r3, r3, #1
   1b9c4:	d040      	beq.n	1ba48 <adc_nrfx_read+0xd0>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b9c6:	f81c 3001 	ldrb.w	r3, [ip, r1]
   1b9ca:	b9c3      	cbnz	r3, 1b9fe <adc_nrfx_read+0x86>
				LOG_ERR("Channel %u not configured",
   1b9cc:	466c      	mov	r4, sp
   1b9ce:	b088      	sub	sp, #32
   1b9d0:	aa02      	add	r2, sp, #8
   1b9d2:	4869      	ldr	r0, [pc, #420]	; (1bb78 <adc_nrfx_read+0x200>)
   1b9d4:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1b9d8:	2103      	movs	r1, #3
   1b9da:	f842 1f10 	str.w	r1, [r2, #16]!
   1b9de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b9e2:	4862      	ldr	r0, [pc, #392]	; (1bb6c <adc_nrfx_read+0x1f4>)
   1b9e4:	f7f2 ff54 	bl	e890 <z_impl_z_log_msg_static_create>
   1b9e8:	46a5      	mov	sp, r4
		return -EINVAL;
   1b9ea:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1b9ee:	485d      	ldr	r0, [pc, #372]	; (1bb64 <adc_nrfx_read+0x1ec>)
   1b9f0:	f009 fdea 	bl	255c8 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1b9f4:	4620      	mov	r0, r4
   1b9f6:	3718      	adds	r7, #24
   1b9f8:	46bd      	mov	sp, r7
   1b9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1b9fe:	f894 e011 	ldrb.w	lr, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1ba02:	eb05 1801 	add.w	r8, r5, r1, lsl #4
   1ba06:	f1be 0e00 	subs.w	lr, lr, #0
   1ba0a:	bf18      	it	ne
   1ba0c:	f04f 0e01 	movne.w	lr, #1
   1ba10:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
			++active_channels;
   1ba14:	3201      	adds	r2, #1
   1ba16:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   1ba1a:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   1ba1e:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1ba22:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1ba26:	0100      	lsls	r0, r0, #4
   1ba28:	502b      	str	r3, [r5, r0]
   1ba2a:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   1ba2c:	3101      	adds	r1, #1
   1ba2e:	2908      	cmp	r1, #8
   1ba30:	d1c4      	bne.n	1b9bc <adc_nrfx_read+0x44>
	error = set_resolution(sequence);
   1ba32:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   1ba34:	f1a3 0108 	sub.w	r1, r3, #8
   1ba38:	2906      	cmp	r1, #6
   1ba3a:	d816      	bhi.n	1ba6a <adc_nrfx_read+0xf2>
   1ba3c:	e8df f001 	tbb	[pc, r1]
   1ba40:	15221520 	.word	0x15221520
   1ba44:	1509      	.short	0x1509
   1ba46:	13          	.byte	0x13
   1ba47:	00          	.byte	0x00
   1ba48:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1ba4c:	0100      	lsls	r0, r0, #4
   1ba4e:	502b      	str	r3, [r5, r0]
}
   1ba50:	e7ec      	b.n	1ba2c <adc_nrfx_read+0xb4>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1ba52:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1ba54:	4946      	ldr	r1, [pc, #280]	; (1bb70 <adc_nrfx_read+0x1f8>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1ba56:	2a01      	cmp	r2, #1
   1ba58:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1ba5c:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1ba5e:	d913      	bls.n	1ba88 <adc_nrfx_read+0x110>
   1ba60:	b1a3      	cbz	r3, 1ba8c <adc_nrfx_read+0x114>
		LOG_ERR(
   1ba62:	4b46      	ldr	r3, [pc, #280]	; (1bb7c <adc_nrfx_read+0x204>)
   1ba64:	e799      	b.n	1b99a <adc_nrfx_read+0x22>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1ba66:	2303      	movs	r3, #3
		break;
   1ba68:	e7f4      	b.n	1ba54 <adc_nrfx_read+0xdc>
		LOG_ERR("ADC resolution value %d is not valid",
   1ba6a:	466c      	mov	r4, sp
   1ba6c:	b088      	sub	sp, #32
   1ba6e:	aa02      	add	r2, sp, #8
   1ba70:	4943      	ldr	r1, [pc, #268]	; (1bb80 <adc_nrfx_read+0x208>)
	switch (sequence->oversampling) {
   1ba72:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Oversampling value %d is not valid",
   1ba76:	2303      	movs	r3, #3
   1ba78:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba7c:	2300      	movs	r3, #0
   1ba7e:	e7ae      	b.n	1b9de <adc_nrfx_read+0x66>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1ba80:	2300      	movs	r3, #0
   1ba82:	e7e7      	b.n	1ba54 <adc_nrfx_read+0xdc>
	switch (sequence->resolution) {
   1ba84:	2301      	movs	r3, #1
   1ba86:	e7e5      	b.n	1ba54 <adc_nrfx_read+0xdc>
	switch (sequence->oversampling) {
   1ba88:	2b08      	cmp	r3, #8
   1ba8a:	d81b      	bhi.n	1bac4 <adc_nrfx_read+0x14c>
    p_reg->OVERSAMPLE = oversample;
   1ba8c:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   1ba90:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1ba92:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   1ba94:	b9d9      	cbnz	r1, 1bace <adc_nrfx_read+0x156>
	if (sequence->buffer_size < needed_buffer_size) {
   1ba96:	68e1      	ldr	r1, [r4, #12]
   1ba98:	4299      	cmp	r1, r3
   1ba9a:	d21c      	bcs.n	1bad6 <adc_nrfx_read+0x15e>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1ba9c:	466c      	mov	r4, sp
   1ba9e:	b088      	sub	sp, #32
   1baa0:	aa02      	add	r2, sp, #8
   1baa2:	61d3      	str	r3, [r2, #28]
   1baa4:	2304      	movs	r3, #4
   1baa6:	4837      	ldr	r0, [pc, #220]	; (1bb84 <adc_nrfx_read+0x20c>)
   1baa8:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1baac:	f842 3f10 	str.w	r3, [r2, #16]!
   1bab0:	2300      	movs	r3, #0
   1bab2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bab6:	482d      	ldr	r0, [pc, #180]	; (1bb6c <adc_nrfx_read+0x1f4>)
   1bab8:	f7f2 feea 	bl	e890 <z_impl_z_log_msg_static_create>
   1babc:	46a5      	mov	sp, r4
		return -ENOMEM;
   1babe:	f06f 040b 	mvn.w	r4, #11
   1bac2:	e794      	b.n	1b9ee <adc_nrfx_read+0x76>
		LOG_ERR("Oversampling value %d is not valid",
   1bac4:	466c      	mov	r4, sp
   1bac6:	b088      	sub	sp, #32
   1bac8:	aa02      	add	r2, sp, #8
   1baca:	492f      	ldr	r1, [pc, #188]	; (1bb88 <adc_nrfx_read+0x210>)
   1bacc:	e7d1      	b.n	1ba72 <adc_nrfx_read+0xfa>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1bace:	8989      	ldrh	r1, [r1, #12]
   1bad0:	fb01 3303 	mla	r3, r1, r3, r3
   1bad4:	e7df      	b.n	1ba96 <adc_nrfx_read+0x11e>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1bad6:	46a4      	mov	ip, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1bad8:	68a1      	ldr	r1, [r4, #8]
   1bada:	4b25      	ldr	r3, [pc, #148]	; (1bb70 <adc_nrfx_read+0x1f8>)
   1badc:	4d2b      	ldr	r5, [pc, #172]	; (1bb8c <adc_nrfx_read+0x214>)
   1bade:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
   1bae2:	f105 0674 	add.w	r6, r5, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   1bae6:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   1baea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1baee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1baf0:	f8dc 3000 	ldr.w	r3, [ip]
   1baf4:	46ac      	mov	ip, r5
   1baf6:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   1baf8:	2600      	movs	r6, #0
   1bafa:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   1bafc:	6823      	ldr	r3, [r4, #0]
   1bafe:	b36b      	cbz	r3, 1bb5c <adc_nrfx_read+0x1e4>
		ctx->options = *sequence->options;
   1bb00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1bb02:	f105 0488 	add.w	r4, r5, #136	; 0x88
   1bb06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1bb0a:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   1bb0c:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   1bb10:	b320      	cbz	r0, 1bb5c <adc_nrfx_read+0x1e4>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bb12:	e8dc 3fef 	ldaex	r3, [ip]
   1bb16:	e8cc 6fe2 	stlex	r2, r6, [ip]
   1bb1a:	2a00      	cmp	r2, #0
   1bb1c:	d1f9      	bne.n	1bb12 <adc_nrfx_read+0x19a>
   1bb1e:	491c      	ldr	r1, [pc, #112]	; (1bb90 <adc_nrfx_read+0x218>)
   1bb20:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1bb24:	468c      	mov	ip, r1
   1bb26:	4631      	mov	r1, r6
   1bb28:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1bb2c:	2300      	movs	r3, #0
   1bb2e:	fbe0 c104 	umlal	ip, r1, r0, r4
   1bb32:	4a18      	ldr	r2, [pc, #96]	; (1bb94 <adc_nrfx_read+0x21c>)
   1bb34:	4660      	mov	r0, ip
   1bb36:	f7ed f9db 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1bb3a:	2200      	movs	r2, #0
   1bb3c:	e9cd 0100 	strd	r0, r1, [sp]
   1bb40:	2300      	movs	r3, #0
   1bb42:	f105 0008 	add.w	r0, r5, #8
   1bb46:	f00c f951 	bl	27dec <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   1bb4a:	f04f 32ff 	mov.w	r2, #4294967295
   1bb4e:	f04f 33ff 	mov.w	r3, #4294967295
   1bb52:	4811      	ldr	r0, [pc, #68]	; (1bb98 <adc_nrfx_read+0x220>)
   1bb54:	f009 fd7c 	bl	25650 <z_impl_k_sem_take>
	return ctx->status;
   1bb58:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   1bb5a:	e748      	b.n	1b9ee <adc_nrfx_read+0x76>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1bb5c:	480b      	ldr	r0, [pc, #44]	; (1bb8c <adc_nrfx_read+0x214>)
   1bb5e:	f7ff fe77 	bl	1b850 <adc_context_start_sampling>
   1bb62:	e7f2      	b.n	1bb4a <adc_nrfx_read+0x1d2>
   1bb64:	200081a8 	.word	0x200081a8
   1bb68:	00036a03 	.word	0x00036a03
   1bb6c:	000314a4 	.word	0x000314a4
   1bb70:	4000e000 	.word	0x4000e000
   1bb74:	20008208 	.word	0x20008208
   1bb78:	00036a21 	.word	0x00036a21
   1bb7c:	00036a60 	.word	0x00036a60
   1bb80:	00036a3b 	.word	0x00036a3b
   1bb84:	00036ab5 	.word	0x00036ab5
   1bb88:	00036a92 	.word	0x00036a92
   1bb8c:	20008168 	.word	0x20008168
   1bb90:	000f423f 	.word	0x000f423f
   1bb94:	000f4240 	.word	0x000f4240
   1bb98:	200081c0 	.word	0x200081c0

0001bb9c <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1bb9c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb9e:	2400      	movs	r4, #0
   1bba0:	4b0d      	ldr	r3, [pc, #52]	; (1bbd8 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1bba2:	200e      	movs	r0, #14
   1bba4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1bba8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1bbac:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1bbb0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1bbb4:	2212      	movs	r2, #18
   1bbb6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1bbba:	f7f4 ff2f 	bl	10a1c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bbbe:	4622      	mov	r2, r4
   1bbc0:	2101      	movs	r1, #1
   1bbc2:	200e      	movs	r0, #14
   1bbc4:	f7f4 ff5a 	bl	10a7c <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1bbc8:	4804      	ldr	r0, [pc, #16]	; (1bbdc <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1bbca:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1bbcc:	b913      	cbnz	r3, 1bbd4 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1bbce:	3040      	adds	r0, #64	; 0x40
   1bbd0:	f009 fcfa 	bl	255c8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1bbd4:	2000      	movs	r0, #0
   1bbd6:	bd10      	pop	{r4, pc}
   1bbd8:	4000e000 	.word	0x4000e000
   1bbdc:	20008168 	.word	0x20008168

0001bbe0 <saadc_irq_handler>:
{
   1bbe0:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bbe2:	4b2d      	ldr	r3, [pc, #180]	; (1bc98 <saadc_irq_handler+0xb8>)
   1bbe4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1bbe8:	2a00      	cmp	r2, #0
   1bbea:	d048      	beq.n	1bc7e <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bbec:	2200      	movs	r2, #0
   1bbee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1bbf2:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bbf6:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1bbf8:	4c28      	ldr	r4, [pc, #160]	; (1bc9c <saadc_irq_handler+0xbc>)
   1bbfa:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1bbfc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1bc00:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1bc02:	4625      	mov	r5, r4
   1bc04:	b3b3      	cbz	r3, 1bc74 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   1bc06:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   1bc0a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   1bc0e:	b133      	cbz	r3, 1bc1e <saadc_irq_handler+0x3e>
			action = callback(dev,
   1bc10:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1bc14:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1bc16:	2801      	cmp	r0, #1
   1bc18:	d014      	beq.n	1bc44 <saadc_irq_handler+0x64>
   1bc1a:	2802      	cmp	r0, #2
   1bc1c:	d024      	beq.n	1bc68 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1bc1e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   1bc22:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1bc26:	429a      	cmp	r2, r3
   1bc28:	d91e      	bls.n	1bc68 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1bc2a:	3301      	adds	r3, #1
   1bc2c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1bc30:	4b19      	ldr	r3, [pc, #100]	; (1bc98 <saadc_irq_handler+0xb8>)
   1bc32:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1bc36:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1bc3a:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1bc3c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1bc40:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1bc44:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1bc48:	b923      	cbnz	r3, 1bc54 <saadc_irq_handler+0x74>
}
   1bc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1bc4e:	4813      	ldr	r0, [pc, #76]	; (1bc9c <saadc_irq_handler+0xbc>)
   1bc50:	f7ff bdfe 	b.w	1b850 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1bc54:	e8d5 3fef 	ldaex	r3, [r5]
   1bc58:	1e5a      	subs	r2, r3, #1
   1bc5a:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1bc5e:	2900      	cmp	r1, #0
   1bc60:	d1f8      	bne.n	1bc54 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1bc62:	2b01      	cmp	r3, #1
   1bc64:	dcf1      	bgt.n	1bc4a <saadc_irq_handler+0x6a>
   1bc66:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1bc68:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1bc6c:	b113      	cbz	r3, 1bc74 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   1bc6e:	480c      	ldr	r0, [pc, #48]	; (1bca0 <saadc_irq_handler+0xc0>)
   1bc70:	f014 fb98 	bl	303a4 <z_impl_k_timer_stop>
   1bc74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1bc78:	480a      	ldr	r0, [pc, #40]	; (1bca4 <saadc_irq_handler+0xc4>)
   1bc7a:	f009 bca5 	b.w	255c8 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bc7e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1bc82:	2900      	cmp	r1, #0
   1bc84:	d0ef      	beq.n	1bc66 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bc86:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1bc8a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bc8e:	2201      	movs	r2, #1
   1bc90:	609a      	str	r2, [r3, #8]
   1bc92:	601a      	str	r2, [r3, #0]
   1bc94:	605a      	str	r2, [r3, #4]
}
   1bc96:	e7e6      	b.n	1bc66 <saadc_irq_handler+0x86>
   1bc98:	4000e000 	.word	0x4000e000
   1bc9c:	20008168 	.word	0x20008168
   1bca0:	20008170 	.word	0x20008170
   1bca4:	200081c0 	.word	0x200081c0

0001bca8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1bca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcaa:	2340      	movs	r3, #64	; 0x40
{
   1bcac:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1bcae:	490a      	ldr	r1, [pc, #40]	; (1bcd8 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcb0:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1bcb2:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcb4:	1149      	asrs	r1, r1, #5
{
   1bcb6:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcb8:	4623      	mov	r3, r4
   1bcba:	4a08      	ldr	r2, [pc, #32]	; (1bcdc <onoff_start+0x34>)
   1bcbc:	4808      	ldr	r0, [pc, #32]	; (1bce0 <onoff_start+0x38>)
   1bcbe:	f012 f9e3 	bl	2e088 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1bcc2:	1e01      	subs	r1, r0, #0
   1bcc4:	da05      	bge.n	1bcd2 <onoff_start+0x2a>
		notify(mgr, err);
   1bcc6:	4628      	mov	r0, r5
   1bcc8:	4623      	mov	r3, r4
	}
}
   1bcca:	b003      	add	sp, #12
   1bccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1bcd0:	4718      	bx	r3
}
   1bcd2:	b003      	add	sp, #12
   1bcd4:	bd30      	pop	{r4, r5, pc}
   1bcd6:	bf00      	nop
   1bcd8:	200217cc 	.word	0x200217cc
   1bcdc:	0002e0f7 	.word	0x0002e0f7
   1bce0:	00030f1c 	.word	0x00030f1c

0001bce4 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bce4:	b2c9      	uxtb	r1, r1
   1bce6:	2903      	cmp	r1, #3
{
   1bce8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bcea:	d909      	bls.n	1bd00 <get_status+0x1c>
   1bcec:	4909      	ldr	r1, [pc, #36]	; (1bd14 <get_status+0x30>)
   1bcee:	480a      	ldr	r0, [pc, #40]	; (1bd18 <get_status+0x34>)
   1bcf0:	237a      	movs	r3, #122	; 0x7a
   1bcf2:	4a0a      	ldr	r2, [pc, #40]	; (1bd1c <get_status+0x38>)
   1bcf4:	f00e fce1 	bl	2a6ba <assert_print>
   1bcf8:	217a      	movs	r1, #122	; 0x7a
   1bcfa:	4808      	ldr	r0, [pc, #32]	; (1bd1c <get_status+0x38>)
   1bcfc:	f00e fcd6 	bl	2a6ac <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1bd00:	220c      	movs	r2, #12
   1bd02:	6903      	ldr	r3, [r0, #16]
   1bd04:	fb01 3302 	mla	r3, r1, r2, r3
   1bd08:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   1bd0c:	f000 0007 	and.w	r0, r0, #7
   1bd10:	bd08      	pop	{r3, pc}
   1bd12:	bf00      	nop
   1bd14:	00036b2f 	.word	0x00036b2f
   1bd18:	00032659 	.word	0x00032659
   1bd1c:	00036af2 	.word	0x00036af2

0001bd20 <stop>:
{
   1bd20:	b570      	push	{r4, r5, r6, lr}
   1bd22:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bd24:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   1bd26:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bd28:	d90b      	bls.n	1bd42 <stop+0x22>
   1bd2a:	491a      	ldr	r1, [pc, #104]	; (1bd94 <stop+0x74>)
   1bd2c:	481a      	ldr	r0, [pc, #104]	; (1bd98 <stop+0x78>)
   1bd2e:	f240 135d 	movw	r3, #349	; 0x15d
   1bd32:	4a1a      	ldr	r2, [pc, #104]	; (1bd9c <stop+0x7c>)
   1bd34:	f00e fcc1 	bl	2a6ba <assert_print>
   1bd38:	f240 115d 	movw	r1, #349	; 0x15d
   1bd3c:	4817      	ldr	r0, [pc, #92]	; (1bd9c <stop+0x7c>)
   1bd3e:	f00e fcb5 	bl	2a6ac <assert_post_action>
	__asm__ volatile(
   1bd42:	f04f 0420 	mov.w	r4, #32
   1bd46:	f3ef 8511 	mrs	r5, BASEPRI
   1bd4a:	f384 8812 	msr	BASEPRI_MAX, r4
   1bd4e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1bd52:	260c      	movs	r6, #12
   1bd54:	fb06 3401 	mla	r4, r6, r1, r3
   1bd58:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1bd5c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1bd60:	d008      	beq.n	1bd74 <stop+0x54>
   1bd62:	42a2      	cmp	r2, r4
   1bd64:	d006      	beq.n	1bd74 <stop+0x54>
	__asm__ volatile(
   1bd66:	f385 8811 	msr	BASEPRI, r5
   1bd6a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1bd6e:	f04f 30ff 	mov.w	r0, #4294967295
}
   1bd72:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1bd74:	2201      	movs	r2, #1
   1bd76:	4371      	muls	r1, r6
   1bd78:	440b      	add	r3, r1
   1bd7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1bd7e:	f385 8811 	msr	BASEPRI, r5
   1bd82:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1bd86:	6843      	ldr	r3, [r0, #4]
   1bd88:	440b      	add	r3, r1
   1bd8a:	685b      	ldr	r3, [r3, #4]
   1bd8c:	4798      	blx	r3
	return 0;
   1bd8e:	2000      	movs	r0, #0
   1bd90:	e7ef      	b.n	1bd72 <stop+0x52>
   1bd92:	bf00      	nop
   1bd94:	00036b2f 	.word	0x00036b2f
   1bd98:	00032659 	.word	0x00032659
   1bd9c:	00036af2 	.word	0x00036af2

0001bda0 <onoff_stop>:
{
   1bda0:	b570      	push	{r4, r5, r6, lr}
   1bda2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1bda4:	4906      	ldr	r1, [pc, #24]	; (1bdc0 <onoff_stop+0x20>)
{
   1bda6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1bda8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bdaa:	1149      	asrs	r1, r1, #5
   1bdac:	2240      	movs	r2, #64	; 0x40
   1bdae:	4805      	ldr	r0, [pc, #20]	; (1bdc4 <onoff_stop+0x24>)
   1bdb0:	f7ff ffb6 	bl	1bd20 <stop>
	notify(mgr, res);
   1bdb4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bdb6:	4601      	mov	r1, r0
	notify(mgr, res);
   1bdb8:	4620      	mov	r0, r4
}
   1bdba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1bdbe:	4718      	bx	r3
   1bdc0:	200217cc 	.word	0x200217cc
   1bdc4:	00030f1c 	.word	0x00030f1c

0001bdc8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1bdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bdcc:	2200      	movs	r2, #0
   1bdce:	2101      	movs	r1, #1
{
   1bdd0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bdd2:	2005      	movs	r0, #5
   1bdd4:	f7f4 fe52 	bl	10a7c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1bdd8:	4811      	ldr	r0, [pc, #68]	; (1be20 <clk_init+0x58>)
   1bdda:	f003 f813 	bl	1ee04 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1bdde:	4b11      	ldr	r3, [pc, #68]	; (1be24 <clk_init+0x5c>)
   1bde0:	4298      	cmp	r0, r3
   1bde2:	d119      	bne.n	1be18 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1bde4:	f003 f832 	bl	1ee4c <nrfx_clock_enable>
   1bde8:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1bdea:	f04f 080c 	mov.w	r8, #12
   1bdee:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bdf0:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1be28 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   1bdf4:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bdf6:	4649      	mov	r1, r9
   1bdf8:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   1bdfc:	f00e fc18 	bl	2a630 <onoff_manager_init>
		if (err < 0) {
   1be00:	2800      	cmp	r0, #0
   1be02:	db07      	blt.n	1be14 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1be04:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1be08:	3401      	adds	r4, #1
   1be0a:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1be0c:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1be10:	d1f0      	bne.n	1bdf4 <clk_init+0x2c>
	}

	return 0;
   1be12:	2000      	movs	r0, #0
}
   1be14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1be18:	f06f 0004 	mvn.w	r0, #4
   1be1c:	e7fa      	b.n	1be14 <clk_init+0x4c>
   1be1e:	bf00      	nop
   1be20:	0001be65 	.word	0x0001be65
   1be24:	0bad0000 	.word	0x0bad0000
   1be28:	00032274 	.word	0x00032274

0001be2c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1be2c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1be2e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1be30:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1be32:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1be34:	434b      	muls	r3, r1
   1be36:	4809      	ldr	r0, [pc, #36]	; (1be5c <clkstarted_handle.constprop.0+0x30>)
   1be38:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1be3a:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   1be3c:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1be40:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1be42:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1be46:	f012 f90c 	bl	2e062 <set_on_state>
	if (callback) {
   1be4a:	b12d      	cbz	r5, 1be58 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1be4c:	4632      	mov	r2, r6
   1be4e:	462b      	mov	r3, r5
}
   1be50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1be54:	4802      	ldr	r0, [pc, #8]	; (1be60 <clkstarted_handle.constprop.0+0x34>)
   1be56:	4718      	bx	r3
}
   1be58:	bd70      	pop	{r4, r5, r6, pc}
   1be5a:	bf00      	nop
   1be5c:	200217cc 	.word	0x200217cc
   1be60:	00030f1c 	.word	0x00030f1c

0001be64 <clock_event_handler>:
{
   1be64:	b508      	push	{r3, lr}
	switch (event) {
   1be66:	2805      	cmp	r0, #5
   1be68:	d820      	bhi.n	1beac <clock_event_handler+0x48>
   1be6a:	e8df f000 	tbb	[pc, r0]
   1be6e:	1103      	.short	0x1103
   1be70:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1be74:	4b13      	ldr	r3, [pc, #76]	; (1bec4 <clock_event_handler+0x60>)
   1be76:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   1be7a:	f010 0007 	ands.w	r0, r0, #7
   1be7e:	d11f      	bne.n	1bec0 <clock_event_handler+0x5c>
}
   1be80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1be84:	f7ff bfd2 	b.w	1be2c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1be88:	2002      	movs	r0, #2
   1be8a:	e7f9      	b.n	1be80 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   1be8c:	2003      	movs	r0, #3
   1be8e:	e7f7      	b.n	1be80 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1be90:	2001      	movs	r0, #1
   1be92:	e7f5      	b.n	1be80 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   1be94:	490c      	ldr	r1, [pc, #48]	; (1bec8 <clock_event_handler+0x64>)
   1be96:	f240 236e 	movw	r3, #622	; 0x26e
   1be9a:	4a0c      	ldr	r2, [pc, #48]	; (1becc <clock_event_handler+0x68>)
   1be9c:	480c      	ldr	r0, [pc, #48]	; (1bed0 <clock_event_handler+0x6c>)
   1be9e:	f00e fc0c 	bl	2a6ba <assert_print>
   1bea2:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1bea6:	4809      	ldr	r0, [pc, #36]	; (1becc <clock_event_handler+0x68>)
   1bea8:	f00e fc00 	bl	2a6ac <assert_post_action>
   1beac:	4906      	ldr	r1, [pc, #24]	; (1bec8 <clock_event_handler+0x64>)
   1beae:	f240 2372 	movw	r3, #626	; 0x272
   1beb2:	4a06      	ldr	r2, [pc, #24]	; (1becc <clock_event_handler+0x68>)
   1beb4:	4806      	ldr	r0, [pc, #24]	; (1bed0 <clock_event_handler+0x6c>)
   1beb6:	f00e fc00 	bl	2a6ba <assert_print>
   1beba:	f240 2172 	movw	r1, #626	; 0x272
   1bebe:	e7f2      	b.n	1bea6 <clock_event_handler+0x42>
}
   1bec0:	bd08      	pop	{r3, pc}
   1bec2:	bf00      	nop
   1bec4:	200217cc 	.word	0x200217cc
   1bec8:	00037b2a 	.word	0x00037b2a
   1becc:	00036af2 	.word	0x00036af2
   1bed0:	00032659 	.word	0x00032659

0001bed4 <generic_hfclk_start>:
{
   1bed4:	b508      	push	{r3, lr}
	__asm__ volatile(
   1bed6:	f04f 0320 	mov.w	r3, #32
   1beda:	f3ef 8111 	mrs	r1, BASEPRI
   1bede:	f383 8812 	msr	BASEPRI_MAX, r3
   1bee2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1bee6:	4a11      	ldr	r2, [pc, #68]	; (1bf2c <generic_hfclk_start+0x58>)
   1bee8:	6813      	ldr	r3, [r2, #0]
   1beea:	f043 0002 	orr.w	r0, r3, #2
   1beee:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1bef0:	07da      	lsls	r2, r3, #31
   1bef2:	d408      	bmi.n	1bf06 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1bef4:	f381 8811 	msr	BASEPRI, r1
   1bef8:	f3bf 8f6f 	isb	sy
}
   1befc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1bf00:	2001      	movs	r0, #1
   1bf02:	f002 bfcd 	b.w	1eea0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bf06:	4b0a      	ldr	r3, [pc, #40]	; (1bf30 <generic_hfclk_start+0x5c>)
   1bf08:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bf0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1bf10:	07d3      	lsls	r3, r2, #31
   1bf12:	d5ef      	bpl.n	1bef4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1bf14:	4807      	ldr	r0, [pc, #28]	; (1bf34 <generic_hfclk_start+0x60>)
   1bf16:	f012 f8a4 	bl	2e062 <set_on_state>
   1bf1a:	f381 8811 	msr	BASEPRI, r1
   1bf1e:	f3bf 8f6f 	isb	sy
}
   1bf22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1bf26:	2000      	movs	r0, #0
   1bf28:	f7ff bf80 	b.w	1be2c <clkstarted_handle.constprop.0>
   1bf2c:	2002187c 	.word	0x2002187c
   1bf30:	40005000 	.word	0x40005000
   1bf34:	20021854 	.word	0x20021854

0001bf38 <api_blocking_start>:
{
   1bf38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bf3a:	2200      	movs	r2, #0
   1bf3c:	2301      	movs	r3, #1
   1bf3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1bf42:	ab04      	add	r3, sp, #16
   1bf44:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bf48:	4a09      	ldr	r2, [pc, #36]	; (1bf70 <api_blocking_start+0x38>)
   1bf4a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bf4c:	f8cd d000 	str.w	sp, [sp]
   1bf50:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bf54:	f012 f8c8 	bl	2e0e8 <api_start>
	if (err < 0) {
   1bf58:	2800      	cmp	r0, #0
   1bf5a:	db05      	blt.n	1bf68 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1bf5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1bf60:	2300      	movs	r3, #0
   1bf62:	4668      	mov	r0, sp
   1bf64:	f009 fb74 	bl	25650 <z_impl_k_sem_take>
}
   1bf68:	b007      	add	sp, #28
   1bf6a:	f85d fb04 	ldr.w	pc, [sp], #4
   1bf6e:	bf00      	nop
   1bf70:	0002e127 	.word	0x0002e127

0001bf74 <generic_hfclk_stop>:
{
   1bf74:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bf76:	f04f 0320 	mov.w	r3, #32
   1bf7a:	f3ef 8411 	mrs	r4, BASEPRI
   1bf7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf82:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1bf86:	4a07      	ldr	r2, [pc, #28]	; (1bfa4 <generic_hfclk_stop+0x30>)
   1bf88:	6813      	ldr	r3, [r2, #0]
   1bf8a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1bf8e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1bf90:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1bf92:	d402      	bmi.n	1bf9a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1bf94:	2001      	movs	r0, #1
   1bf96:	f003 f801 	bl	1ef9c <nrfx_clock_stop>
	__asm__ volatile(
   1bf9a:	f384 8811 	msr	BASEPRI, r4
   1bf9e:	f3bf 8f6f 	isb	sy
}
   1bfa2:	bd10      	pop	{r4, pc}
   1bfa4:	2002187c 	.word	0x2002187c

0001bfa8 <z_nrf_clock_control_lf_on>:
{
   1bfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bfac:	2201      	movs	r2, #1
   1bfae:	4606      	mov	r6, r0
   1bfb0:	4941      	ldr	r1, [pc, #260]	; (1c0b8 <z_nrf_clock_control_lf_on+0x110>)
   1bfb2:	e8d1 3fef 	ldaex	r3, [r1]
   1bfb6:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1bfba:	2800      	cmp	r0, #0
   1bfbc:	d1f9      	bne.n	1bfb2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1bfbe:	b9a3      	cbnz	r3, 1bfea <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1bfc0:	493e      	ldr	r1, [pc, #248]	; (1c0bc <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1bfc2:	483f      	ldr	r0, [pc, #252]	; (1c0c0 <z_nrf_clock_control_lf_on+0x118>)
   1bfc4:	604b      	str	r3, [r1, #4]
   1bfc6:	60cb      	str	r3, [r1, #12]
   1bfc8:	608a      	str	r2, [r1, #8]
   1bfca:	f7f1 f83b 	bl	d044 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1bfce:	2800      	cmp	r0, #0
   1bfd0:	da0b      	bge.n	1bfea <z_nrf_clock_control_lf_on+0x42>
   1bfd2:	493c      	ldr	r1, [pc, #240]	; (1c0c4 <z_nrf_clock_control_lf_on+0x11c>)
   1bfd4:	f44f 730c 	mov.w	r3, #560	; 0x230
   1bfd8:	4a3b      	ldr	r2, [pc, #236]	; (1c0c8 <z_nrf_clock_control_lf_on+0x120>)
   1bfda:	483c      	ldr	r0, [pc, #240]	; (1c0cc <z_nrf_clock_control_lf_on+0x124>)
   1bfdc:	f00e fb6d 	bl	2a6ba <assert_print>
   1bfe0:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1bfe4:	4838      	ldr	r0, [pc, #224]	; (1c0c8 <z_nrf_clock_control_lf_on+0x120>)
   1bfe6:	f00e fb61 	bl	2a6ac <assert_post_action>
	switch (start_mode) {
   1bfea:	b35e      	cbz	r6, 1c044 <z_nrf_clock_control_lf_on+0x9c>
   1bfec:	1e73      	subs	r3, r6, #1
   1bfee:	2b01      	cmp	r3, #1
   1bff0:	d858      	bhi.n	1c0a4 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1bff2:	2e01      	cmp	r6, #1
   1bff4:	d106      	bne.n	1c004 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1bff6:	4b36      	ldr	r3, [pc, #216]	; (1c0d0 <z_nrf_clock_control_lf_on+0x128>)
   1bff8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1bffc:	f003 0303 	and.w	r3, r3, #3
   1c000:	2b02      	cmp	r3, #2
   1c002:	d01f      	beq.n	1c044 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c004:	f014 f8a0 	bl	30148 <k_is_in_isr>
   1c008:	4605      	mov	r5, r0
   1c00a:	b9e8      	cbnz	r0, 1c048 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   1c00c:	4b31      	ldr	r3, [pc, #196]	; (1c0d4 <z_nrf_clock_control_lf_on+0x12c>)
   1c00e:	781b      	ldrb	r3, [r3, #0]
   1c010:	b1d3      	cbz	r3, 1c048 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1c012:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1c014:	4607      	mov	r7, r0
   1c016:	4b2e      	ldr	r3, [pc, #184]	; (1c0d0 <z_nrf_clock_control_lf_on+0x128>)
   1c018:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c01c:	4c2c      	ldr	r4, [pc, #176]	; (1c0d0 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c01e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1c0d8 <z_nrf_clock_control_lf_on+0x130>
   1c022:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c026:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c02a:	03d2      	lsls	r2, r2, #15
   1c02c:	d516      	bpl.n	1c05c <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c02e:	f003 0303 	and.w	r3, r3, #3
   1c032:	2b02      	cmp	r3, #2
   1c034:	d001      	beq.n	1c03a <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c036:	2e01      	cmp	r6, #1
   1c038:	d110      	bne.n	1c05c <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1c03a:	b375      	cbz	r5, 1c09a <z_nrf_clock_control_lf_on+0xf2>
   1c03c:	f387 8811 	msr	BASEPRI, r7
   1c040:	f3bf 8f6f 	isb	sy
}
   1c044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c048:	f04f 0320 	mov.w	r3, #32
   1c04c:	f3ef 8711 	mrs	r7, BASEPRI
   1c050:	f383 8812 	msr	BASEPRI_MAX, r3
   1c054:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c058:	2501      	movs	r5, #1
   1c05a:	e7df      	b.n	1c01c <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c05c:	b1c5      	cbz	r5, 1c090 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c05e:	4638      	mov	r0, r7
   1c060:	f7f4 fc6c 	bl	1093c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c064:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c068:	b2db      	uxtb	r3, r3
   1c06a:	2b01      	cmp	r3, #1
   1c06c:	d1d9      	bne.n	1c022 <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c06e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c072:	2a00      	cmp	r2, #0
   1c074:	d0d5      	beq.n	1c022 <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c076:	2200      	movs	r2, #0
   1c078:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1c07c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c080:	2202      	movs	r2, #2
   1c082:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1c086:	2220      	movs	r2, #32
   1c088:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c08c:	60a3      	str	r3, [r4, #8]
}
   1c08e:	e7c8      	b.n	1c022 <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   1c090:	2100      	movs	r1, #0
   1c092:	2021      	movs	r0, #33	; 0x21
   1c094:	f00b f98c 	bl	273b0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c098:	e7e4      	b.n	1c064 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1c09a:	2202      	movs	r2, #2
   1c09c:	4b0c      	ldr	r3, [pc, #48]	; (1c0d0 <z_nrf_clock_control_lf_on+0x128>)
   1c09e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c0a2:	e7cf      	b.n	1c044 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1c0a4:	490d      	ldr	r1, [pc, #52]	; (1c0dc <z_nrf_clock_control_lf_on+0x134>)
   1c0a6:	f240 2342 	movw	r3, #578	; 0x242
   1c0aa:	4a07      	ldr	r2, [pc, #28]	; (1c0c8 <z_nrf_clock_control_lf_on+0x120>)
   1c0ac:	4807      	ldr	r0, [pc, #28]	; (1c0cc <z_nrf_clock_control_lf_on+0x124>)
   1c0ae:	f00e fb04 	bl	2a6ba <assert_print>
   1c0b2:	f240 2142 	movw	r1, #578	; 0x242
   1c0b6:	e795      	b.n	1bfe4 <z_nrf_clock_control_lf_on+0x3c>
   1c0b8:	200217c8 	.word	0x200217c8
   1c0bc:	200217b8 	.word	0x200217b8
   1c0c0:	200217ec 	.word	0x200217ec
   1c0c4:	0003389d 	.word	0x0003389d
   1c0c8:	00036af2 	.word	0x00036af2
   1c0cc:	00032659 	.word	0x00032659
   1c0d0:	40005000 	.word	0x40005000
   1c0d4:	20022827 	.word	0x20022827
   1c0d8:	e000e100 	.word	0xe000e100
   1c0dc:	00037b2a 	.word	0x00037b2a

0001c0e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1c0e0:	b508      	push	{r3, lr}
   1c0e2:	4807      	ldr	r0, [pc, #28]	; (1c100 <uart_console_init+0x20>)
   1c0e4:	f013 fff9 	bl	300da <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1c0e8:	b138      	cbz	r0, 1c0fa <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c0ea:	4806      	ldr	r0, [pc, #24]	; (1c104 <uart_console_init+0x24>)
   1c0ec:	f7f5 fbf4 	bl	118d8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c0f0:	4804      	ldr	r0, [pc, #16]	; (1c104 <uart_console_init+0x24>)
   1c0f2:	f7f0 fc25 	bl	c940 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c0f6:	2000      	movs	r0, #0
}
   1c0f8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c0fa:	f06f 0012 	mvn.w	r0, #18
   1c0fe:	e7fb      	b.n	1c0f8 <uart_console_init+0x18>
   1c100:	00030fac 	.word	0x00030fac
   1c104:	0001c109 	.word	0x0001c109

0001c108 <console_out>:
	if ('\n' == c) {
   1c108:	280a      	cmp	r0, #10
{
   1c10a:	b538      	push	{r3, r4, r5, lr}
   1c10c:	4604      	mov	r4, r0
   1c10e:	4d07      	ldr	r5, [pc, #28]	; (1c12c <console_out+0x24>)
	if ('\n' == c) {
   1c110:	d104      	bne.n	1c11c <console_out+0x14>
	api->poll_out(dev, out_char);
   1c112:	68ab      	ldr	r3, [r5, #8]
   1c114:	210d      	movs	r1, #13
   1c116:	4628      	mov	r0, r5
   1c118:	69db      	ldr	r3, [r3, #28]
   1c11a:	4798      	blx	r3
   1c11c:	68ab      	ldr	r3, [r5, #8]
   1c11e:	4803      	ldr	r0, [pc, #12]	; (1c12c <console_out+0x24>)
   1c120:	69db      	ldr	r3, [r3, #28]
   1c122:	b2e1      	uxtb	r1, r4
   1c124:	4798      	blx	r3
}
   1c126:	4620      	mov	r0, r4
   1c128:	bd38      	pop	{r3, r4, r5, pc}
   1c12a:	bf00      	nop
   1c12c:	00030fac 	.word	0x00030fac

0001c130 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1c130:	b510      	push	{r4, lr}
	return port->data;
   1c132:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1c134:	b961      	cbnz	r1, 1c150 <gpio_nrfx_manage_callback+0x20>
   1c136:	4920      	ldr	r1, [pc, #128]	; (1c1b8 <gpio_nrfx_manage_callback+0x88>)
   1c138:	232a      	movs	r3, #42	; 0x2a
   1c13a:	4a20      	ldr	r2, [pc, #128]	; (1c1bc <gpio_nrfx_manage_callback+0x8c>)
   1c13c:	4820      	ldr	r0, [pc, #128]	; (1c1c0 <gpio_nrfx_manage_callback+0x90>)
   1c13e:	f00e fabc 	bl	2a6ba <assert_print>
   1c142:	4820      	ldr	r0, [pc, #128]	; (1c1c4 <gpio_nrfx_manage_callback+0x94>)
   1c144:	f00e fab9 	bl	2a6ba <assert_print>
   1c148:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1c14a:	481c      	ldr	r0, [pc, #112]	; (1c1bc <gpio_nrfx_manage_callback+0x8c>)
   1c14c:	f00e faae 	bl	2a6ac <assert_post_action>
   1c150:	6848      	ldr	r0, [r1, #4]
   1c152:	b950      	cbnz	r0, 1c16a <gpio_nrfx_manage_callback+0x3a>
   1c154:	491c      	ldr	r1, [pc, #112]	; (1c1c8 <gpio_nrfx_manage_callback+0x98>)
   1c156:	232b      	movs	r3, #43	; 0x2b
   1c158:	4a18      	ldr	r2, [pc, #96]	; (1c1bc <gpio_nrfx_manage_callback+0x8c>)
   1c15a:	4819      	ldr	r0, [pc, #100]	; (1c1c0 <gpio_nrfx_manage_callback+0x90>)
   1c15c:	f00e faad 	bl	2a6ba <assert_print>
   1c160:	481a      	ldr	r0, [pc, #104]	; (1c1cc <gpio_nrfx_manage_callback+0x9c>)
   1c162:	f00e faaa 	bl	2a6ba <assert_print>
   1c166:	212b      	movs	r1, #43	; 0x2b
   1c168:	e7ef      	b.n	1c14a <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1c16a:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1c16c:	b1f8      	cbz	r0, 1c1ae <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c16e:	4288      	cmp	r0, r1
   1c170:	d119      	bne.n	1c1a6 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1c172:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1c174:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c176:	42a1      	cmp	r1, r4
	list->head = node;
   1c178:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c17a:	d100      	bne.n	1c17e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1c17c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c17e:	2000      	movs	r0, #0
   1c180:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1c182:	b12a      	cbz	r2, 1c190 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1c184:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c186:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c188:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c18a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c18c:	b902      	cbnz	r2, 1c190 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1c18e:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c190:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c192:	e010      	b.n	1c1b6 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c194:	4281      	cmp	r1, r0
   1c196:	d106      	bne.n	1c1a6 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1c198:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1c19a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c19c:	6898      	ldr	r0, [r3, #8]
   1c19e:	4281      	cmp	r1, r0
   1c1a0:	d1ed      	bne.n	1c17e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1c1a2:	609c      	str	r4, [r3, #8]
}
   1c1a4:	e7eb      	b.n	1c17e <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1c1a6:	4604      	mov	r4, r0
   1c1a8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c1aa:	2800      	cmp	r0, #0
   1c1ac:	d1f2      	bne.n	1c194 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1c1ae:	2a00      	cmp	r2, #0
   1c1b0:	d1e8      	bne.n	1c184 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1c1b2:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1c1b6:	bd10      	pop	{r4, pc}
   1c1b8:	00032c43 	.word	0x00032c43
   1c1bc:	00036b8d 	.word	0x00036b8d
   1c1c0:	00032659 	.word	0x00032659
   1c1c4:	00036bc9 	.word	0x00036bc9
   1c1c8:	00036bd8 	.word	0x00036bd8
   1c1cc:	00036bea 	.word	0x00036bea

0001c1d0 <gpio_nrfx_pin_interrupt_configure>:
{
   1c1d0:	b530      	push	{r4, r5, lr}
	return port->config;
   1c1d2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c1d4:	f001 041f 	and.w	r4, r1, #31
   1c1d8:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c1da:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c1de:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c1e0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c1e4:	d105      	bne.n	1c1f2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c1e6:	4620      	mov	r0, r4
   1c1e8:	f003 fa22 	bl	1f630 <nrfx_gpiote_trigger_disable>
		return 0;
   1c1ec:	2000      	movs	r0, #0
}
   1c1ee:	b005      	add	sp, #20
   1c1f0:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c1f2:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c1f4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c1f8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c1fc:	d114      	bne.n	1c228 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c1fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c202:	bf0c      	ite	eq
   1c204:	2304      	moveq	r3, #4
   1c206:	2305      	movne	r3, #5
   1c208:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c20c:	2300      	movs	r3, #0
   1c20e:	4620      	mov	r0, r4
   1c210:	4619      	mov	r1, r3
   1c212:	aa02      	add	r2, sp, #8
   1c214:	f003 f816 	bl	1f244 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c218:	4b2a      	ldr	r3, [pc, #168]	; (1c2c4 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1c21a:	4298      	cmp	r0, r3
   1c21c:	d14f      	bne.n	1c2be <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c21e:	2101      	movs	r1, #1
   1c220:	4620      	mov	r0, r4
   1c222:	f003 f99b 	bl	1f55c <nrfx_gpiote_trigger_enable>
	return 0;
   1c226:	e7e1      	b.n	1c1ec <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c228:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c22c:	d024      	beq.n	1c278 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1c22e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c232:	bf14      	ite	ne
   1c234:	2301      	movne	r3, #1
   1c236:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c238:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c23c:	6883      	ldr	r3, [r0, #8]
   1c23e:	40cb      	lsrs	r3, r1
   1c240:	07d8      	lsls	r0, r3, #31
   1c242:	d4e3      	bmi.n	1c20c <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c244:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c248:	d1e0      	bne.n	1c20c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1c24a:	0962      	lsrs	r2, r4, #5
   1c24c:	f004 031f 	and.w	r3, r4, #31
   1c250:	d014      	beq.n	1c27c <gpio_nrfx_pin_interrupt_configure+0xac>
   1c252:	2a01      	cmp	r2, #1
   1c254:	d104      	bne.n	1c260 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1c256:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c25a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c25c:	07d1      	lsls	r1, r2, #31
   1c25e:	d414      	bmi.n	1c28a <gpio_nrfx_pin_interrupt_configure+0xba>
   1c260:	4919      	ldr	r1, [pc, #100]	; (1c2c8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1c262:	481a      	ldr	r0, [pc, #104]	; (1c2cc <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1c264:	f240 2347 	movw	r3, #583	; 0x247
   1c268:	4a19      	ldr	r2, [pc, #100]	; (1c2d0 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1c26a:	f00e fa26 	bl	2a6ba <assert_print>
   1c26e:	f240 2147 	movw	r1, #583	; 0x247
   1c272:	4817      	ldr	r0, [pc, #92]	; (1c2d0 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1c274:	f00e fa1a 	bl	2a6ac <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c278:	2303      	movs	r3, #3
   1c27a:	e7dd      	b.n	1c238 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1c27c:	f04f 32ff 	mov.w	r2, #4294967295
   1c280:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c282:	07d2      	lsls	r2, r2, #31
   1c284:	d5ec      	bpl.n	1c260 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1c286:	4a13      	ldr	r2, [pc, #76]	; (1c2d4 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1c288:	e000      	b.n	1c28c <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1c28a:	4a13      	ldr	r2, [pc, #76]	; (1c2d8 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c28c:	3380      	adds	r3, #128	; 0x80
   1c28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c292:	07db      	lsls	r3, r3, #31
   1c294:	d4ba      	bmi.n	1c20c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c296:	f10d 0507 	add.w	r5, sp, #7
   1c29a:	4629      	mov	r1, r5
   1c29c:	4620      	mov	r0, r4
   1c29e:	f003 f8f7 	bl	1f490 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c2a2:	4b0e      	ldr	r3, [pc, #56]	; (1c2dc <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1c2a4:	4298      	cmp	r0, r3
   1c2a6:	d001      	beq.n	1c2ac <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   1c2a8:	9503      	str	r5, [sp, #12]
   1c2aa:	e7af      	b.n	1c20c <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c2ac:	4628      	mov	r0, r5
   1c2ae:	f003 f94f 	bl	1f550 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c2b2:	4b04      	ldr	r3, [pc, #16]	; (1c2c4 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1c2b4:	4298      	cmp	r0, r3
   1c2b6:	d0f7      	beq.n	1c2a8 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1c2b8:	f06f 000b 	mvn.w	r0, #11
   1c2bc:	e797      	b.n	1c1ee <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c2be:	f06f 0015 	mvn.w	r0, #21
   1c2c2:	e794      	b.n	1c1ee <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c2c4:	0bad0000 	.word	0x0bad0000
   1c2c8:	00036c34 	.word	0x00036c34
   1c2cc:	00032659 	.word	0x00032659
   1c2d0:	00036c01 	.word	0x00036c01
   1c2d4:	40842500 	.word	0x40842500
   1c2d8:	40842800 	.word	0x40842800
   1c2dc:	0bad0004 	.word	0x0bad0004

0001c2e0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c2e0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c2e2:	f003 f925 	bl	1f530 <nrfx_gpiote_is_init>
   1c2e6:	4604      	mov	r4, r0
   1c2e8:	b968      	cbnz	r0, 1c306 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c2ea:	f003 f8f9 	bl	1f4e0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c2ee:	4b08      	ldr	r3, [pc, #32]	; (1c310 <gpio_nrfx_init+0x30>)
   1c2f0:	4298      	cmp	r0, r3
   1c2f2:	d10a      	bne.n	1c30a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c2f4:	4621      	mov	r1, r4
   1c2f6:	4807      	ldr	r0, [pc, #28]	; (1c314 <gpio_nrfx_init+0x34>)
   1c2f8:	f003 f8c4 	bl	1f484 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c2fc:	4622      	mov	r2, r4
   1c2fe:	2105      	movs	r1, #5
   1c300:	202f      	movs	r0, #47	; 0x2f
   1c302:	f7f4 fbbb 	bl	10a7c <z_arm_irq_priority_set>
		return 0;
   1c306:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c308:	bd10      	pop	{r4, pc}
		return -EIO;
   1c30a:	f06f 0004 	mvn.w	r0, #4
   1c30e:	e7fb      	b.n	1c308 <gpio_nrfx_init+0x28>
   1c310:	0bad0000 	.word	0x0bad0000
   1c314:	0001c319 	.word	0x0001c319

0001c318 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c318:	0942      	lsrs	r2, r0, #5
{
   1c31a:	4603      	mov	r3, r0
   1c31c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c31e:	d002      	beq.n	1c326 <nrfx_gpio_handler+0xe>
   1c320:	2a01      	cmp	r2, #1
   1c322:	d01e      	beq.n	1c362 <nrfx_gpio_handler+0x4a>
}
   1c324:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c326:	4e14      	ldr	r6, [pc, #80]	; (1c378 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1c328:	6932      	ldr	r2, [r6, #16]
   1c32a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c32c:	2900      	cmp	r1, #0
   1c32e:	d0f9      	beq.n	1c324 <nrfx_gpio_handler+0xc>
   1c330:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1c332:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   1c336:	680c      	ldr	r4, [r1, #0]
   1c338:	409d      	lsls	r5, r3
   1c33a:	2900      	cmp	r1, #0
   1c33c:	d0f2      	beq.n	1c324 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1c33e:	688a      	ldr	r2, [r1, #8]
   1c340:	402a      	ands	r2, r5
   1c342:	d012      	beq.n	1c36a <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1c344:	684b      	ldr	r3, [r1, #4]
   1c346:	b973      	cbnz	r3, 1c366 <nrfx_gpio_handler+0x4e>
   1c348:	490c      	ldr	r1, [pc, #48]	; (1c37c <nrfx_gpio_handler+0x64>)
   1c34a:	234d      	movs	r3, #77	; 0x4d
   1c34c:	4a0c      	ldr	r2, [pc, #48]	; (1c380 <nrfx_gpio_handler+0x68>)
   1c34e:	480d      	ldr	r0, [pc, #52]	; (1c384 <nrfx_gpio_handler+0x6c>)
   1c350:	f00e f9b3 	bl	2a6ba <assert_print>
   1c354:	480c      	ldr	r0, [pc, #48]	; (1c388 <nrfx_gpio_handler+0x70>)
   1c356:	f00e f9b0 	bl	2a6ba <assert_print>
   1c35a:	214d      	movs	r1, #77	; 0x4d
   1c35c:	4808      	ldr	r0, [pc, #32]	; (1c380 <nrfx_gpio_handler+0x68>)
   1c35e:	f00e f9a5 	bl	2a6ac <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c362:	4e0a      	ldr	r6, [pc, #40]	; (1c38c <nrfx_gpio_handler+0x74>)
   1c364:	e7e0      	b.n	1c328 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1c366:	4630      	mov	r0, r6
   1c368:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c36a:	b11c      	cbz	r4, 1c374 <nrfx_gpio_handler+0x5c>
   1c36c:	6823      	ldr	r3, [r4, #0]
   1c36e:	4621      	mov	r1, r4
   1c370:	461c      	mov	r4, r3
   1c372:	e7e2      	b.n	1c33a <nrfx_gpio_handler+0x22>
   1c374:	4623      	mov	r3, r4
   1c376:	e7fa      	b.n	1c36e <nrfx_gpio_handler+0x56>
   1c378:	00030f4c 	.word	0x00030f4c
   1c37c:	00037963 	.word	0x00037963
   1c380:	00036b8d 	.word	0x00036b8d
   1c384:	00032659 	.word	0x00032659
   1c388:	00036bea 	.word	0x00036bea
   1c38c:	00030f34 	.word	0x00030f34

0001c390 <gpio_nrfx_pin_configure>:
{
   1c390:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1c394:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c398:	f001 051f 	and.w	r5, r1, #31
   1c39c:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1c3a0:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c3a2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1c3a6:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c3a8:	4628      	mov	r0, r5
   1c3aa:	f10d 0103 	add.w	r1, sp, #3
   1c3ae:	f003 f86f 	bl	1f490 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c3b2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c3b6:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c3b8:	d115      	bne.n	1c3e6 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c3ba:	4628      	mov	r0, r5
   1c3bc:	f003 f962 	bl	1f684 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c3c0:	4b48      	ldr	r3, [pc, #288]	; (1c4e4 <gpio_nrfx_pin_configure+0x154>)
   1c3c2:	429e      	cmp	r6, r3
   1c3c4:	d170      	bne.n	1c4a8 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1c3c6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c3ca:	f003 f8bb 	bl	1f544 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c3ce:	42b0      	cmp	r0, r6
   1c3d0:	d06a      	beq.n	1c4a8 <gpio_nrfx_pin_configure+0x118>
   1c3d2:	4945      	ldr	r1, [pc, #276]	; (1c4e8 <gpio_nrfx_pin_configure+0x158>)
   1c3d4:	236a      	movs	r3, #106	; 0x6a
   1c3d6:	4a45      	ldr	r2, [pc, #276]	; (1c4ec <gpio_nrfx_pin_configure+0x15c>)
   1c3d8:	4845      	ldr	r0, [pc, #276]	; (1c4f0 <gpio_nrfx_pin_configure+0x160>)
   1c3da:	f00e f96e 	bl	2a6ba <assert_print>
   1c3de:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c3e0:	4842      	ldr	r0, [pc, #264]	; (1c4ec <gpio_nrfx_pin_configure+0x15c>)
   1c3e2:	f00e f963 	bl	2a6ac <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c3e6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c3e8:	4628      	mov	r0, r5
   1c3ea:	4619      	mov	r1, r3
   1c3ec:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c3ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c3f2:	f002 ff27 	bl	1f244 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c3f6:	4b3b      	ldr	r3, [pc, #236]	; (1c4e4 <gpio_nrfx_pin_configure+0x154>)
   1c3f8:	4298      	cmp	r0, r3
   1c3fa:	d004      	beq.n	1c406 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1c3fc:	f06f 0015 	mvn.w	r0, #21
}
   1c400:	b004      	add	sp, #16
   1c402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1c406:	4286      	cmp	r6, r0
   1c408:	d10d      	bne.n	1c426 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1c40a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c40e:	f003 f899 	bl	1f544 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c412:	42b0      	cmp	r0, r6
   1c414:	d007      	beq.n	1c426 <gpio_nrfx_pin_configure+0x96>
   1c416:	4934      	ldr	r1, [pc, #208]	; (1c4e8 <gpio_nrfx_pin_configure+0x158>)
   1c418:	237c      	movs	r3, #124	; 0x7c
   1c41a:	4a34      	ldr	r2, [pc, #208]	; (1c4ec <gpio_nrfx_pin_configure+0x15c>)
   1c41c:	4834      	ldr	r0, [pc, #208]	; (1c4f0 <gpio_nrfx_pin_configure+0x160>)
   1c41e:	f00e f94c 	bl	2a6ba <assert_print>
   1c422:	217c      	movs	r1, #124	; 0x7c
   1c424:	e7dc      	b.n	1c3e0 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1c426:	03a6      	lsls	r6, r4, #14
   1c428:	d54c      	bpl.n	1c4c4 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c42a:	f240 3306 	movw	r3, #774	; 0x306
   1c42e:	4023      	ands	r3, r4
   1c430:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c434:	d019      	beq.n	1c46a <gpio_nrfx_pin_configure+0xda>
   1c436:	d80c      	bhi.n	1c452 <gpio_nrfx_pin_configure+0xc2>
   1c438:	2b06      	cmp	r3, #6
   1c43a:	d017      	beq.n	1c46c <gpio_nrfx_pin_configure+0xdc>
   1c43c:	d804      	bhi.n	1c448 <gpio_nrfx_pin_configure+0xb8>
   1c43e:	b1ab      	cbz	r3, 1c46c <gpio_nrfx_pin_configure+0xdc>
   1c440:	2b02      	cmp	r3, #2
   1c442:	d1db      	bne.n	1c3fc <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1c444:	2304      	movs	r3, #4
   1c446:	e011      	b.n	1c46c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c44c:	d1d6      	bne.n	1c3fc <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1c44e:	2301      	movs	r3, #1
   1c450:	e00c      	b.n	1c46c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c452:	f240 2202 	movw	r2, #514	; 0x202
   1c456:	4293      	cmp	r3, r2
   1c458:	d028      	beq.n	1c4ac <gpio_nrfx_pin_configure+0x11c>
   1c45a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c45e:	d027      	beq.n	1c4b0 <gpio_nrfx_pin_configure+0x120>
   1c460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c464:	d1ca      	bne.n	1c3fc <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1c466:	2302      	movs	r3, #2
   1c468:	e000      	b.n	1c46c <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1c46a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1c46c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c470:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c474:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c478:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c47a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1c47e:	bf4c      	ite	mi
   1c480:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1c482:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c486:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c488:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c48c:	d512      	bpl.n	1c4b4 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c48e:	2301      	movs	r3, #1
   1c490:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c494:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1c496:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c498:	2200      	movs	r2, #0
   1c49a:	4628      	mov	r0, r5
   1c49c:	a901      	add	r1, sp, #4
   1c49e:	f002 ff79 	bl	1f394 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c4a2:	4b10      	ldr	r3, [pc, #64]	; (1c4e4 <gpio_nrfx_pin_configure+0x154>)
   1c4a4:	4298      	cmp	r0, r3
   1c4a6:	d1a9      	bne.n	1c3fc <gpio_nrfx_pin_configure+0x6c>
   1c4a8:	2000      	movs	r0, #0
   1c4aa:	e7a9      	b.n	1c400 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1c4ac:	2305      	movs	r3, #5
   1c4ae:	e7dd      	b.n	1c46c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c4b0:	2303      	movs	r3, #3
   1c4b2:	e7db      	b.n	1c46c <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c4b4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c4b6:	bf41      	itttt	mi
   1c4b8:	2301      	movmi	r3, #1
   1c4ba:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1c4be:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1c4c0:	60d3      	strmi	r3, [r2, #12]
}
   1c4c2:	e7e9      	b.n	1c498 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1c4c4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c4c6:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1c4ca:	bf4c      	ite	mi
   1c4cc:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1c4ce:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c4d2:	461a      	mov	r2, r3
   1c4d4:	4628      	mov	r0, r5
   1c4d6:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1c4d8:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c4dc:	f002 feb2 	bl	1f244 <nrfx_gpiote_input_configure>
   1c4e0:	e7df      	b.n	1c4a2 <gpio_nrfx_pin_configure+0x112>
   1c4e2:	bf00      	nop
   1c4e4:	0bad0000 	.word	0x0bad0000
   1c4e8:	000335bc 	.word	0x000335bc
   1c4ec:	00036c57 	.word	0x00036c57
   1c4f0:	00032659 	.word	0x00032659

0001c4f4 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1c4f4:	4603      	mov	r3, r0
   1c4f6:	b510      	push	{r4, lr}
   1c4f8:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c4fa:	7919      	ldrb	r1, [r3, #4]
   1c4fc:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1c4fe:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c500:	fa03 f101 	lsl.w	r1, r3, r1
   1c504:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1c506:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c508:	681b      	ldr	r3, [r3, #0]
   1c50a:	4219      	tst	r1, r3
   1c50c:	d10e      	bne.n	1c52c <gpio_pin_set_dt.isra.0+0x38>
   1c50e:	490e      	ldr	r1, [pc, #56]	; (1c548 <gpio_pin_set_dt.isra.0+0x54>)
   1c510:	f240 533d 	movw	r3, #1341	; 0x53d
   1c514:	4a0d      	ldr	r2, [pc, #52]	; (1c54c <gpio_pin_set_dt.isra.0+0x58>)
   1c516:	480e      	ldr	r0, [pc, #56]	; (1c550 <gpio_pin_set_dt.isra.0+0x5c>)
   1c518:	f00e f8cf 	bl	2a6ba <assert_print>
   1c51c:	480d      	ldr	r0, [pc, #52]	; (1c554 <gpio_pin_set_dt.isra.0+0x60>)
   1c51e:	f00e f8cc 	bl	2a6ba <assert_print>
   1c522:	f240 513d 	movw	r1, #1341	; 0x53d
   1c526:	4809      	ldr	r0, [pc, #36]	; (1c54c <gpio_pin_set_dt.isra.0+0x58>)
   1c528:	f00e f8c0 	bl	2a6ac <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c52c:	6823      	ldr	r3, [r4, #0]
   1c52e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1c530:	bf18      	it	ne
   1c532:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1c536:	b122      	cbz	r2, 1c542 <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   1c538:	6883      	ldr	r3, [r0, #8]
   1c53a:	68db      	ldr	r3, [r3, #12]
}
   1c53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1c540:	4718      	bx	r3
   1c542:	6883      	ldr	r3, [r0, #8]
   1c544:	691b      	ldr	r3, [r3, #16]
   1c546:	e7f9      	b.n	1c53c <gpio_pin_set_dt.isra.0+0x48>
   1c548:	0003261b 	.word	0x0003261b
   1c54c:	000325ea 	.word	0x000325ea
   1c550:	00032659 	.word	0x00032659
   1c554:	00032676 	.word	0x00032676

0001c558 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1c558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c55c:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1c55e:	6844      	ldr	r4, [r0, #4]
{
   1c560:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1c562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   1c564:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1c566:	2100      	movs	r1, #0
   1c568:	4630      	mov	r0, r6
   1c56a:	1d3a      	adds	r2, r7, #4
   1c56c:	f012 f961 	bl	2e832 <pinctrl_lookup_state>
	if (ret < 0) {
   1c570:	2800      	cmp	r0, #0
   1c572:	db32      	blt.n	1c5da <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1c574:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c576:	6832      	ldr	r2, [r6, #0]
   1c578:	7919      	ldrb	r1, [r3, #4]
   1c57a:	6818      	ldr	r0, [r3, #0]
   1c57c:	f012 f96c 	bl	2e858 <pinctrl_configure_pins>
	if (err < 0) {
   1c580:	2800      	cmp	r0, #0
   1c582:	db2a      	blt.n	1c5da <spi_nrfx_init+0x82>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c584:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1c586:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c588:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c58a:	68ac      	ldr	r4, [r5, #8]
   1c58c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1c590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1c594:	429c      	cmp	r4, r3
   1c596:	d304      	bcc.n	1c5a2 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1c598:	4628      	mov	r0, r5
   1c59a:	f011 fe2b 	bl	2e1f4 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1c59e:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1c5a0:	e01b      	b.n	1c5da <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1c5a2:	6820      	ldr	r0, [r4, #0]
   1c5a4:	f013 fd99 	bl	300da <z_device_is_ready>
   1c5a8:	b9d8      	cbnz	r0, 1c5e2 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1c5aa:	6823      	ldr	r3, [r4, #0]
   1c5ac:	6819      	ldr	r1, [r3, #0]
   1c5ae:	7923      	ldrb	r3, [r4, #4]
   1c5b0:	466c      	mov	r4, sp
   1c5b2:	b08a      	sub	sp, #40	; 0x28
   1c5b4:	466a      	mov	r2, sp
   1c5b6:	61d3      	str	r3, [r2, #28]
   1c5b8:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c5bc:	4833      	ldr	r0, [pc, #204]	; (1c68c <spi_nrfx_init+0x134>)
   1c5be:	8413      	strh	r3, [r2, #32]
   1c5c0:	4b33      	ldr	r3, [pc, #204]	; (1c690 <spi_nrfx_init+0x138>)
   1c5c2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1c5c6:	4833      	ldr	r0, [pc, #204]	; (1c694 <spi_nrfx_init+0x13c>)
   1c5c8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c5cc:	f842 3f10 	str.w	r3, [r2, #16]!
   1c5d0:	f011 fdeb 	bl	2e1aa <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   1c5d4:	f06f 0012 	mvn.w	r0, #18
   1c5d8:	46a5      	mov	sp, r4
#endif
}
   1c5da:	370c      	adds	r7, #12
   1c5dc:	46bd      	mov	sp, r7
   1c5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1c5e2:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1c5e4:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1c5e6:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c5e8:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1c5ec:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1c5ee:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1c5f2:	e9d0 c901 	ldrd	ip, r9, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c5f6:	d10e      	bne.n	1c616 <spi_nrfx_init+0xbe>
   1c5f8:	4927      	ldr	r1, [pc, #156]	; (1c698 <spi_nrfx_init+0x140>)
   1c5fa:	f240 23b7 	movw	r3, #695	; 0x2b7
   1c5fe:	4a27      	ldr	r2, [pc, #156]	; (1c69c <spi_nrfx_init+0x144>)
   1c600:	4827      	ldr	r0, [pc, #156]	; (1c6a0 <spi_nrfx_init+0x148>)
   1c602:	f00e f85a 	bl	2a6ba <assert_print>
   1c606:	4827      	ldr	r0, [pc, #156]	; (1c6a4 <spi_nrfx_init+0x14c>)
   1c608:	f00e f857 	bl	2a6ba <assert_print>
   1c60c:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1c610:	4822      	ldr	r0, [pc, #136]	; (1c69c <spi_nrfx_init+0x144>)
   1c612:	f00e f84b 	bl	2a6ac <assert_post_action>
   1c616:	f003 0206 	and.w	r2, r3, #6
   1c61a:	2a04      	cmp	r2, #4
   1c61c:	d109      	bne.n	1c632 <spi_nrfx_init+0xda>
   1c61e:	4922      	ldr	r1, [pc, #136]	; (1c6a8 <spi_nrfx_init+0x150>)
   1c620:	f240 23bf 	movw	r3, #703	; 0x2bf
   1c624:	4a1d      	ldr	r2, [pc, #116]	; (1c69c <spi_nrfx_init+0x144>)
   1c626:	481e      	ldr	r0, [pc, #120]	; (1c6a0 <spi_nrfx_init+0x148>)
   1c628:	f00e f847 	bl	2a6ba <assert_print>
   1c62c:	f240 21bf 	movw	r1, #703	; 0x2bf
   1c630:	e7ee      	b.n	1c610 <spi_nrfx_init+0xb8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c632:	f8dc c000 	ldr.w	ip, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c636:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c638:	fa06 fe01 	lsl.w	lr, r6, r1
	return gpio_pin_configure(spec->port,
   1c63c:	bf54      	ite	pl
   1c63e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c642:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c646:	ea1e 0f0c 	tst.w	lr, ip
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c64a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c64e:	d10c      	bne.n	1c66a <spi_nrfx_init+0x112>
   1c650:	4916      	ldr	r1, [pc, #88]	; (1c6ac <spi_nrfx_init+0x154>)
   1c652:	f240 23d2 	movw	r3, #722	; 0x2d2
   1c656:	4a11      	ldr	r2, [pc, #68]	; (1c69c <spi_nrfx_init+0x144>)
   1c658:	4811      	ldr	r0, [pc, #68]	; (1c6a0 <spi_nrfx_init+0x148>)
   1c65a:	f00e f82e 	bl	2a6ba <assert_print>
   1c65e:	4814      	ldr	r0, [pc, #80]	; (1c6b0 <spi_nrfx_init+0x158>)
   1c660:	f00e f82b 	bl	2a6ba <assert_print>
   1c664:	f240 21d2 	movw	r1, #722	; 0x2d2
   1c668:	e7d2      	b.n	1c610 <spi_nrfx_init+0xb8>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c66a:	f8d8 c000 	ldr.w	ip, [r8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c66e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c670:	bf4c      	ite	mi
   1c672:	ea4c 030e 	orrmi.w	r3, ip, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c676:	ea2c 030e 	bicpl.w	r3, ip, lr
   1c67a:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
   1c67e:	f8d9 3000 	ldr.w	r3, [r9]
   1c682:	4798      	blx	r3
		if (ret < 0) {
   1c684:	2800      	cmp	r0, #0
   1c686:	dba8      	blt.n	1c5da <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c688:	3408      	adds	r4, #8
   1c68a:	e77f      	b.n	1c58c <spi_nrfx_init+0x34>
   1c68c:	00036c9b 	.word	0x00036c9b
   1c690:	01000004 	.word	0x01000004
   1c694:	000315d4 	.word	0x000315d4
   1c698:	000328f2 	.word	0x000328f2
   1c69c:	000325ea 	.word	0x000325ea
   1c6a0:	00032659 	.word	0x00032659
   1c6a4:	0003292b 	.word	0x0003292b
   1c6a8:	000329ef 	.word	0x000329ef
   1c6ac:	0003261b 	.word	0x0003261b
   1c6b0:	00032676 	.word	0x00032676

0001c6b4 <transfer_next_chunk>:
{
   1c6b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1c6b6:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c6b8:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1c6ba:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1c6bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1c6be:	b98d      	cbnz	r5, 1c6e4 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1c6c0:	2b00      	cmp	r3, #0
   1c6c2:	d137      	bne.n	1c734 <transfer_next_chunk+0x80>
	int error = 0;
   1c6c4:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1c6c6:	2200      	movs	r2, #0
   1c6c8:	4620      	mov	r0, r4
   1c6ca:	4611      	mov	r1, r2
   1c6cc:	f011 fd70 	bl	2e1b0 <_spi_context_cs_control>
	ctx->sync_status = status;
   1c6d0:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1c6d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1c6d6:	f008 ff77 	bl	255c8 <z_impl_k_sem_give>
	dev_data->busy = false;
   1c6da:	2300      	movs	r3, #0
   1c6dc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1c6e0:	b004      	add	sp, #16
   1c6e2:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1c6e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1c6e6:	bb0b      	cbnz	r3, 1c72c <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1c6e8:	bb39      	cbnz	r1, 1c73a <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1c6ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c6ee:	42aa      	cmp	r2, r5
   1c6f0:	bf28      	it	cs
   1c6f2:	462a      	movcs	r2, r5
   1c6f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1c6f6:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1c6f8:	9100      	str	r1, [sp, #0]
   1c6fa:	b11b      	cbz	r3, 1c704 <transfer_next_chunk+0x50>
   1c6fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1c6fe:	2b00      	cmp	r3, #0
   1c700:	bf18      	it	ne
   1c702:	4613      	movne	r3, r2
   1c704:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1c706:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c708:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1c70a:	b11b      	cbz	r3, 1c714 <transfer_next_chunk+0x60>
   1c70c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1c70e:	2b00      	cmp	r3, #0
   1c710:	bf18      	it	ne
   1c712:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1c714:	2200      	movs	r2, #0
   1c716:	4669      	mov	r1, sp
   1c718:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1c71a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1c71c:	f003 ff56 	bl	205cc <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1c720:	4b0d      	ldr	r3, [pc, #52]	; (1c758 <transfer_next_chunk+0xa4>)
   1c722:	4298      	cmp	r0, r3
   1c724:	d0dc      	beq.n	1c6e0 <transfer_next_chunk+0x2c>
			error = -EIO;
   1c726:	f06f 0504 	mvn.w	r5, #4
   1c72a:	e7cc      	b.n	1c6c6 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1c72c:	429d      	cmp	r5, r3
   1c72e:	bf28      	it	cs
   1c730:	461d      	movcs	r5, r3
   1c732:	e7d9      	b.n	1c6e8 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1c734:	461d      	mov	r5, r3
   1c736:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1c738:	e7d7      	b.n	1c6ea <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1c73a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1c73e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1c742:	d0d2      	beq.n	1c6ea <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1c744:	2d08      	cmp	r5, #8
   1c746:	bf28      	it	cs
   1c748:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c74a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1c74c:	462a      	mov	r2, r5
   1c74e:	f013 ff0e 	bl	3056e <memcpy>
			tx_buf = dev_data->buffer;
   1c752:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1c754:	e7c9      	b.n	1c6ea <transfer_next_chunk+0x36>
   1c756:	bf00      	nop
   1c758:	0bad0000 	.word	0x0bad0000

0001c75c <event_handler>:
{
   1c75c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1c75e:	7803      	ldrb	r3, [r0, #0]
{
   1c760:	460c      	mov	r4, r1
   1c762:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1c764:	2b00      	cmp	r3, #0
   1c766:	d154      	bne.n	1c812 <event_handler+0xb6>
	if (!ctx->tx_len) {
   1c768:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c76a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   1c76c:	b15b      	cbz	r3, 1c786 <event_handler+0x2a>
	if (len > ctx->tx_len) {
   1c76e:	429a      	cmp	r2, r3
   1c770:	d91e      	bls.n	1c7b0 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1c772:	4b29      	ldr	r3, [pc, #164]	; (1c818 <event_handler+0xbc>)
   1c774:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c778:	9305      	str	r3, [sp, #20]
   1c77a:	2302      	movs	r3, #2
   1c77c:	4827      	ldr	r0, [pc, #156]	; (1c81c <event_handler+0xc0>)
   1c77e:	aa04      	add	r2, sp, #16
   1c780:	9304      	str	r3, [sp, #16]
   1c782:	f011 fd12 	bl	2e1aa <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1c786:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c788:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1c78a:	b15b      	cbz	r3, 1c7a4 <event_handler+0x48>
	if (len > ctx->rx_len) {
   1c78c:	429a      	cmp	r2, r3
   1c78e:	d927      	bls.n	1c7e0 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1c790:	4b21      	ldr	r3, [pc, #132]	; (1c818 <event_handler+0xbc>)
   1c792:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c796:	9305      	str	r3, [sp, #20]
   1c798:	2302      	movs	r3, #2
   1c79a:	4820      	ldr	r0, [pc, #128]	; (1c81c <event_handler+0xc0>)
   1c79c:	aa04      	add	r2, sp, #16
   1c79e:	9304      	str	r3, [sp, #16]
   1c7a0:	f011 fd03 	bl	2e1aa <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1c7a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1c7a6:	b006      	add	sp, #24
   1c7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1c7ac:	f7ff bf82 	b.w	1c6b4 <transfer_next_chunk>
	ctx->tx_len -= len;
   1c7b0:	1a9b      	subs	r3, r3, r2
   1c7b2:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1c7b4:	b973      	cbnz	r3, 1c7d4 <event_handler+0x78>
		++ctx->current_tx;
   1c7b6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1c7b8:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1c7bc:	3308      	adds	r3, #8
   1c7be:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1c7c0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1c7c2:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1c7c6:	3b01      	subs	r3, #1
   1c7c8:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1c7ca:	3148      	adds	r1, #72	; 0x48
   1c7cc:	f011 fcda 	bl	2e184 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1c7d0:	6560      	str	r0, [r4, #84]	; 0x54
   1c7d2:	e7d8      	b.n	1c786 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1c7d4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1c7d6:	2b00      	cmp	r3, #0
   1c7d8:	d0d5      	beq.n	1c786 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1c7da:	4413      	add	r3, r2
   1c7dc:	654b      	str	r3, [r1, #84]	; 0x54
   1c7de:	e7d2      	b.n	1c786 <event_handler+0x2a>
	ctx->rx_len -= len;
   1c7e0:	1a9b      	subs	r3, r3, r2
   1c7e2:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1c7e4:	b97b      	cbnz	r3, 1c806 <event_handler+0xaa>
		++ctx->current_rx;
   1c7e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1c7e8:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1c7ec:	3308      	adds	r3, #8
   1c7ee:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1c7f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1c7f2:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1c7f6:	3b01      	subs	r3, #1
   1c7f8:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1c7fa:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1c7fe:	f011 fcc1 	bl	2e184 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1c802:	65e0      	str	r0, [r4, #92]	; 0x5c
   1c804:	e7ce      	b.n	1c7a4 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1c806:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c808:	2b00      	cmp	r3, #0
   1c80a:	d0cb      	beq.n	1c7a4 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1c80c:	4413      	add	r3, r2
   1c80e:	65e3      	str	r3, [r4, #92]	; 0x5c
   1c810:	e7c8      	b.n	1c7a4 <event_handler+0x48>
}
   1c812:	b006      	add	sp, #24
   1c814:	bd10      	pop	{r4, pc}
   1c816:	bf00      	nop
   1c818:	00036cbf 	.word	0x00036cbf
   1c81c:	000315d4 	.word	0x000315d4

0001c820 <spi_nrfx_transceive>:
{
   1c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c824:	b08b      	sub	sp, #44	; 0x2c
   1c826:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c828:	888b      	ldrh	r3, [r1, #4]
   1c82a:	af00      	add	r7, sp, #0
   1c82c:	049b      	lsls	r3, r3, #18
   1c82e:	4680      	mov	r8, r0
   1c830:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1c832:	6904      	ldr	r4, [r0, #16]
{
   1c834:	60ba      	str	r2, [r7, #8]
   1c836:	d438      	bmi.n	1c8aa <spi_nrfx_transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   1c838:	f04f 32ff 	mov.w	r2, #4294967295
   1c83c:	f04f 33ff 	mov.w	r3, #4294967295
   1c840:	f104 0010 	add.w	r0, r4, #16
   1c844:	f008 ff04 	bl	25650 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1c848:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c84a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1c84e:	f8d8 9010 	ldr.w	r9, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1c852:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c854:	60fb      	str	r3, [r7, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1c856:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1c85a:	607b      	str	r3, [r7, #4]
   1c85c:	b123      	cbz	r3, 1c868 <spi_nrfx_transceive+0x48>
   1c85e:	f8d9 3000 	ldr.w	r3, [r9]
   1c862:	429e      	cmp	r6, r3
   1c864:	f000 80e8 	beq.w	1ca38 <spi_nrfx_transceive+0x218>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1c868:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1c86c:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1c870:	d022      	beq.n	1c8b8 <spi_nrfx_transceive+0x98>
		LOG_ERR("Half-duplex not supported");
   1c872:	4ba8      	ldr	r3, [pc, #672]	; (1cb14 <spi_nrfx_transceive+0x2f4>)
		return -ENOTSUP;
   1c874:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1c878:	627b      	str	r3, [r7, #36]	; 0x24
   1c87a:	2302      	movs	r3, #2
   1c87c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c880:	48a5      	ldr	r0, [pc, #660]	; (1cb18 <spi_nrfx_transceive+0x2f8>)
   1c882:	623b      	str	r3, [r7, #32]
   1c884:	f107 0220 	add.w	r2, r7, #32
   1c888:	f011 fc8f 	bl	2e1aa <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1c88c:	6823      	ldr	r3, [r4, #0]
   1c88e:	889b      	ldrh	r3, [r3, #4]
   1c890:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1c894:	d104      	bne.n	1c8a0 <spi_nrfx_transceive+0x80>
		ctx->owner = NULL;
   1c896:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1c898:	f104 0010 	add.w	r0, r4, #16
   1c89c:	f008 fe94 	bl	255c8 <z_impl_k_sem_give>
}
   1c8a0:	4628      	mov	r0, r5
   1c8a2:	372c      	adds	r7, #44	; 0x2c
   1c8a4:	46bd      	mov	sp, r7
   1c8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c8aa:	69a3      	ldr	r3, [r4, #24]
   1c8ac:	2b00      	cmp	r3, #0
   1c8ae:	d1c3      	bne.n	1c838 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1c8b0:	6863      	ldr	r3, [r4, #4]
   1c8b2:	4299      	cmp	r1, r3
   1c8b4:	d1c0      	bne.n	1c838 <spi_nrfx_transceive+0x18>
   1c8b6:	e7c8      	b.n	1c84a <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1c8b8:	f01c 0f01 	tst.w	ip, #1
   1c8bc:	d016      	beq.n	1c8ec <spi_nrfx_transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1c8be:	466d      	mov	r5, sp
   1c8c0:	b088      	sub	sp, #32
   1c8c2:	f8d8 3000 	ldr.w	r3, [r8]
   1c8c6:	466a      	mov	r2, sp
   1c8c8:	4994      	ldr	r1, [pc, #592]	; (1cb1c <spi_nrfx_transceive+0x2fc>)
   1c8ca:	4893      	ldr	r0, [pc, #588]	; (1cb18 <spi_nrfx_transceive+0x2f8>)
   1c8cc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c8d0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c8d4:	8393      	strh	r3, [r2, #28]
   1c8d6:	4b92      	ldr	r3, [pc, #584]	; (1cb20 <spi_nrfx_transceive+0x300>)
   1c8d8:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1c8dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1c8e0:	f011 fc63 	bl	2e1aa <z_log_msg_static_create.constprop.0>
   1c8e4:	46ad      	mov	sp, r5
		return -EINVAL;
   1c8e6:	f06f 0515 	mvn.w	r5, #21
   1c8ea:	e7cf      	b.n	1c88c <spi_nrfx_transceive+0x6c>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1c8ec:	f01c 0f08 	tst.w	ip, #8
   1c8f0:	d00b      	beq.n	1c90a <spi_nrfx_transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
   1c8f2:	4b8c      	ldr	r3, [pc, #560]	; (1cb24 <spi_nrfx_transceive+0x304>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1c8f4:	627b      	str	r3, [r7, #36]	; 0x24
   1c8f6:	2302      	movs	r3, #2
   1c8f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c8fc:	4886      	ldr	r0, [pc, #536]	; (1cb18 <spi_nrfx_transceive+0x2f8>)
   1c8fe:	623b      	str	r3, [r7, #32]
   1c900:	f107 0220 	add.w	r2, r7, #32
   1c904:	f011 fc51 	bl	2e1aa <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   1c908:	e7ed      	b.n	1c8e6 <spi_nrfx_transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1c90a:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1c90e:	2b08      	cmp	r3, #8
   1c910:	d001      	beq.n	1c916 <spi_nrfx_transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1c912:	4b85      	ldr	r3, [pc, #532]	; (1cb28 <spi_nrfx_transceive+0x308>)
   1c914:	e7ee      	b.n	1c8f4 <spi_nrfx_transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
   1c916:	6833      	ldr	r3, [r6, #0]
   1c918:	603b      	str	r3, [r7, #0]
   1c91a:	683a      	ldr	r2, [r7, #0]
   1c91c:	4b83      	ldr	r3, [pc, #524]	; (1cb2c <spi_nrfx_transceive+0x30c>)
   1c91e:	429a      	cmp	r2, r3
   1c920:	d801      	bhi.n	1c926 <spi_nrfx_transceive+0x106>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1c922:	4b83      	ldr	r3, [pc, #524]	; (1cb30 <spi_nrfx_transceive+0x310>)
   1c924:	e7e6      	b.n	1c8f4 <spi_nrfx_transceive+0xd4>
	if (max_freq > 16000000 &&
   1c926:	4b83      	ldr	r3, [pc, #524]	; (1cb34 <spi_nrfx_transceive+0x314>)
   1c928:	429d      	cmp	r5, r3
   1c92a:	d906      	bls.n	1c93a <spi_nrfx_transceive+0x11a>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1c92c:	4a82      	ldr	r2, [pc, #520]	; (1cb38 <spi_nrfx_transceive+0x318>)
   1c92e:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1c932:	f012 0f03 	tst.w	r2, #3
   1c936:	bf18      	it	ne
   1c938:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1c93a:	68fb      	ldr	r3, [r7, #12]
   1c93c:	f107 0e10 	add.w	lr, r7, #16
   1c940:	f103 0b0c 	add.w	fp, r3, #12
   1c944:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1c948:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c94c:	683b      	ldr	r3, [r7, #0]
	config = dev_config->def_config;
   1c94e:	e89b 0003 	ldmia.w	fp, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c952:	42ab      	cmp	r3, r5
   1c954:	bf28      	it	cs
   1c956:	462b      	movcs	r3, r5
   1c958:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1c95a:	4b78      	ldr	r3, [pc, #480]	; (1cb3c <spi_nrfx_transceive+0x31c>)
	config = dev_config->def_config;
   1c95c:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
   1c960:	429d      	cmp	r5, r3
   1c962:	d94b      	bls.n	1c9fc <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 500000) {
   1c964:	4b76      	ldr	r3, [pc, #472]	; (1cb40 <spi_nrfx_transceive+0x320>)
   1c966:	429d      	cmp	r5, r3
   1c968:	d94b      	bls.n	1ca02 <spi_nrfx_transceive+0x1e2>
	} else if (frequency < 1000000) {
   1c96a:	4b76      	ldr	r3, [pc, #472]	; (1cb44 <spi_nrfx_transceive+0x324>)
   1c96c:	429d      	cmp	r5, r3
   1c96e:	d94b      	bls.n	1ca08 <spi_nrfx_transceive+0x1e8>
	} else if (frequency < 2000000) {
   1c970:	4b75      	ldr	r3, [pc, #468]	; (1cb48 <spi_nrfx_transceive+0x328>)
   1c972:	429d      	cmp	r5, r3
   1c974:	d94b      	bls.n	1ca0e <spi_nrfx_transceive+0x1ee>
	} else if (frequency < 4000000) {
   1c976:	4b75      	ldr	r3, [pc, #468]	; (1cb4c <spi_nrfx_transceive+0x32c>)
   1c978:	429d      	cmp	r5, r3
   1c97a:	d94b      	bls.n	1ca14 <spi_nrfx_transceive+0x1f4>
	} else if (frequency < 8000000) {
   1c97c:	4b74      	ldr	r3, [pc, #464]	; (1cb50 <spi_nrfx_transceive+0x330>)
   1c97e:	429d      	cmp	r5, r3
   1c980:	d34b      	bcc.n	1ca1a <spi_nrfx_transceive+0x1fa>
	} else if (frequency < 16000000) {
   1c982:	4b6c      	ldr	r3, [pc, #432]	; (1cb34 <spi_nrfx_transceive+0x314>)
   1c984:	429d      	cmp	r5, r3
   1c986:	d34b      	bcc.n	1ca20 <spi_nrfx_transceive+0x200>
		return NRF_SPIM_FREQ_16M;
   1c988:	4b72      	ldr	r3, [pc, #456]	; (1cb54 <spi_nrfx_transceive+0x334>)
   1c98a:	429d      	cmp	r5, r3
   1c98c:	bf2c      	ite	cs
   1c98e:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1c992:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c996:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c99a:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c99c:	f00c 0304 	and.w	r3, ip, #4
   1c9a0:	d041      	beq.n	1ca26 <spi_nrfx_transceive+0x206>
			return NRF_SPIM_MODE_2;
   1c9a2:	2b00      	cmp	r3, #0
   1c9a4:	bf14      	ite	ne
   1c9a6:	2303      	movne	r3, #3
   1c9a8:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1c9aa:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1c9ac:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1c9ae:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1c9b2:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1c9b6:	b12b      	cbz	r3, 1c9c4 <spi_nrfx_transceive+0x1a4>
		nrfx_spim_uninit(&dev_config->spim);
   1c9b8:	68f8      	ldr	r0, [r7, #12]
   1c9ba:	f003 fd9d 	bl	204f8 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1c9be:	2300      	movs	r3, #0
   1c9c0:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1c9c4:	464b      	mov	r3, r9
   1c9c6:	4a64      	ldr	r2, [pc, #400]	; (1cb58 <spi_nrfx_transceive+0x338>)
   1c9c8:	68f8      	ldr	r0, [r7, #12]
   1c9ca:	f107 0110 	add.w	r1, r7, #16
   1c9ce:	f003 fc61 	bl	20294 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1c9d2:	4b62      	ldr	r3, [pc, #392]	; (1cb5c <spi_nrfx_transceive+0x33c>)
   1c9d4:	4298      	cmp	r0, r3
   1c9d6:	d02a      	beq.n	1ca2e <spi_nrfx_transceive+0x20e>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1c9d8:	466d      	mov	r5, sp
   1c9da:	b088      	sub	sp, #32
   1c9dc:	466a      	mov	r2, sp
   1c9de:	4b60      	ldr	r3, [pc, #384]	; (1cb60 <spi_nrfx_transceive+0x340>)
   1c9e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c9e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c9e8:	2303      	movs	r3, #3
   1c9ea:	484b      	ldr	r0, [pc, #300]	; (1cb18 <spi_nrfx_transceive+0x2f8>)
   1c9ec:	f842 3f10 	str.w	r3, [r2, #16]!
   1c9f0:	f011 fbdb 	bl	2e1aa <z_log_msg_static_create.constprop.0>
   1c9f4:	46ad      	mov	sp, r5
		return -EIO;
   1c9f6:	f06f 0504 	mvn.w	r5, #4
   1c9fa:	e747      	b.n	1c88c <spi_nrfx_transceive+0x6c>
		return NRF_SPIM_FREQ_125K;
   1c9fc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1ca00:	e7c9      	b.n	1c996 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_250K;
   1ca02:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1ca06:	e7c6      	b.n	1c996 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_500K;
   1ca08:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1ca0c:	e7c3      	b.n	1c996 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_1M;
   1ca0e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca12:	e7c0      	b.n	1c996 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_2M;
   1ca14:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1ca18:	e7bd      	b.n	1c996 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_4M;
   1ca1a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1ca1e:	e7ba      	b.n	1c996 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_8M;
   1ca20:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1ca24:	e7b7      	b.n	1c996 <spi_nrfx_transceive+0x176>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1ca26:	3b00      	subs	r3, #0
   1ca28:	bf18      	it	ne
   1ca2a:	2301      	movne	r3, #1
   1ca2c:	e7bd      	b.n	1c9aa <spi_nrfx_transceive+0x18a>
	dev_data->initialized = true;
   1ca2e:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1ca30:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   1ca34:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
		dev_data->busy = true;
   1ca38:	2301      	movs	r3, #1
   1ca3a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1ca3e:	68bb      	ldr	r3, [r7, #8]
   1ca40:	2b00      	cmp	r3, #0
   1ca42:	d154      	bne.n	1caee <spi_nrfx_transceive+0x2ce>
   1ca44:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1ca46:	2300      	movs	r3, #0
   1ca48:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1ca4a:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1ca4e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1ca52:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1ca56:	f011 fb95 	bl	2e184 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1ca5a:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1ca5c:	f1ba 0f00 	cmp.w	sl, #0
   1ca60:	d14d      	bne.n	1cafe <spi_nrfx_transceive+0x2de>
   1ca62:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1ca66:	2300      	movs	r3, #0
   1ca68:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1ca6a:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1ca6e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1ca72:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1ca76:	f011 fb85 	bl	2e184 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1ca7a:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1ca7c:	2101      	movs	r1, #1
   1ca7e:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1ca80:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1ca82:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1ca84:	4620      	mov	r0, r4
   1ca86:	f011 fb93 	bl	2e1b0 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1ca8a:	4640      	mov	r0, r8
   1ca8c:	f7ff fe12 	bl	1c6b4 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1ca90:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1ca92:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1ca94:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1ca96:	429d      	cmp	r5, r3
   1ca98:	bf38      	it	cc
   1ca9a:	461d      	movcc	r5, r3
   1ca9c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1caa0:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1caa2:	f858 3b28 	ldr.w	r3, [r8], #40
   1caa6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1caaa:	681b      	ldr	r3, [r3, #0]
   1caac:	4631      	mov	r1, r6
   1caae:	fbb5 f5f3 	udiv	r5, r5, r3
   1cab2:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1cab6:	35c8      	adds	r5, #200	; 0xc8
   1cab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cabc:	2300      	movs	r3, #0
   1cabe:	fbe5 010c 	umlal	r0, r1, r5, ip
   1cac2:	f7ec fa15 	bl	8ef0 <__aeabi_uldivmod>
   1cac6:	4602      	mov	r2, r0
   1cac8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1caca:	4640      	mov	r0, r8
   1cacc:	f008 fdc0 	bl	25650 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1cad0:	b1e8      	cbz	r0, 1cb0e <spi_nrfx_transceive+0x2ee>
		LOG_ERR("Timeout waiting for transfer complete");
   1cad2:	4b24      	ldr	r3, [pc, #144]	; (1cb64 <spi_nrfx_transceive+0x344>)
   1cad4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cad8:	627b      	str	r3, [r7, #36]	; 0x24
   1cada:	2302      	movs	r3, #2
   1cadc:	480e      	ldr	r0, [pc, #56]	; (1cb18 <spi_nrfx_transceive+0x2f8>)
   1cade:	623b      	str	r3, [r7, #32]
   1cae0:	f107 0220 	add.w	r2, r7, #32
   1cae4:	f011 fb61 	bl	2e1aa <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1cae8:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1caec:	e6ce      	b.n	1c88c <spi_nrfx_transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1caee:	68bb      	ldr	r3, [r7, #8]
   1caf0:	681b      	ldr	r3, [r3, #0]
   1caf2:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1caf4:	2b00      	cmp	r3, #0
   1caf6:	d0a6      	beq.n	1ca46 <spi_nrfx_transceive+0x226>
   1caf8:	68bb      	ldr	r3, [r7, #8]
   1cafa:	685b      	ldr	r3, [r3, #4]
   1cafc:	e7a4      	b.n	1ca48 <spi_nrfx_transceive+0x228>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1cafe:	f8da 3000 	ldr.w	r3, [sl]
   1cb02:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1cb04:	2b00      	cmp	r3, #0
   1cb06:	d0ae      	beq.n	1ca66 <spi_nrfx_transceive+0x246>
   1cb08:	f8da 3004 	ldr.w	r3, [sl, #4]
   1cb0c:	e7ac      	b.n	1ca68 <spi_nrfx_transceive+0x248>
	status = ctx->sync_status;
   1cb0e:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1cb10:	e6bc      	b.n	1c88c <spi_nrfx_transceive+0x6c>
   1cb12:	bf00      	nop
   1cb14:	00036cdd 	.word	0x00036cdd
   1cb18:	000315d4 	.word	0x000315d4
   1cb1c:	00036cf7 	.word	0x00036cf7
   1cb20:	01000003 	.word	0x01000003
   1cb24:	00036d19 	.word	0x00036d19
   1cb28:	00036d38 	.word	0x00036d38
   1cb2c:	0001e847 	.word	0x0001e847
   1cb30:	00036d67 	.word	0x00036d67
   1cb34:	00f42400 	.word	0x00f42400
   1cb38:	40005000 	.word	0x40005000
   1cb3c:	0003d08f 	.word	0x0003d08f
   1cb40:	0007a11f 	.word	0x0007a11f
   1cb44:	000f423f 	.word	0x000f423f
   1cb48:	001e847f 	.word	0x001e847f
   1cb4c:	003d08ff 	.word	0x003d08ff
   1cb50:	007a1200 	.word	0x007a1200
   1cb54:	01e84800 	.word	0x01e84800
   1cb58:	0001c75d 	.word	0x0001c75d
   1cb5c:	0bad0000 	.word	0x0bad0000
   1cb60:	00036d98 	.word	0x00036d98
   1cb64:	00036dbf 	.word	0x00036dbf

0001cb68 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1cb68:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1cb6c:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1cb70:	280a      	cmp	r0, #10
   1cb72:	bf9a      	itte	ls
   1cb74:	4b02      	ldrls	r3, [pc, #8]	; (1cb80 <qspi_get_zephyr_ret_code+0x18>)
   1cb76:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1cb7a:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1cb7e:	4770      	bx	lr
   1cb80:	000325d4 	.word	0x000325d4

0001cb84 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1cb84:	4b02      	ldr	r3, [pc, #8]	; (1cb90 <qspi_nor_pages_layout+0xc>)
   1cb86:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1cb88:	2301      	movs	r3, #1
   1cb8a:	6013      	str	r3, [r2, #0]
}
   1cb8c:	4770      	bx	lr
   1cb8e:	bf00      	nop
   1cb90:	000323d8 	.word	0x000323d8

0001cb94 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1cb94:	4800      	ldr	r0, [pc, #0]	; (1cb98 <qspi_flash_get_parameters+0x4>)
   1cb96:	4770      	bx	lr
   1cb98:	0003236c 	.word	0x0003236c

0001cb9c <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1cb9c:	4b05      	ldr	r3, [pc, #20]	; (1cbb4 <qspi_wait_for_completion.isra.0+0x18>)
   1cb9e:	4299      	cmp	r1, r3
   1cba0:	d106      	bne.n	1cbb0 <qspi_wait_for_completion.isra.0+0x14>
   1cba2:	f04f 32ff 	mov.w	r2, #4294967295
   1cba6:	f04f 33ff 	mov.w	r3, #4294967295
   1cbaa:	3030      	adds	r0, #48	; 0x30
   1cbac:	f008 bd50 	b.w	25650 <z_impl_k_sem_take>
}
   1cbb0:	4770      	bx	lr
   1cbb2:	bf00      	nop
   1cbb4:	0bad0000 	.word	0x0bad0000

0001cbb8 <qspi_device_init>:
{
   1cbb8:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1cbba:	6905      	ldr	r5, [r0, #16]
{
   1cbbc:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1cbbe:	4e0f      	ldr	r6, [pc, #60]	; (1cbfc <qspi_device_init+0x44>)
	qspi_lock(dev);
   1cbc0:	4628      	mov	r0, r5
   1cbc2:	f011 fb41 	bl	2e248 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1cbc6:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1cbca:	f011 fb35 	bl	2e238 <k_sem_give>
	if (!qspi_initialized) {
   1cbce:	7833      	ldrb	r3, [r6, #0]
   1cbd0:	b98b      	cbnz	r3, 1cbf6 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1cbd2:	462a      	mov	r2, r5
   1cbd4:	490a      	ldr	r1, [pc, #40]	; (1cc00 <qspi_device_init+0x48>)
   1cbd6:	6860      	ldr	r0, [r4, #4]
   1cbd8:	f003 f8dc 	bl	1fd94 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1cbdc:	f7ff ffc4 	bl	1cb68 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1cbe0:	fab0 f380 	clz	r3, r0
   1cbe4:	4605      	mov	r5, r0
   1cbe6:	095b      	lsrs	r3, r3, #5
   1cbe8:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1cbea:	6920      	ldr	r0, [r4, #16]
   1cbec:	3018      	adds	r0, #24
   1cbee:	f011 fb23 	bl	2e238 <k_sem_give>
}
   1cbf2:	4628      	mov	r0, r5
   1cbf4:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1cbf6:	2500      	movs	r5, #0
   1cbf8:	e7f7      	b.n	1cbea <qspi_device_init+0x32>
   1cbfa:	bf00      	nop
   1cbfc:	20022402 	.word	0x20022402
   1cc00:	0002e23d 	.word	0x0002e23d

0001cc04 <qspi_device_uninit>:
{
   1cc04:	b538      	push	{r3, r4, r5, lr}
   1cc06:	4604      	mov	r4, r0
	qspi_lock(dev);
   1cc08:	6900      	ldr	r0, [r0, #16]
   1cc0a:	f011 fb1d 	bl	2e248 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1cc0e:	6925      	ldr	r5, [r4, #16]
   1cc10:	2200      	movs	r2, #0
   1cc12:	2300      	movs	r3, #0
   1cc14:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1cc18:	f008 fd1a 	bl	25650 <z_impl_k_sem_take>
	if (last) {
   1cc1c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1cc1e:	b94b      	cbnz	r3, 1cc34 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1cc20:	4d0a      	ldr	r5, [pc, #40]	; (1cc4c <qspi_device_uninit+0x48>)
   1cc22:	f003 fa0b 	bl	2003c <nrfx_qspi_mem_busy_check>
   1cc26:	42a8      	cmp	r0, r5
   1cc28:	d10a      	bne.n	1cc40 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1cc2a:	f003 fa29 	bl	20080 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1cc2e:	2200      	movs	r2, #0
   1cc30:	4b07      	ldr	r3, [pc, #28]	; (1cc50 <qspi_device_uninit+0x4c>)
   1cc32:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1cc34:	6920      	ldr	r0, [r4, #16]
}
   1cc36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1cc3a:	3018      	adds	r0, #24
   1cc3c:	f011 bafc 	b.w	2e238 <k_sem_give>
	return z_impl_k_sleep(timeout);
   1cc40:	2100      	movs	r1, #0
   1cc42:	f240 6067 	movw	r0, #1639	; 0x667
   1cc46:	f00a fbb3 	bl	273b0 <z_impl_k_sleep>
   1cc4a:	e7ea      	b.n	1cc22 <qspi_device_uninit+0x1e>
   1cc4c:	0bad0000 	.word	0x0bad0000
   1cc50:	20022402 	.word	0x20022402

0001cc54 <qspi_send_cmd>:
{
   1cc54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc56:	b083      	sub	sp, #12
	if (cmd->tx_buf) {
   1cc58:	684c      	ldr	r4, [r1, #4]
{
   1cc5a:	4605      	mov	r5, r0
   1cc5c:	af00      	add	r7, sp, #0
	if (cmd->tx_buf) {
   1cc5e:	b174      	cbz	r4, 1cc7e <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   1cc60:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1cc64:	6888      	ldr	r0, [r1, #8]
   1cc66:	b310      	cbz	r0, 1ccae <qspi_send_cmd+0x5a>
		rx_len = cmd->rx_buf->len;
   1cc68:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1cc6c:	b300      	cbz	r0, 1ccb0 <qspi_send_cmd+0x5c>
   1cc6e:	b1fb      	cbz	r3, 1ccb0 <qspi_send_cmd+0x5c>
		if (rx_len != tx_len) {
   1cc70:	4298      	cmp	r0, r3
   1cc72:	d006      	beq.n	1cc82 <qspi_send_cmd+0x2e>
		return -EINVAL;
   1cc74:	f06f 0015 	mvn.w	r0, #21
}
   1cc78:	370c      	adds	r7, #12
   1cc7a:	46bd      	mov	sp, r7
   1cc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   1cc7e:	4623      	mov	r3, r4
   1cc80:	e7f0      	b.n	1cc64 <qspi_send_cmd+0x10>
		xfer_len += tx_len;
   1cc82:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1cc84:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1cc86:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1cc88:	d915      	bls.n	1ccb6 <qspi_send_cmd+0x62>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1cc8a:	466c      	mov	r4, sp
   1cc8c:	b088      	sub	sp, #32
   1cc8e:	466a      	mov	r2, sp
   1cc90:	61d3      	str	r3, [r2, #28]
   1cc92:	2304      	movs	r3, #4
   1cc94:	4814      	ldr	r0, [pc, #80]	; (1cce8 <qspi_send_cmd+0x94>)
   1cc96:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1cc9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc9e:	2300      	movs	r3, #0
   1cca0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1cca4:	4811      	ldr	r0, [pc, #68]	; (1ccec <qspi_send_cmd+0x98>)
   1cca6:	f7f1 fdf3 	bl	e890 <z_impl_z_log_msg_static_create>
   1ccaa:	46a5      	mov	sp, r4
		return -EINVAL;
   1ccac:	e7e2      	b.n	1cc74 <qspi_send_cmd+0x20>
	void *rx_buf = NULL;
   1ccae:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1ccb0:	3301      	adds	r3, #1
   1ccb2:	4403      	add	r3, r0
   1ccb4:	e7e6      	b.n	1cc84 <qspi_send_cmd+0x30>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1ccb6:	707b      	strb	r3, [r7, #1]
   1ccb8:	f240 1301 	movw	r3, #257	; 0x101
   1ccbc:	807b      	strh	r3, [r7, #2]
   1ccbe:	2300      	movs	r3, #0
	qspi_lock(dev);
   1ccc0:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1ccc2:	713b      	strb	r3, [r7, #4]
   1ccc4:	7039      	strb	r1, [r7, #0]
   1ccc6:	717a      	strb	r2, [r7, #5]
	qspi_lock(dev);
   1ccc8:	f011 fabe 	bl	2e248 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1cccc:	4621      	mov	r1, r4
   1ccce:	4632      	mov	r2, r6
   1ccd0:	4638      	mov	r0, r7
   1ccd2:	f003 f951 	bl	1ff78 <nrfx_qspi_cinstr_xfer>
   1ccd6:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1ccd8:	6928      	ldr	r0, [r5, #16]
   1ccda:	3018      	adds	r0, #24
   1ccdc:	f011 faac 	bl	2e238 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1cce0:	4620      	mov	r0, r4
   1cce2:	f7ff ff41 	bl	1cb68 <qspi_get_zephyr_ret_code>
   1cce6:	e7c7      	b.n	1cc78 <qspi_send_cmd+0x24>
   1cce8:	00036dfc 	.word	0x00036dfc
   1ccec:	000315bc 	.word	0x000315bc

0001ccf0 <qspi_nor_init>:
{
   1ccf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1ccf4:	2202      	movs	r2, #2
   1ccf6:	b086      	sub	sp, #24
   1ccf8:	4b6a      	ldr	r3, [pc, #424]	; (1cea4 <qspi_nor_init+0x1b4>)
   1ccfa:	af00      	add	r7, sp, #0
   1ccfc:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1cd00:	6843      	ldr	r3, [r0, #4]
{
   1cd02:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1cd04:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1cd06:	2100      	movs	r1, #0
   1cd08:	4630      	mov	r0, r6
   1cd0a:	f107 020c 	add.w	r2, r7, #12
   1cd0e:	f011 fd90 	bl	2e832 <pinctrl_lookup_state>
	if (ret < 0) {
   1cd12:	1e04      	subs	r4, r0, #0
   1cd14:	db3a      	blt.n	1cd8c <qspi_nor_init+0x9c>
	return pinctrl_apply_state_direct(config, state);
   1cd16:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1cd18:	6832      	ldr	r2, [r6, #0]
   1cd1a:	7919      	ldrb	r1, [r3, #4]
   1cd1c:	6818      	ldr	r0, [r3, #0]
   1cd1e:	f011 fd9b 	bl	2e858 <pinctrl_configure_pins>
	if (ret < 0) {
   1cd22:	1e04      	subs	r4, r0, #0
   1cd24:	db32      	blt.n	1cd8c <qspi_nor_init+0x9c>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1cd26:	2200      	movs	r2, #0
   1cd28:	2101      	movs	r1, #1
   1cd2a:	202b      	movs	r0, #43	; 0x2b
   1cd2c:	f7f3 fea6 	bl	10a7c <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1cd30:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1cd32:	692a      	ldr	r2, [r5, #16]
   1cd34:	4630      	mov	r0, r6
   1cd36:	495c      	ldr	r1, [pc, #368]	; (1cea8 <qspi_nor_init+0x1b8>)
   1cd38:	f003 f82c 	bl	1fd94 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1cd3c:	f7ff ff14 	bl	1cb68 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1cd40:	1e04      	subs	r4, r0, #0
   1cd42:	db23      	blt.n	1cd8c <qspi_nor_init+0x9c>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1cd44:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1cd46:	3b02      	subs	r3, #2
   1cd48:	2b01      	cmp	r3, #1
   1cd4a:	d924      	bls.n	1cd96 <qspi_nor_init+0xa6>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1cd4c:	f896 800a 	ldrb.w	r8, [r6, #10]
   1cd50:	f1a8 0803 	sub.w	r8, r8, #3
   1cd54:	f1b8 0f01 	cmp.w	r8, #1
   1cd58:	bf8c      	ite	hi
   1cd5a:	f04f 0800 	movhi.w	r8, #0
   1cd5e:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1cd62:	4628      	mov	r0, r5
   1cd64:	f011 fa92 	bl	2e28c <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1cd68:	1e04      	subs	r4, r0, #0
   1cd6a:	da17      	bge.n	1cd9c <qspi_nor_init+0xac>
			LOG_ERR("RDSR failed: %d", ret);
   1cd6c:	466d      	mov	r5, sp
   1cd6e:	b088      	sub	sp, #32
   1cd70:	466a      	mov	r2, sp
   1cd72:	4b4e      	ldr	r3, [pc, #312]	; (1ceac <qspi_nor_init+0x1bc>)
   1cd74:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1cd78:	2303      	movs	r3, #3
   1cd7a:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd7e:	2300      	movs	r3, #0
   1cd80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cd84:	484a      	ldr	r0, [pc, #296]	; (1ceb0 <qspi_nor_init+0x1c0>)
   1cd86:	f7f1 fd83 	bl	e890 <z_impl_z_log_msg_static_create>
   1cd8a:	46ad      	mov	sp, r5
}
   1cd8c:	4620      	mov	r0, r4
   1cd8e:	3718      	adds	r7, #24
   1cd90:	46bd      	mov	sp, r7
   1cd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1cd96:	f04f 0801 	mov.w	r8, #1
   1cd9a:	e7e2      	b.n	1cd62 <qspi_nor_init+0x72>
		uint8_t sr = (uint8_t)ret;
   1cd9c:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1cd9e:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1cda2:	45a0      	cmp	r8, r4
   1cda4:	f107 0604 	add.w	r6, r7, #4
   1cda8:	d031      	beq.n	1ce0e <qspi_nor_init+0x11e>
	uint8_t sr_array[2] = {0};
   1cdaa:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1cdac:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1cdb0:	803b      	strh	r3, [r7, #0]
		sr_array[0] = sr_val;
   1cdb2:	703a      	strb	r2, [r7, #0]
	const struct qspi_buf sr_buf = {
   1cdb4:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1cdb6:	4628      	mov	r0, r5
	struct qspi_cmd cmd = {
   1cdb8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	const struct qspi_buf sr_buf = {
   1cdbc:	607f      	str	r7, [r7, #4]
	struct qspi_cmd cmd = {
   1cdbe:	617b      	str	r3, [r7, #20]
   1cdc0:	733a      	strb	r2, [r7, #12]
   1cdc2:	613e      	str	r6, [r7, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1cdc4:	f107 010c 	add.w	r1, r7, #12
   1cdc8:	f7ff ff44 	bl	1cc54 <qspi_send_cmd>
	if (ret == 0) {
   1cdcc:	1e04      	subs	r4, r0, #0
   1cdce:	d017      	beq.n	1ce00 <qspi_nor_init+0x110>
		if (ret < 0) {
   1cdd0:	dadc      	bge.n	1cd8c <qspi_nor_init+0x9c>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1cdd2:	4a38      	ldr	r2, [pc, #224]	; (1ceb4 <qspi_nor_init+0x1c4>)
   1cdd4:	4b38      	ldr	r3, [pc, #224]	; (1ceb8 <qspi_nor_init+0x1c8>)
   1cdd6:	466d      	mov	r5, sp
   1cdd8:	b08a      	sub	sp, #40	; 0x28
   1cdda:	f1b8 0f00 	cmp.w	r8, #0
   1cdde:	bf18      	it	ne
   1cde0:	4613      	movne	r3, r2
   1cde2:	466a      	mov	r2, sp
   1cde4:	4935      	ldr	r1, [pc, #212]	; (1cebc <qspi_nor_init+0x1cc>)
   1cde6:	61d4      	str	r4, [r2, #28]
   1cde8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1cdec:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cdf0:	8413      	strh	r3, [r2, #32]
   1cdf2:	4b33      	ldr	r3, [pc, #204]	; (1cec0 <qspi_nor_init+0x1d0>)
   1cdf4:	f842 3f10 	str.w	r3, [r2, #16]!
   1cdf8:	2300      	movs	r3, #0
   1cdfa:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1cdfe:	e7c1      	b.n	1cd84 <qspi_nor_init+0x94>
		ret = qspi_rdsr(dev, 1);
   1ce00:	4628      	mov	r0, r5
   1ce02:	f011 fa43 	bl	2e28c <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1ce06:	1e04      	subs	r4, r0, #0
   1ce08:	dbe3      	blt.n	1cdd2 <qspi_nor_init+0xe2>
   1ce0a:	07e3      	lsls	r3, r4, #31
   1ce0c:	d4f8      	bmi.n	1ce00 <qspi_nor_init+0x110>
	qspi_device_uninit(dev);
   1ce0e:	4628      	mov	r0, r5
   1ce10:	f7ff fef8 	bl	1cc04 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1ce14:	2403      	movs	r4, #3
   1ce16:	2300      	movs	r3, #0
   1ce18:	e9c7 4302 	strd	r4, r3, [r7, #8]
   1ce1c:	613b      	str	r3, [r7, #16]
   1ce1e:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1ce20:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1ce22:	607f      	str	r7, [r7, #4]
	const struct qspi_cmd cmd = {
   1ce24:	733b      	strb	r3, [r7, #12]
   1ce26:	617e      	str	r6, [r7, #20]
	int ret = qspi_device_init(dev);
   1ce28:	f7ff fec6 	bl	1cbb8 <qspi_device_init>
	if (ret == 0) {
   1ce2c:	4602      	mov	r2, r0
   1ce2e:	b128      	cbz	r0, 1ce3c <qspi_nor_init+0x14c>
	qspi_device_uninit(dev);
   1ce30:	4628      	mov	r0, r5
   1ce32:	f7ff fee7 	bl	1cc04 <qspi_device_uninit>
		return -ENODEV;
   1ce36:	f06f 0412 	mvn.w	r4, #18
   1ce3a:	e7a7      	b.n	1cd8c <qspi_nor_init+0x9c>
		ret = qspi_send_cmd(dev, &cmd, false);
   1ce3c:	4628      	mov	r0, r5
   1ce3e:	f107 010c 	add.w	r1, r7, #12
   1ce42:	f7ff ff07 	bl	1cc54 <qspi_send_cmd>
   1ce46:	4606      	mov	r6, r0
	qspi_device_uninit(dev);
   1ce48:	4628      	mov	r0, r5
   1ce4a:	f7ff fedb 	bl	1cc04 <qspi_device_uninit>
	if (ret != 0) {
   1ce4e:	2e00      	cmp	r6, #0
   1ce50:	d1f1      	bne.n	1ce36 <qspi_nor_init+0x146>
	const struct qspi_nor_config *qnc = dev->config;
   1ce52:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1ce54:	4622      	mov	r2, r4
   1ce56:	4639      	mov	r1, r7
   1ce58:	f105 001c 	add.w	r0, r5, #28
   1ce5c:	f013 fb77 	bl	3054e <memcmp>
   1ce60:	4604      	mov	r4, r0
   1ce62:	2800      	cmp	r0, #0
   1ce64:	d092      	beq.n	1cd8c <qspi_nor_init+0x9c>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1ce66:	466c      	mov	r4, sp
   1ce68:	b08c      	sub	sp, #48	; 0x30
   1ce6a:	466a      	mov	r2, sp
   1ce6c:	f897 8000 	ldrb.w	r8, [r7]
   1ce70:	f897 e001 	ldrb.w	lr, [r7, #1]
   1ce74:	f897 c002 	ldrb.w	ip, [r7, #2]
   1ce78:	7f28      	ldrb	r0, [r5, #28]
   1ce7a:	7f69      	ldrb	r1, [r5, #29]
   1ce7c:	7fab      	ldrb	r3, [r5, #30]
   1ce7e:	62d3      	str	r3, [r2, #44]	; 0x2c
   1ce80:	2308      	movs	r3, #8
   1ce82:	4d10      	ldr	r5, [pc, #64]	; (1cec4 <qspi_nor_init+0x1d4>)
   1ce84:	e9c2 ec07 	strd	lr, ip, [r2, #28]
   1ce88:	e9c2 5805 	strd	r5, r8, [r2, #20]
   1ce8c:	e9c2 0109 	strd	r0, r1, [r2, #36]	; 0x24
   1ce90:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce94:	f244 0140 	movw	r1, #16448	; 0x4040
   1ce98:	4633      	mov	r3, r6
   1ce9a:	4805      	ldr	r0, [pc, #20]	; (1ceb0 <qspi_nor_init+0x1c0>)
   1ce9c:	f7f1 fcf8 	bl	e890 <z_impl_z_log_msg_static_create>
   1cea0:	46a5      	mov	sp, r4
		return -ENODEV;
   1cea2:	e7c8      	b.n	1ce36 <qspi_nor_init+0x146>
   1cea4:	40005000 	.word	0x40005000
   1cea8:	0002e23d 	.word	0x0002e23d
   1ceac:	00036e25 	.word	0x00036e25
   1ceb0:	000315bc 	.word	0x000315bc
   1ceb4:	0003553a 	.word	0x0003553a
   1ceb8:	00036e1f 	.word	0x00036e1f
   1cebc:	00036e35 	.word	0x00036e35
   1cec0:	01000004 	.word	0x01000004
   1cec4:	00036e46 	.word	0x00036e46

0001cec8 <qspi_nor_erase.part.0>:
static int qspi_nor_erase(const struct device *dev, off_t addr, size_t size)
   1cec8:	b580      	push	{r7, lr}
   1ceca:	af00      	add	r7, sp, #0
		LOG_ERR("erase error: address or size "
   1cecc:	b088      	sub	sp, #32
   1cece:	466a      	mov	r2, sp
   1ced0:	4b08      	ldr	r3, [pc, #32]	; (1cef4 <qspi_nor_erase.part.0+0x2c>)
   1ced2:	61d1      	str	r1, [r2, #28]
   1ced4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ced8:	2304      	movs	r3, #4
   1ceda:	f842 3f10 	str.w	r3, [r2, #16]!
   1cede:	2300      	movs	r3, #0
   1cee0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cee4:	4804      	ldr	r0, [pc, #16]	; (1cef8 <qspi_nor_erase.part.0+0x30>)
   1cee6:	f7f1 fcd3 	bl	e890 <z_impl_z_log_msg_static_create>
}
   1ceea:	f06f 0015 	mvn.w	r0, #21
   1ceee:	46bd      	mov	sp, r7
   1cef0:	bd80      	pop	{r7, pc}
   1cef2:	bf00      	nop
   1cef4:	00036e78 	.word	0x00036e78
   1cef8:	000315bc 	.word	0x000315bc

0001cefc <qspi_nor_erase>:
{
   1cefc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1cf00:	1e0b      	subs	r3, r1, #0
{
   1cf02:	4606      	mov	r6, r0
   1cf04:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1cf06:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1cf0a:	af00      	add	r7, sp, #0
	if (addr < 0 ||
   1cf0c:	db05      	blt.n	1cf1a <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
   1cf0e:	1899      	adds	r1, r3, r2
	if (addr < 0 ||
   1cf10:	f8da 2018 	ldr.w	r2, [sl, #24]
	    (addr + size) > params->size) {
   1cf14:	4699      	mov	r9, r3
	if (addr < 0 ||
   1cf16:	4291      	cmp	r1, r2
   1cf18:	d908      	bls.n	1cf2c <qspi_nor_erase+0x30>
   1cf1a:	4629      	mov	r1, r5
   1cf1c:	4618      	mov	r0, r3
   1cf1e:	f7ff ffd3 	bl	1cec8 <qspi_nor_erase.part.0>
   1cf22:	4604      	mov	r4, r0
}
   1cf24:	4620      	mov	r0, r4
   1cf26:	46bd      	mov	sp, r7
   1cf28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1cf2c:	f3c3 020b 	ubfx	r2, r3, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1cf30:	2d00      	cmp	r5, #0
   1cf32:	f000 8081 	beq.w	1d038 <qspi_nor_erase+0x13c>
   1cf36:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1cf3a:	4313      	orrs	r3, r2
   1cf3c:	d17c      	bne.n	1d038 <qspi_nor_erase+0x13c>
	rv = qspi_device_init(dev);
   1cf3e:	f7ff fe3b 	bl	1cbb8 <qspi_device_init>
	if (rv != 0) {
   1cf42:	4604      	mov	r4, r0
   1cf44:	bb60      	cbnz	r0, 1cfa0 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
   1cf46:	6930      	ldr	r0, [r6, #16]
   1cf48:	f011 f985 	bl	2e256 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1cf4c:	4621      	mov	r1, r4
   1cf4e:	4630      	mov	r0, r6
   1cf50:	f011 f987 	bl	2e262 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1cf54:	4604      	mov	r4, r0
   1cf56:	bb00      	cbnz	r0, 1cf9a <qspi_nor_erase+0x9e>
	qspi_lock(dev);
   1cf58:	6930      	ldr	r0, [r6, #16]
   1cf5a:	f011 f975 	bl	2e248 <qspi_lock.isra.0>
		if (size == params->size) {
   1cf5e:	f8da 3018 	ldr.w	r3, [sl, #24]
   1cf62:	42ab      	cmp	r3, r5
   1cf64:	d120      	bne.n	1cfa8 <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
   1cf66:	f011 fe2d 	bl	2ebc4 <nrfx_qspi_chip_erase>
   1cf6a:	46ab      	mov	fp, r5
   1cf6c:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   1cf6e:	4641      	mov	r1, r8
   1cf70:	6930      	ldr	r0, [r6, #16]
   1cf72:	f7ff fe13 	bl	1cb9c <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1cf76:	4b32      	ldr	r3, [pc, #200]	; (1d040 <qspi_nor_erase+0x144>)
   1cf78:	4598      	cmp	r8, r3
   1cf7a:	d147      	bne.n	1d00c <qspi_nor_erase+0x110>
	while (size > 0) {
   1cf7c:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   1cf80:	44d9      	add	r9, fp
	while (size > 0) {
   1cf82:	d1ec      	bne.n	1cf5e <qspi_nor_erase+0x62>
	k_sem_give(&dev_data->sem);
   1cf84:	6930      	ldr	r0, [r6, #16]
   1cf86:	3018      	adds	r0, #24
   1cf88:	f011 f956 	bl	2e238 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1cf8c:	2101      	movs	r1, #1
   1cf8e:	4630      	mov	r0, r6
   1cf90:	f011 f967 	bl	2e262 <qspi_nor_write_protection_set>
   1cf94:	2c00      	cmp	r4, #0
   1cf96:	bf08      	it	eq
   1cf98:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1cf9a:	6930      	ldr	r0, [r6, #16]
   1cf9c:	f011 f94c 	bl	2e238 <k_sem_give>
	qspi_device_uninit(dev);
   1cfa0:	4630      	mov	r0, r6
   1cfa2:	f7ff fe2f 	bl	1cc04 <qspi_device_uninit>
	return rv;
   1cfa6:	e7bd      	b.n	1cf24 <qspi_nor_erase+0x28>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1cfa8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1cfac:	d30a      	bcc.n	1cfc4 <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1cfae:	fa1f f389 	uxth.w	r3, r9
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1cfb2:	b953      	cbnz	r3, 1cfca <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1cfb4:	4649      	mov	r1, r9
   1cfb6:	2001      	movs	r0, #1
   1cfb8:	f003 f8c4 	bl	20144 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1cfbc:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1cfc0:	4680      	mov	r8, r0
			adj = QSPI_BLOCK_SIZE;
   1cfc2:	e7d4      	b.n	1cf6e <qspi_nor_erase+0x72>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1cfc4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1cfc8:	d309      	bcc.n	1cfde <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1cfca:	f3c9 000b 	ubfx	r0, r9, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1cfce:	b930      	cbnz	r0, 1cfde <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1cfd0:	4649      	mov	r1, r9
   1cfd2:	f003 f8b7 	bl	20144 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1cfd6:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1cfda:	4680      	mov	r8, r0
			adj = QSPI_SECTOR_SIZE;
   1cfdc:	e7c7      	b.n	1cf6e <qspi_nor_erase+0x72>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1cfde:	466c      	mov	r4, sp
   1cfe0:	b088      	sub	sp, #32
   1cfe2:	466a      	mov	r2, sp
   1cfe4:	4b17      	ldr	r3, [pc, #92]	; (1d044 <qspi_nor_erase+0x148>)
   1cfe6:	61d5      	str	r5, [r2, #28]
   1cfe8:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1cfec:	2304      	movs	r3, #4
   1cfee:	f842 3f10 	str.w	r3, [r2, #16]!
   1cff2:	2300      	movs	r3, #0
   1cff4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cff8:	4813      	ldr	r0, [pc, #76]	; (1d048 <qspi_nor_erase+0x14c>)
   1cffa:	f7f1 fc49 	bl	e890 <z_impl_z_log_msg_static_create>
		qspi_wait_for_completion(dev, res);
   1cffe:	4913      	ldr	r1, [pc, #76]	; (1d04c <qspi_nor_erase+0x150>)
   1d000:	46a5      	mov	sp, r4
   1d002:	6930      	ldr	r0, [r6, #16]
   1d004:	f7ff fdca 	bl	1cb9c <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1d008:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1d04c <qspi_nor_erase+0x150>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1d00c:	466c      	mov	r4, sp
   1d00e:	b088      	sub	sp, #32
   1d010:	466a      	mov	r2, sp
   1d012:	4b0f      	ldr	r3, [pc, #60]	; (1d050 <qspi_nor_erase+0x154>)
   1d014:	61d5      	str	r5, [r2, #28]
   1d016:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1d01a:	2304      	movs	r3, #4
   1d01c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d020:	2300      	movs	r3, #0
   1d022:	4809      	ldr	r0, [pc, #36]	; (1d048 <qspi_nor_erase+0x14c>)
   1d024:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d028:	f7f1 fc32 	bl	e890 <z_impl_z_log_msg_static_create>
			rv = qspi_get_zephyr_ret_code(res);
   1d02c:	4640      	mov	r0, r8
   1d02e:	46a5      	mov	sp, r4
   1d030:	f7ff fd9a 	bl	1cb68 <qspi_get_zephyr_ret_code>
   1d034:	4604      	mov	r4, r0
			break;
   1d036:	e7a5      	b.n	1cf84 <qspi_nor_erase+0x88>
		return -EINVAL;
   1d038:	f06f 0415 	mvn.w	r4, #21
   1d03c:	e772      	b.n	1cf24 <qspi_nor_erase+0x28>
   1d03e:	bf00      	nop
   1d040:	0bad0000 	.word	0x0bad0000
   1d044:	00036ec2 	.word	0x00036ec2
   1d048:	000315bc 	.word	0x000315bc
   1d04c:	0bad0004 	.word	0x0bad0004
   1d050:	00036ee0 	.word	0x00036ee0

0001d054 <qspi_nor_write>:
{
   1d054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d058:	b083      	sub	sp, #12
   1d05a:	4605      	mov	r5, r0
   1d05c:	4688      	mov	r8, r1
   1d05e:	461e      	mov	r6, r3
	if (!src) {
   1d060:	4691      	mov	r9, r2
{
   1d062:	af00      	add	r7, sp, #0
	if (!src) {
   1d064:	b30a      	cbz	r2, 1d0aa <qspi_nor_write+0x56>
	if ((size == 0)
   1d066:	b303      	cbz	r3, 1d0aa <qspi_nor_write+0x56>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1d068:	2b04      	cmp	r3, #4
   1d06a:	d901      	bls.n	1d070 <qspi_nor_write+0x1c>
   1d06c:	07b3      	lsls	r3, r6, #30
   1d06e:	d11c      	bne.n	1d0aa <qspi_nor_write+0x56>
	if ((addr % 4U) != 0) {
   1d070:	f018 0f03 	tst.w	r8, #3
   1d074:	d119      	bne.n	1d0aa <qspi_nor_write+0x56>
	if (addr < 0 ||
   1d076:	f1b8 0f00 	cmp.w	r8, #0
	const struct qspi_nor_config *params = dev->config;
   1d07a:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1d07c:	db04      	blt.n	1d088 <qspi_nor_write+0x34>
   1d07e:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1d080:	eb08 0306 	add.w	r3, r8, r6
	if (addr < 0 ||
   1d084:	4293      	cmp	r3, r2
   1d086:	d917      	bls.n	1d0b8 <qspi_nor_write+0x64>
		LOG_ERR("write error: address or size "
   1d088:	466c      	mov	r4, sp
   1d08a:	b088      	sub	sp, #32
   1d08c:	466a      	mov	r2, sp
   1d08e:	4b42      	ldr	r3, [pc, #264]	; (1d198 <qspi_nor_write+0x144>)
   1d090:	61d6      	str	r6, [r2, #28]
   1d092:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1d096:	2304      	movs	r3, #4
   1d098:	f842 3f10 	str.w	r3, [r2, #16]!
   1d09c:	2300      	movs	r3, #0
   1d09e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d0a2:	483e      	ldr	r0, [pc, #248]	; (1d19c <qspi_nor_write+0x148>)
   1d0a4:	f7f1 fbf4 	bl	e890 <z_impl_z_log_msg_static_create>
   1d0a8:	46a5      	mov	sp, r4
		return -EINVAL;
   1d0aa:	f06f 0415 	mvn.w	r4, #21
}
   1d0ae:	4620      	mov	r0, r4
   1d0b0:	370c      	adds	r7, #12
   1d0b2:	46bd      	mov	sp, r7
   1d0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1d0b8:	4628      	mov	r0, r5
   1d0ba:	f7ff fd7d 	bl	1cbb8 <qspi_device_init>
	if (rc != 0) {
   1d0be:	4604      	mov	r4, r0
   1d0c0:	2800      	cmp	r0, #0
   1d0c2:	d160      	bne.n	1d186 <qspi_nor_write+0x132>
	qspi_trans_lock(dev);
   1d0c4:	6928      	ldr	r0, [r5, #16]
   1d0c6:	f011 f8c6 	bl	2e256 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1d0ca:	4621      	mov	r1, r4
   1d0cc:	4628      	mov	r0, r5
   1d0ce:	f011 f8c8 	bl	2e262 <qspi_nor_write_protection_set>
   1d0d2:	4604      	mov	r4, r0
	qspi_lock(dev);
   1d0d4:	6928      	ldr	r0, [r5, #16]
   1d0d6:	f011 f8b7 	bl	2e248 <qspi_lock.isra.0>
	if (!res) {
   1d0da:	2c00      	cmp	r4, #0
   1d0dc:	d140      	bne.n	1d160 <qspi_nor_write+0x10c>
		if (size < 4U) {
   1d0de:	2e03      	cmp	r6, #3
   1d0e0:	d81c      	bhi.n	1d11c <qspi_nor_write+0xc8>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1d0e2:	2104      	movs	r1, #4
   1d0e4:	4642      	mov	r2, r8
   1d0e6:	1878      	adds	r0, r7, r1
   1d0e8:	f011 fd69 	bl	2ebbe <nrfx_qspi_read>
   1d0ec:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1d0ee:	4601      	mov	r1, r0
   1d0f0:	6928      	ldr	r0, [r5, #16]
   1d0f2:	f7ff fd53 	bl	1cb9c <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1d0f6:	4b2a      	ldr	r3, [pc, #168]	; (1d1a0 <qspi_nor_write+0x14c>)
   1d0f8:	429c      	cmp	r4, r3
   1d0fa:	d131      	bne.n	1d160 <qspi_nor_write+0x10c>
		memcpy(buf, sptr, slen);
   1d0fc:	4632      	mov	r2, r6
   1d0fe:	4649      	mov	r1, r9
   1d100:	1d38      	adds	r0, r7, #4
   1d102:	f013 fa34 	bl	3056e <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1d106:	2104      	movs	r1, #4
   1d108:	4642      	mov	r2, r8
   1d10a:	1878      	adds	r0, r7, r1
			res = nrfx_qspi_write(src, size, addr);
   1d10c:	f011 fd54 	bl	2ebb8 <nrfx_qspi_write>
   1d110:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1d112:	4601      	mov	r1, r0
   1d114:	6928      	ldr	r0, [r5, #16]
   1d116:	f7ff fd41 	bl	1cb9c <qspi_wait_for_completion.isra.0>
   1d11a:	e021      	b.n	1d160 <qspi_nor_write+0x10c>
   1d11c:	f009 4360 	and.w	r3, r9, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1d120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d124:	d033      	beq.n	1d18e <qspi_nor_write+0x13a>
			if (res == NRFX_SUCCESS) {
   1d126:	f8df b078 	ldr.w	fp, [pc, #120]	; 1d1a0 <qspi_nor_write+0x14c>
			size_t len = MIN(slen, sizeof(buf));
   1d12a:	2e04      	cmp	r6, #4
   1d12c:	46b2      	mov	sl, r6
   1d12e:	bf28      	it	cs
   1d130:	f04f 0a04 	movcs.w	sl, #4
			memcpy(buf, sp, len);
   1d134:	4649      	mov	r1, r9
   1d136:	4652      	mov	r2, sl
   1d138:	1d38      	adds	r0, r7, #4
   1d13a:	f013 fa18 	bl	3056e <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1d13e:	2104      	movs	r1, #4
   1d140:	4642      	mov	r2, r8
   1d142:	1878      	adds	r0, r7, r1
   1d144:	f011 fd38 	bl	2ebb8 <nrfx_qspi_write>
   1d148:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1d14a:	4601      	mov	r1, r0
   1d14c:	6928      	ldr	r0, [r5, #16]
   1d14e:	f7ff fd25 	bl	1cb9c <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1d152:	455c      	cmp	r4, fp
   1d154:	d104      	bne.n	1d160 <qspi_nor_write+0x10c>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1d156:	ebb6 060a 	subs.w	r6, r6, sl
				sp += len;
   1d15a:	44d1      	add	r9, sl
				addr += len;
   1d15c:	44d0      	add	r8, sl
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1d15e:	d1e4      	bne.n	1d12a <qspi_nor_write+0xd6>
	k_sem_give(&dev_data->sem);
   1d160:	6928      	ldr	r0, [r5, #16]
   1d162:	3018      	adds	r0, #24
   1d164:	f011 f868 	bl	2e238 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1d168:	2101      	movs	r1, #1
   1d16a:	4628      	mov	r0, r5
   1d16c:	f011 f879 	bl	2e262 <qspi_nor_write_protection_set>
   1d170:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1d172:	6928      	ldr	r0, [r5, #16]
   1d174:	f011 f860 	bl	2e238 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1d178:	2c00      	cmp	r4, #0
   1d17a:	bf14      	ite	ne
   1d17c:	4620      	movne	r0, r4
   1d17e:	4630      	moveq	r0, r6
   1d180:	f7ff fcf2 	bl	1cb68 <qspi_get_zephyr_ret_code>
   1d184:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1d186:	4628      	mov	r0, r5
   1d188:	f7ff fd3c 	bl	1cc04 <qspi_device_uninit>
	return rc;
   1d18c:	e78f      	b.n	1d0ae <qspi_nor_write+0x5a>
			res = nrfx_qspi_write(src, size, addr);
   1d18e:	4642      	mov	r2, r8
   1d190:	4631      	mov	r1, r6
   1d192:	4648      	mov	r0, r9
   1d194:	e7ba      	b.n	1d10c <qspi_nor_write+0xb8>
   1d196:	bf00      	nop
   1d198:	00036efe 	.word	0x00036efe
   1d19c:	000315bc 	.word	0x000315bc
   1d1a0:	0bad0000 	.word	0x0bad0000

0001d1a4 <qspi_nor_read>:
{
   1d1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1a8:	b085      	sub	sp, #20
   1d1aa:	4681      	mov	r9, r0
   1d1ac:	460e      	mov	r6, r1
   1d1ae:	461c      	mov	r4, r3
	if (!dest) {
   1d1b0:	4690      	mov	r8, r2
{
   1d1b2:	af00      	add	r7, sp, #0
	if (!dest) {
   1d1b4:	b1d2      	cbz	r2, 1d1ec <qspi_nor_read+0x48>
	if (!size) {
   1d1b6:	2b00      	cmp	r3, #0
   1d1b8:	f000 80ac 	beq.w	1d314 <qspi_nor_read+0x170>
	if (addr < 0 ||
   1d1bc:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1d1be:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1d1c0:	db03      	blt.n	1d1ca <qspi_nor_read+0x26>
   1d1c2:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1d1c4:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1d1c6:	4293      	cmp	r3, r2
   1d1c8:	d917      	bls.n	1d1fa <qspi_nor_read+0x56>
		LOG_ERR("read error: address or size "
   1d1ca:	466d      	mov	r5, sp
   1d1cc:	b088      	sub	sp, #32
   1d1ce:	466a      	mov	r2, sp
   1d1d0:	4b51      	ldr	r3, [pc, #324]	; (1d318 <qspi_nor_read+0x174>)
   1d1d2:	61d4      	str	r4, [r2, #28]
   1d1d4:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d1d8:	2304      	movs	r3, #4
   1d1da:	f842 3f10 	str.w	r3, [r2, #16]!
   1d1de:	2300      	movs	r3, #0
   1d1e0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d1e4:	484d      	ldr	r0, [pc, #308]	; (1d31c <qspi_nor_read+0x178>)
   1d1e6:	f7f1 fb53 	bl	e890 <z_impl_z_log_msg_static_create>
   1d1ea:	46ad      	mov	sp, r5
		return -EINVAL;
   1d1ec:	f06f 0515 	mvn.w	r5, #21
}
   1d1f0:	4628      	mov	r0, r5
   1d1f2:	3714      	adds	r7, #20
   1d1f4:	46bd      	mov	sp, r7
   1d1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1d1fa:	f7ff fcdd 	bl	1cbb8 <qspi_device_init>
	if (rc != 0) {
   1d1fe:	4605      	mov	r5, r0
   1d200:	2800      	cmp	r0, #0
   1d202:	f040 8081 	bne.w	1d308 <qspi_nor_read+0x164>
	qspi_lock(dev);
   1d206:	4275      	negs	r5, r6
   1d208:	f005 0503 	and.w	r5, r5, #3
   1d20c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d210:	f011 f81a 	bl	2e248 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1d214:	42a5      	cmp	r5, r4
   1d216:	bf28      	it	cs
   1d218:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1d21a:	f1d8 0200 	rsbs	r2, r8, #0
   1d21e:	f002 0203 	and.w	r2, r2, #3
   1d222:	f008 0303 	and.w	r3, r8, #3
   1d226:	bf58      	it	pl
   1d228:	4253      	negpl	r3, r2
   1d22a:	425b      	negs	r3, r3
   1d22c:	f003 0303 	and.w	r3, r3, #3
   1d230:	42a3      	cmp	r3, r4
   1d232:	bf28      	it	cs
   1d234:	4623      	movcs	r3, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1d236:	1b62      	subs	r2, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1d238:	1ae4      	subs	r4, r4, r3
   1d23a:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1d23e:	f022 0a03 	bic.w	sl, r2, #3
	if (flash_middle > dest_middle) {
   1d242:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1d244:	bfc8      	it	gt
   1d246:	46a2      	movgt	sl, r4
   1d248:	f002 0b03 	and.w	fp, r2, #3
   1d24c:	bfc8      	it	gt
   1d24e:	eba2 0b04 	subgt.w	fp, r2, r4
	if (flash_middle != 0) {
   1d252:	f1ba 0f00 	cmp.w	sl, #0
   1d256:	d01a      	beq.n	1d28e <qspi_nor_read+0xea>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1d258:	eb08 0203 	add.w	r2, r8, r3
   1d25c:	e9c7 3200 	strd	r3, r2, [r7]
   1d260:	4651      	mov	r1, sl
   1d262:	1972      	adds	r2, r6, r5
   1d264:	6878      	ldr	r0, [r7, #4]
   1d266:	f011 fcaa 	bl	2ebbe <nrfx_qspi_read>
   1d26a:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1d26c:	4601      	mov	r1, r0
   1d26e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d272:	f7ff fc93 	bl	1cb9c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1d276:	4a2a      	ldr	r2, [pc, #168]	; (1d320 <qspi_nor_read+0x17c>)
   1d278:	4294      	cmp	r4, r2
   1d27a:	d13c      	bne.n	1d2f6 <qspi_nor_read+0x152>
		if (flash_prefix != dest_prefix) {
   1d27c:	683b      	ldr	r3, [r7, #0]
   1d27e:	429d      	cmp	r5, r3
   1d280:	d005      	beq.n	1d28e <qspi_nor_read+0xea>
__ssp_bos_icheck3(memmove, void *, const void *)
   1d282:	4652      	mov	r2, sl
   1d284:	6879      	ldr	r1, [r7, #4]
   1d286:	eb08 0005 	add.w	r0, r8, r5
   1d28a:	f013 f990 	bl	305ae <memmove>
	if (flash_prefix != 0) {
   1d28e:	b1c5      	cbz	r5, 1d2c2 <qspi_nor_read+0x11e>
				     (WORD_SIZE - flash_prefix));
   1d290:	f1c5 0304 	rsb	r3, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1d294:	1af2      	subs	r2, r6, r3
   1d296:	2104      	movs	r1, #4
   1d298:	f107 0008 	add.w	r0, r7, #8
   1d29c:	607b      	str	r3, [r7, #4]
   1d29e:	f011 fc8e 	bl	2ebbe <nrfx_qspi_read>
   1d2a2:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1d2a4:	4601      	mov	r1, r0
   1d2a6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d2aa:	f7ff fc77 	bl	1cb9c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1d2ae:	4a1c      	ldr	r2, [pc, #112]	; (1d320 <qspi_nor_read+0x17c>)
   1d2b0:	4294      	cmp	r4, r2
   1d2b2:	d120      	bne.n	1d2f6 <qspi_nor_read+0x152>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d2b4:	687b      	ldr	r3, [r7, #4]
   1d2b6:	462a      	mov	r2, r5
   1d2b8:	3308      	adds	r3, #8
   1d2ba:	4640      	mov	r0, r8
   1d2bc:	19d9      	adds	r1, r3, r7
   1d2be:	f013 f956 	bl	3056e <memcpy>
	if (flash_suffix != 0) {
   1d2c2:	f1bb 0f00 	cmp.w	fp, #0
   1d2c6:	d023      	beq.n	1d310 <qspi_nor_read+0x16c>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1d2c8:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   1d2ca:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1d2cc:	4452      	add	r2, sl
   1d2ce:	1878      	adds	r0, r7, r1
   1d2d0:	f011 fc75 	bl	2ebbe <nrfx_qspi_read>
   1d2d4:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1d2d6:	4601      	mov	r1, r0
   1d2d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d2dc:	f7ff fc5e 	bl	1cb9c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1d2e0:	4b0f      	ldr	r3, [pc, #60]	; (1d320 <qspi_nor_read+0x17c>)
   1d2e2:	429c      	cmp	r4, r3
   1d2e4:	d107      	bne.n	1d2f6 <qspi_nor_read+0x152>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1d2e6:	eb0a 0005 	add.w	r0, sl, r5
   1d2ea:	465a      	mov	r2, fp
   1d2ec:	f107 0108 	add.w	r1, r7, #8
   1d2f0:	4440      	add	r0, r8
   1d2f2:	f013 f93c 	bl	3056e <memcpy>
	k_sem_give(&dev_data->sem);
   1d2f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d2fa:	3018      	adds	r0, #24
   1d2fc:	f010 ff9c 	bl	2e238 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1d300:	4620      	mov	r0, r4
   1d302:	f7ff fc31 	bl	1cb68 <qspi_get_zephyr_ret_code>
   1d306:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1d308:	4648      	mov	r0, r9
   1d30a:	f7ff fc7b 	bl	1cc04 <qspi_device_uninit>
	return rc;
   1d30e:	e76f      	b.n	1d1f0 <qspi_nor_read+0x4c>
	return res;
   1d310:	4c03      	ldr	r4, [pc, #12]	; (1d320 <qspi_nor_read+0x17c>)
   1d312:	e7f0      	b.n	1d2f6 <qspi_nor_read+0x152>
		return 0;
   1d314:	461d      	mov	r5, r3
   1d316:	e76b      	b.n	1d1f0 <qspi_nor_read+0x4c>
   1d318:	00036f48 	.word	0x00036f48
   1d31c:	000315bc 	.word	0x000315bc
   1d320:	0bad0000 	.word	0x0bad0000

0001d324 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1d324:	4b02      	ldr	r3, [pc, #8]	; (1d330 <flash_nrf_pages_layout+0xc>)
   1d326:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d328:	2301      	movs	r3, #1
   1d32a:	6013      	str	r3, [r2, #0]
}
   1d32c:	4770      	bx	lr
   1d32e:	bf00      	nop
   1d330:	20021898 	.word	0x20021898

0001d334 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1d334:	4800      	ldr	r0, [pc, #0]	; (1d338 <flash_nrf_get_parameters+0x4>)
   1d336:	4770      	bx	lr
   1d338:	000323f4 	.word	0x000323f4

0001d33c <flash_nrf_read>:
{
   1d33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d340:	460d      	mov	r5, r1
   1d342:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1d344:	4619      	mov	r1, r3
   1d346:	4628      	mov	r0, r5
{
   1d348:	461e      	mov	r6, r3
   1d34a:	4614      	mov	r4, r2
	if (is_regular_addr_valid(addr, len)) {
   1d34c:	f010 ffb9 	bl	2e2c2 <is_regular_addr_valid>
   1d350:	4603      	mov	r3, r0
   1d352:	b9a8      	cbnz	r0, 1d380 <flash_nrf_read+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d354:	46e8      	mov	r8, sp
   1d356:	b088      	sub	sp, #32
   1d358:	466c      	mov	r4, sp
   1d35a:	4a10      	ldr	r2, [pc, #64]	; (1d39c <flash_nrf_read+0x60>)
   1d35c:	2104      	movs	r1, #4
   1d35e:	e9c4 2505 	strd	r2, r5, [r4, #20]
   1d362:	4622      	mov	r2, r4
   1d364:	61e6      	str	r6, [r4, #28]
   1d366:	f842 1f10 	str.w	r1, [r2, #16]!
   1d36a:	480d      	ldr	r0, [pc, #52]	; (1d3a0 <flash_nrf_read+0x64>)
   1d36c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d370:	f7f1 fa8e 	bl	e890 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d374:	f06f 0015 	mvn.w	r0, #21
   1d378:	46c5      	mov	sp, r8
}
   1d37a:	46bd      	mov	sp, r7
   1d37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!len) {
   1d380:	b156      	cbz	r6, 1d398 <flash_nrf_read+0x5c>
	if (addr < PM_APP_ADDRESS) {
   1d382:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1d386:	4632      	mov	r2, r6
   1d388:	4629      	mov	r1, r5
   1d38a:	4620      	mov	r0, r4
	if (addr < PM_APP_ADDRESS) {
   1d38c:	da02      	bge.n	1d394 <flash_nrf_read+0x58>
		return soc_secure_mem_read(data, (void *)addr, len);
   1d38e:	f00d fa96 	bl	2a8be <soc_secure_mem_read>
   1d392:	e7f2      	b.n	1d37a <flash_nrf_read+0x3e>
   1d394:	f013 f8eb 	bl	3056e <memcpy>
		return 0;
   1d398:	2000      	movs	r0, #0
   1d39a:	e7ee      	b.n	1d37a <flash_nrf_read+0x3e>
   1d39c:	00036fa7 	.word	0x00036fa7
   1d3a0:	0003154c 	.word	0x0003154c

0001d3a4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1d3a4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d3a6:	2201      	movs	r2, #1
   1d3a8:	4806      	ldr	r0, [pc, #24]	; (1d3c4 <nrf_flash_init+0x20>)
   1d3aa:	4611      	mov	r1, r2
   1d3ac:	f012 ff1d 	bl	301ea <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d3b0:	f011 fbfc 	bl	2ebac <nrfx_nvmc_flash_page_count_get>
   1d3b4:	4c04      	ldr	r4, [pc, #16]	; (1d3c8 <nrf_flash_init+0x24>)
   1d3b6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d3b8:	f011 fbf5 	bl	2eba6 <nrfx_nvmc_flash_page_size_get>
   1d3bc:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1d3be:	2000      	movs	r0, #0
   1d3c0:	bd10      	pop	{r4, pc}
   1d3c2:	bf00      	nop
   1d3c4:	200218a0 	.word	0x200218a0
   1d3c8:	20021898 	.word	0x20021898

0001d3cc <flash_nrf_erase>:
{
   1d3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3d0:	af00      	add	r7, sp, #0
   1d3d2:	460e      	mov	r6, r1
   1d3d4:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3d6:	f011 fbe6 	bl	2eba6 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1d3da:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3dc:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1d3de:	4630      	mov	r0, r6
   1d3e0:	f010 ff6f 	bl	2e2c2 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d3e4:	46b0      	mov	r8, r6
	if (is_regular_addr_valid(addr, size)) {
   1d3e6:	4603      	mov	r3, r0
   1d3e8:	b3b8      	cbz	r0, 1d45a <flash_nrf_erase+0x8e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d3ea:	fbb6 f3f5 	udiv	r3, r6, r5
   1d3ee:	fb05 6313 	mls	r3, r5, r3, r6
   1d3f2:	b923      	cbnz	r3, 1d3fe <flash_nrf_erase+0x32>
   1d3f4:	fbb4 f3f5 	udiv	r3, r4, r5
   1d3f8:	fb05 4313 	mls	r3, r5, r3, r4
   1d3fc:	b19b      	cbz	r3, 1d426 <flash_nrf_erase+0x5a>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1d3fe:	466d      	mov	r5, sp
   1d400:	b088      	sub	sp, #32
   1d402:	466a      	mov	r2, sp
   1d404:	4b1a      	ldr	r3, [pc, #104]	; (1d470 <flash_nrf_erase+0xa4>)
   1d406:	61d4      	str	r4, [r2, #28]
   1d408:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d40c:	2304      	movs	r3, #4
   1d40e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d412:	2300      	movs	r3, #0
   1d414:	4817      	ldr	r0, [pc, #92]	; (1d474 <flash_nrf_erase+0xa8>)
   1d416:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d41a:	f7f1 fa39 	bl	e890 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1d41e:	f06f 0015 	mvn.w	r0, #21
   1d422:	46ad      	mov	sp, r5
		return -EINVAL;
   1d424:	e002      	b.n	1d42c <flash_nrf_erase+0x60>
		if (!n_pages) {
   1d426:	42ac      	cmp	r4, r5
   1d428:	d203      	bcs.n	1d432 <flash_nrf_erase+0x66>
			return 0;
   1d42a:	2000      	movs	r0, #0
}
   1d42c:	46bd      	mov	sp, r7
   1d42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
   1d432:	f04f 32ff 	mov.w	r2, #4294967295
   1d436:	f04f 33ff 	mov.w	r3, #4294967295
   1d43a:	480f      	ldr	r0, [pc, #60]	; (1d478 <flash_nrf_erase+0xac>)
   1d43c:	f008 f908 	bl	25650 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d440:	f011 fbb1 	bl	2eba6 <nrfx_nvmc_flash_page_size_get>
   1d444:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1d446:	4640      	mov	r0, r8
   1d448:	f002 faf4 	bl	1fa34 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1d44c:	1b64      	subs	r4, r4, r5
   1d44e:	44a8      	add	r8, r5
   1d450:	d1f9      	bne.n	1d446 <flash_nrf_erase+0x7a>
	z_impl_k_sem_give(sem);
   1d452:	4809      	ldr	r0, [pc, #36]	; (1d478 <flash_nrf_erase+0xac>)
   1d454:	f008 f8b8 	bl	255c8 <z_impl_k_sem_give>
}
   1d458:	e7e7      	b.n	1d42a <flash_nrf_erase+0x5e>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d45a:	466d      	mov	r5, sp
   1d45c:	b088      	sub	sp, #32
   1d45e:	466a      	mov	r2, sp
   1d460:	4906      	ldr	r1, [pc, #24]	; (1d47c <flash_nrf_erase+0xb0>)
   1d462:	61d4      	str	r4, [r2, #28]
   1d464:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1d468:	2104      	movs	r1, #4
   1d46a:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1d46e:	e7d1      	b.n	1d414 <flash_nrf_erase+0x48>
   1d470:	00036fc4 	.word	0x00036fc4
   1d474:	0003154c 	.word	0x0003154c
   1d478:	200218a0 	.word	0x200218a0
   1d47c:	00036fa7 	.word	0x00036fa7

0001d480 <flash_nrf_write>:
{
   1d480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d484:	460e      	mov	r6, r1
   1d486:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1d488:	4619      	mov	r1, r3
   1d48a:	4630      	mov	r0, r6
{
   1d48c:	461c      	mov	r4, r3
   1d48e:	4690      	mov	r8, r2
	if (is_regular_addr_valid(addr, len)) {
   1d490:	f010 ff17 	bl	2e2c2 <is_regular_addr_valid>
   1d494:	4603      	mov	r3, r0
   1d496:	b9a0      	cbnz	r0, 1d4c2 <flash_nrf_write+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d498:	466d      	mov	r5, sp
   1d49a:	b088      	sub	sp, #32
   1d49c:	466a      	mov	r2, sp
   1d49e:	4920      	ldr	r1, [pc, #128]	; (1d520 <flash_nrf_write+0xa0>)
   1d4a0:	61d4      	str	r4, [r2, #28]
   1d4a2:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1d4a6:	2104      	movs	r1, #4
   1d4a8:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1d4ac:	481d      	ldr	r0, [pc, #116]	; (1d524 <flash_nrf_write+0xa4>)
   1d4ae:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d4b2:	f7f1 f9ed 	bl	e890 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d4b6:	f06f 0015 	mvn.w	r0, #21
   1d4ba:	46ad      	mov	sp, r5
}
   1d4bc:	46bd      	mov	sp, r7
   1d4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1d4c2:	ea46 0504 	orr.w	r5, r6, r4
   1d4c6:	f015 0503 	ands.w	r5, r5, #3
   1d4ca:	d00b      	beq.n	1d4e4 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d4cc:	466d      	mov	r5, sp
   1d4ce:	b088      	sub	sp, #32
   1d4d0:	466a      	mov	r2, sp
   1d4d2:	4b15      	ldr	r3, [pc, #84]	; (1d528 <flash_nrf_write+0xa8>)
   1d4d4:	61d4      	str	r4, [r2, #28]
   1d4d6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d4da:	2304      	movs	r3, #4
   1d4dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1d4e0:	2300      	movs	r3, #0
   1d4e2:	e7e3      	b.n	1d4ac <flash_nrf_write+0x2c>
	if (!len) {
   1d4e4:	b1a4      	cbz	r4, 1d510 <flash_nrf_write+0x90>
	return z_impl_k_sem_take(sem, timeout);
   1d4e6:	f04f 32ff 	mov.w	r2, #4294967295
   1d4ea:	f04f 33ff 	mov.w	r3, #4294967295
   1d4ee:	480f      	ldr	r0, [pc, #60]	; (1d52c <flash_nrf_write+0xac>)
   1d4f0:	f008 f8ae 	bl	25650 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1d4f4:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1d4f8:	42a5      	cmp	r5, r4
   1d4fa:	eb05 0006 	add.w	r0, r5, r6
   1d4fe:	d109      	bne.n	1d514 <flash_nrf_write+0x94>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d500:	4a0b      	ldr	r2, [pc, #44]	; (1d530 <flash_nrf_write+0xb0>)
   1d502:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d506:	07db      	lsls	r3, r3, #31
   1d508:	d5fb      	bpl.n	1d502 <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   1d50a:	4808      	ldr	r0, [pc, #32]	; (1d52c <flash_nrf_write+0xac>)
   1d50c:	f008 f85c 	bl	255c8 <z_impl_k_sem_give>
	return ret;
   1d510:	2000      	movs	r0, #0
   1d512:	e7d3      	b.n	1d4bc <flash_nrf_write+0x3c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1d514:	f858 1005 	ldr.w	r1, [r8, r5]
   1d518:	f002 fabe 	bl	1fa98 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1d51c:	3504      	adds	r5, #4
}
   1d51e:	e7eb      	b.n	1d4f8 <flash_nrf_write+0x78>
   1d520:	00036fa7 	.word	0x00036fa7
   1d524:	0003154c 	.word	0x0003154c
   1d528:	00036fe3 	.word	0x00036fe3
   1d52c:	200218a0 	.word	0x200218a0
   1d530:	40039000 	.word	0x40039000

0001d534 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1d534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d536:	461d      	mov	r5, r3
	return config->uarte_regs;
   1d538:	6843      	ldr	r3, [r0, #4]
{
   1d53a:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1d53c:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d53e:	f8d3 c000 	ldr.w	ip, [r3]
   1d542:	f04f 0320 	mov.w	r3, #32
   1d546:	f3ef 8711 	mrs	r7, BASEPRI
   1d54a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d54e:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1d552:	68e3      	ldr	r3, [r4, #12]
   1d554:	68d8      	ldr	r0, [r3, #12]
   1d556:	b138      	cbz	r0, 1d568 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1d558:	f387 8811 	msr	BASEPRI, r7
   1d55c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1d560:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1d564:	b003      	add	sp, #12
   1d566:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1d568:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1d56a:	68e3      	ldr	r3, [r4, #12]
   1d56c:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d56e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d572:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1d576:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1d57a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d57e:	68e3      	ldr	r3, [r4, #12]
   1d580:	d111      	bne.n	1d5a6 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1d582:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1d584:	68e3      	ldr	r3, [r4, #12]
   1d586:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1d588:	4621      	mov	r1, r4
   1d58a:	4630      	mov	r0, r6
   1d58c:	f011 f881 	bl	2e692 <start_tx_locked>
   1d590:	f387 8811 	msr	BASEPRI, r7
   1d594:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1d598:	7ae3      	ldrb	r3, [r4, #11]
   1d59a:	2b01      	cmp	r3, #1
   1d59c:	d101      	bne.n	1d5a2 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1d59e:	1c6b      	adds	r3, r5, #1
   1d5a0:	d106      	bne.n	1d5b0 <uarte_nrfx_tx+0x7c>
	return 0;
   1d5a2:	2000      	movs	r0, #0
   1d5a4:	e7de      	b.n	1d564 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1d5a6:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1d5a8:	4620      	mov	r0, r4
   1d5aa:	f010 ffeb 	bl	2e584 <setup_tx_cache>
   1d5ae:	e7eb      	b.n	1d588 <uarte_nrfx_tx+0x54>
   1d5b0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1d5b4:	2100      	movs	r1, #0
   1d5b6:	480a      	ldr	r0, [pc, #40]	; (1d5e0 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1d5b8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1d5bc:	2300      	movs	r3, #0
   1d5be:	fbc5 0106 	smlal	r0, r1, r5, r6
   1d5c2:	4a08      	ldr	r2, [pc, #32]	; (1d5e4 <uarte_nrfx_tx+0xb0>)
   1d5c4:	f7eb fc94 	bl	8ef0 <__aeabi_uldivmod>
   1d5c8:	68e4      	ldr	r4, [r4, #12]
   1d5ca:	4602      	mov	r2, r0
   1d5cc:	460b      	mov	r3, r1
   1d5ce:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1d5d0:	2000      	movs	r0, #0
   1d5d2:	2100      	movs	r1, #0
   1d5d4:	e9cd 0100 	strd	r0, r1, [sp]
   1d5d8:	4620      	mov	r0, r4
   1d5da:	f00a fc07 	bl	27dec <z_impl_k_timer_start>
   1d5de:	e7e0      	b.n	1d5a2 <uarte_nrfx_tx+0x6e>
   1d5e0:	000f423f 	.word	0x000f423f
   1d5e4:	000f4240 	.word	0x000f4240

0001d5e8 <uarte_nrfx_configure>:
{
   1d5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1d5ea:	794b      	ldrb	r3, [r1, #5]
   1d5ec:	2b01      	cmp	r3, #1
   1d5ee:	d029      	beq.n	1d644 <uarte_nrfx_configure+0x5c>
   1d5f0:	2b03      	cmp	r3, #3
   1d5f2:	d124      	bne.n	1d63e <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d5f4:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d5f6:	798b      	ldrb	r3, [r1, #6]
   1d5f8:	2b03      	cmp	r3, #3
   1d5fa:	d120      	bne.n	1d63e <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1d5fc:	79ce      	ldrb	r6, [r1, #7]
   1d5fe:	b10e      	cbz	r6, 1d604 <uarte_nrfx_configure+0x1c>
   1d600:	2e01      	cmp	r6, #1
   1d602:	d11c      	bne.n	1d63e <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1d604:	790a      	ldrb	r2, [r1, #4]
   1d606:	2a01      	cmp	r2, #1
   1d608:	d01e      	beq.n	1d648 <uarte_nrfx_configure+0x60>
   1d60a:	2a02      	cmp	r2, #2
   1d60c:	d020      	beq.n	1d650 <uarte_nrfx_configure+0x68>
   1d60e:	b9b2      	cbnz	r2, 1d63e <uarte_nrfx_configure+0x56>
   1d610:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d612:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d614:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1d616:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d61a:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1d61e:	d06e      	beq.n	1d6fe <uarte_nrfx_configure+0x116>
   1d620:	d833      	bhi.n	1d68a <uarte_nrfx_configure+0xa2>
   1d622:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d626:	d06d      	beq.n	1d704 <uarte_nrfx_configure+0x11c>
   1d628:	d81c      	bhi.n	1d664 <uarte_nrfx_configure+0x7c>
   1d62a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d62e:	d06b      	beq.n	1d708 <uarte_nrfx_configure+0x120>
   1d630:	d810      	bhi.n	1d654 <uarte_nrfx_configure+0x6c>
   1d632:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d636:	d06a      	beq.n	1d70e <uarte_nrfx_configure+0x126>
   1d638:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d63c:	d06a      	beq.n	1d714 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1d63e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d642:	e05b      	b.n	1d6fc <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1d644:	2700      	movs	r7, #0
   1d646:	e7d6      	b.n	1d5f6 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1d648:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d64c:	220e      	movs	r2, #14
   1d64e:	e7e0      	b.n	1d612 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1d650:	2400      	movs	r4, #0
   1d652:	e7fb      	b.n	1d64c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1d654:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d658:	d05f      	beq.n	1d71a <uarte_nrfx_configure+0x132>
   1d65a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d65e:	d1ee      	bne.n	1d63e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d660:	4b38      	ldr	r3, [pc, #224]	; (1d744 <uarte_nrfx_configure+0x15c>)
   1d662:	e03c      	b.n	1d6de <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d664:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d668:	d05a      	beq.n	1d720 <uarte_nrfx_configure+0x138>
   1d66a:	d807      	bhi.n	1d67c <uarte_nrfx_configure+0x94>
   1d66c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d670:	d058      	beq.n	1d724 <uarte_nrfx_configure+0x13c>
   1d672:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d676:	d1e2      	bne.n	1d63e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d678:	4b33      	ldr	r3, [pc, #204]	; (1d748 <uarte_nrfx_configure+0x160>)
   1d67a:	e030      	b.n	1d6de <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d67c:	f647 2512 	movw	r5, #31250	; 0x7a12
   1d680:	42ab      	cmp	r3, r5
   1d682:	d1dc      	bne.n	1d63e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d684:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d688:	e029      	b.n	1d6de <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d68a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d68e:	d04b      	beq.n	1d728 <uarte_nrfx_configure+0x140>
   1d690:	d813      	bhi.n	1d6ba <uarte_nrfx_configure+0xd2>
   1d692:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d696:	d04a      	beq.n	1d72e <uarte_nrfx_configure+0x146>
   1d698:	d809      	bhi.n	1d6ae <uarte_nrfx_configure+0xc6>
   1d69a:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1d69e:	42ab      	cmp	r3, r5
   1d6a0:	d047      	beq.n	1d732 <uarte_nrfx_configure+0x14a>
   1d6a2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d6a6:	d1ca      	bne.n	1d63e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d6a8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d6ac:	e017      	b.n	1d6de <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d6ae:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d6b2:	d1c4      	bne.n	1d63e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d6b4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d6b8:	e011      	b.n	1d6de <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d6ba:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d6be:	d03b      	beq.n	1d738 <uarte_nrfx_configure+0x150>
   1d6c0:	d808      	bhi.n	1d6d4 <uarte_nrfx_configure+0xec>
   1d6c2:	4d22      	ldr	r5, [pc, #136]	; (1d74c <uarte_nrfx_configure+0x164>)
   1d6c4:	42ab      	cmp	r3, r5
   1d6c6:	d03a      	beq.n	1d73e <uarte_nrfx_configure+0x156>
   1d6c8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d6cc:	d1b7      	bne.n	1d63e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d6ce:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d6d2:	e004      	b.n	1d6de <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d6d4:	4d1e      	ldr	r5, [pc, #120]	; (1d750 <uarte_nrfx_configure+0x168>)
   1d6d6:	42ab      	cmp	r3, r5
   1d6d8:	d1b1      	bne.n	1d63e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d6da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d6de:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d6e0:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1d6e4:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1d6e6:	433a      	orrs	r2, r7
   1d6e8:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1d6ea:	4334      	orrs	r4, r6
   1d6ec:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d6ee:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1d6f2:	1d2b      	adds	r3, r5, #4
   1d6f4:	c903      	ldmia	r1, {r0, r1}
   1d6f6:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1d6fa:	2000      	movs	r0, #0
}
   1d6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d6fe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d702:	e7ec      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d704:	4b13      	ldr	r3, [pc, #76]	; (1d754 <uarte_nrfx_configure+0x16c>)
   1d706:	e7ea      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d708:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d70c:	e7e7      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1d70e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d712:	e7e4      	b.n	1d6de <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d714:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d718:	e7e1      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d71a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d71e:	e7de      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d720:	4b0d      	ldr	r3, [pc, #52]	; (1d758 <uarte_nrfx_configure+0x170>)
   1d722:	e7dc      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d724:	4b0d      	ldr	r3, [pc, #52]	; (1d75c <uarte_nrfx_configure+0x174>)
   1d726:	e7da      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d728:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d72c:	e7d7      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d72e:	4b0c      	ldr	r3, [pc, #48]	; (1d760 <uarte_nrfx_configure+0x178>)
   1d730:	e7d5      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d732:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d736:	e7d2      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d738:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d73c:	e7cf      	b.n	1d6de <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d73e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d742:	e7cc      	b.n	1d6de <uarte_nrfx_configure+0xf6>
   1d744:	0013b000 	.word	0x0013b000
   1d748:	004ea000 	.word	0x004ea000
   1d74c:	0003d090 	.word	0x0003d090
   1d750:	000f4240 	.word	0x000f4240
   1d754:	00275000 	.word	0x00275000
   1d758:	0075c000 	.word	0x0075c000
   1d75c:	003af000 	.word	0x003af000
   1d760:	013a9000 	.word	0x013a9000

0001d764 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d764:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1d766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1d76a:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1d76e:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1d770:	f8d9 4000 	ldr.w	r4, [r9]
static int uarte_instance_init(const struct device *dev,
   1d774:	b087      	sub	sp, #28
   1d776:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1d77a:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d77c:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1d780:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1d782:	466a      	mov	r2, sp
   1d784:	4640      	mov	r0, r8
   1d786:	f011 f854 	bl	2e832 <pinctrl_lookup_state>
	if (ret < 0) {
   1d78a:	1e05      	subs	r5, r0, #0
   1d78c:	db26      	blt.n	1d7dc <uarte_instance_init.constprop.0+0x78>
	return pinctrl_apply_state_direct(config, state);
   1d78e:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d790:	f8d8 2000 	ldr.w	r2, [r8]
   1d794:	7919      	ldrb	r1, [r3, #4]
   1d796:	6818      	ldr	r0, [r3, #0]
   1d798:	f011 f85e 	bl	2e858 <pinctrl_configure_pins>
	if (err < 0) {
   1d79c:	1e05      	subs	r5, r0, #0
   1d79e:	db1d      	blt.n	1d7dc <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d7a0:	4638      	mov	r0, r7
   1d7a2:	1d31      	adds	r1, r6, #4
   1d7a4:	f7ff ff20 	bl	1d5e8 <uarte_nrfx_configure>
	if (err) {
   1d7a8:	4605      	mov	r5, r0
   1d7aa:	b9b8      	cbnz	r0, 1d7dc <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d7ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d7b0:	0799      	lsls	r1, r3, #30
   1d7b2:	d533      	bpl.n	1d81c <uarte_instance_init.constprop.0+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d7b4:	f106 001c 	add.w	r0, r6, #28
   1d7b8:	f001 fc62 	bl	1f080 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d7bc:	4b4f      	ldr	r3, [pc, #316]	; (1d8fc <uarte_instance_init.constprop.0+0x198>)
   1d7be:	4298      	cmp	r0, r3
   1d7c0:	d010      	beq.n	1d7e4 <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   1d7c2:	4b4f      	ldr	r3, [pc, #316]	; (1d900 <uarte_instance_init.constprop.0+0x19c>)
   1d7c4:	9305      	str	r3, [sp, #20]
   1d7c6:	2302      	movs	r3, #2
   1d7c8:	9304      	str	r3, [sp, #16]
   1d7ca:	462b      	mov	r3, r5
		return -EIO;
   1d7cc:	f06f 0504 	mvn.w	r5, #4
   1d7d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d7d4:	484b      	ldr	r0, [pc, #300]	; (1d904 <uarte_instance_init.constprop.0+0x1a0>)
   1d7d6:	aa04      	add	r2, sp, #16
   1d7d8:	f7f1 f85a 	bl	e890 <z_impl_z_log_msg_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1d7dc:	4628      	mov	r0, r5
   1d7de:	b007      	add	sp, #28
   1d7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d7e4:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1d7e6:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d7ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d7ee:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1d7f2:	d10b      	bne.n	1d80c <uarte_instance_init.constprop.0+0xa8>
   1d7f4:	4944      	ldr	r1, [pc, #272]	; (1d908 <uarte_instance_init.constprop.0+0x1a4>)
   1d7f6:	4845      	ldr	r0, [pc, #276]	; (1d90c <uarte_instance_init.constprop.0+0x1a8>)
   1d7f8:	f240 234e 	movw	r3, #590	; 0x24e
   1d7fc:	4a44      	ldr	r2, [pc, #272]	; (1d910 <uarte_instance_init.constprop.0+0x1ac>)
   1d7fe:	f00c ff5c 	bl	2a6ba <assert_print>
   1d802:	f240 214e 	movw	r1, #590	; 0x24e
   1d806:	4842      	ldr	r0, [pc, #264]	; (1d910 <uarte_instance_init.constprop.0+0x1ac>)
   1d808:	f00c ff50 	bl	2a6ac <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d80c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d810:	2301      	movs	r3, #1
   1d812:	7f32      	ldrb	r2, [r6, #28]
   1d814:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1d816:	4a3f      	ldr	r2, [pc, #252]	; (1d914 <uarte_instance_init.constprop.0+0x1b0>)
   1d818:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1d81c:	68f3      	ldr	r3, [r6, #12]
   1d81e:	2b00      	cmp	r3, #0
   1d820:	d059      	beq.n	1d8d6 <uarte_instance_init.constprop.0+0x172>
    p_reg->INTENSET = mask;
   1d822:	2204      	movs	r2, #4
	return config->uarte_regs;
   1d824:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d826:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1d82a:	681b      	ldr	r3, [r3, #0]
   1d82c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1d830:	2201      	movs	r2, #1
   1d832:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1d836:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1d83a:	4937      	ldr	r1, [pc, #220]	; (1d918 <uarte_instance_init.constprop.0+0x1b4>)
   1d83c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d840:	2108      	movs	r1, #8
   1d842:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d846:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d84a:	b1a1      	cbz	r1, 1d876 <uarte_instance_init.constprop.0+0x112>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d84c:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d84e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d852:	b91a      	cbnz	r2, 1d85c <uarte_instance_init.constprop.0+0xf8>
   1d854:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1d858:	2a00      	cmp	r2, #0
   1d85a:	d0f8      	beq.n	1d84e <uarte_instance_init.constprop.0+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d85c:	2200      	movs	r2, #0
   1d85e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1d862:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1d866:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1d86a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1d86e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1d872:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1d876:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d87a:	2200      	movs	r2, #0
   1d87c:	4927      	ldr	r1, [pc, #156]	; (1d91c <uarte_instance_init.constprop.0+0x1b8>)
   1d87e:	3080      	adds	r0, #128	; 0x80
   1d880:	f012 fd84 	bl	3038c <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1d884:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1d888:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1d88c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d890:	2200      	movs	r2, #0
   1d892:	4923      	ldr	r1, [pc, #140]	; (1d920 <uarte_instance_init.constprop.0+0x1bc>)
   1d894:	3020      	adds	r0, #32
   1d896:	f012 fd79 	bl	3038c <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1d89a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1d89e:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d8a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d8a6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d8a8:	bf5c      	itt	pl
   1d8aa:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d8ae:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d8b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d8b6:	06db      	lsls	r3, r3, #27
   1d8b8:	bf44      	itt	mi
   1d8ba:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d8be:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d8c2:	6973      	ldr	r3, [r6, #20]
   1d8c4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d8c8:	2300      	movs	r3, #0
   1d8ca:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8ce:	2301      	movs	r3, #1
   1d8d0:	60a3      	str	r3, [r4, #8]
   1d8d2:	60e3      	str	r3, [r4, #12]
	return 0;
   1d8d4:	e782      	b.n	1d7dc <uarte_instance_init.constprop.0+0x78>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d8d6:	2308      	movs	r3, #8
   1d8d8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d8dc:	f899 3008 	ldrb.w	r3, [r9, #8]
   1d8e0:	2b00      	cmp	r3, #0
   1d8e2:	d1de      	bne.n	1d8a2 <uarte_instance_init.constprop.0+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d8e4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d8e8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d8ec:	69b3      	ldr	r3, [r6, #24]
   1d8ee:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d8f2:	2301      	movs	r3, #1
   1d8f4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8f8:	6023      	str	r3, [r4, #0]
}
   1d8fa:	e7d2      	b.n	1d8a2 <uarte_instance_init.constprop.0+0x13e>
   1d8fc:	0bad0000 	.word	0x0bad0000
   1d900:	00037022 	.word	0x00037022
   1d904:	000315e4 	.word	0x000315e4
   1d908:	00033555 	.word	0x00033555
   1d90c:	00032659 	.word	0x00032659
   1d910:	0003351d 	.word	0x0003351d
   1d914:	40017000 	.word	0x40017000
   1d918:	000a0210 	.word	0x000a0210
   1d91c:	0002e705 	.word	0x0002e705
   1d920:	0002e7d5 	.word	0x0002e7d5

0001d924 <uarte_nrfx_poll_out>:
{
   1d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d928:	4604      	mov	r4, r0
   1d92a:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1d92c:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d92e:	f012 fc0b 	bl	30148 <k_is_in_isr>
   1d932:	b9b0      	cbnz	r0, 1d962 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1d934:	4b2a      	ldr	r3, [pc, #168]	; (1d9e0 <uarte_nrfx_poll_out+0xbc>)
   1d936:	781b      	ldrb	r3, [r3, #0]
   1d938:	b19b      	cbz	r3, 1d962 <uarte_nrfx_poll_out+0x3e>
{
   1d93a:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d93c:	6860      	ldr	r0, [r4, #4]
   1d93e:	f010 fe98 	bl	2e672 <is_tx_ready.isra.0>
   1d942:	2800      	cmp	r0, #0
   1d944:	d138      	bne.n	1d9b8 <uarte_nrfx_poll_out+0x94>
   1d946:	2001      	movs	r0, #1
   1d948:	f011 f8b0 	bl	2eaac <nrfx_busy_wait>
   1d94c:	3f01      	subs	r7, #1
   1d94e:	d1f5      	bne.n	1d93c <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1d950:	2100      	movs	r1, #0
   1d952:	2021      	movs	r0, #33	; 0x21
   1d954:	f009 fd2c 	bl	273b0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d958:	e7ef      	b.n	1d93a <uarte_nrfx_poll_out+0x16>
   1d95a:	f381 8811 	msr	BASEPRI, r1
   1d95e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d962:	f04f 0320 	mov.w	r3, #32
   1d966:	f3ef 8111 	mrs	r1, BASEPRI
   1d96a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d96e:	f3bf 8f6f 	isb	sy
   1d972:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1d976:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1d978:	4640      	mov	r0, r8
   1d97a:	f010 fe7a 	bl	2e672 <is_tx_ready.isra.0>
   1d97e:	2800      	cmp	r0, #0
   1d980:	d0eb      	beq.n	1d95a <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1d982:	68eb      	ldr	r3, [r5, #12]
   1d984:	b15b      	cbz	r3, 1d99e <uarte_nrfx_poll_out+0x7a>
   1d986:	68da      	ldr	r2, [r3, #12]
   1d988:	b14a      	cbz	r2, 1d99e <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1d98a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1d98e:	2a00      	cmp	r2, #0
   1d990:	da05      	bge.n	1d99e <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1d992:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1d996:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1d99a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1d99e:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1d9a0:	2201      	movs	r2, #1
	*data->char_out = c;
   1d9a2:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1d9a4:	4620      	mov	r0, r4
   1d9a6:	6969      	ldr	r1, [r5, #20]
   1d9a8:	f010 fd0c 	bl	2e3c4 <tx_start>
	__asm__ volatile(
   1d9ac:	f387 8811 	msr	BASEPRI, r7
   1d9b0:	f3bf 8f6f 	isb	sy
}
   1d9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d9b8:	f04f 0320 	mov.w	r3, #32
   1d9bc:	f3ef 8111 	mrs	r1, BASEPRI
   1d9c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d9c4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d9c8:	6860      	ldr	r0, [r4, #4]
   1d9ca:	460f      	mov	r7, r1
   1d9cc:	f010 fe51 	bl	2e672 <is_tx_ready.isra.0>
   1d9d0:	2800      	cmp	r0, #0
   1d9d2:	d1e4      	bne.n	1d99e <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1d9d4:	f381 8811 	msr	BASEPRI, r1
   1d9d8:	f3bf 8f6f 	isb	sy
}
   1d9dc:	e7b8      	b.n	1d950 <uarte_nrfx_poll_out+0x2c>
   1d9de:	bf00      	nop
   1d9e0:	20022827 	.word	0x20022827

0001d9e4 <uarte_nrfx_rx_enable>:
{
   1d9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1d9e8:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1d9ec:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1d9ee:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1d9f2:	4605      	mov	r5, r0
   1d9f4:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1d9f6:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d9f8:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1d9fc:	b172      	cbz	r2, 1da1c <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1d9fe:	4944      	ldr	r1, [pc, #272]	; (1db10 <uarte_nrfx_rx_enable+0x12c>)
   1da00:	f240 337d 	movw	r3, #893	; 0x37d
   1da04:	4a43      	ldr	r2, [pc, #268]	; (1db14 <uarte_nrfx_rx_enable+0x130>)
   1da06:	4844      	ldr	r0, [pc, #272]	; (1db18 <uarte_nrfx_rx_enable+0x134>)
   1da08:	f00c fe57 	bl	2a6ba <assert_print>
   1da0c:	4843      	ldr	r0, [pc, #268]	; (1db1c <uarte_nrfx_rx_enable+0x138>)
   1da0e:	f00c fe54 	bl	2a6ba <assert_print>
   1da12:	f240 317d 	movw	r1, #893	; 0x37d
   1da16:	483f      	ldr	r0, [pc, #252]	; (1db14 <uarte_nrfx_rx_enable+0x130>)
   1da18:	f00c fe48 	bl	2a6ac <assert_post_action>
	if (data->async->rx_enabled) {
   1da1c:	68e2      	ldr	r2, [r4, #12]
   1da1e:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1da22:	2900      	cmp	r1, #0
   1da24:	d170      	bne.n	1db08 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1da26:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1da2a:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1da2c:	bfca      	itet	gt
   1da2e:	2205      	movgt	r2, #5
   1da30:	235c      	movle	r3, #92	; 0x5c
   1da32:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1da36:	68e2      	ldr	r2, [r4, #12]
   1da38:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1da3a:	68e3      	ldr	r3, [r4, #12]
   1da3c:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1da40:	68e3      	ldr	r3, [r4, #12]
   1da42:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1da44:	2300      	movs	r3, #0
   1da46:	68e2      	ldr	r2, [r4, #12]
   1da48:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1da4a:	68e2      	ldr	r2, [r4, #12]
   1da4c:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1da4e:	68e2      	ldr	r2, [r4, #12]
   1da50:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1da52:	f8da 3004 	ldr.w	r3, [sl, #4]
   1da56:	06da      	lsls	r2, r3, #27
   1da58:	d523      	bpl.n	1daa2 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1da5a:	68e1      	ldr	r1, [r4, #12]
   1da5c:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1da60:	b1fe      	cbz	r6, 1daa2 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1da62:	42be      	cmp	r6, r7
   1da64:	bf28      	it	cs
   1da66:	463e      	movcs	r6, r7
   1da68:	4640      	mov	r0, r8
   1da6a:	4632      	mov	r2, r6
   1da6c:	31c4      	adds	r1, #196	; 0xc4
   1da6e:	f012 fd7e 	bl	3056e <memcpy>
			if (!len) {
   1da72:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1da74:	44b0      	add	r8, r6
			if (!len) {
   1da76:	d114      	bne.n	1daa2 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1da78:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1da7a:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1da7c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1da80:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1da82:	1b9b      	subs	r3, r3, r6
   1da84:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1da88:	f010 fccb 	bl	2e422 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1da8c:	68e1      	ldr	r1, [r4, #12]
   1da8e:	4628      	mov	r0, r5
   1da90:	3158      	adds	r1, #88	; 0x58
   1da92:	f010 fcdf 	bl	2e454 <rx_buf_release>
				notify_rx_disable(dev);
   1da96:	4628      	mov	r0, r5
   1da98:	f010 fcf4 	bl	2e484 <notify_rx_disable>
	return 0;
   1da9c:	2000      	movs	r0, #0
}
   1da9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1daa2:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1daa4:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1daa8:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1daac:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1dab0:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1dab4:	2201      	movs	r2, #1
   1dab6:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1daba:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1dabe:	68e3      	ldr	r3, [r4, #12]
   1dac0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dac4:	f8da 3004 	ldr.w	r3, [sl, #4]
   1dac8:	06db      	lsls	r3, r3, #27
   1daca:	d519      	bpl.n	1db00 <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1dacc:	f04f 0320 	mov.w	r3, #32
   1dad0:	f3ef 8111 	mrs	r1, BASEPRI
   1dad4:	f383 8812 	msr	BASEPRI_MAX, r3
   1dad8:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1dadc:	692b      	ldr	r3, [r5, #16]
   1dade:	68db      	ldr	r3, [r3, #12]
   1dae0:	b12b      	cbz	r3, 1daee <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1dae2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1dae6:	f042 0202 	orr.w	r2, r2, #2
   1daea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1daee:	2208      	movs	r2, #8
	return config->uarte_regs;
   1daf0:	686b      	ldr	r3, [r5, #4]
   1daf2:	681b      	ldr	r3, [r3, #0]
   1daf4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1daf8:	f381 8811 	msr	BASEPRI, r1
   1dafc:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1db00:	2301      	movs	r3, #1
   1db02:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1db06:	e7c9      	b.n	1da9c <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1db08:	f06f 000f 	mvn.w	r0, #15
   1db0c:	e7c7      	b.n	1da9e <uarte_nrfx_rx_enable+0xba>
   1db0e:	bf00      	nop
   1db10:	00037b2a 	.word	0x00037b2a
   1db14:	00037041 	.word	0x00037041
   1db18:	00032659 	.word	0x00032659
   1db1c:	00037075 	.word	0x00037075

0001db20 <uarte_nrfx_isr_async>:
{
   1db20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1db24:	6843      	ldr	r3, [r0, #4]
{
   1db26:	4604      	mov	r4, r0
	return config->uarte_regs;
   1db28:	681d      	ldr	r5, [r3, #0]
{
   1db2a:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db2c:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1db30:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1db32:	b169      	cbz	r1, 1db50 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db34:	2200      	movs	r2, #0
   1db36:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1db3a:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1db3e:	68da      	ldr	r2, [r3, #12]
   1db40:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1db44:	3301      	adds	r3, #1
   1db46:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1db4a:	b008      	add	sp, #32
   1db4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db50:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1db54:	b323      	cbz	r3, 1dba0 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db56:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1db5a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1db5e:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1db60:	2214      	movs	r2, #20
	return config->uarte_regs;
   1db62:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1db64:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1db66:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1db6a:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1db6e:	f012 fd38 	bl	305e2 <memset>
   1db72:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1db74:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1db76:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1db7a:	f100 8103 	bmi.w	1dd84 <uarte_nrfx_isr_async+0x264>
   1db7e:	07b3      	lsls	r3, r6, #30
   1db80:	f100 8102 	bmi.w	1dd88 <uarte_nrfx_isr_async+0x268>
   1db84:	0777      	lsls	r7, r6, #29
   1db86:	f100 8101 	bmi.w	1dd8c <uarte_nrfx_isr_async+0x26c>
   1db8a:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1db8e:	4620      	mov	r0, r4
   1db90:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1db92:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1db96:	f010 fc3d 	bl	2e414 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1db9a:	4620      	mov	r0, r4
   1db9c:	f010 fcd0 	bl	2e540 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dba0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1dba4:	b38b      	cbz	r3, 1dc0a <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1dba6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1dbaa:	06d8      	lsls	r0, r3, #27
   1dbac:	d52d      	bpl.n	1dc0a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbae:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1dbb2:	2201      	movs	r2, #1
   1dbb4:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1dbb8:	6926      	ldr	r6, [r4, #16]
   1dbba:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1dbbe:	6863      	ldr	r3, [r4, #4]
   1dbc0:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1dbc2:	68f3      	ldr	r3, [r6, #12]
   1dbc4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1dbc8:	68f0      	ldr	r0, [r6, #12]
   1dbca:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1dbcc:	f012 fbea 	bl	303a4 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1dbd0:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1dbd2:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1dbd6:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1dbda:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1dbde:	68f2      	ldr	r2, [r6, #12]
   1dbe0:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1dbe2:	1a1b      	subs	r3, r3, r0
   1dbe4:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1dbe6:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1dbe8:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1dbec:	4408      	add	r0, r1
	if (rx_len > 0) {
   1dbee:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1dbf0:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1dbf2:	dd02      	ble.n	1dbfa <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1dbf4:	4620      	mov	r0, r4
   1dbf6:	f010 fc14 	bl	2e422 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1dbfa:	68f1      	ldr	r1, [r6, #12]
   1dbfc:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1dc00:	2b00      	cmp	r3, #0
   1dc02:	f040 80c5 	bne.w	1dd90 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1dc06:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc0a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1dc0e:	b383      	cbz	r3, 1dc72 <uarte_nrfx_isr_async+0x152>
   1dc10:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1dc14:	bb6e      	cbnz	r6, 1dc72 <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1dc16:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc18:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1dc1c:	4631      	mov	r1, r6
   1dc1e:	a803      	add	r0, sp, #12
   1dc20:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1dc24:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1dc26:	f012 fcdc 	bl	305e2 <memset>
   1dc2a:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1dc2c:	a903      	add	r1, sp, #12
   1dc2e:	4620      	mov	r0, r4
	struct uart_event evt = {
   1dc30:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1dc34:	f010 fbee 	bl	2e414 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1dc38:	68fb      	ldr	r3, [r7, #12]
   1dc3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1dc3c:	1c51      	adds	r1, r2, #1
   1dc3e:	d018      	beq.n	1dc72 <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1dc40:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1dc42:	68ff      	ldr	r7, [r7, #12]
   1dc44:	498e      	ldr	r1, [pc, #568]	; (1de80 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1dc46:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1dc48:	468e      	mov	lr, r1
   1dc4a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1dc4e:	4631      	mov	r1, r6
   1dc50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1dc54:	fbcc e100 	smlal	lr, r1, ip, r0
   1dc58:	2300      	movs	r3, #0
   1dc5a:	4670      	mov	r0, lr
   1dc5c:	4a89      	ldr	r2, [pc, #548]	; (1de84 <uarte_nrfx_isr_async+0x364>)
   1dc5e:	f7eb f947 	bl	8ef0 <__aeabi_uldivmod>
   1dc62:	4602      	mov	r2, r0
   1dc64:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1dc66:	e9cd 0100 	strd	r0, r1, [sp]
   1dc6a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1dc6e:	f00a f8bd 	bl	27dec <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc72:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1dc76:	b333      	cbz	r3, 1dcc6 <uarte_nrfx_isr_async+0x1a6>
   1dc78:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1dc7c:	bb1e      	cbnz	r6, 1dcc6 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc7e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1dc82:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1dc84:	4620      	mov	r0, r4
   1dc86:	68f9      	ldr	r1, [r7, #12]
   1dc88:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1dc8c:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1dc8e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1dc92:	f010 fbdf 	bl	2e454 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1dc96:	68f9      	ldr	r1, [r7, #12]
   1dc98:	4620      	mov	r0, r4
   1dc9a:	3164      	adds	r1, #100	; 0x64
   1dc9c:	f010 fbda 	bl	2e454 <rx_buf_release>
	if (data->async->rx_enabled) {
   1dca0:	68fb      	ldr	r3, [r7, #12]
   1dca2:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1dca6:	2a00      	cmp	r2, #0
   1dca8:	f000 80a3 	beq.w	1ddf2 <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1dcac:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dcb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1dcb4:	06d8      	lsls	r0, r3, #27
   1dcb6:	d503      	bpl.n	1dcc0 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1dcb8:	2102      	movs	r1, #2
   1dcba:	4620      	mov	r0, r4
   1dcbc:	f010 fcaf 	bl	2e61e <async_uart_release>
	notify_rx_disable(dev);
   1dcc0:	4620      	mov	r0, r4
   1dcc2:	f010 fbdf 	bl	2e484 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dcc6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1dcca:	b1db      	cbz	r3, 1dd04 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1dccc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1dcd0:	05d9      	lsls	r1, r3, #23
   1dcd2:	d517      	bpl.n	1dd04 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1dcd4:	6863      	ldr	r3, [r4, #4]
   1dcd6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1dcd8:	f04f 0120 	mov.w	r1, #32
   1dcdc:	f3ef 8211 	mrs	r2, BASEPRI
   1dce0:	f381 8812 	msr	BASEPRI_MAX, r1
   1dce4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dce8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dcec:	b131      	cbz	r1, 1dcfc <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dcee:	2100      	movs	r1, #0
   1dcf0:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1dcf4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dcf8:	2101      	movs	r1, #1
   1dcfa:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1dcfc:	f382 8811 	msr	BASEPRI, r2
   1dd00:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd04:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1dd08:	2b00      	cmp	r3, #0
   1dd0a:	f43f af1e 	beq.w	1db4a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1dd0e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1dd12:	025a      	lsls	r2, r3, #9
   1dd14:	f57f af19 	bpl.w	1db4a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1dd18:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1dd1a:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dd1c:	e9d3 7300 	ldrd	r7, r3, [r3]
   1dd20:	06db      	lsls	r3, r3, #27
   1dd22:	d46b      	bmi.n	1ddfc <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1dd24:	68eb      	ldr	r3, [r5, #12]
   1dd26:	689b      	ldr	r3, [r3, #8]
   1dd28:	2b00      	cmp	r3, #0
   1dd2a:	f43f af0e 	beq.w	1db4a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1dd2e:	f04f 0320 	mov.w	r3, #32
   1dd32:	f3ef 8211 	mrs	r2, BASEPRI
   1dd36:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd3a:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1dd3e:	68eb      	ldr	r3, [r5, #12]
   1dd40:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1dd44:	2900      	cmp	r1, #0
   1dd46:	bfac      	ite	ge
   1dd48:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1dd4c:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1dd50:	f382 8811 	msr	BASEPRI, r2
   1dd54:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1dd58:	68eb      	ldr	r3, [r5, #12]
   1dd5a:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1dd5e:	2a00      	cmp	r2, #0
   1dd60:	d059      	beq.n	1de16 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1dd62:	f04f 0320 	mov.w	r3, #32
   1dd66:	f3ef 8611 	mrs	r6, BASEPRI
   1dd6a:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd6e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1dd72:	4629      	mov	r1, r5
   1dd74:	4620      	mov	r0, r4
   1dd76:	f010 fc8c 	bl	2e692 <start_tx_locked>
	__asm__ volatile(
   1dd7a:	f386 8811 	msr	BASEPRI, r6
   1dd7e:	f3bf 8f6f 	isb	sy
				return;
   1dd82:	e6e2      	b.n	1db4a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1dd84:	2601      	movs	r6, #1
   1dd86:	e702      	b.n	1db8e <uarte_nrfx_isr_async+0x6e>
   1dd88:	2602      	movs	r6, #2
   1dd8a:	e700      	b.n	1db8e <uarte_nrfx_isr_async+0x6e>
   1dd8c:	2604      	movs	r6, #4
   1dd8e:	e6fe      	b.n	1db8e <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1dd90:	4620      	mov	r0, r4
   1dd92:	3158      	adds	r1, #88	; 0x58
   1dd94:	f010 fb5e 	bl	2e454 <rx_buf_release>
	__asm__ volatile(
   1dd98:	f04f 0320 	mov.w	r3, #32
   1dd9c:	f3ef 8111 	mrs	r1, BASEPRI
   1dda0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dda4:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1dda8:	68f3      	ldr	r3, [r6, #12]
   1ddaa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1ddac:	b1f2      	cbz	r2, 1ddec <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1ddae:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1ddb0:	68f3      	ldr	r3, [r6, #12]
   1ddb2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1ddb4:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1ddb6:	2300      	movs	r3, #0
   1ddb8:	68f2      	ldr	r2, [r6, #12]
   1ddba:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1ddbc:	68f2      	ldr	r2, [r6, #12]
   1ddbe:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1ddc0:	68f2      	ldr	r2, [r6, #12]
   1ddc2:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ddc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1ddc8:	b90b      	cbnz	r3, 1ddce <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ddca:	2301      	movs	r3, #1
   1ddcc:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1ddce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1ddd2:	f023 0320 	bic.w	r3, r3, #32
   1ddd6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1ddda:	f381 8811 	msr	BASEPRI, r1
   1ddde:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1dde2:	2200      	movs	r2, #0
   1dde4:	68f3      	ldr	r3, [r6, #12]
   1dde6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1ddea:	e70e      	b.n	1dc0a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ddec:	2301      	movs	r3, #1
   1ddee:	607b      	str	r3, [r7, #4]
}
   1ddf0:	e7f3      	b.n	1ddda <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1ddf2:	4611      	mov	r1, r2
   1ddf4:	6860      	ldr	r0, [r4, #4]
   1ddf6:	f010 fbdd 	bl	2e5b4 <rx_flush.isra.0>
   1ddfa:	e759      	b.n	1dcb0 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1ddfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1de00:	2101      	movs	r1, #1
   1de02:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1de06:	4620      	mov	r0, r4
   1de08:	f010 fc09 	bl	2e61e <async_uart_release>
		if (!data->async->tx_size) {
   1de0c:	68eb      	ldr	r3, [r5, #12]
   1de0e:	68db      	ldr	r3, [r3, #12]
   1de10:	2b00      	cmp	r3, #0
   1de12:	d187      	bne.n	1dd24 <uarte_nrfx_isr_async+0x204>
   1de14:	e699      	b.n	1db4a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1de16:	6899      	ldr	r1, [r3, #8]
   1de18:	691a      	ldr	r2, [r3, #16]
   1de1a:	4291      	cmp	r1, r2
   1de1c:	d00c      	beq.n	1de38 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1de1e:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1de20:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1de22:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1de24:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1de26:	d128      	bne.n	1de7a <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1de28:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1de2a:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1de2c:	f010 fbaa 	bl	2e584 <setup_tx_cache>
   1de30:	2800      	cmp	r0, #0
   1de32:	d196      	bne.n	1dd62 <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1de34:	68eb      	ldr	r3, [r5, #12]
   1de36:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1de38:	68e8      	ldr	r0, [r5, #12]
   1de3a:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1de3c:	f012 fab2 	bl	303a4 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1de40:	2214      	movs	r2, #20
   1de42:	2100      	movs	r1, #0
   1de44:	a803      	add	r0, sp, #12
   1de46:	f012 fbcc 	bl	305e2 <memset>
		.data.tx.buf = data->async->tx_buf,
   1de4a:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1de4c:	4620      	mov	r0, r4
	struct uart_event evt = {
   1de4e:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1de50:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1de52:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1de56:	68db      	ldr	r3, [r3, #12]
   1de58:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1de5a:	bf1c      	itt	ne
   1de5c:	2301      	movne	r3, #1
   1de5e:	f88d 300c 	strbne.w	r3, [sp, #12]
   1de62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1de66:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1de6a:	2300      	movs	r3, #0
   1de6c:	68ea      	ldr	r2, [r5, #12]
   1de6e:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1de70:	68ea      	ldr	r2, [r5, #12]
   1de72:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1de74:	f010 face 	bl	2e414 <user_callback>
   1de78:	e667      	b.n	1db4a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1de7a:	4616      	mov	r6, r2
   1de7c:	e7dc      	b.n	1de38 <uarte_nrfx_isr_async+0x318>
   1de7e:	bf00      	nop
   1de80:	000f423f 	.word	0x000f423f
   1de84:	000f4240 	.word	0x000f4240

0001de88 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1de88:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1de8a:	7e01      	ldrb	r1, [r0, #24]
   1de8c:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1de8e:	2902      	cmp	r1, #2
{
   1de90:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   1de92:	d018      	beq.n	1dec6 <bt_rpmsg_send+0x3e>
   1de94:	2904      	cmp	r1, #4
   1de96:	d015      	beq.n	1dec4 <bt_rpmsg_send+0x3c>
   1de98:	b339      	cbz	r1, 1deea <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1de9a:	466d      	mov	r5, sp
   1de9c:	b088      	sub	sp, #32
   1de9e:	466a      	mov	r2, sp
   1dea0:	4b13      	ldr	r3, [pc, #76]	; (1def0 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   1dea2:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1dea6:	2303      	movs	r3, #3
   1dea8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1deac:	4811      	ldr	r0, [pc, #68]	; (1def4 <bt_rpmsg_send+0x6c>)
   1deae:	f842 3f10 	str.w	r3, [r2, #16]!
   1deb2:	f010 fc93 	bl	2e7dc <z_log_msg_static_create.constprop.0>
   1deb6:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   1deb8:	4620      	mov	r0, r4
   1deba:	f7fd fb65 	bl	1b588 <net_buf_unref>
	return 0;
}
   1debe:	2000      	movs	r0, #0
   1dec0:	46bd      	mov	sp, r7
   1dec2:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   1dec4:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1dec6:	f104 000c 	add.w	r0, r4, #12
   1deca:	f010 f889 	bl	2dfe0 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1dece:	8a22      	ldrh	r2, [r4, #16]
   1ded0:	68e1      	ldr	r1, [r4, #12]
   1ded2:	4809      	ldr	r0, [pc, #36]	; (1def8 <bt_rpmsg_send+0x70>)
   1ded4:	f7f1 fba6 	bl	f624 <ipc_service_send>
	if (err < 0) {
   1ded8:	2800      	cmp	r0, #0
   1deda:	daed      	bge.n	1deb8 <bt_rpmsg_send+0x30>
		LOG_ERR("Failed to send (err %d)", err);
   1dedc:	466d      	mov	r5, sp
   1dede:	b088      	sub	sp, #32
   1dee0:	466a      	mov	r2, sp
   1dee2:	4b06      	ldr	r3, [pc, #24]	; (1defc <bt_rpmsg_send+0x74>)
   1dee4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dee8:	e7dd      	b.n	1dea6 <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   1deea:	2101      	movs	r1, #1
   1deec:	e7eb      	b.n	1dec6 <bt_rpmsg_send+0x3e>
   1deee:	bf00      	nop
   1def0:	000370b1 	.word	0x000370b1
   1def4:	000314e4 	.word	0x000314e4
   1def8:	200218b8 	.word	0x200218b8
   1defc:	000370c1 	.word	0x000370c1

0001df00 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1df00:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1df02:	480c      	ldr	r0, [pc, #48]	; (1df34 <bt_rpmsg_init+0x34>)
{
   1df04:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   1df06:	f7f5 faa7 	bl	13458 <bt_hci_driver_register>
	if (err < 0) {
   1df0a:	1e04      	subs	r4, r0, #0
   1df0c:	da0e      	bge.n	1df2c <bt_rpmsg_init+0x2c>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1df0e:	466d      	mov	r5, sp
   1df10:	b088      	sub	sp, #32
   1df12:	466a      	mov	r2, sp
   1df14:	4b08      	ldr	r3, [pc, #32]	; (1df38 <bt_rpmsg_init+0x38>)
   1df16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1df1a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1df1e:	2303      	movs	r3, #3
   1df20:	4806      	ldr	r0, [pc, #24]	; (1df3c <bt_rpmsg_init+0x3c>)
   1df22:	f842 3f10 	str.w	r3, [r2, #16]!
   1df26:	f010 fc59 	bl	2e7dc <z_log_msg_static_create.constprop.0>
   1df2a:	46ad      	mov	sp, r5
	}

	return err;
}
   1df2c:	4620      	mov	r0, r4
   1df2e:	46bd      	mov	sp, r7
   1df30:	bdb0      	pop	{r4, r5, r7, pc}
   1df32:	bf00      	nop
   1df34:	00032498 	.word	0x00032498
   1df38:	000370d9 	.word	0x000370d9
   1df3c:	000314e4 	.word	0x000314e4

0001df40 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1df40:	4801      	ldr	r0, [pc, #4]	; (1df48 <hci_ept_bound+0x8>)
   1df42:	f007 bb41 	b.w	255c8 <z_impl_k_sem_give>
   1df46:	bf00      	nop
   1df48:	20008bec 	.word	0x20008bec

0001df4c <bt_rpmsg_open>:
{
   1df4c:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1df4e:	481a      	ldr	r0, [pc, #104]	; (1dfb8 <bt_rpmsg_open+0x6c>)
{
   1df50:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   1df52:	f7f1 fb07 	bl	f564 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1df56:	4604      	mov	r4, r0
   1df58:	b1a0      	cbz	r0, 1df84 <bt_rpmsg_open+0x38>
   1df5a:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1df5e:	d011      	beq.n	1df84 <bt_rpmsg_open+0x38>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1df60:	466d      	mov	r5, sp
   1df62:	b088      	sub	sp, #32
   1df64:	466a      	mov	r2, sp
   1df66:	4b15      	ldr	r3, [pc, #84]	; (1dfbc <bt_rpmsg_open+0x70>)
		LOG_ERR("Endpoint binding failed with %d", err);
   1df68:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1df6c:	2303      	movs	r3, #3
   1df6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1df72:	4813      	ldr	r0, [pc, #76]	; (1dfc0 <bt_rpmsg_open+0x74>)
   1df74:	f842 3f10 	str.w	r3, [r2, #16]!
   1df78:	f010 fc30 	bl	2e7dc <z_log_msg_static_create.constprop.0>
   1df7c:	46ad      	mov	sp, r5
}
   1df7e:	4620      	mov	r0, r4
   1df80:	46bd      	mov	sp, r7
   1df82:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1df84:	4a0f      	ldr	r2, [pc, #60]	; (1dfc4 <bt_rpmsg_open+0x78>)
   1df86:	4910      	ldr	r1, [pc, #64]	; (1dfc8 <bt_rpmsg_open+0x7c>)
   1df88:	480b      	ldr	r0, [pc, #44]	; (1dfb8 <bt_rpmsg_open+0x6c>)
   1df8a:	f7f1 fb19 	bl	f5c0 <ipc_service_register_endpoint>
	if (err) {
   1df8e:	4604      	mov	r4, r0
   1df90:	b120      	cbz	r0, 1df9c <bt_rpmsg_open+0x50>
		LOG_ERR("Registering endpoint failed with %d", err);
   1df92:	466d      	mov	r5, sp
   1df94:	b088      	sub	sp, #32
   1df96:	466a      	mov	r2, sp
   1df98:	4b0c      	ldr	r3, [pc, #48]	; (1dfcc <bt_rpmsg_open+0x80>)
   1df9a:	e7e5      	b.n	1df68 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   1df9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1dfa0:	2300      	movs	r3, #0
   1dfa2:	480b      	ldr	r0, [pc, #44]	; (1dfd0 <bt_rpmsg_open+0x84>)
   1dfa4:	f007 fb54 	bl	25650 <z_impl_k_sem_take>
	if (err) {
   1dfa8:	4604      	mov	r4, r0
   1dfaa:	2800      	cmp	r0, #0
   1dfac:	d0e7      	beq.n	1df7e <bt_rpmsg_open+0x32>
		LOG_ERR("Endpoint binding failed with %d", err);
   1dfae:	466d      	mov	r5, sp
   1dfb0:	b088      	sub	sp, #32
   1dfb2:	466a      	mov	r2, sp
   1dfb4:	4b07      	ldr	r3, [pc, #28]	; (1dfd4 <bt_rpmsg_open+0x88>)
   1dfb6:	e7d7      	b.n	1df68 <bt_rpmsg_open+0x1c>
   1dfb8:	00030fc4 	.word	0x00030fc4
   1dfbc:	00037103 	.word	0x00037103
   1dfc0:	000314e4 	.word	0x000314e4
   1dfc4:	20008674 	.word	0x20008674
   1dfc8:	200218b8 	.word	0x200218b8
   1dfcc:	00037133 	.word	0x00037133
   1dfd0:	20008bec 	.word	0x20008bec
   1dfd4:	00037157 	.word	0x00037157

0001dfd8 <hci_ept_recv>:
{
   1dfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfdc:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   1dfde:	f890 8000 	ldrb.w	r8, [r0]
{
   1dfe2:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   1dfe4:	f1b8 0f04 	cmp.w	r8, #4
{
   1dfe8:	460c      	mov	r4, r1
   1dfea:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   1dfec:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1dff0:	d00d      	beq.n	1e00e <hci_ept_recv+0x36>
   1dff2:	f1b8 0f05 	cmp.w	r8, #5
   1dff6:	f000 80a8 	beq.w	1e14a <hci_ept_recv+0x172>
   1dffa:	f1b8 0f02 	cmp.w	r8, #2
   1dffe:	f040 80cf 	bne.w	1e1a0 <hci_ept_recv+0x1c8>
	if (remaining < sizeof(hdr)) {
   1e002:	2b03      	cmp	r3, #3
   1e004:	d86e      	bhi.n	1e0e4 <hci_ept_recv+0x10c>
		LOG_ERR("Not enough data for ACL header");
   1e006:	4b6e      	ldr	r3, [pc, #440]	; (1e1c0 <hci_ept_recv+0x1e8>)
		LOG_ERR("No available ACL buffers!");
   1e008:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1e00c:	e005      	b.n	1e01a <hci_ept_recv+0x42>
	if (remaining < sizeof(hdr)) {
   1e00e:	2b01      	cmp	r3, #1
   1e010:	d80e      	bhi.n	1e030 <hci_ept_recv+0x58>
		LOG_ERR("Not enough data for event header");
   1e012:	4b6c      	ldr	r3, [pc, #432]	; (1e1c4 <hci_ept_recv+0x1ec>)
		LOG_ERR("Event payload length is not correct");
   1e014:	61fb      	str	r3, [r7, #28]
   1e016:	2302      	movs	r3, #2
   1e018:	61bb      	str	r3, [r7, #24]
   1e01a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e01e:	486a      	ldr	r0, [pc, #424]	; (1e1c8 <hci_ept_recv+0x1f0>)
   1e020:	f107 0218 	add.w	r2, r7, #24
   1e024:	f010 fbda 	bl	2e7dc <z_log_msg_static_create.constprop.0>
}
   1e028:	3724      	adds	r7, #36	; 0x24
   1e02a:	46bd      	mov	sp, r7
   1e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1e030:	7843      	ldrb	r3, [r0, #1]
   1e032:	2b3e      	cmp	r3, #62	; 0x3e
   1e034:	d13c      	bne.n	1e0b0 <hci_ept_recv+0xd8>
		switch (subevt_type) {
   1e036:	f890 a003 	ldrb.w	sl, [r0, #3]
   1e03a:	f1aa 0302 	sub.w	r3, sl, #2
   1e03e:	f1d3 0a00 	rsbs	sl, r3, #0
   1e042:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1e046:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1e04a:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   1e04c:	ebb4 2f13 	cmp.w	r4, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1e050:	80bb      	strh	r3, [r7, #4]
	if (remaining != hdr.len) {
   1e052:	d133      	bne.n	1e0bc <hci_ept_recv+0xe4>
   1e054:	f1ba 0f00 	cmp.w	sl, #0
   1e058:	d02d      	beq.n	1e0b6 <hci_ept_recv+0xde>
   1e05a:	f04f 0800 	mov.w	r8, #0
   1e05e:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1e062:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1e066:	4642      	mov	r2, r8
   1e068:	464b      	mov	r3, r9
   1e06a:	4651      	mov	r1, sl
   1e06c:	7938      	ldrb	r0, [r7, #4]
   1e06e:	f7f3 ff3d 	bl	11eec <bt_buf_get_evt>
		if (!buf) {
   1e072:	4605      	mov	r5, r0
   1e074:	b320      	cbz	r0, 1e0c0 <hci_ept_recv+0xe8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e076:	f100 080c 	add.w	r8, r0, #12
   1e07a:	2202      	movs	r2, #2
   1e07c:	1d39      	adds	r1, r7, #4
   1e07e:	4640      	mov	r0, r8
   1e080:	f00f ffc9 	bl	2e016 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1e084:	4640      	mov	r0, r8
   1e086:	f00f ffbe 	bl	2e006 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1e08a:	4284      	cmp	r4, r0
   1e08c:	d926      	bls.n	1e0dc <hci_ept_recv+0x104>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1e08e:	466e      	mov	r6, sp
   1e090:	b088      	sub	sp, #32
   1e092:	466a      	mov	r2, sp
   1e094:	4b4d      	ldr	r3, [pc, #308]	; (1e1cc <hci_ept_recv+0x1f4>)
   1e096:	61d0      	str	r0, [r2, #28]
   1e098:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e09c:	2304      	movs	r3, #4
   1e09e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e0a2:	4849      	ldr	r0, [pc, #292]	; (1e1c8 <hci_ept_recv+0x1f0>)
   1e0a4:	f842 3f10 	str.w	r3, [r2, #16]!
   1e0a8:	f010 fb98 	bl	2e7dc <z_log_msg_static_create.constprop.0>
   1e0ac:	46b5      	mov	sp, r6
   1e0ae:	e038      	b.n	1e122 <hci_ept_recv+0x14a>
			return false;
   1e0b0:	f04f 0a00 	mov.w	sl, #0
   1e0b4:	e7c7      	b.n	1e046 <hci_ept_recv+0x6e>
   1e0b6:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1e0ba:	e7d0      	b.n	1e05e <hci_ept_recv+0x86>
		LOG_ERR("Event payload length is not correct");
   1e0bc:	4b44      	ldr	r3, [pc, #272]	; (1e1d0 <hci_ept_recv+0x1f8>)
   1e0be:	e7a9      	b.n	1e014 <hci_ept_recv+0x3c>
			if (discardable) {
   1e0c0:	f1ba 0f00 	cmp.w	sl, #0
   1e0c4:	d1b0      	bne.n	1e028 <hci_ept_recv+0x50>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1e0c6:	4b43      	ldr	r3, [pc, #268]	; (1e1d4 <hci_ept_recv+0x1fc>)
   1e0c8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e0cc:	e9c7 b306 	strd	fp, r3, [r7, #24]
   1e0d0:	483d      	ldr	r0, [pc, #244]	; (1e1c8 <hci_ept_recv+0x1f0>)
   1e0d2:	f107 0218 	add.w	r2, r7, #24
   1e0d6:	f010 fb81 	bl	2e7dc <z_log_msg_static_create.constprop.0>
	} while (!buf);
   1e0da:	e7c4      	b.n	1e066 <hci_ept_recv+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e0dc:	4622      	mov	r2, r4
   1e0de:	1cf1      	adds	r1, r6, #3
   1e0e0:	4640      	mov	r0, r8
   1e0e2:	e02c      	b.n	1e13e <hci_ept_recv+0x166>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1e0e4:	2200      	movs	r2, #0
   1e0e6:	2300      	movs	r3, #0
   1e0e8:	2003      	movs	r0, #3
   1e0ea:	f7f3 feb1 	bl	11e50 <bt_buf_get_rx>
	if (buf) {
   1e0ee:	4605      	mov	r5, r0
   1e0f0:	b1d8      	cbz	r0, 1e12a <hci_ept_recv+0x152>
   1e0f2:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1e0f4:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1e0f8:	f100 090c 	add.w	r9, r0, #12
   1e0fc:	607b      	str	r3, [r7, #4]
   1e0fe:	4648      	mov	r0, r9
   1e100:	18b9      	adds	r1, r7, r2
   1e102:	f00f ff88 	bl	2e016 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1e106:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1e108:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1e10a:	429c      	cmp	r4, r3
   1e10c:	d00f      	beq.n	1e12e <hci_ept_recv+0x156>
		LOG_ERR("ACL payload length is not correct");
   1e10e:	4b32      	ldr	r3, [pc, #200]	; (1e1d8 <hci_ept_recv+0x200>)
   1e110:	e9c7 8306 	strd	r8, r3, [r7, #24]
		LOG_ERR("ISO payload length is not correct");
   1e114:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e118:	482b      	ldr	r0, [pc, #172]	; (1e1c8 <hci_ept_recv+0x1f0>)
   1e11a:	f107 0218 	add.w	r2, r7, #24
   1e11e:	f010 fb5d 	bl	2e7dc <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1e122:	4628      	mov	r0, r5
   1e124:	f7fd fa30 	bl	1b588 <net_buf_unref>
	if (buf) {
   1e128:	e77e      	b.n	1e028 <hci_ept_recv+0x50>
		LOG_ERR("No available ACL buffers!");
   1e12a:	4b2c      	ldr	r3, [pc, #176]	; (1e1dc <hci_ept_recv+0x204>)
   1e12c:	e76c      	b.n	1e008 <hci_ept_recv+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1e12e:	4648      	mov	r0, r9
   1e130:	f00f ff69 	bl	2e006 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1e134:	4284      	cmp	r4, r0
   1e136:	d8aa      	bhi.n	1e08e <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e138:	4622      	mov	r2, r4
   1e13a:	4648      	mov	r0, r9
   1e13c:	1d71      	adds	r1, r6, #5
   1e13e:	f00f ff6a 	bl	2e016 <net_buf_simple_add_mem>
		bt_recv(buf);
   1e142:	4628      	mov	r0, r5
   1e144:	f7f5 f954 	bl	133f0 <bt_recv>
}
   1e148:	e76e      	b.n	1e028 <hci_ept_recv+0x50>
	if (remaining < sizeof(hdr)) {
   1e14a:	2b03      	cmp	r3, #3
   1e14c:	d801      	bhi.n	1e152 <hci_ept_recv+0x17a>
		LOG_ERR("Not enough data for ISO header");
   1e14e:	4b24      	ldr	r3, [pc, #144]	; (1e1e0 <hci_ept_recv+0x208>)
   1e150:	e760      	b.n	1e014 <hci_ept_recv+0x3c>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1e152:	2200      	movs	r2, #0
   1e154:	2300      	movs	r3, #0
   1e156:	4640      	mov	r0, r8
   1e158:	f7f3 fe7a 	bl	11e50 <bt_buf_get_rx>
	if (buf) {
   1e15c:	4605      	mov	r5, r0
   1e15e:	b1a0      	cbz	r0, 1e18a <hci_ept_recv+0x1b2>
   1e160:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1e162:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1e166:	f100 080c 	add.w	r8, r0, #12
   1e16a:	607b      	str	r3, [r7, #4]
   1e16c:	4640      	mov	r0, r8
   1e16e:	18b9      	adds	r1, r7, r2
   1e170:	f00f ff51 	bl	2e016 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1e174:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1e176:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1e178:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1e17c:	429c      	cmp	r4, r3
   1e17e:	d006      	beq.n	1e18e <hci_ept_recv+0x1b6>
		LOG_ERR("ISO payload length is not correct");
   1e180:	4b18      	ldr	r3, [pc, #96]	; (1e1e4 <hci_ept_recv+0x20c>)
   1e182:	61fb      	str	r3, [r7, #28]
   1e184:	2302      	movs	r3, #2
   1e186:	61bb      	str	r3, [r7, #24]
   1e188:	e7c4      	b.n	1e114 <hci_ept_recv+0x13c>
		LOG_ERR("No available ISO buffers!");
   1e18a:	4b17      	ldr	r3, [pc, #92]	; (1e1e8 <hci_ept_recv+0x210>)
   1e18c:	e742      	b.n	1e014 <hci_ept_recv+0x3c>
	return net_buf_simple_tailroom(&buf->b);
   1e18e:	4640      	mov	r0, r8
   1e190:	f00f ff39 	bl	2e006 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1e194:	4284      	cmp	r4, r0
   1e196:	f63f af7a 	bhi.w	1e08e <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e19a:	4622      	mov	r2, r4
   1e19c:	1d71      	adds	r1, r6, #5
   1e19e:	e79f      	b.n	1e0e0 <hci_ept_recv+0x108>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1e1a0:	466c      	mov	r4, sp
   1e1a2:	b088      	sub	sp, #32
   1e1a4:	466a      	mov	r2, sp
   1e1a6:	4b11      	ldr	r3, [pc, #68]	; (1e1ec <hci_ept_recv+0x214>)
   1e1a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   1e1ac:	e9c2 3805 	strd	r3, r8, [r2, #20]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1e1b0:	2303      	movs	r3, #3
   1e1b2:	4805      	ldr	r0, [pc, #20]	; (1e1c8 <hci_ept_recv+0x1f0>)
   1e1b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1e1b8:	f010 fb10 	bl	2e7dc <z_log_msg_static_create.constprop.0>
   1e1bc:	46a5      	mov	sp, r4
   1e1be:	e733      	b.n	1e028 <hci_ept_recv+0x50>
   1e1c0:	00037214 	.word	0x00037214
   1e1c4:	00037177 	.word	0x00037177
   1e1c8:	000314e4 	.word	0x000314e4
   1e1cc:	000371f1 	.word	0x000371f1
   1e1d0:	00037198 	.word	0x00037198
   1e1d4:	000371bc 	.word	0x000371bc
   1e1d8:	0003724d 	.word	0x0003724d
   1e1dc:	00037233 	.word	0x00037233
   1e1e0:	0003726f 	.word	0x0003726f
   1e1e4:	000372a8 	.word	0x000372a8
   1e1e8:	0003728e 	.word	0x0003728e
   1e1ec:	000372ca 	.word	0x000372ca

0001e1f0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e1f0:	2301      	movs	r3, #1
   1e1f2:	4083      	lsls	r3, r0
{
   1e1f4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e1f6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e1f8:	4a0b      	ldr	r2, [pc, #44]	; (1e228 <compare_int_lock+0x38>)
   1e1fa:	e8d2 1fef 	ldaex	r1, [r2]
   1e1fe:	ea01 0504 	and.w	r5, r1, r4
   1e202:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1e206:	2e00      	cmp	r6, #0
   1e208:	d1f7      	bne.n	1e1fa <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e20a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e20e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1e210:	4806      	ldr	r0, [pc, #24]	; (1e22c <compare_int_lock+0x3c>)
   1e212:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1e216:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e21a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1e21e:	420b      	tst	r3, r1
}
   1e220:	bf14      	ite	ne
   1e222:	2001      	movne	r0, #1
   1e224:	2000      	moveq	r0, #0
   1e226:	bd70      	pop	{r4, r5, r6, pc}
   1e228:	200218c8 	.word	0x200218c8
   1e22c:	40015000 	.word	0x40015000

0001e230 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1e230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e232:	491b      	ldr	r1, [pc, #108]	; (1e2a0 <sys_clock_timeout_handler+0x70>)
{
   1e234:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1e236:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e23a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1e23c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e240:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e244:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1e246:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e24a:	d30f      	bcc.n	1e26c <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e24c:	f009 fc32 	bl	27ab4 <sys_clock_announce>
    return p_reg->CC[ch];
   1e250:	00a3      	lsls	r3, r4, #2
   1e252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e256:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1e25a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1e25e:	4295      	cmp	r5, r2
   1e260:	d11d      	bne.n	1e29e <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1e262:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1e266:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1e26a:	e012      	b.n	1e292 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e26c:	4b0d      	ldr	r3, [pc, #52]	; (1e2a4 <sys_clock_timeout_handler+0x74>)
   1e26e:	681b      	ldr	r3, [r3, #0]
   1e270:	0a1a      	lsrs	r2, r3, #8
   1e272:	061b      	lsls	r3, r3, #24
   1e274:	195e      	adds	r6, r3, r5
   1e276:	4b0c      	ldr	r3, [pc, #48]	; (1e2a8 <sys_clock_timeout_handler+0x78>)
   1e278:	f142 0700 	adc.w	r7, r2, #0
   1e27c:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e280:	f009 fc18 	bl	27ab4 <sys_clock_announce>
    return p_reg->CC[ch];
   1e284:	4a09      	ldr	r2, [pc, #36]	; (1e2ac <sys_clock_timeout_handler+0x7c>)
   1e286:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1e28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1e28e:	429d      	cmp	r5, r3
   1e290:	d105      	bne.n	1e29e <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e296:	4a05      	ldr	r2, [pc, #20]	; (1e2ac <sys_clock_timeout_handler+0x7c>)
   1e298:	40a3      	lsls	r3, r4
   1e29a:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1e29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e2a0:	2000a150 	.word	0x2000a150
   1e2a4:	200218cc 	.word	0x200218cc
   1e2a8:	2000a158 	.word	0x2000a158
   1e2ac:	40015000 	.word	0x40015000

0001e2b0 <compare_int_unlock>:
	if (key) {
   1e2b0:	b1d9      	cbz	r1, 1e2ea <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1e2b2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e2b4:	4a0d      	ldr	r2, [pc, #52]	; (1e2ec <compare_int_unlock+0x3c>)
   1e2b6:	4083      	lsls	r3, r0
   1e2b8:	e8d2 cfef 	ldaex	ip, [r2]
   1e2bc:	ea4c 0c03 	orr.w	ip, ip, r3
   1e2c0:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1e2c4:	2900      	cmp	r1, #0
   1e2c6:	d1f7      	bne.n	1e2b8 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e2c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1e2cc:	4a08      	ldr	r2, [pc, #32]	; (1e2f0 <compare_int_unlock+0x40>)
   1e2ce:	4083      	lsls	r3, r0
   1e2d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e2d4:	4b07      	ldr	r3, [pc, #28]	; (1e2f4 <compare_int_unlock+0x44>)
   1e2d6:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e2da:	40c3      	lsrs	r3, r0
   1e2dc:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e2de:	bf42      	ittt	mi
   1e2e0:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1e2e4:	4b04      	ldrmi	r3, [pc, #16]	; (1e2f8 <compare_int_unlock+0x48>)
   1e2e6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e2ea:	4770      	bx	lr
   1e2ec:	200218c8 	.word	0x200218c8
   1e2f0:	40015000 	.word	0x40015000
   1e2f4:	200218c0 	.word	0x200218c0
   1e2f8:	e000e100 	.word	0xe000e100

0001e2fc <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e2fc:	2801      	cmp	r0, #1
{
   1e2fe:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e300:	d909      	bls.n	1e316 <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1e302:	4907      	ldr	r1, [pc, #28]	; (1e320 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1e304:	4807      	ldr	r0, [pc, #28]	; (1e324 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1e306:	237c      	movs	r3, #124	; 0x7c
   1e308:	4a07      	ldr	r2, [pc, #28]	; (1e328 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1e30a:	f00c f9d6 	bl	2a6ba <assert_print>
   1e30e:	217c      	movs	r1, #124	; 0x7c
   1e310:	4805      	ldr	r0, [pc, #20]	; (1e328 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1e312:	f00c f9cb 	bl	2a6ac <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1e316:	0083      	lsls	r3, r0, #2
}
   1e318:	4804      	ldr	r0, [pc, #16]	; (1e32c <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1e31a:	4418      	add	r0, r3
   1e31c:	bd08      	pop	{r3, pc}
   1e31e:	bf00      	nop
   1e320:	00037345 	.word	0x00037345
   1e324:	00032659 	.word	0x00032659
   1e328:	00037314 	.word	0x00037314
   1e32c:	40015140 	.word	0x40015140

0001e330 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e330:	2801      	cmp	r0, #1
{
   1e332:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e334:	d909      	bls.n	1e34a <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1e336:	4907      	ldr	r1, [pc, #28]	; (1e354 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1e338:	4807      	ldr	r0, [pc, #28]	; (1e358 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1e33a:	2383      	movs	r3, #131	; 0x83
   1e33c:	4a07      	ldr	r2, [pc, #28]	; (1e35c <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1e33e:	f00c f9bc 	bl	2a6ba <assert_print>
   1e342:	2183      	movs	r1, #131	; 0x83
   1e344:	4805      	ldr	r0, [pc, #20]	; (1e35c <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1e346:	f00c f9b1 	bl	2a6ac <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1e34a:	2800      	cmp	r0, #0
}
   1e34c:	4804      	ldr	r0, [pc, #16]	; (1e360 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1e34e:	bf08      	it	eq
   1e350:	2000      	moveq	r0, #0
   1e352:	bd08      	pop	{r3, pc}
   1e354:	00037345 	.word	0x00037345
   1e358:	00032659 	.word	0x00032659
   1e35c:	00037314 	.word	0x00037314
   1e360:	40015044 	.word	0x40015044

0001e364 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e364:	2801      	cmp	r0, #1
{
   1e366:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e368:	d909      	bls.n	1e37e <z_nrf_rtc_timer_compare_read+0x1a>
   1e36a:	4908      	ldr	r1, [pc, #32]	; (1e38c <z_nrf_rtc_timer_compare_read+0x28>)
   1e36c:	4808      	ldr	r0, [pc, #32]	; (1e390 <z_nrf_rtc_timer_compare_read+0x2c>)
   1e36e:	23b9      	movs	r3, #185	; 0xb9
   1e370:	4a08      	ldr	r2, [pc, #32]	; (1e394 <z_nrf_rtc_timer_compare_read+0x30>)
   1e372:	f00c f9a2 	bl	2a6ba <assert_print>
   1e376:	21b9      	movs	r1, #185	; 0xb9
   1e378:	4806      	ldr	r0, [pc, #24]	; (1e394 <z_nrf_rtc_timer_compare_read+0x30>)
   1e37a:	f00c f997 	bl	2a6ac <assert_post_action>
    return p_reg->CC[ch];
   1e37e:	4b06      	ldr	r3, [pc, #24]	; (1e398 <z_nrf_rtc_timer_compare_read+0x34>)
   1e380:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e384:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1e388:	bd08      	pop	{r3, pc}
   1e38a:	bf00      	nop
   1e38c:	00037345 	.word	0x00037345
   1e390:	00032659 	.word	0x00032659
   1e394:	00037314 	.word	0x00037314
   1e398:	40015000 	.word	0x40015000

0001e39c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e39c:	4b0d      	ldr	r3, [pc, #52]	; (1e3d4 <z_nrf_rtc_timer_read+0x38>)
   1e39e:	6818      	ldr	r0, [r3, #0]
   1e3a0:	0a01      	lsrs	r1, r0, #8
   1e3a2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e3a4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1e3a8:	4b0b      	ldr	r3, [pc, #44]	; (1e3d8 <z_nrf_rtc_timer_read+0x3c>)
   1e3aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e3ae:	1818      	adds	r0, r3, r0
   1e3b0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e3b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e3b8:	d20a      	bcs.n	1e3d0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e3ba:	4b08      	ldr	r3, [pc, #32]	; (1e3dc <z_nrf_rtc_timer_read+0x40>)
   1e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3c0:	4290      	cmp	r0, r2
   1e3c2:	eb71 0303 	sbcs.w	r3, r1, r3
   1e3c6:	d203      	bcs.n	1e3d0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e3c8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e3cc:	f141 0100 	adc.w	r1, r1, #0
}
   1e3d0:	4770      	bx	lr
   1e3d2:	bf00      	nop
   1e3d4:	200218cc 	.word	0x200218cc
   1e3d8:	40015000 	.word	0x40015000
   1e3dc:	2000a158 	.word	0x2000a158

0001e3e0 <compare_set>:
{
   1e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3e4:	b085      	sub	sp, #20
   1e3e6:	4614      	mov	r4, r2
   1e3e8:	461d      	mov	r5, r3
   1e3ea:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1e3ec:	f7ff ff00 	bl	1e1f0 <compare_int_lock>
   1e3f0:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e3f2:	f7ff ffd3 	bl	1e39c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e3f6:	42a0      	cmp	r0, r4
   1e3f8:	eb71 0305 	sbcs.w	r3, r1, r5
   1e3fc:	f080 8086 	bcs.w	1e50c <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e400:	4b49      	ldr	r3, [pc, #292]	; (1e528 <compare_set+0x148>)
   1e402:	1a20      	subs	r0, r4, r0
   1e404:	eb65 0101 	sbc.w	r1, r5, r1
   1e408:	4298      	cmp	r0, r3
   1e40a:	f171 0100 	sbcs.w	r1, r1, #0
   1e40e:	f080 8088 	bcs.w	1e522 <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1e412:	4b46      	ldr	r3, [pc, #280]	; (1e52c <compare_set+0x14c>)
   1e414:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1e418:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1e41c:	429d      	cmp	r5, r3
   1e41e:	bf08      	it	eq
   1e420:	4294      	cmpeq	r4, r2
   1e422:	d05e      	beq.n	1e4e2 <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1e428:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1e42c:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1e42e:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1e432:	f06f 0101 	mvn.w	r1, #1
   1e436:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e43a:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1e43e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1e442:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e446:	40bb      	lsls	r3, r7
   1e448:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e44c:	fa1f f888 	uxth.w	r8, r8
   1e450:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1e454:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1e456:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e45a:	4b35      	ldr	r3, [pc, #212]	; (1e530 <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e45c:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1e460:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e464:	eba0 000a 	sub.w	r0, r0, sl
   1e468:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e46c:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1e470:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1e472:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1e476:	d107      	bne.n	1e488 <compare_set+0xa8>
   1e478:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1e47a:	2013      	movs	r0, #19
   1e47c:	f011 ff60 	bl	30340 <z_impl_k_busy_wait>
   1e480:	f06f 0101 	mvn.w	r1, #1
   1e484:	4b2a      	ldr	r3, [pc, #168]	; (1e530 <compare_set+0x150>)
   1e486:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1e488:	eba1 000a 	sub.w	r0, r1, sl
   1e48c:	4430      	add	r0, r6
   1e48e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e492:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e496:	f04f 0000 	mov.w	r0, #0
   1e49a:	f8c8 0000 	str.w	r0, [r8]
   1e49e:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1e4a2:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1e4a4:	bf88      	it	hi
   1e4a6:	eb0a 060b 	addhi.w	r6, sl, fp
   1e4aa:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e4ae:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1e4b2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e4b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1e4ba:	bf88      	it	hi
   1e4bc:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1e4c0:	4582      	cmp	sl, r0
   1e4c2:	d006      	beq.n	1e4d2 <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1e4c4:	1a08      	subs	r0, r1, r0
   1e4c6:	4430      	add	r0, r6
   1e4c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1e4cc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e4d0:	d81a      	bhi.n	1e508 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1e4d2:	1ab6      	subs	r6, r6, r2
   1e4d4:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1e4d8:	1936      	adds	r6, r6, r4
   1e4da:	f145 0300 	adc.w	r3, r5, #0
   1e4de:	4634      	mov	r4, r6
   1e4e0:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1e4e2:	4912      	ldr	r1, [pc, #72]	; (1e52c <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1e4e4:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1e4e6:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1e4ea:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1e4ee:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1e4f0:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1e4f2:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1e4f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e4f6:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1e4f8:	4638      	mov	r0, r7
   1e4fa:	9901      	ldr	r1, [sp, #4]
   1e4fc:	f7ff fed8 	bl	1e2b0 <compare_int_unlock>
}
   1e500:	4620      	mov	r0, r4
   1e502:	b005      	add	sp, #20
   1e504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e508:	4630      	mov	r0, r6
   1e50a:	e7a9      	b.n	1e460 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1e50c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e50e:	4a09      	ldr	r2, [pc, #36]	; (1e534 <compare_set+0x154>)
   1e510:	40bb      	lsls	r3, r7
   1e512:	e8d2 0fef 	ldaex	r0, [r2]
   1e516:	4318      	orrs	r0, r3
   1e518:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1e51c:	2900      	cmp	r1, #0
   1e51e:	d0e0      	beq.n	1e4e2 <compare_set+0x102>
   1e520:	e7f7      	b.n	1e512 <compare_set+0x132>
			return -EINVAL;
   1e522:	f06f 0415 	mvn.w	r4, #21
   1e526:	e7e7      	b.n	1e4f8 <compare_set+0x118>
   1e528:	01000001 	.word	0x01000001
   1e52c:	2000a130 	.word	0x2000a130
   1e530:	40015000 	.word	0x40015000
   1e534:	200218c0 	.word	0x200218c0

0001e538 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e538:	2801      	cmp	r0, #1
{
   1e53a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e53c:	d00b      	beq.n	1e556 <z_nrf_rtc_timer_set+0x1e>
   1e53e:	4908      	ldr	r1, [pc, #32]	; (1e560 <z_nrf_rtc_timer_set+0x28>)
   1e540:	4808      	ldr	r0, [pc, #32]	; (1e564 <z_nrf_rtc_timer_set+0x2c>)
   1e542:	f240 1353 	movw	r3, #339	; 0x153
   1e546:	4a08      	ldr	r2, [pc, #32]	; (1e568 <z_nrf_rtc_timer_set+0x30>)
   1e548:	f00c f8b7 	bl	2a6ba <assert_print>
   1e54c:	f240 1153 	movw	r1, #339	; 0x153
   1e550:	4805      	ldr	r0, [pc, #20]	; (1e568 <z_nrf_rtc_timer_set+0x30>)
   1e552:	f00c f8ab 	bl	2a6ac <assert_post_action>
}
   1e556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1e55a:	f7ff bf41 	b.w	1e3e0 <compare_set>
   1e55e:	bf00      	nop
   1e560:	00037361 	.word	0x00037361
   1e564:	00032659 	.word	0x00032659
   1e568:	00037314 	.word	0x00037314

0001e56c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1e56c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1e56e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1e572:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e574:	f04f 30ff 	mov.w	r0, #4294967295
   1e578:	f04f 31ff 	mov.w	r1, #4294967295
   1e57c:	4c19      	ldr	r4, [pc, #100]	; (1e5e4 <sys_clock_driver_init+0x78>)
   1e57e:	4b1a      	ldr	r3, [pc, #104]	; (1e5e8 <sys_clock_driver_init+0x7c>)
   1e580:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1e584:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1e588:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1e58c:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1e590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1e594:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e596:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e59a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1e59e:	4b13      	ldr	r3, [pc, #76]	; (1e5ec <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e5a0:	2101      	movs	r1, #1
   1e5a2:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1e5a6:	2015      	movs	r0, #21
   1e5a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e5ac:	462a      	mov	r2, r5
   1e5ae:	f7f2 fa65 	bl	10a7c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e5b2:	2015      	movs	r0, #21
   1e5b4:	f7f2 fa32 	bl	10a1c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e5b8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e5ba:	2203      	movs	r2, #3
   1e5bc:	60a3      	str	r3, [r4, #8]
   1e5be:	6023      	str	r3, [r4, #0]
   1e5c0:	4b0b      	ldr	r3, [pc, #44]	; (1e5f0 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e5c2:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1e5c4:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1e5c6:	4b0b      	ldr	r3, [pc, #44]	; (1e5f4 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e5c8:	4a0b      	ldr	r2, [pc, #44]	; (1e5f8 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1e5ca:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e5cc:	4b0b      	ldr	r3, [pc, #44]	; (1e5fc <sys_clock_driver_init+0x90>)
   1e5ce:	9501      	str	r5, [sp, #4]
   1e5d0:	9300      	str	r3, [sp, #0]
   1e5d2:	2300      	movs	r3, #0
   1e5d4:	f7ff ff04 	bl	1e3e0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e5d8:	4630      	mov	r0, r6
   1e5da:	f7fd fce5 	bl	1bfa8 <z_nrf_clock_control_lf_on>

	return 0;
}
   1e5de:	4628      	mov	r0, r5
   1e5e0:	b002      	add	sp, #8
   1e5e2:	bd70      	pop	{r4, r5, r6, pc}
   1e5e4:	40015000 	.word	0x40015000
   1e5e8:	2000a130 	.word	0x2000a130
   1e5ec:	e000e100 	.word	0xe000e100
   1e5f0:	200218c8 	.word	0x200218c8
   1e5f4:	200218c4 	.word	0x200218c4
   1e5f8:	007fffff 	.word	0x007fffff
   1e5fc:	0001e231 	.word	0x0001e231

0001e600 <rtc_nrf_isr>:
{
   1e600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1e604:	4b3f      	ldr	r3, [pc, #252]	; (1e704 <rtc_nrf_isr+0x104>)
   1e606:	b085      	sub	sp, #20
   1e608:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e60c:	0792      	lsls	r2, r2, #30
   1e60e:	d50b      	bpl.n	1e628 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e610:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e614:	b142      	cbz	r2, 1e628 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e616:	2200      	movs	r2, #0
   1e618:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1e61c:	4a3a      	ldr	r2, [pc, #232]	; (1e708 <rtc_nrf_isr+0x108>)
   1e61e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1e622:	6813      	ldr	r3, [r2, #0]
   1e624:	3301      	adds	r3, #1
   1e626:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e628:	4d38      	ldr	r5, [pc, #224]	; (1e70c <rtc_nrf_isr+0x10c>)
   1e62a:	2400      	movs	r4, #0
   1e62c:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e62e:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1e632:	4e34      	ldr	r6, [pc, #208]	; (1e704 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1e634:	f04f 0320 	mov.w	r3, #32
   1e638:	f3ef 8211 	mrs	r2, BASEPRI
   1e63c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e640:	f3bf 8f6f 	isb	sy
   1e644:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1e648:	fa0b f904 	lsl.w	r9, fp, r4
   1e64c:	ea19 0f03 	tst.w	r9, r3
   1e650:	d10a      	bne.n	1e668 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1e652:	f382 8811 	msr	BASEPRI, r2
   1e656:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e65a:	3510      	adds	r5, #16
   1e65c:	b114      	cbz	r4, 1e664 <rtc_nrf_isr+0x64>
}
   1e65e:	b005      	add	sp, #20
   1e660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e664:	2401      	movs	r4, #1
   1e666:	e7e5      	b.n	1e634 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e668:	2301      	movs	r3, #1
   1e66a:	40a3      	lsls	r3, r4
   1e66c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e66e:	4928      	ldr	r1, [pc, #160]	; (1e710 <rtc_nrf_isr+0x110>)
   1e670:	e8d1 0fef 	ldaex	r0, [r1]
   1e674:	ea00 0c03 	and.w	ip, r0, r3
   1e678:	e8c1 cfee 	stlex	lr, ip, [r1]
   1e67c:	f1be 0f00 	cmp.w	lr, #0
   1e680:	d1f6      	bne.n	1e670 <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e682:	4b24      	ldr	r3, [pc, #144]	; (1e714 <rtc_nrf_isr+0x114>)
   1e684:	00a1      	lsls	r1, r4, #2
   1e686:	b918      	cbnz	r0, 1e690 <rtc_nrf_isr+0x90>
   1e688:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1e68c:	2800      	cmp	r0, #0
   1e68e:	d0e0      	beq.n	1e652 <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e690:	f04f 0a00 	mov.w	sl, #0
   1e694:	f841 a003 	str.w	sl, [r1, r3]
   1e698:	58cb      	ldr	r3, [r1, r3]
   1e69a:	f382 8811 	msr	BASEPRI, r2
   1e69e:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1e6a2:	f7ff fe7b 	bl	1e39c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1e6a6:	f04f 0320 	mov.w	r3, #32
   1e6aa:	f3ef 8c11 	mrs	ip, BASEPRI
   1e6ae:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6b2:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1e6b6:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1e6ba:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1e6be:	4290      	cmp	r0, r2
   1e6c0:	4199      	sbcs	r1, r3
   1e6c2:	d204      	bcs.n	1e6ce <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1e6c4:	f38c 8811 	msr	BASEPRI, ip
   1e6c8:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e6cc:	e7c5      	b.n	1e65a <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1e6ce:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6d2:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1e6d6:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6d8:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1e6dc:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6e0:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1e6e4:	4907      	ldr	r1, [pc, #28]	; (1e704 <rtc_nrf_isr+0x104>)
   1e6e6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1e6ea:	f38c 8811 	msr	BASEPRI, ip
   1e6ee:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e6f2:	f1b8 0f00 	cmp.w	r8, #0
   1e6f6:	d0b0      	beq.n	1e65a <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1e6f8:	9903      	ldr	r1, [sp, #12]
   1e6fa:	4620      	mov	r0, r4
   1e6fc:	9100      	str	r1, [sp, #0]
   1e6fe:	47c0      	blx	r8
   1e700:	e7ab      	b.n	1e65a <rtc_nrf_isr+0x5a>
   1e702:	bf00      	nop
   1e704:	40015000 	.word	0x40015000
   1e708:	200218cc 	.word	0x200218cc
   1e70c:	2000a130 	.word	0x2000a130
   1e710:	200218c0 	.word	0x200218c0
   1e714:	40015140 	.word	0x40015140

0001e718 <z_nrf_rtc_timer_chan_alloc>:
{
   1e718:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1e71a:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1e71c:	4b0c      	ldr	r3, [pc, #48]	; (1e750 <z_nrf_rtc_timer_chan_alloc+0x38>)
   1e71e:	6818      	ldr	r0, [r3, #0]
   1e720:	b190      	cbz	r0, 1e748 <z_nrf_rtc_timer_chan_alloc+0x30>
   1e722:	fab0 f080 	clz	r0, r0
   1e726:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1e72a:	fa04 f100 	lsl.w	r1, r4, r0
   1e72e:	43c9      	mvns	r1, r1
   1e730:	e8d3 2fef 	ldaex	r2, [r3]
   1e734:	ea02 0501 	and.w	r5, r2, r1
   1e738:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1e73c:	2e00      	cmp	r6, #0
   1e73e:	d1f7      	bne.n	1e730 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1e740:	40c2      	lsrs	r2, r0
   1e742:	07d2      	lsls	r2, r2, #31
   1e744:	d5eb      	bpl.n	1e71e <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1e746:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1e748:	f06f 000b 	mvn.w	r0, #11
   1e74c:	e7fb      	b.n	1e746 <z_nrf_rtc_timer_chan_alloc+0x2e>
   1e74e:	bf00      	nop
   1e750:	200218c4 	.word	0x200218c4

0001e754 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e754:	2801      	cmp	r0, #1
{
   1e756:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e758:	d00b      	beq.n	1e772 <z_nrf_rtc_timer_chan_free+0x1e>
   1e75a:	490b      	ldr	r1, [pc, #44]	; (1e788 <z_nrf_rtc_timer_chan_free+0x34>)
   1e75c:	480b      	ldr	r0, [pc, #44]	; (1e78c <z_nrf_rtc_timer_chan_free+0x38>)
   1e75e:	f240 2321 	movw	r3, #545	; 0x221
   1e762:	4a0b      	ldr	r2, [pc, #44]	; (1e790 <z_nrf_rtc_timer_chan_free+0x3c>)
   1e764:	f00b ffa9 	bl	2a6ba <assert_print>
   1e768:	f240 2121 	movw	r1, #545	; 0x221
   1e76c:	4808      	ldr	r0, [pc, #32]	; (1e790 <z_nrf_rtc_timer_chan_free+0x3c>)
   1e76e:	f00b ff9d 	bl	2a6ac <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e772:	4b08      	ldr	r3, [pc, #32]	; (1e794 <z_nrf_rtc_timer_chan_free+0x40>)
   1e774:	e8d3 1fef 	ldaex	r1, [r3]
   1e778:	f041 0102 	orr.w	r1, r1, #2
   1e77c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e780:	2a00      	cmp	r2, #0
   1e782:	d1f7      	bne.n	1e774 <z_nrf_rtc_timer_chan_free+0x20>
}
   1e784:	bd08      	pop	{r3, pc}
   1e786:	bf00      	nop
   1e788:	00037361 	.word	0x00037361
   1e78c:	00032659 	.word	0x00032659
   1e790:	00037314 	.word	0x00037314
   1e794:	200218c4 	.word	0x200218c4

0001e798 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e798:	1c43      	adds	r3, r0, #1
{
   1e79a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e79c:	d020      	beq.n	1e7e0 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e79e:	2801      	cmp	r0, #1
   1e7a0:	dd20      	ble.n	1e7e4 <sys_clock_set_timeout+0x4c>
   1e7a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e7a6:	da1f      	bge.n	1e7e8 <sys_clock_set_timeout+0x50>
   1e7a8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e7aa:	f7ff fdf7 	bl	1e39c <z_nrf_rtc_timer_read>
   1e7ae:	4b0f      	ldr	r3, [pc, #60]	; (1e7ec <sys_clock_set_timeout+0x54>)
   1e7b0:	e9d3 1300 	ldrd	r1, r3, [r3]
   1e7b4:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1e7b6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1e7ba:	bf28      	it	cs
   1e7bc:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1e7be:	480c      	ldr	r0, [pc, #48]	; (1e7f0 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1e7c0:	3201      	adds	r2, #1
   1e7c2:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1e7c4:	4282      	cmp	r2, r0
   1e7c6:	bf28      	it	cs
   1e7c8:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1e7ca:	2000      	movs	r0, #0
   1e7cc:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e7ce:	4909      	ldr	r1, [pc, #36]	; (1e7f4 <sys_clock_set_timeout+0x5c>)
   1e7d0:	9001      	str	r0, [sp, #4]
   1e7d2:	9100      	str	r1, [sp, #0]
   1e7d4:	f143 0300 	adc.w	r3, r3, #0
   1e7d8:	f7ff fe02 	bl	1e3e0 <compare_set>
}
   1e7dc:	b002      	add	sp, #8
   1e7de:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e7e0:	4803      	ldr	r0, [pc, #12]	; (1e7f0 <sys_clock_set_timeout+0x58>)
   1e7e2:	e7e1      	b.n	1e7a8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e7e4:	2400      	movs	r4, #0
   1e7e6:	e7e0      	b.n	1e7aa <sys_clock_set_timeout+0x12>
   1e7e8:	4c01      	ldr	r4, [pc, #4]	; (1e7f0 <sys_clock_set_timeout+0x58>)
   1e7ea:	e7de      	b.n	1e7aa <sys_clock_set_timeout+0x12>
   1e7ec:	2000a150 	.word	0x2000a150
   1e7f0:	007fffff 	.word	0x007fffff
   1e7f4:	0001e231 	.word	0x0001e231

0001e7f8 <sys_clock_elapsed>:
{
   1e7f8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e7fa:	f7ff fdcf 	bl	1e39c <z_nrf_rtc_timer_read>
   1e7fe:	4b02      	ldr	r3, [pc, #8]	; (1e808 <sys_clock_elapsed+0x10>)
   1e800:	681b      	ldr	r3, [r3, #0]
}
   1e802:	1ac0      	subs	r0, r0, r3
   1e804:	bd08      	pop	{r3, pc}
   1e806:	bf00      	nop
   1e808:	2000a150 	.word	0x2000a150

0001e80c <nrf_gpio_pin_port_decode>:
{
   1e80c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e80e:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1e810:	095a      	lsrs	r2, r3, #5
   1e812:	d00d      	beq.n	1e830 <nrf_gpio_pin_port_decode+0x24>
   1e814:	2a01      	cmp	r2, #1
   1e816:	d013      	beq.n	1e840 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e818:	490e      	ldr	r1, [pc, #56]	; (1e854 <nrf_gpio_pin_port_decode+0x48>)
   1e81a:	480f      	ldr	r0, [pc, #60]	; (1e858 <nrf_gpio_pin_port_decode+0x4c>)
   1e81c:	f240 2347 	movw	r3, #583	; 0x247
   1e820:	4a0e      	ldr	r2, [pc, #56]	; (1e85c <nrf_gpio_pin_port_decode+0x50>)
   1e822:	f00b ff4a 	bl	2a6ba <assert_print>
   1e826:	f240 2147 	movw	r1, #583	; 0x247
   1e82a:	480c      	ldr	r0, [pc, #48]	; (1e85c <nrf_gpio_pin_port_decode+0x50>)
   1e82c:	f00b ff3e 	bl	2a6ac <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1e830:	f04f 32ff 	mov.w	r2, #4294967295
   1e834:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e838:	07d9      	lsls	r1, r3, #31
   1e83a:	d5ed      	bpl.n	1e818 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1e83c:	4808      	ldr	r0, [pc, #32]	; (1e860 <nrf_gpio_pin_port_decode+0x54>)
   1e83e:	e008      	b.n	1e852 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1e840:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1e844:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e848:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e84a:	07d2      	lsls	r2, r2, #31
   1e84c:	d5e4      	bpl.n	1e818 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1e84e:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1e850:	4804      	ldr	r0, [pc, #16]	; (1e864 <nrf_gpio_pin_port_decode+0x58>)
}
   1e852:	bd08      	pop	{r3, pc}
   1e854:	00036c34 	.word	0x00036c34
   1e858:	00032659 	.word	0x00032659
   1e85c:	00036c01 	.word	0x00036c01
   1e860:	40842500 	.word	0x40842500
   1e864:	40842800 	.word	0x40842800

0001e868 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1e868:	b510      	push	{r4, lr}
   1e86a:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1e86c:	6902      	ldr	r2, [r0, #16]
{
   1e86e:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   1e870:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1e874:	4925      	ldr	r1, [pc, #148]	; (1e90c <mbox_nrf_init+0xa4>)
   1e876:	2000      	movs	r0, #0
   1e878:	f001 f806 	bl	1f888 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1e87c:	2200      	movs	r2, #0
   1e87e:	2101      	movs	r1, #1
   1e880:	202a      	movs	r0, #42	; 0x2a
   1e882:	f7f2 f8fb 	bl	10a7c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1e886:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1e888:	2284      	movs	r2, #132	; 0x84
   1e88a:	2100      	movs	r1, #0
   1e88c:	a807      	add	r0, sp, #28
   1e88e:	f011 fea8 	bl	305e2 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1e892:	6863      	ldr	r3, [r4, #4]
   1e894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e898:	d30a      	bcc.n	1e8b0 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1e89a:	4b1d      	ldr	r3, [pc, #116]	; (1e910 <mbox_nrf_init+0xa8>)
   1e89c:	9305      	str	r3, [sp, #20]
   1e89e:	2302      	movs	r3, #2
   1e8a0:	9304      	str	r3, [sp, #16]
   1e8a2:	2300      	movs	r3, #0
   1e8a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e8a8:	481a      	ldr	r0, [pc, #104]	; (1e914 <mbox_nrf_init+0xac>)
   1e8aa:	aa04      	add	r2, sp, #16
   1e8ac:	f7ef fff0 	bl	e890 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1e8b0:	6823      	ldr	r3, [r4, #0]
   1e8b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e8b6:	d30a      	bcc.n	1e8ce <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1e8b8:	4b17      	ldr	r3, [pc, #92]	; (1e918 <mbox_nrf_init+0xb0>)
   1e8ba:	9305      	str	r3, [sp, #20]
   1e8bc:	2302      	movs	r3, #2
   1e8be:	9304      	str	r3, [sp, #16]
   1e8c0:	2300      	movs	r3, #0
   1e8c2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e8c6:	4813      	ldr	r0, [pc, #76]	; (1e914 <mbox_nrf_init+0xac>)
   1e8c8:	aa04      	add	r2, sp, #16
   1e8ca:	f7ef ffe1 	bl	e890 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   1e8ce:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1e8d0:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1e8d2:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8d4:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   1e8d6:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8d8:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1e8da:	40d9      	lsrs	r1, r3
   1e8dc:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1e8de:	bf44      	itt	mi
   1e8e0:	fa00 f103 	lslmi.w	r1, r0, r3
   1e8e4:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1e8e8:	6821      	ldr	r1, [r4, #0]
   1e8ea:	40d9      	lsrs	r1, r3
   1e8ec:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1e8ee:	bf48      	it	mi
   1e8f0:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8f4:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1e8f8:	bf48      	it	mi
   1e8fa:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8fc:	2b10      	cmp	r3, #16
   1e8fe:	d1ea      	bne.n	1e8d6 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   1e900:	a807      	add	r0, sp, #28
   1e902:	f000 ffd9 	bl	1f8b8 <nrfx_ipc_config_load>

	return 0;
}
   1e906:	2000      	movs	r0, #0
   1e908:	b028      	add	sp, #160	; 0xa0
   1e90a:	bd10      	pop	{r4, pc}
   1e90c:	0001ea11 	.word	0x0001ea11
   1e910:	0003737c 	.word	0x0003737c
   1e914:	00031584 	.word	0x00031584
   1e918:	000373a8 	.word	0x000373a8

0001e91c <mbox_nrf_set_enabled>:
{
   1e91c:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e91e:	290f      	cmp	r1, #15
{
   1e920:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1e922:	6905      	ldr	r5, [r0, #16]
{
   1e924:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e926:	d842      	bhi.n	1e9ae <mbox_nrf_set_enabled+0x92>
   1e928:	6843      	ldr	r3, [r0, #4]
   1e92a:	681b      	ldr	r3, [r3, #0]
   1e92c:	40cb      	lsrs	r3, r1
   1e92e:	07db      	lsls	r3, r3, #31
   1e930:	d53d      	bpl.n	1e9ae <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1e932:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e936:	40cb      	lsrs	r3, r1
   1e938:	f003 0301 	and.w	r3, r3, #1
   1e93c:	b91a      	cbnz	r2, 1e946 <mbox_nrf_set_enabled+0x2a>
   1e93e:	bb13      	cbnz	r3, 1e986 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   1e940:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1e944:	e031      	b.n	1e9aa <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1e946:	2b00      	cmp	r3, #0
   1e948:	d1fa      	bne.n	1e940 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1e94a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1e94e:	b94b      	cbnz	r3, 1e964 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   1e950:	4a18      	ldr	r2, [pc, #96]	; (1e9b4 <mbox_nrf_set_enabled+0x98>)
   1e952:	9205      	str	r2, [sp, #20]
   1e954:	2202      	movs	r2, #2
   1e956:	9204      	str	r2, [sp, #16]
   1e958:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e95c:	4816      	ldr	r0, [pc, #88]	; (1e9b8 <mbox_nrf_set_enabled+0x9c>)
   1e95e:	aa04      	add	r2, sp, #16
   1e960:	f7ef ff96 	bl	e890 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   1e964:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e968:	b913      	cbnz	r3, 1e970 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   1e96a:	202a      	movs	r0, #42	; 0x2a
   1e96c:	f7f2 f856 	bl	10a1c <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1e970:	2201      	movs	r2, #1
   1e972:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e976:	40a2      	lsls	r2, r4
   1e978:	4313      	orrs	r3, r2
   1e97a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1e97e:	b2e0      	uxtb	r0, r4
   1e980:	f000 ffdc 	bl	1f93c <nrfx_ipc_receive_event_enable>
   1e984:	e00a      	b.n	1e99c <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   1e986:	b2c8      	uxtb	r0, r1
   1e988:	f000 fff6 	bl	1f978 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1e98c:	2201      	movs	r2, #1
   1e98e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e992:	40a2      	lsls	r2, r4
   1e994:	ea23 0302 	bic.w	r3, r3, r2
   1e998:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1e99c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e9a0:	b913      	cbnz	r3, 1e9a8 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   1e9a2:	202a      	movs	r0, #42	; 0x2a
   1e9a4:	f7f2 f848 	bl	10a38 <arch_irq_disable>
	return 0;
   1e9a8:	2000      	movs	r0, #0
}
   1e9aa:	b007      	add	sp, #28
   1e9ac:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e9ae:	f06f 0015 	mvn.w	r0, #21
   1e9b2:	e7fa      	b.n	1e9aa <mbox_nrf_set_enabled+0x8e>
   1e9b4:	000373d4 	.word	0x000373d4
   1e9b8:	00031584 	.word	0x00031584

0001e9bc <mbox_nrf_send>:
{
   1e9bc:	b530      	push	{r4, r5, lr}
   1e9be:	4605      	mov	r5, r0
   1e9c0:	460c      	mov	r4, r1
   1e9c2:	b087      	sub	sp, #28
	if (msg) {
   1e9c4:	b152      	cbz	r2, 1e9dc <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   1e9c6:	4b10      	ldr	r3, [pc, #64]	; (1ea08 <mbox_nrf_send+0x4c>)
   1e9c8:	9305      	str	r3, [sp, #20]
   1e9ca:	2302      	movs	r3, #2
   1e9cc:	9304      	str	r3, [sp, #16]
   1e9ce:	2300      	movs	r3, #0
   1e9d0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e9d4:	480d      	ldr	r0, [pc, #52]	; (1ea0c <mbox_nrf_send+0x50>)
   1e9d6:	aa04      	add	r2, sp, #16
   1e9d8:	f7ef ff5a 	bl	e890 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1e9dc:	2c0f      	cmp	r4, #15
   1e9de:	d80f      	bhi.n	1ea00 <mbox_nrf_send+0x44>
   1e9e0:	686b      	ldr	r3, [r5, #4]
   1e9e2:	685b      	ldr	r3, [r3, #4]
   1e9e4:	40e3      	lsrs	r3, r4
   1e9e6:	07db      	lsls	r3, r3, #31
   1e9e8:	d50a      	bpl.n	1ea00 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9ea:	2301      	movs	r3, #1
	return 0;
   1e9ec:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1e9ee:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9f0:	b2e4      	uxtb	r4, r4
   1e9f2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1e9f6:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1e9fa:	6023      	str	r3, [r4, #0]
}
   1e9fc:	b007      	add	sp, #28
   1e9fe:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1ea00:	f06f 0015 	mvn.w	r0, #21
   1ea04:	e7fa      	b.n	1e9fc <mbox_nrf_send+0x40>
   1ea06:	bf00      	nop
   1ea08:	00037404 	.word	0x00037404
   1ea0c:	00031584 	.word	0x00031584

0001ea10 <mbox_dispatcher>:
{
   1ea10:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1ea12:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1ea16:	280f      	cmp	r0, #15
{
   1ea18:	4604      	mov	r4, r0
   1ea1a:	460d      	mov	r5, r1
   1ea1c:	6873      	ldr	r3, [r6, #4]
   1ea1e:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1ea20:	d803      	bhi.n	1ea2a <mbox_dispatcher+0x1a>
   1ea22:	681b      	ldr	r3, [r3, #0]
   1ea24:	40c3      	lsrs	r3, r0
   1ea26:	07db      	lsls	r3, r3, #31
   1ea28:	d40a      	bmi.n	1ea40 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   1ea2a:	4b15      	ldr	r3, [pc, #84]	; (1ea80 <mbox_dispatcher+0x70>)
   1ea2c:	9305      	str	r3, [sp, #20]
   1ea2e:	2302      	movs	r3, #2
   1ea30:	9304      	str	r3, [sp, #16]
   1ea32:	2300      	movs	r3, #0
   1ea34:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ea38:	4812      	ldr	r0, [pc, #72]	; (1ea84 <mbox_dispatcher+0x74>)
   1ea3a:	aa04      	add	r2, sp, #16
   1ea3c:	f7ef ff28 	bl	e890 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   1ea40:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1ea44:	40e3      	lsrs	r3, r4
   1ea46:	f013 0301 	ands.w	r3, r3, #1
   1ea4a:	d109      	bne.n	1ea60 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   1ea4c:	4a0e      	ldr	r2, [pc, #56]	; (1ea88 <mbox_dispatcher+0x78>)
   1ea4e:	9205      	str	r2, [sp, #20]
   1ea50:	2202      	movs	r2, #2
   1ea52:	9204      	str	r2, [sp, #16]
   1ea54:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ea58:	480a      	ldr	r0, [pc, #40]	; (1ea84 <mbox_dispatcher+0x74>)
   1ea5a:	aa04      	add	r2, sp, #16
   1ea5c:	f7ef ff18 	bl	e890 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   1ea60:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1ea64:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1ea68:	b145      	cbz	r5, 1ea7c <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1ea6a:	2300      	movs	r3, #0
   1ea6c:	4621      	mov	r1, r4
   1ea6e:	4630      	mov	r0, r6
   1ea70:	46ac      	mov	ip, r5
   1ea72:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1ea74:	b006      	add	sp, #24
   1ea76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1ea7a:	4760      	bx	ip
}
   1ea7c:	b006      	add	sp, #24
   1ea7e:	bd70      	pop	{r4, r5, r6, pc}
   1ea80:	0003741f 	.word	0x0003741f
   1ea84:	00031584 	.word	0x00031584
   1ea88:	0003743b 	.word	0x0003743b

0001ea8c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1ea8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1ea8e:	f7ef fd99 	bl	e5c4 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1ea92:	4b07      	ldr	r3, [pc, #28]	; (1eab0 <k_sys_fatal_error_handler+0x24>)
   1ea94:	9305      	str	r3, [sp, #20]
   1ea96:	2302      	movs	r3, #2
   1ea98:	9304      	str	r3, [sp, #16]
   1ea9a:	4806      	ldr	r0, [pc, #24]	; (1eab4 <k_sys_fatal_error_handler+0x28>)
   1ea9c:	2300      	movs	r3, #0
   1ea9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1eaa2:	aa04      	add	r2, sp, #16
   1eaa4:	f7ef fef4 	bl	e890 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1eaa8:	2000      	movs	r0, #0
   1eaaa:	f7f2 fc75 	bl	11398 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1eaae:	bf00      	nop
   1eab0:	00037485 	.word	0x00037485
   1eab4:	00031544 	.word	0x00031544

0001eab8 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1eab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eabc:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1eabe:	4b15      	ldr	r3, [pc, #84]	; (1eb14 <tfm_ns_interface_dispatch+0x5c>)
   1eac0:	4604      	mov	r4, r0
   1eac2:	f893 8000 	ldrb.w	r8, [r3]
   1eac6:	460d      	mov	r5, r1
   1eac8:	4616      	mov	r6, r2
   1eaca:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1eacc:	f1b8 0f00 	cmp.w	r8, #0
   1ead0:	d115      	bne.n	1eafe <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1ead2:	4668      	mov	r0, sp
   1ead4:	f00d f943 	bl	2bd5e <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1ead8:	463a      	mov	r2, r7
   1eada:	4631      	mov	r1, r6
   1eadc:	4628      	mov	r0, r5
   1eade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1eae0:	47a0      	blx	r4
   1eae2:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1eae4:	4668      	mov	r0, sp
   1eae6:	f00d f93b 	bl	2bd60 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1eaea:	f1b8 0f00 	cmp.w	r8, #0
   1eaee:	d002      	beq.n	1eaf6 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1eaf0:	4809      	ldr	r0, [pc, #36]	; (1eb18 <tfm_ns_interface_dispatch+0x60>)
   1eaf2:	f006 fbd7 	bl	252a4 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1eaf6:	4620      	mov	r0, r4
   1eaf8:	b022      	add	sp, #136	; 0x88
   1eafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1eafe:	f04f 32ff 	mov.w	r2, #4294967295
   1eb02:	f04f 33ff 	mov.w	r3, #4294967295
   1eb06:	4804      	ldr	r0, [pc, #16]	; (1eb18 <tfm_ns_interface_dispatch+0x60>)
   1eb08:	f006 fafc 	bl	25104 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1eb0c:	2800      	cmp	r0, #0
   1eb0e:	d0e0      	beq.n	1ead2 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1eb10:	241f      	movs	r4, #31
   1eb12:	e7f0      	b.n	1eaf6 <tfm_ns_interface_dispatch+0x3e>
   1eb14:	20022827 	.word	0x20022827
   1eb18:	20008b90 	.word	0x20008b90

0001eb1c <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1eb1c:	b530      	push	{r4, r5, lr}
   1eb1e:	b095      	sub	sp, #84	; 0x54
   1eb20:	4605      	mov	r5, r0
   1eb22:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1eb24:	2230      	movs	r2, #48	; 0x30
   1eb26:	2100      	movs	r1, #0
   1eb28:	a808      	add	r0, sp, #32
   1eb2a:	f011 fd5a 	bl	305e2 <memset>
   1eb2e:	233f      	movs	r3, #63	; 0x3f
   1eb30:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1eb32:	ab07      	add	r3, sp, #28
   1eb34:	9303      	str	r3, [sp, #12]
   1eb36:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1eb38:	9406      	str	r4, [sp, #24]
   1eb3a:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1eb3e:	b154      	cbz	r4, 1eb56 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1eb40:	2301      	movs	r3, #1
   1eb42:	aa05      	add	r2, sp, #20
   1eb44:	9200      	str	r2, [sp, #0]
   1eb46:	2100      	movs	r1, #0
   1eb48:	4804      	ldr	r0, [pc, #16]	; (1eb5c <psa_generate_random+0x40>)
   1eb4a:	9301      	str	r3, [sp, #4]
   1eb4c:	aa03      	add	r2, sp, #12
   1eb4e:	f000 f807 	bl	1eb60 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1eb52:	b015      	add	sp, #84	; 0x54
   1eb54:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1eb56:	4620      	mov	r0, r4
   1eb58:	e7fb      	b.n	1eb52 <psa_generate_random+0x36>
   1eb5a:	bf00      	nop
   1eb5c:	40000100 	.word	0x40000100

0001eb60 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1eb60:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1eb62:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1eb66:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1eb6a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1eb6c:	d20d      	bcs.n	1eb8a <psa_call+0x2a>
        (type < INT16_MIN) ||
   1eb6e:	ea43 0504 	orr.w	r5, r3, r4
   1eb72:	2dff      	cmp	r5, #255	; 0xff
   1eb74:	d809      	bhi.n	1eb8a <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1eb76:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1eb7a:	4613      	mov	r3, r2
   1eb7c:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1eb80:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1eb82:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1eb84:	4803      	ldr	r0, [pc, #12]	; (1eb94 <psa_call+0x34>)
   1eb86:	f7ff bf97 	b.w	1eab8 <tfm_ns_interface_dispatch>
}
   1eb8a:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1eb8e:	bc30      	pop	{r4, r5}
   1eb90:	4770      	bx	lr
   1eb92:	bf00      	nop
   1eb94:	00007c21 	.word	0x00007c21

0001eb98 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1eb98:	2300      	movs	r3, #0
{
   1eb9a:	b507      	push	{r0, r1, r2, lr}
   1eb9c:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1eb9e:	9300      	str	r3, [sp, #0]
   1eba0:	4601      	mov	r1, r0
   1eba2:	4803      	ldr	r0, [pc, #12]	; (1ebb0 <psa_connect+0x18>)
   1eba4:	f7ff ff88 	bl	1eab8 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1eba8:	b003      	add	sp, #12
   1ebaa:	f85d fb04 	ldr.w	pc, [sp], #4
   1ebae:	bf00      	nop
   1ebb0:	00007c19 	.word	0x00007c19

0001ebb4 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1ebb4:	2300      	movs	r3, #0
{
   1ebb6:	b507      	push	{r0, r1, r2, lr}
   1ebb8:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1ebba:	461a      	mov	r2, r3
   1ebbc:	9300      	str	r3, [sp, #0]
   1ebbe:	4803      	ldr	r0, [pc, #12]	; (1ebcc <psa_close+0x18>)
   1ebc0:	f7ff ff7a 	bl	1eab8 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1ebc4:	b003      	add	sp, #12
   1ebc6:	f85d fb04 	ldr.w	pc, [sp], #4
   1ebca:	bf00      	nop
   1ebcc:	00007c11 	.word	0x00007c11

0001ebd0 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1ebd0:	4b04      	ldr	r3, [pc, #16]	; (1ebe4 <SystemCoreClockUpdate+0x14>)
   1ebd2:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1ebd6:	4b04      	ldr	r3, [pc, #16]	; (1ebe8 <SystemCoreClockUpdate+0x18>)
   1ebd8:	f002 0203 	and.w	r2, r2, #3
   1ebdc:	40d3      	lsrs	r3, r2
   1ebde:	4a03      	ldr	r2, [pc, #12]	; (1ebec <SystemCoreClockUpdate+0x1c>)
   1ebe0:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1ebe2:	4770      	bx	lr
   1ebe4:	40005000 	.word	0x40005000
   1ebe8:	07a12000 	.word	0x07a12000
   1ebec:	20008694 	.word	0x20008694

0001ebf0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1ebf0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ebf2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1ebf4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1ebf6:	fab2 f382 	clz	r3, r2
   1ebfa:	f1c3 031f 	rsb	r3, r3, #31
   1ebfe:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ec00:	fa05 f403 	lsl.w	r4, r5, r3
   1ec04:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ec08:	e8d0 6fef 	ldaex	r6, [r0]
   1ec0c:	4296      	cmp	r6, r2
   1ec0e:	d104      	bne.n	1ec1a <nrfx_flag32_alloc+0x2a>
   1ec10:	e8c0 4fec 	stlex	ip, r4, [r0]
   1ec14:	f1bc 0f00 	cmp.w	ip, #0
   1ec18:	d1f6      	bne.n	1ec08 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ec1a:	d1eb      	bne.n	1ebf4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1ec1c:	4801      	ldr	r0, [pc, #4]	; (1ec24 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1ec1e:	700b      	strb	r3, [r1, #0]
}
   1ec20:	bd70      	pop	{r4, r5, r6, pc}
   1ec22:	bf00      	nop
   1ec24:	0bad0000 	.word	0x0bad0000

0001ec28 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1ec28:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1ec2a:	6803      	ldr	r3, [r0, #0]
   1ec2c:	40cb      	lsrs	r3, r1
   1ec2e:	07db      	lsls	r3, r3, #31
   1ec30:	d410      	bmi.n	1ec54 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1ec32:	2301      	movs	r3, #1
   1ec34:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1ec36:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1ec38:	ea43 0102 	orr.w	r1, r3, r2
   1ec3c:	e8d0 4fef 	ldaex	r4, [r0]
   1ec40:	4294      	cmp	r4, r2
   1ec42:	d104      	bne.n	1ec4e <nrfx_flag32_free+0x26>
   1ec44:	e8c0 1fec 	stlex	ip, r1, [r0]
   1ec48:	f1bc 0f00 	cmp.w	ip, #0
   1ec4c:	d1f6      	bne.n	1ec3c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ec4e:	d1f2      	bne.n	1ec36 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1ec50:	4801      	ldr	r0, [pc, #4]	; (1ec58 <nrfx_flag32_free+0x30>)
}
   1ec52:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ec54:	4801      	ldr	r0, [pc, #4]	; (1ec5c <nrfx_flag32_free+0x34>)
   1ec56:	e7fc      	b.n	1ec52 <nrfx_flag32_free+0x2a>
   1ec58:	0bad0000 	.word	0x0bad0000
   1ec5c:	0bad0004 	.word	0x0bad0004

0001ec60 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1ec60:	2200      	movs	r2, #0
{
   1ec62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ec64:	4b62      	ldr	r3, [pc, #392]	; (1edf0 <clock_stop+0x190>)
    switch (domain)
   1ec66:	2803      	cmp	r0, #3
   1ec68:	d838      	bhi.n	1ecdc <clock_stop+0x7c>
   1ec6a:	e8df f000 	tbb	[pc, r0]
   1ec6e:	0d02      	.short	0x0d02
   1ec70:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1ec72:	2102      	movs	r1, #2
   1ec74:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec78:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1ec7c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec80:	2201      	movs	r2, #1
   1ec82:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1ec84:	2400      	movs	r4, #0
   1ec86:	e009      	b.n	1ec9c <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1ec88:	2101      	movs	r1, #1
   1ec8a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ec92:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1ec96:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec9a:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1ec9c:	2301      	movs	r3, #1
   1ec9e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1eca2:	2803      	cmp	r0, #3
   1eca4:	f200 8093 	bhi.w	1edce <clock_stop+0x16e>
   1eca8:	e8df f000 	tbb	[pc, r0]
   1ecac:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1ecb0:	f44f 7100 	mov.w	r1, #512	; 0x200
   1ecb4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecb8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1ecbc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecc0:	2201      	movs	r2, #1
   1ecc2:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1ecc4:	e7de      	b.n	1ec84 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1ecc6:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ecca:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecce:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1ecd2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecd6:	2201      	movs	r2, #1
   1ecd8:	61da      	str	r2, [r3, #28]
   1ecda:	e7d3      	b.n	1ec84 <clock_stop+0x24>
            NRFX_ASSERT(0);
   1ecdc:	4945      	ldr	r1, [pc, #276]	; (1edf4 <clock_stop+0x194>)
   1ecde:	4846      	ldr	r0, [pc, #280]	; (1edf8 <clock_stop+0x198>)
   1ece0:	23d8      	movs	r3, #216	; 0xd8
   1ece2:	4a46      	ldr	r2, [pc, #280]	; (1edfc <clock_stop+0x19c>)
   1ece4:	f00b fce9 	bl	2a6ba <assert_print>
   1ece8:	21d8      	movs	r1, #216	; 0xd8
   1ecea:	4844      	ldr	r0, [pc, #272]	; (1edfc <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1ecec:	f00b fcde 	bl	2a6ac <assert_post_action>
    switch (domain)
   1ecf0:	f242 7510 	movw	r5, #10000	; 0x2710
   1ecf4:	4e3e      	ldr	r6, [pc, #248]	; (1edf0 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ecf6:	b194      	cbz	r4, 1ed1e <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ecf8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1ecfc:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1ed00:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ed02:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1ed06:	03d9      	lsls	r1, r3, #15
   1ed08:	d507      	bpl.n	1ed1a <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1ed0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ed0e:	2801      	cmp	r0, #1
   1ed10:	d103      	bne.n	1ed1a <clock_stop+0xba>
   1ed12:	f00f fecb 	bl	2eaac <nrfx_busy_wait>
   1ed16:	3d01      	subs	r5, #1
   1ed18:	d1ed      	bne.n	1ecf6 <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1ed1a:	b002      	add	sp, #8
   1ed1c:	bd70      	pop	{r4, r5, r6, pc}
   1ed1e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1ed22:	03da      	lsls	r2, r3, #15
   1ed24:	d5f9      	bpl.n	1ed1a <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1ed26:	2001      	movs	r0, #1
   1ed28:	f00f fec0 	bl	2eaac <nrfx_busy_wait>
   1ed2c:	3d01      	subs	r5, #1
   1ed2e:	d1f6      	bne.n	1ed1e <clock_stop+0xbe>
   1ed30:	e7f3      	b.n	1ed1a <clock_stop+0xba>
    switch (domain)
   1ed32:	f242 7510 	movw	r5, #10000	; 0x2710
   1ed36:	4e2e      	ldr	r6, [pc, #184]	; (1edf0 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ed38:	b18c      	cbz	r4, 1ed5e <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ed3a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ed3e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1ed42:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ed44:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ed48:	03db      	lsls	r3, r3, #15
   1ed4a:	d5e6      	bpl.n	1ed1a <clock_stop+0xba>
   1ed4c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ed50:	2801      	cmp	r0, #1
   1ed52:	d1e2      	bne.n	1ed1a <clock_stop+0xba>
   1ed54:	f00f feaa 	bl	2eaac <nrfx_busy_wait>
   1ed58:	3d01      	subs	r5, #1
   1ed5a:	d1ed      	bne.n	1ed38 <clock_stop+0xd8>
   1ed5c:	e7dd      	b.n	1ed1a <clock_stop+0xba>
   1ed5e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ed62:	03d8      	lsls	r0, r3, #15
   1ed64:	d5d9      	bpl.n	1ed1a <clock_stop+0xba>
   1ed66:	2001      	movs	r0, #1
   1ed68:	f00f fea0 	bl	2eaac <nrfx_busy_wait>
   1ed6c:	3d01      	subs	r5, #1
   1ed6e:	d1f6      	bne.n	1ed5e <clock_stop+0xfe>
   1ed70:	e7d3      	b.n	1ed1a <clock_stop+0xba>
    switch (domain)
   1ed72:	f242 7510 	movw	r5, #10000	; 0x2710
   1ed76:	4e1e      	ldr	r6, [pc, #120]	; (1edf0 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ed78:	b18c      	cbz	r4, 1ed9e <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1ed7a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1ed7e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1ed82:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1ed84:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1ed88:	03d9      	lsls	r1, r3, #15
   1ed8a:	d5c6      	bpl.n	1ed1a <clock_stop+0xba>
   1ed8c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ed90:	2801      	cmp	r0, #1
   1ed92:	d1c2      	bne.n	1ed1a <clock_stop+0xba>
   1ed94:	f00f fe8a 	bl	2eaac <nrfx_busy_wait>
   1ed98:	3d01      	subs	r5, #1
   1ed9a:	d1ed      	bne.n	1ed78 <clock_stop+0x118>
   1ed9c:	e7bd      	b.n	1ed1a <clock_stop+0xba>
   1ed9e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1eda2:	03da      	lsls	r2, r3, #15
   1eda4:	d5b9      	bpl.n	1ed1a <clock_stop+0xba>
   1eda6:	2001      	movs	r0, #1
   1eda8:	f00f fe80 	bl	2eaac <nrfx_busy_wait>
   1edac:	3d01      	subs	r5, #1
   1edae:	d1f6      	bne.n	1ed9e <clock_stop+0x13e>
   1edb0:	e7b3      	b.n	1ed1a <clock_stop+0xba>
    switch (domain)
   1edb2:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1edb6:	4e0e      	ldr	r6, [pc, #56]	; (1edf0 <clock_stop+0x190>)
   1edb8:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1edbc:	03db      	lsls	r3, r3, #15
   1edbe:	d5ac      	bpl.n	1ed1a <clock_stop+0xba>
   1edc0:	b984      	cbnz	r4, 1ede4 <clock_stop+0x184>
   1edc2:	2001      	movs	r0, #1
   1edc4:	f00f fe72 	bl	2eaac <nrfx_busy_wait>
   1edc8:	3d01      	subs	r5, #1
   1edca:	d1f5      	bne.n	1edb8 <clock_stop+0x158>
   1edcc:	e7a5      	b.n	1ed1a <clock_stop+0xba>
            NRFX_ASSERT(0);
   1edce:	4909      	ldr	r1, [pc, #36]	; (1edf4 <clock_stop+0x194>)
   1edd0:	4809      	ldr	r0, [pc, #36]	; (1edf8 <clock_stop+0x198>)
   1edd2:	f240 3347 	movw	r3, #839	; 0x347
   1edd6:	4a0a      	ldr	r2, [pc, #40]	; (1ee00 <clock_stop+0x1a0>)
   1edd8:	f00b fc6f 	bl	2a6ba <assert_print>
   1eddc:	f240 3147 	movw	r1, #839	; 0x347
   1ede0:	4807      	ldr	r0, [pc, #28]	; (1ee00 <clock_stop+0x1a0>)
   1ede2:	e783      	b.n	1ecec <clock_stop+0x8c>
   1ede4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ede8:	2801      	cmp	r0, #1
   1edea:	d0eb      	beq.n	1edc4 <clock_stop+0x164>
   1edec:	e795      	b.n	1ed1a <clock_stop+0xba>
   1edee:	bf00      	nop
   1edf0:	40005000 	.word	0x40005000
   1edf4:	00037b2a 	.word	0x00037b2a
   1edf8:	00032659 	.word	0x00032659
   1edfc:	000374a2 	.word	0x000374a2
   1ee00:	000374df 	.word	0x000374df

0001ee04 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1ee04:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1ee06:	b958      	cbnz	r0, 1ee20 <nrfx_clock_init+0x1c>
   1ee08:	490a      	ldr	r1, [pc, #40]	; (1ee34 <nrfx_clock_init+0x30>)
   1ee0a:	480b      	ldr	r0, [pc, #44]	; (1ee38 <nrfx_clock_init+0x34>)
   1ee0c:	f240 1315 	movw	r3, #277	; 0x115
   1ee10:	4a0a      	ldr	r2, [pc, #40]	; (1ee3c <nrfx_clock_init+0x38>)
   1ee12:	f00b fc52 	bl	2a6ba <assert_print>
   1ee16:	f240 1115 	movw	r1, #277	; 0x115
   1ee1a:	4808      	ldr	r0, [pc, #32]	; (1ee3c <nrfx_clock_init+0x38>)
   1ee1c:	f00b fc46 	bl	2a6ac <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1ee20:	4b07      	ldr	r3, [pc, #28]	; (1ee40 <nrfx_clock_init+0x3c>)
   1ee22:	791a      	ldrb	r2, [r3, #4]
   1ee24:	b922      	cbnz	r2, 1ee30 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1ee26:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1ee28:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1ee2a:	4806      	ldr	r0, [pc, #24]	; (1ee44 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1ee2c:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ee2e:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1ee30:	4805      	ldr	r0, [pc, #20]	; (1ee48 <nrfx_clock_init+0x44>)
    return err_code;
   1ee32:	e7fc      	b.n	1ee2e <nrfx_clock_init+0x2a>
   1ee34:	00037513 	.word	0x00037513
   1ee38:	00032659 	.word	0x00032659
   1ee3c:	000374a2 	.word	0x000374a2
   1ee40:	20021958 	.word	0x20021958
   1ee44:	0bad0000 	.word	0x0bad0000
   1ee48:	0bad000c 	.word	0x0bad000c

0001ee4c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1ee4c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1ee4e:	4b0f      	ldr	r3, [pc, #60]	; (1ee8c <nrfx_clock_enable+0x40>)
   1ee50:	791b      	ldrb	r3, [r3, #4]
   1ee52:	b95b      	cbnz	r3, 1ee6c <nrfx_clock_enable+0x20>
   1ee54:	490e      	ldr	r1, [pc, #56]	; (1ee90 <nrfx_clock_enable+0x44>)
   1ee56:	480f      	ldr	r0, [pc, #60]	; (1ee94 <nrfx_clock_enable+0x48>)
   1ee58:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1ee5c:	4a0e      	ldr	r2, [pc, #56]	; (1ee98 <nrfx_clock_enable+0x4c>)
   1ee5e:	f00b fc2c 	bl	2a6ba <assert_print>
   1ee62:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1ee66:	480c      	ldr	r0, [pc, #48]	; (1ee98 <nrfx_clock_enable+0x4c>)
   1ee68:	f00b fc20 	bl	2a6ac <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1ee6c:	2005      	movs	r0, #5
   1ee6e:	f7f1 fdf7 	bl	10a60 <arch_irq_is_enabled>
   1ee72:	b910      	cbnz	r0, 1ee7a <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1ee74:	2005      	movs	r0, #5
   1ee76:	f7f1 fdd1 	bl	10a1c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ee7a:	2201      	movs	r2, #1
   1ee7c:	4b07      	ldr	r3, [pc, #28]	; (1ee9c <nrfx_clock_enable+0x50>)
   1ee7e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1ee82:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1ee86:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1ee8a:	bd08      	pop	{r3, pc}
   1ee8c:	20021958 	.word	0x20021958
   1ee90:	00037521 	.word	0x00037521
   1ee94:	00032659 	.word	0x00032659
   1ee98:	000374a2 	.word	0x000374a2
   1ee9c:	40005000 	.word	0x40005000

0001eea0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1eea0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1eea2:	4b38      	ldr	r3, [pc, #224]	; (1ef84 <nrfx_clock_start+0xe4>)
   1eea4:	791b      	ldrb	r3, [r3, #4]
   1eea6:	b95b      	cbnz	r3, 1eec0 <nrfx_clock_start+0x20>
   1eea8:	4937      	ldr	r1, [pc, #220]	; (1ef88 <nrfx_clock_start+0xe8>)
   1eeaa:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1eeae:	4a37      	ldr	r2, [pc, #220]	; (1ef8c <nrfx_clock_start+0xec>)
   1eeb0:	4837      	ldr	r0, [pc, #220]	; (1ef90 <nrfx_clock_start+0xf0>)
   1eeb2:	f00b fc02 	bl	2a6ba <assert_print>
   1eeb6:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1eeba:	4834      	ldr	r0, [pc, #208]	; (1ef8c <nrfx_clock_start+0xec>)
   1eebc:	f00b fbf6 	bl	2a6ac <assert_post_action>
    switch (domain)
   1eec0:	4b34      	ldr	r3, [pc, #208]	; (1ef94 <nrfx_clock_start+0xf4>)
   1eec2:	2803      	cmp	r0, #3
   1eec4:	d853      	bhi.n	1ef6e <nrfx_clock_start+0xce>
   1eec6:	e8df f000 	tbb	[pc, r0]
   1eeca:	3002      	.short	0x3002
   1eecc:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1eece:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1eed2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1eed6:	03c9      	lsls	r1, r1, #15
   1eed8:	d511      	bpl.n	1eefe <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1eeda:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1eede:	2b02      	cmp	r3, #2
   1eee0:	d11c      	bne.n	1ef1c <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1eee2:	4a2c      	ldr	r2, [pc, #176]	; (1ef94 <nrfx_clock_start+0xf4>)
   1eee4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eee8:	2300      	movs	r3, #0
   1eeea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1eeee:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1eef2:	2302      	movs	r3, #2
   1eef4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eef8:	2301      	movs	r3, #1
   1eefa:	6093      	str	r3, [r2, #8]
}
   1eefc:	e00d      	b.n	1ef1a <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1eefe:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1ef02:	07d2      	lsls	r2, r2, #31
   1ef04:	d50f      	bpl.n	1ef26 <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1ef06:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1ef0a:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1ef0e:	3a01      	subs	r2, #1
   1ef10:	2a01      	cmp	r2, #1
   1ef12:	d805      	bhi.n	1ef20 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1ef14:	2202      	movs	r2, #2
   1ef16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1ef1a:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1ef1c:	2b01      	cmp	r3, #1
   1ef1e:	d002      	beq.n	1ef26 <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1ef20:	2000      	movs	r0, #0
   1ef22:	f7ff fe9d 	bl	1ec60 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1ef26:	2301      	movs	r3, #1
   1ef28:	e7db      	b.n	1eee2 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef2a:	2200      	movs	r2, #0
   1ef2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ef30:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ef34:	2201      	movs	r2, #1
   1ef36:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef3a:	601a      	str	r2, [r3, #0]
}
   1ef3c:	e7ed      	b.n	1ef1a <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef3e:	2200      	movs	r2, #0
   1ef40:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1ef44:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1ef48:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ef4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef50:	2201      	movs	r2, #1
   1ef52:	621a      	str	r2, [r3, #32]
}
   1ef54:	e7e1      	b.n	1ef1a <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef56:	2200      	movs	r2, #0
   1ef58:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1ef5c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1ef60:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ef64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef68:	2201      	movs	r2, #1
   1ef6a:	619a      	str	r2, [r3, #24]
}
   1ef6c:	e7d5      	b.n	1ef1a <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1ef6e:	490a      	ldr	r1, [pc, #40]	; (1ef98 <nrfx_clock_start+0xf8>)
   1ef70:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1ef74:	4a05      	ldr	r2, [pc, #20]	; (1ef8c <nrfx_clock_start+0xec>)
   1ef76:	4806      	ldr	r0, [pc, #24]	; (1ef90 <nrfx_clock_start+0xf0>)
   1ef78:	f00b fb9f 	bl	2a6ba <assert_print>
   1ef7c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1ef80:	e79b      	b.n	1eeba <nrfx_clock_start+0x1a>
   1ef82:	bf00      	nop
   1ef84:	20021958 	.word	0x20021958
   1ef88:	00037521 	.word	0x00037521
   1ef8c:	000374a2 	.word	0x000374a2
   1ef90:	00032659 	.word	0x00032659
   1ef94:	40005000 	.word	0x40005000
   1ef98:	00037b2a 	.word	0x00037b2a

0001ef9c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1ef9c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1ef9e:	4b09      	ldr	r3, [pc, #36]	; (1efc4 <nrfx_clock_stop+0x28>)
   1efa0:	791b      	ldrb	r3, [r3, #4]
   1efa2:	b95b      	cbnz	r3, 1efbc <nrfx_clock_stop+0x20>
   1efa4:	4908      	ldr	r1, [pc, #32]	; (1efc8 <nrfx_clock_stop+0x2c>)
   1efa6:	4809      	ldr	r0, [pc, #36]	; (1efcc <nrfx_clock_stop+0x30>)
   1efa8:	f240 13ad 	movw	r3, #429	; 0x1ad
   1efac:	4a08      	ldr	r2, [pc, #32]	; (1efd0 <nrfx_clock_stop+0x34>)
   1efae:	f00b fb84 	bl	2a6ba <assert_print>
   1efb2:	f240 11ad 	movw	r1, #429	; 0x1ad
   1efb6:	4806      	ldr	r0, [pc, #24]	; (1efd0 <nrfx_clock_stop+0x34>)
   1efb8:	f00b fb78 	bl	2a6ac <assert_post_action>
    clock_stop(domain);
}
   1efbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1efc0:	f7ff be4e 	b.w	1ec60 <clock_stop>
   1efc4:	20021958 	.word	0x20021958
   1efc8:	00037521 	.word	0x00037521
   1efcc:	00032659 	.word	0x00032659
   1efd0:	000374a2 	.word	0x000374a2

0001efd4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1efd4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1efd6:	4b28      	ldr	r3, [pc, #160]	; (1f078 <nrfx_power_clock_irq_handler+0xa4>)
   1efd8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1efdc:	b152      	cbz	r2, 1eff4 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1efde:	2000      	movs	r0, #0
   1efe0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1efe4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1efe8:	2201      	movs	r2, #1
   1efea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1efee:	4b23      	ldr	r3, [pc, #140]	; (1f07c <nrfx_power_clock_irq_handler+0xa8>)
   1eff0:	681b      	ldr	r3, [r3, #0]
   1eff2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1eff4:	4b20      	ldr	r3, [pc, #128]	; (1f078 <nrfx_power_clock_irq_handler+0xa4>)
   1eff6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1effa:	b18a      	cbz	r2, 1f020 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1effc:	2200      	movs	r2, #0
   1effe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1f002:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f006:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f00a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1f00e:	f002 0203 	and.w	r2, r2, #3
   1f012:	2a01      	cmp	r2, #1
   1f014:	f04f 0102 	mov.w	r1, #2
   1f018:	d126      	bne.n	1f068 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f01a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f01e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f020:	4b15      	ldr	r3, [pc, #84]	; (1f078 <nrfx_power_clock_irq_handler+0xa4>)
   1f022:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1f026:	b162      	cbz	r2, 1f042 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f028:	2200      	movs	r2, #0
   1f02a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1f02e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1f032:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f036:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1f03a:	4b10      	ldr	r3, [pc, #64]	; (1f07c <nrfx_power_clock_irq_handler+0xa8>)
   1f03c:	2004      	movs	r0, #4
   1f03e:	681b      	ldr	r3, [r3, #0]
   1f040:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f042:	4b0d      	ldr	r3, [pc, #52]	; (1f078 <nrfx_power_clock_irq_handler+0xa4>)
   1f044:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1f048:	b1aa      	cbz	r2, 1f076 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f04a:	2200      	movs	r2, #0
   1f04c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1f050:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1f054:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f058:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1f05c:	4b07      	ldr	r3, [pc, #28]	; (1f07c <nrfx_power_clock_irq_handler+0xa8>)
   1f05e:	2005      	movs	r0, #5
    }
#endif
}
   1f060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1f064:	681b      	ldr	r3, [r3, #0]
   1f066:	4718      	bx	r3
   1f068:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f06c:	4b03      	ldr	r3, [pc, #12]	; (1f07c <nrfx_power_clock_irq_handler+0xa8>)
   1f06e:	2001      	movs	r0, #1
   1f070:	681b      	ldr	r3, [r3, #0]
   1f072:	4798      	blx	r3
   1f074:	e7d4      	b.n	1f020 <nrfx_power_clock_irq_handler+0x4c>
}
   1f076:	bd10      	pop	{r4, pc}
   1f078:	40005000 	.word	0x40005000
   1f07c:	20021958 	.word	0x20021958

0001f080 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1f080:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1f082:	4801      	ldr	r0, [pc, #4]	; (1f088 <nrfx_dppi_channel_alloc+0x8>)
   1f084:	f7ff bdb4 	b.w	1ebf0 <nrfx_flag32_alloc>
   1f088:	20008698 	.word	0x20008698

0001f08c <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1f08c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1f08e:	4a04      	ldr	r2, [pc, #16]	; (1f0a0 <nrfx_dppi_channel_free+0x14>)
   1f090:	4083      	lsls	r3, r0
{
   1f092:	4601      	mov	r1, r0
   1f094:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1f098:	4802      	ldr	r0, [pc, #8]	; (1f0a4 <nrfx_dppi_channel_free+0x18>)
   1f09a:	f7ff bdc5 	b.w	1ec28 <nrfx_flag32_free>
   1f09e:	bf00      	nop
   1f0a0:	40017000 	.word	0x40017000
   1f0a4:	20008698 	.word	0x20008698

0001f0a8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f0a8:	4b03      	ldr	r3, [pc, #12]	; (1f0b8 <pin_in_use_by_te+0x10>)
   1f0aa:	3008      	adds	r0, #8
   1f0ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0b0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f0b4:	4770      	bx	lr
   1f0b6:	bf00      	nop
   1f0b8:	2000869c 	.word	0x2000869c

0001f0bc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f0bc:	4b04      	ldr	r3, [pc, #16]	; (1f0d0 <pin_has_trigger+0x14>)
   1f0be:	3008      	adds	r0, #8
   1f0c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0c4:	f010 001c 	ands.w	r0, r0, #28
   1f0c8:	bf18      	it	ne
   1f0ca:	2001      	movne	r0, #1
   1f0cc:	4770      	bx	lr
   1f0ce:	bf00      	nop
   1f0d0:	2000869c 	.word	0x2000869c

0001f0d4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f0d4:	4b03      	ldr	r3, [pc, #12]	; (1f0e4 <pin_is_output+0x10>)
   1f0d6:	3008      	adds	r0, #8
   1f0d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0dc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f0e0:	4770      	bx	lr
   1f0e2:	bf00      	nop
   1f0e4:	2000869c 	.word	0x2000869c

0001f0e8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f0e8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f0ea:	4c0d      	ldr	r4, [pc, #52]	; (1f120 <call_handler+0x38>)
   1f0ec:	f100 0308 	add.w	r3, r0, #8
   1f0f0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1f0f4:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f0f6:	05da      	lsls	r2, r3, #23
{
   1f0f8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f0fa:	d507      	bpl.n	1f10c <call_handler+0x24>
   1f0fc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f100:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f104:	6852      	ldr	r2, [r2, #4]
   1f106:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f10a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f10c:	68a3      	ldr	r3, [r4, #8]
   1f10e:	b12b      	cbz	r3, 1f11c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f110:	4631      	mov	r1, r6
   1f112:	4628      	mov	r0, r5
   1f114:	68e2      	ldr	r2, [r4, #12]
    }
}
   1f116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f11a:	4718      	bx	r3
}
   1f11c:	bd70      	pop	{r4, r5, r6, pc}
   1f11e:	bf00      	nop
   1f120:	2000869c 	.word	0x2000869c

0001f124 <release_handler>:
{
   1f124:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f126:	4a18      	ldr	r2, [pc, #96]	; (1f188 <release_handler+0x64>)
   1f128:	3008      	adds	r0, #8
   1f12a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f12e:	05d9      	lsls	r1, r3, #23
   1f130:	d51d      	bpl.n	1f16e <release_handler+0x4a>
   1f132:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f136:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f13a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f13e:	2000      	movs	r0, #0
   1f140:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f144:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1f148:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f14c:	d003      	beq.n	1f156 <release_handler+0x32>
   1f14e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f152:	4299      	cmp	r1, r3
   1f154:	d00b      	beq.n	1f16e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f156:	3001      	adds	r0, #1
   1f158:	2830      	cmp	r0, #48	; 0x30
   1f15a:	d1f3      	bne.n	1f144 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f15c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f15e:	480b      	ldr	r0, [pc, #44]	; (1f18c <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1f160:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f164:	f7ff fd60 	bl	1ec28 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f168:	4b09      	ldr	r3, [pc, #36]	; (1f190 <release_handler+0x6c>)
   1f16a:	4298      	cmp	r0, r3
   1f16c:	d100      	bne.n	1f170 <release_handler+0x4c>
}
   1f16e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f170:	4908      	ldr	r1, [pc, #32]	; (1f194 <release_handler+0x70>)
   1f172:	4809      	ldr	r0, [pc, #36]	; (1f198 <release_handler+0x74>)
   1f174:	f44f 7399 	mov.w	r3, #306	; 0x132
   1f178:	4a08      	ldr	r2, [pc, #32]	; (1f19c <release_handler+0x78>)
   1f17a:	f00b fa9e 	bl	2a6ba <assert_print>
   1f17e:	f44f 7199 	mov.w	r1, #306	; 0x132
   1f182:	4806      	ldr	r0, [pc, #24]	; (1f19c <release_handler+0x78>)
   1f184:	f00b fa92 	bl	2a6ac <assert_post_action>
   1f188:	2000869c 	.word	0x2000869c
   1f18c:	20008710 	.word	0x20008710
   1f190:	0bad0000 	.word	0x0bad0000
   1f194:	000335bc 	.word	0x000335bc
   1f198:	00032659 	.word	0x00032659
   1f19c:	00037554 	.word	0x00037554

0001f1a0 <pin_handler_trigger_uninit>:
{
   1f1a0:	b538      	push	{r3, r4, r5, lr}
   1f1a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f1a4:	f7ff ff80 	bl	1f0a8 <pin_in_use_by_te>
   1f1a8:	4c0b      	ldr	r4, [pc, #44]	; (1f1d8 <pin_handler_trigger_uninit+0x38>)
   1f1aa:	f102 0508 	add.w	r5, r2, #8
   1f1ae:	b160      	cbz	r0, 1f1ca <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f1b0:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f1b2:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f1b6:	0b5b      	lsrs	r3, r3, #13
   1f1b8:	009b      	lsls	r3, r3, #2
   1f1ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f1be:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f1c2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1f1c6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1f1ca:	4610      	mov	r0, r2
   1f1cc:	f7ff ffaa 	bl	1f124 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f1d0:	2300      	movs	r3, #0
   1f1d2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f1d6:	bd38      	pop	{r3, r4, r5, pc}
   1f1d8:	2000869c 	.word	0x2000869c

0001f1dc <nrf_gpio_pin_port_decode>:
{
   1f1dc:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f1de:	6802      	ldr	r2, [r0, #0]
{
   1f1e0:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f1e2:	4610      	mov	r0, r2
   1f1e4:	f00f fc64 	bl	2eab0 <nrf_gpio_pin_present_check>
   1f1e8:	b958      	cbnz	r0, 1f202 <nrf_gpio_pin_port_decode+0x26>
   1f1ea:	4910      	ldr	r1, [pc, #64]	; (1f22c <nrf_gpio_pin_port_decode+0x50>)
   1f1ec:	f240 2347 	movw	r3, #583	; 0x247
   1f1f0:	4a0f      	ldr	r2, [pc, #60]	; (1f230 <nrf_gpio_pin_port_decode+0x54>)
   1f1f2:	4810      	ldr	r0, [pc, #64]	; (1f234 <nrf_gpio_pin_port_decode+0x58>)
   1f1f4:	f00b fa61 	bl	2a6ba <assert_print>
   1f1f8:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1f1fc:	480c      	ldr	r0, [pc, #48]	; (1f230 <nrf_gpio_pin_port_decode+0x54>)
   1f1fe:	f00b fa55 	bl	2a6ac <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1f202:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f206:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1f208:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f20a:	d00b      	beq.n	1f224 <nrf_gpio_pin_port_decode+0x48>
   1f20c:	2a01      	cmp	r2, #1
   1f20e:	d00b      	beq.n	1f228 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1f210:	4909      	ldr	r1, [pc, #36]	; (1f238 <nrf_gpio_pin_port_decode+0x5c>)
   1f212:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1f216:	4a06      	ldr	r2, [pc, #24]	; (1f230 <nrf_gpio_pin_port_decode+0x54>)
   1f218:	4806      	ldr	r0, [pc, #24]	; (1f234 <nrf_gpio_pin_port_decode+0x58>)
   1f21a:	f00b fa4e 	bl	2a6ba <assert_print>
   1f21e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1f222:	e7eb      	b.n	1f1fc <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1f224:	4805      	ldr	r0, [pc, #20]	; (1f23c <nrf_gpio_pin_port_decode+0x60>)
}
   1f226:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f228:	4805      	ldr	r0, [pc, #20]	; (1f240 <nrf_gpio_pin_port_decode+0x64>)
   1f22a:	e7fc      	b.n	1f226 <nrf_gpio_pin_port_decode+0x4a>
   1f22c:	00036c34 	.word	0x00036c34
   1f230:	00036c01 	.word	0x00036c01
   1f234:	00032659 	.word	0x00032659
   1f238:	00037b2a 	.word	0x00037b2a
   1f23c:	40842500 	.word	0x40842500
   1f240:	40842800 	.word	0x40842800

0001f244 <nrfx_gpiote_input_configure>:
{
   1f244:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f246:	4604      	mov	r4, r0
   1f248:	4617      	mov	r7, r2
   1f24a:	461d      	mov	r5, r3
   1f24c:	b085      	sub	sp, #20
    if (p_input_config)
   1f24e:	b1d9      	cbz	r1, 1f288 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1f250:	f00f fc3f 	bl	2ead2 <pin_is_task_output>
   1f254:	bb00      	cbnz	r0, 1f298 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f256:	460b      	mov	r3, r1
   1f258:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f25c:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f260:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f264:	f10d 020f 	add.w	r2, sp, #15
   1f268:	f10d 010e 	add.w	r1, sp, #14
   1f26c:	4620      	mov	r0, r4
   1f26e:	f00f fc3b 	bl	2eae8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f272:	4a44      	ldr	r2, [pc, #272]	; (1f384 <nrfx_gpiote_input_configure+0x140>)
   1f274:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f278:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f27c:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f280:	f043 0301 	orr.w	r3, r3, #1
   1f284:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f288:	b36f      	cbz	r7, 1f2e6 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1f28a:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f28c:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f28e:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f290:	f7ff ff20 	bl	1f0d4 <pin_is_output>
   1f294:	b110      	cbz	r0, 1f29c <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1f296:	b1da      	cbz	r2, 1f2d0 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1f298:	483b      	ldr	r0, [pc, #236]	; (1f388 <nrfx_gpiote_input_configure+0x144>)
   1f29a:	e026      	b.n	1f2ea <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f29c:	4839      	ldr	r0, [pc, #228]	; (1f384 <nrfx_gpiote_input_configure+0x140>)
   1f29e:	f104 0c08 	add.w	ip, r4, #8
   1f2a2:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1f2a6:	f021 0120 	bic.w	r1, r1, #32
   1f2aa:	04c9      	lsls	r1, r1, #19
   1f2ac:	0cc9      	lsrs	r1, r1, #19
   1f2ae:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1f2b2:	b16a      	cbz	r2, 1f2d0 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1f2b4:	2e03      	cmp	r6, #3
   1f2b6:	d8ef      	bhi.n	1f298 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f2b8:	687b      	ldr	r3, [r7, #4]
   1f2ba:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f2bc:	00ba      	lsls	r2, r7, #2
   1f2be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f2c2:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1f2c6:	b996      	cbnz	r6, 1f2ee <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1f2c8:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1f2cc:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f2d0:	4a2c      	ldr	r2, [pc, #176]	; (1f384 <nrfx_gpiote_input_configure+0x140>)
   1f2d2:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f2d6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f2da:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f2de:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1f2e2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1f2e6:	bb15      	cbnz	r5, 1f32e <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1f2e8:	4828      	ldr	r0, [pc, #160]	; (1f38c <nrfx_gpiote_input_configure+0x148>)
}
   1f2ea:	b005      	add	sp, #20
   1f2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f2ee:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f2f2:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1f2f6:	f023 0303 	bic.w	r3, r3, #3
   1f2fa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f2fe:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1f302:	f041 0120 	orr.w	r1, r1, #32
   1f306:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1f30a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1f30e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f312:	0223      	lsls	r3, r4, #8
   1f314:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f318:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1f31c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1f320:	ea43 030e 	orr.w	r3, r3, lr
   1f324:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1f328:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1f32c:	e7d0      	b.n	1f2d0 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1f32e:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f330:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f334:	f7ff fef6 	bl	1f124 <release_handler>
    if (!handler)
   1f338:	2e00      	cmp	r6, #0
   1f33a:	d0d5      	beq.n	1f2e8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f33c:	4d11      	ldr	r5, [pc, #68]	; (1f384 <nrfx_gpiote_input_configure+0x140>)
   1f33e:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f342:	4296      	cmp	r6, r2
   1f344:	d101      	bne.n	1f34a <nrfx_gpiote_input_configure+0x106>
   1f346:	429f      	cmp	r7, r3
   1f348:	d019      	beq.n	1f37e <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f34a:	4811      	ldr	r0, [pc, #68]	; (1f390 <nrfx_gpiote_input_configure+0x14c>)
   1f34c:	f10d 010f 	add.w	r1, sp, #15
   1f350:	f7ff fc4e 	bl	1ebf0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f354:	4b0d      	ldr	r3, [pc, #52]	; (1f38c <nrfx_gpiote_input_configure+0x148>)
   1f356:	4298      	cmp	r0, r3
   1f358:	d1c7      	bne.n	1f2ea <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1f35a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1f35e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f362:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f366:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f368:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1f36c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f370:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f378:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1f37c:	e7b4      	b.n	1f2e8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f37e:	2200      	movs	r2, #0
   1f380:	e7ed      	b.n	1f35e <nrfx_gpiote_input_configure+0x11a>
   1f382:	bf00      	nop
   1f384:	2000869c 	.word	0x2000869c
   1f388:	0bad0004 	.word	0x0bad0004
   1f38c:	0bad0000 	.word	0x0bad0000
   1f390:	20008710 	.word	0x20008710

0001f394 <nrfx_gpiote_output_configure>:
{
   1f394:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f396:	4604      	mov	r4, r0
   1f398:	4615      	mov	r5, r2
   1f39a:	b085      	sub	sp, #20
    if (p_config)
   1f39c:	b321      	cbz	r1, 1f3e8 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1f39e:	f7ff fe99 	bl	1f0d4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f3a2:	b920      	cbnz	r0, 1f3ae <nrfx_gpiote_output_configure+0x1a>
   1f3a4:	4620      	mov	r0, r4
   1f3a6:	f7ff fe7f 	bl	1f0a8 <pin_in_use_by_te>
   1f3aa:	2800      	cmp	r0, #0
   1f3ac:	d161      	bne.n	1f472 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f3ae:	4620      	mov	r0, r4
   1f3b0:	f7ff fe84 	bl	1f0bc <pin_has_trigger>
   1f3b4:	b110      	cbz	r0, 1f3bc <nrfx_gpiote_output_configure+0x28>
   1f3b6:	784b      	ldrb	r3, [r1, #1]
   1f3b8:	2b01      	cmp	r3, #1
   1f3ba:	d05a      	beq.n	1f472 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f3bc:	2301      	movs	r3, #1
   1f3be:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f3c2:	2300      	movs	r3, #0
   1f3c4:	1c4a      	adds	r2, r1, #1
   1f3c6:	e9cd 1300 	strd	r1, r3, [sp]
   1f3ca:	4620      	mov	r0, r4
   1f3cc:	1c8b      	adds	r3, r1, #2
   1f3ce:	f10d 010f 	add.w	r1, sp, #15
   1f3d2:	f00f fb89 	bl	2eae8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f3d6:	4a28      	ldr	r2, [pc, #160]	; (1f478 <nrfx_gpiote_output_configure+0xe4>)
   1f3d8:	f104 0108 	add.w	r1, r4, #8
   1f3dc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f3e0:	f043 0303 	orr.w	r3, r3, #3
   1f3e4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1f3e8:	b915      	cbnz	r5, 1f3f0 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1f3ea:	4824      	ldr	r0, [pc, #144]	; (1f47c <nrfx_gpiote_output_configure+0xe8>)
}
   1f3ec:	b005      	add	sp, #20
   1f3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f3f0:	4620      	mov	r0, r4
   1f3f2:	f7ff fe6f 	bl	1f0d4 <pin_is_output>
        if (pin_is_input(pin))
   1f3f6:	2800      	cmp	r0, #0
   1f3f8:	d03b      	beq.n	1f472 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1f3fa:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1f3fe:	2300      	movs	r3, #0
   1f400:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f402:	4e1d      	ldr	r6, [pc, #116]	; (1f478 <nrfx_gpiote_output_configure+0xe4>)
   1f404:	f104 0708 	add.w	r7, r4, #8
   1f408:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f40c:	0089      	lsls	r1, r1, #2
   1f40e:	f020 0020 	bic.w	r0, r0, #32
   1f412:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f416:	04c0      	lsls	r0, r0, #19
   1f418:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1f41c:	0cc0      	lsrs	r0, r0, #19
   1f41e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f422:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f426:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f42a:	786a      	ldrb	r2, [r5, #1]
   1f42c:	2a00      	cmp	r2, #0
   1f42e:	d0dc      	beq.n	1f3ea <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f430:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1f434:	78ad      	ldrb	r5, [r5, #2]
   1f436:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1f43a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f43e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f442:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f446:	0223      	lsls	r3, r4, #8
   1f448:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f44c:	0412      	lsls	r2, r2, #16
   1f44e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f452:	ea43 030e 	orr.w	r3, r3, lr
   1f456:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f458:	052a      	lsls	r2, r5, #20
   1f45a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f45e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f462:	4313      	orrs	r3, r2
   1f464:	f040 0020 	orr.w	r0, r0, #32
   1f468:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f46c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f470:	e7bb      	b.n	1f3ea <nrfx_gpiote_output_configure+0x56>
{
   1f472:	4803      	ldr	r0, [pc, #12]	; (1f480 <nrfx_gpiote_output_configure+0xec>)
   1f474:	e7ba      	b.n	1f3ec <nrfx_gpiote_output_configure+0x58>
   1f476:	bf00      	nop
   1f478:	2000869c 	.word	0x2000869c
   1f47c:	0bad0000 	.word	0x0bad0000
   1f480:	0bad0004 	.word	0x0bad0004

0001f484 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f484:	4b01      	ldr	r3, [pc, #4]	; (1f48c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f486:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f48a:	4770      	bx	lr
   1f48c:	2000869c 	.word	0x2000869c

0001f490 <nrfx_gpiote_channel_get>:
{
   1f490:	4602      	mov	r2, r0
   1f492:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1f494:	b959      	cbnz	r1, 1f4ae <nrfx_gpiote_channel_get+0x1e>
   1f496:	490c      	ldr	r1, [pc, #48]	; (1f4c8 <nrfx_gpiote_channel_get+0x38>)
   1f498:	480c      	ldr	r0, [pc, #48]	; (1f4cc <nrfx_gpiote_channel_get+0x3c>)
   1f49a:	f240 2335 	movw	r3, #565	; 0x235
   1f49e:	4a0c      	ldr	r2, [pc, #48]	; (1f4d0 <nrfx_gpiote_channel_get+0x40>)
   1f4a0:	f00b f90b 	bl	2a6ba <assert_print>
   1f4a4:	f240 2135 	movw	r1, #565	; 0x235
   1f4a8:	4809      	ldr	r0, [pc, #36]	; (1f4d0 <nrfx_gpiote_channel_get+0x40>)
   1f4aa:	f00b f8ff 	bl	2a6ac <assert_post_action>
    if (pin_in_use_by_te(pin))
   1f4ae:	f7ff fdfb 	bl	1f0a8 <pin_in_use_by_te>
   1f4b2:	b138      	cbz	r0, 1f4c4 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f4b4:	4b07      	ldr	r3, [pc, #28]	; (1f4d4 <nrfx_gpiote_channel_get+0x44>)
   1f4b6:	3208      	adds	r2, #8
   1f4b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1f4bc:	4806      	ldr	r0, [pc, #24]	; (1f4d8 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f4be:	0b5b      	lsrs	r3, r3, #13
   1f4c0:	700b      	strb	r3, [r1, #0]
}
   1f4c2:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f4c4:	4805      	ldr	r0, [pc, #20]	; (1f4dc <nrfx_gpiote_channel_get+0x4c>)
   1f4c6:	e7fc      	b.n	1f4c2 <nrfx_gpiote_channel_get+0x32>
   1f4c8:	00037592 	.word	0x00037592
   1f4cc:	00032659 	.word	0x00032659
   1f4d0:	00037554 	.word	0x00037554
   1f4d4:	2000869c 	.word	0x2000869c
   1f4d8:	0bad0000 	.word	0x0bad0000
   1f4dc:	0bad0004 	.word	0x0bad0004

0001f4e0 <nrfx_gpiote_init>:
{
   1f4e0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f4e2:	4c0f      	ldr	r4, [pc, #60]	; (1f520 <nrfx_gpiote_init+0x40>)
   1f4e4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1f4e8:	b9bd      	cbnz	r5, 1f51a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f4ea:	2260      	movs	r2, #96	; 0x60
   1f4ec:	4629      	mov	r1, r5
   1f4ee:	f104 0010 	add.w	r0, r4, #16
   1f4f2:	f011 f876 	bl	305e2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f4f6:	202f      	movs	r0, #47	; 0x2f
   1f4f8:	f7f1 fa90 	bl	10a1c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f4fc:	4b09      	ldr	r3, [pc, #36]	; (1f524 <nrfx_gpiote_init+0x44>)
    return err_code;
   1f4fe:	480a      	ldr	r0, [pc, #40]	; (1f528 <nrfx_gpiote_init+0x48>)
   1f500:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1f504:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1f508:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f50c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f510:	2301      	movs	r3, #1
   1f512:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f516:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f518:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f51a:	4804      	ldr	r0, [pc, #16]	; (1f52c <nrfx_gpiote_init+0x4c>)
   1f51c:	e7fc      	b.n	1f518 <nrfx_gpiote_init+0x38>
   1f51e:	bf00      	nop
   1f520:	2000869c 	.word	0x2000869c
   1f524:	4002f000 	.word	0x4002f000
   1f528:	0bad0000 	.word	0x0bad0000
   1f52c:	0bad0005 	.word	0x0bad0005

0001f530 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f530:	4b03      	ldr	r3, [pc, #12]	; (1f540 <nrfx_gpiote_is_init+0x10>)
   1f532:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1f536:	3800      	subs	r0, #0
   1f538:	bf18      	it	ne
   1f53a:	2001      	movne	r0, #1
   1f53c:	4770      	bx	lr
   1f53e:	bf00      	nop
   1f540:	2000869c 	.word	0x2000869c

0001f544 <nrfx_gpiote_channel_free>:
{
   1f544:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f546:	4801      	ldr	r0, [pc, #4]	; (1f54c <nrfx_gpiote_channel_free+0x8>)
   1f548:	f7ff bb6e 	b.w	1ec28 <nrfx_flag32_free>
   1f54c:	2000870c 	.word	0x2000870c

0001f550 <nrfx_gpiote_channel_alloc>:
{
   1f550:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f552:	4801      	ldr	r0, [pc, #4]	; (1f558 <nrfx_gpiote_channel_alloc+0x8>)
   1f554:	f7ff bb4c 	b.w	1ebf0 <nrfx_flag32_alloc>
   1f558:	2000870c 	.word	0x2000870c

0001f55c <nrfx_gpiote_trigger_enable>:
{
   1f55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f55e:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1f560:	f7ff fdac 	bl	1f0bc <pin_has_trigger>
   1f564:	b958      	cbnz	r0, 1f57e <nrfx_gpiote_trigger_enable+0x22>
   1f566:	492b      	ldr	r1, [pc, #172]	; (1f614 <nrfx_gpiote_trigger_enable+0xb8>)
   1f568:	f240 33df 	movw	r3, #991	; 0x3df
   1f56c:	4a2a      	ldr	r2, [pc, #168]	; (1f618 <nrfx_gpiote_trigger_enable+0xbc>)
   1f56e:	482b      	ldr	r0, [pc, #172]	; (1f61c <nrfx_gpiote_trigger_enable+0xc0>)
   1f570:	f00b f8a3 	bl	2a6ba <assert_print>
   1f574:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1f578:	4827      	ldr	r0, [pc, #156]	; (1f618 <nrfx_gpiote_trigger_enable+0xbc>)
   1f57a:	f00b f897 	bl	2a6ac <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f57e:	4620      	mov	r0, r4
   1f580:	f7ff fd92 	bl	1f0a8 <pin_in_use_by_te>
   1f584:	4a26      	ldr	r2, [pc, #152]	; (1f620 <nrfx_gpiote_trigger_enable+0xc4>)
   1f586:	f104 0508 	add.w	r5, r4, #8
   1f58a:	b1e0      	cbz	r0, 1f5c6 <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1f58c:	4620      	mov	r0, r4
   1f58e:	f7ff fda1 	bl	1f0d4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f592:	b9c0      	cbnz	r0, 1f5c6 <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f594:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1f598:	4c22      	ldr	r4, [pc, #136]	; (1f624 <nrfx_gpiote_trigger_enable+0xc8>)
   1f59a:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f59c:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f59e:	50e0      	str	r0, [r4, r3]
   1f5a0:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f5a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f5a6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f5aa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1f5ae:	f040 0001 	orr.w	r0, r0, #1
   1f5b2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1f5b6:	b121      	cbz	r1, 1f5c2 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f5b8:	2301      	movs	r3, #1
   1f5ba:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1f5bc:	4a1a      	ldr	r2, [pc, #104]	; (1f628 <nrfx_gpiote_trigger_enable+0xcc>)
   1f5be:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f5c2:	b003      	add	sp, #12
   1f5c4:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1f5c6:	b949      	cbnz	r1, 1f5dc <nrfx_gpiote_trigger_enable+0x80>
   1f5c8:	4918      	ldr	r1, [pc, #96]	; (1f62c <nrfx_gpiote_trigger_enable+0xd0>)
   1f5ca:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1f5ce:	4a12      	ldr	r2, [pc, #72]	; (1f618 <nrfx_gpiote_trigger_enable+0xbc>)
   1f5d0:	4812      	ldr	r0, [pc, #72]	; (1f61c <nrfx_gpiote_trigger_enable+0xc0>)
   1f5d2:	f00b f872 	bl	2a6ba <assert_print>
   1f5d6:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1f5da:	e7cd      	b.n	1f578 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f5dc:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1f5e0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f5e4:	2b04      	cmp	r3, #4
   1f5e6:	d011      	beq.n	1f60c <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f5e8:	2b05      	cmp	r3, #5
   1f5ea:	d011      	beq.n	1f610 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f5ec:	a801      	add	r0, sp, #4
   1f5ee:	9401      	str	r4, [sp, #4]
   1f5f0:	f7ff fdf4 	bl	1f1dc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f5f4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f5f6:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f5f8:	40d9      	lsrs	r1, r3
   1f5fa:	f001 0101 	and.w	r1, r1, #1
   1f5fe:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f600:	4620      	mov	r0, r4
}
   1f602:	b003      	add	sp, #12
   1f604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f608:	f00f babb 	b.w	2eb82 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f60c:	2103      	movs	r1, #3
   1f60e:	e7f7      	b.n	1f600 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f610:	2102      	movs	r1, #2
   1f612:	e7f5      	b.n	1f600 <nrfx_gpiote_trigger_enable+0xa4>
   1f614:	0003759c 	.word	0x0003759c
   1f618:	00037554 	.word	0x00037554
   1f61c:	00032659 	.word	0x00032659
   1f620:	2000869c 	.word	0x2000869c
   1f624:	4002f100 	.word	0x4002f100
   1f628:	4002f000 	.word	0x4002f000
   1f62c:	000375b1 	.word	0x000375b1

0001f630 <nrfx_gpiote_trigger_disable>:
{
   1f630:	b508      	push	{r3, lr}
   1f632:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f634:	f7ff fd38 	bl	1f0a8 <pin_in_use_by_te>
   1f638:	b1c8      	cbz	r0, 1f66e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1f63a:	4610      	mov	r0, r2
   1f63c:	f7ff fd4a 	bl	1f0d4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f640:	b9a8      	cbnz	r0, 1f66e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f642:	4b0e      	ldr	r3, [pc, #56]	; (1f67c <nrfx_gpiote_trigger_disable+0x4c>)
   1f644:	3208      	adds	r2, #8
   1f646:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f64a:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f64c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f64e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1f650:	490b      	ldr	r1, [pc, #44]	; (1f680 <nrfx_gpiote_trigger_disable+0x50>)
   1f652:	009b      	lsls	r3, r3, #2
   1f654:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f658:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f65c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f660:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f664:	f022 0203 	bic.w	r2, r2, #3
   1f668:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f66c:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f66e:	2100      	movs	r1, #0
}
   1f670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f674:	4610      	mov	r0, r2
   1f676:	f00f ba84 	b.w	2eb82 <nrf_gpio_cfg_sense_set>
   1f67a:	bf00      	nop
   1f67c:	2000869c 	.word	0x2000869c
   1f680:	4002f000 	.word	0x4002f000

0001f684 <nrfx_gpiote_pin_uninit>:
{
   1f684:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f686:	4b10      	ldr	r3, [pc, #64]	; (1f6c8 <nrfx_gpiote_pin_uninit+0x44>)
   1f688:	f100 0208 	add.w	r2, r0, #8
   1f68c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1f690:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1f692:	07db      	lsls	r3, r3, #31
   1f694:	d516      	bpl.n	1f6c4 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1f696:	f7ff ffcb 	bl	1f630 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1f69a:	4620      	mov	r0, r4
   1f69c:	f7ff fd80 	bl	1f1a0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f6a0:	a801      	add	r0, sp, #4
   1f6a2:	9401      	str	r4, [sp, #4]
   1f6a4:	f7ff fd9a 	bl	1f1dc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f6a8:	9b01      	ldr	r3, [sp, #4]
   1f6aa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1f6ae:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1f6b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1f6b6:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1f6ba:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1f6be:	4803      	ldr	r0, [pc, #12]	; (1f6cc <nrfx_gpiote_pin_uninit+0x48>)
}
   1f6c0:	b002      	add	sp, #8
   1f6c2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f6c4:	4802      	ldr	r0, [pc, #8]	; (1f6d0 <nrfx_gpiote_pin_uninit+0x4c>)
   1f6c6:	e7fb      	b.n	1f6c0 <nrfx_gpiote_pin_uninit+0x3c>
   1f6c8:	2000869c 	.word	0x2000869c
   1f6cc:	0bad0000 	.word	0x0bad0000
   1f6d0:	0bad0004 	.word	0x0bad0004

0001f6d4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1f6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1f6d8:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1f6da:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f6dc:	4634      	mov	r4, r6
{
   1f6de:	4b64      	ldr	r3, [pc, #400]	; (1f870 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1f6e0:	4864      	ldr	r0, [pc, #400]	; (1f874 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f6e2:	4965      	ldr	r1, [pc, #404]	; (1f878 <nrfx_gpiote_irq_handler+0x1a4>)
{
   1f6e4:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f6e6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1f6e8:	b135      	cbz	r5, 1f6f8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1f6ea:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1f6ee:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f6f0:	bf1e      	ittt	ne
   1f6f2:	601c      	strne	r4, [r3, #0]
   1f6f4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1f6f6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f6f8:	3304      	adds	r3, #4
   1f6fa:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1f6fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f700:	d1f1      	bne.n	1f6e6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f702:	f8df a170 	ldr.w	sl, [pc, #368]	; 1f874 <nrfx_gpiote_irq_handler+0x1a0>
   1f706:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1f70a:	2b00      	cmp	r3, #0
   1f70c:	f000 8093 	beq.w	1f836 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1f710:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1f87c <nrfx_gpiote_irq_handler+0x1a8>
   1f714:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1f718:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f71a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1f71e:	4b58      	ldr	r3, [pc, #352]	; (1f880 <nrfx_gpiote_irq_handler+0x1ac>)
   1f720:	6a1a      	ldr	r2, [r3, #32]
   1f722:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f724:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f726:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1f72a:	f10d 0b10 	add.w	fp, sp, #16
   1f72e:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1f732:	9300      	str	r3, [sp, #0]
   1f734:	e04a      	b.n	1f7cc <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1f736:	fa94 f4a4 	rbit	r4, r4
   1f73a:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1f73e:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f740:	4a50      	ldr	r2, [pc, #320]	; (1f884 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1f742:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f744:	f104 0308 	add.w	r3, r4, #8
   1f748:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1f74c:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1f74e:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1f750:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1f754:	fa03 f101 	lsl.w	r1, r3, r1
   1f758:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1f75c:	08ba      	lsrs	r2, r7, #2
   1f75e:	ea23 0301 	bic.w	r3, r3, r1
   1f762:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f766:	a803      	add	r0, sp, #12
   1f768:	9201      	str	r2, [sp, #4]
   1f76a:	9403      	str	r4, [sp, #12]
   1f76c:	f7ff fd36 	bl	1f1dc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f770:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1f772:	9a01      	ldr	r2, [sp, #4]
   1f774:	3380      	adds	r3, #128	; 0x80
   1f776:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f77a:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1f77e:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f780:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f782:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1f786:	d52b      	bpl.n	1f7e0 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1f788:	4639      	mov	r1, r7
   1f78a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f78c:	b2dd      	uxtb	r5, r3
   1f78e:	f7ff fcab 	bl	1f0e8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f792:	a803      	add	r0, sp, #12
   1f794:	9403      	str	r4, [sp, #12]
   1f796:	f7ff fd21 	bl	1f1dc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f79a:	9b03      	ldr	r3, [sp, #12]
   1f79c:	3380      	adds	r3, #128	; 0x80
   1f79e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1f7a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f7a6:	429d      	cmp	r5, r3
   1f7a8:	d107      	bne.n	1f7ba <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f7aa:	2100      	movs	r1, #0
   1f7ac:	4620      	mov	r0, r4
   1f7ae:	f00f f9e8 	bl	2eb82 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1f7b2:	4629      	mov	r1, r5
   1f7b4:	4620      	mov	r0, r4
   1f7b6:	f00f f9e4 	bl	2eb82 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f7ba:	a803      	add	r0, sp, #12
   1f7bc:	9403      	str	r4, [sp, #12]
   1f7be:	f7ff fd0d 	bl	1f1dc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1f7c2:	2201      	movs	r2, #1
   1f7c4:	9b03      	ldr	r3, [sp, #12]
   1f7c6:	fa02 f303 	lsl.w	r3, r2, r3
   1f7ca:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1f7cc:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1f7d0:	2c00      	cmp	r4, #0
   1f7d2:	d1b0      	bne.n	1f736 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f7d4:	f1b9 0f00 	cmp.w	r9, #0
   1f7d8:	d11d      	bne.n	1f816 <nrfx_gpiote_irq_handler+0x142>
   1f7da:	f04f 0901 	mov.w	r9, #1
   1f7de:	e7a6      	b.n	1f72e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f7e0:	2b02      	cmp	r3, #2
   1f7e2:	d10c      	bne.n	1f7fe <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f7e4:	2103      	movs	r1, #3
   1f7e6:	4620      	mov	r0, r4
   1f7e8:	f00f f9cb 	bl	2eb82 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f7ec:	f005 0305 	and.w	r3, r5, #5
   1f7f0:	2b01      	cmp	r3, #1
   1f7f2:	d1e2      	bne.n	1f7ba <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1f7f4:	4639      	mov	r1, r7
   1f7f6:	4620      	mov	r0, r4
   1f7f8:	f7ff fc76 	bl	1f0e8 <call_handler>
   1f7fc:	e7dd      	b.n	1f7ba <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f7fe:	2102      	movs	r1, #2
   1f800:	4620      	mov	r0, r4
   1f802:	9301      	str	r3, [sp, #4]
   1f804:	f00f f9bd 	bl	2eb82 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f808:	2d03      	cmp	r5, #3
   1f80a:	d0f3      	beq.n	1f7f4 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f80c:	9b01      	ldr	r3, [sp, #4]
   1f80e:	2b03      	cmp	r3, #3
   1f810:	d1d3      	bne.n	1f7ba <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f812:	2d02      	cmp	r5, #2
   1f814:	e7ed      	b.n	1f7f2 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f816:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1f81a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1f81e:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1f822:	4917      	ldr	r1, [pc, #92]	; (1f880 <nrfx_gpiote_irq_handler+0x1ac>)
   1f824:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f826:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1f82a:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1f82c:	4313      	orrs	r3, r2
   1f82e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f830:	620a      	str	r2, [r1, #32]
   1f832:	f47f af78 	bne.w	1f726 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1f836:	2401      	movs	r4, #1
    while (mask)
   1f838:	b916      	cbnz	r6, 1f840 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1f83a:	b007      	add	sp, #28
   1f83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1f840:	fa96 f3a6 	rbit	r3, r6
   1f844:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1f848:	fa04 f203 	lsl.w	r2, r4, r3
   1f84c:	009b      	lsls	r3, r3, #2
   1f84e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f852:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f856:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1f85a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f85e:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1f862:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1f866:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f86a:	f7ff fc3d 	bl	1f0e8 <call_handler>
   1f86e:	e7e3      	b.n	1f838 <nrfx_gpiote_irq_handler+0x164>
   1f870:	4002f100 	.word	0x4002f100
   1f874:	4002f000 	.word	0x4002f000
   1f878:	4002f120 	.word	0x4002f120
   1f87c:	40842500 	.word	0x40842500
   1f880:	40842800 	.word	0x40842800
   1f884:	2000869c 	.word	0x2000869c

0001f888 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1f888:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f88a:	4c08      	ldr	r4, [pc, #32]	; (1f8ac <nrfx_ipc_init+0x24>)
{
   1f88c:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f88e:	7923      	ldrb	r3, [r4, #4]
{
   1f890:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f892:	b943      	cbnz	r3, 1f8a6 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1f894:	202a      	movs	r0, #42	; 0x2a
   1f896:	f7f1 f8c1 	bl	10a1c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f89a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1f89c:	4804      	ldr	r0, [pc, #16]	; (1f8b0 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f89e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1f8a0:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1f8a2:	60a5      	str	r5, [r4, #8]
}
   1f8a4:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1f8a6:	4803      	ldr	r0, [pc, #12]	; (1f8b4 <nrfx_ipc_init+0x2c>)
   1f8a8:	e7fc      	b.n	1f8a4 <nrfx_ipc_init+0x1c>
   1f8aa:	bf00      	nop
   1f8ac:	20021960 	.word	0x20021960
   1f8b0:	0bad0000 	.word	0x0bad0000
   1f8b4:	0bad000c 	.word	0x0bad000c

0001f8b8 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1f8b8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1f8ba:	b948      	cbnz	r0, 1f8d0 <nrfx_ipc_config_load+0x18>
   1f8bc:	4919      	ldr	r1, [pc, #100]	; (1f924 <nrfx_ipc_config_load+0x6c>)
   1f8be:	2345      	movs	r3, #69	; 0x45
   1f8c0:	4a19      	ldr	r2, [pc, #100]	; (1f928 <nrfx_ipc_config_load+0x70>)
   1f8c2:	481a      	ldr	r0, [pc, #104]	; (1f92c <nrfx_ipc_config_load+0x74>)
   1f8c4:	f00a fef9 	bl	2a6ba <assert_print>
   1f8c8:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f8ca:	4817      	ldr	r0, [pc, #92]	; (1f928 <nrfx_ipc_config_load+0x70>)
   1f8cc:	f00a feee 	bl	2a6ac <assert_post_action>
   1f8d0:	4b17      	ldr	r3, [pc, #92]	; (1f930 <nrfx_ipc_config_load+0x78>)
   1f8d2:	791b      	ldrb	r3, [r3, #4]
   1f8d4:	2b01      	cmp	r3, #1
   1f8d6:	d007      	beq.n	1f8e8 <nrfx_ipc_config_load+0x30>
   1f8d8:	4916      	ldr	r1, [pc, #88]	; (1f934 <nrfx_ipc_config_load+0x7c>)
   1f8da:	2346      	movs	r3, #70	; 0x46
   1f8dc:	4a12      	ldr	r2, [pc, #72]	; (1f928 <nrfx_ipc_config_load+0x70>)
   1f8de:	4813      	ldr	r0, [pc, #76]	; (1f92c <nrfx_ipc_config_load+0x74>)
   1f8e0:	f00a feeb 	bl	2a6ba <assert_print>
   1f8e4:	2146      	movs	r1, #70	; 0x46
   1f8e6:	e7f0      	b.n	1f8ca <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f8e8:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1f8ea:	4a13      	ldr	r2, [pc, #76]	; (1f938 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1f8ec:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1f8f0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f8f4:	3301      	adds	r3, #1
   1f8f6:	2b10      	cmp	r3, #16
   1f8f8:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1f8fc:	d1f6      	bne.n	1f8ec <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f8fe:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1f900:	4a0d      	ldr	r2, [pc, #52]	; (1f938 <nrfx_ipc_config_load+0x80>)
   1f902:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1f906:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1f90a:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f90e:	3301      	adds	r3, #1
   1f910:	2b10      	cmp	r3, #16
   1f912:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1f916:	d1f6      	bne.n	1f906 <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1f918:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1f91c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f920:	bd38      	pop	{r3, r4, r5, pc}
   1f922:	bf00      	nop
   1f924:	00037603 	.word	0x00037603
   1f928:	000375c8 	.word	0x000375c8
   1f92c:	00032659 	.word	0x00032659
   1f930:	20021960 	.word	0x20021960
   1f934:	0003760c 	.word	0x0003760c
   1f938:	4002a000 	.word	0x4002a000

0001f93c <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1f93c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f93e:	4b09      	ldr	r3, [pc, #36]	; (1f964 <nrfx_ipc_receive_event_enable+0x28>)
   1f940:	791b      	ldrb	r3, [r3, #4]
   1f942:	2b01      	cmp	r3, #1
   1f944:	d009      	beq.n	1f95a <nrfx_ipc_receive_event_enable+0x1e>
   1f946:	4908      	ldr	r1, [pc, #32]	; (1f968 <nrfx_ipc_receive_event_enable+0x2c>)
   1f948:	4808      	ldr	r0, [pc, #32]	; (1f96c <nrfx_ipc_receive_event_enable+0x30>)
   1f94a:	236b      	movs	r3, #107	; 0x6b
   1f94c:	4a08      	ldr	r2, [pc, #32]	; (1f970 <nrfx_ipc_receive_event_enable+0x34>)
   1f94e:	f00a feb4 	bl	2a6ba <assert_print>
   1f952:	216b      	movs	r1, #107	; 0x6b
   1f954:	4806      	ldr	r0, [pc, #24]	; (1f970 <nrfx_ipc_receive_event_enable+0x34>)
   1f956:	f00a fea9 	bl	2a6ac <assert_post_action>
   1f95a:	4a06      	ldr	r2, [pc, #24]	; (1f974 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1f95c:	4083      	lsls	r3, r0
   1f95e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f962:	bd08      	pop	{r3, pc}
   1f964:	20021960 	.word	0x20021960
   1f968:	0003760c 	.word	0x0003760c
   1f96c:	00032659 	.word	0x00032659
   1f970:	000375c8 	.word	0x000375c8
   1f974:	4002a000 	.word	0x4002a000

0001f978 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1f978:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f97a:	4b09      	ldr	r3, [pc, #36]	; (1f9a0 <nrfx_ipc_receive_event_disable+0x28>)
   1f97c:	791b      	ldrb	r3, [r3, #4]
   1f97e:	2b01      	cmp	r3, #1
   1f980:	d009      	beq.n	1f996 <nrfx_ipc_receive_event_disable+0x1e>
   1f982:	4908      	ldr	r1, [pc, #32]	; (1f9a4 <nrfx_ipc_receive_event_disable+0x2c>)
   1f984:	4808      	ldr	r0, [pc, #32]	; (1f9a8 <nrfx_ipc_receive_event_disable+0x30>)
   1f986:	2371      	movs	r3, #113	; 0x71
   1f988:	4a08      	ldr	r2, [pc, #32]	; (1f9ac <nrfx_ipc_receive_event_disable+0x34>)
   1f98a:	f00a fe96 	bl	2a6ba <assert_print>
   1f98e:	2171      	movs	r1, #113	; 0x71
   1f990:	4806      	ldr	r0, [pc, #24]	; (1f9ac <nrfx_ipc_receive_event_disable+0x34>)
   1f992:	f00a fe8b 	bl	2a6ac <assert_post_action>
    p_reg->INTENCLR = mask;
   1f996:	4a06      	ldr	r2, [pc, #24]	; (1f9b0 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1f998:	4083      	lsls	r3, r0
   1f99a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1f99e:	bd08      	pop	{r3, pc}
   1f9a0:	20021960 	.word	0x20021960
   1f9a4:	0003760c 	.word	0x0003760c
   1f9a8:	00032659 	.word	0x00032659
   1f9ac:	000375c8 	.word	0x000375c8
   1f9b0:	4002a000 	.word	0x4002a000

0001f9b4 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1f9b6:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9b8:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1f9ba:	4b12      	ldr	r3, [pc, #72]	; (1fa04 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1f9bc:	4d12      	ldr	r5, [pc, #72]	; (1fa08 <nrfx_ipc_irq_handler+0x54>)
   1f9be:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1f9c2:	b904      	cbnz	r4, 1f9c6 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1f9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1f9c6:	fa94 f0a4 	rbit	r0, r4
   1f9ca:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1f9ce:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1f9d2:	280f      	cmp	r0, #15
   1f9d4:	ea24 0403 	bic.w	r4, r4, r3
   1f9d8:	dd0b      	ble.n	1f9f2 <nrfx_ipc_irq_handler+0x3e>
   1f9da:	490c      	ldr	r1, [pc, #48]	; (1fa0c <nrfx_ipc_irq_handler+0x58>)
   1f9dc:	480c      	ldr	r0, [pc, #48]	; (1fa10 <nrfx_ipc_irq_handler+0x5c>)
   1f9de:	f240 13e7 	movw	r3, #487	; 0x1e7
   1f9e2:	4a0c      	ldr	r2, [pc, #48]	; (1fa14 <nrfx_ipc_irq_handler+0x60>)
   1f9e4:	f00a fe69 	bl	2a6ba <assert_print>
   1f9e8:	f240 11e7 	movw	r1, #487	; 0x1e7
   1f9ec:	4809      	ldr	r0, [pc, #36]	; (1fa14 <nrfx_ipc_irq_handler+0x60>)
   1f9ee:	f00a fe5d 	bl	2a6ac <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9f2:	4b09      	ldr	r3, [pc, #36]	; (1fa18 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1f9f4:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9f6:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1f9f8:	682b      	ldr	r3, [r5, #0]
   1f9fa:	2b00      	cmp	r3, #0
   1f9fc:	d0e1      	beq.n	1f9c2 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1f9fe:	68a9      	ldr	r1, [r5, #8]
   1fa00:	4798      	blx	r3
   1fa02:	e7de      	b.n	1f9c2 <nrfx_ipc_irq_handler+0xe>
   1fa04:	4002a000 	.word	0x4002a000
   1fa08:	20021960 	.word	0x20021960
   1fa0c:	00033512 	.word	0x00033512
   1fa10:	00032659 	.word	0x00032659
   1fa14:	000334e0 	.word	0x000334e0
   1fa18:	4002a100 	.word	0x4002a100

0001fa1c <nvmc_word_write>:
   1fa1c:	4a04      	ldr	r2, [pc, #16]	; (1fa30 <nvmc_word_write+0x14>)
   1fa1e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fa22:	07db      	lsls	r3, r3, #31
   1fa24:	d5fb      	bpl.n	1fa1e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1fa26:	6001      	str	r1, [r0, #0]
   1fa28:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1fa2c:	4770      	bx	lr
   1fa2e:	bf00      	nop
   1fa30:	40039000 	.word	0x40039000

0001fa34 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa34:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1fa38:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa3a:	d30b      	bcc.n	1fa54 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1fa3c:	4910      	ldr	r1, [pc, #64]	; (1fa80 <nrfx_nvmc_page_erase+0x4c>)
   1fa3e:	4811      	ldr	r0, [pc, #68]	; (1fa84 <nrfx_nvmc_page_erase+0x50>)
   1fa40:	f44f 7383 	mov.w	r3, #262	; 0x106
   1fa44:	4a10      	ldr	r2, [pc, #64]	; (1fa88 <nrfx_nvmc_page_erase+0x54>)
   1fa46:	f00a fe38 	bl	2a6ba <assert_print>
   1fa4a:	f44f 7183 	mov.w	r1, #262	; 0x106
   1fa4e:	480e      	ldr	r0, [pc, #56]	; (1fa88 <nrfx_nvmc_page_erase+0x54>)
   1fa50:	f00a fe2c 	bl	2a6ac <assert_post_action>
    return !(addr % flash_page_size_get());
   1fa54:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1fa58:	b97b      	cbnz	r3, 1fa7a <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1fa5a:	2202      	movs	r2, #2
   1fa5c:	4b0b      	ldr	r3, [pc, #44]	; (1fa8c <nrfx_nvmc_page_erase+0x58>)
   1fa5e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1fa62:	f04f 32ff 	mov.w	r2, #4294967295
   1fa66:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1fa68:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fa6c:	07d2      	lsls	r2, r2, #31
   1fa6e:	d5fb      	bpl.n	1fa68 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1fa70:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1fa72:	4807      	ldr	r0, [pc, #28]	; (1fa90 <nrfx_nvmc_page_erase+0x5c>)
   1fa74:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1fa78:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1fa7a:	4806      	ldr	r0, [pc, #24]	; (1fa94 <nrfx_nvmc_page_erase+0x60>)
   1fa7c:	e7fc      	b.n	1fa78 <nrfx_nvmc_page_erase+0x44>
   1fa7e:	bf00      	nop
   1fa80:	00037695 	.word	0x00037695
   1fa84:	00032659 	.word	0x00032659
   1fa88:	00037639 	.word	0x00037639
   1fa8c:	40039000 	.word	0x40039000
   1fa90:	0bad0000 	.word	0x0bad0000
   1fa94:	0bad000a 	.word	0x0bad000a

0001fa98 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa98:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1fa9c:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa9e:	d30b      	bcc.n	1fab8 <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1faa0:	4910      	ldr	r1, [pc, #64]	; (1fae4 <nrfx_nvmc_word_write+0x4c>)
   1faa2:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1faa6:	4a10      	ldr	r2, [pc, #64]	; (1fae8 <nrfx_nvmc_word_write+0x50>)
   1faa8:	4810      	ldr	r0, [pc, #64]	; (1faec <nrfx_nvmc_word_write+0x54>)
   1faaa:	f00a fe06 	bl	2a6ba <assert_print>
   1faae:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1fab2:	480d      	ldr	r0, [pc, #52]	; (1fae8 <nrfx_nvmc_word_write+0x50>)
   1fab4:	f00a fdfa 	bl	2a6ac <assert_post_action>
   1fab8:	f010 0403 	ands.w	r4, r0, #3
   1fabc:	d009      	beq.n	1fad2 <nrfx_nvmc_word_write+0x3a>
   1fabe:	490c      	ldr	r1, [pc, #48]	; (1faf0 <nrfx_nvmc_word_write+0x58>)
   1fac0:	f240 1395 	movw	r3, #405	; 0x195
   1fac4:	4a08      	ldr	r2, [pc, #32]	; (1fae8 <nrfx_nvmc_word_write+0x50>)
   1fac6:	4809      	ldr	r0, [pc, #36]	; (1faec <nrfx_nvmc_word_write+0x54>)
   1fac8:	f00a fdf7 	bl	2a6ba <assert_print>
   1facc:	f240 1195 	movw	r1, #405	; 0x195
   1fad0:	e7ef      	b.n	1fab2 <nrfx_nvmc_word_write+0x1a>
   1fad2:	2301      	movs	r3, #1
   1fad4:	4d07      	ldr	r5, [pc, #28]	; (1faf4 <nrfx_nvmc_word_write+0x5c>)
   1fad6:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1fada:	f7ff ff9f 	bl	1fa1c <nvmc_word_write>
   1fade:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1fae2:	bd38      	pop	{r3, r4, r5, pc}
   1fae4:	000376af 	.word	0x000376af
   1fae8:	00037639 	.word	0x00037639
   1faec:	00032659 	.word	0x00032659
   1faf0:	000376c9 	.word	0x000376c9
   1faf4:	40039000 	.word	0x40039000

0001faf8 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1faf8:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1fafa:	4d43      	ldr	r5, [pc, #268]	; (1fc08 <qspi_xfer+0x110>)
   1fafc:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1fb00:	b94c      	cbnz	r4, 1fb16 <qspi_xfer+0x1e>
   1fb02:	4942      	ldr	r1, [pc, #264]	; (1fc0c <qspi_xfer+0x114>)
   1fb04:	2368      	movs	r3, #104	; 0x68
   1fb06:	4a42      	ldr	r2, [pc, #264]	; (1fc10 <qspi_xfer+0x118>)
   1fb08:	4842      	ldr	r0, [pc, #264]	; (1fc14 <qspi_xfer+0x11c>)
   1fb0a:	f00a fdd6 	bl	2a6ba <assert_print>
   1fb0e:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1fb10:	483f      	ldr	r0, [pc, #252]	; (1fc10 <qspi_xfer+0x118>)
   1fb12:	f00a fdcb 	bl	2a6ac <assert_post_action>
   1fb16:	b938      	cbnz	r0, 1fb28 <qspi_xfer+0x30>
   1fb18:	493f      	ldr	r1, [pc, #252]	; (1fc18 <qspi_xfer+0x120>)
   1fb1a:	2369      	movs	r3, #105	; 0x69
   1fb1c:	4a3c      	ldr	r2, [pc, #240]	; (1fc10 <qspi_xfer+0x118>)
   1fb1e:	483d      	ldr	r0, [pc, #244]	; (1fc14 <qspi_xfer+0x11c>)
   1fb20:	f00a fdcb 	bl	2a6ba <assert_print>
   1fb24:	2169      	movs	r1, #105	; 0x69
   1fb26:	e7f3      	b.n	1fb10 <qspi_xfer+0x18>
   1fb28:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1fb2c:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1fb30:	d165      	bne.n	1fbfe <qspi_xfer+0x106>
   1fb32:	0786      	lsls	r6, r0, #30
   1fb34:	d163      	bne.n	1fbfe <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1fb36:	2c01      	cmp	r4, #1
   1fb38:	d001      	beq.n	1fb3e <qspi_xfer+0x46>
   1fb3a:	429c      	cmp	r4, r3
   1fb3c:	d161      	bne.n	1fc02 <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1fb3e:	682c      	ldr	r4, [r5, #0]
   1fb40:	bb04      	cbnz	r4, 1fb84 <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fb42:	2b02      	cmp	r3, #2
   1fb44:	4b35      	ldr	r3, [pc, #212]	; (1fc1c <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1fb46:	bf0b      	itete	eq
   1fb48:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1fb4c:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1fb50:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1fb54:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1fb58:	bf0b      	itete	eq
   1fb5a:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1fb5e:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1fb62:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1fb64:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fb66:	2100      	movs	r1, #0
   1fb68:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fb6c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1fb70:	2201      	movs	r2, #1
   1fb72:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1fb76:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fb78:	4a28      	ldr	r2, [pc, #160]	; (1fc1c <qspi_xfer+0x124>)
   1fb7a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1fb7e:	2b00      	cmp	r3, #0
   1fb80:	d0fb      	beq.n	1fb7a <qspi_xfer+0x82>
   1fb82:	e00d      	b.n	1fba0 <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1fb84:	68ae      	ldr	r6, [r5, #8]
   1fb86:	4c25      	ldr	r4, [pc, #148]	; (1fc1c <qspi_xfer+0x124>)
   1fb88:	b166      	cbz	r6, 1fba4 <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fb8a:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1fb8c:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1fb8e:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1fb90:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fb92:	d12d      	bne.n	1fbf0 <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1fb94:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1fb98:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1fb9c:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1fba0:	481f      	ldr	r0, [pc, #124]	; (1fc20 <qspi_xfer+0x128>)
}
   1fba2:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fba4:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1fba6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1fbaa:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1fbac:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1fbae:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1fbb0:	bf0c      	ite	eq
   1fbb2:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1fbb6:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fbba:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1fbbe:	bf0b      	itete	eq
   1fbc0:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1fbc4:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1fbc8:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1fbcc:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1fbd0:	bf08      	it	eq
   1fbd2:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fbd4:	4911      	ldr	r1, [pc, #68]	; (1fc1c <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1fbd6:	bf18      	it	ne
   1fbd8:	2304      	movne	r3, #4
   1fbda:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1fbde:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fbe0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fbe4:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1fbe8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fbec:	601a      	str	r2, [r3, #0]
}
   1fbee:	e7d7      	b.n	1fba0 <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1fbf0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1fbf4:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1fbf8:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1fbfc:	e7d0      	b.n	1fba0 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1fbfe:	4809      	ldr	r0, [pc, #36]	; (1fc24 <qspi_xfer+0x12c>)
   1fc00:	e7cf      	b.n	1fba2 <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1fc02:	4809      	ldr	r0, [pc, #36]	; (1fc28 <qspi_xfer+0x130>)
   1fc04:	e7cd      	b.n	1fba2 <qspi_xfer+0xaa>
   1fc06:	bf00      	nop
   1fc08:	2002196c 	.word	0x2002196c
   1fc0c:	0003772e 	.word	0x0003772e
   1fc10:	000376f2 	.word	0x000376f2
   1fc14:	00032659 	.word	0x00032659
   1fc18:	0003775a 	.word	0x0003775a
   1fc1c:	4002b000 	.word	0x4002b000
   1fc20:	0bad0000 	.word	0x0bad0000
   1fc24:	0bad000a 	.word	0x0bad000a
   1fc28:	0bad000b 	.word	0x0bad000b

0001fc2c <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1fc2c:	b538      	push	{r3, r4, r5, lr}
   1fc2e:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fc30:	4d06      	ldr	r5, [pc, #24]	; (1fc4c <qspi_ready_wait+0x20>)
   1fc32:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1fc36:	b933      	cbnz	r3, 1fc46 <qspi_ready_wait+0x1a>
   1fc38:	200a      	movs	r0, #10
   1fc3a:	f00e ff37 	bl	2eaac <nrfx_busy_wait>
   1fc3e:	3c01      	subs	r4, #1
   1fc40:	d1f7      	bne.n	1fc32 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1fc42:	4803      	ldr	r0, [pc, #12]	; (1fc50 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1fc44:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1fc46:	4803      	ldr	r0, [pc, #12]	; (1fc54 <qspi_ready_wait+0x28>)
   1fc48:	e7fc      	b.n	1fc44 <qspi_ready_wait+0x18>
   1fc4a:	bf00      	nop
   1fc4c:	4002b000 	.word	0x4002b000
   1fc50:	0bad0007 	.word	0x0bad0007
   1fc54:	0bad0000 	.word	0x0bad0000

0001fc58 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1fc58:	4b08      	ldr	r3, [pc, #32]	; (1fc7c <qspi_event_xfer_handle.constprop.0+0x24>)
   1fc5a:	689a      	ldr	r2, [r3, #8]
   1fc5c:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1fc5e:	691a      	ldr	r2, [r3, #16]
   1fc60:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1fc62:	699a      	ldr	r2, [r3, #24]
   1fc64:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1fc66:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1fc68:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1fc6a:	b132      	cbz	r2, 1fc7a <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1fc6c:	695a      	ldr	r2, [r3, #20]
   1fc6e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1fc70:	69da      	ldr	r2, [r3, #28]
   1fc72:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1fc74:	2200      	movs	r2, #0
   1fc76:	60da      	str	r2, [r3, #12]
   1fc78:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1fc7a:	4770      	bx	lr
   1fc7c:	2002196c 	.word	0x2002196c

0001fc80 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1fc80:	b508      	push	{r3, lr}
    switch (port)
   1fc82:	0943      	lsrs	r3, r0, #5
   1fc84:	d00d      	beq.n	1fca2 <nrf_gpio_cfg.constprop.0+0x22>
   1fc86:	2b01      	cmp	r3, #1
   1fc88:	d01e      	beq.n	1fcc8 <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc8a:	4914      	ldr	r1, [pc, #80]	; (1fcdc <nrf_gpio_cfg.constprop.0+0x5c>)
   1fc8c:	4814      	ldr	r0, [pc, #80]	; (1fce0 <nrf_gpio_cfg.constprop.0+0x60>)
   1fc8e:	f240 2347 	movw	r3, #583	; 0x247
   1fc92:	4a14      	ldr	r2, [pc, #80]	; (1fce4 <nrf_gpio_cfg.constprop.0+0x64>)
   1fc94:	f00a fd11 	bl	2a6ba <assert_print>
   1fc98:	f240 2147 	movw	r1, #583	; 0x247
   1fc9c:	4811      	ldr	r0, [pc, #68]	; (1fce4 <nrf_gpio_cfg.constprop.0+0x64>)
   1fc9e:	f00a fd05 	bl	2a6ac <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1fca2:	f04f 33ff 	mov.w	r3, #4294967295
   1fca6:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fca8:	07da      	lsls	r2, r3, #31
   1fcaa:	d5ee      	bpl.n	1fc8a <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1fcac:	4a0e      	ldr	r2, [pc, #56]	; (1fce8 <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1fcae:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1fcb2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1fcb6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1fcba:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1fcbe:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1fcc2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1fcc6:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1fcc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1fccc:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1fcd0:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fcd2:	07db      	lsls	r3, r3, #31
   1fcd4:	d5d9      	bpl.n	1fc8a <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1fcd6:	4a05      	ldr	r2, [pc, #20]	; (1fcec <nrf_gpio_cfg.constprop.0+0x6c>)
   1fcd8:	e7e9      	b.n	1fcae <nrf_gpio_cfg.constprop.0+0x2e>
   1fcda:	bf00      	nop
   1fcdc:	00036c34 	.word	0x00036c34
   1fce0:	00032659 	.word	0x00032659
   1fce4:	00036c01 	.word	0x00036c01
   1fce8:	40842500 	.word	0x40842500
   1fcec:	40842800 	.word	0x40842800

0001fcf0 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1fcf0:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1fcf2:	4b0e      	ldr	r3, [pc, #56]	; (1fd2c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1fcf4:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1fcf6:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1fcfa:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1fcfe:	2807      	cmp	r0, #7
   1fd00:	d813      	bhi.n	1fd2a <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1fd02:	e8df f000 	tbb	[pc, r0]
   1fd06:	0f11      	.short	0x0f11
   1fd08:	080a0b0d 	.word	0x080a0b0d
   1fd0c:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1fd0e:	0e10      	lsrs	r0, r2, #24
   1fd10:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1fd12:	0c10      	lsrs	r0, r2, #16
   1fd14:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1fd16:	0a10      	lsrs	r0, r2, #8
   1fd18:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1fd1a:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1fd1c:	0e1a      	lsrs	r2, r3, #24
   1fd1e:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1fd20:	0c1a      	lsrs	r2, r3, #16
   1fd22:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1fd24:	0a1a      	lsrs	r2, r3, #8
   1fd26:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1fd28:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1fd2a:	bd10      	pop	{r4, pc}
   1fd2c:	4002b000 	.word	0x4002b000

0001fd30 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1fd30:	3802      	subs	r0, #2
   1fd32:	2807      	cmp	r0, #7
   1fd34:	d81f      	bhi.n	1fd76 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1fd36:	e8df f000 	tbb	[pc, r0]
   1fd3a:	2729      	.short	0x2729
   1fd3c:	21231125 	.word	0x21231125
   1fd40:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1fd42:	79cb      	ldrb	r3, [r1, #7]
   1fd44:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1fd46:	798a      	ldrb	r2, [r1, #6]
   1fd48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1fd4c:	794a      	ldrb	r2, [r1, #5]
   1fd4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1fd52:	790a      	ldrb	r2, [r1, #4]
   1fd54:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1fd56:	4a0e      	ldr	r2, [pc, #56]	; (1fd90 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1fd58:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1fd5c:	78cb      	ldrb	r3, [r1, #3]
   1fd5e:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1fd60:	788a      	ldrb	r2, [r1, #2]
   1fd62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1fd66:	784a      	ldrb	r2, [r1, #1]
   1fd68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1fd6c:	780a      	ldrb	r2, [r1, #0]
   1fd6e:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1fd70:	4a07      	ldr	r2, [pc, #28]	; (1fd90 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1fd72:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1fd76:	4770      	bx	lr
    switch (length)
   1fd78:	2300      	movs	r3, #0
   1fd7a:	e7e4      	b.n	1fd46 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1fd7c:	2300      	movs	r3, #0
   1fd7e:	e7e5      	b.n	1fd4c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1fd80:	2300      	movs	r3, #0
   1fd82:	e7e6      	b.n	1fd52 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1fd84:	2300      	movs	r3, #0
   1fd86:	e7eb      	b.n	1fd60 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1fd88:	2300      	movs	r3, #0
   1fd8a:	e7ec      	b.n	1fd66 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1fd8c:	2300      	movs	r3, #0
   1fd8e:	e7ed      	b.n	1fd6c <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1fd90:	4002b000 	.word	0x4002b000

0001fd94 <nrfx_qspi_init>:
{
   1fd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd96:	460d      	mov	r5, r1
   1fd98:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1fd9a:	4604      	mov	r4, r0
   1fd9c:	b958      	cbnz	r0, 1fdb6 <nrfx_qspi_init+0x22>
   1fd9e:	496e      	ldr	r1, [pc, #440]	; (1ff58 <nrfx_qspi_init+0x1c4>)
   1fda0:	486e      	ldr	r0, [pc, #440]	; (1ff5c <nrfx_qspi_init+0x1c8>)
   1fda2:	f44f 7388 	mov.w	r3, #272	; 0x110
   1fda6:	4a6e      	ldr	r2, [pc, #440]	; (1ff60 <nrfx_qspi_init+0x1cc>)
   1fda8:	f00a fc87 	bl	2a6ba <assert_print>
   1fdac:	f44f 7188 	mov.w	r1, #272	; 0x110
   1fdb0:	486b      	ldr	r0, [pc, #428]	; (1ff60 <nrfx_qspi_init+0x1cc>)
   1fdb2:	f00a fc7b 	bl	2a6ac <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1fdb6:	4f6b      	ldr	r7, [pc, #428]	; (1ff64 <nrfx_qspi_init+0x1d0>)
   1fdb8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1fdbc:	2b00      	cmp	r3, #0
   1fdbe:	f040 80c6 	bne.w	1ff4e <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1fdc2:	7cc2      	ldrb	r2, [r0, #19]
   1fdc4:	b112      	cbz	r2, 1fdcc <nrfx_qspi_init+0x38>
   1fdc6:	7d03      	ldrb	r3, [r0, #20]
   1fdc8:	2b00      	cmp	r3, #0
   1fdca:	d170      	bne.n	1feae <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1fdcc:	7920      	ldrb	r0, [r4, #4]
   1fdce:	28ff      	cmp	r0, #255	; 0xff
   1fdd0:	f000 80bf 	beq.w	1ff52 <nrfx_qspi_init+0x1be>
   1fdd4:	7963      	ldrb	r3, [r4, #5]
   1fdd6:	2bff      	cmp	r3, #255	; 0xff
   1fdd8:	f000 80bb 	beq.w	1ff52 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1fddc:	79a3      	ldrb	r3, [r4, #6]
   1fdde:	2bff      	cmp	r3, #255	; 0xff
   1fde0:	f000 80b7 	beq.w	1ff52 <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1fde4:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1fde6:	29ff      	cmp	r1, #255	; 0xff
   1fde8:	f000 80b3 	beq.w	1ff52 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1fdec:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1fdee:	f8df c178 	ldr.w	ip, [pc, #376]	; 1ff68 <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1fdf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1fdf6:	4563      	cmp	r3, ip
   1fdf8:	f040 80ab 	bne.w	1ff52 <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1fdfc:	290e      	cmp	r1, #14
   1fdfe:	f040 80a8 	bne.w	1ff52 <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fe02:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1fe04:	2bff      	cmp	r3, #255	; 0xff
   1fe06:	d002      	beq.n	1fe0e <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fe08:	2b0f      	cmp	r3, #15
   1fe0a:	f040 80a2 	bne.w	1ff52 <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fe0e:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1fe10:	2bff      	cmp	r3, #255	; 0xff
   1fe12:	d002      	beq.n	1fe1a <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fe14:	2b10      	cmp	r3, #16
   1fe16:	f040 809c 	bne.w	1ff52 <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1fe1a:	b9d2      	cbnz	r2, 1fe52 <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1fe1c:	2103      	movs	r1, #3
   1fe1e:	f7ff ff2f 	bl	1fc80 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1fe22:	2103      	movs	r1, #3
   1fe24:	7960      	ldrb	r0, [r4, #5]
   1fe26:	f7ff ff2b 	bl	1fc80 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1fe2a:	2103      	movs	r1, #3
   1fe2c:	79a0      	ldrb	r0, [r4, #6]
   1fe2e:	f7ff ff27 	bl	1fc80 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1fe32:	79e0      	ldrb	r0, [r4, #7]
   1fe34:	2103      	movs	r1, #3
   1fe36:	f7ff ff23 	bl	1fc80 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1fe3a:	7a20      	ldrb	r0, [r4, #8]
   1fe3c:	28ff      	cmp	r0, #255	; 0xff
   1fe3e:	d002      	beq.n	1fe46 <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1fe40:	2103      	movs	r1, #3
   1fe42:	f7ff ff1d 	bl	1fc80 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1fe46:	7a60      	ldrb	r0, [r4, #9]
   1fe48:	28ff      	cmp	r0, #255	; 0xff
   1fe4a:	d002      	beq.n	1fe52 <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1fe4c:	2103      	movs	r1, #3
   1fe4e:	f7ff ff17 	bl	1fc80 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1fe52:	7d23      	ldrb	r3, [r4, #20]
   1fe54:	bb5b      	cbnz	r3, 1feae <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1fe56:	7923      	ldrb	r3, [r4, #4]
   1fe58:	2bff      	cmp	r3, #255	; 0xff
   1fe5a:	bf14      	ite	ne
   1fe5c:	461a      	movne	r2, r3
   1fe5e:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe62:	4b42      	ldr	r3, [pc, #264]	; (1ff6c <nrfx_qspi_init+0x1d8>)
   1fe64:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1fe68:	7962      	ldrb	r2, [r4, #5]
   1fe6a:	2aff      	cmp	r2, #255	; 0xff
   1fe6c:	bf08      	it	eq
   1fe6e:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe72:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1fe76:	79a2      	ldrb	r2, [r4, #6]
   1fe78:	2aff      	cmp	r2, #255	; 0xff
   1fe7a:	bf08      	it	eq
   1fe7c:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe80:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1fe84:	79e2      	ldrb	r2, [r4, #7]
   1fe86:	2aff      	cmp	r2, #255	; 0xff
   1fe88:	bf08      	it	eq
   1fe8a:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe8e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1fe92:	7a22      	ldrb	r2, [r4, #8]
   1fe94:	2aff      	cmp	r2, #255	; 0xff
   1fe96:	bf08      	it	eq
   1fe98:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe9c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1fea0:	7a62      	ldrb	r2, [r4, #9]
   1fea2:	2aff      	cmp	r2, #255	; 0xff
   1fea4:	bf08      	it	eq
   1fea6:	f04f 32ff 	moveq.w	r2, #4294967295
   1feaa:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1feae:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1feb0:	4a2e      	ldr	r2, [pc, #184]	; (1ff6c <nrfx_qspi_init+0x1d8>)
   1feb2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1feb6:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1feb8:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1feba:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1febc:	019b      	lsls	r3, r3, #6
   1febe:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1fec2:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1fec4:	7b61      	ldrb	r1, [r4, #13]
   1fec6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1feca:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1fece:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1fed0:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1fed4:	bbb1      	cbnz	r1, 1ff44 <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1fed6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1feda:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1fede:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1fee2:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1fee6:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1feea:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1feec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1fef0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1fef4:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1fef6:	7be1      	ldrb	r1, [r4, #15]
   1fef8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1fefc:	7c21      	ldrb	r1, [r4, #16]
   1fefe:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1ff02:	7c61      	ldrb	r1, [r4, #17]
   1ff04:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1ff08:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ff0c:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1ff0e:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ff12:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1ff16:	2301      	movs	r3, #1
   1ff18:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1ff1c:	b115      	cbz	r5, 1ff24 <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1ff1e:	202b      	movs	r0, #43	; 0x2b
   1ff20:	f7f0 fd7c 	bl	10a1c <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1ff24:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ff26:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1ff28:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1ff2c:	4b0f      	ldr	r3, [pc, #60]	; (1ff6c <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ff2e:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1ff32:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff36:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff3a:	601a      	str	r2, [r3, #0]
}
   1ff3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1ff40:	f7ff be74 	b.w	1fc2c <qspi_ready_wait>
        regval &= ~(1 << 17);
   1ff44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1ff48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ff4c:	e7c5      	b.n	1feda <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1ff4e:	4808      	ldr	r0, [pc, #32]	; (1ff70 <nrfx_qspi_init+0x1dc>)
}
   1ff50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ff52:	4808      	ldr	r0, [pc, #32]	; (1ff74 <nrfx_qspi_init+0x1e0>)
   1ff54:	e7fc      	b.n	1ff50 <nrfx_qspi_init+0x1bc>
   1ff56:	bf00      	nop
   1ff58:	00037603 	.word	0x00037603
   1ff5c:	00032659 	.word	0x00032659
   1ff60:	000376f2 	.word	0x000376f2
   1ff64:	2002196c 	.word	0x2002196c
   1ff68:	000d1211 	.word	0x000d1211
   1ff6c:	4002b000 	.word	0x4002b000
   1ff70:	0bad0005 	.word	0x0bad0005
   1ff74:	0bad0004 	.word	0x0bad0004

0001ff78 <nrfx_qspi_cinstr_xfer>:
{
   1ff78:	b570      	push	{r4, r5, r6, lr}
   1ff7a:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ff7c:	4a26      	ldr	r2, [pc, #152]	; (20018 <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1ff7e:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ff80:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1ff84:	b95a      	cbnz	r2, 1ff9e <nrfx_qspi_cinstr_xfer+0x26>
   1ff86:	4925      	ldr	r1, [pc, #148]	; (2001c <nrfx_qspi_cinstr_xfer+0xa4>)
   1ff88:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1ff8c:	4a24      	ldr	r2, [pc, #144]	; (20020 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ff8e:	4825      	ldr	r0, [pc, #148]	; (20024 <nrfx_qspi_cinstr_xfer+0xac>)
   1ff90:	f00a fb93 	bl	2a6ba <assert_print>
   1ff94:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1ff98:	4821      	ldr	r0, [pc, #132]	; (20020 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ff9a:	f00a fb87 	bl	2a6ac <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1ff9e:	2a01      	cmp	r2, #1
   1ffa0:	d137      	bne.n	20012 <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ffa2:	2200      	movs	r2, #0
   1ffa4:	4e20      	ldr	r6, [pc, #128]	; (20028 <nrfx_qspi_cinstr_xfer+0xb0>)
   1ffa6:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1ffaa:	b111      	cbz	r1, 1ffb2 <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1ffac:	7840      	ldrb	r0, [r0, #1]
   1ffae:	f7ff febf 	bl	1fd30 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1ffb2:	2301      	movs	r3, #1
   1ffb4:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ffb8:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ffba:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ffbc:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ffbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1ffc2:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ffc4:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1ffc6:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ffc8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1ffcc:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1ffce:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1ffd2:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1ffd4:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1ffd8:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1ffdc:	f7ff fe26 	bl	1fc2c <qspi_ready_wait>
   1ffe0:	4b12      	ldr	r3, [pc, #72]	; (2002c <nrfx_qspi_cinstr_xfer+0xb4>)
   1ffe2:	4298      	cmp	r0, r3
   1ffe4:	d10b      	bne.n	1fffe <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1ffe6:	792b      	ldrb	r3, [r5, #4]
   1ffe8:	b993      	cbnz	r3, 20010 <nrfx_qspi_cinstr_xfer+0x98>
   1ffea:	4911      	ldr	r1, [pc, #68]	; (20030 <nrfx_qspi_cinstr_xfer+0xb8>)
   1ffec:	f240 136b 	movw	r3, #363	; 0x16b
   1fff0:	4a0b      	ldr	r2, [pc, #44]	; (20020 <nrfx_qspi_cinstr_xfer+0xa8>)
   1fff2:	480c      	ldr	r0, [pc, #48]	; (20024 <nrfx_qspi_cinstr_xfer+0xac>)
   1fff4:	f00a fb61 	bl	2a6ba <assert_print>
   1fff8:	f240 116b 	movw	r1, #363	; 0x16b
   1fffc:	e7cc      	b.n	1ff98 <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fffe:	2300      	movs	r3, #0
   20000:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   20004:	b11c      	cbz	r4, 2000e <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   20006:	4621      	mov	r1, r4
   20008:	7868      	ldrb	r0, [r5, #1]
   2000a:	f7ff fe71 	bl	1fcf0 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   2000e:	4809      	ldr	r0, [pc, #36]	; (20034 <nrfx_qspi_cinstr_xfer+0xbc>)
}
   20010:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   20012:	4809      	ldr	r0, [pc, #36]	; (20038 <nrfx_qspi_cinstr_xfer+0xc0>)
   20014:	e7fc      	b.n	20010 <nrfx_qspi_cinstr_xfer+0x98>
   20016:	bf00      	nop
   20018:	2002196c 	.word	0x2002196c
   2001c:	0003772e 	.word	0x0003772e
   20020:	000376f2 	.word	0x000376f2
   20024:	00032659 	.word	0x00032659
   20028:	4002b000 	.word	0x4002b000
   2002c:	0bad0007 	.word	0x0bad0007
   20030:	00037772 	.word	0x00037772
   20034:	0bad0000 	.word	0x0bad0000
   20038:	0bad000b 	.word	0x0bad000b

0002003c <nrfx_qspi_mem_busy_check>:
{
   2003c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   2003e:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   20040:	4a0c      	ldr	r2, [pc, #48]	; (20074 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   20042:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   20044:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   20046:	f10d 0207 	add.w	r2, sp, #7
   2004a:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   2004c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   20050:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   20054:	f7ff ff90 	bl	1ff78 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   20058:	4b07      	ldr	r3, [pc, #28]	; (20078 <nrfx_qspi_mem_busy_check+0x3c>)
   2005a:	4298      	cmp	r0, r3
   2005c:	d106      	bne.n	2006c <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   2005e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   20062:	f013 0f01 	tst.w	r3, #1
   20066:	4b05      	ldr	r3, [pc, #20]	; (2007c <nrfx_qspi_mem_busy_check+0x40>)
   20068:	bf18      	it	ne
   2006a:	4618      	movne	r0, r3
}
   2006c:	b005      	add	sp, #20
   2006e:	f85d fb04 	ldr.w	pc, [sp], #4
   20072:	bf00      	nop
   20074:	01000205 	.word	0x01000205
   20078:	0bad0000 	.word	0x0bad0000
   2007c:	0bad000b 	.word	0x0bad000b

00020080 <nrfx_qspi_uninit>:
{
   20080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   20084:	4e29      	ldr	r6, [pc, #164]	; (2012c <nrfx_qspi_uninit+0xac>)
   20086:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   2008a:	b95b      	cbnz	r3, 200a4 <nrfx_qspi_uninit+0x24>
   2008c:	4928      	ldr	r1, [pc, #160]	; (20130 <nrfx_qspi_uninit+0xb0>)
   2008e:	4829      	ldr	r0, [pc, #164]	; (20134 <nrfx_qspi_uninit+0xb4>)
   20090:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   20094:	4a28      	ldr	r2, [pc, #160]	; (20138 <nrfx_qspi_uninit+0xb8>)
   20096:	f00a fb10 	bl	2a6ba <assert_print>
   2009a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   2009e:	4826      	ldr	r0, [pc, #152]	; (20138 <nrfx_qspi_uninit+0xb8>)
   200a0:	f00a fb04 	bl	2a6ac <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   200a4:	202b      	movs	r0, #43	; 0x2b
   200a6:	f7f0 fcc7 	bl	10a38 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   200aa:	4b24      	ldr	r3, [pc, #144]	; (2013c <nrfx_qspi_uninit+0xbc>)
   200ac:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   200b0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   200b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   200b8:	bf04      	itt	eq
   200ba:	4a21      	ldreq	r2, [pc, #132]	; (20140 <nrfx_qspi_uninit+0xc0>)
   200bc:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   200c0:	2201      	movs	r2, #1
   200c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   200c6:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   200c8:	2200      	movs	r2, #0
   200ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   200ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   200d2:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   200d6:	bb22      	cbnz	r2, 20122 <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   200d8:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   200dc:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   200e0:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   200e2:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   200e6:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   200ea:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   200ee:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   200f2:	f00e fd5e 	bl	2ebb2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   200f6:	fa5f f089 	uxtb.w	r0, r9
   200fa:	f00e fd5a 	bl	2ebb2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   200fe:	fa5f f088 	uxtb.w	r0, r8
   20102:	f00e fd56 	bl	2ebb2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   20106:	b2f8      	uxtb	r0, r7
   20108:	f00e fd53 	bl	2ebb2 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2010c:	b2e8      	uxtb	r0, r5
   2010e:	28ff      	cmp	r0, #255	; 0xff
   20110:	b2e4      	uxtb	r4, r4
   20112:	d001      	beq.n	20118 <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   20114:	f00e fd4d 	bl	2ebb2 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   20118:	2cff      	cmp	r4, #255	; 0xff
   2011a:	d002      	beq.n	20122 <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   2011c:	4620      	mov	r0, r4
   2011e:	f00e fd48 	bl	2ebb2 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   20122:	2300      	movs	r3, #0
   20124:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   20128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2012c:	2002196c 	.word	0x2002196c
   20130:	0003772e 	.word	0x0003772e
   20134:	00032659 	.word	0x00032659
   20138:	000376f2 	.word	0x000376f2
   2013c:	4002b000 	.word	0x4002b000
   20140:	00030100 	.word	0x00030100

00020144 <nrfx_qspi_erase>:
{
   20144:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   20146:	4a1a      	ldr	r2, [pc, #104]	; (201b0 <nrfx_qspi_erase+0x6c>)
   20148:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   2014c:	b95b      	cbnz	r3, 20166 <nrfx_qspi_erase+0x22>
   2014e:	4919      	ldr	r1, [pc, #100]	; (201b4 <nrfx_qspi_erase+0x70>)
   20150:	4819      	ldr	r0, [pc, #100]	; (201b8 <nrfx_qspi_erase+0x74>)
   20152:	f44f 730a 	mov.w	r3, #552	; 0x228
   20156:	4a19      	ldr	r2, [pc, #100]	; (201bc <nrfx_qspi_erase+0x78>)
   20158:	f00a faaf 	bl	2a6ba <assert_print>
   2015c:	f44f 710a 	mov.w	r1, #552	; 0x228
   20160:	4816      	ldr	r0, [pc, #88]	; (201bc <nrfx_qspi_erase+0x78>)
   20162:	f00a faa3 	bl	2a6ac <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   20166:	078c      	lsls	r4, r1, #30
   20168:	d11e      	bne.n	201a8 <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   2016a:	6814      	ldr	r4, [r2, #0]
   2016c:	b10c      	cbz	r4, 20172 <nrfx_qspi_erase+0x2e>
   2016e:	2b01      	cmp	r3, #1
   20170:	d11c      	bne.n	201ac <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   20172:	2304      	movs	r3, #4
   20174:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   20178:	4b11      	ldr	r3, [pc, #68]	; (201c0 <nrfx_qspi_erase+0x7c>)
   2017a:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2017e:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   20180:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20184:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20188:	2101      	movs	r1, #1
   2018a:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   2018c:	6810      	ldr	r0, [r2, #0]
   2018e:	b940      	cbnz	r0, 201a2 <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20190:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   20194:	2900      	cmp	r1, #0
   20196:	d0fb      	beq.n	20190 <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   20198:	2301      	movs	r3, #1
   2019a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   2019e:	4809      	ldr	r0, [pc, #36]	; (201c4 <nrfx_qspi_erase+0x80>)
}
   201a0:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   201a2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   201a6:	e7fa      	b.n	2019e <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   201a8:	4807      	ldr	r0, [pc, #28]	; (201c8 <nrfx_qspi_erase+0x84>)
   201aa:	e7f9      	b.n	201a0 <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   201ac:	4807      	ldr	r0, [pc, #28]	; (201cc <nrfx_qspi_erase+0x88>)
   201ae:	e7f7      	b.n	201a0 <nrfx_qspi_erase+0x5c>
   201b0:	2002196c 	.word	0x2002196c
   201b4:	0003772e 	.word	0x0003772e
   201b8:	00032659 	.word	0x00032659
   201bc:	000376f2 	.word	0x000376f2
   201c0:	4002b000 	.word	0x4002b000
   201c4:	0bad0000 	.word	0x0bad0000
   201c8:	0bad000a 	.word	0x0bad000a
   201cc:	0bad000b 	.word	0x0bad000b

000201d0 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   201d0:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   201d2:	4b17      	ldr	r3, [pc, #92]	; (20230 <nrfx_qspi_irq_handler+0x60>)
   201d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   201d8:	b1e2      	cbz	r2, 20214 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201da:	2200      	movs	r2, #0
    switch (m_cb.state)
   201dc:	4c15      	ldr	r4, [pc, #84]	; (20234 <nrfx_qspi_irq_handler+0x64>)
   201de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   201e2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   201e6:	2a03      	cmp	r2, #3
   201e8:	d015      	beq.n	20216 <nrfx_qspi_irq_handler+0x46>
   201ea:	2a04      	cmp	r2, #4
   201ec:	d015      	beq.n	2021a <nrfx_qspi_irq_handler+0x4a>
   201ee:	2a02      	cmp	r2, #2
   201f0:	d104      	bne.n	201fc <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   201f2:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   201f4:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   201f8:	f7ff fd2e 	bl	1fc58 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   201fc:	68a3      	ldr	r3, [r4, #8]
   201fe:	b913      	cbnz	r3, 20206 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   20200:	2301      	movs	r3, #1
   20202:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   20206:	e9d4 3100 	ldrd	r3, r1, [r4]
   2020a:	2000      	movs	r0, #0
   2020c:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   2020e:	2300      	movs	r3, #0
   20210:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   20214:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   20216:	2302      	movs	r3, #2
   20218:	e7ec      	b.n	201f4 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   2021a:	2203      	movs	r2, #3
   2021c:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   20220:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   20224:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   20226:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   2022a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   2022e:	e7e5      	b.n	201fc <nrfx_qspi_irq_handler+0x2c>
   20230:	4002b000 	.word	0x4002b000
   20234:	2002196c 	.word	0x2002196c

00020238 <nrf_gpio_pin_port_decode>:
{
   20238:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2023a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   2023c:	095a      	lsrs	r2, r3, #5
   2023e:	d00d      	beq.n	2025c <nrf_gpio_pin_port_decode+0x24>
   20240:	2a01      	cmp	r2, #1
   20242:	d013      	beq.n	2026c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20244:	490e      	ldr	r1, [pc, #56]	; (20280 <nrf_gpio_pin_port_decode+0x48>)
   20246:	480f      	ldr	r0, [pc, #60]	; (20284 <nrf_gpio_pin_port_decode+0x4c>)
   20248:	f240 2347 	movw	r3, #583	; 0x247
   2024c:	4a0e      	ldr	r2, [pc, #56]	; (20288 <nrf_gpio_pin_port_decode+0x50>)
   2024e:	f00a fa34 	bl	2a6ba <assert_print>
   20252:	f240 2147 	movw	r1, #583	; 0x247
   20256:	480c      	ldr	r0, [pc, #48]	; (20288 <nrf_gpio_pin_port_decode+0x50>)
   20258:	f00a fa28 	bl	2a6ac <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   2025c:	f04f 32ff 	mov.w	r2, #4294967295
   20260:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20264:	07d9      	lsls	r1, r3, #31
   20266:	d5ed      	bpl.n	20244 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   20268:	4808      	ldr	r0, [pc, #32]	; (2028c <nrf_gpio_pin_port_decode+0x54>)
   2026a:	e008      	b.n	2027e <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   2026c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   20270:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20274:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20276:	07d2      	lsls	r2, r2, #31
   20278:	d5e4      	bpl.n	20244 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   2027a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   2027c:	4804      	ldr	r0, [pc, #16]	; (20290 <nrf_gpio_pin_port_decode+0x58>)
}
   2027e:	bd08      	pop	{r3, pc}
   20280:	00036c34 	.word	0x00036c34
   20284:	00032659 	.word	0x00032659
   20288:	00036c01 	.word	0x00036c01
   2028c:	40842500 	.word	0x40842500
   20290:	40842800 	.word	0x40842800

00020294 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   20294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20298:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   2029a:	460c      	mov	r4, r1
   2029c:	b959      	cbnz	r1, 202b6 <nrfx_spim_init+0x22>
   2029e:	498d      	ldr	r1, [pc, #564]	; (204d4 <nrfx_spim_init+0x240>)
   202a0:	488d      	ldr	r0, [pc, #564]	; (204d8 <nrfx_spim_init+0x244>)
   202a2:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   202a6:	4a8d      	ldr	r2, [pc, #564]	; (204dc <nrfx_spim_init+0x248>)
   202a8:	f00a fa07 	bl	2a6ba <assert_print>
   202ac:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   202b0:	488a      	ldr	r0, [pc, #552]	; (204dc <nrfx_spim_init+0x248>)
   202b2:	f00a f9fb 	bl	2a6ac <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   202b6:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   202b8:	4d89      	ldr	r5, [pc, #548]	; (204e0 <nrfx_spim_init+0x24c>)
   202ba:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   202be:	7f09      	ldrb	r1, [r1, #28]
   202c0:	2900      	cmp	r1, #0
   202c2:	f040 8100 	bne.w	204c6 <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   202c6:	2f00      	cmp	r7, #0
   202c8:	f040 80ff 	bne.w	204ca <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   202cc:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   202d0:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   202d2:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   202d4:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   202d8:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   202da:	d027      	beq.n	2032c <nrfx_spim_init+0x98>
   202dc:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   202e0:	d124      	bne.n	2032c <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   202e2:	b119      	cbz	r1, 202ec <nrfx_spim_init+0x58>
   202e4:	7d20      	ldrb	r0, [r4, #20]
   202e6:	2800      	cmp	r0, #0
   202e8:	f040 80d5 	bne.w	20496 <nrfx_spim_init+0x202>
   202ec:	487d      	ldr	r0, [pc, #500]	; (204e4 <nrfx_spim_init+0x250>)
   202ee:	4581      	cmp	r9, r0
   202f0:	d11c      	bne.n	2032c <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   202f2:	7820      	ldrb	r0, [r4, #0]
   202f4:	28ff      	cmp	r0, #255	; 0xff
   202f6:	d002      	beq.n	202fe <nrfx_spim_init+0x6a>
   202f8:	2808      	cmp	r0, #8
   202fa:	f040 80e8 	bne.w	204ce <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   202fe:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   20300:	28ff      	cmp	r0, #255	; 0xff
   20302:	d002      	beq.n	2030a <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   20304:	280b      	cmp	r0, #11
   20306:	f040 80e2 	bne.w	204ce <nrfx_spim_init+0x23a>
   2030a:	2eff      	cmp	r6, #255	; 0xff
   2030c:	d002      	beq.n	20314 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   2030e:	2e0c      	cmp	r6, #12
   20310:	f040 80dd 	bne.w	204ce <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   20314:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   20316:	28ff      	cmp	r0, #255	; 0xff
   20318:	d002      	beq.n	20320 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   2031a:	2809      	cmp	r0, #9
   2031c:	f040 80d7 	bne.w	204ce <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   20320:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   20322:	28ff      	cmp	r0, #255	; 0xff
   20324:	d002      	beq.n	2032c <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   20326:	280a      	cmp	r0, #10
   20328:	f040 80d1 	bne.w	204ce <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   2032c:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   20330:	7fab      	ldrb	r3, [r5, #30]
   20332:	f361 0300 	bfi	r3, r1, #0, #1
   20336:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   20338:	7922      	ldrb	r2, [r4, #4]
   2033a:	b2db      	uxtb	r3, r3
   2033c:	f362 0341 	bfi	r3, r2, #1, #1
   20340:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   20342:	7c62      	ldrb	r2, [r4, #17]
   20344:	b2db      	uxtb	r3, r3
   20346:	f362 0382 	bfi	r3, r2, #2, #1
   2034a:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   2034c:	78e3      	ldrb	r3, [r4, #3]
   2034e:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   20350:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   20352:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   20356:	2b00      	cmp	r3, #0
   20358:	d142      	bne.n	203e0 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   2035a:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   2035c:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   2035e:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   20362:	7b23      	ldrb	r3, [r4, #12]
   20364:	bf08      	it	eq
   20366:	2703      	moveq	r7, #3
   20368:	2b01      	cmp	r3, #1
   2036a:	f200 8096 	bhi.w	2049a <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   2036e:	f00e fc2d 	bl	2ebcc <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   20372:	2300      	movs	r3, #0
   20374:	9700      	str	r7, [sp, #0]
   20376:	7820      	ldrb	r0, [r4, #0]
   20378:	461a      	mov	r2, r3
   2037a:	2101      	movs	r1, #1
   2037c:	f00e fc4e 	bl	2ec1c <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   20380:	7860      	ldrb	r0, [r4, #1]
   20382:	28ff      	cmp	r0, #255	; 0xff
   20384:	d008      	beq.n	20398 <nrfx_spim_init+0x104>
   20386:	f00e fc21 	bl	2ebcc <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   2038a:	2201      	movs	r2, #1
   2038c:	9700      	str	r7, [sp, #0]
   2038e:	2300      	movs	r3, #0
   20390:	4611      	mov	r1, r2
   20392:	7860      	ldrb	r0, [r4, #1]
   20394:	f00e fc42 	bl	2ec1c <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   20398:	78a0      	ldrb	r0, [r4, #2]
   2039a:	28ff      	cmp	r0, #255	; 0xff
   2039c:	d005      	beq.n	203aa <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   2039e:	2200      	movs	r2, #0
   203a0:	9700      	str	r7, [sp, #0]
   203a2:	4611      	mov	r1, r2
   203a4:	7ba3      	ldrb	r3, [r4, #14]
   203a6:	f00e fc39 	bl	2ec1c <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   203aa:	78e0      	ldrb	r0, [r4, #3]
   203ac:	28ff      	cmp	r0, #255	; 0xff
   203ae:	d00b      	beq.n	203c8 <nrfx_spim_init+0x134>
    if (value == 0)
   203b0:	7923      	ldrb	r3, [r4, #4]
   203b2:	2b00      	cmp	r3, #0
   203b4:	d074      	beq.n	204a0 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   203b6:	f00e fc09 	bl	2ebcc <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   203ba:	2201      	movs	r2, #1
   203bc:	9700      	str	r7, [sp, #0]
   203be:	2300      	movs	r3, #0
   203c0:	4611      	mov	r1, r2
   203c2:	78e0      	ldrb	r0, [r4, #3]
   203c4:	f00e fc2a 	bl	2ec1c <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   203c8:	7be0      	ldrb	r0, [r4, #15]
   203ca:	28ff      	cmp	r0, #255	; 0xff
   203cc:	d008      	beq.n	203e0 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   203ce:	f00e fc09 	bl	2ebe4 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   203d2:	2201      	movs	r2, #1
   203d4:	9700      	str	r7, [sp, #0]
   203d6:	2300      	movs	r3, #0
   203d8:	4611      	mov	r1, r2
   203da:	7be0      	ldrb	r0, [r4, #15]
   203dc:	f00e fc1e 	bl	2ec1c <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   203e0:	7d23      	ldrb	r3, [r4, #20]
   203e2:	bb6b      	cbnz	r3, 20440 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   203e4:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   203e6:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   203e8:	2bff      	cmp	r3, #255	; 0xff
   203ea:	bf18      	it	ne
   203ec:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   203ee:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   203f0:	bf08      	it	eq
   203f2:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   203f6:	2bff      	cmp	r3, #255	; 0xff
   203f8:	bf08      	it	eq
   203fa:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   203fe:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   20402:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   20406:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   2040a:	f898 3004 	ldrb.w	r3, [r8, #4]
   2040e:	b9bb      	cbnz	r3, 20440 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   20410:	78e3      	ldrb	r3, [r4, #3]
   20412:	2bff      	cmp	r3, #255	; 0xff
   20414:	d047      	beq.n	204a6 <nrfx_spim_init+0x212>
   20416:	7c62      	ldrb	r2, [r4, #17]
   20418:	2a00      	cmp	r2, #0
   2041a:	d044      	beq.n	204a6 <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   2041c:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   2041e:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   20420:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   20424:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   20428:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   2042c:	f898 3004 	ldrb.w	r3, [r8, #4]
   20430:	b933      	cbnz	r3, 20440 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   20432:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   20434:	2bff      	cmp	r3, #255	; 0xff
   20436:	bf08      	it	eq
   20438:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   2043c:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   20440:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   20442:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   20446:	68a3      	ldr	r3, [r4, #8]
   20448:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   2044c:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   2044e:	7b22      	ldrb	r2, [r4, #12]
   20450:	3b00      	subs	r3, #0
   20452:	bf18      	it	ne
   20454:	2301      	movne	r3, #1
    switch (spi_mode)
   20456:	2a02      	cmp	r2, #2
   20458:	d02f      	beq.n	204ba <nrfx_spim_init+0x226>
   2045a:	2a03      	cmp	r2, #3
   2045c:	d030      	beq.n	204c0 <nrfx_spim_init+0x22c>
   2045e:	2a01      	cmp	r2, #1
   20460:	d101      	bne.n	20466 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   20462:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   20466:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   2046a:	79a3      	ldrb	r3, [r4, #6]
   2046c:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   20470:	2307      	movs	r3, #7
   20472:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   20476:	682b      	ldr	r3, [r5, #0]
   20478:	b12b      	cbz	r3, 20486 <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2047a:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2047e:	f340 3007 	sbfx	r0, r0, #12, #8
   20482:	f7f0 facb 	bl	10a1c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   20486:	2300      	movs	r3, #0
   20488:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2048a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2048c:	4816      	ldr	r0, [pc, #88]	; (204e8 <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2048e:	772b      	strb	r3, [r5, #28]
}
   20490:	b003      	add	sp, #12
   20492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   20496:	4601      	mov	r1, r0
   20498:	e748      	b.n	2032c <nrfx_spim_init+0x98>
   2049a:	f00e fba3 	bl	2ebe4 <nrf_gpio_pin_set>
   2049e:	e768      	b.n	20372 <nrfx_spim_init+0xde>
   204a0:	f00e fba0 	bl	2ebe4 <nrf_gpio_pin_set>
   204a4:	e789      	b.n	203ba <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   204a6:	f04f 33ff 	mov.w	r3, #4294967295
   204aa:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   204ae:	2300      	movs	r3, #0
   204b0:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   204b4:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   204b8:	e7b8      	b.n	2042c <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   204ba:	f043 0304 	orr.w	r3, r3, #4
        break;
   204be:	e7d2      	b.n	20466 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   204c0:	f043 0306 	orr.w	r3, r3, #6
        break;
   204c4:	e7cf      	b.n	20466 <nrfx_spim_init+0x1d2>
        return err_code;
   204c6:	4809      	ldr	r0, [pc, #36]	; (204ec <nrfx_spim_init+0x258>)
   204c8:	e7e2      	b.n	20490 <nrfx_spim_init+0x1fc>
        return err_code;
   204ca:	4809      	ldr	r0, [pc, #36]	; (204f0 <nrfx_spim_init+0x25c>)
   204cc:	e7e0      	b.n	20490 <nrfx_spim_init+0x1fc>
            return err_code;
   204ce:	4809      	ldr	r0, [pc, #36]	; (204f4 <nrfx_spim_init+0x260>)
   204d0:	e7de      	b.n	20490 <nrfx_spim_init+0x1fc>
   204d2:	bf00      	nop
   204d4:	00037603 	.word	0x00037603
   204d8:	00032659 	.word	0x00032659
   204dc:	00037784 	.word	0x00037784
   204e0:	200219a0 	.word	0x200219a0
   204e4:	4000a000 	.word	0x4000a000
   204e8:	0bad0000 	.word	0x0bad0000
   204ec:	0bad0005 	.word	0x0bad0005
   204f0:	0bad0003 	.word	0x0bad0003
   204f4:	0bad0004 	.word	0x0bad0004

000204f8 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   204f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   204fc:	4d2e      	ldr	r5, [pc, #184]	; (205b8 <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   204fe:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   20502:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   20504:	ea4f 1648 	mov.w	r6, r8, lsl #5
   20508:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   2050c:	f898 301c 	ldrb.w	r3, [r8, #28]
   20510:	b95b      	cbnz	r3, 2052a <nrfx_spim_uninit+0x32>
   20512:	492a      	ldr	r1, [pc, #168]	; (205bc <nrfx_spim_uninit+0xc4>)
   20514:	482a      	ldr	r0, [pc, #168]	; (205c0 <nrfx_spim_uninit+0xc8>)
   20516:	f240 230f 	movw	r3, #527	; 0x20f
   2051a:	4a2a      	ldr	r2, [pc, #168]	; (205c4 <nrfx_spim_uninit+0xcc>)
   2051c:	f00a f8cd 	bl	2a6ba <assert_print>
   20520:	f240 210f 	movw	r1, #527	; 0x20f
   20524:	4827      	ldr	r0, [pc, #156]	; (205c4 <nrfx_spim_uninit+0xcc>)
   20526:	f00a f8c1 	bl	2a6ac <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   2052a:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   2052c:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   2052e:	b1cb      	cbz	r3, 20564 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   20530:	f344 3007 	sbfx	r0, r4, #12, #8
   20534:	f7f0 fa80 	bl	10a38 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   20538:	4b23      	ldr	r3, [pc, #140]	; (205c8 <nrfx_spim_uninit+0xd0>)
   2053a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   2053e:	f898 301d 	ldrb.w	r3, [r8, #29]
   20542:	b17b      	cbz	r3, 20564 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20544:	2301      	movs	r3, #1
   20546:	f04f 0864 	mov.w	r8, #100	; 0x64
   2054a:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2054c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   20550:	b92b      	cbnz	r3, 2055e <nrfx_spim_uninit+0x66>
   20552:	2001      	movs	r0, #1
   20554:	f00e faaa 	bl	2eaac <nrfx_busy_wait>
   20558:	f1b8 0801 	subs.w	r8, r8, #1
   2055c:	d1f6      	bne.n	2054c <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   2055e:	2200      	movs	r2, #0
   20560:	19ab      	adds	r3, r5, r6
   20562:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   20564:	2300      	movs	r3, #0
   20566:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   2056a:	19ab      	adds	r3, r5, r6
   2056c:	7f9b      	ldrb	r3, [r3, #30]
   2056e:	07db      	lsls	r3, r3, #31
   20570:	d41b      	bmi.n	205aa <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   20572:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   20576:	f00e fb70 	bl	2ec5a <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   2057a:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   2057e:	f00e fb6c 	bl	2ec5a <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   20582:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   20586:	f00e fb68 	bl	2ec5a <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   2058a:	793b      	ldrb	r3, [r7, #4]
   2058c:	b91b      	cbnz	r3, 20596 <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   2058e:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   20592:	f00e fb62 	bl	2ec5a <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   20596:	19ab      	adds	r3, r5, r6
   20598:	7fd8      	ldrb	r0, [r3, #31]
   2059a:	28ff      	cmp	r0, #255	; 0xff
   2059c:	d005      	beq.n	205aa <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   2059e:	2300      	movs	r3, #0
   205a0:	2201      	movs	r2, #1
   205a2:	4619      	mov	r1, r3
   205a4:	9300      	str	r3, [sp, #0]
   205a6:	f00e fb39 	bl	2ec1c <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   205aa:	2300      	movs	r3, #0
   205ac:	4435      	add	r5, r6
   205ae:	772b      	strb	r3, [r5, #28]
}
   205b0:	b002      	add	sp, #8
   205b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   205b6:	bf00      	nop
   205b8:	200219a0 	.word	0x200219a0
   205bc:	000377c0 	.word	0x000377c0
   205c0:	00032659 	.word	0x00032659
   205c4:	00037784 	.word	0x00037784
   205c8:	00080152 	.word	0x00080152

000205cc <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   205cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   205d0:	4e60      	ldr	r6, [pc, #384]	; (20754 <nrfx_spim_xfer+0x188>)
   205d2:	7903      	ldrb	r3, [r0, #4]
{
   205d4:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   205d6:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   205da:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   205de:	4607      	mov	r7, r0
   205e0:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   205e2:	b95a      	cbnz	r2, 205fc <nrfx_spim_xfer+0x30>
   205e4:	495c      	ldr	r1, [pc, #368]	; (20758 <nrfx_spim_xfer+0x18c>)
   205e6:	f240 23de 	movw	r3, #734	; 0x2de
   205ea:	4a5c      	ldr	r2, [pc, #368]	; (2075c <nrfx_spim_xfer+0x190>)
   205ec:	485c      	ldr	r0, [pc, #368]	; (20760 <nrfx_spim_xfer+0x194>)
   205ee:	f00a f864 	bl	2a6ba <assert_print>
   205f2:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   205f6:	4859      	ldr	r0, [pc, #356]	; (2075c <nrfx_spim_xfer+0x190>)
   205f8:	f00a f858 	bl	2a6ac <assert_post_action>
   205fc:	680a      	ldr	r2, [r1, #0]
   205fe:	b95a      	cbnz	r2, 20618 <nrfx_spim_xfer+0x4c>
   20600:	684a      	ldr	r2, [r1, #4]
   20602:	b14a      	cbz	r2, 20618 <nrfx_spim_xfer+0x4c>
   20604:	4957      	ldr	r1, [pc, #348]	; (20764 <nrfx_spim_xfer+0x198>)
   20606:	f240 23df 	movw	r3, #735	; 0x2df
   2060a:	4a54      	ldr	r2, [pc, #336]	; (2075c <nrfx_spim_xfer+0x190>)
   2060c:	4854      	ldr	r0, [pc, #336]	; (20760 <nrfx_spim_xfer+0x194>)
   2060e:	f00a f854 	bl	2a6ba <assert_print>
   20612:	f240 21df 	movw	r1, #735	; 0x2df
   20616:	e7ee      	b.n	205f6 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   20618:	68a2      	ldr	r2, [r4, #8]
   2061a:	b96a      	cbnz	r2, 20638 <nrfx_spim_xfer+0x6c>
   2061c:	68e2      	ldr	r2, [r4, #12]
   2061e:	2a00      	cmp	r2, #0
   20620:	f000 8094 	beq.w	2074c <nrfx_spim_xfer+0x180>
   20624:	4950      	ldr	r1, [pc, #320]	; (20768 <nrfx_spim_xfer+0x19c>)
   20626:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   2062a:	4a4c      	ldr	r2, [pc, #304]	; (2075c <nrfx_spim_xfer+0x190>)
   2062c:	484c      	ldr	r0, [pc, #304]	; (20760 <nrfx_spim_xfer+0x194>)
   2062e:	f00a f844 	bl	2a6ba <assert_print>
   20632:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   20636:	e7de      	b.n	205f6 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   20638:	b93b      	cbnz	r3, 2064a <nrfx_spim_xfer+0x7e>
   2063a:	68e3      	ldr	r3, [r4, #12]
   2063c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   20640:	d203      	bcs.n	2064a <nrfx_spim_xfer+0x7e>
   20642:	6863      	ldr	r3, [r4, #4]
   20644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   20648:	d309      	bcc.n	2065e <nrfx_spim_xfer+0x92>
   2064a:	4948      	ldr	r1, [pc, #288]	; (2076c <nrfx_spim_xfer+0x1a0>)
   2064c:	f240 23e1 	movw	r3, #737	; 0x2e1
   20650:	4a42      	ldr	r2, [pc, #264]	; (2075c <nrfx_spim_xfer+0x190>)
   20652:	4843      	ldr	r0, [pc, #268]	; (20760 <nrfx_spim_xfer+0x194>)
   20654:	f00a f831 	bl	2a6ba <assert_print>
   20658:	f240 21e1 	movw	r1, #737	; 0x2e1
   2065c:	e7cb      	b.n	205f6 <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   2065e:	f015 0908 	ands.w	r9, r5, #8
   20662:	d00f      	beq.n	20684 <nrfx_spim_xfer+0xb8>
   20664:	7fb3      	ldrb	r3, [r6, #30]
   20666:	075b      	lsls	r3, r3, #29
   20668:	d40c      	bmi.n	20684 <nrfx_spim_xfer+0xb8>
   2066a:	7ff3      	ldrb	r3, [r6, #31]
   2066c:	2bff      	cmp	r3, #255	; 0xff
   2066e:	d009      	beq.n	20684 <nrfx_spim_xfer+0xb8>
   20670:	493f      	ldr	r1, [pc, #252]	; (20770 <nrfx_spim_xfer+0x1a4>)
   20672:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   20676:	4a39      	ldr	r2, [pc, #228]	; (2075c <nrfx_spim_xfer+0x190>)
   20678:	4839      	ldr	r0, [pc, #228]	; (20760 <nrfx_spim_xfer+0x194>)
   2067a:	f00a f81e 	bl	2a6ba <assert_print>
   2067e:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   20682:	e7b8      	b.n	205f6 <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   20684:	7f73      	ldrb	r3, [r6, #29]
   20686:	2b00      	cmp	r3, #0
   20688:	d15e      	bne.n	20748 <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   2068a:	6833      	ldr	r3, [r6, #0]
   2068c:	b123      	cbz	r3, 20698 <nrfx_spim_xfer+0xcc>
   2068e:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   20692:	bf04      	itt	eq
   20694:	2301      	moveq	r3, #1
   20696:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   20698:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 20774 <nrfx_spim_xfer+0x1a8>
   2069c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   206a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   206a4:	2101      	movs	r1, #1
   206a6:	4640      	mov	r0, r8
   206a8:	f00e faa8 	bl	2ebfc <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   206ac:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   206ae:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   206b0:	b121      	cbz	r1, 206bc <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   206b2:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   206b6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   206ba:	d106      	bne.n	206ca <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   206bc:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   206be:	b14a      	cbz	r2, 206d4 <nrfx_spim_xfer+0x108>
   206c0:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   206c4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   206c8:	d004      	beq.n	206d4 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   206ca:	2300      	movs	r3, #0
        return err_code;
   206cc:	482a      	ldr	r0, [pc, #168]	; (20778 <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   206ce:	7773      	strb	r3, [r6, #29]
}
   206d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   206d4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   206d6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   206da:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   206de:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   206e2:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   206e6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   206ea:	2200      	movs	r2, #0
   206ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   206f0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   206f4:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   206f8:	bf18      	it	ne
   206fa:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   206fc:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   20700:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   20704:	bf18      	it	ne
   20706:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   20708:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   2070c:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2070e:	f1b9 0f00 	cmp.w	r9, #0
   20712:	d006      	beq.n	20722 <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   20714:	b96a      	cbnz	r2, 20732 <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   20716:	2100      	movs	r1, #0
   20718:	4640      	mov	r0, r8
   2071a:	f00e fa6f 	bl	2ebfc <set_ss_pin_state>
    return err_code;
   2071e:	4817      	ldr	r0, [pc, #92]	; (2077c <nrfx_spim_xfer+0x1b0>)
   20720:	e7d6      	b.n	206d0 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20722:	2101      	movs	r1, #1
   20724:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   20726:	b922      	cbnz	r2, 20732 <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20728:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2072c:	2a00      	cmp	r2, #0
   2072e:	d0fb      	beq.n	20728 <nrfx_spim_xfer+0x15c>
   20730:	e7f1      	b.n	20716 <nrfx_spim_xfer+0x14a>
    if (!enable)
   20732:	f015 0f04 	tst.w	r5, #4
   20736:	f04f 0240 	mov.w	r2, #64	; 0x40
   2073a:	d002      	beq.n	20742 <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   2073c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20740:	e7ed      	b.n	2071e <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   20742:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20746:	e7ea      	b.n	2071e <nrfx_spim_xfer+0x152>
        return err_code;
   20748:	480d      	ldr	r0, [pc, #52]	; (20780 <nrfx_spim_xfer+0x1b4>)
   2074a:	e7c1      	b.n	206d0 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2074c:	2b00      	cmp	r3, #0
   2074e:	f43f af78 	beq.w	20642 <nrfx_spim_xfer+0x76>
   20752:	e77a      	b.n	2064a <nrfx_spim_xfer+0x7e>
   20754:	200219a0 	.word	0x200219a0
   20758:	000377c0 	.word	0x000377c0
   2075c:	00037784 	.word	0x00037784
   20760:	00032659 	.word	0x00032659
   20764:	000377ec 	.word	0x000377ec
   20768:	00037833 	.word	0x00037833
   2076c:	0003787a 	.word	0x0003787a
   20770:	0003791e 	.word	0x0003791e
   20774:	200219ac 	.word	0x200219ac
   20778:	0bad000a 	.word	0x0bad000a
   2077c:	0bad0000 	.word	0x0bad0000
   20780:	0bad000b 	.word	0x0bad000b

00020784 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   20784:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20786:	4b13      	ldr	r3, [pc, #76]	; (207d4 <nrfx_spim_4_irq_handler+0x50>)
   20788:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2078c:	b302      	cbz	r2, 207d0 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2078e:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   20790:	4c11      	ldr	r4, [pc, #68]	; (207d8 <nrfx_spim_4_irq_handler+0x54>)
   20792:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   20796:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   2079a:	6823      	ldr	r3, [r4, #0]
   2079c:	b95b      	cbnz	r3, 207b6 <nrfx_spim_4_irq_handler+0x32>
   2079e:	490f      	ldr	r1, [pc, #60]	; (207dc <nrfx_spim_4_irq_handler+0x58>)
   207a0:	480f      	ldr	r0, [pc, #60]	; (207e0 <nrfx_spim_4_irq_handler+0x5c>)
   207a2:	f240 333b 	movw	r3, #827	; 0x33b
   207a6:	4a0f      	ldr	r2, [pc, #60]	; (207e4 <nrfx_spim_4_irq_handler+0x60>)
   207a8:	f009 ff87 	bl	2a6ba <assert_print>
   207ac:	f240 313b 	movw	r1, #827	; 0x33b
   207b0:	480c      	ldr	r0, [pc, #48]	; (207e4 <nrfx_spim_4_irq_handler+0x60>)
   207b2:	f009 ff7b 	bl	2a6ac <assert_post_action>
    set_ss_pin_state(p_cb, false);
   207b6:	4629      	mov	r1, r5
   207b8:	4620      	mov	r0, r4
   207ba:	f00e fa1f 	bl	2ebfc <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   207be:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   207c2:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   207c4:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   207c6:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   207ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   207ce:	4718      	bx	r3
}
   207d0:	bd70      	pop	{r4, r5, r6, pc}
   207d2:	bf00      	nop
   207d4:	4000a000 	.word	0x4000a000
   207d8:	200219a0 	.word	0x200219a0
   207dc:	00037961 	.word	0x00037961
   207e0:	00032659 	.word	0x00032659
   207e4:	00037784 	.word	0x00037784

000207e8 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   207e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207ec:	460e      	mov	r6, r1
   207ee:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   207f0:	4d0c      	ldr	r5, [pc, #48]	; (20824 <metal_generic_dev_open+0x3c>)
   207f2:	f855 4f18 	ldr.w	r4, [r5, #24]!
   207f6:	42ac      	cmp	r4, r5
   207f8:	d103      	bne.n	20802 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   207fa:	f06f 0012 	mvn.w	r0, #18
   207fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   20802:	4631      	mov	r1, r6
   20804:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   20808:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   2080c:	f7e8 fdb1 	bl	9372 <strcmp>
   20810:	b930      	cbnz	r0, 20820 <metal_generic_dev_open+0x38>
			*device = dev;
   20812:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   20816:	4640      	mov	r0, r8
}
   20818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   2081c:	f00e bb22 	b.w	2ee64 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   20820:	6824      	ldr	r4, [r4, #0]
   20822:	e7e8      	b.n	207f6 <metal_generic_dev_open+0xe>
   20824:	200219c0 	.word	0x200219c0

00020828 <metal_bus_unregister>:
{
   20828:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   2082a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2082e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   20830:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   20832:	f100 0324 	add.w	r3, r0, #36	; 0x24
   20836:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   20838:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   2083c:	6843      	ldr	r3, [r0, #4]
{
   2083e:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   20840:	b103      	cbz	r3, 20844 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   20842:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   20844:	4b05      	ldr	r3, [pc, #20]	; (2085c <metal_bus_unregister+0x34>)
   20846:	781a      	ldrb	r2, [r3, #0]
   20848:	2a06      	cmp	r2, #6
   2084a:	d905      	bls.n	20858 <metal_bus_unregister+0x30>
   2084c:	685b      	ldr	r3, [r3, #4]
   2084e:	b11b      	cbz	r3, 20858 <metal_bus_unregister+0x30>
   20850:	2007      	movs	r0, #7
   20852:	6822      	ldr	r2, [r4, #0]
   20854:	4902      	ldr	r1, [pc, #8]	; (20860 <metal_bus_unregister+0x38>)
   20856:	4798      	blx	r3
}
   20858:	2000      	movs	r0, #0
   2085a:	bd10      	pop	{r4, pc}
   2085c:	200219c0 	.word	0x200219c0
   20860:	00037984 	.word	0x00037984

00020864 <metal_bus_find>:
{
   20864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20868:	4607      	mov	r7, r0
   2086a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   2086c:	4e0b      	ldr	r6, [pc, #44]	; (2089c <metal_bus_find+0x38>)
   2086e:	f856 4f08 	ldr.w	r4, [r6, #8]!
   20872:	42b4      	cmp	r4, r6
   20874:	d102      	bne.n	2087c <metal_bus_find+0x18>
	return -ENOENT;
   20876:	f06f 0001 	mvn.w	r0, #1
   2087a:	e00a      	b.n	20892 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   2087c:	4639      	mov	r1, r7
   2087e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   20882:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   20886:	f7e8 fd74 	bl	9372 <strcmp>
   2088a:	b920      	cbnz	r0, 20896 <metal_bus_find+0x32>
   2088c:	b11d      	cbz	r5, 20896 <metal_bus_find+0x32>
			*result = bus;
   2088e:	f8c5 8000 	str.w	r8, [r5]
}
   20892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   20896:	6824      	ldr	r4, [r4, #0]
   20898:	e7eb      	b.n	20872 <metal_bus_find+0xe>
   2089a:	bf00      	nop
   2089c:	200219c0 	.word	0x200219c0

000208a0 <metal_bus_register>:
{
   208a0:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   208a2:	4604      	mov	r4, r0
   208a4:	b910      	cbnz	r0, 208ac <metal_bus_register+0xc>
		return -EINVAL;
   208a6:	f06f 0015 	mvn.w	r0, #21
}
   208aa:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   208ac:	6800      	ldr	r0, [r0, #0]
   208ae:	2800      	cmp	r0, #0
   208b0:	d0f9      	beq.n	208a6 <metal_bus_register+0x6>
   208b2:	f7e8 fd68 	bl	9386 <strlen>
   208b6:	2800      	cmp	r0, #0
   208b8:	d0f5      	beq.n	208a6 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   208ba:	2100      	movs	r1, #0
   208bc:	6820      	ldr	r0, [r4, #0]
   208be:	f7ff ffd1 	bl	20864 <metal_bus_find>
   208c2:	b1c8      	cbz	r0, 208f8 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   208c4:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   208c8:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   208cc:	4b0c      	ldr	r3, [pc, #48]	; (20900 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   208ce:	f104 0224 	add.w	r2, r4, #36	; 0x24
   208d2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   208d4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   208d8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   208da:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   208dc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   208de:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   208e0:	781a      	ldrb	r2, [r3, #0]
   208e2:	2a06      	cmp	r2, #6
   208e4:	d901      	bls.n	208ea <metal_bus_register+0x4a>
   208e6:	685b      	ldr	r3, [r3, #4]
   208e8:	b90b      	cbnz	r3, 208ee <metal_bus_register+0x4e>
	return 0;
   208ea:	2000      	movs	r0, #0
   208ec:	e7dd      	b.n	208aa <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   208ee:	2007      	movs	r0, #7
   208f0:	6822      	ldr	r2, [r4, #0]
   208f2:	4904      	ldr	r1, [pc, #16]	; (20904 <metal_bus_register+0x64>)
   208f4:	4798      	blx	r3
   208f6:	e7f8      	b.n	208ea <metal_bus_register+0x4a>
		return -EEXIST;
   208f8:	f06f 0010 	mvn.w	r0, #16
   208fc:	e7d5      	b.n	208aa <metal_bus_register+0xa>
   208fe:	bf00      	nop
   20900:	200219c0 	.word	0x200219c0
   20904:	00037986 	.word	0x00037986

00020908 <metal_device_close>:
	metal_assert(device && device->bus);
   20908:	4601      	mov	r1, r0
{
   2090a:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   2090c:	b108      	cbz	r0, 20912 <metal_device_close+0xa>
   2090e:	6840      	ldr	r0, [r0, #4]
   20910:	b948      	cbnz	r0, 20926 <metal_device_close+0x1e>
   20912:	4908      	ldr	r1, [pc, #32]	; (20934 <metal_device_close+0x2c>)
   20914:	4808      	ldr	r0, [pc, #32]	; (20938 <metal_device_close+0x30>)
   20916:	2351      	movs	r3, #81	; 0x51
   20918:	4a08      	ldr	r2, [pc, #32]	; (2093c <metal_device_close+0x34>)
   2091a:	f009 fece 	bl	2a6ba <assert_print>
   2091e:	2151      	movs	r1, #81	; 0x51
   20920:	4806      	ldr	r0, [pc, #24]	; (2093c <metal_device_close+0x34>)
   20922:	f009 fec3 	bl	2a6ac <assert_post_action>
	if (device->bus->ops.dev_close)
   20926:	68c3      	ldr	r3, [r0, #12]
   20928:	b113      	cbz	r3, 20930 <metal_device_close+0x28>
}
   2092a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   2092e:	4718      	bx	r3
}
   20930:	bd10      	pop	{r4, pc}
   20932:	bf00      	nop
   20934:	000379d0 	.word	0x000379d0
   20938:	00032659 	.word	0x00032659
   2093c:	00037999 	.word	0x00037999

00020940 <metal_register_generic_device>:
{
   20940:	b510      	push	{r4, lr}
   20942:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   20944:	6800      	ldr	r0, [r0, #0]
   20946:	b910      	cbnz	r0, 2094e <metal_register_generic_device+0xe>
		return -EINVAL;
   20948:	f06f 0015 	mvn.w	r0, #21
}
   2094c:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   2094e:	f7e8 fd1a 	bl	9386 <strlen>
   20952:	2800      	cmp	r0, #0
   20954:	d0f8      	beq.n	20948 <metal_register_generic_device+0x8>
   20956:	68a3      	ldr	r3, [r4, #8]
   20958:	2b01      	cmp	r3, #1
   2095a:	d8f5      	bhi.n	20948 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   2095c:	4b06      	ldr	r3, [pc, #24]	; (20978 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   2095e:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   20962:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   20964:	4b05      	ldr	r3, [pc, #20]	; (2097c <metal_register_generic_device+0x3c>)
   20966:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   20968:	f103 0018 	add.w	r0, r3, #24
   2096c:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   2096e:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   20970:	61d9      	str	r1, [r3, #28]
	return 0;
   20972:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   20974:	6011      	str	r1, [r2, #0]
}
   20976:	e7e9      	b.n	2094c <metal_register_generic_device+0xc>
   20978:	20008718 	.word	0x20008718
   2097c:	200219c0 	.word	0x200219c0

00020980 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   20980:	4b0e      	ldr	r3, [pc, #56]	; (209bc <metal_init+0x3c>)
{
   20982:	b510      	push	{r4, lr}
   20984:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   20986:	2220      	movs	r2, #32
   20988:	2100      	movs	r1, #0
   2098a:	4618      	mov	r0, r3
   2098c:	f00f fe29 	bl	305e2 <memset>

	_metal.common.log_handler   = params->log_handler;
   20990:	6822      	ldr	r2, [r4, #0]
   20992:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   20994:	4602      	mov	r2, r0
   20996:	7921      	ldrb	r1, [r4, #4]
   20998:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   2099c:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   209a0:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   209a4:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   209a8:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   209ac:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   209b0:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   209b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   209b6:	f000 b80f 	b.w	209d8 <metal_sys_init>
   209ba:	bf00      	nop
   209bc:	200219c0 	.word	0x200219c0

000209c0 <metal_finish>:

void metal_finish(void)
{
   209c0:	b508      	push	{r3, lr}
	metal_sys_finish();
   209c2:	f000 f811 	bl	209e8 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   209c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   209ca:	2220      	movs	r2, #32
   209cc:	2100      	movs	r1, #0
   209ce:	4801      	ldr	r0, [pc, #4]	; (209d4 <metal_finish+0x14>)
   209d0:	f00f be07 	b.w	305e2 <memset>
   209d4:	200219c0 	.word	0x200219c0

000209d8 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   209d8:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   209da:	4802      	ldr	r0, [pc, #8]	; (209e4 <metal_sys_init+0xc>)
   209dc:	f7ff ff60 	bl	208a0 <metal_bus_register>
	return 0;
}
   209e0:	2000      	movs	r0, #0
   209e2:	bd08      	pop	{r3, pc}
   209e4:	20008718 	.word	0x20008718

000209e8 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   209e8:	4801      	ldr	r0, [pc, #4]	; (209f0 <metal_sys_finish+0x8>)
   209ea:	f7ff bf1d 	b.w	20828 <metal_bus_unregister>
   209ee:	bf00      	nop
   209f0:	20008718 	.word	0x20008718

000209f4 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   209f4:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   209f6:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   209f8:	2b06      	cmp	r3, #6
{
   209fa:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   209fc:	bf88      	it	hi
   209fe:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   20a00:	4b09      	ldr	r3, [pc, #36]	; (20a28 <metal_zephyr_log_handler+0x34>)
{
   20a02:	ac05      	add	r4, sp, #20
   20a04:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   20a08:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   20a0c:	4807      	ldr	r0, [pc, #28]	; (20a2c <metal_zephyr_log_handler+0x38>)
   20a0e:	f009 fc92 	bl	2a336 <printk>

	va_start(args, format);
	vprintk(format, args);
   20a12:	4621      	mov	r1, r4
   20a14:	4628      	mov	r0, r5
	va_start(args, format);
   20a16:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   20a18:	f7eb ff98 	bl	c94c <vprintk>
	va_end(args);
}
   20a1c:	b002      	add	sp, #8
   20a1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20a22:	b003      	add	sp, #12
   20a24:	4770      	bx	lr
   20a26:	bf00      	nop
   20a28:	000324d4 	.word	0x000324d4
   20a2c:	0003280c 	.word	0x0003280c

00020a30 <lfs_dir_traverse_filter>:
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
   20a30:	4a18      	ldr	r2, [pc, #96]	; (20a94 <lfs_dir_traverse_filter+0x64>)
   20a32:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
        lfs_tag_t tag, const void *buffer) {
   20a36:	b530      	push	{r4, r5, lr}
            : LFS_MKTAG(0x700, 0x3ff, 0);
   20a38:	4c17      	ldr	r4, [pc, #92]	; (20a98 <lfs_dir_traverse_filter+0x68>)
   20a3a:	bf18      	it	ne
   20a3c:	4614      	movne	r4, r2

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
   20a3e:	6803      	ldr	r3, [r0, #0]
   20a40:	ea83 0501 	eor.w	r5, r3, r1
   20a44:	4225      	tst	r5, r4
   20a46:	d00d      	beq.n	20a64 <lfs_dir_traverse_filter+0x34>
    return ((int32_t)(tag << 22) >> 22) == -1;
   20a48:	f343 0409 	sbfx	r4, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
   20a4c:	3401      	adds	r4, #1
   20a4e:	d009      	beq.n	20a64 <lfs_dir_traverse_filter+0x34>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
   20a50:	ea01 0402 	and.w	r4, r1, r2
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
   20a54:	4a11      	ldr	r2, [pc, #68]	; (20a9c <lfs_dir_traverse_filter+0x6c>)
   20a56:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   20a58:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
   20a5c:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
   20a60:	4294      	cmp	r4, r2
   20a62:	d103      	bne.n	20a6c <lfs_dir_traverse_filter+0x3c>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
   20a64:	2300      	movs	r3, #0
   20a66:	6003      	str	r3, [r0, #0]
        return true;
   20a68:	2001      	movs	r0, #1
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
}
   20a6a:	bd30      	pop	{r4, r5, pc}
    return (tag & 0x70000000) >> 20;
   20a6c:	0d0a      	lsrs	r2, r1, #20
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   20a6e:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
   20a72:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   20a76:	d105      	bne.n	20a84 <lfs_dir_traverse_filter+0x54>
   20a78:	f3c3 2489 	ubfx	r4, r3, #10, #10
   20a7c:	f3c1 2189 	ubfx	r1, r1, #10, #10
   20a80:	428c      	cmp	r4, r1
   20a82:	d201      	bcs.n	20a88 <lfs_dir_traverse_filter+0x58>
    return false;
   20a84:	2000      	movs	r0, #0
   20a86:	e7f0      	b.n	20a6a <lfs_dir_traverse_filter+0x3a>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   20a88:	b252      	sxtb	r2, r2
   20a8a:	eb03 2382 	add.w	r3, r3, r2, lsl #10
   20a8e:	6003      	str	r3, [r0, #0]
   20a90:	e7f8      	b.n	20a84 <lfs_dir_traverse_filter+0x54>
   20a92:	bf00      	nop
   20a94:	7ffffc00 	.word	0x7ffffc00
   20a98:	700ffc00 	.word	0x700ffc00
   20a9c:	000ffc00 	.word	0x000ffc00

00020aa0 <lfs_fs_preporphans>:
    return LFS_ERR_NOENT;
}
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
   20aa0:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
   20aa2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
   20aa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
   20aa8:	b96a      	cbnz	r2, 20ac6 <lfs_fs_preporphans+0x26>
   20aaa:	2900      	cmp	r1, #0
   20aac:	da0b      	bge.n	20ac6 <lfs_fs_preporphans+0x26>
   20aae:	490c      	ldr	r1, [pc, #48]	; (20ae0 <lfs_fs_preporphans+0x40>)
   20ab0:	480c      	ldr	r0, [pc, #48]	; (20ae4 <lfs_fs_preporphans+0x44>)
   20ab2:	f241 1354 	movw	r3, #4436	; 0x1154
   20ab6:	4a0c      	ldr	r2, [pc, #48]	; (20ae8 <lfs_fs_preporphans+0x48>)
   20ab8:	f009 fdff 	bl	2a6ba <assert_print>
   20abc:	f241 1154 	movw	r1, #4436	; 0x1154
   20ac0:	4809      	ldr	r0, [pc, #36]	; (20ae8 <lfs_fs_preporphans+0x48>)
   20ac2:	f009 fdf3 	bl	2a6ac <assert_post_action>
    lfs->gstate.tag += orphans;
   20ac6:	4419      	add	r1, r3
    return tag & 0x000003ff;
   20ac8:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
   20acc:	3b00      	subs	r3, #0
   20ace:	bf18      	it	ne
   20ad0:	2301      	movne	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   20ad2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   20ad6:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
   20ada:	6301      	str	r1, [r0, #48]	; 0x30
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));

    return 0;
}
   20adc:	2000      	movs	r0, #0
   20ade:	bd08      	pop	{r3, pc}
   20ae0:	00037aa4 	.word	0x00037aa4
   20ae4:	00032659 	.word	0x00032659
   20ae8:	00037a7e 	.word	0x00037a7e

00020aec <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
   20aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20af0:	4617      	mov	r7, r2
    if (block >= lfs->cfg->block_count ||
   20af2:	6e82      	ldr	r2, [r0, #104]	; 0x68
        void *buffer, lfs_size_t size) {
   20af4:	b087      	sub	sp, #28
   20af6:	468a      	mov	sl, r1
   20af8:	e9dd 4811 	ldrd	r4, r8, [sp, #68]	; 0x44
    if (block >= lfs->cfg->block_count ||
   20afc:	9910      	ldr	r1, [sp, #64]	; 0x40
        void *buffer, lfs_size_t size) {
   20afe:	9304      	str	r3, [sp, #16]
    if (block >= lfs->cfg->block_count ||
   20b00:	6a13      	ldr	r3, [r2, #32]
        void *buffer, lfs_size_t size) {
   20b02:	4681      	mov	r9, r0
    if (block >= lfs->cfg->block_count ||
   20b04:	428b      	cmp	r3, r1
        void *buffer, lfs_size_t size) {
   20b06:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
   20b08:	f240 80bc 	bls.w	20c84 <lfs_bd_read+0x198>
   20b0c:	69d2      	ldr	r2, [r2, #28]
            off+size > lfs->cfg->block_size) {
   20b0e:	19a3      	adds	r3, r4, r6
    if (block >= lfs->cfg->block_count ||
   20b10:	4293      	cmp	r3, r2
   20b12:	f200 80b7 	bhi.w	20c84 <lfs_bd_read+0x198>
	return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment)
{
	return lfs_aligndown(a + alignment-1, alignment);
   20b16:	9b04      	ldr	r3, [sp, #16]
   20b18:	3b01      	subs	r3, #1
   20b1a:	9305      	str	r3, [sp, #20]
    while (size > 0) {
   20b1c:	b30e      	cbz	r6, 20b62 <lfs_bd_read+0x76>
        if (pcache && block == pcache->block &&
   20b1e:	f1ba 0f00 	cmp.w	sl, #0
   20b22:	d03e      	beq.n	20ba2 <lfs_bd_read+0xb6>
   20b24:	f8da 3000 	ldr.w	r3, [sl]
   20b28:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20b2a:	429a      	cmp	r2, r3
   20b2c:	d139      	bne.n	20ba2 <lfs_bd_read+0xb6>
                off < pcache->off + pcache->size) {
   20b2e:	e9da 5301 	ldrd	r5, r3, [sl, #4]
   20b32:	eb05 0b03 	add.w	fp, r5, r3
        if (pcache && block == pcache->block &&
   20b36:	45a3      	cmp	fp, r4
   20b38:	d933      	bls.n	20ba2 <lfs_bd_read+0xb6>
            if (off >= pcache->off) {
   20b3a:	42a5      	cmp	r5, r4
   20b3c:	d813      	bhi.n	20b66 <lfs_bd_read+0x7a>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   20b3e:	ebab 0b04 	sub.w	fp, fp, r4
	return (a < b) ? a : b;
   20b42:	45b3      	cmp	fp, r6
   20b44:	bf28      	it	cs
   20b46:	46b3      	movcs	fp, r6
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   20b48:	f8da 100c 	ldr.w	r1, [sl, #12]
   20b4c:	1b65      	subs	r5, r4, r5
   20b4e:	4640      	mov	r0, r8
   20b50:	465a      	mov	r2, fp
   20b52:	4429      	add	r1, r5
   20b54:	f00f fd0b 	bl	3056e <memcpy>
    while (size > 0) {
   20b58:	ebb6 060b 	subs.w	r6, r6, fp
                data += diff;
   20b5c:	44d8      	add	r8, fp
                off += diff;
   20b5e:	445c      	add	r4, fp
    while (size > 0) {
   20b60:	d1e0      	bne.n	20b24 <lfs_bd_read+0x38>
    return 0;
   20b62:	2000      	movs	r0, #0
   20b64:	e08b      	b.n	20c7e <lfs_bd_read+0x192>
            diff = lfs_min(diff, pcache->off-off);
   20b66:	1b2d      	subs	r5, r5, r4
   20b68:	42b5      	cmp	r5, r6
   20b6a:	bf28      	it	cs
   20b6c:	4635      	movcs	r5, r6
        if (block == rcache->block &&
   20b6e:	683b      	ldr	r3, [r7, #0]
   20b70:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20b72:	429a      	cmp	r2, r3
   20b74:	d11b      	bne.n	20bae <lfs_bd_read+0xc2>
                off < rcache->off + rcache->size) {
   20b76:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
   20b7a:	440b      	add	r3, r1
        if (block == rcache->block &&
   20b7c:	429c      	cmp	r4, r3
   20b7e:	d216      	bcs.n	20bae <lfs_bd_read+0xc2>
            if (off >= rcache->off) {
   20b80:	428c      	cmp	r4, r1
   20b82:	d310      	bcc.n	20ba6 <lfs_bd_read+0xba>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   20b84:	1b1b      	subs	r3, r3, r4
   20b86:	429d      	cmp	r5, r3
   20b88:	bf28      	it	cs
   20b8a:	461d      	movcs	r5, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   20b8c:	68fb      	ldr	r3, [r7, #12]
   20b8e:	1a61      	subs	r1, r4, r1
   20b90:	4640      	mov	r0, r8
   20b92:	462a      	mov	r2, r5
   20b94:	4419      	add	r1, r3
   20b96:	f00f fcea 	bl	3056e <memcpy>
                data += diff;
   20b9a:	44a8      	add	r8, r5
                off += diff;
   20b9c:	442c      	add	r4, r5
                size -= diff;
   20b9e:	1b76      	subs	r6, r6, r5
                continue;
   20ba0:	e7bc      	b.n	20b1c <lfs_bd_read+0x30>
   20ba2:	4635      	mov	r5, r6
   20ba4:	e7e3      	b.n	20b6e <lfs_bd_read+0x82>
            diff = lfs_min(diff, rcache->off-off);
   20ba6:	1b09      	subs	r1, r1, r4
   20ba8:	428d      	cmp	r5, r1
   20baa:	bf28      	it	cs
   20bac:	460d      	movcs	r5, r1
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
   20bae:	9b04      	ldr	r3, [sp, #16]
   20bb0:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
   20bb4:	42b3      	cmp	r3, r6
   20bb6:	d81e      	bhi.n	20bf6 <lfs_bd_read+0x10a>
   20bb8:	6943      	ldr	r3, [r0, #20]
   20bba:	fbb4 f2f3 	udiv	r2, r4, r3
   20bbe:	fb03 4212 	mls	r2, r3, r2, r4
   20bc2:	b9c2      	cbnz	r2, 20bf6 <lfs_bd_read+0x10a>
   20bc4:	42b3      	cmp	r3, r6
   20bc6:	d816      	bhi.n	20bf6 <lfs_bd_read+0x10a>
	return a - (a % alignment);
   20bc8:	fbb5 f2f3 	udiv	r2, r5, r3
   20bcc:	fb03 5312 	mls	r3, r3, r2, r5
   20bd0:	eba5 0b03 	sub.w	fp, r5, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
   20bd4:	f8cd b000 	str.w	fp, [sp]
   20bd8:	9303      	str	r3, [sp, #12]
   20bda:	6843      	ldr	r3, [r0, #4]
   20bdc:	4622      	mov	r2, r4
   20bde:	469c      	mov	ip, r3
   20be0:	9910      	ldr	r1, [sp, #64]	; 0x40
   20be2:	4643      	mov	r3, r8
   20be4:	47e0      	blx	ip
            if (err) {
   20be6:	2800      	cmp	r0, #0
   20be8:	d149      	bne.n	20c7e <lfs_bd_read+0x192>
            size -= diff;
   20bea:	9b03      	ldr	r3, [sp, #12]
            data += diff;
   20bec:	44d8      	add	r8, fp
            size -= diff;
   20bee:	1b5b      	subs	r3, r3, r5
            off += diff;
   20bf0:	445c      	add	r4, fp
            size -= diff;
   20bf2:	441e      	add	r6, r3
            continue;
   20bf4:	e792      	b.n	20b1c <lfs_bd_read+0x30>
        LFS_ASSERT(block < lfs->cfg->block_count);
   20bf6:	6a03      	ldr	r3, [r0, #32]
   20bf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20bfa:	429a      	cmp	r2, r3
   20bfc:	d309      	bcc.n	20c12 <lfs_bd_read+0x126>
   20bfe:	4923      	ldr	r1, [pc, #140]	; (20c8c <lfs_bd_read+0x1a0>)
   20c00:	236f      	movs	r3, #111	; 0x6f
   20c02:	4a23      	ldr	r2, [pc, #140]	; (20c90 <lfs_bd_read+0x1a4>)
   20c04:	4823      	ldr	r0, [pc, #140]	; (20c94 <lfs_bd_read+0x1a8>)
   20c06:	f009 fd58 	bl	2a6ba <assert_print>
   20c0a:	216f      	movs	r1, #111	; 0x6f
        LFS_ASSERT(err <= 0);
   20c0c:	4820      	ldr	r0, [pc, #128]	; (20c90 <lfs_bd_read+0x1a4>)
   20c0e:	f009 fd4d 	bl	2a6ac <assert_post_action>
        rcache->block = block;
   20c12:	9b10      	ldr	r3, [sp, #64]	; 0x40
	return lfs_aligndown(a + alignment-1, alignment);
   20c14:	9905      	ldr	r1, [sp, #20]
   20c16:	603b      	str	r3, [r7, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   20c18:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
	return a - (a % alignment);
   20c1c:	695a      	ldr	r2, [r3, #20]
   20c1e:	fbb4 f3f2 	udiv	r3, r4, r2
   20c22:	fb02 4313 	mls	r3, r2, r3, r4
   20c26:	1ae2      	subs	r2, r4, r3
   20c28:	607a      	str	r2, [r7, #4]
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   20c2a:	f8d9 5068 	ldr.w	r5, [r9, #104]	; 0x68
        rcache->size = lfs_min(
   20c2e:	1b1b      	subs	r3, r3, r4
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   20c30:	f8d5 c014 	ldr.w	ip, [r5, #20]
	return lfs_aligndown(a + alignment-1, alignment);
   20c34:	eb01 000c 	add.w	r0, r1, ip
   20c38:	4420      	add	r0, r4
	return a - (a % alignment);
   20c3a:	fbb0 f1fc 	udiv	r1, r0, ip
   20c3e:	fb0c 0111 	mls	r1, ip, r1, r0
   20c42:	1a40      	subs	r0, r0, r1
	return (a < b) ? a : b;
   20c44:	69e9      	ldr	r1, [r5, #28]
        rcache->size = lfs_min(
   20c46:	4288      	cmp	r0, r1
   20c48:	bf94      	ite	ls
   20c4a:	181b      	addls	r3, r3, r0
   20c4c:	185b      	addhi	r3, r3, r1
   20c4e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20c50:	428b      	cmp	r3, r1
   20c52:	bf28      	it	cs
   20c54:	460b      	movcs	r3, r1
   20c56:	60bb      	str	r3, [r7, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
   20c58:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
   20c5c:	9300      	str	r3, [sp, #0]
   20c5e:	6845      	ldr	r5, [r0, #4]
   20c60:	68fb      	ldr	r3, [r7, #12]
   20c62:	9910      	ldr	r1, [sp, #64]	; 0x40
   20c64:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
   20c66:	2800      	cmp	r0, #0
   20c68:	dd07      	ble.n	20c7a <lfs_bd_read+0x18e>
   20c6a:	490b      	ldr	r1, [pc, #44]	; (20c98 <lfs_bd_read+0x1ac>)
   20c6c:	237a      	movs	r3, #122	; 0x7a
   20c6e:	4a08      	ldr	r2, [pc, #32]	; (20c90 <lfs_bd_read+0x1a4>)
   20c70:	4808      	ldr	r0, [pc, #32]	; (20c94 <lfs_bd_read+0x1a8>)
   20c72:	f009 fd22 	bl	2a6ba <assert_print>
   20c76:	217a      	movs	r1, #122	; 0x7a
   20c78:	e7c8      	b.n	20c0c <lfs_bd_read+0x120>
        if (err) {
   20c7a:	f43f af50 	beq.w	20b1e <lfs_bd_read+0x32>
}
   20c7e:	b007      	add	sp, #28
   20c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
   20c84:	f06f 0053 	mvn.w	r0, #83	; 0x53
   20c88:	e7f9      	b.n	20c7e <lfs_bd_read+0x192>
   20c8a:	bf00      	nop
   20c8c:	00037d92 	.word	0x00037d92
   20c90:	00037a7e 	.word	0x00037a7e
   20c94:	00032659 	.word	0x00032659
   20c98:	00037ad6 	.word	0x00037ad6

00020c9c <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
   20c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ca0:	4606      	mov	r6, r0
   20ca2:	b087      	sub	sp, #28
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   20ca4:	303c      	adds	r0, #60	; 0x3c
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
   20ca6:	4691      	mov	r9, r2
   20ca8:	460f      	mov	r7, r1
   20caa:	469a      	mov	sl, r3
    lfs_tag_t ntag = dir->etag;
   20cac:	e9d1 8303 	ldrd	r8, r3, [r1, #12]
   20cb0:	9305      	str	r3, [sp, #20]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   20cb2:	f00e f90c 	bl	2eece <lfs_gstate_hasmovehere>
    return (tag & 0x000ffc00) >> 10;
   20cb6:	f3c9 2b89 	ubfx	fp, r9, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   20cba:	4604      	mov	r4, r0
   20cbc:	b158      	cbz	r0, 20cd6 <lfs_dir_getslice+0x3a>
   20cbe:	f1bb 0f00 	cmp.w	fp, #0
   20cc2:	d078      	beq.n	20db6 <lfs_dir_getslice+0x11a>
    return (tag & 0x000ffc00) >> 10;
   20cc4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        gdiff -= LFS_MKTAG(0, 1, 0);
   20cc6:	4c3d      	ldr	r4, [pc, #244]	; (20dbc <lfs_dir_getslice+0x120>)
            lfs_tag_id(gmask) != 0 &&
   20cc8:	f3c3 2289 	ubfx	r2, r3, #10, #10
   20ccc:	f3ca 2389 	ubfx	r3, sl, #10, #10
        gdiff -= LFS_MKTAG(0, 1, 0);
   20cd0:	429a      	cmp	r2, r3
   20cd2:	bf88      	it	hi
   20cd4:	2400      	movhi	r4, #0
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
   20cd6:	9d05      	ldr	r5, [sp, #20]
   20cd8:	4628      	mov	r0, r5
   20cda:	f00e f8e0 	bl	2ee9e <lfs_tag_dsize>
   20cde:	1d03      	adds	r3, r0, #4
   20ce0:	4543      	cmp	r3, r8
   20ce2:	d834      	bhi.n	20d4e <lfs_dir_getslice+0xb2>
        int err = lfs_bd_read(lfs,
   20ce4:	2304      	movs	r3, #4
        off -= lfs_tag_dsize(ntag);
   20ce6:	eba8 0800 	sub.w	r8, r8, r0
        int err = lfs_bd_read(lfs,
   20cea:	9303      	str	r3, [sp, #12]
   20cec:	ab05      	add	r3, sp, #20
   20cee:	e9cd 8301 	strd	r8, r3, [sp, #4]
   20cf2:	683b      	ldr	r3, [r7, #0]
   20cf4:	4632      	mov	r2, r6
   20cf6:	9300      	str	r3, [sp, #0]
   20cf8:	2100      	movs	r1, #0
   20cfa:	2304      	movs	r3, #4
   20cfc:	4630      	mov	r0, r6
   20cfe:	f7ff fef5 	bl	20aec <lfs_bd_read>
        if (err) {
   20d02:	bb30      	cbnz	r0, 20d52 <lfs_dir_getslice+0xb6>
static inline uint32_t lfs_frombe32(uint32_t a)
{
#if defined(CONFIG_BIG_ENDIAN)
	return a;
#elif !defined(LFS_NO_INTRINSICS)
	return __builtin_bswap32(a);
   20d04:	9b05      	ldr	r3, [sp, #20]
   20d06:	ba1b      	rev	r3, r3
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
   20d08:	406b      	eors	r3, r5
   20d0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   20d0e:	9305      	str	r3, [sp, #20]
        if (lfs_tag_id(gmask) != 0 &&
   20d10:	f1bb 0f00 	cmp.w	fp, #0
   20d14:	d023      	beq.n	20d5e <lfs_dir_getslice+0xc2>
    return (tag & 0x70000000) >> 20;
   20d16:	0d2a      	lsrs	r2, r5, #20
        if (lfs_tag_id(gmask) != 0 &&
   20d18:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
   20d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   20d20:	d11d      	bne.n	20d5e <lfs_dir_getslice+0xc2>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
   20d22:	ebaa 0304 	sub.w	r3, sl, r4
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   20d26:	f3c3 2089 	ubfx	r0, r3, #10, #10
   20d2a:	f3c5 2189 	ubfx	r1, r5, #10, #10
   20d2e:	4288      	cmp	r0, r1
   20d30:	d315      	bcc.n	20d5e <lfs_dir_getslice+0xc2>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
   20d32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   20d36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   20d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   20d3e:	f023 0303 	bic.w	r3, r3, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
   20d42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   20d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   20d4a:	42ab      	cmp	r3, r5
   20d4c:	d104      	bne.n	20d58 <lfs_dir_getslice+0xbc>
                return LFS_ERR_NOENT;
   20d4e:	f06f 0001 	mvn.w	r0, #1
}
   20d52:	b007      	add	sp, #28
   20d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   20d58:	b252      	sxtb	r2, r2
   20d5a:	eb04 2482 	add.w	r4, r4, r2, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
   20d5e:	ebaa 0104 	sub.w	r1, sl, r4
   20d62:	4069      	eors	r1, r5
   20d64:	ea11 0109 	ands.w	r1, r1, r9
   20d68:	d1b5      	bne.n	20cd6 <lfs_dir_getslice+0x3a>
    return ((int32_t)(tag << 22) >> 22) == -1;
   20d6a:	f345 0309 	sbfx	r3, r5, #0, #10
            if (lfs_tag_isdelete(tag)) {
   20d6e:	3301      	adds	r3, #1
   20d70:	d0ed      	beq.n	20d4e <lfs_dir_getslice+0xb2>
	return (a < b) ? a : b;
   20d72:	9b12      	ldr	r3, [sp, #72]	; 0x48
    return tag & 0x000003ff;
   20d74:	f3c5 0909 	ubfx	r9, r5, #0, #10
   20d78:	4599      	cmp	r9, r3
   20d7a:	bf28      	it	cs
   20d7c:	4699      	movcs	r9, r3
            err = lfs_bd_read(lfs,
   20d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20d80:	f8cd 900c 	str.w	r9, [sp, #12]
   20d84:	9302      	str	r3, [sp, #8]
   20d86:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20d88:	4632      	mov	r2, r6
   20d8a:	3304      	adds	r3, #4
   20d8c:	4443      	add	r3, r8
   20d8e:	9301      	str	r3, [sp, #4]
   20d90:	683b      	ldr	r3, [r7, #0]
   20d92:	4630      	mov	r0, r6
   20d94:	9300      	str	r3, [sp, #0]
   20d96:	464b      	mov	r3, r9
   20d98:	f7ff fea8 	bl	20aec <lfs_bd_read>
            if (err) {
   20d9c:	2800      	cmp	r0, #0
   20d9e:	d1d8      	bne.n	20d52 <lfs_dir_getslice+0xb6>
__ssp_bos_icheck3(memset, void *, int)
   20da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20da2:	4601      	mov	r1, r0
   20da4:	eba3 0209 	sub.w	r2, r3, r9
   20da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20daa:	eb03 0009 	add.w	r0, r3, r9
   20dae:	f00f fc18 	bl	305e2 <memset>
            return tag + gdiff;
   20db2:	1960      	adds	r0, r4, r5
   20db4:	e7cd      	b.n	20d52 <lfs_dir_getslice+0xb6>
    lfs_stag_t gdiff = 0;
   20db6:	465c      	mov	r4, fp
   20db8:	e78d      	b.n	20cd6 <lfs_dir_getslice+0x3a>
   20dba:	bf00      	nop
   20dbc:	fffffc00 	.word	0xfffffc00

00020dc0 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
   20dc0:	b530      	push	{r4, r5, lr}
   20dc2:	b087      	sub	sp, #28
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
   20dc4:	ad03      	add	r5, sp, #12
        lfs_gstate_t *gstate) {
   20dc6:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
   20dc8:	4b08      	ldr	r3, [pc, #32]	; (20dec <lfs_dir_getgstate+0x2c>)
   20dca:	4a09      	ldr	r2, [pc, #36]	; (20df0 <lfs_dir_getgstate+0x30>)
   20dcc:	9500      	str	r5, [sp, #0]
   20dce:	f00e f8d3 	bl	2ef78 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
   20dd2:	2800      	cmp	r0, #0
   20dd4:	da04      	bge.n	20de0 <lfs_dir_getgstate+0x20>
   20dd6:	1c83      	adds	r3, r0, #2
   20dd8:	d100      	bne.n	20ddc <lfs_dir_getgstate+0x1c>
    return 0;
   20dda:	2000      	movs	r0, #0
}
   20ddc:	b007      	add	sp, #28
   20dde:	bd30      	pop	{r4, r5, pc}
        lfs_gstate_xor(gstate, &temp);
   20de0:	4629      	mov	r1, r5
   20de2:	4620      	mov	r0, r4
   20de4:	f00e f865 	bl	2eeb2 <lfs_gstate_xor>
   20de8:	e7f7      	b.n	20dda <lfs_dir_getgstate+0x1a>
   20dea:	bf00      	nop
   20dec:	7ff0000c 	.word	0x7ff0000c
   20df0:	7ff00000 	.word	0x7ff00000

00020df4 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
   20df4:	b5f0      	push	{r4, r5, r6, r7, lr}
        strcpy(info->name, "/");
   20df6:	f103 0c08 	add.w	ip, r3, #8
        uint16_t id, struct lfs_info *info) {
   20dfa:	461c      	mov	r4, r3
    if (id == 0x3ff) {
   20dfc:	f240 33ff 	movw	r3, #1023	; 0x3ff
   20e00:	429a      	cmp	r2, r3
        uint16_t id, struct lfs_info *info) {
   20e02:	4605      	mov	r5, r0
   20e04:	460e      	mov	r6, r1
   20e06:	b085      	sub	sp, #20
    if (id == 0x3ff) {
   20e08:	d107      	bne.n	20e1a <lfs_dir_getinfo+0x26>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   20e0a:	4b1a      	ldr	r3, [pc, #104]	; (20e74 <lfs_dir_getinfo+0x80>)
   20e0c:	881b      	ldrh	r3, [r3, #0]
   20e0e:	8123      	strh	r3, [r4, #8]
        info->type = LFS_TYPE_DIR;
   20e10:	2302      	movs	r3, #2
   20e12:	7023      	strb	r3, [r4, #0]
        return 0;
   20e14:	2000      	movs	r0, #0
}
   20e16:	b005      	add	sp, #20
   20e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
   20e1a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   20e1c:	0297      	lsls	r7, r2, #10
   20e1e:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
   20e20:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   20e24:	f8cd c000 	str.w	ip, [sp]
   20e28:	4a13      	ldr	r2, [pc, #76]	; (20e78 <lfs_dir_getinfo+0x84>)
   20e2a:	f00e f8a5 	bl	2ef78 <lfs_dir_get>
    if (tag < 0) {
   20e2e:	2800      	cmp	r0, #0
   20e30:	dbf1      	blt.n	20e16 <lfs_dir_getinfo+0x22>
    return (tag & 0x7ff00000) >> 20;
   20e32:	0d00      	lsrs	r0, r0, #20
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   20e34:	ab02      	add	r3, sp, #8
    info->type = lfs_tag_type3(tag);
   20e36:	7020      	strb	r0, [r4, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   20e38:	9300      	str	r3, [sp, #0]
   20e3a:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
   20e3e:	4631      	mov	r1, r6
   20e40:	4628      	mov	r0, r5
   20e42:	4a0e      	ldr	r2, [pc, #56]	; (20e7c <lfs_dir_getinfo+0x88>)
   20e44:	f043 0308 	orr.w	r3, r3, #8
   20e48:	f00e f896 	bl	2ef78 <lfs_dir_get>
    if (tag < 0) {
   20e4c:	2800      	cmp	r0, #0
   20e4e:	dbe2      	blt.n	20e16 <lfs_dir_getinfo+0x22>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   20e50:	f240 2302 	movw	r3, #514	; 0x202
   20e54:	ebb3 5f10 	cmp.w	r3, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
   20e58:	ea4f 5210 	mov.w	r2, r0, lsr #20
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   20e5c:	d102      	bne.n	20e64 <lfs_dir_getinfo+0x70>
        info->size = ctz.size;
   20e5e:	9b03      	ldr	r3, [sp, #12]
   20e60:	6063      	str	r3, [r4, #4]
   20e62:	e7d7      	b.n	20e14 <lfs_dir_getinfo+0x20>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   20e64:	f240 2301 	movw	r3, #513	; 0x201
   20e68:	429a      	cmp	r2, r3
   20e6a:	d1d3      	bne.n	20e14 <lfs_dir_getinfo+0x20>
    return tag & 0x000003ff;
   20e6c:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
   20e70:	6060      	str	r0, [r4, #4]
   20e72:	e7cf      	b.n	20e14 <lfs_dir_getinfo+0x20>
   20e74:	00033896 	.word	0x00033896
   20e78:	780ffc00 	.word	0x780ffc00
   20e7c:	700ffc00 	.word	0x700ffc00

00020e80 <lfs_dir_traverse.constprop.0>:
static int lfs_dir_traverse(lfs_t *lfs,
   20e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned sp = 0;
   20e84:	2600      	movs	r6, #0
static int lfs_dir_traverse(lfs_t *lfs,
   20e86:	4689      	mov	r9, r1
    unsigned sp = 0;
   20e88:	46b0      	mov	r8, r6
static int lfs_dir_traverse(lfs_t *lfs,
   20e8a:	b0ab      	sub	sp, #172	; 0xac
   20e8c:	9304      	str	r3, [sp, #16]
   20e8e:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
   20e92:	f8bd b0dc 	ldrh.w	fp, [sp, #220]	; 0xdc
   20e96:	f9bd a0e4 	ldrsh.w	sl, [sp, #228]	; 0xe4
   20e9a:	9006      	str	r0, [sp, #24]
   20e9c:	9305      	str	r3, [sp, #20]
            if (off+lfs_tag_dsize(ptag) < dir->off) {
   20e9e:	9804      	ldr	r0, [sp, #16]
   20ea0:	f00d fffd 	bl	2ee9e <lfs_tag_dsize>
   20ea4:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20ea8:	1887      	adds	r7, r0, r2
   20eaa:	429f      	cmp	r7, r3
   20eac:	d23a      	bcs.n	20f24 <lfs_dir_traverse.constprop.0+0xa4>
                int err = lfs_bd_read(lfs,
   20eae:	2304      	movs	r3, #4
   20eb0:	9303      	str	r3, [sp, #12]
   20eb2:	ab09      	add	r3, sp, #36	; 0x24
   20eb4:	e9cd 7301 	strd	r7, r3, [sp, #4]
   20eb8:	9a06      	ldr	r2, [sp, #24]
   20eba:	f8d9 3000 	ldr.w	r3, [r9]
   20ebe:	2100      	movs	r1, #0
   20ec0:	9300      	str	r3, [sp, #0]
   20ec2:	4610      	mov	r0, r2
   20ec4:	2304      	movs	r3, #4
   20ec6:	f7ff fe11 	bl	20aec <lfs_bd_read>
                if (err) {
   20eca:	2800      	cmp	r0, #0
   20ecc:	f040 8125 	bne.w	2111a <lfs_dir_traverse.constprop.0+0x29a>
	return __builtin_bswap32(a);
   20ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
   20ed2:	9a04      	ldr	r2, [sp, #16]
   20ed4:	ba1b      	rev	r3, r3
   20ed6:	405a      	eors	r2, r3
   20ed8:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
   20edc:	9309      	str	r3, [sp, #36]	; 0x24
   20ede:	9304      	str	r3, [sp, #16]
                disk.block = dir->pair[0];
   20ee0:	f8d9 3000 	ldr.w	r3, [r9]
                buffer = &disk;
   20ee4:	ad0a      	add	r5, sp, #40	; 0x28
                disk.block = dir->pair[0];
   20ee6:	930a      	str	r3, [sp, #40]	; 0x28
                disk.off = off+sizeof(lfs_tag_t);
   20ee8:	1d3b      	adds	r3, r7, #4
   20eea:	930b      	str	r3, [sp, #44]	; 0x2c
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
   20eec:	9909      	ldr	r1, [sp, #36]	; 0x24
   20eee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   20ef0:	ea81 0208 	eor.w	r2, r1, r8
   20ef4:	401a      	ands	r2, r3
   20ef6:	4b8a      	ldr	r3, [pc, #552]	; (21120 <lfs_dir_traverse.constprop.0+0x2a0>)
   20ef8:	401a      	ands	r2, r3
   20efa:	d159      	bne.n	20fb0 <lfs_dir_traverse.constprop.0+0x130>
            if (lfs_tag_id(tmask) != 0) {
   20efc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   20efe:	f3c3 2389 	ubfx	r3, r3, #10, #10
   20f02:	2b00      	cmp	r3, #0
   20f04:	f000 80af 	beq.w	21066 <lfs_dir_traverse.constprop.0+0x1e6>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
   20f08:	2e02      	cmp	r6, #2
   20f0a:	d91b      	bls.n	20f44 <lfs_dir_traverse.constprop.0+0xc4>
   20f0c:	4985      	ldr	r1, [pc, #532]	; (21124 <lfs_dir_traverse.constprop.0+0x2a4>)
   20f0e:	4886      	ldr	r0, [pc, #536]	; (21128 <lfs_dir_traverse.constprop.0+0x2a8>)
   20f10:	f44f 7355 	mov.w	r3, #852	; 0x354
   20f14:	4a85      	ldr	r2, [pc, #532]	; (2112c <lfs_dir_traverse.constprop.0+0x2ac>)
   20f16:	f009 fbd0 	bl	2a6ba <assert_print>
   20f1a:	f44f 7155 	mov.w	r1, #852	; 0x354
   20f1e:	4883      	ldr	r0, [pc, #524]	; (2112c <lfs_dir_traverse.constprop.0+0x2ac>)
   20f20:	f009 fbc4 	bl	2a6ac <assert_post_action>
            } else if (attrcount > 0) {
   20f24:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   20f26:	2b00      	cmp	r3, #0
   20f28:	f340 80f5 	ble.w	21116 <lfs_dir_traverse.constprop.0+0x296>
                tag = attrs[0].tag;
   20f2c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   20f2e:	4617      	mov	r7, r2
   20f30:	681b      	ldr	r3, [r3, #0]
   20f32:	9309      	str	r3, [sp, #36]	; 0x24
                buffer = attrs[0].buffer;
   20f34:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   20f36:	685d      	ldr	r5, [r3, #4]
                attrs += 1;
   20f38:	3308      	adds	r3, #8
   20f3a:	9334      	str	r3, [sp, #208]	; 0xd0
                attrcount -= 1;
   20f3c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   20f3e:	3b01      	subs	r3, #1
   20f40:	9335      	str	r3, [sp, #212]	; 0xd4
   20f42:	e7d3      	b.n	20eec <lfs_dir_traverse.constprop.0+0x6c>
                stack[sp] = (struct lfs_dir_traverse){
   20f44:	243c      	movs	r4, #60	; 0x3c
   20f46:	4374      	muls	r4, r6
   20f48:	9804      	ldr	r0, [sp, #16]
   20f4a:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   20f4e:	446b      	add	r3, sp
   20f50:	f843 0c70 	str.w	r0, [r3, #-112]
   20f54:	9834      	ldr	r0, [sp, #208]	; 0xd0
   20f56:	f823 bc5c 	strh.w	fp, [r3, #-92]
   20f5a:	f843 0c6c 	str.w	r0, [r3, #-108]
   20f5e:	9835      	ldr	r0, [sp, #212]	; 0xd4
   20f60:	f823 ac58 	strh.w	sl, [r3, #-88]
   20f64:	f843 0c68 	str.w	r0, [r3, #-104]
   20f68:	9836      	ldr	r0, [sp, #216]	; 0xd8
                diff = 0;
   20f6a:	4692      	mov	sl, r2
                stack[sp] = (struct lfs_dir_traverse){
   20f6c:	e943 0819 	strd	r0, r8, [r3, #-100]	; 0x64
                begin = 0;
   20f70:	4693      	mov	fp, r2
                ttag = 0;
   20f72:	4690      	mov	r8, r2
                stack[sp] = (struct lfs_dir_traverse){
   20f74:	9805      	ldr	r0, [sp, #20]
   20f76:	f843 5c48 	str.w	r5, [r3, #-72]
   20f7a:	f823 0c5a 	strh.w	r0, [r3, #-90]
   20f7e:	983a      	ldr	r0, [sp, #232]	; 0xe8
   20f80:	e943 971e 	strd	r9, r7, [r3, #-120]	; 0x78
   20f84:	f843 0c54 	str.w	r0, [r3, #-84]
   20f88:	983b      	ldr	r0, [sp, #236]	; 0xec
                sp += 1;
   20f8a:	3601      	adds	r6, #1
                stack[sp] = (struct lfs_dir_traverse){
   20f8c:	e943 0114 	strd	r0, r1, [r3, #-80]	; 0x50
   20f90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   20f94:	3b44      	subs	r3, #68	; 0x44
   20f96:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
   20f9a:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   20f9e:	eb0d 0403 	add.w	r4, sp, r3
   20fa2:	f1a4 034c 	sub.w	r3, r4, #76	; 0x4c
   20fa6:	933b      	str	r3, [sp, #236]	; 0xec
                cb = lfs_dir_traverse_filter;
   20fa8:	4b61      	ldr	r3, [pc, #388]	; (21130 <lfs_dir_traverse.constprop.0+0x2b0>)
                tmask = 0;
   20faa:	9236      	str	r2, [sp, #216]	; 0xd8
                cb = lfs_dir_traverse_filter;
   20fac:	933a      	str	r3, [sp, #232]	; 0xe8
                end = 0;
   20fae:	9205      	str	r2, [sp, #20]
            off = 0;
   20fb0:	463a      	mov	r2, r7
   20fb2:	e774      	b.n	20e9e <lfs_dir_traverse.constprop.0+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
   20fb4:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
   20fb8:	d11c      	bne.n	20ff4 <lfs_dir_traverse.constprop.0+0x174>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   20fba:	2400      	movs	r4, #0
   20fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return tag & 0x000003ff;
   20fbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   20fc2:	4294      	cmp	r4, r2
   20fc4:	d2f4      	bcs.n	20fb0 <lfs_dir_traverse.constprop.0+0x130>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
   20fc6:	68a9      	ldr	r1, [r5, #8]
   20fc8:	f3c3 2389 	ubfx	r3, r3, #10, #10
   20fcc:	4453      	add	r3, sl
   20fce:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
   20fd2:	782b      	ldrb	r3, [r5, #0]
   20fd4:	686a      	ldr	r2, [r5, #4]
   20fd6:	f503 7340 	add.w	r3, r3, #768	; 0x300
   20fda:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
   20fde:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
   20fe2:	4798      	blx	r3
                if (res < 0) {
   20fe4:	2800      	cmp	r0, #0
   20fe6:	f2c0 8098 	blt.w	2111a <lfs_dir_traverse.constprop.0+0x29a>
                if (res) {
   20fea:	f105 050c 	add.w	r5, r5, #12
   20fee:	d1df      	bne.n	20fb0 <lfs_dir_traverse.constprop.0+0x130>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   20ff0:	3401      	adds	r4, #1
   20ff2:	e7e3      	b.n	20fbc <lfs_dir_traverse.constprop.0+0x13c>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
   20ff4:	eb03 218a 	add.w	r1, r3, sl, lsl #10
   20ff8:	462a      	mov	r2, r5
   20ffa:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
   20ffe:	4798      	blx	r3
            if (res < 0) {
   21000:	2800      	cmp	r0, #0
   21002:	f2c0 808a 	blt.w	2111a <lfs_dir_traverse.constprop.0+0x29a>
            if (res) {
   21006:	d0d3      	beq.n	20fb0 <lfs_dir_traverse.constprop.0+0x130>
    if (sp > 0) {
   21008:	2e00      	cmp	r6, #0
   2100a:	f000 8086 	beq.w	2111a <lfs_dir_traverse.constprop.0+0x29a>
        dir         = stack[sp-1].dir;
   2100e:	233c      	movs	r3, #60	; 0x3c
   21010:	aa2a      	add	r2, sp, #168	; 0xa8
   21012:	3e01      	subs	r6, #1
   21014:	fb03 2306 	mla	r3, r3, r6, r2
        ptag        = stack[sp-1].ptag;
   21018:	f853 2c70 	ldr.w	r2, [r3, #-112]
        disk        = stack[sp-1].disk;
   2101c:	e953 0111 	ldrd	r0, r1, [r3, #-68]	; 0x44
        ptag        = stack[sp-1].ptag;
   21020:	9204      	str	r2, [sp, #16]
        attrs       = stack[sp-1].attrs;
   21022:	f853 2c6c 	ldr.w	r2, [r3, #-108]
        ttag        = stack[sp-1].ttag;
   21026:	f853 8c60 	ldr.w	r8, [r3, #-96]
        attrs       = stack[sp-1].attrs;
   2102a:	9234      	str	r2, [sp, #208]	; 0xd0
        attrcount   = stack[sp-1].attrcount;
   2102c:	f853 2c68 	ldr.w	r2, [r3, #-104]
        begin       = stack[sp-1].begin;
   21030:	f833 bc5c 	ldrh.w	fp, [r3, #-92]
        attrcount   = stack[sp-1].attrcount;
   21034:	9235      	str	r2, [sp, #212]	; 0xd4
        tmask       = stack[sp-1].tmask;
   21036:	f853 2c64 	ldr.w	r2, [r3, #-100]
        diff        = stack[sp-1].diff;
   2103a:	f933 ac58 	ldrsh.w	sl, [r3, #-88]
        tmask       = stack[sp-1].tmask;
   2103e:	9236      	str	r2, [sp, #216]	; 0xd8
        end         = stack[sp-1].end;
   21040:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
        buffer      = stack[sp-1].buffer;
   21044:	f853 5c48 	ldr.w	r5, [r3, #-72]
        end         = stack[sp-1].end;
   21048:	9205      	str	r2, [sp, #20]
        cb          = stack[sp-1].cb;
   2104a:	f853 2c54 	ldr.w	r2, [r3, #-84]
        off         = stack[sp-1].off;
   2104e:	e953 971e 	ldrd	r9, r7, [r3, #-120]	; 0x78
        cb          = stack[sp-1].cb;
   21052:	923a      	str	r2, [sp, #232]	; 0xe8
        data        = stack[sp-1].data;
   21054:	f853 2c50 	ldr.w	r2, [r3, #-80]
   21058:	923b      	str	r2, [sp, #236]	; 0xec
        tag         = stack[sp-1].tag;
   2105a:	f853 2c4c 	ldr.w	r2, [r3, #-76]
   2105e:	9209      	str	r2, [sp, #36]	; 0x24
        disk        = stack[sp-1].disk;
   21060:	aa0a      	add	r2, sp, #40	; 0x28
   21062:	e882 0003 	stmia.w	r2, {r0, r1}
        if (lfs_tag_id(tmask) != 0 &&
   21066:	9a36      	ldr	r2, [sp, #216]	; 0xd8
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
   21068:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (lfs_tag_id(tmask) != 0 &&
   2106a:	f3c2 2289 	ubfx	r2, r2, #10, #10
   2106e:	b132      	cbz	r2, 2107e <lfs_dir_traverse.constprop.0+0x1fe>
    return (tag & 0x000ffc00) >> 10;
   21070:	f3c3 2289 	ubfx	r2, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
   21074:	455a      	cmp	r2, fp
   21076:	d39b      	bcc.n	20fb0 <lfs_dir_traverse.constprop.0+0x130>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
   21078:	9905      	ldr	r1, [sp, #20]
   2107a:	428a      	cmp	r2, r1
   2107c:	d298      	bcs.n	20fb0 <lfs_dir_traverse.constprop.0+0x130>
    return (tag & 0x7ff00000) >> 20;
   2107e:	f3c3 520a 	ubfx	r2, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
   21082:	2a00      	cmp	r2, #0
   21084:	d094      	beq.n	20fb0 <lfs_dir_traverse.constprop.0+0x130>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
   21086:	f240 1101 	movw	r1, #257	; 0x101
   2108a:	428a      	cmp	r2, r1
   2108c:	d192      	bne.n	20fb4 <lfs_dir_traverse.constprop.0+0x134>
            if (cb == lfs_dir_traverse_filter) {
   2108e:	4a28      	ldr	r2, [pc, #160]	; (21130 <lfs_dir_traverse.constprop.0+0x2b0>)
   21090:	9307      	str	r3, [sp, #28]
   21092:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   21094:	4293      	cmp	r3, r2
   21096:	d08b      	beq.n	20fb0 <lfs_dir_traverse.constprop.0+0x130>
            stack[sp] = (struct lfs_dir_traverse){
   21098:	223c      	movs	r2, #60	; 0x3c
   2109a:	ab2a      	add	r3, sp, #168	; 0xa8
   2109c:	fb02 3406 	mla	r4, r2, r6, r3
   210a0:	2100      	movs	r1, #0
   210a2:	f1a4 0078 	sub.w	r0, r4, #120	; 0x78
   210a6:	f00f fa9c 	bl	305e2 <memset>
   210aa:	9b04      	ldr	r3, [sp, #16]
   210ac:	f824 bc5c 	strh.w	fp, [r4, #-92]
   210b0:	f844 3c70 	str.w	r3, [r4, #-112]
   210b4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   210b6:	f824 ac58 	strh.w	sl, [r4, #-88]
   210ba:	f844 3c6c 	str.w	r3, [r4, #-108]
   210be:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   210c0:	e944 971e 	strd	r9, r7, [r4, #-120]	; 0x78
   210c4:	f844 3c68 	str.w	r3, [r4, #-104]
   210c8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
            dir = buffer;
   210ca:	46a9      	mov	r9, r5
            stack[sp] = (struct lfs_dir_traverse){
   210cc:	e944 3819 	strd	r3, r8, [r4, #-100]	; 0x64
   210d0:	9b05      	ldr	r3, [sp, #20]
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
   210d2:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
            stack[sp] = (struct lfs_dir_traverse){
   210d6:	f824 3c5a 	strh.w	r3, [r4, #-90]
   210da:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
            off = 0;
   210dc:	2700      	movs	r7, #0
            stack[sp] = (struct lfs_dir_traverse){
   210de:	f844 3c54 	str.w	r3, [r4, #-84]
   210e2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
            sp += 1;
   210e4:	3601      	adds	r6, #1
            stack[sp] = (struct lfs_dir_traverse){
   210e6:	f844 3c50 	str.w	r3, [r4, #-80]
            uint16_t fromid = lfs_tag_size(tag);
   210ea:	9b07      	ldr	r3, [sp, #28]
   210ec:	f3c3 0b09 	ubfx	fp, r3, #0, #10
    return (tag & 0x000ffc00) >> 10;
   210f0:	f3c3 2389 	ubfx	r3, r3, #10, #10
            diff = toid-fromid+diff;
   210f4:	eba3 030b 	sub.w	r3, r3, fp
   210f8:	4453      	add	r3, sl
   210fa:	fa0f fa83 	sxth.w	sl, r3
            attrcount = 0;
   210fe:	2300      	movs	r3, #0
            end = fromid+1;
   21100:	f10b 0201 	add.w	r2, fp, #1
   21104:	9205      	str	r2, [sp, #20]
            attrcount = 0;
   21106:	4a0b      	ldr	r2, [pc, #44]	; (21134 <lfs_dir_traverse.constprop.0+0x2b4>)
            attrs = NULL;
   21108:	9334      	str	r3, [sp, #208]	; 0xd0
            attrcount = 0;
   2110a:	e9cd 3235 	strd	r3, r2, [sp, #212]	; 0xd4
            ptag = 0xffffffff;
   2110e:	f04f 33ff 	mov.w	r3, #4294967295
   21112:	9304      	str	r3, [sp, #16]
   21114:	e74c      	b.n	20fb0 <lfs_dir_traverse.constprop.0+0x130>
                res = 0;
   21116:	2000      	movs	r0, #0
   21118:	e776      	b.n	21008 <lfs_dir_traverse.constprop.0+0x188>
}
   2111a:	b02b      	add	sp, #172	; 0xac
   2111c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21120:	7ff00000 	.word	0x7ff00000
   21124:	00037adf 	.word	0x00037adf
   21128:	00032659 	.word	0x00032659
   2112c:	00037a7e 	.word	0x00037a7e
   21130:	00020a31 	.word	0x00020a31
   21134:	600ffc00 	.word	0x600ffc00

00021138 <lfs_dir_getread.constprop.0>:
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   21138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2113c:	4698      	mov	r8, r3
   2113e:	b085      	sub	sp, #20
    if (off+size > lfs->cfg->block_size) {
   21140:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   21142:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   21144:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if (off+size > lfs->cfg->block_size) {
   21146:	69db      	ldr	r3, [r3, #28]
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   21148:	4615      	mov	r5, r2
    if (off+size > lfs->cfg->block_size) {
   2114a:	19a2      	adds	r2, r4, r6
   2114c:	429a      	cmp	r2, r3
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   2114e:	4607      	mov	r7, r0
   21150:	468b      	mov	fp, r1
    if (off+size > lfs->cfg->block_size) {
   21152:	d84e      	bhi.n	211f2 <lfs_dir_getread.constprop.0+0xba>
        rcache->block = LFS_BLOCK_INLINE;
   21154:	f06f 0a01 	mvn.w	sl, #1
    while (size > 0) {
   21158:	2e00      	cmp	r6, #0
   2115a:	d048      	beq.n	211ee <lfs_dir_getread.constprop.0+0xb6>
	return lfs_aligndown(a + alignment-1, alignment);
   2115c:	f108 39ff 	add.w	r9, r8, #4294967295
        if (rcache->block == LFS_BLOCK_INLINE &&
   21160:	682b      	ldr	r3, [r5, #0]
   21162:	68e8      	ldr	r0, [r5, #12]
   21164:	3302      	adds	r3, #2
   21166:	d118      	bne.n	2119a <lfs_dir_getread.constprop.0+0x62>
                off < rcache->off + rcache->size) {
   21168:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
   2116c:	440b      	add	r3, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
   2116e:	42a3      	cmp	r3, r4
   21170:	d913      	bls.n	2119a <lfs_dir_getread.constprop.0+0x62>
            if (off >= rcache->off) {
   21172:	42a1      	cmp	r1, r4
   21174:	d811      	bhi.n	2119a <lfs_dir_getread.constprop.0+0x62>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   21176:	eba3 0904 	sub.w	r9, r3, r4
	return (a < b) ? a : b;
   2117a:	45b1      	cmp	r9, r6
   2117c:	bf28      	it	cs
   2117e:	46b1      	movcs	r9, r6
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   21180:	1a61      	subs	r1, r4, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21182:	4401      	add	r1, r0
   21184:	464a      	mov	r2, r9
   21186:	9810      	ldr	r0, [sp, #64]	; 0x40
   21188:	f00f f9f1 	bl	3056e <memcpy>
                data += diff;
   2118c:	9b10      	ldr	r3, [sp, #64]	; 0x40
                off += diff;
   2118e:	444c      	add	r4, r9
                data += diff;
   21190:	444b      	add	r3, r9
   21192:	9310      	str	r3, [sp, #64]	; 0x40
                size -= diff;
   21194:	eba6 0609 	sub.w	r6, r6, r9
                continue;
   21198:	e7de      	b.n	21158 <lfs_dir_getread.constprop.0+0x20>
        rcache->block = LFS_BLOCK_INLINE;
   2119a:	f8c5 a000 	str.w	sl, [r5]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   2119e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	return a - (a % alignment);
   211a0:	695b      	ldr	r3, [r3, #20]
   211a2:	fbb4 f2f3 	udiv	r2, r4, r3
   211a6:	fb03 4212 	mls	r2, r3, r2, r4
   211aa:	1aa2      	subs	r2, r4, r2
   211ac:	606a      	str	r2, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   211ae:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
   211b2:	f8dc e014 	ldr.w	lr, [ip, #20]
	return lfs_aligndown(a + alignment-1, alignment);
   211b6:	eb09 030e 	add.w	r3, r9, lr
   211ba:	4423      	add	r3, r4
	return a - (a % alignment);
   211bc:	fbb3 f1fe 	udiv	r1, r3, lr
   211c0:	fb0e 3111 	mls	r1, lr, r1, r3
   211c4:	1a5b      	subs	r3, r3, r1
	return (a < b) ? a : b;
   211c6:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
   211ca:	428b      	cmp	r3, r1
   211cc:	bf28      	it	cs
   211ce:	460b      	movcs	r3, r1
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   211d0:	4659      	mov	r1, fp
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   211d2:	60ab      	str	r3, [r5, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   211d4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   211d8:	9200      	str	r2, [sp, #0]
   211da:	4638      	mov	r0, r7
   211dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   211de:	4a06      	ldr	r2, [pc, #24]	; (211f8 <lfs_dir_getread.constprop.0+0xc0>)
   211e0:	f7ff fd5c 	bl	20c9c <lfs_dir_getslice>
        if (err < 0) {
   211e4:	2800      	cmp	r0, #0
   211e6:	dabb      	bge.n	21160 <lfs_dir_getread.constprop.0+0x28>
}
   211e8:	b005      	add	sp, #20
   211ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
   211ee:	4630      	mov	r0, r6
   211f0:	e7fa      	b.n	211e8 <lfs_dir_getread.constprop.0+0xb0>
        return LFS_ERR_CORRUPT;
   211f2:	f06f 0053 	mvn.w	r0, #83	; 0x53
   211f6:	e7f7      	b.n	211e8 <lfs_dir_getread.constprop.0+0xb0>
   211f8:	fff7fc00 	.word	0xfff7fc00

000211fc <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   211fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21200:	b093      	sub	sp, #76	; 0x4c
   21202:	af04      	add	r7, sp, #16
   21204:	4615      	mov	r5, r2
   21206:	603b      	str	r3, [r7, #0]
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   21208:	6813      	ldr	r3, [r2, #0]
   2120a:	6e82      	ldr	r2, [r0, #104]	; 0x68
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   2120c:	4680      	mov	r8, r0
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   2120e:	6a12      	ldr	r2, [r2, #32]
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   21210:	460c      	mov	r4, r1
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   21212:	4293      	cmp	r3, r2
   21214:	f080 821d 	bcs.w	21652 <lfs_dir_fetchmatch+0x456>
   21218:	6869      	ldr	r1, [r5, #4]
   2121a:	428a      	cmp	r2, r1
   2121c:	f240 8219 	bls.w	21652 <lfs_dir_fetchmatch+0x456>
    uint32_t revs[2] = {0, 0};
   21220:	2100      	movs	r1, #0
        int err = lfs_bd_read(lfs,
   21222:	f04f 0904 	mov.w	r9, #4
   21226:	f107 0220 	add.w	r2, r7, #32
    uint32_t revs[2] = {0, 0};
   2122a:	e9c7 1108 	strd	r1, r1, [r7, #32]
        int err = lfs_bd_read(lfs,
   2122e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   21232:	9300      	str	r3, [sp, #0]
   21234:	4602      	mov	r2, r0
   21236:	464b      	mov	r3, r9
   21238:	f8cd 900c 	str.w	r9, [sp, #12]
   2123c:	f7ff fc56 	bl	20aec <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   21240:	4606      	mov	r6, r0
   21242:	b118      	cbz	r0, 2124c <lfs_dir_fetchmatch+0x50>
   21244:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21248:	f040 81b5 	bne.w	215b6 <lfs_dir_fetchmatch+0x3ba>
        int err = lfs_bd_read(lfs,
   2124c:	f8cd 900c 	str.w	r9, [sp, #12]
   21250:	f04f 0900 	mov.w	r9, #0
   21254:	f107 0324 	add.w	r3, r7, #36	; 0x24
   21258:	9302      	str	r3, [sp, #8]
   2125a:	f8cd 9004 	str.w	r9, [sp, #4]
   2125e:	686b      	ldr	r3, [r5, #4]
   21260:	4642      	mov	r2, r8
   21262:	9300      	str	r3, [sp, #0]
   21264:	4649      	mov	r1, r9
   21266:	2304      	movs	r3, #4
   21268:	4640      	mov	r0, r8
   2126a:	f7ff fc3f 	bl	20aec <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
   2126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        if (err && err != LFS_ERR_CORRUPT) {
   21270:	4606      	mov	r6, r0
   21272:	2800      	cmp	r0, #0
   21274:	d04c      	beq.n	21310 <lfs_dir_fetchmatch+0x114>
   21276:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2127a:	f040 819c 	bne.w	215b6 <lfs_dir_fetchmatch+0x3ba>
   2127e:	4649      	mov	r1, r9
    dir->pair[0] = pair[(r+0)%2];
   21280:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    lfs_stag_t besttag = -1;
   21284:	f04f 36ff 	mov.w	r6, #4294967295
    dir->pair[0] = pair[(r+0)%2];
   21288:	6023      	str	r3, [r4, #0]
    dir->pair[1] = pair[(r+1)%2];
   2128a:	f081 0301 	eor.w	r3, r1, #1
   2128e:	607b      	str	r3, [r7, #4]
   21290:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   21294:	6063      	str	r3, [r4, #4]
    dir->rev = revs[(r+0)%2];
   21296:	f107 0338 	add.w	r3, r7, #56	; 0x38
   2129a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2129e:	f851 3c18 	ldr.w	r3, [r1, #-24]
   212a2:	60a3      	str	r3, [r4, #8]
    dir->off = 0; // nonzero = found some commits
   212a4:	2300      	movs	r3, #0
   212a6:	60e3      	str	r3, [r4, #12]
   212a8:	2302      	movs	r3, #2
   212aa:	60bb      	str	r3, [r7, #8]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
   212ac:	f04f 35ff 	mov.w	r5, #4294967295
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   212b0:	2204      	movs	r2, #4
   212b2:	4628      	mov	r0, r5
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
   212b4:	e9c7 550a 	strd	r5, r5, [r7, #40]	; 0x28
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   212b8:	f104 0108 	add.w	r1, r4, #8
   212bc:	f002 fd8a 	bl	23dd4 <lfs_crc>
        bool tempsplit = false;
   212c0:	2300      	movs	r3, #0
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   212c2:	46b1      	mov	r9, r6
        lfs_tag_t ptag = 0xffffffff;
   212c4:	46aa      	mov	sl, r5
        uint16_t tempcount = 0;
   212c6:	e9c7 3303 	strd	r3, r3, [r7, #12]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   212ca:	61b8      	str	r0, [r7, #24]
        lfs_off_t off = 0;
   212cc:	617b      	str	r3, [r7, #20]
            off += lfs_tag_dsize(ptag);
   212ce:	4650      	mov	r0, sl
   212d0:	f00d fde5 	bl	2ee9e <lfs_tag_dsize>
            int err = lfs_bd_read(lfs,
   212d4:	2204      	movs	r2, #4
            off += lfs_tag_dsize(ptag);
   212d6:	697b      	ldr	r3, [r7, #20]
            int err = lfs_bd_read(lfs,
   212d8:	f107 0b1c 	add.w	fp, r7, #28
            off += lfs_tag_dsize(ptag);
   212dc:	4403      	add	r3, r0
   212de:	617b      	str	r3, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
   212e0:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
            int err = lfs_bd_read(lfs,
   212e4:	9203      	str	r2, [sp, #12]
   212e6:	f8cd b008 	str.w	fp, [sp, #8]
   212ea:	697a      	ldr	r2, [r7, #20]
   212ec:	2100      	movs	r1, #0
   212ee:	9201      	str	r2, [sp, #4]
   212f0:	6822      	ldr	r2, [r4, #0]
   212f2:	4640      	mov	r0, r8
   212f4:	9200      	str	r2, [sp, #0]
   212f6:	69db      	ldr	r3, [r3, #28]
   212f8:	4642      	mov	r2, r8
   212fa:	f7ff fbf7 	bl	20aec <lfs_bd_read>
            if (err) {
   212fe:	4605      	mov	r5, r0
   21300:	b180      	cbz	r0, 21324 <lfs_dir_fetchmatch+0x128>
                if (err == LFS_ERR_CORRUPT) {
   21302:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21306:	f040 8155 	bne.w	215b4 <lfs_dir_fetchmatch+0x3b8>
                    dir->erased = false;
   2130a:	2300      	movs	r3, #0
                        dir->erased = false;
   2130c:	75a3      	strb	r3, [r4, #22]
                        break;
   2130e:	e02d      	b.n	2136c <lfs_dir_fetchmatch+0x170>
	return (int)(unsigned int)(a - b);
   21310:	6a3a      	ldr	r2, [r7, #32]
   21312:	1a9b      	subs	r3, r3, r2
        if (err != LFS_ERR_CORRUPT &&
   21314:	2b00      	cmp	r3, #0
   21316:	bfd4      	ite	le
   21318:	2100      	movle	r1, #0
   2131a:	2101      	movgt	r1, #1
   2131c:	e7b0      	b.n	21280 <lfs_dir_fetchmatch+0x84>
   2131e:	2301      	movs	r3, #1
   21320:	60bb      	str	r3, [r7, #8]
   21322:	e7c3      	b.n	212ac <lfs_dir_fetchmatch+0xb0>
            crc = lfs_crc(crc, &tag, sizeof(tag));
   21324:	4659      	mov	r1, fp
   21326:	2204      	movs	r2, #4
   21328:	69b8      	ldr	r0, [r7, #24]
   2132a:	f002 fd53 	bl	23dd4 <lfs_crc>
	return __builtin_bswap32(a);
   2132e:	69fb      	ldr	r3, [r7, #28]
   21330:	61b8      	str	r0, [r7, #24]
   21332:	ba1b      	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
   21334:	ea8a 0b03 	eor.w	fp, sl, r3
            if (!lfs_tag_isvalid(tag)) {
   21338:	f1bb 0f00 	cmp.w	fp, #0
            tag = lfs_frombe32(tag) ^ ptag;
   2133c:	f8c7 b01c 	str.w	fp, [r7, #28]
            if (!lfs_tag_isvalid(tag)) {
   21340:	da3e      	bge.n	213c0 <lfs_dir_fetchmatch+0x1c4>
    return (tag & 0x70000000) >> 20;
   21342:	ea4f 5a1a 	mov.w	sl, sl, lsr #20
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   21346:	f40a 6ae0 	and.w	sl, sl, #1792	; 0x700
   2134a:	f5ba 6fa0 	cmp.w	sl, #1280	; 0x500
                        dir->off % lfs->cfg->prog_size == 0);
   2134e:	68e3      	ldr	r3, [r4, #12]
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   21350:	d109      	bne.n	21366 <lfs_dir_fetchmatch+0x16a>
                        dir->off % lfs->cfg->prog_size == 0);
   21352:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
   21356:	6992      	ldr	r2, [r2, #24]
   21358:	fbb3 f1f2 	udiv	r1, r3, r2
   2135c:	fb02 3311 	mls	r3, r2, r1, r3
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   21360:	fab3 f583 	clz	r5, r3
   21364:	096d      	lsrs	r5, r5, #5
   21366:	f005 0501 	and.w	r5, r5, #1
   2136a:	75a5      	strb	r5, [r4, #22]
        if (dir->off > 0) {
   2136c:	68e3      	ldr	r3, [r4, #12]
   2136e:	2b00      	cmp	r3, #0
   21370:	f000 8147 	beq.w	21602 <lfs_dir_fetchmatch+0x406>
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
   21374:	4621      	mov	r1, r4
   21376:	f108 003c 	add.w	r0, r8, #60	; 0x3c
   2137a:	f00d fda8 	bl	2eece <lfs_gstate_hasmovehere>
   2137e:	2800      	cmp	r0, #0
   21380:	f000 8131 	beq.w	215e6 <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
   21384:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
   21388:	f3c6 2289 	ubfx	r2, r6, #10, #10
   2138c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
   21390:	429a      	cmp	r2, r3
   21392:	f040 8115 	bne.w	215c0 <lfs_dir_fetchmatch+0x3c4>
            if (id) {
   21396:	6e7a      	ldr	r2, [r7, #100]	; 0x64
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   21398:	f046 4300 	orr.w	r3, r6, #2147483648	; 0x80000000
            if (id) {
   2139c:	b13a      	cbz	r2, 213ae <lfs_dir_fetchmatch+0x1b2>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   2139e:	8aa1      	ldrh	r1, [r4, #20]
   213a0:	f3c3 2289 	ubfx	r2, r3, #10, #10
	return (a < b) ? a : b;
   213a4:	428a      	cmp	r2, r1
   213a6:	bf28      	it	cs
   213a8:	460a      	movcs	r2, r1
   213aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
   213ac:	800a      	strh	r2, [r1, #0]
            } else if (lfs_tag_id(besttag) < dir->count) {
   213ae:	8aa2      	ldrh	r2, [r4, #20]
   213b0:	f3c3 2389 	ubfx	r3, r3, #10, #10
                return LFS_ERR_NOENT;
   213b4:	429a      	cmp	r2, r3
   213b6:	bf94      	ite	ls
   213b8:	2600      	movls	r6, #0
   213ba:	f06f 0601 	mvnhi.w	r6, #1
   213be:	e0fa      	b.n	215b6 <lfs_dir_fetchmatch+0x3ba>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
   213c0:	4658      	mov	r0, fp
   213c2:	f00d fd6c 	bl	2ee9e <lfs_tag_dsize>
   213c6:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
   213ca:	697a      	ldr	r2, [r7, #20]
   213cc:	69db      	ldr	r3, [r3, #28]
   213ce:	4410      	add	r0, r2
   213d0:	4298      	cmp	r0, r3
   213d2:	d89a      	bhi.n	2130a <lfs_dir_fetchmatch+0x10e>
    return (tag & 0x70000000) >> 20;
   213d4:	ea4f 521b 	mov.w	r2, fp, lsr #20
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
   213d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   213dc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
                err = lfs_bd_read(lfs,
   213e0:	6821      	ldr	r1, [r4, #0]
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
   213e2:	f040 8090 	bne.w	21506 <lfs_dir_fetchmatch+0x30a>
                err = lfs_bd_read(lfs,
   213e6:	2204      	movs	r2, #4
   213e8:	9203      	str	r2, [sp, #12]
   213ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
   213ee:	9202      	str	r2, [sp, #8]
   213f0:	697a      	ldr	r2, [r7, #20]
   213f2:	4640      	mov	r0, r8
   213f4:	3204      	adds	r2, #4
   213f6:	e9cd 1200 	strd	r1, r2, [sp]
   213fa:	4629      	mov	r1, r5
   213fc:	4642      	mov	r2, r8
   213fe:	f7ff fb75 	bl	20aec <lfs_bd_read>
                if (err) {
   21402:	4605      	mov	r5, r0
   21404:	b130      	cbz	r0, 21414 <lfs_dir_fetchmatch+0x218>
                    if (err == LFS_ERR_CORRUPT) {
   21406:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2140a:	f040 80d3 	bne.w	215b4 <lfs_dir_fetchmatch+0x3b8>
                        dir->erased = false;
   2140e:	f04f 0300 	mov.w	r3, #0
   21412:	e77b      	b.n	2130c <lfs_dir_fetchmatch+0x110>
                if (crc != dcrc) {
   21414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   21416:	69bb      	ldr	r3, [r7, #24]
   21418:	429a      	cmp	r2, r3
   2141a:	d1f8      	bne.n	2140e <lfs_dir_fetchmatch+0x212>
    return (tag & 0x0ff00000) >> 20;
   2141c:	69fb      	ldr	r3, [r7, #28]
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
   2141e:	2204      	movs	r2, #4
    return (tag & 0x0ff00000) >> 20;
   21420:	0d1b      	lsrs	r3, r3, #20
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
   21422:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
   21426:	f107 0118 	add.w	r1, r7, #24
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
   2142a:	ea8b 7bc3 	eor.w	fp, fp, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
   2142e:	f002 fcd1 	bl	23dd4 <lfs_crc>
   21432:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
                dir->off = off + lfs_tag_dsize(tag);
   21436:	69f8      	ldr	r0, [r7, #28]
   21438:	f00d fd31 	bl	2ee9e <lfs_tag_dsize>
   2143c:	697b      	ldr	r3, [r7, #20]
   2143e:	4418      	add	r0, r3
                dir->count = tempcount;
   21440:	693b      	ldr	r3, [r7, #16]
                dir->etag = ptag;
   21442:	e9c4 0b03 	strd	r0, fp, [r4, #12]
                dir->count = tempcount;
   21446:	82a3      	strh	r3, [r4, #20]
                dir->tail[0] = temptail[0];
   21448:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2144a:	61a3      	str	r3, [r4, #24]
                dir->tail[1] = temptail[1];
   2144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2144e:	61e3      	str	r3, [r4, #28]
                dir->split = tempsplit;
   21450:	68fb      	ldr	r3, [r7, #12]
   21452:	75e3      	strb	r3, [r4, #23]
                crc = 0xffffffff;
   21454:	f04f 33ff 	mov.w	r3, #4294967295
   21458:	61bb      	str	r3, [r7, #24]
                continue;
   2145a:	464b      	mov	r3, r9
   2145c:	464e      	mov	r6, r9
   2145e:	46da      	mov	sl, fp
   21460:	4699      	mov	r9, r3
   21462:	e734      	b.n	212ce <lfs_dir_fetchmatch+0xd2>
                crc = lfs_crc(crc, &dat, 1);
   21464:	2201      	movs	r2, #1
   21466:	69b8      	ldr	r0, [r7, #24]
   21468:	f107 0130 	add.w	r1, r7, #48	; 0x30
   2146c:	f002 fcb2 	bl	23dd4 <lfs_crc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   21470:	f10a 0a01 	add.w	sl, sl, #1
                crc = lfs_crc(crc, &dat, 1);
   21474:	61b8      	str	r0, [r7, #24]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   21476:	69f8      	ldr	r0, [r7, #28]
   21478:	f00d fd11 	bl	2ee9e <lfs_tag_dsize>
   2147c:	4550      	cmp	r0, sl
                err = lfs_bd_read(lfs,
   2147e:	6823      	ldr	r3, [r4, #0]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   21480:	d91a      	bls.n	214b8 <lfs_dir_fetchmatch+0x2bc>
                err = lfs_bd_read(lfs,
   21482:	2101      	movs	r1, #1
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   21484:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
                err = lfs_bd_read(lfs,
   21488:	9103      	str	r1, [sp, #12]
   2148a:	f107 0130 	add.w	r1, r7, #48	; 0x30
   2148e:	9102      	str	r1, [sp, #8]
   21490:	6979      	ldr	r1, [r7, #20]
   21492:	4640      	mov	r0, r8
   21494:	4451      	add	r1, sl
   21496:	e9cd 3100 	strd	r3, r1, [sp]
   2149a:	2100      	movs	r1, #0
   2149c:	69d3      	ldr	r3, [r2, #28]
   2149e:	4642      	mov	r2, r8
   214a0:	f7ff fb24 	bl	20aec <lfs_bd_read>
                if (err) {
   214a4:	4605      	mov	r5, r0
   214a6:	2800      	cmp	r0, #0
   214a8:	d0dc      	beq.n	21464 <lfs_dir_fetchmatch+0x268>
                    if (err == LFS_ERR_CORRUPT) {
   214aa:	f110 0f54 	cmn.w	r0, #84	; 0x54
   214ae:	f040 8081 	bne.w	215b4 <lfs_dir_fetchmatch+0x3b8>
                        dir->erased = false;
   214b2:	f04f 0300 	mov.w	r3, #0
   214b6:	75a3      	strb	r3, [r4, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   214b8:	69fb      	ldr	r3, [r7, #28]
                err = lfs_bd_read(lfs,
   214ba:	6820      	ldr	r0, [r4, #0]
    return (tag & 0x70000000) >> 20;
   214bc:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   214be:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
   214c2:	d123      	bne.n	2150c <lfs_dir_fetchmatch+0x310>
                if (lfs_tag_id(tag) >= tempcount) {
   214c4:	693a      	ldr	r2, [r7, #16]
    return (tag & 0x000ffc00) >> 10;
   214c6:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
   214ca:	429a      	cmp	r2, r3
   214cc:	d801      	bhi.n	214d2 <lfs_dir_fetchmatch+0x2d6>
                    tempcount = lfs_tag_id(tag) + 1;
   214ce:	3301      	adds	r3, #1
   214d0:	613b      	str	r3, [r7, #16]
            if ((fmask & tag) == (fmask & ftag)) {
   214d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   214d4:	69f9      	ldr	r1, [r7, #28]
                        dir->pair[0], off+sizeof(tag)});
   214d6:	6823      	ldr	r3, [r4, #0]
            if ((fmask & tag) == (fmask & ftag)) {
   214d8:	ea81 0a02 	eor.w	sl, r1, r2
   214dc:	683a      	ldr	r2, [r7, #0]
   214de:	ea1a 0a02 	ands.w	sl, sl, r2
   214e2:	d151      	bne.n	21588 <lfs_dir_fetchmatch+0x38c>
                int res = cb(data, tag, &(struct lfs_diskoff){
   214e4:	633b      	str	r3, [r7, #48]	; 0x30
                        dir->pair[0], off+sizeof(tag)});
   214e6:	697b      	ldr	r3, [r7, #20]
                int res = cb(data, tag, &(struct lfs_diskoff){
   214e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
                        dir->pair[0], off+sizeof(tag)});
   214ec:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
   214ee:	637b      	str	r3, [r7, #52]	; 0x34
   214f0:	e9d7 301a 	ldrd	r3, r0, [r7, #104]	; 0x68
   214f4:	4798      	blx	r3
                if (res < 0) {
   214f6:	1e05      	subs	r5, r0, #0
   214f8:	da43      	bge.n	21582 <lfs_dir_fetchmatch+0x386>
                    if (res == LFS_ERR_CORRUPT) {
   214fa:	f115 0f54 	cmn.w	r5, #84	; 0x54
   214fe:	d159      	bne.n	215b4 <lfs_dir_fetchmatch+0x3b8>
                        dir->erased = false;
   21500:	f884 a016 	strb.w	sl, [r4, #22]
                        break;
   21504:	e732      	b.n	2136c <lfs_dir_fetchmatch+0x170>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   21506:	f04f 0a04 	mov.w	sl, #4
   2150a:	e7b4      	b.n	21476 <lfs_dir_fetchmatch+0x27a>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
   2150c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   21510:	d11d      	bne.n	2154e <lfs_dir_fetchmatch+0x352>
                tempcount += lfs_tag_splice(tag);
   21512:	6938      	ldr	r0, [r7, #16]
    return (int8_t)lfs_tag_chunk(tag);
   21514:	b251      	sxtb	r1, r2
                tempcount += lfs_tag_splice(tag);
   21516:	fa40 f282 	sxtab	r2, r0, r2
   2151a:	b292      	uxth	r2, r2
   2151c:	613a      	str	r2, [r7, #16]
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   2151e:	4a4e      	ldr	r2, [pc, #312]	; (21658 <lfs_dir_fetchmatch+0x45c>)
   21520:	ea09 0202 	and.w	r2, r9, r2
   21524:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
   21528:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   2152c:	4293      	cmp	r3, r2
   2152e:	d102      	bne.n	21536 <lfs_dir_fetchmatch+0x33a>
                    tempbesttag |= 0x80000000;
   21530:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
   21534:	e7cd      	b.n	214d2 <lfs_dir_fetchmatch+0x2d6>
                } else if (tempbesttag != -1 &&
   21536:	f1b9 3fff 	cmp.w	r9, #4294967295
   2153a:	d0ca      	beq.n	214d2 <lfs_dir_fetchmatch+0x2d6>
   2153c:	f3c3 2389 	ubfx	r3, r3, #10, #10
   21540:	f3c9 2289 	ubfx	r2, r9, #10, #10
   21544:	4293      	cmp	r3, r2
   21546:	d8c4      	bhi.n	214d2 <lfs_dir_fetchmatch+0x2d6>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   21548:	eb09 2981 	add.w	r9, r9, r1, lsl #10
   2154c:	e7c1      	b.n	214d2 <lfs_dir_fetchmatch+0x2d6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
   2154e:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
   21552:	d1be      	bne.n	214d2 <lfs_dir_fetchmatch+0x2d6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
   21554:	f002 0301 	and.w	r3, r2, #1
                err = lfs_bd_read(lfs,
   21558:	2208      	movs	r2, #8
                tempsplit = (lfs_tag_chunk(tag) & 1);
   2155a:	60fb      	str	r3, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   2155c:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
                err = lfs_bd_read(lfs,
   21560:	9203      	str	r2, [sp, #12]
   21562:	f107 0228 	add.w	r2, r7, #40	; 0x28
   21566:	9202      	str	r2, [sp, #8]
   21568:	697a      	ldr	r2, [r7, #20]
   2156a:	2100      	movs	r1, #0
   2156c:	3204      	adds	r2, #4
   2156e:	e9cd 0200 	strd	r0, r2, [sp]
   21572:	4642      	mov	r2, r8
   21574:	4640      	mov	r0, r8
   21576:	69db      	ldr	r3, [r3, #28]
   21578:	f7ff fab8 	bl	20aec <lfs_bd_read>
                    if (err == LFS_ERR_CORRUPT) {
   2157c:	3054      	adds	r0, #84	; 0x54
   2157e:	d1a8      	bne.n	214d2 <lfs_dir_fetchmatch+0x2d6>
   21580:	e6c3      	b.n	2130a <lfs_dir_fetchmatch+0x10e>
                    tempbesttag = tag;
   21582:	69fb      	ldr	r3, [r7, #28]
                if (res == LFS_CMP_EQ) {
   21584:	d103      	bne.n	2158e <lfs_dir_fetchmatch+0x392>
                    tempbesttag = tag;
   21586:	4699      	mov	r9, r3
   21588:	464b      	mov	r3, r9
   2158a:	46b1      	mov	r9, r6
   2158c:	e766      	b.n	2145c <lfs_dir_fetchmatch+0x260>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
   2158e:	4a33      	ldr	r2, [pc, #204]	; (2165c <lfs_dir_fetchmatch+0x460>)
   21590:	ea89 0103 	eor.w	r1, r9, r3
   21594:	400a      	ands	r2, r1
   21596:	b152      	cbz	r2, 215ae <lfs_dir_fetchmatch+0x3b2>
                } else if (res == LFS_CMP_GT &&
   21598:	2d02      	cmp	r5, #2
   2159a:	d1f5      	bne.n	21588 <lfs_dir_fetchmatch+0x38c>
   2159c:	f3c9 2289 	ubfx	r2, r9, #10, #10
   215a0:	f3c3 2189 	ubfx	r1, r3, #10, #10
   215a4:	428a      	cmp	r2, r1
   215a6:	d3ef      	bcc.n	21588 <lfs_dir_fetchmatch+0x38c>
                    tempbesttag = tag | 0x80000000;
   215a8:	f043 4900 	orr.w	r9, r3, #2147483648	; 0x80000000
   215ac:	e7ec      	b.n	21588 <lfs_dir_fetchmatch+0x38c>
                    tempbesttag = -1;
   215ae:	f04f 39ff 	mov.w	r9, #4294967295
   215b2:	e7e9      	b.n	21588 <lfs_dir_fetchmatch+0x38c>
                return err;
   215b4:	462e      	mov	r6, r5
}
   215b6:	4630      	mov	r0, r6
   215b8:	373c      	adds	r7, #60	; 0x3c
   215ba:	46bd      	mov	sp, r7
   215bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                } else if (besttag != -1 &&
   215c0:	1c71      	adds	r1, r6, #1
   215c2:	d10c      	bne.n	215de <lfs_dir_fetchmatch+0x3e2>
            if (id) {
   215c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   215c6:	b13b      	cbz	r3, 215d8 <lfs_dir_fetchmatch+0x3dc>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   215c8:	f240 32ff 	movw	r2, #1023	; 0x3ff
   215cc:	8aa3      	ldrh	r3, [r4, #20]
   215ce:	4293      	cmp	r3, r2
   215d0:	bf28      	it	cs
   215d2:	4613      	movcs	r3, r2
   215d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   215d6:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
   215d8:	f04f 33ff 	mov.w	r3, #4294967295
   215dc:	e6e7      	b.n	213ae <lfs_dir_fetchmatch+0x1b2>
                } else if (besttag != -1 &&
   215de:	429a      	cmp	r2, r3
                    besttag -= LFS_MKTAG(0, 1, 0);
   215e0:	bf88      	it	hi
   215e2:	f5a6 6680 	subhi.w	r6, r6, #1024	; 0x400
            if (id) {
   215e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   215e8:	4633      	mov	r3, r6
            if (id) {
   215ea:	b13a      	cbz	r2, 215fc <lfs_dir_fetchmatch+0x400>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   215ec:	8aa1      	ldrh	r1, [r4, #20]
   215ee:	f3c6 2289 	ubfx	r2, r6, #10, #10
   215f2:	428a      	cmp	r2, r1
   215f4:	bf28      	it	cs
   215f6:	460a      	movcs	r2, r1
   215f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
   215fa:	800a      	strh	r2, [r1, #0]
            if (lfs_tag_isvalid(besttag)) {
   215fc:	2e00      	cmp	r6, #0
   215fe:	dada      	bge.n	215b6 <lfs_dir_fetchmatch+0x3ba>
   21600:	e6d5      	b.n	213ae <lfs_dir_fetchmatch+0x1b2>
        dir->rev = revs[(r+1)%2];
   21602:	6878      	ldr	r0, [r7, #4]
   21604:	f107 0238 	add.w	r2, r7, #56	; 0x38
   21608:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   2160c:	f852 2c18 	ldr.w	r2, [r2, #-24]
    pair[0] = pair[1];
   21610:	e9d4 3100 	ldrd	r3, r1, [r4]
        dir->rev = revs[(r+1)%2];
   21614:	60a2      	str	r2, [r4, #8]
    for (int i = 0; i < 2; i++) {
   21616:	68ba      	ldr	r2, [r7, #8]
    pair[1] = t;
   21618:	e9c4 1300 	strd	r1, r3, [r4]
    for (int i = 0; i < 2; i++) {
   2161c:	2a01      	cmp	r2, #1
   2161e:	f47f ae7e 	bne.w	2131e <lfs_dir_fetchmatch+0x122>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
   21622:	466c      	mov	r4, sp
   21624:	b08c      	sub	sp, #48	; 0x30
   21626:	aa04      	add	r2, sp, #16
   21628:	480d      	ldr	r0, [pc, #52]	; (21660 <lfs_dir_fetchmatch+0x464>)
   2162a:	6253      	str	r3, [r2, #36]	; 0x24
   2162c:	6150      	str	r0, [r2, #20]
   2162e:	f44f 7300 	mov.w	r3, #512	; 0x200
   21632:	480c      	ldr	r0, [pc, #48]	; (21664 <lfs_dir_fetchmatch+0x468>)
   21634:	8513      	strh	r3, [r2, #40]	; 0x28
   21636:	6190      	str	r0, [r2, #24]
   21638:	f240 40d2 	movw	r0, #1234	; 0x4d2
   2163c:	4b0a      	ldr	r3, [pc, #40]	; (21668 <lfs_dir_fetchmatch+0x46c>)
   2163e:	e9c2 0107 	strd	r0, r1, [r2, #28]
   21642:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   21646:	4809      	ldr	r0, [pc, #36]	; (2166c <lfs_dir_fetchmatch+0x470>)
   21648:	f842 3f10 	str.w	r3, [r2, #16]!
   2164c:	f00d fd0d 	bl	2f06a <z_log_msg_static_create.constprop.0>
   21650:	46a5      	mov	sp, r4
        return LFS_ERR_CORRUPT;
   21652:	f06f 0653 	mvn.w	r6, #83	; 0x53
   21656:	e7ae      	b.n	215b6 <lfs_dir_fetchmatch+0x3ba>
   21658:	000ffc00 	.word	0x000ffc00
   2165c:	7ffffc00 	.word	0x7ffffc00
   21660:	00037ae6 	.word	0x00037ae6
   21664:	00037a7e 	.word	0x00037a7e
   21668:	01000006 	.word	0x01000006
   2166c:	0003156c 	.word	0x0003156c

00021670 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
   21670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    parent->tail[1] = 1;
   21674:	2301      	movs	r3, #1
   21676:	2400      	movs	r4, #0
        lfs_mdir_t *parent) {
   21678:	4605      	mov	r5, r0
   2167a:	460e      	mov	r6, r1
   2167c:	4692      	mov	sl, r2
    parent->tail[1] = 1;
   2167e:	e9c2 4306 	strd	r4, r3, [r2, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   21682:	4f17      	ldr	r7, [pc, #92]	; (216e0 <lfs_fs_parent+0x70>)
   21684:	f8df 805c 	ldr.w	r8, [pc, #92]	; 216e4 <lfs_fs_parent+0x74>
   21688:	f8df 905c 	ldr.w	r9, [pc, #92]	; 216e8 <lfs_fs_parent+0x78>
        lfs_mdir_t *parent) {
   2168c:	b088      	sub	sp, #32
    while (!lfs_pair_isnull(parent->tail)) {
   2168e:	f10a 0218 	add.w	r2, sl, #24
   21692:	4610      	mov	r0, r2
   21694:	f00d fbe8 	bl	2ee68 <lfs_pair_isnull>
   21698:	b110      	cbz	r0, 216a0 <lfs_fs_parent+0x30>
    return LFS_ERR_NOENT;
   2169a:	f06f 0001 	mvn.w	r0, #1
   2169e:	e018      	b.n	216d2 <lfs_fs_parent+0x62>
        if (cycle >= lfs->cfg->block_count/2) {
   216a0:	6eab      	ldr	r3, [r5, #104]	; 0x68
   216a2:	6a1b      	ldr	r3, [r3, #32]
   216a4:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   216a8:	d216      	bcs.n	216d8 <lfs_fs_parent+0x68>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   216aa:	6833      	ldr	r3, [r6, #0]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   216ac:	4651      	mov	r1, sl
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   216ae:	9306      	str	r3, [sp, #24]
   216b0:	6873      	ldr	r3, [r6, #4]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   216b2:	e9cd 8000 	strd	r8, r0, [sp]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   216b6:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   216b8:	ab05      	add	r3, sp, #20
   216ba:	e9cd 7302 	strd	r7, r3, [sp, #8]
   216be:	4628      	mov	r0, r5
   216c0:	464b      	mov	r3, r9
        cycle += 1;
   216c2:	3401      	adds	r4, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   216c4:	9505      	str	r5, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   216c6:	f7ff fd99 	bl	211fc <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
   216ca:	2800      	cmp	r0, #0
   216cc:	d0df      	beq.n	2168e <lfs_fs_parent+0x1e>
   216ce:	1c83      	adds	r3, r0, #2
   216d0:	d0dd      	beq.n	2168e <lfs_fs_parent+0x1e>
}
   216d2:	b008      	add	sp, #32
   216d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return LFS_ERR_CORRUPT;
   216d8:	f06f 0053 	mvn.w	r0, #83	; 0x53
   216dc:	e7f9      	b.n	216d2 <lfs_fs_parent+0x62>
   216de:	bf00      	nop
   216e0:	0002ef91 	.word	0x0002ef91
   216e4:	20000008 	.word	0x20000008
   216e8:	7ff003ff 	.word	0x7ff003ff

000216ec <lfs_dir_find>:
        const char **path, uint16_t *id) {
   216ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216f0:	b08d      	sub	sp, #52	; 0x34
   216f2:	4681      	mov	r9, r0
   216f4:	4688      	mov	r8, r1
    const char *name = *path;
   216f6:	6816      	ldr	r6, [r2, #0]
        const char **path, uint16_t *id) {
   216f8:	9206      	str	r2, [sp, #24]
    if (id) {
   216fa:	9305      	str	r3, [sp, #20]
   216fc:	b11b      	cbz	r3, 21706 <lfs_dir_find+0x1a>
        *id = 0x3ff;
   216fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
   21702:	9a05      	ldr	r2, [sp, #20]
   21704:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
   21706:	f8d9 3020 	ldr.w	r3, [r9, #32]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
   2170a:	4c44      	ldr	r4, [pc, #272]	; (2181c <lfs_dir_find+0x130>)
    dir->tail[0] = lfs->root[0];
   2170c:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
   21710:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   21714:	f8c8 301c 	str.w	r3, [r8, #28]
        name += strspn(name, "/");
   21718:	4630      	mov	r0, r6
   2171a:	4941      	ldr	r1, [pc, #260]	; (21820 <lfs_dir_find+0x134>)
   2171c:	f00f f8e0 	bl	308e0 <strspn>
   21720:	1835      	adds	r5, r6, r0
        lfs_size_t namelen = strcspn(name, "/");
   21722:	4628      	mov	r0, r5
   21724:	493e      	ldr	r1, [pc, #248]	; (21820 <lfs_dir_find+0x134>)
   21726:	f00f f899 	bl	3085c <strcspn>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   2172a:	2801      	cmp	r0, #1
        lfs_size_t namelen = strcspn(name, "/");
   2172c:	4607      	mov	r7, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   2172e:	eb05 0600 	add.w	r6, r5, r0
   21732:	d123      	bne.n	2177c <lfs_dir_find+0x90>
   21734:	4602      	mov	r2, r0
   21736:	493b      	ldr	r1, [pc, #236]	; (21824 <lfs_dir_find+0x138>)
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
   21738:	4628      	mov	r0, r5
   2173a:	f00e ff08 	bl	3054e <memcmp>
   2173e:	2800      	cmp	r0, #0
   21740:	d0ea      	beq.n	21718 <lfs_dir_find+0x2c>
        const char *suffix = name + namelen;
   21742:	46b2      	mov	sl, r6
        int depth = 1;
   21744:	f04f 0b01 	mov.w	fp, #1
            suffix += strspn(suffix, "/");
   21748:	4650      	mov	r0, sl
   2174a:	4935      	ldr	r1, [pc, #212]	; (21820 <lfs_dir_find+0x134>)
   2174c:	f00f f8c8 	bl	308e0 <strspn>
   21750:	4482      	add	sl, r0
            sufflen = strcspn(suffix, "/");
   21752:	4650      	mov	r0, sl
   21754:	4932      	ldr	r1, [pc, #200]	; (21820 <lfs_dir_find+0x134>)
   21756:	f00f f881 	bl	3085c <strcspn>
            if (sufflen == 0) {
   2175a:	4602      	mov	r2, r0
   2175c:	b1b8      	cbz	r0, 2178e <lfs_dir_find+0xa2>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
   2175e:	2802      	cmp	r0, #2
   21760:	d111      	bne.n	21786 <lfs_dir_find+0x9a>
   21762:	9007      	str	r0, [sp, #28]
   21764:	4930      	ldr	r1, [pc, #192]	; (21828 <lfs_dir_find+0x13c>)
   21766:	4650      	mov	r0, sl
   21768:	f00e fef1 	bl	3054e <memcmp>
   2176c:	9a07      	ldr	r2, [sp, #28]
   2176e:	b950      	cbnz	r0, 21786 <lfs_dir_find+0x9a>
                if (depth == 0) {
   21770:	f1bb 0b01 	subs.w	fp, fp, #1
   21774:	d109      	bne.n	2178a <lfs_dir_find+0x9e>
                    name = suffix + sufflen;
   21776:	f10a 0602 	add.w	r6, sl, #2
                    goto nextname;
   2177a:	e7cd      	b.n	21718 <lfs_dir_find+0x2c>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   2177c:	2802      	cmp	r0, #2
   2177e:	d1e0      	bne.n	21742 <lfs_dir_find+0x56>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
   21780:	4602      	mov	r2, r0
   21782:	4929      	ldr	r1, [pc, #164]	; (21828 <lfs_dir_find+0x13c>)
   21784:	e7d8      	b.n	21738 <lfs_dir_find+0x4c>
                depth += 1;
   21786:	f10b 0b01 	add.w	fp, fp, #1
            suffix += sufflen;
   2178a:	4492      	add	sl, r2
            suffix += strspn(suffix, "/");
   2178c:	e7dc      	b.n	21748 <lfs_dir_find+0x5c>
        if (name[0] == '\0') {
   2178e:	782b      	ldrb	r3, [r5, #0]
   21790:	2b00      	cmp	r3, #0
   21792:	d03c      	beq.n	2180e <lfs_dir_find+0x122>
        *path = name;
   21794:	9b06      	ldr	r3, [sp, #24]
   21796:	601d      	str	r5, [r3, #0]
    return (tag & 0x7ff00000) >> 20;
   21798:	0d23      	lsrs	r3, r4, #20
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   2179a:	2b02      	cmp	r3, #2
   2179c:	d13b      	bne.n	21816 <lfs_dir_find+0x12a>
        if (lfs_tag_id(tag) != 0x3ff) {
   2179e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   217a2:	f3c4 2489 	ubfx	r4, r4, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
   217a6:	429c      	cmp	r4, r3
   217a8:	f108 0a18 	add.w	sl, r8, #24
   217ac:	d123      	bne.n	217f6 <lfs_dir_find+0x10a>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   217ae:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
                    (strchr(name, '/') == NULL) ? id : NULL,
   217b2:	212f      	movs	r1, #47	; 0x2f
   217b4:	4628      	mov	r0, r5
   217b6:	f00f f83c 	bl	30832 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   217ba:	2800      	cmp	r0, #0
   217bc:	9b05      	ldr	r3, [sp, #20]
   217be:	bf18      	it	ne
   217c0:	2300      	movne	r3, #0
   217c2:	4a1a      	ldr	r2, [pc, #104]	; (2182c <lfs_dir_find+0x140>)
   217c4:	4641      	mov	r1, r8
   217c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   217ca:	4648      	mov	r0, r9
   217cc:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
   217d0:	4652      	mov	r2, sl
   217d2:	f8cd b00c 	str.w	fp, [sp, #12]
   217d6:	9700      	str	r7, [sp, #0]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
   217d8:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
   217dc:	970b      	str	r7, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   217de:	f7ff fd0d 	bl	211fc <lfs_dir_fetchmatch>
            if (tag < 0) {
   217e2:	1e04      	subs	r4, r0, #0
   217e4:	db13      	blt.n	2180e <lfs_dir_find+0x122>
            if (tag) {
   217e6:	d197      	bne.n	21718 <lfs_dir_find+0x2c>
            if (!dir->split) {
   217e8:	f898 3017 	ldrb.w	r3, [r8, #23]
   217ec:	2b00      	cmp	r3, #0
   217ee:	d1e0      	bne.n	217b2 <lfs_dir_find+0xc6>
                return LFS_ERR_NOENT;
   217f0:	f06f 0401 	mvn.w	r4, #1
   217f4:	e00b      	b.n	2180e <lfs_dir_find+0x122>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   217f6:	4b0e      	ldr	r3, [pc, #56]	; (21830 <lfs_dir_find+0x144>)
   217f8:	4641      	mov	r1, r8
   217fa:	ea43 2384 	orr.w	r3, r3, r4, lsl #10
   217fe:	4648      	mov	r0, r9
   21800:	4a0c      	ldr	r2, [pc, #48]	; (21834 <lfs_dir_find+0x148>)
   21802:	f8cd a000 	str.w	sl, [sp]
   21806:	f00d fbb7 	bl	2ef78 <lfs_dir_get>
            if (res < 0) {
   2180a:	1e04      	subs	r4, r0, #0
   2180c:	dacf      	bge.n	217ae <lfs_dir_find+0xc2>
}
   2180e:	4620      	mov	r0, r4
   21810:	b00d      	add	sp, #52	; 0x34
   21812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOTDIR;
   21816:	f06f 0413 	mvn.w	r4, #19
   2181a:	e7f8      	b.n	2180e <lfs_dir_find+0x122>
   2181c:	002ffc00 	.word	0x002ffc00
   21820:	00033896 	.word	0x00033896
   21824:	00037b11 	.word	0x00037b11
   21828:	00037b10 	.word	0x00037b10
   2182c:	0002f031 	.word	0x0002f031
   21830:	20000008 	.word	0x20000008
   21834:	700ffc00 	.word	0x700ffc00

00021838 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
   21838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2183c:	4690      	mov	r8, r2
    if (file->pos >= file->ctz.size) {
   2183e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   21840:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        void *buffer, lfs_size_t size) {
   21842:	4607      	mov	r7, r0
    if (file->pos >= file->ctz.size) {
   21844:	42b2      	cmp	r2, r6
        void *buffer, lfs_size_t size) {
   21846:	460c      	mov	r4, r1
   21848:	b085      	sub	sp, #20
    if (file->pos >= file->ctz.size) {
   2184a:	d25c      	bcs.n	21906 <lfs_file_flushedread+0xce>
    size = lfs_min(size, file->ctz.size - file->pos);
   2184c:	1ab6      	subs	r6, r6, r2
   2184e:	429e      	cmp	r6, r3
   21850:	bf28      	it	cs
   21852:	461e      	movcs	r6, r3
    nsize = size;
   21854:	46b1      	mov	r9, r6
            int err = lfs_dir_getread(lfs, &file->m,
   21856:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 2190c <lfs_file_flushedread+0xd4>
   2185a:	f101 0a40 	add.w	sl, r1, #64	; 0x40
    while (nsize > 0) {
   2185e:	f1b9 0f00 	cmp.w	r9, #0
   21862:	d101      	bne.n	21868 <lfs_file_flushedread+0x30>
    return size;
   21864:	4630      	mov	r0, r6
   21866:	e018      	b.n	2189a <lfs_file_flushedread+0x62>
        if (!(file->flags & LFS_F_READING) ||
   21868:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2186a:	0351      	lsls	r1, r2, #13
   2186c:	d504      	bpl.n	21878 <lfs_file_flushedread+0x40>
                file->off == lfs->cfg->block_size) {
   2186e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
        if (!(file->flags & LFS_F_READING) ||
   21870:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   21872:	69db      	ldr	r3, [r3, #28]
   21874:	4299      	cmp	r1, r3
   21876:	d11b      	bne.n	218b0 <lfs_file_flushedread+0x78>
            if (!(file->flags & LFS_F_INLINE)) {
   21878:	02d2      	lsls	r2, r2, #11
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2187a:	6b63      	ldr	r3, [r4, #52]	; 0x34
            if (!(file->flags & LFS_F_INLINE)) {
   2187c:	d410      	bmi.n	218a0 <lfs_file_flushedread+0x68>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2187e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   21882:	9202      	str	r2, [sp, #8]
   21884:	f104 0238 	add.w	r2, r4, #56	; 0x38
   21888:	e9cd 3200 	strd	r3, r2, [sp]
   2188c:	4651      	mov	r1, sl
   2188e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   21892:	4638      	mov	r0, r7
   21894:	f00d fc3f 	bl	2f116 <lfs_ctz_find.constprop.0>
                if (err) {
   21898:	b130      	cbz	r0, 218a8 <lfs_file_flushedread+0x70>
}
   2189a:	b005      	add	sp, #20
   2189c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                file->block = LFS_BLOCK_INLINE;
   218a0:	f06f 0201 	mvn.w	r2, #1
                file->off = file->pos;
   218a4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            file->flags |= LFS_F_READING;
   218a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   218aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   218ae:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   218b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   218b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   218b4:	69db      	ldr	r3, [r3, #28]
        if (file->flags & LFS_F_INLINE) {
   218b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   218b8:	1a9d      	subs	r5, r3, r2
   218ba:	454d      	cmp	r5, r9
   218bc:	bf28      	it	cs
   218be:	464d      	movcs	r5, r9
        if (file->flags & LFS_F_INLINE) {
   218c0:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
            int err = lfs_dir_getread(lfs, &file->m,
   218c4:	e9cd 8502 	strd	r8, r5, [sp, #8]
   218c8:	9201      	str	r2, [sp, #4]
        if (file->flags & LFS_F_INLINE) {
   218ca:	d015      	beq.n	218f8 <lfs_file_flushedread+0xc0>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   218cc:	88a2      	ldrh	r2, [r4, #4]
            int err = lfs_dir_getread(lfs, &file->m,
   218ce:	4638      	mov	r0, r7
   218d0:	ea4b 2282 	orr.w	r2, fp, r2, lsl #10
   218d4:	9200      	str	r2, [sp, #0]
   218d6:	f104 0108 	add.w	r1, r4, #8
   218da:	4652      	mov	r2, sl
   218dc:	f7ff fc2c 	bl	21138 <lfs_dir_getread.constprop.0>
            if (err) {
   218e0:	2800      	cmp	r0, #0
   218e2:	d1da      	bne.n	2189a <lfs_file_flushedread+0x62>
        file->pos += diff;
   218e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
        data += diff;
   218e6:	44a8      	add	r8, r5
        file->pos += diff;
   218e8:	442b      	add	r3, r5
   218ea:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   218ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        nsize -= diff;
   218ee:	eba9 0905 	sub.w	r9, r9, r5
        file->off += diff;
   218f2:	442b      	add	r3, r5
   218f4:	63e3      	str	r3, [r4, #60]	; 0x3c
        nsize -= diff;
   218f6:	e7b2      	b.n	2185e <lfs_file_flushedread+0x26>
            int err = lfs_bd_read(lfs,
   218f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   218fa:	4638      	mov	r0, r7
   218fc:	9200      	str	r2, [sp, #0]
   218fe:	4652      	mov	r2, sl
   21900:	f7ff f8f4 	bl	20aec <lfs_bd_read>
   21904:	e7ec      	b.n	218e0 <lfs_file_flushedread+0xa8>
        return 0;
   21906:	2000      	movs	r0, #0
   21908:	e7c7      	b.n	2189a <lfs_file_flushedread+0x62>
   2190a:	bf00      	nop
   2190c:	20100000 	.word	0x20100000

00021910 <lfs_fs_rawtraverse>:
        bool includeorphans) {
   21910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21914:	b091      	sub	sp, #68	; 0x44
   21916:	4604      	mov	r4, r0
   21918:	460d      	mov	r5, r1
   2191a:	4616      	mov	r6, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
   2191c:	2100      	movs	r1, #0
   2191e:	221c      	movs	r2, #28
   21920:	a808      	add	r0, sp, #32
        bool includeorphans) {
   21922:	9305      	str	r3, [sp, #20]
    lfs_mdir_t dir = {.tail = {0, 1}};
   21924:	f00e fe5d 	bl	305e2 <memset>
   21928:	2301      	movs	r3, #1
    lfs_block_t cycle = 0;
   2192a:	f04f 0800 	mov.w	r8, #0
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   2192e:	f240 2902 	movw	r9, #514	; 0x202
    lfs_mdir_t dir = {.tail = {0, 1}};
   21932:	930f      	str	r3, [sp, #60]	; 0x3c
    while (!lfs_pair_isnull(dir.tail)) {
   21934:	a80e      	add	r0, sp, #56	; 0x38
   21936:	f00d fa97 	bl	2ee68 <lfs_pair_isnull>
   2193a:	b120      	cbz	r0, 21946 <lfs_fs_rawtraverse+0x36>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   2193c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   2193e:	2f00      	cmp	r7, #0
   21940:	d155      	bne.n	219ee <lfs_fs_rawtraverse+0xde>
    return 0;
   21942:	4638      	mov	r0, r7
   21944:	e041      	b.n	219ca <lfs_fs_rawtraverse+0xba>
        if (cycle >= lfs->cfg->block_count/2) {
   21946:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21948:	6a1b      	ldr	r3, [r3, #32]
   2194a:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
   2194e:	d27b      	bcs.n	21a48 <lfs_fs_rawtraverse+0x138>
            int err = cb(data, dir.tail[i]);
   21950:	4630      	mov	r0, r6
   21952:	990e      	ldr	r1, [sp, #56]	; 0x38
        cycle += 1;
   21954:	f108 0801 	add.w	r8, r8, #1
            int err = cb(data, dir.tail[i]);
   21958:	47a8      	blx	r5
            if (err) {
   2195a:	2800      	cmp	r0, #0
   2195c:	d135      	bne.n	219ca <lfs_fs_rawtraverse+0xba>
            int err = cb(data, dir.tail[i]);
   2195e:	4630      	mov	r0, r6
   21960:	990f      	ldr	r1, [sp, #60]	; 0x3c
   21962:	47a8      	blx	r5
            if (err) {
   21964:	bb88      	cbnz	r0, 219ca <lfs_fs_rawtraverse+0xba>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
   21966:	4620      	mov	r0, r4
   21968:	aa0e      	add	r2, sp, #56	; 0x38
   2196a:	a908      	add	r1, sp, #32
   2196c:	f00d fb80 	bl	2f070 <lfs_dir_fetch>
        if (err) {
   21970:	bb58      	cbnz	r0, 219ca <lfs_fs_rawtraverse+0xba>
   21972:	4607      	mov	r7, r0
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
   21974:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 21a50 <lfs_fs_rawtraverse+0x140>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   21978:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 21a54 <lfs_fs_rawtraverse+0x144>
        for (uint16_t id = 0; id < dir.count; id++) {
   2197c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   21980:	b2bb      	uxth	r3, r7
   21982:	429a      	cmp	r2, r3
   21984:	d9d6      	bls.n	21934 <lfs_fs_rawtraverse+0x24>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   21986:	aa06      	add	r2, sp, #24
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
   21988:	ea0a 2387 	and.w	r3, sl, r7, lsl #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   2198c:	9200      	str	r2, [sp, #0]
   2198e:	4620      	mov	r0, r4
   21990:	4a31      	ldr	r2, [pc, #196]	; (21a58 <lfs_fs_rawtraverse+0x148>)
   21992:	ea43 030b 	orr.w	r3, r3, fp
   21996:	a908      	add	r1, sp, #32
   21998:	f00d faee 	bl	2ef78 <lfs_dir_get>
            if (tag < 0) {
   2199c:	2800      	cmp	r0, #0
   2199e:	da03      	bge.n	219a8 <lfs_fs_rawtraverse+0x98>
                if (tag == LFS_ERR_NOENT) {
   219a0:	1c83      	adds	r3, r0, #2
   219a2:	d112      	bne.n	219ca <lfs_fs_rawtraverse+0xba>
        for (uint16_t id = 0; id < dir.count; id++) {
   219a4:	3701      	adds	r7, #1
   219a6:	e7e9      	b.n	2197c <lfs_fs_rawtraverse+0x6c>
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   219a8:	ebb9 5f10 	cmp.w	r9, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
   219ac:	ea4f 5310 	mov.w	r3, r0, lsr #20
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   219b0:	d10e      	bne.n	219d0 <lfs_fs_rawtraverse+0xc0>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
   219b2:	9b07      	ldr	r3, [sp, #28]
   219b4:	4622      	mov	r2, r4
   219b6:	9300      	str	r3, [sp, #0]
   219b8:	2100      	movs	r1, #0
   219ba:	4620      	mov	r0, r4
   219bc:	e9cd 5601 	strd	r5, r6, [sp, #4]
   219c0:	9b06      	ldr	r3, [sp, #24]
   219c2:	f00d fbf1 	bl	2f1a8 <lfs_ctz_traverse>
                    if (err) {
   219c6:	2800      	cmp	r0, #0
   219c8:	d0ec      	beq.n	219a4 <lfs_fs_rawtraverse+0x94>
}
   219ca:	b011      	add	sp, #68	; 0x44
   219cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if (includeorphans &&
   219d0:	9a05      	ldr	r2, [sp, #20]
   219d2:	2a00      	cmp	r2, #0
   219d4:	d0e6      	beq.n	219a4 <lfs_fs_rawtraverse+0x94>
   219d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   219da:	d1e3      	bne.n	219a4 <lfs_fs_rawtraverse+0x94>
                    err = cb(data, (&ctz.head)[i]);
   219dc:	4630      	mov	r0, r6
   219de:	9906      	ldr	r1, [sp, #24]
   219e0:	47a8      	blx	r5
                    if (err) {
   219e2:	2800      	cmp	r0, #0
   219e4:	d1f1      	bne.n	219ca <lfs_fs_rawtraverse+0xba>
                    err = cb(data, (&ctz.head)[i]);
   219e6:	4630      	mov	r0, r6
   219e8:	9907      	ldr	r1, [sp, #28]
   219ea:	47a8      	blx	r5
   219ec:	e7eb      	b.n	219c6 <lfs_fs_rawtraverse+0xb6>
        if (f->type != LFS_TYPE_REG) {
   219ee:	79bb      	ldrb	r3, [r7, #6]
   219f0:	2b01      	cmp	r3, #1
   219f2:	d001      	beq.n	219f8 <lfs_fs_rawtraverse+0xe8>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   219f4:	683f      	ldr	r7, [r7, #0]
   219f6:	e7a2      	b.n	2193e <lfs_fs_rawtraverse+0x2e>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
   219f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   219fa:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
   219fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   21a02:	d013      	beq.n	21a2c <lfs_fs_rawtraverse+0x11c>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
   21a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21a06:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
   21a0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   21a0e:	d1f1      	bne.n	219f4 <lfs_fs_rawtraverse+0xe4>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   21a10:	e9cd 5601 	strd	r5, r6, [sp, #4]
   21a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21a16:	4622      	mov	r2, r4
   21a18:	9300      	str	r3, [sp, #0]
   21a1a:	4620      	mov	r0, r4
   21a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21a1e:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21a22:	f00d fbc1 	bl	2f1a8 <lfs_ctz_traverse>
            if (err) {
   21a26:	2800      	cmp	r0, #0
   21a28:	d0e4      	beq.n	219f4 <lfs_fs_rawtraverse+0xe4>
   21a2a:	e7ce      	b.n	219ca <lfs_fs_rawtraverse+0xba>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   21a2c:	e9cd 5601 	strd	r5, r6, [sp, #4]
   21a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21a32:	4622      	mov	r2, r4
   21a34:	9300      	str	r3, [sp, #0]
   21a36:	4620      	mov	r0, r4
   21a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21a3a:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21a3e:	f00d fbb3 	bl	2f1a8 <lfs_ctz_traverse>
            if (err) {
   21a42:	2800      	cmp	r0, #0
   21a44:	d0de      	beq.n	21a04 <lfs_fs_rawtraverse+0xf4>
   21a46:	e7c0      	b.n	219ca <lfs_fs_rawtraverse+0xba>
            return LFS_ERR_CORRUPT;
   21a48:	f06f 0053 	mvn.w	r0, #83	; 0x53
   21a4c:	e7bd      	b.n	219ca <lfs_fs_rawtraverse+0xba>
   21a4e:	bf00      	nop
   21a50:	03fffc00 	.word	0x03fffc00
   21a54:	20000008 	.word	0x20000008
   21a58:	700ffc00 	.word	0x700ffc00

00021a5c <lfs_fs_rawsize>:
    *size += 1;
    return 0;
}

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
    lfs_size_t size = 0;
   21a5c:	2300      	movs	r3, #0
static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
   21a5e:	b507      	push	{r0, r1, r2, lr}
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
   21a60:	4904      	ldr	r1, [pc, #16]	; (21a74 <lfs_fs_rawsize+0x18>)
   21a62:	aa01      	add	r2, sp, #4
    lfs_size_t size = 0;
   21a64:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
   21a66:	f7ff ff53 	bl	21910 <lfs_fs_rawtraverse>
    if (err) {
   21a6a:	b900      	cbnz	r0, 21a6e <lfs_fs_rawsize+0x12>
        return err;
    }

    return size;
   21a6c:	9801      	ldr	r0, [sp, #4]
}
   21a6e:	b003      	add	sp, #12
   21a70:	f85d fb04 	ldr.w	pc, [sp], #4
   21a74:	0002ef43 	.word	0x0002ef43

00021a78 <lfs_bd_erase.isra.0>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   21a78:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
   21a7a:	6a02      	ldr	r2, [r0, #32]
   21a7c:	428a      	cmp	r2, r1
   21a7e:	d80b      	bhi.n	21a98 <lfs_bd_erase.isra.0+0x20>
   21a80:	490d      	ldr	r1, [pc, #52]	; (21ab8 <lfs_bd_erase.isra.0+0x40>)
   21a82:	f240 1303 	movw	r3, #259	; 0x103
   21a86:	4a0d      	ldr	r2, [pc, #52]	; (21abc <lfs_bd_erase.isra.0+0x44>)
   21a88:	480d      	ldr	r0, [pc, #52]	; (21ac0 <lfs_bd_erase.isra.0+0x48>)
   21a8a:	f008 fe16 	bl	2a6ba <assert_print>
   21a8e:	f240 1103 	movw	r1, #259	; 0x103
    LFS_ASSERT(err <= 0);
   21a92:	480a      	ldr	r0, [pc, #40]	; (21abc <lfs_bd_erase.isra.0+0x44>)
   21a94:	f008 fe0a 	bl	2a6ac <assert_post_action>
    int err = lfs->cfg->erase(lfs->cfg, block);
   21a98:	68c3      	ldr	r3, [r0, #12]
   21a9a:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
   21a9c:	2800      	cmp	r0, #0
   21a9e:	dd09      	ble.n	21ab4 <lfs_bd_erase.isra.0+0x3c>
   21aa0:	4908      	ldr	r1, [pc, #32]	; (21ac4 <lfs_bd_erase.isra.0+0x4c>)
   21aa2:	f240 1305 	movw	r3, #261	; 0x105
   21aa6:	4a05      	ldr	r2, [pc, #20]	; (21abc <lfs_bd_erase.isra.0+0x44>)
   21aa8:	4805      	ldr	r0, [pc, #20]	; (21ac0 <lfs_bd_erase.isra.0+0x48>)
   21aaa:	f008 fe06 	bl	2a6ba <assert_print>
   21aae:	f240 1105 	movw	r1, #261	; 0x105
   21ab2:	e7ee      	b.n	21a92 <lfs_bd_erase.isra.0+0x1a>
}
   21ab4:	bd08      	pop	{r3, pc}
   21ab6:	bf00      	nop
   21ab8:	00037d92 	.word	0x00037d92
   21abc:	00037a7e 	.word	0x00037a7e
   21ac0:	00032659 	.word	0x00032659
   21ac4:	00037ad6 	.word	0x00037ad6

00021ac8 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   21ac8:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
   21aca:	6681      	str	r1, [r0, #104]	; 0x68
    LFS_ASSERT(lfs->cfg->read_size != 0);
   21acc:	694d      	ldr	r5, [r1, #20]
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   21ace:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->read_size != 0);
   21ad0:	b95d      	cbnz	r5, 21aea <lfs_init+0x22>
   21ad2:	4988      	ldr	r1, [pc, #544]	; (21cf4 <lfs_init+0x22c>)
   21ad4:	f640 734e 	movw	r3, #3918	; 0xf4e
   21ad8:	4a87      	ldr	r2, [pc, #540]	; (21cf8 <lfs_init+0x230>)
   21ada:	4888      	ldr	r0, [pc, #544]	; (21cfc <lfs_init+0x234>)
   21adc:	f008 fded 	bl	2a6ba <assert_print>
   21ae0:	f640 714e 	movw	r1, #3918	; 0xf4e
    LFS_ASSERT(lfs->cfg->prog_size != 0);
   21ae4:	4884      	ldr	r0, [pc, #528]	; (21cf8 <lfs_init+0x230>)
   21ae6:	f008 fde1 	bl	2a6ac <assert_post_action>
   21aea:	698a      	ldr	r2, [r1, #24]
   21aec:	b94a      	cbnz	r2, 21b02 <lfs_init+0x3a>
   21aee:	4984      	ldr	r1, [pc, #528]	; (21d00 <lfs_init+0x238>)
   21af0:	f640 734f 	movw	r3, #3919	; 0xf4f
   21af4:	4a80      	ldr	r2, [pc, #512]	; (21cf8 <lfs_init+0x230>)
   21af6:	4881      	ldr	r0, [pc, #516]	; (21cfc <lfs_init+0x234>)
   21af8:	f008 fddf 	bl	2a6ba <assert_print>
   21afc:	f640 714f 	movw	r1, #3919	; 0xf4f
   21b00:	e7f0      	b.n	21ae4 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
   21b02:	6a88      	ldr	r0, [r1, #40]	; 0x28
   21b04:	b948      	cbnz	r0, 21b1a <lfs_init+0x52>
   21b06:	497f      	ldr	r1, [pc, #508]	; (21d04 <lfs_init+0x23c>)
   21b08:	f44f 6375 	mov.w	r3, #3920	; 0xf50
   21b0c:	4a7a      	ldr	r2, [pc, #488]	; (21cf8 <lfs_init+0x230>)
   21b0e:	487b      	ldr	r0, [pc, #492]	; (21cfc <lfs_init+0x234>)
   21b10:	f008 fdd3 	bl	2a6ba <assert_print>
   21b14:	f44f 6175 	mov.w	r1, #3920	; 0xf50
   21b18:	e7e4      	b.n	21ae4 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
   21b1a:	fbb0 f3f5 	udiv	r3, r0, r5
   21b1e:	fb05 0313 	mls	r3, r5, r3, r0
   21b22:	b14b      	cbz	r3, 21b38 <lfs_init+0x70>
   21b24:	4978      	ldr	r1, [pc, #480]	; (21d08 <lfs_init+0x240>)
   21b26:	f640 7354 	movw	r3, #3924	; 0xf54
   21b2a:	4a73      	ldr	r2, [pc, #460]	; (21cf8 <lfs_init+0x230>)
   21b2c:	4873      	ldr	r0, [pc, #460]	; (21cfc <lfs_init+0x234>)
   21b2e:	f008 fdc4 	bl	2a6ba <assert_print>
   21b32:	f640 7154 	movw	r1, #3924	; 0xf54
   21b36:	e7d5      	b.n	21ae4 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
   21b38:	fbb0 f3f2 	udiv	r3, r0, r2
   21b3c:	fb02 0313 	mls	r3, r2, r3, r0
   21b40:	b14b      	cbz	r3, 21b56 <lfs_init+0x8e>
   21b42:	4972      	ldr	r1, [pc, #456]	; (21d0c <lfs_init+0x244>)
   21b44:	f640 7355 	movw	r3, #3925	; 0xf55
   21b48:	4a6b      	ldr	r2, [pc, #428]	; (21cf8 <lfs_init+0x230>)
   21b4a:	486c      	ldr	r0, [pc, #432]	; (21cfc <lfs_init+0x234>)
   21b4c:	f008 fdb5 	bl	2a6ba <assert_print>
   21b50:	f640 7155 	movw	r1, #3925	; 0xf55
   21b54:	e7c6      	b.n	21ae4 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
   21b56:	69ca      	ldr	r2, [r1, #28]
   21b58:	fbb2 f3f0 	udiv	r3, r2, r0
   21b5c:	fb00 2313 	mls	r3, r0, r3, r2
   21b60:	b14b      	cbz	r3, 21b76 <lfs_init+0xae>
   21b62:	496b      	ldr	r1, [pc, #428]	; (21d10 <lfs_init+0x248>)
   21b64:	f640 7356 	movw	r3, #3926	; 0xf56
   21b68:	4a63      	ldr	r2, [pc, #396]	; (21cf8 <lfs_init+0x230>)
   21b6a:	4864      	ldr	r0, [pc, #400]	; (21cfc <lfs_init+0x234>)
   21b6c:	f008 fda5 	bl	2a6ba <assert_print>
   21b70:	f640 7156 	movw	r1, #3926	; 0xf56
   21b74:	e7b6      	b.n	21ae4 <lfs_init+0x1c>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
   21b76:	f04f 33ff 	mov.w	r3, #4294967295
   21b7a:	f1a2 0508 	sub.w	r5, r2, #8
   21b7e:	fbb3 f3f5 	udiv	r3, r3, r5
	return 32 - __builtin_clz(a-1);
   21b82:	3b01      	subs	r3, #1
   21b84:	fab3 f383 	clz	r3, r3
   21b88:	f1c3 0320 	rsb	r3, r3, #32
   21b8c:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   21b90:	d209      	bcs.n	21ba6 <lfs_init+0xde>
   21b92:	4960      	ldr	r1, [pc, #384]	; (21d14 <lfs_init+0x24c>)
   21b94:	f640 7359 	movw	r3, #3929	; 0xf59
   21b98:	4a57      	ldr	r2, [pc, #348]	; (21cf8 <lfs_init+0x230>)
   21b9a:	4858      	ldr	r0, [pc, #352]	; (21cfc <lfs_init+0x234>)
   21b9c:	f008 fd8d 	bl	2a6ba <assert_print>
   21ba0:	f640 7159 	movw	r1, #3929	; 0xf59
   21ba4:	e79e      	b.n	21ae4 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
   21ba6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   21ba8:	b94b      	cbnz	r3, 21bbe <lfs_init+0xf6>
   21baa:	495b      	ldr	r1, [pc, #364]	; (21d18 <lfs_init+0x250>)
   21bac:	f640 7362 	movw	r3, #3938	; 0xf62
   21bb0:	4a51      	ldr	r2, [pc, #324]	; (21cf8 <lfs_init+0x230>)
   21bb2:	4852      	ldr	r0, [pc, #328]	; (21cfc <lfs_init+0x234>)
   21bb4:	f008 fd81 	bl	2a6ba <assert_print>
   21bb8:	f640 7162 	movw	r1, #3938	; 0xf62
   21bbc:	e792      	b.n	21ae4 <lfs_init+0x1c>
    if (lfs->cfg->read_buffer) {
   21bbe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   21bc0:	b1d3      	cbz	r3, 21bf8 <lfs_init+0x130>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
   21bc2:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
   21bc4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   21bc8:	b30a      	cbz	r2, 21c0e <lfs_init+0x146>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
   21bca:	61e2      	str	r2, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
   21bcc:	4621      	mov	r1, r4
   21bce:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   21bd0:	f00d fb23 	bl	2f21a <lfs_cache_zero.isra.0>
    lfs_cache_zero(lfs, &lfs->pcache);
   21bd4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   21bd6:	f104 0110 	add.w	r1, r4, #16
   21bda:	f00d fb1e 	bl	2f21a <lfs_cache_zero.isra.0>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
   21bde:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21be0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   21be2:	b9d8      	cbnz	r0, 21c1c <lfs_init+0x154>
   21be4:	494d      	ldr	r1, [pc, #308]	; (21d1c <lfs_init+0x254>)
   21be6:	f44f 6378 	mov.w	r3, #3968	; 0xf80
   21bea:	4a43      	ldr	r2, [pc, #268]	; (21cf8 <lfs_init+0x230>)
   21bec:	4843      	ldr	r0, [pc, #268]	; (21cfc <lfs_init+0x234>)
   21bee:	f008 fd64 	bl	2a6ba <assert_print>
   21bf2:	f44f 6178 	mov.w	r1, #3968	; 0xf80
   21bf6:	e775      	b.n	21ae4 <lfs_init+0x1c>
/* Allocate memory, only used if buffers are not provided to littlefs */
/* Note, memory must be 64-bit aligned */
static inline void *lfs_malloc(size_t size)
{
#ifndef LFS_NO_MALLOC
	return malloc(size);
   21bf8:	f006 fd5c 	bl	286b4 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   21bfc:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
   21bfe:	2800      	cmp	r0, #0
   21c00:	d1e0      	bne.n	21bc4 <lfs_init+0xfc>
    lfs_deinit(lfs);
   21c02:	4620      	mov	r0, r4
   21c04:	f00d f9a2 	bl	2ef4c <lfs_deinit>
    return err;
   21c08:	f06f 000b 	mvn.w	r0, #11
   21c0c:	e071      	b.n	21cf2 <lfs_init+0x22a>
   21c0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
   21c10:	f006 fd50 	bl	286b4 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   21c14:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
   21c16:	2800      	cmp	r0, #0
   21c18:	d1d8      	bne.n	21bcc <lfs_init+0x104>
   21c1a:	e7f2      	b.n	21c02 <lfs_init+0x13a>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
   21c1c:	0741      	lsls	r1, r0, #29
   21c1e:	d102      	bne.n	21c26 <lfs_init+0x15e>
   21c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   21c22:	079a      	lsls	r2, r3, #30
   21c24:	d009      	beq.n	21c3a <lfs_init+0x172>
   21c26:	493e      	ldr	r1, [pc, #248]	; (21d20 <lfs_init+0x258>)
   21c28:	f640 7381 	movw	r3, #3969	; 0xf81
   21c2c:	4a32      	ldr	r2, [pc, #200]	; (21cf8 <lfs_init+0x230>)
   21c2e:	4833      	ldr	r0, [pc, #204]	; (21cfc <lfs_init+0x234>)
   21c30:	f008 fd43 	bl	2a6ba <assert_print>
   21c34:	f640 7181 	movw	r1, #3969	; 0xf81
   21c38:	e754      	b.n	21ae4 <lfs_init+0x1c>
    if (lfs->cfg->lookahead_buffer) {
   21c3a:	b173      	cbz	r3, 21c5a <lfs_init+0x192>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
   21c3c:	6663      	str	r3, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
   21c3e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   21c42:	2aff      	cmp	r2, #255	; 0xff
   21c44:	d90f      	bls.n	21c66 <lfs_init+0x19e>
   21c46:	4937      	ldr	r1, [pc, #220]	; (21d24 <lfs_init+0x25c>)
   21c48:	f640 738e 	movw	r3, #3982	; 0xf8e
   21c4c:	4a2a      	ldr	r2, [pc, #168]	; (21cf8 <lfs_init+0x230>)
   21c4e:	482b      	ldr	r0, [pc, #172]	; (21cfc <lfs_init+0x234>)
   21c50:	f008 fd33 	bl	2a6ba <assert_print>
   21c54:	f640 718e 	movw	r1, #3982	; 0xf8e
   21c58:	e744      	b.n	21ae4 <lfs_init+0x1c>
   21c5a:	f006 fd2b 	bl	286b4 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
   21c5e:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
   21c60:	2800      	cmp	r0, #0
   21c62:	d1ec      	bne.n	21c3e <lfs_init+0x176>
   21c64:	e7cd      	b.n	21c02 <lfs_init+0x13a>
        lfs->name_max = LFS_NAME_MAX;
   21c66:	2a00      	cmp	r2, #0
   21c68:	bf08      	it	eq
   21c6a:	22ff      	moveq	r2, #255	; 0xff
   21c6c:	66e2      	str	r2, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
   21c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21c70:	2a00      	cmp	r2, #0
   21c72:	da09      	bge.n	21c88 <lfs_init+0x1c0>
   21c74:	492c      	ldr	r1, [pc, #176]	; (21d28 <lfs_init+0x260>)
   21c76:	f640 7394 	movw	r3, #3988	; 0xf94
   21c7a:	4a1f      	ldr	r2, [pc, #124]	; (21cf8 <lfs_init+0x230>)
   21c7c:	481f      	ldr	r0, [pc, #124]	; (21cfc <lfs_init+0x234>)
   21c7e:	f008 fd1c 	bl	2a6ba <assert_print>
   21c82:	f640 7194 	movw	r1, #3988	; 0xf94
   21c86:	e72d      	b.n	21ae4 <lfs_init+0x1c>
        lfs->file_max = LFS_FILE_MAX;
   21c88:	bf08      	it	eq
   21c8a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
   21c8e:	f240 31fe 	movw	r1, #1022	; 0x3fe
   21c92:	6722      	str	r2, [r4, #112]	; 0x70
   21c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   21c96:	428a      	cmp	r2, r1
   21c98:	d909      	bls.n	21cae <lfs_init+0x1e6>
   21c9a:	4924      	ldr	r1, [pc, #144]	; (21d2c <lfs_init+0x264>)
   21c9c:	f640 739a 	movw	r3, #3994	; 0xf9a
   21ca0:	4a15      	ldr	r2, [pc, #84]	; (21cf8 <lfs_init+0x230>)
   21ca2:	4816      	ldr	r0, [pc, #88]	; (21cfc <lfs_init+0x234>)
   21ca4:	f008 fd09 	bl	2a6ba <assert_print>
   21ca8:	f640 719a 	movw	r1, #3994	; 0xf9a
   21cac:	e71a      	b.n	21ae4 <lfs_init+0x1c>
        lfs->attr_max = LFS_ATTR_MAX;
   21cae:	2a00      	cmp	r2, #0
   21cb0:	bf08      	it	eq
   21cb2:	460a      	moveq	r2, r1
   21cb4:	6762      	str	r2, [r4, #116]	; 0x74
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
   21cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   21cb8:	69db      	ldr	r3, [r3, #28]
   21cba:	429a      	cmp	r2, r3
   21cbc:	d909      	bls.n	21cd2 <lfs_init+0x20a>
   21cbe:	491c      	ldr	r1, [pc, #112]	; (21d30 <lfs_init+0x268>)
   21cc0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   21cc4:	4a0c      	ldr	r2, [pc, #48]	; (21cf8 <lfs_init+0x230>)
   21cc6:	480d      	ldr	r0, [pc, #52]	; (21cfc <lfs_init+0x234>)
   21cc8:	f008 fcf7 	bl	2a6ba <assert_print>
   21ccc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   21cd0:	e708      	b.n	21ae4 <lfs_init+0x1c>
    lfs->mlist = NULL;
   21cd2:	2000      	movs	r0, #0
    lfs->root[0] = LFS_BLOCK_NULL;
   21cd4:	f04f 33ff 	mov.w	r3, #4294967295
    lfs->seed = 0;
   21cd8:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
    lfs->root[1] = LFS_BLOCK_NULL;
   21cdc:	e9c4 3308 	strd	r3, r3, [r4, #32]
    lfs->gdisk = (lfs_gstate_t){0};
   21ce0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
    lfs->gstate = (lfs_gstate_t){0};
   21ce4:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
    lfs->gdelta = (lfs_gstate_t){0};
   21ce8:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
    lfs->gdisk = (lfs_gstate_t){0};
   21cec:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
   21cee:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
   21cf0:	6520      	str	r0, [r4, #80]	; 0x50
}
   21cf2:	bd38      	pop	{r3, r4, r5, pc}
   21cf4:	00037b13 	.word	0x00037b13
   21cf8:	00037a7e 	.word	0x00037a7e
   21cfc:	00032659 	.word	0x00032659
   21d00:	00037b2c 	.word	0x00037b2c
   21d04:	00037b45 	.word	0x00037b45
   21d08:	00037b5f 	.word	0x00037b5f
   21d0c:	00037b8f 	.word	0x00037b8f
   21d10:	00037bbf 	.word	0x00037bbf
   21d14:	00037bf0 	.word	0x00037bf0
   21d18:	00037c3c 	.word	0x00037c3c
   21d1c:	00037c58 	.word	0x00037c58
   21d20:	00037c75 	.word	0x00037c75
   21d24:	00037cc9 	.word	0x00037cc9
   21d28:	00037ce3 	.word	0x00037ce3
   21d2c:	00037d04 	.word	0x00037d04
   21d30:	00037d1f 	.word	0x00037d1f

00021d34 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   21d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21d38:	460d      	mov	r5, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   21d3a:	6809      	ldr	r1, [r1, #0]
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   21d3c:	4698      	mov	r8, r3
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   21d3e:	1ccb      	adds	r3, r1, #3
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   21d40:	4606      	mov	r6, r0
   21d42:	4617      	mov	r7, r2
   21d44:	b085      	sub	sp, #20
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   21d46:	d903      	bls.n	21d50 <lfs_bd_flush+0x1c>
    return 0;
   21d48:	2000      	movs	r0, #0
}
   21d4a:	b005      	add	sp, #20
   21d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
   21d50:	6e80      	ldr	r0, [r0, #104]	; 0x68
   21d52:	6a03      	ldr	r3, [r0, #32]
   21d54:	4299      	cmp	r1, r3
   21d56:	d309      	bcc.n	21d6c <lfs_bd_flush+0x38>
   21d58:	491f      	ldr	r1, [pc, #124]	; (21dd8 <lfs_bd_flush+0xa4>)
   21d5a:	23a2      	movs	r3, #162	; 0xa2
   21d5c:	4a1f      	ldr	r2, [pc, #124]	; (21ddc <lfs_bd_flush+0xa8>)
   21d5e:	4820      	ldr	r0, [pc, #128]	; (21de0 <lfs_bd_flush+0xac>)
   21d60:	f008 fcab 	bl	2a6ba <assert_print>
   21d64:	21a2      	movs	r1, #162	; 0xa2
        LFS_ASSERT(err <= 0);
   21d66:	481d      	ldr	r0, [pc, #116]	; (21ddc <lfs_bd_flush+0xa8>)
   21d68:	f008 fca0 	bl	2a6ac <assert_post_action>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
   21d6c:	6982      	ldr	r2, [r0, #24]
	return lfs_aligndown(a + alignment-1, alignment);
   21d6e:	68ac      	ldr	r4, [r5, #8]
   21d70:	4414      	add	r4, r2
   21d72:	3c01      	subs	r4, #1
	return a - (a % alignment);
   21d74:	fbb4 f3f2 	udiv	r3, r4, r2
   21d78:	fb02 4313 	mls	r3, r2, r3, r4
   21d7c:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
   21d7e:	9400      	str	r4, [sp, #0]
   21d80:	f8d0 9008 	ldr.w	r9, [r0, #8]
   21d84:	68eb      	ldr	r3, [r5, #12]
   21d86:	686a      	ldr	r2, [r5, #4]
   21d88:	47c8      	blx	r9
        LFS_ASSERT(err <= 0);
   21d8a:	2800      	cmp	r0, #0
   21d8c:	dd07      	ble.n	21d9e <lfs_bd_flush+0x6a>
   21d8e:	4915      	ldr	r1, [pc, #84]	; (21de4 <lfs_bd_flush+0xb0>)
   21d90:	23a6      	movs	r3, #166	; 0xa6
   21d92:	4a12      	ldr	r2, [pc, #72]	; (21ddc <lfs_bd_flush+0xa8>)
   21d94:	4812      	ldr	r0, [pc, #72]	; (21de0 <lfs_bd_flush+0xac>)
   21d96:	f008 fc90 	bl	2a6ba <assert_print>
   21d9a:	21a6      	movs	r1, #166	; 0xa6
   21d9c:	e7e3      	b.n	21d66 <lfs_bd_flush+0x32>
        if (err) {
   21d9e:	d1d4      	bne.n	21d4a <lfs_bd_flush+0x16>
        if (validate) {
   21da0:	f1b8 0f00 	cmp.w	r8, #0
   21da4:	d104      	bne.n	21db0 <lfs_bd_flush+0x7c>
        lfs_cache_zero(lfs, pcache);
   21da6:	4629      	mov	r1, r5
   21da8:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   21daa:	f00d fa36 	bl	2f21a <lfs_cache_zero.isra.0>
   21dae:	e7cb      	b.n	21d48 <lfs_bd_flush+0x14>
    rcache->block = LFS_BLOCK_NULL;
   21db0:	f04f 33ff 	mov.w	r3, #4294967295
   21db4:	603b      	str	r3, [r7, #0]
            int res = lfs_bd_cmp(lfs,
   21db6:	9402      	str	r4, [sp, #8]
   21db8:	68eb      	ldr	r3, [r5, #12]
   21dba:	4622      	mov	r2, r4
   21dbc:	9301      	str	r3, [sp, #4]
   21dbe:	686b      	ldr	r3, [r5, #4]
   21dc0:	4639      	mov	r1, r7
   21dc2:	9300      	str	r3, [sp, #0]
   21dc4:	4630      	mov	r0, r6
   21dc6:	682b      	ldr	r3, [r5, #0]
   21dc8:	f00d f900 	bl	2efcc <lfs_bd_cmp.constprop.0>
            if (res < 0) {
   21dcc:	2800      	cmp	r0, #0
   21dce:	dbbc      	blt.n	21d4a <lfs_bd_flush+0x16>
            if (res != LFS_CMP_EQ) {
   21dd0:	d0e9      	beq.n	21da6 <lfs_bd_flush+0x72>
                return LFS_ERR_CORRUPT;
   21dd2:	f06f 0053 	mvn.w	r0, #83	; 0x53
   21dd6:	e7b8      	b.n	21d4a <lfs_bd_flush+0x16>
   21dd8:	00037d4e 	.word	0x00037d4e
   21ddc:	00037a7e 	.word	0x00037a7e
   21de0:	00032659 	.word	0x00032659
   21de4:	00037ad6 	.word	0x00037ad6

00021de8 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
   21de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21dec:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
   21df0:	f118 0f02 	cmn.w	r8, #2
        const void *buffer, lfs_size_t size) {
   21df4:	4692      	mov	sl, r2
   21df6:	4606      	mov	r6, r0
   21df8:	460c      	mov	r4, r1
   21dfa:	4699      	mov	r9, r3
   21dfc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
   21dfe:	6e82      	ldr	r2, [r0, #104]	; 0x68
   21e00:	d00c      	beq.n	21e1c <lfs_bd_prog+0x34>
   21e02:	6a13      	ldr	r3, [r2, #32]
   21e04:	4543      	cmp	r3, r8
   21e06:	d809      	bhi.n	21e1c <lfs_bd_prog+0x34>
   21e08:	4930      	ldr	r1, [pc, #192]	; (21ecc <lfs_bd_prog+0xe4>)
   21e0a:	23d7      	movs	r3, #215	; 0xd7
   21e0c:	4a30      	ldr	r2, [pc, #192]	; (21ed0 <lfs_bd_prog+0xe8>)
   21e0e:	4831      	ldr	r0, [pc, #196]	; (21ed4 <lfs_bd_prog+0xec>)
   21e10:	f008 fc53 	bl	2a6ba <assert_print>
   21e14:	21d7      	movs	r1, #215	; 0xd7
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
   21e16:	482e      	ldr	r0, [pc, #184]	; (21ed0 <lfs_bd_prog+0xe8>)
   21e18:	f008 fc48 	bl	2a6ac <assert_post_action>
   21e1c:	69d2      	ldr	r2, [r2, #28]
   21e1e:	19eb      	adds	r3, r5, r7
   21e20:	4293      	cmp	r3, r2
   21e22:	d804      	bhi.n	21e2e <lfs_bd_prog+0x46>
        pcache->size = 0;
   21e24:	f04f 0b00 	mov.w	fp, #0
    while (size > 0) {
   21e28:	b9f7      	cbnz	r7, 21e68 <lfs_bd_prog+0x80>
    return 0;
   21e2a:	4638      	mov	r0, r7
   21e2c:	e04b      	b.n	21ec6 <lfs_bd_prog+0xde>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
   21e2e:	492a      	ldr	r1, [pc, #168]	; (21ed8 <lfs_bd_prog+0xf0>)
   21e30:	23d8      	movs	r3, #216	; 0xd8
   21e32:	4a27      	ldr	r2, [pc, #156]	; (21ed0 <lfs_bd_prog+0xe8>)
   21e34:	4827      	ldr	r0, [pc, #156]	; (21ed4 <lfs_bd_prog+0xec>)
   21e36:	f008 fc40 	bl	2a6ba <assert_print>
   21e3a:	21d8      	movs	r1, #216	; 0xd8
   21e3c:	e7eb      	b.n	21e16 <lfs_bd_prog+0x2e>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
   21e3e:	3301      	adds	r3, #1
   21e40:	d007      	beq.n	21e52 <lfs_bd_prog+0x6a>
   21e42:	4926      	ldr	r1, [pc, #152]	; (21edc <lfs_bd_prog+0xf4>)
   21e44:	23f5      	movs	r3, #245	; 0xf5
   21e46:	4a22      	ldr	r2, [pc, #136]	; (21ed0 <lfs_bd_prog+0xe8>)
   21e48:	4822      	ldr	r0, [pc, #136]	; (21ed4 <lfs_bd_prog+0xec>)
   21e4a:	f008 fc36 	bl	2a6ba <assert_print>
   21e4e:	21f5      	movs	r1, #245	; 0xf5
   21e50:	e7e1      	b.n	21e16 <lfs_bd_prog+0x2e>
        pcache->block = block;
   21e52:	f8c4 8000 	str.w	r8, [r4]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   21e56:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   21e58:	699a      	ldr	r2, [r3, #24]
   21e5a:	fbb5 f3f2 	udiv	r3, r5, r2
   21e5e:	fb02 5313 	mls	r3, r2, r3, r5
   21e62:	1aeb      	subs	r3, r5, r3
        pcache->size = 0;
   21e64:	e9c4 3b01 	strd	r3, fp, [r4, #4]
        if (block == pcache->block &&
   21e68:	6823      	ldr	r3, [r4, #0]
   21e6a:	4543      	cmp	r3, r8
   21e6c:	d1e7      	bne.n	21e3e <lfs_bd_prog+0x56>
                off >= pcache->off &&
   21e6e:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
   21e70:	42a8      	cmp	r0, r5
   21e72:	d8e4      	bhi.n	21e3e <lfs_bd_prog+0x56>
                off < pcache->off + lfs->cfg->cache_size) {
   21e74:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   21e76:	6a92      	ldr	r2, [r2, #40]	; 0x28
   21e78:	4402      	add	r2, r0
                off >= pcache->off &&
   21e7a:	42aa      	cmp	r2, r5
   21e7c:	d9df      	bls.n	21e3e <lfs_bd_prog+0x56>
            lfs_size_t diff = lfs_min(size,
   21e7e:	1b52      	subs	r2, r2, r5
	return (a < b) ? a : b;
   21e80:	42ba      	cmp	r2, r7
   21e82:	bf28      	it	cs
   21e84:	463a      	movcs	r2, r7
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
   21e86:	68e3      	ldr	r3, [r4, #12]
   21e88:	1a28      	subs	r0, r5, r0
   21e8a:	4418      	add	r0, r3
   21e8c:	990e      	ldr	r1, [sp, #56]	; 0x38
   21e8e:	9201      	str	r2, [sp, #4]
   21e90:	f00e fb6d 	bl	3056e <memcpy>
            data += diff;
   21e94:	9a01      	ldr	r2, [sp, #4]
   21e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            off += diff;
   21e98:	4415      	add	r5, r2
            data += diff;
   21e9a:	4413      	add	r3, r2
   21e9c:	930e      	str	r3, [sp, #56]	; 0x38
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   21e9e:	6863      	ldr	r3, [r4, #4]
            size -= diff;
   21ea0:	1abf      	subs	r7, r7, r2
	return (a > b) ? a : b;
   21ea2:	68a2      	ldr	r2, [r4, #8]
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   21ea4:	1aeb      	subs	r3, r5, r3
   21ea6:	4293      	cmp	r3, r2
   21ea8:	bf38      	it	cc
   21eaa:	4613      	movcc	r3, r2
   21eac:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
   21eae:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   21eb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
   21eb2:	429a      	cmp	r2, r3
   21eb4:	d1b8      	bne.n	21e28 <lfs_bd_prog+0x40>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   21eb6:	464b      	mov	r3, r9
   21eb8:	4652      	mov	r2, sl
   21eba:	4621      	mov	r1, r4
   21ebc:	4630      	mov	r0, r6
   21ebe:	f7ff ff39 	bl	21d34 <lfs_bd_flush>
                if (err) {
   21ec2:	2800      	cmp	r0, #0
   21ec4:	d0b0      	beq.n	21e28 <lfs_bd_prog+0x40>
}
   21ec6:	b003      	add	sp, #12
   21ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ecc:	00037d74 	.word	0x00037d74
   21ed0:	00037a7e 	.word	0x00037a7e
   21ed4:	00032659 	.word	0x00032659
   21ed8:	00037db0 	.word	0x00037db0
   21edc:	00037dd3 	.word	0x00037dd3

00021ee0 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   21ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lfs->cfg->prog_size);
   21ee4:	6e83      	ldr	r3, [r0, #104]	; 0x68
	return lfs_aligndown(a + alignment-1, alignment);
   21ee6:	684e      	ldr	r6, [r1, #4]
   21ee8:	699a      	ldr	r2, [r3, #24]
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   21eea:	4680      	mov	r8, r0
   21eec:	4416      	add	r6, r2
   21eee:	3607      	adds	r6, #7
	return a - (a % alignment);
   21ef0:	fbb6 f3f2 	udiv	r3, r6, r2
   21ef4:	fb02 6313 	mls	r3, r2, r3, r6
   21ef8:	1af6      	subs	r6, r6, r3
    uint32_t crc1 = 0;
   21efa:	2300      	movs	r3, #0
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   21efc:	460d      	mov	r5, r1
   21efe:	b08b      	sub	sp, #44	; 0x2c
    lfs_off_t off1 = 0;
   21f00:	469b      	mov	fp, r3
    uint32_t crc1 = 0;
   21f02:	9305      	str	r3, [sp, #20]
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
   21f04:	f1a6 0308 	sub.w	r3, r6, #8
   21f08:	9304      	str	r3, [sp, #16]
    while (commit->off < end) {
   21f0a:	686b      	ldr	r3, [r5, #4]
   21f0c:	42b3      	cmp	r3, r6
   21f0e:	d31d      	bcc.n	21f4c <lfs_dir_commitcrc+0x6c>
    rcache->block = LFS_BLOCK_NULL;
   21f10:	4641      	mov	r1, r8
   21f12:	f04f 33ff 	mov.w	r3, #4294967295
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   21f16:	4642      	mov	r2, r8
    rcache->block = LFS_BLOCK_NULL;
   21f18:	f841 3b10 	str.w	r3, [r1], #16
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   21f1c:	4640      	mov	r0, r8
   21f1e:	2300      	movs	r3, #0
   21f20:	f7ff ff08 	bl	21d34 <lfs_bd_flush>
    if (err) {
   21f24:	4604      	mov	r4, r0
   21f26:	2800      	cmp	r0, #0
   21f28:	f040 80bf 	bne.w	220aa <lfs_dir_commitcrc+0x1ca>
    err = lfs->cfg->sync(lfs->cfg);
   21f2c:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
   21f30:	6903      	ldr	r3, [r0, #16]
   21f32:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
   21f34:	1e04      	subs	r4, r0, #0
   21f36:	dd75      	ble.n	22024 <lfs_dir_commitcrc+0x144>
   21f38:	495f      	ldr	r1, [pc, #380]	; (220b8 <lfs_dir_commitcrc+0x1d8>)
   21f3a:	4860      	ldr	r0, [pc, #384]	; (220bc <lfs_dir_commitcrc+0x1dc>)
   21f3c:	23cc      	movs	r3, #204	; 0xcc
   21f3e:	4a60      	ldr	r2, [pc, #384]	; (220c0 <lfs_dir_commitcrc+0x1e0>)
   21f40:	f008 fbbb 	bl	2a6ba <assert_print>
   21f44:	21cc      	movs	r1, #204	; 0xcc
   21f46:	485e      	ldr	r0, [pc, #376]	; (220c0 <lfs_dir_commitcrc+0x1e0>)
   21f48:	f008 fbb0 	bl	2a6ac <assert_post_action>
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   21f4c:	f240 32fe 	movw	r2, #1022	; 0x3fe
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
   21f50:	f103 0a04 	add.w	sl, r3, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   21f54:	eba6 030a 	sub.w	r3, r6, sl
   21f58:	4293      	cmp	r3, r2
   21f5a:	bf94      	ite	ls
   21f5c:	eb0a 0703 	addls.w	r7, sl, r3
   21f60:	eb0a 0702 	addhi.w	r7, sl, r2
        if (noff < end) {
   21f64:	42b7      	cmp	r7, r6
   21f66:	d203      	bcs.n	21f70 <lfs_dir_commitcrc+0x90>
	return (a < b) ? a : b;
   21f68:	9b04      	ldr	r3, [sp, #16]
   21f6a:	429f      	cmp	r7, r3
   21f6c:	bf28      	it	cs
   21f6e:	461f      	movcs	r7, r3
        lfs_tag_t tag = 0xffffffff;
   21f70:	f04f 33ff 	mov.w	r3, #4294967295
   21f74:	9307      	str	r3, [sp, #28]
        int err = lfs_bd_read(lfs,
   21f76:	2304      	movs	r3, #4
   21f78:	aa07      	add	r2, sp, #28
   21f7a:	e9cd 7201 	strd	r7, r2, [sp, #4]
   21f7e:	9303      	str	r3, [sp, #12]
   21f80:	682a      	ldr	r2, [r5, #0]
   21f82:	2100      	movs	r1, #0
   21f84:	9200      	str	r2, [sp, #0]
   21f86:	4640      	mov	r0, r8
   21f88:	4642      	mov	r2, r8
   21f8a:	f7fe fdaf 	bl	20aec <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   21f8e:	4604      	mov	r4, r0
   21f90:	b118      	cbz	r0, 21f9a <lfs_dir_commitcrc+0xba>
   21f92:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21f96:	f040 8088 	bne.w	220aa <lfs_dir_commitcrc+0x1ca>
	return __builtin_bswap32(a);
   21f9a:	9b07      	ldr	r3, [sp, #28]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21f9c:	eba7 070a 	sub.w	r7, r7, sl
   21fa0:	ba1b      	rev	r3, r3
        bool reset = ~lfs_frombe32(tag) >> 31;
   21fa2:	ea6f 0903 	mvn.w	r9, r3
   21fa6:	ea4f 73d9 	mov.w	r3, r9, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   21fae:	ea47 5703 	orr.w	r7, r7, r3, lsl #20
   21fb2:	f447 277f 	orr.w	r7, r7, #1044480	; 0xff000
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   21fb6:	68ab      	ldr	r3, [r5, #8]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21fb8:	f447 6740 	orr.w	r7, r7, #3072	; 0xc00
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21fbc:	ac08      	add	r4, sp, #32
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21fbe:	9707      	str	r7, [sp, #28]
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   21fc0:	405f      	eors	r7, r3
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21fc2:	4621      	mov	r1, r4
   21fc4:	2204      	movs	r2, #4
   21fc6:	68e8      	ldr	r0, [r5, #12]
   21fc8:	ba3f      	rev	r7, r7
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   21fca:	9708      	str	r7, [sp, #32]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21fcc:	f001 ff02 	bl	23dd4 <lfs_crc>
        err = lfs_bd_prog(lfs,
   21fd0:	2308      	movs	r3, #8
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21fd2:	60e8      	str	r0, [r5, #12]
        err = lfs_bd_prog(lfs,
   21fd4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   21fd8:	686b      	ldr	r3, [r5, #4]
        footer[1] = lfs_tole32(commit->crc);
   21fda:	9009      	str	r0, [sp, #36]	; 0x24
        err = lfs_bd_prog(lfs,
   21fdc:	9301      	str	r3, [sp, #4]
   21fde:	682b      	ldr	r3, [r5, #0]
   21fe0:	4642      	mov	r2, r8
   21fe2:	9300      	str	r3, [sp, #0]
   21fe4:	4640      	mov	r0, r8
   21fe6:	2300      	movs	r3, #0
   21fe8:	f108 0110 	add.w	r1, r8, #16
   21fec:	f7ff fefc 	bl	21de8 <lfs_bd_prog>
        if (err) {
   21ff0:	4604      	mov	r4, r0
   21ff2:	2800      	cmp	r0, #0
   21ff4:	d159      	bne.n	220aa <lfs_dir_commitcrc+0x1ca>
            off1 = commit->off + sizeof(uint32_t);
   21ff6:	6869      	ldr	r1, [r5, #4]
        if (off1 == 0) {
   21ff8:	f1bb 0f00 	cmp.w	fp, #0
   21ffc:	d103      	bne.n	22006 <lfs_dir_commitcrc+0x126>
            crc1 = commit->crc;
   21ffe:	68eb      	ldr	r3, [r5, #12]
            off1 = commit->off + sizeof(uint32_t);
   22000:	f101 0b04 	add.w	fp, r1, #4
            crc1 = commit->crc;
   22004:	9305      	str	r3, [sp, #20]
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   22006:	9a07      	ldr	r2, [sp, #28]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   22008:	f009 4900 	and.w	r9, r9, #2147483648	; 0x80000000
    return tag & 0x000003ff;
   2200c:	f3c2 0309 	ubfx	r3, r2, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   22010:	3304      	adds	r3, #4
   22012:	440b      	add	r3, r1
   22014:	606b      	str	r3, [r5, #4]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   22016:	f04f 33ff 	mov.w	r3, #4294967295
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   2201a:	ea89 0202 	eor.w	r2, r9, r2
   2201e:	60aa      	str	r2, [r5, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   22020:	60eb      	str	r3, [r5, #12]
   22022:	e772      	b.n	21f0a <lfs_dir_commitcrc+0x2a>
    if (err) {
   22024:	d141      	bne.n	220aa <lfs_dir_commitcrc+0x1ca>
    while (off < end) {
   22026:	46da      	mov	sl, fp
    lfs_off_t off = commit->begin;
   22028:	692f      	ldr	r7, [r5, #16]
    while (off < end) {
   2202a:	42b7      	cmp	r7, r6
   2202c:	d23d      	bcs.n	220aa <lfs_dir_commitcrc+0x1ca>
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   2202e:	f10a 0304 	add.w	r3, sl, #4
        uint32_t crc = 0xffffffff;
   22032:	f04f 39ff 	mov.w	r9, #4294967295
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   22036:	9304      	str	r3, [sp, #16]
   22038:	e01a      	b.n	22070 <lfs_dir_commitcrc+0x190>
            if (i == off1 && crc != crc1) {
   2203a:	45bb      	cmp	fp, r7
   2203c:	d102      	bne.n	22044 <lfs_dir_commitcrc+0x164>
   2203e:	9b05      	ldr	r3, [sp, #20]
   22040:	454b      	cmp	r3, r9
   22042:	d12f      	bne.n	220a4 <lfs_dir_commitcrc+0x1c4>
            err = lfs_bd_read(lfs,
   22044:	2301      	movs	r3, #1
   22046:	9303      	str	r3, [sp, #12]
   22048:	ab08      	add	r3, sp, #32
   2204a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   2204e:	682b      	ldr	r3, [r5, #0]
   22050:	4642      	mov	r2, r8
   22052:	9300      	str	r3, [sp, #0]
   22054:	9b04      	ldr	r3, [sp, #16]
   22056:	2100      	movs	r1, #0
   22058:	4640      	mov	r0, r8
   2205a:	1bdb      	subs	r3, r3, r7
   2205c:	f7fe fd46 	bl	20aec <lfs_bd_read>
            if (err) {
   22060:	bb10      	cbnz	r0, 220a8 <lfs_dir_commitcrc+0x1c8>
            crc = lfs_crc(crc, &dat, 1);
   22062:	4648      	mov	r0, r9
   22064:	2201      	movs	r2, #1
   22066:	a908      	add	r1, sp, #32
   22068:	f001 feb4 	bl	23dd4 <lfs_crc>
   2206c:	4681      	mov	r9, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   2206e:	3701      	adds	r7, #1
   22070:	9b04      	ldr	r3, [sp, #16]
   22072:	42bb      	cmp	r3, r7
   22074:	d8e1      	bhi.n	2203a <lfs_dir_commitcrc+0x15a>
        if (crc != 0) {
   22076:	f1b9 0f00 	cmp.w	r9, #0
   2207a:	d11a      	bne.n	220b2 <lfs_dir_commitcrc+0x1d2>
        off = lfs_min(end - noff, 0x3fe) + noff;
   2207c:	f240 33fe 	movw	r3, #1022	; 0x3fe
   22080:	eba6 020a 	sub.w	r2, r6, sl
   22084:	429a      	cmp	r2, r3
   22086:	bf94      	ite	ls
   22088:	eb0a 0702 	addls.w	r7, sl, r2
   2208c:	eb0a 0703 	addhi.w	r7, sl, r3
        if (off < end) {
   22090:	42b7      	cmp	r7, r6
   22092:	d204      	bcs.n	2209e <lfs_dir_commitcrc+0x1be>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
   22094:	f1a6 0308 	sub.w	r3, r6, #8
	return (a < b) ? a : b;
   22098:	429f      	cmp	r7, r3
   2209a:	bf28      	it	cs
   2209c:	461f      	movcs	r7, r3
        noff = off + sizeof(uint32_t);
   2209e:	f107 0a04 	add.w	sl, r7, #4
   220a2:	e7c2      	b.n	2202a <lfs_dir_commitcrc+0x14a>
                return LFS_ERR_CORRUPT;
   220a4:	f06f 0053 	mvn.w	r0, #83	; 0x53
   220a8:	4604      	mov	r4, r0
}
   220aa:	4620      	mov	r0, r4
   220ac:	b00b      	add	sp, #44	; 0x2c
   220ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_CORRUPT;
   220b2:	f06f 0453 	mvn.w	r4, #83	; 0x53
   220b6:	e7f8      	b.n	220aa <lfs_dir_commitcrc+0x1ca>
   220b8:	00037ad6 	.word	0x00037ad6
   220bc:	00032659 	.word	0x00032659
   220c0:	00037a7e 	.word	0x00037a7e

000220c4 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
   220c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220c8:	4604      	mov	r4, r0
   220ca:	460d      	mov	r5, r1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   220cc:	2601      	movs	r6, #1
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
   220ce:	af00      	add	r7, sp, #0
        while (lfs->free.i != lfs->free.size) {
   220d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   220d2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   220d4:	6e22      	ldr	r2, [r4, #96]	; 0x60
   220d6:	4299      	cmp	r1, r3
   220d8:	d11d      	bne.n	22116 <lfs_alloc+0x52>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
   220da:	6d61      	ldr	r1, [r4, #84]	; 0x54
   220dc:	440b      	add	r3, r1
        if (lfs->free.ack == 0) {
   220de:	2a00      	cmp	r2, #0
   220e0:	d149      	bne.n	22176 <lfs_alloc+0xb2>
            LFS_ERROR("No more free space %"PRIu32,
   220e2:	466c      	mov	r4, sp
   220e4:	b08a      	sub	sp, #40	; 0x28
   220e6:	466a      	mov	r2, sp
   220e8:	4936      	ldr	r1, [pc, #216]	; (221c4 <lfs_alloc+0x100>)
   220ea:	4837      	ldr	r0, [pc, #220]	; (221c8 <lfs_alloc+0x104>)
   220ec:	6151      	str	r1, [r2, #20]
   220ee:	4937      	ldr	r1, [pc, #220]	; (221cc <lfs_alloc+0x108>)
   220f0:	6191      	str	r1, [r2, #24]
   220f2:	f240 214d 	movw	r1, #589	; 0x24d
   220f6:	e9c2 1307 	strd	r1, r3, [r2, #28]
   220fa:	f44f 7300 	mov.w	r3, #512	; 0x200
   220fe:	8493      	strh	r3, [r2, #36]	; 0x24
   22100:	4b33      	ldr	r3, [pc, #204]	; (221d0 <lfs_alloc+0x10c>)
   22102:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   22106:	f842 3f10 	str.w	r3, [r2, #16]!
   2210a:	f00c ffae 	bl	2f06a <z_log_msg_static_create.constprop.0>
            return LFS_ERR_NOSPC;
   2210e:	f06f 001b 	mvn.w	r0, #27
   22112:	46a5      	mov	sp, r4
   22114:	e026      	b.n	22164 <lfs_alloc+0xa0>
            lfs->free.i += 1;
   22116:	1c48      	adds	r0, r1, #1
   22118:	65e0      	str	r0, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
   2211a:	3a01      	subs	r2, #1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   2211c:	6e60      	ldr	r0, [r4, #100]	; 0x64
            lfs->free.ack -= 1;
   2211e:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   22120:	ea4f 1c51 	mov.w	ip, r1, lsr #5
   22124:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
   22128:	f001 021f 	and.w	r2, r1, #31
   2212c:	fa06 f202 	lsl.w	r2, r6, r2
   22130:	4202      	tst	r2, r0
   22132:	d1ce      	bne.n	220d2 <lfs_alloc+0xe>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
   22134:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   22136:	6d63      	ldr	r3, [r4, #84]	; 0x54
   22138:	6a12      	ldr	r2, [r2, #32]
   2213a:	440b      	add	r3, r1
   2213c:	fbb3 f1f2 	udiv	r1, r3, r2
   22140:	fb02 3311 	mls	r3, r2, r1, r3
   22144:	602b      	str	r3, [r5, #0]
                            & (1U << (lfs->free.i % 32)))) {
   22146:	2501      	movs	r5, #1
                while (lfs->free.i != lfs->free.size &&
   22148:	6da6      	ldr	r6, [r4, #88]	; 0x58
   2214a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2214c:	42b3      	cmp	r3, r6
   2214e:	d036      	beq.n	221be <lfs_alloc+0xfa>
                        (lfs->free.buffer[lfs->free.i / 32]
   22150:	6e61      	ldr	r1, [r4, #100]	; 0x64
   22152:	095a      	lsrs	r2, r3, #5
                            & (1U << (lfs->free.i % 32)))) {
   22154:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   22158:	f003 001f 	and.w	r0, r3, #31
   2215c:	fa05 f000 	lsl.w	r0, r5, r0
                while (lfs->free.i != lfs->free.size &&
   22160:	4010      	ands	r0, r2
   22162:	d102      	bne.n	2216a <lfs_alloc+0xa6>
}
   22164:	46bd      	mov	sp, r7
   22166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    lfs->free.i += 1;
   2216a:	3301      	adds	r3, #1
   2216c:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
   2216e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   22170:	3b01      	subs	r3, #1
   22172:	6623      	str	r3, [r4, #96]	; 0x60
   22174:	e7e9      	b.n	2214a <lfs_alloc+0x86>
                % lfs->cfg->block_count;
   22176:	6ea1      	ldr	r1, [r4, #104]	; 0x68
        lfs->free.i = 0;
   22178:	f04f 0800 	mov.w	r8, #0
                % lfs->cfg->block_count;
   2217c:	6a08      	ldr	r0, [r1, #32]
   2217e:	fbb3 fcf0 	udiv	ip, r3, r0
   22182:	fb00 331c 	mls	r3, r0, ip, r3
        lfs->free.off = (lfs->free.off + lfs->free.size)
   22186:	6563      	str	r3, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
   22188:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        lfs->free.i = 0;
   2218a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
   2218e:	00db      	lsls	r3, r3, #3
   22190:	4293      	cmp	r3, r2
   22192:	bf94      	ite	ls
   22194:	65a3      	strls	r3, [r4, #88]	; 0x58
   22196:	65a2      	strhi	r2, [r4, #88]	; 0x58
__ssp_bos_icheck3(memset, void *, int)
   22198:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   2219a:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2219c:	4641      	mov	r1, r8
   2219e:	f00e fa20 	bl	305e2 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
   221a2:	2301      	movs	r3, #1
   221a4:	4622      	mov	r2, r4
   221a6:	4620      	mov	r0, r4
   221a8:	490a      	ldr	r1, [pc, #40]	; (221d4 <lfs_alloc+0x110>)
   221aa:	f7ff fbb1 	bl	21910 <lfs_fs_rawtraverse>
        if (err) {
   221ae:	2800      	cmp	r0, #0
   221b0:	d08e      	beq.n	220d0 <lfs_alloc+0xc>
    lfs->free.i = 0;
   221b2:	e9c4 8816 	strd	r8, r8, [r4, #88]	; 0x58
    lfs->free.ack = lfs->cfg->block_count;
   221b6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   221b8:	6a1b      	ldr	r3, [r3, #32]
   221ba:	6623      	str	r3, [r4, #96]	; 0x60
}
   221bc:	e7d2      	b.n	22164 <lfs_alloc+0xa0>
                return 0;
   221be:	2000      	movs	r0, #0
   221c0:	e7d0      	b.n	22164 <lfs_alloc+0xa0>
   221c2:	bf00      	nop
   221c4:	00037df6 	.word	0x00037df6
   221c8:	0003156c 	.word	0x0003156c
   221cc:	00037a7e 	.word	0x00037a7e
   221d0:	01000005 	.word	0x01000005
   221d4:	0002eefb 	.word	0x0002eefb

000221d8 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
   221d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221dc:	4604      	mov	r4, r0
   221de:	460d      	mov	r5, r1
   221e0:	b087      	sub	sp, #28
        int err = lfs_alloc(lfs, &nblock);
   221e2:	4620      	mov	r0, r4
   221e4:	a905      	add	r1, sp, #20
   221e6:	f7ff ff6d 	bl	220c4 <lfs_alloc>
        if (err) {
   221ea:	4606      	mov	r6, r0
   221ec:	b958      	cbnz	r0, 22206 <lfs_file_relocate+0x2e>
        err = lfs_bd_erase(lfs, nblock);
   221ee:	f8dd 8014 	ldr.w	r8, [sp, #20]
   221f2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   221f4:	4641      	mov	r1, r8
   221f6:	f7ff fc3f 	bl	21a78 <lfs_bd_erase.isra.0>
        if (err) {
   221fa:	4606      	mov	r6, r0
   221fc:	2800      	cmp	r0, #0
   221fe:	d053      	beq.n	222a8 <lfs_file_relocate+0xd0>
            if (err == LFS_ERR_CORRUPT) {
   22200:	f110 0f54 	cmn.w	r0, #84	; 0x54
   22204:	d056      	beq.n	222b4 <lfs_file_relocate+0xdc>
}
   22206:	4630      	mov	r0, r6
   22208:	b007      	add	sp, #28
   2220a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (file->flags & LFS_F_INLINE) {
   2220e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   22210:	f10d 0a13 	add.w	sl, sp, #19
   22214:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
                err = lfs_dir_getread(lfs, &file->m,
   22218:	e9cd 7a01 	strd	r7, sl, [sp, #4]
   2221c:	eba3 0307 	sub.w	r3, r3, r7
   22220:	f8cd 900c 	str.w	r9, [sp, #12]
            if (file->flags & LFS_F_INLINE) {
   22224:	d01c      	beq.n	22260 <lfs_file_relocate+0x88>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   22226:	88aa      	ldrh	r2, [r5, #4]
                err = lfs_dir_getread(lfs, &file->m,
   22228:	4924      	ldr	r1, [pc, #144]	; (222bc <lfs_file_relocate+0xe4>)
   2222a:	4620      	mov	r0, r4
   2222c:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
   22230:	9200      	str	r2, [sp, #0]
   22232:	f105 0108 	add.w	r1, r5, #8
   22236:	465a      	mov	r2, fp
   22238:	f7fe ff7e 	bl	21138 <lfs_dir_getread.constprop.0>
                if (err) {
   2223c:	b970      	cbnz	r0, 2225c <lfs_file_relocate+0x84>
            err = lfs_bd_prog(lfs,
   2223e:	2301      	movs	r3, #1
   22240:	4622      	mov	r2, r4
   22242:	4620      	mov	r0, r4
   22244:	e9cd a902 	strd	sl, r9, [sp, #8]
   22248:	e9cd 8700 	strd	r8, r7, [sp]
   2224c:	f104 0110 	add.w	r1, r4, #16
   22250:	f7ff fdca 	bl	21de8 <lfs_bd_prog>
            if (err) {
   22254:	b160      	cbz	r0, 22270 <lfs_file_relocate+0x98>
                if (err == LFS_ERR_CORRUPT) {
   22256:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2225a:	d02b      	beq.n	222b4 <lfs_file_relocate+0xdc>
                    return err;
   2225c:	4606      	mov	r6, r0
   2225e:	e7d2      	b.n	22206 <lfs_file_relocate+0x2e>
                err = lfs_bd_read(lfs,
   22260:	6baa      	ldr	r2, [r5, #56]	; 0x38
   22262:	4659      	mov	r1, fp
   22264:	9200      	str	r2, [sp, #0]
   22266:	4620      	mov	r0, r4
   22268:	4622      	mov	r2, r4
   2226a:	f7fe fc3f 	bl	20aec <lfs_bd_read>
   2226e:	e7e5      	b.n	2223c <lfs_file_relocate+0x64>
        for (lfs_off_t i = 0; i < file->off; i++) {
   22270:	3701      	adds	r7, #1
   22272:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   22274:	42bb      	cmp	r3, r7
   22276:	d8ca      	bhi.n	2220e <lfs_file_relocate+0x36>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
   22278:	6ea3      	ldr	r3, [r4, #104]	; 0x68
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2227a:	69e1      	ldr	r1, [r4, #28]
   2227c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2227e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   22280:	f00e f975 	bl	3056e <memcpy>
        file->cache.block = lfs->pcache.block;
   22284:	6923      	ldr	r3, [r4, #16]
        lfs_cache_zero(lfs, &lfs->pcache);
   22286:	f104 0110 	add.w	r1, r4, #16
        file->cache.block = lfs->pcache.block;
   2228a:	642b      	str	r3, [r5, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
   2228c:	6963      	ldr	r3, [r4, #20]
   2228e:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
   22290:	69a3      	ldr	r3, [r4, #24]
   22292:	64ab      	str	r3, [r5, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
   22294:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   22296:	f00c ffc0 	bl	2f21a <lfs_cache_zero.isra.0>
        file->flags |= LFS_F_WRITING;
   2229a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        file->block = nblock;
   2229c:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
   222a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   222a4:	632b      	str	r3, [r5, #48]	; 0x30
        return 0;
   222a6:	e7ae      	b.n	22206 <lfs_file_relocate+0x2e>
        for (lfs_off_t i = 0; i < file->off; i++) {
   222a8:	4607      	mov	r7, r0
   222aa:	f04f 0901 	mov.w	r9, #1
                err = lfs_dir_getread(lfs, &file->m,
   222ae:	f105 0b40 	add.w	fp, r5, #64	; 0x40
   222b2:	e7de      	b.n	22272 <lfs_file_relocate+0x9a>
    rcache->block = LFS_BLOCK_NULL;
   222b4:	f04f 33ff 	mov.w	r3, #4294967295
   222b8:	6123      	str	r3, [r4, #16]
   222ba:	e792      	b.n	221e2 <lfs_file_relocate+0xa>
   222bc:	20100000 	.word	0x20100000

000222c0 <lfs_file_rawwrite>:
        const void *buffer, lfs_size_t size) {
   222c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   222c4:	461e      	mov	r6, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   222c6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        const void *buffer, lfs_size_t size) {
   222c8:	4617      	mov	r7, r2
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   222ca:	079a      	lsls	r2, r3, #30
        const void *buffer, lfs_size_t size) {
   222cc:	4605      	mov	r5, r0
   222ce:	460c      	mov	r4, r1
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   222d0:	d40b      	bmi.n	222ea <lfs_file_rawwrite+0x2a>
   222d2:	4925      	ldr	r1, [pc, #148]	; (22368 <lfs_file_rawwrite+0xa8>)
   222d4:	4825      	ldr	r0, [pc, #148]	; (2236c <lfs_file_rawwrite+0xac>)
   222d6:	f640 535d 	movw	r3, #3421	; 0xd5d
   222da:	4a25      	ldr	r2, [pc, #148]	; (22370 <lfs_file_rawwrite+0xb0>)
   222dc:	f008 f9ed 	bl	2a6ba <assert_print>
   222e0:	f640 515d 	movw	r1, #3421	; 0xd5d
   222e4:	4822      	ldr	r0, [pc, #136]	; (22370 <lfs_file_rawwrite+0xb0>)
   222e6:	f008 f9e1 	bl	2a6ac <assert_post_action>
    if (file->flags & LFS_F_READING) {
   222ea:	035a      	lsls	r2, r3, #13
   222ec:	d419      	bmi.n	22322 <lfs_file_rawwrite+0x62>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   222ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
   222f0:	050b      	lsls	r3, r1, #20
   222f2:	d41d      	bmi.n	22330 <lfs_file_rawwrite+0x70>
    if (file->pos + size > lfs->file_max) {
   222f4:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
   222f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   222fa:	eb08 0206 	add.w	r2, r8, r6
   222fe:	429a      	cmp	r2, r3
   22300:	d82f      	bhi.n	22362 <lfs_file_rawwrite+0xa2>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   22302:	f411 3900 	ands.w	r9, r1, #131072	; 0x20000
   22306:	d019      	beq.n	2233c <lfs_file_rawwrite+0x7c>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
   22308:	4633      	mov	r3, r6
   2230a:	463a      	mov	r2, r7
   2230c:	4621      	mov	r1, r4
   2230e:	4628      	mov	r0, r5
   22310:	f00d f846 	bl	2f3a0 <lfs_file_flushedwrite>
    if (nsize < 0) {
   22314:	2800      	cmp	r0, #0
   22316:	db08      	blt.n	2232a <lfs_file_rawwrite+0x6a>
    file->flags &= ~LFS_F_ERRED;
   22318:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2231a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   2231e:	6323      	str	r3, [r4, #48]	; 0x30
    return nsize;
   22320:	e003      	b.n	2232a <lfs_file_rawwrite+0x6a>
        int err = lfs_file_flush(lfs, file);
   22322:	f00d f974 	bl	2f60e <lfs_file_flush>
        if (err) {
   22326:	2800      	cmp	r0, #0
   22328:	d0e1      	beq.n	222ee <lfs_file_rawwrite+0x2e>
}
   2232a:	b003      	add	sp, #12
   2232c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   22330:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22332:	6b62      	ldr	r2, [r4, #52]	; 0x34
   22334:	4293      	cmp	r3, r2
        file->pos = file->ctz.size;
   22336:	bf88      	it	hi
   22338:	6363      	strhi	r3, [r4, #52]	; 0x34
   2233a:	e7db      	b.n	222f4 <lfs_file_rawwrite+0x34>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   2233c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2233e:	4598      	cmp	r8, r3
   22340:	d9e2      	bls.n	22308 <lfs_file_rawwrite+0x48>
        file->pos = file->ctz.size;
   22342:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
   22344:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22346:	4598      	cmp	r8, r3
   22348:	d9de      	bls.n	22308 <lfs_file_rawwrite+0x48>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
   2234a:	2301      	movs	r3, #1
   2234c:	4621      	mov	r1, r4
   2234e:	4628      	mov	r0, r5
   22350:	f10d 0207 	add.w	r2, sp, #7
   22354:	f88d 9007 	strb.w	r9, [sp, #7]
   22358:	f00d f822 	bl	2f3a0 <lfs_file_flushedwrite>
            if (res < 0) {
   2235c:	2800      	cmp	r0, #0
   2235e:	daf1      	bge.n	22344 <lfs_file_rawwrite+0x84>
   22360:	e7e3      	b.n	2232a <lfs_file_rawwrite+0x6a>
        return LFS_ERR_FBIG;
   22362:	f06f 001a 	mvn.w	r0, #26
   22366:	e7e0      	b.n	2232a <lfs_file_rawwrite+0x6a>
   22368:	00037e13 	.word	0x00037e13
   2236c:	00032659 	.word	0x00032659
   22370:	00037a7e 	.word	0x00037a7e

00022374 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   22374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22378:	b099      	sub	sp, #100	; 0x64
   2237a:	af08      	add	r7, sp, #32
   2237c:	e9c7 3201 	strd	r3, r2, [r7, #4]
   22380:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   22384:	688a      	ldr	r2, [r1, #8]
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   22386:	60fb      	str	r3, [r7, #12]
    return (lfs->cfg->block_cycles > 0
   22388:	6e83      	ldr	r3, [r0, #104]	; 0x68
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   2238a:	4604      	mov	r4, r0
    return (lfs->cfg->block_cycles > 0
   2238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   2238e:	460d      	mov	r5, r1
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   22390:	2b00      	cmp	r3, #0
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   22392:	f8b7 906c 	ldrh.w	r9, [r7, #108]	; 0x6c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   22396:	f102 0201 	add.w	r2, r2, #1
   2239a:	dd58      	ble.n	2244e <lfs_dir_compact+0xda>
   2239c:	3301      	adds	r3, #1
   2239e:	f043 0301 	orr.w	r3, r3, #1
   223a2:	fbb2 f1f3 	udiv	r1, r2, r3
   223a6:	fb03 2311 	mls	r3, r3, r1, r2
   223aa:	2b00      	cmp	r3, #0
   223ac:	d14f      	bne.n	2244e <lfs_dir_compact+0xda>
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
   223ae:	2601      	movs	r6, #1
   223b0:	4628      	mov	r0, r5
    dir->rev += 1;
   223b2:	60aa      	str	r2, [r5, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
   223b4:	62bb      	str	r3, [r7, #40]	; 0x28
   223b6:	62fe      	str	r6, [r7, #44]	; 0x2c
   223b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   223bc:	f00c fd5e 	bl	2ee7c <lfs_pair_cmp>
   223c0:	b9c8      	cbnz	r0, 223f6 <lfs_dir_compact+0x82>
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   223c2:	46b0      	mov	r8, r6
    bool relocated = false;
   223c4:	2600      	movs	r6, #0
            struct lfs_commit commit = {
   223c6:	2300      	movs	r3, #0
   223c8:	f04f 32ff 	mov.w	r2, #4294967295
                .block = dir->pair[1],
   223cc:	6869      	ldr	r1, [r5, #4]
            struct lfs_commit commit = {
   223ce:	e9c7 320b 	strd	r3, r2, [r7, #44]	; 0x2c
   223d2:	e9c7 230d 	strd	r2, r3, [r7, #52]	; 0x34
                .end = (lfs->cfg->metadata_max ?
   223d6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
            struct lfs_commit commit = {
   223d8:	62b9      	str	r1, [r7, #40]	; 0x28
                .end = (lfs->cfg->metadata_max ?
   223da:	6c83      	ldr	r3, [r0, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   223dc:	2b00      	cmp	r3, #0
   223de:	d03d      	beq.n	2245c <lfs_dir_compact+0xe8>
   223e0:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
   223e2:	63fb      	str	r3, [r7, #60]	; 0x3c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
   223e4:	f7ff fb48 	bl	21a78 <lfs_bd_erase.isra.0>
            if (err) {
   223e8:	2800      	cmp	r0, #0
   223ea:	d039      	beq.n	22460 <lfs_dir_compact+0xec>
                if (err == LFS_ERR_CORRUPT) {
   223ec:	f110 0f54 	cmn.w	r0, #84	; 0x54
   223f0:	f040 80da 	bne.w	225a8 <lfs_dir_compact+0x234>
                    goto relocate;
   223f4:	4646      	mov	r6, r8
    rcache->block = LFS_BLOCK_NULL;
   223f6:	f04f 33ff 	mov.w	r3, #4294967295
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   223fa:	f04f 0800 	mov.w	r8, #0
   223fe:	f04f 0a01 	mov.w	sl, #1
   22402:	4628      	mov	r0, r5
   22404:	e9c7 8a0a 	strd	r8, sl, [r7, #40]	; 0x28
    rcache->block = LFS_BLOCK_NULL;
   22408:	6123      	str	r3, [r4, #16]
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   2240a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   2240e:	f00c fd35 	bl	2ee7c <lfs_pair_cmp>
   22412:	2800      	cmp	r0, #0
   22414:	f040 80cc 	bne.w	225b0 <lfs_dir_compact+0x23c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
   22418:	466c      	mov	r4, sp
   2241a:	b08a      	sub	sp, #40	; 0x28
   2241c:	686b      	ldr	r3, [r5, #4]
   2241e:	aa08      	add	r2, sp, #32
   22420:	496a      	ldr	r1, [pc, #424]	; (225cc <lfs_dir_compact+0x258>)
   22422:	486b      	ldr	r0, [pc, #428]	; (225d0 <lfs_dir_compact+0x25c>)
   22424:	6151      	str	r1, [r2, #20]
   22426:	496b      	ldr	r1, [pc, #428]	; (225d4 <lfs_dir_compact+0x260>)
   22428:	6191      	str	r1, [r2, #24]
   2242a:	f240 7169 	movw	r1, #1897	; 0x769
   2242e:	e9c2 1307 	strd	r1, r3, [r2, #28]
   22432:	f44f 7300 	mov.w	r3, #512	; 0x200
   22436:	8493      	strh	r3, [r2, #36]	; 0x24
   22438:	4b67      	ldr	r3, [pc, #412]	; (225d8 <lfs_dir_compact+0x264>)
   2243a:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   2243e:	f842 3f10 	str.w	r3, [r2, #16]!
   22442:	f00c fe12 	bl	2f06a <z_log_msg_static_create.constprop.0>
   22446:	46a5      	mov	sp, r4
            return LFS_ERR_NOSPC;
   22448:	f06f 001b 	mvn.w	r0, #27
   2244c:	e0ac      	b.n	225a8 <lfs_dir_compact+0x234>
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   2244e:	f04f 0800 	mov.w	r8, #0
    dir->rev += 1;
   22452:	60aa      	str	r2, [r5, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
   22454:	e7b6      	b.n	223c4 <lfs_dir_compact+0x50>
        tired = false;
   22456:	4680      	mov	r8, r0
        relocated = true;
   22458:	4656      	mov	r6, sl
   2245a:	e7b4      	b.n	223c6 <lfs_dir_compact+0x52>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   2245c:	69c3      	ldr	r3, [r0, #28]
   2245e:	e7bf      	b.n	223e0 <lfs_dir_compact+0x6c>
            err = lfs_dir_commitprog(lfs, &commit,
   22460:	f107 0a28 	add.w	sl, r7, #40	; 0x28
   22464:	2304      	movs	r3, #4
   22466:	4651      	mov	r1, sl
   22468:	4620      	mov	r0, r4
   2246a:	f105 0208 	add.w	r2, r5, #8
   2246e:	f00c fedf 	bl	2f230 <lfs_dir_commitprog>
            if (err) {
   22472:	2800      	cmp	r0, #0
   22474:	d1ba      	bne.n	223ec <lfs_dir_compact+0x78>
            err = lfs_dir_traverse(lfs,
   22476:	f107 0314 	add.w	r3, r7, #20
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   2247a:	e9c7 4a05 	strd	r4, sl, [r7, #20]
            err = lfs_dir_traverse(lfs,
   2247e:	9307      	str	r3, [sp, #28]
   22480:	4b56      	ldr	r3, [pc, #344]	; (225dc <lfs_dir_compact+0x268>)
   22482:	4602      	mov	r2, r0
   22484:	9306      	str	r3, [sp, #24]
   22486:	f1c9 0300 	rsb	r3, r9, #0
   2248a:	b21b      	sxth	r3, r3
   2248c:	9305      	str	r3, [sp, #20]
   2248e:	68fb      	ldr	r3, [r7, #12]
   22490:	4620      	mov	r0, r4
   22492:	e9cd 9303 	strd	r9, r3, [sp, #12]
   22496:	4b52      	ldr	r3, [pc, #328]	; (225e0 <lfs_dir_compact+0x26c>)
   22498:	9302      	str	r3, [sp, #8]
   2249a:	687b      	ldr	r3, [r7, #4]
   2249c:	9301      	str	r3, [sp, #4]
   2249e:	68bb      	ldr	r3, [r7, #8]
   224a0:	9300      	str	r3, [sp, #0]
   224a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   224a4:	f04f 33ff 	mov.w	r3, #4294967295
   224a8:	f7fe fcea 	bl	20e80 <lfs_dir_traverse.constprop.0>
            if (err) {
   224ac:	2800      	cmp	r0, #0
   224ae:	d19d      	bne.n	223ec <lfs_dir_compact+0x78>
            if (!lfs_pair_isnull(dir->tail)) {
   224b0:	f105 0118 	add.w	r1, r5, #24
   224b4:	4608      	mov	r0, r1
   224b6:	f00c fcd7 	bl	2ee68 <lfs_pair_isnull>
   224ba:	b960      	cbnz	r0, 224d6 <lfs_dir_compact+0x162>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
   224bc:	7dea      	ldrb	r2, [r5, #23]
                err = lfs_dir_commitattr(lfs, &commit,
   224be:	460b      	mov	r3, r1
   224c0:	4948      	ldr	r1, [pc, #288]	; (225e4 <lfs_dir_compact+0x270>)
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
   224c2:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
   224c6:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
   224ca:	4620      	mov	r0, r4
   224cc:	4651      	mov	r1, sl
   224ce:	f00c fece 	bl	2f26e <lfs_dir_commitattr>
                if (err) {
   224d2:	2800      	cmp	r0, #0
   224d4:	d18a      	bne.n	223ec <lfs_dir_compact+0x78>
            lfs_gstate_t delta = {0};
   224d6:	2300      	movs	r3, #0
   224d8:	e9c7 3307 	strd	r3, r3, [r7, #28]
   224dc:	627b      	str	r3, [r7, #36]	; 0x24
            if (!relocated) {
   224de:	b95e      	cbnz	r6, 224f8 <lfs_dir_compact+0x184>
                lfs_gstate_xor(&delta, &lfs->gdisk);
   224e0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   224e4:	f107 001c 	add.w	r0, r7, #28
   224e8:	f00c fce3 	bl	2eeb2 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
   224ec:	f104 0130 	add.w	r1, r4, #48	; 0x30
   224f0:	f107 001c 	add.w	r0, r7, #28
   224f4:	f00c fcdd 	bl	2eeb2 <lfs_gstate_xor>
            lfs_gstate_xor(&delta, &lfs->gdelta);
   224f8:	f104 0b48 	add.w	fp, r4, #72	; 0x48
   224fc:	4659      	mov	r1, fp
   224fe:	f107 001c 	add.w	r0, r7, #28
   22502:	f00c fcd6 	bl	2eeb2 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   22506:	69fb      	ldr	r3, [r7, #28]
            err = lfs_dir_getgstate(lfs, dir, &delta);
   22508:	4629      	mov	r1, r5
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2250a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   2250e:	f023 0303 	bic.w	r3, r3, #3
            err = lfs_dir_getgstate(lfs, dir, &delta);
   22512:	4620      	mov	r0, r4
   22514:	f107 021c 	add.w	r2, r7, #28
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   22518:	61fb      	str	r3, [r7, #28]
            err = lfs_dir_getgstate(lfs, dir, &delta);
   2251a:	f7fe fc51 	bl	20dc0 <lfs_dir_getgstate>
            if (err) {
   2251e:	2800      	cmp	r0, #0
   22520:	d142      	bne.n	225a8 <lfs_dir_compact+0x234>
        if (((uint32_t*)a)[i] != 0) {
   22522:	e9d7 3207 	ldrd	r3, r2, [r7, #28]
   22526:	4313      	orrs	r3, r2
   22528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2252a:	4313      	orrs	r3, r2
   2252c:	d009      	beq.n	22542 <lfs_dir_compact+0x1ce>
                err = lfs_dir_commitattr(lfs, &commit,
   2252e:	4651      	mov	r1, sl
   22530:	4620      	mov	r0, r4
   22532:	4a2d      	ldr	r2, [pc, #180]	; (225e8 <lfs_dir_compact+0x274>)
   22534:	f107 031c 	add.w	r3, r7, #28
   22538:	f00c fe99 	bl	2f26e <lfs_dir_commitattr>
                if (err) {
   2253c:	2800      	cmp	r0, #0
   2253e:	f47f af55 	bne.w	223ec <lfs_dir_compact+0x78>
            err = lfs_dir_commitcrc(lfs, &commit);
   22542:	4651      	mov	r1, sl
   22544:	4620      	mov	r0, r4
   22546:	f7ff fccb 	bl	21ee0 <lfs_dir_commitcrc>
            if (err) {
   2254a:	2800      	cmp	r0, #0
   2254c:	f47f af4e 	bne.w	223ec <lfs_dir_compact+0x78>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
   22550:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   22552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   22554:	699a      	ldr	r2, [r3, #24]
   22556:	fbb1 f3f2 	udiv	r3, r1, r2
   2255a:	fb02 1313 	mls	r3, r2, r3, r1
   2255e:	b15b      	cbz	r3, 22578 <lfs_dir_compact+0x204>
   22560:	4922      	ldr	r1, [pc, #136]	; (225ec <lfs_dir_compact+0x278>)
   22562:	4823      	ldr	r0, [pc, #140]	; (225f0 <lfs_dir_compact+0x27c>)
   22564:	f240 7352 	movw	r3, #1874	; 0x752
   22568:	4a1a      	ldr	r2, [pc, #104]	; (225d4 <lfs_dir_compact+0x260>)
   2256a:	f008 f8a6 	bl	2a6ba <assert_print>
   2256e:	f240 7152 	movw	r1, #1874	; 0x752
   22572:	4818      	ldr	r0, [pc, #96]	; (225d4 <lfs_dir_compact+0x260>)
   22574:	f008 f89a 	bl	2a6ac <assert_post_action>
    pair[0] = pair[1];
   22578:	e9d5 2000 	ldrd	r2, r0, [r5]
    pair[1] = t;
   2257c:	e9c5 0200 	strd	r0, r2, [r5]
            dir->count = end - begin;
   22580:	68fa      	ldr	r2, [r7, #12]
            dir->off = commit.off;
   22582:	60e9      	str	r1, [r5, #12]
            dir->count = end - begin;
   22584:	eba2 0909 	sub.w	r9, r2, r9
            dir->etag = commit.ptag;
   22588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
            dir->count = end - begin;
   2258a:	f8a5 9014 	strh.w	r9, [r5, #20]
            dir->etag = commit.ptag;
   2258e:	612a      	str	r2, [r5, #16]
            lfs->gdelta = (lfs_gstate_t){0};
   22590:	64a3      	str	r3, [r4, #72]	; 0x48
   22592:	e9cb 3301 	strd	r3, r3, [fp, #4]
            if (!relocated) {
   22596:	b936      	cbnz	r6, 225a6 <lfs_dir_compact+0x232>
                lfs->gdisk = lfs->gstate;
   22598:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   2259c:	3430      	adds	r4, #48	; 0x30
   2259e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   225a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
   225a6:	4630      	mov	r0, r6
}
   225a8:	3744      	adds	r7, #68	; 0x44
   225aa:	46bd      	mov	sp, r7
   225ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int err = lfs_alloc(lfs, &dir->pair[1]);
   225b0:	4620      	mov	r0, r4
   225b2:	1d29      	adds	r1, r5, #4
   225b4:	f7ff fd86 	bl	220c4 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
   225b8:	2800      	cmp	r0, #0
   225ba:	f43f af4c 	beq.w	22456 <lfs_dir_compact+0xe2>
   225be:	f110 0f1c 	cmn.w	r0, #28
   225c2:	d1f1      	bne.n	225a8 <lfs_dir_compact+0x234>
   225c4:	2e00      	cmp	r6, #0
   225c6:	f43f af3f 	beq.w	22448 <lfs_dir_compact+0xd4>
   225ca:	e6fc      	b.n	223c6 <lfs_dir_compact+0x52>
   225cc:	00037e66 	.word	0x00037e66
   225d0:	0003156c 	.word	0x0003156c
   225d4:	00037a7e 	.word	0x00037a7e
   225d8:	01000005 	.word	0x01000005
   225dc:	0002f319 	.word	0x0002f319
   225e0:	400ffc00 	.word	0x400ffc00
   225e4:	000ffc08 	.word	0x000ffc08
   225e8:	7ffffc0c 	.word	0x7ffffc0c
   225ec:	00037e40 	.word	0x00037e40
   225f0:	00032659 	.word	0x00032659

000225f4 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
   225f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   225f8:	f240 4cff 	movw	ip, #1279	; 0x4ff
        lfs_mdir_t *pdir) {
   225fc:	460d      	mov	r5, r1
   225fe:	469b      	mov	fp, r3
    bool hasdelete = false;
   22600:	2100      	movs	r1, #0
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   22602:	f240 4401 	movw	r4, #1025	; 0x401
        lfs_mdir_t *pdir) {
   22606:	b097      	sub	sp, #92	; 0x5c
   22608:	af08      	add	r7, sp, #32
   2260a:	607a      	str	r2, [r7, #4]
   2260c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2260e:	f8d7 8064 	ldr.w	r8, [r7, #100]	; 0x64
   22612:	4606      	mov	r6, r0
   22614:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    for (int i = 0; i < attrcount; i++) {
   22618:	4298      	cmp	r0, r3
   2261a:	f040 809d 	bne.w	22758 <lfs_dir_relocatingcommit+0x164>
    if (hasdelete && dir->count == 0) {
   2261e:	2900      	cmp	r1, #0
   22620:	f040 80ca 	bne.w	227b8 <lfs_dir_relocatingcommit+0x1c4>
    if (dir->erased) {
   22624:	7dab      	ldrb	r3, [r5, #22]
   22626:	2b00      	cmp	r3, #0
   22628:	f040 80ed 	bne.w	22806 <lfs_dir_relocatingcommit+0x212>
    rcache->block = LFS_BLOCK_NULL;
   2262c:	f04f 33ff 	mov.w	r3, #4294967295
   22630:	6133      	str	r3, [r6, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
   22632:	f8b5 9014 	ldrh.w	r9, [r5, #20]
        lfs_size_t split = begin;
   22636:	f04f 0800 	mov.w	r8, #0
        while (end - split > 1) {
   2263a:	eba9 0a08 	sub.w	sl, r9, r8
   2263e:	f1ba 0f01 	cmp.w	sl, #1
   22642:	f200 81a0 	bhi.w	22986 <lfs_dir_relocatingcommit+0x392>
        if (split == begin) {
   22646:	f1b8 0f00 	cmp.w	r8, #0
   2264a:	d02b      	beq.n	226a4 <lfs_dir_relocatingcommit+0xb0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
   2264c:	fa1f f888 	uxth.w	r8, r8
   22650:	e9cd 8901 	strd	r8, r9, [sp, #4]
   22654:	9500      	str	r5, [sp, #0]
   22656:	465a      	mov	r2, fp
   22658:	4629      	mov	r1, r5
   2265a:	4630      	mov	r0, r6
   2265c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2265e:	f00d f841 	bl	2f6e4 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
   22662:	4604      	mov	r4, r0
   22664:	2800      	cmp	r0, #0
   22666:	f000 818c 	beq.w	22982 <lfs_dir_relocatingcommit+0x38e>
   2266a:	f110 0f1c 	cmn.w	r0, #28
   2266e:	d16f      	bne.n	22750 <lfs_dir_relocatingcommit+0x15c>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
   22670:	e9d5 1300 	ldrd	r1, r3, [r5]
   22674:	466c      	mov	r4, sp
   22676:	b08c      	sub	sp, #48	; 0x30
   22678:	aa08      	add	r2, sp, #32
   2267a:	48a3      	ldr	r0, [pc, #652]	; (22908 <lfs_dir_relocatingcommit+0x314>)
   2267c:	6253      	str	r3, [r2, #36]	; 0x24
   2267e:	6150      	str	r0, [r2, #20]
   22680:	f44f 7300 	mov.w	r3, #512	; 0x200
   22684:	48a1      	ldr	r0, [pc, #644]	; (2290c <lfs_dir_relocatingcommit+0x318>)
   22686:	8513      	strh	r3, [r2, #40]	; 0x28
   22688:	6190      	str	r0, [r2, #24]
   2268a:	f240 70b3 	movw	r0, #1971	; 0x7b3
   2268e:	4ba0      	ldr	r3, [pc, #640]	; (22910 <lfs_dir_relocatingcommit+0x31c>)
   22690:	e9c2 0107 	strd	r0, r1, [r2, #28]
   22694:	f44f 5152 	mov.w	r1, #13440	; 0x3480
   22698:	489e      	ldr	r0, [pc, #632]	; (22914 <lfs_dir_relocatingcommit+0x320>)
   2269a:	f842 3f10 	str.w	r3, [r2, #16]!
   2269e:	f00c fce4 	bl	2f06a <z_log_msg_static_create.constprop.0>
   226a2:	46a5      	mov	sp, r4
    return (lfs->cfg->block_cycles > 0
   226a4:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   226a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   226a8:	2a00      	cmp	r2, #0
   226aa:	dd45      	ble.n	22738 <lfs_dir_relocatingcommit+0x144>
   226ac:	68ab      	ldr	r3, [r5, #8]
   226ae:	3201      	adds	r2, #1
   226b0:	3301      	adds	r3, #1
   226b2:	f042 0201 	orr.w	r2, r2, #1
   226b6:	fbb3 f1f2 	udiv	r1, r3, r2
   226ba:	fb02 3311 	mls	r3, r2, r1, r3
   226be:	2b00      	cmp	r3, #0
   226c0:	d13a      	bne.n	22738 <lfs_dir_relocatingcommit+0x144>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   226c2:	623b      	str	r3, [r7, #32]
   226c4:	2301      	movs	r3, #1
   226c6:	4628      	mov	r0, r5
   226c8:	627b      	str	r3, [r7, #36]	; 0x24
   226ca:	f107 0120 	add.w	r1, r7, #32
   226ce:	f00c fbd5 	bl	2ee7c <lfs_pair_cmp>
   226d2:	4680      	mov	r8, r0
   226d4:	bb80      	cbnz	r0, 22738 <lfs_dir_relocatingcommit+0x144>
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
   226d6:	4630      	mov	r0, r6
   226d8:	f7ff f9c0 	bl	21a5c <lfs_fs_rawsize>
        if (size < 0) {
   226dc:	1e04      	subs	r4, r0, #0
   226de:	f2c0 8086 	blt.w	227ee <lfs_dir_relocatingcommit+0x1fa>
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
   226e2:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   226e4:	6a1b      	ldr	r3, [r3, #32]
   226e6:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   226ea:	d225      	bcs.n	22738 <lfs_dir_relocatingcommit+0x144>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
   226ec:	e9cd 8901 	strd	r8, r9, [sp, #4]
   226f0:	9500      	str	r5, [sp, #0]
   226f2:	465a      	mov	r2, fp
   226f4:	4629      	mov	r1, r5
   226f6:	4630      	mov	r0, r6
   226f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   226fa:	f00c fff3 	bl	2f6e4 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
   226fe:	4604      	mov	r4, r0
   22700:	2800      	cmp	r0, #0
   22702:	f000 817c 	beq.w	229fe <lfs_dir_relocatingcommit+0x40a>
   22706:	f110 0f1c 	cmn.w	r0, #28
   2270a:	d121      	bne.n	22750 <lfs_dir_relocatingcommit+0x15c>
                LFS_WARN("Unable to expand superblock");
   2270c:	466c      	mov	r4, sp
   2270e:	b08a      	sub	sp, #40	; 0x28
   22710:	aa08      	add	r2, sp, #32
   22712:	4b81      	ldr	r3, [pc, #516]	; (22918 <lfs_dir_relocatingcommit+0x324>)
   22714:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   22718:	6153      	str	r3, [r2, #20]
   2271a:	4b7c      	ldr	r3, [pc, #496]	; (2290c <lfs_dir_relocatingcommit+0x318>)
   2271c:	487d      	ldr	r0, [pc, #500]	; (22914 <lfs_dir_relocatingcommit+0x320>)
   2271e:	6193      	str	r3, [r2, #24]
   22720:	f240 73d1 	movw	r3, #2001	; 0x7d1
   22724:	61d3      	str	r3, [r2, #28]
   22726:	f44f 7300 	mov.w	r3, #512	; 0x200
   2272a:	8413      	strh	r3, [r2, #32]
   2272c:	4b7b      	ldr	r3, [pc, #492]	; (2291c <lfs_dir_relocatingcommit+0x328>)
   2272e:	f842 3f10 	str.w	r3, [r2, #16]!
   22732:	f00c fc9a 	bl	2f06a <z_log_msg_static_create.constprop.0>
   22736:	46a5      	mov	sp, r4
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
   22738:	2300      	movs	r3, #0
   2273a:	e9cd 5300 	strd	r5, r3, [sp]
   2273e:	f8cd 9008 	str.w	r9, [sp, #8]
   22742:	465a      	mov	r2, fp
   22744:	4629      	mov	r1, r5
   22746:	4630      	mov	r0, r6
   22748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2274a:	f7ff fe13 	bl	22374 <lfs_dir_compact>
   2274e:	4604      	mov	r4, r0
    if (state < 0) {
   22750:	2c00      	cmp	r4, #0
   22752:	f280 80fd 	bge.w	22950 <lfs_dir_relocatingcommit+0x35c>
   22756:	e04a      	b.n	227ee <lfs_dir_relocatingcommit+0x1fa>
    return (tag & 0x7ff00000) >> 20;
   22758:	681a      	ldr	r2, [r3, #0]
   2275a:	ea4f 5e12 	mov.w	lr, r2, lsr #20
   2275e:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   22762:	42a2      	cmp	r2, r4
   22764:	d104      	bne.n	22770 <lfs_dir_relocatingcommit+0x17c>
            dir->count += 1;
   22766:	8aaa      	ldrh	r2, [r5, #20]
   22768:	3201      	adds	r2, #1
   2276a:	82aa      	strh	r2, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
   2276c:	3308      	adds	r3, #8
   2276e:	e753      	b.n	22618 <lfs_dir_relocatingcommit+0x24>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   22770:	4562      	cmp	r2, ip
   22772:	d111      	bne.n	22798 <lfs_dir_relocatingcommit+0x1a4>
            LFS_ASSERT(dir->count > 0);
   22774:	8aaa      	ldrh	r2, [r5, #20]
   22776:	b95a      	cbnz	r2, 22790 <lfs_dir_relocatingcommit+0x19c>
   22778:	4969      	ldr	r1, [pc, #420]	; (22920 <lfs_dir_relocatingcommit+0x32c>)
   2277a:	f240 73e9 	movw	r3, #2025	; 0x7e9
   2277e:	4a63      	ldr	r2, [pc, #396]	; (2290c <lfs_dir_relocatingcommit+0x318>)
   22780:	4868      	ldr	r0, [pc, #416]	; (22924 <lfs_dir_relocatingcommit+0x330>)
   22782:	f007 ff9a 	bl	2a6ba <assert_print>
   22786:	f240 71e9 	movw	r1, #2025	; 0x7e9
        LFS_ASSERT(pdir);
   2278a:	4860      	ldr	r0, [pc, #384]	; (2290c <lfs_dir_relocatingcommit+0x318>)
   2278c:	f007 ff8e 	bl	2a6ac <assert_post_action>
            dir->count -= 1;
   22790:	3a01      	subs	r2, #1
            hasdelete = true;
   22792:	2101      	movs	r1, #1
            dir->count -= 1;
   22794:	82aa      	strh	r2, [r5, #20]
            hasdelete = true;
   22796:	e7e9      	b.n	2276c <lfs_dir_relocatingcommit+0x178>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
   22798:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
   2279c:	f5be 6fc0 	cmp.w	lr, #1536	; 0x600
   227a0:	d1e4      	bne.n	2276c <lfs_dir_relocatingcommit+0x178>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
   227a2:	685a      	ldr	r2, [r3, #4]
   227a4:	6812      	ldr	r2, [r2, #0]
   227a6:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
   227a8:	685a      	ldr	r2, [r3, #4]
   227aa:	6852      	ldr	r2, [r2, #4]
   227ac:	61ea      	str	r2, [r5, #28]
    return (tag & 0x0ff00000) >> 20;
   227ae:	681a      	ldr	r2, [r3, #0]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
   227b0:	f3c2 5200 	ubfx	r2, r2, #20, #1
   227b4:	75ea      	strb	r2, [r5, #23]
            lfs_pair_fromle32(dir->tail);
   227b6:	e7d9      	b.n	2276c <lfs_dir_relocatingcommit+0x178>
    if (hasdelete && dir->count == 0) {
   227b8:	8aab      	ldrh	r3, [r5, #20]
   227ba:	2b00      	cmp	r3, #0
   227bc:	f47f af32 	bne.w	22624 <lfs_dir_relocatingcommit+0x30>
        LFS_ASSERT(pdir);
   227c0:	f1b8 0f00 	cmp.w	r8, #0
   227c4:	d109      	bne.n	227da <lfs_dir_relocatingcommit+0x1e6>
   227c6:	4958      	ldr	r1, [pc, #352]	; (22928 <lfs_dir_relocatingcommit+0x334>)
   227c8:	f240 73f6 	movw	r3, #2038	; 0x7f6
   227cc:	4a4f      	ldr	r2, [pc, #316]	; (2290c <lfs_dir_relocatingcommit+0x318>)
   227ce:	4855      	ldr	r0, [pc, #340]	; (22924 <lfs_dir_relocatingcommit+0x330>)
   227d0:	f007 ff73 	bl	2a6ba <assert_print>
   227d4:	f240 71f6 	movw	r1, #2038	; 0x7f6
   227d8:	e7d7      	b.n	2278a <lfs_dir_relocatingcommit+0x196>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
   227da:	4642      	mov	r2, r8
   227dc:	4629      	mov	r1, r5
   227de:	4630      	mov	r0, r6
   227e0:	f00c fc53 	bl	2f08a <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
   227e4:	4604      	mov	r4, r0
   227e6:	b138      	cbz	r0, 227f8 <lfs_dir_relocatingcommit+0x204>
   227e8:	1c83      	adds	r3, r0, #2
   227ea:	f43f af1b 	beq.w	22624 <lfs_dir_relocatingcommit+0x30>
}
   227ee:	4620      	mov	r0, r4
   227f0:	373c      	adds	r7, #60	; 0x3c
   227f2:	46bd      	mov	sp, r7
   227f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err != LFS_ERR_NOENT && pdir->split) {
   227f8:	f898 3017 	ldrb.w	r3, [r8, #23]
   227fc:	2b00      	cmp	r3, #0
   227fe:	f43f af11 	beq.w	22624 <lfs_dir_relocatingcommit+0x30>
            state = LFS_OK_DROPPED;
   22802:	2402      	movs	r4, #2
   22804:	e0a4      	b.n	22950 <lfs_dir_relocatingcommit+0x35c>
        struct lfs_commit commit = {
   22806:	f04f 31ff 	mov.w	r1, #4294967295
   2280a:	682b      	ldr	r3, [r5, #0]
            .off = dir->off,
   2280c:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
   2280e:	623b      	str	r3, [r7, #32]
   22810:	e9c7 120b 	strd	r1, r2, [r7, #44]	; 0x2c
            .ptag = dir->etag,
   22814:	692b      	ldr	r3, [r5, #16]
            .end = (lfs->cfg->metadata_max ?
   22816:	6eb0      	ldr	r0, [r6, #104]	; 0x68
        struct lfs_commit commit = {
   22818:	627a      	str	r2, [r7, #36]	; 0x24
   2281a:	62bb      	str	r3, [r7, #40]	; 0x28
            .end = (lfs->cfg->metadata_max ?
   2281c:	6c81      	ldr	r1, [r0, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   2281e:	b309      	cbz	r1, 22864 <lfs_dir_relocatingcommit+0x270>
   22820:	3908      	subs	r1, #8
        struct lfs_commit commit = {
   22822:	6379      	str	r1, [r7, #52]	; 0x34
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   22824:	f107 0820 	add.w	r8, r7, #32
        int err = lfs_dir_traverse(lfs,
   22828:	f107 010c 	add.w	r1, r7, #12
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   2282c:	60fe      	str	r6, [r7, #12]
   2282e:	f8c7 8010 	str.w	r8, [r7, #16]
        int err = lfs_dir_traverse(lfs,
   22832:	9107      	str	r1, [sp, #28]
   22834:	493d      	ldr	r1, [pc, #244]	; (2292c <lfs_dir_relocatingcommit+0x338>)
   22836:	4630      	mov	r0, r6
   22838:	9106      	str	r1, [sp, #24]
   2283a:	2100      	movs	r1, #0
   2283c:	e9cd 1104 	strd	r1, r1, [sp, #16]
   22840:	e9cd 1102 	strd	r1, r1, [sp, #8]
   22844:	6e39      	ldr	r1, [r7, #96]	; 0x60
   22846:	e9cd b100 	strd	fp, r1, [sp]
   2284a:	4629      	mov	r1, r5
   2284c:	f7fe fb18 	bl	20e80 <lfs_dir_traverse.constprop.0>
        if (err) {
   22850:	4604      	mov	r4, r0
   22852:	b148      	cbz	r0, 22868 <lfs_dir_relocatingcommit+0x274>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
   22854:	f114 0f1c 	cmn.w	r4, #28
   22858:	f43f aee8 	beq.w	2262c <lfs_dir_relocatingcommit+0x38>
   2285c:	f114 0f54 	cmn.w	r4, #84	; 0x54
   22860:	d1c5      	bne.n	227ee <lfs_dir_relocatingcommit+0x1fa>
   22862:	e6e3      	b.n	2262c <lfs_dir_relocatingcommit+0x38>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   22864:	69c1      	ldr	r1, [r0, #28]
   22866:	e7db      	b.n	22820 <lfs_dir_relocatingcommit+0x22c>
        lfs_gstate_xor(&delta, &lfs->gstate);
   22868:	f106 0930 	add.w	r9, r6, #48	; 0x30
   2286c:	4649      	mov	r1, r9
        lfs_gstate_t delta = {0};
   2286e:	e9c7 0005 	strd	r0, r0, [r7, #20]
   22872:	61f8      	str	r0, [r7, #28]
        lfs_gstate_xor(&delta, &lfs->gstate);
   22874:	f107 0014 	add.w	r0, r7, #20
   22878:	f00c fb1b 	bl	2eeb2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
   2287c:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   22880:	4619      	mov	r1, r3
   22882:	f107 0014 	add.w	r0, r7, #20
        lfs_gstate_xor(&delta, &lfs->gdelta);
   22886:	f106 0a48 	add.w	sl, r6, #72	; 0x48
        lfs_gstate_xor(&delta, &lfs->gdisk);
   2288a:	603b      	str	r3, [r7, #0]
   2288c:	f00c fb11 	bl	2eeb2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
   22890:	4651      	mov	r1, sl
   22892:	f107 0014 	add.w	r0, r7, #20
   22896:	f00c fb0c 	bl	2eeb2 <lfs_gstate_xor>
        if (((uint32_t*)a)[i] != 0) {
   2289a:	e9d7 2106 	ldrd	r2, r1, [r7, #24]
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2289e:	697b      	ldr	r3, [r7, #20]
        if (((uint32_t*)a)[i] != 0) {
   228a0:	430a      	orrs	r2, r1
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   228a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   228a6:	f023 0303 	bic.w	r3, r3, #3
        if (((uint32_t*)a)[i] != 0) {
   228aa:	431a      	orrs	r2, r3
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   228ac:	617b      	str	r3, [r7, #20]
        if (((uint32_t*)a)[i] != 0) {
   228ae:	d012      	beq.n	228d6 <lfs_dir_relocatingcommit+0x2e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
   228b0:	4629      	mov	r1, r5
   228b2:	4630      	mov	r0, r6
   228b4:	f107 0214 	add.w	r2, r7, #20
   228b8:	f7fe fa82 	bl	20dc0 <lfs_dir_getgstate>
            if (err) {
   228bc:	4604      	mov	r4, r0
   228be:	2800      	cmp	r0, #0
   228c0:	d195      	bne.n	227ee <lfs_dir_relocatingcommit+0x1fa>
            err = lfs_dir_commitattr(lfs, &commit,
   228c2:	4641      	mov	r1, r8
   228c4:	4630      	mov	r0, r6
   228c6:	4a1a      	ldr	r2, [pc, #104]	; (22930 <lfs_dir_relocatingcommit+0x33c>)
   228c8:	f107 0314 	add.w	r3, r7, #20
   228cc:	f00c fccf 	bl	2f26e <lfs_dir_commitattr>
            if (err) {
   228d0:	4604      	mov	r4, r0
   228d2:	2800      	cmp	r0, #0
   228d4:	d1be      	bne.n	22854 <lfs_dir_relocatingcommit+0x260>
        err = lfs_dir_commitcrc(lfs, &commit);
   228d6:	4641      	mov	r1, r8
   228d8:	4630      	mov	r0, r6
   228da:	f7ff fb01 	bl	21ee0 <lfs_dir_commitcrc>
        if (err) {
   228de:	4604      	mov	r4, r0
   228e0:	2800      	cmp	r0, #0
   228e2:	d1b7      	bne.n	22854 <lfs_dir_relocatingcommit+0x260>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
   228e4:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   228e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   228e8:	6991      	ldr	r1, [r2, #24]
   228ea:	fbb3 f2f1 	udiv	r2, r3, r1
   228ee:	fb01 3212 	mls	r2, r1, r2, r3
   228f2:	b30a      	cbz	r2, 22938 <lfs_dir_relocatingcommit+0x344>
   228f4:	490f      	ldr	r1, [pc, #60]	; (22934 <lfs_dir_relocatingcommit+0x340>)
   228f6:	f44f 6304 	mov.w	r3, #2112	; 0x840
   228fa:	4a04      	ldr	r2, [pc, #16]	; (2290c <lfs_dir_relocatingcommit+0x318>)
   228fc:	4809      	ldr	r0, [pc, #36]	; (22924 <lfs_dir_relocatingcommit+0x330>)
   228fe:	f007 fedc 	bl	2a6ba <assert_print>
   22902:	f44f 6104 	mov.w	r1, #2112	; 0x840
   22906:	e740      	b.n	2278a <lfs_dir_relocatingcommit+0x196>
   22908:	00037ea7 	.word	0x00037ea7
   2290c:	00037a7e 	.word	0x00037a7e
   22910:	01000006 	.word	0x01000006
   22914:	0003156c 	.word	0x0003156c
   22918:	00037ecb 	.word	0x00037ecb
   2291c:	01000004 	.word	0x01000004
   22920:	00037e93 	.word	0x00037e93
   22924:	00032659 	.word	0x00032659
   22928:	00037ea2 	.word	0x00037ea2
   2292c:	0002f319 	.word	0x0002f319
   22930:	7ffffc0c 	.word	0x7ffffc0c
   22934:	00037e40 	.word	0x00037e40
        dir->off = commit.off;
   22938:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
   2293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2293c:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
   2293e:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   22942:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
   22946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
   2294a:	64b4      	str	r4, [r6, #72]	; 0x48
   2294c:	e9ca 4401 	strd	r4, r4, [sl, #4]
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
   22950:	687b      	ldr	r3, [r7, #4]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22952:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
   22956:	681b      	ldr	r3, [r3, #0]
   22958:	623b      	str	r3, [r7, #32]
   2295a:	687b      	ldr	r3, [r7, #4]
   2295c:	685b      	ldr	r3, [r3, #4]
   2295e:	627b      	str	r3, [r7, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22960:	f1b8 0f00 	cmp.w	r8, #0
   22964:	f43f af43 	beq.w	227ee <lfs_dir_relocatingcommit+0x1fa>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
   22968:	f108 0908 	add.w	r9, r8, #8
   2296c:	4648      	mov	r0, r9
   2296e:	f107 0120 	add.w	r1, r7, #32
   22972:	f00c fa83 	bl	2ee7c <lfs_pair_cmp>
   22976:	4682      	mov	sl, r0
   22978:	2800      	cmp	r0, #0
   2297a:	d042      	beq.n	22a02 <lfs_dir_relocatingcommit+0x40e>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2297c:	f8d8 8000 	ldr.w	r8, [r8]
   22980:	e7ee      	b.n	22960 <lfs_dir_relocatingcommit+0x36c>
            end = split;
   22982:	46c1      	mov	r9, r8
   22984:	e657      	b.n	22636 <lfs_dir_relocatingcommit+0x42>
            lfs_size_t size = 0;
   22986:	2300      	movs	r3, #0
   22988:	623b      	str	r3, [r7, #32]
            int err = lfs_dir_traverse(lfs,
   2298a:	f107 0320 	add.w	r3, r7, #32
   2298e:	9307      	str	r3, [sp, #28]
   22990:	4b4b      	ldr	r3, [pc, #300]	; (22ac0 <lfs_dir_relocatingcommit+0x4cc>)
   22992:	fa1f f288 	uxth.w	r2, r8
   22996:	9306      	str	r3, [sp, #24]
   22998:	4253      	negs	r3, r2
   2299a:	b21b      	sxth	r3, r3
   2299c:	e9cd 9304 	strd	r9, r3, [sp, #16]
   229a0:	4b48      	ldr	r3, [pc, #288]	; (22ac4 <lfs_dir_relocatingcommit+0x4d0>)
   229a2:	9203      	str	r2, [sp, #12]
   229a4:	9302      	str	r3, [sp, #8]
   229a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   229a8:	2200      	movs	r2, #0
   229aa:	e9cd b300 	strd	fp, r3, [sp]
   229ae:	4629      	mov	r1, r5
   229b0:	f04f 33ff 	mov.w	r3, #4294967295
   229b4:	4630      	mov	r0, r6
   229b6:	f7fe fa63 	bl	20e80 <lfs_dir_traverse.constprop.0>
            if (err) {
   229ba:	4604      	mov	r4, r0
   229bc:	2800      	cmp	r0, #0
   229be:	f47f aec7 	bne.w	22750 <lfs_dir_relocatingcommit+0x15c>
            if (end - split < 0xff
   229c2:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
   229c6:	d815      	bhi.n	229f4 <lfs_dir_relocatingcommit+0x400>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229c8:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   229ca:	69da      	ldr	r2, [r3, #28]
                            (lfs->cfg->metadata_max
   229cc:	6c98      	ldr	r0, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229ce:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
   229d2:	b190      	cbz	r0, 229fa <lfs_dir_relocatingcommit+0x406>
   229d4:	0842      	lsrs	r2, r0, #1
                            lfs->cfg->prog_size))) {
   229d6:	6998      	ldr	r0, [r3, #24]
	return lfs_aligndown(a + alignment-1, alignment);
   229d8:	1e43      	subs	r3, r0, #1
   229da:	4413      	add	r3, r2
	return a - (a % alignment);
   229dc:	fbb3 f2f0 	udiv	r2, r3, r0
   229e0:	fb00 3212 	mls	r2, r0, r2, r3
   229e4:	1a9b      	subs	r3, r3, r2
	return (a < b) ? a : b;
   229e6:	428b      	cmp	r3, r1
   229e8:	bf28      	it	cs
   229ea:	460b      	movcs	r3, r1
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229ec:	6a3a      	ldr	r2, [r7, #32]
   229ee:	4293      	cmp	r3, r2
   229f0:	f4bf ae29 	bcs.w	22646 <lfs_dir_relocatingcommit+0x52>
            split = split + ((end - split) / 2);
   229f4:	eb08 085a 	add.w	r8, r8, sl, lsr #1
   229f8:	e61f      	b.n	2263a <lfs_dir_relocatingcommit+0x46>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229fa:	0852      	lsrs	r2, r2, #1
   229fc:	e7eb      	b.n	229d6 <lfs_dir_relocatingcommit+0x3e2>
                end = begin;
   229fe:	4681      	mov	r9, r0
   22a00:	e69a      	b.n	22738 <lfs_dir_relocatingcommit+0x144>
            d->m = *dir;
   22a02:	46cc      	mov	ip, r9
   22a04:	46ae      	mov	lr, r5
   22a06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22a0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22a0e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22a12:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
   22a16:	687b      	ldr	r3, [r7, #4]
   22a18:	4599      	cmp	r9, r3
   22a1a:	d008      	beq.n	22a2e <lfs_dir_relocatingcommit+0x43a>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a1c:	f240 41ff 	movw	r1, #1279	; 0x4ff
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   22a20:	f240 4001 	movw	r0, #1025	; 0x401
                for (int i = 0; i < attrcount; i++) {
   22a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
                            d->id == lfs_tag_id(attrs[i].tag)) {
   22a26:	f8b8 3004 	ldrh.w	r3, [r8, #4]
                for (int i = 0; i < attrcount; i++) {
   22a2a:	4592      	cmp	sl, r2
   22a2c:	d117      	bne.n	22a5e <lfs_dir_relocatingcommit+0x46a>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a2e:	f108 0a20 	add.w	sl, r8, #32
            while (d->id >= d->m.count && d->m.split) {
   22a32:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   22a36:	f8b8 201c 	ldrh.w	r2, [r8, #28]
   22a3a:	4293      	cmp	r3, r2
   22a3c:	d39e      	bcc.n	2297c <lfs_dir_relocatingcommit+0x388>
   22a3e:	f898 101f 	ldrb.w	r1, [r8, #31]
   22a42:	2900      	cmp	r1, #0
   22a44:	d09a      	beq.n	2297c <lfs_dir_relocatingcommit+0x388>
                d->id -= d->m.count;
   22a46:	1a9b      	subs	r3, r3, r2
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a48:	4649      	mov	r1, r9
   22a4a:	4652      	mov	r2, sl
   22a4c:	4630      	mov	r0, r6
                d->id -= d->m.count;
   22a4e:	f8a8 3004 	strh.w	r3, [r8, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a52:	f00c fb0d 	bl	2f070 <lfs_dir_fetch>
                if (err) {
   22a56:	2800      	cmp	r0, #0
   22a58:	d0eb      	beq.n	22a32 <lfs_dir_relocatingcommit+0x43e>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a5a:	4604      	mov	r4, r0
   22a5c:	e6c7      	b.n	227ee <lfs_dir_relocatingcommit+0x1fa>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a5e:	f85b 203a 	ldr.w	r2, [fp, sl, lsl #3]
    return (tag & 0x7ff00000) >> 20;
   22a62:	f3c2 5c0a 	ubfx	ip, r2, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a66:	458c      	cmp	ip, r1
   22a68:	d118      	bne.n	22a9c <lfs_dir_relocatingcommit+0x4a8>
    return (tag & 0x000ffc00) >> 10;
   22a6a:	f3c2 2289 	ubfx	r2, r2, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a6e:	429a      	cmp	r2, r3
   22a70:	d106      	bne.n	22a80 <lfs_dir_relocatingcommit+0x48c>
                        d->m.pair[0] = LFS_BLOCK_NULL;
   22a72:	f04f 33ff 	mov.w	r3, #4294967295
                        d->m.pair[1] = LFS_BLOCK_NULL;
   22a76:	e9c8 3302 	strd	r3, r3, [r8, #8]
                for (int i = 0; i < attrcount; i++) {
   22a7a:	f10a 0a01 	add.w	sl, sl, #1
   22a7e:	e7d1      	b.n	22a24 <lfs_dir_relocatingcommit+0x430>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a80:	d2fb      	bcs.n	22a7a <lfs_dir_relocatingcommit+0x486>
                        d->id -= 1;
   22a82:	3b01      	subs	r3, #1
   22a84:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
   22a88:	f898 3006 	ldrb.w	r3, [r8, #6]
   22a8c:	2b02      	cmp	r3, #2
   22a8e:	d1f4      	bne.n	22a7a <lfs_dir_relocatingcommit+0x486>
                            ((lfs_dir_t*)d)->pos -= 1;
   22a90:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   22a94:	3b01      	subs	r3, #1
                            ((lfs_dir_t*)d)->pos += 1;
   22a96:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
   22a9a:	e7ee      	b.n	22a7a <lfs_dir_relocatingcommit+0x486>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   22a9c:	4584      	cmp	ip, r0
   22a9e:	d1ec      	bne.n	22a7a <lfs_dir_relocatingcommit+0x486>
   22aa0:	f3c2 2289 	ubfx	r2, r2, #10, #10
   22aa4:	429a      	cmp	r2, r3
   22aa6:	d8e8      	bhi.n	22a7a <lfs_dir_relocatingcommit+0x486>
                        d->id += 1;
   22aa8:	3301      	adds	r3, #1
   22aaa:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
   22aae:	f898 3006 	ldrb.w	r3, [r8, #6]
   22ab2:	2b02      	cmp	r3, #2
   22ab4:	d1e1      	bne.n	22a7a <lfs_dir_relocatingcommit+0x486>
                            ((lfs_dir_t*)d)->pos += 1;
   22ab6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   22aba:	3301      	adds	r3, #1
   22abc:	e7eb      	b.n	22a96 <lfs_dir_relocatingcommit+0x4a2>
   22abe:	bf00      	nop
   22ac0:	0002ef2f 	.word	0x0002ef2f
   22ac4:	400ffc00 	.word	0x400ffc00

00022ac8 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
   22ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22acc:	4605      	mov	r5, r0
   22ace:	4688      	mov	r8, r1
   22ad0:	4691      	mov	r9, r2
   22ad2:	469a      	mov	sl, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   22ad4:	6a86      	ldr	r6, [r0, #40]	; 0x28
        const struct lfs_mattr *attrs, int attrcount) {
   22ad6:	b09d      	sub	sp, #116	; 0x74
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   22ad8:	2e00      	cmp	r6, #0
   22ada:	d160      	bne.n	22b9e <lfs_dir_orphaningcommit+0xd6>
    lfs_mdir_t ldir = *dir;
   22adc:	4646      	mov	r6, r8
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
   22ade:	f8d8 3000 	ldr.w	r3, [r8]
    lfs_mdir_t ldir = *dir;
   22ae2:	ac0c      	add	r4, sp, #48	; 0x30
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
   22ae4:	9304      	str	r3, [sp, #16]
   22ae6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
   22aea:	af0c      	add	r7, sp, #48	; 0x30
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
   22aec:	9305      	str	r3, [sp, #20]
    lfs_mdir_t ldir = *dir;
   22aee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   22af2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
   22af6:	ae14      	add	r6, sp, #80	; 0x50
    lfs_mdir_t ldir = *dir;
   22af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
   22afc:	464b      	mov	r3, r9
   22afe:	4642      	mov	r2, r8
   22b00:	4639      	mov	r1, r7
   22b02:	4628      	mov	r0, r5
   22b04:	e9cd a600 	strd	sl, r6, [sp]
   22b08:	f7ff fd74 	bl	225f4 <lfs_dir_relocatingcommit>
    if (state < 0) {
   22b0c:	1e04      	subs	r4, r0, #0
   22b0e:	db72      	blt.n	22bf6 <lfs_dir_orphaningcommit+0x12e>
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
   22b10:	4640      	mov	r0, r8
   22b12:	a904      	add	r1, sp, #16
   22b14:	f00c f9b2 	bl	2ee7c <lfs_pair_cmp>
   22b18:	b948      	cbnz	r0, 22b2e <lfs_dir_orphaningcommit+0x66>
        *dir = ldir;
   22b1a:	46c4      	mov	ip, r8
   22b1c:	46be      	mov	lr, r7
   22b1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22b22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22b26:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22b2a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
   22b2e:	2c02      	cmp	r4, #2
   22b30:	d12c      	bne.n	22b8c <lfs_dir_orphaningcommit+0xc4>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
   22b32:	4641      	mov	r1, r8
   22b34:	4628      	mov	r0, r5
   22b36:	f105 0248 	add.w	r2, r5, #72	; 0x48
   22b3a:	f7fe f941 	bl	20dc0 <lfs_dir_getgstate>
        if (err) {
   22b3e:	4604      	mov	r4, r0
   22b40:	2800      	cmp	r0, #0
   22b42:	d158      	bne.n	22bf6 <lfs_dir_orphaningcommit+0x12e>
        lpair[0] = pdir.pair[0];
   22b44:	9b14      	ldr	r3, [sp, #80]	; 0x50
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b46:	f898 2017 	ldrb.w	r2, [r8, #23]
        lpair[0] = pdir.pair[0];
   22b4a:	9304      	str	r3, [sp, #16]
        lpair[1] = pdir.pair[1];
   22b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b4e:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
        lpair[1] = pdir.pair[1];
   22b52:	9305      	str	r3, [sp, #20]
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b54:	4ba6      	ldr	r3, [pc, #664]	; (22df0 <lfs_dir_orphaningcommit+0x328>)
   22b56:	9001      	str	r0, [sp, #4]
   22b58:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   22b5c:	9308      	str	r3, [sp, #32]
        lfs_pair_tole32(dir->tail);
   22b5e:	f108 0318 	add.w	r3, r8, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b62:	9309      	str	r3, [sp, #36]	; 0x24
   22b64:	2301      	movs	r3, #1
   22b66:	4631      	mov	r1, r6
   22b68:	9300      	str	r3, [sp, #0]
   22b6a:	4628      	mov	r0, r5
   22b6c:	ab08      	add	r3, sp, #32
   22b6e:	aa04      	add	r2, sp, #16
   22b70:	f7ff fd40 	bl	225f4 <lfs_dir_relocatingcommit>
        if (state < 0) {
   22b74:	1e04      	subs	r4, r0, #0
   22b76:	db3e      	blt.n	22bf6 <lfs_dir_orphaningcommit+0x12e>
        ldir = pdir;
   22b78:	46bc      	mov	ip, r7
   22b7a:	46b6      	mov	lr, r6
   22b7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22b80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22b84:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22b88:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b8c:	2300      	movs	r3, #0
   22b8e:	9302      	str	r3, [sp, #8]
    while (state == LFS_OK_RELOCATED) {
   22b90:	2c01      	cmp	r4, #1
   22b92:	f040 8124 	bne.w	22dde <lfs_dir_orphaningcommit+0x316>
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
   22b96:	f105 0320 	add.w	r3, r5, #32
   22b9a:	9303      	str	r3, [sp, #12]
   22b9c:	e091      	b.n	22cc2 <lfs_dir_orphaningcommit+0x1fa>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   22b9e:	f106 0008 	add.w	r0, r6, #8
   22ba2:	4540      	cmp	r0, r8
   22ba4:	d101      	bne.n	22baa <lfs_dir_orphaningcommit+0xe2>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   22ba6:	6836      	ldr	r6, [r6, #0]
   22ba8:	e796      	b.n	22ad8 <lfs_dir_orphaningcommit+0x10>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   22baa:	4641      	mov	r1, r8
   22bac:	f00c f966 	bl	2ee7c <lfs_pair_cmp>
   22bb0:	2800      	cmp	r0, #0
   22bb2:	d1f8      	bne.n	22ba6 <lfs_dir_orphaningcommit+0xde>
   22bb4:	79b3      	ldrb	r3, [r6, #6]
   22bb6:	2b01      	cmp	r3, #1
   22bb8:	d1f5      	bne.n	22ba6 <lfs_dir_orphaningcommit+0xde>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   22bba:	6b33      	ldr	r3, [r6, #48]	; 0x30
   22bbc:	02da      	lsls	r2, r3, #11
   22bbe:	d5f2      	bpl.n	22ba6 <lfs_dir_orphaningcommit+0xde>
                f->ctz.size > lfs->cfg->cache_size) {
   22bc0:	6eab      	ldr	r3, [r5, #104]	; 0x68
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   22bc2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   22bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22bc6:	429a      	cmp	r2, r3
   22bc8:	d9ed      	bls.n	22ba6 <lfs_dir_orphaningcommit+0xde>
    file->off = file->pos;
   22bca:	6b73      	ldr	r3, [r6, #52]	; 0x34
    int err = lfs_file_relocate(lfs, file);
   22bcc:	4631      	mov	r1, r6
    file->off = file->pos;
   22bce:	63f3      	str	r3, [r6, #60]	; 0x3c
    lfs->free.ack = lfs->cfg->block_count;
   22bd0:	6eab      	ldr	r3, [r5, #104]	; 0x68
    int err = lfs_file_relocate(lfs, file);
   22bd2:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   22bd4:	6a1b      	ldr	r3, [r3, #32]
   22bd6:	662b      	str	r3, [r5, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
   22bd8:	f7ff fafe 	bl	221d8 <lfs_file_relocate>
    if (err) {
   22bdc:	4604      	mov	r4, r0
   22bde:	b950      	cbnz	r0, 22bf6 <lfs_dir_orphaningcommit+0x12e>
    file->flags &= ~LFS_F_INLINE;
   22be0:	6b33      	ldr	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
   22be2:	4631      	mov	r1, r6
    file->flags &= ~LFS_F_INLINE;
   22be4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
            err = lfs_file_flush(lfs, f);
   22be8:	4628      	mov	r0, r5
    file->flags &= ~LFS_F_INLINE;
   22bea:	6333      	str	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
   22bec:	f00c fd0f 	bl	2f60e <lfs_file_flush>
            if (err) {
   22bf0:	4604      	mov	r4, r0
   22bf2:	2800      	cmp	r0, #0
   22bf4:	d0d7      	beq.n	22ba6 <lfs_dir_orphaningcommit+0xde>
}
   22bf6:	4620      	mov	r0, r4
   22bf8:	b01d      	add	sp, #116	; 0x74
   22bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
   22bfe:	f10b 0108 	add.w	r1, fp, #8
   22c02:	a804      	add	r0, sp, #16
   22c04:	f00c f93a 	bl	2ee7c <lfs_pair_cmp>
   22c08:	b908      	cbnz	r0, 22c0e <lfs_dir_orphaningcommit+0x146>
                d->m.pair[1] = ldir.pair[1];
   22c0a:	e9cb 4202 	strd	r4, r2, [fp, #8]
            if (d->type == LFS_TYPE_DIR &&
   22c0e:	f89b 1006 	ldrb.w	r1, [fp, #6]
   22c12:	2902      	cmp	r1, #2
   22c14:	d107      	bne.n	22c26 <lfs_dir_orphaningcommit+0x15e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
   22c16:	f10b 012c 	add.w	r1, fp, #44	; 0x2c
   22c1a:	a804      	add	r0, sp, #16
   22c1c:	f00c f92e 	bl	2ee7c <lfs_pair_cmp>
            if (d->type == LFS_TYPE_DIR &&
   22c20:	b908      	cbnz	r0, 22c26 <lfs_dir_orphaningcommit+0x15e>
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
   22c22:	e9cb 420b 	strd	r4, r2, [fp, #44]	; 0x2c
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22c26:	f8db b000 	ldr.w	fp, [fp]
   22c2a:	e055      	b.n	22cd8 <lfs_dir_orphaningcommit+0x210>
            int err = lfs_fs_preporphans(lfs, +1);
   22c2c:	2101      	movs	r1, #1
   22c2e:	4628      	mov	r0, r5
   22c30:	f7fd ff36 	bl	20aa0 <lfs_fs_preporphans>
            if (err) {
   22c34:	4604      	mov	r4, r0
   22c36:	2800      	cmp	r0, #0
   22c38:	d1dd      	bne.n	22bf6 <lfs_dir_orphaningcommit+0x12e>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22c3a:	4631      	mov	r1, r6
   22c3c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   22c40:	f00c f945 	bl	2eece <lfs_gstate_hasmovehere>
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22c44:	e9dd a914 	ldrd	sl, r9, [sp, #80]	; 0x50
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22c48:	b1c0      	cbz	r0, 22c7c <lfs_dir_orphaningcommit+0x1b4>
                moveid = lfs_tag_id(lfs->gstate.tag);
   22c4a:	6b29      	ldr	r1, [r5, #48]	; 0x30
                if (moveid < lfs_tag_id(tag)) {
   22c4c:	f3c8 2389 	ubfx	r3, r8, #10, #10
    return (tag & 0x000ffc00) >> 10;
   22c50:	f3c1 2289 	ubfx	r2, r1, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22c54:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   22c58:	f421 01ff 	bic.w	r1, r1, #8355840	; 0x7f8000
   22c5c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
                if (moveid < lfs_tag_id(tag)) {
   22c60:	429a      	cmp	r2, r3
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22c62:	e9c5 1b0c 	strd	r1, fp, [r5, #48]	; 0x30
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22c66:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
                if (moveid < lfs_tag_id(tag)) {
   22c6a:	d25d      	bcs.n	22d28 <lfs_dir_orphaningcommit+0x260>
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22c6c:	e9cd a906 	strd	sl, r9, [sp, #24]
                    tag -= LFS_MKTAG(0, 1, 0);
   22c70:	f5a8 6380 	sub.w	r3, r8, #1024	; 0x400
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22c74:	495f      	ldr	r1, [pc, #380]	; (22df4 <lfs_dir_orphaningcommit+0x32c>)
   22c76:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
   22c7a:	e003      	b.n	22c84 <lfs_dir_orphaningcommit+0x1bc>
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22c7c:	e9cd a906 	strd	sl, r9, [sp, #24]
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22c80:	4643      	mov	r3, r8
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22c82:	2200      	movs	r2, #0
   22c84:	9208      	str	r2, [sp, #32]
   22c86:	2200      	movs	r2, #0
   22c88:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   22c8c:	2302      	movs	r3, #2
   22c8e:	9201      	str	r2, [sp, #4]
   22c90:	9300      	str	r3, [sp, #0]
   22c92:	4631      	mov	r1, r6
   22c94:	4628      	mov	r0, r5
   22c96:	ab08      	add	r3, sp, #32
   22c98:	aa06      	add	r2, sp, #24
   22c9a:	970b      	str	r7, [sp, #44]	; 0x2c
   22c9c:	f7ff fcaa 	bl	225f4 <lfs_dir_relocatingcommit>
            if (state < 0) {
   22ca0:	1e04      	subs	r4, r0, #0
   22ca2:	dba8      	blt.n	22bf6 <lfs_dir_orphaningcommit+0x12e>
            if (state == LFS_OK_RELOCATED) {
   22ca4:	2c01      	cmp	r4, #1
   22ca6:	d147      	bne.n	22d38 <lfs_dir_orphaningcommit+0x270>
                ldir = pdir;
   22ca8:	46bc      	mov	ip, r7
   22caa:	46b6      	mov	lr, r6
   22cac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22cb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22cb4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22cb8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                lpair[1] = ppair[1];
   22cbc:	e9cd a904 	strd	sl, r9, [sp, #16]
                orphans = true;
   22cc0:	9402      	str	r4, [sp, #8]
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
   22cc2:	9903      	ldr	r1, [sp, #12]
   22cc4:	a804      	add	r0, sp, #16
   22cc6:	f00c f8d9 	bl	2ee7c <lfs_pair_cmp>
                d->m.pair[1] = ldir.pair[1];
   22cca:	e9dd 420c 	ldrd	r4, r2, [sp, #48]	; 0x30
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
   22cce:	b908      	cbnz	r0, 22cd4 <lfs_dir_orphaningcommit+0x20c>
            lfs->root[1] = ldir.pair[1];
   22cd0:	e9c5 4208 	strd	r4, r2, [r5, #32]
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22cd4:	f8d5 b028 	ldr.w	fp, [r5, #40]	; 0x28
   22cd8:	f1bb 0f00 	cmp.w	fp, #0
   22cdc:	d18f      	bne.n	22bfe <lfs_dir_orphaningcommit+0x136>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22cde:	4632      	mov	r2, r6
   22ce0:	4628      	mov	r0, r5
   22ce2:	a904      	add	r1, sp, #16
   22ce4:	f7fe fcc4 	bl	21670 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
   22ce8:	f1b0 0800 	subs.w	r8, r0, #0
   22cec:	da9e      	bge.n	22c2c <lfs_dir_orphaningcommit+0x164>
   22cee:	f118 0f02 	cmn.w	r8, #2
   22cf2:	d17a      	bne.n	22dea <lfs_dir_orphaningcommit+0x322>
        bool hasparent = (tag != LFS_ERR_NOENT);
   22cf4:	46d9      	mov	r9, fp
        int err = lfs_fs_pred(lfs, lpair, &pdir);
   22cf6:	4632      	mov	r2, r6
   22cf8:	4628      	mov	r0, r5
   22cfa:	a904      	add	r1, sp, #16
   22cfc:	f00c f9c5 	bl	2f08a <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
   22d00:	4604      	mov	r4, r0
   22d02:	b1e0      	cbz	r0, 22d3e <lfs_dir_orphaningcommit+0x276>
   22d04:	1c83      	adds	r3, r0, #2
   22d06:	f47f af76 	bne.w	22bf6 <lfs_dir_orphaningcommit+0x12e>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
   22d0a:	f118 0f02 	cmn.w	r8, #2
   22d0e:	d066      	beq.n	22dde <lfs_dir_orphaningcommit+0x316>
   22d10:	4939      	ldr	r1, [pc, #228]	; (22df8 <lfs_dir_orphaningcommit+0x330>)
   22d12:	483a      	ldr	r0, [pc, #232]	; (22dfc <lfs_dir_orphaningcommit+0x334>)
   22d14:	f640 131a 	movw	r3, #2330	; 0x91a
   22d18:	4a39      	ldr	r2, [pc, #228]	; (22e00 <lfs_dir_orphaningcommit+0x338>)
   22d1a:	f007 fcce 	bl	2a6ba <assert_print>
   22d1e:	f640 111a 	movw	r1, #2330	; 0x91a
   22d22:	4837      	ldr	r0, [pc, #220]	; (22e00 <lfs_dir_orphaningcommit+0x338>)
   22d24:	f007 fcc2 	bl	2a6ac <assert_post_action>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22d28:	f240 33ff 	movw	r3, #1023	; 0x3ff
   22d2c:	429a      	cmp	r2, r3
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22d2e:	e9cd a906 	strd	sl, r9, [sp, #24]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22d32:	d0a5      	beq.n	22c80 <lfs_dir_orphaningcommit+0x1b8>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22d34:	4643      	mov	r3, r8
   22d36:	e79d      	b.n	22c74 <lfs_dir_orphaningcommit+0x1ac>
        bool hasparent = (tag != LFS_ERR_NOENT);
   22d38:	f04f 0901 	mov.w	r9, #1
   22d3c:	e7db      	b.n	22cf6 <lfs_dir_orphaningcommit+0x22e>
    return tag & 0x000003ff;
   22d3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   22d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
   22d44:	bb6b      	cbnz	r3, 22da2 <lfs_dir_orphaningcommit+0x2da>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22d46:	4631      	mov	r1, r6
   22d48:	f105 0030 	add.w	r0, r5, #48	; 0x30
   22d4c:	f00c f8bf 	bl	2eece <lfs_gstate_hasmovehere>
            lpair[0] = pdir.pair[0];
   22d50:	e9dd 4114 	ldrd	r4, r1, [sp, #80]	; 0x50
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22d54:	bb70      	cbnz	r0, 22db4 <lfs_dir_orphaningcommit+0x2ec>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22d56:	2300      	movs	r3, #0
   22d58:	9308      	str	r3, [sp, #32]
   22d5a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
            lpair[1] = pdir.pair[1];
   22d5e:	e9cd 4104 	strd	r4, r1, [sp, #16]
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22d62:	4923      	ldr	r1, [pc, #140]	; (22df0 <lfs_dir_orphaningcommit+0x328>)
   22d64:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   22d68:	ea41 5303 	orr.w	r3, r1, r3, lsl #20
   22d6c:	2200      	movs	r2, #0
   22d6e:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
   22d72:	2302      	movs	r3, #2
   22d74:	9209      	str	r2, [sp, #36]	; 0x24
   22d76:	9201      	str	r2, [sp, #4]
   22d78:	9300      	str	r3, [sp, #0]
   22d7a:	4631      	mov	r1, r6
   22d7c:	4628      	mov	r0, r5
   22d7e:	ab08      	add	r3, sp, #32
   22d80:	aa04      	add	r2, sp, #16
   22d82:	f7ff fc37 	bl	225f4 <lfs_dir_relocatingcommit>
            if (state < 0) {
   22d86:	1e04      	subs	r4, r0, #0
   22d88:	f6ff af35 	blt.w	22bf6 <lfs_dir_orphaningcommit+0x12e>
            ldir = pdir;
   22d8c:	46bc      	mov	ip, r7
   22d8e:	46b6      	mov	lr, r6
   22d90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22d94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22d98:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22d9c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   22da0:	e6f6      	b.n	22b90 <lfs_dir_orphaningcommit+0xc8>
                err = lfs_fs_preporphans(lfs, -hasparent);
   22da2:	4628      	mov	r0, r5
   22da4:	f1c9 0100 	rsb	r1, r9, #0
   22da8:	f7fd fe7a 	bl	20aa0 <lfs_fs_preporphans>
                if (err) {
   22dac:	4604      	mov	r4, r0
   22dae:	2800      	cmp	r0, #0
   22db0:	d0c9      	beq.n	22d46 <lfs_dir_orphaningcommit+0x27e>
   22db2:	e720      	b.n	22bf6 <lfs_dir_orphaningcommit+0x12e>
                moveid = lfs_tag_id(lfs->gstate.tag);
   22db4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
   22db6:	f3c2 2389 	ubfx	r3, r2, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22dba:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   22dbe:	f422 02ff 	bic.w	r2, r2, #8355840	; 0x7f8000
   22dc2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
   22dc6:	632a      	str	r2, [r5, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22dc8:	2200      	movs	r2, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22dca:	e9c5 220d 	strd	r2, r2, [r5, #52]	; 0x34
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22dce:	f240 32ff 	movw	r2, #1023	; 0x3ff
   22dd2:	4293      	cmp	r3, r2
   22dd4:	d0bf      	beq.n	22d56 <lfs_dir_orphaningcommit+0x28e>
   22dd6:	4a07      	ldr	r2, [pc, #28]	; (22df4 <lfs_dir_orphaningcommit+0x32c>)
   22dd8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   22ddc:	e7bc      	b.n	22d58 <lfs_dir_orphaningcommit+0x290>
    return orphans ? LFS_OK_ORPHANED : 0;
   22dde:	9b02      	ldr	r3, [sp, #8]
   22de0:	2b00      	cmp	r3, #0
   22de2:	bf0c      	ite	eq
   22de4:	2400      	moveq	r4, #0
   22de6:	2403      	movne	r4, #3
   22de8:	e705      	b.n	22bf6 <lfs_dir_orphaningcommit+0x12e>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22dea:	4644      	mov	r4, r8
   22dec:	e703      	b.n	22bf6 <lfs_dir_orphaningcommit+0x12e>
   22dee:	bf00      	nop
   22df0:	000ffc08 	.word	0x000ffc08
   22df4:	4ff00000 	.word	0x4ff00000
   22df8:	00037eee 	.word	0x00037eee
   22dfc:	00032659 	.word	0x00032659
   22e00:	00037a7e 	.word	0x00037a7e

00022e04 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
   22e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e08:	4604      	mov	r4, r0
    return tag & 0x000003ff;
   22e0a:	6b00      	ldr	r0, [r0, #48]	; 0x30
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
   22e0c:	460f      	mov	r7, r1
    return tag & 0x000003ff;
   22e0e:	f3c0 0009 	ubfx	r0, r0, #0, #10
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
   22e12:	b0a1      	sub	sp, #132	; 0x84
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
   22e14:	2800      	cmp	r0, #0
   22e16:	f000 8095 	beq.w	22f44 <lfs_fs_deorphan+0x140>
    int8_t found = 0;
   22e1a:	2500      	movs	r5, #0
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
   22e1c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 22f4c <lfs_fs_deorphan+0x148>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22e20:	f8df 912c 	ldr.w	r9, [pc, #300]	; 22f50 <lfs_fs_deorphan+0x14c>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
   22e24:	221c      	movs	r2, #28
   22e26:	2100      	movs	r1, #0
   22e28:	a808      	add	r0, sp, #32
   22e2a:	f00d fbda 	bl	305e2 <memset>
   22e2e:	2301      	movs	r3, #1
   22e30:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   22e34:	930f      	str	r3, [sp, #60]	; 0x3c
        while (!lfs_pair_isnull(pdir.tail)) {
   22e36:	a80e      	add	r0, sp, #56	; 0x38
   22e38:	f00c f816 	bl	2ee68 <lfs_pair_isnull>
   22e3c:	b160      	cbz	r0, 22e58 <lfs_fs_deorphan+0x54>
   22e3e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    return lfs_fs_preporphans(lfs, -lfs_min(
   22e42:	4620      	mov	r0, r4
   22e44:	42a9      	cmp	r1, r5
   22e46:	bf28      	it	cs
   22e48:	4629      	movcs	r1, r5
   22e4a:	4249      	negs	r1, r1
   22e4c:	b249      	sxtb	r1, r1
}
   22e4e:	b021      	add	sp, #132	; 0x84
   22e50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return lfs_fs_preporphans(lfs, -lfs_min(
   22e54:	f7fd be24 	b.w	20aa0 <lfs_fs_preporphans>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
   22e58:	4620      	mov	r0, r4
   22e5a:	aa0e      	add	r2, sp, #56	; 0x38
   22e5c:	a910      	add	r1, sp, #64	; 0x40
   22e5e:	f00c f907 	bl	2f070 <lfs_dir_fetch>
            if (err) {
   22e62:	2800      	cmp	r0, #0
   22e64:	d16e      	bne.n	22f44 <lfs_fs_deorphan+0x140>
            if (!pdir.split) {
   22e66:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   22e6a:	2b00      	cmp	r3, #0
   22e6c:	d15f      	bne.n	22f2e <lfs_fs_deorphan+0x12a>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
   22e6e:	4620      	mov	r0, r4
   22e70:	aa18      	add	r2, sp, #96	; 0x60
   22e72:	a90e      	add	r1, sp, #56	; 0x38
   22e74:	f7fe fbfc 	bl	21670 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
   22e78:	2800      	cmp	r0, #0
   22e7a:	da22      	bge.n	22ec2 <lfs_fs_deorphan+0xbe>
   22e7c:	1c83      	adds	r3, r0, #2
   22e7e:	d161      	bne.n	22f44 <lfs_fs_deorphan+0x140>
                if (tag == LFS_ERR_NOENT && powerloss) {
   22e80:	2f00      	cmp	r7, #0
   22e82:	d054      	beq.n	22f2e <lfs_fs_deorphan+0x12a>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
   22e84:	4620      	mov	r0, r4
   22e86:	f104 0248 	add.w	r2, r4, #72	; 0x48
   22e8a:	a910      	add	r1, sp, #64	; 0x40
   22e8c:	f7fd ff98 	bl	20dc0 <lfs_dir_getgstate>
                    if (err) {
   22e90:	2800      	cmp	r0, #0
   22e92:	d157      	bne.n	22f44 <lfs_fs_deorphan+0x140>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22e94:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   22e98:	4b2e      	ldr	r3, [pc, #184]	; (22f54 <lfs_fs_deorphan+0x150>)
   22e9a:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
   22e9e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   22ea2:	9304      	str	r3, [sp, #16]
   22ea4:	ab16      	add	r3, sp, #88	; 0x58
   22ea6:	9305      	str	r3, [sp, #20]
   22ea8:	2301      	movs	r3, #1
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22eaa:	4620      	mov	r0, r4
   22eac:	aa04      	add	r2, sp, #16
   22eae:	a908      	add	r1, sp, #32
   22eb0:	f7ff fe0a 	bl	22ac8 <lfs_dir_orphaningcommit>
                        if (state < 0) {
   22eb4:	2800      	cmp	r0, #0
   22eb6:	db45      	blt.n	22f44 <lfs_fs_deorphan+0x140>
                        found += 1;
   22eb8:	3501      	adds	r5, #1
                        if (state == LFS_OK_ORPHANED) {
   22eba:	2803      	cmp	r0, #3
                        found += 1;
   22ebc:	b26d      	sxtb	r5, r5
                        if (state == LFS_OK_ORPHANED) {
   22ebe:	d1ba      	bne.n	22e36 <lfs_fs_deorphan+0x32>
   22ec0:	e7b0      	b.n	22e24 <lfs_fs_deorphan+0x20>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
   22ec2:	ae02      	add	r6, sp, #8
   22ec4:	4603      	mov	r3, r0
   22ec6:	4642      	mov	r2, r8
   22ec8:	4620      	mov	r0, r4
   22eca:	9600      	str	r6, [sp, #0]
   22ecc:	a918      	add	r1, sp, #96	; 0x60
   22ece:	f00c f853 	bl	2ef78 <lfs_dir_get>
                    if (state < 0) {
   22ed2:	2800      	cmp	r0, #0
   22ed4:	db36      	blt.n	22f44 <lfs_fs_deorphan+0x140>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   22ed6:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
   22eda:	9902      	ldr	r1, [sp, #8]
   22edc:	4299      	cmp	r1, r3
   22ede:	d102      	bne.n	22ee6 <lfs_fs_deorphan+0xe2>
   22ee0:	9803      	ldr	r0, [sp, #12]
   22ee2:	4290      	cmp	r0, r2
   22ee4:	d023      	beq.n	22f2e <lfs_fs_deorphan+0x12a>
   22ee6:	4291      	cmp	r1, r2
   22ee8:	d102      	bne.n	22ef0 <lfs_fs_deorphan+0xec>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
   22eea:	9a03      	ldr	r2, [sp, #12]
   22eec:	4293      	cmp	r3, r2
   22eee:	d01e      	beq.n	22f2e <lfs_fs_deorphan+0x12a>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22ef0:	a908      	add	r1, sp, #32
   22ef2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22ef6:	f00b ffea 	bl	2eece <lfs_gstate_hasmovehere>
   22efa:	b938      	cbnz	r0, 22f0c <lfs_fs_deorphan+0x108>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22efc:	2300      	movs	r3, #0
   22efe:	9304      	str	r3, [sp, #16]
   22f00:	2300      	movs	r3, #0
   22f02:	9607      	str	r6, [sp, #28]
   22f04:	e9cd 3905 	strd	r3, r9, [sp, #20]
   22f08:	2302      	movs	r3, #2
   22f0a:	e7ce      	b.n	22eaa <lfs_fs_deorphan+0xa6>
                            moveid = lfs_tag_id(lfs->gstate.tag);
   22f0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f0e:	4b12      	ldr	r3, [pc, #72]	; (22f58 <lfs_fs_deorphan+0x154>)
    return (tag & 0x000ffc00) >> 10;
   22f10:	f3c1 2289 	ubfx	r2, r1, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f14:	400b      	ands	r3, r1
   22f16:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22f18:	2300      	movs	r3, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22f1a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22f1e:	f240 33ff 	movw	r3, #1023	; 0x3ff
   22f22:	429a      	cmp	r2, r3
   22f24:	d0ea      	beq.n	22efc <lfs_fs_deorphan+0xf8>
   22f26:	4b0d      	ldr	r3, [pc, #52]	; (22f5c <lfs_fs_deorphan+0x158>)
   22f28:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   22f2c:	e7e7      	b.n	22efe <lfs_fs_deorphan+0xfa>
            pdir = dir;
   22f2e:	ae08      	add	r6, sp, #32
   22f30:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   22f34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   22f38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22f3a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   22f3e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   22f42:	e778      	b.n	22e36 <lfs_fs_deorphan+0x32>
}
   22f44:	b021      	add	sp, #132	; 0x84
   22f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22f4a:	bf00      	nop
   22f4c:	7ffffc00 	.word	0x7ffffc00
   22f50:	600ffc08 	.word	0x600ffc08
   22f54:	000ffc08 	.word	0x000ffc08
   22f58:	800003ff 	.word	0x800003ff
   22f5c:	4ff00000 	.word	0x4ff00000

00022f60 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   22f60:	b510      	push	{r4, lr}
    return (tag & 0x70000000) >> 20;
   22f62:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   22f64:	4604      	mov	r4, r0
    return (tag & 0x70000000) >> 20;
   22f66:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   22f68:	f413 6fe0 	tst.w	r3, #1792	; 0x700
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   22f6c:	b08a      	sub	sp, #40	; 0x28
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   22f6e:	d106      	bne.n	22f7e <lfs_fs_forceconsistency+0x1e>
    err = lfs_fs_deorphan(lfs, true);
   22f70:	2101      	movs	r1, #1
   22f72:	4620      	mov	r0, r4
}
   22f74:	b00a      	add	sp, #40	; 0x28
   22f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = lfs_fs_deorphan(lfs, true);
   22f7a:	f7ff bf43 	b.w	22e04 <lfs_fs_deorphan>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
   22f7e:	f100 0240 	add.w	r2, r0, #64	; 0x40
   22f82:	a902      	add	r1, sp, #8
   22f84:	f00c f874 	bl	2f070 <lfs_dir_fetch>
    if (err) {
   22f88:	b9a8      	cbnz	r0, 22fb6 <lfs_fs_forceconsistency+0x56>
    return (tag & 0x000ffc00) >> 10;
   22f8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
   22f8e:	f3c3 2289 	ubfx	r2, r3, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f92:	4b0a      	ldr	r3, [pc, #40]	; (22fbc <lfs_fs_forceconsistency+0x5c>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22f94:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f96:	400b      	ands	r3, r1
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22f98:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   22f9c:	4b08      	ldr	r3, [pc, #32]	; (22fc0 <lfs_fs_forceconsistency+0x60>)
   22f9e:	a902      	add	r1, sp, #8
   22fa0:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   22fa4:	e9cd 3000 	strd	r3, r0, [sp]
   22fa8:	466a      	mov	r2, sp
   22faa:	2301      	movs	r3, #1
   22fac:	4620      	mov	r0, r4
   22fae:	f00c fc1c 	bl	2f7ea <lfs_dir_commit>
    if (err) {
   22fb2:	2800      	cmp	r0, #0
   22fb4:	d0dc      	beq.n	22f70 <lfs_fs_forceconsistency+0x10>
}
   22fb6:	b00a      	add	sp, #40	; 0x28
   22fb8:	bd10      	pop	{r4, pc}
   22fba:	bf00      	nop
   22fbc:	800003ff 	.word	0x800003ff
   22fc0:	4ff00000 	.word	0x4ff00000

00022fc4 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   22fc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22fc6:	4614      	mov	r4, r2
   22fc8:	460e      	mov	r6, r1
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   22fca:	f100 0248 	add.w	r2, r0, #72	; 0x48
   22fce:	4621      	mov	r1, r4
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   22fd0:	4605      	mov	r5, r0
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   22fd2:	f7fd fef5 	bl	20dc0 <lfs_dir_getgstate>
    if (err) {
   22fd6:	b970      	cbnz	r0, 22ff6 <lfs_dir_drop+0x32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   22fd8:	7de2      	ldrb	r2, [r4, #23]
   22fda:	4b08      	ldr	r3, [pc, #32]	; (22ffc <lfs_dir_drop+0x38>)
   22fdc:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
   22fe0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   22fe4:	9300      	str	r3, [sp, #0]
    lfs_pair_tole32(tail->tail);
   22fe6:	3418      	adds	r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   22fe8:	2301      	movs	r3, #1
   22fea:	466a      	mov	r2, sp
   22fec:	4631      	mov	r1, r6
   22fee:	4628      	mov	r0, r5
   22ff0:	9401      	str	r4, [sp, #4]
   22ff2:	f00c fbfa 	bl	2f7ea <lfs_dir_commit>
}
   22ff6:	b002      	add	sp, #8
   22ff8:	bd70      	pop	{r4, r5, r6, pc}
   22ffa:	bf00      	nop
   22ffc:	000ffc08 	.word	0x000ffc08

00023000 <lfs_file_rawopencfg>:
        const struct lfs_file_config *cfg) {
   23000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   23004:	f013 0f02 	tst.w	r3, #2
        const struct lfs_file_config *cfg) {
   23008:	b08a      	sub	sp, #40	; 0x28
   2300a:	4606      	mov	r6, r0
   2300c:	460d      	mov	r5, r1
   2300e:	4699      	mov	r9, r3
   23010:	9203      	str	r2, [sp, #12]
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   23012:	d136      	bne.n	23082 <lfs_file_rawopencfg+0x82>
    file->pos = 0;
   23014:	f04f 0800 	mov.w	r8, #0
    file->cfg = cfg;
   23018:	9b12      	ldr	r3, [sp, #72]	; 0x48
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   2301a:	f105 0708 	add.w	r7, r5, #8
    file->cfg = cfg;
   2301e:	652b      	str	r3, [r5, #80]	; 0x50
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   23020:	4639      	mov	r1, r7
   23022:	4630      	mov	r0, r6
    file->flags = flags;
   23024:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
    file->pos = 0;
   23028:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
    file->off = 0;
   2302c:	f8c5 803c 	str.w	r8, [r5, #60]	; 0x3c
    file->cache.buffer = NULL;
   23030:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   23034:	1d2b      	adds	r3, r5, #4
   23036:	aa03      	add	r2, sp, #12
   23038:	f7fe fb58 	bl	216ec <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
   2303c:	1e04      	subs	r4, r0, #0
   2303e:	da29      	bge.n	23094 <lfs_file_rawopencfg+0x94>
   23040:	1ca3      	adds	r3, r4, #2
   23042:	d115      	bne.n	23070 <lfs_file_rawopencfg+0x70>
   23044:	f240 33ff 	movw	r3, #1023	; 0x3ff
   23048:	88aa      	ldrh	r2, [r5, #4]
   2304a:	429a      	cmp	r2, r3
   2304c:	d010      	beq.n	23070 <lfs_file_rawopencfg+0x70>
    file->type = LFS_TYPE_REG;
   2304e:	2301      	movs	r3, #1
   23050:	71ab      	strb	r3, [r5, #6]
    mlist->next = lfs->mlist;
   23052:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        if (!(flags & LFS_O_CREAT)) {
   23054:	f419 7f80 	tst.w	r9, #256	; 0x100
    mlist->next = lfs->mlist;
   23058:	602b      	str	r3, [r5, #0]
    lfs->mlist = mlist;
   2305a:	62b5      	str	r5, [r6, #40]	; 0x28
        if (!(flags & LFS_O_CREAT)) {
   2305c:	d008      	beq.n	23070 <lfs_file_rawopencfg+0x70>
        lfs_size_t nlen = strlen(path);
   2305e:	9c03      	ldr	r4, [sp, #12]
   23060:	4620      	mov	r0, r4
   23062:	f7e6 f990 	bl	9386 <strlen>
        if (nlen > lfs->name_max) {
   23066:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   23068:	4283      	cmp	r3, r0
   2306a:	d21e      	bcs.n	230aa <lfs_file_rawopencfg+0xaa>
            err = LFS_ERR_NAMETOOLONG;
   2306c:	f06f 0423 	mvn.w	r4, #35	; 0x23
    file->flags |= LFS_F_ERRED;
   23070:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    lfs_file_rawclose(lfs, file);
   23072:	4629      	mov	r1, r5
    file->flags |= LFS_F_ERRED;
   23074:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    lfs_file_rawclose(lfs, file);
   23078:	4630      	mov	r0, r6
    file->flags |= LFS_F_ERRED;
   2307a:	632b      	str	r3, [r5, #48]	; 0x30
    lfs_file_rawclose(lfs, file);
   2307c:	f00c fc0d 	bl	2f89a <lfs_file_rawclose>
    return err;
   23080:	e004      	b.n	2308c <lfs_file_rawopencfg+0x8c>
        int err = lfs_fs_forceconsistency(lfs);
   23082:	f7ff ff6d 	bl	22f60 <lfs_fs_forceconsistency>
        if (err) {
   23086:	4604      	mov	r4, r0
   23088:	2800      	cmp	r0, #0
   2308a:	d0c3      	beq.n	23014 <lfs_file_rawopencfg+0x14>
}
   2308c:	4620      	mov	r0, r4
   2308e:	b00a      	add	sp, #40	; 0x28
   23090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    file->type = LFS_TYPE_REG;
   23094:	2301      	movs	r3, #1
   23096:	71ab      	strb	r3, [r5, #6]
    mlist->next = lfs->mlist;
   23098:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    } else if (flags & LFS_O_EXCL) {
   2309a:	f419 7f00 	tst.w	r9, #512	; 0x200
    mlist->next = lfs->mlist;
   2309e:	602b      	str	r3, [r5, #0]
    lfs->mlist = mlist;
   230a0:	62b5      	str	r5, [r6, #40]	; 0x28
    } else if (flags & LFS_O_EXCL) {
   230a2:	d03b      	beq.n	2311c <lfs_file_rawopencfg+0x11c>
        err = LFS_ERR_EXIST;
   230a4:	f06f 0410 	mvn.w	r4, #16
   230a8:	e7e2      	b.n	23070 <lfs_file_rawopencfg+0x70>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   230aa:	88ab      	ldrh	r3, [r5, #4]
   230ac:	4a5f      	ldr	r2, [pc, #380]	; (2322c <lfs_file_rawopencfg+0x22c>)
   230ae:	f8df 9180 	ldr.w	r9, [pc, #384]	; 23230 <lfs_file_rawopencfg+0x230>
   230b2:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   230b6:	ea42 2283 	orr.w	r2, r2, r3, lsl #10
   230ba:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   230be:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
   230c2:	e9cd 0406 	strd	r0, r4, [sp, #24]
   230c6:	e9cd 2804 	strd	r2, r8, [sp, #16]
   230ca:	e9cd 3808 	strd	r3, r8, [sp, #32]
   230ce:	4639      	mov	r1, r7
   230d0:	2303      	movs	r3, #3
   230d2:	4630      	mov	r0, r6
   230d4:	aa04      	add	r2, sp, #16
   230d6:	f00c fb88 	bl	2f7ea <lfs_dir_commit>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
   230da:	f110 0f1c 	cmn.w	r0, #28
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   230de:	4604      	mov	r4, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
   230e0:	d0c4      	beq.n	2306c <lfs_file_rawopencfg+0x6c>
        if (err) {
   230e2:	2800      	cmp	r0, #0
   230e4:	d1c4      	bne.n	23070 <lfs_file_rawopencfg+0x70>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
   230e6:	464c      	mov	r4, r9
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   230e8:	f04f 0800 	mov.w	r8, #0
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   230ec:	f04f 090c 	mov.w	r9, #12
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   230f0:	f8df a140 	ldr.w	sl, [pc, #320]	; 23234 <lfs_file_rawopencfg+0x234>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   230f4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   230f6:	689a      	ldr	r2, [r3, #8]
   230f8:	4542      	cmp	r2, r8
   230fa:	d830      	bhi.n	2315e <lfs_file_rawopencfg+0x15e>
    if (file->cfg->buffer) {
   230fc:	681b      	ldr	r3, [r3, #0]
   230fe:	2b00      	cmp	r3, #0
   23100:	d05d      	beq.n	231be <lfs_file_rawopencfg+0x1be>
        file->cache.buffer = file->cfg->buffer;
   23102:	64eb      	str	r3, [r5, #76]	; 0x4c
    lfs_cache_zero(lfs, &file->cache);
   23104:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   23106:	f105 0140 	add.w	r1, r5, #64	; 0x40
   2310a:	f00c f886 	bl	2f21a <lfs_cache_zero.isra.0>
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   2310e:	f240 2301 	movw	r3, #513	; 0x201
   23112:	ebb3 5f14 	cmp.w	r3, r4, lsr #20
   23116:	d05c      	beq.n	231d2 <lfs_file_rawopencfg+0x1d2>
    return 0;
   23118:	2400      	movs	r4, #0
   2311a:	e7b7      	b.n	2308c <lfs_file_rawopencfg+0x8c>
    return (tag & 0x7ff00000) >> 20;
   2311c:	0d24      	lsrs	r4, r4, #20
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
   2311e:	2c01      	cmp	r4, #1
   23120:	d17e      	bne.n	23220 <lfs_file_rawopencfg+0x220>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   23122:	88ab      	ldrh	r3, [r5, #4]
    } else if (flags & LFS_O_TRUNC) {
   23124:	f419 6f80 	tst.w	r9, #1024	; 0x400
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   23128:	ea4f 2383 	mov.w	r3, r3, lsl #10
    } else if (flags & LFS_O_TRUNC) {
   2312c:	d008      	beq.n	23140 <lfs_file_rawopencfg+0x140>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   2312e:	f043 5400 	orr.w	r4, r3, #536870912	; 0x20000000
        file->flags |= LFS_F_DIRTY;
   23132:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   23134:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
   23138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2313c:	632b      	str	r3, [r5, #48]	; 0x30
   2313e:	e7d3      	b.n	230e8 <lfs_file_rawopencfg+0xe8>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
   23140:	f105 0228 	add.w	r2, r5, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
   23144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   23148:	9200      	str	r2, [sp, #0]
   2314a:	4639      	mov	r1, r7
   2314c:	4630      	mov	r0, r6
   2314e:	4a3a      	ldr	r2, [pc, #232]	; (23238 <lfs_file_rawopencfg+0x238>)
   23150:	f043 0308 	orr.w	r3, r3, #8
   23154:	f00b ff10 	bl	2ef78 <lfs_dir_get>
        if (tag < 0) {
   23158:	1e04      	subs	r4, r0, #0
   2315a:	dac5      	bge.n	230e8 <lfs_file_rawopencfg+0xe8>
   2315c:	e788      	b.n	23070 <lfs_file_rawopencfg+0x70>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
   2315e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   23160:	07d0      	lsls	r0, r2, #31
   23162:	d406      	bmi.n	23172 <lfs_file_rawopencfg+0x172>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   23164:	6b2b      	ldr	r3, [r5, #48]	; 0x30
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   23166:	6d2a      	ldr	r2, [r5, #80]	; 0x50
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   23168:	0799      	lsls	r1, r3, #30
   2316a:	d41d      	bmi.n	231a8 <lfs_file_rawopencfg+0x1a8>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   2316c:	f108 0801 	add.w	r8, r8, #1
   23170:	e7c0      	b.n	230f4 <lfs_file_rawopencfg+0xf4>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   23172:	fb09 f208 	mul.w	r2, r9, r8
   23176:	6858      	ldr	r0, [r3, #4]
   23178:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   2317c:	1881      	adds	r1, r0, r2
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2317e:	688b      	ldr	r3, [r1, #8]
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   23180:	5c82      	ldrb	r2, [r0, r2]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   23182:	6849      	ldr	r1, [r1, #4]
   23184:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   23188:	f502 7240 	add.w	r2, r2, #768	; 0x300
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2318c:	9100      	str	r1, [sp, #0]
   2318e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   23192:	4639      	mov	r1, r7
   23194:	4652      	mov	r2, sl
   23196:	4630      	mov	r0, r6
   23198:	f00b feee 	bl	2ef78 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
   2319c:	2800      	cmp	r0, #0
   2319e:	dae1      	bge.n	23164 <lfs_file_rawopencfg+0x164>
   231a0:	1c83      	adds	r3, r0, #2
   231a2:	d0df      	beq.n	23164 <lfs_file_rawopencfg+0x164>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   231a4:	4604      	mov	r4, r0
   231a6:	e763      	b.n	23070 <lfs_file_rawopencfg+0x70>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   231a8:	6852      	ldr	r2, [r2, #4]
   231aa:	fb09 2208 	mla	r2, r9, r8, r2
   231ae:	6891      	ldr	r1, [r2, #8]
   231b0:	6f72      	ldr	r2, [r6, #116]	; 0x74
   231b2:	4291      	cmp	r1, r2
   231b4:	d837      	bhi.n	23226 <lfs_file_rawopencfg+0x226>
            file->flags |= LFS_F_DIRTY;
   231b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   231ba:	632b      	str	r3, [r5, #48]	; 0x30
   231bc:	e7d6      	b.n	2316c <lfs_file_rawopencfg+0x16c>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
   231be:	6eb3      	ldr	r3, [r6, #104]	; 0x68
	return malloc(size);
   231c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
   231c2:	f005 fa77 	bl	286b4 <malloc>
   231c6:	64e8      	str	r0, [r5, #76]	; 0x4c
        if (!file->cache.buffer) {
   231c8:	2800      	cmp	r0, #0
   231ca:	d19b      	bne.n	23104 <lfs_file_rawopencfg+0x104>
            err = LFS_ERR_NOMEM;
   231cc:	f06f 040b 	mvn.w	r4, #11
   231d0:	e74e      	b.n	23070 <lfs_file_rawopencfg+0x70>
        file->flags |= LFS_F_INLINE;
   231d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        file->ctz.head = LFS_BLOCK_INLINE;
   231d4:	f06f 0201 	mvn.w	r2, #1
        file->flags |= LFS_F_INLINE;
   231d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   231dc:	632b      	str	r3, [r5, #48]	; 0x30
        file->cache.off = 0;
   231de:	2300      	movs	r3, #0
   231e0:	f3c4 0409 	ubfx	r4, r4, #0, #10
        file->ctz.head = LFS_BLOCK_INLINE;
   231e4:	62aa      	str	r2, [r5, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
   231e6:	62ec      	str	r4, [r5, #44]	; 0x2c
        file->cache.block = file->ctz.head;
   231e8:	642a      	str	r2, [r5, #64]	; 0x40
        file->cache.off = 0;
   231ea:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
   231ec:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   231ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   231f0:	64aa      	str	r2, [r5, #72]	; 0x48
        if (file->ctz.size > 0) {
   231f2:	2c00      	cmp	r4, #0
   231f4:	d090      	beq.n	23118 <lfs_file_rawopencfg+0x118>
	return (a < b) ? a : b;
   231f6:	f240 33fe 	movw	r3, #1022	; 0x3fe
   231fa:	4293      	cmp	r3, r2
   231fc:	bf28      	it	cs
   231fe:	4613      	movcs	r3, r2
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   23200:	88a9      	ldrh	r1, [r5, #4]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   23202:	6cea      	ldr	r2, [r5, #76]	; 0x4c
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   23204:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   23208:	9200      	str	r2, [sp, #0]
   2320a:	4639      	mov	r1, r7
   2320c:	4630      	mov	r0, r6
   2320e:	4a0a      	ldr	r2, [pc, #40]	; (23238 <lfs_file_rawopencfg+0x238>)
   23210:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   23214:	f00b feb0 	bl	2ef78 <lfs_dir_get>
            if (res < 0) {
   23218:	1e04      	subs	r4, r0, #0
   2321a:	f6bf af7d 	bge.w	23118 <lfs_file_rawopencfg+0x118>
   2321e:	e727      	b.n	23070 <lfs_file_rawopencfg+0x70>
        err = LFS_ERR_ISDIR;
   23220:	f06f 0414 	mvn.w	r4, #20
   23224:	e724      	b.n	23070 <lfs_file_rawopencfg+0x70>
                err = LFS_ERR_NOSPC;
   23226:	f06f 041b 	mvn.w	r4, #27
   2322a:	e721      	b.n	23070 <lfs_file_rawopencfg+0x70>
   2322c:	40100000 	.word	0x40100000
   23230:	20100000 	.word	0x20100000
   23234:	7ffffc00 	.word	0x7ffffc00
   23238:	700ffc00 	.word	0x700ffc00

0002323c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
   2323c:	b530      	push	{r4, r5, lr}
   2323e:	b097      	sub	sp, #92	; 0x5c
   23240:	4605      	mov	r5, r0
        err = lfs_init(lfs, cfg);
   23242:	f7fe fc41 	bl	21ac8 <lfs_init>
        if (err) {
   23246:	4604      	mov	r4, r0
   23248:	2800      	cmp	r0, #0
   2324a:	d14f      	bne.n	232ec <lfs_format+0xb0>
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
   2324c:	6eab      	ldr	r3, [r5, #104]	; 0x68
__ssp_bos_icheck3(memset, void *, int)
   2324e:	4601      	mov	r1, r0
   23250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23252:	6e68      	ldr	r0, [r5, #100]	; 0x64
   23254:	f00d f9c5 	bl	305e2 <memset>
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   23258:	6eab      	ldr	r3, [r5, #104]	; 0x68
        lfs->free.off = 0;
   2325a:	656c      	str	r4, [r5, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   2325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2325e:	6a19      	ldr	r1, [r3, #32]
   23260:	00d2      	lsls	r2, r2, #3
   23262:	428a      	cmp	r2, r1
   23264:	bf94      	ite	ls
   23266:	65aa      	strls	r2, [r5, #88]	; 0x58
   23268:	65a9      	strhi	r1, [r5, #88]	; 0x58
        lfs->free.i = 0;
   2326a:	65ec      	str	r4, [r5, #92]	; 0x5c
    lfs->free.ack = lfs->cfg->block_count;
   2326c:	6a1b      	ldr	r3, [r3, #32]
        err = lfs_dir_alloc(lfs, &root);
   2326e:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   23270:	662b      	str	r3, [r5, #96]	; 0x60
        err = lfs_dir_alloc(lfs, &root);
   23272:	a90e      	add	r1, sp, #56	; 0x38
   23274:	f00c f856 	bl	2f324 <lfs_dir_alloc>
        if (err) {
   23278:	4604      	mov	r4, r0
   2327a:	2800      	cmp	r0, #0
   2327c:	d133      	bne.n	232e6 <lfs_format+0xaa>
        lfs_superblock_t superblock = {
   2327e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   23282:	9302      	str	r3, [sp, #8]
            .block_size  = lfs->cfg->block_size,
   23284:	6eab      	ldr	r3, [r5, #104]	; 0x68
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   23286:	a90e      	add	r1, sp, #56	; 0x38
        lfs_superblock_t superblock = {
   23288:	69da      	ldr	r2, [r3, #28]
   2328a:	6a1b      	ldr	r3, [r3, #32]
   2328c:	9203      	str	r2, [sp, #12]
   2328e:	9304      	str	r3, [sp, #16]
   23290:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   23292:	aa08      	add	r2, sp, #32
        lfs_superblock_t superblock = {
   23294:	9305      	str	r3, [sp, #20]
   23296:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   23298:	9306      	str	r3, [sp, #24]
   2329a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   2329c:	9307      	str	r3, [sp, #28]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   2329e:	4b15      	ldr	r3, [pc, #84]	; (232f4 <lfs_format+0xb8>)
   232a0:	e9cd 3008 	strd	r3, r0, [sp, #32]
   232a4:	4b14      	ldr	r3, [pc, #80]	; (232f8 <lfs_format+0xbc>)
   232a6:	4628      	mov	r0, r5
   232a8:	930a      	str	r3, [sp, #40]	; 0x28
   232aa:	4b14      	ldr	r3, [pc, #80]	; (232fc <lfs_format+0xc0>)
   232ac:	930b      	str	r3, [sp, #44]	; 0x2c
   232ae:	4b14      	ldr	r3, [pc, #80]	; (23300 <lfs_format+0xc4>)
   232b0:	930c      	str	r3, [sp, #48]	; 0x30
   232b2:	ab02      	add	r3, sp, #8
   232b4:	930d      	str	r3, [sp, #52]	; 0x34
   232b6:	2303      	movs	r3, #3
   232b8:	f00c fa97 	bl	2f7ea <lfs_dir_commit>
        if (err) {
   232bc:	4604      	mov	r4, r0
   232be:	b990      	cbnz	r0, 232e6 <lfs_format+0xaa>
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   232c0:	4603      	mov	r3, r0
   232c2:	4602      	mov	r2, r0
        root.erased = false;
   232c4:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   232c8:	a90e      	add	r1, sp, #56	; 0x38
   232ca:	4628      	mov	r0, r5
   232cc:	f00c fa8d 	bl	2f7ea <lfs_dir_commit>
        if (err) {
   232d0:	4604      	mov	r4, r0
   232d2:	b940      	cbnz	r0, 232e6 <lfs_format+0xaa>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
   232d4:	2301      	movs	r3, #1
   232d6:	9000      	str	r0, [sp, #0]
   232d8:	466a      	mov	r2, sp
   232da:	4628      	mov	r0, r5
   232dc:	a90e      	add	r1, sp, #56	; 0x38
   232de:	9301      	str	r3, [sp, #4]
   232e0:	f00b fec6 	bl	2f070 <lfs_dir_fetch>
   232e4:	4604      	mov	r4, r0
    lfs_deinit(lfs);
   232e6:	4628      	mov	r0, r5
   232e8:	f00b fe30 	bl	2ef4c <lfs_deinit>
    err = lfs_rawformat(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
   232ec:	4620      	mov	r0, r4
   232ee:	b017      	add	sp, #92	; 0x5c
   232f0:	bd30      	pop	{r4, r5, pc}
   232f2:	bf00      	nop
   232f4:	40100000 	.word	0x40100000
   232f8:	0ff00008 	.word	0x0ff00008
   232fc:	0003687c 	.word	0x0003687c
   23300:	20100018 	.word	0x20100018

00023304 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
   23304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23308:	b096      	sub	sp, #88	; 0x58
   2330a:	af04      	add	r7, sp, #16
   2330c:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
   2330e:	f7fe fbdb 	bl	21ac8 <lfs_init>
    if (err) {
   23312:	4605      	mov	r5, r0
   23314:	bb90      	cbnz	r0, 2337c <lfs_mount+0x78>
    lfs_mdir_t dir = {.tail = {0, 1}};
   23316:	4601      	mov	r1, r0
   23318:	221c      	movs	r2, #28
   2331a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   2331e:	f00d f960 	bl	305e2 <memset>
   23322:	2301      	movs	r3, #1
    lfs_block_t cycle = 0;
   23324:	462e      	mov	r6, r5
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   23326:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 23500 <lfs_mount+0x1fc>
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   2332a:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 23504 <lfs_mount+0x200>
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   2332e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 23508 <lfs_mount+0x204>
    lfs_mdir_t dir = {.tail = {0, 1}};
   23332:	647b      	str	r3, [r7, #68]	; 0x44
    while (!lfs_pair_isnull(dir.tail)) {
   23334:	f107 0040 	add.w	r0, r7, #64	; 0x40
   23338:	f00b fd96 	bl	2ee68 <lfs_pair_isnull>
   2333c:	b318      	cbz	r0, 23386 <lfs_mount+0x82>
    if (lfs_pair_isnull(lfs->root)) {
   2333e:	f104 0020 	add.w	r0, r4, #32
   23342:	f00b fd91 	bl	2ee68 <lfs_pair_isnull>
   23346:	4603      	mov	r3, r0
   23348:	2800      	cmp	r0, #0
   2334a:	f040 80d5 	bne.w	234f8 <lfs_mount+0x1f4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
   2334e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
   23350:	f104 063c 	add.w	r6, r4, #60	; 0x3c
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
   23354:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   23358:	6322      	str	r2, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
   2335a:	f104 0230 	add.w	r2, r4, #48	; 0x30
   2335e:	ca07      	ldmia	r2, {r0, r1, r2}
   23360:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
   23364:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   23366:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   23368:	6a08      	ldr	r0, [r1, #32]
    lfs->free.i = 0;
   2336a:	65e3      	str	r3, [r4, #92]	; 0x5c
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
   2336c:	fbb2 f6f0 	udiv	r6, r2, r0
   23370:	fb00 2216 	mls	r2, r0, r6, r2
    lfs->free.size = 0;
   23374:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    lfs->free.ack = lfs->cfg->block_count;
   23378:	6a0b      	ldr	r3, [r1, #32]
   2337a:	6623      	str	r3, [r4, #96]	; 0x60
    err = lfs_rawmount(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
   2337c:	4628      	mov	r0, r5
   2337e:	3748      	adds	r7, #72	; 0x48
   23380:	46bd      	mov	sp, r7
   23382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (cycle >= lfs->cfg->block_count/2) {
   23386:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   23388:	6a1b      	ldr	r3, [r3, #32]
   2338a:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
   2338e:	f080 80b0 	bcs.w	234f2 <lfs_mount+0x1ee>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   23392:	2308      	movs	r3, #8
   23394:	60fb      	str	r3, [r7, #12]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   23396:	1d3b      	adds	r3, r7, #4
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   23398:	e9c7 4801 	strd	r4, r8, [r7, #4]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   2339c:	e9cd 9302 	strd	r9, r3, [sp, #8]
   233a0:	4b5a      	ldr	r3, [pc, #360]	; (2350c <lfs_mount+0x208>)
   233a2:	9001      	str	r0, [sp, #4]
   233a4:	9300      	str	r3, [sp, #0]
   233a6:	4620      	mov	r0, r4
   233a8:	4b59      	ldr	r3, [pc, #356]	; (23510 <lfs_mount+0x20c>)
   233aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
   233ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
   233b2:	f7fd ff23 	bl	211fc <lfs_dir_fetchmatch>
        if (tag < 0) {
   233b6:	2800      	cmp	r0, #0
        cycle += 1;
   233b8:	f106 0601 	add.w	r6, r6, #1
        if (tag < 0) {
   233bc:	db49      	blt.n	23452 <lfs_mount+0x14e>
        if (tag && !lfs_tag_isdelete(tag)) {
   233be:	f000 808d 	beq.w	234dc <lfs_mount+0x1d8>
    return ((int32_t)(tag << 22) >> 22) == -1;
   233c2:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
   233c6:	3001      	adds	r0, #1
   233c8:	f000 8088 	beq.w	234dc <lfs_mount+0x1d8>
            lfs->root[0] = dir.pair[0];
   233cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   233ce:	4620      	mov	r0, r4
            lfs->root[0] = dir.pair[0];
   233d0:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
   233d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   233d4:	4a4e      	ldr	r2, [pc, #312]	; (23510 <lfs_mount+0x20c>)
            lfs->root[1] = dir.pair[1];
   233d6:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   233d8:	f107 0310 	add.w	r3, r7, #16
   233dc:	9300      	str	r3, [sp, #0]
   233de:	f107 0128 	add.w	r1, r7, #40	; 0x28
   233e2:	4653      	mov	r3, sl
   233e4:	f00b fdc8 	bl	2ef78 <lfs_dir_get>
            if (tag < 0) {
   233e8:	2800      	cmp	r0, #0
   233ea:	db32      	blt.n	23452 <lfs_mount+0x14e>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
   233ec:	693b      	ldr	r3, [r7, #16]
   233ee:	0c19      	lsrs	r1, r3, #16
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
   233f0:	2902      	cmp	r1, #2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
   233f2:	b29a      	uxth	r2, r3
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
   233f4:	d100      	bne.n	233f8 <lfs_mount+0xf4>
   233f6:	b16a      	cbz	r2, 23414 <lfs_mount+0x110>
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
   233f8:	466d      	mov	r5, sp
   233fa:	b08c      	sub	sp, #48	; 0x30
   233fc:	aa04      	add	r2, sp, #16
   233fe:	4845      	ldr	r0, [pc, #276]	; (23514 <lfs_mount+0x210>)
   23400:	b29b      	uxth	r3, r3
   23402:	6150      	str	r0, [r2, #20]
   23404:	4844      	ldr	r0, [pc, #272]	; (23518 <lfs_mount+0x214>)
   23406:	6190      	str	r0, [r2, #24]
   23408:	f241 003b 	movw	r0, #4155	; 0x103b
   2340c:	e9c2 0107 	strd	r0, r1, [r2, #28]
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
   23410:	6253      	str	r3, [r2, #36]	; 0x24
   23412:	e010      	b.n	23436 <lfs_mount+0x132>
            if (superblock.name_max) {
   23414:	69fb      	ldr	r3, [r7, #28]
   23416:	b313      	cbz	r3, 2345e <lfs_mount+0x15a>
                if (superblock.name_max > lfs->name_max) {
   23418:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   2341a:	428b      	cmp	r3, r1
   2341c:	d91e      	bls.n	2345c <lfs_mount+0x158>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
   2341e:	466d      	mov	r5, sp
   23420:	b08c      	sub	sp, #48	; 0x30
   23422:	aa04      	add	r2, sp, #16
   23424:	483d      	ldr	r0, [pc, #244]	; (2351c <lfs_mount+0x218>)
   23426:	6150      	str	r0, [r2, #20]
   23428:	483b      	ldr	r0, [pc, #236]	; (23518 <lfs_mount+0x214>)
   2342a:	6190      	str	r0, [r2, #24]
   2342c:	f241 0044 	movw	r0, #4164	; 0x1044
   23430:	e9c2 0307 	strd	r0, r3, [r2, #28]
   23434:	6251      	str	r1, [r2, #36]	; 0x24
   23436:	f44f 7300 	mov.w	r3, #512	; 0x200
   2343a:	8513      	strh	r3, [r2, #40]	; 0x28
   2343c:	4b38      	ldr	r3, [pc, #224]	; (23520 <lfs_mount+0x21c>)
   2343e:	4839      	ldr	r0, [pc, #228]	; (23524 <lfs_mount+0x220>)
   23440:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   23444:	f842 3f10 	str.w	r3, [r2, #16]!
   23448:	f00b fe0f 	bl	2f06a <z_log_msg_static_create.constprop.0>
                err = LFS_ERR_INVAL;
   2344c:	f06f 0015 	mvn.w	r0, #21
   23450:	46ad      	mov	sp, r5
            goto cleanup;
   23452:	4605      	mov	r5, r0
    lfs_rawunmount(lfs);
   23454:	4620      	mov	r0, r4
   23456:	f00c fa39 	bl	2f8cc <lfs_unmount>
    return err;
   2345a:	e78f      	b.n	2337c <lfs_mount+0x78>
                lfs->name_max = superblock.name_max;
   2345c:	66e3      	str	r3, [r4, #108]	; 0x6c
            if (superblock.file_max) {
   2345e:	6a3b      	ldr	r3, [r7, #32]
   23460:	b16b      	cbz	r3, 2347e <lfs_mount+0x17a>
                if (superblock.file_max > lfs->file_max) {
   23462:	6f21      	ldr	r1, [r4, #112]	; 0x70
   23464:	428b      	cmp	r3, r1
   23466:	d909      	bls.n	2347c <lfs_mount+0x178>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
   23468:	466d      	mov	r5, sp
   2346a:	b08c      	sub	sp, #48	; 0x30
   2346c:	aa04      	add	r2, sp, #16
   2346e:	482e      	ldr	r0, [pc, #184]	; (23528 <lfs_mount+0x224>)
   23470:	6150      	str	r0, [r2, #20]
   23472:	4829      	ldr	r0, [pc, #164]	; (23518 <lfs_mount+0x214>)
   23474:	6190      	str	r0, [r2, #24]
   23476:	f241 004f 	movw	r0, #4175	; 0x104f
   2347a:	e7d9      	b.n	23430 <lfs_mount+0x12c>
                lfs->file_max = superblock.file_max;
   2347c:	6723      	str	r3, [r4, #112]	; 0x70
            if (superblock.attr_max) {
   2347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23480:	b16b      	cbz	r3, 2349e <lfs_mount+0x19a>
                if (superblock.attr_max > lfs->attr_max) {
   23482:	6f61      	ldr	r1, [r4, #116]	; 0x74
   23484:	428b      	cmp	r3, r1
   23486:	d909      	bls.n	2349c <lfs_mount+0x198>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
   23488:	466d      	mov	r5, sp
   2348a:	b08c      	sub	sp, #48	; 0x30
   2348c:	aa04      	add	r2, sp, #16
   2348e:	4827      	ldr	r0, [pc, #156]	; (2352c <lfs_mount+0x228>)
   23490:	6150      	str	r0, [r2, #20]
   23492:	4821      	ldr	r0, [pc, #132]	; (23518 <lfs_mount+0x214>)
   23494:	6190      	str	r0, [r2, #24]
   23496:	f241 005a 	movw	r0, #4186	; 0x105a
   2349a:	e7c9      	b.n	23430 <lfs_mount+0x12c>
                lfs->attr_max = superblock.attr_max;
   2349c:	6763      	str	r3, [r4, #116]	; 0x74
            if (superblock.block_count != lfs->cfg->block_count) {
   2349e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   234a0:	69bb      	ldr	r3, [r7, #24]
   234a2:	6a11      	ldr	r1, [r2, #32]
   234a4:	428b      	cmp	r3, r1
   234a6:	d009      	beq.n	234bc <lfs_mount+0x1b8>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
   234a8:	466d      	mov	r5, sp
   234aa:	b08c      	sub	sp, #48	; 0x30
   234ac:	aa04      	add	r2, sp, #16
   234ae:	4820      	ldr	r0, [pc, #128]	; (23530 <lfs_mount+0x22c>)
   234b0:	6150      	str	r0, [r2, #20]
   234b2:	4819      	ldr	r0, [pc, #100]	; (23518 <lfs_mount+0x214>)
   234b4:	6190      	str	r0, [r2, #24]
   234b6:	f241 0064 	movw	r0, #4196	; 0x1064
   234ba:	e7b9      	b.n	23430 <lfs_mount+0x12c>
            if (superblock.block_size != lfs->cfg->block_size) {
   234bc:	69d2      	ldr	r2, [r2, #28]
   234be:	6979      	ldr	r1, [r7, #20]
   234c0:	4291      	cmp	r1, r2
   234c2:	d00b      	beq.n	234dc <lfs_mount+0x1d8>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
   234c4:	466d      	mov	r5, sp
   234c6:	b08c      	sub	sp, #48	; 0x30
   234c8:	aa04      	add	r2, sp, #16
   234ca:	491a      	ldr	r1, [pc, #104]	; (23534 <lfs_mount+0x230>)
   234cc:	6151      	str	r1, [r2, #20]
   234ce:	4912      	ldr	r1, [pc, #72]	; (23518 <lfs_mount+0x214>)
   234d0:	6191      	str	r1, [r2, #24]
   234d2:	f241 016b 	movw	r1, #4203	; 0x106b
   234d6:	e9c2 1307 	strd	r1, r3, [r2, #28]
   234da:	e799      	b.n	23410 <lfs_mount+0x10c>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
   234dc:	4620      	mov	r0, r4
   234de:	f104 0230 	add.w	r2, r4, #48	; 0x30
   234e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   234e6:	f7fd fc6b 	bl	20dc0 <lfs_dir_getgstate>
        if (err) {
   234ea:	2800      	cmp	r0, #0
   234ec:	f43f af22 	beq.w	23334 <lfs_mount+0x30>
   234f0:	e7af      	b.n	23452 <lfs_mount+0x14e>
            err = LFS_ERR_CORRUPT;
   234f2:	f06f 0053 	mvn.w	r0, #83	; 0x53
   234f6:	e7ac      	b.n	23452 <lfs_mount+0x14e>
        err = LFS_ERR_INVAL;
   234f8:	f06f 0515 	mvn.w	r5, #21
   234fc:	e7aa      	b.n	23454 <lfs_mount+0x150>
   234fe:	bf00      	nop
   23500:	0003687c 	.word	0x0003687c
   23504:	0002f031 	.word	0x0002f031
   23508:	20100018 	.word	0x20100018
   2350c:	0ff00008 	.word	0x0ff00008
   23510:	7ffffc00 	.word	0x7ffffc00
   23514:	00037f13 	.word	0x00037f13
   23518:	00037a7e 	.word	0x00037a7e
   2351c:	00037f33 	.word	0x00037f33
   23520:	01000006 	.word	0x01000006
   23524:	0003156c 	.word	0x0003156c
   23528:	00037f59 	.word	0x00037f59
   2352c:	00037f7f 	.word	0x00037f7f
   23530:	00037fa5 	.word	0x00037fa5
   23534:	00037fcb 	.word	0x00037fcb

00023538 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
   23538:	b5f0      	push	{r4, r5, r6, r7, lr}
   2353a:	b099      	sub	sp, #100	; 0x64
   2353c:	4604      	mov	r4, r0
   2353e:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
   23540:	f7ff fd0e 	bl	22f60 <lfs_fs_forceconsistency>
    if (err) {
   23544:	2800      	cmp	r0, #0
   23546:	d15d      	bne.n	23604 <lfs_remove+0xcc>
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   23548:	4603      	mov	r3, r0
   2354a:	aa03      	add	r2, sp, #12
   2354c:	4620      	mov	r0, r4
   2354e:	a906      	add	r1, sp, #24
   23550:	f7fe f8cc 	bl	216ec <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   23554:	2800      	cmp	r0, #0
   23556:	db55      	blt.n	23604 <lfs_remove+0xcc>
   23558:	f240 32ff 	movw	r2, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   2355c:	f3c0 2389 	ubfx	r3, r0, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   23560:	4293      	cmp	r3, r2
   23562:	d051      	beq.n	23608 <lfs_remove+0xd0>
    dir.next = lfs->mlist;
   23564:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return (tag & 0x7ff00000) >> 20;
   23566:	0d05      	lsrs	r5, r0, #20
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   23568:	2d02      	cmp	r5, #2
    dir.next = lfs->mlist;
   2356a:	920e      	str	r2, [sp, #56]	; 0x38
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
   2356c:	ea4f 2783 	mov.w	r7, r3, lsl #10
   23570:	ae04      	add	r6, sp, #16
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   23572:	d121      	bne.n	235b8 <lfs_remove+0x80>
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
   23574:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
   23578:	4620      	mov	r0, r4
   2357a:	4a25      	ldr	r2, [pc, #148]	; (23610 <lfs_remove+0xd8>)
   2357c:	9600      	str	r6, [sp, #0]
   2357e:	f043 0308 	orr.w	r3, r3, #8
   23582:	a906      	add	r1, sp, #24
   23584:	f00b fcf8 	bl	2ef78 <lfs_dir_get>
        if (res < 0) {
   23588:	2800      	cmp	r0, #0
   2358a:	db3b      	blt.n	23604 <lfs_remove+0xcc>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
   2358c:	4632      	mov	r2, r6
   2358e:	4620      	mov	r0, r4
   23590:	a910      	add	r1, sp, #64	; 0x40
   23592:	f00b fd6d 	bl	2f070 <lfs_dir_fetch>
        if (err) {
   23596:	2800      	cmp	r0, #0
   23598:	d134      	bne.n	23604 <lfs_remove+0xcc>
        if (dir.m.count > 0 || dir.m.split) {
   2359a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2359c:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
   235a0:	d12e      	bne.n	23600 <lfs_remove+0xc8>
        err = lfs_fs_preporphans(lfs, +1);
   235a2:	2101      	movs	r1, #1
   235a4:	4620      	mov	r0, r4
   235a6:	f7fd fa7b 	bl	20aa0 <lfs_fs_preporphans>
        if (err) {
   235aa:	bb58      	cbnz	r0, 23604 <lfs_remove+0xcc>
        lfs->mlist = &dir;
   235ac:	ab0e      	add	r3, sp, #56	; 0x38
        dir.type = 0;
   235ae:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
        dir.id = 0;
   235b2:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
        lfs->mlist = &dir;
   235b6:	62a3      	str	r3, [r4, #40]	; 0x28
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
   235b8:	2300      	movs	r3, #0
   235ba:	f047 479f 	orr.w	r7, r7, #1333788672	; 0x4f800000
   235be:	9305      	str	r3, [sp, #20]
   235c0:	4632      	mov	r2, r6
   235c2:	2301      	movs	r3, #1
   235c4:	4620      	mov	r0, r4
   235c6:	f447 07e0 	orr.w	r7, r7, #7340032	; 0x700000
   235ca:	a906      	add	r1, sp, #24
   235cc:	9704      	str	r7, [sp, #16]
   235ce:	f00c f90c 	bl	2f7ea <lfs_dir_commit>
    if (err) {
   235d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        lfs->mlist = dir.next;
   235d4:	62a3      	str	r3, [r4, #40]	; 0x28
    if (err) {
   235d6:	b9a8      	cbnz	r0, 23604 <lfs_remove+0xcc>
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   235d8:	2d02      	cmp	r5, #2
   235da:	d113      	bne.n	23604 <lfs_remove+0xcc>
        err = lfs_fs_preporphans(lfs, -1);
   235dc:	f04f 31ff 	mov.w	r1, #4294967295
   235e0:	4620      	mov	r0, r4
   235e2:	f7fd fa5d 	bl	20aa0 <lfs_fs_preporphans>
        if (err) {
   235e6:	b968      	cbnz	r0, 23604 <lfs_remove+0xcc>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
   235e8:	4620      	mov	r0, r4
   235ea:	aa06      	add	r2, sp, #24
   235ec:	a910      	add	r1, sp, #64	; 0x40
   235ee:	f00b fd4c 	bl	2f08a <lfs_fs_pred>
        if (err) {
   235f2:	b938      	cbnz	r0, 23604 <lfs_remove+0xcc>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
   235f4:	4620      	mov	r0, r4
   235f6:	aa10      	add	r2, sp, #64	; 0x40
   235f8:	a906      	add	r1, sp, #24
   235fa:	f7ff fce3 	bl	22fc4 <lfs_dir_drop>
        if (err) {
   235fe:	e001      	b.n	23604 <lfs_remove+0xcc>
            return LFS_ERR_NOTEMPTY;
   23600:	f06f 0026 	mvn.w	r0, #38	; 0x26
    err = lfs_rawremove(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23604:	b019      	add	sp, #100	; 0x64
   23606:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
   23608:	f06f 0015 	mvn.w	r0, #21
    return err;
   2360c:	e7fa      	b.n	23604 <lfs_remove+0xcc>
   2360e:	bf00      	nop
   23610:	700ffc00 	.word	0x700ffc00

00023614 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
   23614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23618:	b0af      	sub	sp, #188	; 0xbc
   2361a:	4605      	mov	r5, r0
   2361c:	e9cd 1206 	strd	r1, r2, [sp, #24]
    int err = lfs_fs_forceconsistency(lfs);
   23620:	f7ff fc9e 	bl	22f60 <lfs_fs_forceconsistency>
    if (err) {
   23624:	4603      	mov	r3, r0
   23626:	2800      	cmp	r0, #0
   23628:	f040 8110 	bne.w	2384c <lfs_rename+0x238>
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
   2362c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   23630:	4649      	mov	r1, r9
   23632:	4628      	mov	r0, r5
   23634:	aa06      	add	r2, sp, #24
   23636:	f7fe f859 	bl	216ec <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   2363a:	1e06      	subs	r6, r0, #0
   2363c:	f2c0 8108 	blt.w	23850 <lfs_rename+0x23c>
    return (tag & 0x000ffc00) >> 10;
   23640:	f240 37ff 	movw	r7, #1023	; 0x3ff
   23644:	f3c6 2889 	ubfx	r8, r6, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   23648:	45b8      	cmp	r8, r7
   2364a:	d105      	bne.n	23658 <lfs_rename+0x44>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
   2364c:	f06f 0415 	mvn.w	r4, #21
    err = lfs_rawrename(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23650:	4620      	mov	r0, r4
   23652:	b02f      	add	sp, #188	; 0xbc
   23654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
   23658:	4628      	mov	r0, r5
   2365a:	f10d 0316 	add.w	r3, sp, #22
   2365e:	aa07      	add	r2, sp, #28
   23660:	a912      	add	r1, sp, #72	; 0x48
   23662:	f7fe f843 	bl	216ec <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   23666:	1e04      	subs	r4, r0, #0
   23668:	db13      	blt.n	23692 <lfs_rename+0x7e>
   2366a:	f3c4 2389 	ubfx	r3, r4, #10, #10
   2366e:	42bb      	cmp	r3, r7
   23670:	d0ec      	beq.n	2364c <lfs_rename+0x38>
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   23672:	4648      	mov	r0, r9
   23674:	a912      	add	r1, sp, #72	; 0x48
   23676:	f00b fc01 	bl	2ee7c <lfs_pair_cmp>
    prevdir.next = lfs->mlist;
   2367a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   2367c:	4607      	mov	r7, r0
    prevdir.next = lfs->mlist;
   2367e:	931a      	str	r3, [sp, #104]	; 0x68
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   23680:	0d33      	lsrs	r3, r6, #20
   23682:	ebb3 5f14 	cmp.w	r3, r4, lsr #20
    return (tag & 0x7ff00000) >> 20;
   23686:	ea4f 5214 	mov.w	r2, r4, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   2368a:	d031      	beq.n	236f0 <lfs_rename+0xdc>
        return LFS_ERR_ISDIR;
   2368c:	f06f 0414 	mvn.w	r4, #20
    return err;
   23690:	e7de      	b.n	23650 <lfs_rename+0x3c>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   23692:	1ca1      	adds	r1, r4, #2
   23694:	d1dc      	bne.n	23650 <lfs_rename+0x3c>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
   23696:	f8bd a016 	ldrh.w	sl, [sp, #22]
   2369a:	45ba      	cmp	sl, r7
   2369c:	d0d8      	beq.n	23650 <lfs_rename+0x3c>
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   2369e:	a912      	add	r1, sp, #72	; 0x48
   236a0:	4648      	mov	r0, r9
   236a2:	f00b fbeb 	bl	2ee7c <lfs_pair_cmp>
    prevdir.next = lfs->mlist;
   236a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   236a8:	4607      	mov	r7, r0
        lfs_size_t nlen = strlen(newpath);
   236aa:	9807      	ldr	r0, [sp, #28]
    prevdir.next = lfs->mlist;
   236ac:	931a      	str	r3, [sp, #104]	; 0x68
        lfs_size_t nlen = strlen(newpath);
   236ae:	f7e5 fe6a 	bl	9386 <strlen>
        if (nlen > lfs->name_max) {
   236b2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   236b4:	4298      	cmp	r0, r3
   236b6:	d902      	bls.n	236be <lfs_rename+0xaa>
            return LFS_ERR_NAMETOOLONG;
   236b8:	f06f 0423 	mvn.w	r4, #35	; 0x23
   236bc:	e7c8      	b.n	23650 <lfs_rename+0x3c>
        if (samepair && newid <= newoldid) {
   236be:	b18f      	cbz	r7, 236e4 <lfs_rename+0xd0>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   236c0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   236c2:	4b64      	ldr	r3, [pc, #400]	; (23854 <lfs_rename+0x240>)
   236c4:	4013      	ands	r3, r2
   236c6:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
   236ca:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   236ce:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   236d2:	632b      	str	r3, [r5, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   236d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   236d6:	1ca2      	adds	r2, r4, #2
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   236d8:	636b      	str	r3, [r5, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   236da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   236dc:	63ab      	str	r3, [r5, #56]	; 0x38
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   236de:	d13b      	bne.n	23758 <lfs_rename+0x144>
   236e0:	4642      	mov	r2, r8
   236e2:	e003      	b.n	236ec <lfs_rename+0xd8>
        if (samepair && newid <= newoldid) {
   236e4:	45d0      	cmp	r8, sl
   236e6:	d3fb      	bcc.n	236e0 <lfs_rename+0xcc>
            newoldid += 1;
   236e8:	f108 0201 	add.w	r2, r8, #1
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   236ec:	2300      	movs	r3, #0
   236ee:	e039      	b.n	23764 <lfs_rename+0x150>
    } else if (samepair && newid == newoldid) {
   236f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   236f4:	b348      	cbz	r0, 2374a <lfs_rename+0x136>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   236f6:	2a02      	cmp	r2, #2
   236f8:	d1e2      	bne.n	236c0 <lfs_rename+0xac>
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
   236fa:	4a57      	ldr	r2, [pc, #348]	; (23858 <lfs_rename+0x244>)
   236fc:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   23700:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   23704:	4628      	mov	r0, r5
   23706:	4a55      	ldr	r2, [pc, #340]	; (2385c <lfs_rename+0x248>)
   23708:	f8cd a000 	str.w	sl, [sp]
   2370c:	a912      	add	r1, sp, #72	; 0x48
   2370e:	f00b fc33 	bl	2ef78 <lfs_dir_get>
        if (res < 0) {
   23712:	2800      	cmp	r0, #0
   23714:	db5e      	blt.n	237d4 <lfs_rename+0x1c0>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
   23716:	4652      	mov	r2, sl
   23718:	4628      	mov	r0, r5
   2371a:	a91c      	add	r1, sp, #112	; 0x70
   2371c:	f00b fca8 	bl	2f070 <lfs_dir_fetch>
        if (err) {
   23720:	2800      	cmp	r0, #0
   23722:	d157      	bne.n	237d4 <lfs_rename+0x1c0>
        if (prevdir.m.count > 0 || prevdir.m.split) {
   23724:	9b21      	ldr	r3, [sp, #132]	; 0x84
   23726:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
   2372a:	d151      	bne.n	237d0 <lfs_rename+0x1bc>
        err = lfs_fs_preporphans(lfs, +1);
   2372c:	2101      	movs	r1, #1
   2372e:	4628      	mov	r0, r5
   23730:	f7fd f9b6 	bl	20aa0 <lfs_fs_preporphans>
        if (err) {
   23734:	2800      	cmp	r0, #0
   23736:	d14d      	bne.n	237d4 <lfs_rename+0x1c0>
        lfs->mlist = &prevdir;
   23738:	ab1a      	add	r3, sp, #104	; 0x68
        prevdir.type = 0;
   2373a:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
        prevdir.id = 0;
   2373e:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
        lfs->mlist = &prevdir;
   23742:	62ab      	str	r3, [r5, #40]	; 0x28
    if (!samepair) {
   23744:	2f00      	cmp	r7, #0
   23746:	d1bb      	bne.n	236c0 <lfs_rename+0xac>
   23748:	e005      	b.n	23756 <lfs_rename+0x142>
    } else if (samepair && newid == newoldid) {
   2374a:	4598      	cmp	r8, r3
   2374c:	d101      	bne.n	23752 <lfs_rename+0x13e>
        return 0;
   2374e:	2400      	movs	r4, #0
   23750:	e77e      	b.n	23650 <lfs_rename+0x3c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   23752:	2a02      	cmp	r2, #2
   23754:	d0d1      	beq.n	236fa <lfs_rename+0xe6>
            return LFS_ERR_NOTEMPTY;
   23756:	2700      	movs	r7, #0
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   23758:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2375c:	4b40      	ldr	r3, [pc, #256]	; (23860 <lfs_rename+0x24c>)
   2375e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   23762:	4642      	mov	r2, r8
   23764:	f04f 0a00 	mov.w	sl, #0
   23768:	9324      	str	r3, [sp, #144]	; 0x90
   2376a:	493e      	ldr	r1, [pc, #248]	; (23864 <lfs_rename+0x250>)
   2376c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   23770:	0d36      	lsrs	r6, r6, #20
   23772:	0536      	lsls	r6, r6, #20
   23774:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
   23778:	ea4f 2b83 	mov.w	fp, r3, lsl #10
   2377c:	ea46 2683 	orr.w	r6, r6, r3, lsl #10
   23780:	9b07      	ldr	r3, [sp, #28]
   23782:	e9cd 1a26 	strd	r1, sl, [sp, #152]	; 0x98
   23786:	4618      	mov	r0, r3
   23788:	9302      	str	r3, [sp, #8]
   2378a:	9203      	str	r2, [sp, #12]
   2378c:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
   23790:	f7e5 fdf9 	bl	9386 <strlen>
   23794:	9b02      	ldr	r3, [sp, #8]
   23796:	4306      	orrs	r6, r0
   23798:	9329      	str	r3, [sp, #164]	; 0xa4
   2379a:	ea4b 0308 	orr.w	r3, fp, r8
   2379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   237a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   237a6:	e9cd 392a 	strd	r3, r9, [sp, #168]	; 0xa8
   237aa:	9628      	str	r6, [sp, #160]	; 0xa0
   237ac:	b9a7      	cbnz	r7, 237d8 <lfs_rename+0x1c4>
   237ae:	4b2c      	ldr	r3, [pc, #176]	; (23860 <lfs_rename+0x24c>)
   237b0:	9a03      	ldr	r2, [sp, #12]
   237b2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   237b6:	932c      	str	r3, [sp, #176]	; 0xb0
   237b8:	2300      	movs	r3, #0
   237ba:	4628      	mov	r0, r5
   237bc:	932d      	str	r3, [sp, #180]	; 0xb4
   237be:	aa24      	add	r2, sp, #144	; 0x90
   237c0:	2305      	movs	r3, #5
   237c2:	a912      	add	r1, sp, #72	; 0x48
   237c4:	f00c f811 	bl	2f7ea <lfs_dir_commit>
    if (err) {
   237c8:	b140      	cbz	r0, 237dc <lfs_rename+0x1c8>
        lfs->mlist = prevdir.next;
   237ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   237cc:	62ab      	str	r3, [r5, #40]	; 0x28
   237ce:	e001      	b.n	237d4 <lfs_rename+0x1c0>
            return LFS_ERR_NOTEMPTY;
   237d0:	f06f 0026 	mvn.w	r0, #38	; 0x26
        return err;
   237d4:	4604      	mov	r4, r0
   237d6:	e73b      	b.n	23650 <lfs_rename+0x3c>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   237d8:	4653      	mov	r3, sl
   237da:	e7ec      	b.n	237b6 <lfs_rename+0x1a2>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   237dc:	b1b7      	cbz	r7, 2380c <lfs_rename+0x1f8>
   237de:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
   237e0:	0d13      	lsrs	r3, r2, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   237e2:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   237e6:	d011      	beq.n	2380c <lfs_rename+0x1f8>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   237e8:	4b1a      	ldr	r3, [pc, #104]	; (23854 <lfs_rename+0x240>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   237ea:	63a8      	str	r0, [r5, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   237ec:	4013      	ands	r3, r2
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   237ee:	e9c5 300c 	strd	r3, r0, [r5, #48]	; 0x30
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
   237f2:	4b1b      	ldr	r3, [pc, #108]	; (23860 <lfs_rename+0x24c>)
   237f4:	4649      	mov	r1, r9
   237f6:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
   237fa:	e9cd 3008 	strd	r3, r0, [sp, #32]
   237fe:	aa08      	add	r2, sp, #32
   23800:	2301      	movs	r3, #1
   23802:	4628      	mov	r0, r5
   23804:	f00b fff1 	bl	2f7ea <lfs_dir_commit>
        if (err) {
   23808:	2800      	cmp	r0, #0
   2380a:	d1de      	bne.n	237ca <lfs_rename+0x1b6>
    lfs->mlist = prevdir.next;
   2380c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2380e:	62ab      	str	r3, [r5, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
   23810:	1ca3      	adds	r3, r4, #2
   23812:	d09c      	beq.n	2374e <lfs_rename+0x13a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   23814:	f3c4 540a 	ubfx	r4, r4, #20, #11
   23818:	2c02      	cmp	r4, #2
   2381a:	d198      	bne.n	2374e <lfs_rename+0x13a>
        err = lfs_fs_preporphans(lfs, -1);
   2381c:	f04f 31ff 	mov.w	r1, #4294967295
   23820:	4628      	mov	r0, r5
   23822:	f7fd f93d 	bl	20aa0 <lfs_fs_preporphans>
        if (err) {
   23826:	4604      	mov	r4, r0
   23828:	2800      	cmp	r0, #0
   2382a:	f47f af11 	bne.w	23650 <lfs_rename+0x3c>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
   2382e:	4628      	mov	r0, r5
   23830:	aa12      	add	r2, sp, #72	; 0x48
   23832:	a91c      	add	r1, sp, #112	; 0x70
   23834:	f00b fc29 	bl	2f08a <lfs_fs_pred>
        if (err) {
   23838:	4604      	mov	r4, r0
   2383a:	2800      	cmp	r0, #0
   2383c:	f47f af08 	bne.w	23650 <lfs_rename+0x3c>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
   23840:	4628      	mov	r0, r5
   23842:	aa1c      	add	r2, sp, #112	; 0x70
   23844:	a912      	add	r1, sp, #72	; 0x48
   23846:	f7ff fbbd 	bl	22fc4 <lfs_dir_drop>
   2384a:	e7c3      	b.n	237d4 <lfs_rename+0x1c0>
   2384c:	4604      	mov	r4, r0
   2384e:	e6ff      	b.n	23650 <lfs_rename+0x3c>
   23850:	4634      	mov	r4, r6
   23852:	e6fd      	b.n	23650 <lfs_rename+0x3c>
   23854:	800003ff 	.word	0x800003ff
   23858:	20000008 	.word	0x20000008
   2385c:	700ffc00 	.word	0x700ffc00
   23860:	4ff00000 	.word	0x4ff00000
   23864:	40100000 	.word	0x40100000

00023868 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
   23868:	b510      	push	{r4, lr}
   2386a:	4604      	mov	r4, r0
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   2386c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2386e:	f00b fb3c 	bl	2eeea <lfs_mlist_isopen>
   23872:	b158      	cbz	r0, 2388c <lfs_file_opencfg+0x24>
   23874:	4908      	ldr	r1, [pc, #32]	; (23898 <lfs_file_opencfg+0x30>)
   23876:	4809      	ldr	r0, [pc, #36]	; (2389c <lfs_file_opencfg+0x34>)
   23878:	f241 5383 	movw	r3, #5507	; 0x1583
   2387c:	4a08      	ldr	r2, [pc, #32]	; (238a0 <lfs_file_opencfg+0x38>)
   2387e:	f006 ff1c 	bl	2a6ba <assert_print>
   23882:	f241 5183 	movw	r1, #5507	; 0x1583
   23886:	4806      	ldr	r0, [pc, #24]	; (238a0 <lfs_file_opencfg+0x38>)
   23888:	f006 ff10 	bl	2a6ac <assert_post_action>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
   2388c:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   2388e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
   23892:	f7ff bbb5 	b.w	23000 <lfs_file_rawopencfg>
   23896:	bf00      	nop
   23898:	00037ff0 	.word	0x00037ff0
   2389c:	00032659 	.word	0x00032659
   238a0:	00037a7e 	.word	0x00037a7e

000238a4 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   238a4:	b508      	push	{r3, lr}
   238a6:	4603      	mov	r3, r0
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   238a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   238aa:	f00b fb1e 	bl	2eeea <lfs_mlist_isopen>
   238ae:	b958      	cbnz	r0, 238c8 <lfs_file_close+0x24>
   238b0:	4908      	ldr	r1, [pc, #32]	; (238d4 <lfs_file_close+0x30>)
   238b2:	4809      	ldr	r0, [pc, #36]	; (238d8 <lfs_file_close+0x34>)
   238b4:	f241 5392 	movw	r3, #5522	; 0x1592
   238b8:	4a08      	ldr	r2, [pc, #32]	; (238dc <lfs_file_close+0x38>)
   238ba:	f006 fefe 	bl	2a6ba <assert_print>
   238be:	f241 5192 	movw	r1, #5522	; 0x1592
   238c2:	4806      	ldr	r0, [pc, #24]	; (238dc <lfs_file_close+0x38>)
   238c4:	f006 fef2 	bl	2a6ac <assert_post_action>

    err = lfs_file_rawclose(lfs, file);
   238c8:	4618      	mov	r0, r3

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   238ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = lfs_file_rawclose(lfs, file);
   238ce:	f00b bfe4 	b.w	2f89a <lfs_file_rawclose>
   238d2:	bf00      	nop
   238d4:	00037ff1 	.word	0x00037ff1
   238d8:	00032659 	.word	0x00032659
   238dc:	00037a7e 	.word	0x00037a7e

000238e0 <lfs_file_sync>:

#ifndef LFS_READONLY
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   238e0:	b508      	push	{r3, lr}
   238e2:	4603      	mov	r3, r0
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_sync(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   238e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   238e6:	f00b fb00 	bl	2eeea <lfs_mlist_isopen>
   238ea:	b958      	cbnz	r0, 23904 <lfs_file_sync+0x24>
   238ec:	4908      	ldr	r1, [pc, #32]	; (23910 <lfs_file_sync+0x30>)
   238ee:	4809      	ldr	r0, [pc, #36]	; (23914 <lfs_file_sync+0x34>)
   238f0:	f241 53a2 	movw	r3, #5538	; 0x15a2
   238f4:	4a08      	ldr	r2, [pc, #32]	; (23918 <lfs_file_sync+0x38>)
   238f6:	f006 fee0 	bl	2a6ba <assert_print>
   238fa:	f241 51a2 	movw	r1, #5538	; 0x15a2
   238fe:	4806      	ldr	r0, [pc, #24]	; (23918 <lfs_file_sync+0x38>)
   23900:	f006 fed4 	bl	2a6ac <assert_post_action>

    err = lfs_file_rawsync(lfs, file);
   23904:	4618      	mov	r0, r3

    LFS_TRACE("lfs_file_sync -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = lfs_file_rawsync(lfs, file);
   2390a:	f00b bf7c 	b.w	2f806 <lfs_file_rawsync>
   2390e:	bf00      	nop
   23910:	00037ff1 	.word	0x00037ff1
   23914:	00032659 	.word	0x00032659
   23918:	00037a7e 	.word	0x00037a7e

0002391c <lfs_file_read>:
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
   2391c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23920:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23922:	6a80      	ldr	r0, [r0, #40]	; 0x28
        void *buffer, lfs_size_t size) {
   23924:	460d      	mov	r5, r1
   23926:	4616      	mov	r6, r2
   23928:	461f      	mov	r7, r3
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   2392a:	f00b fade 	bl	2eeea <lfs_mlist_isopen>
   2392e:	b958      	cbnz	r0, 23948 <lfs_file_read+0x2c>
   23930:	4914      	ldr	r1, [pc, #80]	; (23984 <lfs_file_read+0x68>)
   23932:	f241 53b4 	movw	r3, #5556	; 0x15b4
   23936:	4a14      	ldr	r2, [pc, #80]	; (23988 <lfs_file_read+0x6c>)
   23938:	4814      	ldr	r0, [pc, #80]	; (2398c <lfs_file_read+0x70>)
   2393a:	f006 febe 	bl	2a6ba <assert_print>
   2393e:	f241 51b4 	movw	r1, #5556	; 0x15b4
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
   23942:	4811      	ldr	r0, [pc, #68]	; (23988 <lfs_file_read+0x6c>)
   23944:	f006 feb2 	bl	2a6ac <assert_post_action>
   23948:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2394a:	07da      	lsls	r2, r3, #31
   2394c:	d409      	bmi.n	23962 <lfs_file_read+0x46>
   2394e:	4910      	ldr	r1, [pc, #64]	; (23990 <lfs_file_read+0x74>)
   23950:	f640 43f2 	movw	r3, #3314	; 0xcf2
   23954:	4a0c      	ldr	r2, [pc, #48]	; (23988 <lfs_file_read+0x6c>)
   23956:	480d      	ldr	r0, [pc, #52]	; (2398c <lfs_file_read+0x70>)
   23958:	f006 feaf 	bl	2a6ba <assert_print>
   2395c:	f640 41f2 	movw	r1, #3314	; 0xcf2
   23960:	e7ef      	b.n	23942 <lfs_file_read+0x26>
    if (file->flags & LFS_F_WRITING) {
   23962:	039b      	lsls	r3, r3, #14
   23964:	d407      	bmi.n	23976 <lfs_file_read+0x5a>
    return lfs_file_flushedread(lfs, file, buffer, size);
   23966:	463b      	mov	r3, r7
   23968:	4632      	mov	r2, r6
   2396a:	4629      	mov	r1, r5
   2396c:	4620      	mov	r0, r4
    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   2396e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lfs_file_flushedread(lfs, file, buffer, size);
   23972:	f7fd bf61 	b.w	21838 <lfs_file_flushedread>
        int err = lfs_file_flush(lfs, file);
   23976:	4620      	mov	r0, r4
   23978:	f00b fe49 	bl	2f60e <lfs_file_flush>
        if (err) {
   2397c:	2800      	cmp	r0, #0
   2397e:	d0f2      	beq.n	23966 <lfs_file_read+0x4a>
}
   23980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23984:	00037ff1 	.word	0x00037ff1
   23988:	00037a7e 	.word	0x00037a7e
   2398c:	00032659 	.word	0x00032659
   23990:	00038027 	.word	0x00038027

00023994 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
   23994:	b510      	push	{r4, lr}
   23996:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23998:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2399a:	f00b faa6 	bl	2eeea <lfs_mlist_isopen>
   2399e:	b958      	cbnz	r0, 239b8 <lfs_file_write+0x24>
   239a0:	4908      	ldr	r1, [pc, #32]	; (239c4 <lfs_file_write+0x30>)
   239a2:	4809      	ldr	r0, [pc, #36]	; (239c8 <lfs_file_write+0x34>)
   239a4:	f241 53c6 	movw	r3, #5574	; 0x15c6
   239a8:	4a08      	ldr	r2, [pc, #32]	; (239cc <lfs_file_write+0x38>)
   239aa:	f006 fe86 	bl	2a6ba <assert_print>
   239ae:	f241 51c6 	movw	r1, #5574	; 0x15c6
   239b2:	4806      	ldr	r0, [pc, #24]	; (239cc <lfs_file_write+0x38>)
   239b4:	f006 fe7a 	bl	2a6ac <assert_post_action>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
   239b8:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   239ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
   239be:	f7fe bc7f 	b.w	222c0 <lfs_file_rawwrite>
   239c2:	bf00      	nop
   239c4:	00037ff1 	.word	0x00037ff1
   239c8:	00032659 	.word	0x00032659
   239cc:	00037a7e 	.word	0x00037a7e

000239d0 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
   239d0:	b510      	push	{r4, lr}
   239d2:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   239d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   239d6:	f00b fa88 	bl	2eeea <lfs_mlist_isopen>
   239da:	b958      	cbnz	r0, 239f4 <lfs_file_seek+0x24>
   239dc:	4908      	ldr	r1, [pc, #32]	; (23a00 <lfs_file_seek+0x30>)
   239de:	4809      	ldr	r0, [pc, #36]	; (23a04 <lfs_file_seek+0x34>)
   239e0:	f241 53d8 	movw	r3, #5592	; 0x15d8
   239e4:	4a08      	ldr	r2, [pc, #32]	; (23a08 <lfs_file_seek+0x38>)
   239e6:	f006 fe68 	bl	2a6ba <assert_print>
   239ea:	f241 51d8 	movw	r1, #5592	; 0x15d8
   239ee:	4806      	ldr	r0, [pc, #24]	; (23a08 <lfs_file_seek+0x38>)
   239f0:	f006 fe5c 	bl	2a6ac <assert_post_action>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
   239f4:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   239f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
   239fa:	f00b bead 	b.w	2f758 <lfs_file_rawseek>
   239fe:	bf00      	nop
   23a00:	00037ff1 	.word	0x00037ff1
   23a04:	00032659 	.word	0x00032659
   23a08:	00037a7e 	.word	0x00037a7e

00023a0c <lfs_file_truncate>:

#ifndef LFS_READONLY
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   23a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a10:	4605      	mov	r5, r0
   23a12:	b086      	sub	sp, #24
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_truncate(%p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23a14:	6a80      	ldr	r0, [r0, #40]	; 0x28
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   23a16:	460c      	mov	r4, r1
   23a18:	4616      	mov	r6, r2
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23a1a:	f00b fa66 	bl	2eeea <lfs_mlist_isopen>
   23a1e:	b958      	cbnz	r0, 23a38 <lfs_file_truncate+0x2c>
   23a20:	4933      	ldr	r1, [pc, #204]	; (23af0 <lfs_file_truncate+0xe4>)
   23a22:	f241 53e9 	movw	r3, #5609	; 0x15e9
   23a26:	4a33      	ldr	r2, [pc, #204]	; (23af4 <lfs_file_truncate+0xe8>)
   23a28:	4833      	ldr	r0, [pc, #204]	; (23af8 <lfs_file_truncate+0xec>)
   23a2a:	f006 fe46 	bl	2a6ba <assert_print>
   23a2e:	f241 51e9 	movw	r1, #5609	; 0x15e9
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   23a32:	4830      	ldr	r0, [pc, #192]	; (23af4 <lfs_file_truncate+0xe8>)
   23a34:	f006 fe3a 	bl	2a6ac <assert_post_action>
   23a38:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   23a3a:	0791      	lsls	r1, r2, #30
   23a3c:	d409      	bmi.n	23a52 <lfs_file_truncate+0x46>
   23a3e:	492f      	ldr	r1, [pc, #188]	; (23afc <lfs_file_truncate+0xf0>)
   23a40:	f640 53c8 	movw	r3, #3528	; 0xdc8
   23a44:	4a2b      	ldr	r2, [pc, #172]	; (23af4 <lfs_file_truncate+0xe8>)
   23a46:	482c      	ldr	r0, [pc, #176]	; (23af8 <lfs_file_truncate+0xec>)
   23a48:	f006 fe37 	bl	2a6ba <assert_print>
   23a4c:	f640 51c8 	movw	r1, #3528	; 0xdc8
   23a50:	e7ef      	b.n	23a32 <lfs_file_truncate+0x26>
    if (size > LFS_FILE_MAX) {
   23a52:	2e00      	cmp	r6, #0
   23a54:	db49      	blt.n	23aea <lfs_file_truncate+0xde>
    if (file->flags & LFS_F_WRITING) {
   23a56:	0392      	lsls	r2, r2, #14
    lfs_off_t pos = file->pos;
   23a58:	6b67      	ldr	r7, [r4, #52]	; 0x34
        return lfs_max(file->pos, file->ctz.size);
   23a5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (file->flags & LFS_F_WRITING) {
   23a5c:	d502      	bpl.n	23a64 <lfs_file_truncate+0x58>
	return (a > b) ? a : b;
   23a5e:	42bb      	cmp	r3, r7
   23a60:	bf38      	it	cc
   23a62:	463b      	movcc	r3, r7
    if (size < oldsize) {
   23a64:	429e      	cmp	r6, r3
   23a66:	d224      	bcs.n	23ab2 <lfs_file_truncate+0xa6>
        int err = lfs_file_flush(lfs, file);
   23a68:	4621      	mov	r1, r4
   23a6a:	4628      	mov	r0, r5
   23a6c:	f00b fdcf 	bl	2f60e <lfs_file_flush>
        if (err) {
   23a70:	bbc0      	cbnz	r0, 23ae4 <lfs_file_truncate+0xd8>
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   23a72:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   23a76:	9302      	str	r3, [sp, #8]
   23a78:	f104 0338 	add.w	r3, r4, #56	; 0x38
   23a7c:	e9cd 6300 	strd	r6, r3, [sp]
   23a80:	4628      	mov	r0, r5
   23a82:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   23a86:	f104 0140 	add.w	r1, r4, #64	; 0x40
   23a8a:	f00b fb44 	bl	2f116 <lfs_ctz_find.constprop.0>
        if (err) {
   23a8e:	bb48      	cbnz	r0, 23ae4 <lfs_file_truncate+0xd8>
        file->ctz.head = file->block;
   23a90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        file->pos = size;
   23a92:	6366      	str	r6, [r4, #52]	; 0x34
        file->ctz.size = size;
   23a94:	e9c4 360a 	strd	r3, r6, [r4, #40]	; 0x28
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   23a98:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23a9a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   23a9e:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_soff_t res = lfs_file_rawseek(lfs, file, pos, LFS_SEEK_SET);
   23aa0:	2300      	movs	r3, #0
   23aa2:	463a      	mov	r2, r7
   23aa4:	4621      	mov	r1, r4
   23aa6:	4628      	mov	r0, r5
   23aa8:	f00b fe56 	bl	2f758 <lfs_file_rawseek>
    if (res < 0) {
   23aac:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   23ab0:	e018      	b.n	23ae4 <lfs_file_truncate+0xd8>
    } else if (size > oldsize) {
   23ab2:	d9f5      	bls.n	23aa0 <lfs_file_truncate+0x94>
        lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_END);
   23ab4:	2302      	movs	r3, #2
   23ab6:	2200      	movs	r2, #0
   23ab8:	4621      	mov	r1, r4
   23aba:	4628      	mov	r0, r5
   23abc:	f00b fe4c 	bl	2f758 <lfs_file_rawseek>
        if (res < 0) {
   23ac0:	2800      	cmp	r0, #0
   23ac2:	db0f      	blt.n	23ae4 <lfs_file_truncate+0xd8>
            res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
   23ac4:	f04f 0800 	mov.w	r8, #0
        while (file->pos < size) {
   23ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23aca:	429e      	cmp	r6, r3
   23acc:	d9e8      	bls.n	23aa0 <lfs_file_truncate+0x94>
            res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
   23ace:	2301      	movs	r3, #1
   23ad0:	4621      	mov	r1, r4
   23ad2:	4628      	mov	r0, r5
   23ad4:	f10d 0217 	add.w	r2, sp, #23
   23ad8:	f88d 8017 	strb.w	r8, [sp, #23]
   23adc:	f7fe fbf0 	bl	222c0 <lfs_file_rawwrite>
            if (res < 0) {
   23ae0:	2800      	cmp	r0, #0
   23ae2:	daf1      	bge.n	23ac8 <lfs_file_truncate+0xbc>
    err = lfs_file_rawtruncate(lfs, file, size);

    LFS_TRACE("lfs_file_truncate -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23ae4:	b006      	add	sp, #24
   23ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_INVAL;
   23aea:	f06f 0015 	mvn.w	r0, #21
    return err;
   23aee:	e7f9      	b.n	23ae4 <lfs_file_truncate+0xd8>
   23af0:	00037ff1 	.word	0x00037ff1
   23af4:	00037a7e 	.word	0x00037a7e
   23af8:	00032659 	.word	0x00032659
   23afc:	00037e13 	.word	0x00037e13

00023b00 <lfs_file_tell>:
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
   23b00:	b508      	push	{r3, lr}
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23b02:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23b04:	f00b f9f1 	bl	2eeea <lfs_mlist_isopen>
   23b08:	b958      	cbnz	r0, 23b22 <lfs_file_tell+0x22>
   23b0a:	4907      	ldr	r1, [pc, #28]	; (23b28 <lfs_file_tell+0x28>)
   23b0c:	4807      	ldr	r0, [pc, #28]	; (23b2c <lfs_file_tell+0x2c>)
   23b0e:	f241 53f9 	movw	r3, #5625	; 0x15f9
   23b12:	4a07      	ldr	r2, [pc, #28]	; (23b30 <lfs_file_tell+0x30>)
   23b14:	f006 fdd1 	bl	2a6ba <assert_print>
   23b18:	f241 51f9 	movw	r1, #5625	; 0x15f9
   23b1c:	4804      	ldr	r0, [pc, #16]	; (23b30 <lfs_file_tell+0x30>)
   23b1e:	f006 fdc5 	bl	2a6ac <assert_post_action>
    lfs_soff_t res = lfs_file_rawtell(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   23b22:	6b48      	ldr	r0, [r1, #52]	; 0x34
   23b24:	bd08      	pop	{r3, pc}
   23b26:	bf00      	nop
   23b28:	00037ff1 	.word	0x00037ff1
   23b2c:	00032659 	.word	0x00032659
   23b30:	00037a7e 	.word	0x00037a7e

00023b34 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
   23b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23b38:	b0a6      	sub	sp, #152	; 0x98
   23b3a:	4605      	mov	r5, r0
   23b3c:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
   23b3e:	f7ff fa0f 	bl	22f60 <lfs_fs_forceconsistency>
    if (err) {
   23b42:	b980      	cbnz	r0, 23b66 <lfs_mkdir+0x32>
    cwd.next = lfs->mlist;
   23b44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   23b46:	4628      	mov	r0, r5
    cwd.next = lfs->mlist;
   23b48:	931c      	str	r3, [sp, #112]	; 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   23b4a:	aa01      	add	r2, sp, #4
   23b4c:	f10d 0302 	add.w	r3, sp, #2
   23b50:	a91e      	add	r1, sp, #120	; 0x78
   23b52:	f7fd fdcb 	bl	216ec <lfs_dir_find>
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
   23b56:	1c83      	adds	r3, r0, #2
   23b58:	d108      	bne.n	23b6c <lfs_mkdir+0x38>
   23b5a:	f240 33ff 	movw	r3, #1023	; 0x3ff
   23b5e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
   23b62:	429f      	cmp	r7, r3
   23b64:	d107      	bne.n	23b76 <lfs_mkdir+0x42>
    err = lfs_rawmkdir(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23b66:	b026      	add	sp, #152	; 0x98
   23b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return (err < 0) ? err : LFS_ERR_EXIST;
   23b6c:	2800      	cmp	r0, #0
   23b6e:	bfa8      	it	ge
   23b70:	f06f 0010 	mvnge.w	r0, #16
   23b74:	e7f7      	b.n	23b66 <lfs_mkdir+0x32>
    lfs_size_t nlen = strlen(path);
   23b76:	f8dd 8004 	ldr.w	r8, [sp, #4]
   23b7a:	4640      	mov	r0, r8
   23b7c:	f7e5 fc03 	bl	9386 <strlen>
    if (nlen > lfs->name_max) {
   23b80:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    lfs_size_t nlen = strlen(path);
   23b82:	4606      	mov	r6, r0
    if (nlen > lfs->name_max) {
   23b84:	4298      	cmp	r0, r3
   23b86:	d871      	bhi.n	23c6c <lfs_mkdir+0x138>
    lfs->free.ack = lfs->cfg->block_count;
   23b88:	6eab      	ldr	r3, [r5, #104]	; 0x68
    err = lfs_dir_alloc(lfs, &dir);
   23b8a:	ac04      	add	r4, sp, #16
    lfs->free.ack = lfs->cfg->block_count;
   23b8c:	6a1b      	ldr	r3, [r3, #32]
    err = lfs_dir_alloc(lfs, &dir);
   23b8e:	4621      	mov	r1, r4
   23b90:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   23b92:	662b      	str	r3, [r5, #96]	; 0x60
    err = lfs_dir_alloc(lfs, &dir);
   23b94:	f00b fbc6 	bl	2f324 <lfs_dir_alloc>
    if (err) {
   23b98:	2800      	cmp	r0, #0
   23b9a:	d1e4      	bne.n	23b66 <lfs_mkdir+0x32>
    lfs_mdir_t pred = cwd.m;
   23b9c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   23ba0:	f10d 0e78 	add.w	lr, sp, #120	; 0x78
   23ba4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   23ba8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   23bac:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   23bb0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
   23bb4:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
   23bb8:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   23bbc:	2b00      	cmp	r3, #0
   23bbe:	d14d      	bne.n	23c5c <lfs_mkdir+0x128>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
   23bc0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 23c74 <lfs_mkdir+0x140>
   23bc4:	2301      	movs	r3, #1
   23bc6:	4621      	mov	r1, r4
   23bc8:	4628      	mov	r0, r5
   23bca:	aa02      	add	r2, sp, #8
   23bcc:	e9cd 9a02 	strd	r9, sl, [sp, #8]
   23bd0:	f00b fe0b 	bl	2f7ea <lfs_dir_commit>
    if (err) {
   23bd4:	2800      	cmp	r0, #0
   23bd6:	d1c6      	bne.n	23b66 <lfs_mkdir+0x32>
    if (cwd.m.split) {
   23bd8:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
   23bdc:	b1f3      	cbz	r3, 23c1c <lfs_mkdir+0xe8>
        err = lfs_fs_preporphans(lfs, +1);
   23bde:	2101      	movs	r1, #1
   23be0:	4628      	mov	r0, r5
   23be2:	f7fc ff5d 	bl	20aa0 <lfs_fs_preporphans>
        if (err) {
   23be6:	2800      	cmp	r0, #0
   23be8:	d1bd      	bne.n	23b66 <lfs_mkdir+0x32>
        lfs->mlist = &cwd;
   23bea:	ab1c      	add	r3, sp, #112	; 0x70
        cwd.type = 0;
   23bec:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
        cwd.id = 0;
   23bf0:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
        lfs->mlist = &cwd;
   23bf4:	62ab      	str	r3, [r5, #40]	; 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
   23bf6:	4628      	mov	r0, r5
   23bf8:	2301      	movs	r3, #1
   23bfa:	aa14      	add	r2, sp, #80	; 0x50
   23bfc:	a90c      	add	r1, sp, #48	; 0x30
   23bfe:	e9cd 9414 	strd	r9, r4, [sp, #80]	; 0x50
   23c02:	f00b fdf2 	bl	2f7ea <lfs_dir_commit>
        if (err) {
   23c06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
            lfs->mlist = cwd.next;
   23c08:	62ab      	str	r3, [r5, #40]	; 0x28
        if (err) {
   23c0a:	2800      	cmp	r0, #0
   23c0c:	d1ab      	bne.n	23b66 <lfs_mkdir+0x32>
        err = lfs_fs_preporphans(lfs, -1);
   23c0e:	f04f 31ff 	mov.w	r1, #4294967295
   23c12:	4628      	mov	r0, r5
   23c14:	f7fc ff44 	bl	20aa0 <lfs_fs_preporphans>
        if (err) {
   23c18:	2800      	cmp	r0, #0
   23c1a:	d1a4      	bne.n	23b66 <lfs_mkdir+0x32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
   23c1c:	4b16      	ldr	r3, [pc, #88]	; (23c78 <lfs_mkdir+0x144>)
   23c1e:	ea46 2687 	orr.w	r6, r6, r7, lsl #10
   23c22:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
   23c26:	9314      	str	r3, [sp, #80]	; 0x50
   23c28:	2300      	movs	r3, #0
   23c2a:	9315      	str	r3, [sp, #84]	; 0x54
   23c2c:	4b13      	ldr	r3, [pc, #76]	; (23c7c <lfs_mkdir+0x148>)
   23c2e:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
   23c32:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
   23c36:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
   23c3a:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
   23c3e:	4628      	mov	r0, r5
   23c40:	2b00      	cmp	r3, #0
   23c42:	4b0c      	ldr	r3, [pc, #48]	; (23c74 <lfs_mkdir+0x140>)
   23c44:	bf18      	it	ne
   23c46:	2300      	movne	r3, #0
   23c48:	aa14      	add	r2, sp, #80	; 0x50
   23c4a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   23c4e:	a91e      	add	r1, sp, #120	; 0x78
   23c50:	2304      	movs	r3, #4
   23c52:	e9cd 6816 	strd	r6, r8, [sp, #88]	; 0x58
   23c56:	f00b fdc8 	bl	2f7ea <lfs_dir_commit>
    if (err) {
   23c5a:	e784      	b.n	23b66 <lfs_mkdir+0x32>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
   23c5c:	4652      	mov	r2, sl
   23c5e:	4628      	mov	r0, r5
   23c60:	a90c      	add	r1, sp, #48	; 0x30
   23c62:	f00b fa05 	bl	2f070 <lfs_dir_fetch>
        if (err) {
   23c66:	2800      	cmp	r0, #0
   23c68:	d0a6      	beq.n	23bb8 <lfs_mkdir+0x84>
   23c6a:	e77c      	b.n	23b66 <lfs_mkdir+0x32>
        return LFS_ERR_NAMETOOLONG;
   23c6c:	f06f 0023 	mvn.w	r0, #35	; 0x23
    return err;
   23c70:	e779      	b.n	23b66 <lfs_mkdir+0x32>
   23c72:	bf00      	nop
   23c74:	600ffc08 	.word	0x600ffc08
   23c78:	40100000 	.word	0x40100000
   23c7c:	20000008 	.word	0x20000008

00023c80 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   23c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c82:	4605      	mov	r5, r0
   23c84:	b087      	sub	sp, #28
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
   23c86:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23c88:	f00b f92f 	bl	2eeea <lfs_mlist_isopen>
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   23c8c:	460c      	mov	r4, r1
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
   23c8e:	4603      	mov	r3, r0
   23c90:	b158      	cbz	r0, 23caa <lfs_dir_open+0x2a>
   23c92:	4923      	ldr	r1, [pc, #140]	; (23d20 <lfs_dir_open+0xa0>)
   23c94:	4823      	ldr	r0, [pc, #140]	; (23d24 <lfs_dir_open+0xa4>)
   23c96:	f241 6335 	movw	r3, #5685	; 0x1635
   23c9a:	4a23      	ldr	r2, [pc, #140]	; (23d28 <lfs_dir_open+0xa8>)
   23c9c:	f006 fd0d 	bl	2a6ba <assert_print>
   23ca0:	f241 6135 	movw	r1, #5685	; 0x1635
   23ca4:	4820      	ldr	r0, [pc, #128]	; (23d28 <lfs_dir_open+0xa8>)
   23ca6:	f006 fd01 	bl	2a6ac <assert_post_action>
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
   23caa:	f101 0608 	add.w	r6, r1, #8
   23cae:	9203      	str	r2, [sp, #12]
   23cb0:	4631      	mov	r1, r6
   23cb2:	4628      	mov	r0, r5
   23cb4:	aa03      	add	r2, sp, #12
   23cb6:	f7fd fd19 	bl	216ec <lfs_dir_find>
    if (tag < 0) {
   23cba:	2800      	cmp	r0, #0
   23cbc:	db2a      	blt.n	23d14 <lfs_dir_open+0x94>
    return (tag & 0x7ff00000) >> 20;
   23cbe:	0d03      	lsrs	r3, r0, #20
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   23cc0:	2b02      	cmp	r3, #2
   23cc2:	d129      	bne.n	23d18 <lfs_dir_open+0x98>
    if (lfs_tag_id(tag) == 0x3ff) {
   23cc4:	f240 32ff 	movw	r2, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   23cc8:	f3c0 2389 	ubfx	r3, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
   23ccc:	4293      	cmp	r3, r2
   23cce:	af04      	add	r7, sp, #16
   23cd0:	d115      	bne.n	23cfe <lfs_dir_open+0x7e>
        pair[0] = lfs->root[0];
   23cd2:	6a2b      	ldr	r3, [r5, #32]
   23cd4:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
   23cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23cd8:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
   23cda:	463a      	mov	r2, r7
   23cdc:	4631      	mov	r1, r6
   23cde:	4628      	mov	r0, r5
   23ce0:	f00b f9c6 	bl	2f070 <lfs_dir_fetch>
    if (err) {
   23ce4:	b9b0      	cbnz	r0, 23d14 <lfs_dir_open+0x94>
    dir->head[0] = dir->m.pair[0];
   23ce6:	68a3      	ldr	r3, [r4, #8]
    dir->id = 0;
   23ce8:	80a0      	strh	r0, [r4, #4]
    dir->head[0] = dir->m.pair[0];
   23cea:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
   23cec:	68e3      	ldr	r3, [r4, #12]
    dir->pos = 0;
   23cee:	62a0      	str	r0, [r4, #40]	; 0x28
    dir->head[1] = dir->m.pair[1];
   23cf0:	6323      	str	r3, [r4, #48]	; 0x30
    dir->type = LFS_TYPE_DIR;
   23cf2:	2302      	movs	r3, #2
   23cf4:	71a3      	strb	r3, [r4, #6]
    mlist->next = lfs->mlist;
   23cf6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23cf8:	6023      	str	r3, [r4, #0]
    lfs->mlist = mlist;
   23cfa:	62ac      	str	r4, [r5, #40]	; 0x28
    return 0;
   23cfc:	e00a      	b.n	23d14 <lfs_dir_open+0x94>
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
   23cfe:	4a0b      	ldr	r2, [pc, #44]	; (23d2c <lfs_dir_open+0xac>)
   23d00:	4631      	mov	r1, r6
   23d02:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   23d06:	4628      	mov	r0, r5
   23d08:	4a09      	ldr	r2, [pc, #36]	; (23d30 <lfs_dir_open+0xb0>)
   23d0a:	9700      	str	r7, [sp, #0]
   23d0c:	f00b f934 	bl	2ef78 <lfs_dir_get>
        if (res < 0) {
   23d10:	2800      	cmp	r0, #0
   23d12:	dae2      	bge.n	23cda <lfs_dir_open+0x5a>
    err = lfs_dir_rawopen(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23d14:	b007      	add	sp, #28
   23d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LFS_ERR_NOTDIR;
   23d18:	f06f 0013 	mvn.w	r0, #19
    return err;
   23d1c:	e7fa      	b.n	23d14 <lfs_dir_open+0x94>
   23d1e:	bf00      	nop
   23d20:	00038054 	.word	0x00038054
   23d24:	00032659 	.word	0x00032659
   23d28:	00037a7e 	.word	0x00037a7e
   23d2c:	20000008 	.word	0x20000008
   23d30:	700ffc00 	.word	0x700ffc00

00023d34 <lfs_dir_read>:
    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
   23d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d38:	4690      	mov	r8, r2
   23d3a:	460c      	mov	r4, r1
   23d3c:	4605      	mov	r5, r0
   23d3e:	f44f 7284 	mov.w	r2, #264	; 0x108
   23d42:	2100      	movs	r1, #0
   23d44:	4640      	mov	r0, r8
   23d46:	f00c fc4c 	bl	305e2 <memset>
    if (dir->pos == 0) {
   23d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23d4c:	b963      	cbnz	r3, 23d68 <lfs_dir_read+0x34>
        info->type = LFS_TYPE_DIR;
   23d4e:	2302      	movs	r3, #2
   23d50:	f888 3000 	strb.w	r3, [r8]
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   23d54:	4b1d      	ldr	r3, [pc, #116]	; (23dcc <lfs_dir_read+0x98>)
   23d56:	881b      	ldrh	r3, [r3, #0]
   23d58:	f8a8 3008 	strh.w	r3, [r8, #8]
        return true;
   23d5c:	2001      	movs	r0, #1
        dir->pos += 1;
   23d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23d60:	3301      	adds	r3, #1
   23d62:	62a3      	str	r3, [r4, #40]	; 0x28
    err = lfs_dir_rawread(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (dir->pos == 1) {
   23d68:	2b01      	cmp	r3, #1
   23d6a:	d01d      	beq.n	23da8 <lfs_dir_read+0x74>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
   23d6c:	f104 0720 	add.w	r7, r4, #32
   23d70:	f104 0608 	add.w	r6, r4, #8
        if (dir->id == dir->m.count) {
   23d74:	88a2      	ldrh	r2, [r4, #4]
   23d76:	8ba3      	ldrh	r3, [r4, #28]
   23d78:	429a      	cmp	r2, r3
   23d7a:	d10a      	bne.n	23d92 <lfs_dir_read+0x5e>
            if (!dir->m.split) {
   23d7c:	7fe0      	ldrb	r0, [r4, #31]
   23d7e:	2800      	cmp	r0, #0
   23d80:	d0f0      	beq.n	23d64 <lfs_dir_read+0x30>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
   23d82:	463a      	mov	r2, r7
   23d84:	4631      	mov	r1, r6
   23d86:	4628      	mov	r0, r5
   23d88:	f00b f972 	bl	2f070 <lfs_dir_fetch>
            if (err) {
   23d8c:	2800      	cmp	r0, #0
   23d8e:	d1e9      	bne.n	23d64 <lfs_dir_read+0x30>
            dir->id = 0;
   23d90:	80a0      	strh	r0, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
   23d92:	4643      	mov	r3, r8
   23d94:	4631      	mov	r1, r6
   23d96:	4628      	mov	r0, r5
   23d98:	88a2      	ldrh	r2, [r4, #4]
   23d9a:	f7fd f82b 	bl	20df4 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
   23d9e:	b970      	cbnz	r0, 23dbe <lfs_dir_read+0x8a>
        dir->id += 1;
   23da0:	88a3      	ldrh	r3, [r4, #4]
   23da2:	3301      	adds	r3, #1
   23da4:	80a3      	strh	r3, [r4, #4]
    dir->pos += 1;
   23da6:	e7d9      	b.n	23d5c <lfs_dir_read+0x28>
        info->type = LFS_TYPE_DIR;
   23da8:	4643      	mov	r3, r8
   23daa:	2202      	movs	r2, #2
   23dac:	f803 2b08 	strb.w	r2, [r3], #8
   23db0:	4a07      	ldr	r2, [pc, #28]	; (23dd0 <lfs_dir_read+0x9c>)
   23db2:	8811      	ldrh	r1, [r2, #0]
   23db4:	7892      	ldrb	r2, [r2, #2]
   23db6:	f8a8 1008 	strh.w	r1, [r8, #8]
   23dba:	709a      	strb	r2, [r3, #2]
   23dbc:	e7ce      	b.n	23d5c <lfs_dir_read+0x28>
        if (err && err != LFS_ERR_NOENT) {
   23dbe:	1c83      	adds	r3, r0, #2
   23dc0:	d1d0      	bne.n	23d64 <lfs_dir_read+0x30>
        dir->id += 1;
   23dc2:	88a3      	ldrh	r3, [r4, #4]
   23dc4:	3301      	adds	r3, #1
   23dc6:	80a3      	strh	r3, [r4, #4]
        if (err != LFS_ERR_NOENT) {
   23dc8:	e7d4      	b.n	23d74 <lfs_dir_read+0x40>
   23dca:	bf00      	nop
   23dcc:	00037b11 	.word	0x00037b11
   23dd0:	00037b10 	.word	0x00037b10

00023dd4 <lfs_crc>:
 * use for LittleFS.
 */

/* Software CRC implementation with small lookup table */
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size)
{
   23dd4:	b530      	push	{r4, r5, lr}
	};

	const uint8_t *data = buffer;

	for (size_t i = 0; i < size; i++) {
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   23dd6:	4d0c      	ldr	r5, [pc, #48]	; (23e08 <lfs_crc+0x34>)
   23dd8:	440a      	add	r2, r1
	for (size_t i = 0; i < size; i++) {
   23dda:	4291      	cmp	r1, r2
   23ddc:	d100      	bne.n	23de0 <lfs_crc+0xc>
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
	}

	return crc;
}
   23dde:	bd30      	pop	{r4, r5, pc}
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   23de0:	f811 3b01 	ldrb.w	r3, [r1], #1
   23de4:	ea83 0400 	eor.w	r4, r3, r0
   23de8:	f004 040f 	and.w	r4, r4, #15
   23dec:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
   23df0:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
   23df4:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
   23df8:	f003 030f 	and.w	r3, r3, #15
   23dfc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   23e00:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
	for (size_t i = 0; i < size; i++) {
   23e04:	e7e9      	b.n	23dda <lfs_crc+0x6>
   23e06:	bf00      	nop
   23e08:	000324f4 	.word	0x000324f4

00023e0c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   23e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e10:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   23e12:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   23e14:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   23e16:	4293      	cmp	r3, r2
{
   23e18:	4617      	mov	r7, r2
   23e1a:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   23e1c:	d341      	bcc.n	23ea2 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   23e1e:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   23e20:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   23e24:	42bd      	cmp	r5, r7
   23e26:	d103      	bne.n	23e30 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   23e28:	2000      	movs	r0, #0
}
   23e2a:	b007      	add	sp, #28
   23e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   23e30:	fb0b f805 	mul.w	r8, fp, r5
   23e34:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   23e38:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   23e3a:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   23e3e:	1d23      	adds	r3, r4, #4
   23e40:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   23e42:	b9ca      	cbnz	r2, 23e78 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   23e44:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   23e46:	6861      	ldr	r1, [r4, #4]
   23e48:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   23e4a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   23e4e:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   23e50:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   23e52:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   23e56:	1e5c      	subs	r4, r3, #1
   23e58:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   23e5c:	425b      	negs	r3, r3
   23e5e:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   23e62:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   23e64:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   23e68:	6884      	ldr	r4, [r0, #8]
   23e6a:	3306      	adds	r3, #6
   23e6c:	42a1      	cmp	r1, r4
   23e6e:	bf28      	it	cs
   23e70:	f04f 31ff 	movcs.w	r1, #4294967295
   23e74:	f00a ffc2 	bl	2edfc <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   23e78:	f859 3008 	ldr.w	r3, [r9, r8]
   23e7c:	4630      	mov	r0, r6
   23e7e:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   23e80:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   23e82:	b2a9      	uxth	r1, r5
   23e84:	6a1b      	ldr	r3, [r3, #32]
   23e86:	9301      	str	r3, [sp, #4]
   23e88:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23e8a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   23e8e:	9300      	str	r3, [sp, #0]
   23e90:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   23e94:	9b05      	ldr	r3, [sp, #20]
   23e96:	f00b fd82 	bl	2f99e <virtqueue_create>
		if (ret)
   23e9a:	2800      	cmp	r0, #0
   23e9c:	d1c5      	bne.n	23e2a <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   23e9e:	3501      	adds	r5, #1
   23ea0:	e7c0      	b.n	23e24 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   23ea2:	4801      	ldr	r0, [pc, #4]	; (23ea8 <virtio_create_virtqueues+0x9c>)
   23ea4:	e7c1      	b.n	23e2a <virtio_create_virtqueues+0x1e>
   23ea6:	bf00      	nop
   23ea8:	fffff440 	.word	0xfffff440

00023eac <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   23eac:	b510      	push	{r4, lr}
	if (vq) {
   23eae:	4604      	mov	r4, r0
   23eb0:	b190      	cbz	r0, 23ed8 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   23eb2:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   23eb4:	8943      	ldrh	r3, [r0, #10]
   23eb6:	429a      	cmp	r2, r3
   23eb8:	d009      	beq.n	23ece <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   23eba:	4b08      	ldr	r3, [pc, #32]	; (23edc <virtqueue_free+0x30>)
   23ebc:	781a      	ldrb	r2, [r3, #0]
   23ebe:	2a03      	cmp	r2, #3
   23ec0:	d905      	bls.n	23ece <virtqueue_free+0x22>
   23ec2:	685b      	ldr	r3, [r3, #4]
   23ec4:	b11b      	cbz	r3, 23ece <virtqueue_free+0x22>
   23ec6:	6842      	ldr	r2, [r0, #4]
   23ec8:	4905      	ldr	r1, [pc, #20]	; (23ee0 <virtqueue_free+0x34>)
   23eca:	2004      	movs	r0, #4
   23ecc:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   23ece:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   23ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23ed4:	f00c bb21 	b.w	3051a <k_free>
   23ed8:	bd10      	pop	{r4, pc}
   23eda:	bf00      	nop
   23edc:	200219c0 	.word	0x200219c0
   23ee0:	0003808a 	.word	0x0003808a

00023ee4 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   23ee4:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   23ee6:	8944      	ldrh	r4, [r0, #10]
   23ee8:	428c      	cmp	r4, r1
   23eea:	d912      	bls.n	23f12 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   23eec:	6a03      	ldr	r3, [r0, #32]
   23eee:	3c01      	subs	r4, #1
   23ef0:	885d      	ldrh	r5, [r3, #2]
   23ef2:	402c      	ands	r4, r5
   23ef4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   23ef8:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   23efa:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   23efc:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   23f00:	6a02      	ldr	r2, [r0, #32]
   23f02:	8853      	ldrh	r3, [r2, #2]
   23f04:	3301      	adds	r3, #1
   23f06:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   23f08:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   23f0a:	3301      	adds	r3, #1
   23f0c:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   23f0e:	2000      	movs	r0, #0
}
   23f10:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   23f12:	4801      	ldr	r0, [pc, #4]	; (23f18 <virtqueue_add_consumed_buffer+0x34>)
   23f14:	e7fc      	b.n	23f10 <virtqueue_add_consumed_buffer+0x2c>
   23f16:	bf00      	nop
   23f18:	fffff441 	.word	0xfffff441

00023f1c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   23f1c:	b470      	push	{r4, r5, r6}
   23f1e:	9e03      	ldr	r6, [sp, #12]
   23f20:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   23f22:	b158      	cbz	r0, 23f3c <rpmsg_send_offchannel_raw+0x20>
   23f24:	6a00      	ldr	r0, [r0, #32]
   23f26:	b148      	cbz	r0, 23f3c <rpmsg_send_offchannel_raw+0x20>
   23f28:	b143      	cbz	r3, 23f3c <rpmsg_send_offchannel_raw+0x20>
   23f2a:	3401      	adds	r4, #1
   23f2c:	d006      	beq.n	23f3c <rpmsg_send_offchannel_raw+0x20>
   23f2e:	2e00      	cmp	r6, #0
   23f30:	db04      	blt.n	23f3c <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   23f32:	6f84      	ldr	r4, [r0, #120]	; 0x78
   23f34:	b114      	cbz	r4, 23f3c <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   23f36:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   23f38:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   23f3a:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   23f3c:	4801      	ldr	r0, [pc, #4]	; (23f44 <rpmsg_send_offchannel_raw+0x28>)
}
   23f3e:	bc70      	pop	{r4, r5, r6}
   23f40:	4770      	bx	lr
   23f42:	bf00      	nop
   23f44:	fffff82d 	.word	0xfffff82d

00023f48 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   23f48:	b470      	push	{r4, r5, r6}
   23f4a:	9e03      	ldr	r6, [sp, #12]
   23f4c:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   23f4e:	b160      	cbz	r0, 23f6a <rpmsg_send_offchannel_nocopy+0x22>
   23f50:	6a00      	ldr	r0, [r0, #32]
   23f52:	b150      	cbz	r0, 23f6a <rpmsg_send_offchannel_nocopy+0x22>
   23f54:	b14b      	cbz	r3, 23f6a <rpmsg_send_offchannel_nocopy+0x22>
   23f56:	3401      	adds	r4, #1
   23f58:	d007      	beq.n	23f6a <rpmsg_send_offchannel_nocopy+0x22>
   23f5a:	2e00      	cmp	r6, #0
   23f5c:	db05      	blt.n	23f6a <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   23f5e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   23f62:	b114      	cbz	r4, 23f6a <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   23f64:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   23f66:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   23f68:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   23f6a:	4801      	ldr	r0, [pc, #4]	; (23f70 <rpmsg_send_offchannel_nocopy+0x28>)
}
   23f6c:	bc70      	pop	{r4, r5, r6}
   23f6e:	4770      	bx	lr
   23f70:	fffff82d 	.word	0xfffff82d

00023f74 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   23f74:	b570      	push	{r4, r5, r6, lr}
   23f76:	460c      	mov	r4, r1
   23f78:	4611      	mov	r1, r2
   23f7a:	4605      	mov	r5, r0
   23f7c:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   23f7e:	4b0c      	ldr	r3, [pc, #48]	; (23fb0 <rpmsg_register_endpoint+0x3c>)
   23f80:	2220      	movs	r2, #32
   23f82:	2900      	cmp	r1, #0
   23f84:	bf08      	it	eq
   23f86:	4619      	moveq	r1, r3
   23f88:	4620      	mov	r0, r4
   23f8a:	f00c fc8a 	bl	308a2 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   23f8e:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   23f90:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   23f92:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   23f94:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   23f96:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   23f98:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   23f9a:	9b06      	ldr	r3, [sp, #24]
   23f9c:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   23f9e:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   23fa0:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   23fa4:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   23fa8:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   23faa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   23fac:	6013      	str	r3, [r2, #0]
}
   23fae:	bd70      	pop	{r4, r5, r6, pc}
   23fb0:	000368ec 	.word	0x000368ec

00023fb4 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   23fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   23fb8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   23fbc:	460d      	mov	r5, r1
   23fbe:	4692      	mov	sl, r2
   23fc0:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   23fc2:	4606      	mov	r6, r0
   23fc4:	2800      	cmp	r0, #0
   23fc6:	d06c      	beq.n	240a2 <rpmsg_create_ept+0xee>
   23fc8:	2900      	cmp	r1, #0
   23fca:	d06a      	beq.n	240a2 <rpmsg_create_ept+0xee>
   23fcc:	f1b9 0f00 	cmp.w	r9, #0
   23fd0:	d067      	beq.n	240a2 <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   23fd2:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   23fd6:	4640      	mov	r0, r8
   23fd8:	f00b fe4a 	bl	2fc70 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   23fdc:	1c78      	adds	r0, r7, #1
   23fde:	d140      	bne.n	24062 <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   23fe0:	6cac      	ldr	r4, [r5, #72]	; 0x48
   23fe2:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   23fe6:	f014 0401 	ands.w	r4, r4, #1
   23fea:	d00b      	beq.n	24004 <rpmsg_create_ept+0x50>
	for (bit = start;
   23fec:	2400      	movs	r4, #0
	     bit++)
   23fee:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   23ff0:	2c80      	cmp	r4, #128	; 0x80
   23ff2:	d054      	beq.n	2409e <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   23ff4:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   23ff6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   23ffa:	f004 011f 	and.w	r1, r4, #31
   23ffe:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24000:	07d1      	lsls	r1, r2, #31
   24002:	d4f4      	bmi.n	23fee <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24004:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24006:	0960      	lsrs	r0, r4, #5
   24008:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   2400c:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24010:	f004 041f 	and.w	r4, r4, #31
   24014:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24016:	430a      	orrs	r2, r1
   24018:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   2401c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2401e:	4652      	mov	r2, sl
   24020:	e9cd 9301 	strd	r9, r3, [sp, #4]
   24024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24026:	4631      	mov	r1, r6
   24028:	9300      	str	r3, [sp, #0]
   2402a:	4628      	mov	r0, r5
   2402c:	463b      	mov	r3, r7
   2402e:	f7ff ffa1 	bl	23f74 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   24032:	4640      	mov	r0, r8
   24034:	f001 fac8 	bl	255c8 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   24038:	7834      	ldrb	r4, [r6, #0]
   2403a:	b174      	cbz	r4, 2405a <rpmsg_create_ept+0xa6>
   2403c:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   24040:	b15c      	cbz	r4, 2405a <rpmsg_create_ept+0xa6>
   24042:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   24044:	3301      	adds	r3, #1
   24046:	d12e      	bne.n	240a6 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   24048:	2100      	movs	r1, #0
   2404a:	4630      	mov	r0, r6
   2404c:	f00b fe3f 	bl	2fcce <rpmsg_send_ns_message>

	if (status)
   24050:	4604      	mov	r4, r0
   24052:	b110      	cbz	r0, 2405a <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   24054:	4630      	mov	r0, r6
   24056:	f00b fe11 	bl	2fc7c <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   2405a:	4620      	mov	r0, r4
   2405c:	b004      	add	sp, #16
   2405e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   24062:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   24066:	d3d9      	bcc.n	2401c <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   24068:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   2406c:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   2406e:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   24072:	d80f      	bhi.n	24094 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   24074:	0958      	lsrs	r0, r3, #5
   24076:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   2407a:	f003 031f 	and.w	r3, r3, #31
   2407e:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   24082:	07d2      	lsls	r2, r2, #31
   24084:	d40b      	bmi.n	2409e <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24086:	2201      	movs	r2, #1
   24088:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   2408c:	4323      	orrs	r3, r4
   2408e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   24092:	e7c3      	b.n	2401c <rpmsg_create_ept+0x68>
   24094:	4c05      	ldr	r4, [pc, #20]	; (240ac <rpmsg_create_ept+0xf8>)
   24096:	4640      	mov	r0, r8
   24098:	f001 fa96 	bl	255c8 <z_impl_k_sem_give>
}
   2409c:	e7dd      	b.n	2405a <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   2409e:	4c04      	ldr	r4, [pc, #16]	; (240b0 <rpmsg_create_ept+0xfc>)
   240a0:	e7f9      	b.n	24096 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   240a2:	4c02      	ldr	r4, [pc, #8]	; (240ac <rpmsg_create_ept+0xf8>)
   240a4:	e7d9      	b.n	2405a <rpmsg_create_ept+0xa6>
   240a6:	2400      	movs	r4, #0
   240a8:	e7d7      	b.n	2405a <rpmsg_create_ept+0xa6>
   240aa:	bf00      	nop
   240ac:	fffff82d 	.word	0xfffff82d
   240b0:	fffff829 	.word	0xfffff829

000240b4 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   240b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   240b8:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   240bc:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   240c0:	2300      	movs	r3, #0
{
   240c2:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   240c4:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   240c6:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   240ca:	2310      	movs	r3, #16
	rp_hdr.src = src;
   240cc:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   240d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   240d2:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   240d4:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   240d8:	f8ad 501c 	strh.w	r5, [sp, #28]
   240dc:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   240de:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   240e0:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   240e4:	42b1      	cmp	r1, r6
   240e6:	bf28      	it	cs
   240e8:	f04f 31ff 	movcs.w	r1, #4294967295
   240ec:	eb0d 0203 	add.w	r2, sp, r3
   240f0:	f00a fe4a 	bl	2ed88 <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   240f4:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   240f6:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   240f8:	d00b      	beq.n	24112 <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   240fa:	4924      	ldr	r1, [pc, #144]	; (2418c <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   240fc:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   24100:	4a23      	ldr	r2, [pc, #140]	; (24190 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   24102:	4824      	ldr	r0, [pc, #144]	; (24194 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   24104:	f006 fad9 	bl	2a6ba <assert_print>
   24108:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   2410c:	4820      	ldr	r0, [pc, #128]	; (24190 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   2410e:	f006 facd 	bl	2a6ac <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   24112:	f104 0658 	add.w	r6, r4, #88	; 0x58
   24116:	4630      	mov	r0, r6
   24118:	f00b fe69 	bl	2fdee <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   2411c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   24120:	699b      	ldr	r3, [r3, #24]
   24122:	b9d3      	cbnz	r3, 2415a <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   24124:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   24128:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   2412c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24130:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   24132:	b9cb      	cbnz	r3, 24168 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   24134:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   24138:	f8cd 8000 	str.w	r8, [sp]
   2413c:	2201      	movs	r2, #1
   2413e:	a902      	add	r1, sp, #8
   24140:	f00b fc5a 	bl	2f9f8 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   24144:	b1b0      	cbz	r0, 24174 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   24146:	4914      	ldr	r1, [pc, #80]	; (24198 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   24148:	f240 13b9 	movw	r3, #441	; 0x1b9
   2414c:	4a10      	ldr	r2, [pc, #64]	; (24190 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   2414e:	4811      	ldr	r0, [pc, #68]	; (24194 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   24150:	f006 fab3 	bl	2a6ba <assert_print>
   24154:	f240 11b9 	movw	r1, #441	; 0x1b9
   24158:	e7d8      	b.n	2410c <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   2415a:	4639      	mov	r1, r7
   2415c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24160:	f00b fce0 	bl	2fb24 <virtqueue_get_buffer_length>
   24164:	4602      	mov	r2, r0
   24166:	e7df      	b.n	24128 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   24168:	2b01      	cmp	r3, #1
   2416a:	d103      	bne.n	24174 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   2416c:	4639      	mov	r1, r7
   2416e:	f7ff feb9 	bl	23ee4 <virtqueue_add_consumed_buffer>
   24172:	e7e7      	b.n	24144 <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   24174:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24178:	f00b fd2b 	bl	2fbd2 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   2417c:	4630      	mov	r0, r6
   2417e:	f00b fe34 	bl	2fdea <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   24182:	4628      	mov	r0, r5
   24184:	b008      	add	sp, #32
   24186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2418a:	bf00      	nop
   2418c:	000380ef 	.word	0x000380ef
   24190:	000380ac 	.word	0x000380ac
   24194:	00032659 	.word	0x00032659
   24198:	00038108 	.word	0x00038108

0002419c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   2419c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   241a0:	6803      	ldr	r3, [r0, #0]
   241a2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   241a4:	f107 0658 	add.w	r6, r7, #88	; 0x58
   241a8:	4630      	mov	r0, r6
   241aa:	f00b fe20 	bl	2fdee <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   241ae:	4638      	mov	r0, r7
   241b0:	f10d 020a 	add.w	r2, sp, #10
   241b4:	a903      	add	r1, sp, #12
   241b6:	f00b fe8d 	bl	2fed4 <rpmsg_virtio_get_rx_buffer>
   241ba:	4604      	mov	r4, r0
   241bc:	4630      	mov	r0, r6
   241be:	f00b fe14 	bl	2fdea <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   241c2:	2c00      	cmp	r4, #0
   241c4:	d04f      	beq.n	24266 <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   241c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   241ca:	4630      	mov	r0, r6
   241cc:	60a3      	str	r3, [r4, #8]
   241ce:	f00b fe0e 	bl	2fdee <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   241d2:	f04f 33ff 	mov.w	r3, #4294967295
   241d6:	2100      	movs	r1, #0
   241d8:	4638      	mov	r0, r7
   241da:	6862      	ldr	r2, [r4, #4]
   241dc:	f00b fdab 	bl	2fd36 <rpmsg_get_endpoint>
   241e0:	4605      	mov	r5, r0
   241e2:	4630      	mov	r0, r6
   241e4:	f00b fe01 	bl	2fdea <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   241e8:	b1ed      	cbz	r5, 24226 <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   241ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   241ec:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   241ee:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   241f0:	bf08      	it	eq
   241f2:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   241f4:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   241f6:	bf08      	it	eq
   241f8:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   241fa:	6823      	ldr	r3, [r4, #0]
   241fc:	89a2      	ldrh	r2, [r4, #12]
   241fe:	9100      	str	r1, [sp, #0]
   24200:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   24204:	f104 0110 	add.w	r1, r4, #16
   24208:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   2420a:	2800      	cmp	r0, #0
   2420c:	da0b      	bge.n	24226 <rpmsg_virtio_rx_callback+0x8a>
   2420e:	4917      	ldr	r1, [pc, #92]	; (2426c <rpmsg_virtio_rx_callback+0xd0>)
   24210:	4817      	ldr	r0, [pc, #92]	; (24270 <rpmsg_virtio_rx_callback+0xd4>)
   24212:	f240 2343 	movw	r3, #579	; 0x243
   24216:	4a17      	ldr	r2, [pc, #92]	; (24274 <rpmsg_virtio_rx_callback+0xd8>)
   24218:	f006 fa4f 	bl	2a6ba <assert_print>
   2421c:	f240 2143 	movw	r1, #579	; 0x243
   24220:	4814      	ldr	r0, [pc, #80]	; (24274 <rpmsg_virtio_rx_callback+0xd8>)
   24222:	f006 fa43 	bl	2a6ac <assert_post_action>
   24226:	4630      	mov	r0, r6
   24228:	f00b fde1 	bl	2fdee <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   2422c:	68a3      	ldr	r3, [r4, #8]
   2422e:	2b00      	cmp	r3, #0
   24230:	db06      	blt.n	24240 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   24232:	4621      	mov	r1, r4
   24234:	4638      	mov	r0, r7
   24236:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2423a:	9a03      	ldr	r2, [sp, #12]
   2423c:	f00b fe61 	bl	2ff02 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   24240:	4638      	mov	r0, r7
   24242:	f10d 020a 	add.w	r2, sp, #10
   24246:	a903      	add	r1, sp, #12
   24248:	f00b fe44 	bl	2fed4 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   2424c:	4604      	mov	r4, r0
   2424e:	b118      	cbz	r0, 24258 <rpmsg_virtio_rx_callback+0xbc>
   24250:	4630      	mov	r0, r6
   24252:	f00b fdca 	bl	2fdea <k_sem_give>
	while (rp_hdr) {
   24256:	e7b6      	b.n	241c6 <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   24258:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   2425c:	f00b fcb9 	bl	2fbd2 <virtqueue_kick>
   24260:	4630      	mov	r0, r6
   24262:	f00b fdc2 	bl	2fdea <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   24266:	b004      	add	sp, #16
   24268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2426c:	00038114 	.word	0x00038114
   24270:	00032659 	.word	0x00032659
   24274:	000380ac 	.word	0x000380ac

00024278 <rpmsg_virtio_send_offchannel_raw>:
{
   24278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2427c:	b085      	sub	sp, #20
   2427e:	460f      	mov	r7, r1
   24280:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   24282:	a903      	add	r1, sp, #12
   24284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   24286:	4606      	mov	r6, r0
   24288:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   2428a:	f00b fe85 	bl	2ff98 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   2428e:	4604      	mov	r4, r0
   24290:	b350      	cbz	r0, 242e8 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   24292:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24294:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   24296:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   2429a:	429d      	cmp	r5, r3
   2429c:	bfa8      	it	ge
   2429e:	461d      	movge	r5, r3
   242a0:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   242a2:	f8d0 c008 	ldr.w	ip, [r0, #8]
   242a6:	1a61      	subs	r1, r4, r1
   242a8:	4561      	cmp	r1, ip
   242aa:	bf28      	it	cs
   242ac:	f04f 31ff 	movcs.w	r1, #4294967295
   242b0:	462b      	mov	r3, r5
   242b2:	464a      	mov	r2, r9
   242b4:	f00a fd68 	bl	2ed88 <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   242b8:	4285      	cmp	r5, r0
   242ba:	d00b      	beq.n	242d4 <rpmsg_virtio_send_offchannel_raw+0x5c>
   242bc:	490b      	ldr	r1, [pc, #44]	; (242ec <rpmsg_virtio_send_offchannel_raw+0x74>)
   242be:	480c      	ldr	r0, [pc, #48]	; (242f0 <rpmsg_virtio_send_offchannel_raw+0x78>)
   242c0:	f240 2303 	movw	r3, #515	; 0x203
   242c4:	4a0b      	ldr	r2, [pc, #44]	; (242f4 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   242c6:	f006 f9f8 	bl	2a6ba <assert_print>
   242ca:	f240 2103 	movw	r1, #515	; 0x203
   242ce:	4809      	ldr	r0, [pc, #36]	; (242f4 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   242d0:	f006 f9ec 	bl	2a6ac <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   242d4:	4623      	mov	r3, r4
   242d6:	4642      	mov	r2, r8
   242d8:	4639      	mov	r1, r7
   242da:	4630      	mov	r0, r6
   242dc:	9500      	str	r5, [sp, #0]
   242de:	f7ff fee9 	bl	240b4 <rpmsg_virtio_send_offchannel_nocopy>
}
   242e2:	b005      	add	sp, #20
   242e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   242e8:	4803      	ldr	r0, [pc, #12]	; (242f8 <rpmsg_virtio_send_offchannel_raw+0x80>)
   242ea:	e7fa      	b.n	242e2 <rpmsg_virtio_send_offchannel_raw+0x6a>
   242ec:	00038120 	.word	0x00038120
   242f0:	00032659 	.word	0x00032659
   242f4:	000380ac 	.word	0x000380ac
   242f8:	fffff82e 	.word	0xfffff82e

000242fc <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   242fc:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   242fe:	4604      	mov	r4, r0
   24300:	b1e0      	cbz	r0, 2433c <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   24302:	f100 0558 	add.w	r5, r0, #88	; 0x58
   24306:	4628      	mov	r0, r5
   24308:	f00b fd71 	bl	2fdee <__metal_mutex_acquire>
   2430c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24310:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   24312:	b953      	cbnz	r3, 2432a <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   24314:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   24318:	3c10      	subs	r4, #16
	if (length <= 0) {
   2431a:	2c00      	cmp	r4, #0
   2431c:	dc00      	bgt.n	24320 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   2431e:	4c08      	ldr	r4, [pc, #32]	; (24340 <rpmsg_virtio_get_buffer_size+0x44>)
   24320:	4628      	mov	r0, r5
   24322:	f00b fd62 	bl	2fdea <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   24326:	4620      	mov	r0, r4
   24328:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   2432a:	2b01      	cmp	r3, #1
   2432c:	d1f7      	bne.n	2431e <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   2432e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24332:	f00b fc85 	bl	2fc40 <virtqueue_get_desc_size>
   24336:	f1a0 0410 	sub.w	r4, r0, #16
   2433a:	e7ee      	b.n	2431a <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   2433c:	4c01      	ldr	r4, [pc, #4]	; (24344 <rpmsg_virtio_get_buffer_size+0x48>)
   2433e:	e7f2      	b.n	24326 <rpmsg_virtio_get_buffer_size+0x2a>
   24340:	fffff82e 	.word	0xfffff82e
   24344:	fffff82d 	.word	0xfffff82d

00024348 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   24348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2434c:	b08a      	sub	sp, #40	; 0x28
   2434e:	460d      	mov	r5, r1
   24350:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   24354:	4690      	mov	r8, r2
   24356:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   24358:	4604      	mov	r4, r0
   2435a:	b920      	cbnz	r0, 24366 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   2435c:	4f81      	ldr	r7, [pc, #516]	; (24564 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   2435e:	4638      	mov	r0, r7
   24360:	b00a      	add	sp, #40	; 0x28
   24362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   24366:	2900      	cmp	r1, #0
   24368:	d0f8      	beq.n	2435c <rpmsg_init_vdev_with_config+0x14>
   2436a:	2b00      	cmp	r3, #0
   2436c:	d0f6      	beq.n	2435c <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   2436e:	2294      	movs	r2, #148	; 0x94
   24370:	2100      	movs	r1, #0
   24372:	f00c f936 	bl	305e2 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   24376:	2201      	movs	r2, #1
   24378:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2437c:	4611      	mov	r1, r2
   2437e:	f00b ff34 	bl	301ea <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   24382:	4b79      	ldr	r3, [pc, #484]	; (24568 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   24384:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   24388:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   2438c:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   2438e:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   24390:	4b76      	ldr	r3, [pc, #472]	; (2456c <rpmsg_init_vdev_with_config+0x224>)
   24392:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   24394:	4b76      	ldr	r3, [pc, #472]	; (24570 <rpmsg_init_vdev_with_config+0x228>)
   24396:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   2439a:	4b76      	ldr	r3, [pc, #472]	; (24574 <rpmsg_init_vdev_with_config+0x22c>)
   2439c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   243a0:	4b75      	ldr	r3, [pc, #468]	; (24578 <rpmsg_init_vdev_with_config+0x230>)
   243a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   243a6:	4b75      	ldr	r3, [pc, #468]	; (2457c <rpmsg_init_vdev_with_config+0x234>)
   243a8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   243ac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   243b0:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   243b4:	f1b8 0f00 	cmp.w	r8, #0
   243b8:	d16e      	bne.n	24498 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   243ba:	2f00      	cmp	r7, #0
   243bc:	d0ce      	beq.n	2435c <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   243be:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   243c2:	f104 0394 	add.w	r3, r4, #148	; 0x94
   243c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   243ca:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   243ce:	6a03      	ldr	r3, [r0, #32]
   243d0:	689b      	ldr	r3, [r3, #8]
   243d2:	4798      	blx	r3
   243d4:	2300      	movs	r3, #0
   243d6:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   243d8:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   243dc:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   243de:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   243e2:	f1b8 0f00 	cmp.w	r8, #0
   243e6:	d16d      	bne.n	244c4 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   243e8:	7a3b      	ldrb	r3, [r7, #8]
   243ea:	2b00      	cmp	r3, #0
   243ec:	d068      	beq.n	244c0 <rpmsg_init_vdev_with_config+0x178>
   243ee:	f109 030c 	add.w	r3, r9, #12
   243f2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   243f6:	f1b9 0f00 	cmp.w	r9, #0
   243fa:	d0af      	beq.n	2435c <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   243fc:	f8d9 2008 	ldr.w	r2, [r9, #8]
   24400:	2a00      	cmp	r2, #0
   24402:	f000 80ad 	beq.w	24560 <rpmsg_init_vdev_with_config+0x218>
   24406:	689b      	ldr	r3, [r3, #8]
   24408:	2b00      	cmp	r3, #0
   2440a:	f000 80a9 	beq.w	24560 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   2440e:	4b5c      	ldr	r3, [pc, #368]	; (24580 <rpmsg_init_vdev_with_config+0x238>)
   24410:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   24412:	4b5c      	ldr	r3, [pc, #368]	; (24584 <rpmsg_init_vdev_with_config+0x23c>)
   24414:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   24416:	4b5c      	ldr	r3, [pc, #368]	; (24588 <rpmsg_init_vdev_with_config+0x240>)
   24418:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   2441a:	4b5c      	ldr	r3, [pc, #368]	; (2458c <rpmsg_init_vdev_with_config+0x244>)
   2441c:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   2441e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24420:	681b      	ldr	r3, [r3, #0]
   24422:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   24426:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24428:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   2442a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   2442e:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   24432:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   24436:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   24438:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   2443c:	9300      	str	r3, [sp, #0]
   2443e:	2202      	movs	r2, #2
   24440:	2100      	movs	r1, #0
   24442:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   24446:	ab04      	add	r3, sp, #16
   24448:	f7ff fce0 	bl	23e0c <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   2444c:	4607      	mov	r7, r0
   2444e:	2800      	cmp	r0, #0
   24450:	d185      	bne.n	2435e <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   24452:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24456:	f00b fb8e 	bl	2fb76 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   2445a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2445c:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   2445e:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   24460:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24462:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   24464:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   24466:	f1b8 0f00 	cmp.w	r8, #0
   2446a:	d161      	bne.n	24530 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   2446c:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   2446e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24472:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   24474:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   24478:	895b      	ldrh	r3, [r3, #10]
   2447a:	4553      	cmp	r3, sl
   2447c:	d834      	bhi.n	244e8 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   2447e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   24482:	e9c4 4400 	strd	r4, r4, [r4]
   24486:	2b00      	cmp	r3, #0
   24488:	d159      	bne.n	2453e <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   2448a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   2448e:	2104      	movs	r1, #4
   24490:	6a03      	ldr	r3, [r0, #32]
   24492:	685b      	ldr	r3, [r3, #4]
   24494:	4798      	blx	r3
}
   24496:	e762      	b.n	2435e <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   24498:	f1b8 0f01 	cmp.w	r8, #1
   2449c:	d195      	bne.n	243ca <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   2449e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   244a2:	6a03      	ldr	r3, [r0, #32]
   244a4:	681b      	ldr	r3, [r3, #0]
   244a6:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   244a8:	0642      	lsls	r2, r0, #25
   244aa:	d506      	bpl.n	244ba <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   244ac:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   244b0:	2100      	movs	r1, #0
   244b2:	6a03      	ldr	r3, [r0, #32]
   244b4:	685b      	ldr	r3, [r3, #4]
   244b6:	4798      	blx	r3
}
   244b8:	e7f1      	b.n	2449e <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   244ba:	0743      	lsls	r3, r0, #29
   244bc:	d5ef      	bpl.n	2449e <rpmsg_init_vdev_with_config+0x156>
   244be:	e784      	b.n	243ca <rpmsg_init_vdev_with_config+0x82>
   244c0:	464b      	mov	r3, r9
   244c2:	e796      	b.n	243f2 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   244c4:	f1b8 0f01 	cmp.w	r8, #1
   244c8:	d1b1      	bne.n	2442e <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   244ca:	4b2e      	ldr	r3, [pc, #184]	; (24584 <rpmsg_init_vdev_with_config+0x23c>)
   244cc:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   244ce:	4b2c      	ldr	r3, [pc, #176]	; (24580 <rpmsg_init_vdev_with_config+0x238>)
   244d0:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   244d2:	4b2e      	ldr	r3, [pc, #184]	; (2458c <rpmsg_init_vdev_with_config+0x244>)
   244d4:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   244d6:	4b2c      	ldr	r3, [pc, #176]	; (24588 <rpmsg_init_vdev_with_config+0x240>)
   244d8:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   244da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   244dc:	699b      	ldr	r3, [r3, #24]
   244de:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   244e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   244e4:	681b      	ldr	r3, [r3, #0]
   244e6:	e7a0      	b.n	2442a <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   244e8:	4648      	mov	r0, r9
   244ea:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   244ee:	f00b fd44 	bl	2ff7a <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   244f2:	4605      	mov	r5, r0
   244f4:	b1c8      	cbz	r0, 2452a <rpmsg_init_vdev_with_config+0x1e2>
   244f6:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   244f8:	9008      	str	r0, [sp, #32]
   244fa:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   244fc:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   244fe:	2200      	movs	r2, #0
   24500:	4281      	cmp	r1, r0
   24502:	bf28      	it	cs
   24504:	f04f 31ff 	movcs.w	r1, #4294967295
   24508:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2450c:	4630      	mov	r0, r6
   2450e:	f00a fc75 	bl	2edfc <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   24512:	9500      	str	r5, [sp, #0]
   24514:	2301      	movs	r3, #1
   24516:	2200      	movs	r2, #0
   24518:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2451c:	a908      	add	r1, sp, #32
   2451e:	f00b fa6b 	bl	2f9f8 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   24522:	b918      	cbnz	r0, 2452c <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   24524:	f10a 0a01 	add.w	sl, sl, #1
   24528:	e7a4      	b.n	24474 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   2452a:	4819      	ldr	r0, [pc, #100]	; (24590 <rpmsg_init_vdev_with_config+0x248>)
   2452c:	4607      	mov	r7, r0
   2452e:	e716      	b.n	2435e <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   24530:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   24534:	e9c4 4400 	strd	r4, r4, [r4]
   24538:	2b00      	cmp	r3, #0
   2453a:	f43f af10 	beq.w	2435e <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   2453e:	2300      	movs	r3, #0
   24540:	9302      	str	r3, [sp, #8]
   24542:	4b14      	ldr	r3, [pc, #80]	; (24594 <rpmsg_init_vdev_with_config+0x24c>)
   24544:	4620      	mov	r0, r4
   24546:	9301      	str	r3, [sp, #4]
   24548:	2335      	movs	r3, #53	; 0x35
   2454a:	4a13      	ldr	r2, [pc, #76]	; (24598 <rpmsg_init_vdev_with_config+0x250>)
   2454c:	9300      	str	r3, [sp, #0]
   2454e:	f104 0108 	add.w	r1, r4, #8
   24552:	f7ff fd0f 	bl	23f74 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   24556:	f1b8 0f00 	cmp.w	r8, #0
   2455a:	f47f af00 	bne.w	2435e <rpmsg_init_vdev_with_config+0x16>
   2455e:	e794      	b.n	2448a <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   24560:	4f0b      	ldr	r7, [pc, #44]	; (24590 <rpmsg_init_vdev_with_config+0x248>)
   24562:	e6fc      	b.n	2435e <rpmsg_init_vdev_with_config+0x16>
   24564:	fffff82d 	.word	0xfffff82d
   24568:	00024279 	.word	0x00024279
   2456c:	0002fddb 	.word	0x0002fddb
   24570:	0002ff3b 	.word	0x0002ff3b
   24574:	0002ff99 	.word	0x0002ff99
   24578:	000240b5 	.word	0x000240b5
   2457c:	0002fdfb 	.word	0x0002fdfb
   24580:	0003812e 	.word	0x0003812e
   24584:	00038134 	.word	0x00038134
   24588:	0002419d 	.word	0x0002419d
   2458c:	0002fde9 	.word	0x0002fde9
   24590:	fffff82e 	.word	0xfffff82e
   24594:	0002fe3d 	.word	0x0002fe3d
   24598:	0003813a 	.word	0x0003813a

0002459c <rpmsg_init_vdev>:
{
   2459c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2459e:	4605      	mov	r5, r0
   245a0:	460e      	mov	r6, r1
   245a2:	4617      	mov	r7, r2
   245a4:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   245a6:	4a07      	ldr	r2, [pc, #28]	; (245c4 <rpmsg_init_vdev+0x28>)
   245a8:	ac03      	add	r4, sp, #12
   245aa:	ca07      	ldmia	r2, {r0, r1, r2}
   245ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   245b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   245b2:	4631      	mov	r1, r6
   245b4:	9200      	str	r2, [sp, #0]
   245b6:	4628      	mov	r0, r5
   245b8:	463a      	mov	r2, r7
   245ba:	9401      	str	r4, [sp, #4]
   245bc:	f7ff fec4 	bl	24348 <rpmsg_init_vdev_with_config>
}
   245c0:	b007      	add	sp, #28
   245c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   245c4:	000316c8 	.word	0x000316c8

000245c8 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   245c8:	2203      	movs	r2, #3
   245ca:	4b11      	ldr	r3, [pc, #68]	; (24610 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   245cc:	4911      	ldr	r1, [pc, #68]	; (24614 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   245ce:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   245d0:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   245d2:	4a11      	ldr	r2, [pc, #68]	; (24618 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   245d4:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   245d6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   245d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   245dc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   245de:	2200      	movs	r2, #0
   245e0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   245e2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   245e4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   245e6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   245e8:	490c      	ldr	r1, [pc, #48]	; (2461c <_DoInit+0x54>)
   245ea:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   245ec:	2110      	movs	r1, #16
   245ee:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   245f0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   245f2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   245f4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   245f6:	4a0a      	ldr	r2, [pc, #40]	; (24620 <_DoInit+0x58>)
   245f8:	6812      	ldr	r2, [r2, #0]
   245fa:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   245fe:	4a09      	ldr	r2, [pc, #36]	; (24624 <_DoInit+0x5c>)
   24600:	6810      	ldr	r0, [r2, #0]
   24602:	8892      	ldrh	r2, [r2, #4]
   24604:	6018      	str	r0, [r3, #0]
   24606:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   24608:	2220      	movs	r2, #32
   2460a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   2460c:	4770      	bx	lr
   2460e:	bf00      	nop
   24610:	200219e0 	.word	0x200219e0
   24614:	0003813d 	.word	0x0003813d
   24618:	20022427 	.word	0x20022427
   2461c:	20022417 	.word	0x20022417
   24620:	00038146 	.word	0x00038146
   24624:	0003814a 	.word	0x0003814a

00024628 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2462c:	f04f 0b18 	mov.w	fp, #24
   24630:	4f20      	ldr	r7, [pc, #128]	; (246b4 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24632:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   24634:	fb0b 7200 	mla	r2, fp, r0, r7
   24638:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2463a:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2463c:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2463e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24640:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   24642:	d831      	bhi.n	246a8 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   24644:	f8d2 a020 	ldr.w	sl, [r2, #32]
   24648:	ebaa 0905 	sub.w	r9, sl, r5
   2464c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   24650:	4294      	cmp	r4, r2
   24652:	d811      	bhi.n	24678 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24654:	2318      	movs	r3, #24
   24656:	fb06 3303 	mla	r3, r6, r3, r3
   2465a:	443b      	add	r3, r7
   2465c:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2465e:	4622      	mov	r2, r4
   24660:	4641      	mov	r1, r8
   24662:	4428      	add	r0, r5
   24664:	f00b ff83 	bl	3056e <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   24668:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   2466a:	2318      	movs	r3, #24
      return 1;
   2466c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   2466e:	fb03 7306 	mla	r3, r3, r6, r7
   24672:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   24674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   24678:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2467a:	429c      	cmp	r4, r3
   2467c:	d818      	bhi.n	246b0 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2467e:	fb00 bb0b 	mla	fp, r0, fp, fp
   24682:	44bb      	add	fp, r7
   24684:	f8db 0004 	ldr.w	r0, [fp, #4]
   24688:	464a      	mov	r2, r9
   2468a:	4428      	add	r0, r5
   2468c:	442c      	add	r4, r5
   2468e:	f00b ff6e 	bl	3056e <memcpy>
      if (NumBytes) {
   24692:	ebb4 040a 	subs.w	r4, r4, sl
   24696:	d0e8      	beq.n	2466a <SEGGER_RTT_WriteSkipNoLock+0x42>
   24698:	4622      	mov	r2, r4
   2469a:	f8db 0004 	ldr.w	r0, [fp, #4]
   2469e:	eb08 0109 	add.w	r1, r8, r9
   246a2:	f00b ff64 	bl	3056e <memcpy>
      return 1;
   246a6:	e7e0      	b.n	2466a <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   246a8:	3b01      	subs	r3, #1
   246aa:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   246ac:	42a3      	cmp	r3, r4
   246ae:	d2d1      	bcs.n	24654 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   246b0:	2000      	movs	r0, #0
   246b2:	e7df      	b.n	24674 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   246b4:	200219e0 	.word	0x200219e0

000246b8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   246b8:	2218      	movs	r2, #24
   246ba:	4b03      	ldr	r3, [pc, #12]	; (246c8 <SEGGER_RTT_HasDataUp+0x10>)
   246bc:	fb02 3300 	mla	r3, r2, r0, r3
   246c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   246c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   246c4:	1a80      	subs	r0, r0, r2
   246c6:	4770      	bx	lr
   246c8:	200219e0 	.word	0x200219e0

000246cc <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   246cc:	f04f 32ff 	mov.w	r2, #4294967295
   246d0:	f04f 33ff 	mov.w	r3, #4294967295
   246d4:	4801      	ldr	r0, [pc, #4]	; (246dc <zephyr_rtt_mutex_lock+0x10>)
   246d6:	f000 bd15 	b.w	25104 <z_impl_k_mutex_lock>
   246da:	bf00      	nop
   246dc:	20008b68 	.word	0x20008b68

000246e0 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   246e0:	4801      	ldr	r0, [pc, #4]	; (246e8 <zephyr_rtt_mutex_unlock+0x8>)
   246e2:	f000 bddf 	b.w	252a4 <z_impl_k_mutex_unlock>
   246e6:	bf00      	nop
   246e8:	20008b68 	.word	0x20008b68

000246ec <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   246ec:	4b01      	ldr	r3, [pc, #4]	; (246f4 <z_impl_z_errno+0x8>)
   246ee:	6898      	ldr	r0, [r3, #8]
}
   246f0:	3064      	adds	r0, #100	; 0x64
   246f2:	4770      	bx	lr
   246f4:	20021a88 	.word	0x20021a88

000246f8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   246f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   246fc:	b086      	sub	sp, #24
   246fe:	4604      	mov	r4, r0
   24700:	460e      	mov	r6, r1
   24702:	af00      	add	r7, sp, #0
	__asm__ volatile(
   24704:	f04f 0320 	mov.w	r3, #32
   24708:	f3ef 8811 	mrs	r8, BASEPRI
   2470c:	f383 8812 	msr	BASEPRI_MAX, r3
   24710:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   24714:	f002 fe80 	bl	27418 <z_impl_z_current_get>
   24718:	2c04      	cmp	r4, #4
   2471a:	bf98      	it	ls
   2471c:	4b34      	ldrls	r3, [pc, #208]	; (247f0 <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2471e:	46e9      	mov	r9, sp
   24720:	b08a      	sub	sp, #40	; 0x28
   24722:	4605      	mov	r5, r0
   24724:	466a      	mov	r2, sp
   24726:	bf94      	ite	ls
   24728:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   2472c:	4b31      	ldrhi	r3, [pc, #196]	; (247f4 <z_fatal_error+0xfc>)
   2472e:	61d3      	str	r3, [r2, #28]
   24730:	f240 3301 	movw	r3, #769	; 0x301
   24734:	f04f 0a00 	mov.w	sl, #0
   24738:	8493      	strh	r3, [r2, #36]	; 0x24
   2473a:	492f      	ldr	r1, [pc, #188]	; (247f8 <z_fatal_error+0x100>)
   2473c:	4b2f      	ldr	r3, [pc, #188]	; (247fc <z_fatal_error+0x104>)
   2473e:	e9c2 1405 	strd	r1, r4, [r2, #20]
   24742:	f8c2 a020 	str.w	sl, [r2, #32]
   24746:	f842 3f10 	str.w	r3, [r2, #16]!
   2474a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2474e:	4653      	mov	r3, sl
   24750:	482b      	ldr	r0, [pc, #172]	; (24800 <z_fatal_error+0x108>)
   24752:	f7ea f89d 	bl	e890 <z_impl_z_log_msg_static_create>
   24756:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24758:	b17e      	cbz	r6, 2477a <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2475a:	69f3      	ldr	r3, [r6, #28]
   2475c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   24760:	b15b      	cbz	r3, 2477a <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   24762:	4b28      	ldr	r3, [pc, #160]	; (24804 <z_fatal_error+0x10c>)
   24764:	617b      	str	r3, [r7, #20]
   24766:	2302      	movs	r3, #2
   24768:	613b      	str	r3, [r7, #16]
   2476a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2476e:	4653      	mov	r3, sl
   24770:	4823      	ldr	r0, [pc, #140]	; (24800 <z_fatal_error+0x108>)
   24772:	f107 0210 	add.w	r2, r7, #16
   24776:	f7ea f88b 	bl	e890 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2477a:	b12d      	cbz	r5, 24788 <z_fatal_error+0x90>
   2477c:	4628      	mov	r0, r5
   2477e:	f00b fcec 	bl	3015a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   24782:	b108      	cbz	r0, 24788 <z_fatal_error+0x90>
   24784:	7803      	ldrb	r3, [r0, #0]
   24786:	b903      	cbnz	r3, 2478a <z_fatal_error+0x92>
		thread_name = "unknown";
   24788:	481f      	ldr	r0, [pc, #124]	; (24808 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2478a:	46e9      	mov	r9, sp
   2478c:	b08a      	sub	sp, #40	; 0x28
   2478e:	466a      	mov	r2, sp
   24790:	4b1e      	ldr	r3, [pc, #120]	; (2480c <z_fatal_error+0x114>)
   24792:	61d0      	str	r0, [r2, #28]
   24794:	e9c2 3505 	strd	r3, r5, [r2, #20]
   24798:	f240 3301 	movw	r3, #769	; 0x301
   2479c:	8413      	strh	r3, [r2, #32]
   2479e:	4b1c      	ldr	r3, [pc, #112]	; (24810 <z_fatal_error+0x118>)
   247a0:	f842 3f10 	str.w	r3, [r2, #16]!
   247a4:	2300      	movs	r3, #0
   247a6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   247aa:	4815      	ldr	r0, [pc, #84]	; (24800 <z_fatal_error+0x108>)
   247ac:	f7ea f870 	bl	e890 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   247b0:	4631      	mov	r1, r6
   247b2:	46cd      	mov	sp, r9
   247b4:	4620      	mov	r0, r4
   247b6:	f7fa f969 	bl	1ea8c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   247ba:	2c04      	cmp	r4, #4
   247bc:	d10c      	bne.n	247d8 <z_fatal_error+0xe0>
   247be:	4915      	ldr	r1, [pc, #84]	; (24814 <z_fatal_error+0x11c>)
   247c0:	2393      	movs	r3, #147	; 0x93
   247c2:	4a15      	ldr	r2, [pc, #84]	; (24818 <z_fatal_error+0x120>)
   247c4:	4815      	ldr	r0, [pc, #84]	; (2481c <z_fatal_error+0x124>)
   247c6:	f005 ff78 	bl	2a6ba <assert_print>
   247ca:	4815      	ldr	r0, [pc, #84]	; (24820 <z_fatal_error+0x128>)
   247cc:	f005 ff75 	bl	2a6ba <assert_print>
   247d0:	2193      	movs	r1, #147	; 0x93
   247d2:	4811      	ldr	r0, [pc, #68]	; (24818 <z_fatal_error+0x120>)
   247d4:	f005 ff6a 	bl	2a6ac <assert_post_action>
	__asm__ volatile(
   247d8:	f388 8811 	msr	BASEPRI, r8
   247dc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   247e0:	4628      	mov	r0, r5
   247e2:	f7ec fe23 	bl	1142c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   247e6:	3718      	adds	r7, #24
   247e8:	46bd      	mov	sp, r7
   247ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   247ee:	bf00      	nop
   247f0:	00032538 	.word	0x00032538
   247f4:	00038151 	.word	0x00038151
   247f8:	00038167 	.word	0x00038167
   247fc:	01000005 	.word	0x01000005
   24800:	000315a4 	.word	0x000315a4
   24804:	0003818f 	.word	0x0003818f
   24808:	0003815f 	.word	0x0003815f
   2480c:	000381b0 	.word	0x000381b0
   24810:	01000004 	.word	0x01000004
   24814:	000381ea 	.word	0x000381ea
   24818:	000381c8 	.word	0x000381c8
   2481c:	00032659 	.word	0x00032659
   24820:	00038207 	.word	0x00038207

00024824 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24824:	4b0f      	ldr	r3, [pc, #60]	; (24864 <z_sys_init_run_level+0x40>)
{
   24826:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24828:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2482c:	3001      	adds	r0, #1
   2482e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   24832:	42a6      	cmp	r6, r4
   24834:	d800      	bhi.n	24838 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   24836:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   24838:	e9d4 3500 	ldrd	r3, r5, [r4]
   2483c:	4628      	mov	r0, r5
   2483e:	4798      	blx	r3
		if (dev != NULL) {
   24840:	b16d      	cbz	r5, 2485e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   24842:	b138      	cbz	r0, 24854 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   24844:	2800      	cmp	r0, #0
   24846:	bfb8      	it	lt
   24848:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   2484a:	28ff      	cmp	r0, #255	; 0xff
   2484c:	bfa8      	it	ge
   2484e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   24850:	68eb      	ldr	r3, [r5, #12]
   24852:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   24854:	68ea      	ldr	r2, [r5, #12]
   24856:	7853      	ldrb	r3, [r2, #1]
   24858:	f043 0301 	orr.w	r3, r3, #1
   2485c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2485e:	3408      	adds	r4, #8
   24860:	e7e7      	b.n	24832 <z_sys_init_run_level+0xe>
   24862:	bf00      	nop
   24864:	0003254c 	.word	0x0003254c

00024868 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   24868:	2201      	movs	r2, #1
{
   2486a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2486c:	4b09      	ldr	r3, [pc, #36]	; (24894 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2486e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   24870:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24872:	f7ff ffd7 	bl	24824 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   24876:	f003 fed7 	bl	28628 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2487a:	2004      	movs	r0, #4
   2487c:	f7ff ffd2 	bl	24824 <z_sys_init_run_level>

	z_init_static_threads();
   24880:	f000 fb66 	bl	24f50 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   24884:	f7e7 f82c 	bl	b8e0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24888:	4a03      	ldr	r2, [pc, #12]	; (24898 <bg_thread_main+0x30>)
   2488a:	7b13      	ldrb	r3, [r2, #12]
   2488c:	f023 0301 	bic.w	r3, r3, #1
   24890:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   24892:	bd08      	pop	{r3, pc}
   24894:	20022827 	.word	0x20022827
   24898:	2000a1e8 	.word	0x2000a1e8

0002489c <z_bss_zero>:
{
   2489c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2489e:	4803      	ldr	r0, [pc, #12]	; (248ac <z_bss_zero+0x10>)
   248a0:	4a03      	ldr	r2, [pc, #12]	; (248b0 <z_bss_zero+0x14>)
   248a2:	2100      	movs	r1, #0
   248a4:	1a12      	subs	r2, r2, r0
   248a6:	f00b fc23 	bl	300f0 <z_early_memset>
}
   248aa:	bd08      	pop	{r3, pc}
   248ac:	20008e40 	.word	0x20008e40
   248b0:	20022828 	.word	0x20022828

000248b4 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   248b4:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   248b6:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   248b8:	4e13      	ldr	r6, [pc, #76]	; (24908 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   248ba:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   248bc:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   248c0:	2300      	movs	r3, #0
{
   248c2:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   248c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   248c8:	220f      	movs	r2, #15
   248ca:	9301      	str	r3, [sp, #4]
   248cc:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   248d0:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   248d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   248d6:	4d0d      	ldr	r5, [pc, #52]	; (2490c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   248d8:	490d      	ldr	r1, [pc, #52]	; (24910 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   248da:	fb03 5500 	mla	r5, r3, r0, r5
{
   248de:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   248e0:	fb02 1100 	mla	r1, r2, r0, r1
   248e4:	4b0b      	ldr	r3, [pc, #44]	; (24914 <z_init_cpu+0x60>)
   248e6:	4630      	mov	r0, r6
   248e8:	9500      	str	r5, [sp, #0]
   248ea:	f000 fa97 	bl	24e1c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   248ee:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   248f0:	752c      	strb	r4, [r5, #20]
   248f2:	f023 0304 	bic.w	r3, r3, #4
   248f6:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   248f8:	4b07      	ldr	r3, [pc, #28]	; (24918 <z_init_cpu+0x64>)
   248fa:	3401      	adds	r4, #1
   248fc:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   24900:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   24902:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   24904:	b006      	add	sp, #24
   24906:	bd70      	pop	{r4, r5, r6, pc}
   24908:	2000a160 	.word	0x2000a160
   2490c:	20021a88 	.word	0x20021a88
   24910:	20033eb0 	.word	0x20033eb0
   24914:	000250a1 	.word	0x000250a1
   24918:	200336b0 	.word	0x200336b0

0002491c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2491c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2491e:	2000      	movs	r0, #0
{
   24920:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   24922:	f7ff ff7f 	bl	24824 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   24926:	4b2f      	ldr	r3, [pc, #188]	; (249e4 <z_cstart+0xc8>)
	uint32_t msp =
   24928:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2492c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   24930:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   24934:	2400      	movs	r4, #0
   24936:	23e0      	movs	r3, #224	; 0xe0
   24938:	4d2b      	ldr	r5, [pc, #172]	; (249e8 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   2493a:	4e2c      	ldr	r6, [pc, #176]	; (249ec <z_cstart+0xd0>)
   2493c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   24940:	77ec      	strb	r4, [r5, #31]
   24942:	762c      	strb	r4, [r5, #24]
   24944:	766c      	strb	r4, [r5, #25]
   24946:	76ac      	strb	r4, [r5, #26]
   24948:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2494c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2494e:	4f28      	ldr	r7, [pc, #160]	; (249f0 <z_cstart+0xd4>)
   24950:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   24954:	626b      	str	r3, [r5, #36]	; 0x24
   24956:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2495a:	f7ec fccb 	bl	112f4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2495e:	f7eb ffd9 	bl	10914 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   24962:	f04f 33ff 	mov.w	r3, #4294967295
   24966:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24968:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2496a:	f7ec ff3f 	bl	117ec <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2496e:	f7ec fd73 	bl	11458 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   24972:	f7e9 fd83 	bl	e47c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   24976:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2497a:	ad06      	add	r5, sp, #24
   2497c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   2497e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   24982:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   24986:	f003 fe31 	bl	285ec <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2498a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2498c:	f00b fba4 	bl	300d8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   24990:	2001      	movs	r0, #1
   24992:	f7ff ff47 	bl	24824 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   24996:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   24998:	4d16      	ldr	r5, [pc, #88]	; (249f4 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2499a:	f7ff ff43 	bl	24824 <z_sys_init_run_level>
	z_sched_init();
   2499e:	f002 fbc1 	bl	27124 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   249a2:	4b15      	ldr	r3, [pc, #84]	; (249f8 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   249a4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   249a6:	9305      	str	r3, [sp, #20]
   249a8:	2301      	movs	r3, #1
   249aa:	4914      	ldr	r1, [pc, #80]	; (249fc <z_cstart+0xe0>)
   249ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   249b0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   249b4:	4628      	mov	r0, r5
   249b6:	463b      	mov	r3, r7
   249b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   249bc:	9400      	str	r4, [sp, #0]
   249be:	f000 fa2d 	bl	24e1c <z_setup_new_thread>
   249c2:	4606      	mov	r6, r0
   249c4:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   249c6:	4628      	mov	r0, r5
   249c8:	f022 0204 	bic.w	r2, r2, #4
   249cc:	736a      	strb	r2, [r5, #13]
   249ce:	f001 fd81 	bl	264d4 <z_ready_thread>
	z_init_cpu(0);
   249d2:	4620      	mov	r0, r4
   249d4:	f7ff ff6e 	bl	248b4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   249d8:	463a      	mov	r2, r7
   249da:	4631      	mov	r1, r6
   249dc:	4628      	mov	r0, r5
   249de:	f7ec f919 	bl	10c14 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   249e2:	bf00      	nop
   249e4:	200336b0 	.word	0x200336b0
   249e8:	e000ed00 	.word	0xe000ed00
   249ec:	20021a88 	.word	0x20021a88
   249f0:	00024869 	.word	0x00024869
   249f4:	2000a1e8 	.word	0x2000a1e8
   249f8:	00038286 	.word	0x00038286
   249fc:	20033ff0 	.word	0x20033ff0

00024a00 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   24a00:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24a02:	4c0d      	ldr	r4, [pc, #52]	; (24a38 <statics_init+0x38>)
   24a04:	4d0d      	ldr	r5, [pc, #52]	; (24a3c <statics_init+0x3c>)
   24a06:	42ac      	cmp	r4, r5
   24a08:	d913      	bls.n	24a32 <statics_init+0x32>
   24a0a:	490d      	ldr	r1, [pc, #52]	; (24a40 <statics_init+0x40>)
   24a0c:	2318      	movs	r3, #24
   24a0e:	4a0d      	ldr	r2, [pc, #52]	; (24a44 <statics_init+0x44>)
   24a10:	480d      	ldr	r0, [pc, #52]	; (24a48 <statics_init+0x48>)
   24a12:	f005 fe52 	bl	2a6ba <assert_print>
   24a16:	480d      	ldr	r0, [pc, #52]	; (24a4c <statics_init+0x4c>)
   24a18:	f005 fe4f 	bl	2a6ba <assert_print>
   24a1c:	2118      	movs	r1, #24
   24a1e:	4809      	ldr	r0, [pc, #36]	; (24a44 <statics_init+0x44>)
   24a20:	f005 fe44 	bl	2a6ac <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   24a24:	4620      	mov	r0, r4
   24a26:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   24a2a:	f00b fb65 	bl	300f8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24a2e:	3418      	adds	r4, #24
   24a30:	e7e9      	b.n	24a06 <statics_init+0x6>
   24a32:	d3f7      	bcc.n	24a24 <statics_init+0x24>
		}
	}
	return 0;
}
   24a34:	2000      	movs	r0, #0
   24a36:	bd38      	pop	{r3, r4, r5, pc}
   24a38:	20008afc 	.word	0x20008afc
   24a3c:	20008b2c 	.word	0x20008b2c
   24a40:	000382b0 	.word	0x000382b0
   24a44:	0003828e 	.word	0x0003828e
   24a48:	00032659 	.word	0x00032659
   24a4c:	000336ed 	.word	0x000336ed

00024a50 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   24a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a54:	b085      	sub	sp, #20
   24a56:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   24a5a:	4680      	mov	r8, r0
   24a5c:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a5e:	4648      	mov	r0, r9
   24a60:	4659      	mov	r1, fp
{
   24a62:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a64:	f00b fc70 	bl	30348 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24a68:	f1bb 3fff 	cmp.w	fp, #4294967295
   24a6c:	bf08      	it	eq
   24a6e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a72:	4606      	mov	r6, r0
   24a74:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24a76:	bf04      	itt	eq
   24a78:	f04f 36ff 	moveq.w	r6, #4294967295
   24a7c:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24a80:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   24a84:	f04f 0320 	mov.w	r3, #32
   24a88:	f3ef 8511 	mrs	r5, BASEPRI
   24a8c:	f383 8812 	msr	BASEPRI_MAX, r3
   24a90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a94:	4620      	mov	r0, r4
   24a96:	f000 fadf 	bl	25058 <z_spin_lock_valid>
   24a9a:	b960      	cbnz	r0, 24ab6 <k_heap_aligned_alloc+0x66>
   24a9c:	2394      	movs	r3, #148	; 0x94
   24a9e:	4a33      	ldr	r2, [pc, #204]	; (24b6c <k_heap_aligned_alloc+0x11c>)
   24aa0:	4933      	ldr	r1, [pc, #204]	; (24b70 <k_heap_aligned_alloc+0x120>)
   24aa2:	4834      	ldr	r0, [pc, #208]	; (24b74 <k_heap_aligned_alloc+0x124>)
   24aa4:	f005 fe09 	bl	2a6ba <assert_print>
   24aa8:	4621      	mov	r1, r4
   24aaa:	4833      	ldr	r0, [pc, #204]	; (24b78 <k_heap_aligned_alloc+0x128>)
   24aac:	f005 fe05 	bl	2a6ba <assert_print>
   24ab0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ab2:	482e      	ldr	r0, [pc, #184]	; (24b6c <k_heap_aligned_alloc+0x11c>)
   24ab4:	e031      	b.n	24b1a <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   24ab6:	4620      	mov	r0, r4
   24ab8:	f000 faea 	bl	25090 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24abc:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24ac0:	b113      	cbz	r3, 24ac8 <k_heap_aligned_alloc+0x78>
   24ac2:	ea5b 0909 	orrs.w	r9, fp, r9
   24ac6:	d11d      	bne.n	24b04 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24ac8:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24acc:	4652      	mov	r2, sl
   24ace:	4640      	mov	r0, r8
   24ad0:	9903      	ldr	r1, [sp, #12]
   24ad2:	f7e7 ffa5 	bl	ca20 <sys_heap_aligned_alloc>
   24ad6:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   24ad8:	f003 f88c 	bl	27bf4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   24adc:	f1b9 0f00 	cmp.w	r9, #0
   24ae0:	d01d      	beq.n	24b1e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ae2:	4620      	mov	r0, r4
   24ae4:	f000 fac6 	bl	25074 <z_spin_unlock_valid>
   24ae8:	2800      	cmp	r0, #0
   24aea:	d137      	bne.n	24b5c <k_heap_aligned_alloc+0x10c>
   24aec:	23c2      	movs	r3, #194	; 0xc2
   24aee:	4a1f      	ldr	r2, [pc, #124]	; (24b6c <k_heap_aligned_alloc+0x11c>)
   24af0:	4922      	ldr	r1, [pc, #136]	; (24b7c <k_heap_aligned_alloc+0x12c>)
   24af2:	4820      	ldr	r0, [pc, #128]	; (24b74 <k_heap_aligned_alloc+0x124>)
   24af4:	f005 fde1 	bl	2a6ba <assert_print>
   24af8:	4621      	mov	r1, r4
   24afa:	4821      	ldr	r0, [pc, #132]	; (24b80 <k_heap_aligned_alloc+0x130>)
   24afc:	f005 fddd 	bl	2a6ba <assert_print>
   24b00:	21c2      	movs	r1, #194	; 0xc2
   24b02:	e7d6      	b.n	24ab2 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24b04:	491f      	ldr	r1, [pc, #124]	; (24b84 <k_heap_aligned_alloc+0x134>)
   24b06:	234c      	movs	r3, #76	; 0x4c
   24b08:	4a1f      	ldr	r2, [pc, #124]	; (24b88 <k_heap_aligned_alloc+0x138>)
   24b0a:	481a      	ldr	r0, [pc, #104]	; (24b74 <k_heap_aligned_alloc+0x124>)
   24b0c:	f005 fdd5 	bl	2a6ba <assert_print>
   24b10:	481e      	ldr	r0, [pc, #120]	; (24b8c <k_heap_aligned_alloc+0x13c>)
   24b12:	f005 fdd2 	bl	2a6ba <assert_print>
   24b16:	214c      	movs	r1, #76	; 0x4c
   24b18:	481b      	ldr	r0, [pc, #108]	; (24b88 <k_heap_aligned_alloc+0x138>)
   24b1a:	f005 fdc7 	bl	2a6ac <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   24b1e:	1a30      	subs	r0, r6, r0
   24b20:	eb67 0101 	sbc.w	r1, r7, r1
   24b24:	2801      	cmp	r0, #1
   24b26:	f171 0300 	sbcs.w	r3, r1, #0
   24b2a:	dbda      	blt.n	24ae2 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24b2c:	e9cd 0100 	strd	r0, r1, [sp]
   24b30:	465a      	mov	r2, fp
   24b32:	4629      	mov	r1, r5
   24b34:	4620      	mov	r0, r4
   24b36:	f002 f827 	bl	26b88 <z_pend_curr>
   24b3a:	f04f 0320 	mov.w	r3, #32
   24b3e:	f3ef 8511 	mrs	r5, BASEPRI
   24b42:	f383 8812 	msr	BASEPRI_MAX, r3
   24b46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b4a:	4620      	mov	r0, r4
   24b4c:	f000 fa84 	bl	25058 <z_spin_lock_valid>
   24b50:	2800      	cmp	r0, #0
   24b52:	d0a3      	beq.n	24a9c <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   24b54:	4620      	mov	r0, r4
   24b56:	f000 fa9b 	bl	25090 <z_spin_lock_set_owner>
	return k;
   24b5a:	e7b7      	b.n	24acc <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   24b5c:	f385 8811 	msr	BASEPRI, r5
   24b60:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24b64:	4648      	mov	r0, r9
   24b66:	b005      	add	sp, #20
   24b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b6c:	000333ee 	.word	0x000333ee
   24b70:	00033447 	.word	0x00033447
   24b74:	00032659 	.word	0x00032659
   24b78:	0003345c 	.word	0x0003345c
   24b7c:	0003341b 	.word	0x0003341b
   24b80:	00033432 	.word	0x00033432
   24b84:	000382c6 	.word	0x000382c6
   24b88:	0003828e 	.word	0x0003828e
   24b8c:	000368ea 	.word	0x000368ea

00024b90 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b92:	4605      	mov	r5, r0
   24b94:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24b96:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   24b9a:	f04f 0320 	mov.w	r3, #32
   24b9e:	f3ef 8711 	mrs	r7, BASEPRI
   24ba2:	f383 8812 	msr	BASEPRI_MAX, r3
   24ba6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24baa:	4620      	mov	r0, r4
   24bac:	f000 fa54 	bl	25058 <z_spin_lock_valid>
   24bb0:	b968      	cbnz	r0, 24bce <k_heap_free+0x3e>
   24bb2:	2394      	movs	r3, #148	; 0x94
   24bb4:	4a19      	ldr	r2, [pc, #100]	; (24c1c <k_heap_free+0x8c>)
   24bb6:	491a      	ldr	r1, [pc, #104]	; (24c20 <k_heap_free+0x90>)
   24bb8:	481a      	ldr	r0, [pc, #104]	; (24c24 <k_heap_free+0x94>)
   24bba:	f005 fd7e 	bl	2a6ba <assert_print>
   24bbe:	4621      	mov	r1, r4
   24bc0:	4819      	ldr	r0, [pc, #100]	; (24c28 <k_heap_free+0x98>)
   24bc2:	f005 fd7a 	bl	2a6ba <assert_print>
   24bc6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24bc8:	4814      	ldr	r0, [pc, #80]	; (24c1c <k_heap_free+0x8c>)
   24bca:	f005 fd6f 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   24bce:	4620      	mov	r0, r4
   24bd0:	f000 fa5e 	bl	25090 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   24bd4:	4628      	mov	r0, r5
   24bd6:	4631      	mov	r1, r6
   24bd8:	f7e7 fedc 	bl	c994 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24bdc:	f105 000c 	add.w	r0, r5, #12
   24be0:	f00b fb98 	bl	30314 <z_unpend_all>
   24be4:	b128      	cbz	r0, 24bf2 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   24be6:	4639      	mov	r1, r7
   24be8:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24bea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   24bee:	f001 bcfd 	b.w	265ec <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24bf2:	4620      	mov	r0, r4
   24bf4:	f000 fa3e 	bl	25074 <z_spin_unlock_valid>
   24bf8:	b958      	cbnz	r0, 24c12 <k_heap_free+0x82>
   24bfa:	23c2      	movs	r3, #194	; 0xc2
   24bfc:	4a07      	ldr	r2, [pc, #28]	; (24c1c <k_heap_free+0x8c>)
   24bfe:	490b      	ldr	r1, [pc, #44]	; (24c2c <k_heap_free+0x9c>)
   24c00:	4808      	ldr	r0, [pc, #32]	; (24c24 <k_heap_free+0x94>)
   24c02:	f005 fd5a 	bl	2a6ba <assert_print>
   24c06:	4621      	mov	r1, r4
   24c08:	4809      	ldr	r0, [pc, #36]	; (24c30 <k_heap_free+0xa0>)
   24c0a:	f005 fd56 	bl	2a6ba <assert_print>
   24c0e:	21c2      	movs	r1, #194	; 0xc2
   24c10:	e7da      	b.n	24bc8 <k_heap_free+0x38>
	__asm__ volatile(
   24c12:	f387 8811 	msr	BASEPRI, r7
   24c16:	f3bf 8f6f 	isb	sy
}
   24c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24c1c:	000333ee 	.word	0x000333ee
   24c20:	00033447 	.word	0x00033447
   24c24:	00032659 	.word	0x00032659
   24c28:	0003345c 	.word	0x0003345c
   24c2c:	0003341b 	.word	0x0003341b
   24c30:	00033432 	.word	0x00033432

00024c34 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   24c34:	2000      	movs	r0, #0
{
   24c36:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24c38:	4c0c      	ldr	r4, [pc, #48]	; (24c6c <init_mem_slab_module+0x38>)
   24c3a:	4d0d      	ldr	r5, [pc, #52]	; (24c70 <init_mem_slab_module+0x3c>)
   24c3c:	42ac      	cmp	r4, r5
   24c3e:	d913      	bls.n	24c68 <init_mem_slab_module+0x34>
   24c40:	490c      	ldr	r1, [pc, #48]	; (24c74 <init_mem_slab_module+0x40>)
   24c42:	233d      	movs	r3, #61	; 0x3d
   24c44:	4a0c      	ldr	r2, [pc, #48]	; (24c78 <init_mem_slab_module+0x44>)
   24c46:	480d      	ldr	r0, [pc, #52]	; (24c7c <init_mem_slab_module+0x48>)
   24c48:	f005 fd37 	bl	2a6ba <assert_print>
   24c4c:	480c      	ldr	r0, [pc, #48]	; (24c80 <init_mem_slab_module+0x4c>)
   24c4e:	f005 fd34 	bl	2a6ba <assert_print>
   24c52:	213d      	movs	r1, #61	; 0x3d
   24c54:	4808      	ldr	r0, [pc, #32]	; (24c78 <init_mem_slab_module+0x44>)
   24c56:	f005 fd29 	bl	2a6ac <assert_post_action>
		rc = create_free_list(slab);
   24c5a:	4620      	mov	r0, r4
   24c5c:	f00b fa5e 	bl	3011c <create_free_list>
		if (rc < 0) {
   24c60:	2800      	cmp	r0, #0
   24c62:	db02      	blt.n	24c6a <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24c64:	3420      	adds	r4, #32
   24c66:	e7e9      	b.n	24c3c <init_mem_slab_module+0x8>
   24c68:	d3f7      	bcc.n	24c5a <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   24c6a:	bd38      	pop	{r3, r4, r5, pc}
   24c6c:	20008a5c 	.word	0x20008a5c
   24c70:	20008afc 	.word	0x20008afc
   24c74:	00038331 	.word	0x00038331
   24c78:	0003830c 	.word	0x0003830c
   24c7c:	00032659 	.word	0x00032659
   24c80:	000336ed 	.word	0x000336ed

00024c84 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   24c84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24c88:	4604      	mov	r4, r0
   24c8a:	460e      	mov	r6, r1
   24c8c:	4690      	mov	r8, r2
   24c8e:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24c90:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24c94:	f04f 0320 	mov.w	r3, #32
   24c98:	f3ef 8911 	mrs	r9, BASEPRI
   24c9c:	f383 8812 	msr	BASEPRI_MAX, r3
   24ca0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ca4:	4628      	mov	r0, r5
   24ca6:	f000 f9d7 	bl	25058 <z_spin_lock_valid>
   24caa:	b968      	cbnz	r0, 24cc8 <k_mem_slab_alloc+0x44>
   24cac:	2394      	movs	r3, #148	; 0x94
   24cae:	4a23      	ldr	r2, [pc, #140]	; (24d3c <k_mem_slab_alloc+0xb8>)
   24cb0:	4923      	ldr	r1, [pc, #140]	; (24d40 <k_mem_slab_alloc+0xbc>)
   24cb2:	4824      	ldr	r0, [pc, #144]	; (24d44 <k_mem_slab_alloc+0xc0>)
   24cb4:	f005 fd01 	bl	2a6ba <assert_print>
   24cb8:	4629      	mov	r1, r5
   24cba:	4823      	ldr	r0, [pc, #140]	; (24d48 <k_mem_slab_alloc+0xc4>)
   24cbc:	f005 fcfd 	bl	2a6ba <assert_print>
   24cc0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24cc2:	481e      	ldr	r0, [pc, #120]	; (24d3c <k_mem_slab_alloc+0xb8>)
   24cc4:	f005 fcf2 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   24cc8:	4628      	mov	r0, r5
   24cca:	f000 f9e1 	bl	25090 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24cce:	69a3      	ldr	r3, [r4, #24]
   24cd0:	b1b3      	cbz	r3, 24d00 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   24cd2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   24cd4:	681b      	ldr	r3, [r3, #0]
   24cd6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   24cd8:	69e3      	ldr	r3, [r4, #28]
   24cda:	3301      	adds	r3, #1
   24cdc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24cde:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ce0:	4628      	mov	r0, r5
   24ce2:	f000 f9c7 	bl	25074 <z_spin_unlock_valid>
   24ce6:	bb18      	cbnz	r0, 24d30 <k_mem_slab_alloc+0xac>
   24ce8:	23c2      	movs	r3, #194	; 0xc2
   24cea:	4a14      	ldr	r2, [pc, #80]	; (24d3c <k_mem_slab_alloc+0xb8>)
   24cec:	4917      	ldr	r1, [pc, #92]	; (24d4c <k_mem_slab_alloc+0xc8>)
   24cee:	4815      	ldr	r0, [pc, #84]	; (24d44 <k_mem_slab_alloc+0xc0>)
   24cf0:	f005 fce3 	bl	2a6ba <assert_print>
   24cf4:	4629      	mov	r1, r5
   24cf6:	4816      	ldr	r0, [pc, #88]	; (24d50 <k_mem_slab_alloc+0xcc>)
   24cf8:	f005 fcdf 	bl	2a6ba <assert_print>
   24cfc:	21c2      	movs	r1, #194	; 0xc2
   24cfe:	e7e0      	b.n	24cc2 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   24d00:	ea58 0207 	orrs.w	r2, r8, r7
   24d04:	d103      	bne.n	24d0e <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   24d06:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   24d0a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   24d0c:	e7e8      	b.n	24ce0 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   24d0e:	4622      	mov	r2, r4
   24d10:	4649      	mov	r1, r9
   24d12:	4628      	mov	r0, r5
   24d14:	e9cd 8700 	strd	r8, r7, [sp]
   24d18:	f001 ff36 	bl	26b88 <z_pend_curr>
		if (result == 0) {
   24d1c:	4604      	mov	r4, r0
   24d1e:	b918      	cbnz	r0, 24d28 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   24d20:	4b0c      	ldr	r3, [pc, #48]	; (24d54 <k_mem_slab_alloc+0xd0>)
   24d22:	689b      	ldr	r3, [r3, #8]
   24d24:	695b      	ldr	r3, [r3, #20]
   24d26:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   24d28:	4620      	mov	r0, r4
   24d2a:	b003      	add	sp, #12
   24d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   24d30:	f389 8811 	msr	BASEPRI, r9
   24d34:	f3bf 8f6f 	isb	sy
	return result;
   24d38:	e7f6      	b.n	24d28 <k_mem_slab_alloc+0xa4>
   24d3a:	bf00      	nop
   24d3c:	000333ee 	.word	0x000333ee
   24d40:	00033447 	.word	0x00033447
   24d44:	00032659 	.word	0x00032659
   24d48:	0003345c 	.word	0x0003345c
   24d4c:	0003341b 	.word	0x0003341b
   24d50:	00033432 	.word	0x00033432
   24d54:	20021a88 	.word	0x20021a88

00024d58 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d5c:	4604      	mov	r4, r0
   24d5e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24d60:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24d64:	f04f 0320 	mov.w	r3, #32
   24d68:	f3ef 8711 	mrs	r7, BASEPRI
   24d6c:	f383 8812 	msr	BASEPRI_MAX, r3
   24d70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d74:	4628      	mov	r0, r5
   24d76:	f000 f96f 	bl	25058 <z_spin_lock_valid>
   24d7a:	b968      	cbnz	r0, 24d98 <k_mem_slab_free+0x40>
   24d7c:	2394      	movs	r3, #148	; 0x94
   24d7e:	4a21      	ldr	r2, [pc, #132]	; (24e04 <k_mem_slab_free+0xac>)
   24d80:	4921      	ldr	r1, [pc, #132]	; (24e08 <k_mem_slab_free+0xb0>)
   24d82:	4822      	ldr	r0, [pc, #136]	; (24e0c <k_mem_slab_free+0xb4>)
   24d84:	f005 fc99 	bl	2a6ba <assert_print>
   24d88:	4629      	mov	r1, r5
   24d8a:	4821      	ldr	r0, [pc, #132]	; (24e10 <k_mem_slab_free+0xb8>)
   24d8c:	f005 fc95 	bl	2a6ba <assert_print>
   24d90:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d92:	481c      	ldr	r0, [pc, #112]	; (24e04 <k_mem_slab_free+0xac>)
   24d94:	f005 fc8a 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   24d98:	4628      	mov	r0, r5
   24d9a:	f000 f979 	bl	25090 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24d9e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   24da2:	f1b8 0f00 	cmp.w	r8, #0
   24da6:	d10f      	bne.n	24dc8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24da8:	4620      	mov	r0, r4
   24daa:	f002 f96b 	bl	27084 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   24dae:	b158      	cbz	r0, 24dc8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24db0:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   24db2:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24db6:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   24db8:	f001 fb8c 	bl	264d4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24dbc:	4639      	mov	r1, r7
   24dbe:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   24dc4:	f001 bc12 	b.w	265ec <z_reschedule>
	**(char ***) mem = slab->free_list;
   24dc8:	6833      	ldr	r3, [r6, #0]
   24dca:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dcc:	4628      	mov	r0, r5
   24dce:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24dd0:	6833      	ldr	r3, [r6, #0]
   24dd2:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   24dd4:	69e3      	ldr	r3, [r4, #28]
   24dd6:	3b01      	subs	r3, #1
   24dd8:	61e3      	str	r3, [r4, #28]
   24dda:	f000 f94b 	bl	25074 <z_spin_unlock_valid>
   24dde:	b958      	cbnz	r0, 24df8 <k_mem_slab_free+0xa0>
   24de0:	23c2      	movs	r3, #194	; 0xc2
   24de2:	4a08      	ldr	r2, [pc, #32]	; (24e04 <k_mem_slab_free+0xac>)
   24de4:	490b      	ldr	r1, [pc, #44]	; (24e14 <k_mem_slab_free+0xbc>)
   24de6:	4809      	ldr	r0, [pc, #36]	; (24e0c <k_mem_slab_free+0xb4>)
   24de8:	f005 fc67 	bl	2a6ba <assert_print>
   24dec:	4629      	mov	r1, r5
   24dee:	480a      	ldr	r0, [pc, #40]	; (24e18 <k_mem_slab_free+0xc0>)
   24df0:	f005 fc63 	bl	2a6ba <assert_print>
   24df4:	21c2      	movs	r1, #194	; 0xc2
   24df6:	e7cc      	b.n	24d92 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   24df8:	f387 8811 	msr	BASEPRI, r7
   24dfc:	f3bf 8f6f 	isb	sy
}
   24e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24e04:	000333ee 	.word	0x000333ee
   24e08:	00033447 	.word	0x00033447
   24e0c:	00032659 	.word	0x00032659
   24e10:	0003345c 	.word	0x0003345c
   24e14:	0003341b 	.word	0x0003341b
   24e18:	00033432 	.word	0x00033432

00024e1c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24e1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   24e1e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   24e20:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   24e22:	2e0f      	cmp	r6, #15
   24e24:	d12a      	bne.n	24e7c <z_setup_new_thread+0x60>
   24e26:	4821      	ldr	r0, [pc, #132]	; (24eac <z_setup_new_thread+0x90>)
   24e28:	4283      	cmp	r3, r0
   24e2a:	d12b      	bne.n	24e84 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   24e2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24e30:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   24e34:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   24e36:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   24e38:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24e3a:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24e3c:	3207      	adds	r2, #7
   24e3e:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   24e42:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   24e46:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   24e48:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   24e4c:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   24e4e:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   24e52:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   24e54:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   24e56:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24e58:	9202      	str	r2, [sp, #8]
   24e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24e5c:	4620      	mov	r0, r4
   24e5e:	9201      	str	r2, [sp, #4]
   24e60:	9a08      	ldr	r2, [sp, #32]
   24e62:	9200      	str	r2, [sp, #0]
   24e64:	4632      	mov	r2, r6
   24e66:	f7eb feb5 	bl	10bd4 <arch_new_thread>
	if (!_current) {
   24e6a:	4b11      	ldr	r3, [pc, #68]	; (24eb0 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   24e6c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   24e6e:	689b      	ldr	r3, [r3, #8]
   24e70:	b103      	cbz	r3, 24e74 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   24e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   24e74:	4630      	mov	r0, r6
   24e76:	6763      	str	r3, [r4, #116]	; 0x74
   24e78:	b004      	add	sp, #16
   24e7a:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   24e7c:	f106 0010 	add.w	r0, r6, #16
   24e80:	281e      	cmp	r0, #30
   24e82:	d9d3      	bls.n	24e2c <z_setup_new_thread+0x10>
   24e84:	f44f 7306 	mov.w	r3, #536	; 0x218
   24e88:	4a0a      	ldr	r2, [pc, #40]	; (24eb4 <z_setup_new_thread+0x98>)
   24e8a:	490b      	ldr	r1, [pc, #44]	; (24eb8 <z_setup_new_thread+0x9c>)
   24e8c:	480b      	ldr	r0, [pc, #44]	; (24ebc <z_setup_new_thread+0xa0>)
   24e8e:	f005 fc14 	bl	2a6ba <assert_print>
   24e92:	4631      	mov	r1, r6
   24e94:	480a      	ldr	r0, [pc, #40]	; (24ec0 <z_setup_new_thread+0xa4>)
   24e96:	f06f 030f 	mvn.w	r3, #15
   24e9a:	220e      	movs	r2, #14
   24e9c:	f005 fc0d 	bl	2a6ba <assert_print>
   24ea0:	f44f 7106 	mov.w	r1, #536	; 0x218
   24ea4:	4803      	ldr	r0, [pc, #12]	; (24eb4 <z_setup_new_thread+0x98>)
   24ea6:	f005 fc01 	bl	2a6ac <assert_post_action>
   24eaa:	bf00      	nop
   24eac:	000250a1 	.word	0x000250a1
   24eb0:	20021a88 	.word	0x20021a88
   24eb4:	0003834e 	.word	0x0003834e
   24eb8:	00038371 	.word	0x00038371
   24ebc:	00032659 	.word	0x00032659
   24ec0:	000383f1 	.word	0x000383f1

00024ec4 <z_impl_k_thread_create>:
{
   24ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24ec6:	b087      	sub	sp, #28
   24ec8:	4604      	mov	r4, r0
   24eca:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   24ece:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   24ed2:	b175      	cbz	r5, 24ef2 <z_impl_k_thread_create+0x2e>
   24ed4:	4919      	ldr	r1, [pc, #100]	; (24f3c <z_impl_k_thread_create+0x78>)
   24ed6:	f240 2387 	movw	r3, #647	; 0x287
   24eda:	4a19      	ldr	r2, [pc, #100]	; (24f40 <z_impl_k_thread_create+0x7c>)
   24edc:	4819      	ldr	r0, [pc, #100]	; (24f44 <z_impl_k_thread_create+0x80>)
   24ede:	f005 fbec 	bl	2a6ba <assert_print>
   24ee2:	4819      	ldr	r0, [pc, #100]	; (24f48 <z_impl_k_thread_create+0x84>)
   24ee4:	f005 fbe9 	bl	2a6ba <assert_print>
   24ee8:	f240 2187 	movw	r1, #647	; 0x287
   24eec:	4814      	ldr	r0, [pc, #80]	; (24f40 <z_impl_k_thread_create+0x7c>)
   24eee:	f005 fbdd 	bl	2a6ac <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24ef2:	9505      	str	r5, [sp, #20]
   24ef4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   24ef6:	9504      	str	r5, [sp, #16]
   24ef8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   24efa:	9503      	str	r5, [sp, #12]
   24efc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24efe:	9502      	str	r5, [sp, #8]
   24f00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   24f02:	9501      	str	r5, [sp, #4]
   24f04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24f06:	9500      	str	r5, [sp, #0]
   24f08:	f7ff ff88 	bl	24e1c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24f0c:	f1b6 3fff 	cmp.w	r6, #4294967295
   24f10:	bf08      	it	eq
   24f12:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   24f16:	d005      	beq.n	24f24 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24f18:	ea56 0307 	orrs.w	r3, r6, r7
   24f1c:	d105      	bne.n	24f2a <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   24f1e:	4620      	mov	r0, r4
   24f20:	f001 fba6 	bl	26670 <z_sched_start>
}
   24f24:	4620      	mov	r0, r4
   24f26:	b007      	add	sp, #28
   24f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24f2a:	463a      	mov	r2, r7
   24f2c:	4633      	mov	r3, r6
   24f2e:	4907      	ldr	r1, [pc, #28]	; (24f4c <z_impl_k_thread_create+0x88>)
   24f30:	f104 0018 	add.w	r0, r4, #24
   24f34:	f002 fc16 	bl	27764 <z_add_timeout>
   24f38:	e7f4      	b.n	24f24 <z_impl_k_thread_create+0x60>
   24f3a:	bf00      	nop
   24f3c:	00038422 	.word	0x00038422
   24f40:	0003834e 	.word	0x0003834e
   24f44:	00032659 	.word	0x00032659
   24f48:	00038434 	.word	0x00038434
   24f4c:	00026f3d 	.word	0x00026f3d

00024f50 <z_init_static_threads>:
{
   24f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24f54:	4c39      	ldr	r4, [pc, #228]	; (2503c <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   24f56:	4d3a      	ldr	r5, [pc, #232]	; (25040 <z_init_static_threads+0xf0>)
{
   24f58:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   24f5a:	42ac      	cmp	r4, r5
   24f5c:	4626      	mov	r6, r4
   24f5e:	d92a      	bls.n	24fb6 <z_init_static_threads+0x66>
   24f60:	4938      	ldr	r1, [pc, #224]	; (25044 <z_init_static_threads+0xf4>)
   24f62:	f240 23ee 	movw	r3, #750	; 0x2ee
   24f66:	4a38      	ldr	r2, [pc, #224]	; (25048 <z_init_static_threads+0xf8>)
   24f68:	4838      	ldr	r0, [pc, #224]	; (2504c <z_init_static_threads+0xfc>)
   24f6a:	f005 fba6 	bl	2a6ba <assert_print>
   24f6e:	4838      	ldr	r0, [pc, #224]	; (25050 <z_init_static_threads+0x100>)
   24f70:	f005 fba3 	bl	2a6ba <assert_print>
   24f74:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   24f78:	4833      	ldr	r0, [pc, #204]	; (25048 <z_init_static_threads+0xf8>)
   24f7a:	f005 fb97 	bl	2a6ac <assert_post_action>
		z_setup_new_thread(
   24f7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24f82:	9305      	str	r3, [sp, #20]
   24f84:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24f88:	9304      	str	r3, [sp, #16]
   24f8a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   24f8e:	9303      	str	r3, [sp, #12]
   24f90:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24f94:	9302      	str	r3, [sp, #8]
   24f96:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   24f9a:	9301      	str	r3, [sp, #4]
   24f9c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   24fa0:	9300      	str	r3, [sp, #0]
   24fa2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   24fa6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   24faa:	f7ff ff37 	bl	24e1c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   24fae:	f854 3c30 	ldr.w	r3, [r4, #-48]
   24fb2:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   24fb4:	e7d1      	b.n	24f5a <z_init_static_threads+0xa>
   24fb6:	42ae      	cmp	r6, r5
   24fb8:	f104 0430 	add.w	r4, r4, #48	; 0x30
   24fbc:	d3df      	bcc.n	24f7e <z_init_static_threads+0x2e>
	k_sched_lock();
   24fbe:	f001 fba9 	bl	26714 <k_sched_lock>
   24fc2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   24fc6:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   24fca:	4c1c      	ldr	r4, [pc, #112]	; (2503c <z_init_static_threads+0xec>)
   24fcc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 25054 <z_init_static_threads+0x104>
   24fd0:	42ac      	cmp	r4, r5
   24fd2:	d92c      	bls.n	2502e <z_init_static_threads+0xde>
   24fd4:	491b      	ldr	r1, [pc, #108]	; (25044 <z_init_static_threads+0xf4>)
   24fd6:	f240 330d 	movw	r3, #781	; 0x30d
   24fda:	4a1b      	ldr	r2, [pc, #108]	; (25048 <z_init_static_threads+0xf8>)
   24fdc:	481b      	ldr	r0, [pc, #108]	; (2504c <z_init_static_threads+0xfc>)
   24fde:	f005 fb6c 	bl	2a6ba <assert_print>
   24fe2:	481b      	ldr	r0, [pc, #108]	; (25050 <z_init_static_threads+0x100>)
   24fe4:	f005 fb69 	bl	2a6ba <assert_print>
   24fe8:	f240 310d 	movw	r1, #781	; 0x30d
   24fec:	e7c4      	b.n	24f78 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24ff0:	1c5a      	adds	r2, r3, #1
   24ff2:	d00d      	beq.n	25010 <z_init_static_threads+0xc0>
   24ff4:	2100      	movs	r1, #0
   24ff6:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   24ff8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24ffc:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25000:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   25004:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25008:	d104      	bne.n	25014 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   2500a:	4640      	mov	r0, r8
   2500c:	f001 fb30 	bl	26670 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   25010:	3430      	adds	r4, #48	; 0x30
   25012:	e7dd      	b.n	24fd0 <z_init_static_threads+0x80>
   25014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25018:	2300      	movs	r3, #0
   2501a:	f7e3 ff69 	bl	8ef0 <__aeabi_uldivmod>
   2501e:	4602      	mov	r2, r0
   25020:	460b      	mov	r3, r1
   25022:	f108 0018 	add.w	r0, r8, #24
   25026:	4649      	mov	r1, r9
   25028:	f002 fb9c 	bl	27764 <z_add_timeout>
   2502c:	e7f0      	b.n	25010 <z_init_static_threads+0xc0>
   2502e:	d3de      	bcc.n	24fee <z_init_static_threads+0x9e>
}
   25030:	b007      	add	sp, #28
   25032:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   25036:	f001 bbd9 	b.w	267ec <k_sched_unlock>
   2503a:	bf00      	nop
   2503c:	0003127c 	.word	0x0003127c
   25040:	000313cc 	.word	0x000313cc
   25044:	00038459 	.word	0x00038459
   25048:	0003834e 	.word	0x0003834e
   2504c:	00032659 	.word	0x00032659
   25050:	000336ed 	.word	0x000336ed
   25054:	00026f3d 	.word	0x00026f3d

00025058 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   25058:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2505a:	b138      	cbz	r0, 2506c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2505c:	4b04      	ldr	r3, [pc, #16]	; (25070 <z_spin_lock_valid+0x18>)
   2505e:	f000 0003 	and.w	r0, r0, #3
   25062:	7d1b      	ldrb	r3, [r3, #20]
   25064:	1ac0      	subs	r0, r0, r3
   25066:	bf18      	it	ne
   25068:	2001      	movne	r0, #1
   2506a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2506c:	2001      	movs	r0, #1
}
   2506e:	4770      	bx	lr
   25070:	20021a88 	.word	0x20021a88

00025074 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   25074:	4a05      	ldr	r2, [pc, #20]	; (2508c <z_spin_unlock_valid+0x18>)
{
   25076:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   25078:	7d11      	ldrb	r1, [r2, #20]
   2507a:	6892      	ldr	r2, [r2, #8]
   2507c:	430a      	orrs	r2, r1
   2507e:	6801      	ldr	r1, [r0, #0]
   25080:	2000      	movs	r0, #0
   25082:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   25084:	bf04      	itt	eq
   25086:	6018      	streq	r0, [r3, #0]
	return true;
   25088:	2001      	moveq	r0, #1
}
   2508a:	4770      	bx	lr
   2508c:	20021a88 	.word	0x20021a88

00025090 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   25090:	4b02      	ldr	r3, [pc, #8]	; (2509c <z_spin_lock_set_owner+0xc>)
   25092:	7d1a      	ldrb	r2, [r3, #20]
   25094:	689b      	ldr	r3, [r3, #8]
   25096:	4313      	orrs	r3, r2
   25098:	6003      	str	r3, [r0, #0]
}
   2509a:	4770      	bx	lr
   2509c:	20021a88 	.word	0x20021a88

000250a0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   250a0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   250a2:	4c13      	ldr	r4, [pc, #76]	; (250f0 <idle+0x50>)
   250a4:	68a3      	ldr	r3, [r4, #8]
   250a6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   250aa:	2b00      	cmp	r3, #0
   250ac:	db10      	blt.n	250d0 <idle+0x30>
   250ae:	4d11      	ldr	r5, [pc, #68]	; (250f4 <idle+0x54>)
	__asm__ volatile(
   250b0:	f04f 0220 	mov.w	r2, #32
   250b4:	f3ef 8311 	mrs	r3, BASEPRI
   250b8:	f382 8812 	msr	BASEPRI_MAX, r2
   250bc:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   250c0:	f002 fc62 	bl	27988 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   250c4:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   250c6:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   250c8:	b963      	cbnz	r3, 250e4 <idle+0x44>
	arch_cpu_idle();
   250ca:	f7eb fc29 	bl	10920 <arch_cpu_idle>
}
   250ce:	e7ef      	b.n	250b0 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   250d0:	4909      	ldr	r1, [pc, #36]	; (250f8 <idle+0x58>)
   250d2:	480a      	ldr	r0, [pc, #40]	; (250fc <idle+0x5c>)
   250d4:	2327      	movs	r3, #39	; 0x27
   250d6:	4a0a      	ldr	r2, [pc, #40]	; (25100 <idle+0x60>)
   250d8:	f005 faef 	bl	2a6ba <assert_print>
   250dc:	2127      	movs	r1, #39	; 0x27
   250de:	4808      	ldr	r0, [pc, #32]	; (25100 <idle+0x60>)
   250e0:	f005 fae4 	bl	2a6ac <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   250e4:	f7eb f954 	bl	10390 <pm_system_suspend>
   250e8:	2800      	cmp	r0, #0
   250ea:	d1e1      	bne.n	250b0 <idle+0x10>
   250ec:	e7ed      	b.n	250ca <idle+0x2a>
   250ee:	bf00      	nop
   250f0:	20021a88 	.word	0x20021a88
   250f4:	20022827 	.word	0x20022827
   250f8:	000384a7 	.word	0x000384a7
   250fc:	00032659 	.word	0x00032659
   25100:	00038486 	.word	0x00038486

00025104 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   25104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25108:	4604      	mov	r4, r0
   2510a:	4617      	mov	r7, r2
   2510c:	461e      	mov	r6, r3
   2510e:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   25112:	b165      	cbz	r5, 2512e <z_impl_k_mutex_lock+0x2a>
   25114:	4958      	ldr	r1, [pc, #352]	; (25278 <z_impl_k_mutex_lock+0x174>)
   25116:	2365      	movs	r3, #101	; 0x65
   25118:	4a58      	ldr	r2, [pc, #352]	; (2527c <z_impl_k_mutex_lock+0x178>)
   2511a:	4859      	ldr	r0, [pc, #356]	; (25280 <z_impl_k_mutex_lock+0x17c>)
   2511c:	f005 facd 	bl	2a6ba <assert_print>
   25120:	4858      	ldr	r0, [pc, #352]	; (25284 <z_impl_k_mutex_lock+0x180>)
   25122:	f005 faca 	bl	2a6ba <assert_print>
   25126:	2165      	movs	r1, #101	; 0x65
   25128:	4854      	ldr	r0, [pc, #336]	; (2527c <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2512a:	f005 fabf 	bl	2a6ac <assert_post_action>
   2512e:	f04f 0320 	mov.w	r3, #32
   25132:	f3ef 8811 	mrs	r8, BASEPRI
   25136:	f383 8812 	msr	BASEPRI_MAX, r3
   2513a:	f3bf 8f6f 	isb	sy
   2513e:	4852      	ldr	r0, [pc, #328]	; (25288 <z_impl_k_mutex_lock+0x184>)
   25140:	f7ff ff8a 	bl	25058 <z_spin_lock_valid>
   25144:	b960      	cbnz	r0, 25160 <z_impl_k_mutex_lock+0x5c>
   25146:	2394      	movs	r3, #148	; 0x94
   25148:	4a50      	ldr	r2, [pc, #320]	; (2528c <z_impl_k_mutex_lock+0x188>)
   2514a:	4951      	ldr	r1, [pc, #324]	; (25290 <z_impl_k_mutex_lock+0x18c>)
   2514c:	484c      	ldr	r0, [pc, #304]	; (25280 <z_impl_k_mutex_lock+0x17c>)
   2514e:	f005 fab4 	bl	2a6ba <assert_print>
   25152:	494d      	ldr	r1, [pc, #308]	; (25288 <z_impl_k_mutex_lock+0x184>)
   25154:	484f      	ldr	r0, [pc, #316]	; (25294 <z_impl_k_mutex_lock+0x190>)
   25156:	f005 fab0 	bl	2a6ba <assert_print>
   2515a:	2194      	movs	r1, #148	; 0x94
   2515c:	484b      	ldr	r0, [pc, #300]	; (2528c <z_impl_k_mutex_lock+0x188>)
   2515e:	e7e4      	b.n	2512a <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   25160:	4849      	ldr	r0, [pc, #292]	; (25288 <z_impl_k_mutex_lock+0x184>)
   25162:	f7ff ff95 	bl	25090 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   25166:	68e3      	ldr	r3, [r4, #12]
   25168:	4a4b      	ldr	r2, [pc, #300]	; (25298 <z_impl_k_mutex_lock+0x194>)
   2516a:	b19b      	cbz	r3, 25194 <z_impl_k_mutex_lock+0x90>
   2516c:	68a0      	ldr	r0, [r4, #8]
   2516e:	6891      	ldr	r1, [r2, #8]
   25170:	4288      	cmp	r0, r1
   25172:	d027      	beq.n	251c4 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   25174:	ea57 0306 	orrs.w	r3, r7, r6
   25178:	d12c      	bne.n	251d4 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2517a:	4843      	ldr	r0, [pc, #268]	; (25288 <z_impl_k_mutex_lock+0x184>)
   2517c:	f7ff ff7a 	bl	25074 <z_spin_unlock_valid>
   25180:	b1a0      	cbz	r0, 251ac <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   25182:	f388 8811 	msr	BASEPRI, r8
   25186:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2518a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2518e:	b002      	add	sp, #8
   25190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   25194:	6891      	ldr	r1, [r2, #8]
   25196:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2519a:	3301      	adds	r3, #1
   2519c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2519e:	6893      	ldr	r3, [r2, #8]
   251a0:	4839      	ldr	r0, [pc, #228]	; (25288 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   251a2:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   251a4:	60a3      	str	r3, [r4, #8]
   251a6:	f7ff ff65 	bl	25074 <z_spin_unlock_valid>
   251aa:	b968      	cbnz	r0, 251c8 <z_impl_k_mutex_lock+0xc4>
   251ac:	23c2      	movs	r3, #194	; 0xc2
   251ae:	4a37      	ldr	r2, [pc, #220]	; (2528c <z_impl_k_mutex_lock+0x188>)
   251b0:	493a      	ldr	r1, [pc, #232]	; (2529c <z_impl_k_mutex_lock+0x198>)
   251b2:	4833      	ldr	r0, [pc, #204]	; (25280 <z_impl_k_mutex_lock+0x17c>)
   251b4:	f005 fa81 	bl	2a6ba <assert_print>
   251b8:	4933      	ldr	r1, [pc, #204]	; (25288 <z_impl_k_mutex_lock+0x184>)
   251ba:	4839      	ldr	r0, [pc, #228]	; (252a0 <z_impl_k_mutex_lock+0x19c>)
   251bc:	f005 fa7d 	bl	2a6ba <assert_print>
   251c0:	21c2      	movs	r1, #194	; 0xc2
   251c2:	e7cb      	b.n	2515c <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   251c4:	6921      	ldr	r1, [r4, #16]
   251c6:	e7e8      	b.n	2519a <z_impl_k_mutex_lock+0x96>
   251c8:	f388 8811 	msr	BASEPRI, r8
   251cc:	f3bf 8f6f 	isb	sy
		return 0;
   251d0:	2000      	movs	r0, #0
   251d2:	e7dc      	b.n	2518e <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   251d4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   251d8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   251dc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   251e0:	4299      	cmp	r1, r3
   251e2:	bfa8      	it	ge
   251e4:	4619      	movge	r1, r3
   251e6:	4291      	cmp	r1, r2
   251e8:	bfb8      	it	lt
   251ea:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   251ec:	428b      	cmp	r3, r1
   251ee:	dd02      	ble.n	251f6 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   251f0:	f00a ffbe 	bl	30170 <adjust_owner_prio.isra.0>
   251f4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   251f6:	4622      	mov	r2, r4
   251f8:	4641      	mov	r1, r8
   251fa:	e9cd 7600 	strd	r7, r6, [sp]
   251fe:	4822      	ldr	r0, [pc, #136]	; (25288 <z_impl_k_mutex_lock+0x184>)
   25200:	f001 fcc2 	bl	26b88 <z_pend_curr>
	if (got_mutex == 0) {
   25204:	2800      	cmp	r0, #0
   25206:	d0e3      	beq.n	251d0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   25208:	f04f 0320 	mov.w	r3, #32
   2520c:	f3ef 8611 	mrs	r6, BASEPRI
   25210:	f383 8812 	msr	BASEPRI_MAX, r3
   25214:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25218:	481b      	ldr	r0, [pc, #108]	; (25288 <z_impl_k_mutex_lock+0x184>)
   2521a:	f7ff ff1d 	bl	25058 <z_spin_lock_valid>
   2521e:	2800      	cmp	r0, #0
   25220:	d091      	beq.n	25146 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   25222:	4819      	ldr	r0, [pc, #100]	; (25288 <z_impl_k_mutex_lock+0x184>)
   25224:	f7ff ff34 	bl	25090 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   25228:	68a0      	ldr	r0, [r4, #8]
   2522a:	b1c0      	cbz	r0, 2525e <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2522c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2522e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25230:	429c      	cmp	r4, r3
   25232:	d00a      	beq.n	2524a <z_impl_k_mutex_lock+0x146>
   25234:	b14b      	cbz	r3, 2524a <z_impl_k_mutex_lock+0x146>
   25236:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2523a:	4299      	cmp	r1, r3
   2523c:	bfa8      	it	ge
   2523e:	4619      	movge	r1, r3
   25240:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   25244:	4299      	cmp	r1, r3
   25246:	bfb8      	it	lt
   25248:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2524a:	f00a ff91 	bl	30170 <adjust_owner_prio.isra.0>
   2524e:	b130      	cbz	r0, 2525e <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   25250:	4631      	mov	r1, r6
   25252:	480d      	ldr	r0, [pc, #52]	; (25288 <z_impl_k_mutex_lock+0x184>)
   25254:	f001 f9ca 	bl	265ec <z_reschedule>
	return -EAGAIN;
   25258:	f06f 000a 	mvn.w	r0, #10
   2525c:	e797      	b.n	2518e <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   2525e:	2d00      	cmp	r5, #0
   25260:	d1f6      	bne.n	25250 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25262:	4809      	ldr	r0, [pc, #36]	; (25288 <z_impl_k_mutex_lock+0x184>)
   25264:	f7ff ff06 	bl	25074 <z_spin_unlock_valid>
   25268:	2800      	cmp	r0, #0
   2526a:	d09f      	beq.n	251ac <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   2526c:	f386 8811 	msr	BASEPRI, r6
   25270:	f3bf 8f6f 	isb	sy
   25274:	e7f0      	b.n	25258 <z_impl_k_mutex_lock+0x154>
   25276:	bf00      	nop
   25278:	00038422 	.word	0x00038422
   2527c:	000384cf 	.word	0x000384cf
   25280:	00032659 	.word	0x00032659
   25284:	000384f1 	.word	0x000384f1
   25288:	20021ab0 	.word	0x20021ab0
   2528c:	000333ee 	.word	0x000333ee
   25290:	00033447 	.word	0x00033447
   25294:	0003345c 	.word	0x0003345c
   25298:	20021a88 	.word	0x20021a88
   2529c:	0003341b 	.word	0x0003341b
   252a0:	00033432 	.word	0x00033432

000252a4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   252a4:	b570      	push	{r4, r5, r6, lr}
   252a6:	4604      	mov	r4, r0
   252a8:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   252ac:	b166      	cbz	r6, 252c8 <z_impl_k_mutex_unlock+0x24>
   252ae:	4938      	ldr	r1, [pc, #224]	; (25390 <z_impl_k_mutex_unlock+0xec>)
   252b0:	23cd      	movs	r3, #205	; 0xcd
   252b2:	4a38      	ldr	r2, [pc, #224]	; (25394 <z_impl_k_mutex_unlock+0xf0>)
   252b4:	4838      	ldr	r0, [pc, #224]	; (25398 <z_impl_k_mutex_unlock+0xf4>)
   252b6:	f005 fa00 	bl	2a6ba <assert_print>
   252ba:	4838      	ldr	r0, [pc, #224]	; (2539c <z_impl_k_mutex_unlock+0xf8>)
   252bc:	f005 f9fd 	bl	2a6ba <assert_print>
   252c0:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   252c2:	4834      	ldr	r0, [pc, #208]	; (25394 <z_impl_k_mutex_unlock+0xf0>)
   252c4:	f005 f9f2 	bl	2a6ac <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   252c8:	6883      	ldr	r3, [r0, #8]
   252ca:	2b00      	cmp	r3, #0
   252cc:	d059      	beq.n	25382 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   252ce:	4a34      	ldr	r2, [pc, #208]	; (253a0 <z_impl_k_mutex_unlock+0xfc>)
   252d0:	6892      	ldr	r2, [r2, #8]
   252d2:	4293      	cmp	r3, r2
   252d4:	d158      	bne.n	25388 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   252d6:	68c3      	ldr	r3, [r0, #12]
   252d8:	b93b      	cbnz	r3, 252ea <z_impl_k_mutex_unlock+0x46>
   252da:	4932      	ldr	r1, [pc, #200]	; (253a4 <z_impl_k_mutex_unlock+0x100>)
   252dc:	23e5      	movs	r3, #229	; 0xe5
   252de:	4a2d      	ldr	r2, [pc, #180]	; (25394 <z_impl_k_mutex_unlock+0xf0>)
   252e0:	482d      	ldr	r0, [pc, #180]	; (25398 <z_impl_k_mutex_unlock+0xf4>)
   252e2:	f005 f9ea 	bl	2a6ba <assert_print>
   252e6:	21e5      	movs	r1, #229	; 0xe5
   252e8:	e7eb      	b.n	252c2 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   252ea:	2b01      	cmp	r3, #1
   252ec:	d003      	beq.n	252f6 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   252ee:	3b01      	subs	r3, #1
   252f0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   252f2:	2000      	movs	r0, #0
}
   252f4:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   252f6:	f04f 0320 	mov.w	r3, #32
   252fa:	f3ef 8511 	mrs	r5, BASEPRI
   252fe:	f383 8812 	msr	BASEPRI_MAX, r3
   25302:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25306:	4828      	ldr	r0, [pc, #160]	; (253a8 <z_impl_k_mutex_unlock+0x104>)
   25308:	f7ff fea6 	bl	25058 <z_spin_lock_valid>
   2530c:	b960      	cbnz	r0, 25328 <z_impl_k_mutex_unlock+0x84>
   2530e:	2394      	movs	r3, #148	; 0x94
   25310:	4a26      	ldr	r2, [pc, #152]	; (253ac <z_impl_k_mutex_unlock+0x108>)
   25312:	4927      	ldr	r1, [pc, #156]	; (253b0 <z_impl_k_mutex_unlock+0x10c>)
   25314:	4820      	ldr	r0, [pc, #128]	; (25398 <z_impl_k_mutex_unlock+0xf4>)
   25316:	f005 f9d0 	bl	2a6ba <assert_print>
   2531a:	4923      	ldr	r1, [pc, #140]	; (253a8 <z_impl_k_mutex_unlock+0x104>)
   2531c:	4825      	ldr	r0, [pc, #148]	; (253b4 <z_impl_k_mutex_unlock+0x110>)
   2531e:	f005 f9cc 	bl	2a6ba <assert_print>
   25322:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25324:	4821      	ldr	r0, [pc, #132]	; (253ac <z_impl_k_mutex_unlock+0x108>)
   25326:	e7cd      	b.n	252c4 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   25328:	481f      	ldr	r0, [pc, #124]	; (253a8 <z_impl_k_mutex_unlock+0x104>)
   2532a:	f7ff feb1 	bl	25090 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2532e:	6921      	ldr	r1, [r4, #16]
   25330:	68a0      	ldr	r0, [r4, #8]
   25332:	f00a ff1d 	bl	30170 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25336:	4620      	mov	r0, r4
   25338:	f001 fea4 	bl	27084 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2533c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2533e:	b150      	cbz	r0, 25356 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   25340:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25344:	6122      	str	r2, [r4, #16]
   25346:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   25348:	f001 f8c4 	bl	264d4 <z_ready_thread>
		z_reschedule(&lock, key);
   2534c:	4629      	mov	r1, r5
   2534e:	4816      	ldr	r0, [pc, #88]	; (253a8 <z_impl_k_mutex_unlock+0x104>)
   25350:	f001 f94c 	bl	265ec <z_reschedule>
   25354:	e7cd      	b.n	252f2 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   25356:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25358:	4813      	ldr	r0, [pc, #76]	; (253a8 <z_impl_k_mutex_unlock+0x104>)
   2535a:	f7ff fe8b 	bl	25074 <z_spin_unlock_valid>
   2535e:	b958      	cbnz	r0, 25378 <z_impl_k_mutex_unlock+0xd4>
   25360:	23c2      	movs	r3, #194	; 0xc2
   25362:	4a12      	ldr	r2, [pc, #72]	; (253ac <z_impl_k_mutex_unlock+0x108>)
   25364:	4914      	ldr	r1, [pc, #80]	; (253b8 <z_impl_k_mutex_unlock+0x114>)
   25366:	480c      	ldr	r0, [pc, #48]	; (25398 <z_impl_k_mutex_unlock+0xf4>)
   25368:	f005 f9a7 	bl	2a6ba <assert_print>
   2536c:	490e      	ldr	r1, [pc, #56]	; (253a8 <z_impl_k_mutex_unlock+0x104>)
   2536e:	4813      	ldr	r0, [pc, #76]	; (253bc <z_impl_k_mutex_unlock+0x118>)
   25370:	f005 f9a3 	bl	2a6ba <assert_print>
   25374:	21c2      	movs	r1, #194	; 0xc2
   25376:	e7d5      	b.n	25324 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   25378:	f385 8811 	msr	BASEPRI, r5
   2537c:	f3bf 8f6f 	isb	sy
   25380:	e7b7      	b.n	252f2 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   25382:	f06f 0015 	mvn.w	r0, #21
   25386:	e7b5      	b.n	252f4 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   25388:	f04f 30ff 	mov.w	r0, #4294967295
   2538c:	e7b2      	b.n	252f4 <z_impl_k_mutex_unlock+0x50>
   2538e:	bf00      	nop
   25390:	00038422 	.word	0x00038422
   25394:	000384cf 	.word	0x000384cf
   25398:	00032659 	.word	0x00032659
   2539c:	000384f1 	.word	0x000384f1
   253a0:	20021a88 	.word	0x20021a88
   253a4:	00038516 	.word	0x00038516
   253a8:	20021ab0 	.word	0x20021ab0
   253ac:	000333ee 	.word	0x000333ee
   253b0:	00033447 	.word	0x00033447
   253b4:	0003345c 	.word	0x0003345c
   253b8:	0003341b 	.word	0x0003341b
   253bc:	00033432 	.word	0x00033432

000253c0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   253c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   253c4:	4604      	mov	r4, r0
   253c6:	460e      	mov	r6, r1
   253c8:	4690      	mov	r8, r2
   253ca:	4699      	mov	r9, r3
   253cc:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   253d0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   253d4:	f04f 0320 	mov.w	r3, #32
   253d8:	f3ef 8711 	mrs	r7, BASEPRI
   253dc:	f383 8812 	msr	BASEPRI_MAX, r3
   253e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   253e4:	4628      	mov	r0, r5
   253e6:	f7ff fe37 	bl	25058 <z_spin_lock_valid>
   253ea:	b968      	cbnz	r0, 25408 <queue_insert+0x48>
   253ec:	2394      	movs	r3, #148	; 0x94
   253ee:	4a3b      	ldr	r2, [pc, #236]	; (254dc <queue_insert+0x11c>)
   253f0:	493b      	ldr	r1, [pc, #236]	; (254e0 <queue_insert+0x120>)
   253f2:	483c      	ldr	r0, [pc, #240]	; (254e4 <queue_insert+0x124>)
   253f4:	f005 f961 	bl	2a6ba <assert_print>
   253f8:	4629      	mov	r1, r5
   253fa:	483b      	ldr	r0, [pc, #236]	; (254e8 <queue_insert+0x128>)
   253fc:	f005 f95d 	bl	2a6ba <assert_print>
   25400:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25402:	4836      	ldr	r0, [pc, #216]	; (254dc <queue_insert+0x11c>)
   25404:	f005 f952 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25408:	4628      	mov	r0, r5
   2540a:	f7ff fe41 	bl	25090 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   2540e:	f1ba 0f00 	cmp.w	sl, #0
   25412:	d000      	beq.n	25416 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   25414:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25416:	f104 000c 	add.w	r0, r4, #12
   2541a:	f001 fe33 	bl	27084 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2541e:	b158      	cbz	r0, 25438 <queue_insert+0x78>
   25420:	2300      	movs	r3, #0
   25422:	f8c0 8014 	str.w	r8, [r0, #20]
   25426:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   25428:	f001 f854 	bl	264d4 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2542c:	4628      	mov	r0, r5
   2542e:	4639      	mov	r1, r7
   25430:	f001 f8dc 	bl	265ec <z_reschedule>
		return 0;
   25434:	2000      	movs	r0, #0
   25436:	e01c      	b.n	25472 <queue_insert+0xb2>
	if (alloc) {
   25438:	f1b9 0f00 	cmp.w	r9, #0
   2543c:	d02b      	beq.n	25496 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   2543e:	2108      	movs	r1, #8
   25440:	f003 f8da 	bl	285f8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   25444:	b9b8      	cbnz	r0, 25476 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25446:	4628      	mov	r0, r5
   25448:	f7ff fe14 	bl	25074 <z_spin_unlock_valid>
   2544c:	b958      	cbnz	r0, 25466 <queue_insert+0xa6>
   2544e:	23c2      	movs	r3, #194	; 0xc2
   25450:	4a22      	ldr	r2, [pc, #136]	; (254dc <queue_insert+0x11c>)
   25452:	4926      	ldr	r1, [pc, #152]	; (254ec <queue_insert+0x12c>)
   25454:	4823      	ldr	r0, [pc, #140]	; (254e4 <queue_insert+0x124>)
   25456:	f005 f930 	bl	2a6ba <assert_print>
   2545a:	4629      	mov	r1, r5
   2545c:	4824      	ldr	r0, [pc, #144]	; (254f0 <queue_insert+0x130>)
   2545e:	f005 f92c 	bl	2a6ba <assert_print>
   25462:	21c2      	movs	r1, #194	; 0xc2
   25464:	e7cd      	b.n	25402 <queue_insert+0x42>
	__asm__ volatile(
   25466:	f387 8811 	msr	BASEPRI, r7
   2546a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2546e:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   25472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   25476:	2201      	movs	r2, #1
		anode->data = data;
   25478:	f8c0 8004 	str.w	r8, [r0, #4]
   2547c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2547e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25480:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   25484:	b95e      	cbnz	r6, 2549e <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25486:	6822      	ldr	r2, [r4, #0]
   25488:	430a      	orrs	r2, r1
   2548a:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2548c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2548e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25490:	b96a      	cbnz	r2, 254ae <queue_insert+0xee>
	list->tail = node;
   25492:	6060      	str	r0, [r4, #4]
}
   25494:	e00b      	b.n	254ae <queue_insert+0xee>
}
   25496:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   25498:	f8c8 9000 	str.w	r9, [r8]
}
   2549c:	e7ef      	b.n	2547e <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2549e:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   254a0:	2a03      	cmp	r2, #3
   254a2:	d810      	bhi.n	254c6 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   254a4:	6001      	str	r1, [r0, #0]
	return list->tail;
   254a6:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   254a8:	b939      	cbnz	r1, 254ba <queue_insert+0xfa>
	list->head = node;
   254aa:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   254ae:	2104      	movs	r1, #4
   254b0:	f104 0014 	add.w	r0, r4, #20
   254b4:	f00b f81e 	bl	304f4 <z_handle_obj_poll_events>
   254b8:	e7b8      	b.n	2542c <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   254ba:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   254bc:	f002 0203 	and.w	r2, r2, #3
   254c0:	4302      	orrs	r2, r0
   254c2:	600a      	str	r2, [r1, #0]
   254c4:	e7e5      	b.n	25492 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   254c6:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   254ca:	430a      	orrs	r2, r1
   254cc:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   254ce:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   254d0:	f002 0203 	and.w	r2, r2, #3
   254d4:	ea40 0302 	orr.w	r3, r0, r2
   254d8:	6033      	str	r3, [r6, #0]
}
   254da:	e7e8      	b.n	254ae <queue_insert+0xee>
   254dc:	000333ee 	.word	0x000333ee
   254e0:	00033447 	.word	0x00033447
   254e4:	00032659 	.word	0x00032659
   254e8:	0003345c 	.word	0x0003345c
   254ec:	0003341b 	.word	0x0003341b
   254f0:	00033432 	.word	0x00033432

000254f4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   254f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   254f8:	4606      	mov	r6, r0
   254fa:	4691      	mov	r9, r2
   254fc:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   254fe:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   25502:	f04f 0320 	mov.w	r3, #32
   25506:	f3ef 8811 	mrs	r8, BASEPRI
   2550a:	f383 8812 	msr	BASEPRI_MAX, r3
   2550e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25512:	4628      	mov	r0, r5
   25514:	f7ff fda0 	bl	25058 <z_spin_lock_valid>
   25518:	b968      	cbnz	r0, 25536 <z_impl_k_queue_get+0x42>
   2551a:	2394      	movs	r3, #148	; 0x94
   2551c:	4a23      	ldr	r2, [pc, #140]	; (255ac <z_impl_k_queue_get+0xb8>)
   2551e:	4924      	ldr	r1, [pc, #144]	; (255b0 <z_impl_k_queue_get+0xbc>)
   25520:	4824      	ldr	r0, [pc, #144]	; (255b4 <z_impl_k_queue_get+0xc0>)
   25522:	f005 f8ca 	bl	2a6ba <assert_print>
   25526:	4629      	mov	r1, r5
   25528:	4823      	ldr	r0, [pc, #140]	; (255b8 <z_impl_k_queue_get+0xc4>)
   2552a:	f005 f8c6 	bl	2a6ba <assert_print>
   2552e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25530:	481e      	ldr	r0, [pc, #120]	; (255ac <z_impl_k_queue_get+0xb8>)
   25532:	f005 f8bb 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25536:	4628      	mov	r0, r5
   25538:	f7ff fdaa 	bl	25090 <z_spin_lock_set_owner>
	return list->head;
   2553c:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2553e:	b1ec      	cbz	r4, 2557c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25540:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25542:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25544:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25548:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2554a:	4620      	mov	r0, r4
   2554c:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   25550:	6033      	str	r3, [r6, #0]
	list->tail = node;
   25552:	bf08      	it	eq
   25554:	6073      	streq	r3, [r6, #4]
   25556:	f00a fe1a 	bl	3018e <z_queue_node_peek>
   2555a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2555c:	4628      	mov	r0, r5
   2555e:	f7ff fd89 	bl	25074 <z_spin_unlock_valid>
   25562:	b9d8      	cbnz	r0, 2559c <z_impl_k_queue_get+0xa8>
   25564:	23c2      	movs	r3, #194	; 0xc2
   25566:	4a11      	ldr	r2, [pc, #68]	; (255ac <z_impl_k_queue_get+0xb8>)
   25568:	4914      	ldr	r1, [pc, #80]	; (255bc <z_impl_k_queue_get+0xc8>)
   2556a:	4812      	ldr	r0, [pc, #72]	; (255b4 <z_impl_k_queue_get+0xc0>)
   2556c:	f005 f8a5 	bl	2a6ba <assert_print>
   25570:	4629      	mov	r1, r5
   25572:	4813      	ldr	r0, [pc, #76]	; (255c0 <z_impl_k_queue_get+0xcc>)
   25574:	f005 f8a1 	bl	2a6ba <assert_print>
   25578:	21c2      	movs	r1, #194	; 0xc2
   2557a:	e7d9      	b.n	25530 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2557c:	ea59 0307 	orrs.w	r3, r9, r7
   25580:	d0ec      	beq.n	2555c <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   25582:	4641      	mov	r1, r8
   25584:	4628      	mov	r0, r5
   25586:	e9cd 9700 	strd	r9, r7, [sp]
   2558a:	f106 020c 	add.w	r2, r6, #12
   2558e:	f001 fafb 	bl	26b88 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   25592:	b938      	cbnz	r0, 255a4 <z_impl_k_queue_get+0xb0>
   25594:	4b0b      	ldr	r3, [pc, #44]	; (255c4 <z_impl_k_queue_get+0xd0>)
   25596:	689b      	ldr	r3, [r3, #8]
   25598:	695c      	ldr	r4, [r3, #20]
   2559a:	e003      	b.n	255a4 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   2559c:	f388 8811 	msr	BASEPRI, r8
   255a0:	f3bf 8f6f 	isb	sy
}
   255a4:	4620      	mov	r0, r4
   255a6:	b003      	add	sp, #12
   255a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   255ac:	000333ee 	.word	0x000333ee
   255b0:	00033447 	.word	0x00033447
   255b4:	00032659 	.word	0x00032659
   255b8:	0003345c 	.word	0x0003345c
   255bc:	0003341b 	.word	0x0003341b
   255c0:	00033432 	.word	0x00033432
   255c4:	20021a88 	.word	0x20021a88

000255c8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   255c8:	b538      	push	{r3, r4, r5, lr}
   255ca:	4604      	mov	r4, r0
	__asm__ volatile(
   255cc:	f04f 0320 	mov.w	r3, #32
   255d0:	f3ef 8511 	mrs	r5, BASEPRI
   255d4:	f383 8812 	msr	BASEPRI_MAX, r3
   255d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   255dc:	4817      	ldr	r0, [pc, #92]	; (2563c <z_impl_k_sem_give+0x74>)
   255de:	f7ff fd3b 	bl	25058 <z_spin_lock_valid>
   255e2:	b968      	cbnz	r0, 25600 <z_impl_k_sem_give+0x38>
   255e4:	2394      	movs	r3, #148	; 0x94
   255e6:	4a16      	ldr	r2, [pc, #88]	; (25640 <z_impl_k_sem_give+0x78>)
   255e8:	4916      	ldr	r1, [pc, #88]	; (25644 <z_impl_k_sem_give+0x7c>)
   255ea:	4817      	ldr	r0, [pc, #92]	; (25648 <z_impl_k_sem_give+0x80>)
   255ec:	f005 f865 	bl	2a6ba <assert_print>
   255f0:	4912      	ldr	r1, [pc, #72]	; (2563c <z_impl_k_sem_give+0x74>)
   255f2:	4816      	ldr	r0, [pc, #88]	; (2564c <z_impl_k_sem_give+0x84>)
   255f4:	f005 f861 	bl	2a6ba <assert_print>
   255f8:	2194      	movs	r1, #148	; 0x94
   255fa:	4811      	ldr	r0, [pc, #68]	; (25640 <z_impl_k_sem_give+0x78>)
   255fc:	f005 f856 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25600:	480e      	ldr	r0, [pc, #56]	; (2563c <z_impl_k_sem_give+0x74>)
   25602:	f7ff fd45 	bl	25090 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   25606:	4620      	mov	r0, r4
   25608:	f001 fd3c 	bl	27084 <z_unpend_first_thread>

	if (thread != NULL) {
   2560c:	b148      	cbz	r0, 25622 <z_impl_k_sem_give+0x5a>
   2560e:	2200      	movs	r2, #0
   25610:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25612:	f000 ff5f 	bl	264d4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25616:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   25618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2561c:	4807      	ldr	r0, [pc, #28]	; (2563c <z_impl_k_sem_give+0x74>)
   2561e:	f000 bfe5 	b.w	265ec <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25622:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25626:	429a      	cmp	r2, r3
   25628:	bf18      	it	ne
   2562a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2562c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2562e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25630:	f104 0010 	add.w	r0, r4, #16
   25634:	f00a ff5e 	bl	304f4 <z_handle_obj_poll_events>
}
   25638:	e7ed      	b.n	25616 <z_impl_k_sem_give+0x4e>
   2563a:	bf00      	nop
   2563c:	20021ab4 	.word	0x20021ab4
   25640:	000333ee 	.word	0x000333ee
   25644:	00033447 	.word	0x00033447
   25648:	00032659 	.word	0x00032659
   2564c:	0003345c 	.word	0x0003345c

00025650 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25652:	4604      	mov	r4, r0
   25654:	4616      	mov	r6, r2
   25656:	461d      	mov	r5, r3
   25658:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2565c:	b17b      	cbz	r3, 2567e <z_impl_k_sem_take+0x2e>
   2565e:	ea52 0305 	orrs.w	r3, r2, r5
   25662:	d00c      	beq.n	2567e <z_impl_k_sem_take+0x2e>
   25664:	492d      	ldr	r1, [pc, #180]	; (2571c <z_impl_k_sem_take+0xcc>)
   25666:	2379      	movs	r3, #121	; 0x79
   25668:	4a2d      	ldr	r2, [pc, #180]	; (25720 <z_impl_k_sem_take+0xd0>)
   2566a:	482e      	ldr	r0, [pc, #184]	; (25724 <z_impl_k_sem_take+0xd4>)
   2566c:	f005 f825 	bl	2a6ba <assert_print>
   25670:	482d      	ldr	r0, [pc, #180]	; (25728 <z_impl_k_sem_take+0xd8>)
   25672:	f005 f822 	bl	2a6ba <assert_print>
   25676:	2179      	movs	r1, #121	; 0x79
   25678:	4829      	ldr	r0, [pc, #164]	; (25720 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2567a:	f005 f817 	bl	2a6ac <assert_post_action>
   2567e:	f04f 0320 	mov.w	r3, #32
   25682:	f3ef 8711 	mrs	r7, BASEPRI
   25686:	f383 8812 	msr	BASEPRI_MAX, r3
   2568a:	f3bf 8f6f 	isb	sy
   2568e:	4827      	ldr	r0, [pc, #156]	; (2572c <z_impl_k_sem_take+0xdc>)
   25690:	f7ff fce2 	bl	25058 <z_spin_lock_valid>
   25694:	b960      	cbnz	r0, 256b0 <z_impl_k_sem_take+0x60>
   25696:	2394      	movs	r3, #148	; 0x94
   25698:	4a25      	ldr	r2, [pc, #148]	; (25730 <z_impl_k_sem_take+0xe0>)
   2569a:	4926      	ldr	r1, [pc, #152]	; (25734 <z_impl_k_sem_take+0xe4>)
   2569c:	4821      	ldr	r0, [pc, #132]	; (25724 <z_impl_k_sem_take+0xd4>)
   2569e:	f005 f80c 	bl	2a6ba <assert_print>
   256a2:	4922      	ldr	r1, [pc, #136]	; (2572c <z_impl_k_sem_take+0xdc>)
   256a4:	4824      	ldr	r0, [pc, #144]	; (25738 <z_impl_k_sem_take+0xe8>)
   256a6:	f005 f808 	bl	2a6ba <assert_print>
   256aa:	2194      	movs	r1, #148	; 0x94
   256ac:	4820      	ldr	r0, [pc, #128]	; (25730 <z_impl_k_sem_take+0xe0>)
   256ae:	e7e4      	b.n	2567a <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   256b0:	481e      	ldr	r0, [pc, #120]	; (2572c <z_impl_k_sem_take+0xdc>)
   256b2:	f7ff fced 	bl	25090 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   256b6:	68a3      	ldr	r3, [r4, #8]
   256b8:	b1c3      	cbz	r3, 256ec <z_impl_k_sem_take+0x9c>
		sem->count--;
   256ba:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   256bc:	481b      	ldr	r0, [pc, #108]	; (2572c <z_impl_k_sem_take+0xdc>)
   256be:	60a3      	str	r3, [r4, #8]
   256c0:	f7ff fcd8 	bl	25074 <z_spin_unlock_valid>
   256c4:	b958      	cbnz	r0, 256de <z_impl_k_sem_take+0x8e>
   256c6:	23c2      	movs	r3, #194	; 0xc2
   256c8:	4a19      	ldr	r2, [pc, #100]	; (25730 <z_impl_k_sem_take+0xe0>)
   256ca:	491c      	ldr	r1, [pc, #112]	; (2573c <z_impl_k_sem_take+0xec>)
   256cc:	4815      	ldr	r0, [pc, #84]	; (25724 <z_impl_k_sem_take+0xd4>)
   256ce:	f004 fff4 	bl	2a6ba <assert_print>
   256d2:	4916      	ldr	r1, [pc, #88]	; (2572c <z_impl_k_sem_take+0xdc>)
   256d4:	481a      	ldr	r0, [pc, #104]	; (25740 <z_impl_k_sem_take+0xf0>)
   256d6:	f004 fff0 	bl	2a6ba <assert_print>
   256da:	21c2      	movs	r1, #194	; 0xc2
   256dc:	e7e6      	b.n	256ac <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   256de:	f387 8811 	msr	BASEPRI, r7
   256e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   256e6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   256e8:	b003      	add	sp, #12
   256ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   256ec:	ea56 0305 	orrs.w	r3, r6, r5
   256f0:	d10b      	bne.n	2570a <z_impl_k_sem_take+0xba>
   256f2:	480e      	ldr	r0, [pc, #56]	; (2572c <z_impl_k_sem_take+0xdc>)
   256f4:	f7ff fcbe 	bl	25074 <z_spin_unlock_valid>
   256f8:	2800      	cmp	r0, #0
   256fa:	d0e4      	beq.n	256c6 <z_impl_k_sem_take+0x76>
   256fc:	f387 8811 	msr	BASEPRI, r7
   25700:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25704:	f06f 000f 	mvn.w	r0, #15
   25708:	e7ee      	b.n	256e8 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2570a:	4622      	mov	r2, r4
   2570c:	4639      	mov	r1, r7
   2570e:	e9cd 6500 	strd	r6, r5, [sp]
   25712:	4806      	ldr	r0, [pc, #24]	; (2572c <z_impl_k_sem_take+0xdc>)
   25714:	f001 fa38 	bl	26b88 <z_pend_curr>
	return ret;
   25718:	e7e6      	b.n	256e8 <z_impl_k_sem_take+0x98>
   2571a:	bf00      	nop
   2571c:	0003854d 	.word	0x0003854d
   25720:	0003852d 	.word	0x0003852d
   25724:	00032659 	.word	0x00032659
   25728:	000368ea 	.word	0x000368ea
   2572c:	20021ab4 	.word	0x20021ab4
   25730:	000333ee 	.word	0x000333ee
   25734:	00033447 	.word	0x00033447
   25738:	0003345c 	.word	0x0003345c
   2573c:	0003341b 	.word	0x0003341b
   25740:	00033432 	.word	0x00033432

00025744 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25746:	2400      	movs	r4, #0
   25748:	4b08      	ldr	r3, [pc, #32]	; (2576c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2574a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   2574e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   25750:	ab02      	add	r3, sp, #8
   25752:	9300      	str	r3, [sp, #0]
   25754:	4906      	ldr	r1, [pc, #24]	; (25770 <k_sys_work_q_init+0x2c>)
   25756:	f04f 33ff 	mov.w	r3, #4294967295
   2575a:	4806      	ldr	r0, [pc, #24]	; (25774 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2575c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25760:	f000 fac0 	bl	25ce4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25764:	4620      	mov	r0, r4
   25766:	b004      	add	sp, #16
   25768:	bd10      	pop	{r4, pc}
   2576a:	bf00      	nop
   2576c:	0003859b 	.word	0x0003859b
   25770:	200343f0 	.word	0x200343f0
   25774:	2000a270 	.word	0x2000a270

00025778 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2577c:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2577e:	4e6e      	ldr	r6, [pc, #440]	; (25938 <work_queue_main+0x1c0>)
	return list->head;
   25780:	4f6e      	ldr	r7, [pc, #440]	; (2593c <work_queue_main+0x1c4>)
   25782:	b085      	sub	sp, #20
	__asm__ volatile(
   25784:	f04f 0320 	mov.w	r3, #32
   25788:	f3ef 8811 	mrs	r8, BASEPRI
   2578c:	f383 8812 	msr	BASEPRI_MAX, r3
   25790:	f3bf 8f6f 	isb	sy
   25794:	4630      	mov	r0, r6
   25796:	f7ff fc5f 	bl	25058 <z_spin_lock_valid>
   2579a:	b968      	cbnz	r0, 257b8 <work_queue_main+0x40>
   2579c:	2394      	movs	r3, #148	; 0x94
   2579e:	4a68      	ldr	r2, [pc, #416]	; (25940 <work_queue_main+0x1c8>)
   257a0:	4968      	ldr	r1, [pc, #416]	; (25944 <work_queue_main+0x1cc>)
   257a2:	4869      	ldr	r0, [pc, #420]	; (25948 <work_queue_main+0x1d0>)
   257a4:	f004 ff89 	bl	2a6ba <assert_print>
   257a8:	4963      	ldr	r1, [pc, #396]	; (25938 <work_queue_main+0x1c0>)
   257aa:	4868      	ldr	r0, [pc, #416]	; (2594c <work_queue_main+0x1d4>)
   257ac:	f004 ff85 	bl	2a6ba <assert_print>
   257b0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   257b2:	4863      	ldr	r0, [pc, #396]	; (25940 <work_queue_main+0x1c8>)
   257b4:	f004 ff7a 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   257b8:	4630      	mov	r0, r6
   257ba:	f7ff fc69 	bl	25090 <z_spin_lock_set_owner>
   257be:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   257c2:	b9ad      	cbnz	r5, 257f0 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   257c4:	2102      	movs	r1, #2
   257c6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   257ca:	f00a fd1e 	bl	3020a <flag_test_and_clear>
   257ce:	2800      	cmp	r0, #0
   257d0:	d135      	bne.n	2583e <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   257d2:	2300      	movs	r3, #0
   257d4:	f04f 32ff 	mov.w	r2, #4294967295
   257d8:	9302      	str	r3, [sp, #8]
   257da:	f04f 33ff 	mov.w	r3, #4294967295
   257de:	4641      	mov	r1, r8
   257e0:	e9cd 2300 	strd	r2, r3, [sp]
   257e4:	4630      	mov	r0, r6
   257e6:	f104 0290 	add.w	r2, r4, #144	; 0x90
   257ea:	f001 ff41 	bl	27670 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   257ee:	e7c9      	b.n	25784 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   257f0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   257f4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   257f6:	4295      	cmp	r5, r2
	list->tail = node;
   257f8:	bf08      	it	eq
   257fa:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   257fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   25802:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25806:	4630      	mov	r0, r6
   25808:	f043 0302 	orr.w	r3, r3, #2
   2580c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   25810:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   25812:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   25816:	f023 0304 	bic.w	r3, r3, #4
   2581a:	f043 0301 	orr.w	r3, r3, #1
   2581e:	60eb      	str	r3, [r5, #12]
   25820:	f7ff fc28 	bl	25074 <z_spin_unlock_valid>
   25824:	b9a8      	cbnz	r0, 25852 <work_queue_main+0xda>
   25826:	23c2      	movs	r3, #194	; 0xc2
   25828:	4a45      	ldr	r2, [pc, #276]	; (25940 <work_queue_main+0x1c8>)
   2582a:	4949      	ldr	r1, [pc, #292]	; (25950 <work_queue_main+0x1d8>)
   2582c:	4846      	ldr	r0, [pc, #280]	; (25948 <work_queue_main+0x1d0>)
   2582e:	f004 ff44 	bl	2a6ba <assert_print>
   25832:	4941      	ldr	r1, [pc, #260]	; (25938 <work_queue_main+0x1c0>)
   25834:	4847      	ldr	r0, [pc, #284]	; (25954 <work_queue_main+0x1dc>)
   25836:	f004 ff40 	bl	2a6ba <assert_print>
   2583a:	21c2      	movs	r1, #194	; 0xc2
   2583c:	e7b9      	b.n	257b2 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2583e:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25842:	2200      	movs	r2, #0
   25844:	2101      	movs	r1, #1
   25846:	4628      	mov	r0, r5
   25848:	f001 feb4 	bl	275b4 <z_sched_wake>
   2584c:	2800      	cmp	r0, #0
   2584e:	d1f8      	bne.n	25842 <work_queue_main+0xca>
   25850:	e7bf      	b.n	257d2 <work_queue_main+0x5a>
	__asm__ volatile(
   25852:	f388 8811 	msr	BASEPRI, r8
   25856:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   2585a:	f1b9 0f00 	cmp.w	r9, #0
   2585e:	d10a      	bne.n	25876 <work_queue_main+0xfe>
   25860:	493d      	ldr	r1, [pc, #244]	; (25958 <work_queue_main+0x1e0>)
   25862:	4839      	ldr	r0, [pc, #228]	; (25948 <work_queue_main+0x1d0>)
   25864:	f240 239b 	movw	r3, #667	; 0x29b
   25868:	4a3c      	ldr	r2, [pc, #240]	; (2595c <work_queue_main+0x1e4>)
   2586a:	f004 ff26 	bl	2a6ba <assert_print>
   2586e:	f240 219b 	movw	r1, #667	; 0x29b
   25872:	483a      	ldr	r0, [pc, #232]	; (2595c <work_queue_main+0x1e4>)
   25874:	e79e      	b.n	257b4 <work_queue_main+0x3c>
		handler(work);
   25876:	4628      	mov	r0, r5
   25878:	47c8      	blx	r9
	__asm__ volatile(
   2587a:	f04f 0320 	mov.w	r3, #32
   2587e:	f3ef 8a11 	mrs	sl, BASEPRI
   25882:	f383 8812 	msr	BASEPRI_MAX, r3
   25886:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2588a:	4630      	mov	r0, r6
   2588c:	f7ff fbe4 	bl	25058 <z_spin_lock_valid>
   25890:	2800      	cmp	r0, #0
   25892:	d083      	beq.n	2579c <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   25894:	4630      	mov	r0, r6
   25896:	f7ff fbfb 	bl	25090 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   2589a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2589c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2589e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   258a2:	d417      	bmi.n	258d4 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   258a4:	60ea      	str	r2, [r5, #12]
   258a6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258aa:	4630      	mov	r0, r6
   258ac:	f023 0302 	bic.w	r3, r3, #2
   258b0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   258b4:	f3c3 2500 	ubfx	r5, r3, #8, #1
   258b8:	f7ff fbdc 	bl	25074 <z_spin_unlock_valid>
   258bc:	2800      	cmp	r0, #0
   258be:	d0b2      	beq.n	25826 <work_queue_main+0xae>
	__asm__ volatile(
   258c0:	f38a 8811 	msr	BASEPRI, sl
   258c4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   258c8:	2d00      	cmp	r5, #0
   258ca:	f47f af5b 	bne.w	25784 <work_queue_main+0xc>
	z_impl_k_yield();
   258ce:	f001 fc35 	bl	2713c <z_impl_k_yield>
}
   258d2:	e757      	b.n	25784 <work_queue_main+0xc>
	return list->head;
   258d4:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   258d6:	f023 0303 	bic.w	r3, r3, #3
   258da:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   258dc:	2800      	cmp	r0, #0
   258de:	d0e2      	beq.n	258a6 <work_queue_main+0x12e>
	return node->next;
   258e0:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   258e4:	46c3      	mov	fp, r8
	return node->next;
   258e6:	f8d0 9000 	ldr.w	r9, [r0]
   258ea:	2800      	cmp	r0, #0
   258ec:	d0db      	beq.n	258a6 <work_queue_main+0x12e>
		if (wc->work == work) {
   258ee:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   258f0:	4602      	mov	r2, r0
		if (wc->work == work) {
   258f2:	429d      	cmp	r5, r3
   258f4:	d10d      	bne.n	25912 <work_queue_main+0x19a>
   258f6:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   258f8:	f1b8 0f00 	cmp.w	r8, #0
   258fc:	d112      	bne.n	25924 <work_queue_main+0x1ac>
   258fe:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   25900:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   25902:	4283      	cmp	r3, r0
   25904:	d100      	bne.n	25908 <work_queue_main+0x190>
	list->tail = node;
   25906:	607a      	str	r2, [r7, #4]
	parent->next = child;
   25908:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   2590c:	f7ff fe5c 	bl	255c8 <z_impl_k_sem_give>
}
   25910:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25912:	f1b9 0f00 	cmp.w	r9, #0
   25916:	d00d      	beq.n	25934 <work_queue_main+0x1bc>
	return node->next;
   25918:	f8d9 3000 	ldr.w	r3, [r9]
   2591c:	4648      	mov	r0, r9
   2591e:	4690      	mov	r8, r2
   25920:	4699      	mov	r9, r3
   25922:	e7e2      	b.n	258ea <work_queue_main+0x172>
	parent->next = child;
   25924:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   25928:	687b      	ldr	r3, [r7, #4]
   2592a:	4283      	cmp	r3, r0
	list->tail = node;
   2592c:	bf08      	it	eq
   2592e:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   25932:	e7e9      	b.n	25908 <work_queue_main+0x190>
   25934:	464b      	mov	r3, r9
   25936:	e7f1      	b.n	2591c <work_queue_main+0x1a4>
   25938:	20021ac0 	.word	0x20021ac0
   2593c:	20021ab8 	.word	0x20021ab8
   25940:	000333ee 	.word	0x000333ee
   25944:	00033447 	.word	0x00033447
   25948:	00032659 	.word	0x00032659
   2594c:	0003345c 	.word	0x0003345c
   25950:	0003341b 	.word	0x0003341b
   25954:	00033432 	.word	0x00033432
   25958:	000385c5 	.word	0x000385c5
   2595c:	000385a4 	.word	0x000385a4

00025960 <cancel_sync_locked>:
{
   25960:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25962:	68c3      	ldr	r3, [r0, #12]
{
   25964:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   25966:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2596a:	079b      	lsls	r3, r3, #30
{
   2596c:	460c      	mov	r4, r1
	if (ret) {
   2596e:	d50d      	bpl.n	2598c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25970:	2201      	movs	r2, #1
   25972:	2100      	movs	r1, #0
   25974:	f104 0008 	add.w	r0, r4, #8
   25978:	f00a fc37 	bl	301ea <z_impl_k_sem_init>
	parent->next = child;
   2597c:	2300      	movs	r3, #0
   2597e:	6023      	str	r3, [r4, #0]
	return list->tail;
   25980:	4b05      	ldr	r3, [pc, #20]	; (25998 <cancel_sync_locked+0x38>)
	canceler->work = work;
   25982:	6065      	str	r5, [r4, #4]
   25984:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25986:	b91a      	cbnz	r2, 25990 <cancel_sync_locked+0x30>
	list->head = node;
   25988:	e9c3 4400 	strd	r4, r4, [r3]
}
   2598c:	4630      	mov	r0, r6
   2598e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   25990:	6014      	str	r4, [r2, #0]
	list->tail = node;
   25992:	605c      	str	r4, [r3, #4]
}
   25994:	e7fa      	b.n	2598c <cancel_sync_locked+0x2c>
   25996:	bf00      	nop
   25998:	20021ab8 	.word	0x20021ab8

0002599c <submit_to_queue_locked>:
{
   2599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2599e:	68c3      	ldr	r3, [r0, #12]
{
   259a0:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   259a2:	079a      	lsls	r2, r3, #30
{
   259a4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   259a6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   259aa:	d439      	bmi.n	25a20 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   259ac:	075b      	lsls	r3, r3, #29
   259ae:	d425      	bmi.n	259fc <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   259b0:	680b      	ldr	r3, [r1, #0]
   259b2:	b90b      	cbnz	r3, 259b8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   259b4:	6883      	ldr	r3, [r0, #8]
   259b6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   259b8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   259ba:	07dd      	lsls	r5, r3, #31
   259bc:	d521      	bpl.n	25a02 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   259be:	68a3      	ldr	r3, [r4, #8]
   259c0:	b95b      	cbnz	r3, 259da <submit_to_queue_locked+0x3e>
   259c2:	4928      	ldr	r1, [pc, #160]	; (25a64 <submit_to_queue_locked+0xc8>)
   259c4:	4828      	ldr	r0, [pc, #160]	; (25a68 <submit_to_queue_locked+0xcc>)
   259c6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   259ca:	4a28      	ldr	r2, [pc, #160]	; (25a6c <submit_to_queue_locked+0xd0>)
   259cc:	f004 fe75 	bl	2a6ba <assert_print>
   259d0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   259d4:	4825      	ldr	r0, [pc, #148]	; (25a6c <submit_to_queue_locked+0xd0>)
   259d6:	f004 fe69 	bl	2a6ac <assert_post_action>
			ret = 2;
   259da:	2602      	movs	r6, #2
			*queuep = work->queue;
   259dc:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   259de:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   259e0:	2d00      	cmp	r5, #0
   259e2:	d03c      	beq.n	25a5e <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   259e4:	4b22      	ldr	r3, [pc, #136]	; (25a70 <submit_to_queue_locked+0xd4>)
   259e6:	689b      	ldr	r3, [r3, #8]
   259e8:	42ab      	cmp	r3, r5
   259ea:	d00c      	beq.n	25a06 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   259ec:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   259f0:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   259f2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   259f6:	d416      	bmi.n	25a26 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   259f8:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   259fc:	2300      	movs	r3, #0
   259fe:	603b      	str	r3, [r7, #0]
	return ret;
   25a00:	e027      	b.n	25a52 <submit_to_queue_locked+0xb6>
		ret = 1;
   25a02:	2601      	movs	r6, #1
   25a04:	e7eb      	b.n	259de <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25a06:	f00a fb9f 	bl	30148 <k_is_in_isr>
   25a0a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   25a0e:	2800      	cmp	r0, #0
   25a10:	d1ee      	bne.n	259f0 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25a12:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25a14:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25a18:	d5ee      	bpl.n	259f8 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   25a1a:	b152      	cbz	r2, 25a32 <submit_to_queue_locked+0x96>
   25a1c:	075b      	lsls	r3, r3, #29
   25a1e:	d408      	bmi.n	25a32 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   25a20:	f06f 060f 	mvn.w	r6, #15
   25a24:	e7ea      	b.n	259fc <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   25a26:	2a00      	cmp	r2, #0
   25a28:	d1fa      	bne.n	25a20 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   25a2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   25a2e:	2b00      	cmp	r3, #0
   25a30:	d1f6      	bne.n	25a20 <submit_to_queue_locked+0x84>
	parent->next = child;
   25a32:	2300      	movs	r3, #0
   25a34:	6023      	str	r3, [r4, #0]
	return list->tail;
   25a36:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   25a3a:	b963      	cbnz	r3, 25a56 <submit_to_queue_locked+0xba>
	list->head = node;
   25a3c:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   25a40:	4628      	mov	r0, r5
   25a42:	f00a fbfb 	bl	3023c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   25a46:	68e3      	ldr	r3, [r4, #12]
   25a48:	f043 0304 	orr.w	r3, r3, #4
   25a4c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25a4e:	683b      	ldr	r3, [r7, #0]
   25a50:	60a3      	str	r3, [r4, #8]
}
   25a52:	4630      	mov	r0, r6
   25a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   25a56:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25a58:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   25a5c:	e7f0      	b.n	25a40 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   25a5e:	f06f 0615 	mvn.w	r6, #21
   25a62:	e7cb      	b.n	259fc <submit_to_queue_locked+0x60>
   25a64:	000385dc 	.word	0x000385dc
   25a68:	00032659 	.word	0x00032659
   25a6c:	000385a4 	.word	0x000385a4
   25a70:	20021a88 	.word	0x20021a88

00025a74 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   25a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25a76:	4604      	mov	r4, r0
	__asm__ volatile(
   25a78:	f04f 0320 	mov.w	r3, #32
   25a7c:	f3ef 8511 	mrs	r5, BASEPRI
   25a80:	f383 8812 	msr	BASEPRI_MAX, r3
   25a84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a88:	481c      	ldr	r0, [pc, #112]	; (25afc <work_timeout+0x88>)
   25a8a:	f7ff fae5 	bl	25058 <z_spin_lock_valid>
   25a8e:	b968      	cbnz	r0, 25aac <work_timeout+0x38>
   25a90:	2394      	movs	r3, #148	; 0x94
   25a92:	4a1b      	ldr	r2, [pc, #108]	; (25b00 <work_timeout+0x8c>)
   25a94:	491b      	ldr	r1, [pc, #108]	; (25b04 <work_timeout+0x90>)
   25a96:	481c      	ldr	r0, [pc, #112]	; (25b08 <work_timeout+0x94>)
   25a98:	f004 fe0f 	bl	2a6ba <assert_print>
   25a9c:	4917      	ldr	r1, [pc, #92]	; (25afc <work_timeout+0x88>)
   25a9e:	481b      	ldr	r0, [pc, #108]	; (25b0c <work_timeout+0x98>)
   25aa0:	f004 fe0b 	bl	2a6ba <assert_print>
   25aa4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25aa6:	4816      	ldr	r0, [pc, #88]	; (25b00 <work_timeout+0x8c>)
   25aa8:	f004 fe00 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25aac:	4813      	ldr	r0, [pc, #76]	; (25afc <work_timeout+0x88>)
   25aae:	f7ff faef 	bl	25090 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   25ab2:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25ab4:	2103      	movs	r1, #3
   25ab6:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   25ab8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25aba:	f1a4 0610 	sub.w	r6, r4, #16
   25abe:	f00a fba4 	bl	3020a <flag_test_and_clear>
   25ac2:	b128      	cbz	r0, 25ad0 <work_timeout+0x5c>
		queue = dw->queue;
   25ac4:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   25ac6:	4630      	mov	r0, r6
   25ac8:	a901      	add	r1, sp, #4
		queue = dw->queue;
   25aca:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   25acc:	f7ff ff66 	bl	2599c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ad0:	480a      	ldr	r0, [pc, #40]	; (25afc <work_timeout+0x88>)
   25ad2:	f7ff facf 	bl	25074 <z_spin_unlock_valid>
   25ad6:	b958      	cbnz	r0, 25af0 <work_timeout+0x7c>
   25ad8:	23c2      	movs	r3, #194	; 0xc2
   25ada:	4a09      	ldr	r2, [pc, #36]	; (25b00 <work_timeout+0x8c>)
   25adc:	490c      	ldr	r1, [pc, #48]	; (25b10 <work_timeout+0x9c>)
   25ade:	480a      	ldr	r0, [pc, #40]	; (25b08 <work_timeout+0x94>)
   25ae0:	f004 fdeb 	bl	2a6ba <assert_print>
   25ae4:	4905      	ldr	r1, [pc, #20]	; (25afc <work_timeout+0x88>)
   25ae6:	480b      	ldr	r0, [pc, #44]	; (25b14 <work_timeout+0xa0>)
   25ae8:	f004 fde7 	bl	2a6ba <assert_print>
   25aec:	21c2      	movs	r1, #194	; 0xc2
   25aee:	e7da      	b.n	25aa6 <work_timeout+0x32>
	__asm__ volatile(
   25af0:	f385 8811 	msr	BASEPRI, r5
   25af4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   25af8:	b002      	add	sp, #8
   25afa:	bd70      	pop	{r4, r5, r6, pc}
   25afc:	20021ac0 	.word	0x20021ac0
   25b00:	000333ee 	.word	0x000333ee
   25b04:	00033447 	.word	0x00033447
   25b08:	00032659 	.word	0x00032659
   25b0c:	0003345c 	.word	0x0003345c
   25b10:	0003341b 	.word	0x0003341b
   25b14:	00033432 	.word	0x00033432

00025b18 <k_work_init>:
{
   25b18:	b538      	push	{r3, r4, r5, lr}
   25b1a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   25b1c:	4604      	mov	r4, r0
   25b1e:	b948      	cbnz	r0, 25b34 <k_work_init+0x1c>
   25b20:	490c      	ldr	r1, [pc, #48]	; (25b54 <k_work_init+0x3c>)
   25b22:	2389      	movs	r3, #137	; 0x89
   25b24:	4a0c      	ldr	r2, [pc, #48]	; (25b58 <k_work_init+0x40>)
   25b26:	480d      	ldr	r0, [pc, #52]	; (25b5c <k_work_init+0x44>)
   25b28:	f004 fdc7 	bl	2a6ba <assert_print>
   25b2c:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   25b2e:	480a      	ldr	r0, [pc, #40]	; (25b58 <k_work_init+0x40>)
   25b30:	f004 fdbc 	bl	2a6ac <assert_post_action>
   25b34:	b939      	cbnz	r1, 25b46 <k_work_init+0x2e>
   25b36:	490a      	ldr	r1, [pc, #40]	; (25b60 <k_work_init+0x48>)
   25b38:	238a      	movs	r3, #138	; 0x8a
   25b3a:	4a07      	ldr	r2, [pc, #28]	; (25b58 <k_work_init+0x40>)
   25b3c:	4807      	ldr	r0, [pc, #28]	; (25b5c <k_work_init+0x44>)
   25b3e:	f004 fdbc 	bl	2a6ba <assert_print>
   25b42:	218a      	movs	r1, #138	; 0x8a
   25b44:	e7f3      	b.n	25b2e <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25b46:	2210      	movs	r2, #16
   25b48:	2100      	movs	r1, #0
   25b4a:	f00a fd4a 	bl	305e2 <memset>
   25b4e:	6065      	str	r5, [r4, #4]
}
   25b50:	bd38      	pop	{r3, r4, r5, pc}
   25b52:	bf00      	nop
   25b54:	0003867b 	.word	0x0003867b
   25b58:	000385a4 	.word	0x000385a4
   25b5c:	00032659 	.word	0x00032659
   25b60:	000385c5 	.word	0x000385c5

00025b64 <k_work_busy_get>:
{
   25b64:	b538      	push	{r3, r4, r5, lr}
   25b66:	4604      	mov	r4, r0
	__asm__ volatile(
   25b68:	f04f 0320 	mov.w	r3, #32
   25b6c:	f3ef 8511 	mrs	r5, BASEPRI
   25b70:	f383 8812 	msr	BASEPRI_MAX, r3
   25b74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b78:	4816      	ldr	r0, [pc, #88]	; (25bd4 <k_work_busy_get+0x70>)
   25b7a:	f7ff fa6d 	bl	25058 <z_spin_lock_valid>
   25b7e:	b968      	cbnz	r0, 25b9c <k_work_busy_get+0x38>
   25b80:	2394      	movs	r3, #148	; 0x94
   25b82:	4a15      	ldr	r2, [pc, #84]	; (25bd8 <k_work_busy_get+0x74>)
   25b84:	4915      	ldr	r1, [pc, #84]	; (25bdc <k_work_busy_get+0x78>)
   25b86:	4816      	ldr	r0, [pc, #88]	; (25be0 <k_work_busy_get+0x7c>)
   25b88:	f004 fd97 	bl	2a6ba <assert_print>
   25b8c:	4911      	ldr	r1, [pc, #68]	; (25bd4 <k_work_busy_get+0x70>)
   25b8e:	4815      	ldr	r0, [pc, #84]	; (25be4 <k_work_busy_get+0x80>)
   25b90:	f004 fd93 	bl	2a6ba <assert_print>
   25b94:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b96:	4810      	ldr	r0, [pc, #64]	; (25bd8 <k_work_busy_get+0x74>)
   25b98:	f004 fd88 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25b9c:	480d      	ldr	r0, [pc, #52]	; (25bd4 <k_work_busy_get+0x70>)
   25b9e:	f7ff fa77 	bl	25090 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   25ba2:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ba4:	480b      	ldr	r0, [pc, #44]	; (25bd4 <k_work_busy_get+0x70>)
   25ba6:	f004 040f 	and.w	r4, r4, #15
   25baa:	f7ff fa63 	bl	25074 <z_spin_unlock_valid>
   25bae:	b958      	cbnz	r0, 25bc8 <k_work_busy_get+0x64>
   25bb0:	23c2      	movs	r3, #194	; 0xc2
   25bb2:	4a09      	ldr	r2, [pc, #36]	; (25bd8 <k_work_busy_get+0x74>)
   25bb4:	490c      	ldr	r1, [pc, #48]	; (25be8 <k_work_busy_get+0x84>)
   25bb6:	480a      	ldr	r0, [pc, #40]	; (25be0 <k_work_busy_get+0x7c>)
   25bb8:	f004 fd7f 	bl	2a6ba <assert_print>
   25bbc:	4905      	ldr	r1, [pc, #20]	; (25bd4 <k_work_busy_get+0x70>)
   25bbe:	480b      	ldr	r0, [pc, #44]	; (25bec <k_work_busy_get+0x88>)
   25bc0:	f004 fd7b 	bl	2a6ba <assert_print>
   25bc4:	21c2      	movs	r1, #194	; 0xc2
   25bc6:	e7e6      	b.n	25b96 <k_work_busy_get+0x32>
	__asm__ volatile(
   25bc8:	f385 8811 	msr	BASEPRI, r5
   25bcc:	f3bf 8f6f 	isb	sy
}
   25bd0:	4620      	mov	r0, r4
   25bd2:	bd38      	pop	{r3, r4, r5, pc}
   25bd4:	20021ac0 	.word	0x20021ac0
   25bd8:	000333ee 	.word	0x000333ee
   25bdc:	00033447 	.word	0x00033447
   25be0:	00032659 	.word	0x00032659
   25be4:	0003345c 	.word	0x0003345c
   25be8:	0003341b 	.word	0x0003341b
   25bec:	00033432 	.word	0x00033432

00025bf0 <z_work_submit_to_queue>:
{
   25bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   25bf2:	460c      	mov	r4, r1
{
   25bf4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   25bf6:	b959      	cbnz	r1, 25c10 <z_work_submit_to_queue+0x20>
   25bf8:	4921      	ldr	r1, [pc, #132]	; (25c80 <z_work_submit_to_queue+0x90>)
   25bfa:	4822      	ldr	r0, [pc, #136]	; (25c84 <z_work_submit_to_queue+0x94>)
   25bfc:	f44f 73ba 	mov.w	r3, #372	; 0x174
   25c00:	4a21      	ldr	r2, [pc, #132]	; (25c88 <z_work_submit_to_queue+0x98>)
   25c02:	f004 fd5a 	bl	2a6ba <assert_print>
   25c06:	f44f 71ba 	mov.w	r1, #372	; 0x174
   25c0a:	481f      	ldr	r0, [pc, #124]	; (25c88 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c0c:	f004 fd4e 	bl	2a6ac <assert_post_action>
	__asm__ volatile(
   25c10:	f04f 0320 	mov.w	r3, #32
   25c14:	f3ef 8511 	mrs	r5, BASEPRI
   25c18:	f383 8812 	msr	BASEPRI_MAX, r3
   25c1c:	f3bf 8f6f 	isb	sy
   25c20:	481a      	ldr	r0, [pc, #104]	; (25c8c <z_work_submit_to_queue+0x9c>)
   25c22:	f7ff fa19 	bl	25058 <z_spin_lock_valid>
   25c26:	b960      	cbnz	r0, 25c42 <z_work_submit_to_queue+0x52>
   25c28:	2394      	movs	r3, #148	; 0x94
   25c2a:	4a19      	ldr	r2, [pc, #100]	; (25c90 <z_work_submit_to_queue+0xa0>)
   25c2c:	4919      	ldr	r1, [pc, #100]	; (25c94 <z_work_submit_to_queue+0xa4>)
   25c2e:	4815      	ldr	r0, [pc, #84]	; (25c84 <z_work_submit_to_queue+0x94>)
   25c30:	f004 fd43 	bl	2a6ba <assert_print>
   25c34:	4915      	ldr	r1, [pc, #84]	; (25c8c <z_work_submit_to_queue+0x9c>)
   25c36:	4818      	ldr	r0, [pc, #96]	; (25c98 <z_work_submit_to_queue+0xa8>)
   25c38:	f004 fd3f 	bl	2a6ba <assert_print>
   25c3c:	2194      	movs	r1, #148	; 0x94
   25c3e:	4814      	ldr	r0, [pc, #80]	; (25c90 <z_work_submit_to_queue+0xa0>)
   25c40:	e7e4      	b.n	25c0c <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   25c42:	4812      	ldr	r0, [pc, #72]	; (25c8c <z_work_submit_to_queue+0x9c>)
   25c44:	f7ff fa24 	bl	25090 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   25c48:	4620      	mov	r0, r4
   25c4a:	a901      	add	r1, sp, #4
   25c4c:	f7ff fea6 	bl	2599c <submit_to_queue_locked>
   25c50:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c52:	480e      	ldr	r0, [pc, #56]	; (25c8c <z_work_submit_to_queue+0x9c>)
   25c54:	f7ff fa0e 	bl	25074 <z_spin_unlock_valid>
   25c58:	b958      	cbnz	r0, 25c72 <z_work_submit_to_queue+0x82>
   25c5a:	23c2      	movs	r3, #194	; 0xc2
   25c5c:	4a0c      	ldr	r2, [pc, #48]	; (25c90 <z_work_submit_to_queue+0xa0>)
   25c5e:	490f      	ldr	r1, [pc, #60]	; (25c9c <z_work_submit_to_queue+0xac>)
   25c60:	4808      	ldr	r0, [pc, #32]	; (25c84 <z_work_submit_to_queue+0x94>)
   25c62:	f004 fd2a 	bl	2a6ba <assert_print>
   25c66:	4909      	ldr	r1, [pc, #36]	; (25c8c <z_work_submit_to_queue+0x9c>)
   25c68:	480d      	ldr	r0, [pc, #52]	; (25ca0 <z_work_submit_to_queue+0xb0>)
   25c6a:	f004 fd26 	bl	2a6ba <assert_print>
   25c6e:	21c2      	movs	r1, #194	; 0xc2
   25c70:	e7e5      	b.n	25c3e <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   25c72:	f385 8811 	msr	BASEPRI, r5
   25c76:	f3bf 8f6f 	isb	sy
}
   25c7a:	4620      	mov	r0, r4
   25c7c:	b003      	add	sp, #12
   25c7e:	bd30      	pop	{r4, r5, pc}
   25c80:	0003867b 	.word	0x0003867b
   25c84:	00032659 	.word	0x00032659
   25c88:	000385a4 	.word	0x000385a4
   25c8c:	20021ac0 	.word	0x20021ac0
   25c90:	000333ee 	.word	0x000333ee
   25c94:	00033447 	.word	0x00033447
   25c98:	0003345c 	.word	0x0003345c
   25c9c:	0003341b 	.word	0x0003341b
   25ca0:	00033432 	.word	0x00033432

00025ca4 <k_work_submit>:
{
   25ca4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   25ca6:	4801      	ldr	r0, [pc, #4]	; (25cac <k_work_submit+0x8>)
   25ca8:	f00a bb02 	b.w	302b0 <k_work_submit_to_queue>
   25cac:	2000a270 	.word	0x2000a270

00025cb0 <k_work_queue_init>:
{
   25cb0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   25cb2:	b958      	cbnz	r0, 25ccc <k_work_queue_init+0x1c>
   25cb4:	4908      	ldr	r1, [pc, #32]	; (25cd8 <k_work_queue_init+0x28>)
   25cb6:	4809      	ldr	r0, [pc, #36]	; (25cdc <k_work_queue_init+0x2c>)
   25cb8:	f240 23b9 	movw	r3, #697	; 0x2b9
   25cbc:	4a08      	ldr	r2, [pc, #32]	; (25ce0 <k_work_queue_init+0x30>)
   25cbe:	f004 fcfc 	bl	2a6ba <assert_print>
   25cc2:	f240 21b9 	movw	r1, #697	; 0x2b9
   25cc6:	4806      	ldr	r0, [pc, #24]	; (25ce0 <k_work_queue_init+0x30>)
   25cc8:	f004 fcf0 	bl	2a6ac <assert_post_action>
	*queue = (struct k_work_q) {
   25ccc:	22a8      	movs	r2, #168	; 0xa8
   25cce:	2100      	movs	r1, #0
   25cd0:	f00a fc87 	bl	305e2 <memset>
}
   25cd4:	bd08      	pop	{r3, pc}
   25cd6:	bf00      	nop
   25cd8:	000385e2 	.word	0x000385e2
   25cdc:	00032659 	.word	0x00032659
   25ce0:	000385a4 	.word	0x000385a4

00025ce4 <k_work_queue_start>:
{
   25ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ce6:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   25ce8:	4604      	mov	r4, r0
{
   25cea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   25cec:	b958      	cbnz	r0, 25d06 <k_work_queue_start+0x22>
   25cee:	492b      	ldr	r1, [pc, #172]	; (25d9c <k_work_queue_start+0xb8>)
   25cf0:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   25cf4:	4a2a      	ldr	r2, [pc, #168]	; (25da0 <k_work_queue_start+0xbc>)
   25cf6:	482b      	ldr	r0, [pc, #172]	; (25da4 <k_work_queue_start+0xc0>)
   25cf8:	f004 fcdf 	bl	2a6ba <assert_print>
   25cfc:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   25d00:	4827      	ldr	r0, [pc, #156]	; (25da0 <k_work_queue_start+0xbc>)
   25d02:	f004 fcd3 	bl	2a6ac <assert_post_action>
   25d06:	b949      	cbnz	r1, 25d1c <k_work_queue_start+0x38>
   25d08:	4927      	ldr	r1, [pc, #156]	; (25da8 <k_work_queue_start+0xc4>)
   25d0a:	f240 23c9 	movw	r3, #713	; 0x2c9
   25d0e:	4a24      	ldr	r2, [pc, #144]	; (25da0 <k_work_queue_start+0xbc>)
   25d10:	4824      	ldr	r0, [pc, #144]	; (25da4 <k_work_queue_start+0xc0>)
   25d12:	f004 fcd2 	bl	2a6ba <assert_print>
   25d16:	f240 21c9 	movw	r1, #713	; 0x2c9
   25d1a:	e7f1      	b.n	25d00 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   25d1c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   25d20:	f010 0001 	ands.w	r0, r0, #1
   25d24:	d009      	beq.n	25d3a <k_work_queue_start+0x56>
   25d26:	4921      	ldr	r1, [pc, #132]	; (25dac <k_work_queue_start+0xc8>)
   25d28:	f240 23ca 	movw	r3, #714	; 0x2ca
   25d2c:	4a1c      	ldr	r2, [pc, #112]	; (25da0 <k_work_queue_start+0xbc>)
   25d2e:	481d      	ldr	r0, [pc, #116]	; (25da4 <k_work_queue_start+0xc0>)
   25d30:	f004 fcc3 	bl	2a6ba <assert_print>
   25d34:	f240 21ca 	movw	r1, #714	; 0x2ca
   25d38:	e7e2      	b.n	25d00 <k_work_queue_start+0x1c>
	list->tail = NULL;
   25d3a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   25d3e:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   25d42:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   25d46:	f104 0098 	add.w	r0, r4, #152	; 0x98
   25d4a:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   25d4e:	b31d      	cbz	r5, 25d98 <k_work_queue_start+0xb4>
   25d50:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   25d52:	2800      	cmp	r0, #0
   25d54:	f240 1001 	movw	r0, #257	; 0x101
   25d58:	bf08      	it	eq
   25d5a:	2001      	moveq	r0, #1
	*flagp = flags;
   25d5c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25d60:	2000      	movs	r0, #0
   25d62:	f04f 36ff 	mov.w	r6, #4294967295
   25d66:	f04f 37ff 	mov.w	r7, #4294967295
   25d6a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   25d6e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   25d72:	e9cd 6706 	strd	r6, r7, [sp, #24]
   25d76:	4620      	mov	r0, r4
   25d78:	4b0d      	ldr	r3, [pc, #52]	; (25db0 <k_work_queue_start+0xcc>)
   25d7a:	9400      	str	r4, [sp, #0]
   25d7c:	f7ff f8a2 	bl	24ec4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   25d80:	b125      	cbz	r5, 25d8c <k_work_queue_start+0xa8>
   25d82:	6829      	ldr	r1, [r5, #0]
   25d84:	b111      	cbz	r1, 25d8c <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   25d86:	4620      	mov	r0, r4
   25d88:	f00a f9e4 	bl	30154 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25d8c:	4620      	mov	r0, r4
}
   25d8e:	b009      	add	sp, #36	; 0x24
   25d90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25d94:	f00a b9e3 	b.w	3015e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25d98:	2001      	movs	r0, #1
   25d9a:	e7df      	b.n	25d5c <k_work_queue_start+0x78>
   25d9c:	0003863a 	.word	0x0003863a
   25da0:	000385a4 	.word	0x000385a4
   25da4:	00032659 	.word	0x00032659
   25da8:	00038640 	.word	0x00038640
   25dac:	00038646 	.word	0x00038646
   25db0:	00025779 	.word	0x00025779

00025db4 <k_work_queue_drain>:
{
   25db4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   25db6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   25db8:	4604      	mov	r4, r0
   25dba:	b958      	cbnz	r0, 25dd4 <k_work_queue_drain+0x20>
   25dbc:	493a      	ldr	r1, [pc, #232]	; (25ea8 <k_work_queue_drain+0xf4>)
   25dbe:	f240 23ed 	movw	r3, #749	; 0x2ed
   25dc2:	4a3a      	ldr	r2, [pc, #232]	; (25eac <k_work_queue_drain+0xf8>)
   25dc4:	483a      	ldr	r0, [pc, #232]	; (25eb0 <k_work_queue_drain+0xfc>)
   25dc6:	f004 fc78 	bl	2a6ba <assert_print>
   25dca:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   25dce:	4837      	ldr	r0, [pc, #220]	; (25eac <k_work_queue_drain+0xf8>)
   25dd0:	f004 fc6c 	bl	2a6ac <assert_post_action>
   25dd4:	f00a f9b8 	bl	30148 <k_is_in_isr>
   25dd8:	b148      	cbz	r0, 25dee <k_work_queue_drain+0x3a>
   25dda:	4936      	ldr	r1, [pc, #216]	; (25eb4 <k_work_queue_drain+0x100>)
   25ddc:	f240 23ee 	movw	r3, #750	; 0x2ee
   25de0:	4a32      	ldr	r2, [pc, #200]	; (25eac <k_work_queue_drain+0xf8>)
   25de2:	4833      	ldr	r0, [pc, #204]	; (25eb0 <k_work_queue_drain+0xfc>)
   25de4:	f004 fc69 	bl	2a6ba <assert_print>
   25de8:	f240 21ee 	movw	r1, #750	; 0x2ee
   25dec:	e7ef      	b.n	25dce <k_work_queue_drain+0x1a>
	__asm__ volatile(
   25dee:	f04f 0320 	mov.w	r3, #32
   25df2:	f3ef 8611 	mrs	r6, BASEPRI
   25df6:	f383 8812 	msr	BASEPRI_MAX, r3
   25dfa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25dfe:	482e      	ldr	r0, [pc, #184]	; (25eb8 <k_work_queue_drain+0x104>)
   25e00:	f7ff f92a 	bl	25058 <z_spin_lock_valid>
   25e04:	b960      	cbnz	r0, 25e20 <k_work_queue_drain+0x6c>
   25e06:	2394      	movs	r3, #148	; 0x94
   25e08:	4a2c      	ldr	r2, [pc, #176]	; (25ebc <k_work_queue_drain+0x108>)
   25e0a:	492d      	ldr	r1, [pc, #180]	; (25ec0 <k_work_queue_drain+0x10c>)
   25e0c:	4828      	ldr	r0, [pc, #160]	; (25eb0 <k_work_queue_drain+0xfc>)
   25e0e:	f004 fc54 	bl	2a6ba <assert_print>
   25e12:	4929      	ldr	r1, [pc, #164]	; (25eb8 <k_work_queue_drain+0x104>)
   25e14:	482b      	ldr	r0, [pc, #172]	; (25ec4 <k_work_queue_drain+0x110>)
   25e16:	f004 fc50 	bl	2a6ba <assert_print>
   25e1a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e1c:	4827      	ldr	r0, [pc, #156]	; (25ebc <k_work_queue_drain+0x108>)
   25e1e:	e7d7      	b.n	25dd0 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   25e20:	4825      	ldr	r0, [pc, #148]	; (25eb8 <k_work_queue_drain+0x104>)
   25e22:	f7ff f935 	bl	25090 <z_spin_lock_set_owner>
	return *flagp;
   25e26:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   25e2a:	f013 0f06 	tst.w	r3, #6
   25e2e:	d11d      	bne.n	25e6c <k_work_queue_drain+0xb8>
	    || plug
   25e30:	b1b5      	cbz	r5, 25e60 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   25e32:	f043 030c 	orr.w	r3, r3, #12
   25e36:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   25e3a:	4620      	mov	r0, r4
   25e3c:	f00a f9fe 	bl	3023c <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   25e40:	2300      	movs	r3, #0
   25e42:	f04f 32ff 	mov.w	r2, #4294967295
   25e46:	9302      	str	r3, [sp, #8]
   25e48:	f04f 33ff 	mov.w	r3, #4294967295
   25e4c:	4631      	mov	r1, r6
   25e4e:	e9cd 2300 	strd	r2, r3, [sp]
   25e52:	4819      	ldr	r0, [pc, #100]	; (25eb8 <k_work_queue_drain+0x104>)
   25e54:	f104 0298 	add.w	r2, r4, #152	; 0x98
   25e58:	f001 fc0a 	bl	27670 <z_sched_wait>
}
   25e5c:	b004      	add	sp, #16
   25e5e:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   25e60:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   25e64:	b14d      	cbz	r5, 25e7a <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   25e66:	f043 0304 	orr.w	r3, r3, #4
   25e6a:	e7e4      	b.n	25e36 <k_work_queue_drain+0x82>
   25e6c:	f043 0204 	orr.w	r2, r3, #4
   25e70:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   25e74:	2d00      	cmp	r5, #0
   25e76:	d0e0      	beq.n	25e3a <k_work_queue_drain+0x86>
   25e78:	e7db      	b.n	25e32 <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e7a:	480f      	ldr	r0, [pc, #60]	; (25eb8 <k_work_queue_drain+0x104>)
   25e7c:	f7ff f8fa 	bl	25074 <z_spin_unlock_valid>
   25e80:	b958      	cbnz	r0, 25e9a <k_work_queue_drain+0xe6>
   25e82:	23c2      	movs	r3, #194	; 0xc2
   25e84:	4a0d      	ldr	r2, [pc, #52]	; (25ebc <k_work_queue_drain+0x108>)
   25e86:	4910      	ldr	r1, [pc, #64]	; (25ec8 <k_work_queue_drain+0x114>)
   25e88:	4809      	ldr	r0, [pc, #36]	; (25eb0 <k_work_queue_drain+0xfc>)
   25e8a:	f004 fc16 	bl	2a6ba <assert_print>
   25e8e:	490a      	ldr	r1, [pc, #40]	; (25eb8 <k_work_queue_drain+0x104>)
   25e90:	480e      	ldr	r0, [pc, #56]	; (25ecc <k_work_queue_drain+0x118>)
   25e92:	f004 fc12 	bl	2a6ba <assert_print>
   25e96:	21c2      	movs	r1, #194	; 0xc2
   25e98:	e7c0      	b.n	25e1c <k_work_queue_drain+0x68>
	__asm__ volatile(
   25e9a:	f386 8811 	msr	BASEPRI, r6
   25e9e:	f3bf 8f6f 	isb	sy
	int ret = 0;
   25ea2:	4628      	mov	r0, r5
	return ret;
   25ea4:	e7da      	b.n	25e5c <k_work_queue_drain+0xa8>
   25ea6:	bf00      	nop
   25ea8:	0003863a 	.word	0x0003863a
   25eac:	000385a4 	.word	0x000385a4
   25eb0:	00032659 	.word	0x00032659
   25eb4:	00035621 	.word	0x00035621
   25eb8:	20021ac0 	.word	0x20021ac0
   25ebc:	000333ee 	.word	0x000333ee
   25ec0:	00033447 	.word	0x00033447
   25ec4:	0003345c 	.word	0x0003345c
   25ec8:	0003341b 	.word	0x0003341b
   25ecc:	00033432 	.word	0x00033432

00025ed0 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   25ed0:	b538      	push	{r3, r4, r5, lr}
   25ed2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   25ed4:	4604      	mov	r4, r0
   25ed6:	b958      	cbnz	r0, 25ef0 <k_work_init_delayable+0x20>
   25ed8:	490f      	ldr	r1, [pc, #60]	; (25f18 <k_work_init_delayable+0x48>)
   25eda:	f44f 7350 	mov.w	r3, #832	; 0x340
   25ede:	4a0f      	ldr	r2, [pc, #60]	; (25f1c <k_work_init_delayable+0x4c>)
   25ee0:	480f      	ldr	r0, [pc, #60]	; (25f20 <k_work_init_delayable+0x50>)
   25ee2:	f004 fbea 	bl	2a6ba <assert_print>
   25ee6:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   25eea:	480c      	ldr	r0, [pc, #48]	; (25f1c <k_work_init_delayable+0x4c>)
   25eec:	f004 fbde 	bl	2a6ac <assert_post_action>
   25ef0:	b949      	cbnz	r1, 25f06 <k_work_init_delayable+0x36>
   25ef2:	490c      	ldr	r1, [pc, #48]	; (25f24 <k_work_init_delayable+0x54>)
   25ef4:	f240 3341 	movw	r3, #833	; 0x341
   25ef8:	4a08      	ldr	r2, [pc, #32]	; (25f1c <k_work_init_delayable+0x4c>)
   25efa:	4809      	ldr	r0, [pc, #36]	; (25f20 <k_work_init_delayable+0x50>)
   25efc:	f004 fbdd 	bl	2a6ba <assert_print>
   25f00:	f240 3141 	movw	r1, #833	; 0x341
   25f04:	e7f1      	b.n	25eea <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   25f06:	2230      	movs	r2, #48	; 0x30
   25f08:	2100      	movs	r1, #0
   25f0a:	f00a fb6a 	bl	305e2 <memset>
   25f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
   25f12:	6065      	str	r5, [r4, #4]
   25f14:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   25f16:	bd38      	pop	{r3, r4, r5, pc}
   25f18:	0003867a 	.word	0x0003867a
   25f1c:	000385a4 	.word	0x000385a4
   25f20:	00032659 	.word	0x00032659
   25f24:	000385c5 	.word	0x000385c5

00025f28 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   25f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25f2a:	4616      	mov	r6, r2
   25f2c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   25f2e:	460c      	mov	r4, r1
{
   25f30:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   25f32:	b959      	cbnz	r1, 25f4c <k_work_schedule_for_queue+0x24>
   25f34:	492d      	ldr	r1, [pc, #180]	; (25fec <k_work_schedule_for_queue+0xc4>)
   25f36:	482e      	ldr	r0, [pc, #184]	; (25ff0 <k_work_schedule_for_queue+0xc8>)
   25f38:	f240 33b7 	movw	r3, #951	; 0x3b7
   25f3c:	4a2d      	ldr	r2, [pc, #180]	; (25ff4 <k_work_schedule_for_queue+0xcc>)
   25f3e:	f004 fbbc 	bl	2a6ba <assert_print>
   25f42:	f240 31b7 	movw	r1, #951	; 0x3b7
   25f46:	482b      	ldr	r0, [pc, #172]	; (25ff4 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f48:	f004 fbb0 	bl	2a6ac <assert_post_action>
	__asm__ volatile(
   25f4c:	f04f 0320 	mov.w	r3, #32
   25f50:	f3ef 8711 	mrs	r7, BASEPRI
   25f54:	f383 8812 	msr	BASEPRI_MAX, r3
   25f58:	f3bf 8f6f 	isb	sy
   25f5c:	4826      	ldr	r0, [pc, #152]	; (25ff8 <k_work_schedule_for_queue+0xd0>)
   25f5e:	f7ff f87b 	bl	25058 <z_spin_lock_valid>
   25f62:	b960      	cbnz	r0, 25f7e <k_work_schedule_for_queue+0x56>
   25f64:	2394      	movs	r3, #148	; 0x94
   25f66:	4a25      	ldr	r2, [pc, #148]	; (25ffc <k_work_schedule_for_queue+0xd4>)
   25f68:	4925      	ldr	r1, [pc, #148]	; (26000 <k_work_schedule_for_queue+0xd8>)
   25f6a:	4821      	ldr	r0, [pc, #132]	; (25ff0 <k_work_schedule_for_queue+0xc8>)
   25f6c:	f004 fba5 	bl	2a6ba <assert_print>
   25f70:	4921      	ldr	r1, [pc, #132]	; (25ff8 <k_work_schedule_for_queue+0xd0>)
   25f72:	4824      	ldr	r0, [pc, #144]	; (26004 <k_work_schedule_for_queue+0xdc>)
   25f74:	f004 fba1 	bl	2a6ba <assert_print>
   25f78:	2194      	movs	r1, #148	; 0x94
   25f7a:	4820      	ldr	r0, [pc, #128]	; (25ffc <k_work_schedule_for_queue+0xd4>)
   25f7c:	e7e4      	b.n	25f48 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   25f7e:	481e      	ldr	r0, [pc, #120]	; (25ff8 <k_work_schedule_for_queue+0xd0>)
   25f80:	f7ff f886 	bl	25090 <z_spin_lock_set_owner>
	return *flagp;
   25f84:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25f86:	f013 0f0e 	tst.w	r3, #14
   25f8a:	d125      	bne.n	25fd8 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25f8c:	ea55 0206 	orrs.w	r2, r5, r6
   25f90:	d114      	bne.n	25fbc <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   25f92:	4620      	mov	r0, r4
   25f94:	a901      	add	r1, sp, #4
   25f96:	f7ff fd01 	bl	2599c <submit_to_queue_locked>
   25f9a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25f9c:	4816      	ldr	r0, [pc, #88]	; (25ff8 <k_work_schedule_for_queue+0xd0>)
   25f9e:	f7ff f869 	bl	25074 <z_spin_unlock_valid>
   25fa2:	b9d8      	cbnz	r0, 25fdc <k_work_schedule_for_queue+0xb4>
   25fa4:	23c2      	movs	r3, #194	; 0xc2
   25fa6:	4a15      	ldr	r2, [pc, #84]	; (25ffc <k_work_schedule_for_queue+0xd4>)
   25fa8:	4917      	ldr	r1, [pc, #92]	; (26008 <k_work_schedule_for_queue+0xe0>)
   25faa:	4811      	ldr	r0, [pc, #68]	; (25ff0 <k_work_schedule_for_queue+0xc8>)
   25fac:	f004 fb85 	bl	2a6ba <assert_print>
   25fb0:	4911      	ldr	r1, [pc, #68]	; (25ff8 <k_work_schedule_for_queue+0xd0>)
   25fb2:	4816      	ldr	r0, [pc, #88]	; (2600c <k_work_schedule_for_queue+0xe4>)
   25fb4:	f004 fb81 	bl	2a6ba <assert_print>
   25fb8:	21c2      	movs	r1, #194	; 0xc2
   25fba:	e7de      	b.n	25f7a <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   25fbc:	f043 0308 	orr.w	r3, r3, #8
   25fc0:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   25fc2:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25fc4:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   25fc8:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25fca:	4632      	mov	r2, r6
   25fcc:	462b      	mov	r3, r5
   25fce:	4910      	ldr	r1, [pc, #64]	; (26010 <k_work_schedule_for_queue+0xe8>)
   25fd0:	f001 fbc8 	bl	27764 <z_add_timeout>
	return ret;
   25fd4:	2401      	movs	r4, #1
   25fd6:	e7e1      	b.n	25f9c <k_work_schedule_for_queue+0x74>
	int ret = 0;
   25fd8:	2400      	movs	r4, #0
   25fda:	e7df      	b.n	25f9c <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   25fdc:	f387 8811 	msr	BASEPRI, r7
   25fe0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25fe4:	4620      	mov	r0, r4
   25fe6:	b003      	add	sp, #12
   25fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25fea:	bf00      	nop
   25fec:	0003867a 	.word	0x0003867a
   25ff0:	00032659 	.word	0x00032659
   25ff4:	000385a4 	.word	0x000385a4
   25ff8:	20021ac0 	.word	0x20021ac0
   25ffc:	000333ee 	.word	0x000333ee
   26000:	00033447 	.word	0x00033447
   26004:	0003345c 	.word	0x0003345c
   26008:	0003341b 	.word	0x0003341b
   2600c:	00033432 	.word	0x00033432
   26010:	00025a75 	.word	0x00025a75

00026014 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26014:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   26016:	4801      	ldr	r0, [pc, #4]	; (2601c <k_work_schedule+0x8>)
   26018:	f7ff bf86 	b.w	25f28 <k_work_schedule_for_queue>
   2601c:	2000a270 	.word	0x2000a270

00026020 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   26020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26022:	4616      	mov	r6, r2
   26024:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   26026:	460c      	mov	r4, r1
{
   26028:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2602a:	b959      	cbnz	r1, 26044 <k_work_reschedule_for_queue+0x24>
   2602c:	492c      	ldr	r1, [pc, #176]	; (260e0 <k_work_reschedule_for_queue+0xc0>)
   2602e:	482d      	ldr	r0, [pc, #180]	; (260e4 <k_work_reschedule_for_queue+0xc4>)
   26030:	f240 33db 	movw	r3, #987	; 0x3db
   26034:	4a2c      	ldr	r2, [pc, #176]	; (260e8 <k_work_reschedule_for_queue+0xc8>)
   26036:	f004 fb40 	bl	2a6ba <assert_print>
   2603a:	f240 31db 	movw	r1, #987	; 0x3db
   2603e:	482a      	ldr	r0, [pc, #168]	; (260e8 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26040:	f004 fb34 	bl	2a6ac <assert_post_action>
	__asm__ volatile(
   26044:	f04f 0320 	mov.w	r3, #32
   26048:	f3ef 8711 	mrs	r7, BASEPRI
   2604c:	f383 8812 	msr	BASEPRI_MAX, r3
   26050:	f3bf 8f6f 	isb	sy
   26054:	4825      	ldr	r0, [pc, #148]	; (260ec <k_work_reschedule_for_queue+0xcc>)
   26056:	f7fe ffff 	bl	25058 <z_spin_lock_valid>
   2605a:	b960      	cbnz	r0, 26076 <k_work_reschedule_for_queue+0x56>
   2605c:	2394      	movs	r3, #148	; 0x94
   2605e:	4a24      	ldr	r2, [pc, #144]	; (260f0 <k_work_reschedule_for_queue+0xd0>)
   26060:	4924      	ldr	r1, [pc, #144]	; (260f4 <k_work_reschedule_for_queue+0xd4>)
   26062:	4820      	ldr	r0, [pc, #128]	; (260e4 <k_work_reschedule_for_queue+0xc4>)
   26064:	f004 fb29 	bl	2a6ba <assert_print>
   26068:	4920      	ldr	r1, [pc, #128]	; (260ec <k_work_reschedule_for_queue+0xcc>)
   2606a:	4823      	ldr	r0, [pc, #140]	; (260f8 <k_work_reschedule_for_queue+0xd8>)
   2606c:	f004 fb25 	bl	2a6ba <assert_print>
   26070:	2194      	movs	r1, #148	; 0x94
   26072:	481f      	ldr	r0, [pc, #124]	; (260f0 <k_work_reschedule_for_queue+0xd0>)
   26074:	e7e4      	b.n	26040 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   26076:	481d      	ldr	r0, [pc, #116]	; (260ec <k_work_reschedule_for_queue+0xcc>)
   26078:	f7ff f80a 	bl	25090 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2607c:	4620      	mov	r0, r4
   2607e:	f00a f8cf 	bl	30220 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26082:	ea55 0306 	orrs.w	r3, r5, r6
   26086:	d114      	bne.n	260b2 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   26088:	4620      	mov	r0, r4
   2608a:	a901      	add	r1, sp, #4
   2608c:	f7ff fc86 	bl	2599c <submit_to_queue_locked>
   26090:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26092:	4816      	ldr	r0, [pc, #88]	; (260ec <k_work_reschedule_for_queue+0xcc>)
   26094:	f7fe ffee 	bl	25074 <z_spin_unlock_valid>
   26098:	b9d0      	cbnz	r0, 260d0 <k_work_reschedule_for_queue+0xb0>
   2609a:	23c2      	movs	r3, #194	; 0xc2
   2609c:	4a14      	ldr	r2, [pc, #80]	; (260f0 <k_work_reschedule_for_queue+0xd0>)
   2609e:	4917      	ldr	r1, [pc, #92]	; (260fc <k_work_reschedule_for_queue+0xdc>)
   260a0:	4810      	ldr	r0, [pc, #64]	; (260e4 <k_work_reschedule_for_queue+0xc4>)
   260a2:	f004 fb0a 	bl	2a6ba <assert_print>
   260a6:	4911      	ldr	r1, [pc, #68]	; (260ec <k_work_reschedule_for_queue+0xcc>)
   260a8:	4815      	ldr	r0, [pc, #84]	; (26100 <k_work_reschedule_for_queue+0xe0>)
   260aa:	f004 fb06 	bl	2a6ba <assert_print>
   260ae:	21c2      	movs	r1, #194	; 0xc2
   260b0:	e7df      	b.n	26072 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   260b2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   260b4:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   260b8:	f043 0308 	orr.w	r3, r3, #8
   260bc:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   260be:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   260c0:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   260c2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   260c4:	490f      	ldr	r1, [pc, #60]	; (26104 <k_work_reschedule_for_queue+0xe4>)
   260c6:	462b      	mov	r3, r5
   260c8:	f001 fb4c 	bl	27764 <z_add_timeout>
	return ret;
   260cc:	2401      	movs	r4, #1
   260ce:	e7e0      	b.n	26092 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   260d0:	f387 8811 	msr	BASEPRI, r7
   260d4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   260d8:	4620      	mov	r0, r4
   260da:	b003      	add	sp, #12
   260dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   260de:	bf00      	nop
   260e0:	0003867a 	.word	0x0003867a
   260e4:	00032659 	.word	0x00032659
   260e8:	000385a4 	.word	0x000385a4
   260ec:	20021ac0 	.word	0x20021ac0
   260f0:	000333ee 	.word	0x000333ee
   260f4:	00033447 	.word	0x00033447
   260f8:	0003345c 	.word	0x0003345c
   260fc:	0003341b 	.word	0x0003341b
   26100:	00033432 	.word	0x00033432
   26104:	00025a75 	.word	0x00025a75

00026108 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26108:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2610a:	4801      	ldr	r0, [pc, #4]	; (26110 <k_work_reschedule+0x8>)
   2610c:	f7ff bf88 	b.w	26020 <k_work_reschedule_for_queue>
   26110:	2000a270 	.word	0x2000a270

00026114 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   26114:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   26116:	4604      	mov	r4, r0
   26118:	b958      	cbnz	r0, 26132 <k_work_cancel_delayable+0x1e>
   2611a:	4922      	ldr	r1, [pc, #136]	; (261a4 <k_work_cancel_delayable+0x90>)
   2611c:	4822      	ldr	r0, [pc, #136]	; (261a8 <k_work_cancel_delayable+0x94>)
   2611e:	f240 33fd 	movw	r3, #1021	; 0x3fd
   26122:	4a22      	ldr	r2, [pc, #136]	; (261ac <k_work_cancel_delayable+0x98>)
   26124:	f004 fac9 	bl	2a6ba <assert_print>
   26128:	f240 31fd 	movw	r1, #1021	; 0x3fd
   2612c:	481f      	ldr	r0, [pc, #124]	; (261ac <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2612e:	f004 fabd 	bl	2a6ac <assert_post_action>
	__asm__ volatile(
   26132:	f04f 0320 	mov.w	r3, #32
   26136:	f3ef 8511 	mrs	r5, BASEPRI
   2613a:	f383 8812 	msr	BASEPRI_MAX, r3
   2613e:	f3bf 8f6f 	isb	sy
   26142:	481b      	ldr	r0, [pc, #108]	; (261b0 <k_work_cancel_delayable+0x9c>)
   26144:	f7fe ff88 	bl	25058 <z_spin_lock_valid>
   26148:	b960      	cbnz	r0, 26164 <k_work_cancel_delayable+0x50>
   2614a:	2394      	movs	r3, #148	; 0x94
   2614c:	4a19      	ldr	r2, [pc, #100]	; (261b4 <k_work_cancel_delayable+0xa0>)
   2614e:	491a      	ldr	r1, [pc, #104]	; (261b8 <k_work_cancel_delayable+0xa4>)
   26150:	4815      	ldr	r0, [pc, #84]	; (261a8 <k_work_cancel_delayable+0x94>)
   26152:	f004 fab2 	bl	2a6ba <assert_print>
   26156:	4916      	ldr	r1, [pc, #88]	; (261b0 <k_work_cancel_delayable+0x9c>)
   26158:	4818      	ldr	r0, [pc, #96]	; (261bc <k_work_cancel_delayable+0xa8>)
   2615a:	f004 faae 	bl	2a6ba <assert_print>
   2615e:	2194      	movs	r1, #148	; 0x94
   26160:	4814      	ldr	r0, [pc, #80]	; (261b4 <k_work_cancel_delayable+0xa0>)
   26162:	e7e4      	b.n	2612e <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   26164:	4812      	ldr	r0, [pc, #72]	; (261b0 <k_work_cancel_delayable+0x9c>)
   26166:	f7fe ff93 	bl	25090 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2616a:	4620      	mov	r0, r4
   2616c:	f00a f858 	bl	30220 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   26170:	4620      	mov	r0, r4
   26172:	f00a f86a 	bl	3024a <cancel_async_locked>
   26176:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26178:	480d      	ldr	r0, [pc, #52]	; (261b0 <k_work_cancel_delayable+0x9c>)
   2617a:	f7fe ff7b 	bl	25074 <z_spin_unlock_valid>
   2617e:	b958      	cbnz	r0, 26198 <k_work_cancel_delayable+0x84>
   26180:	23c2      	movs	r3, #194	; 0xc2
   26182:	4a0c      	ldr	r2, [pc, #48]	; (261b4 <k_work_cancel_delayable+0xa0>)
   26184:	490e      	ldr	r1, [pc, #56]	; (261c0 <k_work_cancel_delayable+0xac>)
   26186:	4808      	ldr	r0, [pc, #32]	; (261a8 <k_work_cancel_delayable+0x94>)
   26188:	f004 fa97 	bl	2a6ba <assert_print>
   2618c:	4908      	ldr	r1, [pc, #32]	; (261b0 <k_work_cancel_delayable+0x9c>)
   2618e:	480d      	ldr	r0, [pc, #52]	; (261c4 <k_work_cancel_delayable+0xb0>)
   26190:	f004 fa93 	bl	2a6ba <assert_print>
   26194:	21c2      	movs	r1, #194	; 0xc2
   26196:	e7e3      	b.n	26160 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   26198:	f385 8811 	msr	BASEPRI, r5
   2619c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   261a0:	4620      	mov	r0, r4
   261a2:	bd38      	pop	{r3, r4, r5, pc}
   261a4:	0003867a 	.word	0x0003867a
   261a8:	00032659 	.word	0x00032659
   261ac:	000385a4 	.word	0x000385a4
   261b0:	20021ac0 	.word	0x20021ac0
   261b4:	000333ee 	.word	0x000333ee
   261b8:	00033447 	.word	0x00033447
   261bc:	0003345c 	.word	0x0003345c
   261c0:	0003341b 	.word	0x0003341b
   261c4:	00033432 	.word	0x00033432

000261c8 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   261c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261cc:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   261ce:	4605      	mov	r5, r0
   261d0:	b958      	cbnz	r0, 261ea <k_work_cancel_delayable_sync+0x22>
   261d2:	493a      	ldr	r1, [pc, #232]	; (262bc <k_work_cancel_delayable_sync+0xf4>)
   261d4:	f240 430e 	movw	r3, #1038	; 0x40e
   261d8:	4a39      	ldr	r2, [pc, #228]	; (262c0 <k_work_cancel_delayable_sync+0xf8>)
   261da:	483a      	ldr	r0, [pc, #232]	; (262c4 <k_work_cancel_delayable_sync+0xfc>)
   261dc:	f004 fa6d 	bl	2a6ba <assert_print>
   261e0:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   261e4:	4836      	ldr	r0, [pc, #216]	; (262c0 <k_work_cancel_delayable_sync+0xf8>)
   261e6:	f004 fa61 	bl	2a6ac <assert_post_action>
   261ea:	b949      	cbnz	r1, 26200 <k_work_cancel_delayable_sync+0x38>
   261ec:	4936      	ldr	r1, [pc, #216]	; (262c8 <k_work_cancel_delayable_sync+0x100>)
   261ee:	f240 430f 	movw	r3, #1039	; 0x40f
   261f2:	4a33      	ldr	r2, [pc, #204]	; (262c0 <k_work_cancel_delayable_sync+0xf8>)
   261f4:	4833      	ldr	r0, [pc, #204]	; (262c4 <k_work_cancel_delayable_sync+0xfc>)
   261f6:	f004 fa60 	bl	2a6ba <assert_print>
   261fa:	f240 410f 	movw	r1, #1039	; 0x40f
   261fe:	e7f1      	b.n	261e4 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   26200:	f009 ffa2 	bl	30148 <k_is_in_isr>
   26204:	4604      	mov	r4, r0
   26206:	b148      	cbz	r0, 2621c <k_work_cancel_delayable_sync+0x54>
   26208:	4930      	ldr	r1, [pc, #192]	; (262cc <k_work_cancel_delayable_sync+0x104>)
   2620a:	f44f 6382 	mov.w	r3, #1040	; 0x410
   2620e:	4a2c      	ldr	r2, [pc, #176]	; (262c0 <k_work_cancel_delayable_sync+0xf8>)
   26210:	482c      	ldr	r0, [pc, #176]	; (262c4 <k_work_cancel_delayable_sync+0xfc>)
   26212:	f004 fa52 	bl	2a6ba <assert_print>
   26216:	f44f 6182 	mov.w	r1, #1040	; 0x410
   2621a:	e7e3      	b.n	261e4 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   2621c:	f04f 0320 	mov.w	r3, #32
   26220:	f3ef 8811 	mrs	r8, BASEPRI
   26224:	f383 8812 	msr	BASEPRI_MAX, r3
   26228:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2622c:	4828      	ldr	r0, [pc, #160]	; (262d0 <k_work_cancel_delayable_sync+0x108>)
   2622e:	f7fe ff13 	bl	25058 <z_spin_lock_valid>
   26232:	b960      	cbnz	r0, 2624e <k_work_cancel_delayable_sync+0x86>
   26234:	2394      	movs	r3, #148	; 0x94
   26236:	4a27      	ldr	r2, [pc, #156]	; (262d4 <k_work_cancel_delayable_sync+0x10c>)
   26238:	4927      	ldr	r1, [pc, #156]	; (262d8 <k_work_cancel_delayable_sync+0x110>)
   2623a:	4822      	ldr	r0, [pc, #136]	; (262c4 <k_work_cancel_delayable_sync+0xfc>)
   2623c:	f004 fa3d 	bl	2a6ba <assert_print>
   26240:	4923      	ldr	r1, [pc, #140]	; (262d0 <k_work_cancel_delayable_sync+0x108>)
   26242:	4826      	ldr	r0, [pc, #152]	; (262dc <k_work_cancel_delayable_sync+0x114>)
   26244:	f004 fa39 	bl	2a6ba <assert_print>
   26248:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2624a:	4822      	ldr	r0, [pc, #136]	; (262d4 <k_work_cancel_delayable_sync+0x10c>)
   2624c:	e7cb      	b.n	261e6 <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   2624e:	4820      	ldr	r0, [pc, #128]	; (262d0 <k_work_cancel_delayable_sync+0x108>)
   26250:	f7fe ff1e 	bl	25090 <z_spin_lock_set_owner>
	return *flagp;
   26254:	68eb      	ldr	r3, [r5, #12]
   26256:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2625a:	2b00      	cmp	r3, #0
   2625c:	bf14      	ite	ne
   2625e:	2701      	movne	r7, #1
   26260:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   26262:	d00a      	beq.n	2627a <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   26264:	4628      	mov	r0, r5
   26266:	f009 ffdb 	bl	30220 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2626a:	4628      	mov	r0, r5
   2626c:	f009 ffed 	bl	3024a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   26270:	4631      	mov	r1, r6
   26272:	4628      	mov	r0, r5
   26274:	f7ff fb74 	bl	25960 <cancel_sync_locked>
   26278:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2627a:	4815      	ldr	r0, [pc, #84]	; (262d0 <k_work_cancel_delayable_sync+0x108>)
   2627c:	f7fe fefa 	bl	25074 <z_spin_unlock_valid>
   26280:	b958      	cbnz	r0, 2629a <k_work_cancel_delayable_sync+0xd2>
   26282:	23c2      	movs	r3, #194	; 0xc2
   26284:	4a13      	ldr	r2, [pc, #76]	; (262d4 <k_work_cancel_delayable_sync+0x10c>)
   26286:	4916      	ldr	r1, [pc, #88]	; (262e0 <k_work_cancel_delayable_sync+0x118>)
   26288:	480e      	ldr	r0, [pc, #56]	; (262c4 <k_work_cancel_delayable_sync+0xfc>)
   2628a:	f004 fa16 	bl	2a6ba <assert_print>
   2628e:	4910      	ldr	r1, [pc, #64]	; (262d0 <k_work_cancel_delayable_sync+0x108>)
   26290:	4814      	ldr	r0, [pc, #80]	; (262e4 <k_work_cancel_delayable_sync+0x11c>)
   26292:	f004 fa12 	bl	2a6ba <assert_print>
   26296:	21c2      	movs	r1, #194	; 0xc2
   26298:	e7d7      	b.n	2624a <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   2629a:	f388 8811 	msr	BASEPRI, r8
   2629e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   262a2:	b13c      	cbz	r4, 262b4 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   262a4:	f04f 32ff 	mov.w	r2, #4294967295
   262a8:	f04f 33ff 	mov.w	r3, #4294967295
   262ac:	f106 0008 	add.w	r0, r6, #8
   262b0:	f7ff f9ce 	bl	25650 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   262b4:	4638      	mov	r0, r7
   262b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   262ba:	bf00      	nop
   262bc:	0003867a 	.word	0x0003867a
   262c0:	000385a4 	.word	0x000385a4
   262c4:	00032659 	.word	0x00032659
   262c8:	00038626 	.word	0x00038626
   262cc:	00035621 	.word	0x00035621
   262d0:	20021ac0 	.word	0x20021ac0
   262d4:	000333ee 	.word	0x000333ee
   262d8:	00033447 	.word	0x00033447
   262dc:	0003345c 	.word	0x0003345c
   262e0:	0003341b 	.word	0x0003341b
   262e4:	00033432 	.word	0x00033432

000262e8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   262e8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   262ea:	4d07      	ldr	r5, [pc, #28]	; (26308 <z_reset_time_slice+0x20>)
   262ec:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   262ee:	b154      	cbz	r4, 26306 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   262f0:	f7f8 fa82 	bl	1e7f8 <sys_clock_elapsed>
   262f4:	4b05      	ldr	r3, [pc, #20]	; (2630c <z_reset_time_slice+0x24>)
   262f6:	4404      	add	r4, r0
   262f8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   262fa:	6828      	ldr	r0, [r5, #0]
   262fc:	2100      	movs	r1, #0
	}
}
   262fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   26302:	f001 bb87 	b.w	27a14 <z_set_timeout_expiry>
}
   26306:	bd38      	pop	{r3, r4, r5, pc}
   26308:	20021acc 	.word	0x20021acc
   2630c:	20021a88 	.word	0x20021a88

00026310 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   26310:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   26312:	4d14      	ldr	r5, [pc, #80]	; (26364 <update_cache+0x54>)
   26314:	462b      	mov	r3, r5
   26316:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2631a:	429c      	cmp	r4, r3
   2631c:	d000      	beq.n	26320 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2631e:	b904      	cbnz	r4, 26322 <update_cache+0x12>
   26320:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   26322:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   26324:	b9a8      	cbnz	r0, 26352 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   26326:	b963      	cbnz	r3, 26342 <update_cache+0x32>
   26328:	490f      	ldr	r1, [pc, #60]	; (26368 <update_cache+0x58>)
   2632a:	2389      	movs	r3, #137	; 0x89
   2632c:	4a0f      	ldr	r2, [pc, #60]	; (2636c <update_cache+0x5c>)
   2632e:	4810      	ldr	r0, [pc, #64]	; (26370 <update_cache+0x60>)
   26330:	f004 f9c3 	bl	2a6ba <assert_print>
   26334:	480f      	ldr	r0, [pc, #60]	; (26374 <update_cache+0x64>)
   26336:	f004 f9c0 	bl	2a6ba <assert_print>
   2633a:	2189      	movs	r1, #137	; 0x89
   2633c:	480b      	ldr	r0, [pc, #44]	; (2636c <update_cache+0x5c>)
   2633e:	f004 f9b5 	bl	2a6ac <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   26342:	7b5a      	ldrb	r2, [r3, #13]
   26344:	06d2      	lsls	r2, r2, #27
   26346:	d104      	bne.n	26352 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   26348:	69a2      	ldr	r2, [r4, #24]
   2634a:	b912      	cbnz	r2, 26352 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   2634c:	89da      	ldrh	r2, [r3, #14]
   2634e:	2a7f      	cmp	r2, #127	; 0x7f
   26350:	d805      	bhi.n	2635e <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   26352:	429c      	cmp	r4, r3
   26354:	d002      	beq.n	2635c <update_cache+0x4c>
			z_reset_time_slice(thread);
   26356:	4620      	mov	r0, r4
   26358:	f7ff ffc6 	bl	262e8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   2635c:	4623      	mov	r3, r4
   2635e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   26360:	bd38      	pop	{r3, r4, r5, pc}
   26362:	bf00      	nop
   26364:	20021a88 	.word	0x20021a88
   26368:	000386b1 	.word	0x000386b1
   2636c:	0003868f 	.word	0x0003868f
   26370:	00032659 	.word	0x00032659
   26374:	000368ea 	.word	0x000368ea

00026378 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   26378:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2637a:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2637e:	7b42      	ldrb	r2, [r0, #13]
   26380:	2b00      	cmp	r3, #0
   26382:	db38      	blt.n	263f6 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26384:	06d3      	lsls	r3, r2, #27
   26386:	d136      	bne.n	263f6 <ready_thread+0x7e>
	return node->next != NULL;
   26388:	6983      	ldr	r3, [r0, #24]
   2638a:	2b00      	cmp	r3, #0
   2638c:	d133      	bne.n	263f6 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   2638e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26392:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26394:	4a18      	ldr	r2, [pc, #96]	; (263f8 <ready_thread+0x80>)
   26396:	4290      	cmp	r0, r2
   26398:	d109      	bne.n	263ae <ready_thread+0x36>
   2639a:	4918      	ldr	r1, [pc, #96]	; (263fc <ready_thread+0x84>)
   2639c:	4818      	ldr	r0, [pc, #96]	; (26400 <ready_thread+0x88>)
   2639e:	23ba      	movs	r3, #186	; 0xba
   263a0:	4a18      	ldr	r2, [pc, #96]	; (26404 <ready_thread+0x8c>)
   263a2:	f004 f98a 	bl	2a6ba <assert_print>
   263a6:	21ba      	movs	r1, #186	; 0xba
   263a8:	4816      	ldr	r0, [pc, #88]	; (26404 <ready_thread+0x8c>)
   263aa:	f004 f97f 	bl	2a6ac <assert_post_action>
	return list->head == list;
   263ae:	4916      	ldr	r1, [pc, #88]	; (26408 <ready_thread+0x90>)
   263b0:	460a      	mov	r2, r1
   263b2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   263b6:	4294      	cmp	r4, r2
   263b8:	bf18      	it	ne
   263ba:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   263bc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   263be:	b923      	cbnz	r3, 263ca <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   263c0:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   263c4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   263c6:	6248      	str	r0, [r1, #36]	; 0x24
}
   263c8:	e00c      	b.n	263e4 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   263ca:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   263ce:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   263d2:	42b5      	cmp	r5, r6
   263d4:	d00b      	beq.n	263ee <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   263d6:	42ae      	cmp	r6, r5
   263d8:	dd09      	ble.n	263ee <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   263da:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   263dc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   263e0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   263e2:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   263e4:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   263e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   263ea:	f7ff bf91 	b.w	26310 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   263ee:	42a3      	cmp	r3, r4
   263f0:	d0e6      	beq.n	263c0 <ready_thread+0x48>
   263f2:	681b      	ldr	r3, [r3, #0]
   263f4:	e7e3      	b.n	263be <ready_thread+0x46>
}
   263f6:	bd70      	pop	{r4, r5, r6, pc}
   263f8:	2000a160 	.word	0x2000a160
   263fc:	000386d8 	.word	0x000386d8
   26400:	00032659 	.word	0x00032659
   26404:	0003868f 	.word	0x0003868f
   26408:	20021a88 	.word	0x20021a88

0002640c <k_sched_time_slice_set>:
{
   2640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2640e:	4604      	mov	r4, r0
   26410:	460d      	mov	r5, r1
	__asm__ volatile(
   26412:	f04f 0320 	mov.w	r3, #32
   26416:	f3ef 8711 	mrs	r7, BASEPRI
   2641a:	f383 8812 	msr	BASEPRI_MAX, r3
   2641e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26422:	4822      	ldr	r0, [pc, #136]	; (264ac <k_sched_time_slice_set+0xa0>)
   26424:	f7fe fe18 	bl	25058 <z_spin_lock_valid>
   26428:	b968      	cbnz	r0, 26446 <k_sched_time_slice_set+0x3a>
   2642a:	2394      	movs	r3, #148	; 0x94
   2642c:	4a20      	ldr	r2, [pc, #128]	; (264b0 <k_sched_time_slice_set+0xa4>)
   2642e:	4921      	ldr	r1, [pc, #132]	; (264b4 <k_sched_time_slice_set+0xa8>)
   26430:	4821      	ldr	r0, [pc, #132]	; (264b8 <k_sched_time_slice_set+0xac>)
   26432:	f004 f942 	bl	2a6ba <assert_print>
   26436:	491d      	ldr	r1, [pc, #116]	; (264ac <k_sched_time_slice_set+0xa0>)
   26438:	4820      	ldr	r0, [pc, #128]	; (264bc <k_sched_time_slice_set+0xb0>)
   2643a:	f004 f93e 	bl	2a6ba <assert_print>
   2643e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26440:	481b      	ldr	r0, [pc, #108]	; (264b0 <k_sched_time_slice_set+0xa4>)
   26442:	f004 f933 	bl	2a6ac <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   26446:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   26448:	4818      	ldr	r0, [pc, #96]	; (264ac <k_sched_time_slice_set+0xa0>)
   2644a:	f7fe fe21 	bl	25090 <z_spin_lock_set_owner>
   2644e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   26452:	f240 30e7 	movw	r0, #999	; 0x3e7
   26456:	4631      	mov	r1, r6
   26458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2645c:	2300      	movs	r3, #0
   2645e:	fbe4 010c 	umlal	r0, r1, r4, ip
   26462:	f7e2 fd45 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   26466:	42b4      	cmp	r4, r6
   26468:	dd02      	ble.n	26470 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   2646a:	2802      	cmp	r0, #2
   2646c:	bfb8      	it	lt
   2646e:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26470:	4a13      	ldr	r2, [pc, #76]	; (264c0 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   26472:	4b14      	ldr	r3, [pc, #80]	; (264c4 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26474:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   26476:	4a14      	ldr	r2, [pc, #80]	; (264c8 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   26478:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   2647a:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   2647c:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   2647e:	f7ff ff33 	bl	262e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26482:	480a      	ldr	r0, [pc, #40]	; (264ac <k_sched_time_slice_set+0xa0>)
   26484:	f7fe fdf6 	bl	25074 <z_spin_unlock_valid>
   26488:	b958      	cbnz	r0, 264a2 <k_sched_time_slice_set+0x96>
   2648a:	23c2      	movs	r3, #194	; 0xc2
   2648c:	4a08      	ldr	r2, [pc, #32]	; (264b0 <k_sched_time_slice_set+0xa4>)
   2648e:	490f      	ldr	r1, [pc, #60]	; (264cc <k_sched_time_slice_set+0xc0>)
   26490:	4809      	ldr	r0, [pc, #36]	; (264b8 <k_sched_time_slice_set+0xac>)
   26492:	f004 f912 	bl	2a6ba <assert_print>
   26496:	4905      	ldr	r1, [pc, #20]	; (264ac <k_sched_time_slice_set+0xa0>)
   26498:	480d      	ldr	r0, [pc, #52]	; (264d0 <k_sched_time_slice_set+0xc4>)
   2649a:	f004 f90e 	bl	2a6ba <assert_print>
   2649e:	21c2      	movs	r1, #194	; 0xc2
   264a0:	e7ce      	b.n	26440 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   264a2:	f387 8811 	msr	BASEPRI, r7
   264a6:	f3bf 8f6f 	isb	sy
}
   264aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   264ac:	20021ad0 	.word	0x20021ad0
   264b0:	000333ee 	.word	0x000333ee
   264b4:	00033447 	.word	0x00033447
   264b8:	00032659 	.word	0x00032659
   264bc:	0003345c 	.word	0x0003345c
   264c0:	20021acc 	.word	0x20021acc
   264c4:	20021a88 	.word	0x20021a88
   264c8:	20021ac8 	.word	0x20021ac8
   264cc:	0003341b 	.word	0x0003341b
   264d0:	00033432 	.word	0x00033432

000264d4 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   264d4:	b538      	push	{r3, r4, r5, lr}
   264d6:	4604      	mov	r4, r0
	__asm__ volatile(
   264d8:	f04f 0320 	mov.w	r3, #32
   264dc:	f3ef 8511 	mrs	r5, BASEPRI
   264e0:	f383 8812 	msr	BASEPRI_MAX, r3
   264e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   264e8:	4816      	ldr	r0, [pc, #88]	; (26544 <z_ready_thread+0x70>)
   264ea:	f7fe fdb5 	bl	25058 <z_spin_lock_valid>
   264ee:	b968      	cbnz	r0, 2650c <z_ready_thread+0x38>
   264f0:	2394      	movs	r3, #148	; 0x94
   264f2:	4a15      	ldr	r2, [pc, #84]	; (26548 <z_ready_thread+0x74>)
   264f4:	4915      	ldr	r1, [pc, #84]	; (2654c <z_ready_thread+0x78>)
   264f6:	4816      	ldr	r0, [pc, #88]	; (26550 <z_ready_thread+0x7c>)
   264f8:	f004 f8df 	bl	2a6ba <assert_print>
   264fc:	4911      	ldr	r1, [pc, #68]	; (26544 <z_ready_thread+0x70>)
   264fe:	4815      	ldr	r0, [pc, #84]	; (26554 <z_ready_thread+0x80>)
   26500:	f004 f8db 	bl	2a6ba <assert_print>
   26504:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26506:	4810      	ldr	r0, [pc, #64]	; (26548 <z_ready_thread+0x74>)
   26508:	f004 f8d0 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   2650c:	480d      	ldr	r0, [pc, #52]	; (26544 <z_ready_thread+0x70>)
   2650e:	f7fe fdbf 	bl	25090 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   26512:	4620      	mov	r0, r4
   26514:	f7ff ff30 	bl	26378 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26518:	480a      	ldr	r0, [pc, #40]	; (26544 <z_ready_thread+0x70>)
   2651a:	f7fe fdab 	bl	25074 <z_spin_unlock_valid>
   2651e:	b958      	cbnz	r0, 26538 <z_ready_thread+0x64>
   26520:	23c2      	movs	r3, #194	; 0xc2
   26522:	4a09      	ldr	r2, [pc, #36]	; (26548 <z_ready_thread+0x74>)
   26524:	490c      	ldr	r1, [pc, #48]	; (26558 <z_ready_thread+0x84>)
   26526:	480a      	ldr	r0, [pc, #40]	; (26550 <z_ready_thread+0x7c>)
   26528:	f004 f8c7 	bl	2a6ba <assert_print>
   2652c:	4905      	ldr	r1, [pc, #20]	; (26544 <z_ready_thread+0x70>)
   2652e:	480b      	ldr	r0, [pc, #44]	; (2655c <z_ready_thread+0x88>)
   26530:	f004 f8c3 	bl	2a6ba <assert_print>
   26534:	21c2      	movs	r1, #194	; 0xc2
   26536:	e7e6      	b.n	26506 <z_ready_thread+0x32>
	__asm__ volatile(
   26538:	f385 8811 	msr	BASEPRI, r5
   2653c:	f3bf 8f6f 	isb	sy
		}
	}
}
   26540:	bd38      	pop	{r3, r4, r5, pc}
   26542:	bf00      	nop
   26544:	20021ad0 	.word	0x20021ad0
   26548:	000333ee 	.word	0x000333ee
   2654c:	00033447 	.word	0x00033447
   26550:	00032659 	.word	0x00032659
   26554:	0003345c 	.word	0x0003345c
   26558:	0003341b 	.word	0x0003341b
   2655c:	00033432 	.word	0x00033432

00026560 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   26560:	b538      	push	{r3, r4, r5, lr}
   26562:	4604      	mov	r4, r0
	__asm__ volatile(
   26564:	f04f 0320 	mov.w	r3, #32
   26568:	f3ef 8511 	mrs	r5, BASEPRI
   2656c:	f383 8812 	msr	BASEPRI_MAX, r3
   26570:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26574:	4816      	ldr	r0, [pc, #88]	; (265d0 <z_unpend_thread_no_timeout+0x70>)
   26576:	f7fe fd6f 	bl	25058 <z_spin_lock_valid>
   2657a:	b968      	cbnz	r0, 26598 <z_unpend_thread_no_timeout+0x38>
   2657c:	2394      	movs	r3, #148	; 0x94
   2657e:	4a15      	ldr	r2, [pc, #84]	; (265d4 <z_unpend_thread_no_timeout+0x74>)
   26580:	4915      	ldr	r1, [pc, #84]	; (265d8 <z_unpend_thread_no_timeout+0x78>)
   26582:	4816      	ldr	r0, [pc, #88]	; (265dc <z_unpend_thread_no_timeout+0x7c>)
   26584:	f004 f899 	bl	2a6ba <assert_print>
   26588:	4911      	ldr	r1, [pc, #68]	; (265d0 <z_unpend_thread_no_timeout+0x70>)
   2658a:	4815      	ldr	r0, [pc, #84]	; (265e0 <z_unpend_thread_no_timeout+0x80>)
   2658c:	f004 f895 	bl	2a6ba <assert_print>
   26590:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26592:	4810      	ldr	r0, [pc, #64]	; (265d4 <z_unpend_thread_no_timeout+0x74>)
   26594:	f004 f88a 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   26598:	480d      	ldr	r0, [pc, #52]	; (265d0 <z_unpend_thread_no_timeout+0x70>)
   2659a:	f7fe fd79 	bl	25090 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   2659e:	4620      	mov	r0, r4
   265a0:	f000 fc62 	bl	26e68 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265a4:	480a      	ldr	r0, [pc, #40]	; (265d0 <z_unpend_thread_no_timeout+0x70>)
   265a6:	f7fe fd65 	bl	25074 <z_spin_unlock_valid>
   265aa:	b958      	cbnz	r0, 265c4 <z_unpend_thread_no_timeout+0x64>
   265ac:	23c2      	movs	r3, #194	; 0xc2
   265ae:	4a09      	ldr	r2, [pc, #36]	; (265d4 <z_unpend_thread_no_timeout+0x74>)
   265b0:	490c      	ldr	r1, [pc, #48]	; (265e4 <z_unpend_thread_no_timeout+0x84>)
   265b2:	480a      	ldr	r0, [pc, #40]	; (265dc <z_unpend_thread_no_timeout+0x7c>)
   265b4:	f004 f881 	bl	2a6ba <assert_print>
   265b8:	4905      	ldr	r1, [pc, #20]	; (265d0 <z_unpend_thread_no_timeout+0x70>)
   265ba:	480b      	ldr	r0, [pc, #44]	; (265e8 <z_unpend_thread_no_timeout+0x88>)
   265bc:	f004 f87d 	bl	2a6ba <assert_print>
   265c0:	21c2      	movs	r1, #194	; 0xc2
   265c2:	e7e6      	b.n	26592 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   265c4:	f385 8811 	msr	BASEPRI, r5
   265c8:	f3bf 8f6f 	isb	sy
	}
}
   265cc:	bd38      	pop	{r3, r4, r5, pc}
   265ce:	bf00      	nop
   265d0:	20021ad0 	.word	0x20021ad0
   265d4:	000333ee 	.word	0x000333ee
   265d8:	00033447 	.word	0x00033447
   265dc:	00032659 	.word	0x00032659
   265e0:	0003345c 	.word	0x0003345c
   265e4:	0003341b 	.word	0x0003341b
   265e8:	00033432 	.word	0x00033432

000265ec <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   265ec:	b570      	push	{r4, r5, r6, lr}
   265ee:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   265f0:	460d      	mov	r5, r1
   265f2:	b9e9      	cbnz	r1, 26630 <z_reschedule+0x44>
   265f4:	f3ef 8605 	mrs	r6, IPSR
   265f8:	b9d6      	cbnz	r6, 26630 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   265fa:	4b18      	ldr	r3, [pc, #96]	; (2665c <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   265fc:	69da      	ldr	r2, [r3, #28]
   265fe:	689b      	ldr	r3, [r3, #8]
   26600:	429a      	cmp	r2, r3
   26602:	d015      	beq.n	26630 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26604:	f7fe fd36 	bl	25074 <z_spin_unlock_valid>
   26608:	b968      	cbnz	r0, 26626 <z_reschedule+0x3a>
   2660a:	23e1      	movs	r3, #225	; 0xe1
   2660c:	4a14      	ldr	r2, [pc, #80]	; (26660 <z_reschedule+0x74>)
   2660e:	4915      	ldr	r1, [pc, #84]	; (26664 <z_reschedule+0x78>)
   26610:	4815      	ldr	r0, [pc, #84]	; (26668 <z_reschedule+0x7c>)
   26612:	f004 f852 	bl	2a6ba <assert_print>
   26616:	4621      	mov	r1, r4
   26618:	4814      	ldr	r0, [pc, #80]	; (2666c <z_reschedule+0x80>)
   2661a:	f004 f84e 	bl	2a6ba <assert_print>
   2661e:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26620:	480f      	ldr	r0, [pc, #60]	; (26660 <z_reschedule+0x74>)
   26622:	f004 f843 	bl	2a6ac <assert_post_action>
	ret = arch_swap(key);
   26626:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   26628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2662c:	f7ea ba78 	b.w	10b20 <arch_swap>
   26630:	4620      	mov	r0, r4
   26632:	f7fe fd1f 	bl	25074 <z_spin_unlock_valid>
   26636:	b958      	cbnz	r0, 26650 <z_reschedule+0x64>
   26638:	23c2      	movs	r3, #194	; 0xc2
   2663a:	4a09      	ldr	r2, [pc, #36]	; (26660 <z_reschedule+0x74>)
   2663c:	4909      	ldr	r1, [pc, #36]	; (26664 <z_reschedule+0x78>)
   2663e:	480a      	ldr	r0, [pc, #40]	; (26668 <z_reschedule+0x7c>)
   26640:	f004 f83b 	bl	2a6ba <assert_print>
   26644:	4621      	mov	r1, r4
   26646:	4809      	ldr	r0, [pc, #36]	; (2666c <z_reschedule+0x80>)
   26648:	f004 f837 	bl	2a6ba <assert_print>
   2664c:	21c2      	movs	r1, #194	; 0xc2
   2664e:	e7e7      	b.n	26620 <z_reschedule+0x34>
   26650:	f385 8811 	msr	BASEPRI, r5
   26654:	f3bf 8f6f 	isb	sy
   26658:	bd70      	pop	{r4, r5, r6, pc}
   2665a:	bf00      	nop
   2665c:	20021a88 	.word	0x20021a88
   26660:	000333ee 	.word	0x000333ee
   26664:	0003341b 	.word	0x0003341b
   26668:	00032659 	.word	0x00032659
   2666c:	00033432 	.word	0x00033432

00026670 <z_sched_start>:
{
   26670:	b538      	push	{r3, r4, r5, lr}
   26672:	4604      	mov	r4, r0
	__asm__ volatile(
   26674:	f04f 0320 	mov.w	r3, #32
   26678:	f3ef 8511 	mrs	r5, BASEPRI
   2667c:	f383 8812 	msr	BASEPRI_MAX, r3
   26680:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26684:	481c      	ldr	r0, [pc, #112]	; (266f8 <z_sched_start+0x88>)
   26686:	f7fe fce7 	bl	25058 <z_spin_lock_valid>
   2668a:	b968      	cbnz	r0, 266a8 <z_sched_start+0x38>
   2668c:	2394      	movs	r3, #148	; 0x94
   2668e:	4a1b      	ldr	r2, [pc, #108]	; (266fc <z_sched_start+0x8c>)
   26690:	491b      	ldr	r1, [pc, #108]	; (26700 <z_sched_start+0x90>)
   26692:	481c      	ldr	r0, [pc, #112]	; (26704 <z_sched_start+0x94>)
   26694:	f004 f811 	bl	2a6ba <assert_print>
   26698:	4917      	ldr	r1, [pc, #92]	; (266f8 <z_sched_start+0x88>)
   2669a:	481b      	ldr	r0, [pc, #108]	; (26708 <z_sched_start+0x98>)
   2669c:	f004 f80d 	bl	2a6ba <assert_print>
   266a0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   266a2:	4816      	ldr	r0, [pc, #88]	; (266fc <z_sched_start+0x8c>)
   266a4:	f004 f802 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   266a8:	4813      	ldr	r0, [pc, #76]	; (266f8 <z_sched_start+0x88>)
   266aa:	f7fe fcf1 	bl	25090 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   266ae:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   266b0:	075a      	lsls	r2, r3, #29
   266b2:	d414      	bmi.n	266de <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   266b4:	4810      	ldr	r0, [pc, #64]	; (266f8 <z_sched_start+0x88>)
   266b6:	f7fe fcdd 	bl	25074 <z_spin_unlock_valid>
   266ba:	b958      	cbnz	r0, 266d4 <z_sched_start+0x64>
   266bc:	23c2      	movs	r3, #194	; 0xc2
   266be:	4a0f      	ldr	r2, [pc, #60]	; (266fc <z_sched_start+0x8c>)
   266c0:	4912      	ldr	r1, [pc, #72]	; (2670c <z_sched_start+0x9c>)
   266c2:	4810      	ldr	r0, [pc, #64]	; (26704 <z_sched_start+0x94>)
   266c4:	f003 fff9 	bl	2a6ba <assert_print>
   266c8:	490b      	ldr	r1, [pc, #44]	; (266f8 <z_sched_start+0x88>)
   266ca:	4811      	ldr	r0, [pc, #68]	; (26710 <z_sched_start+0xa0>)
   266cc:	f003 fff5 	bl	2a6ba <assert_print>
   266d0:	21c2      	movs	r1, #194	; 0xc2
   266d2:	e7e6      	b.n	266a2 <z_sched_start+0x32>
	__asm__ volatile(
   266d4:	f385 8811 	msr	BASEPRI, r5
   266d8:	f3bf 8f6f 	isb	sy
}
   266dc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   266de:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   266e2:	4620      	mov	r0, r4
   266e4:	7363      	strb	r3, [r4, #13]
   266e6:	f7ff fe47 	bl	26378 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   266ea:	4629      	mov	r1, r5
}
   266ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   266f0:	4801      	ldr	r0, [pc, #4]	; (266f8 <z_sched_start+0x88>)
   266f2:	f7ff bf7b 	b.w	265ec <z_reschedule>
   266f6:	bf00      	nop
   266f8:	20021ad0 	.word	0x20021ad0
   266fc:	000333ee 	.word	0x000333ee
   26700:	00033447 	.word	0x00033447
   26704:	00032659 	.word	0x00032659
   26708:	0003345c 	.word	0x0003345c
   2670c:	0003341b 	.word	0x0003341b
   26710:	00033432 	.word	0x00033432

00026714 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   26714:	b510      	push	{r4, lr}
	__asm__ volatile(
   26716:	f04f 0320 	mov.w	r3, #32
   2671a:	f3ef 8411 	mrs	r4, BASEPRI
   2671e:	f383 8812 	msr	BASEPRI_MAX, r3
   26722:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26726:	4825      	ldr	r0, [pc, #148]	; (267bc <k_sched_lock+0xa8>)
   26728:	f7fe fc96 	bl	25058 <z_spin_lock_valid>
   2672c:	b960      	cbnz	r0, 26748 <k_sched_lock+0x34>
   2672e:	2394      	movs	r3, #148	; 0x94
   26730:	4a23      	ldr	r2, [pc, #140]	; (267c0 <k_sched_lock+0xac>)
   26732:	4924      	ldr	r1, [pc, #144]	; (267c4 <k_sched_lock+0xb0>)
   26734:	4824      	ldr	r0, [pc, #144]	; (267c8 <k_sched_lock+0xb4>)
   26736:	f003 ffc0 	bl	2a6ba <assert_print>
   2673a:	4920      	ldr	r1, [pc, #128]	; (267bc <k_sched_lock+0xa8>)
   2673c:	4823      	ldr	r0, [pc, #140]	; (267cc <k_sched_lock+0xb8>)
   2673e:	f003 ffbc 	bl	2a6ba <assert_print>
   26742:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26744:	481e      	ldr	r0, [pc, #120]	; (267c0 <k_sched_lock+0xac>)
   26746:	e010      	b.n	2676a <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   26748:	481c      	ldr	r0, [pc, #112]	; (267bc <k_sched_lock+0xa8>)
   2674a:	f7fe fca1 	bl	25090 <z_spin_lock_set_owner>
   2674e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   26752:	b163      	cbz	r3, 2676e <k_sched_lock+0x5a>
   26754:	491e      	ldr	r1, [pc, #120]	; (267d0 <k_sched_lock+0xbc>)
   26756:	23fd      	movs	r3, #253	; 0xfd
   26758:	4a1e      	ldr	r2, [pc, #120]	; (267d4 <k_sched_lock+0xc0>)
   2675a:	481b      	ldr	r0, [pc, #108]	; (267c8 <k_sched_lock+0xb4>)
   2675c:	f003 ffad 	bl	2a6ba <assert_print>
   26760:	481d      	ldr	r0, [pc, #116]	; (267d8 <k_sched_lock+0xc4>)
   26762:	f003 ffaa 	bl	2a6ba <assert_print>
   26766:	21fd      	movs	r1, #253	; 0xfd
   26768:	481a      	ldr	r0, [pc, #104]	; (267d4 <k_sched_lock+0xc0>)
   2676a:	f003 ff9f 	bl	2a6ac <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2676e:	4b1b      	ldr	r3, [pc, #108]	; (267dc <k_sched_lock+0xc8>)
   26770:	689a      	ldr	r2, [r3, #8]
   26772:	7bd3      	ldrb	r3, [r2, #15]
   26774:	2b01      	cmp	r3, #1
   26776:	d10a      	bne.n	2678e <k_sched_lock+0x7a>
   26778:	4919      	ldr	r1, [pc, #100]	; (267e0 <k_sched_lock+0xcc>)
   2677a:	23fe      	movs	r3, #254	; 0xfe
   2677c:	4a15      	ldr	r2, [pc, #84]	; (267d4 <k_sched_lock+0xc0>)
   2677e:	4812      	ldr	r0, [pc, #72]	; (267c8 <k_sched_lock+0xb4>)
   26780:	f003 ff9b 	bl	2a6ba <assert_print>
   26784:	4814      	ldr	r0, [pc, #80]	; (267d8 <k_sched_lock+0xc4>)
   26786:	f003 ff98 	bl	2a6ba <assert_print>
   2678a:	21fe      	movs	r1, #254	; 0xfe
   2678c:	e7ec      	b.n	26768 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   2678e:	3b01      	subs	r3, #1
   26790:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26792:	480a      	ldr	r0, [pc, #40]	; (267bc <k_sched_lock+0xa8>)
   26794:	f7fe fc6e 	bl	25074 <z_spin_unlock_valid>
   26798:	b958      	cbnz	r0, 267b2 <k_sched_lock+0x9e>
   2679a:	23c2      	movs	r3, #194	; 0xc2
   2679c:	4a08      	ldr	r2, [pc, #32]	; (267c0 <k_sched_lock+0xac>)
   2679e:	4911      	ldr	r1, [pc, #68]	; (267e4 <k_sched_lock+0xd0>)
   267a0:	4809      	ldr	r0, [pc, #36]	; (267c8 <k_sched_lock+0xb4>)
   267a2:	f003 ff8a 	bl	2a6ba <assert_print>
   267a6:	4905      	ldr	r1, [pc, #20]	; (267bc <k_sched_lock+0xa8>)
   267a8:	480f      	ldr	r0, [pc, #60]	; (267e8 <k_sched_lock+0xd4>)
   267aa:	f003 ff86 	bl	2a6ba <assert_print>
   267ae:	21c2      	movs	r1, #194	; 0xc2
   267b0:	e7c8      	b.n	26744 <k_sched_lock+0x30>
	__asm__ volatile(
   267b2:	f384 8811 	msr	BASEPRI, r4
   267b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   267ba:	bd10      	pop	{r4, pc}
   267bc:	20021ad0 	.word	0x20021ad0
   267c0:	000333ee 	.word	0x000333ee
   267c4:	00033447 	.word	0x00033447
   267c8:	00032659 	.word	0x00032659
   267cc:	0003345c 	.word	0x0003345c
   267d0:	00038422 	.word	0x00038422
   267d4:	000386f9 	.word	0x000386f9
   267d8:	000368ea 	.word	0x000368ea
   267dc:	20021a88 	.word	0x20021a88
   267e0:	00038724 	.word	0x00038724
   267e4:	0003341b 	.word	0x0003341b
   267e8:	00033432 	.word	0x00033432

000267ec <k_sched_unlock>:

void k_sched_unlock(void)
{
   267ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   267ee:	f04f 0320 	mov.w	r3, #32
   267f2:	f3ef 8411 	mrs	r4, BASEPRI
   267f6:	f383 8812 	msr	BASEPRI_MAX, r3
   267fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   267fe:	4829      	ldr	r0, [pc, #164]	; (268a4 <k_sched_unlock+0xb8>)
   26800:	f7fe fc2a 	bl	25058 <z_spin_lock_valid>
   26804:	b960      	cbnz	r0, 26820 <k_sched_unlock+0x34>
   26806:	2394      	movs	r3, #148	; 0x94
   26808:	4a27      	ldr	r2, [pc, #156]	; (268a8 <k_sched_unlock+0xbc>)
   2680a:	4928      	ldr	r1, [pc, #160]	; (268ac <k_sched_unlock+0xc0>)
   2680c:	4828      	ldr	r0, [pc, #160]	; (268b0 <k_sched_unlock+0xc4>)
   2680e:	f003 ff54 	bl	2a6ba <assert_print>
   26812:	4924      	ldr	r1, [pc, #144]	; (268a4 <k_sched_unlock+0xb8>)
   26814:	4827      	ldr	r0, [pc, #156]	; (268b4 <k_sched_unlock+0xc8>)
   26816:	f003 ff50 	bl	2a6ba <assert_print>
   2681a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2681c:	4822      	ldr	r0, [pc, #136]	; (268a8 <k_sched_unlock+0xbc>)
   2681e:	e013      	b.n	26848 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   26820:	4820      	ldr	r0, [pc, #128]	; (268a4 <k_sched_unlock+0xb8>)
   26822:	f7fe fc35 	bl	25090 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   26826:	4b24      	ldr	r3, [pc, #144]	; (268b8 <k_sched_unlock+0xcc>)
   26828:	689a      	ldr	r2, [r3, #8]
   2682a:	7bd3      	ldrb	r3, [r2, #15]
   2682c:	b973      	cbnz	r3, 2684c <k_sched_unlock+0x60>
   2682e:	4923      	ldr	r1, [pc, #140]	; (268bc <k_sched_unlock+0xd0>)
   26830:	f240 33e7 	movw	r3, #999	; 0x3e7
   26834:	4a22      	ldr	r2, [pc, #136]	; (268c0 <k_sched_unlock+0xd4>)
   26836:	481e      	ldr	r0, [pc, #120]	; (268b0 <k_sched_unlock+0xc4>)
   26838:	f003 ff3f 	bl	2a6ba <assert_print>
   2683c:	4821      	ldr	r0, [pc, #132]	; (268c4 <k_sched_unlock+0xd8>)
   2683e:	f003 ff3c 	bl	2a6ba <assert_print>
   26842:	f240 31e7 	movw	r1, #999	; 0x3e7
   26846:	481e      	ldr	r0, [pc, #120]	; (268c0 <k_sched_unlock+0xd4>)
   26848:	f003 ff30 	bl	2a6ac <assert_post_action>
   2684c:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   26850:	b160      	cbz	r0, 2686c <k_sched_unlock+0x80>
   26852:	491d      	ldr	r1, [pc, #116]	; (268c8 <k_sched_unlock+0xdc>)
   26854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26858:	4a19      	ldr	r2, [pc, #100]	; (268c0 <k_sched_unlock+0xd4>)
   2685a:	4815      	ldr	r0, [pc, #84]	; (268b0 <k_sched_unlock+0xc4>)
   2685c:	f003 ff2d 	bl	2a6ba <assert_print>
   26860:	4818      	ldr	r0, [pc, #96]	; (268c4 <k_sched_unlock+0xd8>)
   26862:	f003 ff2a 	bl	2a6ba <assert_print>
   26866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2686a:	e7ec      	b.n	26846 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   2686c:	3301      	adds	r3, #1
   2686e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   26870:	f7ff fd4e 	bl	26310 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26874:	480b      	ldr	r0, [pc, #44]	; (268a4 <k_sched_unlock+0xb8>)
   26876:	f7fe fbfd 	bl	25074 <z_spin_unlock_valid>
   2687a:	b958      	cbnz	r0, 26894 <k_sched_unlock+0xa8>
   2687c:	23c2      	movs	r3, #194	; 0xc2
   2687e:	4a0a      	ldr	r2, [pc, #40]	; (268a8 <k_sched_unlock+0xbc>)
   26880:	4912      	ldr	r1, [pc, #72]	; (268cc <k_sched_unlock+0xe0>)
   26882:	480b      	ldr	r0, [pc, #44]	; (268b0 <k_sched_unlock+0xc4>)
   26884:	f003 ff19 	bl	2a6ba <assert_print>
   26888:	4906      	ldr	r1, [pc, #24]	; (268a4 <k_sched_unlock+0xb8>)
   2688a:	4811      	ldr	r0, [pc, #68]	; (268d0 <k_sched_unlock+0xe4>)
   2688c:	f003 ff15 	bl	2a6ba <assert_print>
   26890:	21c2      	movs	r1, #194	; 0xc2
   26892:	e7c3      	b.n	2681c <k_sched_unlock+0x30>
	__asm__ volatile(
   26894:	f384 8811 	msr	BASEPRI, r4
   26898:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   2689c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   268a0:	f009 bd2e 	b.w	30300 <z_reschedule_unlocked>
   268a4:	20021ad0 	.word	0x20021ad0
   268a8:	000333ee 	.word	0x000333ee
   268ac:	00033447 	.word	0x00033447
   268b0:	00032659 	.word	0x00032659
   268b4:	0003345c 	.word	0x0003345c
   268b8:	20021a88 	.word	0x20021a88
   268bc:	00038755 	.word	0x00038755
   268c0:	0003868f 	.word	0x0003868f
   268c4:	000368ea 	.word	0x000368ea
   268c8:	00038422 	.word	0x00038422
   268cc:	0003341b 	.word	0x0003341b
   268d0:	00033432 	.word	0x00033432

000268d4 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   268d4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   268d6:	4b0b      	ldr	r3, [pc, #44]	; (26904 <z_priq_dumb_remove+0x30>)
   268d8:	4299      	cmp	r1, r3
   268da:	d10b      	bne.n	268f4 <z_priq_dumb_remove+0x20>
   268dc:	490a      	ldr	r1, [pc, #40]	; (26908 <z_priq_dumb_remove+0x34>)
   268de:	480b      	ldr	r0, [pc, #44]	; (2690c <z_priq_dumb_remove+0x38>)
   268e0:	f240 4373 	movw	r3, #1139	; 0x473
   268e4:	4a0a      	ldr	r2, [pc, #40]	; (26910 <z_priq_dumb_remove+0x3c>)
   268e6:	f003 fee8 	bl	2a6ba <assert_print>
   268ea:	f240 4173 	movw	r1, #1139	; 0x473
   268ee:	4808      	ldr	r0, [pc, #32]	; (26910 <z_priq_dumb_remove+0x3c>)
   268f0:	f003 fedc 	bl	2a6ac <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   268f4:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   268f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   268fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   268fc:	2300      	movs	r3, #0
	node->prev = NULL;
   268fe:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   26902:	bd08      	pop	{r3, pc}
   26904:	2000a160 	.word	0x2000a160
   26908:	000386d8 	.word	0x000386d8
   2690c:	00032659 	.word	0x00032659
   26910:	0003868f 	.word	0x0003868f

00026914 <move_thread_to_end_of_prio_q>:
{
   26914:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   26916:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2691a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2691c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2691e:	7b43      	ldrb	r3, [r0, #13]
   26920:	da06      	bge.n	26930 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26926:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26928:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2692a:	481d      	ldr	r0, [pc, #116]	; (269a0 <move_thread_to_end_of_prio_q+0x8c>)
   2692c:	f7ff ffd2 	bl	268d4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26930:	7b63      	ldrb	r3, [r4, #13]
   26932:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26936:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26938:	4b1a      	ldr	r3, [pc, #104]	; (269a4 <move_thread_to_end_of_prio_q+0x90>)
   2693a:	429c      	cmp	r4, r3
   2693c:	d109      	bne.n	26952 <move_thread_to_end_of_prio_q+0x3e>
   2693e:	491a      	ldr	r1, [pc, #104]	; (269a8 <move_thread_to_end_of_prio_q+0x94>)
   26940:	481a      	ldr	r0, [pc, #104]	; (269ac <move_thread_to_end_of_prio_q+0x98>)
   26942:	23ba      	movs	r3, #186	; 0xba
   26944:	4a1a      	ldr	r2, [pc, #104]	; (269b0 <move_thread_to_end_of_prio_q+0x9c>)
   26946:	f003 feb8 	bl	2a6ba <assert_print>
   2694a:	21ba      	movs	r1, #186	; 0xba
   2694c:	4818      	ldr	r0, [pc, #96]	; (269b0 <move_thread_to_end_of_prio_q+0x9c>)
   2694e:	f003 fead 	bl	2a6ac <assert_post_action>
	return list->head == list;
   26952:	4a18      	ldr	r2, [pc, #96]	; (269b4 <move_thread_to_end_of_prio_q+0xa0>)
   26954:	4611      	mov	r1, r2
   26956:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   2695a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2695c:	428b      	cmp	r3, r1
   2695e:	bf08      	it	eq
   26960:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26962:	b923      	cbnz	r3, 2696e <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   26964:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   26968:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2696a:	6254      	str	r4, [r2, #36]	; 0x24
}
   2696c:	e00c      	b.n	26988 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   2696e:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26972:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   26976:	42b5      	cmp	r5, r6
   26978:	d00e      	beq.n	26998 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2697a:	42ae      	cmp	r6, r5
   2697c:	dd0c      	ble.n	26998 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   2697e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   26980:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   26984:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   26986:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   26988:	6890      	ldr	r0, [r2, #8]
   2698a:	1b03      	subs	r3, r0, r4
   2698c:	4258      	negs	r0, r3
   2698e:	4158      	adcs	r0, r3
}
   26990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   26994:	f7ff bcbc 	b.w	26310 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   26998:	4298      	cmp	r0, r3
   2699a:	d0e3      	beq.n	26964 <move_thread_to_end_of_prio_q+0x50>
   2699c:	681b      	ldr	r3, [r3, #0]
   2699e:	e7e0      	b.n	26962 <move_thread_to_end_of_prio_q+0x4e>
   269a0:	20021aa8 	.word	0x20021aa8
   269a4:	2000a160 	.word	0x2000a160
   269a8:	000386d8 	.word	0x000386d8
   269ac:	00032659 	.word	0x00032659
   269b0:	0003868f 	.word	0x0003868f
   269b4:	20021a88 	.word	0x20021a88

000269b8 <z_time_slice>:
{
   269b8:	b570      	push	{r4, r5, r6, lr}
   269ba:	4605      	mov	r5, r0
	__asm__ volatile(
   269bc:	f04f 0320 	mov.w	r3, #32
   269c0:	f3ef 8611 	mrs	r6, BASEPRI
   269c4:	f383 8812 	msr	BASEPRI_MAX, r3
   269c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   269cc:	4829      	ldr	r0, [pc, #164]	; (26a74 <z_time_slice+0xbc>)
   269ce:	f7fe fb43 	bl	25058 <z_spin_lock_valid>
   269d2:	b968      	cbnz	r0, 269f0 <z_time_slice+0x38>
   269d4:	2394      	movs	r3, #148	; 0x94
   269d6:	4a28      	ldr	r2, [pc, #160]	; (26a78 <z_time_slice+0xc0>)
   269d8:	4928      	ldr	r1, [pc, #160]	; (26a7c <z_time_slice+0xc4>)
   269da:	4829      	ldr	r0, [pc, #164]	; (26a80 <z_time_slice+0xc8>)
   269dc:	f003 fe6d 	bl	2a6ba <assert_print>
   269e0:	4924      	ldr	r1, [pc, #144]	; (26a74 <z_time_slice+0xbc>)
   269e2:	4828      	ldr	r0, [pc, #160]	; (26a84 <z_time_slice+0xcc>)
   269e4:	f003 fe69 	bl	2a6ba <assert_print>
   269e8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269ea:	4823      	ldr	r0, [pc, #140]	; (26a78 <z_time_slice+0xc0>)
   269ec:	f003 fe5e 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   269f0:	4820      	ldr	r0, [pc, #128]	; (26a74 <z_time_slice+0xbc>)
   269f2:	f7fe fb4d 	bl	25090 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   269f6:	4b24      	ldr	r3, [pc, #144]	; (26a88 <z_time_slice+0xd0>)
   269f8:	4a24      	ldr	r2, [pc, #144]	; (26a8c <z_time_slice+0xd4>)
   269fa:	689c      	ldr	r4, [r3, #8]
   269fc:	6811      	ldr	r1, [r2, #0]
   269fe:	428c      	cmp	r4, r1
   26a00:	d112      	bne.n	26a28 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   26a02:	4620      	mov	r0, r4
   26a04:	f7ff fc70 	bl	262e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a08:	481a      	ldr	r0, [pc, #104]	; (26a74 <z_time_slice+0xbc>)
   26a0a:	f7fe fb33 	bl	25074 <z_spin_unlock_valid>
   26a0e:	bb58      	cbnz	r0, 26a68 <z_time_slice+0xb0>
   26a10:	23c2      	movs	r3, #194	; 0xc2
   26a12:	4a19      	ldr	r2, [pc, #100]	; (26a78 <z_time_slice+0xc0>)
   26a14:	491e      	ldr	r1, [pc, #120]	; (26a90 <z_time_slice+0xd8>)
   26a16:	481a      	ldr	r0, [pc, #104]	; (26a80 <z_time_slice+0xc8>)
   26a18:	f003 fe4f 	bl	2a6ba <assert_print>
   26a1c:	4915      	ldr	r1, [pc, #84]	; (26a74 <z_time_slice+0xbc>)
   26a1e:	481d      	ldr	r0, [pc, #116]	; (26a94 <z_time_slice+0xdc>)
   26a20:	f003 fe4b 	bl	2a6ba <assert_print>
   26a24:	21c2      	movs	r1, #194	; 0xc2
   26a26:	e7e0      	b.n	269ea <z_time_slice+0x32>
	pending_current = NULL;
   26a28:	2100      	movs	r1, #0
   26a2a:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   26a2c:	4a1a      	ldr	r2, [pc, #104]	; (26a98 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   26a2e:	6812      	ldr	r2, [r2, #0]
   26a30:	b1c2      	cbz	r2, 26a64 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   26a32:	89e2      	ldrh	r2, [r4, #14]
   26a34:	2a7f      	cmp	r2, #127	; 0x7f
   26a36:	d815      	bhi.n	26a64 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   26a38:	7b62      	ldrb	r2, [r4, #13]
   26a3a:	06d2      	lsls	r2, r2, #27
   26a3c:	d112      	bne.n	26a64 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   26a3e:	4a17      	ldr	r2, [pc, #92]	; (26a9c <z_time_slice+0xe4>)
   26a40:	f994 100e 	ldrsb.w	r1, [r4, #14]
   26a44:	6812      	ldr	r2, [r2, #0]
   26a46:	4291      	cmp	r1, r2
   26a48:	db0c      	blt.n	26a64 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   26a4a:	4a15      	ldr	r2, [pc, #84]	; (26aa0 <z_time_slice+0xe8>)
   26a4c:	4294      	cmp	r4, r2
   26a4e:	d009      	beq.n	26a64 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   26a50:	691a      	ldr	r2, [r3, #16]
   26a52:	42aa      	cmp	r2, r5
   26a54:	dc03      	bgt.n	26a5e <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   26a56:	4620      	mov	r0, r4
   26a58:	f7ff ff5c 	bl	26914 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   26a5c:	e7d1      	b.n	26a02 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   26a5e:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   26a60:	611a      	str	r2, [r3, #16]
   26a62:	e7d1      	b.n	26a08 <z_time_slice+0x50>
   26a64:	2200      	movs	r2, #0
   26a66:	e7fb      	b.n	26a60 <z_time_slice+0xa8>
	__asm__ volatile(
   26a68:	f386 8811 	msr	BASEPRI, r6
   26a6c:	f3bf 8f6f 	isb	sy
}
   26a70:	bd70      	pop	{r4, r5, r6, pc}
   26a72:	bf00      	nop
   26a74:	20021ad0 	.word	0x20021ad0
   26a78:	000333ee 	.word	0x000333ee
   26a7c:	00033447 	.word	0x00033447
   26a80:	00032659 	.word	0x00032659
   26a84:	0003345c 	.word	0x0003345c
   26a88:	20021a88 	.word	0x20021a88
   26a8c:	20021ac4 	.word	0x20021ac4
   26a90:	0003341b 	.word	0x0003341b
   26a94:	00033432 	.word	0x00033432
   26a98:	20021acc 	.word	0x20021acc
   26a9c:	20021ac8 	.word	0x20021ac8
   26aa0:	2000a160 	.word	0x2000a160

00026aa4 <unready_thread>:
{
   26aa4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   26aa6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   26aaa:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   26aac:	2a00      	cmp	r2, #0
   26aae:	7b43      	ldrb	r3, [r0, #13]
   26ab0:	da06      	bge.n	26ac0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26ab6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26ab8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26aba:	4806      	ldr	r0, [pc, #24]	; (26ad4 <unready_thread+0x30>)
   26abc:	f7ff ff0a 	bl	268d4 <z_priq_dumb_remove>
	update_cache(thread == _current);
   26ac0:	4b05      	ldr	r3, [pc, #20]	; (26ad8 <unready_thread+0x34>)
   26ac2:	6898      	ldr	r0, [r3, #8]
   26ac4:	1b03      	subs	r3, r0, r4
   26ac6:	4258      	negs	r0, r3
   26ac8:	4158      	adcs	r0, r3
}
   26aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   26ace:	f7ff bc1f 	b.w	26310 <update_cache>
   26ad2:	bf00      	nop
   26ad4:	20021aa8 	.word	0x20021aa8
   26ad8:	20021a88 	.word	0x20021a88

00026adc <add_to_waitq_locked>:
{
   26adc:	b538      	push	{r3, r4, r5, lr}
   26ade:	4604      	mov	r4, r0
   26ae0:	460d      	mov	r5, r1
	unready_thread(thread);
   26ae2:	f7ff ffdf 	bl	26aa4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   26ae6:	7b63      	ldrb	r3, [r4, #13]
   26ae8:	f043 0302 	orr.w	r3, r3, #2
   26aec:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26aee:	b34d      	cbz	r5, 26b44 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26af0:	4b15      	ldr	r3, [pc, #84]	; (26b48 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   26af2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26af4:	429c      	cmp	r4, r3
   26af6:	d109      	bne.n	26b0c <add_to_waitq_locked+0x30>
   26af8:	4914      	ldr	r1, [pc, #80]	; (26b4c <add_to_waitq_locked+0x70>)
   26afa:	4815      	ldr	r0, [pc, #84]	; (26b50 <add_to_waitq_locked+0x74>)
   26afc:	23ba      	movs	r3, #186	; 0xba
   26afe:	4a15      	ldr	r2, [pc, #84]	; (26b54 <add_to_waitq_locked+0x78>)
   26b00:	f003 fddb 	bl	2a6ba <assert_print>
   26b04:	21ba      	movs	r1, #186	; 0xba
   26b06:	4813      	ldr	r0, [pc, #76]	; (26b54 <add_to_waitq_locked+0x78>)
   26b08:	f003 fdd0 	bl	2a6ac <assert_post_action>
	return list->head == list;
   26b0c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26b0e:	429d      	cmp	r5, r3
   26b10:	d109      	bne.n	26b26 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   26b12:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   26b14:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   26b18:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26b1a:	606c      	str	r4, [r5, #4]
}
   26b1c:	e012      	b.n	26b44 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   26b1e:	686a      	ldr	r2, [r5, #4]
   26b20:	4293      	cmp	r3, r2
   26b22:	d0f6      	beq.n	26b12 <add_to_waitq_locked+0x36>
   26b24:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26b26:	2b00      	cmp	r3, #0
   26b28:	d0f3      	beq.n	26b12 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   26b2a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26b2e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   26b32:	428a      	cmp	r2, r1
   26b34:	d0f3      	beq.n	26b1e <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26b36:	4291      	cmp	r1, r2
   26b38:	ddf1      	ble.n	26b1e <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   26b3a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26b3c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26b40:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26b42:	605c      	str	r4, [r3, #4]
}
   26b44:	bd38      	pop	{r3, r4, r5, pc}
   26b46:	bf00      	nop
   26b48:	2000a160 	.word	0x2000a160
   26b4c:	000386d8 	.word	0x000386d8
   26b50:	00032659 	.word	0x00032659
   26b54:	0003868f 	.word	0x0003868f

00026b58 <pend_locked>:
{
   26b58:	b570      	push	{r4, r5, r6, lr}
   26b5a:	4615      	mov	r5, r2
   26b5c:	461c      	mov	r4, r3
   26b5e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   26b60:	f7ff ffbc 	bl	26adc <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26b64:	f1b4 3fff 	cmp.w	r4, #4294967295
   26b68:	bf08      	it	eq
   26b6a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   26b6e:	d008      	beq.n	26b82 <pend_locked+0x2a>
   26b70:	462a      	mov	r2, r5
   26b72:	4623      	mov	r3, r4
   26b74:	f106 0018 	add.w	r0, r6, #24
   26b78:	4902      	ldr	r1, [pc, #8]	; (26b84 <pend_locked+0x2c>)
}
   26b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26b7e:	f000 bdf1 	b.w	27764 <z_add_timeout>
   26b82:	bd70      	pop	{r4, r5, r6, pc}
   26b84:	00026f3d 	.word	0x00026f3d

00026b88 <z_pend_curr>:
{
   26b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26b8c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   26b90:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 26c48 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26b94:	4c2d      	ldr	r4, [pc, #180]	; (26c4c <z_pend_curr+0xc4>)
{
   26b96:	4617      	mov	r7, r2
	pending_current = _current;
   26b98:	4b2d      	ldr	r3, [pc, #180]	; (26c50 <z_pend_curr+0xc8>)
   26b9a:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26b9e:	42a0      	cmp	r0, r4
{
   26ba0:	4605      	mov	r5, r0
   26ba2:	460e      	mov	r6, r1
	pending_current = _current;
   26ba4:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26ba6:	d10b      	bne.n	26bc0 <z_pend_curr+0x38>
   26ba8:	492a      	ldr	r1, [pc, #168]	; (26c54 <z_pend_curr+0xcc>)
   26baa:	482b      	ldr	r0, [pc, #172]	; (26c58 <z_pend_curr+0xd0>)
   26bac:	f240 334e 	movw	r3, #846	; 0x34e
   26bb0:	4a2a      	ldr	r2, [pc, #168]	; (26c5c <z_pend_curr+0xd4>)
   26bb2:	f003 fd82 	bl	2a6ba <assert_print>
   26bb6:	f240 314e 	movw	r1, #846	; 0x34e
   26bba:	4828      	ldr	r0, [pc, #160]	; (26c5c <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26bbc:	f003 fd76 	bl	2a6ac <assert_post_action>
	__asm__ volatile(
   26bc0:	f04f 0220 	mov.w	r2, #32
   26bc4:	f3ef 8311 	mrs	r3, BASEPRI
   26bc8:	f382 8812 	msr	BASEPRI_MAX, r2
   26bcc:	f3bf 8f6f 	isb	sy
   26bd0:	4620      	mov	r0, r4
   26bd2:	f7fe fa41 	bl	25058 <z_spin_lock_valid>
   26bd6:	b960      	cbnz	r0, 26bf2 <z_pend_curr+0x6a>
   26bd8:	2394      	movs	r3, #148	; 0x94
   26bda:	4a21      	ldr	r2, [pc, #132]	; (26c60 <z_pend_curr+0xd8>)
   26bdc:	4921      	ldr	r1, [pc, #132]	; (26c64 <z_pend_curr+0xdc>)
   26bde:	481e      	ldr	r0, [pc, #120]	; (26c58 <z_pend_curr+0xd0>)
   26be0:	f003 fd6b 	bl	2a6ba <assert_print>
   26be4:	4621      	mov	r1, r4
   26be6:	4820      	ldr	r0, [pc, #128]	; (26c68 <z_pend_curr+0xe0>)
   26be8:	f003 fd67 	bl	2a6ba <assert_print>
   26bec:	2194      	movs	r1, #148	; 0x94
   26bee:	481c      	ldr	r0, [pc, #112]	; (26c60 <z_pend_curr+0xd8>)
   26bf0:	e7e4      	b.n	26bbc <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   26bf2:	4620      	mov	r0, r4
   26bf4:	f7fe fa4c 	bl	25090 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   26bf8:	f8da 0008 	ldr.w	r0, [sl, #8]
   26bfc:	4642      	mov	r2, r8
   26bfe:	464b      	mov	r3, r9
   26c00:	4639      	mov	r1, r7
   26c02:	f7ff ffa9 	bl	26b58 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c06:	4628      	mov	r0, r5
   26c08:	f7fe fa34 	bl	25074 <z_spin_unlock_valid>
   26c0c:	b958      	cbnz	r0, 26c26 <z_pend_curr+0x9e>
   26c0e:	4917      	ldr	r1, [pc, #92]	; (26c6c <z_pend_curr+0xe4>)
   26c10:	23e1      	movs	r3, #225	; 0xe1
   26c12:	4a13      	ldr	r2, [pc, #76]	; (26c60 <z_pend_curr+0xd8>)
   26c14:	4810      	ldr	r0, [pc, #64]	; (26c58 <z_pend_curr+0xd0>)
   26c16:	f003 fd50 	bl	2a6ba <assert_print>
   26c1a:	4629      	mov	r1, r5
   26c1c:	4814      	ldr	r0, [pc, #80]	; (26c70 <z_pend_curr+0xe8>)
   26c1e:	f003 fd4c 	bl	2a6ba <assert_print>
   26c22:	21e1      	movs	r1, #225	; 0xe1
   26c24:	e7e3      	b.n	26bee <z_pend_curr+0x66>
   26c26:	4620      	mov	r0, r4
   26c28:	f7fe fa24 	bl	25074 <z_spin_unlock_valid>
   26c2c:	b938      	cbnz	r0, 26c3e <z_pend_curr+0xb6>
   26c2e:	490f      	ldr	r1, [pc, #60]	; (26c6c <z_pend_curr+0xe4>)
   26c30:	23e1      	movs	r3, #225	; 0xe1
   26c32:	4a0b      	ldr	r2, [pc, #44]	; (26c60 <z_pend_curr+0xd8>)
   26c34:	4808      	ldr	r0, [pc, #32]	; (26c58 <z_pend_curr+0xd0>)
   26c36:	f003 fd40 	bl	2a6ba <assert_print>
   26c3a:	4621      	mov	r1, r4
   26c3c:	e7ee      	b.n	26c1c <z_pend_curr+0x94>
   26c3e:	4630      	mov	r0, r6
}
   26c40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c44:	f7e9 bf6c 	b.w	10b20 <arch_swap>
   26c48:	20021a88 	.word	0x20021a88
   26c4c:	20021ad0 	.word	0x20021ad0
   26c50:	20021ac4 	.word	0x20021ac4
   26c54:	00038786 	.word	0x00038786
   26c58:	00032659 	.word	0x00032659
   26c5c:	0003868f 	.word	0x0003868f
   26c60:	000333ee 	.word	0x000333ee
   26c64:	00033447 	.word	0x00033447
   26c68:	0003345c 	.word	0x0003345c
   26c6c:	0003341b 	.word	0x0003341b
   26c70:	00033432 	.word	0x00033432

00026c74 <z_set_prio>:
{
   26c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26c78:	4604      	mov	r4, r0
   26c7a:	460e      	mov	r6, r1
   26c7c:	f04f 0320 	mov.w	r3, #32
   26c80:	f3ef 8911 	mrs	r9, BASEPRI
   26c84:	f383 8812 	msr	BASEPRI_MAX, r3
   26c88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26c8c:	4837      	ldr	r0, [pc, #220]	; (26d6c <z_set_prio+0xf8>)
   26c8e:	f7fe f9e3 	bl	25058 <z_spin_lock_valid>
   26c92:	4607      	mov	r7, r0
   26c94:	b960      	cbnz	r0, 26cb0 <z_set_prio+0x3c>
   26c96:	2394      	movs	r3, #148	; 0x94
   26c98:	4a35      	ldr	r2, [pc, #212]	; (26d70 <z_set_prio+0xfc>)
   26c9a:	4936      	ldr	r1, [pc, #216]	; (26d74 <z_set_prio+0x100>)
   26c9c:	4836      	ldr	r0, [pc, #216]	; (26d78 <z_set_prio+0x104>)
   26c9e:	f003 fd0c 	bl	2a6ba <assert_print>
   26ca2:	4932      	ldr	r1, [pc, #200]	; (26d6c <z_set_prio+0xf8>)
   26ca4:	4835      	ldr	r0, [pc, #212]	; (26d7c <z_set_prio+0x108>)
   26ca6:	f003 fd08 	bl	2a6ba <assert_print>
   26caa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26cac:	4830      	ldr	r0, [pc, #192]	; (26d70 <z_set_prio+0xfc>)
   26cae:	e021      	b.n	26cf4 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   26cb0:	482e      	ldr	r0, [pc, #184]	; (26d6c <z_set_prio+0xf8>)
   26cb2:	f7fe f9ed 	bl	25090 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   26cb6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   26cb8:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26cba:	06da      	lsls	r2, r3, #27
   26cbc:	d11c      	bne.n	26cf8 <z_set_prio+0x84>
	return node->next != NULL;
   26cbe:	69a5      	ldr	r5, [r4, #24]
   26cc0:	b9d5      	cbnz	r5, 26cf8 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   26cc2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 26d80 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26cca:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26ccc:	4621      	mov	r1, r4
   26cce:	4640      	mov	r0, r8
   26cd0:	f7ff fe00 	bl	268d4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26cd4:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   26cd6:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   26cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26cdc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26cde:	4b29      	ldr	r3, [pc, #164]	; (26d84 <z_set_prio+0x110>)
   26ce0:	429c      	cmp	r4, r3
   26ce2:	d11b      	bne.n	26d1c <z_set_prio+0xa8>
   26ce4:	4928      	ldr	r1, [pc, #160]	; (26d88 <z_set_prio+0x114>)
   26ce6:	4824      	ldr	r0, [pc, #144]	; (26d78 <z_set_prio+0x104>)
   26ce8:	23ba      	movs	r3, #186	; 0xba
   26cea:	4a28      	ldr	r2, [pc, #160]	; (26d8c <z_set_prio+0x118>)
   26cec:	f003 fce5 	bl	2a6ba <assert_print>
   26cf0:	21ba      	movs	r1, #186	; 0xba
   26cf2:	4826      	ldr	r0, [pc, #152]	; (26d8c <z_set_prio+0x118>)
   26cf4:	f003 fcda 	bl	2a6ac <assert_post_action>
   26cf8:	2700      	movs	r7, #0
			thread->base.prio = prio;
   26cfa:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26cfc:	481b      	ldr	r0, [pc, #108]	; (26d6c <z_set_prio+0xf8>)
   26cfe:	f7fe f9b9 	bl	25074 <z_spin_unlock_valid>
   26d02:	bb58      	cbnz	r0, 26d5c <z_set_prio+0xe8>
   26d04:	23c2      	movs	r3, #194	; 0xc2
   26d06:	4a1a      	ldr	r2, [pc, #104]	; (26d70 <z_set_prio+0xfc>)
   26d08:	4921      	ldr	r1, [pc, #132]	; (26d90 <z_set_prio+0x11c>)
   26d0a:	481b      	ldr	r0, [pc, #108]	; (26d78 <z_set_prio+0x104>)
   26d0c:	f003 fcd5 	bl	2a6ba <assert_print>
   26d10:	4916      	ldr	r1, [pc, #88]	; (26d6c <z_set_prio+0xf8>)
   26d12:	4820      	ldr	r0, [pc, #128]	; (26d94 <z_set_prio+0x120>)
   26d14:	f003 fcd1 	bl	2a6ba <assert_print>
   26d18:	21c2      	movs	r1, #194	; 0xc2
   26d1a:	e7c7      	b.n	26cac <z_set_prio+0x38>
	return list->head == list;
   26d1c:	4643      	mov	r3, r8
   26d1e:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26d22:	4542      	cmp	r2, r8
   26d24:	bf18      	it	ne
   26d26:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   26d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26d2a:	b925      	cbnz	r5, 26d36 <z_set_prio+0xc2>
	node->prev = tail;
   26d2c:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   26d30:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26d32:	625c      	str	r4, [r3, #36]	; 0x24
}
   26d34:	e00a      	b.n	26d4c <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   26d36:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   26d3a:	428e      	cmp	r6, r1
   26d3c:	d00a      	beq.n	26d54 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26d3e:	42b1      	cmp	r1, r6
   26d40:	dd08      	ble.n	26d54 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   26d42:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   26d44:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   26d48:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26d4a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   26d4c:	2001      	movs	r0, #1
   26d4e:	f7ff fadf 	bl	26310 <update_cache>
   26d52:	e7d3      	b.n	26cfc <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   26d54:	42aa      	cmp	r2, r5
   26d56:	d0e9      	beq.n	26d2c <z_set_prio+0xb8>
   26d58:	682d      	ldr	r5, [r5, #0]
   26d5a:	e7e6      	b.n	26d2a <z_set_prio+0xb6>
	__asm__ volatile(
   26d5c:	f389 8811 	msr	BASEPRI, r9
   26d60:	f3bf 8f6f 	isb	sy
}
   26d64:	4638      	mov	r0, r7
   26d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26d6a:	bf00      	nop
   26d6c:	20021ad0 	.word	0x20021ad0
   26d70:	000333ee 	.word	0x000333ee
   26d74:	00033447 	.word	0x00033447
   26d78:	00032659 	.word	0x00032659
   26d7c:	0003345c 	.word	0x0003345c
   26d80:	20021aa8 	.word	0x20021aa8
   26d84:	2000a160 	.word	0x2000a160
   26d88:	000386d8 	.word	0x000386d8
   26d8c:	0003868f 	.word	0x0003868f
   26d90:	0003341b 	.word	0x0003341b
   26d94:	00033432 	.word	0x00033432

00026d98 <z_impl_k_thread_suspend>:
{
   26d98:	b570      	push	{r4, r5, r6, lr}
   26d9a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26d9c:	3018      	adds	r0, #24
   26d9e:	f000 fda7 	bl	278f0 <z_abort_timeout>
	__asm__ volatile(
   26da2:	f04f 0320 	mov.w	r3, #32
   26da6:	f3ef 8611 	mrs	r6, BASEPRI
   26daa:	f383 8812 	msr	BASEPRI_MAX, r3
   26dae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26db2:	4824      	ldr	r0, [pc, #144]	; (26e44 <z_impl_k_thread_suspend+0xac>)
   26db4:	f7fe f950 	bl	25058 <z_spin_lock_valid>
   26db8:	b968      	cbnz	r0, 26dd6 <z_impl_k_thread_suspend+0x3e>
   26dba:	2394      	movs	r3, #148	; 0x94
   26dbc:	4a22      	ldr	r2, [pc, #136]	; (26e48 <z_impl_k_thread_suspend+0xb0>)
   26dbe:	4923      	ldr	r1, [pc, #140]	; (26e4c <z_impl_k_thread_suspend+0xb4>)
   26dc0:	4823      	ldr	r0, [pc, #140]	; (26e50 <z_impl_k_thread_suspend+0xb8>)
   26dc2:	f003 fc7a 	bl	2a6ba <assert_print>
   26dc6:	491f      	ldr	r1, [pc, #124]	; (26e44 <z_impl_k_thread_suspend+0xac>)
   26dc8:	4822      	ldr	r0, [pc, #136]	; (26e54 <z_impl_k_thread_suspend+0xbc>)
   26dca:	f003 fc76 	bl	2a6ba <assert_print>
   26dce:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26dd0:	481d      	ldr	r0, [pc, #116]	; (26e48 <z_impl_k_thread_suspend+0xb0>)
   26dd2:	f003 fc6b 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   26dd6:	481b      	ldr	r0, [pc, #108]	; (26e44 <z_impl_k_thread_suspend+0xac>)
   26dd8:	f7fe f95a 	bl	25090 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   26ddc:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   26de0:	7b63      	ldrb	r3, [r4, #13]
   26de2:	2a00      	cmp	r2, #0
   26de4:	da06      	bge.n	26df4 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26dea:	4621      	mov	r1, r4
   26dec:	481a      	ldr	r0, [pc, #104]	; (26e58 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26dee:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26df0:	f7ff fd70 	bl	268d4 <z_priq_dumb_remove>
		update_cache(thread == _current);
   26df4:	4d19      	ldr	r5, [pc, #100]	; (26e5c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26df6:	7b63      	ldrb	r3, [r4, #13]
   26df8:	68a8      	ldr	r0, [r5, #8]
   26dfa:	f043 0310 	orr.w	r3, r3, #16
   26dfe:	7363      	strb	r3, [r4, #13]
   26e00:	1b03      	subs	r3, r0, r4
   26e02:	4258      	negs	r0, r3
   26e04:	4158      	adcs	r0, r3
   26e06:	f7ff fa83 	bl	26310 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26e0a:	480e      	ldr	r0, [pc, #56]	; (26e44 <z_impl_k_thread_suspend+0xac>)
   26e0c:	f7fe f932 	bl	25074 <z_spin_unlock_valid>
   26e10:	b958      	cbnz	r0, 26e2a <z_impl_k_thread_suspend+0x92>
   26e12:	23c2      	movs	r3, #194	; 0xc2
   26e14:	4a0c      	ldr	r2, [pc, #48]	; (26e48 <z_impl_k_thread_suspend+0xb0>)
   26e16:	4912      	ldr	r1, [pc, #72]	; (26e60 <z_impl_k_thread_suspend+0xc8>)
   26e18:	480d      	ldr	r0, [pc, #52]	; (26e50 <z_impl_k_thread_suspend+0xb8>)
   26e1a:	f003 fc4e 	bl	2a6ba <assert_print>
   26e1e:	4909      	ldr	r1, [pc, #36]	; (26e44 <z_impl_k_thread_suspend+0xac>)
   26e20:	4810      	ldr	r0, [pc, #64]	; (26e64 <z_impl_k_thread_suspend+0xcc>)
   26e22:	f003 fc4a 	bl	2a6ba <assert_print>
   26e26:	21c2      	movs	r1, #194	; 0xc2
   26e28:	e7d2      	b.n	26dd0 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   26e2a:	f386 8811 	msr	BASEPRI, r6
   26e2e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   26e32:	68ab      	ldr	r3, [r5, #8]
   26e34:	42a3      	cmp	r3, r4
   26e36:	d103      	bne.n	26e40 <z_impl_k_thread_suspend+0xa8>
}
   26e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   26e3c:	f009 ba60 	b.w	30300 <z_reschedule_unlocked>
}
   26e40:	bd70      	pop	{r4, r5, r6, pc}
   26e42:	bf00      	nop
   26e44:	20021ad0 	.word	0x20021ad0
   26e48:	000333ee 	.word	0x000333ee
   26e4c:	00033447 	.word	0x00033447
   26e50:	00032659 	.word	0x00032659
   26e54:	0003345c 	.word	0x0003345c
   26e58:	20021aa8 	.word	0x20021aa8
   26e5c:	20021a88 	.word	0x20021a88
   26e60:	0003341b 	.word	0x0003341b
   26e64:	00033432 	.word	0x00033432

00026e68 <unpend_thread_no_timeout>:
{
   26e68:	b510      	push	{r4, lr}
   26e6a:	4604      	mov	r4, r0
   26e6c:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   26e6e:	b958      	cbnz	r0, 26e88 <unpend_thread_no_timeout+0x20>
   26e70:	490a      	ldr	r1, [pc, #40]	; (26e9c <unpend_thread_no_timeout+0x34>)
   26e72:	480b      	ldr	r0, [pc, #44]	; (26ea0 <unpend_thread_no_timeout+0x38>)
   26e74:	f240 23d6 	movw	r3, #726	; 0x2d6
   26e78:	4a0a      	ldr	r2, [pc, #40]	; (26ea4 <unpend_thread_no_timeout+0x3c>)
   26e7a:	f003 fc1e 	bl	2a6ba <assert_print>
   26e7e:	f240 21d6 	movw	r1, #726	; 0x2d6
   26e82:	4808      	ldr	r0, [pc, #32]	; (26ea4 <unpend_thread_no_timeout+0x3c>)
   26e84:	f003 fc12 	bl	2a6ac <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26e88:	4621      	mov	r1, r4
   26e8a:	f7ff fd23 	bl	268d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26e8e:	7b63      	ldrb	r3, [r4, #13]
   26e90:	f023 0302 	bic.w	r3, r3, #2
   26e94:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26e96:	2300      	movs	r3, #0
   26e98:	60a3      	str	r3, [r4, #8]
}
   26e9a:	bd10      	pop	{r4, pc}
   26e9c:	000387bd 	.word	0x000387bd
   26ea0:	00032659 	.word	0x00032659
   26ea4:	0003868f 	.word	0x0003868f

00026ea8 <z_unpend_thread>:
{
   26ea8:	b538      	push	{r3, r4, r5, lr}
   26eaa:	4604      	mov	r4, r0
	__asm__ volatile(
   26eac:	f04f 0320 	mov.w	r3, #32
   26eb0:	f3ef 8511 	mrs	r5, BASEPRI
   26eb4:	f383 8812 	msr	BASEPRI_MAX, r3
   26eb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26ebc:	4818      	ldr	r0, [pc, #96]	; (26f20 <z_unpend_thread+0x78>)
   26ebe:	f7fe f8cb 	bl	25058 <z_spin_lock_valid>
   26ec2:	b968      	cbnz	r0, 26ee0 <z_unpend_thread+0x38>
   26ec4:	2394      	movs	r3, #148	; 0x94
   26ec6:	4a17      	ldr	r2, [pc, #92]	; (26f24 <z_unpend_thread+0x7c>)
   26ec8:	4917      	ldr	r1, [pc, #92]	; (26f28 <z_unpend_thread+0x80>)
   26eca:	4818      	ldr	r0, [pc, #96]	; (26f2c <z_unpend_thread+0x84>)
   26ecc:	f003 fbf5 	bl	2a6ba <assert_print>
   26ed0:	4913      	ldr	r1, [pc, #76]	; (26f20 <z_unpend_thread+0x78>)
   26ed2:	4817      	ldr	r0, [pc, #92]	; (26f30 <z_unpend_thread+0x88>)
   26ed4:	f003 fbf1 	bl	2a6ba <assert_print>
   26ed8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26eda:	4812      	ldr	r0, [pc, #72]	; (26f24 <z_unpend_thread+0x7c>)
   26edc:	f003 fbe6 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   26ee0:	480f      	ldr	r0, [pc, #60]	; (26f20 <z_unpend_thread+0x78>)
   26ee2:	f7fe f8d5 	bl	25090 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   26ee6:	4620      	mov	r0, r4
   26ee8:	f7ff ffbe 	bl	26e68 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26eec:	480c      	ldr	r0, [pc, #48]	; (26f20 <z_unpend_thread+0x78>)
   26eee:	f7fe f8c1 	bl	25074 <z_spin_unlock_valid>
   26ef2:	b958      	cbnz	r0, 26f0c <z_unpend_thread+0x64>
   26ef4:	23c2      	movs	r3, #194	; 0xc2
   26ef6:	4a0b      	ldr	r2, [pc, #44]	; (26f24 <z_unpend_thread+0x7c>)
   26ef8:	490e      	ldr	r1, [pc, #56]	; (26f34 <z_unpend_thread+0x8c>)
   26efa:	480c      	ldr	r0, [pc, #48]	; (26f2c <z_unpend_thread+0x84>)
   26efc:	f003 fbdd 	bl	2a6ba <assert_print>
   26f00:	4907      	ldr	r1, [pc, #28]	; (26f20 <z_unpend_thread+0x78>)
   26f02:	480d      	ldr	r0, [pc, #52]	; (26f38 <z_unpend_thread+0x90>)
   26f04:	f003 fbd9 	bl	2a6ba <assert_print>
   26f08:	21c2      	movs	r1, #194	; 0xc2
   26f0a:	e7e6      	b.n	26eda <z_unpend_thread+0x32>
	__asm__ volatile(
   26f0c:	f385 8811 	msr	BASEPRI, r5
   26f10:	f3bf 8f6f 	isb	sy
   26f14:	f104 0018 	add.w	r0, r4, #24
}
   26f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26f1c:	f000 bce8 	b.w	278f0 <z_abort_timeout>
   26f20:	20021ad0 	.word	0x20021ad0
   26f24:	000333ee 	.word	0x000333ee
   26f28:	00033447 	.word	0x00033447
   26f2c:	00032659 	.word	0x00032659
   26f30:	0003345c 	.word	0x0003345c
   26f34:	0003341b 	.word	0x0003341b
   26f38:	00033432 	.word	0x00033432

00026f3c <z_thread_timeout>:
{
   26f3c:	b570      	push	{r4, r5, r6, lr}
   26f3e:	4604      	mov	r4, r0
	__asm__ volatile(
   26f40:	f04f 0320 	mov.w	r3, #32
   26f44:	f3ef 8611 	mrs	r6, BASEPRI
   26f48:	f383 8812 	msr	BASEPRI_MAX, r3
   26f4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f50:	481f      	ldr	r0, [pc, #124]	; (26fd0 <z_thread_timeout+0x94>)
   26f52:	f7fe f881 	bl	25058 <z_spin_lock_valid>
   26f56:	b968      	cbnz	r0, 26f74 <z_thread_timeout+0x38>
   26f58:	2394      	movs	r3, #148	; 0x94
   26f5a:	4a1e      	ldr	r2, [pc, #120]	; (26fd4 <z_thread_timeout+0x98>)
   26f5c:	491e      	ldr	r1, [pc, #120]	; (26fd8 <z_thread_timeout+0x9c>)
   26f5e:	481f      	ldr	r0, [pc, #124]	; (26fdc <z_thread_timeout+0xa0>)
   26f60:	f003 fbab 	bl	2a6ba <assert_print>
   26f64:	491a      	ldr	r1, [pc, #104]	; (26fd0 <z_thread_timeout+0x94>)
   26f66:	481e      	ldr	r0, [pc, #120]	; (26fe0 <z_thread_timeout+0xa4>)
   26f68:	f003 fba7 	bl	2a6ba <assert_print>
   26f6c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f6e:	4819      	ldr	r0, [pc, #100]	; (26fd4 <z_thread_timeout+0x98>)
   26f70:	f003 fb9c 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   26f74:	4816      	ldr	r0, [pc, #88]	; (26fd0 <z_thread_timeout+0x94>)
   26f76:	f7fe f88b 	bl	25090 <z_spin_lock_set_owner>
		if (!killed) {
   26f7a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   26f7e:	f013 0f28 	tst.w	r3, #40	; 0x28
   26f82:	d110      	bne.n	26fa6 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   26f84:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   26f88:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   26f8c:	b113      	cbz	r3, 26f94 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   26f8e:	4628      	mov	r0, r5
   26f90:	f7ff ff6a 	bl	26e68 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26f94:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   26f98:	4628      	mov	r0, r5
   26f9a:	f023 0314 	bic.w	r3, r3, #20
   26f9e:	f804 3c0b 	strb.w	r3, [r4, #-11]
   26fa2:	f7ff f9e9 	bl	26378 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26fa6:	480a      	ldr	r0, [pc, #40]	; (26fd0 <z_thread_timeout+0x94>)
   26fa8:	f7fe f864 	bl	25074 <z_spin_unlock_valid>
   26fac:	b958      	cbnz	r0, 26fc6 <z_thread_timeout+0x8a>
   26fae:	23c2      	movs	r3, #194	; 0xc2
   26fb0:	4a08      	ldr	r2, [pc, #32]	; (26fd4 <z_thread_timeout+0x98>)
   26fb2:	490c      	ldr	r1, [pc, #48]	; (26fe4 <z_thread_timeout+0xa8>)
   26fb4:	4809      	ldr	r0, [pc, #36]	; (26fdc <z_thread_timeout+0xa0>)
   26fb6:	f003 fb80 	bl	2a6ba <assert_print>
   26fba:	4905      	ldr	r1, [pc, #20]	; (26fd0 <z_thread_timeout+0x94>)
   26fbc:	480a      	ldr	r0, [pc, #40]	; (26fe8 <z_thread_timeout+0xac>)
   26fbe:	f003 fb7c 	bl	2a6ba <assert_print>
   26fc2:	21c2      	movs	r1, #194	; 0xc2
   26fc4:	e7d3      	b.n	26f6e <z_thread_timeout+0x32>
	__asm__ volatile(
   26fc6:	f386 8811 	msr	BASEPRI, r6
   26fca:	f3bf 8f6f 	isb	sy
}
   26fce:	bd70      	pop	{r4, r5, r6, pc}
   26fd0:	20021ad0 	.word	0x20021ad0
   26fd4:	000333ee 	.word	0x000333ee
   26fd8:	00033447 	.word	0x00033447
   26fdc:	00032659 	.word	0x00032659
   26fe0:	0003345c 	.word	0x0003345c
   26fe4:	0003341b 	.word	0x0003341b
   26fe8:	00033432 	.word	0x00033432

00026fec <z_unpend1_no_timeout>:
{
   26fec:	b570      	push	{r4, r5, r6, lr}
   26fee:	4605      	mov	r5, r0
	__asm__ volatile(
   26ff0:	f04f 0320 	mov.w	r3, #32
   26ff4:	f3ef 8611 	mrs	r6, BASEPRI
   26ff8:	f383 8812 	msr	BASEPRI_MAX, r3
   26ffc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27000:	4819      	ldr	r0, [pc, #100]	; (27068 <z_unpend1_no_timeout+0x7c>)
   27002:	f7fe f829 	bl	25058 <z_spin_lock_valid>
   27006:	b968      	cbnz	r0, 27024 <z_unpend1_no_timeout+0x38>
   27008:	2394      	movs	r3, #148	; 0x94
   2700a:	4a18      	ldr	r2, [pc, #96]	; (2706c <z_unpend1_no_timeout+0x80>)
   2700c:	4918      	ldr	r1, [pc, #96]	; (27070 <z_unpend1_no_timeout+0x84>)
   2700e:	4819      	ldr	r0, [pc, #100]	; (27074 <z_unpend1_no_timeout+0x88>)
   27010:	f003 fb53 	bl	2a6ba <assert_print>
   27014:	4914      	ldr	r1, [pc, #80]	; (27068 <z_unpend1_no_timeout+0x7c>)
   27016:	4818      	ldr	r0, [pc, #96]	; (27078 <z_unpend1_no_timeout+0x8c>)
   27018:	f003 fb4f 	bl	2a6ba <assert_print>
   2701c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2701e:	4813      	ldr	r0, [pc, #76]	; (2706c <z_unpend1_no_timeout+0x80>)
   27020:	f003 fb44 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   27024:	4810      	ldr	r0, [pc, #64]	; (27068 <z_unpend1_no_timeout+0x7c>)
   27026:	f7fe f833 	bl	25090 <z_spin_lock_set_owner>
	return list->head == list;
   2702a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2702c:	42a5      	cmp	r5, r4
   2702e:	d013      	beq.n	27058 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   27030:	b114      	cbz	r4, 27038 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   27032:	4620      	mov	r0, r4
   27034:	f7ff ff18 	bl	26e68 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27038:	480b      	ldr	r0, [pc, #44]	; (27068 <z_unpend1_no_timeout+0x7c>)
   2703a:	f7fe f81b 	bl	25074 <z_spin_unlock_valid>
   2703e:	b968      	cbnz	r0, 2705c <z_unpend1_no_timeout+0x70>
   27040:	23c2      	movs	r3, #194	; 0xc2
   27042:	4a0a      	ldr	r2, [pc, #40]	; (2706c <z_unpend1_no_timeout+0x80>)
   27044:	490d      	ldr	r1, [pc, #52]	; (2707c <z_unpend1_no_timeout+0x90>)
   27046:	480b      	ldr	r0, [pc, #44]	; (27074 <z_unpend1_no_timeout+0x88>)
   27048:	f003 fb37 	bl	2a6ba <assert_print>
   2704c:	4906      	ldr	r1, [pc, #24]	; (27068 <z_unpend1_no_timeout+0x7c>)
   2704e:	480c      	ldr	r0, [pc, #48]	; (27080 <z_unpend1_no_timeout+0x94>)
   27050:	f003 fb33 	bl	2a6ba <assert_print>
   27054:	21c2      	movs	r1, #194	; 0xc2
   27056:	e7e2      	b.n	2701e <z_unpend1_no_timeout+0x32>
   27058:	2400      	movs	r4, #0
   2705a:	e7ed      	b.n	27038 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   2705c:	f386 8811 	msr	BASEPRI, r6
   27060:	f3bf 8f6f 	isb	sy
}
   27064:	4620      	mov	r0, r4
   27066:	bd70      	pop	{r4, r5, r6, pc}
   27068:	20021ad0 	.word	0x20021ad0
   2706c:	000333ee 	.word	0x000333ee
   27070:	00033447 	.word	0x00033447
   27074:	00032659 	.word	0x00032659
   27078:	0003345c 	.word	0x0003345c
   2707c:	0003341b 	.word	0x0003341b
   27080:	00033432 	.word	0x00033432

00027084 <z_unpend_first_thread>:
{
   27084:	b570      	push	{r4, r5, r6, lr}
   27086:	4605      	mov	r5, r0
	__asm__ volatile(
   27088:	f04f 0320 	mov.w	r3, #32
   2708c:	f3ef 8611 	mrs	r6, BASEPRI
   27090:	f383 8812 	msr	BASEPRI_MAX, r3
   27094:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27098:	481b      	ldr	r0, [pc, #108]	; (27108 <z_unpend_first_thread+0x84>)
   2709a:	f7fd ffdd 	bl	25058 <z_spin_lock_valid>
   2709e:	b968      	cbnz	r0, 270bc <z_unpend_first_thread+0x38>
   270a0:	2394      	movs	r3, #148	; 0x94
   270a2:	4a1a      	ldr	r2, [pc, #104]	; (2710c <z_unpend_first_thread+0x88>)
   270a4:	491a      	ldr	r1, [pc, #104]	; (27110 <z_unpend_first_thread+0x8c>)
   270a6:	481b      	ldr	r0, [pc, #108]	; (27114 <z_unpend_first_thread+0x90>)
   270a8:	f003 fb07 	bl	2a6ba <assert_print>
   270ac:	4916      	ldr	r1, [pc, #88]	; (27108 <z_unpend_first_thread+0x84>)
   270ae:	481a      	ldr	r0, [pc, #104]	; (27118 <z_unpend_first_thread+0x94>)
   270b0:	f003 fb03 	bl	2a6ba <assert_print>
   270b4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270b6:	4815      	ldr	r0, [pc, #84]	; (2710c <z_unpend_first_thread+0x88>)
   270b8:	f003 faf8 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   270bc:	4812      	ldr	r0, [pc, #72]	; (27108 <z_unpend_first_thread+0x84>)
   270be:	f7fd ffe7 	bl	25090 <z_spin_lock_set_owner>
	return list->head == list;
   270c2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   270c4:	42a5      	cmp	r5, r4
   270c6:	d017      	beq.n	270f8 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   270c8:	b134      	cbz	r4, 270d8 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   270ca:	4620      	mov	r0, r4
   270cc:	f7ff fecc 	bl	26e68 <unpend_thread_no_timeout>
   270d0:	f104 0018 	add.w	r0, r4, #24
   270d4:	f000 fc0c 	bl	278f0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270d8:	480b      	ldr	r0, [pc, #44]	; (27108 <z_unpend_first_thread+0x84>)
   270da:	f7fd ffcb 	bl	25074 <z_spin_unlock_valid>
   270de:	b968      	cbnz	r0, 270fc <z_unpend_first_thread+0x78>
   270e0:	23c2      	movs	r3, #194	; 0xc2
   270e2:	4a0a      	ldr	r2, [pc, #40]	; (2710c <z_unpend_first_thread+0x88>)
   270e4:	490d      	ldr	r1, [pc, #52]	; (2711c <z_unpend_first_thread+0x98>)
   270e6:	480b      	ldr	r0, [pc, #44]	; (27114 <z_unpend_first_thread+0x90>)
   270e8:	f003 fae7 	bl	2a6ba <assert_print>
   270ec:	4906      	ldr	r1, [pc, #24]	; (27108 <z_unpend_first_thread+0x84>)
   270ee:	480c      	ldr	r0, [pc, #48]	; (27120 <z_unpend_first_thread+0x9c>)
   270f0:	f003 fae3 	bl	2a6ba <assert_print>
   270f4:	21c2      	movs	r1, #194	; 0xc2
   270f6:	e7de      	b.n	270b6 <z_unpend_first_thread+0x32>
   270f8:	2400      	movs	r4, #0
   270fa:	e7ed      	b.n	270d8 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   270fc:	f386 8811 	msr	BASEPRI, r6
   27100:	f3bf 8f6f 	isb	sy
}
   27104:	4620      	mov	r0, r4
   27106:	bd70      	pop	{r4, r5, r6, pc}
   27108:	20021ad0 	.word	0x20021ad0
   2710c:	000333ee 	.word	0x000333ee
   27110:	00033447 	.word	0x00033447
   27114:	00032659 	.word	0x00032659
   27118:	0003345c 	.word	0x0003345c
   2711c:	0003341b 	.word	0x0003341b
   27120:	00033432 	.word	0x00033432

00027124 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   27124:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   27126:	4b04      	ldr	r3, [pc, #16]	; (27138 <z_sched_init+0x14>)
   27128:	4608      	mov	r0, r1
   2712a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2712e:	e9c3 2208 	strd	r2, r2, [r3, #32]
   27132:	f7ff b96b 	b.w	2640c <k_sched_time_slice_set>
   27136:	bf00      	nop
   27138:	20021a88 	.word	0x20021a88

0002713c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2713e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   27142:	b16b      	cbz	r3, 27160 <z_impl_k_yield+0x24>
   27144:	493c      	ldr	r1, [pc, #240]	; (27238 <z_impl_k_yield+0xfc>)
   27146:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   2714a:	4a3c      	ldr	r2, [pc, #240]	; (2723c <z_impl_k_yield+0x100>)
   2714c:	483c      	ldr	r0, [pc, #240]	; (27240 <z_impl_k_yield+0x104>)
   2714e:	f003 fab4 	bl	2a6ba <assert_print>
   27152:	483c      	ldr	r0, [pc, #240]	; (27244 <z_impl_k_yield+0x108>)
   27154:	f003 fab1 	bl	2a6ba <assert_print>
   27158:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2715c:	4837      	ldr	r0, [pc, #220]	; (2723c <z_impl_k_yield+0x100>)
   2715e:	e017      	b.n	27190 <z_impl_k_yield+0x54>
	__asm__ volatile(
   27160:	f04f 0320 	mov.w	r3, #32
   27164:	f3ef 8611 	mrs	r6, BASEPRI
   27168:	f383 8812 	msr	BASEPRI_MAX, r3
   2716c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27170:	4835      	ldr	r0, [pc, #212]	; (27248 <z_impl_k_yield+0x10c>)
   27172:	f7fd ff71 	bl	25058 <z_spin_lock_valid>
   27176:	b968      	cbnz	r0, 27194 <z_impl_k_yield+0x58>
   27178:	2394      	movs	r3, #148	; 0x94
   2717a:	4a34      	ldr	r2, [pc, #208]	; (2724c <z_impl_k_yield+0x110>)
   2717c:	4934      	ldr	r1, [pc, #208]	; (27250 <z_impl_k_yield+0x114>)
   2717e:	4830      	ldr	r0, [pc, #192]	; (27240 <z_impl_k_yield+0x104>)
   27180:	f003 fa9b 	bl	2a6ba <assert_print>
   27184:	4930      	ldr	r1, [pc, #192]	; (27248 <z_impl_k_yield+0x10c>)
   27186:	4833      	ldr	r0, [pc, #204]	; (27254 <z_impl_k_yield+0x118>)
   27188:	f003 fa97 	bl	2a6ba <assert_print>
   2718c:	2194      	movs	r1, #148	; 0x94
   2718e:	482f      	ldr	r0, [pc, #188]	; (2724c <z_impl_k_yield+0x110>)
   27190:	f003 fa8c 	bl	2a6ac <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   27194:	4c30      	ldr	r4, [pc, #192]	; (27258 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   27196:	482c      	ldr	r0, [pc, #176]	; (27248 <z_impl_k_yield+0x10c>)
   27198:	f7fd ff7a 	bl	25090 <z_spin_lock_set_owner>
   2719c:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   2719e:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   271a2:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   271a4:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   271a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   271aa:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   271ac:	f7ff fb92 	bl	268d4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   271b0:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   271b2:	7b5a      	ldrb	r2, [r3, #13]
   271b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   271b8:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   271ba:	4a28      	ldr	r2, [pc, #160]	; (2725c <z_impl_k_yield+0x120>)
   271bc:	4293      	cmp	r3, r2
   271be:	d107      	bne.n	271d0 <z_impl_k_yield+0x94>
   271c0:	4927      	ldr	r1, [pc, #156]	; (27260 <z_impl_k_yield+0x124>)
   271c2:	23ba      	movs	r3, #186	; 0xba
   271c4:	4a1d      	ldr	r2, [pc, #116]	; (2723c <z_impl_k_yield+0x100>)
   271c6:	481e      	ldr	r0, [pc, #120]	; (27240 <z_impl_k_yield+0x104>)
   271c8:	f003 fa77 	bl	2a6ba <assert_print>
   271cc:	21ba      	movs	r1, #186	; 0xba
   271ce:	e7c5      	b.n	2715c <z_impl_k_yield+0x20>
	return list->head == list;
   271d0:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   271d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   271d4:	42aa      	cmp	r2, r5
   271d6:	bf08      	it	eq
   271d8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   271da:	b922      	cbnz	r2, 271e6 <z_impl_k_yield+0xaa>
	node->prev = tail;
   271dc:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   271e0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   271e2:	6263      	str	r3, [r4, #36]	; 0x24
}
   271e4:	e00c      	b.n	27200 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   271e6:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   271ea:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   271ee:	42b8      	cmp	r0, r7
   271f0:	d019      	beq.n	27226 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   271f2:	4287      	cmp	r7, r0
   271f4:	dd17      	ble.n	27226 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   271f6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   271f8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   271fc:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   271fe:	6053      	str	r3, [r2, #4]
	update_cache(1);
   27200:	2001      	movs	r0, #1
   27202:	f7ff f885 	bl	26310 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27206:	4810      	ldr	r0, [pc, #64]	; (27248 <z_impl_k_yield+0x10c>)
   27208:	f7fd ff34 	bl	25074 <z_spin_unlock_valid>
   2720c:	b978      	cbnz	r0, 2722e <z_impl_k_yield+0xf2>
   2720e:	23e1      	movs	r3, #225	; 0xe1
   27210:	4a0e      	ldr	r2, [pc, #56]	; (2724c <z_impl_k_yield+0x110>)
   27212:	4914      	ldr	r1, [pc, #80]	; (27264 <z_impl_k_yield+0x128>)
   27214:	480a      	ldr	r0, [pc, #40]	; (27240 <z_impl_k_yield+0x104>)
   27216:	f003 fa50 	bl	2a6ba <assert_print>
   2721a:	490b      	ldr	r1, [pc, #44]	; (27248 <z_impl_k_yield+0x10c>)
   2721c:	4812      	ldr	r0, [pc, #72]	; (27268 <z_impl_k_yield+0x12c>)
   2721e:	f003 fa4c 	bl	2a6ba <assert_print>
   27222:	21e1      	movs	r1, #225	; 0xe1
   27224:	e7b3      	b.n	2718e <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   27226:	428a      	cmp	r2, r1
   27228:	d0d8      	beq.n	271dc <z_impl_k_yield+0xa0>
   2722a:	6812      	ldr	r2, [r2, #0]
   2722c:	e7d5      	b.n	271da <z_impl_k_yield+0x9e>
   2722e:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   27230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   27234:	f7e9 bc74 	b.w	10b20 <arch_swap>
   27238:	00038422 	.word	0x00038422
   2723c:	0003868f 	.word	0x0003868f
   27240:	00032659 	.word	0x00032659
   27244:	000368ea 	.word	0x000368ea
   27248:	20021ad0 	.word	0x20021ad0
   2724c:	000333ee 	.word	0x000333ee
   27250:	00033447 	.word	0x00033447
   27254:	0003345c 	.word	0x0003345c
   27258:	20021a88 	.word	0x20021a88
   2725c:	2000a160 	.word	0x2000a160
   27260:	000386d8 	.word	0x000386d8
   27264:	0003341b 	.word	0x0003341b
   27268:	00033432 	.word	0x00033432

0002726c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   2726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27270:	4605      	mov	r5, r0
   27272:	460e      	mov	r6, r1
   27274:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   27278:	b16b      	cbz	r3, 27296 <z_tick_sleep+0x2a>
   2727a:	493f      	ldr	r1, [pc, #252]	; (27378 <z_tick_sleep+0x10c>)
   2727c:	f240 538c 	movw	r3, #1420	; 0x58c
   27280:	4a3e      	ldr	r2, [pc, #248]	; (2737c <z_tick_sleep+0x110>)
   27282:	483f      	ldr	r0, [pc, #252]	; (27380 <z_tick_sleep+0x114>)
   27284:	f003 fa19 	bl	2a6ba <assert_print>
   27288:	483e      	ldr	r0, [pc, #248]	; (27384 <z_tick_sleep+0x118>)
   2728a:	f003 fa16 	bl	2a6ba <assert_print>
   2728e:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   27292:	483a      	ldr	r0, [pc, #232]	; (2737c <z_tick_sleep+0x110>)
   27294:	e025      	b.n	272e2 <z_tick_sleep+0x76>
	if (ticks == 0) {
   27296:	ea50 0301 	orrs.w	r3, r0, r1
   2729a:	d103      	bne.n	272a4 <z_tick_sleep+0x38>
	z_impl_k_yield();
   2729c:	f7ff ff4e 	bl	2713c <z_impl_k_yield>
		return 0;
   272a0:	2000      	movs	r0, #0
   272a2:	e066      	b.n	27372 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   272a4:	1c82      	adds	r2, r0, #2
   272a6:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   272aa:	db1c      	blt.n	272e6 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   272ac:	f009 f842 	bl	30334 <sys_clock_tick_get_32>
   272b0:	182c      	adds	r4, r5, r0
   272b2:	f04f 0320 	mov.w	r3, #32
   272b6:	f3ef 8811 	mrs	r8, BASEPRI
   272ba:	f383 8812 	msr	BASEPRI_MAX, r3
   272be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   272c2:	4831      	ldr	r0, [pc, #196]	; (27388 <z_tick_sleep+0x11c>)
   272c4:	f7fd fec8 	bl	25058 <z_spin_lock_valid>
   272c8:	b988      	cbnz	r0, 272ee <z_tick_sleep+0x82>
   272ca:	2394      	movs	r3, #148	; 0x94
   272cc:	4a2f      	ldr	r2, [pc, #188]	; (2738c <z_tick_sleep+0x120>)
   272ce:	4930      	ldr	r1, [pc, #192]	; (27390 <z_tick_sleep+0x124>)
   272d0:	482b      	ldr	r0, [pc, #172]	; (27380 <z_tick_sleep+0x114>)
   272d2:	f003 f9f2 	bl	2a6ba <assert_print>
   272d6:	492c      	ldr	r1, [pc, #176]	; (27388 <z_tick_sleep+0x11c>)
   272d8:	482e      	ldr	r0, [pc, #184]	; (27394 <z_tick_sleep+0x128>)
   272da:	f003 f9ee 	bl	2a6ba <assert_print>
   272de:	2194      	movs	r1, #148	; 0x94
   272e0:	482a      	ldr	r0, [pc, #168]	; (2738c <z_tick_sleep+0x120>)
   272e2:	f003 f9e3 	bl	2a6ac <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   272e6:	f06f 0401 	mvn.w	r4, #1
   272ea:	1a24      	subs	r4, r4, r0
   272ec:	e7e1      	b.n	272b2 <z_tick_sleep+0x46>
	pending_current = _current;
   272ee:	4f2a      	ldr	r7, [pc, #168]	; (27398 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   272f0:	4825      	ldr	r0, [pc, #148]	; (27388 <z_tick_sleep+0x11c>)
   272f2:	f7fd fecd 	bl	25090 <z_spin_lock_set_owner>
   272f6:	68b8      	ldr	r0, [r7, #8]
   272f8:	4b28      	ldr	r3, [pc, #160]	; (2739c <z_tick_sleep+0x130>)
   272fa:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   272fc:	f7ff fbd2 	bl	26aa4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   27300:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   27302:	462a      	mov	r2, r5
   27304:	4633      	mov	r3, r6
   27306:	3018      	adds	r0, #24
   27308:	4925      	ldr	r1, [pc, #148]	; (273a0 <z_tick_sleep+0x134>)
   2730a:	f000 fa2b 	bl	27764 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2730e:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27310:	481d      	ldr	r0, [pc, #116]	; (27388 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   27312:	7b53      	ldrb	r3, [r2, #13]
   27314:	f043 0310 	orr.w	r3, r3, #16
   27318:	7353      	strb	r3, [r2, #13]
   2731a:	f7fd feab 	bl	25074 <z_spin_unlock_valid>
   2731e:	b958      	cbnz	r0, 27338 <z_tick_sleep+0xcc>
   27320:	23e1      	movs	r3, #225	; 0xe1
   27322:	4a1a      	ldr	r2, [pc, #104]	; (2738c <z_tick_sleep+0x120>)
   27324:	491f      	ldr	r1, [pc, #124]	; (273a4 <z_tick_sleep+0x138>)
   27326:	4816      	ldr	r0, [pc, #88]	; (27380 <z_tick_sleep+0x114>)
   27328:	f003 f9c7 	bl	2a6ba <assert_print>
   2732c:	4916      	ldr	r1, [pc, #88]	; (27388 <z_tick_sleep+0x11c>)
   2732e:	481e      	ldr	r0, [pc, #120]	; (273a8 <z_tick_sleep+0x13c>)
   27330:	f003 f9c3 	bl	2a6ba <assert_print>
   27334:	21e1      	movs	r1, #225	; 0xe1
   27336:	e7d3      	b.n	272e0 <z_tick_sleep+0x74>
   27338:	4640      	mov	r0, r8
   2733a:	f7e9 fbf1 	bl	10b20 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   2733e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   27340:	7b5b      	ldrb	r3, [r3, #13]
   27342:	06db      	lsls	r3, r3, #27
   27344:	d50c      	bpl.n	27360 <z_tick_sleep+0xf4>
   27346:	4919      	ldr	r1, [pc, #100]	; (273ac <z_tick_sleep+0x140>)
   27348:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   2734c:	4a0b      	ldr	r2, [pc, #44]	; (2737c <z_tick_sleep+0x110>)
   2734e:	480c      	ldr	r0, [pc, #48]	; (27380 <z_tick_sleep+0x114>)
   27350:	f003 f9b3 	bl	2a6ba <assert_print>
   27354:	480b      	ldr	r0, [pc, #44]	; (27384 <z_tick_sleep+0x118>)
   27356:	f003 f9b0 	bl	2a6ba <assert_print>
   2735a:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   2735e:	e798      	b.n	27292 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   27360:	f008 ffe8 	bl	30334 <sys_clock_tick_get_32>
   27364:	1a20      	subs	r0, r4, r0
   27366:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2736a:	2801      	cmp	r0, #1
   2736c:	f173 0300 	sbcs.w	r3, r3, #0
   27370:	db96      	blt.n	272a0 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   27372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27376:	bf00      	nop
   27378:	00038422 	.word	0x00038422
   2737c:	0003868f 	.word	0x0003868f
   27380:	00032659 	.word	0x00032659
   27384:	000368ea 	.word	0x000368ea
   27388:	20021ad0 	.word	0x20021ad0
   2738c:	000333ee 	.word	0x000333ee
   27390:	00033447 	.word	0x00033447
   27394:	0003345c 	.word	0x0003345c
   27398:	20021a88 	.word	0x20021a88
   2739c:	20021ac4 	.word	0x20021ac4
   273a0:	00026f3d 	.word	0x00026f3d
   273a4:	0003341b 	.word	0x0003341b
   273a8:	00033432 	.word	0x00033432
   273ac:	000387d4 	.word	0x000387d4

000273b0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   273b0:	b508      	push	{r3, lr}
   273b2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   273b6:	b173      	cbz	r3, 273d6 <z_impl_k_sleep+0x26>
   273b8:	4912      	ldr	r1, [pc, #72]	; (27404 <z_impl_k_sleep+0x54>)
   273ba:	f240 53b7 	movw	r3, #1463	; 0x5b7
   273be:	4a12      	ldr	r2, [pc, #72]	; (27408 <z_impl_k_sleep+0x58>)
   273c0:	4812      	ldr	r0, [pc, #72]	; (2740c <z_impl_k_sleep+0x5c>)
   273c2:	f003 f97a 	bl	2a6ba <assert_print>
   273c6:	4812      	ldr	r0, [pc, #72]	; (27410 <z_impl_k_sleep+0x60>)
   273c8:	f003 f977 	bl	2a6ba <assert_print>
   273cc:	f240 51b7 	movw	r1, #1463	; 0x5b7
   273d0:	480d      	ldr	r0, [pc, #52]	; (27408 <z_impl_k_sleep+0x58>)
   273d2:	f003 f96b 	bl	2a6ac <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   273d6:	f1b1 3fff 	cmp.w	r1, #4294967295
   273da:	bf08      	it	eq
   273dc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   273e0:	d106      	bne.n	273f0 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   273e2:	4b0c      	ldr	r3, [pc, #48]	; (27414 <z_impl_k_sleep+0x64>)
   273e4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   273e6:	f7ff fcd7 	bl	26d98 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   273ea:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   273ee:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   273f0:	f7ff ff3c 	bl	2726c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   273f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   273f8:	fb80 0303 	smull	r0, r3, r0, r3
   273fc:	0bc0      	lsrs	r0, r0, #15
   273fe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   27402:	e7f4      	b.n	273ee <z_impl_k_sleep+0x3e>
   27404:	00038422 	.word	0x00038422
   27408:	0003868f 	.word	0x0003868f
   2740c:	00032659 	.word	0x00032659
   27410:	000368ea 	.word	0x000368ea
   27414:	20021a88 	.word	0x20021a88

00027418 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   27418:	4b01      	ldr	r3, [pc, #4]	; (27420 <z_impl_z_current_get+0x8>)
   2741a:	6898      	ldr	r0, [r3, #8]
   2741c:	4770      	bx	lr
   2741e:	bf00      	nop
   27420:	20021a88 	.word	0x20021a88

00027424 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   27424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27428:	4604      	mov	r4, r0
   2742a:	f04f 0320 	mov.w	r3, #32
   2742e:	f3ef 8611 	mrs	r6, BASEPRI
   27432:	f383 8812 	msr	BASEPRI_MAX, r3
   27436:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2743a:	4851      	ldr	r0, [pc, #324]	; (27580 <z_thread_abort+0x15c>)
   2743c:	f7fd fe0c 	bl	25058 <z_spin_lock_valid>
   27440:	b968      	cbnz	r0, 2745e <z_thread_abort+0x3a>
   27442:	2394      	movs	r3, #148	; 0x94
   27444:	4a4f      	ldr	r2, [pc, #316]	; (27584 <z_thread_abort+0x160>)
   27446:	4950      	ldr	r1, [pc, #320]	; (27588 <z_thread_abort+0x164>)
   27448:	4850      	ldr	r0, [pc, #320]	; (2758c <z_thread_abort+0x168>)
   2744a:	f003 f936 	bl	2a6ba <assert_print>
   2744e:	494c      	ldr	r1, [pc, #304]	; (27580 <z_thread_abort+0x15c>)
   27450:	484f      	ldr	r0, [pc, #316]	; (27590 <z_thread_abort+0x16c>)
   27452:	f003 f932 	bl	2a6ba <assert_print>
   27456:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27458:	484a      	ldr	r0, [pc, #296]	; (27584 <z_thread_abort+0x160>)
   2745a:	f003 f927 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   2745e:	4848      	ldr	r0, [pc, #288]	; (27580 <z_thread_abort+0x15c>)
   27460:	f7fd fe16 	bl	25090 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   27464:	7b23      	ldrb	r3, [r4, #12]
   27466:	07d9      	lsls	r1, r3, #31
   27468:	d522      	bpl.n	274b0 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2746a:	4845      	ldr	r0, [pc, #276]	; (27580 <z_thread_abort+0x15c>)
   2746c:	f7fd fe02 	bl	25074 <z_spin_unlock_valid>
   27470:	b958      	cbnz	r0, 2748a <z_thread_abort+0x66>
   27472:	23c2      	movs	r3, #194	; 0xc2
   27474:	4a43      	ldr	r2, [pc, #268]	; (27584 <z_thread_abort+0x160>)
   27476:	4947      	ldr	r1, [pc, #284]	; (27594 <z_thread_abort+0x170>)
   27478:	4844      	ldr	r0, [pc, #272]	; (2758c <z_thread_abort+0x168>)
   2747a:	f003 f91e 	bl	2a6ba <assert_print>
   2747e:	4940      	ldr	r1, [pc, #256]	; (27580 <z_thread_abort+0x15c>)
   27480:	4845      	ldr	r0, [pc, #276]	; (27598 <z_thread_abort+0x174>)
   27482:	f003 f91a 	bl	2a6ba <assert_print>
   27486:	21c2      	movs	r1, #194	; 0xc2
   27488:	e7e6      	b.n	27458 <z_thread_abort+0x34>
	__asm__ volatile(
   2748a:	f386 8811 	msr	BASEPRI, r6
   2748e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   27492:	f240 63c3 	movw	r3, #1731	; 0x6c3
   27496:	4a41      	ldr	r2, [pc, #260]	; (2759c <z_thread_abort+0x178>)
   27498:	4941      	ldr	r1, [pc, #260]	; (275a0 <z_thread_abort+0x17c>)
   2749a:	483c      	ldr	r0, [pc, #240]	; (2758c <z_thread_abort+0x168>)
   2749c:	f003 f90d 	bl	2a6ba <assert_print>
   274a0:	4621      	mov	r1, r4
   274a2:	4840      	ldr	r0, [pc, #256]	; (275a4 <z_thread_abort+0x180>)
   274a4:	f003 f909 	bl	2a6ba <assert_print>
   274a8:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   274ac:	483b      	ldr	r0, [pc, #236]	; (2759c <z_thread_abort+0x178>)
   274ae:	e7d4      	b.n	2745a <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   274b0:	7b63      	ldrb	r3, [r4, #13]
   274b2:	071a      	lsls	r2, r3, #28
   274b4:	d50a      	bpl.n	274cc <z_thread_abort+0xa8>
   274b6:	4832      	ldr	r0, [pc, #200]	; (27580 <z_thread_abort+0x15c>)
   274b8:	f7fd fddc 	bl	25074 <z_spin_unlock_valid>
   274bc:	2800      	cmp	r0, #0
   274be:	d0d8      	beq.n	27472 <z_thread_abort+0x4e>
   274c0:	f386 8811 	msr	BASEPRI, r6
   274c4:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   274c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   274cc:	f023 0220 	bic.w	r2, r3, #32
   274d0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   274d4:	09d2      	lsrs	r2, r2, #7
   274d6:	d12c      	bne.n	27532 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   274d8:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   274da:	68a3      	ldr	r3, [r4, #8]
   274dc:	b113      	cbz	r3, 274e4 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   274de:	4620      	mov	r0, r4
   274e0:	f7ff fcc2 	bl	26e68 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   274e4:	f104 0018 	add.w	r0, r4, #24
   274e8:	f000 fa02 	bl	278f0 <z_abort_timeout>
   274ec:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   274f0:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   274f4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   274f6:	42bd      	cmp	r5, r7
   274f8:	d000      	beq.n	274fc <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   274fa:	bb25      	cbnz	r5, 27546 <z_thread_abort+0x122>
		update_cache(1);
   274fc:	2001      	movs	r0, #1
   274fe:	f7fe ff07 	bl	26310 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   27502:	4b29      	ldr	r3, [pc, #164]	; (275a8 <z_thread_abort+0x184>)
   27504:	689b      	ldr	r3, [r3, #8]
   27506:	42a3      	cmp	r3, r4
   27508:	d1d5      	bne.n	274b6 <z_thread_abort+0x92>
   2750a:	f3ef 8305 	mrs	r3, IPSR
   2750e:	2b00      	cmp	r3, #0
   27510:	d1d1      	bne.n	274b6 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27512:	481b      	ldr	r0, [pc, #108]	; (27580 <z_thread_abort+0x15c>)
   27514:	f7fd fdae 	bl	25074 <z_spin_unlock_valid>
   27518:	bb10      	cbnz	r0, 27560 <z_thread_abort+0x13c>
   2751a:	23e1      	movs	r3, #225	; 0xe1
   2751c:	4a19      	ldr	r2, [pc, #100]	; (27584 <z_thread_abort+0x160>)
   2751e:	491d      	ldr	r1, [pc, #116]	; (27594 <z_thread_abort+0x170>)
   27520:	481a      	ldr	r0, [pc, #104]	; (2758c <z_thread_abort+0x168>)
   27522:	f003 f8ca 	bl	2a6ba <assert_print>
   27526:	4916      	ldr	r1, [pc, #88]	; (27580 <z_thread_abort+0x15c>)
   27528:	481b      	ldr	r0, [pc, #108]	; (27598 <z_thread_abort+0x174>)
   2752a:	f003 f8c6 	bl	2a6ba <assert_print>
   2752e:	21e1      	movs	r1, #225	; 0xe1
   27530:	e792      	b.n	27458 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27532:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   27536:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   2753a:	4621      	mov	r1, r4
   2753c:	481b      	ldr	r0, [pc, #108]	; (275ac <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2753e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27540:	f7ff f9c8 	bl	268d4 <z_priq_dumb_remove>
}
   27544:	e7c9      	b.n	274da <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   27546:	4628      	mov	r0, r5
   27548:	f7ff fc8e 	bl	26e68 <unpend_thread_no_timeout>
   2754c:	f105 0018 	add.w	r0, r5, #24
   27550:	f000 f9ce 	bl	278f0 <z_abort_timeout>
		ready_thread(thread);
   27554:	4628      	mov	r0, r5
   27556:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   2755a:	f7fe ff0d 	bl	26378 <ready_thread>
   2755e:	e7c9      	b.n	274f4 <z_thread_abort+0xd0>
   27560:	4630      	mov	r0, r6
   27562:	f7e9 fadd 	bl	10b20 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   27566:	490e      	ldr	r1, [pc, #56]	; (275a0 <z_thread_abort+0x17c>)
   27568:	f240 63f2 	movw	r3, #1778	; 0x6f2
   2756c:	4a0b      	ldr	r2, [pc, #44]	; (2759c <z_thread_abort+0x178>)
   2756e:	4807      	ldr	r0, [pc, #28]	; (2758c <z_thread_abort+0x168>)
   27570:	f003 f8a3 	bl	2a6ba <assert_print>
   27574:	480e      	ldr	r0, [pc, #56]	; (275b0 <z_thread_abort+0x18c>)
   27576:	f003 f8a0 	bl	2a6ba <assert_print>
   2757a:	f240 61f2 	movw	r1, #1778	; 0x6f2
   2757e:	e795      	b.n	274ac <z_thread_abort+0x88>
   27580:	20021ad0 	.word	0x20021ad0
   27584:	000333ee 	.word	0x000333ee
   27588:	00033447 	.word	0x00033447
   2758c:	00032659 	.word	0x00032659
   27590:	0003345c 	.word	0x0003345c
   27594:	0003341b 	.word	0x0003341b
   27598:	00033432 	.word	0x00033432
   2759c:	0003868f 	.word	0x0003868f
   275a0:	00037b2a 	.word	0x00037b2a
   275a4:	00038814 	.word	0x00038814
   275a8:	20021a88 	.word	0x20021a88
   275ac:	20021aa8 	.word	0x20021aa8
   275b0:	00038833 	.word	0x00038833

000275b4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   275b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   275b8:	4606      	mov	r6, r0
   275ba:	4688      	mov	r8, r1
   275bc:	4617      	mov	r7, r2
	__asm__ volatile(
   275be:	f04f 0320 	mov.w	r3, #32
   275c2:	f3ef 8911 	mrs	r9, BASEPRI
   275c6:	f383 8812 	msr	BASEPRI_MAX, r3
   275ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   275ce:	4821      	ldr	r0, [pc, #132]	; (27654 <z_sched_wake+0xa0>)
   275d0:	f7fd fd42 	bl	25058 <z_spin_lock_valid>
   275d4:	4605      	mov	r5, r0
   275d6:	b968      	cbnz	r0, 275f4 <z_sched_wake+0x40>
   275d8:	2394      	movs	r3, #148	; 0x94
   275da:	4a1f      	ldr	r2, [pc, #124]	; (27658 <z_sched_wake+0xa4>)
   275dc:	491f      	ldr	r1, [pc, #124]	; (2765c <z_sched_wake+0xa8>)
   275de:	4820      	ldr	r0, [pc, #128]	; (27660 <z_sched_wake+0xac>)
   275e0:	f003 f86b 	bl	2a6ba <assert_print>
   275e4:	491b      	ldr	r1, [pc, #108]	; (27654 <z_sched_wake+0xa0>)
   275e6:	481f      	ldr	r0, [pc, #124]	; (27664 <z_sched_wake+0xb0>)
   275e8:	f003 f867 	bl	2a6ba <assert_print>
   275ec:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   275ee:	481a      	ldr	r0, [pc, #104]	; (27658 <z_sched_wake+0xa4>)
   275f0:	f003 f85c 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   275f4:	4817      	ldr	r0, [pc, #92]	; (27654 <z_sched_wake+0xa0>)
   275f6:	f7fd fd4b 	bl	25090 <z_spin_lock_set_owner>
	return list->head == list;
   275fa:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   275fc:	42a6      	cmp	r6, r4
   275fe:	d01d      	beq.n	2763c <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   27600:	b1f4      	cbz	r4, 27640 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   27602:	4620      	mov	r0, r4
   27604:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   27608:	6167      	str	r7, [r4, #20]
   2760a:	f7ff fc2d 	bl	26e68 <unpend_thread_no_timeout>
   2760e:	f104 0018 	add.w	r0, r4, #24
   27612:	f000 f96d 	bl	278f0 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   27616:	4620      	mov	r0, r4
   27618:	f7fe feae 	bl	26378 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2761c:	480d      	ldr	r0, [pc, #52]	; (27654 <z_sched_wake+0xa0>)
   2761e:	f7fd fd29 	bl	25074 <z_spin_unlock_valid>
   27622:	b978      	cbnz	r0, 27644 <z_sched_wake+0x90>
   27624:	23c2      	movs	r3, #194	; 0xc2
   27626:	4a0c      	ldr	r2, [pc, #48]	; (27658 <z_sched_wake+0xa4>)
   27628:	490f      	ldr	r1, [pc, #60]	; (27668 <z_sched_wake+0xb4>)
   2762a:	480d      	ldr	r0, [pc, #52]	; (27660 <z_sched_wake+0xac>)
   2762c:	f003 f845 	bl	2a6ba <assert_print>
   27630:	4908      	ldr	r1, [pc, #32]	; (27654 <z_sched_wake+0xa0>)
   27632:	480e      	ldr	r0, [pc, #56]	; (2766c <z_sched_wake+0xb8>)
   27634:	f003 f841 	bl	2a6ba <assert_print>
   27638:	21c2      	movs	r1, #194	; 0xc2
   2763a:	e7d8      	b.n	275ee <z_sched_wake+0x3a>
	bool ret = false;
   2763c:	2500      	movs	r5, #0
   2763e:	e7ed      	b.n	2761c <z_sched_wake+0x68>
   27640:	4625      	mov	r5, r4
   27642:	e7eb      	b.n	2761c <z_sched_wake+0x68>
	__asm__ volatile(
   27644:	f389 8811 	msr	BASEPRI, r9
   27648:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   2764c:	4628      	mov	r0, r5
   2764e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27652:	bf00      	nop
   27654:	20021ad0 	.word	0x20021ad0
   27658:	000333ee 	.word	0x000333ee
   2765c:	00033447 	.word	0x00033447
   27660:	00032659 	.word	0x00032659
   27664:	0003345c 	.word	0x0003345c
   27668:	0003341b 	.word	0x0003341b
   2766c:	00033432 	.word	0x00033432

00027670 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   27670:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27672:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   27676:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27678:	e9cd 6700 	strd	r6, r7, [sp]
   2767c:	f7ff fa84 	bl	26b88 <z_pend_curr>

	if (data != NULL) {
   27680:	b11c      	cbz	r4, 2768a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   27682:	4b03      	ldr	r3, [pc, #12]	; (27690 <z_sched_wait+0x20>)
   27684:	689b      	ldr	r3, [r3, #8]
   27686:	695b      	ldr	r3, [r3, #20]
   27688:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2768a:	b002      	add	sp, #8
   2768c:	bdd0      	pop	{r4, r6, r7, pc}
   2768e:	bf00      	nop
   27690:	20021a88 	.word	0x20021a88

00027694 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   27694:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   27696:	4806      	ldr	r0, [pc, #24]	; (276b0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   27698:	4a06      	ldr	r2, [pc, #24]	; (276b4 <z_data_copy+0x20>)
   2769a:	4907      	ldr	r1, [pc, #28]	; (276b8 <z_data_copy+0x24>)
   2769c:	1a12      	subs	r2, r2, r0
   2769e:	f008 fd29 	bl	300f4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   276a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   276a6:	4a05      	ldr	r2, [pc, #20]	; (276bc <z_data_copy+0x28>)
   276a8:	4905      	ldr	r1, [pc, #20]	; (276c0 <z_data_copy+0x2c>)
   276aa:	4806      	ldr	r0, [pc, #24]	; (276c4 <z_data_copy+0x30>)
   276ac:	f008 bd22 	b.w	300f4 <z_early_memcpy>
   276b0:	20008000 	.word	0x20008000
   276b4:	20008e40 	.word	0x20008e40
   276b8:	00038e54 	.word	0x00038e54
   276bc:	00000000 	.word	0x00000000
   276c0:	00038e54 	.word	0x00038e54
   276c4:	20008000 	.word	0x20008000

000276c8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   276c8:	4b03      	ldr	r3, [pc, #12]	; (276d8 <elapsed+0x10>)
   276ca:	681b      	ldr	r3, [r3, #0]
   276cc:	b90b      	cbnz	r3, 276d2 <elapsed+0xa>
   276ce:	f7f7 b893 	b.w	1e7f8 <sys_clock_elapsed>
}
   276d2:	2000      	movs	r0, #0
   276d4:	4770      	bx	lr
   276d6:	bf00      	nop
   276d8:	20021ad4 	.word	0x20021ad4

000276dc <next_timeout>:

static int32_t next_timeout(void)
{
   276dc:	b510      	push	{r4, lr}
	return list->head == list;
   276de:	4b11      	ldr	r3, [pc, #68]	; (27724 <next_timeout+0x48>)
   276e0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276e2:	429c      	cmp	r4, r3
   276e4:	d10a      	bne.n	276fc <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   276e6:	f7ff ffef 	bl	276c8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   276ea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   276ee:	4b0e      	ldr	r3, [pc, #56]	; (27728 <next_timeout+0x4c>)
   276f0:	691b      	ldr	r3, [r3, #16]
   276f2:	b113      	cbz	r3, 276fa <next_timeout+0x1e>
   276f4:	4298      	cmp	r0, r3
   276f6:	bfa8      	it	ge
   276f8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   276fa:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   276fc:	f7ff ffe4 	bl	276c8 <elapsed>
	if ((to == NULL) ||
   27700:	2c00      	cmp	r4, #0
   27702:	d0f2      	beq.n	276ea <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   27704:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   27708:	1a1b      	subs	r3, r3, r0
   2770a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2770e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   27712:	f172 0100 	sbcs.w	r1, r2, #0
   27716:	dae8      	bge.n	276ea <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   27718:	2a00      	cmp	r2, #0
   2771a:	bfac      	ite	ge
   2771c:	4618      	movge	r0, r3
   2771e:	2000      	movlt	r0, #0
   27720:	e7e5      	b.n	276ee <next_timeout+0x12>
   27722:	bf00      	nop
   27724:	20008744 	.word	0x20008744
   27728:	20021a88 	.word	0x20021a88

0002772c <remove_timeout>:
{
   2772c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2772e:	b170      	cbz	r0, 2774e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   27730:	4b0b      	ldr	r3, [pc, #44]	; (27760 <remove_timeout+0x34>)
   27732:	685b      	ldr	r3, [r3, #4]
   27734:	4298      	cmp	r0, r3
   27736:	d00a      	beq.n	2774e <remove_timeout+0x22>
   27738:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2773a:	b143      	cbz	r3, 2774e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2773c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   27740:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   27744:	1912      	adds	r2, r2, r4
   27746:	eb41 0105 	adc.w	r1, r1, r5
   2774a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   2774e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27752:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27754:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27756:	2300      	movs	r3, #0
	node->prev = NULL;
   27758:	e9c0 3300 	strd	r3, r3, [r0]
}
   2775c:	bd30      	pop	{r4, r5, pc}
   2775e:	bf00      	nop
   27760:	20008744 	.word	0x20008744

00027764 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27764:	f1b3 3fff 	cmp.w	r3, #4294967295
   27768:	bf08      	it	eq
   2776a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2776e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27772:	4604      	mov	r4, r0
   27774:	4692      	mov	sl, r2
   27776:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27778:	f000 809e 	beq.w	278b8 <z_add_timeout+0x154>
	return node->next != NULL;
   2777c:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2777e:	b166      	cbz	r6, 2779a <z_add_timeout+0x36>
   27780:	494e      	ldr	r1, [pc, #312]	; (278bc <z_add_timeout+0x158>)
   27782:	2363      	movs	r3, #99	; 0x63
   27784:	4a4e      	ldr	r2, [pc, #312]	; (278c0 <z_add_timeout+0x15c>)
   27786:	484f      	ldr	r0, [pc, #316]	; (278c4 <z_add_timeout+0x160>)
   27788:	f002 ff97 	bl	2a6ba <assert_print>
   2778c:	484e      	ldr	r0, [pc, #312]	; (278c8 <z_add_timeout+0x164>)
   2778e:	f002 ff94 	bl	2a6ba <assert_print>
   27792:	2163      	movs	r1, #99	; 0x63
   27794:	484a      	ldr	r0, [pc, #296]	; (278c0 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27796:	f002 ff89 	bl	2a6ac <assert_post_action>
	to->fn = fn;
   2779a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2779c:	f04f 0320 	mov.w	r3, #32
   277a0:	f3ef 8711 	mrs	r7, BASEPRI
   277a4:	f383 8812 	msr	BASEPRI_MAX, r3
   277a8:	f3bf 8f6f 	isb	sy
   277ac:	4847      	ldr	r0, [pc, #284]	; (278cc <z_add_timeout+0x168>)
   277ae:	f7fd fc53 	bl	25058 <z_spin_lock_valid>
   277b2:	b960      	cbnz	r0, 277ce <z_add_timeout+0x6a>
   277b4:	2394      	movs	r3, #148	; 0x94
   277b6:	4a46      	ldr	r2, [pc, #280]	; (278d0 <z_add_timeout+0x16c>)
   277b8:	4946      	ldr	r1, [pc, #280]	; (278d4 <z_add_timeout+0x170>)
   277ba:	4842      	ldr	r0, [pc, #264]	; (278c4 <z_add_timeout+0x160>)
   277bc:	f002 ff7d 	bl	2a6ba <assert_print>
   277c0:	4942      	ldr	r1, [pc, #264]	; (278cc <z_add_timeout+0x168>)
   277c2:	4845      	ldr	r0, [pc, #276]	; (278d8 <z_add_timeout+0x174>)
   277c4:	f002 ff79 	bl	2a6ba <assert_print>
   277c8:	2194      	movs	r1, #148	; 0x94
   277ca:	4841      	ldr	r0, [pc, #260]	; (278d0 <z_add_timeout+0x16c>)
   277cc:	e7e3      	b.n	27796 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   277ce:	483f      	ldr	r0, [pc, #252]	; (278cc <z_add_timeout+0x168>)
   277d0:	f7fd fc5e 	bl	25090 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   277d4:	f1ba 3fff 	cmp.w	sl, #4294967295
   277d8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   277dc:	da23      	bge.n	27826 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   277de:	f06f 0301 	mvn.w	r3, #1
   277e2:	493e      	ldr	r1, [pc, #248]	; (278dc <z_add_timeout+0x178>)
   277e4:	e9d1 2000 	ldrd	r2, r0, [r1]
   277e8:	1a9b      	subs	r3, r3, r2
   277ea:	f04f 32ff 	mov.w	r2, #4294967295
   277ee:	eb62 0000 	sbc.w	r0, r2, r0
   277f2:	ebb3 030a 	subs.w	r3, r3, sl
   277f6:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   277fa:	2b01      	cmp	r3, #1
   277fc:	f170 0200 	sbcs.w	r2, r0, #0
   27800:	da01      	bge.n	27806 <z_add_timeout+0xa2>
   27802:	2301      	movs	r3, #1
   27804:	4630      	mov	r0, r6
   27806:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   2780a:	4b35      	ldr	r3, [pc, #212]	; (278e0 <z_add_timeout+0x17c>)
   2780c:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   2780e:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27812:	429a      	cmp	r2, r3
   27814:	bf18      	it	ne
   27816:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   27818:	b986      	cbnz	r6, 2783c <z_add_timeout+0xd8>
	node->prev = tail;
   2781a:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   2781e:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   27822:	605c      	str	r4, [r3, #4]
}
   27824:	e01c      	b.n	27860 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   27826:	f7ff ff4f 	bl	276c8 <elapsed>
   2782a:	f11a 0801 	adds.w	r8, sl, #1
   2782e:	f145 0500 	adc.w	r5, r5, #0
   27832:	eb18 0300 	adds.w	r3, r8, r0
   27836:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   2783a:	e7e4      	b.n	27806 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   2783c:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   27840:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   27844:	428a      	cmp	r2, r1
   27846:	eb70 0e05 	sbcs.w	lr, r0, r5
   2784a:	da28      	bge.n	2789e <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   2784c:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   2784e:	6872      	ldr	r2, [r6, #4]
   27850:	eb65 0500 	sbc.w	r5, r5, r0
   27854:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   27858:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   2785c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2785e:	6074      	str	r4, [r6, #4]
	return list->head == list;
   27860:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27862:	429a      	cmp	r2, r3
   27864:	d00b      	beq.n	2787e <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   27866:	4294      	cmp	r4, r2
   27868:	d109      	bne.n	2787e <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2786a:	f7ff ff37 	bl	276dc <next_timeout>

			if (next_time == 0 ||
   2786e:	b118      	cbz	r0, 27878 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   27870:	4b1c      	ldr	r3, [pc, #112]	; (278e4 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   27872:	691b      	ldr	r3, [r3, #16]
   27874:	4283      	cmp	r3, r0
   27876:	d002      	beq.n	2787e <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   27878:	2100      	movs	r1, #0
   2787a:	f7f6 ff8d 	bl	1e798 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2787e:	4813      	ldr	r0, [pc, #76]	; (278cc <z_add_timeout+0x168>)
   27880:	f7fd fbf8 	bl	25074 <z_spin_unlock_valid>
   27884:	b9a0      	cbnz	r0, 278b0 <z_add_timeout+0x14c>
   27886:	23c2      	movs	r3, #194	; 0xc2
   27888:	4a11      	ldr	r2, [pc, #68]	; (278d0 <z_add_timeout+0x16c>)
   2788a:	4917      	ldr	r1, [pc, #92]	; (278e8 <z_add_timeout+0x184>)
   2788c:	480d      	ldr	r0, [pc, #52]	; (278c4 <z_add_timeout+0x160>)
   2788e:	f002 ff14 	bl	2a6ba <assert_print>
   27892:	490e      	ldr	r1, [pc, #56]	; (278cc <z_add_timeout+0x168>)
   27894:	4815      	ldr	r0, [pc, #84]	; (278ec <z_add_timeout+0x188>)
   27896:	f002 ff10 	bl	2a6ba <assert_print>
   2789a:	21c2      	movs	r1, #194	; 0xc2
   2789c:	e795      	b.n	277ca <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   2789e:	1a52      	subs	r2, r2, r1
   278a0:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   278a4:	4566      	cmp	r6, ip
   278a6:	e9c4 2004 	strd	r2, r0, [r4, #16]
   278aa:	d0b6      	beq.n	2781a <z_add_timeout+0xb6>
   278ac:	6836      	ldr	r6, [r6, #0]
   278ae:	e7b3      	b.n	27818 <z_add_timeout+0xb4>
	__asm__ volatile(
   278b0:	f387 8811 	msr	BASEPRI, r7
   278b4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   278b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   278bc:	00038879 	.word	0x00038879
   278c0:	00038855 	.word	0x00038855
   278c4:	00032659 	.word	0x00032659
   278c8:	000368ea 	.word	0x000368ea
   278cc:	20021ad8 	.word	0x20021ad8
   278d0:	000333ee 	.word	0x000333ee
   278d4:	00033447 	.word	0x00033447
   278d8:	0003345c 	.word	0x0003345c
   278dc:	2000a318 	.word	0x2000a318
   278e0:	20008744 	.word	0x20008744
   278e4:	20021a88 	.word	0x20021a88
   278e8:	0003341b 	.word	0x0003341b
   278ec:	00033432 	.word	0x00033432

000278f0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   278f0:	b538      	push	{r3, r4, r5, lr}
   278f2:	4604      	mov	r4, r0
	__asm__ volatile(
   278f4:	f04f 0320 	mov.w	r3, #32
   278f8:	f3ef 8511 	mrs	r5, BASEPRI
   278fc:	f383 8812 	msr	BASEPRI_MAX, r3
   27900:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27904:	4819      	ldr	r0, [pc, #100]	; (2796c <z_abort_timeout+0x7c>)
   27906:	f7fd fba7 	bl	25058 <z_spin_lock_valid>
   2790a:	b968      	cbnz	r0, 27928 <z_abort_timeout+0x38>
   2790c:	2394      	movs	r3, #148	; 0x94
   2790e:	4a18      	ldr	r2, [pc, #96]	; (27970 <z_abort_timeout+0x80>)
   27910:	4918      	ldr	r1, [pc, #96]	; (27974 <z_abort_timeout+0x84>)
   27912:	4819      	ldr	r0, [pc, #100]	; (27978 <z_abort_timeout+0x88>)
   27914:	f002 fed1 	bl	2a6ba <assert_print>
   27918:	4914      	ldr	r1, [pc, #80]	; (2796c <z_abort_timeout+0x7c>)
   2791a:	4818      	ldr	r0, [pc, #96]	; (2797c <z_abort_timeout+0x8c>)
   2791c:	f002 fecd 	bl	2a6ba <assert_print>
   27920:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27922:	4813      	ldr	r0, [pc, #76]	; (27970 <z_abort_timeout+0x80>)
   27924:	f002 fec2 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   27928:	4810      	ldr	r0, [pc, #64]	; (2796c <z_abort_timeout+0x7c>)
   2792a:	f7fd fbb1 	bl	25090 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2792e:	6823      	ldr	r3, [r4, #0]
   27930:	b19b      	cbz	r3, 2795a <z_abort_timeout+0x6a>
			remove_timeout(to);
   27932:	4620      	mov	r0, r4
   27934:	f7ff fefa 	bl	2772c <remove_timeout>
			ret = 0;
   27938:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2793a:	480c      	ldr	r0, [pc, #48]	; (2796c <z_abort_timeout+0x7c>)
   2793c:	f7fd fb9a 	bl	25074 <z_spin_unlock_valid>
   27940:	b970      	cbnz	r0, 27960 <z_abort_timeout+0x70>
   27942:	23c2      	movs	r3, #194	; 0xc2
   27944:	4a0a      	ldr	r2, [pc, #40]	; (27970 <z_abort_timeout+0x80>)
   27946:	490e      	ldr	r1, [pc, #56]	; (27980 <z_abort_timeout+0x90>)
   27948:	480b      	ldr	r0, [pc, #44]	; (27978 <z_abort_timeout+0x88>)
   2794a:	f002 feb6 	bl	2a6ba <assert_print>
   2794e:	4907      	ldr	r1, [pc, #28]	; (2796c <z_abort_timeout+0x7c>)
   27950:	480c      	ldr	r0, [pc, #48]	; (27984 <z_abort_timeout+0x94>)
   27952:	f002 feb2 	bl	2a6ba <assert_print>
   27956:	21c2      	movs	r1, #194	; 0xc2
   27958:	e7e3      	b.n	27922 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   2795a:	f06f 0415 	mvn.w	r4, #21
   2795e:	e7ec      	b.n	2793a <z_abort_timeout+0x4a>
	__asm__ volatile(
   27960:	f385 8811 	msr	BASEPRI, r5
   27964:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   27968:	4620      	mov	r0, r4
   2796a:	bd38      	pop	{r3, r4, r5, pc}
   2796c:	20021ad8 	.word	0x20021ad8
   27970:	000333ee 	.word	0x000333ee
   27974:	00033447 	.word	0x00033447
   27978:	00032659 	.word	0x00032659
   2797c:	0003345c 	.word	0x0003345c
   27980:	0003341b 	.word	0x0003341b
   27984:	00033432 	.word	0x00033432

00027988 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   27988:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2798a:	f04f 0320 	mov.w	r3, #32
   2798e:	f3ef 8511 	mrs	r5, BASEPRI
   27992:	f383 8812 	msr	BASEPRI_MAX, r3
   27996:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2799a:	4817      	ldr	r0, [pc, #92]	; (279f8 <z_get_next_timeout_expiry+0x70>)
   2799c:	f7fd fb5c 	bl	25058 <z_spin_lock_valid>
   279a0:	b968      	cbnz	r0, 279be <z_get_next_timeout_expiry+0x36>
   279a2:	2394      	movs	r3, #148	; 0x94
   279a4:	4a15      	ldr	r2, [pc, #84]	; (279fc <z_get_next_timeout_expiry+0x74>)
   279a6:	4916      	ldr	r1, [pc, #88]	; (27a00 <z_get_next_timeout_expiry+0x78>)
   279a8:	4816      	ldr	r0, [pc, #88]	; (27a04 <z_get_next_timeout_expiry+0x7c>)
   279aa:	f002 fe86 	bl	2a6ba <assert_print>
   279ae:	4912      	ldr	r1, [pc, #72]	; (279f8 <z_get_next_timeout_expiry+0x70>)
   279b0:	4815      	ldr	r0, [pc, #84]	; (27a08 <z_get_next_timeout_expiry+0x80>)
   279b2:	f002 fe82 	bl	2a6ba <assert_print>
   279b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   279b8:	4810      	ldr	r0, [pc, #64]	; (279fc <z_get_next_timeout_expiry+0x74>)
   279ba:	f002 fe77 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   279be:	480e      	ldr	r0, [pc, #56]	; (279f8 <z_get_next_timeout_expiry+0x70>)
   279c0:	f7fd fb66 	bl	25090 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   279c4:	f7ff fe8a 	bl	276dc <next_timeout>
   279c8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   279ca:	480b      	ldr	r0, [pc, #44]	; (279f8 <z_get_next_timeout_expiry+0x70>)
   279cc:	f7fd fb52 	bl	25074 <z_spin_unlock_valid>
   279d0:	b958      	cbnz	r0, 279ea <z_get_next_timeout_expiry+0x62>
   279d2:	23c2      	movs	r3, #194	; 0xc2
   279d4:	4a09      	ldr	r2, [pc, #36]	; (279fc <z_get_next_timeout_expiry+0x74>)
   279d6:	490d      	ldr	r1, [pc, #52]	; (27a0c <z_get_next_timeout_expiry+0x84>)
   279d8:	480a      	ldr	r0, [pc, #40]	; (27a04 <z_get_next_timeout_expiry+0x7c>)
   279da:	f002 fe6e 	bl	2a6ba <assert_print>
   279de:	4906      	ldr	r1, [pc, #24]	; (279f8 <z_get_next_timeout_expiry+0x70>)
   279e0:	480b      	ldr	r0, [pc, #44]	; (27a10 <z_get_next_timeout_expiry+0x88>)
   279e2:	f002 fe6a 	bl	2a6ba <assert_print>
   279e6:	21c2      	movs	r1, #194	; 0xc2
   279e8:	e7e6      	b.n	279b8 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   279ea:	f385 8811 	msr	BASEPRI, r5
   279ee:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   279f2:	4620      	mov	r0, r4
   279f4:	bd38      	pop	{r3, r4, r5, pc}
   279f6:	bf00      	nop
   279f8:	20021ad8 	.word	0x20021ad8
   279fc:	000333ee 	.word	0x000333ee
   27a00:	00033447 	.word	0x00033447
   27a04:	00032659 	.word	0x00032659
   27a08:	0003345c 	.word	0x0003345c
   27a0c:	0003341b 	.word	0x0003341b
   27a10:	00033432 	.word	0x00033432

00027a14 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   27a14:	b570      	push	{r4, r5, r6, lr}
   27a16:	4604      	mov	r4, r0
   27a18:	460d      	mov	r5, r1
	__asm__ volatile(
   27a1a:	f04f 0320 	mov.w	r3, #32
   27a1e:	f3ef 8611 	mrs	r6, BASEPRI
   27a22:	f383 8812 	msr	BASEPRI_MAX, r3
   27a26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27a2a:	481b      	ldr	r0, [pc, #108]	; (27a98 <z_set_timeout_expiry+0x84>)
   27a2c:	f7fd fb14 	bl	25058 <z_spin_lock_valid>
   27a30:	b968      	cbnz	r0, 27a4e <z_set_timeout_expiry+0x3a>
   27a32:	2394      	movs	r3, #148	; 0x94
   27a34:	4a19      	ldr	r2, [pc, #100]	; (27a9c <z_set_timeout_expiry+0x88>)
   27a36:	491a      	ldr	r1, [pc, #104]	; (27aa0 <z_set_timeout_expiry+0x8c>)
   27a38:	481a      	ldr	r0, [pc, #104]	; (27aa4 <z_set_timeout_expiry+0x90>)
   27a3a:	f002 fe3e 	bl	2a6ba <assert_print>
   27a3e:	4916      	ldr	r1, [pc, #88]	; (27a98 <z_set_timeout_expiry+0x84>)
   27a40:	4819      	ldr	r0, [pc, #100]	; (27aa8 <z_set_timeout_expiry+0x94>)
   27a42:	f002 fe3a 	bl	2a6ba <assert_print>
   27a46:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a48:	4814      	ldr	r0, [pc, #80]	; (27a9c <z_set_timeout_expiry+0x88>)
   27a4a:	f002 fe2f 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   27a4e:	4812      	ldr	r0, [pc, #72]	; (27a98 <z_set_timeout_expiry+0x84>)
   27a50:	f7fd fb1e 	bl	25090 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   27a54:	f7ff fe42 	bl	276dc <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   27a58:	2801      	cmp	r0, #1
   27a5a:	dd07      	ble.n	27a6c <z_set_timeout_expiry+0x58>
   27a5c:	42a0      	cmp	r0, r4
   27a5e:	db05      	blt.n	27a6c <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   27a60:	42a0      	cmp	r0, r4
   27a62:	4629      	mov	r1, r5
   27a64:	bfa8      	it	ge
   27a66:	4620      	movge	r0, r4
   27a68:	f7f6 fe96 	bl	1e798 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a6c:	480a      	ldr	r0, [pc, #40]	; (27a98 <z_set_timeout_expiry+0x84>)
   27a6e:	f7fd fb01 	bl	25074 <z_spin_unlock_valid>
   27a72:	b958      	cbnz	r0, 27a8c <z_set_timeout_expiry+0x78>
   27a74:	23c2      	movs	r3, #194	; 0xc2
   27a76:	4a09      	ldr	r2, [pc, #36]	; (27a9c <z_set_timeout_expiry+0x88>)
   27a78:	490c      	ldr	r1, [pc, #48]	; (27aac <z_set_timeout_expiry+0x98>)
   27a7a:	480a      	ldr	r0, [pc, #40]	; (27aa4 <z_set_timeout_expiry+0x90>)
   27a7c:	f002 fe1d 	bl	2a6ba <assert_print>
   27a80:	4905      	ldr	r1, [pc, #20]	; (27a98 <z_set_timeout_expiry+0x84>)
   27a82:	480b      	ldr	r0, [pc, #44]	; (27ab0 <z_set_timeout_expiry+0x9c>)
   27a84:	f002 fe19 	bl	2a6ba <assert_print>
   27a88:	21c2      	movs	r1, #194	; 0xc2
   27a8a:	e7dd      	b.n	27a48 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   27a8c:	f386 8811 	msr	BASEPRI, r6
   27a90:	f3bf 8f6f 	isb	sy
		}
	}
}
   27a94:	bd70      	pop	{r4, r5, r6, pc}
   27a96:	bf00      	nop
   27a98:	20021ad8 	.word	0x20021ad8
   27a9c:	000333ee 	.word	0x000333ee
   27aa0:	00033447 	.word	0x00033447
   27aa4:	00032659 	.word	0x00032659
   27aa8:	0003345c 	.word	0x0003345c
   27aac:	0003341b 	.word	0x0003341b
   27ab0:	00033432 	.word	0x00033432

00027ab4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   27ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27ab8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   27aba:	f7fe ff7d 	bl	269b8 <z_time_slice>
	__asm__ volatile(
   27abe:	f04f 0320 	mov.w	r3, #32
   27ac2:	f3ef 8711 	mrs	r7, BASEPRI
   27ac6:	f383 8812 	msr	BASEPRI_MAX, r3
   27aca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27ace:	483f      	ldr	r0, [pc, #252]	; (27bcc <sys_clock_announce+0x118>)
   27ad0:	f7fd fac2 	bl	25058 <z_spin_lock_valid>
   27ad4:	b968      	cbnz	r0, 27af2 <sys_clock_announce+0x3e>
   27ad6:	2394      	movs	r3, #148	; 0x94
   27ad8:	4a3d      	ldr	r2, [pc, #244]	; (27bd0 <sys_clock_announce+0x11c>)
   27ada:	493e      	ldr	r1, [pc, #248]	; (27bd4 <sys_clock_announce+0x120>)
   27adc:	483e      	ldr	r0, [pc, #248]	; (27bd8 <sys_clock_announce+0x124>)
   27ade:	f002 fdec 	bl	2a6ba <assert_print>
   27ae2:	493a      	ldr	r1, [pc, #232]	; (27bcc <sys_clock_announce+0x118>)
   27ae4:	483d      	ldr	r0, [pc, #244]	; (27bdc <sys_clock_announce+0x128>)
   27ae6:	f002 fde8 	bl	2a6ba <assert_print>
   27aea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27aec:	4838      	ldr	r0, [pc, #224]	; (27bd0 <sys_clock_announce+0x11c>)
   27aee:	f002 fddd 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   27af2:	4836      	ldr	r0, [pc, #216]	; (27bcc <sys_clock_announce+0x118>)
   27af4:	f7fd facc 	bl	25090 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   27af8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 27be0 <sys_clock_announce+0x12c>
	return list->head == list;
   27afc:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 27be4 <sys_clock_announce+0x130>
   27b00:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   27b04:	4a38      	ldr	r2, [pc, #224]	; (27be8 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b06:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   27b08:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   27b0c:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   27b10:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b14:	d00b      	beq.n	27b2e <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   27b16:	b155      	cbz	r5, 27b2e <sys_clock_announce+0x7a>
   27b18:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   27b1c:	42b4      	cmp	r4, r6
   27b1e:	eb71 0e00 	sbcs.w	lr, r1, r0
   27b22:	da1c      	bge.n	27b5e <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   27b24:	1b36      	subs	r6, r6, r4
   27b26:	eb60 0001 	sbc.w	r0, r0, r1
   27b2a:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   27b2e:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   27b30:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   27b34:	eb4c 0101 	adc.w	r1, ip, r1
   27b38:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   27b3c:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   27b40:	f7ff fdcc 	bl	276dc <next_timeout>
   27b44:	4621      	mov	r1, r4
   27b46:	f7f6 fe27 	bl	1e798 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b4a:	4820      	ldr	r0, [pc, #128]	; (27bcc <sys_clock_announce+0x118>)
   27b4c:	f7fd fa92 	bl	25074 <z_spin_unlock_valid>
   27b50:	b1a8      	cbz	r0, 27b7e <sys_clock_announce+0xca>
	__asm__ volatile(
   27b52:	f387 8811 	msr	BASEPRI, r7
   27b56:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   27b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   27b5e:	18f3      	adds	r3, r6, r3
   27b60:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   27b64:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   27b68:	2200      	movs	r2, #0
   27b6a:	2300      	movs	r3, #0
		remove_timeout(t);
   27b6c:	4628      	mov	r0, r5
		t->dticks = 0;
   27b6e:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   27b72:	f7ff fddb 	bl	2772c <remove_timeout>
   27b76:	4815      	ldr	r0, [pc, #84]	; (27bcc <sys_clock_announce+0x118>)
   27b78:	f7fd fa7c 	bl	25074 <z_spin_unlock_valid>
   27b7c:	b958      	cbnz	r0, 27b96 <sys_clock_announce+0xe2>
   27b7e:	23c2      	movs	r3, #194	; 0xc2
   27b80:	4a13      	ldr	r2, [pc, #76]	; (27bd0 <sys_clock_announce+0x11c>)
   27b82:	491a      	ldr	r1, [pc, #104]	; (27bec <sys_clock_announce+0x138>)
   27b84:	4814      	ldr	r0, [pc, #80]	; (27bd8 <sys_clock_announce+0x124>)
   27b86:	f002 fd98 	bl	2a6ba <assert_print>
   27b8a:	4910      	ldr	r1, [pc, #64]	; (27bcc <sys_clock_announce+0x118>)
   27b8c:	4818      	ldr	r0, [pc, #96]	; (27bf0 <sys_clock_announce+0x13c>)
   27b8e:	f002 fd94 	bl	2a6ba <assert_print>
   27b92:	21c2      	movs	r1, #194	; 0xc2
   27b94:	e7aa      	b.n	27aec <sys_clock_announce+0x38>
   27b96:	f387 8811 	msr	BASEPRI, r7
   27b9a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   27b9e:	4628      	mov	r0, r5
   27ba0:	68ab      	ldr	r3, [r5, #8]
   27ba2:	4798      	blx	r3
	__asm__ volatile(
   27ba4:	f04f 0320 	mov.w	r3, #32
   27ba8:	f3ef 8711 	mrs	r7, BASEPRI
   27bac:	f383 8812 	msr	BASEPRI_MAX, r3
   27bb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27bb4:	4805      	ldr	r0, [pc, #20]	; (27bcc <sys_clock_announce+0x118>)
   27bb6:	f7fd fa4f 	bl	25058 <z_spin_lock_valid>
   27bba:	2800      	cmp	r0, #0
   27bbc:	d08b      	beq.n	27ad6 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   27bbe:	4803      	ldr	r0, [pc, #12]	; (27bcc <sys_clock_announce+0x118>)
   27bc0:	f7fd fa66 	bl	25090 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   27bc4:	f8d8 4000 	ldr.w	r4, [r8]
   27bc8:	1ba4      	subs	r4, r4, r6
   27bca:	e799      	b.n	27b00 <sys_clock_announce+0x4c>
   27bcc:	20021ad8 	.word	0x20021ad8
   27bd0:	000333ee 	.word	0x000333ee
   27bd4:	00033447 	.word	0x00033447
   27bd8:	00032659 	.word	0x00032659
   27bdc:	0003345c 	.word	0x0003345c
   27be0:	20021ad4 	.word	0x20021ad4
   27be4:	20008744 	.word	0x20008744
   27be8:	2000a318 	.word	0x2000a318
   27bec:	0003341b 	.word	0x0003341b
   27bf0:	00033432 	.word	0x00033432

00027bf4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   27bf4:	b570      	push	{r4, r5, r6, lr}
   27bf6:	f04f 0320 	mov.w	r3, #32
   27bfa:	f3ef 8611 	mrs	r6, BASEPRI
   27bfe:	f383 8812 	msr	BASEPRI_MAX, r3
   27c02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27c06:	481a      	ldr	r0, [pc, #104]	; (27c70 <sys_clock_tick_get+0x7c>)
   27c08:	f7fd fa26 	bl	25058 <z_spin_lock_valid>
   27c0c:	b968      	cbnz	r0, 27c2a <sys_clock_tick_get+0x36>
   27c0e:	2394      	movs	r3, #148	; 0x94
   27c10:	4a18      	ldr	r2, [pc, #96]	; (27c74 <sys_clock_tick_get+0x80>)
   27c12:	4919      	ldr	r1, [pc, #100]	; (27c78 <sys_clock_tick_get+0x84>)
   27c14:	4819      	ldr	r0, [pc, #100]	; (27c7c <sys_clock_tick_get+0x88>)
   27c16:	f002 fd50 	bl	2a6ba <assert_print>
   27c1a:	4915      	ldr	r1, [pc, #84]	; (27c70 <sys_clock_tick_get+0x7c>)
   27c1c:	4818      	ldr	r0, [pc, #96]	; (27c80 <sys_clock_tick_get+0x8c>)
   27c1e:	f002 fd4c 	bl	2a6ba <assert_print>
   27c22:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c24:	4813      	ldr	r0, [pc, #76]	; (27c74 <sys_clock_tick_get+0x80>)
   27c26:	f002 fd41 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   27c2a:	4811      	ldr	r0, [pc, #68]	; (27c70 <sys_clock_tick_get+0x7c>)
   27c2c:	f7fd fa30 	bl	25090 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   27c30:	f7ff fd4a 	bl	276c8 <elapsed>
   27c34:	4a13      	ldr	r2, [pc, #76]	; (27c84 <sys_clock_tick_get+0x90>)
   27c36:	e9d2 4500 	ldrd	r4, r5, [r2]
   27c3a:	1904      	adds	r4, r0, r4
   27c3c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c40:	480b      	ldr	r0, [pc, #44]	; (27c70 <sys_clock_tick_get+0x7c>)
   27c42:	f7fd fa17 	bl	25074 <z_spin_unlock_valid>
   27c46:	b958      	cbnz	r0, 27c60 <sys_clock_tick_get+0x6c>
   27c48:	23c2      	movs	r3, #194	; 0xc2
   27c4a:	4a0a      	ldr	r2, [pc, #40]	; (27c74 <sys_clock_tick_get+0x80>)
   27c4c:	490e      	ldr	r1, [pc, #56]	; (27c88 <sys_clock_tick_get+0x94>)
   27c4e:	480b      	ldr	r0, [pc, #44]	; (27c7c <sys_clock_tick_get+0x88>)
   27c50:	f002 fd33 	bl	2a6ba <assert_print>
   27c54:	4906      	ldr	r1, [pc, #24]	; (27c70 <sys_clock_tick_get+0x7c>)
   27c56:	480d      	ldr	r0, [pc, #52]	; (27c8c <sys_clock_tick_get+0x98>)
   27c58:	f002 fd2f 	bl	2a6ba <assert_print>
   27c5c:	21c2      	movs	r1, #194	; 0xc2
   27c5e:	e7e1      	b.n	27c24 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   27c60:	f386 8811 	msr	BASEPRI, r6
   27c64:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   27c68:	4620      	mov	r0, r4
   27c6a:	4629      	mov	r1, r5
   27c6c:	bd70      	pop	{r4, r5, r6, pc}
   27c6e:	bf00      	nop
   27c70:	20021ad8 	.word	0x20021ad8
   27c74:	000333ee 	.word	0x000333ee
   27c78:	00033447 	.word	0x00033447
   27c7c:	00032659 	.word	0x00032659
   27c80:	0003345c 	.word	0x0003345c
   27c84:	2000a318 	.word	0x2000a318
   27c88:	0003341b 	.word	0x0003341b
   27c8c:	00033432 	.word	0x00033432

00027c90 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   27c90:	b570      	push	{r4, r5, r6, lr}
   27c92:	4604      	mov	r4, r0
	__asm__ volatile(
   27c94:	f04f 0320 	mov.w	r3, #32
   27c98:	f3ef 8511 	mrs	r5, BASEPRI
   27c9c:	f383 8812 	msr	BASEPRI_MAX, r3
   27ca0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27ca4:	4849      	ldr	r0, [pc, #292]	; (27dcc <z_timer_expiration_handler+0x13c>)
   27ca6:	f7fd f9d7 	bl	25058 <z_spin_lock_valid>
   27caa:	b968      	cbnz	r0, 27cc8 <z_timer_expiration_handler+0x38>
   27cac:	2394      	movs	r3, #148	; 0x94
   27cae:	4a48      	ldr	r2, [pc, #288]	; (27dd0 <z_timer_expiration_handler+0x140>)
   27cb0:	4948      	ldr	r1, [pc, #288]	; (27dd4 <z_timer_expiration_handler+0x144>)
   27cb2:	4849      	ldr	r0, [pc, #292]	; (27dd8 <z_timer_expiration_handler+0x148>)
   27cb4:	f002 fd01 	bl	2a6ba <assert_print>
   27cb8:	4944      	ldr	r1, [pc, #272]	; (27dcc <z_timer_expiration_handler+0x13c>)
   27cba:	4848      	ldr	r0, [pc, #288]	; (27ddc <z_timer_expiration_handler+0x14c>)
   27cbc:	f002 fcfd 	bl	2a6ba <assert_print>
   27cc0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27cc2:	4843      	ldr	r0, [pc, #268]	; (27dd0 <z_timer_expiration_handler+0x140>)
   27cc4:	f002 fcf2 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   27cc8:	4840      	ldr	r0, [pc, #256]	; (27dcc <z_timer_expiration_handler+0x13c>)
   27cca:	f7fd f9e1 	bl	25090 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   27cce:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   27cd2:	3301      	adds	r3, #1
   27cd4:	f142 0200 	adc.w	r2, r2, #0
   27cd8:	2b02      	cmp	r3, #2
   27cda:	f172 0200 	sbcs.w	r2, r2, #0
   27cde:	d322      	bcc.n	27d26 <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   27ce0:	f008 fb2c 	bl	3033c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   27ce4:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   27ce8:	3001      	adds	r0, #1
   27cea:	f141 0100 	adc.w	r1, r1, #0
   27cee:	18c0      	adds	r0, r0, r3
   27cf0:	eb41 0102 	adc.w	r1, r1, r2
   27cf4:	2801      	cmp	r0, #1
   27cf6:	f171 0100 	sbcs.w	r1, r1, #0
   27cfa:	db29      	blt.n	27d50 <z_timer_expiration_handler+0xc0>
   27cfc:	f008 fb1e 	bl	3033c <z_impl_k_uptime_ticks>
   27d00:	3001      	adds	r0, #1
   27d02:	f141 0300 	adc.w	r3, r1, #0
   27d06:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   27d0a:	1880      	adds	r0, r0, r2
   27d0c:	f06f 0201 	mvn.w	r2, #1
   27d10:	eb43 0301 	adc.w	r3, r3, r1
   27d14:	f04f 31ff 	mov.w	r1, #4294967295
   27d18:	1a12      	subs	r2, r2, r0
   27d1a:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27d1e:	4620      	mov	r0, r4
   27d20:	492f      	ldr	r1, [pc, #188]	; (27de0 <z_timer_expiration_handler+0x150>)
   27d22:	f7ff fd1f 	bl	27764 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   27d26:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27d28:	3301      	adds	r3, #1
   27d2a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   27d2c:	6a23      	ldr	r3, [r4, #32]
   27d2e:	b35b      	cbz	r3, 27d88 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d30:	4826      	ldr	r0, [pc, #152]	; (27dcc <z_timer_expiration_handler+0x13c>)
   27d32:	f7fd f99f 	bl	25074 <z_spin_unlock_valid>
   27d36:	b980      	cbnz	r0, 27d5a <z_timer_expiration_handler+0xca>
   27d38:	23c2      	movs	r3, #194	; 0xc2
   27d3a:	4a25      	ldr	r2, [pc, #148]	; (27dd0 <z_timer_expiration_handler+0x140>)
   27d3c:	4929      	ldr	r1, [pc, #164]	; (27de4 <z_timer_expiration_handler+0x154>)
   27d3e:	4826      	ldr	r0, [pc, #152]	; (27dd8 <z_timer_expiration_handler+0x148>)
   27d40:	f002 fcbb 	bl	2a6ba <assert_print>
   27d44:	4921      	ldr	r1, [pc, #132]	; (27dcc <z_timer_expiration_handler+0x13c>)
   27d46:	4828      	ldr	r0, [pc, #160]	; (27de8 <z_timer_expiration_handler+0x158>)
   27d48:	f002 fcb7 	bl	2a6ba <assert_print>
   27d4c:	21c2      	movs	r1, #194	; 0xc2
   27d4e:	e7b8      	b.n	27cc2 <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   27d50:	f06f 0201 	mvn.w	r2, #1
   27d54:	f04f 33ff 	mov.w	r3, #4294967295
   27d58:	e7e1      	b.n	27d1e <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   27d5a:	f385 8811 	msr	BASEPRI, r5
   27d5e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   27d62:	4620      	mov	r0, r4
   27d64:	6a23      	ldr	r3, [r4, #32]
   27d66:	4798      	blx	r3
	__asm__ volatile(
   27d68:	f04f 0320 	mov.w	r3, #32
   27d6c:	f3ef 8511 	mrs	r5, BASEPRI
   27d70:	f383 8812 	msr	BASEPRI_MAX, r3
   27d74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d78:	4814      	ldr	r0, [pc, #80]	; (27dcc <z_timer_expiration_handler+0x13c>)
   27d7a:	f7fd f96d 	bl	25058 <z_spin_lock_valid>
   27d7e:	2800      	cmp	r0, #0
   27d80:	d094      	beq.n	27cac <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   27d82:	4812      	ldr	r0, [pc, #72]	; (27dcc <z_timer_expiration_handler+0x13c>)
   27d84:	f7fd f984 	bl	25090 <z_spin_lock_set_owner>
	return list->head == list;
   27d88:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d8c:	42a6      	cmp	r6, r4
   27d8e:	d000      	beq.n	27d92 <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   27d90:	b94e      	cbnz	r6, 27da6 <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d92:	480e      	ldr	r0, [pc, #56]	; (27dcc <z_timer_expiration_handler+0x13c>)
   27d94:	f7fd f96e 	bl	25074 <z_spin_unlock_valid>
   27d98:	2800      	cmp	r0, #0
   27d9a:	d0cd      	beq.n	27d38 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   27d9c:	f385 8811 	msr	BASEPRI, r5
   27da0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   27da4:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   27da6:	4630      	mov	r0, r6
   27da8:	f7fe fbda 	bl	26560 <z_unpend_thread_no_timeout>
   27dac:	2300      	movs	r3, #0
   27dae:	4807      	ldr	r0, [pc, #28]	; (27dcc <z_timer_expiration_handler+0x13c>)
   27db0:	67f3      	str	r3, [r6, #124]	; 0x7c
   27db2:	f7fd f95f 	bl	25074 <z_spin_unlock_valid>
   27db6:	2800      	cmp	r0, #0
   27db8:	d0be      	beq.n	27d38 <z_timer_expiration_handler+0xa8>
   27dba:	f385 8811 	msr	BASEPRI, r5
   27dbe:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   27dc2:	4630      	mov	r0, r6
}
   27dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   27dc8:	f7fe bb84 	b.w	264d4 <z_ready_thread>
   27dcc:	20021adc 	.word	0x20021adc
   27dd0:	000333ee 	.word	0x000333ee
   27dd4:	00033447 	.word	0x00033447
   27dd8:	00032659 	.word	0x00032659
   27ddc:	0003345c 	.word	0x0003345c
   27de0:	00027c91 	.word	0x00027c91
   27de4:	0003341b 	.word	0x0003341b
   27de8:	00033432 	.word	0x00033432

00027dec <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27dec:	f1b3 3fff 	cmp.w	r3, #4294967295
   27df0:	bf08      	it	eq
   27df2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   27df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27dfa:	4619      	mov	r1, r3
   27dfc:	4605      	mov	r5, r0
   27dfe:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   27e02:	4614      	mov	r4, r2
   27e04:	4691      	mov	r9, r2
   27e06:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27e08:	d037      	beq.n	27e7a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   27e0a:	f1b0 3fff 	cmp.w	r0, #4294967295
   27e0e:	bf08      	it	eq
   27e10:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   27e14:	4637      	mov	r7, r6
   27e16:	4682      	mov	sl, r0
   27e18:	d011      	beq.n	27e3e <z_impl_k_timer_start+0x52>
   27e1a:	ea50 0306 	orrs.w	r3, r0, r6
   27e1e:	d00e      	beq.n	27e3e <z_impl_k_timer_start+0x52>
   27e20:	1c72      	adds	r2, r6, #1
   27e22:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   27e26:	db0a      	blt.n	27e3e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   27e28:	2e02      	cmp	r6, #2
   27e2a:	4684      	mov	ip, r0
   27e2c:	f170 0000 	sbcs.w	r0, r0, #0
   27e30:	bfbc      	itt	lt
   27e32:	2702      	movlt	r7, #2
   27e34:	f04f 0c00 	movlt.w	ip, #0
   27e38:	3f01      	subs	r7, #1
   27e3a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   27e3e:	1c63      	adds	r3, r4, #1
   27e40:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   27e44:	db0a      	blt.n	27e5c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   27e46:	2c01      	cmp	r4, #1
   27e48:	f171 0300 	sbcs.w	r3, r1, #0
   27e4c:	4622      	mov	r2, r4
   27e4e:	bfbc      	itt	lt
   27e50:	2201      	movlt	r2, #1
   27e52:	2100      	movlt	r1, #0
   27e54:	f112 39ff 	adds.w	r9, r2, #4294967295
   27e58:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   27e5c:	4628      	mov	r0, r5
   27e5e:	f7ff fd47 	bl	278f0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   27e62:	2300      	movs	r3, #0
	timer->period = period;
   27e64:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   27e68:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27e6a:	464a      	mov	r2, r9
   27e6c:	4643      	mov	r3, r8
   27e6e:	4628      	mov	r0, r5
		     duration);
}
   27e70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27e74:	4902      	ldr	r1, [pc, #8]	; (27e80 <z_impl_k_timer_start+0x94>)
   27e76:	f7ff bc75 	b.w	27764 <z_add_timeout>
}
   27e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27e7e:	bf00      	nop
   27e80:	00027c91 	.word	0x00027c91

00027e84 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   27e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   27e88:	2600      	movs	r6, #0
{
   27e8a:	4688      	mov	r8, r1
   27e8c:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   27e8e:	4604      	mov	r4, r0
	int events_registered = 0;
   27e90:	4637      	mov	r7, r6
	event->poller = NULL;
   27e92:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27e94:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 28054 <register_events+0x1d0>
{
   27e98:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   27e9a:	4546      	cmp	r6, r8
   27e9c:	db03      	blt.n	27ea6 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   27e9e:	4638      	mov	r0, r7
   27ea0:	b003      	add	sp, #12
   27ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   27ea6:	f04f 0320 	mov.w	r3, #32
   27eaa:	f3ef 8b11 	mrs	fp, BASEPRI
   27eae:	f383 8812 	msr	BASEPRI_MAX, r3
   27eb2:	f3bf 8f6f 	isb	sy
   27eb6:	4648      	mov	r0, r9
   27eb8:	f7fd f8ce 	bl	25058 <z_spin_lock_valid>
   27ebc:	b960      	cbnz	r0, 27ed8 <register_events+0x54>
   27ebe:	2394      	movs	r3, #148	; 0x94
   27ec0:	4a65      	ldr	r2, [pc, #404]	; (28058 <register_events+0x1d4>)
   27ec2:	4966      	ldr	r1, [pc, #408]	; (2805c <register_events+0x1d8>)
   27ec4:	4866      	ldr	r0, [pc, #408]	; (28060 <register_events+0x1dc>)
   27ec6:	f002 fbf8 	bl	2a6ba <assert_print>
   27eca:	4962      	ldr	r1, [pc, #392]	; (28054 <register_events+0x1d0>)
   27ecc:	4865      	ldr	r0, [pc, #404]	; (28064 <register_events+0x1e0>)
   27ece:	f002 fbf4 	bl	2a6ba <assert_print>
   27ed2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ed4:	4860      	ldr	r0, [pc, #384]	; (28058 <register_events+0x1d4>)
   27ed6:	e060      	b.n	27f9a <register_events+0x116>
	z_spin_lock_set_owner(l);
   27ed8:	4648      	mov	r0, r9
   27eda:	f7fd f8d9 	bl	25090 <z_spin_lock_set_owner>
	switch (event->type) {
   27ede:	7b63      	ldrb	r3, [r4, #13]
   27ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27ee4:	2b08      	cmp	r3, #8
   27ee6:	d84a      	bhi.n	27f7e <register_events+0xfa>
   27ee8:	e8df f003 	tbb	[pc, r3]
   27eec:	49053d2b 	.word	0x49053d2b
   27ef0:	49494927 	.word	0x49494927
   27ef4:	43          	.byte	0x43
   27ef5:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   27ef6:	6923      	ldr	r3, [r4, #16]
   27ef8:	689b      	ldr	r3, [r3, #8]
   27efa:	b313      	cbz	r3, 27f42 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27efc:	2302      	movs	r3, #2
	event->state |= state;
   27efe:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   27f00:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   27f04:	f3c2 3186 	ubfx	r1, r2, #14, #7
   27f08:	430b      	orrs	r3, r1
   27f0a:	f363 3294 	bfi	r2, r3, #14, #7
   27f0e:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   27f10:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27f14:	4648      	mov	r0, r9
   27f16:	f7fd f8ad 	bl	25074 <z_spin_unlock_valid>
   27f1a:	3414      	adds	r4, #20
   27f1c:	2800      	cmp	r0, #0
   27f1e:	f040 8092 	bne.w	28046 <register_events+0x1c2>
   27f22:	23c2      	movs	r3, #194	; 0xc2
   27f24:	4a4c      	ldr	r2, [pc, #304]	; (28058 <register_events+0x1d4>)
   27f26:	4950      	ldr	r1, [pc, #320]	; (28068 <register_events+0x1e4>)
   27f28:	484d      	ldr	r0, [pc, #308]	; (28060 <register_events+0x1dc>)
   27f2a:	f002 fbc6 	bl	2a6ba <assert_print>
   27f2e:	4949      	ldr	r1, [pc, #292]	; (28054 <register_events+0x1d0>)
   27f30:	484e      	ldr	r0, [pc, #312]	; (2806c <register_events+0x1e8>)
   27f32:	f002 fbc2 	bl	2a6ba <assert_print>
   27f36:	21c2      	movs	r1, #194	; 0xc2
   27f38:	e7cc      	b.n	27ed4 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   27f3a:	6923      	ldr	r3, [r4, #16]
   27f3c:	681b      	ldr	r3, [r3, #0]
   27f3e:	2b00      	cmp	r3, #0
   27f40:	d12d      	bne.n	27f9e <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   27f42:	9b01      	ldr	r3, [sp, #4]
   27f44:	2b00      	cmp	r3, #0
   27f46:	d1e5      	bne.n	27f14 <register_events+0x90>
   27f48:	782b      	ldrb	r3, [r5, #0]
   27f4a:	2b00      	cmp	r3, #0
   27f4c:	d0e2      	beq.n	27f14 <register_events+0x90>
	switch (event->type) {
   27f4e:	7b63      	ldrb	r3, [r4, #13]
   27f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27f54:	2b08      	cmp	r3, #8
   27f56:	d86b      	bhi.n	28030 <register_events+0x1ac>
   27f58:	e8df f003 	tbb	[pc, r3]
   27f5c:	6a234935 	.word	0x6a234935
   27f60:	6a6a6a38 	.word	0x6a6a6a38
   27f64:	59          	.byte	0x59
   27f65:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   27f66:	6923      	ldr	r3, [r4, #16]
   27f68:	689b      	ldr	r3, [r3, #8]
   27f6a:	2b00      	cmp	r3, #0
   27f6c:	d0e9      	beq.n	27f42 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   27f6e:	2301      	movs	r3, #1
   27f70:	e7c5      	b.n	27efe <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   27f72:	6923      	ldr	r3, [r4, #16]
   27f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27f76:	2b00      	cmp	r3, #0
   27f78:	d0e3      	beq.n	27f42 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   27f7a:	2310      	movs	r3, #16
   27f7c:	e7bf      	b.n	27efe <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   27f7e:	2363      	movs	r3, #99	; 0x63
   27f80:	4a3b      	ldr	r2, [pc, #236]	; (28070 <register_events+0x1ec>)
   27f82:	493c      	ldr	r1, [pc, #240]	; (28074 <register_events+0x1f0>)
   27f84:	4836      	ldr	r0, [pc, #216]	; (28060 <register_events+0x1dc>)
   27f86:	f002 fb98 	bl	2a6ba <assert_print>
   27f8a:	7b61      	ldrb	r1, [r4, #13]
   27f8c:	483a      	ldr	r0, [pc, #232]	; (28078 <register_events+0x1f4>)
   27f8e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   27f92:	f002 fb92 	bl	2a6ba <assert_print>
   27f96:	2163      	movs	r1, #99	; 0x63
   27f98:	4835      	ldr	r0, [pc, #212]	; (28070 <register_events+0x1ec>)
   27f9a:	f002 fb87 	bl	2a6ac <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27f9e:	2304      	movs	r3, #4
   27fa0:	e7ad      	b.n	27efe <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   27fa2:	6920      	ldr	r0, [r4, #16]
   27fa4:	b950      	cbnz	r0, 27fbc <register_events+0x138>
   27fa6:	4935      	ldr	r1, [pc, #212]	; (2807c <register_events+0x1f8>)
   27fa8:	238d      	movs	r3, #141	; 0x8d
   27faa:	4a31      	ldr	r2, [pc, #196]	; (28070 <register_events+0x1ec>)
   27fac:	482c      	ldr	r0, [pc, #176]	; (28060 <register_events+0x1dc>)
   27fae:	f002 fb84 	bl	2a6ba <assert_print>
   27fb2:	4833      	ldr	r0, [pc, #204]	; (28080 <register_events+0x1fc>)
   27fb4:	f002 fb81 	bl	2a6ba <assert_print>
   27fb8:	218d      	movs	r1, #141	; 0x8d
   27fba:	e7ed      	b.n	27f98 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   27fbc:	462a      	mov	r2, r5
   27fbe:	4621      	mov	r1, r4
   27fc0:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   27fc2:	f008 fa0c 	bl	303de <add_event>
	event->poller = poller;
   27fc6:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   27fc8:	3701      	adds	r7, #1
   27fca:	e7a3      	b.n	27f14 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   27fcc:	6920      	ldr	r0, [r4, #16]
   27fce:	b950      	cbnz	r0, 27fe6 <register_events+0x162>
   27fd0:	492c      	ldr	r1, [pc, #176]	; (28084 <register_events+0x200>)
   27fd2:	2391      	movs	r3, #145	; 0x91
   27fd4:	4a26      	ldr	r2, [pc, #152]	; (28070 <register_events+0x1ec>)
   27fd6:	4822      	ldr	r0, [pc, #136]	; (28060 <register_events+0x1dc>)
   27fd8:	f002 fb6f 	bl	2a6ba <assert_print>
   27fdc:	482a      	ldr	r0, [pc, #168]	; (28088 <register_events+0x204>)
   27fde:	f002 fb6c 	bl	2a6ba <assert_print>
   27fe2:	2191      	movs	r1, #145	; 0x91
   27fe4:	e7d8      	b.n	27f98 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   27fe6:	462a      	mov	r2, r5
   27fe8:	4621      	mov	r1, r4
   27fea:	3014      	adds	r0, #20
   27fec:	e7e9      	b.n	27fc2 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   27fee:	6920      	ldr	r0, [r4, #16]
   27ff0:	b950      	cbnz	r0, 28008 <register_events+0x184>
   27ff2:	4926      	ldr	r1, [pc, #152]	; (2808c <register_events+0x208>)
   27ff4:	2395      	movs	r3, #149	; 0x95
   27ff6:	4a1e      	ldr	r2, [pc, #120]	; (28070 <register_events+0x1ec>)
   27ff8:	4819      	ldr	r0, [pc, #100]	; (28060 <register_events+0x1dc>)
   27ffa:	f002 fb5e 	bl	2a6ba <assert_print>
   27ffe:	4824      	ldr	r0, [pc, #144]	; (28090 <register_events+0x20c>)
   28000:	f002 fb5b 	bl	2a6ba <assert_print>
   28004:	2195      	movs	r1, #149	; 0x95
   28006:	e7c7      	b.n	27f98 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   28008:	462a      	mov	r2, r5
   2800a:	4621      	mov	r1, r4
   2800c:	e7d9      	b.n	27fc2 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2800e:	6920      	ldr	r0, [r4, #16]
   28010:	b950      	cbnz	r0, 28028 <register_events+0x1a4>
   28012:	4920      	ldr	r1, [pc, #128]	; (28094 <register_events+0x210>)
   28014:	2399      	movs	r3, #153	; 0x99
   28016:	4a16      	ldr	r2, [pc, #88]	; (28070 <register_events+0x1ec>)
   28018:	4811      	ldr	r0, [pc, #68]	; (28060 <register_events+0x1dc>)
   2801a:	f002 fb4e 	bl	2a6ba <assert_print>
   2801e:	481e      	ldr	r0, [pc, #120]	; (28098 <register_events+0x214>)
   28020:	f002 fb4b 	bl	2a6ba <assert_print>
   28024:	2199      	movs	r1, #153	; 0x99
   28026:	e7b7      	b.n	27f98 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   28028:	462a      	mov	r2, r5
   2802a:	4621      	mov	r1, r4
   2802c:	3028      	adds	r0, #40	; 0x28
   2802e:	e7c8      	b.n	27fc2 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   28030:	4910      	ldr	r1, [pc, #64]	; (28074 <register_events+0x1f0>)
   28032:	23a6      	movs	r3, #166	; 0xa6
   28034:	4a0e      	ldr	r2, [pc, #56]	; (28070 <register_events+0x1ec>)
   28036:	480a      	ldr	r0, [pc, #40]	; (28060 <register_events+0x1dc>)
   28038:	f002 fb3f 	bl	2a6ba <assert_print>
   2803c:	4817      	ldr	r0, [pc, #92]	; (2809c <register_events+0x218>)
   2803e:	f002 fb3c 	bl	2a6ba <assert_print>
   28042:	21a6      	movs	r1, #166	; 0xa6
   28044:	e7a8      	b.n	27f98 <register_events+0x114>
	__asm__ volatile(
   28046:	f38b 8811 	msr	BASEPRI, fp
   2804a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2804e:	3601      	adds	r6, #1
   28050:	e723      	b.n	27e9a <register_events+0x16>
   28052:	bf00      	nop
   28054:	20021ae0 	.word	0x20021ae0
   28058:	000333ee 	.word	0x000333ee
   2805c:	00033447 	.word	0x00033447
   28060:	00032659 	.word	0x00032659
   28064:	0003345c 	.word	0x0003345c
   28068:	0003341b 	.word	0x0003341b
   2806c:	00033432 	.word	0x00033432
   28070:	00038899 	.word	0x00038899
   28074:	00037b2a 	.word	0x00037b2a
   28078:	000388ba 	.word	0x000388ba
   2807c:	000388d7 	.word	0x000388d7
   28080:	000388f1 	.word	0x000388f1
   28084:	00038906 	.word	0x00038906
   28088:	00038922 	.word	0x00038922
   2808c:	00038933 	.word	0x00038933
   28090:	00038950 	.word	0x00038950
   28094:	00038967 	.word	0x00038967
   28098:	00038982 	.word	0x00038982
   2809c:	0003899b 	.word	0x0003899b

000280a0 <clear_event_registrations>:
{
   280a0:	2314      	movs	r3, #20
   280a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280a6:	4615      	mov	r5, r2
	while (num_events--) {
   280a8:	460c      	mov	r4, r1
	event->poller = NULL;
   280aa:	2600      	movs	r6, #0
   280ac:	fb03 0001 	mla	r0, r3, r1, r0
   280b0:	4f4b      	ldr	r7, [pc, #300]	; (281e0 <clear_event_registrations+0x140>)
	while (num_events--) {
   280b2:	b90c      	cbnz	r4, 280b8 <clear_event_registrations+0x18>
}
   280b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   280b8:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   280bc:	f1a0 0814 	sub.w	r8, r0, #20
   280c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   280c4:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   280c8:	2b08      	cmp	r3, #8
   280ca:	d842      	bhi.n	28152 <clear_event_registrations+0xb2>
   280cc:	e8df f003 	tbb	[pc, r3]
   280d0:	41052555 	.word	0x41052555
   280d4:	41414116 	.word	0x41414116
   280d8:	33          	.byte	0x33
   280d9:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   280da:	f850 3c04 	ldr.w	r3, [r0, #-4]
   280de:	2b00      	cmp	r3, #0
   280e0:	d142      	bne.n	28168 <clear_event_registrations+0xc8>
   280e2:	4940      	ldr	r1, [pc, #256]	; (281e4 <clear_event_registrations+0x144>)
   280e4:	23b6      	movs	r3, #182	; 0xb6
   280e6:	4a40      	ldr	r2, [pc, #256]	; (281e8 <clear_event_registrations+0x148>)
   280e8:	4840      	ldr	r0, [pc, #256]	; (281ec <clear_event_registrations+0x14c>)
   280ea:	f002 fae6 	bl	2a6ba <assert_print>
   280ee:	4840      	ldr	r0, [pc, #256]	; (281f0 <clear_event_registrations+0x150>)
   280f0:	f002 fae3 	bl	2a6ba <assert_print>
   280f4:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   280f6:	483c      	ldr	r0, [pc, #240]	; (281e8 <clear_event_registrations+0x148>)
   280f8:	f002 fad8 	bl	2a6ac <assert_post_action>
   280fc:	f850 3c04 	ldr.w	r3, [r0, #-4]
   28100:	2b00      	cmp	r3, #0
   28102:	d131      	bne.n	28168 <clear_event_registrations+0xc8>
   28104:	493b      	ldr	r1, [pc, #236]	; (281f4 <clear_event_registrations+0x154>)
   28106:	23ba      	movs	r3, #186	; 0xba
   28108:	4a37      	ldr	r2, [pc, #220]	; (281e8 <clear_event_registrations+0x148>)
   2810a:	4838      	ldr	r0, [pc, #224]	; (281ec <clear_event_registrations+0x14c>)
   2810c:	f002 fad5 	bl	2a6ba <assert_print>
   28110:	4839      	ldr	r0, [pc, #228]	; (281f8 <clear_event_registrations+0x158>)
   28112:	f002 fad2 	bl	2a6ba <assert_print>
   28116:	21ba      	movs	r1, #186	; 0xba
   28118:	e7ed      	b.n	280f6 <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2811a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2811e:	bb1b      	cbnz	r3, 28168 <clear_event_registrations+0xc8>
   28120:	4936      	ldr	r1, [pc, #216]	; (281fc <clear_event_registrations+0x15c>)
   28122:	23be      	movs	r3, #190	; 0xbe
   28124:	4a30      	ldr	r2, [pc, #192]	; (281e8 <clear_event_registrations+0x148>)
   28126:	4831      	ldr	r0, [pc, #196]	; (281ec <clear_event_registrations+0x14c>)
   28128:	f002 fac7 	bl	2a6ba <assert_print>
   2812c:	4834      	ldr	r0, [pc, #208]	; (28200 <clear_event_registrations+0x160>)
   2812e:	f002 fac4 	bl	2a6ba <assert_print>
   28132:	21be      	movs	r1, #190	; 0xbe
   28134:	e7df      	b.n	280f6 <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   28136:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2813a:	b9ab      	cbnz	r3, 28168 <clear_event_registrations+0xc8>
   2813c:	4931      	ldr	r1, [pc, #196]	; (28204 <clear_event_registrations+0x164>)
   2813e:	23c2      	movs	r3, #194	; 0xc2
   28140:	4a29      	ldr	r2, [pc, #164]	; (281e8 <clear_event_registrations+0x148>)
   28142:	482a      	ldr	r0, [pc, #168]	; (281ec <clear_event_registrations+0x14c>)
   28144:	f002 fab9 	bl	2a6ba <assert_print>
   28148:	482f      	ldr	r0, [pc, #188]	; (28208 <clear_event_registrations+0x168>)
   2814a:	f002 fab6 	bl	2a6ba <assert_print>
   2814e:	21c2      	movs	r1, #194	; 0xc2
   28150:	e7d1      	b.n	280f6 <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   28152:	492e      	ldr	r1, [pc, #184]	; (2820c <clear_event_registrations+0x16c>)
   28154:	23cf      	movs	r3, #207	; 0xcf
   28156:	4a24      	ldr	r2, [pc, #144]	; (281e8 <clear_event_registrations+0x148>)
   28158:	4824      	ldr	r0, [pc, #144]	; (281ec <clear_event_registrations+0x14c>)
   2815a:	f002 faae 	bl	2a6ba <assert_print>
   2815e:	482c      	ldr	r0, [pc, #176]	; (28210 <clear_event_registrations+0x170>)
   28160:	f002 faab 	bl	2a6ba <assert_print>
   28164:	21cf      	movs	r1, #207	; 0xcf
   28166:	e7c6      	b.n	280f6 <clear_event_registrations+0x56>
	return node->next != NULL;
   28168:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2816c:	b12b      	cbz	r3, 2817a <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   2816e:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   28172:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28174:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   28176:	e940 6605 	strd	r6, r6, [r0, #-20]
   2817a:	4638      	mov	r0, r7
   2817c:	f7fc ff7a 	bl	25074 <z_spin_unlock_valid>
   28180:	b960      	cbnz	r0, 2819c <clear_event_registrations+0xfc>
   28182:	23c2      	movs	r3, #194	; 0xc2
   28184:	4a23      	ldr	r2, [pc, #140]	; (28214 <clear_event_registrations+0x174>)
   28186:	4924      	ldr	r1, [pc, #144]	; (28218 <clear_event_registrations+0x178>)
   28188:	4818      	ldr	r0, [pc, #96]	; (281ec <clear_event_registrations+0x14c>)
   2818a:	f002 fa96 	bl	2a6ba <assert_print>
   2818e:	4914      	ldr	r1, [pc, #80]	; (281e0 <clear_event_registrations+0x140>)
   28190:	4822      	ldr	r0, [pc, #136]	; (2821c <clear_event_registrations+0x17c>)
   28192:	f002 fa92 	bl	2a6ba <assert_print>
   28196:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28198:	481e      	ldr	r0, [pc, #120]	; (28214 <clear_event_registrations+0x174>)
   2819a:	e7ad      	b.n	280f8 <clear_event_registrations+0x58>
   2819c:	f385 8811 	msr	BASEPRI, r5
   281a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   281a4:	f04f 0320 	mov.w	r3, #32
   281a8:	f3ef 8511 	mrs	r5, BASEPRI
   281ac:	f383 8812 	msr	BASEPRI_MAX, r3
   281b0:	f3bf 8f6f 	isb	sy
   281b4:	4638      	mov	r0, r7
   281b6:	f7fc ff4f 	bl	25058 <z_spin_lock_valid>
   281ba:	3c01      	subs	r4, #1
   281bc:	b958      	cbnz	r0, 281d6 <clear_event_registrations+0x136>
   281be:	2394      	movs	r3, #148	; 0x94
   281c0:	4a14      	ldr	r2, [pc, #80]	; (28214 <clear_event_registrations+0x174>)
   281c2:	4917      	ldr	r1, [pc, #92]	; (28220 <clear_event_registrations+0x180>)
   281c4:	4809      	ldr	r0, [pc, #36]	; (281ec <clear_event_registrations+0x14c>)
   281c6:	f002 fa78 	bl	2a6ba <assert_print>
   281ca:	4905      	ldr	r1, [pc, #20]	; (281e0 <clear_event_registrations+0x140>)
   281cc:	4815      	ldr	r0, [pc, #84]	; (28224 <clear_event_registrations+0x184>)
   281ce:	f002 fa74 	bl	2a6ba <assert_print>
   281d2:	2194      	movs	r1, #148	; 0x94
   281d4:	e7e0      	b.n	28198 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   281d6:	4638      	mov	r0, r7
   281d8:	f7fc ff5a 	bl	25090 <z_spin_lock_set_owner>
	return k;
   281dc:	4640      	mov	r0, r8
   281de:	e768      	b.n	280b2 <clear_event_registrations+0x12>
   281e0:	20021ae0 	.word	0x20021ae0
   281e4:	000388d7 	.word	0x000388d7
   281e8:	00038899 	.word	0x00038899
   281ec:	00032659 	.word	0x00032659
   281f0:	000388f1 	.word	0x000388f1
   281f4:	00038906 	.word	0x00038906
   281f8:	00038922 	.word	0x00038922
   281fc:	00038933 	.word	0x00038933
   28200:	00038950 	.word	0x00038950
   28204:	00038967 	.word	0x00038967
   28208:	00038982 	.word	0x00038982
   2820c:	00037b2a 	.word	0x00037b2a
   28210:	0003899b 	.word	0x0003899b
   28214:	000333ee 	.word	0x000333ee
   28218:	0003341b 	.word	0x0003341b
   2821c:	00033432 	.word	0x00033432
   28220:	00033447 	.word	0x00033447
   28224:	0003345c 	.word	0x0003345c

00028228 <k_poll_event_init>:
{
   28228:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2822a:	b162      	cbz	r2, 28246 <k_poll_event_init+0x1e>
   2822c:	4917      	ldr	r1, [pc, #92]	; (2828c <k_poll_event_init+0x64>)
   2822e:	232d      	movs	r3, #45	; 0x2d
   28230:	4a17      	ldr	r2, [pc, #92]	; (28290 <k_poll_event_init+0x68>)
   28232:	4818      	ldr	r0, [pc, #96]	; (28294 <k_poll_event_init+0x6c>)
   28234:	f002 fa41 	bl	2a6ba <assert_print>
   28238:	4817      	ldr	r0, [pc, #92]	; (28298 <k_poll_event_init+0x70>)
   2823a:	f002 fa3e 	bl	2a6ba <assert_print>
   2823e:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   28240:	4813      	ldr	r0, [pc, #76]	; (28290 <k_poll_event_init+0x68>)
   28242:	f002 fa33 	bl	2a6ac <assert_post_action>
   28246:	293f      	cmp	r1, #63	; 0x3f
   28248:	d90a      	bls.n	28260 <k_poll_event_init+0x38>
   2824a:	4914      	ldr	r1, [pc, #80]	; (2829c <k_poll_event_init+0x74>)
   2824c:	232f      	movs	r3, #47	; 0x2f
   2824e:	4a10      	ldr	r2, [pc, #64]	; (28290 <k_poll_event_init+0x68>)
   28250:	4810      	ldr	r0, [pc, #64]	; (28294 <k_poll_event_init+0x6c>)
   28252:	f002 fa32 	bl	2a6ba <assert_print>
   28256:	4812      	ldr	r0, [pc, #72]	; (282a0 <k_poll_event_init+0x78>)
   28258:	f002 fa2f 	bl	2a6ba <assert_print>
   2825c:	212f      	movs	r1, #47	; 0x2f
   2825e:	e7ef      	b.n	28240 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   28260:	b953      	cbnz	r3, 28278 <k_poll_event_init+0x50>
   28262:	4910      	ldr	r1, [pc, #64]	; (282a4 <k_poll_event_init+0x7c>)
   28264:	2330      	movs	r3, #48	; 0x30
   28266:	4a0a      	ldr	r2, [pc, #40]	; (28290 <k_poll_event_init+0x68>)
   28268:	480a      	ldr	r0, [pc, #40]	; (28294 <k_poll_event_init+0x6c>)
   2826a:	f002 fa26 	bl	2a6ba <assert_print>
   2826e:	480e      	ldr	r0, [pc, #56]	; (282a8 <k_poll_event_init+0x80>)
   28270:	f002 fa23 	bl	2a6ba <assert_print>
   28274:	2130      	movs	r1, #48	; 0x30
   28276:	e7e3      	b.n	28240 <k_poll_event_init+0x18>
	event->poller = NULL;
   28278:	6082      	str	r2, [r0, #8]
	event->type = type;
   2827a:	0209      	lsls	r1, r1, #8
   2827c:	7b02      	ldrb	r2, [r0, #12]
   2827e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   28282:	4311      	orrs	r1, r2
	event->obj = obj;
   28284:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   28288:	bd08      	pop	{r3, pc}
   2828a:	bf00      	nop
   2828c:	000389b1 	.word	0x000389b1
   28290:	00038899 	.word	0x00038899
   28294:	00032659 	.word	0x00032659
   28298:	000389d1 	.word	0x000389d1
   2829c:	000389f7 	.word	0x000389f7
   282a0:	00038a1b 	.word	0x00038a1b
   282a4:	00038a2b 	.word	0x00038a2b
   282a8:	00038a3e 	.word	0x00038a3e

000282ac <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   282ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   282b0:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   282b2:	4b5c      	ldr	r3, [pc, #368]	; (28424 <z_impl_k_poll+0x178>)
{
   282b4:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   282b6:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   282ba:	2301      	movs	r3, #1
{
   282bc:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   282be:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   282c2:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   282c6:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   282ca:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   282ce:	f1bb 0f00 	cmp.w	fp, #0
   282d2:	d00e      	beq.n	282f2 <z_impl_k_poll+0x46>
   282d4:	4954      	ldr	r1, [pc, #336]	; (28428 <z_impl_k_poll+0x17c>)
   282d6:	f240 132d 	movw	r3, #301	; 0x12d
   282da:	4a54      	ldr	r2, [pc, #336]	; (2842c <z_impl_k_poll+0x180>)
   282dc:	4854      	ldr	r0, [pc, #336]	; (28430 <z_impl_k_poll+0x184>)
   282de:	f002 f9ec 	bl	2a6ba <assert_print>
   282e2:	4854      	ldr	r0, [pc, #336]	; (28434 <z_impl_k_poll+0x188>)
   282e4:	f002 f9e9 	bl	2a6ba <assert_print>
   282e8:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   282ec:	484f      	ldr	r0, [pc, #316]	; (2842c <z_impl_k_poll+0x180>)
   282ee:	f002 f9dd 	bl	2a6ac <assert_post_action>
   282f2:	b960      	cbnz	r0, 2830e <z_impl_k_poll+0x62>
   282f4:	4950      	ldr	r1, [pc, #320]	; (28438 <z_impl_k_poll+0x18c>)
   282f6:	f44f 7397 	mov.w	r3, #302	; 0x12e
   282fa:	4a4c      	ldr	r2, [pc, #304]	; (2842c <z_impl_k_poll+0x180>)
   282fc:	484c      	ldr	r0, [pc, #304]	; (28430 <z_impl_k_poll+0x184>)
   282fe:	f002 f9dc 	bl	2a6ba <assert_print>
   28302:	484e      	ldr	r0, [pc, #312]	; (2843c <z_impl_k_poll+0x190>)
   28304:	f002 f9d9 	bl	2a6ba <assert_print>
   28308:	f44f 7197 	mov.w	r1, #302	; 0x12e
   2830c:	e7ee      	b.n	282ec <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   2830e:	2900      	cmp	r1, #0
   28310:	da0c      	bge.n	2832c <z_impl_k_poll+0x80>
   28312:	494b      	ldr	r1, [pc, #300]	; (28440 <z_impl_k_poll+0x194>)
   28314:	f240 132f 	movw	r3, #303	; 0x12f
   28318:	4a44      	ldr	r2, [pc, #272]	; (2842c <z_impl_k_poll+0x180>)
   2831a:	4845      	ldr	r0, [pc, #276]	; (28430 <z_impl_k_poll+0x184>)
   2831c:	f002 f9cd 	bl	2a6ba <assert_print>
   28320:	4848      	ldr	r0, [pc, #288]	; (28444 <z_impl_k_poll+0x198>)
   28322:	f002 f9ca 	bl	2a6ba <assert_print>
   28326:	f240 112f 	movw	r1, #303	; 0x12f
   2832a:	e7df      	b.n	282ec <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2832c:	ea57 0306 	orrs.w	r3, r7, r6
   28330:	bf0c      	ite	eq
   28332:	2301      	moveq	r3, #1
   28334:	2300      	movne	r3, #0
   28336:	f7ff fda5 	bl	27e84 <register_events>
   2833a:	4681      	mov	r9, r0
   2833c:	f04f 0320 	mov.w	r3, #32
   28340:	f3ef 8a11 	mrs	sl, BASEPRI
   28344:	f383 8812 	msr	BASEPRI_MAX, r3
   28348:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2834c:	483e      	ldr	r0, [pc, #248]	; (28448 <z_impl_k_poll+0x19c>)
   2834e:	f7fc fe83 	bl	25058 <z_spin_lock_valid>
   28352:	b960      	cbnz	r0, 2836e <z_impl_k_poll+0xc2>
   28354:	2394      	movs	r3, #148	; 0x94
   28356:	4a3d      	ldr	r2, [pc, #244]	; (2844c <z_impl_k_poll+0x1a0>)
   28358:	493d      	ldr	r1, [pc, #244]	; (28450 <z_impl_k_poll+0x1a4>)
   2835a:	4835      	ldr	r0, [pc, #212]	; (28430 <z_impl_k_poll+0x184>)
   2835c:	f002 f9ad 	bl	2a6ba <assert_print>
   28360:	4939      	ldr	r1, [pc, #228]	; (28448 <z_impl_k_poll+0x19c>)
   28362:	483c      	ldr	r0, [pc, #240]	; (28454 <z_impl_k_poll+0x1a8>)
   28364:	f002 f9a9 	bl	2a6ba <assert_print>
   28368:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2836a:	4838      	ldr	r0, [pc, #224]	; (2844c <z_impl_k_poll+0x1a0>)
   2836c:	e7bf      	b.n	282ee <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   2836e:	4836      	ldr	r0, [pc, #216]	; (28448 <z_impl_k_poll+0x19c>)
   28370:	f7fc fe8e 	bl	25090 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   28374:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   28378:	b9e4      	cbnz	r4, 283b4 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   2837a:	4628      	mov	r0, r5
   2837c:	4652      	mov	r2, sl
   2837e:	4649      	mov	r1, r9
   28380:	f7ff fe8e 	bl	280a0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28384:	4830      	ldr	r0, [pc, #192]	; (28448 <z_impl_k_poll+0x19c>)
   28386:	f7fc fe75 	bl	25074 <z_spin_unlock_valid>
   2838a:	b958      	cbnz	r0, 283a4 <z_impl_k_poll+0xf8>
   2838c:	23c2      	movs	r3, #194	; 0xc2
   2838e:	4a2f      	ldr	r2, [pc, #188]	; (2844c <z_impl_k_poll+0x1a0>)
   28390:	4931      	ldr	r1, [pc, #196]	; (28458 <z_impl_k_poll+0x1ac>)
   28392:	4827      	ldr	r0, [pc, #156]	; (28430 <z_impl_k_poll+0x184>)
   28394:	f002 f991 	bl	2a6ba <assert_print>
   28398:	492b      	ldr	r1, [pc, #172]	; (28448 <z_impl_k_poll+0x19c>)
   2839a:	4830      	ldr	r0, [pc, #192]	; (2845c <z_impl_k_poll+0x1b0>)
   2839c:	f002 f98d 	bl	2a6ba <assert_print>
   283a0:	21c2      	movs	r1, #194	; 0xc2
   283a2:	e7e2      	b.n	2836a <z_impl_k_poll+0xbe>
	__asm__ volatile(
   283a4:	f38a 8811 	msr	BASEPRI, sl
   283a8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   283ac:	4620      	mov	r0, r4
   283ae:	b003      	add	sp, #12
   283b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   283b4:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   283b8:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   283bc:	d10b      	bne.n	283d6 <z_impl_k_poll+0x12a>
   283be:	4822      	ldr	r0, [pc, #136]	; (28448 <z_impl_k_poll+0x19c>)
   283c0:	f7fc fe58 	bl	25074 <z_spin_unlock_valid>
   283c4:	2800      	cmp	r0, #0
   283c6:	d0e1      	beq.n	2838c <z_impl_k_poll+0xe0>
   283c8:	f38a 8811 	msr	BASEPRI, sl
   283cc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   283d0:	f06f 040a 	mvn.w	r4, #10
   283d4:	e7ea      	b.n	283ac <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   283d6:	4651      	mov	r1, sl
   283d8:	e9cd 7600 	strd	r7, r6, [sp]
   283dc:	4a20      	ldr	r2, [pc, #128]	; (28460 <z_impl_k_poll+0x1b4>)
   283de:	481a      	ldr	r0, [pc, #104]	; (28448 <z_impl_k_poll+0x19c>)
   283e0:	f7fe fbd2 	bl	26b88 <z_pend_curr>
   283e4:	4604      	mov	r4, r0
	__asm__ volatile(
   283e6:	f04f 0320 	mov.w	r3, #32
   283ea:	f3ef 8611 	mrs	r6, BASEPRI
   283ee:	f383 8812 	msr	BASEPRI_MAX, r3
   283f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   283f6:	4814      	ldr	r0, [pc, #80]	; (28448 <z_impl_k_poll+0x19c>)
   283f8:	f7fc fe2e 	bl	25058 <z_spin_lock_valid>
   283fc:	2800      	cmp	r0, #0
   283fe:	d0a9      	beq.n	28354 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   28400:	4811      	ldr	r0, [pc, #68]	; (28448 <z_impl_k_poll+0x19c>)
   28402:	f7fc fe45 	bl	25090 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   28406:	4628      	mov	r0, r5
   28408:	4632      	mov	r2, r6
   2840a:	4649      	mov	r1, r9
   2840c:	f7ff fe48 	bl	280a0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28410:	480d      	ldr	r0, [pc, #52]	; (28448 <z_impl_k_poll+0x19c>)
   28412:	f7fc fe2f 	bl	25074 <z_spin_unlock_valid>
   28416:	2800      	cmp	r0, #0
   28418:	d0b8      	beq.n	2838c <z_impl_k_poll+0xe0>
	__asm__ volatile(
   2841a:	f386 8811 	msr	BASEPRI, r6
   2841e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   28422:	e7c3      	b.n	283ac <z_impl_k_poll+0x100>
   28424:	20021a88 	.word	0x20021a88
   28428:	00038422 	.word	0x00038422
   2842c:	00038899 	.word	0x00038899
   28430:	00032659 	.word	0x00032659
   28434:	000368ea 	.word	0x000368ea
   28438:	00038a58 	.word	0x00038a58
   2843c:	00038a6e 	.word	0x00038a6e
   28440:	00038a7d 	.word	0x00038a7d
   28444:	00038a8d 	.word	0x00038a8d
   28448:	20021ae0 	.word	0x20021ae0
   2844c:	000333ee 	.word	0x000333ee
   28450:	00033447 	.word	0x00033447
   28454:	0003345c 	.word	0x0003345c
   28458:	0003341b 	.word	0x0003341b
   2845c:	00033432 	.word	0x00033432
   28460:	2000874c 	.word	0x2000874c

00028464 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   28464:	b570      	push	{r4, r5, r6, lr}
   28466:	4604      	mov	r4, r0
   28468:	460d      	mov	r5, r1
	__asm__ volatile(
   2846a:	f04f 0320 	mov.w	r3, #32
   2846e:	f3ef 8611 	mrs	r6, BASEPRI
   28472:	f383 8812 	msr	BASEPRI_MAX, r3
   28476:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2847a:	4820      	ldr	r0, [pc, #128]	; (284fc <z_impl_k_poll_signal_raise+0x98>)
   2847c:	f7fc fdec 	bl	25058 <z_spin_lock_valid>
   28480:	b968      	cbnz	r0, 2849e <z_impl_k_poll_signal_raise+0x3a>
   28482:	2394      	movs	r3, #148	; 0x94
   28484:	4a1e      	ldr	r2, [pc, #120]	; (28500 <z_impl_k_poll_signal_raise+0x9c>)
   28486:	491f      	ldr	r1, [pc, #124]	; (28504 <z_impl_k_poll_signal_raise+0xa0>)
   28488:	481f      	ldr	r0, [pc, #124]	; (28508 <z_impl_k_poll_signal_raise+0xa4>)
   2848a:	f002 f916 	bl	2a6ba <assert_print>
   2848e:	491b      	ldr	r1, [pc, #108]	; (284fc <z_impl_k_poll_signal_raise+0x98>)
   28490:	481e      	ldr	r0, [pc, #120]	; (2850c <z_impl_k_poll_signal_raise+0xa8>)
   28492:	f002 f912 	bl	2a6ba <assert_print>
   28496:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28498:	4819      	ldr	r0, [pc, #100]	; (28500 <z_impl_k_poll_signal_raise+0x9c>)
   2849a:	f002 f907 	bl	2a6ac <assert_post_action>
	z_spin_lock_set_owner(l);
   2849e:	4817      	ldr	r0, [pc, #92]	; (284fc <z_impl_k_poll_signal_raise+0x98>)
   284a0:	f7fc fdf6 	bl	25090 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   284a4:	2101      	movs	r1, #1
	return list->head == list;
   284a6:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   284a8:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   284aa:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   284ac:	60a1      	str	r1, [r4, #8]
   284ae:	d10f      	bne.n	284d0 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   284b0:	4812      	ldr	r0, [pc, #72]	; (284fc <z_impl_k_poll_signal_raise+0x98>)
   284b2:	f7fc fddf 	bl	25074 <z_spin_unlock_valid>
   284b6:	b9d8      	cbnz	r0, 284f0 <z_impl_k_poll_signal_raise+0x8c>
   284b8:	23c2      	movs	r3, #194	; 0xc2
   284ba:	4a11      	ldr	r2, [pc, #68]	; (28500 <z_impl_k_poll_signal_raise+0x9c>)
   284bc:	4914      	ldr	r1, [pc, #80]	; (28510 <z_impl_k_poll_signal_raise+0xac>)
   284be:	4812      	ldr	r0, [pc, #72]	; (28508 <z_impl_k_poll_signal_raise+0xa4>)
   284c0:	f002 f8fb 	bl	2a6ba <assert_print>
   284c4:	490d      	ldr	r1, [pc, #52]	; (284fc <z_impl_k_poll_signal_raise+0x98>)
   284c6:	4813      	ldr	r0, [pc, #76]	; (28514 <z_impl_k_poll_signal_raise+0xb0>)
   284c8:	f002 f8f7 	bl	2a6ba <assert_print>
   284cc:	21c2      	movs	r1, #194	; 0xc2
   284ce:	e7e3      	b.n	28498 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   284d0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   284d4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   284d6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   284d8:	2300      	movs	r3, #0
	node->prev = NULL;
   284da:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   284de:	f007 ffaf 	bl	30440 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   284e2:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   284e4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   284e6:	4805      	ldr	r0, [pc, #20]	; (284fc <z_impl_k_poll_signal_raise+0x98>)
   284e8:	f7fe f880 	bl	265ec <z_reschedule>
	return rc;
}
   284ec:	4620      	mov	r0, r4
   284ee:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   284f0:	f386 8811 	msr	BASEPRI, r6
   284f4:	f3bf 8f6f 	isb	sy
		return 0;
   284f8:	2400      	movs	r4, #0
   284fa:	e7f7      	b.n	284ec <z_impl_k_poll_signal_raise+0x88>
   284fc:	20021ae0 	.word	0x20021ae0
   28500:	000333ee 	.word	0x000333ee
   28504:	00033447 	.word	0x00033447
   28508:	00032659 	.word	0x00032659
   2850c:	0003345c 	.word	0x0003345c
   28510:	0003341b 	.word	0x0003341b
   28514:	00033432 	.word	0x00033432

00028518 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   28518:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2851a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   2851e:	4606      	mov	r6, r0
   28520:	460d      	mov	r5, r1
   28522:	d220      	bcs.n	28566 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   28524:	f04f 0800 	mov.w	r8, #0
   28528:	f04f 0900 	mov.w	r9, #0
   2852c:	f041 0104 	orr.w	r1, r1, #4
   28530:	e9cd 8900 	strd	r8, r9, [sp]
   28534:	f7fc fa8c 	bl	24a50 <k_heap_aligned_alloc>
	if (mem == NULL) {
   28538:	4604      	mov	r4, r0
   2853a:	b1a0      	cbz	r0, 28566 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   2853c:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   28540:	b195      	cbz	r5, 28568 <z_heap_aligned_alloc+0x50>
   28542:	1e6b      	subs	r3, r5, #1
   28544:	421c      	tst	r4, r3
   28546:	d00f      	beq.n	28568 <z_heap_aligned_alloc+0x50>
   28548:	2325      	movs	r3, #37	; 0x25
   2854a:	4a09      	ldr	r2, [pc, #36]	; (28570 <z_heap_aligned_alloc+0x58>)
   2854c:	4909      	ldr	r1, [pc, #36]	; (28574 <z_heap_aligned_alloc+0x5c>)
   2854e:	480a      	ldr	r0, [pc, #40]	; (28578 <z_heap_aligned_alloc+0x60>)
   28550:	f002 f8b3 	bl	2a6ba <assert_print>
   28554:	4621      	mov	r1, r4
   28556:	4809      	ldr	r0, [pc, #36]	; (2857c <z_heap_aligned_alloc+0x64>)
   28558:	462a      	mov	r2, r5
   2855a:	f002 f8ae 	bl	2a6ba <assert_print>
   2855e:	2125      	movs	r1, #37	; 0x25
   28560:	4803      	ldr	r0, [pc, #12]	; (28570 <z_heap_aligned_alloc+0x58>)
   28562:	f002 f8a3 	bl	2a6ac <assert_post_action>
		return NULL;
   28566:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   28568:	4620      	mov	r0, r4
   2856a:	b002      	add	sp, #8
   2856c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   28570:	00038a9a 	.word	0x00038a9a
   28574:	00038abe 	.word	0x00038abe
   28578:	00032659 	.word	0x00032659
   2857c:	00038af0 	.word	0x00038af0

00028580 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   28580:	2803      	cmp	r0, #3
{
   28582:	460a      	mov	r2, r1
   28584:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   28586:	d901      	bls.n	2858c <k_aligned_alloc+0xc>
   28588:	0783      	lsls	r3, r0, #30
   2858a:	d00c      	beq.n	285a6 <k_aligned_alloc+0x26>
   2858c:	4910      	ldr	r1, [pc, #64]	; (285d0 <k_aligned_alloc+0x50>)
   2858e:	2342      	movs	r3, #66	; 0x42
   28590:	4a10      	ldr	r2, [pc, #64]	; (285d4 <k_aligned_alloc+0x54>)
   28592:	4811      	ldr	r0, [pc, #68]	; (285d8 <k_aligned_alloc+0x58>)
   28594:	f002 f891 	bl	2a6ba <assert_print>
   28598:	4810      	ldr	r0, [pc, #64]	; (285dc <k_aligned_alloc+0x5c>)
   2859a:	f002 f88e 	bl	2a6ba <assert_print>
   2859e:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   285a0:	480c      	ldr	r0, [pc, #48]	; (285d4 <k_aligned_alloc+0x54>)
   285a2:	f002 f883 	bl	2a6ac <assert_post_action>
   285a6:	1e43      	subs	r3, r0, #1
   285a8:	4203      	tst	r3, r0
   285aa:	d00a      	beq.n	285c2 <k_aligned_alloc+0x42>
   285ac:	490c      	ldr	r1, [pc, #48]	; (285e0 <k_aligned_alloc+0x60>)
   285ae:	2346      	movs	r3, #70	; 0x46
   285b0:	4a08      	ldr	r2, [pc, #32]	; (285d4 <k_aligned_alloc+0x54>)
   285b2:	4809      	ldr	r0, [pc, #36]	; (285d8 <k_aligned_alloc+0x58>)
   285b4:	f002 f881 	bl	2a6ba <assert_print>
   285b8:	480a      	ldr	r0, [pc, #40]	; (285e4 <k_aligned_alloc+0x64>)
   285ba:	f002 f87e 	bl	2a6ba <assert_print>
   285be:	2146      	movs	r1, #70	; 0x46
   285c0:	e7ee      	b.n	285a0 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   285c2:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   285c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   285c8:	4807      	ldr	r0, [pc, #28]	; (285e8 <k_aligned_alloc+0x68>)
   285ca:	f7ff bfa5 	b.w	28518 <z_heap_aligned_alloc>
   285ce:	bf00      	nop
   285d0:	00038b18 	.word	0x00038b18
   285d4:	00038a9a 	.word	0x00038a9a
   285d8:	00032659 	.word	0x00032659
   285dc:	00038b55 	.word	0x00038b55
   285e0:	00033258 	.word	0x00033258
   285e4:	00033273 	.word	0x00033273
   285e8:	20008afc 	.word	0x20008afc

000285ec <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   285ec:	4b01      	ldr	r3, [pc, #4]	; (285f4 <k_thread_system_pool_assign+0x8>)
   285ee:	6743      	str	r3, [r0, #116]	; 0x74
}
   285f0:	4770      	bx	lr
   285f2:	bf00      	nop
   285f4:	20008afc 	.word	0x20008afc

000285f8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   285f8:	b538      	push	{r3, r4, r5, lr}
   285fa:	4604      	mov	r4, r0
   285fc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   285fe:	f007 fda3 	bl	30148 <k_is_in_isr>
   28602:	b920      	cbnz	r0, 2860e <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   28604:	4b06      	ldr	r3, [pc, #24]	; (28620 <z_thread_aligned_alloc+0x28>)
   28606:	689b      	ldr	r3, [r3, #8]
   28608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2860a:	b90b      	cbnz	r3, 28610 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   2860c:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   2860e:	4b05      	ldr	r3, [pc, #20]	; (28624 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   28610:	462a      	mov	r2, r5
   28612:	4621      	mov	r1, r4
   28614:	4618      	mov	r0, r3
}
   28616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2861a:	f7ff bf7d 	b.w	28518 <z_heap_aligned_alloc>
   2861e:	bf00      	nop
   28620:	20021a88 	.word	0x20021a88
   28624:	20008afc 	.word	0x20008afc

00028628 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   28628:	4801      	ldr	r0, [pc, #4]	; (28630 <boot_banner+0x8>)
   2862a:	f001 be84 	b.w	2a336 <printk>
   2862e:	bf00      	nop
   28630:	00038b82 	.word	0x00038b82

00028634 <log>:
   28634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28636:	4604      	mov	r4, r0
   28638:	460d      	mov	r5, r1
   2863a:	f7e1 f985 	bl	9948 <__ieee754_log>
   2863e:	4b17      	ldr	r3, [pc, #92]	; (2869c <log+0x68>)
   28640:	4606      	mov	r6, r0
   28642:	460f      	mov	r7, r1
   28644:	f993 3000 	ldrsb.w	r3, [r3]
   28648:	3301      	adds	r3, #1
   2864a:	d01a      	beq.n	28682 <log+0x4e>
   2864c:	4622      	mov	r2, r4
   2864e:	462b      	mov	r3, r5
   28650:	4620      	mov	r0, r4
   28652:	4629      	mov	r1, r5
   28654:	f7e0 fcee 	bl	9034 <__aeabi_dcmpun>
   28658:	b998      	cbnz	r0, 28682 <log+0x4e>
   2865a:	2200      	movs	r2, #0
   2865c:	2300      	movs	r3, #0
   2865e:	4620      	mov	r0, r4
   28660:	4629      	mov	r1, r5
   28662:	f7e0 fcdd 	bl	9020 <__aeabi_dcmpgt>
   28666:	b960      	cbnz	r0, 28682 <log+0x4e>
   28668:	2200      	movs	r2, #0
   2866a:	2300      	movs	r3, #0
   2866c:	4620      	mov	r0, r4
   2866e:	4629      	mov	r1, r5
   28670:	f7e0 fcae 	bl	8fd0 <__aeabi_dcmpeq>
   28674:	b140      	cbz	r0, 28688 <log+0x54>
   28676:	f003 fbbd 	bl	2bdf4 <__errno>
   2867a:	2600      	movs	r6, #0
   2867c:	2322      	movs	r3, #34	; 0x22
   2867e:	4f08      	ldr	r7, [pc, #32]	; (286a0 <log+0x6c>)
   28680:	6003      	str	r3, [r0, #0]
   28682:	4630      	mov	r0, r6
   28684:	4639      	mov	r1, r7
   28686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28688:	f003 fbb4 	bl	2bdf4 <__errno>
   2868c:	2321      	movs	r3, #33	; 0x21
   2868e:	6003      	str	r3, [r0, #0]
   28690:	4804      	ldr	r0, [pc, #16]	; (286a4 <log+0x70>)
   28692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28696:	f000 b807 	b.w	286a8 <nan>
   2869a:	bf00      	nop
   2869c:	200089f7 	.word	0x200089f7
   286a0:	fff00000 	.word	0xfff00000
   286a4:	000368ec 	.word	0x000368ec

000286a8 <nan>:
   286a8:	2000      	movs	r0, #0
   286aa:	4901      	ldr	r1, [pc, #4]	; (286b0 <nan+0x8>)
   286ac:	4770      	bx	lr
   286ae:	bf00      	nop
   286b0:	7ff80000 	.word	0x7ff80000

000286b4 <malloc>:
   286b4:	4b02      	ldr	r3, [pc, #8]	; (286c0 <malloc+0xc>)
   286b6:	4601      	mov	r1, r0
   286b8:	6818      	ldr	r0, [r3, #0]
   286ba:	f000 b855 	b.w	28768 <_malloc_r>
   286be:	bf00      	nop
   286c0:	20008754 	.word	0x20008754

000286c4 <free>:
   286c4:	4b02      	ldr	r3, [pc, #8]	; (286d0 <free+0xc>)
   286c6:	4601      	mov	r1, r0
   286c8:	6818      	ldr	r0, [r3, #0]
   286ca:	f000 b803 	b.w	286d4 <_free_r>
   286ce:	bf00      	nop
   286d0:	20008754 	.word	0x20008754

000286d4 <_free_r>:
   286d4:	b538      	push	{r3, r4, r5, lr}
   286d6:	4605      	mov	r5, r0
   286d8:	2900      	cmp	r1, #0
   286da:	d041      	beq.n	28760 <_free_r+0x8c>
   286dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   286e0:	1f0c      	subs	r4, r1, #4
   286e2:	2b00      	cmp	r3, #0
   286e4:	bfb8      	it	lt
   286e6:	18e4      	addlt	r4, r4, r3
   286e8:	f000 fd94 	bl	29214 <__malloc_lock>
   286ec:	4a1d      	ldr	r2, [pc, #116]	; (28764 <_free_r+0x90>)
   286ee:	6813      	ldr	r3, [r2, #0]
   286f0:	b933      	cbnz	r3, 28700 <_free_r+0x2c>
   286f2:	6063      	str	r3, [r4, #4]
   286f4:	6014      	str	r4, [r2, #0]
   286f6:	4628      	mov	r0, r5
   286f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   286fc:	f000 bd90 	b.w	29220 <__malloc_unlock>
   28700:	42a3      	cmp	r3, r4
   28702:	d908      	bls.n	28716 <_free_r+0x42>
   28704:	6820      	ldr	r0, [r4, #0]
   28706:	1821      	adds	r1, r4, r0
   28708:	428b      	cmp	r3, r1
   2870a:	bf01      	itttt	eq
   2870c:	6819      	ldreq	r1, [r3, #0]
   2870e:	685b      	ldreq	r3, [r3, #4]
   28710:	1809      	addeq	r1, r1, r0
   28712:	6021      	streq	r1, [r4, #0]
   28714:	e7ed      	b.n	286f2 <_free_r+0x1e>
   28716:	461a      	mov	r2, r3
   28718:	685b      	ldr	r3, [r3, #4]
   2871a:	b10b      	cbz	r3, 28720 <_free_r+0x4c>
   2871c:	42a3      	cmp	r3, r4
   2871e:	d9fa      	bls.n	28716 <_free_r+0x42>
   28720:	6811      	ldr	r1, [r2, #0]
   28722:	1850      	adds	r0, r2, r1
   28724:	42a0      	cmp	r0, r4
   28726:	d10b      	bne.n	28740 <_free_r+0x6c>
   28728:	6820      	ldr	r0, [r4, #0]
   2872a:	4401      	add	r1, r0
   2872c:	1850      	adds	r0, r2, r1
   2872e:	6011      	str	r1, [r2, #0]
   28730:	4283      	cmp	r3, r0
   28732:	d1e0      	bne.n	286f6 <_free_r+0x22>
   28734:	6818      	ldr	r0, [r3, #0]
   28736:	685b      	ldr	r3, [r3, #4]
   28738:	4408      	add	r0, r1
   2873a:	6053      	str	r3, [r2, #4]
   2873c:	6010      	str	r0, [r2, #0]
   2873e:	e7da      	b.n	286f6 <_free_r+0x22>
   28740:	d902      	bls.n	28748 <_free_r+0x74>
   28742:	230c      	movs	r3, #12
   28744:	602b      	str	r3, [r5, #0]
   28746:	e7d6      	b.n	286f6 <_free_r+0x22>
   28748:	6820      	ldr	r0, [r4, #0]
   2874a:	1821      	adds	r1, r4, r0
   2874c:	428b      	cmp	r3, r1
   2874e:	bf02      	ittt	eq
   28750:	6819      	ldreq	r1, [r3, #0]
   28752:	685b      	ldreq	r3, [r3, #4]
   28754:	1809      	addeq	r1, r1, r0
   28756:	6063      	str	r3, [r4, #4]
   28758:	bf08      	it	eq
   2875a:	6021      	streq	r1, [r4, #0]
   2875c:	6054      	str	r4, [r2, #4]
   2875e:	e7ca      	b.n	286f6 <_free_r+0x22>
   28760:	bd38      	pop	{r3, r4, r5, pc}
   28762:	bf00      	nop
   28764:	20021ae8 	.word	0x20021ae8

00028768 <_malloc_r>:
   28768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2876a:	1ccd      	adds	r5, r1, #3
   2876c:	4606      	mov	r6, r0
   2876e:	f025 0503 	bic.w	r5, r5, #3
   28772:	3508      	adds	r5, #8
   28774:	2d0c      	cmp	r5, #12
   28776:	bf38      	it	cc
   28778:	250c      	movcc	r5, #12
   2877a:	2d00      	cmp	r5, #0
   2877c:	db01      	blt.n	28782 <_malloc_r+0x1a>
   2877e:	42a9      	cmp	r1, r5
   28780:	d903      	bls.n	2878a <_malloc_r+0x22>
   28782:	230c      	movs	r3, #12
   28784:	6033      	str	r3, [r6, #0]
   28786:	2000      	movs	r0, #0
   28788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2878a:	f000 fd43 	bl	29214 <__malloc_lock>
   2878e:	4921      	ldr	r1, [pc, #132]	; (28814 <_malloc_r+0xac>)
   28790:	680a      	ldr	r2, [r1, #0]
   28792:	4614      	mov	r4, r2
   28794:	b99c      	cbnz	r4, 287be <_malloc_r+0x56>
   28796:	4f20      	ldr	r7, [pc, #128]	; (28818 <_malloc_r+0xb0>)
   28798:	683b      	ldr	r3, [r7, #0]
   2879a:	b923      	cbnz	r3, 287a6 <_malloc_r+0x3e>
   2879c:	4621      	mov	r1, r4
   2879e:	4630      	mov	r0, r6
   287a0:	f000 fbb8 	bl	28f14 <_sbrk_r>
   287a4:	6038      	str	r0, [r7, #0]
   287a6:	4629      	mov	r1, r5
   287a8:	4630      	mov	r0, r6
   287aa:	f000 fbb3 	bl	28f14 <_sbrk_r>
   287ae:	1c43      	adds	r3, r0, #1
   287b0:	d123      	bne.n	287fa <_malloc_r+0x92>
   287b2:	230c      	movs	r3, #12
   287b4:	4630      	mov	r0, r6
   287b6:	6033      	str	r3, [r6, #0]
   287b8:	f000 fd32 	bl	29220 <__malloc_unlock>
   287bc:	e7e3      	b.n	28786 <_malloc_r+0x1e>
   287be:	6823      	ldr	r3, [r4, #0]
   287c0:	1b5b      	subs	r3, r3, r5
   287c2:	d417      	bmi.n	287f4 <_malloc_r+0x8c>
   287c4:	2b0b      	cmp	r3, #11
   287c6:	d903      	bls.n	287d0 <_malloc_r+0x68>
   287c8:	6023      	str	r3, [r4, #0]
   287ca:	441c      	add	r4, r3
   287cc:	6025      	str	r5, [r4, #0]
   287ce:	e004      	b.n	287da <_malloc_r+0x72>
   287d0:	6863      	ldr	r3, [r4, #4]
   287d2:	42a2      	cmp	r2, r4
   287d4:	bf0c      	ite	eq
   287d6:	600b      	streq	r3, [r1, #0]
   287d8:	6053      	strne	r3, [r2, #4]
   287da:	4630      	mov	r0, r6
   287dc:	f000 fd20 	bl	29220 <__malloc_unlock>
   287e0:	f104 000b 	add.w	r0, r4, #11
   287e4:	1d23      	adds	r3, r4, #4
   287e6:	f020 0007 	bic.w	r0, r0, #7
   287ea:	1ac2      	subs	r2, r0, r3
   287ec:	bf1c      	itt	ne
   287ee:	1a1b      	subne	r3, r3, r0
   287f0:	50a3      	strne	r3, [r4, r2]
   287f2:	e7c9      	b.n	28788 <_malloc_r+0x20>
   287f4:	4622      	mov	r2, r4
   287f6:	6864      	ldr	r4, [r4, #4]
   287f8:	e7cc      	b.n	28794 <_malloc_r+0x2c>
   287fa:	1cc4      	adds	r4, r0, #3
   287fc:	f024 0403 	bic.w	r4, r4, #3
   28800:	42a0      	cmp	r0, r4
   28802:	d0e3      	beq.n	287cc <_malloc_r+0x64>
   28804:	1a21      	subs	r1, r4, r0
   28806:	4630      	mov	r0, r6
   28808:	f000 fb84 	bl	28f14 <_sbrk_r>
   2880c:	3001      	adds	r0, #1
   2880e:	d1dd      	bne.n	287cc <_malloc_r+0x64>
   28810:	e7cf      	b.n	287b2 <_malloc_r+0x4a>
   28812:	bf00      	nop
   28814:	20021ae8 	.word	0x20021ae8
   28818:	20021ae4 	.word	0x20021ae4

0002881c <_printf_float>:
   2881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28820:	b091      	sub	sp, #68	; 0x44
   28822:	460c      	mov	r4, r1
   28824:	4616      	mov	r6, r2
   28826:	461f      	mov	r7, r3
   28828:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   2882c:	4605      	mov	r5, r0
   2882e:	f000 fced 	bl	2920c <_localeconv_r>
   28832:	6803      	ldr	r3, [r0, #0]
   28834:	4618      	mov	r0, r3
   28836:	9308      	str	r3, [sp, #32]
   28838:	f7e0 fda5 	bl	9386 <strlen>
   2883c:	2300      	movs	r3, #0
   2883e:	9009      	str	r0, [sp, #36]	; 0x24
   28840:	930e      	str	r3, [sp, #56]	; 0x38
   28842:	f8d8 3000 	ldr.w	r3, [r8]
   28846:	f894 a018 	ldrb.w	sl, [r4, #24]
   2884a:	3307      	adds	r3, #7
   2884c:	f8d4 b000 	ldr.w	fp, [r4]
   28850:	f023 0307 	bic.w	r3, r3, #7
   28854:	f103 0208 	add.w	r2, r3, #8
   28858:	f8c8 2000 	str.w	r2, [r8]
   2885c:	f04f 32ff 	mov.w	r2, #4294967295
   28860:	e9d3 8900 	ldrd	r8, r9, [r3]
   28864:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   28868:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   2886c:	930b      	str	r3, [sp, #44]	; 0x2c
   2886e:	4b9d      	ldr	r3, [pc, #628]	; (28ae4 <_printf_float+0x2c8>)
   28870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   28874:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   28878:	f7e0 fbdc 	bl	9034 <__aeabi_dcmpun>
   2887c:	bb70      	cbnz	r0, 288dc <_printf_float+0xc0>
   2887e:	f04f 32ff 	mov.w	r2, #4294967295
   28882:	4b98      	ldr	r3, [pc, #608]	; (28ae4 <_printf_float+0x2c8>)
   28884:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   28888:	f7e0 fbb6 	bl	8ff8 <__aeabi_dcmple>
   2888c:	bb30      	cbnz	r0, 288dc <_printf_float+0xc0>
   2888e:	2200      	movs	r2, #0
   28890:	2300      	movs	r3, #0
   28892:	4640      	mov	r0, r8
   28894:	4649      	mov	r1, r9
   28896:	f7e0 fba5 	bl	8fe4 <__aeabi_dcmplt>
   2889a:	b110      	cbz	r0, 288a2 <_printf_float+0x86>
   2889c:	232d      	movs	r3, #45	; 0x2d
   2889e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   288a2:	4a91      	ldr	r2, [pc, #580]	; (28ae8 <_printf_float+0x2cc>)
   288a4:	4b91      	ldr	r3, [pc, #580]	; (28aec <_printf_float+0x2d0>)
   288a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   288aa:	bf94      	ite	ls
   288ac:	4690      	movls	r8, r2
   288ae:	4698      	movhi	r8, r3
   288b0:	2303      	movs	r3, #3
   288b2:	f04f 0900 	mov.w	r9, #0
   288b6:	6123      	str	r3, [r4, #16]
   288b8:	f02b 0304 	bic.w	r3, fp, #4
   288bc:	6023      	str	r3, [r4, #0]
   288be:	4633      	mov	r3, r6
   288c0:	aa0f      	add	r2, sp, #60	; 0x3c
   288c2:	4621      	mov	r1, r4
   288c4:	4628      	mov	r0, r5
   288c6:	9700      	str	r7, [sp, #0]
   288c8:	f007 ff41 	bl	3074e <_printf_common>
   288cc:	3001      	adds	r0, #1
   288ce:	f040 8099 	bne.w	28a04 <_printf_float+0x1e8>
   288d2:	f04f 30ff 	mov.w	r0, #4294967295
   288d6:	b011      	add	sp, #68	; 0x44
   288d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288dc:	4642      	mov	r2, r8
   288de:	464b      	mov	r3, r9
   288e0:	4640      	mov	r0, r8
   288e2:	4649      	mov	r1, r9
   288e4:	f7e0 fba6 	bl	9034 <__aeabi_dcmpun>
   288e8:	b140      	cbz	r0, 288fc <_printf_float+0xe0>
   288ea:	464b      	mov	r3, r9
   288ec:	4a80      	ldr	r2, [pc, #512]	; (28af0 <_printf_float+0x2d4>)
   288ee:	2b00      	cmp	r3, #0
   288f0:	bfbc      	itt	lt
   288f2:	232d      	movlt	r3, #45	; 0x2d
   288f4:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   288f8:	4b7e      	ldr	r3, [pc, #504]	; (28af4 <_printf_float+0x2d8>)
   288fa:	e7d4      	b.n	288a6 <_printf_float+0x8a>
   288fc:	6863      	ldr	r3, [r4, #4]
   288fe:	1c5a      	adds	r2, r3, #1
   28900:	d129      	bne.n	28956 <_printf_float+0x13a>
   28902:	2306      	movs	r3, #6
   28904:	6063      	str	r3, [r4, #4]
   28906:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2890a:	2200      	movs	r2, #0
   2890c:	4628      	mov	r0, r5
   2890e:	6023      	str	r3, [r4, #0]
   28910:	9206      	str	r2, [sp, #24]
   28912:	aa0e      	add	r2, sp, #56	; 0x38
   28914:	e9cd a204 	strd	sl, r2, [sp, #16]
   28918:	aa0d      	add	r2, sp, #52	; 0x34
   2891a:	9203      	str	r2, [sp, #12]
   2891c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   28920:	e9cd 3201 	strd	r3, r2, [sp, #4]
   28924:	6863      	ldr	r3, [r4, #4]
   28926:	4642      	mov	r2, r8
   28928:	9300      	str	r3, [sp, #0]
   2892a:	464b      	mov	r3, r9
   2892c:	f007 fe6f 	bl	3060e <__cvt>
   28930:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   28934:	4680      	mov	r8, r0
   28936:	990d      	ldr	r1, [sp, #52]	; 0x34
   28938:	d115      	bne.n	28966 <_printf_float+0x14a>
   2893a:	1ccb      	adds	r3, r1, #3
   2893c:	db3b      	blt.n	289b6 <_printf_float+0x19a>
   2893e:	6863      	ldr	r3, [r4, #4]
   28940:	4299      	cmp	r1, r3
   28942:	dc38      	bgt.n	289b6 <_printf_float+0x19a>
   28944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28946:	4299      	cmp	r1, r3
   28948:	db55      	blt.n	289f6 <_printf_float+0x1da>
   2894a:	6823      	ldr	r3, [r4, #0]
   2894c:	6121      	str	r1, [r4, #16]
   2894e:	07d8      	lsls	r0, r3, #31
   28950:	d545      	bpl.n	289de <_printf_float+0x1c2>
   28952:	1c4b      	adds	r3, r1, #1
   28954:	e042      	b.n	289dc <_printf_float+0x1c0>
   28956:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   2895a:	2a47      	cmp	r2, #71	; 0x47
   2895c:	d1d3      	bne.n	28906 <_printf_float+0xea>
   2895e:	2b00      	cmp	r3, #0
   28960:	d1d1      	bne.n	28906 <_printf_float+0xea>
   28962:	2301      	movs	r3, #1
   28964:	e7ce      	b.n	28904 <_printf_float+0xe8>
   28966:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2896a:	d107      	bne.n	2897c <_printf_float+0x160>
   2896c:	1cc8      	adds	r0, r1, #3
   2896e:	db25      	blt.n	289bc <_printf_float+0x1a0>
   28970:	6863      	ldr	r3, [r4, #4]
   28972:	428b      	cmp	r3, r1
   28974:	db22      	blt.n	289bc <_printf_float+0x1a0>
   28976:	f04f 0a67 	mov.w	sl, #103	; 0x67
   2897a:	e7e3      	b.n	28944 <_printf_float+0x128>
   2897c:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   28980:	d81f      	bhi.n	289c2 <_printf_float+0x1a6>
   28982:	3901      	subs	r1, #1
   28984:	4652      	mov	r2, sl
   28986:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2898a:	910d      	str	r1, [sp, #52]	; 0x34
   2898c:	f007 fea6 	bl	306dc <__exponent>
   28990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   28992:	4681      	mov	r9, r0
   28994:	1813      	adds	r3, r2, r0
   28996:	2a01      	cmp	r2, #1
   28998:	6123      	str	r3, [r4, #16]
   2899a:	dc02      	bgt.n	289a2 <_printf_float+0x186>
   2899c:	6822      	ldr	r2, [r4, #0]
   2899e:	07d2      	lsls	r2, r2, #31
   289a0:	d501      	bpl.n	289a6 <_printf_float+0x18a>
   289a2:	3301      	adds	r3, #1
   289a4:	6123      	str	r3, [r4, #16]
   289a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   289aa:	2b00      	cmp	r3, #0
   289ac:	d087      	beq.n	288be <_printf_float+0xa2>
   289ae:	232d      	movs	r3, #45	; 0x2d
   289b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   289b4:	e783      	b.n	288be <_printf_float+0xa2>
   289b6:	f04f 0a65 	mov.w	sl, #101	; 0x65
   289ba:	e7e2      	b.n	28982 <_printf_float+0x166>
   289bc:	f04f 0a45 	mov.w	sl, #69	; 0x45
   289c0:	e7df      	b.n	28982 <_printf_float+0x166>
   289c2:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   289c6:	d1bd      	bne.n	28944 <_printf_float+0x128>
   289c8:	2900      	cmp	r1, #0
   289ca:	6863      	ldr	r3, [r4, #4]
   289cc:	dd0b      	ble.n	289e6 <_printf_float+0x1ca>
   289ce:	6121      	str	r1, [r4, #16]
   289d0:	b913      	cbnz	r3, 289d8 <_printf_float+0x1bc>
   289d2:	6822      	ldr	r2, [r4, #0]
   289d4:	07d0      	lsls	r0, r2, #31
   289d6:	d502      	bpl.n	289de <_printf_float+0x1c2>
   289d8:	3301      	adds	r3, #1
   289da:	440b      	add	r3, r1
   289dc:	6123      	str	r3, [r4, #16]
   289de:	f04f 0900 	mov.w	r9, #0
   289e2:	65a1      	str	r1, [r4, #88]	; 0x58
   289e4:	e7df      	b.n	289a6 <_printf_float+0x18a>
   289e6:	b913      	cbnz	r3, 289ee <_printf_float+0x1d2>
   289e8:	6822      	ldr	r2, [r4, #0]
   289ea:	07d2      	lsls	r2, r2, #31
   289ec:	d501      	bpl.n	289f2 <_printf_float+0x1d6>
   289ee:	3302      	adds	r3, #2
   289f0:	e7f4      	b.n	289dc <_printf_float+0x1c0>
   289f2:	2301      	movs	r3, #1
   289f4:	e7f2      	b.n	289dc <_printf_float+0x1c0>
   289f6:	2900      	cmp	r1, #0
   289f8:	bfd4      	ite	le
   289fa:	f1c1 0202 	rsble	r2, r1, #2
   289fe:	2201      	movgt	r2, #1
   28a00:	4413      	add	r3, r2
   28a02:	e7eb      	b.n	289dc <_printf_float+0x1c0>
   28a04:	6823      	ldr	r3, [r4, #0]
   28a06:	055a      	lsls	r2, r3, #21
   28a08:	d407      	bmi.n	28a1a <_printf_float+0x1fe>
   28a0a:	6923      	ldr	r3, [r4, #16]
   28a0c:	4642      	mov	r2, r8
   28a0e:	4631      	mov	r1, r6
   28a10:	4628      	mov	r0, r5
   28a12:	47b8      	blx	r7
   28a14:	3001      	adds	r0, #1
   28a16:	d12b      	bne.n	28a70 <_printf_float+0x254>
   28a18:	e75b      	b.n	288d2 <_printf_float+0xb6>
   28a1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   28a1e:	f240 80dc 	bls.w	28bda <_printf_float+0x3be>
   28a22:	2200      	movs	r2, #0
   28a24:	2300      	movs	r3, #0
   28a26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   28a2a:	f7e0 fad1 	bl	8fd0 <__aeabi_dcmpeq>
   28a2e:	2800      	cmp	r0, #0
   28a30:	d033      	beq.n	28a9a <_printf_float+0x27e>
   28a32:	2301      	movs	r3, #1
   28a34:	4a30      	ldr	r2, [pc, #192]	; (28af8 <_printf_float+0x2dc>)
   28a36:	4631      	mov	r1, r6
   28a38:	4628      	mov	r0, r5
   28a3a:	47b8      	blx	r7
   28a3c:	3001      	adds	r0, #1
   28a3e:	f43f af48 	beq.w	288d2 <_printf_float+0xb6>
   28a42:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   28a46:	4543      	cmp	r3, r8
   28a48:	db02      	blt.n	28a50 <_printf_float+0x234>
   28a4a:	6823      	ldr	r3, [r4, #0]
   28a4c:	07d8      	lsls	r0, r3, #31
   28a4e:	d50f      	bpl.n	28a70 <_printf_float+0x254>
   28a50:	4631      	mov	r1, r6
   28a52:	4628      	mov	r0, r5
   28a54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28a58:	47b8      	blx	r7
   28a5a:	3001      	adds	r0, #1
   28a5c:	f43f af39 	beq.w	288d2 <_printf_float+0xb6>
   28a60:	f04f 0900 	mov.w	r9, #0
   28a64:	f108 38ff 	add.w	r8, r8, #4294967295
   28a68:	f104 0a1a 	add.w	sl, r4, #26
   28a6c:	45c8      	cmp	r8, r9
   28a6e:	dc09      	bgt.n	28a84 <_printf_float+0x268>
   28a70:	6823      	ldr	r3, [r4, #0]
   28a72:	079b      	lsls	r3, r3, #30
   28a74:	f100 8102 	bmi.w	28c7c <_printf_float+0x460>
   28a78:	68e0      	ldr	r0, [r4, #12]
   28a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   28a7c:	4298      	cmp	r0, r3
   28a7e:	bfb8      	it	lt
   28a80:	4618      	movlt	r0, r3
   28a82:	e728      	b.n	288d6 <_printf_float+0xba>
   28a84:	2301      	movs	r3, #1
   28a86:	4652      	mov	r2, sl
   28a88:	4631      	mov	r1, r6
   28a8a:	4628      	mov	r0, r5
   28a8c:	47b8      	blx	r7
   28a8e:	3001      	adds	r0, #1
   28a90:	f43f af1f 	beq.w	288d2 <_printf_float+0xb6>
   28a94:	f109 0901 	add.w	r9, r9, #1
   28a98:	e7e8      	b.n	28a6c <_printf_float+0x250>
   28a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28a9c:	2b00      	cmp	r3, #0
   28a9e:	dc38      	bgt.n	28b12 <_printf_float+0x2f6>
   28aa0:	2301      	movs	r3, #1
   28aa2:	4a15      	ldr	r2, [pc, #84]	; (28af8 <_printf_float+0x2dc>)
   28aa4:	4631      	mov	r1, r6
   28aa6:	4628      	mov	r0, r5
   28aa8:	47b8      	blx	r7
   28aaa:	3001      	adds	r0, #1
   28aac:	f43f af11 	beq.w	288d2 <_printf_float+0xb6>
   28ab0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   28ab4:	ea59 0303 	orrs.w	r3, r9, r3
   28ab8:	d102      	bne.n	28ac0 <_printf_float+0x2a4>
   28aba:	6823      	ldr	r3, [r4, #0]
   28abc:	07d9      	lsls	r1, r3, #31
   28abe:	d5d7      	bpl.n	28a70 <_printf_float+0x254>
   28ac0:	4631      	mov	r1, r6
   28ac2:	4628      	mov	r0, r5
   28ac4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28ac8:	47b8      	blx	r7
   28aca:	3001      	adds	r0, #1
   28acc:	f43f af01 	beq.w	288d2 <_printf_float+0xb6>
   28ad0:	f04f 0a00 	mov.w	sl, #0
   28ad4:	f104 0b1a 	add.w	fp, r4, #26
   28ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28ada:	425b      	negs	r3, r3
   28adc:	4553      	cmp	r3, sl
   28ade:	dc0d      	bgt.n	28afc <_printf_float+0x2e0>
   28ae0:	464b      	mov	r3, r9
   28ae2:	e793      	b.n	28a0c <_printf_float+0x1f0>
   28ae4:	7fefffff 	.word	0x7fefffff
   28ae8:	00038cb5 	.word	0x00038cb5
   28aec:	000338f1 	.word	0x000338f1
   28af0:	00038cb9 	.word	0x00038cb9
   28af4:	00038cbd 	.word	0x00038cbd
   28af8:	00037b2a 	.word	0x00037b2a
   28afc:	2301      	movs	r3, #1
   28afe:	465a      	mov	r2, fp
   28b00:	4631      	mov	r1, r6
   28b02:	4628      	mov	r0, r5
   28b04:	47b8      	blx	r7
   28b06:	3001      	adds	r0, #1
   28b08:	f43f aee3 	beq.w	288d2 <_printf_float+0xb6>
   28b0c:	f10a 0a01 	add.w	sl, sl, #1
   28b10:	e7e2      	b.n	28ad8 <_printf_float+0x2bc>
   28b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28b14:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   28b18:	4553      	cmp	r3, sl
   28b1a:	bfa8      	it	ge
   28b1c:	4653      	movge	r3, sl
   28b1e:	2b00      	cmp	r3, #0
   28b20:	4699      	mov	r9, r3
   28b22:	dc36      	bgt.n	28b92 <_printf_float+0x376>
   28b24:	f04f 0b00 	mov.w	fp, #0
   28b28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   28b2c:	f104 021a 	add.w	r2, r4, #26
   28b30:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28b32:	930a      	str	r3, [sp, #40]	; 0x28
   28b34:	eba3 0309 	sub.w	r3, r3, r9
   28b38:	455b      	cmp	r3, fp
   28b3a:	dc31      	bgt.n	28ba0 <_printf_float+0x384>
   28b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28b3e:	459a      	cmp	sl, r3
   28b40:	dc3a      	bgt.n	28bb8 <_printf_float+0x39c>
   28b42:	6823      	ldr	r3, [r4, #0]
   28b44:	07da      	lsls	r2, r3, #31
   28b46:	d437      	bmi.n	28bb8 <_printf_float+0x39c>
   28b48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28b4a:	ebaa 0903 	sub.w	r9, sl, r3
   28b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28b50:	ebaa 0303 	sub.w	r3, sl, r3
   28b54:	4599      	cmp	r9, r3
   28b56:	bfa8      	it	ge
   28b58:	4699      	movge	r9, r3
   28b5a:	f1b9 0f00 	cmp.w	r9, #0
   28b5e:	dc33      	bgt.n	28bc8 <_printf_float+0x3ac>
   28b60:	f04f 0800 	mov.w	r8, #0
   28b64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   28b68:	f104 0b1a 	add.w	fp, r4, #26
   28b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28b6e:	ebaa 0303 	sub.w	r3, sl, r3
   28b72:	eba3 0309 	sub.w	r3, r3, r9
   28b76:	4543      	cmp	r3, r8
   28b78:	f77f af7a 	ble.w	28a70 <_printf_float+0x254>
   28b7c:	2301      	movs	r3, #1
   28b7e:	465a      	mov	r2, fp
   28b80:	4631      	mov	r1, r6
   28b82:	4628      	mov	r0, r5
   28b84:	47b8      	blx	r7
   28b86:	3001      	adds	r0, #1
   28b88:	f43f aea3 	beq.w	288d2 <_printf_float+0xb6>
   28b8c:	f108 0801 	add.w	r8, r8, #1
   28b90:	e7ec      	b.n	28b6c <_printf_float+0x350>
   28b92:	4642      	mov	r2, r8
   28b94:	4631      	mov	r1, r6
   28b96:	4628      	mov	r0, r5
   28b98:	47b8      	blx	r7
   28b9a:	3001      	adds	r0, #1
   28b9c:	d1c2      	bne.n	28b24 <_printf_float+0x308>
   28b9e:	e698      	b.n	288d2 <_printf_float+0xb6>
   28ba0:	2301      	movs	r3, #1
   28ba2:	4631      	mov	r1, r6
   28ba4:	4628      	mov	r0, r5
   28ba6:	920a      	str	r2, [sp, #40]	; 0x28
   28ba8:	47b8      	blx	r7
   28baa:	3001      	adds	r0, #1
   28bac:	f43f ae91 	beq.w	288d2 <_printf_float+0xb6>
   28bb0:	f10b 0b01 	add.w	fp, fp, #1
   28bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28bb6:	e7bb      	b.n	28b30 <_printf_float+0x314>
   28bb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28bbc:	4631      	mov	r1, r6
   28bbe:	4628      	mov	r0, r5
   28bc0:	47b8      	blx	r7
   28bc2:	3001      	adds	r0, #1
   28bc4:	d1c0      	bne.n	28b48 <_printf_float+0x32c>
   28bc6:	e684      	b.n	288d2 <_printf_float+0xb6>
   28bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28bca:	464b      	mov	r3, r9
   28bcc:	4631      	mov	r1, r6
   28bce:	4628      	mov	r0, r5
   28bd0:	4442      	add	r2, r8
   28bd2:	47b8      	blx	r7
   28bd4:	3001      	adds	r0, #1
   28bd6:	d1c3      	bne.n	28b60 <_printf_float+0x344>
   28bd8:	e67b      	b.n	288d2 <_printf_float+0xb6>
   28bda:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   28bde:	f1ba 0f01 	cmp.w	sl, #1
   28be2:	dc01      	bgt.n	28be8 <_printf_float+0x3cc>
   28be4:	07db      	lsls	r3, r3, #31
   28be6:	d536      	bpl.n	28c56 <_printf_float+0x43a>
   28be8:	2301      	movs	r3, #1
   28bea:	4642      	mov	r2, r8
   28bec:	4631      	mov	r1, r6
   28bee:	4628      	mov	r0, r5
   28bf0:	47b8      	blx	r7
   28bf2:	3001      	adds	r0, #1
   28bf4:	f43f ae6d 	beq.w	288d2 <_printf_float+0xb6>
   28bf8:	4631      	mov	r1, r6
   28bfa:	4628      	mov	r0, r5
   28bfc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28c00:	47b8      	blx	r7
   28c02:	3001      	adds	r0, #1
   28c04:	f43f ae65 	beq.w	288d2 <_printf_float+0xb6>
   28c08:	2200      	movs	r2, #0
   28c0a:	2300      	movs	r3, #0
   28c0c:	f10a 3aff 	add.w	sl, sl, #4294967295
   28c10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   28c14:	f7e0 f9dc 	bl	8fd0 <__aeabi_dcmpeq>
   28c18:	b9c0      	cbnz	r0, 28c4c <_printf_float+0x430>
   28c1a:	4653      	mov	r3, sl
   28c1c:	f108 0201 	add.w	r2, r8, #1
   28c20:	4631      	mov	r1, r6
   28c22:	4628      	mov	r0, r5
   28c24:	47b8      	blx	r7
   28c26:	3001      	adds	r0, #1
   28c28:	d10c      	bne.n	28c44 <_printf_float+0x428>
   28c2a:	e652      	b.n	288d2 <_printf_float+0xb6>
   28c2c:	2301      	movs	r3, #1
   28c2e:	465a      	mov	r2, fp
   28c30:	4631      	mov	r1, r6
   28c32:	4628      	mov	r0, r5
   28c34:	47b8      	blx	r7
   28c36:	3001      	adds	r0, #1
   28c38:	f43f ae4b 	beq.w	288d2 <_printf_float+0xb6>
   28c3c:	f108 0801 	add.w	r8, r8, #1
   28c40:	45d0      	cmp	r8, sl
   28c42:	dbf3      	blt.n	28c2c <_printf_float+0x410>
   28c44:	464b      	mov	r3, r9
   28c46:	f104 0250 	add.w	r2, r4, #80	; 0x50
   28c4a:	e6e0      	b.n	28a0e <_printf_float+0x1f2>
   28c4c:	f04f 0800 	mov.w	r8, #0
   28c50:	f104 0b1a 	add.w	fp, r4, #26
   28c54:	e7f4      	b.n	28c40 <_printf_float+0x424>
   28c56:	2301      	movs	r3, #1
   28c58:	4642      	mov	r2, r8
   28c5a:	e7e1      	b.n	28c20 <_printf_float+0x404>
   28c5c:	2301      	movs	r3, #1
   28c5e:	464a      	mov	r2, r9
   28c60:	4631      	mov	r1, r6
   28c62:	4628      	mov	r0, r5
   28c64:	47b8      	blx	r7
   28c66:	3001      	adds	r0, #1
   28c68:	f43f ae33 	beq.w	288d2 <_printf_float+0xb6>
   28c6c:	f108 0801 	add.w	r8, r8, #1
   28c70:	68e3      	ldr	r3, [r4, #12]
   28c72:	990f      	ldr	r1, [sp, #60]	; 0x3c
   28c74:	1a5b      	subs	r3, r3, r1
   28c76:	4543      	cmp	r3, r8
   28c78:	dcf0      	bgt.n	28c5c <_printf_float+0x440>
   28c7a:	e6fd      	b.n	28a78 <_printf_float+0x25c>
   28c7c:	f04f 0800 	mov.w	r8, #0
   28c80:	f104 0919 	add.w	r9, r4, #25
   28c84:	e7f4      	b.n	28c70 <_printf_float+0x454>
   28c86:	bf00      	nop

00028c88 <_printf_i>:
   28c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   28c8c:	7e0f      	ldrb	r7, [r1, #24]
   28c8e:	4691      	mov	r9, r2
   28c90:	4680      	mov	r8, r0
   28c92:	460c      	mov	r4, r1
   28c94:	2f78      	cmp	r7, #120	; 0x78
   28c96:	469a      	mov	sl, r3
   28c98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   28c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   28c9e:	d807      	bhi.n	28cb0 <_printf_i+0x28>
   28ca0:	2f62      	cmp	r7, #98	; 0x62
   28ca2:	d80a      	bhi.n	28cba <_printf_i+0x32>
   28ca4:	2f00      	cmp	r7, #0
   28ca6:	f000 80e0 	beq.w	28e6a <_printf_i+0x1e2>
   28caa:	2f58      	cmp	r7, #88	; 0x58
   28cac:	f000 80bb 	beq.w	28e26 <_printf_i+0x19e>
   28cb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   28cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   28cb8:	e03a      	b.n	28d30 <_printf_i+0xa8>
   28cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   28cbe:	2b15      	cmp	r3, #21
   28cc0:	d8f6      	bhi.n	28cb0 <_printf_i+0x28>
   28cc2:	a101      	add	r1, pc, #4	; (adr r1, 28cc8 <_printf_i+0x40>)
   28cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   28cc8:	00028d21 	.word	0x00028d21
   28ccc:	00028d35 	.word	0x00028d35
   28cd0:	00028cb1 	.word	0x00028cb1
   28cd4:	00028cb1 	.word	0x00028cb1
   28cd8:	00028cb1 	.word	0x00028cb1
   28cdc:	00028cb1 	.word	0x00028cb1
   28ce0:	00028d35 	.word	0x00028d35
   28ce4:	00028cb1 	.word	0x00028cb1
   28ce8:	00028cb1 	.word	0x00028cb1
   28cec:	00028cb1 	.word	0x00028cb1
   28cf0:	00028cb1 	.word	0x00028cb1
   28cf4:	00028e51 	.word	0x00028e51
   28cf8:	00028dc5 	.word	0x00028dc5
   28cfc:	00028e07 	.word	0x00028e07
   28d00:	00028cb1 	.word	0x00028cb1
   28d04:	00028cb1 	.word	0x00028cb1
   28d08:	00028e73 	.word	0x00028e73
   28d0c:	00028cb1 	.word	0x00028cb1
   28d10:	00028dc5 	.word	0x00028dc5
   28d14:	00028cb1 	.word	0x00028cb1
   28d18:	00028cb1 	.word	0x00028cb1
   28d1c:	00028e0f 	.word	0x00028e0f
   28d20:	682b      	ldr	r3, [r5, #0]
   28d22:	f104 0642 	add.w	r6, r4, #66	; 0x42
   28d26:	1d1a      	adds	r2, r3, #4
   28d28:	681b      	ldr	r3, [r3, #0]
   28d2a:	602a      	str	r2, [r5, #0]
   28d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   28d30:	2301      	movs	r3, #1
   28d32:	e0ab      	b.n	28e8c <_printf_i+0x204>
   28d34:	6823      	ldr	r3, [r4, #0]
   28d36:	6829      	ldr	r1, [r5, #0]
   28d38:	061f      	lsls	r7, r3, #24
   28d3a:	f101 0004 	add.w	r0, r1, #4
   28d3e:	6028      	str	r0, [r5, #0]
   28d40:	d501      	bpl.n	28d46 <_printf_i+0xbe>
   28d42:	680d      	ldr	r5, [r1, #0]
   28d44:	e003      	b.n	28d4e <_printf_i+0xc6>
   28d46:	065e      	lsls	r6, r3, #25
   28d48:	d5fb      	bpl.n	28d42 <_printf_i+0xba>
   28d4a:	f9b1 5000 	ldrsh.w	r5, [r1]
   28d4e:	2d00      	cmp	r5, #0
   28d50:	6861      	ldr	r1, [r4, #4]
   28d52:	da7a      	bge.n	28e4a <_printf_i+0x1c2>
   28d54:	202d      	movs	r0, #45	; 0x2d
   28d56:	2900      	cmp	r1, #0
   28d58:	60a1      	str	r1, [r4, #8]
   28d5a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   28d5e:	da2d      	bge.n	28dbc <_printf_i+0x134>
   28d60:	426d      	negs	r5, r5
   28d62:	485e      	ldr	r0, [pc, #376]	; (28edc <_printf_i+0x254>)
   28d64:	230a      	movs	r3, #10
   28d66:	4616      	mov	r6, r2
   28d68:	fbb5 f1f3 	udiv	r1, r5, r3
   28d6c:	fb03 5711 	mls	r7, r3, r1, r5
   28d70:	5dc7      	ldrb	r7, [r0, r7]
   28d72:	f806 7d01 	strb.w	r7, [r6, #-1]!
   28d76:	462f      	mov	r7, r5
   28d78:	460d      	mov	r5, r1
   28d7a:	42bb      	cmp	r3, r7
   28d7c:	d9f4      	bls.n	28d68 <_printf_i+0xe0>
   28d7e:	2b08      	cmp	r3, #8
   28d80:	d10b      	bne.n	28d9a <_printf_i+0x112>
   28d82:	6823      	ldr	r3, [r4, #0]
   28d84:	07df      	lsls	r7, r3, #31
   28d86:	d508      	bpl.n	28d9a <_printf_i+0x112>
   28d88:	6923      	ldr	r3, [r4, #16]
   28d8a:	6861      	ldr	r1, [r4, #4]
   28d8c:	4299      	cmp	r1, r3
   28d8e:	bfde      	ittt	le
   28d90:	2330      	movle	r3, #48	; 0x30
   28d92:	f806 3c01 	strble.w	r3, [r6, #-1]
   28d96:	f106 36ff 	addle.w	r6, r6, #4294967295
   28d9a:	1b92      	subs	r2, r2, r6
   28d9c:	6122      	str	r2, [r4, #16]
   28d9e:	464b      	mov	r3, r9
   28da0:	aa03      	add	r2, sp, #12
   28da2:	4621      	mov	r1, r4
   28da4:	4640      	mov	r0, r8
   28da6:	f8cd a000 	str.w	sl, [sp]
   28daa:	f007 fcd0 	bl	3074e <_printf_common>
   28dae:	3001      	adds	r0, #1
   28db0:	d171      	bne.n	28e96 <_printf_i+0x20e>
   28db2:	f04f 30ff 	mov.w	r0, #4294967295
   28db6:	b004      	add	sp, #16
   28db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28dbc:	f023 0304 	bic.w	r3, r3, #4
   28dc0:	6023      	str	r3, [r4, #0]
   28dc2:	e7cd      	b.n	28d60 <_printf_i+0xd8>
   28dc4:	682b      	ldr	r3, [r5, #0]
   28dc6:	6820      	ldr	r0, [r4, #0]
   28dc8:	1d19      	adds	r1, r3, #4
   28dca:	6029      	str	r1, [r5, #0]
   28dcc:	0605      	lsls	r5, r0, #24
   28dce:	d501      	bpl.n	28dd4 <_printf_i+0x14c>
   28dd0:	681d      	ldr	r5, [r3, #0]
   28dd2:	e002      	b.n	28dda <_printf_i+0x152>
   28dd4:	0641      	lsls	r1, r0, #25
   28dd6:	d5fb      	bpl.n	28dd0 <_printf_i+0x148>
   28dd8:	881d      	ldrh	r5, [r3, #0]
   28dda:	2f6f      	cmp	r7, #111	; 0x6f
   28ddc:	483f      	ldr	r0, [pc, #252]	; (28edc <_printf_i+0x254>)
   28dde:	bf14      	ite	ne
   28de0:	230a      	movne	r3, #10
   28de2:	2308      	moveq	r3, #8
   28de4:	2100      	movs	r1, #0
   28de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   28dea:	6866      	ldr	r6, [r4, #4]
   28dec:	2e00      	cmp	r6, #0
   28dee:	60a6      	str	r6, [r4, #8]
   28df0:	dbb9      	blt.n	28d66 <_printf_i+0xde>
   28df2:	6821      	ldr	r1, [r4, #0]
   28df4:	f021 0104 	bic.w	r1, r1, #4
   28df8:	6021      	str	r1, [r4, #0]
   28dfa:	2d00      	cmp	r5, #0
   28dfc:	d1b3      	bne.n	28d66 <_printf_i+0xde>
   28dfe:	2e00      	cmp	r6, #0
   28e00:	d1b1      	bne.n	28d66 <_printf_i+0xde>
   28e02:	4616      	mov	r6, r2
   28e04:	e7bb      	b.n	28d7e <_printf_i+0xf6>
   28e06:	6823      	ldr	r3, [r4, #0]
   28e08:	f043 0320 	orr.w	r3, r3, #32
   28e0c:	6023      	str	r3, [r4, #0]
   28e0e:	2778      	movs	r7, #120	; 0x78
   28e10:	4833      	ldr	r0, [pc, #204]	; (28ee0 <_printf_i+0x258>)
   28e12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   28e16:	6829      	ldr	r1, [r5, #0]
   28e18:	6823      	ldr	r3, [r4, #0]
   28e1a:	1d0e      	adds	r6, r1, #4
   28e1c:	602e      	str	r6, [r5, #0]
   28e1e:	061e      	lsls	r6, r3, #24
   28e20:	d503      	bpl.n	28e2a <_printf_i+0x1a2>
   28e22:	680d      	ldr	r5, [r1, #0]
   28e24:	e004      	b.n	28e30 <_printf_i+0x1a8>
   28e26:	482d      	ldr	r0, [pc, #180]	; (28edc <_printf_i+0x254>)
   28e28:	e7f3      	b.n	28e12 <_printf_i+0x18a>
   28e2a:	065d      	lsls	r5, r3, #25
   28e2c:	d5f9      	bpl.n	28e22 <_printf_i+0x19a>
   28e2e:	880d      	ldrh	r5, [r1, #0]
   28e30:	07d9      	lsls	r1, r3, #31
   28e32:	bf44      	itt	mi
   28e34:	f043 0320 	orrmi.w	r3, r3, #32
   28e38:	6023      	strmi	r3, [r4, #0]
   28e3a:	b10d      	cbz	r5, 28e40 <_printf_i+0x1b8>
   28e3c:	2310      	movs	r3, #16
   28e3e:	e7d1      	b.n	28de4 <_printf_i+0x15c>
   28e40:	6823      	ldr	r3, [r4, #0]
   28e42:	f023 0320 	bic.w	r3, r3, #32
   28e46:	6023      	str	r3, [r4, #0]
   28e48:	e7f8      	b.n	28e3c <_printf_i+0x1b4>
   28e4a:	4824      	ldr	r0, [pc, #144]	; (28edc <_printf_i+0x254>)
   28e4c:	230a      	movs	r3, #10
   28e4e:	e7cc      	b.n	28dea <_printf_i+0x162>
   28e50:	682b      	ldr	r3, [r5, #0]
   28e52:	6826      	ldr	r6, [r4, #0]
   28e54:	1d18      	adds	r0, r3, #4
   28e56:	6961      	ldr	r1, [r4, #20]
   28e58:	6028      	str	r0, [r5, #0]
   28e5a:	0635      	lsls	r5, r6, #24
   28e5c:	681b      	ldr	r3, [r3, #0]
   28e5e:	d501      	bpl.n	28e64 <_printf_i+0x1dc>
   28e60:	6019      	str	r1, [r3, #0]
   28e62:	e002      	b.n	28e6a <_printf_i+0x1e2>
   28e64:	0670      	lsls	r0, r6, #25
   28e66:	d5fb      	bpl.n	28e60 <_printf_i+0x1d8>
   28e68:	8019      	strh	r1, [r3, #0]
   28e6a:	2300      	movs	r3, #0
   28e6c:	4616      	mov	r6, r2
   28e6e:	6123      	str	r3, [r4, #16]
   28e70:	e795      	b.n	28d9e <_printf_i+0x116>
   28e72:	682b      	ldr	r3, [r5, #0]
   28e74:	2100      	movs	r1, #0
   28e76:	1d1a      	adds	r2, r3, #4
   28e78:	602a      	str	r2, [r5, #0]
   28e7a:	681e      	ldr	r6, [r3, #0]
   28e7c:	6862      	ldr	r2, [r4, #4]
   28e7e:	4630      	mov	r0, r6
   28e80:	f007 fb57 	bl	30532 <memchr>
   28e84:	b108      	cbz	r0, 28e8a <_printf_i+0x202>
   28e86:	1b80      	subs	r0, r0, r6
   28e88:	6060      	str	r0, [r4, #4]
   28e8a:	6863      	ldr	r3, [r4, #4]
   28e8c:	6123      	str	r3, [r4, #16]
   28e8e:	2300      	movs	r3, #0
   28e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   28e94:	e783      	b.n	28d9e <_printf_i+0x116>
   28e96:	6923      	ldr	r3, [r4, #16]
   28e98:	4632      	mov	r2, r6
   28e9a:	4649      	mov	r1, r9
   28e9c:	4640      	mov	r0, r8
   28e9e:	47d0      	blx	sl
   28ea0:	3001      	adds	r0, #1
   28ea2:	d086      	beq.n	28db2 <_printf_i+0x12a>
   28ea4:	6823      	ldr	r3, [r4, #0]
   28ea6:	079b      	lsls	r3, r3, #30
   28ea8:	d414      	bmi.n	28ed4 <_printf_i+0x24c>
   28eaa:	68e0      	ldr	r0, [r4, #12]
   28eac:	9b03      	ldr	r3, [sp, #12]
   28eae:	4298      	cmp	r0, r3
   28eb0:	bfb8      	it	lt
   28eb2:	4618      	movlt	r0, r3
   28eb4:	e77f      	b.n	28db6 <_printf_i+0x12e>
   28eb6:	2301      	movs	r3, #1
   28eb8:	4632      	mov	r2, r6
   28eba:	4649      	mov	r1, r9
   28ebc:	4640      	mov	r0, r8
   28ebe:	47d0      	blx	sl
   28ec0:	3001      	adds	r0, #1
   28ec2:	f43f af76 	beq.w	28db2 <_printf_i+0x12a>
   28ec6:	3501      	adds	r5, #1
   28ec8:	68e3      	ldr	r3, [r4, #12]
   28eca:	9903      	ldr	r1, [sp, #12]
   28ecc:	1a5b      	subs	r3, r3, r1
   28ece:	42ab      	cmp	r3, r5
   28ed0:	dcf1      	bgt.n	28eb6 <_printf_i+0x22e>
   28ed2:	e7ea      	b.n	28eaa <_printf_i+0x222>
   28ed4:	2500      	movs	r5, #0
   28ed6:	f104 0619 	add.w	r6, r4, #25
   28eda:	e7f5      	b.n	28ec8 <_printf_i+0x240>
   28edc:	00038cc1 	.word	0x00038cc1
   28ee0:	00038cd2 	.word	0x00038cd2

00028ee4 <iprintf>:
   28ee4:	b40f      	push	{r0, r1, r2, r3}
   28ee6:	4b0a      	ldr	r3, [pc, #40]	; (28f10 <iprintf+0x2c>)
   28ee8:	b513      	push	{r0, r1, r4, lr}
   28eea:	681c      	ldr	r4, [r3, #0]
   28eec:	b124      	cbz	r4, 28ef8 <iprintf+0x14>
   28eee:	69a3      	ldr	r3, [r4, #24]
   28ef0:	b913      	cbnz	r3, 28ef8 <iprintf+0x14>
   28ef2:	4620      	mov	r0, r4
   28ef4:	f000 f8fa 	bl	290ec <__sinit>
   28ef8:	ab05      	add	r3, sp, #20
   28efa:	9a04      	ldr	r2, [sp, #16]
   28efc:	68a1      	ldr	r1, [r4, #8]
   28efe:	4620      	mov	r0, r4
   28f00:	9301      	str	r3, [sp, #4]
   28f02:	f000 fcb1 	bl	29868 <_vfiprintf_r>
   28f06:	b002      	add	sp, #8
   28f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28f0c:	b004      	add	sp, #16
   28f0e:	4770      	bx	lr
   28f10:	20008754 	.word	0x20008754

00028f14 <_sbrk_r>:
   28f14:	b538      	push	{r3, r4, r5, lr}
   28f16:	2300      	movs	r3, #0
   28f18:	4d05      	ldr	r5, [pc, #20]	; (28f30 <_sbrk_r+0x1c>)
   28f1a:	4604      	mov	r4, r0
   28f1c:	4608      	mov	r0, r1
   28f1e:	602b      	str	r3, [r5, #0]
   28f20:	f7e8 fd14 	bl	1194c <_sbrk>
   28f24:	1c43      	adds	r3, r0, #1
   28f26:	d102      	bne.n	28f2e <_sbrk_r+0x1a>
   28f28:	682b      	ldr	r3, [r5, #0]
   28f2a:	b103      	cbz	r3, 28f2e <_sbrk_r+0x1a>
   28f2c:	6023      	str	r3, [r4, #0]
   28f2e:	bd38      	pop	{r3, r4, r5, pc}
   28f30:	20021aec 	.word	0x20021aec

00028f34 <_strtoul_l.constprop.0>:
   28f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28f38:	4686      	mov	lr, r0
   28f3a:	460d      	mov	r5, r1
   28f3c:	4e35      	ldr	r6, [pc, #212]	; (29014 <_strtoul_l.constprop.0+0xe0>)
   28f3e:	4628      	mov	r0, r5
   28f40:	f815 4b01 	ldrb.w	r4, [r5], #1
   28f44:	5d37      	ldrb	r7, [r6, r4]
   28f46:	f017 0708 	ands.w	r7, r7, #8
   28f4a:	d1f8      	bne.n	28f3e <_strtoul_l.constprop.0+0xa>
   28f4c:	2c2d      	cmp	r4, #45	; 0x2d
   28f4e:	d126      	bne.n	28f9e <_strtoul_l.constprop.0+0x6a>
   28f50:	782c      	ldrb	r4, [r5, #0]
   28f52:	2701      	movs	r7, #1
   28f54:	1c85      	adds	r5, r0, #2
   28f56:	bb3b      	cbnz	r3, 28fa8 <_strtoul_l.constprop.0+0x74>
   28f58:	2c30      	cmp	r4, #48	; 0x30
   28f5a:	d032      	beq.n	28fc2 <_strtoul_l.constprop.0+0x8e>
   28f5c:	230a      	movs	r3, #10
   28f5e:	f04f 38ff 	mov.w	r8, #4294967295
   28f62:	2600      	movs	r6, #0
   28f64:	fbb8 f8f3 	udiv	r8, r8, r3
   28f68:	fb03 f908 	mul.w	r9, r3, r8
   28f6c:	4630      	mov	r0, r6
   28f6e:	ea6f 0909 	mvn.w	r9, r9
   28f72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   28f76:	f1bc 0f09 	cmp.w	ip, #9
   28f7a:	d829      	bhi.n	28fd0 <_strtoul_l.constprop.0+0x9c>
   28f7c:	4664      	mov	r4, ip
   28f7e:	42a3      	cmp	r3, r4
   28f80:	dd37      	ble.n	28ff2 <_strtoul_l.constprop.0+0xbe>
   28f82:	f1b6 3fff 	cmp.w	r6, #4294967295
   28f86:	d007      	beq.n	28f98 <_strtoul_l.constprop.0+0x64>
   28f88:	4580      	cmp	r8, r0
   28f8a:	d32f      	bcc.n	28fec <_strtoul_l.constprop.0+0xb8>
   28f8c:	d101      	bne.n	28f92 <_strtoul_l.constprop.0+0x5e>
   28f8e:	45a1      	cmp	r9, r4
   28f90:	db2c      	blt.n	28fec <_strtoul_l.constprop.0+0xb8>
   28f92:	fb00 4003 	mla	r0, r0, r3, r4
   28f96:	2601      	movs	r6, #1
   28f98:	f815 4b01 	ldrb.w	r4, [r5], #1
   28f9c:	e7e9      	b.n	28f72 <_strtoul_l.constprop.0+0x3e>
   28f9e:	2c2b      	cmp	r4, #43	; 0x2b
   28fa0:	bf04      	itt	eq
   28fa2:	782c      	ldrbeq	r4, [r5, #0]
   28fa4:	1c85      	addeq	r5, r0, #2
   28fa6:	e7d6      	b.n	28f56 <_strtoul_l.constprop.0+0x22>
   28fa8:	2b10      	cmp	r3, #16
   28faa:	d1d8      	bne.n	28f5e <_strtoul_l.constprop.0+0x2a>
   28fac:	2c30      	cmp	r4, #48	; 0x30
   28fae:	d1d6      	bne.n	28f5e <_strtoul_l.constprop.0+0x2a>
   28fb0:	7828      	ldrb	r0, [r5, #0]
   28fb2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   28fb6:	2858      	cmp	r0, #88	; 0x58
   28fb8:	d1d1      	bne.n	28f5e <_strtoul_l.constprop.0+0x2a>
   28fba:	786c      	ldrb	r4, [r5, #1]
   28fbc:	2310      	movs	r3, #16
   28fbe:	3502      	adds	r5, #2
   28fc0:	e7cd      	b.n	28f5e <_strtoul_l.constprop.0+0x2a>
   28fc2:	782b      	ldrb	r3, [r5, #0]
   28fc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28fc8:	2b58      	cmp	r3, #88	; 0x58
   28fca:	d0f6      	beq.n	28fba <_strtoul_l.constprop.0+0x86>
   28fcc:	2308      	movs	r3, #8
   28fce:	e7c6      	b.n	28f5e <_strtoul_l.constprop.0+0x2a>
   28fd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   28fd4:	f1bc 0f19 	cmp.w	ip, #25
   28fd8:	d801      	bhi.n	28fde <_strtoul_l.constprop.0+0xaa>
   28fda:	3c37      	subs	r4, #55	; 0x37
   28fdc:	e7cf      	b.n	28f7e <_strtoul_l.constprop.0+0x4a>
   28fde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   28fe2:	f1bc 0f19 	cmp.w	ip, #25
   28fe6:	d804      	bhi.n	28ff2 <_strtoul_l.constprop.0+0xbe>
   28fe8:	3c57      	subs	r4, #87	; 0x57
   28fea:	e7c8      	b.n	28f7e <_strtoul_l.constprop.0+0x4a>
   28fec:	f04f 36ff 	mov.w	r6, #4294967295
   28ff0:	e7d2      	b.n	28f98 <_strtoul_l.constprop.0+0x64>
   28ff2:	1c73      	adds	r3, r6, #1
   28ff4:	d106      	bne.n	29004 <_strtoul_l.constprop.0+0xd0>
   28ff6:	2322      	movs	r3, #34	; 0x22
   28ff8:	4630      	mov	r0, r6
   28ffa:	f8ce 3000 	str.w	r3, [lr]
   28ffe:	b932      	cbnz	r2, 2900e <_strtoul_l.constprop.0+0xda>
   29000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29004:	b107      	cbz	r7, 29008 <_strtoul_l.constprop.0+0xd4>
   29006:	4240      	negs	r0, r0
   29008:	2a00      	cmp	r2, #0
   2900a:	d0f9      	beq.n	29000 <_strtoul_l.constprop.0+0xcc>
   2900c:	b106      	cbz	r6, 29010 <_strtoul_l.constprop.0+0xdc>
   2900e:	1e69      	subs	r1, r5, #1
   29010:	6011      	str	r1, [r2, #0]
   29012:	e7f5      	b.n	29000 <_strtoul_l.constprop.0+0xcc>
   29014:	00038bb5 	.word	0x00038bb5

00029018 <strtoul>:
   29018:	4613      	mov	r3, r2
   2901a:	460a      	mov	r2, r1
   2901c:	4601      	mov	r1, r0
   2901e:	4802      	ldr	r0, [pc, #8]	; (29028 <strtoul+0x10>)
   29020:	6800      	ldr	r0, [r0, #0]
   29022:	f7ff bf87 	b.w	28f34 <_strtoul_l.constprop.0>
   29026:	bf00      	nop
   29028:	20008754 	.word	0x20008754

0002902c <__assert_func>:
   2902c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2902e:	4614      	mov	r4, r2
   29030:	461a      	mov	r2, r3
   29032:	4b09      	ldr	r3, [pc, #36]	; (29058 <__assert_func+0x2c>)
   29034:	4605      	mov	r5, r0
   29036:	681b      	ldr	r3, [r3, #0]
   29038:	68d8      	ldr	r0, [r3, #12]
   2903a:	b954      	cbnz	r4, 29052 <__assert_func+0x26>
   2903c:	4b07      	ldr	r3, [pc, #28]	; (2905c <__assert_func+0x30>)
   2903e:	461c      	mov	r4, r3
   29040:	9100      	str	r1, [sp, #0]
   29042:	4907      	ldr	r1, [pc, #28]	; (29060 <__assert_func+0x34>)
   29044:	e9cd 3401 	strd	r3, r4, [sp, #4]
   29048:	462b      	mov	r3, r5
   2904a:	f000 f8cd 	bl	291e8 <fiprintf>
   2904e:	f007 fded 	bl	30c2c <abort>
   29052:	4b04      	ldr	r3, [pc, #16]	; (29064 <__assert_func+0x38>)
   29054:	e7f4      	b.n	29040 <__assert_func+0x14>
   29056:	bf00      	nop
   29058:	20008754 	.word	0x20008754
   2905c:	000368ec 	.word	0x000368ec
   29060:	00038cf0 	.word	0x00038cf0
   29064:	00038ce3 	.word	0x00038ce3

00029068 <std>:
   29068:	2300      	movs	r3, #0
   2906a:	b510      	push	{r4, lr}
   2906c:	4604      	mov	r4, r0
   2906e:	6083      	str	r3, [r0, #8]
   29070:	8181      	strh	r1, [r0, #12]
   29072:	4619      	mov	r1, r3
   29074:	6643      	str	r3, [r0, #100]	; 0x64
   29076:	81c2      	strh	r2, [r0, #14]
   29078:	2208      	movs	r2, #8
   2907a:	6183      	str	r3, [r0, #24]
   2907c:	e9c0 3300 	strd	r3, r3, [r0]
   29080:	e9c0 3304 	strd	r3, r3, [r0, #16]
   29084:	305c      	adds	r0, #92	; 0x5c
   29086:	f007 faac 	bl	305e2 <memset>
   2908a:	4b05      	ldr	r3, [pc, #20]	; (290a0 <std+0x38>)
   2908c:	6224      	str	r4, [r4, #32]
   2908e:	6263      	str	r3, [r4, #36]	; 0x24
   29090:	4b04      	ldr	r3, [pc, #16]	; (290a4 <std+0x3c>)
   29092:	62a3      	str	r3, [r4, #40]	; 0x28
   29094:	4b04      	ldr	r3, [pc, #16]	; (290a8 <std+0x40>)
   29096:	62e3      	str	r3, [r4, #44]	; 0x2c
   29098:	4b04      	ldr	r3, [pc, #16]	; (290ac <std+0x44>)
   2909a:	6323      	str	r3, [r4, #48]	; 0x30
   2909c:	bd10      	pop	{r4, pc}
   2909e:	bf00      	nop
   290a0:	00030ba7 	.word	0x00030ba7
   290a4:	00030bc9 	.word	0x00030bc9
   290a8:	00030c01 	.word	0x00030c01
   290ac:	00030c25 	.word	0x00030c25

000290b0 <_cleanup_r>:
   290b0:	4901      	ldr	r1, [pc, #4]	; (290b8 <_cleanup_r+0x8>)
   290b2:	f007 bcc8 	b.w	30a46 <_fwalk_reent>
   290b6:	bf00      	nop
   290b8:	00029c81 	.word	0x00029c81

000290bc <__sfp_lock_acquire>:
   290bc:	4801      	ldr	r0, [pc, #4]	; (290c4 <__sfp_lock_acquire+0x8>)
   290be:	f7e8 bc89 	b.w	119d4 <__retarget_lock_acquire_recursive>
   290c2:	bf00      	nop
   290c4:	20008b40 	.word	0x20008b40

000290c8 <__sfp_lock_release>:
   290c8:	4801      	ldr	r0, [pc, #4]	; (290d0 <__sfp_lock_release+0x8>)
   290ca:	f7e8 bc9f 	b.w	11a0c <__retarget_lock_release_recursive>
   290ce:	bf00      	nop
   290d0:	20008b40 	.word	0x20008b40

000290d4 <__sinit_lock_acquire>:
   290d4:	4801      	ldr	r0, [pc, #4]	; (290dc <__sinit_lock_acquire+0x8>)
   290d6:	f7e8 bc7d 	b.w	119d4 <__retarget_lock_acquire_recursive>
   290da:	bf00      	nop
   290dc:	20008b54 	.word	0x20008b54

000290e0 <__sinit_lock_release>:
   290e0:	4801      	ldr	r0, [pc, #4]	; (290e8 <__sinit_lock_release+0x8>)
   290e2:	f7e8 bc93 	b.w	11a0c <__retarget_lock_release_recursive>
   290e6:	bf00      	nop
   290e8:	20008b54 	.word	0x20008b54

000290ec <__sinit>:
   290ec:	b510      	push	{r4, lr}
   290ee:	4604      	mov	r4, r0
   290f0:	f7ff fff0 	bl	290d4 <__sinit_lock_acquire>
   290f4:	69a3      	ldr	r3, [r4, #24]
   290f6:	b11b      	cbz	r3, 29100 <__sinit+0x14>
   290f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   290fc:	f7ff bff0 	b.w	290e0 <__sinit_lock_release>
   29100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   29104:	6523      	str	r3, [r4, #80]	; 0x50
   29106:	4620      	mov	r0, r4
   29108:	4b12      	ldr	r3, [pc, #72]	; (29154 <__sinit+0x68>)
   2910a:	4a13      	ldr	r2, [pc, #76]	; (29158 <__sinit+0x6c>)
   2910c:	681b      	ldr	r3, [r3, #0]
   2910e:	62a2      	str	r2, [r4, #40]	; 0x28
   29110:	42a3      	cmp	r3, r4
   29112:	bf04      	itt	eq
   29114:	2301      	moveq	r3, #1
   29116:	61a3      	streq	r3, [r4, #24]
   29118:	f000 f820 	bl	2915c <__sfp>
   2911c:	6060      	str	r0, [r4, #4]
   2911e:	4620      	mov	r0, r4
   29120:	f000 f81c 	bl	2915c <__sfp>
   29124:	60a0      	str	r0, [r4, #8]
   29126:	4620      	mov	r0, r4
   29128:	f000 f818 	bl	2915c <__sfp>
   2912c:	2200      	movs	r2, #0
   2912e:	2104      	movs	r1, #4
   29130:	60e0      	str	r0, [r4, #12]
   29132:	6860      	ldr	r0, [r4, #4]
   29134:	f7ff ff98 	bl	29068 <std>
   29138:	2201      	movs	r2, #1
   2913a:	2109      	movs	r1, #9
   2913c:	68a0      	ldr	r0, [r4, #8]
   2913e:	f7ff ff93 	bl	29068 <std>
   29142:	2202      	movs	r2, #2
   29144:	2112      	movs	r1, #18
   29146:	68e0      	ldr	r0, [r4, #12]
   29148:	f7ff ff8e 	bl	29068 <std>
   2914c:	2301      	movs	r3, #1
   2914e:	61a3      	str	r3, [r4, #24]
   29150:	e7d2      	b.n	290f8 <__sinit+0xc>
   29152:	bf00      	nop
   29154:	00032564 	.word	0x00032564
   29158:	000290b1 	.word	0x000290b1

0002915c <__sfp>:
   2915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2915e:	4607      	mov	r7, r0
   29160:	f7ff ffac 	bl	290bc <__sfp_lock_acquire>
   29164:	4b1e      	ldr	r3, [pc, #120]	; (291e0 <__sfp+0x84>)
   29166:	681e      	ldr	r6, [r3, #0]
   29168:	69b3      	ldr	r3, [r6, #24]
   2916a:	b913      	cbnz	r3, 29172 <__sfp+0x16>
   2916c:	4630      	mov	r0, r6
   2916e:	f7ff ffbd 	bl	290ec <__sinit>
   29172:	3648      	adds	r6, #72	; 0x48
   29174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   29178:	3b01      	subs	r3, #1
   2917a:	d503      	bpl.n	29184 <__sfp+0x28>
   2917c:	6833      	ldr	r3, [r6, #0]
   2917e:	b30b      	cbz	r3, 291c4 <__sfp+0x68>
   29180:	6836      	ldr	r6, [r6, #0]
   29182:	e7f7      	b.n	29174 <__sfp+0x18>
   29184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   29188:	b9d5      	cbnz	r5, 291c0 <__sfp+0x64>
   2918a:	4b16      	ldr	r3, [pc, #88]	; (291e4 <__sfp+0x88>)
   2918c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   29190:	6665      	str	r5, [r4, #100]	; 0x64
   29192:	60e3      	str	r3, [r4, #12]
   29194:	f7e8 fbee 	bl	11974 <__retarget_lock_init_recursive>
   29198:	f7ff ff96 	bl	290c8 <__sfp_lock_release>
   2919c:	2208      	movs	r2, #8
   2919e:	4629      	mov	r1, r5
   291a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   291a4:	6025      	str	r5, [r4, #0]
   291a6:	61a5      	str	r5, [r4, #24]
   291a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   291ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
   291b0:	f007 fa17 	bl	305e2 <memset>
   291b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   291b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   291bc:	4620      	mov	r0, r4
   291be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   291c0:	3468      	adds	r4, #104	; 0x68
   291c2:	e7d9      	b.n	29178 <__sfp+0x1c>
   291c4:	2104      	movs	r1, #4
   291c6:	4638      	mov	r0, r7
   291c8:	f007 fc27 	bl	30a1a <__sfmoreglue>
   291cc:	4604      	mov	r4, r0
   291ce:	6030      	str	r0, [r6, #0]
   291d0:	2800      	cmp	r0, #0
   291d2:	d1d5      	bne.n	29180 <__sfp+0x24>
   291d4:	f7ff ff78 	bl	290c8 <__sfp_lock_release>
   291d8:	230c      	movs	r3, #12
   291da:	603b      	str	r3, [r7, #0]
   291dc:	e7ee      	b.n	291bc <__sfp+0x60>
   291de:	bf00      	nop
   291e0:	00032564 	.word	0x00032564
   291e4:	ffff0001 	.word	0xffff0001

000291e8 <fiprintf>:
   291e8:	b40e      	push	{r1, r2, r3}
   291ea:	b503      	push	{r0, r1, lr}
   291ec:	ab03      	add	r3, sp, #12
   291ee:	4601      	mov	r1, r0
   291f0:	4805      	ldr	r0, [pc, #20]	; (29208 <fiprintf+0x20>)
   291f2:	f853 2b04 	ldr.w	r2, [r3], #4
   291f6:	6800      	ldr	r0, [r0, #0]
   291f8:	9301      	str	r3, [sp, #4]
   291fa:	f000 fb35 	bl	29868 <_vfiprintf_r>
   291fe:	b002      	add	sp, #8
   29200:	f85d eb04 	ldr.w	lr, [sp], #4
   29204:	b003      	add	sp, #12
   29206:	4770      	bx	lr
   29208:	20008754 	.word	0x20008754

0002920c <_localeconv_r>:
   2920c:	4800      	ldr	r0, [pc, #0]	; (29210 <_localeconv_r+0x4>)
   2920e:	4770      	bx	lr
   29210:	200088a8 	.word	0x200088a8

00029214 <__malloc_lock>:
   29214:	4801      	ldr	r0, [pc, #4]	; (2921c <__malloc_lock+0x8>)
   29216:	f7e8 bbdd 	b.w	119d4 <__retarget_lock_acquire_recursive>
   2921a:	bf00      	nop
   2921c:	20008b2c 	.word	0x20008b2c

00029220 <__malloc_unlock>:
   29220:	4801      	ldr	r0, [pc, #4]	; (29228 <__malloc_unlock+0x8>)
   29222:	f7e8 bbf3 	b.w	11a0c <__retarget_lock_release_recursive>
   29226:	bf00      	nop
   29228:	20008b2c 	.word	0x20008b2c

0002922c <_Balloc>:
   2922c:	b570      	push	{r4, r5, r6, lr}
   2922e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   29230:	4604      	mov	r4, r0
   29232:	460d      	mov	r5, r1
   29234:	b976      	cbnz	r6, 29254 <_Balloc+0x28>
   29236:	2010      	movs	r0, #16
   29238:	f7ff fa3c 	bl	286b4 <malloc>
   2923c:	4602      	mov	r2, r0
   2923e:	6260      	str	r0, [r4, #36]	; 0x24
   29240:	b920      	cbnz	r0, 2924c <_Balloc+0x20>
   29242:	4b18      	ldr	r3, [pc, #96]	; (292a4 <_Balloc+0x78>)
   29244:	2166      	movs	r1, #102	; 0x66
   29246:	4818      	ldr	r0, [pc, #96]	; (292a8 <_Balloc+0x7c>)
   29248:	f7ff fef0 	bl	2902c <__assert_func>
   2924c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   29250:	6006      	str	r6, [r0, #0]
   29252:	60c6      	str	r6, [r0, #12]
   29254:	6a66      	ldr	r6, [r4, #36]	; 0x24
   29256:	68f3      	ldr	r3, [r6, #12]
   29258:	b183      	cbz	r3, 2927c <_Balloc+0x50>
   2925a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2925c:	68db      	ldr	r3, [r3, #12]
   2925e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   29262:	b9b8      	cbnz	r0, 29294 <_Balloc+0x68>
   29264:	2101      	movs	r1, #1
   29266:	4620      	mov	r0, r4
   29268:	fa01 f605 	lsl.w	r6, r1, r5
   2926c:	1d72      	adds	r2, r6, #5
   2926e:	0092      	lsls	r2, r2, #2
   29270:	f007 f9bf 	bl	305f2 <_calloc_r>
   29274:	b160      	cbz	r0, 29290 <_Balloc+0x64>
   29276:	e9c0 5601 	strd	r5, r6, [r0, #4]
   2927a:	e00e      	b.n	2929a <_Balloc+0x6e>
   2927c:	2221      	movs	r2, #33	; 0x21
   2927e:	2104      	movs	r1, #4
   29280:	4620      	mov	r0, r4
   29282:	f007 f9b6 	bl	305f2 <_calloc_r>
   29286:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29288:	60f0      	str	r0, [r6, #12]
   2928a:	68db      	ldr	r3, [r3, #12]
   2928c:	2b00      	cmp	r3, #0
   2928e:	d1e4      	bne.n	2925a <_Balloc+0x2e>
   29290:	2000      	movs	r0, #0
   29292:	bd70      	pop	{r4, r5, r6, pc}
   29294:	6802      	ldr	r2, [r0, #0]
   29296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2929a:	2300      	movs	r3, #0
   2929c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   292a0:	e7f7      	b.n	29292 <_Balloc+0x66>
   292a2:	bf00      	nop
   292a4:	00038d2c 	.word	0x00038d2c
   292a8:	00038dc8 	.word	0x00038dc8

000292ac <_Bfree>:
   292ac:	b570      	push	{r4, r5, r6, lr}
   292ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   292b0:	4605      	mov	r5, r0
   292b2:	460c      	mov	r4, r1
   292b4:	b976      	cbnz	r6, 292d4 <_Bfree+0x28>
   292b6:	2010      	movs	r0, #16
   292b8:	f7ff f9fc 	bl	286b4 <malloc>
   292bc:	4602      	mov	r2, r0
   292be:	6268      	str	r0, [r5, #36]	; 0x24
   292c0:	b920      	cbnz	r0, 292cc <_Bfree+0x20>
   292c2:	4b09      	ldr	r3, [pc, #36]	; (292e8 <_Bfree+0x3c>)
   292c4:	218a      	movs	r1, #138	; 0x8a
   292c6:	4809      	ldr	r0, [pc, #36]	; (292ec <_Bfree+0x40>)
   292c8:	f7ff feb0 	bl	2902c <__assert_func>
   292cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   292d0:	6006      	str	r6, [r0, #0]
   292d2:	60c6      	str	r6, [r0, #12]
   292d4:	b13c      	cbz	r4, 292e6 <_Bfree+0x3a>
   292d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   292d8:	6862      	ldr	r2, [r4, #4]
   292da:	68db      	ldr	r3, [r3, #12]
   292dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   292e0:	6021      	str	r1, [r4, #0]
   292e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   292e6:	bd70      	pop	{r4, r5, r6, pc}
   292e8:	00038d2c 	.word	0x00038d2c
   292ec:	00038dc8 	.word	0x00038dc8

000292f0 <__multadd>:
   292f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   292f4:	f101 0c14 	add.w	ip, r1, #20
   292f8:	4607      	mov	r7, r0
   292fa:	460c      	mov	r4, r1
   292fc:	461e      	mov	r6, r3
   292fe:	690d      	ldr	r5, [r1, #16]
   29300:	2000      	movs	r0, #0
   29302:	f8dc 3000 	ldr.w	r3, [ip]
   29306:	3001      	adds	r0, #1
   29308:	b299      	uxth	r1, r3
   2930a:	4285      	cmp	r5, r0
   2930c:	fb02 6101 	mla	r1, r2, r1, r6
   29310:	ea4f 4613 	mov.w	r6, r3, lsr #16
   29314:	ea4f 4311 	mov.w	r3, r1, lsr #16
   29318:	b289      	uxth	r1, r1
   2931a:	fb02 3306 	mla	r3, r2, r6, r3
   2931e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   29322:	ea4f 4613 	mov.w	r6, r3, lsr #16
   29326:	f84c 1b04 	str.w	r1, [ip], #4
   2932a:	dcea      	bgt.n	29302 <__multadd+0x12>
   2932c:	b30e      	cbz	r6, 29372 <__multadd+0x82>
   2932e:	68a3      	ldr	r3, [r4, #8]
   29330:	42ab      	cmp	r3, r5
   29332:	dc19      	bgt.n	29368 <__multadd+0x78>
   29334:	6861      	ldr	r1, [r4, #4]
   29336:	4638      	mov	r0, r7
   29338:	3101      	adds	r1, #1
   2933a:	f7ff ff77 	bl	2922c <_Balloc>
   2933e:	4680      	mov	r8, r0
   29340:	b928      	cbnz	r0, 2934e <__multadd+0x5e>
   29342:	4602      	mov	r2, r0
   29344:	4b0c      	ldr	r3, [pc, #48]	; (29378 <__multadd+0x88>)
   29346:	21b5      	movs	r1, #181	; 0xb5
   29348:	480c      	ldr	r0, [pc, #48]	; (2937c <__multadd+0x8c>)
   2934a:	f7ff fe6f 	bl	2902c <__assert_func>
   2934e:	6922      	ldr	r2, [r4, #16]
   29350:	f104 010c 	add.w	r1, r4, #12
   29354:	300c      	adds	r0, #12
   29356:	3202      	adds	r2, #2
   29358:	0092      	lsls	r2, r2, #2
   2935a:	f007 f908 	bl	3056e <memcpy>
   2935e:	4621      	mov	r1, r4
   29360:	4644      	mov	r4, r8
   29362:	4638      	mov	r0, r7
   29364:	f7ff ffa2 	bl	292ac <_Bfree>
   29368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   2936c:	3501      	adds	r5, #1
   2936e:	615e      	str	r6, [r3, #20]
   29370:	6125      	str	r5, [r4, #16]
   29372:	4620      	mov	r0, r4
   29374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29378:	00038db7 	.word	0x00038db7
   2937c:	00038dc8 	.word	0x00038dc8

00029380 <__i2b>:
   29380:	b510      	push	{r4, lr}
   29382:	460c      	mov	r4, r1
   29384:	2101      	movs	r1, #1
   29386:	f7ff ff51 	bl	2922c <_Balloc>
   2938a:	4602      	mov	r2, r0
   2938c:	b928      	cbnz	r0, 2939a <__i2b+0x1a>
   2938e:	4b05      	ldr	r3, [pc, #20]	; (293a4 <__i2b+0x24>)
   29390:	f44f 71a0 	mov.w	r1, #320	; 0x140
   29394:	4804      	ldr	r0, [pc, #16]	; (293a8 <__i2b+0x28>)
   29396:	f7ff fe49 	bl	2902c <__assert_func>
   2939a:	2301      	movs	r3, #1
   2939c:	6144      	str	r4, [r0, #20]
   2939e:	6103      	str	r3, [r0, #16]
   293a0:	bd10      	pop	{r4, pc}
   293a2:	bf00      	nop
   293a4:	00038db7 	.word	0x00038db7
   293a8:	00038dc8 	.word	0x00038dc8

000293ac <__multiply>:
   293ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293b0:	4614      	mov	r4, r2
   293b2:	690a      	ldr	r2, [r1, #16]
   293b4:	460f      	mov	r7, r1
   293b6:	b085      	sub	sp, #20
   293b8:	6923      	ldr	r3, [r4, #16]
   293ba:	429a      	cmp	r2, r3
   293bc:	bfa2      	ittt	ge
   293be:	4623      	movge	r3, r4
   293c0:	460c      	movge	r4, r1
   293c2:	461f      	movge	r7, r3
   293c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
   293c8:	68a3      	ldr	r3, [r4, #8]
   293ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
   293ce:	6861      	ldr	r1, [r4, #4]
   293d0:	eb0a 0609 	add.w	r6, sl, r9
   293d4:	42b3      	cmp	r3, r6
   293d6:	bfb8      	it	lt
   293d8:	3101      	addlt	r1, #1
   293da:	f7ff ff27 	bl	2922c <_Balloc>
   293de:	b930      	cbnz	r0, 293ee <__multiply+0x42>
   293e0:	4602      	mov	r2, r0
   293e2:	4b45      	ldr	r3, [pc, #276]	; (294f8 <__multiply+0x14c>)
   293e4:	f240 115d 	movw	r1, #349	; 0x15d
   293e8:	4844      	ldr	r0, [pc, #272]	; (294fc <__multiply+0x150>)
   293ea:	f7ff fe1f 	bl	2902c <__assert_func>
   293ee:	f100 0514 	add.w	r5, r0, #20
   293f2:	2200      	movs	r2, #0
   293f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   293f8:	462b      	mov	r3, r5
   293fa:	4543      	cmp	r3, r8
   293fc:	d321      	bcc.n	29442 <__multiply+0x96>
   293fe:	f107 0114 	add.w	r1, r7, #20
   29402:	f104 0214 	add.w	r2, r4, #20
   29406:	f104 0715 	add.w	r7, r4, #21
   2940a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   2940e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   29412:	9302      	str	r3, [sp, #8]
   29414:	1b13      	subs	r3, r2, r4
   29416:	3b15      	subs	r3, #21
   29418:	f023 0303 	bic.w	r3, r3, #3
   2941c:	3304      	adds	r3, #4
   2941e:	42ba      	cmp	r2, r7
   29420:	bf38      	it	cc
   29422:	2304      	movcc	r3, #4
   29424:	9301      	str	r3, [sp, #4]
   29426:	9b02      	ldr	r3, [sp, #8]
   29428:	9103      	str	r1, [sp, #12]
   2942a:	428b      	cmp	r3, r1
   2942c:	d80c      	bhi.n	29448 <__multiply+0x9c>
   2942e:	2e00      	cmp	r6, #0
   29430:	dd03      	ble.n	2943a <__multiply+0x8e>
   29432:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   29436:	2b00      	cmp	r3, #0
   29438:	d05b      	beq.n	294f2 <__multiply+0x146>
   2943a:	6106      	str	r6, [r0, #16]
   2943c:	b005      	add	sp, #20
   2943e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29442:	f843 2b04 	str.w	r2, [r3], #4
   29446:	e7d8      	b.n	293fa <__multiply+0x4e>
   29448:	f8b1 a000 	ldrh.w	sl, [r1]
   2944c:	f1ba 0f00 	cmp.w	sl, #0
   29450:	d024      	beq.n	2949c <__multiply+0xf0>
   29452:	f104 0e14 	add.w	lr, r4, #20
   29456:	46a9      	mov	r9, r5
   29458:	f04f 0c00 	mov.w	ip, #0
   2945c:	f85e 7b04 	ldr.w	r7, [lr], #4
   29460:	f8d9 3000 	ldr.w	r3, [r9]
   29464:	fa1f fb87 	uxth.w	fp, r7
   29468:	4572      	cmp	r2, lr
   2946a:	b29b      	uxth	r3, r3
   2946c:	ea4f 4717 	mov.w	r7, r7, lsr #16
   29470:	fb0a 330b 	mla	r3, sl, fp, r3
   29474:	4463      	add	r3, ip
   29476:	f8d9 c000 	ldr.w	ip, [r9]
   2947a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   2947e:	fb0a c707 	mla	r7, sl, r7, ip
   29482:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   29486:	b29b      	uxth	r3, r3
   29488:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   2948c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   29490:	f849 3b04 	str.w	r3, [r9], #4
   29494:	d8e2      	bhi.n	2945c <__multiply+0xb0>
   29496:	9b01      	ldr	r3, [sp, #4]
   29498:	f845 c003 	str.w	ip, [r5, r3]
   2949c:	9b03      	ldr	r3, [sp, #12]
   2949e:	3104      	adds	r1, #4
   294a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   294a4:	f1b9 0f00 	cmp.w	r9, #0
   294a8:	d021      	beq.n	294ee <__multiply+0x142>
   294aa:	682b      	ldr	r3, [r5, #0]
   294ac:	f104 0c14 	add.w	ip, r4, #20
   294b0:	46ae      	mov	lr, r5
   294b2:	f04f 0a00 	mov.w	sl, #0
   294b6:	f8bc b000 	ldrh.w	fp, [ip]
   294ba:	b29b      	uxth	r3, r3
   294bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
   294c0:	fb09 770b 	mla	r7, r9, fp, r7
   294c4:	4457      	add	r7, sl
   294c6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   294ca:	f84e 3b04 	str.w	r3, [lr], #4
   294ce:	f85c 3b04 	ldr.w	r3, [ip], #4
   294d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   294d6:	f8be 3000 	ldrh.w	r3, [lr]
   294da:	4562      	cmp	r2, ip
   294dc:	fb09 330a 	mla	r3, r9, sl, r3
   294e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   294e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   294e8:	d8e5      	bhi.n	294b6 <__multiply+0x10a>
   294ea:	9f01      	ldr	r7, [sp, #4]
   294ec:	51eb      	str	r3, [r5, r7]
   294ee:	3504      	adds	r5, #4
   294f0:	e799      	b.n	29426 <__multiply+0x7a>
   294f2:	3e01      	subs	r6, #1
   294f4:	e79b      	b.n	2942e <__multiply+0x82>
   294f6:	bf00      	nop
   294f8:	00038db7 	.word	0x00038db7
   294fc:	00038dc8 	.word	0x00038dc8

00029500 <__pow5mult>:
   29500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29504:	4615      	mov	r5, r2
   29506:	f012 0203 	ands.w	r2, r2, #3
   2950a:	4607      	mov	r7, r0
   2950c:	460e      	mov	r6, r1
   2950e:	d007      	beq.n	29520 <__pow5mult+0x20>
   29510:	3a01      	subs	r2, #1
   29512:	4c25      	ldr	r4, [pc, #148]	; (295a8 <__pow5mult+0xa8>)
   29514:	2300      	movs	r3, #0
   29516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2951a:	f7ff fee9 	bl	292f0 <__multadd>
   2951e:	4606      	mov	r6, r0
   29520:	10ad      	asrs	r5, r5, #2
   29522:	d03d      	beq.n	295a0 <__pow5mult+0xa0>
   29524:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   29526:	b97c      	cbnz	r4, 29548 <__pow5mult+0x48>
   29528:	2010      	movs	r0, #16
   2952a:	f7ff f8c3 	bl	286b4 <malloc>
   2952e:	4602      	mov	r2, r0
   29530:	6278      	str	r0, [r7, #36]	; 0x24
   29532:	b928      	cbnz	r0, 29540 <__pow5mult+0x40>
   29534:	4b1d      	ldr	r3, [pc, #116]	; (295ac <__pow5mult+0xac>)
   29536:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   2953a:	481d      	ldr	r0, [pc, #116]	; (295b0 <__pow5mult+0xb0>)
   2953c:	f7ff fd76 	bl	2902c <__assert_func>
   29540:	e9c0 4401 	strd	r4, r4, [r0, #4]
   29544:	6004      	str	r4, [r0, #0]
   29546:	60c4      	str	r4, [r0, #12]
   29548:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   2954c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   29550:	b94c      	cbnz	r4, 29566 <__pow5mult+0x66>
   29552:	f240 2171 	movw	r1, #625	; 0x271
   29556:	4638      	mov	r0, r7
   29558:	f7ff ff12 	bl	29380 <__i2b>
   2955c:	2300      	movs	r3, #0
   2955e:	4604      	mov	r4, r0
   29560:	f8c8 0008 	str.w	r0, [r8, #8]
   29564:	6003      	str	r3, [r0, #0]
   29566:	f04f 0900 	mov.w	r9, #0
   2956a:	07eb      	lsls	r3, r5, #31
   2956c:	d50a      	bpl.n	29584 <__pow5mult+0x84>
   2956e:	4631      	mov	r1, r6
   29570:	4622      	mov	r2, r4
   29572:	4638      	mov	r0, r7
   29574:	f7ff ff1a 	bl	293ac <__multiply>
   29578:	4680      	mov	r8, r0
   2957a:	4631      	mov	r1, r6
   2957c:	4638      	mov	r0, r7
   2957e:	4646      	mov	r6, r8
   29580:	f7ff fe94 	bl	292ac <_Bfree>
   29584:	106d      	asrs	r5, r5, #1
   29586:	d00b      	beq.n	295a0 <__pow5mult+0xa0>
   29588:	6820      	ldr	r0, [r4, #0]
   2958a:	b938      	cbnz	r0, 2959c <__pow5mult+0x9c>
   2958c:	4622      	mov	r2, r4
   2958e:	4621      	mov	r1, r4
   29590:	4638      	mov	r0, r7
   29592:	f7ff ff0b 	bl	293ac <__multiply>
   29596:	6020      	str	r0, [r4, #0]
   29598:	f8c0 9000 	str.w	r9, [r0]
   2959c:	4604      	mov	r4, r0
   2959e:	e7e4      	b.n	2956a <__pow5mult+0x6a>
   295a0:	4630      	mov	r0, r6
   295a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   295a6:	bf00      	nop
   295a8:	000325c8 	.word	0x000325c8
   295ac:	00038d2c 	.word	0x00038d2c
   295b0:	00038dc8 	.word	0x00038dc8

000295b4 <__lshift>:
   295b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   295b8:	460c      	mov	r4, r1
   295ba:	4607      	mov	r7, r0
   295bc:	4691      	mov	r9, r2
   295be:	ea4f 1a62 	mov.w	sl, r2, asr #5
   295c2:	6923      	ldr	r3, [r4, #16]
   295c4:	6849      	ldr	r1, [r1, #4]
   295c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   295ca:	68a3      	ldr	r3, [r4, #8]
   295cc:	f108 0601 	add.w	r6, r8, #1
   295d0:	42b3      	cmp	r3, r6
   295d2:	db0b      	blt.n	295ec <__lshift+0x38>
   295d4:	4638      	mov	r0, r7
   295d6:	f7ff fe29 	bl	2922c <_Balloc>
   295da:	4605      	mov	r5, r0
   295dc:	b948      	cbnz	r0, 295f2 <__lshift+0x3e>
   295de:	4602      	mov	r2, r0
   295e0:	4b28      	ldr	r3, [pc, #160]	; (29684 <__lshift+0xd0>)
   295e2:	f240 11d9 	movw	r1, #473	; 0x1d9
   295e6:	4828      	ldr	r0, [pc, #160]	; (29688 <__lshift+0xd4>)
   295e8:	f7ff fd20 	bl	2902c <__assert_func>
   295ec:	3101      	adds	r1, #1
   295ee:	005b      	lsls	r3, r3, #1
   295f0:	e7ee      	b.n	295d0 <__lshift+0x1c>
   295f2:	2300      	movs	r3, #0
   295f4:	f100 0114 	add.w	r1, r0, #20
   295f8:	f100 0210 	add.w	r2, r0, #16
   295fc:	4618      	mov	r0, r3
   295fe:	4553      	cmp	r3, sl
   29600:	db33      	blt.n	2966a <__lshift+0xb6>
   29602:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   29606:	f104 0314 	add.w	r3, r4, #20
   2960a:	6920      	ldr	r0, [r4, #16]
   2960c:	f019 091f 	ands.w	r9, r9, #31
   29610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   29614:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   29618:	d02b      	beq.n	29672 <__lshift+0xbe>
   2961a:	f1c9 0e20 	rsb	lr, r9, #32
   2961e:	468a      	mov	sl, r1
   29620:	2200      	movs	r2, #0
   29622:	6818      	ldr	r0, [r3, #0]
   29624:	fa00 f009 	lsl.w	r0, r0, r9
   29628:	4310      	orrs	r0, r2
   2962a:	f84a 0b04 	str.w	r0, [sl], #4
   2962e:	f853 2b04 	ldr.w	r2, [r3], #4
   29632:	459c      	cmp	ip, r3
   29634:	fa22 f20e 	lsr.w	r2, r2, lr
   29638:	d8f3      	bhi.n	29622 <__lshift+0x6e>
   2963a:	ebac 0304 	sub.w	r3, ip, r4
   2963e:	f104 0015 	add.w	r0, r4, #21
   29642:	3b15      	subs	r3, #21
   29644:	f023 0303 	bic.w	r3, r3, #3
   29648:	3304      	adds	r3, #4
   2964a:	4584      	cmp	ip, r0
   2964c:	bf38      	it	cc
   2964e:	2304      	movcc	r3, #4
   29650:	50ca      	str	r2, [r1, r3]
   29652:	b10a      	cbz	r2, 29658 <__lshift+0xa4>
   29654:	f108 0602 	add.w	r6, r8, #2
   29658:	3e01      	subs	r6, #1
   2965a:	4638      	mov	r0, r7
   2965c:	4621      	mov	r1, r4
   2965e:	612e      	str	r6, [r5, #16]
   29660:	f7ff fe24 	bl	292ac <_Bfree>
   29664:	4628      	mov	r0, r5
   29666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2966a:	3301      	adds	r3, #1
   2966c:	f842 0f04 	str.w	r0, [r2, #4]!
   29670:	e7c5      	b.n	295fe <__lshift+0x4a>
   29672:	3904      	subs	r1, #4
   29674:	f853 2b04 	ldr.w	r2, [r3], #4
   29678:	459c      	cmp	ip, r3
   2967a:	f841 2f04 	str.w	r2, [r1, #4]!
   2967e:	d8f9      	bhi.n	29674 <__lshift+0xc0>
   29680:	e7ea      	b.n	29658 <__lshift+0xa4>
   29682:	bf00      	nop
   29684:	00038db7 	.word	0x00038db7
   29688:	00038dc8 	.word	0x00038dc8

0002968c <__mdiff>:
   2968c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29690:	4689      	mov	r9, r1
   29692:	4606      	mov	r6, r0
   29694:	4611      	mov	r1, r2
   29696:	4614      	mov	r4, r2
   29698:	4648      	mov	r0, r9
   2969a:	f007 fa42 	bl	30b22 <__mcmp>
   2969e:	1e05      	subs	r5, r0, #0
   296a0:	d112      	bne.n	296c8 <__mdiff+0x3c>
   296a2:	4629      	mov	r1, r5
   296a4:	4630      	mov	r0, r6
   296a6:	f7ff fdc1 	bl	2922c <_Balloc>
   296aa:	4602      	mov	r2, r0
   296ac:	b928      	cbnz	r0, 296ba <__mdiff+0x2e>
   296ae:	4b40      	ldr	r3, [pc, #256]	; (297b0 <__mdiff+0x124>)
   296b0:	f240 2132 	movw	r1, #562	; 0x232
   296b4:	483f      	ldr	r0, [pc, #252]	; (297b4 <__mdiff+0x128>)
   296b6:	f7ff fcb9 	bl	2902c <__assert_func>
   296ba:	2301      	movs	r3, #1
   296bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   296c0:	4610      	mov	r0, r2
   296c2:	b003      	add	sp, #12
   296c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296c8:	bfbc      	itt	lt
   296ca:	464b      	movlt	r3, r9
   296cc:	46a1      	movlt	r9, r4
   296ce:	4630      	mov	r0, r6
   296d0:	bfb8      	it	lt
   296d2:	2501      	movlt	r5, #1
   296d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   296d8:	bfb4      	ite	lt
   296da:	461c      	movlt	r4, r3
   296dc:	2500      	movge	r5, #0
   296de:	f7ff fda5 	bl	2922c <_Balloc>
   296e2:	4602      	mov	r2, r0
   296e4:	b918      	cbnz	r0, 296ee <__mdiff+0x62>
   296e6:	4b32      	ldr	r3, [pc, #200]	; (297b0 <__mdiff+0x124>)
   296e8:	f44f 7110 	mov.w	r1, #576	; 0x240
   296ec:	e7e2      	b.n	296b4 <__mdiff+0x28>
   296ee:	f8d9 7010 	ldr.w	r7, [r9, #16]
   296f2:	f104 0e14 	add.w	lr, r4, #20
   296f6:	6926      	ldr	r6, [r4, #16]
   296f8:	f100 0b14 	add.w	fp, r0, #20
   296fc:	60c5      	str	r5, [r0, #12]
   296fe:	f109 0514 	add.w	r5, r9, #20
   29702:	f109 0310 	add.w	r3, r9, #16
   29706:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   2970a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   2970e:	46d9      	mov	r9, fp
   29710:	f04f 0c00 	mov.w	ip, #0
   29714:	9301      	str	r3, [sp, #4]
   29716:	9b01      	ldr	r3, [sp, #4]
   29718:	f85e 0b04 	ldr.w	r0, [lr], #4
   2971c:	f853 af04 	ldr.w	sl, [r3, #4]!
   29720:	b281      	uxth	r1, r0
   29722:	4576      	cmp	r6, lr
   29724:	9301      	str	r3, [sp, #4]
   29726:	fa1f f38a 	uxth.w	r3, sl
   2972a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2972e:	eba3 0301 	sub.w	r3, r3, r1
   29732:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   29736:	4463      	add	r3, ip
   29738:	eb00 4023 	add.w	r0, r0, r3, asr #16
   2973c:	b29b      	uxth	r3, r3
   2973e:	ea4f 4c20 	mov.w	ip, r0, asr #16
   29742:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   29746:	f849 3b04 	str.w	r3, [r9], #4
   2974a:	d8e4      	bhi.n	29716 <__mdiff+0x8a>
   2974c:	1b33      	subs	r3, r6, r4
   2974e:	3415      	adds	r4, #21
   29750:	3b15      	subs	r3, #21
   29752:	f023 0303 	bic.w	r3, r3, #3
   29756:	3304      	adds	r3, #4
   29758:	42a6      	cmp	r6, r4
   2975a:	bf38      	it	cc
   2975c:	2304      	movcc	r3, #4
   2975e:	441d      	add	r5, r3
   29760:	445b      	add	r3, fp
   29762:	462c      	mov	r4, r5
   29764:	461e      	mov	r6, r3
   29766:	4544      	cmp	r4, r8
   29768:	d30e      	bcc.n	29788 <__mdiff+0xfc>
   2976a:	f108 0103 	add.w	r1, r8, #3
   2976e:	1b49      	subs	r1, r1, r5
   29770:	3d03      	subs	r5, #3
   29772:	f021 0103 	bic.w	r1, r1, #3
   29776:	45a8      	cmp	r8, r5
   29778:	bf38      	it	cc
   2977a:	2100      	movcc	r1, #0
   2977c:	440b      	add	r3, r1
   2977e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   29782:	b199      	cbz	r1, 297ac <__mdiff+0x120>
   29784:	6117      	str	r7, [r2, #16]
   29786:	e79b      	b.n	296c0 <__mdiff+0x34>
   29788:	f854 1b04 	ldr.w	r1, [r4], #4
   2978c:	46e6      	mov	lr, ip
   2978e:	fa1f fc81 	uxth.w	ip, r1
   29792:	0c08      	lsrs	r0, r1, #16
   29794:	4471      	add	r1, lr
   29796:	44f4      	add	ip, lr
   29798:	b289      	uxth	r1, r1
   2979a:	eb00 402c 	add.w	r0, r0, ip, asr #16
   2979e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   297a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
   297a6:	f846 1b04 	str.w	r1, [r6], #4
   297aa:	e7dc      	b.n	29766 <__mdiff+0xda>
   297ac:	3f01      	subs	r7, #1
   297ae:	e7e6      	b.n	2977e <__mdiff+0xf2>
   297b0:	00038db7 	.word	0x00038db7
   297b4:	00038dc8 	.word	0x00038dc8

000297b8 <__d2b>:
   297b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   297bc:	2101      	movs	r1, #1
   297be:	4690      	mov	r8, r2
   297c0:	4699      	mov	r9, r3
   297c2:	9e08      	ldr	r6, [sp, #32]
   297c4:	f7ff fd32 	bl	2922c <_Balloc>
   297c8:	4604      	mov	r4, r0
   297ca:	b930      	cbnz	r0, 297da <__d2b+0x22>
   297cc:	4602      	mov	r2, r0
   297ce:	4b24      	ldr	r3, [pc, #144]	; (29860 <__d2b+0xa8>)
   297d0:	f240 310a 	movw	r1, #778	; 0x30a
   297d4:	4823      	ldr	r0, [pc, #140]	; (29864 <__d2b+0xac>)
   297d6:	f7ff fc29 	bl	2902c <__assert_func>
   297da:	f3c9 550a 	ubfx	r5, r9, #20, #11
   297de:	f3c9 0313 	ubfx	r3, r9, #0, #20
   297e2:	b10d      	cbz	r5, 297e8 <__d2b+0x30>
   297e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   297e8:	9301      	str	r3, [sp, #4]
   297ea:	f1b8 0300 	subs.w	r3, r8, #0
   297ee:	d024      	beq.n	2983a <__d2b+0x82>
   297f0:	4668      	mov	r0, sp
   297f2:	9300      	str	r3, [sp, #0]
   297f4:	f007 f968 	bl	30ac8 <__lo0bits>
   297f8:	e9dd 1200 	ldrd	r1, r2, [sp]
   297fc:	b1d8      	cbz	r0, 29836 <__d2b+0x7e>
   297fe:	f1c0 0320 	rsb	r3, r0, #32
   29802:	fa02 f303 	lsl.w	r3, r2, r3
   29806:	40c2      	lsrs	r2, r0
   29808:	430b      	orrs	r3, r1
   2980a:	9201      	str	r2, [sp, #4]
   2980c:	6163      	str	r3, [r4, #20]
   2980e:	9b01      	ldr	r3, [sp, #4]
   29810:	2b00      	cmp	r3, #0
   29812:	61a3      	str	r3, [r4, #24]
   29814:	bf0c      	ite	eq
   29816:	2201      	moveq	r2, #1
   29818:	2202      	movne	r2, #2
   2981a:	6122      	str	r2, [r4, #16]
   2981c:	b1ad      	cbz	r5, 2984a <__d2b+0x92>
   2981e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   29822:	4405      	add	r5, r0
   29824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   29828:	6035      	str	r5, [r6, #0]
   2982a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2982c:	6018      	str	r0, [r3, #0]
   2982e:	4620      	mov	r0, r4
   29830:	b002      	add	sp, #8
   29832:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   29836:	6161      	str	r1, [r4, #20]
   29838:	e7e9      	b.n	2980e <__d2b+0x56>
   2983a:	a801      	add	r0, sp, #4
   2983c:	f007 f944 	bl	30ac8 <__lo0bits>
   29840:	9b01      	ldr	r3, [sp, #4]
   29842:	3020      	adds	r0, #32
   29844:	2201      	movs	r2, #1
   29846:	6163      	str	r3, [r4, #20]
   29848:	e7e7      	b.n	2981a <__d2b+0x62>
   2984a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2984e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   29852:	6030      	str	r0, [r6, #0]
   29854:	6918      	ldr	r0, [r3, #16]
   29856:	f007 f915 	bl	30a84 <__hi0bits>
   2985a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2985e:	e7e4      	b.n	2982a <__d2b+0x72>
   29860:	00038db7 	.word	0x00038db7
   29864:	00038dc8 	.word	0x00038dc8

00029868 <_vfiprintf_r>:
   29868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2986c:	460d      	mov	r5, r1
   2986e:	b09d      	sub	sp, #116	; 0x74
   29870:	4614      	mov	r4, r2
   29872:	4698      	mov	r8, r3
   29874:	4606      	mov	r6, r0
   29876:	b118      	cbz	r0, 29880 <_vfiprintf_r+0x18>
   29878:	6983      	ldr	r3, [r0, #24]
   2987a:	b90b      	cbnz	r3, 29880 <_vfiprintf_r+0x18>
   2987c:	f7ff fc36 	bl	290ec <__sinit>
   29880:	4b87      	ldr	r3, [pc, #540]	; (29aa0 <_vfiprintf_r+0x238>)
   29882:	429d      	cmp	r5, r3
   29884:	d11b      	bne.n	298be <_vfiprintf_r+0x56>
   29886:	6875      	ldr	r5, [r6, #4]
   29888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2988a:	07d9      	lsls	r1, r3, #31
   2988c:	d405      	bmi.n	2989a <_vfiprintf_r+0x32>
   2988e:	89ab      	ldrh	r3, [r5, #12]
   29890:	059a      	lsls	r2, r3, #22
   29892:	d402      	bmi.n	2989a <_vfiprintf_r+0x32>
   29894:	6da8      	ldr	r0, [r5, #88]	; 0x58
   29896:	f7e8 f89d 	bl	119d4 <__retarget_lock_acquire_recursive>
   2989a:	89ab      	ldrh	r3, [r5, #12]
   2989c:	071b      	lsls	r3, r3, #28
   2989e:	d501      	bpl.n	298a4 <_vfiprintf_r+0x3c>
   298a0:	692b      	ldr	r3, [r5, #16]
   298a2:	b9eb      	cbnz	r3, 298e0 <_vfiprintf_r+0x78>
   298a4:	4629      	mov	r1, r5
   298a6:	4630      	mov	r0, r6
   298a8:	f000 f96e 	bl	29b88 <__swsetup_r>
   298ac:	b1c0      	cbz	r0, 298e0 <_vfiprintf_r+0x78>
   298ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   298b0:	07dc      	lsls	r4, r3, #31
   298b2:	d50e      	bpl.n	298d2 <_vfiprintf_r+0x6a>
   298b4:	f04f 30ff 	mov.w	r0, #4294967295
   298b8:	b01d      	add	sp, #116	; 0x74
   298ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298be:	4b79      	ldr	r3, [pc, #484]	; (29aa4 <_vfiprintf_r+0x23c>)
   298c0:	429d      	cmp	r5, r3
   298c2:	d101      	bne.n	298c8 <_vfiprintf_r+0x60>
   298c4:	68b5      	ldr	r5, [r6, #8]
   298c6:	e7df      	b.n	29888 <_vfiprintf_r+0x20>
   298c8:	4b77      	ldr	r3, [pc, #476]	; (29aa8 <_vfiprintf_r+0x240>)
   298ca:	429d      	cmp	r5, r3
   298cc:	bf08      	it	eq
   298ce:	68f5      	ldreq	r5, [r6, #12]
   298d0:	e7da      	b.n	29888 <_vfiprintf_r+0x20>
   298d2:	89ab      	ldrh	r3, [r5, #12]
   298d4:	0598      	lsls	r0, r3, #22
   298d6:	d4ed      	bmi.n	298b4 <_vfiprintf_r+0x4c>
   298d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   298da:	f7e8 f897 	bl	11a0c <__retarget_lock_release_recursive>
   298de:	e7e9      	b.n	298b4 <_vfiprintf_r+0x4c>
   298e0:	2300      	movs	r3, #0
   298e2:	f8cd 800c 	str.w	r8, [sp, #12]
   298e6:	f04f 0901 	mov.w	r9, #1
   298ea:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 29aac <_vfiprintf_r+0x244>
   298ee:	9309      	str	r3, [sp, #36]	; 0x24
   298f0:	2320      	movs	r3, #32
   298f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   298f6:	2330      	movs	r3, #48	; 0x30
   298f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   298fc:	4623      	mov	r3, r4
   298fe:	469a      	mov	sl, r3
   29900:	f813 2b01 	ldrb.w	r2, [r3], #1
   29904:	b10a      	cbz	r2, 2990a <_vfiprintf_r+0xa2>
   29906:	2a25      	cmp	r2, #37	; 0x25
   29908:	d1f9      	bne.n	298fe <_vfiprintf_r+0x96>
   2990a:	ebba 0b04 	subs.w	fp, sl, r4
   2990e:	d00b      	beq.n	29928 <_vfiprintf_r+0xc0>
   29910:	465b      	mov	r3, fp
   29912:	4622      	mov	r2, r4
   29914:	4629      	mov	r1, r5
   29916:	4630      	mov	r0, r6
   29918:	f007 f933 	bl	30b82 <__sfputs_r>
   2991c:	3001      	adds	r0, #1
   2991e:	f000 80a6 	beq.w	29a6e <_vfiprintf_r+0x206>
   29922:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29924:	445a      	add	r2, fp
   29926:	9209      	str	r2, [sp, #36]	; 0x24
   29928:	f89a 3000 	ldrb.w	r3, [sl]
   2992c:	2b00      	cmp	r3, #0
   2992e:	f000 809e 	beq.w	29a6e <_vfiprintf_r+0x206>
   29932:	2300      	movs	r3, #0
   29934:	f04f 32ff 	mov.w	r2, #4294967295
   29938:	f10a 0a01 	add.w	sl, sl, #1
   2993c:	9304      	str	r3, [sp, #16]
   2993e:	9307      	str	r3, [sp, #28]
   29940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   29944:	931a      	str	r3, [sp, #104]	; 0x68
   29946:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2994a:	4654      	mov	r4, sl
   2994c:	2205      	movs	r2, #5
   2994e:	4857      	ldr	r0, [pc, #348]	; (29aac <_vfiprintf_r+0x244>)
   29950:	f814 1b01 	ldrb.w	r1, [r4], #1
   29954:	f006 fded 	bl	30532 <memchr>
   29958:	9b04      	ldr	r3, [sp, #16]
   2995a:	b9d0      	cbnz	r0, 29992 <_vfiprintf_r+0x12a>
   2995c:	06d9      	lsls	r1, r3, #27
   2995e:	bf44      	itt	mi
   29960:	2220      	movmi	r2, #32
   29962:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   29966:	071a      	lsls	r2, r3, #28
   29968:	bf44      	itt	mi
   2996a:	222b      	movmi	r2, #43	; 0x2b
   2996c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   29970:	f89a 2000 	ldrb.w	r2, [sl]
   29974:	2a2a      	cmp	r2, #42	; 0x2a
   29976:	d014      	beq.n	299a2 <_vfiprintf_r+0x13a>
   29978:	9a07      	ldr	r2, [sp, #28]
   2997a:	4654      	mov	r4, sl
   2997c:	2000      	movs	r0, #0
   2997e:	f04f 0c0a 	mov.w	ip, #10
   29982:	4621      	mov	r1, r4
   29984:	f811 3b01 	ldrb.w	r3, [r1], #1
   29988:	3b30      	subs	r3, #48	; 0x30
   2998a:	2b09      	cmp	r3, #9
   2998c:	d94a      	bls.n	29a24 <_vfiprintf_r+0x1bc>
   2998e:	b970      	cbnz	r0, 299ae <_vfiprintf_r+0x146>
   29990:	e014      	b.n	299bc <_vfiprintf_r+0x154>
   29992:	eba0 0008 	sub.w	r0, r0, r8
   29996:	46a2      	mov	sl, r4
   29998:	fa09 f000 	lsl.w	r0, r9, r0
   2999c:	4318      	orrs	r0, r3
   2999e:	9004      	str	r0, [sp, #16]
   299a0:	e7d3      	b.n	2994a <_vfiprintf_r+0xe2>
   299a2:	9a03      	ldr	r2, [sp, #12]
   299a4:	1d11      	adds	r1, r2, #4
   299a6:	6812      	ldr	r2, [r2, #0]
   299a8:	2a00      	cmp	r2, #0
   299aa:	9103      	str	r1, [sp, #12]
   299ac:	db01      	blt.n	299b2 <_vfiprintf_r+0x14a>
   299ae:	9207      	str	r2, [sp, #28]
   299b0:	e004      	b.n	299bc <_vfiprintf_r+0x154>
   299b2:	4252      	negs	r2, r2
   299b4:	f043 0302 	orr.w	r3, r3, #2
   299b8:	9207      	str	r2, [sp, #28]
   299ba:	9304      	str	r3, [sp, #16]
   299bc:	7823      	ldrb	r3, [r4, #0]
   299be:	2b2e      	cmp	r3, #46	; 0x2e
   299c0:	d10a      	bne.n	299d8 <_vfiprintf_r+0x170>
   299c2:	7863      	ldrb	r3, [r4, #1]
   299c4:	2b2a      	cmp	r3, #42	; 0x2a
   299c6:	d132      	bne.n	29a2e <_vfiprintf_r+0x1c6>
   299c8:	9b03      	ldr	r3, [sp, #12]
   299ca:	3402      	adds	r4, #2
   299cc:	1d1a      	adds	r2, r3, #4
   299ce:	681b      	ldr	r3, [r3, #0]
   299d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   299d4:	9203      	str	r2, [sp, #12]
   299d6:	9305      	str	r3, [sp, #20]
   299d8:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 29ab0 <_vfiprintf_r+0x248>
   299dc:	2203      	movs	r2, #3
   299de:	7821      	ldrb	r1, [r4, #0]
   299e0:	4650      	mov	r0, sl
   299e2:	f006 fda6 	bl	30532 <memchr>
   299e6:	b138      	cbz	r0, 299f8 <_vfiprintf_r+0x190>
   299e8:	eba0 000a 	sub.w	r0, r0, sl
   299ec:	2240      	movs	r2, #64	; 0x40
   299ee:	9b04      	ldr	r3, [sp, #16]
   299f0:	3401      	adds	r4, #1
   299f2:	4082      	lsls	r2, r0
   299f4:	4313      	orrs	r3, r2
   299f6:	9304      	str	r3, [sp, #16]
   299f8:	f814 1b01 	ldrb.w	r1, [r4], #1
   299fc:	2206      	movs	r2, #6
   299fe:	482d      	ldr	r0, [pc, #180]	; (29ab4 <_vfiprintf_r+0x24c>)
   29a00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   29a04:	f006 fd95 	bl	30532 <memchr>
   29a08:	2800      	cmp	r0, #0
   29a0a:	d03f      	beq.n	29a8c <_vfiprintf_r+0x224>
   29a0c:	4b2a      	ldr	r3, [pc, #168]	; (29ab8 <_vfiprintf_r+0x250>)
   29a0e:	bb1b      	cbnz	r3, 29a58 <_vfiprintf_r+0x1f0>
   29a10:	9b03      	ldr	r3, [sp, #12]
   29a12:	3307      	adds	r3, #7
   29a14:	f023 0307 	bic.w	r3, r3, #7
   29a18:	3308      	adds	r3, #8
   29a1a:	9303      	str	r3, [sp, #12]
   29a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29a1e:	443b      	add	r3, r7
   29a20:	9309      	str	r3, [sp, #36]	; 0x24
   29a22:	e76b      	b.n	298fc <_vfiprintf_r+0x94>
   29a24:	fb0c 3202 	mla	r2, ip, r2, r3
   29a28:	460c      	mov	r4, r1
   29a2a:	2001      	movs	r0, #1
   29a2c:	e7a9      	b.n	29982 <_vfiprintf_r+0x11a>
   29a2e:	2300      	movs	r3, #0
   29a30:	3401      	adds	r4, #1
   29a32:	f04f 0c0a 	mov.w	ip, #10
   29a36:	4619      	mov	r1, r3
   29a38:	9305      	str	r3, [sp, #20]
   29a3a:	4620      	mov	r0, r4
   29a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
   29a40:	3a30      	subs	r2, #48	; 0x30
   29a42:	2a09      	cmp	r2, #9
   29a44:	d903      	bls.n	29a4e <_vfiprintf_r+0x1e6>
   29a46:	2b00      	cmp	r3, #0
   29a48:	d0c6      	beq.n	299d8 <_vfiprintf_r+0x170>
   29a4a:	9105      	str	r1, [sp, #20]
   29a4c:	e7c4      	b.n	299d8 <_vfiprintf_r+0x170>
   29a4e:	fb0c 2101 	mla	r1, ip, r1, r2
   29a52:	4604      	mov	r4, r0
   29a54:	2301      	movs	r3, #1
   29a56:	e7f0      	b.n	29a3a <_vfiprintf_r+0x1d2>
   29a58:	ab03      	add	r3, sp, #12
   29a5a:	462a      	mov	r2, r5
   29a5c:	a904      	add	r1, sp, #16
   29a5e:	4630      	mov	r0, r6
   29a60:	9300      	str	r3, [sp, #0]
   29a62:	4b16      	ldr	r3, [pc, #88]	; (29abc <_vfiprintf_r+0x254>)
   29a64:	f7fe feda 	bl	2881c <_printf_float>
   29a68:	4607      	mov	r7, r0
   29a6a:	1c78      	adds	r0, r7, #1
   29a6c:	d1d6      	bne.n	29a1c <_vfiprintf_r+0x1b4>
   29a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   29a70:	07d9      	lsls	r1, r3, #31
   29a72:	d405      	bmi.n	29a80 <_vfiprintf_r+0x218>
   29a74:	89ab      	ldrh	r3, [r5, #12]
   29a76:	059a      	lsls	r2, r3, #22
   29a78:	d402      	bmi.n	29a80 <_vfiprintf_r+0x218>
   29a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   29a7c:	f7e7 ffc6 	bl	11a0c <__retarget_lock_release_recursive>
   29a80:	89ab      	ldrh	r3, [r5, #12]
   29a82:	065b      	lsls	r3, r3, #25
   29a84:	f53f af16 	bmi.w	298b4 <_vfiprintf_r+0x4c>
   29a88:	9809      	ldr	r0, [sp, #36]	; 0x24
   29a8a:	e715      	b.n	298b8 <_vfiprintf_r+0x50>
   29a8c:	ab03      	add	r3, sp, #12
   29a8e:	462a      	mov	r2, r5
   29a90:	a904      	add	r1, sp, #16
   29a92:	4630      	mov	r0, r6
   29a94:	9300      	str	r3, [sp, #0]
   29a96:	4b09      	ldr	r3, [pc, #36]	; (29abc <_vfiprintf_r+0x254>)
   29a98:	f7ff f8f6 	bl	28c88 <_printf_i>
   29a9c:	e7e4      	b.n	29a68 <_vfiprintf_r+0x200>
   29a9e:	bf00      	nop
   29aa0:	000325a8 	.word	0x000325a8
   29aa4:	00032588 	.word	0x00032588
   29aa8:	00032568 	.word	0x00032568
   29aac:	00038e3d 	.word	0x00038e3d
   29ab0:	00038e43 	.word	0x00038e43
   29ab4:	00038e47 	.word	0x00038e47
   29ab8:	0002881d 	.word	0x0002881d
   29abc:	00030b83 	.word	0x00030b83

00029ac0 <__swbuf_r>:
   29ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29ac2:	460e      	mov	r6, r1
   29ac4:	4614      	mov	r4, r2
   29ac6:	4605      	mov	r5, r0
   29ac8:	b118      	cbz	r0, 29ad2 <__swbuf_r+0x12>
   29aca:	6983      	ldr	r3, [r0, #24]
   29acc:	b90b      	cbnz	r3, 29ad2 <__swbuf_r+0x12>
   29ace:	f7ff fb0d 	bl	290ec <__sinit>
   29ad2:	4b21      	ldr	r3, [pc, #132]	; (29b58 <__swbuf_r+0x98>)
   29ad4:	429c      	cmp	r4, r3
   29ad6:	d110      	bne.n	29afa <__swbuf_r+0x3a>
   29ad8:	686c      	ldr	r4, [r5, #4]
   29ada:	69a3      	ldr	r3, [r4, #24]
   29adc:	60a3      	str	r3, [r4, #8]
   29ade:	89a3      	ldrh	r3, [r4, #12]
   29ae0:	071a      	lsls	r2, r3, #28
   29ae2:	d501      	bpl.n	29ae8 <__swbuf_r+0x28>
   29ae4:	6923      	ldr	r3, [r4, #16]
   29ae6:	b993      	cbnz	r3, 29b0e <__swbuf_r+0x4e>
   29ae8:	4621      	mov	r1, r4
   29aea:	4628      	mov	r0, r5
   29aec:	f000 f84c 	bl	29b88 <__swsetup_r>
   29af0:	b168      	cbz	r0, 29b0e <__swbuf_r+0x4e>
   29af2:	f04f 37ff 	mov.w	r7, #4294967295
   29af6:	4638      	mov	r0, r7
   29af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29afa:	4b18      	ldr	r3, [pc, #96]	; (29b5c <__swbuf_r+0x9c>)
   29afc:	429c      	cmp	r4, r3
   29afe:	d101      	bne.n	29b04 <__swbuf_r+0x44>
   29b00:	68ac      	ldr	r4, [r5, #8]
   29b02:	e7ea      	b.n	29ada <__swbuf_r+0x1a>
   29b04:	4b16      	ldr	r3, [pc, #88]	; (29b60 <__swbuf_r+0xa0>)
   29b06:	429c      	cmp	r4, r3
   29b08:	bf08      	it	eq
   29b0a:	68ec      	ldreq	r4, [r5, #12]
   29b0c:	e7e5      	b.n	29ada <__swbuf_r+0x1a>
   29b0e:	6923      	ldr	r3, [r4, #16]
   29b10:	b2f6      	uxtb	r6, r6
   29b12:	6820      	ldr	r0, [r4, #0]
   29b14:	4637      	mov	r7, r6
   29b16:	1ac0      	subs	r0, r0, r3
   29b18:	6963      	ldr	r3, [r4, #20]
   29b1a:	4283      	cmp	r3, r0
   29b1c:	dc05      	bgt.n	29b2a <__swbuf_r+0x6a>
   29b1e:	4621      	mov	r1, r4
   29b20:	4628      	mov	r0, r5
   29b22:	f000 f8ad 	bl	29c80 <_fflush_r>
   29b26:	2800      	cmp	r0, #0
   29b28:	d1e3      	bne.n	29af2 <__swbuf_r+0x32>
   29b2a:	68a3      	ldr	r3, [r4, #8]
   29b2c:	3001      	adds	r0, #1
   29b2e:	3b01      	subs	r3, #1
   29b30:	60a3      	str	r3, [r4, #8]
   29b32:	6823      	ldr	r3, [r4, #0]
   29b34:	1c5a      	adds	r2, r3, #1
   29b36:	6022      	str	r2, [r4, #0]
   29b38:	701e      	strb	r6, [r3, #0]
   29b3a:	6963      	ldr	r3, [r4, #20]
   29b3c:	4283      	cmp	r3, r0
   29b3e:	d004      	beq.n	29b4a <__swbuf_r+0x8a>
   29b40:	89a3      	ldrh	r3, [r4, #12]
   29b42:	07db      	lsls	r3, r3, #31
   29b44:	d5d7      	bpl.n	29af6 <__swbuf_r+0x36>
   29b46:	2e0a      	cmp	r6, #10
   29b48:	d1d5      	bne.n	29af6 <__swbuf_r+0x36>
   29b4a:	4621      	mov	r1, r4
   29b4c:	4628      	mov	r0, r5
   29b4e:	f000 f897 	bl	29c80 <_fflush_r>
   29b52:	2800      	cmp	r0, #0
   29b54:	d0cf      	beq.n	29af6 <__swbuf_r+0x36>
   29b56:	e7cc      	b.n	29af2 <__swbuf_r+0x32>
   29b58:	000325a8 	.word	0x000325a8
   29b5c:	00032588 	.word	0x00032588
   29b60:	00032568 	.word	0x00032568

00029b64 <_write_r>:
   29b64:	b538      	push	{r3, r4, r5, lr}
   29b66:	4604      	mov	r4, r0
   29b68:	4d06      	ldr	r5, [pc, #24]	; (29b84 <_write_r+0x20>)
   29b6a:	4608      	mov	r0, r1
   29b6c:	4611      	mov	r1, r2
   29b6e:	2200      	movs	r2, #0
   29b70:	602a      	str	r2, [r5, #0]
   29b72:	461a      	mov	r2, r3
   29b74:	f002 f927 	bl	2bdc6 <_write>
   29b78:	1c43      	adds	r3, r0, #1
   29b7a:	d102      	bne.n	29b82 <_write_r+0x1e>
   29b7c:	682b      	ldr	r3, [r5, #0]
   29b7e:	b103      	cbz	r3, 29b82 <_write_r+0x1e>
   29b80:	6023      	str	r3, [r4, #0]
   29b82:	bd38      	pop	{r3, r4, r5, pc}
   29b84:	20021aec 	.word	0x20021aec

00029b88 <__swsetup_r>:
   29b88:	4b31      	ldr	r3, [pc, #196]	; (29c50 <__swsetup_r+0xc8>)
   29b8a:	b570      	push	{r4, r5, r6, lr}
   29b8c:	681d      	ldr	r5, [r3, #0]
   29b8e:	4606      	mov	r6, r0
   29b90:	460c      	mov	r4, r1
   29b92:	b125      	cbz	r5, 29b9e <__swsetup_r+0x16>
   29b94:	69ab      	ldr	r3, [r5, #24]
   29b96:	b913      	cbnz	r3, 29b9e <__swsetup_r+0x16>
   29b98:	4628      	mov	r0, r5
   29b9a:	f7ff faa7 	bl	290ec <__sinit>
   29b9e:	4b2d      	ldr	r3, [pc, #180]	; (29c54 <__swsetup_r+0xcc>)
   29ba0:	429c      	cmp	r4, r3
   29ba2:	d10e      	bne.n	29bc2 <__swsetup_r+0x3a>
   29ba4:	686c      	ldr	r4, [r5, #4]
   29ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29baa:	071a      	lsls	r2, r3, #28
   29bac:	d42c      	bmi.n	29c08 <__swsetup_r+0x80>
   29bae:	06dd      	lsls	r5, r3, #27
   29bb0:	d411      	bmi.n	29bd6 <__swsetup_r+0x4e>
   29bb2:	2209      	movs	r2, #9
   29bb4:	6032      	str	r2, [r6, #0]
   29bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29bba:	f04f 30ff 	mov.w	r0, #4294967295
   29bbe:	81a3      	strh	r3, [r4, #12]
   29bc0:	e03d      	b.n	29c3e <__swsetup_r+0xb6>
   29bc2:	4b25      	ldr	r3, [pc, #148]	; (29c58 <__swsetup_r+0xd0>)
   29bc4:	429c      	cmp	r4, r3
   29bc6:	d101      	bne.n	29bcc <__swsetup_r+0x44>
   29bc8:	68ac      	ldr	r4, [r5, #8]
   29bca:	e7ec      	b.n	29ba6 <__swsetup_r+0x1e>
   29bcc:	4b23      	ldr	r3, [pc, #140]	; (29c5c <__swsetup_r+0xd4>)
   29bce:	429c      	cmp	r4, r3
   29bd0:	bf08      	it	eq
   29bd2:	68ec      	ldreq	r4, [r5, #12]
   29bd4:	e7e7      	b.n	29ba6 <__swsetup_r+0x1e>
   29bd6:	0758      	lsls	r0, r3, #29
   29bd8:	d512      	bpl.n	29c00 <__swsetup_r+0x78>
   29bda:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29bdc:	b141      	cbz	r1, 29bf0 <__swsetup_r+0x68>
   29bde:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29be2:	4299      	cmp	r1, r3
   29be4:	d002      	beq.n	29bec <__swsetup_r+0x64>
   29be6:	4630      	mov	r0, r6
   29be8:	f7fe fd74 	bl	286d4 <_free_r>
   29bec:	2300      	movs	r3, #0
   29bee:	6363      	str	r3, [r4, #52]	; 0x34
   29bf0:	89a3      	ldrh	r3, [r4, #12]
   29bf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   29bf6:	81a3      	strh	r3, [r4, #12]
   29bf8:	2300      	movs	r3, #0
   29bfa:	6063      	str	r3, [r4, #4]
   29bfc:	6923      	ldr	r3, [r4, #16]
   29bfe:	6023      	str	r3, [r4, #0]
   29c00:	89a3      	ldrh	r3, [r4, #12]
   29c02:	f043 0308 	orr.w	r3, r3, #8
   29c06:	81a3      	strh	r3, [r4, #12]
   29c08:	6923      	ldr	r3, [r4, #16]
   29c0a:	b94b      	cbnz	r3, 29c20 <__swsetup_r+0x98>
   29c0c:	89a3      	ldrh	r3, [r4, #12]
   29c0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
   29c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   29c16:	d003      	beq.n	29c20 <__swsetup_r+0x98>
   29c18:	4621      	mov	r1, r4
   29c1a:	4630      	mov	r0, r6
   29c1c:	f000 f87e 	bl	29d1c <__smakebuf_r>
   29c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29c24:	f013 0201 	ands.w	r2, r3, #1
   29c28:	d00a      	beq.n	29c40 <__swsetup_r+0xb8>
   29c2a:	2200      	movs	r2, #0
   29c2c:	60a2      	str	r2, [r4, #8]
   29c2e:	6962      	ldr	r2, [r4, #20]
   29c30:	4252      	negs	r2, r2
   29c32:	61a2      	str	r2, [r4, #24]
   29c34:	6922      	ldr	r2, [r4, #16]
   29c36:	b942      	cbnz	r2, 29c4a <__swsetup_r+0xc2>
   29c38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   29c3c:	d1bb      	bne.n	29bb6 <__swsetup_r+0x2e>
   29c3e:	bd70      	pop	{r4, r5, r6, pc}
   29c40:	0799      	lsls	r1, r3, #30
   29c42:	bf58      	it	pl
   29c44:	6962      	ldrpl	r2, [r4, #20]
   29c46:	60a2      	str	r2, [r4, #8]
   29c48:	e7f4      	b.n	29c34 <__swsetup_r+0xac>
   29c4a:	2000      	movs	r0, #0
   29c4c:	e7f7      	b.n	29c3e <__swsetup_r+0xb6>
   29c4e:	bf00      	nop
   29c50:	20008754 	.word	0x20008754
   29c54:	000325a8 	.word	0x000325a8
   29c58:	00032588 	.word	0x00032588
   29c5c:	00032568 	.word	0x00032568

00029c60 <_close_r>:
   29c60:	b538      	push	{r3, r4, r5, lr}
   29c62:	2300      	movs	r3, #0
   29c64:	4d05      	ldr	r5, [pc, #20]	; (29c7c <_close_r+0x1c>)
   29c66:	4604      	mov	r4, r0
   29c68:	4608      	mov	r0, r1
   29c6a:	602b      	str	r3, [r5, #0]
   29c6c:	f002 f8af 	bl	2bdce <_close>
   29c70:	1c43      	adds	r3, r0, #1
   29c72:	d102      	bne.n	29c7a <_close_r+0x1a>
   29c74:	682b      	ldr	r3, [r5, #0]
   29c76:	b103      	cbz	r3, 29c7a <_close_r+0x1a>
   29c78:	6023      	str	r3, [r4, #0]
   29c7a:	bd38      	pop	{r3, r4, r5, pc}
   29c7c:	20021aec 	.word	0x20021aec

00029c80 <_fflush_r>:
   29c80:	b538      	push	{r3, r4, r5, lr}
   29c82:	690b      	ldr	r3, [r1, #16]
   29c84:	4605      	mov	r5, r0
   29c86:	460c      	mov	r4, r1
   29c88:	b913      	cbnz	r3, 29c90 <_fflush_r+0x10>
   29c8a:	2500      	movs	r5, #0
   29c8c:	4628      	mov	r0, r5
   29c8e:	bd38      	pop	{r3, r4, r5, pc}
   29c90:	b118      	cbz	r0, 29c9a <_fflush_r+0x1a>
   29c92:	6983      	ldr	r3, [r0, #24]
   29c94:	b90b      	cbnz	r3, 29c9a <_fflush_r+0x1a>
   29c96:	f7ff fa29 	bl	290ec <__sinit>
   29c9a:	4b14      	ldr	r3, [pc, #80]	; (29cec <_fflush_r+0x6c>)
   29c9c:	429c      	cmp	r4, r3
   29c9e:	d11b      	bne.n	29cd8 <_fflush_r+0x58>
   29ca0:	686c      	ldr	r4, [r5, #4]
   29ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29ca6:	2b00      	cmp	r3, #0
   29ca8:	d0ef      	beq.n	29c8a <_fflush_r+0xa>
   29caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29cac:	07d0      	lsls	r0, r2, #31
   29cae:	d404      	bmi.n	29cba <_fflush_r+0x3a>
   29cb0:	0599      	lsls	r1, r3, #22
   29cb2:	d402      	bmi.n	29cba <_fflush_r+0x3a>
   29cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29cb6:	f7e7 fe8d 	bl	119d4 <__retarget_lock_acquire_recursive>
   29cba:	4628      	mov	r0, r5
   29cbc:	4621      	mov	r1, r4
   29cbe:	f006 ffbc 	bl	30c3a <__sflush_r>
   29cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29cc4:	4605      	mov	r5, r0
   29cc6:	07da      	lsls	r2, r3, #31
   29cc8:	d4e0      	bmi.n	29c8c <_fflush_r+0xc>
   29cca:	89a3      	ldrh	r3, [r4, #12]
   29ccc:	059b      	lsls	r3, r3, #22
   29cce:	d4dd      	bmi.n	29c8c <_fflush_r+0xc>
   29cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29cd2:	f7e7 fe9b 	bl	11a0c <__retarget_lock_release_recursive>
   29cd6:	e7d9      	b.n	29c8c <_fflush_r+0xc>
   29cd8:	4b05      	ldr	r3, [pc, #20]	; (29cf0 <_fflush_r+0x70>)
   29cda:	429c      	cmp	r4, r3
   29cdc:	d101      	bne.n	29ce2 <_fflush_r+0x62>
   29cde:	68ac      	ldr	r4, [r5, #8]
   29ce0:	e7df      	b.n	29ca2 <_fflush_r+0x22>
   29ce2:	4b04      	ldr	r3, [pc, #16]	; (29cf4 <_fflush_r+0x74>)
   29ce4:	429c      	cmp	r4, r3
   29ce6:	bf08      	it	eq
   29ce8:	68ec      	ldreq	r4, [r5, #12]
   29cea:	e7da      	b.n	29ca2 <_fflush_r+0x22>
   29cec:	000325a8 	.word	0x000325a8
   29cf0:	00032588 	.word	0x00032588
   29cf4:	00032568 	.word	0x00032568

00029cf8 <_lseek_r>:
   29cf8:	b538      	push	{r3, r4, r5, lr}
   29cfa:	4604      	mov	r4, r0
   29cfc:	4d06      	ldr	r5, [pc, #24]	; (29d18 <_lseek_r+0x20>)
   29cfe:	4608      	mov	r0, r1
   29d00:	4611      	mov	r1, r2
   29d02:	2200      	movs	r2, #0
   29d04:	602a      	str	r2, [r5, #0]
   29d06:	461a      	mov	r2, r3
   29d08:	f002 f864 	bl	2bdd4 <_lseek>
   29d0c:	1c43      	adds	r3, r0, #1
   29d0e:	d102      	bne.n	29d16 <_lseek_r+0x1e>
   29d10:	682b      	ldr	r3, [r5, #0]
   29d12:	b103      	cbz	r3, 29d16 <_lseek_r+0x1e>
   29d14:	6023      	str	r3, [r4, #0]
   29d16:	bd38      	pop	{r3, r4, r5, pc}
   29d18:	20021aec 	.word	0x20021aec

00029d1c <__smakebuf_r>:
   29d1c:	898b      	ldrh	r3, [r1, #12]
   29d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29d20:	079d      	lsls	r5, r3, #30
   29d22:	4606      	mov	r6, r0
   29d24:	460c      	mov	r4, r1
   29d26:	d507      	bpl.n	29d38 <__smakebuf_r+0x1c>
   29d28:	f104 0347 	add.w	r3, r4, #71	; 0x47
   29d2c:	6023      	str	r3, [r4, #0]
   29d2e:	6123      	str	r3, [r4, #16]
   29d30:	2301      	movs	r3, #1
   29d32:	6163      	str	r3, [r4, #20]
   29d34:	b003      	add	sp, #12
   29d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29d38:	ab01      	add	r3, sp, #4
   29d3a:	466a      	mov	r2, sp
   29d3c:	f006 fffc 	bl	30d38 <__swhatbuf_r>
   29d40:	9f00      	ldr	r7, [sp, #0]
   29d42:	4605      	mov	r5, r0
   29d44:	4630      	mov	r0, r6
   29d46:	4639      	mov	r1, r7
   29d48:	f7fe fd0e 	bl	28768 <_malloc_r>
   29d4c:	b948      	cbnz	r0, 29d62 <__smakebuf_r+0x46>
   29d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29d52:	059a      	lsls	r2, r3, #22
   29d54:	d4ee      	bmi.n	29d34 <__smakebuf_r+0x18>
   29d56:	f023 0303 	bic.w	r3, r3, #3
   29d5a:	f043 0302 	orr.w	r3, r3, #2
   29d5e:	81a3      	strh	r3, [r4, #12]
   29d60:	e7e2      	b.n	29d28 <__smakebuf_r+0xc>
   29d62:	4b0d      	ldr	r3, [pc, #52]	; (29d98 <__smakebuf_r+0x7c>)
   29d64:	62b3      	str	r3, [r6, #40]	; 0x28
   29d66:	89a3      	ldrh	r3, [r4, #12]
   29d68:	6020      	str	r0, [r4, #0]
   29d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29d6e:	81a3      	strh	r3, [r4, #12]
   29d70:	9b01      	ldr	r3, [sp, #4]
   29d72:	e9c4 0704 	strd	r0, r7, [r4, #16]
   29d76:	b15b      	cbz	r3, 29d90 <__smakebuf_r+0x74>
   29d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29d7c:	4630      	mov	r0, r6
   29d7e:	f000 f84b 	bl	29e18 <_isatty_r>
   29d82:	b128      	cbz	r0, 29d90 <__smakebuf_r+0x74>
   29d84:	89a3      	ldrh	r3, [r4, #12]
   29d86:	f023 0303 	bic.w	r3, r3, #3
   29d8a:	f043 0301 	orr.w	r3, r3, #1
   29d8e:	81a3      	strh	r3, [r4, #12]
   29d90:	89a3      	ldrh	r3, [r4, #12]
   29d92:	431d      	orrs	r5, r3
   29d94:	81a5      	strh	r5, [r4, #12]
   29d96:	e7cd      	b.n	29d34 <__smakebuf_r+0x18>
   29d98:	000290b1 	.word	0x000290b1

00029d9c <_read_r>:
   29d9c:	b538      	push	{r3, r4, r5, lr}
   29d9e:	4604      	mov	r4, r0
   29da0:	4d06      	ldr	r5, [pc, #24]	; (29dbc <_read_r+0x20>)
   29da2:	4608      	mov	r0, r1
   29da4:	4611      	mov	r1, r2
   29da6:	2200      	movs	r2, #0
   29da8:	602a      	str	r2, [r5, #0]
   29daa:	461a      	mov	r2, r3
   29dac:	f002 f807 	bl	2bdbe <_read>
   29db0:	1c43      	adds	r3, r0, #1
   29db2:	d102      	bne.n	29dba <_read_r+0x1e>
   29db4:	682b      	ldr	r3, [r5, #0]
   29db6:	b103      	cbz	r3, 29dba <_read_r+0x1e>
   29db8:	6023      	str	r3, [r4, #0]
   29dba:	bd38      	pop	{r3, r4, r5, pc}
   29dbc:	20021aec 	.word	0x20021aec

00029dc0 <raise>:
   29dc0:	4b02      	ldr	r3, [pc, #8]	; (29dcc <raise+0xc>)
   29dc2:	4601      	mov	r1, r0
   29dc4:	6818      	ldr	r0, [r3, #0]
   29dc6:	f006 bfee 	b.w	30da6 <_raise_r>
   29dca:	bf00      	nop
   29dcc:	20008754 	.word	0x20008754

00029dd0 <_kill_r>:
   29dd0:	b538      	push	{r3, r4, r5, lr}
   29dd2:	2300      	movs	r3, #0
   29dd4:	4d06      	ldr	r5, [pc, #24]	; (29df0 <_kill_r+0x20>)
   29dd6:	4604      	mov	r4, r0
   29dd8:	4608      	mov	r0, r1
   29dda:	4611      	mov	r1, r2
   29ddc:	602b      	str	r3, [r5, #0]
   29dde:	f002 f800 	bl	2bde2 <_kill>
   29de2:	1c43      	adds	r3, r0, #1
   29de4:	d102      	bne.n	29dec <_kill_r+0x1c>
   29de6:	682b      	ldr	r3, [r5, #0]
   29de8:	b103      	cbz	r3, 29dec <_kill_r+0x1c>
   29dea:	6023      	str	r3, [r4, #0]
   29dec:	bd38      	pop	{r3, r4, r5, pc}
   29dee:	bf00      	nop
   29df0:	20021aec 	.word	0x20021aec

00029df4 <_fstat_r>:
   29df4:	b538      	push	{r3, r4, r5, lr}
   29df6:	2300      	movs	r3, #0
   29df8:	4d06      	ldr	r5, [pc, #24]	; (29e14 <_fstat_r+0x20>)
   29dfa:	4604      	mov	r4, r0
   29dfc:	4608      	mov	r0, r1
   29dfe:	4611      	mov	r1, r2
   29e00:	602b      	str	r3, [r5, #0]
   29e02:	f001 fff2 	bl	2bdea <_fstat>
   29e06:	1c43      	adds	r3, r0, #1
   29e08:	d102      	bne.n	29e10 <_fstat_r+0x1c>
   29e0a:	682b      	ldr	r3, [r5, #0]
   29e0c:	b103      	cbz	r3, 29e10 <_fstat_r+0x1c>
   29e0e:	6023      	str	r3, [r4, #0]
   29e10:	bd38      	pop	{r3, r4, r5, pc}
   29e12:	bf00      	nop
   29e14:	20021aec 	.word	0x20021aec

00029e18 <_isatty_r>:
   29e18:	b538      	push	{r3, r4, r5, lr}
   29e1a:	2300      	movs	r3, #0
   29e1c:	4d05      	ldr	r5, [pc, #20]	; (29e34 <_isatty_r+0x1c>)
   29e1e:	4604      	mov	r4, r0
   29e20:	4608      	mov	r0, r1
   29e22:	602b      	str	r3, [r5, #0]
   29e24:	f001 ffd8 	bl	2bdd8 <_isatty>
   29e28:	1c43      	adds	r3, r0, #1
   29e2a:	d102      	bne.n	29e32 <_isatty_r+0x1a>
   29e2c:	682b      	ldr	r3, [r5, #0]
   29e2e:	b103      	cbz	r3, 29e32 <_isatty_r+0x1a>
   29e30:	6023      	str	r3, [r4, #0]
   29e32:	bd38      	pop	{r3, r4, r5, pc}
   29e34:	20021aec 	.word	0x20021aec

00029e38 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   29e38:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   29e3a:	f7fd faed 	bl	27418 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   29e3e:	f7fe fbd5 	bl	285ec <k_thread_system_pool_assign>
    return 0;
}
   29e42:	2000      	movs	r0, #0
   29e44:	bd08      	pop	{r3, pc}

00029e46 <uart_cb_2>:
}
   29e46:	4770      	bx	lr

00029e48 <z_log_msg_static_create.constprop.0>:
   29e48:	2300      	movs	r3, #0
   29e4a:	f7e4 bd21 	b.w	e890 <z_impl_z_log_msg_static_create>

00029e4e <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   29e4e:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   29e50:	6883      	ldr	r3, [r0, #8]
   29e52:	2228      	movs	r2, #40	; 0x28
   29e54:	68dc      	ldr	r4, [r3, #12]
   29e56:	2332      	movs	r3, #50	; 0x32
   29e58:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   29e5a:	bc10      	pop	{r4}
   29e5c:	4760      	bx	ip

00029e5e <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   29e5e:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   29e60:	6883      	ldr	r3, [r0, #8]
   29e62:	685c      	ldr	r4, [r3, #4]
   29e64:	f04f 33ff 	mov.w	r3, #4294967295
   29e68:	46a4      	mov	ip, r4
}
   29e6a:	bc10      	pop	{r4}
   29e6c:	4760      	bx	ip

00029e6e <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   29e6e:	f7fb bbef 	b.w	25650 <z_impl_k_sem_take>

00029e72 <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   29e72:	6883      	ldr	r3, [r0, #8]
   29e74:	69db      	ldr	r3, [r3, #28]
   29e76:	b10b      	cbz	r3, 29e7c <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   29e78:	2201      	movs	r2, #1
   29e7a:	4718      	bx	r3
}
   29e7c:	4770      	bx	lr

00029e7e <send_protobuf>:
void send_protobuf(void){
   29e7e:	b510      	push	{r4, lr}
   29e80:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
    buf_proto=send_array_dd_v0(); 
   29e84:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   29e88:	4620      	mov	r0, r4
   29e8a:	f7e1 ff01 	bl	bc90 <send_array_dd_v0>
    send_bluetooth(buf_proto);
   29e8e:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   29e92:	f240 72cc 	movw	r2, #1996	; 0x7cc
   29e96:	4668      	mov	r0, sp
   29e98:	f006 fb69 	bl	3056e <memcpy>
   29e9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29ea0:	f7e1 fb74 	bl	b58c <send_bluetooth>
}
   29ea4:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   29ea8:	bd10      	pop	{r4, pc}

00029eaa <error>:
{
   29eaa:	b508      	push	{r3, lr}
	turn_off_all_leds();
   29eac:	f7e1 fcce 	bl	b84c <turn_off_all_leds>
	return z_impl_k_sleep(timeout);
   29eb0:	2100      	movs	r1, #0
   29eb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29eb6:	f7fd fa7b 	bl	273b0 <z_impl_k_sleep>
	while (true) {
   29eba:	e7f9      	b.n	29eb0 <error+0x6>

00029ebc <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   29ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   29ebe:	6806      	ldr	r6, [r0, #0]
   29ec0:	8902      	ldrh	r2, [r0, #8]
   29ec2:	8a33      	ldrh	r3, [r6, #16]
   29ec4:	429a      	cmp	r2, r3
   29ec6:	d271      	bcs.n	29fac <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   29ec8:	6831      	ldr	r1, [r6, #0]
   29eca:	8942      	ldrh	r2, [r0, #10]
   29ecc:	0093      	lsls	r3, r2, #2
   29ece:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   29ed2:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29ed6:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   29eda:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29edc:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29ede:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   29ee2:	d01f      	beq.n	29f24 <load_descriptor_values+0x68>
   29ee4:	2902      	cmp	r1, #2
   29ee6:	d02a      	beq.n	29f3e <load_descriptor_values+0x82>
   29ee8:	2900      	cmp	r1, #0
   29eea:	d135      	bne.n	29f58 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   29eec:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   29ef0:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   29ef4:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   29ef8:	0f12      	lsrs	r2, r2, #28
   29efa:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   29efc:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   29efe:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29f02:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   29f04:	2a00      	cmp	r2, #0
   29f06:	d134      	bne.n	29f72 <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   29f08:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   29f0a:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   29f0c:	f004 040e 	and.w	r4, r4, #14
   29f10:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   29f12:	bf11      	iteee	ne
   29f14:	2300      	movne	r3, #0
   29f16:	89c2      	ldrheq	r2, [r0, #14]
   29f18:	6873      	ldreq	r3, [r6, #4]
   29f1a:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   29f1e:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   29f20:	2001      	movs	r0, #1
}
   29f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f24:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   29f26:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f2a:	4419      	add	r1, r3
   29f2c:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   29f2e:	0f0b      	lsrs	r3, r1, #28
   29f30:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   29f34:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   29f36:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   29f38:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   29f3c:	e7dd      	b.n	29efa <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f3e:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   29f40:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f44:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29f46:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29f4a:	0a1a      	lsrs	r2, r3, #8
   29f4c:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   29f50:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   29f52:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   29f54:	898a      	ldrh	r2, [r1, #12]
            break;
   29f56:	e7d0      	b.n	29efa <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f58:	6832      	ldr	r2, [r6, #0]
   29f5a:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29f5c:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29f60:	0a19      	lsrs	r1, r3, #8
   29f62:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   29f66:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29f6a:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   29f6c:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   29f6e:	b25b      	sxtb	r3, r3
            break;
   29f70:	e7c3      	b.n	29efa <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   29f72:	443a      	add	r2, r7
   29f74:	6182      	str	r2, [r0, #24]
        if (size_offset)
   29f76:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   29f7a:	b123      	cbz	r3, 29f86 <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   29f7c:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29f7e:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   29f80:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29f82:	d109      	bne.n	29f98 <load_descriptor_values+0xdc>
   29f84:	e00f      	b.n	29fa6 <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   29f86:	f004 0530 	and.w	r5, r4, #48	; 0x30
   29f8a:	2d20      	cmp	r5, #32
   29f8c:	d1f7      	bne.n	29f7e <load_descriptor_values+0xc2>
   29f8e:	2c3f      	cmp	r4, #63	; 0x3f
   29f90:	d804      	bhi.n	29f9c <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   29f92:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   29f96:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   29f98:	61c2      	str	r2, [r0, #28]
   29f9a:	e7b7      	b.n	29f0c <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   29f9c:	2980      	cmp	r1, #128	; 0x80
   29f9e:	d1fa      	bne.n	29f96 <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   29fa0:	f100 0314 	add.w	r3, r0, #20
   29fa4:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   29fa6:	6813      	ldr	r3, [r2, #0]
   29fa8:	61c3      	str	r3, [r0, #28]
   29faa:	e7af      	b.n	29f0c <load_descriptor_values+0x50>
        return false;
   29fac:	2000      	movs	r0, #0
   29fae:	e7b8      	b.n	29f22 <load_descriptor_values+0x66>

00029fb0 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   29fb0:	8903      	ldrh	r3, [r0, #8]
{
   29fb2:	b510      	push	{r4, lr}
    iter->index++;
   29fb4:	3301      	adds	r3, #1
   29fb6:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   29fb8:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   29fba:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   29fbc:	8a0a      	ldrh	r2, [r1, #16]
   29fbe:	429a      	cmp	r2, r3
   29fc0:	d803      	bhi.n	29fca <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   29fc2:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   29fc4:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   29fc8:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   29fca:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   29fcc:	680b      	ldr	r3, [r1, #0]
   29fce:	8942      	ldrh	r2, [r0, #10]
   29fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   29fd4:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   29fd6:	f001 0103 	and.w	r1, r1, #3
   29fda:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   29fde:	440a      	add	r2, r1
   29fe0:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   29fe2:	8982      	ldrh	r2, [r0, #12]
   29fe4:	f003 0130 	and.w	r1, r3, #48	; 0x30
   29fe8:	2900      	cmp	r1, #0
   29fea:	bf08      	it	eq
   29fec:	3201      	addeq	r2, #1
   29fee:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   29ff0:	89c2      	ldrh	r2, [r0, #14]
   29ff2:	f003 030e 	and.w	r3, r3, #14
   29ff6:	2b08      	cmp	r3, #8
   29ff8:	bf08      	it	eq
   29ffa:	3201      	addeq	r2, #1
   29ffc:	81c2      	strh	r2, [r0, #14]
}
   29ffe:	e7e3      	b.n	29fc8 <advance_iterator+0x18>

0002a000 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   2a000:	b570      	push	{r4, r5, r6, lr}
   2a002:	4604      	mov	r4, r0
   2a004:	460e      	mov	r6, r1
   2a006:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   2a008:	2100      	movs	r1, #0
   2a00a:	2220      	movs	r2, #32
   2a00c:	3008      	adds	r0, #8
   2a00e:	f006 fae8 	bl	305e2 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   2a012:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   2a016:	4620      	mov	r0, r4
}
   2a018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   2a01c:	f7ff bf4e 	b.w	29ebc <load_descriptor_values>

0002a020 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   2a020:	b538      	push	{r3, r4, r5, lr}
   2a022:	460c      	mov	r4, r1
   2a024:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   2a026:	680b      	ldr	r3, [r1, #0]
   2a028:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   2a02a:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   2a02c:	681b      	ldr	r3, [r3, #0]
   2a02e:	0a1b      	lsrs	r3, r3, #8
   2a030:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2a034:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a036:	bf14      	ite	ne
   2a038:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   2a03a:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   2a03c:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a03e:	f7ff ffdf 	bl	2a000 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   2a042:	622c      	str	r4, [r5, #32]
    return status;
}
   2a044:	bd38      	pop	{r3, r4, r5, pc}

0002a046 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   2a046:	b510      	push	{r4, lr}
   2a048:	4604      	mov	r4, r0
    advance_iterator(iter);
   2a04a:	f7ff ffb1 	bl	29fb0 <advance_iterator>
    (void)load_descriptor_values(iter);
   2a04e:	f7ff ff35 	bl	29ebc <load_descriptor_values>
    return iter->index != 0;
   2a052:	8920      	ldrh	r0, [r4, #8]
}
   2a054:	3800      	subs	r0, #0
   2a056:	bf18      	it	ne
   2a058:	2001      	movne	r0, #1
   2a05a:	bd10      	pop	{r4, pc}

0002a05c <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   2a05c:	f7ff bfd0 	b.w	2a000 <pb_field_iter_begin>

0002a060 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   2a060:	f7ff bfde 	b.w	2a020 <pb_field_iter_begin_extension>

0002a064 <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   2a064:	b410      	push	{r4}
   2a066:	460b      	mov	r3, r1
   2a068:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   2a06a:	8a52      	ldrh	r2, [r2, #18]
   2a06c:	2a08      	cmp	r2, #8
   2a06e:	d10e      	bne.n	2a08e <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   2a070:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   2a072:	b162      	cbz	r2, 2a08e <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   2a074:	b128      	cbz	r0, 2a082 <pb_default_field_callback+0x1e>
   2a076:	6814      	ldr	r4, [r2, #0]
   2a078:	b11c      	cbz	r4, 2a082 <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   2a07a:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a07c:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   2a07e:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a080:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   2a082:	b123      	cbz	r3, 2a08e <pb_default_field_callback+0x2a>
   2a084:	6814      	ldr	r4, [r2, #0]
   2a086:	b114      	cbz	r4, 2a08e <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a088:	4618      	mov	r0, r3
   2a08a:	3204      	adds	r2, #4
   2a08c:	e7f6      	b.n	2a07c <pb_default_field_callback+0x18>
}
   2a08e:	2001      	movs	r0, #1
   2a090:	bc10      	pop	{r4}
   2a092:	4770      	bx	lr

0002a094 <buf_write>:
{
   2a094:	4603      	mov	r3, r0
   2a096:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   2a098:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   2a09a:	1884      	adds	r4, r0, r2
   2a09c:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a09e:	f006 fa66 	bl	3056e <memcpy>
}
   2a0a2:	2001      	movs	r0, #1
   2a0a4:	bd10      	pop	{r4, pc}

0002a0a6 <pb_encode_varint>:
{
   2a0a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   2a0a8:	2a80      	cmp	r2, #128	; 0x80
{
   2a0aa:	b085      	sub	sp, #20
    if (value <= 0x7F)
   2a0ac:	f173 0100 	sbcs.w	r1, r3, #0
{
   2a0b0:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   2a0b2:	b2d4      	uxtb	r4, r2
   2a0b4:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   2a0b6:	d206      	bcs.n	2a0c6 <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   2a0b8:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   2a0ba:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   2a0be:	f7e1 ff57 	bl	bf70 <pb_write>
}
   2a0c2:	b005      	add	sp, #20
   2a0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   2a0c6:	09d5      	lsrs	r5, r2, #7
   2a0c8:	4608      	mov	r0, r1
    size_t i = 0;
   2a0ca:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   2a0cc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a0d0:	ea53 0c05 	orrs.w	ip, r3, r5
   2a0d4:	4617      	mov	r7, r2
        buffer[i++] = byte;
   2a0d6:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   2a0da:	d108      	bne.n	2a0ee <pb_encode_varint+0x48>
   2a0dc:	463a      	mov	r2, r7
    buffer[i++] = byte;
   2a0de:	f102 0310 	add.w	r3, r2, #16
   2a0e2:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   2a0e4:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2a0e6:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   2a0ea:	3201      	adds	r2, #1
   2a0ec:	e7e7      	b.n	2a0be <pb_encode_varint+0x18>
        byte |= 0x80;
   2a0ee:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a0f2:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   2a0f4:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   2a0f8:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   2a0fc:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   2a100:	d1e6      	bne.n	2a0d0 <pb_encode_varint+0x2a>
    if (high)
   2a102:	2b00      	cmp	r3, #0
   2a104:	d0eb      	beq.n	2a0de <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   2a106:	0118      	lsls	r0, r3, #4
   2a108:	f000 0070 	and.w	r0, r0, #112	; 0x70
   2a10c:	4304      	orrs	r4, r0
        high >>= 3;
   2a10e:	08db      	lsrs	r3, r3, #3
        while (high)
   2a110:	2b00      	cmp	r3, #0
   2a112:	d0e4      	beq.n	2a0de <pb_encode_varint+0x38>
            byte |= 0x80;
   2a114:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   2a118:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   2a11a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   2a11e:	3201      	adds	r2, #1
   2a120:	09db      	lsrs	r3, r3, #7
   2a122:	e7f5      	b.n	2a110 <pb_encode_varint+0x6a>

0002a124 <pb_encode_svarint>:
    if (value < 0)
   2a124:	1892      	adds	r2, r2, r2
   2a126:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   2a12a:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   2a12e:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   2a132:	f7ff bfb8 	b.w	2a0a6 <pb_encode_varint>

0002a136 <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   2a136:	2204      	movs	r2, #4
   2a138:	f7e1 bf1a 	b.w	bf70 <pb_write>

0002a13c <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   2a13c:	2208      	movs	r2, #8
   2a13e:	f7e1 bf17 	b.w	bf70 <pb_write>

0002a142 <pb_encode_tag>:
{
   2a142:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   2a144:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   2a148:	0f5b      	lsrs	r3, r3, #29
   2a14a:	f7ff bfac 	b.w	2a0a6 <pb_encode_varint>

0002a14e <pb_encode_string>:
{
   2a14e:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a150:	2300      	movs	r3, #0
{
   2a152:	4604      	mov	r4, r0
   2a154:	460d      	mov	r5, r1
   2a156:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a158:	f7ff ffa5 	bl	2a0a6 <pb_encode_varint>
   2a15c:	b130      	cbz	r0, 2a16c <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   2a15e:	4632      	mov	r2, r6
   2a160:	4629      	mov	r1, r5
   2a162:	4620      	mov	r0, r4
}
   2a164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   2a168:	f7e1 bf02 	b.w	bf70 <pb_write>
}
   2a16c:	bd70      	pop	{r4, r5, r6, pc}

0002a16e <cbpprintf_external>:
{
   2a16e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a172:	4606      	mov	r6, r0
   2a174:	460d      	mov	r5, r1
   2a176:	4617      	mov	r7, r2
	if (buf == NULL) {
   2a178:	4698      	mov	r8, r3
   2a17a:	b32b      	cbz	r3, 2a1c8 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   2a17c:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a180:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2a184:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a188:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a18a:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a18c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2a190:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a194:	441c      	add	r4, r3
   2a196:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2a198:	45ca      	cmp	sl, r9
   2a19a:	d309      	bcc.n	2a1b0 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2a19c:	4639      	mov	r1, r7
   2a19e:	4630      	mov	r0, r6
   2a1a0:	46ac      	mov	ip, r5
   2a1a2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a1a6:	f108 0308 	add.w	r3, r8, #8
}
   2a1aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2a1ae:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2a1b0:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2a1b4:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2a1b8:	4620      	mov	r0, r4
		*ps = s;
   2a1ba:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2a1be:	f7df f8e2 	bl	9386 <strlen>
   2a1c2:	3001      	adds	r0, #1
   2a1c4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2a1c6:	e7e7      	b.n	2a198 <cbpprintf_external+0x2a>
}
   2a1c8:	f06f 0015 	mvn.w	r0, #21
   2a1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a1d0 <is_ptr>:
{
   2a1d0:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2a1d2:	2500      	movs	r5, #0
{
   2a1d4:	4602      	mov	r2, r0
	bool mod = false;
   2a1d6:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2a1d8:	4614      	mov	r4, r2
   2a1da:	f814 3b01 	ldrb.w	r3, [r4], #1
   2a1de:	b90b      	cbnz	r3, 2a1e4 <is_ptr+0x14>
					return false;
   2a1e0:	4618      	mov	r0, r3
   2a1e2:	e009      	b.n	2a1f8 <is_ptr+0x28>
		if (mod) {
   2a1e4:	b198      	cbz	r0, 2a20e <is_ptr+0x3e>
			if (cnt == n) {
   2a1e6:	428d      	cmp	r5, r1
   2a1e8:	d107      	bne.n	2a1fa <is_ptr+0x2a>
				if (c == 'p') {
   2a1ea:	2b70      	cmp	r3, #112	; 0x70
   2a1ec:	d004      	beq.n	2a1f8 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   2a1ee:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2a1f2:	2a3a      	cmp	r2, #58	; 0x3a
   2a1f4:	d80b      	bhi.n	2a20e <is_ptr+0x3e>
					return false;
   2a1f6:	2000      	movs	r0, #0
}
   2a1f8:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2a1fa:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   2a1fe:	2e3a      	cmp	r6, #58	; 0x3a
   2a200:	d805      	bhi.n	2a20e <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2a202:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2a204:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2a206:	1c94      	adds	r4, r2, #2
   2a208:	2b00      	cmp	r3, #0
   2a20a:	d0e9      	beq.n	2a1e0 <is_ptr+0x10>
   2a20c:	2000      	movs	r0, #0
		if (c == '%') {
   2a20e:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   2a210:	4622      	mov	r2, r4
			mod = !mod;
   2a212:	bf08      	it	eq
   2a214:	f080 0001 	eoreq.w	r0, r0, #1
   2a218:	e7de      	b.n	2a1d8 <is_ptr+0x8>

0002a21a <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2a21a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   2a21c:	2364      	movs	r3, #100	; 0x64
{
   2a21e:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2a220:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   2a222:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2a224:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   2a226:	b969      	cbnz	r1, 2a244 <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   2a228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2a22a:	429a      	cmp	r2, r3
   2a22c:	fbb2 f4f3 	udiv	r4, r2, r3
   2a230:	d20c      	bcs.n	2a24c <u8_to_dec+0x32>
   2a232:	2b01      	cmp	r3, #1
   2a234:	d00a      	beq.n	2a24c <u8_to_dec+0x32>
   2a236:	b948      	cbnz	r0, 2a24c <u8_to_dec+0x32>
		value -= digit * divisor;
   2a238:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   2a23c:	240a      	movs	r4, #10
   2a23e:	fbb3 f3f4 	udiv	r3, r3, r4
   2a242:	b2d2      	uxtb	r2, r2
	while (buflen > 0 && divisor > 0) {
   2a244:	3e01      	subs	r6, #1
   2a246:	d1f0      	bne.n	2a22a <u8_to_dec+0x10>
		*buf = '\0';
   2a248:	702e      	strb	r6, [r5, #0]
	return num_digits;
   2a24a:	e7ed      	b.n	2a228 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   2a24c:	3430      	adds	r4, #48	; 0x30
   2a24e:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   2a252:	fbb2 f4f3 	udiv	r4, r2, r3
   2a256:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   2a25a:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   2a25e:	3901      	subs	r1, #1
			num_digits++;
   2a260:	3001      	adds	r0, #1
			buflen--;
   2a262:	b2c9      	uxtb	r1, r1
			num_digits++;
   2a264:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2a266:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2a268:	b2db      	uxtb	r3, r3
   2a26a:	e7dc      	b.n	2a226 <u8_to_dec+0xc>

0002a26c <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2a26c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2a270:	b2db      	uxtb	r3, r3
   2a272:	2b09      	cmp	r3, #9
   2a274:	d802      	bhi.n	2a27c <char2hex+0x10>
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2a276:	2000      	movs	r0, #0
		*x = c - '0';
   2a278:	700b      	strb	r3, [r1, #0]
   2a27a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2a27c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2a280:	2b05      	cmp	r3, #5
   2a282:	d802      	bhi.n	2a28a <char2hex+0x1e>
		*x = c - 'a' + 10;
   2a284:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   2a286:	b2c3      	uxtb	r3, r0
   2a288:	e7f5      	b.n	2a276 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   2a28a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2a28e:	2b05      	cmp	r3, #5
   2a290:	d801      	bhi.n	2a296 <char2hex+0x2a>
		*x = c - 'A' + 10;
   2a292:	3837      	subs	r0, #55	; 0x37
   2a294:	e7f7      	b.n	2a286 <char2hex+0x1a>
		return -EINVAL;
   2a296:	f06f 0015 	mvn.w	r0, #21
}
   2a29a:	4770      	bx	lr

0002a29c <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a29e:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2a2a0:	f001 0001 	and.w	r0, r1, #1
   2a2a4:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   2a2a8:	429e      	cmp	r6, r3
   2a2aa:	ea4f 0751 	mov.w	r7, r1, lsr #1
   2a2ae:	d903      	bls.n	2a2b8 <hex2bin+0x1c>
		return 0;
   2a2b0:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2a2b2:	4630      	mov	r0, r6
   2a2b4:	b003      	add	sp, #12
   2a2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2a2b8:	b158      	cbz	r0, 2a2d2 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2a2ba:	7828      	ldrb	r0, [r5, #0]
   2a2bc:	f10d 0107 	add.w	r1, sp, #7
   2a2c0:	f7ff ffd4 	bl	2a26c <char2hex>
   2a2c4:	2800      	cmp	r0, #0
   2a2c6:	dbf3      	blt.n	2a2b0 <hex2bin+0x14>
		buf[0] = dec;
   2a2c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   2a2cc:	3501      	adds	r5, #1
		buf[0] = dec;
   2a2ce:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a2d2:	3501      	adds	r5, #1
   2a2d4:	4417      	add	r7, r2
   2a2d6:	42ba      	cmp	r2, r7
   2a2d8:	d0eb      	beq.n	2a2b2 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2a2da:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   2a2de:	f10d 0107 	add.w	r1, sp, #7
   2a2e2:	f7ff ffc3 	bl	2a26c <char2hex>
   2a2e6:	2800      	cmp	r0, #0
   2a2e8:	dbe2      	blt.n	2a2b0 <hex2bin+0x14>
		buf[i] = dec << 4;
   2a2ea:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2a2ee:	0124      	lsls	r4, r4, #4
   2a2f0:	b2e4      	uxtb	r4, r4
   2a2f2:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2a2f4:	f815 0b02 	ldrb.w	r0, [r5], #2
   2a2f8:	f7ff ffb8 	bl	2a26c <char2hex>
   2a2fc:	2800      	cmp	r0, #0
   2a2fe:	dbd7      	blt.n	2a2b0 <hex2bin+0x14>
		buf[i] += dec;
   2a300:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a304:	441c      	add	r4, r3
   2a306:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a30a:	e7e4      	b.n	2a2d6 <hex2bin+0x3a>

0002a30c <arch_printk_char_out>:
}
   2a30c:	2000      	movs	r0, #0
   2a30e:	4770      	bx	lr

0002a310 <str_out>:
{
   2a310:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a312:	688a      	ldr	r2, [r1, #8]
   2a314:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2a316:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a318:	b114      	cbz	r4, 2a320 <str_out+0x10>
   2a31a:	684b      	ldr	r3, [r1, #4]
   2a31c:	4293      	cmp	r3, r2
   2a31e:	dc01      	bgt.n	2a324 <str_out+0x14>
		ctx->count++;
   2a320:	608d      	str	r5, [r1, #8]
}
   2a322:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2a324:	3b01      	subs	r3, #1
   2a326:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2a328:	bf08      	it	eq
   2a32a:	2200      	moveq	r2, #0
   2a32c:	608d      	str	r5, [r1, #8]
   2a32e:	bf0c      	ite	eq
   2a330:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2a332:	54a0      	strbne	r0, [r4, r2]
   2a334:	e7f5      	b.n	2a322 <str_out+0x12>

0002a336 <printk>:
{
   2a336:	b40f      	push	{r0, r1, r2, r3}
   2a338:	b507      	push	{r0, r1, r2, lr}
   2a33a:	a904      	add	r1, sp, #16
   2a33c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a340:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2a342:	f7e2 fb03 	bl	c94c <vprintk>
}
   2a346:	b003      	add	sp, #12
   2a348:	f85d eb04 	ldr.w	lr, [sp], #4
   2a34c:	b004      	add	sp, #16
   2a34e:	4770      	bx	lr

0002a350 <snprintk>:
{
   2a350:	b40c      	push	{r2, r3}
   2a352:	b507      	push	{r0, r1, r2, lr}
   2a354:	ab04      	add	r3, sp, #16
   2a356:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2a35a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2a35c:	f7e2 fb04 	bl	c968 <vsnprintk>
}
   2a360:	b003      	add	sp, #12
   2a362:	f85d eb04 	ldr.w	lr, [sp], #4
   2a366:	b002      	add	sp, #8
   2a368:	4770      	bx	lr

0002a36a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a36a:	4604      	mov	r4, r0
   2a36c:	b508      	push	{r3, lr}
   2a36e:	4608      	mov	r0, r1
   2a370:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a372:	461a      	mov	r2, r3
   2a374:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a376:	f7fd f84f 	bl	27418 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a37a:	f7e7 f857 	bl	1142c <z_impl_k_thread_abort>

0002a37e <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2a37e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2a382:	8840      	ldrh	r0, [r0, #2]
}
   2a384:	0840      	lsrs	r0, r0, #1
   2a386:	4770      	bx	lr

0002a388 <free_list_add>:
{
   2a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a38a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a38c:	f7ff fff7 	bl	2a37e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a390:	fab0 f080 	clz	r0, r0
   2a394:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2a398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2a39c:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2a3a0:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2a3a2:	1d17      	adds	r7, r2, #4
{
   2a3a4:	460c      	mov	r4, r1
   2a3a6:	3206      	adds	r2, #6
   2a3a8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2a3aa:	b956      	cbnz	r6, 2a3c2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2a3ac:	2101      	movs	r1, #1
   2a3ae:	fa01 f000 	lsl.w	r0, r1, r0
   2a3b2:	68d9      	ldr	r1, [r3, #12]
   2a3b4:	4301      	orrs	r1, r0
   2a3b6:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2a3b8:	f8cc 4010 	str.w	r4, [ip, #16]
   2a3bc:	53dd      	strh	r5, [r3, r7]
   2a3be:	529d      	strh	r5, [r3, r2]
}
   2a3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2a3c2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2a3c4:	3104      	adds	r1, #4
   2a3c6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2a3c8:	53d8      	strh	r0, [r3, r7]
   2a3ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a3ce:	529e      	strh	r6, [r3, r2]
   2a3d0:	80c5      	strh	r5, [r0, #6]
   2a3d2:	525d      	strh	r5, [r3, r1]
   2a3d4:	e7f4      	b.n	2a3c0 <free_list_add+0x38>

0002a3d6 <free_list_remove_bidx>:
{
   2a3d6:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2a3d8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a3dc:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2a3de:	4299      	cmp	r1, r3
   2a3e0:	f102 0104 	add.w	r1, r2, #4
   2a3e4:	d10a      	bne.n	2a3fc <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2a3e6:	2301      	movs	r3, #1
   2a3e8:	fa03 f202 	lsl.w	r2, r3, r2
   2a3ec:	68c3      	ldr	r3, [r0, #12]
   2a3ee:	ea23 0302 	bic.w	r3, r3, r2
   2a3f2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a3f4:	2300      	movs	r3, #0
   2a3f6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2a3fa:	bd10      	pop	{r4, pc}
   2a3fc:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2a3fe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2a402:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2a406:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2a40a:	80cb      	strh	r3, [r1, #6]
   2a40c:	8082      	strh	r2, [r0, #4]
}
   2a40e:	e7f4      	b.n	2a3fa <free_list_remove_bidx+0x24>

0002a410 <free_list_remove>:
{
   2a410:	b508      	push	{r3, lr}
   2a412:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a414:	f7ff ffb3 	bl	2a37e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a418:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2a41c:	4618      	mov	r0, r3
}
   2a41e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2a422:	f1c2 021f 	rsb	r2, r2, #31
   2a426:	f7ff bfd6 	b.w	2a3d6 <free_list_remove_bidx>

0002a42a <alloc_chunk>:
{
   2a42a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a42e:	fab1 f581 	clz	r5, r1
   2a432:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2a436:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2a43a:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2a43e:	4603      	mov	r3, r0
   2a440:	460e      	mov	r6, r1
	if (b->next) {
   2a442:	b1c2      	cbz	r2, 2a476 <alloc_chunk+0x4c>
   2a444:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2a446:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2a44a:	4618      	mov	r0, r3
   2a44c:	4621      	mov	r1, r4
   2a44e:	f7ff ff96 	bl	2a37e <chunk_size>
   2a452:	42b0      	cmp	r0, r6
   2a454:	d306      	bcc.n	2a464 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2a456:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2a458:	4618      	mov	r0, r3
   2a45a:	f7ff ffbc 	bl	2a3d6 <free_list_remove_bidx>
}
   2a45e:	4620      	mov	r0, r4
   2a460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2a464:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2a468:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2a46a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2a46c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2a470:	d001      	beq.n	2a476 <alloc_chunk+0x4c>
   2a472:	4282      	cmp	r2, r0
   2a474:	d1e7      	bne.n	2a446 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2a476:	f04f 34ff 	mov.w	r4, #4294967295
   2a47a:	f1c5 0220 	rsb	r2, r5, #32
   2a47e:	4094      	lsls	r4, r2
   2a480:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2a482:	4014      	ands	r4, r2
   2a484:	d0eb      	beq.n	2a45e <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2a486:	fa94 f2a4 	rbit	r2, r4
   2a48a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2a48e:	1d11      	adds	r1, r2, #4
   2a490:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2a494:	4621      	mov	r1, r4
   2a496:	e7df      	b.n	2a458 <alloc_chunk+0x2e>

0002a498 <merge_chunks>:
{
   2a498:	b538      	push	{r3, r4, r5, lr}
   2a49a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a49c:	f7ff ff6f 	bl	2a37e <chunk_size>
{
   2a4a0:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a4a2:	4604      	mov	r4, r0
   2a4a4:	4611      	mov	r1, r2
   2a4a6:	4618      	mov	r0, r3
   2a4a8:	f7ff ff69 	bl	2a37e <chunk_size>
   2a4ac:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a4ae:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2a4b0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2a4b4:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2a4b6:	4618      	mov	r0, r3
   2a4b8:	f7ff ff61 	bl	2a37e <chunk_size>
	void *cmem = &buf[c];
   2a4bc:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a4be:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2a4c2:	bd38      	pop	{r3, r4, r5, pc}

0002a4c4 <split_chunks>:
{
   2a4c4:	b538      	push	{r3, r4, r5, lr}
   2a4c6:	460c      	mov	r4, r1
   2a4c8:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2a4ca:	f7ff ff58 	bl	2a37e <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2a4ce:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2a4d0:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2a4d2:	4405      	add	r5, r0
   2a4d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a4d8:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2a4da:	8060      	strh	r0, [r4, #2]
   2a4dc:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a4e0:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2a4e2:	8044      	strh	r4, [r0, #2]
   2a4e4:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2a4e8:	4618      	mov	r0, r3
   2a4ea:	4611      	mov	r1, r2
   2a4ec:	f7ff ff47 	bl	2a37e <chunk_size>
	void *cmem = &buf[c];
   2a4f0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a4f2:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2a4f6:	bd38      	pop	{r3, r4, r5, pc}

0002a4f8 <free_chunk>:
{
   2a4f8:	b538      	push	{r3, r4, r5, lr}
   2a4fa:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2a4fc:	f7ff ff3f 	bl	2a37e <chunk_size>
   2a500:	460c      	mov	r4, r1
   2a502:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2a504:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a508:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2a50a:	07da      	lsls	r2, r3, #31
   2a50c:	d40a      	bmi.n	2a524 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2a50e:	4628      	mov	r0, r5
   2a510:	f7ff ff7e 	bl	2a410 <free_list_remove>
	return c + chunk_size(h, c);
   2a514:	4621      	mov	r1, r4
   2a516:	4628      	mov	r0, r5
   2a518:	f7ff ff31 	bl	2a37e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2a51c:	1822      	adds	r2, r4, r0
   2a51e:	4628      	mov	r0, r5
   2a520:	f7ff ffba 	bl	2a498 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2a524:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a528:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2a52a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a52e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2a530:	07db      	lsls	r3, r3, #31
   2a532:	d40c      	bmi.n	2a54e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2a534:	4628      	mov	r0, r5
   2a536:	f7ff ff6b 	bl	2a410 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2a53a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2a53e:	4622      	mov	r2, r4
   2a540:	1a61      	subs	r1, r4, r1
   2a542:	4628      	mov	r0, r5
   2a544:	f7ff ffa8 	bl	2a498 <merge_chunks>
   2a548:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a54c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2a54e:	4621      	mov	r1, r4
   2a550:	4628      	mov	r0, r5
}
   2a552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2a556:	f7ff bf17 	b.w	2a388 <free_list_add>

0002a55a <sys_heap_alloc>:
{
   2a55a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2a55c:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a55e:	b909      	cbnz	r1, 2a564 <sys_heap_alloc+0xa>
		return NULL;
   2a560:	2000      	movs	r0, #0
}
   2a562:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a564:	68ab      	ldr	r3, [r5, #8]
   2a566:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2a56a:	d9f9      	bls.n	2a560 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a56c:	310b      	adds	r1, #11
   2a56e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2a570:	4621      	mov	r1, r4
   2a572:	4628      	mov	r0, r5
   2a574:	f7ff ff59 	bl	2a42a <alloc_chunk>
	if (c == 0U) {
   2a578:	4606      	mov	r6, r0
   2a57a:	2800      	cmp	r0, #0
   2a57c:	d0f0      	beq.n	2a560 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2a57e:	4601      	mov	r1, r0
   2a580:	4628      	mov	r0, r5
   2a582:	f7ff fefc 	bl	2a37e <chunk_size>
   2a586:	42a0      	cmp	r0, r4
   2a588:	d907      	bls.n	2a59a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2a58a:	4628      	mov	r0, r5
   2a58c:	1932      	adds	r2, r6, r4
   2a58e:	f7ff ff99 	bl	2a4c4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2a592:	4611      	mov	r1, r2
   2a594:	4628      	mov	r0, r5
   2a596:	f7ff fef7 	bl	2a388 <free_list_add>
	void *cmem = &buf[c];
   2a59a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2a59e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a5a0:	8853      	ldrh	r3, [r2, #2]
   2a5a2:	3004      	adds	r0, #4
   2a5a4:	f043 0301 	orr.w	r3, r3, #1
   2a5a8:	8053      	strh	r3, [r2, #2]
	return mem;
   2a5aa:	e7da      	b.n	2a562 <sys_heap_alloc+0x8>

0002a5ac <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a5ac:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2a5ae:	f013 0307 	ands.w	r3, r3, #7
   2a5b2:	d105      	bne.n	2a5c0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a5b4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2a5b6:	2b00      	cmp	r3, #0
   2a5b8:	bf0c      	ite	eq
   2a5ba:	2000      	moveq	r0, #0
   2a5bc:	2003      	movne	r0, #3
   2a5be:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a5c0:	2b02      	cmp	r3, #2
   2a5c2:	d105      	bne.n	2a5d0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2a5c4:	8bc0      	ldrh	r0, [r0, #30]
   2a5c6:	fab0 f080 	clz	r0, r0
   2a5ca:	0940      	lsrs	r0, r0, #5
   2a5cc:	0080      	lsls	r0, r0, #2
   2a5ce:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2a5d0:	2b01      	cmp	r3, #1
   2a5d2:	d105      	bne.n	2a5e0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a5d4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2a5d6:	2b00      	cmp	r3, #0
   2a5d8:	bf0c      	ite	eq
   2a5da:	2000      	moveq	r0, #0
   2a5dc:	2005      	movne	r0, #5
   2a5de:	4770      	bx	lr
	int evt = EVT_NOP;
   2a5e0:	2000      	movs	r0, #0
}
   2a5e2:	4770      	bx	lr

0002a5e4 <validate_args>:
{
   2a5e4:	b510      	push	{r4, lr}
   2a5e6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2a5e8:	b100      	cbz	r0, 2a5ec <validate_args+0x8>
   2a5ea:	b911      	cbnz	r1, 2a5f2 <validate_args+0xe>
		return -EINVAL;
   2a5ec:	f06f 0015 	mvn.w	r0, #21
}
   2a5f0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2a5f2:	1d08      	adds	r0, r1, #4
   2a5f4:	f000 f82f 	bl	2a656 <sys_notify_validate>
	if ((rv == 0)
   2a5f8:	2800      	cmp	r0, #0
   2a5fa:	d1f9      	bne.n	2a5f0 <validate_args+0xc>
	    && ((cli->notify.flags
   2a5fc:	68a3      	ldr	r3, [r4, #8]
   2a5fe:	2b03      	cmp	r3, #3
   2a600:	d9f6      	bls.n	2a5f0 <validate_args+0xc>
   2a602:	e7f3      	b.n	2a5ec <validate_args+0x8>

0002a604 <notify_one>:
{
   2a604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a608:	460d      	mov	r5, r1
   2a60a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a60c:	4619      	mov	r1, r3
   2a60e:	1d28      	adds	r0, r5, #4
{
   2a610:	4690      	mov	r8, r2
   2a612:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a614:	f7e2 fdae 	bl	d174 <sys_notify_finalize>
	if (cb) {
   2a618:	4604      	mov	r4, r0
   2a61a:	b138      	cbz	r0, 2a62c <notify_one+0x28>
		cb(mgr, cli, state, res);
   2a61c:	4633      	mov	r3, r6
   2a61e:	4642      	mov	r2, r8
   2a620:	4629      	mov	r1, r5
   2a622:	4638      	mov	r0, r7
   2a624:	46a4      	mov	ip, r4
}
   2a626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2a62a:	4760      	bx	ip
}
   2a62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a630 <onoff_manager_init>:
{
   2a630:	b538      	push	{r3, r4, r5, lr}
   2a632:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2a634:	4605      	mov	r5, r0
   2a636:	b158      	cbz	r0, 2a650 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2a638:	b151      	cbz	r1, 2a650 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2a63a:	680b      	ldr	r3, [r1, #0]
   2a63c:	b143      	cbz	r3, 2a650 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2a63e:	684b      	ldr	r3, [r1, #4]
   2a640:	b133      	cbz	r3, 2a650 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a642:	2220      	movs	r2, #32
   2a644:	2100      	movs	r1, #0
   2a646:	f005 ffcc 	bl	305e2 <memset>
	return 0;
   2a64a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a64c:	612c      	str	r4, [r5, #16]
}
   2a64e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2a650:	f06f 0015 	mvn.w	r0, #21
   2a654:	e7fb      	b.n	2a64e <onoff_manager_init+0x1e>

0002a656 <sys_notify_validate>:
	if (notify == NULL) {
   2a656:	4603      	mov	r3, r0
   2a658:	b140      	cbz	r0, 2a66c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a65a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2a65c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2a660:	2a02      	cmp	r2, #2
   2a662:	d006      	beq.n	2a672 <sys_notify_validate+0x1c>
   2a664:	2a03      	cmp	r2, #3
   2a666:	d004      	beq.n	2a672 <sys_notify_validate+0x1c>
   2a668:	2a01      	cmp	r2, #1
   2a66a:	d005      	beq.n	2a678 <sys_notify_validate+0x22>
   2a66c:	f06f 0015 	mvn.w	r0, #21
}
   2a670:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2a672:	681a      	ldr	r2, [r3, #0]
   2a674:	2a00      	cmp	r2, #0
   2a676:	d0f9      	beq.n	2a66c <sys_notify_validate+0x16>
		notify->result = 0;
   2a678:	2000      	movs	r0, #0
   2a67a:	6098      	str	r0, [r3, #8]
   2a67c:	4770      	bx	lr

0002a67e <outs>:
{
   2a67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a682:	4607      	mov	r7, r0
   2a684:	4688      	mov	r8, r1
   2a686:	4615      	mov	r5, r2
   2a688:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a68a:	4614      	mov	r4, r2
   2a68c:	42b4      	cmp	r4, r6
   2a68e:	d305      	bcc.n	2a69c <outs+0x1e>
   2a690:	b10e      	cbz	r6, 2a696 <outs+0x18>
	return (int)count;
   2a692:	1b60      	subs	r0, r4, r5
   2a694:	e008      	b.n	2a6a8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a696:	7823      	ldrb	r3, [r4, #0]
   2a698:	2b00      	cmp	r3, #0
   2a69a:	d0fa      	beq.n	2a692 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2a69c:	4641      	mov	r1, r8
   2a69e:	f814 0b01 	ldrb.w	r0, [r4], #1
   2a6a2:	47b8      	blx	r7
		if (rc < 0) {
   2a6a4:	2800      	cmp	r0, #0
   2a6a6:	daf1      	bge.n	2a68c <outs+0xe>
}
   2a6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a6ac <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2a6ac:	4040      	eors	r0, r0
   2a6ae:	f380 8811 	msr	BASEPRI, r0
   2a6b2:	f04f 0004 	mov.w	r0, #4
   2a6b6:	df02      	svc	2
}
   2a6b8:	4770      	bx	lr

0002a6ba <assert_print>:

void assert_print(const char *fmt, ...)
{
   2a6ba:	b40f      	push	{r0, r1, r2, r3}
   2a6bc:	b507      	push	{r0, r1, r2, lr}
   2a6be:	a904      	add	r1, sp, #16
   2a6c0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2a6c4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2a6c6:	f7e2 f941 	bl	c94c <vprintk>

	va_end(ap);
}
   2a6ca:	b003      	add	sp, #12
   2a6cc:	f85d eb04 	ldr.w	lr, [sp], #4
   2a6d0:	b004      	add	sp, #16
   2a6d2:	4770      	bx	lr

0002a6d4 <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2a6d4:	68c3      	ldr	r3, [r0, #12]
   2a6d6:	6802      	ldr	r2, [r0, #0]
   2a6d8:	4293      	cmp	r3, r2
   2a6da:	d904      	bls.n	2a6e6 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   2a6dc:	3b01      	subs	r3, #1
   2a6de:	1a9a      	subs	r2, r3, r2
		return false;
   2a6e0:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2a6e2:	600a      	str	r2, [r1, #0]
}
   2a6e4:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2a6e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   2a6e8:	b913      	cbnz	r3, 2a6f0 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2a6ea:	3801      	subs	r0, #1
   2a6ec:	1a82      	subs	r2, r0, r2
		return false;
   2a6ee:	e7f7      	b.n	2a6e0 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   2a6f0:	1a82      	subs	r2, r0, r2
	return true;
   2a6f2:	2001      	movs	r0, #1
   2a6f4:	e7f5      	b.n	2a6e2 <free_space+0xe>

0002a6f6 <get_usage>:
{
   2a6f6:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   2a6f8:	a901      	add	r1, sp, #4
{
   2a6fa:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2a6fc:	f7ff ffea 	bl	2a6d4 <free_space>
   2a700:	b120      	cbz	r0, 2a70c <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2a702:	9b01      	ldr	r3, [sp, #4]
   2a704:	68e2      	ldr	r2, [r4, #12]
   2a706:	3b01      	subs	r3, #1
   2a708:	4413      	add	r3, r2
   2a70a:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   2a70c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a70e:	9b01      	ldr	r3, [sp, #4]
   2a710:	1ac0      	subs	r0, r0, r3
}
   2a712:	3801      	subs	r0, #1
   2a714:	b002      	add	sp, #8
   2a716:	bd10      	pop	{r4, pc}

0002a718 <idx_inc>:
{
   2a718:	b510      	push	{r4, lr}
   2a71a:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2a71c:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2a71e:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2a720:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2a722:	07d2      	lsls	r2, r2, #31
   2a724:	d502      	bpl.n	2a72c <idx_inc+0x14>
		return i & (buffer->size - 1);
   2a726:	3b01      	subs	r3, #1
   2a728:	4018      	ands	r0, r3
}
   2a72a:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2a72c:	4298      	cmp	r0, r3
   2a72e:	bf28      	it	cs
   2a730:	1ac0      	subcs	r0, r0, r3
   2a732:	e7fa      	b.n	2a72a <idx_inc+0x12>

0002a734 <add_skip_item>:
{
   2a734:	b538      	push	{r3, r4, r5, lr}
   2a736:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2a738:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   2a73a:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2a73c:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2a73e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2a742:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2a746:	6801      	ldr	r1, [r0, #0]
   2a748:	462a      	mov	r2, r5
{
   2a74a:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2a74c:	f7ff ffe4 	bl	2a718 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2a750:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2a752:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2a754:	462a      	mov	r2, r5
   2a756:	4620      	mov	r0, r4
   2a758:	f7ff ffde 	bl	2a718 <idx_inc>
   2a75c:	6060      	str	r0, [r4, #4]
}
   2a75e:	bd38      	pop	{r3, r4, r5, pc}

0002a760 <max_utilization_update>:
{
   2a760:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2a762:	6903      	ldr	r3, [r0, #16]
{
   2a764:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2a766:	075b      	lsls	r3, r3, #29
   2a768:	d506      	bpl.n	2a778 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2a76a:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2a76c:	f7ff ffc3 	bl	2a6f6 <get_usage>
   2a770:	4285      	cmp	r5, r0
   2a772:	bf2c      	ite	cs
   2a774:	62a5      	strcs	r5, [r4, #40]	; 0x28
   2a776:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   2a778:	bd38      	pop	{r3, r4, r5, pc}

0002a77a <drop_item_locked>:
{
   2a77a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a77e:	461f      	mov	r7, r3
	*user_packet = false;
   2a780:	2300      	movs	r3, #0
   2a782:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2a784:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   2a788:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   2a78c:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   2a78e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   2a792:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   2a794:	f003 0303 	and.w	r3, r3, #3
   2a798:	2b02      	cmp	r3, #2
{
   2a79a:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2a79c:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2a7a0:	d103      	bne.n	2a7aa <drop_item_locked+0x30>
		return item->skip.len;
   2a7a2:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   2a7a6:	08ad      	lsrs	r5, r5, #2
   2a7a8:	d12e      	bne.n	2a808 <drop_item_locked+0x8e>
   2a7aa:	4630      	mov	r0, r6
   2a7ac:	69e3      	ldr	r3, [r4, #28]
   2a7ae:	4798      	blx	r3
   2a7b0:	4605      	mov	r5, r0
	} else if (allow_drop) {
   2a7b2:	f1b8 0f00 	cmp.w	r8, #0
   2a7b6:	d038      	beq.n	2a82a <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   2a7b8:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   2a7bc:	079b      	lsls	r3, r3, #30
   2a7be:	d531      	bpl.n	2a824 <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   2a7c0:	4620      	mov	r0, r4
   2a7c2:	f10b 0101 	add.w	r1, fp, #1
   2a7c6:	f7ff ffb5 	bl	2a734 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2a7ca:	6861      	ldr	r1, [r4, #4]
   2a7cc:	462a      	mov	r2, r5
   2a7ce:	4620      	mov	r0, r4
   2a7d0:	f7ff ffa2 	bl	2a718 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2a7d4:	6821      	ldr	r1, [r4, #0]
   2a7d6:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2a7d8:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2a7da:	4620      	mov	r0, r4
   2a7dc:	f7ff ff9c 	bl	2a718 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2a7e0:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2a7e2:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2a7e4:	68e1      	ldr	r1, [r4, #12]
   2a7e6:	4620      	mov	r0, r4
   2a7e8:	f7ff ff96 	bl	2a718 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2a7ec:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   2a7ee:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2a7f2:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2a7f6:	f002 0203 	and.w	r2, r2, #3
   2a7fa:	2a02      	cmp	r2, #2
   2a7fc:	d10e      	bne.n	2a81c <drop_item_locked+0xa2>
		return item->skip.len;
   2a7fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   2a802:	089b      	lsrs	r3, r3, #2
   2a804:	d00a      	beq.n	2a81c <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   2a806:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2a808:	68e1      	ldr	r1, [r4, #12]
   2a80a:	462a      	mov	r2, r5
   2a80c:	4620      	mov	r0, r4
   2a80e:	f7ff ff83 	bl	2a718 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2a812:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   2a816:	4630      	mov	r0, r6
   2a818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   2a81c:	4630      	mov	r0, r6
   2a81e:	69e3      	ldr	r3, [r4, #28]
   2a820:	4798      	blx	r3
   2a822:	4405      	add	r5, r0
			*user_packet = true;
   2a824:	2301      	movs	r3, #1
   2a826:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   2a828:	e7ee      	b.n	2a808 <drop_item_locked+0x8e>
		item = NULL;
   2a82a:	4646      	mov	r6, r8
	return item;
   2a82c:	e7f3      	b.n	2a816 <drop_item_locked+0x9c>

0002a82e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2a82e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2a832:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2a834:	bf88      	it	hi
   2a836:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   2a838:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2a83a:	1e18      	subs	r0, r3, #0
   2a83c:	bf18      	it	ne
   2a83e:	2001      	movne	r0, #1
   2a840:	4770      	bx	lr

0002a842 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   2a842:	4770      	bx	lr

0002a844 <nordicsemi_nrf53_init>:
{
   2a844:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a846:	f04f 0320 	mov.w	r3, #32
   2a84a:	f3ef 8511 	mrs	r5, BASEPRI
   2a84e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a852:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   2a856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   2a85a:	2401      	movs	r4, #1
   2a85c:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   2a85e:	4621      	mov	r1, r4
   2a860:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   2a864:	2021      	movs	r0, #33	; 0x21
   2a866:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   2a86a:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   2a86e:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   2a872:	f7e3 fc79 	bl	e168 <soc_secure_gpio_pin_mcu_select>
   2a876:	4621      	mov	r1, r4
   2a878:	2020      	movs	r0, #32
   2a87a:	f7e3 fc75 	bl	e168 <soc_secure_gpio_pin_mcu_select>
   2a87e:	4621      	mov	r1, r4
   2a880:	200b      	movs	r0, #11
   2a882:	f7e3 fc71 	bl	e168 <soc_secure_gpio_pin_mcu_select>
   2a886:	4621      	mov	r1, r4
   2a888:	200a      	movs	r0, #10
   2a88a:	f7e3 fc6d 	bl	e168 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   2a88e:	f385 8811 	msr	BASEPRI, r5
   2a892:	f3bf 8f6f 	isb	sy
}
   2a896:	2000      	movs	r0, #0
   2a898:	bd38      	pop	{r3, r4, r5, pc}

0002a89a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2a89a:	2806      	cmp	r0, #6
   2a89c:	d108      	bne.n	2a8b0 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2a89e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2a8a2:	2201      	movs	r2, #1
   2a8a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2a8a8:	f3bf 8f4f 	dsb	sy
        __WFE();
   2a8ac:	bf20      	wfe
    while (true)
   2a8ae:	e7fd      	b.n	2a8ac <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2a8b0:	4770      	bx	lr

0002a8b2 <pm_state_exit_post_ops>:
   2a8b2:	2300      	movs	r3, #0
   2a8b4:	f383 8811 	msr	BASEPRI, r3
   2a8b8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2a8bc:	4770      	bx	lr

0002a8be <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   2a8be:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   2a8c0:	ab01      	add	r3, sp, #4
   2a8c2:	f004 f8bf 	bl	2ea44 <tfm_platform_mem_read>

	switch (status) {
   2a8c6:	2802      	cmp	r0, #2
   2a8c8:	d00a      	beq.n	2a8e0 <soc_secure_mem_read+0x22>
   2a8ca:	2803      	cmp	r0, #3
   2a8cc:	d00b      	beq.n	2a8e6 <soc_secure_mem_read+0x28>
   2a8ce:	b968      	cbnz	r0, 2a8ec <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   2a8d0:	9801      	ldr	r0, [sp, #4]
   2a8d2:	3800      	subs	r0, #0
   2a8d4:	bf18      	it	ne
   2a8d6:	2001      	movne	r0, #1
   2a8d8:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   2a8da:	b003      	add	sp, #12
   2a8dc:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2a8e0:	f06f 0015 	mvn.w	r0, #21
   2a8e4:	e7f9      	b.n	2a8da <soc_secure_mem_read+0x1c>
	switch (status) {
   2a8e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a8ea:	e7f6      	b.n	2a8da <soc_secure_mem_read+0x1c>
		return -EPERM;
   2a8ec:	f04f 30ff 	mov.w	r0, #4294967295
   2a8f0:	e7f3      	b.n	2a8da <soc_secure_mem_read+0x1c>

0002a8f2 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   2a8f2:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2a8f4:	075b      	lsls	r3, r3, #29
   2a8f6:	d40b      	bmi.n	2a910 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2a8f8:	6803      	ldr	r3, [r0, #0]
   2a8fa:	8842      	ldrh	r2, [r0, #2]
   2a8fc:	f3c3 2349 	ubfx	r3, r3, #9, #10
   2a900:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   2a904:	1898      	adds	r0, r3, r2
   2a906:	3017      	adds	r0, #23
   2a908:	f020 0007 	bic.w	r0, r0, #7
   2a90c:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   2a90e:	4770      	bx	lr
	return 0;
   2a910:	2000      	movs	r0, #0
}
   2a912:	4770      	bx	lr

0002a914 <dummy_timestamp>:
}
   2a914:	2000      	movs	r0, #0
   2a916:	4770      	bx	lr

0002a918 <default_get_timestamp>:
   2a918:	f003 bf87 	b.w	2e82a <sys_clock_cycle_get_32>

0002a91c <atomic_inc>:
{
   2a91c:	4603      	mov	r3, r0
}
   2a91e:	e8d3 0fef 	ldaex	r0, [r3]
   2a922:	1c42      	adds	r2, r0, #1
   2a924:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2a928:	2900      	cmp	r1, #0
   2a92a:	d1f8      	bne.n	2a91e <atomic_inc+0x2>
   2a92c:	4770      	bx	lr

0002a92e <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2a92e:	2001      	movs	r0, #1
   2a930:	f7e3 bd44 	b.w	e3bc <z_log_dropped>

0002a934 <z_log_get_tag>:
}
   2a934:	2000      	movs	r0, #0
   2a936:	4770      	bx	lr

0002a938 <z_cbprintf_cpy>:
{
   2a938:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2a93a:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2a93e:	1b9b      	subs	r3, r3, r6
   2a940:	428b      	cmp	r3, r1
{
   2a942:	460c      	mov	r4, r1
   2a944:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2a946:	d30a      	bcc.n	2a95e <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2a948:	6813      	ldr	r3, [r2, #0]
   2a94a:	460a      	mov	r2, r1
   2a94c:	4601      	mov	r1, r0
   2a94e:	1998      	adds	r0, r3, r6
   2a950:	f005 fe0d 	bl	3056e <memcpy>
	return len;
   2a954:	4620      	mov	r0, r4
	desc->off += len;
   2a956:	68ab      	ldr	r3, [r5, #8]
   2a958:	4423      	add	r3, r4
   2a95a:	60ab      	str	r3, [r5, #8]
}
   2a95c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2a95e:	f06f 001b 	mvn.w	r0, #27
   2a962:	e7fb      	b.n	2a95c <z_cbprintf_cpy+0x24>

0002a964 <z_log_msg_finalize>:
{
   2a964:	b570      	push	{r4, r5, r6, lr}
   2a966:	460e      	mov	r6, r1
   2a968:	4615      	mov	r5, r2
   2a96a:	4619      	mov	r1, r3
	if (!msg) {
   2a96c:	4604      	mov	r4, r0
   2a96e:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2a972:	b918      	cbnz	r0, 2a97c <z_log_msg_finalize+0x18>
}
   2a974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2a978:	f7e3 bd20 	b.w	e3bc <z_log_dropped>
	if (data) {
   2a97c:	b12b      	cbz	r3, 2a98a <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   2a97e:	3010      	adds	r0, #16
   2a980:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2a984:	4418      	add	r0, r3
   2a986:	f005 fdf2 	bl	3056e <memcpy>
	msg->hdr.source = source;
   2a98a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2a98e:	4620      	mov	r0, r4
}
   2a990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2a994:	f7e3 bf36 	b.w	e804 <z_log_msg_commit>

0002a998 <buffer_write>:
{
   2a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a99a:	4606      	mov	r6, r0
   2a99c:	460d      	mov	r5, r1
   2a99e:	4614      	mov	r4, r2
   2a9a0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2a9a2:	4621      	mov	r1, r4
   2a9a4:	4628      	mov	r0, r5
   2a9a6:	463a      	mov	r2, r7
   2a9a8:	47b0      	blx	r6
	} while (len != 0);
   2a9aa:	1a24      	subs	r4, r4, r0
		buf += processed;
   2a9ac:	4405      	add	r5, r0
	} while (len != 0);
   2a9ae:	d1f8      	bne.n	2a9a2 <buffer_write+0xa>
}
   2a9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a9b2 <cbvprintf>:
{
   2a9b2:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2a9b4:	2400      	movs	r4, #0
   2a9b6:	9400      	str	r4, [sp, #0]
   2a9b8:	f7e2 fc80 	bl	d2bc <z_cbvprintf_impl>
}
   2a9bc:	b002      	add	sp, #8
   2a9be:	bd10      	pop	{r4, pc}

0002a9c0 <log_output_flush>:
{
   2a9c0:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2a9c2:	6842      	ldr	r2, [r0, #4]
{
   2a9c4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2a9c6:	e9d2 2300 	ldrd	r2, r3, [r2]
   2a9ca:	6881      	ldr	r1, [r0, #8]
   2a9cc:	6800      	ldr	r0, [r0, #0]
   2a9ce:	f7ff ffe3 	bl	2a998 <buffer_write>
	output->control_block->offset = 0;
   2a9d2:	2200      	movs	r2, #0
   2a9d4:	6863      	ldr	r3, [r4, #4]
   2a9d6:	601a      	str	r2, [r3, #0]
}
   2a9d8:	bd10      	pop	{r4, pc}

0002a9da <cr_out_func>:
	if (c == '\n') {
   2a9da:	280a      	cmp	r0, #10
{
   2a9dc:	b538      	push	{r3, r4, r5, lr}
   2a9de:	4604      	mov	r4, r0
   2a9e0:	460d      	mov	r5, r1
	if (c == '\n') {
   2a9e2:	d102      	bne.n	2a9ea <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2a9e4:	200d      	movs	r0, #13
   2a9e6:	f7e3 ffd9 	bl	e99c <out_func>
	out_func(c, ctx);
   2a9ea:	4629      	mov	r1, r5
   2a9ec:	4620      	mov	r0, r4
   2a9ee:	f7e3 ffd5 	bl	e99c <out_func>
}
   2a9f2:	2000      	movs	r0, #0
   2a9f4:	bd38      	pop	{r3, r4, r5, pc}

0002a9f6 <nvs_flash_rd>:
{
   2a9f6:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2a9f8:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a9fa:	8984      	ldrh	r4, [r0, #12]
   2a9fc:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2a9fe:	fa16 f181 	uxtah	r1, r6, r1
   2aa02:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   2aa06:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   2aa08:	6884      	ldr	r4, [r0, #8]
   2aa0a:	6824      	ldr	r4, [r4, #0]
   2aa0c:	46a4      	mov	ip, r4
}
   2aa0e:	bc70      	pop	{r4, r5, r6}
   2aa10:	4760      	bx	ip

0002aa12 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2aa12:	680b      	ldr	r3, [r1, #0]
   2aa14:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2aa18:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2aa1a:	89c0      	ldrh	r0, [r0, #14]
   2aa1c:	0c1a      	lsrs	r2, r3, #16
   2aa1e:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2aa22:	bf04      	itt	eq
   2aa24:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2aa28:	600b      	streq	r3, [r1, #0]
}
   2aa2a:	4770      	bx	lr

0002aa2c <nvs_flash_block_cmp>:
{
   2aa2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2aa30:	4681      	mov	r9, r0
   2aa32:	460e      	mov	r6, r1
   2aa34:	4617      	mov	r7, r2
   2aa36:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2aa3a:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa3c:	681d      	ldr	r5, [r3, #0]
   2aa3e:	426d      	negs	r5, r5
	block_size =
   2aa40:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2aa44:	b91c      	cbnz	r4, 2aa4e <nvs_flash_block_cmp+0x22>
	return 0;
   2aa46:	4620      	mov	r0, r4
}
   2aa48:	b009      	add	sp, #36	; 0x24
   2aa4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2aa4e:	42ac      	cmp	r4, r5
   2aa50:	46a0      	mov	r8, r4
   2aa52:	bf28      	it	cs
   2aa54:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2aa56:	466a      	mov	r2, sp
   2aa58:	4643      	mov	r3, r8
   2aa5a:	4631      	mov	r1, r6
   2aa5c:	4648      	mov	r0, r9
   2aa5e:	f7ff ffca 	bl	2a9f6 <nvs_flash_rd>
		if (rc) {
   2aa62:	2800      	cmp	r0, #0
   2aa64:	d1f0      	bne.n	2aa48 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2aa66:	4642      	mov	r2, r8
   2aa68:	4669      	mov	r1, sp
   2aa6a:	4638      	mov	r0, r7
   2aa6c:	f005 fd6f 	bl	3054e <memcmp>
		if (rc) {
   2aa70:	b920      	cbnz	r0, 2aa7c <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2aa72:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2aa76:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2aa78:	4447      	add	r7, r8
   2aa7a:	e7e3      	b.n	2aa44 <nvs_flash_block_cmp+0x18>
			return 1;
   2aa7c:	2001      	movs	r0, #1
   2aa7e:	e7e3      	b.n	2aa48 <nvs_flash_block_cmp+0x1c>

0002aa80 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa80:	4601      	mov	r1, r0
{
   2aa82:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa84:	2207      	movs	r2, #7
{
   2aa86:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa88:	20ff      	movs	r0, #255	; 0xff
   2aa8a:	f7e2 fb9f 	bl	d1cc <crc8_ccitt>
	entry->crc8 = crc8;
   2aa8e:	71e0      	strb	r0, [r4, #7]
}
   2aa90:	bd10      	pop	{r4, pc}

0002aa92 <nvs_flash_cmp_const>:
{
   2aa92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa96:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2aa9a:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa9c:	681d      	ldr	r5, [r3, #0]
{
   2aa9e:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aaa0:	426d      	negs	r5, r5
	block_size =
   2aaa2:	f005 0520 	and.w	r5, r5, #32
{
   2aaa6:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2aaa8:	4668      	mov	r0, sp
{
   2aaaa:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2aaac:	462a      	mov	r2, r5
   2aaae:	f005 fd98 	bl	305e2 <memset>
	while (len) {
   2aab2:	b91c      	cbnz	r4, 2aabc <nvs_flash_cmp_const+0x2a>
	return 0;
   2aab4:	4620      	mov	r0, r4
}
   2aab6:	b008      	add	sp, #32
   2aab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2aabc:	42ac      	cmp	r4, r5
   2aabe:	46a0      	mov	r8, r4
   2aac0:	bf28      	it	cs
   2aac2:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2aac4:	466a      	mov	r2, sp
   2aac6:	4643      	mov	r3, r8
   2aac8:	4631      	mov	r1, r6
   2aaca:	4638      	mov	r0, r7
   2aacc:	f7ff ffae 	bl	2aa2c <nvs_flash_block_cmp>
		if (rc) {
   2aad0:	2800      	cmp	r0, #0
   2aad2:	d1f0      	bne.n	2aab6 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2aad4:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2aad8:	4446      	add	r6, r8
   2aada:	e7ea      	b.n	2aab2 <nvs_flash_cmp_const+0x20>

0002aadc <nvs_flash_erase_sector>:
{
   2aadc:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2aade:	8982      	ldrh	r2, [r0, #12]
   2aae0:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2aae2:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2aae4:	0c09      	lsrs	r1, r1, #16
{
   2aae6:	4604      	mov	r4, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2aae8:	fb02 3101 	mla	r1, r2, r1, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2aaec:	6a80      	ldr	r0, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   2aaee:	042d      	lsls	r5, r5, #16
	rc = api->erase(dev, offset, size);
   2aaf0:	6883      	ldr	r3, [r0, #8]
   2aaf2:	689b      	ldr	r3, [r3, #8]
   2aaf4:	4798      	blx	r3
	if (rc) {
   2aaf6:	b950      	cbnz	r0, 2ab0e <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2aaf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2aafa:	4629      	mov	r1, r5
   2aafc:	4620      	mov	r0, r4
   2aafe:	89a3      	ldrh	r3, [r4, #12]
   2ab00:	7912      	ldrb	r2, [r2, #4]
   2ab02:	f7ff ffc6 	bl	2aa92 <nvs_flash_cmp_const>
		rc = -ENXIO;
   2ab06:	2800      	cmp	r0, #0
   2ab08:	bf18      	it	ne
   2ab0a:	f06f 0005 	mvnne.w	r0, #5
}
   2ab0e:	bd38      	pop	{r3, r4, r5, pc}

0002ab10 <z_log_msg_static_create.constprop.0>:
   2ab10:	2300      	movs	r3, #0
   2ab12:	f7e3 bebd 	b.w	e890 <z_impl_z_log_msg_static_create>

0002ab16 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2ab16:	7803      	ldrb	r3, [r0, #0]
   2ab18:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2ab1a:	bf81      	itttt	hi
   2ab1c:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2ab20:	18c9      	addhi	r1, r1, r3
   2ab22:	425b      	neghi	r3, r3
   2ab24:	4019      	andhi	r1, r3
}
   2ab26:	4608      	mov	r0, r1
   2ab28:	4770      	bx	lr

0002ab2a <nvs_ate_valid>:
{
   2ab2a:	b570      	push	{r4, r5, r6, lr}
   2ab2c:	460c      	mov	r4, r1
   2ab2e:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab30:	2108      	movs	r1, #8
   2ab32:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ab34:	f7ff ffef 	bl	2ab16 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ab38:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab3a:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ab3c:	4621      	mov	r1, r4
   2ab3e:	20ff      	movs	r0, #255	; 0xff
   2ab40:	f7e2 fb44 	bl	d1cc <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2ab44:	79e3      	ldrb	r3, [r4, #7]
   2ab46:	4283      	cmp	r3, r0
   2ab48:	d107      	bne.n	2ab5a <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2ab4a:	89aa      	ldrh	r2, [r5, #12]
   2ab4c:	8863      	ldrh	r3, [r4, #2]
   2ab4e:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2ab50:	4283      	cmp	r3, r0
   2ab52:	bf2c      	ite	cs
   2ab54:	2000      	movcs	r0, #0
   2ab56:	2001      	movcc	r0, #1
}
   2ab58:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2ab5a:	2000      	movs	r0, #0
   2ab5c:	e7fc      	b.n	2ab58 <nvs_ate_valid+0x2e>

0002ab5e <nvs_close_ate_valid>:
{
   2ab5e:	b538      	push	{r3, r4, r5, lr}
   2ab60:	4605      	mov	r5, r0
   2ab62:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2ab64:	f7ff ffe1 	bl	2ab2a <nvs_ate_valid>
   2ab68:	b1a0      	cbz	r0, 2ab94 <nvs_close_ate_valid+0x36>
   2ab6a:	88a0      	ldrh	r0, [r4, #4]
   2ab6c:	b998      	cbnz	r0, 2ab96 <nvs_close_ate_valid+0x38>
   2ab6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ab72:	8822      	ldrh	r2, [r4, #0]
   2ab74:	429a      	cmp	r2, r3
   2ab76:	d10d      	bne.n	2ab94 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab78:	2108      	movs	r1, #8
   2ab7a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2ab7c:	f7ff ffcb 	bl	2ab16 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2ab80:	8862      	ldrh	r2, [r4, #2]
   2ab82:	89ab      	ldrh	r3, [r5, #12]
   2ab84:	1a9b      	subs	r3, r3, r2
   2ab86:	fbb3 f2f0 	udiv	r2, r3, r0
   2ab8a:	fb02 3010 	mls	r0, r2, r0, r3
   2ab8e:	fab0 f080 	clz	r0, r0
   2ab92:	0940      	lsrs	r0, r0, #5
}
   2ab94:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2ab96:	2000      	movs	r0, #0
   2ab98:	e7fc      	b.n	2ab94 <nvs_close_ate_valid+0x36>

0002ab9a <nvs_prev_ate>:
{
   2ab9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ab9c:	4604      	mov	r4, r0
   2ab9e:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2aba0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2aba2:	2108      	movs	r1, #8
   2aba4:	f7ff ffb7 	bl	2ab16 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2aba8:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2abaa:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2abac:	6829      	ldr	r1, [r5, #0]
   2abae:	4620      	mov	r0, r4
   2abb0:	f7ff ff21 	bl	2a9f6 <nvs_flash_rd>
	if (rc) {
   2abb4:	4606      	mov	r6, r0
   2abb6:	2800      	cmp	r0, #0
   2abb8:	d136      	bne.n	2ac28 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2abba:	682b      	ldr	r3, [r5, #0]
   2abbc:	443b      	add	r3, r7
   2abbe:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2abc0:	89a2      	ldrh	r2, [r4, #12]
   2abc2:	b299      	uxth	r1, r3
   2abc4:	1bd2      	subs	r2, r2, r7
   2abc6:	4291      	cmp	r1, r2
   2abc8:	d12e      	bne.n	2ac28 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2abca:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2abcc:	bf09      	itett	eq
   2abce:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   2abd0:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2abd4:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2abd8:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2abdc:	4620      	mov	r0, r4
   2abde:	2308      	movs	r3, #8
   2abe0:	466a      	mov	r2, sp
   2abe2:	6029      	str	r1, [r5, #0]
   2abe4:	f7ff ff07 	bl	2a9f6 <nvs_flash_rd>
	if (rc) {
   2abe8:	b9e8      	cbnz	r0, 2ac26 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2abea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2abec:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2abee:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2abf0:	f813 1b01 	ldrb.w	r1, [r3], #1
   2abf4:	428a      	cmp	r2, r1
   2abf6:	d10c      	bne.n	2ac12 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2abf8:	3001      	adds	r0, #1
   2abfa:	2808      	cmp	r0, #8
   2abfc:	d1f8      	bne.n	2abf0 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2abfe:	6863      	ldr	r3, [r4, #4]
   2ac00:	e005      	b.n	2ac0e <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2ac02:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2ac04:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2ac08:	0c1b      	lsrs	r3, r3, #16
   2ac0a:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2ac0c:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2ac0e:	602b      	str	r3, [r5, #0]
		return 0;
   2ac10:	e00a      	b.n	2ac28 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ac12:	4669      	mov	r1, sp
   2ac14:	4620      	mov	r0, r4
   2ac16:	f7ff ffa2 	bl	2ab5e <nvs_close_ate_valid>
   2ac1a:	2800      	cmp	r0, #0
   2ac1c:	d1f1      	bne.n	2ac02 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2ac1e:	4629      	mov	r1, r5
   2ac20:	4620      	mov	r0, r4
   2ac22:	f7e4 f94b 	bl	eebc <nvs_recover_last_ate>
   2ac26:	4606      	mov	r6, r0
}
   2ac28:	4630      	mov	r0, r6
   2ac2a:	b003      	add	sp, #12
   2ac2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ac2e <nvs_flash_al_wrt>:
{
   2ac2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ac32:	4607      	mov	r7, r0
   2ac34:	4690      	mov	r8, r2
	if (!len) {
   2ac36:	461e      	mov	r6, r3
{
   2ac38:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   2ac3a:	b91b      	cbnz	r3, 2ac44 <nvs_flash_al_wrt+0x16>
		return 0;
   2ac3c:	2000      	movs	r0, #0
}
   2ac3e:	b009      	add	sp, #36	; 0x24
   2ac40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2ac44:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ac46:	8983      	ldrh	r3, [r0, #12]
   2ac48:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2ac4a:	fa14 f181 	uxtah	r1, r4, r1
   2ac4e:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ac54:	681d      	ldr	r5, [r3, #0]
   2ac56:	426d      	negs	r5, r5
	if (blen > 0) {
   2ac58:	4035      	ands	r5, r6
   2ac5a:	d00c      	beq.n	2ac76 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2ac5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2ac5e:	6883      	ldr	r3, [r0, #8]
   2ac60:	4621      	mov	r1, r4
   2ac62:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2ac66:	462b      	mov	r3, r5
   2ac68:	47c8      	blx	r9
		if (rc) {
   2ac6a:	2800      	cmp	r0, #0
   2ac6c:	d1e7      	bne.n	2ac3e <nvs_flash_al_wrt+0x10>
	if (len) {
   2ac6e:	1b76      	subs	r6, r6, r5
   2ac70:	d0e4      	beq.n	2ac3c <nvs_flash_al_wrt+0xe>
		offset += blen;
   2ac72:	442c      	add	r4, r5
		data8 += blen;
   2ac74:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2ac76:	2320      	movs	r3, #32
   2ac78:	4632      	mov	r2, r6
   2ac7a:	4641      	mov	r1, r8
   2ac7c:	4668      	mov	r0, sp
   2ac7e:	f005 fc83 	bl	30588 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2ac82:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   2ac84:	eb0d 0006 	add.w	r0, sp, r6
   2ac88:	682a      	ldr	r2, [r5, #0]
   2ac8a:	7929      	ldrb	r1, [r5, #4]
   2ac8c:	1b92      	subs	r2, r2, r6
   2ac8e:	f005 fca8 	bl	305e2 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2ac92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   2ac94:	682b      	ldr	r3, [r5, #0]
   2ac96:	6882      	ldr	r2, [r0, #8]
   2ac98:	4621      	mov	r1, r4
   2ac9a:	6855      	ldr	r5, [r2, #4]
   2ac9c:	466a      	mov	r2, sp
   2ac9e:	47a8      	blx	r5
	return rc;
   2aca0:	e7cd      	b.n	2ac3e <nvs_flash_al_wrt+0x10>

0002aca2 <nvs_flash_ate_wrt>:
{
   2aca2:	b510      	push	{r4, lr}
   2aca4:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2aca6:	2308      	movs	r3, #8
   2aca8:	6841      	ldr	r1, [r0, #4]
{
   2acaa:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2acac:	f7ff ffbf 	bl	2ac2e <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2acb0:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2acb2:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2acb4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2acb6:	f7ff ff2e 	bl	2ab16 <nvs_al_size.isra.0>
   2acba:	6863      	ldr	r3, [r4, #4]
   2acbc:	1a1b      	subs	r3, r3, r0
   2acbe:	6063      	str	r3, [r4, #4]
}
   2acc0:	4610      	mov	r0, r2
   2acc2:	bd10      	pop	{r4, pc}

0002acc4 <nvs_add_gc_done_ate>:
	gc_done_ate.id = 0xffff;
   2acc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   2acc8:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2acca:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2acce:	2300      	movs	r3, #0
{
   2acd0:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2acd2:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2acd6:	6883      	ldr	r3, [r0, #8]
	nvs_ate_crc8_update(&gc_done_ate);
   2acd8:	4668      	mov	r0, sp
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2acda:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2acde:	f7ff fecf 	bl	2aa80 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2ace2:	4669      	mov	r1, sp
   2ace4:	4620      	mov	r0, r4
   2ace6:	f7ff ffdc 	bl	2aca2 <nvs_flash_ate_wrt>
}
   2acea:	b002      	add	sp, #8
   2acec:	bd10      	pop	{r4, pc}

0002acee <nvs_gc>:
{
   2acee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2acf2:	2108      	movs	r1, #8
{
   2acf4:	b095      	sub	sp, #84	; 0x54
   2acf6:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2acf8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2acfa:	f7ff ff0c 	bl	2ab16 <nvs_al_size.isra.0>
   2acfe:	4605      	mov	r5, r0
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2ad00:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
   2ad02:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2ad04:	0c1b      	lsrs	r3, r3, #16
   2ad06:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
   2ad08:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2ad0a:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2ad0c:	f7ff fe81 	bl	2aa12 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2ad10:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2ad14:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad16:	aa06      	add	r2, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2ad18:	445e      	add	r6, fp
   2ad1a:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad1c:	2308      	movs	r3, #8
   2ad1e:	4631      	mov	r1, r6
   2ad20:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2ad22:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad24:	f7ff fe67 	bl	2a9f6 <nvs_flash_rd>
	if (rc < 0) {
   2ad28:	1e02      	subs	r2, r0, #0
   2ad2a:	f2c0 80a9 	blt.w	2ae80 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2ad2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ad30:	aa06      	add	r2, sp, #24
   2ad32:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ad34:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2ad36:	f812 0b01 	ldrb.w	r0, [r2], #1
   2ad3a:	4281      	cmp	r1, r0
   2ad3c:	f040 808f 	bne.w	2ae5e <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ad40:	3301      	adds	r3, #1
   2ad42:	2b08      	cmp	r3, #8
   2ad44:	d1f7      	bne.n	2ad36 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2ad46:	68a3      	ldr	r3, [r4, #8]
   2ad48:	6862      	ldr	r2, [r4, #4]
   2ad4a:	442b      	add	r3, r5
   2ad4c:	429a      	cmp	r2, r3
   2ad4e:	d27e      	bcs.n	2ae4e <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2ad50:	4659      	mov	r1, fp
   2ad52:	4620      	mov	r0, r4
   2ad54:	f7ff fec2 	bl	2aadc <nvs_flash_erase_sector>
   2ad58:	4602      	mov	r2, r0
	if (rc) {
   2ad5a:	e091      	b.n	2ae80 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   2ad5c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   2ad60:	0c36      	lsrs	r6, r6, #16
   2ad62:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2ad64:	441e      	add	r6, r3
   2ad66:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2ad68:	aa08      	add	r2, sp, #32
   2ad6a:	4620      	mov	r0, r4
   2ad6c:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
   2ad6e:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2ad72:	f7ff ff12 	bl	2ab9a <nvs_prev_ate>
		if (rc) {
   2ad76:	4602      	mov	r2, r0
   2ad78:	2800      	cmp	r0, #0
   2ad7a:	f040 8081 	bne.w	2ae80 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2ad7e:	4620      	mov	r0, r4
   2ad80:	a908      	add	r1, sp, #32
   2ad82:	f7ff fed2 	bl	2ab2a <nvs_ate_valid>
   2ad86:	b918      	cbnz	r0, 2ad90 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   2ad88:	9b01      	ldr	r3, [sp, #4]
   2ad8a:	459a      	cmp	sl, r3
   2ad8c:	d1ec      	bne.n	2ad68 <nvs_gc+0x7a>
   2ad8e:	e7da      	b.n	2ad46 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   2ad90:	6863      	ldr	r3, [r4, #4]
   2ad92:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2ad94:	aa0a      	add	r2, sp, #40	; 0x28
   2ad96:	4620      	mov	r0, r4
   2ad98:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
   2ad9a:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2ad9c:	f7ff fefd 	bl	2ab9a <nvs_prev_ate>
			if (rc) {
   2ada0:	4602      	mov	r2, r0
   2ada2:	2800      	cmp	r0, #0
   2ada4:	d16c      	bne.n	2ae80 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2ada6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2adaa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2adae:	429a      	cmp	r2, r3
   2adb0:	d027      	beq.n	2ae02 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2adb2:	6862      	ldr	r2, [r4, #4]
   2adb4:	9b05      	ldr	r3, [sp, #20]
   2adb6:	429a      	cmp	r2, r3
   2adb8:	d1ec      	bne.n	2ad94 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2adba:	4556      	cmp	r6, sl
   2adbc:	d1e4      	bne.n	2ad88 <nvs_gc+0x9a>
   2adbe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2adc2:	2b00      	cmp	r3, #0
   2adc4:	d0e0      	beq.n	2ad88 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2adc6:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2adca:	ea4f 431a 	mov.w	r3, sl, lsr #16
   2adce:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2add0:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2add2:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
   2add4:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2add6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   2adda:	f7ff fe51 	bl	2aa80 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2adde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2ade0:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2ade4:	681e      	ldr	r6, [r3, #0]
   2ade6:	4276      	negs	r6, r6
	block_size =
   2ade8:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2adec:	f1b9 0f00 	cmp.w	r9, #0
   2adf0:	d10e      	bne.n	2ae10 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2adf2:	4620      	mov	r0, r4
   2adf4:	a908      	add	r1, sp, #32
   2adf6:	f7ff ff54 	bl	2aca2 <nvs_flash_ate_wrt>
			if (rc) {
   2adfa:	4602      	mov	r2, r0
   2adfc:	2800      	cmp	r0, #0
   2adfe:	d0c3      	beq.n	2ad88 <nvs_gc+0x9a>
   2ae00:	e03e      	b.n	2ae80 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2ae02:	4620      	mov	r0, r4
   2ae04:	a90a      	add	r1, sp, #40	; 0x28
   2ae06:	f7ff fe90 	bl	2ab2a <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2ae0a:	2800      	cmp	r0, #0
   2ae0c:	d0d1      	beq.n	2adb2 <nvs_gc+0xc4>
   2ae0e:	e7d4      	b.n	2adba <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2ae10:	454e      	cmp	r6, r9
   2ae12:	46b0      	mov	r8, r6
   2ae14:	bf28      	it	cs
   2ae16:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2ae18:	aa0c      	add	r2, sp, #48	; 0x30
   2ae1a:	4643      	mov	r3, r8
   2ae1c:	4639      	mov	r1, r7
   2ae1e:	4620      	mov	r0, r4
   2ae20:	f7ff fde9 	bl	2a9f6 <nvs_flash_rd>
		if (rc) {
   2ae24:	4602      	mov	r2, r0
   2ae26:	bb58      	cbnz	r0, 2ae80 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2ae28:	4643      	mov	r3, r8
   2ae2a:	68a1      	ldr	r1, [r4, #8]
   2ae2c:	aa0c      	add	r2, sp, #48	; 0x30
   2ae2e:	4620      	mov	r0, r4
   2ae30:	f7ff fefd 	bl	2ac2e <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2ae34:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2ae36:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2ae38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ae3a:	f7ff fe6c 	bl	2ab16 <nvs_al_size.isra.0>
   2ae3e:	68a3      	ldr	r3, [r4, #8]
   2ae40:	4403      	add	r3, r0
   2ae42:	60a3      	str	r3, [r4, #8]
		if (rc) {
   2ae44:	b9e2      	cbnz	r2, 2ae80 <nvs_gc+0x192>
		len -= bytes_to_copy;
   2ae46:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   2ae4a:	4447      	add	r7, r8
   2ae4c:	e7ce      	b.n	2adec <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   2ae4e:	4620      	mov	r0, r4
   2ae50:	f7ff ff38 	bl	2acc4 <nvs_add_gc_done_ate>
		if (rc) {
   2ae54:	4602      	mov	r2, r0
   2ae56:	2800      	cmp	r0, #0
   2ae58:	f43f af7a 	beq.w	2ad50 <nvs_gc+0x62>
   2ae5c:	e010      	b.n	2ae80 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   2ae5e:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ae60:	4620      	mov	r0, r4
   2ae62:	a906      	add	r1, sp, #24
	stop_addr = gc_addr - ate_size;
   2ae64:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ae66:	f7ff fe7a 	bl	2ab5e <nvs_close_ate_valid>
   2ae6a:	2800      	cmp	r0, #0
   2ae6c:	f47f af76 	bne.w	2ad5c <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2ae70:	4620      	mov	r0, r4
   2ae72:	a904      	add	r1, sp, #16
   2ae74:	f7e4 f822 	bl	eebc <nvs_recover_last_ate>
		if (rc) {
   2ae78:	4602      	mov	r2, r0
   2ae7a:	2800      	cmp	r0, #0
   2ae7c:	f43f af74 	beq.w	2ad68 <nvs_gc+0x7a>
}
   2ae80:	4610      	mov	r0, r2
   2ae82:	b015      	add	sp, #84	; 0x54
   2ae84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ae88 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2ae88:	2300      	movs	r3, #0
   2ae8a:	461a      	mov	r2, r3
   2ae8c:	f7e4 ba20 	b.w	f2d0 <nvs_write>

0002ae90 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2ae90:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2ae92:	2400      	movs	r4, #0
   2ae94:	9400      	str	r4, [sp, #0]
   2ae96:	f7e4 faf7 	bl	f488 <nvs_read_hist>
	return rc;
}
   2ae9a:	b002      	add	sp, #8
   2ae9c:	bd10      	pop	{r4, pc}

0002ae9e <z_log_msg_static_create.constprop.0>:
   2ae9e:	2300      	movs	r3, #0
   2aea0:	f7e3 bcf6 	b.w	e890 <z_impl_z_log_msg_static_create>

0002aea4 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   2aea4:	6903      	ldr	r3, [r0, #16]
}
   2aea6:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   2aeaa:	4770      	bx	lr

0002aeac <drop_tx_buffer>:
}
   2aeac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2aeb0:	4770      	bx	lr

0002aeb2 <release_rx_buffer>:
{
   2aeb2:	4608      	mov	r0, r1
   2aeb4:	b508      	push	{r3, lr}
   2aeb6:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2aeb8:	b118      	cbz	r0, 2aec2 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   2aeba:	f004 ff29 	bl	2fd10 <rpmsg_release_rx_buffer>
	return 0;
   2aebe:	2000      	movs	r0, #0
}
   2aec0:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2aec2:	f06f 0001 	mvn.w	r0, #1
   2aec6:	e7fb      	b.n	2aec0 <release_rx_buffer+0xe>

0002aec8 <hold_rx_buffer>:
{
   2aec8:	4608      	mov	r0, r1
   2aeca:	b508      	push	{r3, lr}
   2aecc:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2aece:	b118      	cbz	r0, 2aed8 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   2aed0:	f004 ff16 	bl	2fd00 <rpmsg_hold_rx_buffer>
	return 0;
   2aed4:	2000      	movs	r0, #0
}
   2aed6:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2aed8:	f06f 0001 	mvn.w	r0, #1
   2aedc:	e7fb      	b.n	2aed6 <hold_rx_buffer+0xe>

0002aede <send_nocopy>:
{
   2aede:	b513      	push	{r0, r1, r4, lr}
   2aee0:	4604      	mov	r4, r0
   2aee2:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aee4:	6921      	ldr	r1, [r4, #16]
   2aee6:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   2aeea:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   2aeee:	2902      	cmp	r1, #2
   2aef0:	d109      	bne.n	2af06 <send_nocopy+0x28>
	if (len == 0) {
   2aef2:	b15b      	cbz	r3, 2af0c <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   2aef4:	b168      	cbz	r0, 2af12 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2aef6:	9300      	str	r3, [sp, #0]
   2aef8:	4613      	mov	r3, r2
   2aefa:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2aefe:	f7f9 f823 	bl	23f48 <rpmsg_send_offchannel_nocopy>
}
   2af02:	b002      	add	sp, #8
   2af04:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2af06:	f06f 000f 	mvn.w	r0, #15
   2af0a:	e7fa      	b.n	2af02 <send_nocopy+0x24>
		return -EBADMSG;
   2af0c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   2af10:	e7f7      	b.n	2af02 <send_nocopy+0x24>
		return -ENOENT;
   2af12:	f06f 0001 	mvn.w	r0, #1
   2af16:	e7f4      	b.n	2af02 <send_nocopy+0x24>

0002af18 <get_tx_buffer>:
{
   2af18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2af1c:	461c      	mov	r4, r3
   2af1e:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   2af22:	4616      	mov	r6, r2
   2af24:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   2af26:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2af28:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2af2a:	b339      	cbz	r1, 2af7c <get_tx_buffer+0x64>
	if (!r_data || !size) {
   2af2c:	b34a      	cbz	r2, 2af82 <get_tx_buffer+0x6a>
   2af2e:	b344      	cbz	r4, 2af82 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   2af30:	1c6a      	adds	r2, r5, #1
   2af32:	f143 0300 	adc.w	r3, r3, #0
   2af36:	2a02      	cmp	r2, #2
   2af38:	f173 0300 	sbcs.w	r3, r3, #0
   2af3c:	d224      	bcs.n	2af88 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   2af3e:	6822      	ldr	r2, [r4, #0]
   2af40:	b142      	cbz	r2, 2af54 <get_tx_buffer+0x3c>
   2af42:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   2af46:	429a      	cmp	r2, r3
   2af48:	d904      	bls.n	2af54 <get_tx_buffer+0x3c>
		return -ENOMEM;
   2af4a:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   2af4e:	6023      	str	r3, [r4, #0]
}
   2af50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2af54:	ea05 0908 	and.w	r9, r5, r8
   2af58:	f109 0301 	add.w	r3, r9, #1
   2af5c:	425a      	negs	r2, r3
   2af5e:	415a      	adcs	r2, r3
   2af60:	4621      	mov	r1, r4
   2af62:	4638      	mov	r0, r7
   2af64:	f004 fedd 	bl	2fd22 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   2af68:	b988      	cbnz	r0, 2af8e <get_tx_buffer+0x76>
   2af6a:	f1b8 3fff 	cmp.w	r8, #4294967295
   2af6e:	bf08      	it	eq
   2af70:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2af74:	d0f0      	beq.n	2af58 <get_tx_buffer+0x40>
		return -ENOBUFS;
   2af76:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2af7a:	e7e9      	b.n	2af50 <get_tx_buffer+0x38>
		return -ENOENT;
   2af7c:	f06f 0001 	mvn.w	r0, #1
   2af80:	e7e6      	b.n	2af50 <get_tx_buffer+0x38>
		return -EINVAL;
   2af82:	f06f 0015 	mvn.w	r0, #21
   2af86:	e7e3      	b.n	2af50 <get_tx_buffer+0x38>
		return -ENOTSUP;
   2af88:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2af8c:	e7e0      	b.n	2af50 <get_tx_buffer+0x38>
	(*r_data) = payload;
   2af8e:	6030      	str	r0, [r6, #0]
	return 0;
   2af90:	2000      	movs	r0, #0
   2af92:	e7dd      	b.n	2af50 <get_tx_buffer+0x38>

0002af94 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2af94:	f004 bf0a 	b.w	2fdac <rpmsg_destroy_ept>

0002af98 <get_ept_slot_with_name>:
{
   2af98:	b538      	push	{r3, r4, r5, lr}
   2af9a:	460d      	mov	r5, r1
   2af9c:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   2af9e:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2afa2:	4628      	mov	r0, r5
   2afa4:	f7de f9e5 	bl	9372 <strcmp>
   2afa8:	b130      	cbz	r0, 2afb8 <get_ept_slot_with_name+0x20>
   2afaa:	4628      	mov	r0, r5
   2afac:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2afb0:	f7de f9df 	bl	9372 <strcmp>
   2afb4:	b920      	cbnz	r0, 2afc0 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2afb6:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   2afb8:	2370      	movs	r3, #112	; 0x70
   2afba:	fb03 4000 	mla	r0, r3, r0, r4
}
   2afbe:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   2afc0:	2000      	movs	r0, #0
   2afc2:	e7fc      	b.n	2afbe <get_ept_slot_with_name+0x26>

0002afc4 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2afc4:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   2afc8:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   2afcc:	f005 b970 	b.w	302b0 <k_work_submit_to_queue>

0002afd0 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2afd0:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   2afd4:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2afd8:	3b00      	subs	r3, #0
   2afda:	bf18      	it	ne
   2afdc:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   2afde:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2afe2:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2afe6:	f004 be3d 	b.w	2fc64 <virtqueue_notification>

0002afea <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   2afea:	68cb      	ldr	r3, [r1, #12]
   2afec:	b133      	cbz	r3, 2affc <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   2afee:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   2aff0:	6883      	ldr	r3, [r0, #8]
   2aff2:	681b      	ldr	r3, [r3, #0]
   2aff4:	b113      	cbz	r3, 2affc <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   2aff6:	2200      	movs	r2, #0
   2aff8:	6909      	ldr	r1, [r1, #16]
   2affa:	4718      	bx	r3
}
   2affc:	4770      	bx	lr

0002affe <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2affe:	f7fa b951 	b.w	252a4 <z_impl_k_mutex_unlock>

0002b002 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b002:	e8d0 3fef 	ldaex	r3, [r0]
   2b006:	e8c0 1fe2 	stlex	r2, r1, [r0]
   2b00a:	2a00      	cmp	r2, #0
   2b00c:	d1f9      	bne.n	2b002 <atomic_set.isra.0>
}
   2b00e:	4770      	bx	lr

0002b010 <backend_init>:
{
   2b010:	b510      	push	{r4, lr}
	data->role = conf->role;
   2b012:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2b014:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2b016:	681b      	ldr	r3, [r3, #0]
   2b018:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   2b01c:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   2b020:	f005 f8ae 	bl	30180 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   2b024:	2100      	movs	r1, #0
   2b026:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   2b02a:	f7ff ffea 	bl	2b002 <atomic_set.isra.0>
}
   2b02e:	4608      	mov	r0, r1
   2b030:	bd10      	pop	{r4, pc}

0002b032 <ns_bind_cb>:
{
   2b032:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b036:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2b038:	460d      	mov	r5, r1
   2b03a:	b379      	cbz	r1, 2b09c <ns_bind_cb+0x6a>
   2b03c:	780b      	ldrb	r3, [r1, #0]
   2b03e:	b36b      	cbz	r3, 2b09c <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   2b040:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   2b044:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2b048:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2b04a:	f04f 32ff 	mov.w	r2, #4294967295
   2b04e:	f04f 33ff 	mov.w	r3, #4294967295
   2b052:	4620      	mov	r0, r4
   2b054:	f7fa f856 	bl	25104 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2b058:	462a      	mov	r2, r5
   2b05a:	4640      	mov	r0, r8
   2b05c:	a901      	add	r1, sp, #4
   2b05e:	f7e4 fb4b 	bl	f6f8 <get_ept>
	if (rpmsg_ept == NULL) {
   2b062:	9e01      	ldr	r6, [sp, #4]
   2b064:	b92e      	cbnz	r6, 2b072 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b066:	4620      	mov	r0, r4
}
   2b068:	b002      	add	sp, #8
   2b06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b06e:	f7ff bfc6 	b.w	2affe <k_mutex_unlock.isra.0>
	if (ept_cached) {
   2b072:	b158      	cbz	r0, 2b08c <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b074:	4620      	mov	r0, r4
   2b076:	f7ff ffc2 	bl	2affe <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2b07a:	463b      	mov	r3, r7
   2b07c:	462a      	mov	r2, r5
   2b07e:	4631      	mov	r1, r6
   2b080:	4640      	mov	r0, r8
}
   2b082:	b002      	add	sp, #8
   2b084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2b088:	f7e4 bb14 	b.w	f6b4 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2b08c:	2220      	movs	r2, #32
   2b08e:	4629      	mov	r1, r5
   2b090:	f106 0040 	add.w	r0, r6, #64	; 0x40
   2b094:	f005 fc05 	bl	308a2 <strncpy>
		rpmsg_ept->dest = dest;
   2b098:	6637      	str	r7, [r6, #96]	; 0x60
   2b09a:	e7e4      	b.n	2b066 <ns_bind_cb+0x34>
}
   2b09c:	b002      	add	sp, #8
   2b09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b0a2 <ept_cb>:
{
   2b0a2:	b510      	push	{r4, lr}
   2b0a4:	4608      	mov	r0, r1
   2b0a6:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   2b0a8:	4611      	mov	r1, r2
   2b0aa:	b952      	cbnz	r2, 2b0c2 <ept_cb+0x20>
		if (!ept->bound) {
   2b0ac:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   2b0b0:	b92a      	cbnz	r2, 2b0be <ept_cb+0x1c>
			ept->bound = true;
   2b0b2:	2201      	movs	r2, #1
			bound_cb(ept);
   2b0b4:	4618      	mov	r0, r3
			ept->bound = true;
   2b0b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   2b0ba:	f7e4 fc6f 	bl	f99c <bound_cb>
}
   2b0be:	2000      	movs	r0, #0
   2b0c0:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2b0c2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2b0c4:	6854      	ldr	r4, [r2, #4]
   2b0c6:	2c00      	cmp	r4, #0
   2b0c8:	d0f9      	beq.n	2b0be <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   2b0ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2b0cc:	47a0      	blx	r4
   2b0ce:	e7f6      	b.n	2b0be <ept_cb+0x1c>

0002b0d0 <deregister_ept>:
{
   2b0d0:	b510      	push	{r4, lr}
   2b0d2:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b0d4:	6903      	ldr	r3, [r0, #16]
   2b0d6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   2b0da:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   2b0de:	2b02      	cmp	r3, #2
   2b0e0:	d10a      	bne.n	2b0f8 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2b0e2:	b161      	cbz	r1, 2b0fe <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2b0e4:	4608      	mov	r0, r1
   2b0e6:	f004 fe61 	bl	2fdac <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   2b0ea:	2270      	movs	r2, #112	; 0x70
   2b0ec:	2100      	movs	r1, #0
   2b0ee:	4620      	mov	r0, r4
   2b0f0:	f005 fa77 	bl	305e2 <memset>
	return 0;
   2b0f4:	2000      	movs	r0, #0
}
   2b0f6:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2b0f8:	f06f 000f 	mvn.w	r0, #15
   2b0fc:	e7fb      	b.n	2b0f6 <deregister_ept+0x26>
		return -ENOENT;
   2b0fe:	f06f 0001 	mvn.w	r0, #1
   2b102:	e7f8      	b.n	2b0f6 <deregister_ept+0x26>

0002b104 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2b104:	f004 be52 	b.w	2fdac <rpmsg_destroy_ept>

0002b108 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2b108:	b538      	push	{r3, r4, r5, lr}
   2b10a:	460d      	mov	r5, r1
	if (!instance) {
   2b10c:	4604      	mov	r4, r0
   2b10e:	b160      	cbz	r0, 2b12a <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   2b110:	30e0      	adds	r0, #224	; 0xe0
   2b112:	f004 ffcc 	bl	300ae <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2b116:	b10d      	cbz	r5, 2b11c <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2b118:	2000      	movs	r0, #0
}
   2b11a:	bd38      	pop	{r3, r4, r5, pc}
   2b11c:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   2b120:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   2b124:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   2b128:	e7f6      	b.n	2b118 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   2b12a:	f06f 0015 	mvn.w	r0, #21
   2b12e:	e7f4      	b.n	2b11a <ipc_rpmsg_deinit+0x12>

0002b130 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   2b130:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   2b132:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2b136:	b113      	cbz	r3, 2b13e <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2b138:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   2b13c:	4718      	bx	r3
}
   2b13e:	4770      	bx	lr

0002b140 <virtio_set_features>:
}
   2b140:	4770      	bx	lr

0002b142 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   2b142:	6983      	ldr	r3, [r0, #24]
   2b144:	b913      	cbnz	r3, 2b14c <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   2b146:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b14a:	7019      	strb	r1, [r3, #0]
}
   2b14c:	4770      	bx	lr

0002b14e <virtio_get_features>:
}
   2b14e:	2001      	movs	r0, #1
   2b150:	4770      	bx	lr

0002b152 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   2b152:	6983      	ldr	r3, [r0, #24]
   2b154:	2b01      	cmp	r3, #1
   2b156:	d104      	bne.n	2b162 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2b158:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b15c:	7818      	ldrb	r0, [r3, #0]
   2b15e:	b2c0      	uxtb	r0, r0
   2b160:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   2b162:	2004      	movs	r0, #4
}
   2b164:	4770      	bx	lr

0002b166 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   2b166:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   2b168:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   2b16a:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   2b16c:	4620      	mov	r0, r4
   2b16e:	f005 f9db 	bl	30528 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   2b172:	4605      	mov	r5, r0
   2b174:	b118      	cbz	r0, 2b17e <virtqueue_allocate+0x18>
   2b176:	4622      	mov	r2, r4
   2b178:	2100      	movs	r1, #0
   2b17a:	f005 fa32 	bl	305e2 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   2b17e:	4628      	mov	r0, r5
   2b180:	bd38      	pop	{r3, r4, r5, pc}

0002b182 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2b182:	b538      	push	{r3, r4, r5, lr}
   2b184:	4604      	mov	r4, r0
   2b186:	2230      	movs	r2, #48	; 0x30
   2b188:	2100      	movs	r1, #0
   2b18a:	f005 fa2a 	bl	305e2 <memset>
   2b18e:	2218      	movs	r2, #24
   2b190:	2100      	movs	r1, #0
   2b192:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   2b196:	f005 fa24 	bl	305e2 <memset>
   2b19a:	2218      	movs	r2, #24
   2b19c:	2100      	movs	r1, #0
   2b19e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2b1a2:	f005 fa1e 	bl	305e2 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   2b1a6:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   2b1aa:	f7f8 fe7f 	bl	23eac <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   2b1ae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2b1b2:	f7f8 fe7b 	bl	23eac <virtqueue_free>
	vr->shm_io = 0;
   2b1b6:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   2b1b8:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   2b1bc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   2b1c0:	f7f5 fba2 	bl	20908 <metal_device_close>
	metal_finish();
   2b1c4:	f7f5 fbfc 	bl	209c0 <metal_finish>
	if (io->ops.close)
   2b1c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   2b1ca:	f104 0540 	add.w	r5, r4, #64	; 0x40
   2b1ce:	b10b      	cbz	r3, 2b1d4 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   2b1d0:	4628      	mov	r0, r5
   2b1d2:	4798      	blx	r3
   2b1d4:	2238      	movs	r2, #56	; 0x38
   2b1d6:	2100      	movs	r1, #0
   2b1d8:	4628      	mov	r0, r5
   2b1da:	f005 fa02 	bl	305e2 <memset>

	return 0;
}
   2b1de:	2000      	movs	r0, #0
   2b1e0:	bd38      	pop	{r3, r4, r5, pc}

0002b1e2 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2b1e2:	4770      	bx	lr

0002b1e4 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   2b1e4:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   2b1e6:	b430      	push	{r4, r5}
   2b1e8:	4604      	mov	r4, r0
   2b1ea:	4618      	mov	r0, r3
   2b1ec:	db0b      	blt.n	2b206 <flash_area_read+0x22>
   2b1ee:	68a5      	ldr	r5, [r4, #8]
   2b1f0:	4408      	add	r0, r1
   2b1f2:	42a8      	cmp	r0, r5
   2b1f4:	d807      	bhi.n	2b206 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
   2b1f6:	68e0      	ldr	r0, [r4, #12]
   2b1f8:	6864      	ldr	r4, [r4, #4]
   2b1fa:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   2b1fc:	6884      	ldr	r4, [r0, #8]
   2b1fe:	6824      	ldr	r4, [r4, #0]
   2b200:	46a4      	mov	ip, r4
}
   2b202:	bc30      	pop	{r4, r5}
   2b204:	4760      	bx	ip
   2b206:	f06f 0015 	mvn.w	r0, #21
   2b20a:	bc30      	pop	{r4, r5}
   2b20c:	4770      	bx	lr

0002b20e <flash_area_write>:
   2b20e:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   2b210:	b430      	push	{r4, r5}
   2b212:	4604      	mov	r4, r0
   2b214:	4618      	mov	r0, r3
   2b216:	db0b      	blt.n	2b230 <flash_area_write+0x22>
   2b218:	68a5      	ldr	r5, [r4, #8]
   2b21a:	4408      	add	r0, r1
   2b21c:	42a8      	cmp	r0, r5
   2b21e:	d807      	bhi.n	2b230 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
   2b220:	68e0      	ldr	r0, [r4, #12]
   2b222:	6864      	ldr	r4, [r4, #4]
   2b224:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   2b226:	6884      	ldr	r4, [r0, #8]
   2b228:	6864      	ldr	r4, [r4, #4]
   2b22a:	46a4      	mov	ip, r4
}
   2b22c:	bc30      	pop	{r4, r5}
   2b22e:	4760      	bx	ip
   2b230:	f06f 0015 	mvn.w	r0, #21
   2b234:	bc30      	pop	{r4, r5}
   2b236:	4770      	bx	lr

0002b238 <flash_area_erase>:
   2b238:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   2b23a:	4603      	mov	r3, r0
   2b23c:	b410      	push	{r4}
   2b23e:	4610      	mov	r0, r2
   2b240:	db0a      	blt.n	2b258 <flash_area_erase+0x20>
   2b242:	689c      	ldr	r4, [r3, #8]
   2b244:	4408      	add	r0, r1
   2b246:	42a0      	cmp	r0, r4
   2b248:	d806      	bhi.n	2b258 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
   2b24a:	68d8      	ldr	r0, [r3, #12]
   2b24c:	685b      	ldr	r3, [r3, #4]
   2b24e:	4419      	add	r1, r3
	rc = api->erase(dev, offset, size);
   2b250:	6883      	ldr	r3, [r0, #8]
}
   2b252:	bc10      	pop	{r4}
   2b254:	689b      	ldr	r3, [r3, #8]
   2b256:	4718      	bx	r3
   2b258:	f06f 0015 	mvn.w	r0, #21
   2b25c:	bc10      	pop	{r4}
   2b25e:	4770      	bx	lr

0002b260 <flash_area_get_device>:
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return fa->fa_dev;
}
   2b260:	68c0      	ldr	r0, [r0, #12]
   2b262:	4770      	bx	lr

0002b264 <get_sectors_cb>:
{
   2b264:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2b266:	684c      	ldr	r4, [r1, #4]
   2b268:	6803      	ldr	r3, [r0, #0]
   2b26a:	42a3      	cmp	r3, r4
   2b26c:	d201      	bcs.n	2b272 <get_sectors_cb+0xe>
		*bail_value = true;
   2b26e:	2001      	movs	r0, #1
}
   2b270:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2b272:	688a      	ldr	r2, [r1, #8]
   2b274:	4422      	add	r2, r4
   2b276:	4293      	cmp	r3, r2
   2b278:	d301      	bcc.n	2b27e <get_sectors_cb+0x1a>
		*bail_value = false;
   2b27a:	2000      	movs	r0, #0
   2b27c:	e7f8      	b.n	2b270 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   2b27e:	694e      	ldr	r6, [r1, #20]
   2b280:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   2b284:	42b5      	cmp	r5, r6
   2b286:	d303      	bcc.n	2b290 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2b288:	f06f 030b 	mvn.w	r3, #11
   2b28c:	618b      	str	r3, [r1, #24]
		return true;
   2b28e:	e7f4      	b.n	2b27a <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2b290:	1b1b      	subs	r3, r3, r4
   2b292:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2b296:	6843      	ldr	r3, [r0, #4]
   2b298:	6908      	ldr	r0, [r1, #16]
   2b29a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   2b29e:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   2b2a0:	690b      	ldr	r3, [r1, #16]
   2b2a2:	3301      	adds	r3, #1
   2b2a4:	610b      	str	r3, [r1, #16]
	return true;
   2b2a6:	e7e2      	b.n	2b26e <get_sectors_cb+0xa>

0002b2a8 <settings_load>:
	return settings_load_subtree(NULL);
   2b2a8:	2000      	movs	r0, #0
   2b2aa:	f7e4 bdc5 	b.w	fe38 <settings_load_subtree>

0002b2ae <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2b2ae:	2200      	movs	r2, #0
   2b2b0:	4611      	mov	r1, r2
   2b2b2:	f7e4 bd87 	b.w	fdc4 <settings_save_one>

0002b2b6 <settings_name_steq>:
{
   2b2b6:	4603      	mov	r3, r0
   2b2b8:	b510      	push	{r4, lr}
   2b2ba:	4608      	mov	r0, r1
	if (next) {
   2b2bc:	b10a      	cbz	r2, 2b2c2 <settings_name_steq+0xc>
		*next = NULL;
   2b2be:	2100      	movs	r1, #0
   2b2c0:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2b2c2:	b153      	cbz	r3, 2b2da <settings_name_steq+0x24>
   2b2c4:	b1d0      	cbz	r0, 2b2fc <settings_name_steq+0x46>
   2b2c6:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2b2c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2b2cc:	b180      	cbz	r0, 2b2f0 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   2b2ce:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b2d2:	42a0      	cmp	r0, r4
   2b2d4:	d101      	bne.n	2b2da <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2b2d6:	283d      	cmp	r0, #61	; 0x3d
   2b2d8:	d1f6      	bne.n	2b2c8 <settings_name_steq+0x12>
		return 0;
   2b2da:	2000      	movs	r0, #0
   2b2dc:	e00e      	b.n	2b2fc <settings_name_steq+0x46>
			*next = name + 1;
   2b2de:	3301      	adds	r3, #1
   2b2e0:	6013      	str	r3, [r2, #0]
   2b2e2:	e00a      	b.n	2b2fa <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2b2e4:	283d      	cmp	r0, #61	; 0x3d
   2b2e6:	d008      	beq.n	2b2fa <settings_name_steq+0x44>
   2b2e8:	fab0 f080 	clz	r0, r0
   2b2ec:	0940      	lsrs	r0, r0, #5
   2b2ee:	e005      	b.n	2b2fc <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2b2f0:	7818      	ldrb	r0, [r3, #0]
   2b2f2:	282f      	cmp	r0, #47	; 0x2f
   2b2f4:	d1f6      	bne.n	2b2e4 <settings_name_steq+0x2e>
		if (next) {
   2b2f6:	2a00      	cmp	r2, #0
   2b2f8:	d1f1      	bne.n	2b2de <settings_name_steq+0x28>
		return 1;
   2b2fa:	2001      	movs	r0, #1
}
   2b2fc:	bd10      	pop	{r4, pc}

0002b2fe <settings_name_next>:
{
   2b2fe:	b510      	push	{r4, lr}
	if (next) {
   2b300:	b109      	cbz	r1, 2b306 <settings_name_next+0x8>
		*next = NULL;
   2b302:	2300      	movs	r3, #0
   2b304:	600b      	str	r3, [r1, #0]
	if (!name) {
   2b306:	b158      	cbz	r0, 2b320 <settings_name_next+0x22>
   2b308:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2b30a:	781a      	ldrb	r2, [r3, #0]
   2b30c:	461c      	mov	r4, r3
   2b30e:	3301      	adds	r3, #1
   2b310:	b12a      	cbz	r2, 2b31e <settings_name_next+0x20>
   2b312:	2a3d      	cmp	r2, #61	; 0x3d
   2b314:	d003      	beq.n	2b31e <settings_name_next+0x20>
   2b316:	2a2f      	cmp	r2, #47	; 0x2f
   2b318:	d1f7      	bne.n	2b30a <settings_name_next+0xc>
		if (next) {
   2b31a:	b101      	cbz	r1, 2b31e <settings_name_next+0x20>
			*next = name + 1;
   2b31c:	600b      	str	r3, [r1, #0]
   2b31e:	1a20      	subs	r0, r4, r0
}
   2b320:	bd10      	pop	{r4, pc}

0002b322 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   2b322:	3008      	adds	r0, #8
   2b324:	4770      	bx	lr

0002b326 <settings_nvs_read_fn>:
{
   2b326:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b328:	4613      	mov	r3, r2
{
   2b32a:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b32c:	460a      	mov	r2, r1
   2b32e:	8881      	ldrh	r1, [r0, #4]
   2b330:	6800      	ldr	r0, [r0, #0]
   2b332:	f7ff fdad 	bl	2ae90 <nvs_read>
}
   2b336:	42a0      	cmp	r0, r4
   2b338:	bfa8      	it	ge
   2b33a:	4620      	movge	r0, r4
   2b33c:	bd10      	pop	{r4, pc}

0002b33e <settings_nvs_save>:
{
   2b33e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b342:	b097      	sub	sp, #92	; 0x5c
   2b344:	4604      	mov	r4, r0
   2b346:	469a      	mov	sl, r3
	if (!name) {
   2b348:	4689      	mov	r9, r1
{
   2b34a:	9201      	str	r2, [sp, #4]
	if (!name) {
   2b34c:	2900      	cmp	r1, #0
   2b34e:	d07e      	beq.n	2b44e <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   2b350:	b1da      	cbz	r2, 2b38a <settings_nvs_save+0x4c>
   2b352:	faba f78a 	clz	r7, sl
   2b356:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2b358:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2b35a:	f104 0b08 	add.w	fp, r4, #8
	name_id = cf->last_name_id + 1;
   2b35e:	3501      	adds	r5, #1
   2b360:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2b362:	46a8      	mov	r8, r5
		name_id--;
   2b364:	1e6e      	subs	r6, r5, #1
   2b366:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2b368:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2b36c:	d029      	beq.n	2b3c2 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2b36e:	234a      	movs	r3, #74	; 0x4a
   2b370:	4631      	mov	r1, r6
   2b372:	4658      	mov	r0, fp
   2b374:	aa03      	add	r2, sp, #12
   2b376:	f7ff fd8b 	bl	2ae90 <nvs_read>
		if (rc < 0) {
   2b37a:	2800      	cmp	r0, #0
   2b37c:	da07      	bge.n	2b38e <settings_nvs_save+0x50>
		name_id--;
   2b37e:	f110 0f02 	cmn.w	r0, #2
   2b382:	bf08      	it	eq
   2b384:	46b0      	moveq	r8, r6
   2b386:	4635      	mov	r5, r6
   2b388:	e7ec      	b.n	2b364 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2b38a:	2701      	movs	r7, #1
   2b38c:	e7e4      	b.n	2b358 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2b38e:	f100 0358 	add.w	r3, r0, #88	; 0x58
   2b392:	eb0d 0003 	add.w	r0, sp, r3
   2b396:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   2b398:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   2b39a:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2b39e:	4648      	mov	r0, r9
   2b3a0:	f7dd ffe7 	bl	9372 <strcmp>
   2b3a4:	2800      	cmp	r0, #0
   2b3a6:	d1ee      	bne.n	2b386 <settings_nvs_save+0x48>
		if (!delete) {
   2b3a8:	b32f      	cbz	r7, 2b3f6 <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   2b3aa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2b3ac:	42b3      	cmp	r3, r6
   2b3ae:	d00b      	beq.n	2b3c8 <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   2b3b0:	4631      	mov	r1, r6
   2b3b2:	4658      	mov	r0, fp
   2b3b4:	f7ff fd68 	bl	2ae88 <nvs_delete>
		if (rc >= 0) {
   2b3b8:	2800      	cmp	r0, #0
   2b3ba:	da12      	bge.n	2b3e2 <settings_nvs_save+0xa4>
}
   2b3bc:	b017      	add	sp, #92	; 0x5c
   2b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2b3c2:	b3b7      	cbz	r7, 2b432 <settings_nvs_save+0xf4>
			return 0;
   2b3c4:	2000      	movs	r0, #0
   2b3c6:	e7f9      	b.n	2b3bc <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2b3c8:	4622      	mov	r2, r4
   2b3ca:	1e73      	subs	r3, r6, #1
   2b3cc:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2b3d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b3d4:	2302      	movs	r3, #2
   2b3d6:	4658      	mov	r0, fp
   2b3d8:	f7e3 ff7a 	bl	f2d0 <nvs_write>
			if (rc < 0) {
   2b3dc:	2800      	cmp	r0, #0
   2b3de:	dae7      	bge.n	2b3b0 <settings_nvs_save+0x72>
   2b3e0:	e7ec      	b.n	2b3bc <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   2b3e2:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2b3e6:	313f      	adds	r1, #63	; 0x3f
   2b3e8:	4658      	mov	r0, fp
   2b3ea:	b289      	uxth	r1, r1
   2b3ec:	f7ff fd4c 	bl	2ae88 <nvs_delete>
	if (rc < 0) {
   2b3f0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2b3f4:	e7e2      	b.n	2b3bc <settings_nvs_save+0x7e>
		name_id--;
   2b3f6:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2b3f8:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2b3fc:	d02a      	beq.n	2b454 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2b3fe:	f104 0508 	add.w	r5, r4, #8
   2b402:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2b406:	4653      	mov	r3, sl
   2b408:	4628      	mov	r0, r5
   2b40a:	9a01      	ldr	r2, [sp, #4]
   2b40c:	b289      	uxth	r1, r1
   2b40e:	f7e3 ff5f 	bl	f2d0 <nvs_write>
	if (rc < 0) {
   2b412:	2800      	cmp	r0, #0
   2b414:	dbd2      	blt.n	2b3bc <settings_nvs_save+0x7e>
	if (write_name) {
   2b416:	b977      	cbnz	r7, 2b436 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   2b418:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2b41a:	4543      	cmp	r3, r8
   2b41c:	d2d2      	bcs.n	2b3c4 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   2b41e:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2b420:	2302      	movs	r3, #2
   2b422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b426:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   2b428:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2b42c:	f7e3 ff50 	bl	f2d0 <nvs_write>
   2b430:	e7de      	b.n	2b3f0 <settings_nvs_save+0xb2>
	write_name = true;
   2b432:	2701      	movs	r7, #1
   2b434:	e7e0      	b.n	2b3f8 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2b436:	4648      	mov	r0, r9
   2b438:	f7dd ffa5 	bl	9386 <strlen>
   2b43c:	464a      	mov	r2, r9
   2b43e:	4603      	mov	r3, r0
   2b440:	4641      	mov	r1, r8
   2b442:	4628      	mov	r0, r5
   2b444:	f7e3 ff44 	bl	f2d0 <nvs_write>
		if (rc < 0) {
   2b448:	2800      	cmp	r0, #0
   2b44a:	dae5      	bge.n	2b418 <settings_nvs_save+0xda>
   2b44c:	e7b6      	b.n	2b3bc <settings_nvs_save+0x7e>
		return -EINVAL;
   2b44e:	f06f 0015 	mvn.w	r0, #21
   2b452:	e7b3      	b.n	2b3bc <settings_nvs_save+0x7e>
		return -ENOMEM;
   2b454:	f06f 000b 	mvn.w	r0, #11
   2b458:	e7b0      	b.n	2b3bc <settings_nvs_save+0x7e>

0002b45a <settings_nvs_backend_init>:
{
   2b45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   2b45c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   2b45e:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   2b460:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   2b462:	b1c3      	cbz	r3, 2b496 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2b464:	f100 0608 	add.w	r6, r0, #8
   2b468:	4630      	mov	r0, r6
   2b46a:	f7e3 fd59 	bl	ef20 <nvs_mount>
	if (rc) {
   2b46e:	4605      	mov	r5, r0
   2b470:	b970      	cbnz	r0, 2b490 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2b472:	2302      	movs	r3, #2
   2b474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b478:	4630      	mov	r0, r6
   2b47a:	f10d 0206 	add.w	r2, sp, #6
   2b47e:	f7ff fd07 	bl	2ae90 <nvs_read>
	if (rc < 0) {
   2b482:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2b484:	bfb4      	ite	lt
   2b486:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   2b48a:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   2b48e:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2b490:	4628      	mov	r0, r5
   2b492:	b002      	add	sp, #8
   2b494:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2b496:	f06f 0512 	mvn.w	r5, #18
   2b49a:	e7f9      	b.n	2b490 <settings_nvs_backend_init+0x36>

0002b49c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2b49c:	b538      	push	{r3, r4, r5, lr}
   2b49e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2b4a0:	42ab      	cmp	r3, r5
{
   2b4a2:	4611      	mov	r1, r2
   2b4a4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2b4a6:	d804      	bhi.n	2b4b2 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b4a8:	461a      	mov	r2, r3
   2b4aa:	f005 f860 	bl	3056e <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2b4ae:	4620      	mov	r0, r4
   2b4b0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2b4b2:	2400      	movs	r4, #0
   2b4b4:	e7fb      	b.n	2b4ae <_copy+0x12>

0002b4b6 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2b4b6:	f005 b894 	b.w	305e2 <memset>

0002b4ba <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2b4ba:	09c3      	lsrs	r3, r0, #7
   2b4bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2b4c0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2b4c4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2b4c8:	b2c0      	uxtb	r0, r0
   2b4ca:	4770      	bx	lr

0002b4cc <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2b4cc:	78cb      	ldrb	r3, [r1, #3]
   2b4ce:	7802      	ldrb	r2, [r0, #0]
   2b4d0:	4053      	eors	r3, r2
   2b4d2:	7003      	strb	r3, [r0, #0]
   2b4d4:	884b      	ldrh	r3, [r1, #2]
   2b4d6:	7842      	ldrb	r2, [r0, #1]
   2b4d8:	4053      	eors	r3, r2
   2b4da:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2b4dc:	680a      	ldr	r2, [r1, #0]
   2b4de:	7883      	ldrb	r3, [r0, #2]
   2b4e0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b4e4:	7083      	strb	r3, [r0, #2]
   2b4e6:	680a      	ldr	r2, [r1, #0]
   2b4e8:	78c3      	ldrb	r3, [r0, #3]
   2b4ea:	4053      	eors	r3, r2
   2b4ec:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2b4ee:	79cb      	ldrb	r3, [r1, #7]
   2b4f0:	7902      	ldrb	r2, [r0, #4]
   2b4f2:	4053      	eors	r3, r2
   2b4f4:	7103      	strb	r3, [r0, #4]
   2b4f6:	88cb      	ldrh	r3, [r1, #6]
   2b4f8:	7942      	ldrb	r2, [r0, #5]
   2b4fa:	4053      	eors	r3, r2
   2b4fc:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2b4fe:	684a      	ldr	r2, [r1, #4]
   2b500:	7983      	ldrb	r3, [r0, #6]
   2b502:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b506:	7183      	strb	r3, [r0, #6]
   2b508:	684a      	ldr	r2, [r1, #4]
   2b50a:	79c3      	ldrb	r3, [r0, #7]
   2b50c:	4053      	eors	r3, r2
   2b50e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2b510:	7acb      	ldrb	r3, [r1, #11]
   2b512:	7a02      	ldrb	r2, [r0, #8]
   2b514:	4053      	eors	r3, r2
   2b516:	7203      	strb	r3, [r0, #8]
   2b518:	7a42      	ldrb	r2, [r0, #9]
   2b51a:	894b      	ldrh	r3, [r1, #10]
   2b51c:	4053      	eors	r3, r2
   2b51e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2b520:	688a      	ldr	r2, [r1, #8]
   2b522:	7a83      	ldrb	r3, [r0, #10]
   2b524:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b528:	7283      	strb	r3, [r0, #10]
   2b52a:	688a      	ldr	r2, [r1, #8]
   2b52c:	7ac3      	ldrb	r3, [r0, #11]
   2b52e:	4053      	eors	r3, r2
   2b530:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2b532:	7bcb      	ldrb	r3, [r1, #15]
   2b534:	7b02      	ldrb	r2, [r0, #12]
   2b536:	4053      	eors	r3, r2
   2b538:	7303      	strb	r3, [r0, #12]
   2b53a:	89cb      	ldrh	r3, [r1, #14]
   2b53c:	7b42      	ldrb	r2, [r0, #13]
   2b53e:	4053      	eors	r3, r2
   2b540:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2b542:	68ca      	ldr	r2, [r1, #12]
   2b544:	7b83      	ldrb	r3, [r0, #14]
   2b546:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b54a:	7383      	strb	r3, [r0, #14]
   2b54c:	68ca      	ldr	r2, [r1, #12]
   2b54e:	7bc3      	ldrb	r3, [r0, #15]
   2b550:	4053      	eors	r3, r2
   2b552:	73c3      	strb	r3, [r0, #15]
}
   2b554:	4770      	bx	lr

0002b556 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2b556:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b558:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b55a:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b55c:	f88d 2000 	strb.w	r2, [sp]
   2b560:	7942      	ldrb	r2, [r0, #5]
   2b562:	f88d 2001 	strb.w	r2, [sp, #1]
   2b566:	7a82      	ldrb	r2, [r0, #10]
   2b568:	f88d 2002 	strb.w	r2, [sp, #2]
   2b56c:	7bc2      	ldrb	r2, [r0, #15]
   2b56e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2b572:	7902      	ldrb	r2, [r0, #4]
   2b574:	f88d 2004 	strb.w	r2, [sp, #4]
   2b578:	7a42      	ldrb	r2, [r0, #9]
   2b57a:	f88d 2005 	strb.w	r2, [sp, #5]
   2b57e:	7b82      	ldrb	r2, [r0, #14]
   2b580:	f88d 2006 	strb.w	r2, [sp, #6]
   2b584:	78c2      	ldrb	r2, [r0, #3]
   2b586:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2b58a:	7a02      	ldrb	r2, [r0, #8]
   2b58c:	f88d 2008 	strb.w	r2, [sp, #8]
   2b590:	7b42      	ldrb	r2, [r0, #13]
   2b592:	f88d 2009 	strb.w	r2, [sp, #9]
   2b596:	7882      	ldrb	r2, [r0, #2]
   2b598:	f88d 200a 	strb.w	r2, [sp, #10]
   2b59c:	79c2      	ldrb	r2, [r0, #7]
   2b59e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b5a2:	7b02      	ldrb	r2, [r0, #12]
   2b5a4:	f88d 200c 	strb.w	r2, [sp, #12]
   2b5a8:	7842      	ldrb	r2, [r0, #1]
   2b5aa:	f88d 200d 	strb.w	r2, [sp, #13]
   2b5ae:	7982      	ldrb	r2, [r0, #6]
   2b5b0:	f88d 200e 	strb.w	r2, [sp, #14]
   2b5b4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b5b8:	2310      	movs	r3, #16
   2b5ba:	466a      	mov	r2, sp
   2b5bc:	4619      	mov	r1, r3
   2b5be:	f7ff ff6d 	bl	2b49c <_copy>
}
   2b5c2:	b005      	add	sp, #20
   2b5c4:	f85d fb04 	ldr.w	pc, [sp], #4

0002b5c8 <mult_row_column>:
{
   2b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5ca:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b5cc:	7808      	ldrb	r0, [r1, #0]
{
   2b5ce:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b5d0:	f7ff ff73 	bl	2b4ba <_double_byte>
   2b5d4:	4605      	mov	r5, r0
   2b5d6:	7860      	ldrb	r0, [r4, #1]
   2b5d8:	f7ff ff6f 	bl	2b4ba <_double_byte>
   2b5dc:	78a2      	ldrb	r2, [r4, #2]
   2b5de:	7863      	ldrb	r3, [r4, #1]
   2b5e0:	4053      	eors	r3, r2
   2b5e2:	78e2      	ldrb	r2, [r4, #3]
   2b5e4:	4053      	eors	r3, r2
   2b5e6:	405d      	eors	r5, r3
   2b5e8:	4068      	eors	r0, r5
   2b5ea:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2b5ec:	7860      	ldrb	r0, [r4, #1]
   2b5ee:	7827      	ldrb	r7, [r4, #0]
   2b5f0:	f7ff ff63 	bl	2b4ba <_double_byte>
   2b5f4:	4605      	mov	r5, r0
   2b5f6:	78a0      	ldrb	r0, [r4, #2]
   2b5f8:	f7ff ff5f 	bl	2b4ba <_double_byte>
   2b5fc:	78a3      	ldrb	r3, [r4, #2]
   2b5fe:	405f      	eors	r7, r3
   2b600:	78e3      	ldrb	r3, [r4, #3]
   2b602:	405f      	eors	r7, r3
   2b604:	407d      	eors	r5, r7
   2b606:	4068      	eors	r0, r5
   2b608:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2b60a:	7863      	ldrb	r3, [r4, #1]
   2b60c:	7827      	ldrb	r7, [r4, #0]
   2b60e:	78a0      	ldrb	r0, [r4, #2]
   2b610:	405f      	eors	r7, r3
   2b612:	f7ff ff52 	bl	2b4ba <_double_byte>
   2b616:	4605      	mov	r5, r0
   2b618:	78e0      	ldrb	r0, [r4, #3]
   2b61a:	f7ff ff4e 	bl	2b4ba <_double_byte>
   2b61e:	78e3      	ldrb	r3, [r4, #3]
   2b620:	405f      	eors	r7, r3
   2b622:	407d      	eors	r5, r7
   2b624:	4068      	eors	r0, r5
   2b626:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2b628:	7820      	ldrb	r0, [r4, #0]
   2b62a:	f7ff ff46 	bl	2b4ba <_double_byte>
   2b62e:	7862      	ldrb	r2, [r4, #1]
   2b630:	7823      	ldrb	r3, [r4, #0]
   2b632:	4053      	eors	r3, r2
   2b634:	78a2      	ldrb	r2, [r4, #2]
   2b636:	4053      	eors	r3, r2
   2b638:	ea80 0503 	eor.w	r5, r0, r3
   2b63c:	78e0      	ldrb	r0, [r4, #3]
   2b63e:	f7ff ff3c 	bl	2b4ba <_double_byte>
   2b642:	b2ed      	uxtb	r5, r5
   2b644:	4045      	eors	r5, r0
   2b646:	70f5      	strb	r5, [r6, #3]
}
   2b648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b64a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2b64a:	b570      	push	{r4, r5, r6, lr}
   2b64c:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2b64e:	4605      	mov	r5, r0
{
   2b650:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   2b652:	2800      	cmp	r0, #0
   2b654:	d049      	beq.n	2b6ea <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2b656:	2900      	cmp	r1, #0
   2b658:	d049      	beq.n	2b6ee <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2b65a:	2a00      	cmp	r2, #0
   2b65c:	d049      	beq.n	2b6f2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2b65e:	2310      	movs	r3, #16
   2b660:	460a      	mov	r2, r1
   2b662:	4668      	mov	r0, sp
   2b664:	4619      	mov	r1, r3
   2b666:	f7ff ff19 	bl	2b49c <_copy>
	add_round_key(state, s->words);
   2b66a:	4621      	mov	r1, r4
   2b66c:	4668      	mov	r0, sp
   2b66e:	f7ff ff2d 	bl	2b4cc <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2b672:	3410      	adds	r4, #16
   2b674:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2b678:	4668      	mov	r0, sp
   2b67a:	f7e4 ffd5 	bl	10628 <sub_bytes>
		shift_rows(state);
   2b67e:	4668      	mov	r0, sp
   2b680:	f7ff ff69 	bl	2b556 <shift_rows>
	mult_row_column(t, s);
   2b684:	4669      	mov	r1, sp
   2b686:	a804      	add	r0, sp, #16
   2b688:	f7ff ff9e 	bl	2b5c8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2b68c:	a901      	add	r1, sp, #4
   2b68e:	a805      	add	r0, sp, #20
   2b690:	f7ff ff9a 	bl	2b5c8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2b694:	a902      	add	r1, sp, #8
   2b696:	a806      	add	r0, sp, #24
   2b698:	f7ff ff96 	bl	2b5c8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2b69c:	a903      	add	r1, sp, #12
   2b69e:	a807      	add	r0, sp, #28
   2b6a0:	f7ff ff92 	bl	2b5c8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b6a4:	2310      	movs	r3, #16
   2b6a6:	4668      	mov	r0, sp
   2b6a8:	4619      	mov	r1, r3
   2b6aa:	eb0d 0203 	add.w	r2, sp, r3
   2b6ae:	f7ff fef5 	bl	2b49c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2b6b2:	4621      	mov	r1, r4
   2b6b4:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2b6b6:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2b6b8:	f7ff ff08 	bl	2b4cc <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2b6bc:	42b4      	cmp	r4, r6
   2b6be:	d1db      	bne.n	2b678 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2b6c0:	f7e4 ffb2 	bl	10628 <sub_bytes>
	shift_rows(state);
   2b6c4:	4668      	mov	r0, sp
   2b6c6:	f7ff ff46 	bl	2b556 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2b6ca:	4621      	mov	r1, r4
   2b6cc:	4668      	mov	r0, sp
   2b6ce:	f7ff fefd 	bl	2b4cc <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2b6d2:	2310      	movs	r3, #16
   2b6d4:	466a      	mov	r2, sp
   2b6d6:	4619      	mov	r1, r3
   2b6d8:	4628      	mov	r0, r5
   2b6da:	f7ff fedf 	bl	2b49c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2b6de:	4668      	mov	r0, sp
   2b6e0:	2210      	movs	r2, #16
   2b6e2:	2100      	movs	r1, #0
   2b6e4:	f7ff fee7 	bl	2b4b6 <_set>

	return TC_CRYPTO_SUCCESS;
   2b6e8:	2001      	movs	r0, #1
}
   2b6ea:	b008      	add	sp, #32
   2b6ec:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b6ee:	4608      	mov	r0, r1
   2b6f0:	e7fb      	b.n	2b6ea <tc_aes_encrypt+0xa0>
   2b6f2:	4610      	mov	r0, r2
   2b6f4:	e7f9      	b.n	2b6ea <tc_aes_encrypt+0xa0>

0002b6f6 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b6f6:	460a      	mov	r2, r1
{
   2b6f8:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b6fa:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2b6fe:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b700:	2b00      	cmp	r3, #0
   2b702:	bfac      	ite	ge
   2b704:	2300      	movge	r3, #0
   2b706:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2b708:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b70c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2b710:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2b712:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2b716:	d002      	beq.n	2b71e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2b718:	7813      	ldrb	r3, [r2, #0]
   2b71a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2b71c:	e7f4      	b.n	2b708 <gf_double+0x12>
	}
}
   2b71e:	bd10      	pop	{r4, pc}

0002b720 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2b720:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2b722:	b120      	cbz	r0, 2b72e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2b724:	2258      	movs	r2, #88	; 0x58
   2b726:	2100      	movs	r1, #0
   2b728:	f7ff fec5 	bl	2b4b6 <_set>
   2b72c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b72e:	bd08      	pop	{r3, pc}

0002b730 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2b730:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b732:	4604      	mov	r4, r0
   2b734:	b188      	cbz	r0, 2b75a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b736:	2210      	movs	r2, #16
   2b738:	2100      	movs	r1, #0
   2b73a:	f7ff febc 	bl	2b4b6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2b73e:	2210      	movs	r2, #16
   2b740:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b744:	2100      	movs	r1, #0
   2b746:	f7ff feb6 	bl	2b4b6 <_set>
	s->leftover_offset = 0;
   2b74a:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2b74c:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2b74e:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2b750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b754:	2001      	movs	r0, #1
   2b756:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2b75a:	bd10      	pop	{r4, pc}

0002b75c <tc_cmac_setup>:
{
   2b75c:	b570      	push	{r4, r5, r6, lr}
   2b75e:	4604      	mov	r4, r0
   2b760:	460d      	mov	r5, r1
   2b762:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2b764:	b310      	cbz	r0, 2b7ac <tc_cmac_setup+0x50>
   2b766:	b311      	cbz	r1, 2b7ae <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2b768:	2258      	movs	r2, #88	; 0x58
   2b76a:	2100      	movs	r1, #0
   2b76c:	f7ff fea3 	bl	2b4b6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2b770:	4629      	mov	r1, r5
   2b772:	4630      	mov	r0, r6
	s->sched = sched;
   2b774:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2b776:	f7e4 ff63 	bl	10640 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b77a:	2210      	movs	r2, #16
   2b77c:	2100      	movs	r1, #0
   2b77e:	4620      	mov	r0, r4
   2b780:	f7ff fe99 	bl	2b4b6 <_set>
	gf_double (s->K1, s->iv);
   2b784:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b788:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b78a:	4621      	mov	r1, r4
   2b78c:	4620      	mov	r0, r4
   2b78e:	f7ff ff5c 	bl	2b64a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b792:	4621      	mov	r1, r4
   2b794:	4628      	mov	r0, r5
   2b796:	f7ff ffae 	bl	2b6f6 <gf_double>
	gf_double (s->K2, s->K1);
   2b79a:	4629      	mov	r1, r5
   2b79c:	f104 0020 	add.w	r0, r4, #32
   2b7a0:	f7ff ffa9 	bl	2b6f6 <gf_double>
	tc_cmac_init(s);
   2b7a4:	4620      	mov	r0, r4
   2b7a6:	f7ff ffc3 	bl	2b730 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b7aa:	2001      	movs	r0, #1
}
   2b7ac:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b7ae:	4608      	mov	r0, r1
   2b7b0:	e7fc      	b.n	2b7ac <tc_cmac_setup+0x50>

0002b7b2 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2b7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b7b6:	460e      	mov	r6, r1
   2b7b8:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b7ba:	4604      	mov	r4, r0
   2b7bc:	2800      	cmp	r0, #0
   2b7be:	d060      	beq.n	2b882 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b7c0:	b1fa      	cbz	r2, 2b802 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b7c2:	2900      	cmp	r1, #0
   2b7c4:	d05d      	beq.n	2b882 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b7c6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2b7ca:	ea53 0102 	orrs.w	r1, r3, r2
   2b7ce:	d058      	beq.n	2b882 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b7d0:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2b7d2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2b7d6:	f142 32ff 	adc.w	r2, r2, #4294967295
   2b7da:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2b7de:	f1b8 0f00 	cmp.w	r8, #0
   2b7e2:	d02c      	beq.n	2b83e <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b7e4:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b7e8:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2b7ec:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b7ee:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2b7f0:	d20a      	bcs.n	2b808 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b7f2:	462b      	mov	r3, r5
   2b7f4:	4632      	mov	r2, r6
   2b7f6:	4629      	mov	r1, r5
   2b7f8:	f7ff fe50 	bl	2b49c <_copy>
			s->leftover_offset += data_length;
   2b7fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b7fe:	442b      	add	r3, r5
   2b800:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2b802:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2b804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2b808:	463b      	mov	r3, r7
   2b80a:	4632      	mov	r2, r6
   2b80c:	4639      	mov	r1, r7
   2b80e:	f7ff fe45 	bl	2b49c <_copy>
		s->leftover_offset = 0;
   2b812:	2300      	movs	r3, #0
   2b814:	3d10      	subs	r5, #16
   2b816:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2b818:	4445      	add	r5, r8
		data += remaining_space;
   2b81a:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b81c:	1e63      	subs	r3, r4, #1
   2b81e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2b822:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b826:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b82a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2b82c:	ea82 0200 	eor.w	r2, r2, r0
   2b830:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b832:	d1f6      	bne.n	2b822 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b834:	4621      	mov	r1, r4
   2b836:	4620      	mov	r0, r4
   2b838:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b83a:	f7ff ff06 	bl	2b64a <tc_aes_encrypt>
   2b83e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b842:	2d10      	cmp	r5, #16
   2b844:	d80a      	bhi.n	2b85c <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2b846:	2d00      	cmp	r5, #0
   2b848:	d0db      	beq.n	2b802 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2b84a:	462b      	mov	r3, r5
   2b84c:	4632      	mov	r2, r6
   2b84e:	4629      	mov	r1, r5
   2b850:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b854:	f7ff fe22 	bl	2b49c <_copy>
		s->leftover_offset = data_length;
   2b858:	6465      	str	r5, [r4, #68]	; 0x44
   2b85a:	e7d2      	b.n	2b802 <tc_cmac_update+0x50>
   2b85c:	1e63      	subs	r3, r4, #1
   2b85e:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2b860:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b864:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b868:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2b86a:	ea82 0200 	eor.w	r2, r2, r0
   2b86e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b870:	d1f6      	bne.n	2b860 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b872:	4621      	mov	r1, r4
   2b874:	4620      	mov	r0, r4
   2b876:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b878:	f7ff fee7 	bl	2b64a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2b87c:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2b87e:	3d10      	subs	r5, #16
   2b880:	e7df      	b.n	2b842 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2b882:	2000      	movs	r0, #0
   2b884:	e7be      	b.n	2b804 <tc_cmac_update+0x52>

0002b886 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2b886:	b570      	push	{r4, r5, r6, lr}
   2b888:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b88a:	4605      	mov	r5, r0
   2b88c:	b1f0      	cbz	r0, 2b8cc <tc_cmac_final+0x46>
   2b88e:	b371      	cbz	r1, 2b8ee <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2b890:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2b892:	2a10      	cmp	r2, #16
   2b894:	d11b      	bne.n	2b8ce <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2b896:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b898:	1e63      	subs	r3, r4, #1
   2b89a:	3901      	subs	r1, #1
   2b89c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b8a0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b8a4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b8a8:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b8aa:	ea82 0206 	eor.w	r2, r2, r6
   2b8ae:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2b8b2:	ea82 0206 	eor.w	r2, r2, r6
   2b8b6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b8b8:	d1f2      	bne.n	2b8a0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2b8ba:	4621      	mov	r1, r4
   2b8bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b8be:	4628      	mov	r0, r5
   2b8c0:	f7ff fec3 	bl	2b64a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2b8c4:	4620      	mov	r0, r4
   2b8c6:	f7ff ff2b 	bl	2b720 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2b8ca:	2001      	movs	r0, #1
}
   2b8cc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2b8ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2b8d2:	2100      	movs	r1, #0
   2b8d4:	f1c2 0210 	rsb	r2, r2, #16
   2b8d8:	4420      	add	r0, r4
   2b8da:	f7ff fdec 	bl	2b4b6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b8de:	2280      	movs	r2, #128	; 0x80
   2b8e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2b8e2:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b8e6:	4423      	add	r3, r4
   2b8e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2b8ec:	e7d4      	b.n	2b898 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2b8ee:	4608      	mov	r0, r1
   2b8f0:	e7ec      	b.n	2b8cc <tc_cmac_final+0x46>

0002b8f2 <tc_sha256_update>:
{
   2b8f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b8f4:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2b8f6:	b110      	cbz	r0, 2b8fe <tc_sha256_update+0xc>
   2b8f8:	b1f9      	cbz	r1, 2b93a <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   2b8fa:	b90a      	cbnz	r2, 2b900 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   2b8fc:	2001      	movs	r0, #1
}
   2b8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2b900:	2700      	movs	r7, #0
   2b902:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2b904:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   2b908:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2b90a:	1c5a      	adds	r2, r3, #1
   2b90c:	6682      	str	r2, [r0, #104]	; 0x68
   2b90e:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b912:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b914:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2b916:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b91a:	d90b      	bls.n	2b934 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   2b91c:	4631      	mov	r1, r6
   2b91e:	f7e4 fee3 	bl	106e8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2b922:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2b926:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2b92a:	f142 0200 	adc.w	r2, r2, #0
   2b92e:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2b932:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   2b934:	42a5      	cmp	r5, r4
   2b936:	d1e7      	bne.n	2b908 <tc_sha256_update+0x16>
   2b938:	e7e0      	b.n	2b8fc <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   2b93a:	4608      	mov	r0, r1
   2b93c:	e7df      	b.n	2b8fe <tc_sha256_update+0xc>

0002b93e <tc_sha256_final>:
{
   2b93e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b940:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2b942:	4605      	mov	r5, r0
   2b944:	2800      	cmp	r0, #0
   2b946:	d054      	beq.n	2b9f2 <tc_sha256_final+0xb4>
   2b948:	2900      	cmp	r1, #0
   2b94a:	d053      	beq.n	2b9f4 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2b94c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2b94e:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2b952:	00d8      	lsls	r0, r3, #3
   2b954:	1812      	adds	r2, r2, r0
   2b956:	f141 0100 	adc.w	r1, r1, #0
   2b95a:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b95e:	2280      	movs	r2, #128	; 0x80
   2b960:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b962:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b964:	4423      	add	r3, r4
   2b966:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   2b968:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b96c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   2b970:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b974:	d90a      	bls.n	2b98c <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   2b976:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2b97a:	4639      	mov	r1, r7
   2b97c:	4430      	add	r0, r6
   2b97e:	f7ff fd9a 	bl	2b4b6 <_set>
		compress(s->iv, s->leftover);
   2b982:	4631      	mov	r1, r6
   2b984:	4620      	mov	r0, r4
   2b986:	f7e4 feaf 	bl	106e8 <compress>
		s->leftover_offset = 0;
   2b98a:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2b98c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2b98e:	2100      	movs	r1, #0
   2b990:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2b994:	4430      	add	r0, r6
   2b996:	f7ff fd8e 	bl	2b4b6 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b99a:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2b99c:	4631      	mov	r1, r6
   2b99e:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b9a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2b9a2:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b9a4:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2b9a6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b9aa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b9ae:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2b9b0:	0e1b      	lsrs	r3, r3, #24
   2b9b2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2b9b6:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b9b8:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2b9bc:	f7e4 fe94 	bl	106e8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b9c0:	1d2b      	adds	r3, r5, #4
   2b9c2:	1f21      	subs	r1, r4, #4
   2b9c4:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2b9c6:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b9ca:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   2b9cc:	0e10      	lsrs	r0, r2, #24
   2b9ce:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2b9d2:	0c10      	lsrs	r0, r2, #16
   2b9d4:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2b9d8:	0a10      	lsrs	r0, r2, #8
   2b9da:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2b9de:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b9e2:	42ab      	cmp	r3, r5
   2b9e4:	d1ef      	bne.n	2b9c6 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2b9e6:	4620      	mov	r0, r4
   2b9e8:	2270      	movs	r2, #112	; 0x70
   2b9ea:	2100      	movs	r1, #0
   2b9ec:	f7ff fd63 	bl	2b4b6 <_set>
	return TC_CRYPTO_SUCCESS;
   2b9f0:	2001      	movs	r0, #1
}
   2b9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2b9f4:	4608      	mov	r0, r1
   2b9f6:	e7fc      	b.n	2b9f2 <tc_sha256_final+0xb4>

0002b9f8 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2b9f8:	b530      	push	{r4, r5, lr}
   2b9fa:	1e43      	subs	r3, r0, #1
   2b9fc:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2b9fe:	42a9      	cmp	r1, r5
   2ba00:	d106      	bne.n	2ba10 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2ba02:	2136      	movs	r1, #54	; 0x36
   2ba04:	245c      	movs	r4, #92	; 0x5c
   2ba06:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2ba08:	1a13      	subs	r3, r2, r0
   2ba0a:	2b3f      	cmp	r3, #63	; 0x3f
   2ba0c:	d90c      	bls.n	2ba28 <rekey+0x30>
	}
}
   2ba0e:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   2ba10:	780c      	ldrb	r4, [r1, #0]
   2ba12:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   2ba16:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2ba1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ba1e:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   2ba22:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2ba26:	e7ea      	b.n	2b9fe <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2ba28:	f802 1b01 	strb.w	r1, [r2], #1
   2ba2c:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2ba30:	e7ea      	b.n	2ba08 <rekey+0x10>

0002ba32 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2ba32:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ba34:	460e      	mov	r6, r1
   2ba36:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2ba38:	4605      	mov	r5, r0
{
   2ba3a:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2ba3c:	b1b8      	cbz	r0, 2ba6e <tc_hmac_set_key+0x3c>
   2ba3e:	b341      	cbz	r1, 2ba92 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2ba40:	b34a      	cbz	r2, 2ba96 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2ba42:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2ba44:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2ba48:	d813      	bhi.n	2ba72 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   2ba4a:	a810      	add	r0, sp, #64	; 0x40
   2ba4c:	f7e4 ff36 	bl	108bc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2ba50:	4622      	mov	r2, r4
   2ba52:	4669      	mov	r1, sp
   2ba54:	a810      	add	r0, sp, #64	; 0x40
   2ba56:	f7ff ff4c 	bl	2b8f2 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2ba5a:	a910      	add	r1, sp, #64	; 0x40
   2ba5c:	a834      	add	r0, sp, #208	; 0xd0
   2ba5e:	f7ff ff6e 	bl	2b93e <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   2ba62:	4622      	mov	r2, r4
   2ba64:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2ba66:	4638      	mov	r0, r7
   2ba68:	f7ff ffc6 	bl	2b9f8 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2ba6c:	2001      	movs	r0, #1
}
   2ba6e:	b04d      	add	sp, #308	; 0x134
   2ba70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2ba72:	f7e4 ff23 	bl	108bc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2ba76:	4622      	mov	r2, r4
   2ba78:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2ba7a:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2ba7e:	4628      	mov	r0, r5
   2ba80:	f7ff ff37 	bl	2b8f2 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2ba84:	4629      	mov	r1, r5
   2ba86:	4620      	mov	r0, r4
   2ba88:	f7ff ff59 	bl	2b93e <tc_sha256_final>
		rekey(ctx->key,
   2ba8c:	2220      	movs	r2, #32
   2ba8e:	4621      	mov	r1, r4
   2ba90:	e7e9      	b.n	2ba66 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2ba92:	4608      	mov	r0, r1
   2ba94:	e7eb      	b.n	2ba6e <tc_hmac_set_key+0x3c>
   2ba96:	4610      	mov	r0, r2
   2ba98:	e7e9      	b.n	2ba6e <tc_hmac_set_key+0x3c>

0002ba9a <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2ba9a:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2ba9c:	4604      	mov	r4, r0
   2ba9e:	b140      	cbz	r0, 2bab2 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2baa0:	f7e4 ff0c 	bl	108bc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2baa4:	2240      	movs	r2, #64	; 0x40
   2baa6:	4620      	mov	r0, r4
   2baa8:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2baac:	f7ff ff21 	bl	2b8f2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2bab0:	2001      	movs	r0, #1
}
   2bab2:	bd10      	pop	{r4, pc}

0002bab4 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2bab4:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2bab6:	b110      	cbz	r0, 2babe <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2bab8:	f7ff ff1b 	bl	2b8f2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2babc:	2001      	movs	r0, #1
}
   2babe:	bd08      	pop	{r3, pc}

0002bac0 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   2bac0:	b570      	push	{r4, r5, r6, lr}
   2bac2:	460e      	mov	r6, r1
   2bac4:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2bac6:	4605      	mov	r5, r0
   2bac8:	b1f0      	cbz	r0, 2bb08 <tc_hmac_final+0x48>
   2baca:	2920      	cmp	r1, #32
   2bacc:	d11c      	bne.n	2bb08 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2bace:	b1ea      	cbz	r2, 2bb0c <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2bad0:	4611      	mov	r1, r2
   2bad2:	f7ff ff34 	bl	2b93e <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2bad6:	4620      	mov	r0, r4
   2bad8:	f7e4 fef0 	bl	108bc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   2badc:	2240      	movs	r2, #64	; 0x40
   2bade:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2bae2:	4620      	mov	r0, r4
   2bae4:	f7ff ff05 	bl	2b8f2 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2bae8:	4632      	mov	r2, r6
   2baea:	4629      	mov	r1, r5
   2baec:	4620      	mov	r0, r4
   2baee:	f7ff ff00 	bl	2b8f2 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2baf2:	4621      	mov	r1, r4
   2baf4:	4628      	mov	r0, r5
   2baf6:	f7ff ff22 	bl	2b93e <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   2bafa:	4620      	mov	r0, r4
   2bafc:	22f0      	movs	r2, #240	; 0xf0
   2bafe:	2100      	movs	r1, #0
   2bb00:	f7ff fcd9 	bl	2b4b6 <_set>

	return TC_CRYPTO_SUCCESS;
   2bb04:	2001      	movs	r0, #1
}
   2bb06:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2bb08:	2000      	movs	r0, #0
   2bb0a:	e7fc      	b.n	2bb06 <tc_hmac_final+0x46>
   2bb0c:	4610      	mov	r0, r2
   2bb0e:	e7fa      	b.n	2bb06 <tc_hmac_final+0x46>

0002bb10 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2bb10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb14:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2bb16:	f04f 0b01 	mov.w	fp, #1
{
   2bb1a:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   2bb1c:	2300      	movs	r3, #0
{
   2bb1e:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb20:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   2bb24:	4631      	mov	r1, r6
{
   2bb26:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb28:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   2bb2a:	f88d 3006 	strb.w	r3, [sp, #6]
{
   2bb2e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   2bb32:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bb36:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb3a:	f7ff ff7a 	bl	2ba32 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2bb3e:	4620      	mov	r0, r4
   2bb40:	f7ff ffab 	bl	2ba9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bb44:	2220      	movs	r2, #32
   2bb46:	4629      	mov	r1, r5
   2bb48:	4620      	mov	r0, r4
   2bb4a:	f7ff ffb3 	bl	2bab4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2bb4e:	465a      	mov	r2, fp
   2bb50:	4620      	mov	r0, r4
   2bb52:	f10d 0106 	add.w	r1, sp, #6
   2bb56:	f7ff ffad 	bl	2bab4 <tc_hmac_update>

	if (data && datalen)
   2bb5a:	f1b8 0f00 	cmp.w	r8, #0
   2bb5e:	d007      	beq.n	2bb70 <update+0x60>
   2bb60:	f1b9 0f00 	cmp.w	r9, #0
   2bb64:	d004      	beq.n	2bb70 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2bb66:	464a      	mov	r2, r9
   2bb68:	4641      	mov	r1, r8
   2bb6a:	4620      	mov	r0, r4
   2bb6c:	f7ff ffa2 	bl	2bab4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2bb70:	b13f      	cbz	r7, 2bb82 <update+0x72>
   2bb72:	f1ba 0f00 	cmp.w	sl, #0
   2bb76:	d004      	beq.n	2bb82 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2bb78:	4652      	mov	r2, sl
   2bb7a:	4639      	mov	r1, r7
   2bb7c:	4620      	mov	r0, r4
   2bb7e:	f7ff ff99 	bl	2bab4 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2bb82:	4622      	mov	r2, r4
   2bb84:	2120      	movs	r1, #32
   2bb86:	4630      	mov	r0, r6
   2bb88:	f7ff ff9a 	bl	2bac0 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb8c:	2220      	movs	r2, #32
   2bb8e:	4631      	mov	r1, r6
   2bb90:	4620      	mov	r0, r4
   2bb92:	f7ff ff4e 	bl	2ba32 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2bb96:	4620      	mov	r0, r4
   2bb98:	f7ff ff7f 	bl	2ba9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bb9c:	2220      	movs	r2, #32
   2bb9e:	4629      	mov	r1, r5
   2bba0:	4620      	mov	r0, r4
   2bba2:	f7ff ff87 	bl	2bab4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bba6:	4622      	mov	r2, r4
   2bba8:	2120      	movs	r1, #32
   2bbaa:	4628      	mov	r0, r5
   2bbac:	f7ff ff88 	bl	2bac0 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2bbb0:	f1b8 0f00 	cmp.w	r8, #0
   2bbb4:	d03a      	beq.n	2bc2c <update+0x11c>
   2bbb6:	f1b9 0f00 	cmp.w	r9, #0
   2bbba:	d037      	beq.n	2bc2c <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bbbc:	2220      	movs	r2, #32
   2bbbe:	4631      	mov	r1, r6
   2bbc0:	4620      	mov	r0, r4
   2bbc2:	f7ff ff36 	bl	2ba32 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2bbc6:	4620      	mov	r0, r4
   2bbc8:	f7ff ff67 	bl	2ba9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bbcc:	2220      	movs	r2, #32
   2bbce:	4629      	mov	r1, r5
   2bbd0:	4620      	mov	r0, r4
   2bbd2:	f7ff ff6f 	bl	2bab4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2bbd6:	2201      	movs	r2, #1
   2bbd8:	f10d 0107 	add.w	r1, sp, #7
   2bbdc:	4620      	mov	r0, r4
   2bbde:	f7ff ff69 	bl	2bab4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2bbe2:	464a      	mov	r2, r9
   2bbe4:	4641      	mov	r1, r8
   2bbe6:	4620      	mov	r0, r4
   2bbe8:	f7ff ff64 	bl	2bab4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2bbec:	b13f      	cbz	r7, 2bbfe <update+0xee>
   2bbee:	f1ba 0f00 	cmp.w	sl, #0
   2bbf2:	d004      	beq.n	2bbfe <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2bbf4:	4652      	mov	r2, sl
   2bbf6:	4639      	mov	r1, r7
   2bbf8:	4620      	mov	r0, r4
   2bbfa:	f7ff ff5b 	bl	2bab4 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2bbfe:	4622      	mov	r2, r4
   2bc00:	2120      	movs	r1, #32
   2bc02:	4630      	mov	r0, r6
   2bc04:	f7ff ff5c 	bl	2bac0 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bc08:	2220      	movs	r2, #32
   2bc0a:	4631      	mov	r1, r6
   2bc0c:	4620      	mov	r0, r4
   2bc0e:	f7ff ff10 	bl	2ba32 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2bc12:	4620      	mov	r0, r4
   2bc14:	f7ff ff41 	bl	2ba9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bc18:	2220      	movs	r2, #32
   2bc1a:	4629      	mov	r1, r5
   2bc1c:	4620      	mov	r0, r4
   2bc1e:	f7ff ff49 	bl	2bab4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bc22:	4622      	mov	r2, r4
   2bc24:	2120      	movs	r1, #32
   2bc26:	4628      	mov	r0, r5
   2bc28:	f7ff ff4a 	bl	2bac0 <tc_hmac_final>
}
   2bc2c:	b003      	add	sp, #12
   2bc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bc32 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2bc32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bc34:	460c      	mov	r4, r1
   2bc36:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2bc38:	4605      	mov	r5, r0
   2bc3a:	b1b0      	cbz	r0, 2bc6a <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2bc3c:	b1b9      	cbz	r1, 2bc6e <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2bc3e:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2bc40:	2220      	movs	r2, #32
   2bc42:	2100      	movs	r1, #0
   2bc44:	30f0      	adds	r0, #240	; 0xf0
   2bc46:	f7ff fc36 	bl	2b4b6 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2bc4a:	2220      	movs	r2, #32
   2bc4c:	2101      	movs	r1, #1
   2bc4e:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2bc52:	f7ff fc30 	bl	2b4b6 <_set>
	update(prng, personalization, plen, 0, 0);
   2bc56:	4628      	mov	r0, r5
   2bc58:	4633      	mov	r3, r6
   2bc5a:	463a      	mov	r2, r7
   2bc5c:	4621      	mov	r1, r4
   2bc5e:	9600      	str	r6, [sp, #0]
   2bc60:	f7ff ff56 	bl	2bb10 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   2bc64:	2001      	movs	r0, #1
	prng->countdown = 0;
   2bc66:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2bc6a:	b003      	add	sp, #12
   2bc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2bc6e:	4608      	mov	r0, r1
   2bc70:	e7fb      	b.n	2bc6a <tc_hmac_prng_init+0x38>

0002bc72 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2bc72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bc74:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2bc76:	4605      	mov	r5, r0
   2bc78:	b180      	cbz	r0, 2bc9c <tc_hmac_prng_reseed+0x2a>
   2bc7a:	b179      	cbz	r1, 2bc9c <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2bc7c:	2a1f      	cmp	r2, #31
   2bc7e:	d90d      	bls.n	2bc9c <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2bc80:	b153      	cbz	r3, 2bc98 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2bc82:	b16c      	cbz	r4, 2bca0 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2bc84:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2bc86:	f7ff ff43 	bl	2bb10 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2bc8a:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2bc8e:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   2bc90:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2bc94:	b003      	add	sp, #12
   2bc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2bc98:	9300      	str	r3, [sp, #0]
   2bc9a:	e7f4      	b.n	2bc86 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2bc9c:	2000      	movs	r0, #0
   2bc9e:	e7f9      	b.n	2bc94 <tc_hmac_prng_reseed+0x22>
   2bca0:	4620      	mov	r0, r4
   2bca2:	e7f7      	b.n	2bc94 <tc_hmac_prng_reseed+0x22>

0002bca4 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2bca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2bca8:	460d      	mov	r5, r1
   2bcaa:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2bcac:	4680      	mov	r8, r0
   2bcae:	b3d8      	cbz	r0, 2bd28 <tc_hmac_prng_generate+0x84>
   2bcb0:	b3d2      	cbz	r2, 2bd28 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2bcb2:	1e4b      	subs	r3, r1, #1
   2bcb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2bcb8:	d236      	bcs.n	2bd28 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2bcba:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2bcbe:	b3ab      	cbz	r3, 2bd2c <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2bcc0:	3b01      	subs	r3, #1
   2bcc2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bcc6:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bcca:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bcce:	2220      	movs	r2, #32
   2bcd0:	4649      	mov	r1, r9
   2bcd2:	4620      	mov	r0, r4
   2bcd4:	f7ff fead 	bl	2ba32 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2bcd8:	4620      	mov	r0, r4
   2bcda:	f7ff fede 	bl	2ba9a <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bcde:	2220      	movs	r2, #32
   2bce0:	4639      	mov	r1, r7
   2bce2:	4620      	mov	r0, r4
   2bce4:	f7ff fee6 	bl	2bab4 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bce8:	4622      	mov	r2, r4
   2bcea:	2120      	movs	r1, #32
   2bcec:	4638      	mov	r0, r7
   2bcee:	f7ff fee7 	bl	2bac0 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2bcf2:	2d20      	cmp	r5, #32
   2bcf4:	462e      	mov	r6, r5
   2bcf6:	bf28      	it	cs
   2bcf8:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2bcfa:	4640      	mov	r0, r8
   2bcfc:	4633      	mov	r3, r6
   2bcfe:	463a      	mov	r2, r7
   2bd00:	4631      	mov	r1, r6
   2bd02:	f7ff fbcb 	bl	2b49c <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2bd06:	2d20      	cmp	r5, #32
   2bd08:	bf38      	it	cc
   2bd0a:	2520      	movcc	r5, #32
	while (outlen != 0) {
   2bd0c:	3d20      	subs	r5, #32
		out += bufferlen;
   2bd0e:	44b0      	add	r8, r6
	while (outlen != 0) {
   2bd10:	d1dd      	bne.n	2bcce <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2bd12:	4620      	mov	r0, r4
   2bd14:	462b      	mov	r3, r5
   2bd16:	462a      	mov	r2, r5
   2bd18:	4629      	mov	r1, r5
   2bd1a:	9500      	str	r5, [sp, #0]
   2bd1c:	f7ff fef8 	bl	2bb10 <update>

	return TC_CRYPTO_SUCCESS;
   2bd20:	2001      	movs	r0, #1
}
   2bd22:	b003      	add	sp, #12
   2bd24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2bd28:	2000      	movs	r0, #0
   2bd2a:	e7fa      	b.n	2bd22 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   2bd2c:	f04f 30ff 	mov.w	r0, #4294967295
   2bd30:	e7f7      	b.n	2bd22 <tc_hmac_prng_generate+0x7e>

0002bd32 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2bd32:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2bd34:	6800      	ldr	r0, [r0, #0]
   2bd36:	f7e4 be0b 	b.w	10950 <z_arm_fatal_error>

0002bd3a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2bd3a:	2100      	movs	r1, #0
   2bd3c:	2001      	movs	r0, #1
   2bd3e:	f7e4 be07 	b.w	10950 <z_arm_fatal_error>

0002bd42 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2bd42:	b508      	push	{r3, lr}
	handler();
   2bd44:	f7e4 fecc 	bl	10ae0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2bd48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2bd4c:	f7e4 bf96 	b.w	10c7c <z_arm_exc_exit>

0002bd50 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2bd50:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2bd52:	f383 880b 	msr	PSPLIM, r3
}
   2bd56:	4770      	bx	lr

0002bd58 <z_log_msg_static_create.constprop.0>:
   2bd58:	2300      	movs	r3, #0
   2bd5a:	f7e2 bd99 	b.w	e890 <z_impl_z_log_msg_static_create>

0002bd5e <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2bd5e:	4770      	bx	lr

0002bd60 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2bd60:	4770      	bx	lr

0002bd62 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2bd62:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2bd66:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2bd6a:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2bd6c:	bf08      	it	eq
   2bd6e:	f06f 0015 	mvneq.w	r0, #21
   2bd72:	4770      	bx	lr

0002bd74 <mpu_configure_region>:
{
   2bd74:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2bd76:	890a      	ldrh	r2, [r1, #8]
   2bd78:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2bd7a:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2bd7c:	684c      	ldr	r4, [r1, #4]
   2bd7e:	f002 021f 	and.w	r2, r2, #31
{
   2bd82:	b085      	sub	sp, #20
   2bd84:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2bd88:	9300      	str	r3, [sp, #0]
   2bd8a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2bd8e:	f023 031f 	bic.w	r3, r3, #31
   2bd92:	1e62      	subs	r2, r4, #1
   2bd94:	4413      	add	r3, r2
   2bd96:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2bd9a:	2807      	cmp	r0, #7
   2bd9c:	9303      	str	r3, [sp, #12]
   2bd9e:	d904      	bls.n	2bdaa <mpu_configure_region+0x36>
}
   2bda0:	b005      	add	sp, #20
   2bda2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2bda6:	f7e5 bb8d 	b.w	114c4 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   2bdaa:	4669      	mov	r1, sp
   2bdac:	f7e5 fb70 	bl	11490 <region_init>
}
   2bdb0:	b005      	add	sp, #20
   2bdb2:	bd30      	pop	{r4, r5, pc}

0002bdb4 <_stdout_hook_default>:
}
   2bdb4:	f04f 30ff 	mov.w	r0, #4294967295
   2bdb8:	4770      	bx	lr

0002bdba <_stdin_hook_default>:
}
   2bdba:	2000      	movs	r0, #0
   2bdbc:	4770      	bx	lr

0002bdbe <_read>:
{
   2bdbe:	4608      	mov	r0, r1
   2bdc0:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2bdc2:	f7e5 bd8f 	b.w	118e4 <z_impl_zephyr_read_stdin>

0002bdc6 <_write>:
{
   2bdc6:	4608      	mov	r0, r1
   2bdc8:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2bdca:	f7e5 bd9f 	b.w	1190c <z_impl_zephyr_write_stdout>

0002bdce <_close>:
int _close(int file)
   2bdce:	f04f 30ff 	mov.w	r0, #4294967295
   2bdd2:	4770      	bx	lr

0002bdd4 <_lseek>:
}
   2bdd4:	2000      	movs	r0, #0
   2bdd6:	4770      	bx	lr

0002bdd8 <_isatty>:
}
   2bdd8:	2802      	cmp	r0, #2
   2bdda:	bfcc      	ite	gt
   2bddc:	2000      	movgt	r0, #0
   2bdde:	2001      	movle	r0, #1
   2bde0:	4770      	bx	lr

0002bde2 <_kill>:
}
   2bde2:	2000      	movs	r0, #0
   2bde4:	4770      	bx	lr

0002bde6 <_getpid>:
}
   2bde6:	2000      	movs	r0, #0
   2bde8:	4770      	bx	lr

0002bdea <_fstat>:
	st->st_mode = S_IFCHR;
   2bdea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2bdee:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2bdf0:	604b      	str	r3, [r1, #4]
}
   2bdf2:	4770      	bx	lr

0002bdf4 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2bdf4:	f7f8 bc7a 	b.w	246ec <z_impl_z_errno>

0002bdf8 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2bdf8:	b530      	push	{r4, r5, lr}
   2bdfa:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   2bdfc:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   2be00:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   2be02:	794b      	ldrb	r3, [r1, #5]
   2be04:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   2be08:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   2be0a:	220d      	movs	r2, #13
   2be0c:	2100      	movs	r1, #0
   2be0e:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   2be12:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   2be16:	f004 fbe4 	bl	305e2 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2be1a:	aa02      	add	r2, sp, #8
   2be1c:	4611      	mov	r1, r2
   2be1e:	4628      	mov	r0, r5
   2be20:	f000 fb59 	bl	2c4d6 <bt_encrypt_le>
	if (err) {
   2be24:	b110      	cbz	r0, 2be2c <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   2be26:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   2be28:	b007      	add	sp, #28
   2be2a:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   2be2c:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   2be2e:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   2be30:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   2be34:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   2be36:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   2be38:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   2be3a:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   2be3e:	f004 fb86 	bl	3054e <memcmp>
   2be42:	fab0 f080 	clz	r0, r0
   2be46:	0940      	lsrs	r0, r0, #5
   2be48:	e7ee      	b.n	2be28 <bt_rpa_irk_matches+0x30>

0002be4a <bt_settings_decode_key>:
{
   2be4a:	b570      	push	{r4, r5, r6, lr}
   2be4c:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2be4e:	2100      	movs	r1, #0
{
   2be50:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2be52:	f7ff fa54 	bl	2b2fe <settings_name_next>
   2be56:	280d      	cmp	r0, #13
   2be58:	d118      	bne.n	2be8c <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2be5a:	7b23      	ldrb	r3, [r4, #12]
   2be5c:	2b30      	cmp	r3, #48	; 0x30
   2be5e:	d013      	beq.n	2be88 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   2be60:	2b31      	cmp	r3, #49	; 0x31
   2be62:	d113      	bne.n	2be8c <bt_settings_decode_key+0x42>
   2be64:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2be66:	f805 3b06 	strb.w	r3, [r5], #6
   2be6a:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2be6e:	462a      	mov	r2, r5
   2be70:	4620      	mov	r0, r4
   2be72:	2301      	movs	r3, #1
   2be74:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2be76:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2be78:	f7fe fa10 	bl	2a29c <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2be7c:	42b4      	cmp	r4, r6
   2be7e:	f105 35ff 	add.w	r5, r5, #4294967295
   2be82:	d1f4      	bne.n	2be6e <bt_settings_decode_key+0x24>
	return 0;
   2be84:	2000      	movs	r0, #0
}
   2be86:	bd70      	pop	{r4, r5, r6, pc}
   2be88:	2300      	movs	r3, #0
   2be8a:	e7ec      	b.n	2be66 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   2be8c:	f06f 0015 	mvn.w	r0, #21
   2be90:	e7f9      	b.n	2be86 <bt_settings_decode_key+0x3c>

0002be92 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2be92:	b510      	push	{r4, lr}
   2be94:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2be96:	7801      	ldrb	r1, [r0, #0]
   2be98:	7822      	ldrb	r2, [r4, #0]
{
   2be9a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2be9c:	428a      	cmp	r2, r1
   2be9e:	d00f      	beq.n	2bec0 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2bea0:	4669      	mov	r1, sp
   2bea2:	f7e5 ff99 	bl	11dd8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2bea6:	4620      	mov	r0, r4
   2bea8:	a905      	add	r1, sp, #20
   2beaa:	f7e5 ff95 	bl	11dd8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2beae:	2210      	movs	r2, #16
   2beb0:	f10d 0115 	add.w	r1, sp, #21
   2beb4:	f10d 0001 	add.w	r0, sp, #1
   2beb8:	f004 fb49 	bl	3054e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2bebc:	b00a      	add	sp, #40	; 0x28
   2bebe:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2bec0:	2a01      	cmp	r2, #1
   2bec2:	d006      	beq.n	2bed2 <bt_uuid_cmp+0x40>
   2bec4:	2a02      	cmp	r2, #2
   2bec6:	d007      	beq.n	2bed8 <bt_uuid_cmp+0x46>
   2bec8:	b972      	cbnz	r2, 2bee8 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2beca:	8840      	ldrh	r0, [r0, #2]
   2becc:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2bece:	1ac0      	subs	r0, r0, r3
   2bed0:	e7f4      	b.n	2bebc <bt_uuid_cmp+0x2a>
   2bed2:	6840      	ldr	r0, [r0, #4]
   2bed4:	6863      	ldr	r3, [r4, #4]
   2bed6:	e7fa      	b.n	2bece <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bed8:	2210      	movs	r2, #16
   2beda:	1c61      	adds	r1, r4, #1
   2bedc:	3001      	adds	r0, #1
}
   2bede:	b00a      	add	sp, #40	; 0x28
   2bee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bee4:	f004 bb33 	b.w	3054e <memcmp>
	switch (u1->type) {
   2bee8:	f06f 0015 	mvn.w	r0, #21
   2beec:	e7e6      	b.n	2bebc <bt_uuid_cmp+0x2a>

0002beee <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2beee:	2a04      	cmp	r2, #4
   2bef0:	d00a      	beq.n	2bf08 <bt_uuid_create+0x1a>
   2bef2:	2a10      	cmp	r2, #16
   2bef4:	d00d      	beq.n	2bf12 <bt_uuid_create+0x24>
   2bef6:	2a02      	cmp	r2, #2
   2bef8:	f04f 0300 	mov.w	r3, #0
   2befc:	d115      	bne.n	2bf2a <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2befe:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2bf00:	880b      	ldrh	r3, [r1, #0]
   2bf02:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2bf04:	2001      	movs	r0, #1
   2bf06:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2bf08:	2301      	movs	r3, #1
   2bf0a:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2bf0c:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2bf0e:	6043      	str	r3, [r0, #4]
		break;
   2bf10:	e7f8      	b.n	2bf04 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2bf12:	2302      	movs	r3, #2
   2bf14:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bf18:	f101 0310 	add.w	r3, r1, #16
   2bf1c:	f851 2b04 	ldr.w	r2, [r1], #4
   2bf20:	4299      	cmp	r1, r3
   2bf22:	f840 2b04 	str.w	r2, [r0], #4
   2bf26:	d1f9      	bne.n	2bf1c <bt_uuid_create+0x2e>
   2bf28:	e7ec      	b.n	2bf04 <bt_uuid_create+0x16>
	switch (data_len) {
   2bf2a:	4618      	mov	r0, r3
}
   2bf2c:	4770      	bx	lr

0002bf2e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2bf2e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2bf30:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2bf32:	2106      	movs	r1, #6
{
   2bf34:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2bf36:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2bf3a:	f7e8 fb03 	bl	14544 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2bf3e:	b918      	cbnz	r0, 2bf48 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2bf40:	79a3      	ldrb	r3, [r4, #6]
   2bf42:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2bf46:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2bf48:	bd10      	pop	{r4, pc}

0002bf4a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2bf4a:	280f      	cmp	r0, #15
   2bf4c:	d807      	bhi.n	2bf5e <bt_hci_evt_get_flags+0x14>
   2bf4e:	280d      	cmp	r0, #13
   2bf50:	d80b      	bhi.n	2bf6a <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2bf52:	2805      	cmp	r0, #5
   2bf54:	bf08      	it	eq
   2bf56:	2003      	moveq	r0, #3
   2bf58:	bf18      	it	ne
   2bf5a:	2002      	movne	r0, #2
   2bf5c:	4770      	bx	lr
	switch (evt) {
   2bf5e:	2813      	cmp	r0, #19
   2bf60:	d003      	beq.n	2bf6a <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2bf62:	281a      	cmp	r0, #26
   2bf64:	bf08      	it	eq
   2bf66:	2001      	moveq	r0, #1
   2bf68:	e7f6      	b.n	2bf58 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2bf6a:	2001      	movs	r0, #1
	}
}
   2bf6c:	4770      	bx	lr

0002bf6e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2bf6e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2bf72:	b183      	cbz	r3, 2bf96 <update_sec_level+0x28>
   2bf74:	7b5a      	ldrb	r2, [r3, #13]
   2bf76:	07d1      	lsls	r1, r2, #31
   2bf78:	d50d      	bpl.n	2bf96 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2bf7a:	06d2      	lsls	r2, r2, #27
   2bf7c:	d50d      	bpl.n	2bf9a <update_sec_level+0x2c>
   2bf7e:	7b1b      	ldrb	r3, [r3, #12]
   2bf80:	2b10      	cmp	r3, #16
   2bf82:	bf14      	ite	ne
   2bf84:	2303      	movne	r3, #3
   2bf86:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2bf88:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2bf8a:	7a80      	ldrb	r0, [r0, #10]
}
   2bf8c:	4298      	cmp	r0, r3
   2bf8e:	bf8c      	ite	hi
   2bf90:	2000      	movhi	r0, #0
   2bf92:	2001      	movls	r0, #1
   2bf94:	4770      	bx	lr
   2bf96:	2302      	movs	r3, #2
   2bf98:	e7f6      	b.n	2bf88 <update_sec_level+0x1a>
   2bf9a:	2303      	movs	r3, #3
   2bf9c:	e7f4      	b.n	2bf88 <update_sec_level+0x1a>

0002bf9e <hci_vendor_event>:
}
   2bf9e:	4770      	bx	lr

0002bfa0 <atomic_or>:
{
   2bfa0:	4603      	mov	r3, r0
   2bfa2:	b510      	push	{r4, lr}
}
   2bfa4:	e8d3 0fef 	ldaex	r0, [r3]
   2bfa8:	ea40 0201 	orr.w	r2, r0, r1
   2bfac:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2bfb0:	2c00      	cmp	r4, #0
   2bfb2:	d1f7      	bne.n	2bfa4 <atomic_or+0x4>
   2bfb4:	bd10      	pop	{r4, pc}

0002bfb6 <bt_addr_copy>:
   2bfb6:	680b      	ldr	r3, [r1, #0]
   2bfb8:	6003      	str	r3, [r0, #0]
   2bfba:	888b      	ldrh	r3, [r1, #4]
   2bfbc:	8083      	strh	r3, [r0, #4]
}
   2bfbe:	4770      	bx	lr

0002bfc0 <bt_addr_le_copy>:
   2bfc0:	680b      	ldr	r3, [r1, #0]
   2bfc2:	6003      	str	r3, [r0, #0]
   2bfc4:	888b      	ldrh	r3, [r1, #4]
   2bfc6:	8083      	strh	r3, [r0, #4]
   2bfc8:	798b      	ldrb	r3, [r1, #6]
   2bfca:	7183      	strb	r3, [r0, #6]
}
   2bfcc:	4770      	bx	lr

0002bfce <z_log_msg_static_create.constprop.0>:
   2bfce:	2300      	movs	r3, #0
   2bfd0:	f7e2 bc5e 	b.w	e890 <z_impl_z_log_msg_static_create>

0002bfd4 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bfd4:	e8d0 3fef 	ldaex	r3, [r0]
   2bfd8:	400b      	ands	r3, r1
   2bfda:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2bfde:	2a00      	cmp	r2, #0
   2bfe0:	d1f8      	bne.n	2bfd4 <atomic_and.isra.0>
}
   2bfe2:	4770      	bx	lr

0002bfe4 <sys_put_le64>:
	dst[1] = val >> 8;
   2bfe4:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2bfe8:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2bfea:	2300      	movs	r3, #0
   2bfec:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2bfee:	0e00      	lsrs	r0, r0, #24
   2bff0:	70d0      	strb	r0, [r2, #3]
   2bff2:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2bff6:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2bff8:	7093      	strb	r3, [r2, #2]
   2bffa:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2bffc:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2bffe:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2c000:	71d1      	strb	r1, [r2, #7]
}
   2c002:	4770      	bx	lr

0002c004 <bt_hci_disconnect>:
{
   2c004:	b570      	push	{r4, r5, r6, lr}
   2c006:	4606      	mov	r6, r0
   2c008:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2c00a:	f240 4006 	movw	r0, #1030	; 0x406
   2c00e:	2103      	movs	r1, #3
   2c010:	f7e6 fbd2 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   2c014:	4604      	mov	r4, r0
   2c016:	b168      	cbz	r0, 2c034 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2c018:	2103      	movs	r1, #3
   2c01a:	300c      	adds	r0, #12
   2c01c:	f7ef fbd6 	bl	1b7cc <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2c020:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2c022:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c024:	4621      	mov	r1, r4
}
   2c026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c02a:	2200      	movs	r2, #0
   2c02c:	f240 4006 	movw	r0, #1030	; 0x406
   2c030:	f7e6 bc10 	b.w	12854 <bt_hci_cmd_send_sync>
}
   2c034:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c038:	bd70      	pop	{r4, r5, r6, pc}

0002c03a <bt_le_set_data_len>:
{
   2c03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c03c:	4607      	mov	r7, r0
   2c03e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c040:	f242 0022 	movw	r0, #8226	; 0x2022
   2c044:	2106      	movs	r1, #6
{
   2c046:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c048:	f7e6 fbb6 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   2c04c:	4604      	mov	r4, r0
   2c04e:	b178      	cbz	r0, 2c070 <bt_le_set_data_len+0x36>
   2c050:	2106      	movs	r1, #6
   2c052:	300c      	adds	r0, #12
   2c054:	f7ef fbba 	bl	1b7cc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c058:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2c05a:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c05c:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2c05e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c060:	4621      	mov	r1, r4
}
   2c062:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c066:	2200      	movs	r2, #0
   2c068:	f242 0022 	movw	r0, #8226	; 0x2022
   2c06c:	f7e6 bbf2 	b.w	12854 <bt_hci_cmd_send_sync>
}
   2c070:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c076 <bt_le_set_phy>:
{
   2c076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c07a:	4681      	mov	r9, r0
   2c07c:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c07e:	f242 0032 	movw	r0, #8242	; 0x2032
   2c082:	2107      	movs	r1, #7
{
   2c084:	4617      	mov	r7, r2
   2c086:	461e      	mov	r6, r3
   2c088:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c08c:	f7e6 fb94 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   2c090:	4605      	mov	r5, r0
   2c092:	b1a0      	cbz	r0, 2c0be <bt_le_set_phy+0x48>
   2c094:	2107      	movs	r1, #7
   2c096:	300c      	adds	r0, #12
   2c098:	f7ef fb98 	bl	1b7cc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c09c:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   2c0a0:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c0a4:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2c0a6:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2c0a8:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2c0aa:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c0ae:	4629      	mov	r1, r5
}
   2c0b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c0b4:	2200      	movs	r2, #0
   2c0b6:	f242 0032 	movw	r0, #8242	; 0x2032
   2c0ba:	f7e6 bbcb 	b.w	12854 <bt_hci_cmd_send_sync>
}
   2c0be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c0c6 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2c0c6:	68c0      	ldr	r0, [r0, #12]
   2c0c8:	f7e6 bc94 	b.w	129f4 <bt_hci_le_enh_conn_complete>

0002c0cc <bt_le_conn_params_valid>:
{
   2c0cc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2c0ce:	8803      	ldrh	r3, [r0, #0]
   2c0d0:	8842      	ldrh	r2, [r0, #2]
   2c0d2:	4293      	cmp	r3, r2
   2c0d4:	d819      	bhi.n	2c10a <bt_le_conn_params_valid+0x3e>
   2c0d6:	2b05      	cmp	r3, #5
   2c0d8:	d917      	bls.n	2c10a <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2c0da:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2c0de:	d814      	bhi.n	2c10a <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2c0e0:	8883      	ldrh	r3, [r0, #4]
   2c0e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2c0e6:	d210      	bcs.n	2c10a <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c0e8:	f640 4476 	movw	r4, #3190	; 0xc76
   2c0ec:	88c0      	ldrh	r0, [r0, #6]
   2c0ee:	f1a0 010a 	sub.w	r1, r0, #10
   2c0f2:	b289      	uxth	r1, r1
   2c0f4:	42a1      	cmp	r1, r4
   2c0f6:	d808      	bhi.n	2c10a <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2c0f8:	3301      	adds	r3, #1
   2c0fa:	b29b      	uxth	r3, r3
   2c0fc:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c0fe:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2c102:	bf34      	ite	cc
   2c104:	2001      	movcc	r0, #1
   2c106:	2000      	movcs	r0, #0
}
   2c108:	bd10      	pop	{r4, pc}
		return false;
   2c10a:	2000      	movs	r0, #0
   2c10c:	e7fc      	b.n	2c108 <bt_le_conn_params_valid+0x3c>

0002c10e <le_conn_param_neg_reply>:
{
   2c10e:	b570      	push	{r4, r5, r6, lr}
   2c110:	4606      	mov	r6, r0
   2c112:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2c114:	f242 0021 	movw	r0, #8225	; 0x2021
   2c118:	2103      	movs	r1, #3
   2c11a:	f7e6 fb4d 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   2c11e:	4604      	mov	r4, r0
   2c120:	b918      	cbnz	r0, 2c12a <le_conn_param_neg_reply+0x1c>
}
   2c122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c126:	f7e5 bf59 	b.w	11fdc <le_conn_param_neg_reply.part.0>
   2c12a:	2103      	movs	r1, #3
   2c12c:	300c      	adds	r0, #12
   2c12e:	f7ef fb4d 	bl	1b7cc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2c132:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2c134:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c136:	4621      	mov	r1, r4
}
   2c138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c13c:	f242 0021 	movw	r0, #8225	; 0x2021
   2c140:	f7e6 bebe 	b.w	12ec0 <bt_hci_cmd_send>

0002c144 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2c144:	f240 3041 	movw	r0, #833	; 0x341
   2c148:	4770      	bx	lr

0002c14a <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2c14a:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2c14c:	f7ee fa1a 	bl	1a584 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2c150:	b118      	cbz	r0, 2c15a <bt_addr_le_is_bonded+0x10>
   2c152:	89c0      	ldrh	r0, [r0, #14]
   2c154:	3800      	subs	r0, #0
   2c156:	bf18      	it	ne
   2c158:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2c15a:	bd08      	pop	{r3, pc}

0002c15c <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2c15c:	2207      	movs	r2, #7
{
   2c15e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2c160:	f004 f9f5 	bl	3054e <memcmp>
}
   2c164:	fab0 f080 	clz	r0, r0
   2c168:	0940      	lsrs	r0, r0, #5
   2c16a:	bd08      	pop	{r3, pc}

0002c16c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c16c:	e8d0 0faf 	lda	r0, [r0]
}
   2c170:	4770      	bx	lr

0002c172 <bt_addr_copy>:
   2c172:	680b      	ldr	r3, [r1, #0]
   2c174:	6003      	str	r3, [r0, #0]
   2c176:	888b      	ldrh	r3, [r1, #4]
   2c178:	8083      	strh	r3, [r0, #4]
}
   2c17a:	4770      	bx	lr

0002c17c <bt_addr_le_copy>:
   2c17c:	680b      	ldr	r3, [r1, #0]
   2c17e:	6003      	str	r3, [r0, #0]
   2c180:	888b      	ldrh	r3, [r1, #4]
   2c182:	8083      	strh	r3, [r0, #4]
   2c184:	798b      	ldrb	r3, [r1, #6]
   2c186:	7183      	strb	r3, [r0, #6]
}
   2c188:	4770      	bx	lr

0002c18a <hci_id_add>:
{
   2c18a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c18c:	460f      	mov	r7, r1
   2c18e:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   2c190:	bb30      	cbnz	r0, 2c1e0 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2c192:	2127      	movs	r1, #39	; 0x27
   2c194:	f242 0027 	movw	r0, #8231	; 0x2027
   2c198:	f7e6 fb0e 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   2c19c:	4605      	mov	r5, r0
   2c19e:	b310      	cbz	r0, 2c1e6 <hci_id_add+0x5c>
   2c1a0:	2127      	movs	r1, #39	; 0x27
   2c1a2:	300c      	adds	r0, #12
   2c1a4:	f7ef fb12 	bl	1b7cc <net_buf_simple_add>
   2c1a8:	4622      	mov	r2, r4
   2c1aa:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2c1ac:	4639      	mov	r1, r7
   2c1ae:	f7ff ffe5 	bl	2c17c <bt_addr_le_copy>
   2c1b2:	1dc3      	adds	r3, r0, #7
   2c1b4:	f104 0110 	add.w	r1, r4, #16
   2c1b8:	f852 0b04 	ldr.w	r0, [r2], #4
   2c1bc:	428a      	cmp	r2, r1
   2c1be:	f843 0b04 	str.w	r0, [r3], #4
   2c1c2:	d1f9      	bne.n	2c1b8 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   2c1c4:	2210      	movs	r2, #16
   2c1c6:	2100      	movs	r1, #0
   2c1c8:	f106 0017 	add.w	r0, r6, #23
   2c1cc:	f004 fa09 	bl	305e2 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2c1d0:	4629      	mov	r1, r5
}
   2c1d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2c1d6:	2200      	movs	r2, #0
   2c1d8:	f242 0027 	movw	r0, #8231	; 0x2027
   2c1dc:	f7e6 bb3a 	b.w	12854 <bt_hci_cmd_send_sync>
		return -EINVAL;
   2c1e0:	f06f 0015 	mvn.w	r0, #21
}
   2c1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2c1e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c1ea:	e7fb      	b.n	2c1e4 <hci_id_add+0x5a>

0002c1ec <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c1ec:	7a03      	ldrb	r3, [r0, #8]
{
   2c1ee:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c1f0:	075b      	lsls	r3, r3, #29
   2c1f2:	d505      	bpl.n	2c200 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2c1f4:	4601      	mov	r1, r0
   2c1f6:	322a      	adds	r2, #42	; 0x2a
   2c1f8:	f811 0b01 	ldrb.w	r0, [r1], #1
   2c1fc:	f7ff bfc5 	b.w	2c18a <hci_id_add>
}
   2c200:	4770      	bx	lr

0002c202 <z_log_msg_static_create.constprop.0>:
   2c202:	2300      	movs	r3, #0
   2c204:	f7e2 bb44 	b.w	e890 <z_impl_z_log_msg_static_create>

0002c208 <addr_res_enable>:
{
   2c208:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c20a:	2101      	movs	r1, #1
{
   2c20c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c20e:	f242 002d 	movw	r0, #8237	; 0x202d
   2c212:	f7e6 fad1 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   2c216:	4604      	mov	r4, r0
   2c218:	b158      	cbz	r0, 2c232 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2c21a:	4629      	mov	r1, r5
   2c21c:	300c      	adds	r0, #12
   2c21e:	f001 ff06 	bl	2e02e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c222:	4621      	mov	r1, r4
}
   2c224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c228:	2200      	movs	r2, #0
   2c22a:	f242 002d 	movw	r0, #8237	; 0x202d
   2c22e:	f7e6 bb11 	b.w	12854 <bt_hci_cmd_send_sync>
}
   2c232:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c236:	bd38      	pop	{r3, r4, r5, pc}

0002c238 <adv_unpause_enabled>:
{
   2c238:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c23a:	f100 0310 	add.w	r3, r0, #16
   2c23e:	e8d3 2fef 	ldaex	r2, [r3]
   2c242:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2c246:	e8c3 1fe4 	stlex	r4, r1, [r3]
   2c24a:	2c00      	cmp	r4, #0
   2c24c:	d1f7      	bne.n	2c23e <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2c24e:	0413      	lsls	r3, r2, #16
   2c250:	d503      	bpl.n	2c25a <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   2c252:	2101      	movs	r1, #1
}
   2c254:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   2c256:	f000 b939 	b.w	2c4cc <bt_le_adv_set_enable>
}
   2c25a:	bc10      	pop	{r4}
   2c25c:	4770      	bx	lr

0002c25e <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c25e:	f100 0210 	add.w	r2, r0, #16
{
   2c262:	b508      	push	{r3, lr}
   2c264:	4603      	mov	r3, r0
   2c266:	4610      	mov	r0, r2
   2c268:	f7ff ff80 	bl	2c16c <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c26c:	0601      	lsls	r1, r0, #24
   2c26e:	d50d      	bpl.n	2c28c <adv_pause_enabled+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c270:	e8d2 0fef 	ldaex	r0, [r2]
   2c274:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   2c278:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2c27c:	2900      	cmp	r1, #0
   2c27e:	d1f7      	bne.n	2c270 <adv_pause_enabled+0x12>
		bt_le_adv_set_enable(adv, false);
   2c280:	4618      	mov	r0, r3
}
   2c282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   2c286:	2100      	movs	r1, #0
   2c288:	f000 b920 	b.w	2c4cc <bt_le_adv_set_enable>
}
   2c28c:	bd08      	pop	{r3, pc}

0002c28e <bt_lookup_id_addr>:
{
   2c28e:	b510      	push	{r4, lr}
   2c290:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2c292:	b930      	cbnz	r0, 2c2a2 <bt_lookup_id_addr+0x14>
   2c294:	b119      	cbz	r1, 2c29e <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2c296:	f7ee f91d 	bl	1a4d4 <bt_keys_find_irk>
		if (keys) {
   2c29a:	b100      	cbz	r0, 2c29e <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2c29c:	1c44      	adds	r4, r0, #1
}
   2c29e:	4620      	mov	r0, r4
   2c2a0:	bd10      	pop	{r4, pc}
		return NULL;
   2c2a2:	2400      	movs	r4, #0
   2c2a4:	e7fb      	b.n	2c29e <bt_lookup_id_addr+0x10>

0002c2a6 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2c2a6:	b118      	cbz	r0, 2c2b0 <bt_id_set_adv_random_addr+0xa>
   2c2a8:	b111      	cbz	r1, 2c2b0 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2c2aa:	4608      	mov	r0, r1
   2c2ac:	f7e7 ba0a 	b.w	136c4 <set_random_address>
}
   2c2b0:	f06f 0015 	mvn.w	r0, #21
   2c2b4:	4770      	bx	lr

0002c2b6 <bt_id_set_adv_private_addr>:
{
   2c2b6:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2c2b8:	4604      	mov	r4, r0
   2c2ba:	b180      	cbz	r0, 2c2de <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2c2bc:	2106      	movs	r1, #6
   2c2be:	4668      	mov	r0, sp
   2c2c0:	f7e8 f940 	bl	14544 <bt_rand>
	if (err) {
   2c2c4:	b948      	cbnz	r0, 2c2da <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2c2c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c2ca:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2c2cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c2d0:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   2c2d2:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c2d6:	f7ff ffe6 	bl	2c2a6 <bt_id_set_adv_random_addr>
}
   2c2da:	b002      	add	sp, #8
   2c2dc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2c2de:	f06f 0015 	mvn.w	r0, #21
   2c2e2:	e7fa      	b.n	2c2da <bt_id_set_adv_private_addr+0x24>

0002c2e4 <bt_id_adv_random_addr_check>:
}
   2c2e4:	3800      	subs	r0, #0
   2c2e6:	bf18      	it	ne
   2c2e8:	2001      	movne	r0, #1
   2c2ea:	4770      	bx	lr

0002c2ec <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2c2ec:	7a03      	ldrb	r3, [r0, #8]
   2c2ee:	07d9      	lsls	r1, r3, #31
   2c2f0:	d504      	bpl.n	2c2fc <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2c2f2:	f023 0301 	bic.w	r3, r3, #1
   2c2f6:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2c2f8:	f7e7 bb50 	b.w	1399c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2c2fc:	0799      	lsls	r1, r3, #30
   2c2fe:	d504      	bpl.n	2c30a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2c300:	f023 0302 	bic.w	r3, r3, #2
   2c304:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2c306:	f7e7 bb63 	b.w	139d0 <bt_id_del>
}
   2c30a:	4770      	bx	lr

0002c30c <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2c30c:	2000      	movs	r0, #0
   2c30e:	4770      	bx	lr

0002c310 <get_adv_channel_map>:
{
   2c310:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2c312:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2c316:	bf0c      	ite	eq
   2c318:	2007      	moveq	r0, #7
   2c31a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2c31c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2c31e:	bf48      	it	mi
   2c320:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2c324:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2c326:	bf48      	it	mi
   2c328:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2c32c:	4770      	bx	lr

0002c32e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c32e:	e8d0 0faf 	lda	r0, [r0]
}
   2c332:	4770      	bx	lr

0002c334 <atomic_and>:
{
   2c334:	4603      	mov	r3, r0
   2c336:	b510      	push	{r4, lr}
}
   2c338:	e8d3 0fef 	ldaex	r0, [r3]
   2c33c:	ea00 0201 	and.w	r2, r0, r1
   2c340:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2c344:	2c00      	cmp	r4, #0
   2c346:	d1f7      	bne.n	2c338 <atomic_and+0x4>
   2c348:	bd10      	pop	{r4, pc}

0002c34a <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c34a:	680b      	ldr	r3, [r1, #0]
   2c34c:	6003      	str	r3, [r0, #0]
   2c34e:	888b      	ldrh	r3, [r1, #4]
   2c350:	8083      	strh	r3, [r0, #4]
   2c352:	798b      	ldrb	r3, [r1, #6]
   2c354:	7183      	strb	r3, [r0, #6]
   2c356:	4770      	bx	lr

0002c358 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c358:	2301      	movs	r3, #1
{
   2c35a:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c35c:	fa03 f101 	lsl.w	r1, r3, r1
{
   2c360:	4604      	mov	r4, r0
	if (val) {
   2c362:	b142      	cbz	r2, 2c376 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c364:	e8d4 3fef 	ldaex	r3, [r4]
   2c368:	430b      	orrs	r3, r1
   2c36a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2c36e:	2a00      	cmp	r2, #0
   2c370:	d1f8      	bne.n	2c364 <atomic_set_bit_to+0xc>
	}
}
   2c372:	bc10      	pop	{r4}
   2c374:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c376:	43c9      	mvns	r1, r1
}
   2c378:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c37a:	f7ff bfdb 	b.w	2c334 <atomic_and>

0002c37e <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2c37e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c382:	b087      	sub	sp, #28
   2c384:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2c388:	4605      	mov	r5, r0
   2c38a:	460c      	mov	r4, r1
   2c38c:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2c38e:	2100      	movs	r1, #0
   2c390:	2210      	movs	r2, #16
   2c392:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2c394:	461f      	mov	r7, r3
   2c396:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2c39a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   2c39e:	f004 f920 	bl	305e2 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2c3a2:	b9ce      	cbnz	r6, 2c3d8 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   2c3a4:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   2c3a8:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2c3aa:	f242 0008 	movw	r0, #8200	; 0x2008
   2c3ae:	a902      	add	r1, sp, #8
   2c3b0:	f7e7 fd4a 	bl	13e48 <hci_set_ad>
		if (err) {
   2c3b4:	4604      	mov	r4, r0
   2c3b6:	b958      	cbnz	r0, 2c3d0 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   2c3b8:	f1ba 0f00 	cmp.w	sl, #0
   2c3bc:	d13a      	bne.n	2c434 <le_adv_update.constprop.0+0xb6>
   2c3be:	3510      	adds	r5, #16
   2c3c0:	e8d5 3fef 	ldaex	r3, [r5]
   2c3c4:	f043 0304 	orr.w	r3, r3, #4
   2c3c8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2c3cc:	2a00      	cmp	r2, #0
   2c3ce:	d1f7      	bne.n	2c3c0 <le_adv_update.constprop.0+0x42>
}
   2c3d0:	4620      	mov	r0, r4
   2c3d2:	b007      	add	sp, #28
   2c3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2c3d8:	f7e7 f922 	bl	13620 <bt_get_name>
   2c3dc:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2c3de:	b9e4      	cbnz	r4, 2c41a <le_adv_update.constprop.0+0x9c>
   2c3e0:	bb37      	cbnz	r7, 2c430 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   2c3e2:	4658      	mov	r0, fp
   2c3e4:	f7dc ffcf 	bl	9386 <strlen>
   2c3e8:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2c3ea:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2c3ec:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2c3f0:	f88d 3000 	strb.w	r3, [sp]
   2c3f4:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   2c3f8:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2c3fc:	d1d4      	bne.n	2c3a8 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2c3fe:	2202      	movs	r2, #2
			d[1].data = &data;
   2c400:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2c404:	9605      	str	r6, [sp, #20]
			d_len = 2;
   2c406:	e7d0      	b.n	2c3aa <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2c408:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2c40c:	3a08      	subs	r2, #8
   2c40e:	2a01      	cmp	r2, #1
   2c410:	d924      	bls.n	2c45c <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2c412:	3301      	adds	r3, #1
   2c414:	4598      	cmp	r8, r3
   2c416:	d1f7      	bne.n	2c408 <le_adv_update.constprop.0+0x8a>
   2c418:	e7e2      	b.n	2c3e0 <le_adv_update.constprop.0+0x62>
   2c41a:	2300      	movs	r3, #0
   2c41c:	e7fa      	b.n	2c414 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2c41e:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2c422:	3a08      	subs	r2, #8
   2c424:	2a01      	cmp	r2, #1
   2c426:	d919      	bls.n	2c45c <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2c428:	3301      	adds	r3, #1
   2c42a:	4599      	cmp	r9, r3
   2c42c:	d1f7      	bne.n	2c41e <le_adv_update.constprop.0+0xa0>
   2c42e:	e7d8      	b.n	2c3e2 <le_adv_update.constprop.0+0x64>
   2c430:	2300      	movs	r3, #0
   2c432:	e7fa      	b.n	2c42a <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   2c434:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   2c436:	2e02      	cmp	r6, #2
			d[1].len = 1;
   2c438:	bf08      	it	eq
   2c43a:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c43c:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   2c440:	bf08      	it	eq
   2c442:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c444:	a902      	add	r1, sp, #8
			d[1].data = &data;
   2c446:	bf08      	it	eq
   2c448:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2c44c:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c450:	f7e7 fcfa 	bl	13e48 <hci_set_ad>
		if (err) {
   2c454:	2800      	cmp	r0, #0
   2c456:	d0b2      	beq.n	2c3be <le_adv_update.constprop.0+0x40>
   2c458:	4604      	mov	r4, r0
   2c45a:	e7b9      	b.n	2c3d0 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   2c45c:	f06f 0415 	mvn.w	r4, #21
   2c460:	e7b6      	b.n	2c3d0 <le_adv_update.constprop.0+0x52>

0002c462 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2c462:	6843      	ldr	r3, [r0, #4]
   2c464:	f013 0008 	ands.w	r0, r3, #8
   2c468:	d00a      	beq.n	2c480 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2c46a:	035a      	lsls	r2, r3, #13
   2c46c:	d407      	bmi.n	2c47e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2c46e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2c472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2c476:	bf14      	ite	ne
   2c478:	2002      	movne	r0, #2
   2c47a:	2001      	moveq	r0, #1
   2c47c:	4770      	bx	lr
   2c47e:	2001      	movs	r0, #1
}
   2c480:	4770      	bx	lr

0002c482 <bt_le_adv_set_enable_legacy>:
{
   2c482:	b570      	push	{r4, r5, r6, lr}
   2c484:	4606      	mov	r6, r0
   2c486:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2c488:	f242 000a 	movw	r0, #8202	; 0x200a
   2c48c:	2101      	movs	r1, #1
{
   2c48e:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2c490:	f7e6 f992 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   2c494:	4604      	mov	r4, r0
   2c496:	b1b0      	cbz	r0, 2c4c6 <bt_le_adv_set_enable_legacy+0x44>
   2c498:	300c      	adds	r0, #12
	if (enable) {
   2c49a:	b195      	cbz	r5, 2c4c2 <bt_le_adv_set_enable_legacy+0x40>
   2c49c:	2101      	movs	r1, #1
   2c49e:	f001 fdc6 	bl	2e02e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2c4a2:	4620      	mov	r0, r4
   2c4a4:	f106 0210 	add.w	r2, r6, #16
   2c4a8:	a903      	add	r1, sp, #12
   2c4aa:	2307      	movs	r3, #7
   2c4ac:	9500      	str	r5, [sp, #0]
   2c4ae:	f7e6 f971 	bl	12794 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2c4b2:	2200      	movs	r2, #0
   2c4b4:	4621      	mov	r1, r4
   2c4b6:	f242 000a 	movw	r0, #8202	; 0x200a
   2c4ba:	f7e6 f9cb 	bl	12854 <bt_hci_cmd_send_sync>
}
   2c4be:	b006      	add	sp, #24
   2c4c0:	bd70      	pop	{r4, r5, r6, pc}
   2c4c2:	4629      	mov	r1, r5
   2c4c4:	e7eb      	b.n	2c49e <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2c4c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c4ca:	e7f8      	b.n	2c4be <bt_le_adv_set_enable_legacy+0x3c>

0002c4cc <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c4cc:	f7ff bfd9 	b.w	2c482 <bt_le_adv_set_enable_legacy>

0002c4d0 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2c4d0:	3018      	adds	r0, #24
   2c4d2:	f7f9 be1f 	b.w	26114 <k_work_cancel_delayable>

0002c4d6 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2c4d6:	b530      	push	{r4, r5, lr}
   2c4d8:	460d      	mov	r5, r1
   2c4da:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2c4dc:	4601      	mov	r1, r0
{
   2c4de:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2c4e0:	b310      	cbz	r0, 2c528 <bt_encrypt_le+0x52>
   2c4e2:	b30d      	cbz	r5, 2c528 <bt_encrypt_le+0x52>
   2c4e4:	b302      	cbz	r2, 2c528 <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   2c4e6:	4668      	mov	r0, sp
   2c4e8:	f7e7 ffa2 	bl	14430 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2c4ec:	4669      	mov	r1, sp
   2c4ee:	a804      	add	r0, sp, #16
   2c4f0:	f7e4 f8a6 	bl	10640 <tc_aes128_set_encrypt_key>
   2c4f4:	b1c0      	cbz	r0, 2c528 <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   2c4f6:	4629      	mov	r1, r5
   2c4f8:	4668      	mov	r0, sp
   2c4fa:	f7e7 ff99 	bl	14430 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   2c4fe:	4669      	mov	r1, sp
   2c500:	4620      	mov	r0, r4
   2c502:	aa04      	add	r2, sp, #16
   2c504:	f7ff f8a1 	bl	2b64a <tc_aes_encrypt>
   2c508:	b170      	cbz	r0, 2c528 <bt_encrypt_le+0x52>
   2c50a:	1e63      	subs	r3, r4, #1
   2c50c:	f104 0210 	add.w	r2, r4, #16
   2c510:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2c512:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c516:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2c51a:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c51c:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2c51e:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2c520:	d1f7      	bne.n	2c512 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   2c522:	2000      	movs	r0, #0
}
   2c524:	b031      	add	sp, #196	; 0xc4
   2c526:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c528:	f06f 0015 	mvn.w	r0, #21
   2c52c:	e7fa      	b.n	2c524 <bt_encrypt_le+0x4e>

0002c52e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c52e:	2200      	movs	r2, #0
	return list->head;
   2c530:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c532:	b90b      	cbnz	r3, 2c538 <sys_slist_find_and_remove+0xa>
   2c534:	4618      	mov	r0, r3
   2c536:	4770      	bx	lr
   2c538:	428b      	cmp	r3, r1
   2c53a:	d110      	bne.n	2c55e <sys_slist_find_and_remove+0x30>
	return node->next;
   2c53c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c53e:	b942      	cbnz	r2, 2c552 <sys_slist_find_and_remove+0x24>
   2c540:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2c542:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c544:	4291      	cmp	r1, r2
   2c546:	d100      	bne.n	2c54a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2c548:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2c54a:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c54c:	2001      	movs	r0, #1
	parent->next = child;
   2c54e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c550:	4770      	bx	lr
	parent->next = child;
   2c552:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c554:	6843      	ldr	r3, [r0, #4]
   2c556:	4299      	cmp	r1, r3
	list->tail = node;
   2c558:	bf08      	it	eq
   2c55a:	6042      	streq	r2, [r0, #4]
}
   2c55c:	e7f5      	b.n	2c54a <sys_slist_find_and_remove+0x1c>
	return node->next;
   2c55e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c560:	681b      	ldr	r3, [r3, #0]
   2c562:	e7e6      	b.n	2c532 <sys_slist_find_and_remove+0x4>

0002c564 <atomic_and>:
{
   2c564:	4603      	mov	r3, r0
   2c566:	b510      	push	{r4, lr}
}
   2c568:	e8d3 0fef 	ldaex	r0, [r3]
   2c56c:	ea00 0201 	and.w	r2, r0, r1
   2c570:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2c574:	2c00      	cmp	r4, #0
   2c576:	d1f7      	bne.n	2c568 <atomic_and+0x4>
   2c578:	bd10      	pop	{r4, pc}

0002c57a <z_log_msg_static_create.constprop.0>:
   2c57a:	2300      	movs	r3, #0
   2c57c:	f7e2 b988 	b.w	e890 <z_impl_z_log_msg_static_create>

0002c580 <tx_complete_work>:
	tx_notify(conn);
   2c580:	3828      	subs	r0, #40	; 0x28
   2c582:	f7e8 b977 	b.w	14874 <tx_notify>

0002c586 <bt_conn_reset_rx_state>:
{
   2c586:	b510      	push	{r4, lr}
   2c588:	4604      	mov	r4, r0
	if (!conn->rx) {
   2c58a:	6900      	ldr	r0, [r0, #16]
   2c58c:	b118      	cbz	r0, 2c596 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2c58e:	f7ee fffb 	bl	1b588 <net_buf_unref>
	conn->rx = NULL;
   2c592:	2300      	movs	r3, #0
   2c594:	6123      	str	r3, [r4, #16]
}
   2c596:	bd10      	pop	{r4, pc}

0002c598 <conn_lookup_handle>:
{
   2c598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c59c:	4607      	mov	r7, r0
   2c59e:	460e      	mov	r6, r1
   2c5a0:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2c5a2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c5a4:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2c5a8:	42b4      	cmp	r4, r6
   2c5aa:	d103      	bne.n	2c5b4 <conn_lookup_handle+0x1c>
	return NULL;
   2c5ac:	2300      	movs	r3, #0
}
   2c5ae:	4618      	mov	r0, r3
   2c5b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c5b4:	fb09 7004 	mla	r0, r9, r4, r7
   2c5b8:	f7e8 fc1c 	bl	14df4 <bt_conn_ref>
   2c5bc:	4603      	mov	r3, r0
		if (!conn) {
   2c5be:	b158      	cbz	r0, 2c5d8 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2c5c0:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2c5c2:	2d01      	cmp	r5, #1
   2c5c4:	d002      	beq.n	2c5cc <conn_lookup_handle+0x34>
   2c5c6:	3d07      	subs	r5, #7
   2c5c8:	2d01      	cmp	r5, #1
   2c5ca:	d803      	bhi.n	2c5d4 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2c5cc:	881a      	ldrh	r2, [r3, #0]
   2c5ce:	4542      	cmp	r2, r8
   2c5d0:	d0ed      	beq.n	2c5ae <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2c5d2:	4618      	mov	r0, r3
   2c5d4:	f7e8 fc36 	bl	14e44 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2c5d8:	3401      	adds	r4, #1
   2c5da:	e7e5      	b.n	2c5a8 <conn_lookup_handle+0x10>

0002c5dc <bt_conn_connected>:
{
   2c5dc:	b510      	push	{r4, lr}
   2c5de:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2c5e0:	f7e9 f97c 	bl	158dc <bt_l2cap_connected>
	notify_connected(conn);
   2c5e4:	4620      	mov	r0, r4
}
   2c5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2c5ea:	f7e8 b90d 	b.w	14808 <notify_connected>

0002c5ee <bt_conn_disconnect>:
{
   2c5ee:	b510      	push	{r4, lr}
	switch (conn->state) {
   2c5f0:	7b43      	ldrb	r3, [r0, #13]
{
   2c5f2:	4604      	mov	r4, r0
	switch (conn->state) {
   2c5f4:	3b02      	subs	r3, #2
   2c5f6:	2b06      	cmp	r3, #6
   2c5f8:	d816      	bhi.n	2c628 <bt_conn_disconnect+0x3a>
   2c5fa:	e8df f003 	tbb	[pc, r3]
   2c5fe:	1504      	.short	0x1504
   2c600:	0b091515 	.word	0x0b091515
   2c604:	09          	.byte	0x09
   2c605:	00          	.byte	0x00
		conn->err = reason;
   2c606:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c608:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2c60a:	4620      	mov	r0, r4
   2c60c:	f7e8 fc52 	bl	14eb4 <bt_conn_set_state>
{
   2c610:	2000      	movs	r0, #0
}
   2c612:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   2c614:	8800      	ldrh	r0, [r0, #0]
   2c616:	f7ff fcf5 	bl	2c004 <bt_hci_disconnect>
	if (err) {
   2c61a:	2800      	cmp	r0, #0
   2c61c:	d1f9      	bne.n	2c612 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2c61e:	7b63      	ldrb	r3, [r4, #13]
   2c620:	2b07      	cmp	r3, #7
   2c622:	d1f5      	bne.n	2c610 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2c624:	2108      	movs	r1, #8
   2c626:	e7f0      	b.n	2c60a <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2c628:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c62c:	e7f1      	b.n	2c612 <bt_conn_disconnect+0x24>

0002c62e <bt_conn_set_security>:
{
   2c62e:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2c630:	7b43      	ldrb	r3, [r0, #13]
{
   2c632:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2c634:	2b07      	cmp	r3, #7
{
   2c636:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2c638:	d122      	bne.n	2c680 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2c63a:	7a43      	ldrb	r3, [r0, #9]
   2c63c:	428b      	cmp	r3, r1
   2c63e:	d215      	bcs.n	2c66c <bt_conn_set_security+0x3e>
   2c640:	7a83      	ldrb	r3, [r0, #10]
   2c642:	428b      	cmp	r3, r1
   2c644:	d212      	bcs.n	2c66c <bt_conn_set_security+0x3e>
	if (val) {
   2c646:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2c648:	f100 0004 	add.w	r0, r0, #4
   2c64c:	d510      	bpl.n	2c670 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c64e:	e8d0 3fef 	ldaex	r3, [r0]
   2c652:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2c656:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2c65a:	2a00      	cmp	r2, #0
   2c65c:	d1f7      	bne.n	2c64e <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2c65e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   2c662:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2c664:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2c666:	f7ed f86d 	bl	19744 <bt_smp_start_security>
	if (err) {
   2c66a:	b930      	cbnz	r0, 2c67a <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   2c66c:	2000      	movs	r0, #0
}
   2c66e:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c670:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2c674:	f7ff ff76 	bl	2c564 <atomic_and>
   2c678:	e7f1      	b.n	2c65e <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   2c67a:	7a63      	ldrb	r3, [r4, #9]
   2c67c:	72a3      	strb	r3, [r4, #10]
   2c67e:	e7f6      	b.n	2c66e <bt_conn_set_security+0x40>
		return -ENOTCONN;
   2c680:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c684:	e7f3      	b.n	2c66e <bt_conn_set_security+0x40>

0002c686 <bt_conn_get_security>:
}
   2c686:	7a40      	ldrb	r0, [r0, #9]
   2c688:	4770      	bx	lr

0002c68a <bt_conn_is_peer_addr_le>:
{
   2c68a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2c68c:	7a03      	ldrb	r3, [r0, #8]
{
   2c68e:	4604      	mov	r4, r0
	if (id != conn->id) {
   2c690:	428b      	cmp	r3, r1
{
   2c692:	4615      	mov	r5, r2
	if (id != conn->id) {
   2c694:	d115      	bne.n	2c6c2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2c696:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2c69a:	2207      	movs	r2, #7
   2c69c:	4628      	mov	r0, r5
   2c69e:	f003 ff56 	bl	3054e <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2c6a2:	b180      	cbz	r0, 2c6c6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c6a4:	78e3      	ldrb	r3, [r4, #3]
   2c6a6:	2207      	movs	r2, #7
   2c6a8:	b943      	cbnz	r3, 2c6bc <bt_conn_is_peer_addr_le+0x32>
   2c6aa:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2c6ae:	4628      	mov	r0, r5
   2c6b0:	f003 ff4d 	bl	3054e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2c6b4:	fab0 f080 	clz	r0, r0
   2c6b8:	0940      	lsrs	r0, r0, #5
}
   2c6ba:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2c6bc:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2c6c0:	e7f5      	b.n	2c6ae <bt_conn_is_peer_addr_le+0x24>
		return false;
   2c6c2:	2000      	movs	r0, #0
   2c6c4:	e7f9      	b.n	2c6ba <bt_conn_is_peer_addr_le+0x30>
		return true;
   2c6c6:	2001      	movs	r0, #1
   2c6c8:	e7f7      	b.n	2c6ba <bt_conn_is_peer_addr_le+0x30>

0002c6ca <bt_conn_get_dst>:
}
   2c6ca:	3090      	adds	r0, #144	; 0x90
   2c6cc:	4770      	bx	lr

0002c6ce <bt_conn_le_conn_update>:
{
   2c6ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c6d0:	4607      	mov	r7, r0
   2c6d2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2c6d4:	f242 0013 	movw	r0, #8211	; 0x2013
   2c6d8:	210e      	movs	r1, #14
   2c6da:	f7e6 f86d 	bl	127b8 <bt_hci_cmd_create>
	if (!buf) {
   2c6de:	4606      	mov	r6, r0
   2c6e0:	b1d0      	cbz	r0, 2c718 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2c6e2:	210e      	movs	r1, #14
   2c6e4:	300c      	adds	r0, #12
   2c6e6:	f7ef f871 	bl	1b7cc <net_buf_simple_add>
   2c6ea:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2c6ec:	220e      	movs	r2, #14
   2c6ee:	2100      	movs	r1, #0
   2c6f0:	f003 ff77 	bl	305e2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c6f4:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c6f6:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c6f8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c6fa:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c6fc:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c6fe:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c700:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c702:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c706:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2c708:	88ab      	ldrh	r3, [r5, #4]
   2c70a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2c70c:	88eb      	ldrh	r3, [r5, #6]
   2c70e:	8123      	strh	r3, [r4, #8]
}
   2c710:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c714:	f7e6 b89e 	b.w	12854 <bt_hci_cmd_send_sync>
}
   2c718:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c71e <l2cap_connected>:
}
   2c71e:	4770      	bx	lr

0002c720 <z_log_msg_static_create.constprop.0>:
   2c720:	2300      	movs	r3, #0
   2c722:	f7e2 b8b5 	b.w	e890 <z_impl_z_log_msg_static_create>

0002c726 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2c726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c728:	4605      	mov	r5, r0
   2c72a:	460f      	mov	r7, r1
   2c72c:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2c72e:	2300      	movs	r3, #0
   2c730:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2c734:	2104      	movs	r1, #4
   2c736:	2000      	movs	r0, #0
   2c738:	f7e8 fcd6 	bl	150e8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2c73c:	4604      	mov	r4, r0
   2c73e:	b920      	cbnz	r0, 2c74a <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2c740:	4628      	mov	r0, r5
}
   2c742:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c746:	f7e9 b88d 	b.w	15864 <l2cap_create_le_sig_pdu.part.0>
   2c74a:	2104      	movs	r1, #4
   2c74c:	300c      	adds	r0, #12
   2c74e:	f7ef f83d 	bl	1b7cc <net_buf_simple_add>
	hdr->code = code;
   2c752:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2c754:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2c756:	8046      	strh	r6, [r0, #2]
}
   2c758:	4620      	mov	r0, r4
   2c75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c75c <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2c75c:	4770      	bx	lr

0002c75e <bt_l2cap_chan_del>:
{
   2c75e:	b570      	push	{r4, r5, r6, lr}
   2c760:	4604      	mov	r4, r0
	if (!chan->conn) {
   2c762:	e9d0 3500 	ldrd	r3, r5, [r0]
   2c766:	b123      	cbz	r3, 2c772 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2c768:	686b      	ldr	r3, [r5, #4]
   2c76a:	b103      	cbz	r3, 2c76e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2c76c:	4798      	blx	r3
	chan->conn = NULL;
   2c76e:	2300      	movs	r3, #0
   2c770:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2c772:	68e3      	ldr	r3, [r4, #12]
   2c774:	b10b      	cbz	r3, 2c77a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2c776:	4620      	mov	r0, r4
   2c778:	4798      	blx	r3
	if (ops->released) {
   2c77a:	6a2b      	ldr	r3, [r5, #32]
   2c77c:	b11b      	cbz	r3, 2c786 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2c77e:	4620      	mov	r0, r4
}
   2c780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2c784:	4718      	bx	r3
}
   2c786:	bd70      	pop	{r4, r5, r6, pc}

0002c788 <bt_l2cap_disconnected>:
{
   2c788:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c78a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c78c:	b130      	cbz	r0, 2c79c <bt_l2cap_disconnected+0x14>
	return node->next;
   2c78e:	f850 4908 	ldr.w	r4, [r0], #-8
   2c792:	b104      	cbz	r4, 2c796 <bt_l2cap_disconnected+0xe>
   2c794:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2c796:	f7ff ffe2 	bl	2c75e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c79a:	b904      	cbnz	r4, 2c79e <bt_l2cap_disconnected+0x16>
}
   2c79c:	bd38      	pop	{r3, r4, r5, pc}
   2c79e:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7a0:	b12d      	cbz	r5, 2c7ae <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2c7a2:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7a4:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2c7a6:	f7ff ffda 	bl	2c75e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7aa:	462c      	mov	r4, r5
   2c7ac:	e7f7      	b.n	2c79e <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2c7ae:	4620      	mov	r0, r4
}
   2c7b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2c7b4:	f7ff bfd3 	b.w	2c75e <bt_l2cap_chan_del>

0002c7b8 <bt_l2cap_security_changed>:
{
   2c7b8:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c7ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2c7bc:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7be:	b1bb      	cbz	r3, 2c7f0 <bt_l2cap_security_changed+0x38>
   2c7c0:	4618      	mov	r0, r3
	return node->next;
   2c7c2:	f850 4908 	ldr.w	r4, [r0], #-8
   2c7c6:	b104      	cbz	r4, 2c7ca <bt_l2cap_security_changed+0x12>
   2c7c8:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c7ca:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2c7ce:	689b      	ldr	r3, [r3, #8]
   2c7d0:	b10b      	cbz	r3, 2c7d6 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2c7d2:	4629      	mov	r1, r5
   2c7d4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7d6:	b15c      	cbz	r4, 2c7f0 <bt_l2cap_security_changed+0x38>
   2c7d8:	4620      	mov	r0, r4
   2c7da:	68a4      	ldr	r4, [r4, #8]
   2c7dc:	6843      	ldr	r3, [r0, #4]
   2c7de:	b124      	cbz	r4, 2c7ea <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2c7e0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7e2:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c7e4:	2b00      	cmp	r3, #0
   2c7e6:	d1f4      	bne.n	2c7d2 <bt_l2cap_security_changed+0x1a>
   2c7e8:	e7f6      	b.n	2c7d8 <bt_l2cap_security_changed+0x20>
   2c7ea:	689b      	ldr	r3, [r3, #8]
   2c7ec:	2b00      	cmp	r3, #0
   2c7ee:	d1f0      	bne.n	2c7d2 <bt_l2cap_security_changed+0x1a>
}
   2c7f0:	bd38      	pop	{r3, r4, r5, pc}

0002c7f2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2c7f2:	3104      	adds	r1, #4
   2c7f4:	f7e8 bc78 	b.w	150e8 <bt_conn_create_pdu_timeout>

0002c7f8 <bt_l2cap_send_cb>:
{
   2c7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c7fc:	4614      	mov	r4, r2
   2c7fe:	4605      	mov	r5, r0
   2c800:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2c802:	f102 000c 	add.w	r0, r2, #12
   2c806:	2104      	movs	r1, #4
   2c808:	461e      	mov	r6, r3
   2c80a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2c80e:	f7ee ff81 	bl	1b714 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c812:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2c814:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c816:	3a04      	subs	r2, #4
   2c818:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c81a:	4643      	mov	r3, r8
   2c81c:	4632      	mov	r2, r6
   2c81e:	4621      	mov	r1, r4
   2c820:	4628      	mov	r0, r5
}
   2c822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c826:	f7e8 ba45 	b.w	14cb4 <bt_conn_send_cb>

0002c82a <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2c82a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c82c:	b128      	cbz	r0, 2c83a <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c82e:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c830:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c832:	428b      	cmp	r3, r1
   2c834:	d001      	beq.n	2c83a <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   2c836:	6880      	ldr	r0, [r0, #8]
   2c838:	e7f8      	b.n	2c82c <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2c83a:	4770      	bx	lr

0002c83c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2c83c:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c83e:	b128      	cbz	r0, 2c84c <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c840:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c842:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c844:	428b      	cmp	r3, r1
   2c846:	d001      	beq.n	2c84c <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   2c848:	6880      	ldr	r0, [r0, #8]
   2c84a:	e7f8      	b.n	2c83e <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2c84c:	4770      	bx	lr

0002c84e <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2c84e:	4770      	bx	lr

0002c850 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2c850:	4603      	mov	r3, r0
	return list->head;
   2c852:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2c854:	b128      	cbz	r0, 2c862 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c856:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2c858:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c85a:	4288      	cmp	r0, r1
	list->head = node;
   2c85c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2c85e:	bf08      	it	eq
   2c860:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2c862:	4770      	bx	lr

0002c864 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2c864:	4603      	mov	r3, r0
	size_t bytes = 0;
   2c866:	2000      	movs	r0, #0

	while (buf) {
   2c868:	b903      	cbnz	r3, 2c86c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2c86a:	4770      	bx	lr
		bytes += buf->len;
   2c86c:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2c86e:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2c870:	4410      	add	r0, r2
		buf = buf->frags;
   2c872:	e7f9      	b.n	2c868 <net_buf_frags_len+0x4>

0002c874 <attr_read_type_cb>:
{
   2c874:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2c876:	68d4      	ldr	r4, [r2, #12]
   2c878:	3102      	adds	r1, #2
   2c87a:	7823      	ldrb	r3, [r4, #0]
   2c87c:	b913      	cbnz	r3, 2c884 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2c87e:	7021      	strb	r1, [r4, #0]
	return true;
   2c880:	2001      	movs	r0, #1
}
   2c882:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2c884:	428b      	cmp	r3, r1
   2c886:	d0fb      	beq.n	2c880 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2c888:	8a03      	ldrh	r3, [r0, #16]
   2c88a:	3b02      	subs	r3, #2
   2c88c:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2c88e:	2000      	movs	r0, #0
   2c890:	6110      	str	r0, [r2, #16]
		return false;
   2c892:	e7f6      	b.n	2c882 <attr_read_type_cb+0xe>

0002c894 <att_prepare_write_req>:
}
   2c894:	2006      	movs	r0, #6
   2c896:	4770      	bx	lr

0002c898 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c898:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c89c:	4108      	asrs	r0, r1
}
   2c89e:	f000 0001 	and.w	r0, r0, #1
   2c8a2:	4770      	bx	lr

0002c8a4 <write_cb>:
{
   2c8a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c8a6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c8a8:	4601      	mov	r1, r0
{
   2c8aa:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c8ac:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2c8b0:	6820      	ldr	r0, [r4, #0]
   2c8b2:	f000 fdce 	bl	2d452 <bt_gatt_check_perm>
   2c8b6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2c8b8:	bb00      	cbnz	r0, 2c8fc <write_cb+0x58>
	if (!data->req) {
   2c8ba:	7a23      	ldrb	r3, [r4, #8]
   2c8bc:	b1b3      	cbz	r3, 2c8ec <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2c8be:	f1a3 0218 	sub.w	r2, r3, #24
   2c8c2:	4253      	negs	r3, r2
   2c8c4:	4153      	adcs	r3, r2
   2c8c6:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2c8c8:	9301      	str	r3, [sp, #4]
   2c8ca:	8a63      	ldrh	r3, [r4, #18]
   2c8cc:	4629      	mov	r1, r5
   2c8ce:	9300      	str	r3, [sp, #0]
   2c8d0:	68ae      	ldr	r6, [r5, #8]
   2c8d2:	8a23      	ldrh	r3, [r4, #16]
   2c8d4:	68e2      	ldr	r2, [r4, #12]
   2c8d6:	6820      	ldr	r0, [r4, #0]
   2c8d8:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2c8da:	2800      	cmp	r0, #0
   2c8dc:	db08      	blt.n	2c8f0 <write_cb+0x4c>
   2c8de:	8a23      	ldrh	r3, [r4, #16]
   2c8e0:	4298      	cmp	r0, r3
   2c8e2:	d10e      	bne.n	2c902 <write_cb+0x5e>
	data->err = 0U;
   2c8e4:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   2c8e6:	2001      	movs	r0, #1
	data->err = 0U;
   2c8e8:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2c8ea:	e008      	b.n	2c8fe <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2c8ec:	2302      	movs	r3, #2
   2c8ee:	e7eb      	b.n	2c8c8 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2c8f0:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2c8f4:	d305      	bcc.n	2c902 <write_cb+0x5e>
		return -err;
   2c8f6:	4240      	negs	r0, r0
   2c8f8:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2c8fa:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2c8fc:	2000      	movs	r0, #0
}
   2c8fe:	b002      	add	sp, #8
   2c900:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2c902:	200e      	movs	r0, #14
   2c904:	e7f9      	b.n	2c8fa <write_cb+0x56>

0002c906 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2c906:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2c908:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c90c:	2300      	movs	r3, #0
   2c90e:	461a      	mov	r2, r3
   2c910:	9300      	str	r3, [sp, #0]
   2c912:	f7eb f861 	bl	179d8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2c916:	b005      	add	sp, #20
   2c918:	f85d fb04 	ldr.w	pc, [sp], #4

0002c91c <att_chan_mtu_updated>:
{
   2c91c:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2c91e:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2c920:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c922:	b352      	cbz	r2, 2c97a <att_chan_mtu_updated+0x5e>
	return node->next;
   2c924:	6813      	ldr	r3, [r2, #0]
   2c926:	b103      	cbz	r3, 2c92a <att_chan_mtu_updated+0xe>
   2c928:	3bf0      	subs	r3, #240	; 0xf0
   2c92a:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   2c92e:	2200      	movs	r2, #0
   2c930:	4611      	mov	r1, r2
   2c932:	e000      	b.n	2c936 <att_chan_mtu_updated+0x1a>
   2c934:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   2c936:	4284      	cmp	r4, r0
   2c938:	d007      	beq.n	2c94a <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c93a:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c93c:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c93e:	42b1      	cmp	r1, r6
   2c940:	bf38      	it	cc
   2c942:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c944:	42a2      	cmp	r2, r4
   2c946:	bf38      	it	cc
   2c948:	4622      	movcc	r2, r4
   2c94a:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c94c:	b12b      	cbz	r3, 2c95a <att_chan_mtu_updated+0x3e>
   2c94e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2c952:	2b00      	cmp	r3, #0
   2c954:	d1ee      	bne.n	2c934 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2c956:	4284      	cmp	r4, r0
   2c958:	d1ef      	bne.n	2c93a <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c95a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2c95c:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c95e:	428b      	cmp	r3, r1
   2c960:	d801      	bhi.n	2c966 <att_chan_mtu_updated+0x4a>
   2c962:	4290      	cmp	r0, r2
   2c964:	d90b      	bls.n	2c97e <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c966:	4282      	cmp	r2, r0
   2c968:	bf38      	it	cc
   2c96a:	4602      	movcc	r2, r0
   2c96c:	4299      	cmp	r1, r3
   2c96e:	6828      	ldr	r0, [r5, #0]
   2c970:	bf38      	it	cc
   2c972:	4619      	movcc	r1, r3
}
   2c974:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c976:	f7eb bed7 	b.w	18728 <bt_gatt_att_max_mtu_changed>
   2c97a:	4611      	mov	r1, r2
   2c97c:	e7ed      	b.n	2c95a <att_chan_mtu_updated+0x3e>
}
   2c97e:	bc70      	pop	{r4, r5, r6}
   2c980:	4770      	bx	lr

0002c982 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2c982:	68d0      	ldr	r0, [r2, #12]
   2c984:	3104      	adds	r1, #4
   2c986:	7803      	ldrb	r3, [r0, #0]
   2c988:	b913      	cbnz	r3, 2c990 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2c98a:	7001      	strb	r1, [r0, #0]
	return true;
   2c98c:	2001      	movs	r0, #1
   2c98e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2c990:	428b      	cmp	r3, r1
   2c992:	d0fb      	beq.n	2c98c <attr_read_group_cb+0xa>
		data->group = NULL;
   2c994:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2c996:	6891      	ldr	r1, [r2, #8]
   2c998:	8a0b      	ldrh	r3, [r1, #16]
   2c99a:	3b04      	subs	r3, #4
   2c99c:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2c99e:	6110      	str	r0, [r2, #16]
}
   2c9a0:	4770      	bx	lr

0002c9a2 <find_info_cb>:
{
   2c9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2c9a4:	6893      	ldr	r3, [r2, #8]
{
   2c9a6:	4605      	mov	r5, r0
   2c9a8:	460f      	mov	r7, r1
   2c9aa:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2c9ac:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   2c9ae:	b963      	cbnz	r3, 2c9ca <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2c9b0:	6850      	ldr	r0, [r2, #4]
   2c9b2:	2101      	movs	r1, #1
   2c9b4:	300c      	adds	r0, #12
   2c9b6:	f7ee ff09 	bl	1b7cc <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2c9ba:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2c9bc:	682b      	ldr	r3, [r5, #0]
   2c9be:	781b      	ldrb	r3, [r3, #0]
   2c9c0:	2b00      	cmp	r3, #0
   2c9c2:	bf14      	ite	ne
   2c9c4:	2302      	movne	r3, #2
   2c9c6:	2301      	moveq	r3, #1
   2c9c8:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2c9ca:	68a3      	ldr	r3, [r4, #8]
   2c9cc:	781b      	ldrb	r3, [r3, #0]
   2c9ce:	2b01      	cmp	r3, #1
   2c9d0:	d003      	beq.n	2c9da <find_info_cb+0x38>
   2c9d2:	2b02      	cmp	r3, #2
   2c9d4:	d019      	beq.n	2ca0a <find_info_cb+0x68>
   2c9d6:	2000      	movs	r0, #0
   2c9d8:	e016      	b.n	2ca08 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2c9da:	682b      	ldr	r3, [r5, #0]
   2c9dc:	781b      	ldrb	r3, [r3, #0]
   2c9de:	2b00      	cmp	r3, #0
   2c9e0:	d1f9      	bne.n	2c9d6 <find_info_cb+0x34>
   2c9e2:	6860      	ldr	r0, [r4, #4]
   2c9e4:	2104      	movs	r1, #4
   2c9e6:	300c      	adds	r0, #12
   2c9e8:	f7ee fef0 	bl	1b7cc <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2c9ec:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2c9ee:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2c9f0:	682a      	ldr	r2, [r5, #0]
   2c9f2:	68e3      	ldr	r3, [r4, #12]
   2c9f4:	8852      	ldrh	r2, [r2, #2]
   2c9f6:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2c9f8:	6863      	ldr	r3, [r4, #4]
   2c9fa:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2c9fc:	8a1b      	ldrh	r3, [r3, #16]
   2c9fe:	1ac0      	subs	r0, r0, r3
   2ca00:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2ca02:	bf94      	ite	ls
   2ca04:	2000      	movls	r0, #0
   2ca06:	2001      	movhi	r0, #1
}
   2ca08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2ca0a:	682b      	ldr	r3, [r5, #0]
   2ca0c:	781b      	ldrb	r3, [r3, #0]
   2ca0e:	2b02      	cmp	r3, #2
   2ca10:	d1e1      	bne.n	2c9d6 <find_info_cb+0x34>
   2ca12:	6860      	ldr	r0, [r4, #4]
   2ca14:	2112      	movs	r1, #18
   2ca16:	300c      	adds	r0, #12
   2ca18:	f7ee fed8 	bl	1b7cc <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2ca1c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2ca1e:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ca20:	682b      	ldr	r3, [r5, #0]
   2ca22:	68e2      	ldr	r2, [r4, #12]
   2ca24:	1c59      	adds	r1, r3, #1
   2ca26:	3202      	adds	r2, #2
   2ca28:	3311      	adds	r3, #17
   2ca2a:	f851 0b04 	ldr.w	r0, [r1], #4
   2ca2e:	4299      	cmp	r1, r3
   2ca30:	f842 0b04 	str.w	r0, [r2], #4
   2ca34:	d1f9      	bne.n	2ca2a <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2ca36:	6863      	ldr	r3, [r4, #4]
   2ca38:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2ca3a:	8a1b      	ldrh	r3, [r3, #16]
   2ca3c:	1ac0      	subs	r0, r0, r3
   2ca3e:	2812      	cmp	r0, #18
   2ca40:	e7df      	b.n	2ca02 <find_info_cb+0x60>

0002ca42 <z_log_msg_static_create.constprop.0>:
   2ca42:	2300      	movs	r3, #0
   2ca44:	f7e1 bf24 	b.w	e890 <z_impl_z_log_msg_static_create>

0002ca48 <chan_req_send>:
{
   2ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ca4a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ca4c:	6888      	ldr	r0, [r1, #8]
   2ca4e:	f7ff ff09 	bl	2c864 <net_buf_frags_len>
   2ca52:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   2ca54:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ca56:	4283      	cmp	r3, r0
   2ca58:	d30d      	bcc.n	2ca76 <chan_req_send+0x2e>
	req->buf = NULL;
   2ca5a:	2600      	movs	r6, #0
	chan->req = req;
   2ca5c:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   2ca60:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   2ca62:	4628      	mov	r0, r5
	req->buf = NULL;
   2ca64:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2ca66:	4639      	mov	r1, r7
   2ca68:	f7e9 f9a2 	bl	15db0 <chan_send>
	if (err) {
   2ca6c:	b110      	cbz	r0, 2ca74 <chan_req_send+0x2c>
		req->buf = buf;
   2ca6e:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2ca70:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   2ca74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2ca76:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2ca7a:	e7fb      	b.n	2ca74 <chan_req_send+0x2c>

0002ca7c <process_queue>:
{
   2ca7c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2ca7e:	2200      	movs	r2, #0
{
   2ca80:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2ca82:	2300      	movs	r3, #0
   2ca84:	4608      	mov	r0, r1
{
   2ca86:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2ca88:	f001 faa8 	bl	2dfdc <net_buf_get>
	if (buf) {
   2ca8c:	4605      	mov	r5, r0
   2ca8e:	b158      	cbz	r0, 2caa8 <process_queue+0x2c>
	return chan_send(chan, buf);
   2ca90:	4601      	mov	r1, r0
   2ca92:	4620      	mov	r0, r4
   2ca94:	f7e9 f98c 	bl	15db0 <chan_send>
		if (err) {
   2ca98:	4604      	mov	r4, r0
   2ca9a:	b118      	cbz	r0, 2caa4 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2ca9c:	4629      	mov	r1, r5
   2ca9e:	4630      	mov	r0, r6
   2caa0:	f003 fb99 	bl	301d6 <k_queue_prepend>
}
   2caa4:	4620      	mov	r0, r4
   2caa6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2caa8:	f06f 0401 	mvn.w	r4, #1
   2caac:	e7fa      	b.n	2caa4 <process_queue+0x28>

0002caae <bt_att_chan_send_rsp>:
{
   2caae:	b538      	push	{r3, r4, r5, lr}
   2cab0:	4604      	mov	r4, r0
   2cab2:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2cab4:	f7e9 f97c 	bl	15db0 <chan_send>
	if (err) {
   2cab8:	b130      	cbz	r0, 2cac8 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2caba:	4629      	mov	r1, r5
   2cabc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2cac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2cac4:	f7ee bd3a 	b.w	1b53c <net_buf_put>
}
   2cac8:	bd38      	pop	{r3, r4, r5, pc}

0002caca <att_chan_read>:
{
   2caca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cace:	4680      	mov	r8, r0
   2cad0:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2cad2:	4610      	mov	r0, r2
{
   2cad4:	4699      	mov	r9, r3
   2cad6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2cad8:	f7ff fec4 	bl	2c864 <net_buf_frags_len>
   2cadc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   2cae0:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2cae2:	4283      	cmp	r3, r0
   2cae4:	d97a      	bls.n	2cbdc <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2cae6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2caea:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   2caec:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2caee:	f7ee fda7 	bl	1b640 <net_buf_frag_last>
	size_t len, total = 0;
   2caf2:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2caf6:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2caf8:	4630      	mov	r0, r6
   2cafa:	f7ff feb3 	bl	2c864 <net_buf_frags_len>
   2cafe:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2cb02:	f105 070c 	add.w	r7, r5, #12
   2cb06:	1a24      	subs	r4, r4, r0
   2cb08:	4638      	mov	r0, r7
   2cb0a:	f001 fa7c 	bl	2e006 <net_buf_simple_tailroom>
   2cb0e:	4284      	cmp	r4, r0
   2cb10:	d211      	bcs.n	2cb36 <att_chan_read+0x6c>
   2cb12:	4630      	mov	r0, r6
   2cb14:	f7ff fea6 	bl	2c864 <net_buf_frags_len>
   2cb18:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb1c:	1a24      	subs	r4, r4, r0
		if (!len) {
   2cb1e:	bb34      	cbnz	r4, 2cb6e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2cb20:	7ab0      	ldrb	r0, [r6, #10]
   2cb22:	f7ee faf7 	bl	1b114 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2cb26:	2200      	movs	r2, #0
   2cb28:	2300      	movs	r3, #0
   2cb2a:	f001 fa52 	bl	2dfd2 <net_buf_alloc_fixed>
			if (!frag) {
   2cb2e:	4605      	mov	r5, r0
   2cb30:	b930      	cbnz	r0, 2cb40 <att_chan_read+0x76>
	return total;
   2cb32:	4657      	mov	r7, sl
   2cb34:	e02c      	b.n	2cb90 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2cb36:	4638      	mov	r0, r7
   2cb38:	f001 fa65 	bl	2e006 <net_buf_simple_tailroom>
   2cb3c:	4604      	mov	r4, r0
   2cb3e:	e7ee      	b.n	2cb1e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2cb40:	4601      	mov	r1, r0
   2cb42:	4630      	mov	r0, r6
   2cb44:	f7ee fdc2 	bl	1b6cc <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2cb48:	4630      	mov	r0, r6
   2cb4a:	f7ff fe8b 	bl	2c864 <net_buf_frags_len>
   2cb4e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb52:	f105 070c 	add.w	r7, r5, #12
   2cb56:	1a24      	subs	r4, r4, r0
   2cb58:	4638      	mov	r0, r7
   2cb5a:	f001 fa54 	bl	2e006 <net_buf_simple_tailroom>
   2cb5e:	4284      	cmp	r4, r0
   2cb60:	d21a      	bcs.n	2cb98 <att_chan_read+0xce>
   2cb62:	4630      	mov	r0, r6
   2cb64:	f7ff fe7e 	bl	2c864 <net_buf_frags_len>
   2cb68:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb6c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2cb6e:	68e9      	ldr	r1, [r5, #12]
   2cb70:	8a2a      	ldrh	r2, [r5, #16]
   2cb72:	f8cd 9000 	str.w	r9, [sp]
   2cb76:	f8db 7004 	ldr.w	r7, [fp, #4]
   2cb7a:	440a      	add	r2, r1
   2cb7c:	9803      	ldr	r0, [sp, #12]
   2cb7e:	4659      	mov	r1, fp
   2cb80:	b2a3      	uxth	r3, r4
   2cb82:	47b8      	blx	r7
		if (read < 0) {
   2cb84:	1e07      	subs	r7, r0, #0
   2cb86:	da0c      	bge.n	2cba2 <att_chan_read+0xd8>
				return total;
   2cb88:	f1ba 0f00 	cmp.w	sl, #0
   2cb8c:	bf18      	it	ne
   2cb8e:	4657      	movne	r7, sl
}
   2cb90:	4638      	mov	r0, r7
   2cb92:	b005      	add	sp, #20
   2cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb98:	4638      	mov	r0, r7
   2cb9a:	f001 fa34 	bl	2e006 <net_buf_simple_tailroom>
   2cb9e:	4604      	mov	r4, r0
   2cba0:	e7e5      	b.n	2cb6e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2cba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cba4:	b993      	cbnz	r3, 2cbcc <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2cba6:	4639      	mov	r1, r7
   2cba8:	f105 000c 	add.w	r0, r5, #12
   2cbac:	f7ee fe0e 	bl	1b7cc <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cbb0:	4630      	mov	r0, r6
   2cbb2:	f7ff fe57 	bl	2c864 <net_buf_frags_len>
   2cbb6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2cbba:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cbbc:	4283      	cmp	r3, r0
		total += read;
   2cbbe:	44ba      	add	sl, r7
		offset += read;
   2cbc0:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cbc4:	d9b5      	bls.n	2cb32 <att_chan_read+0x68>
   2cbc6:	42a7      	cmp	r7, r4
   2cbc8:	d096      	beq.n	2caf8 <att_chan_read+0x2e>
   2cbca:	e7b2      	b.n	2cb32 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2cbcc:	4639      	mov	r1, r7
   2cbce:	4628      	mov	r0, r5
   2cbd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2cbd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cbd4:	4798      	blx	r3
   2cbd6:	2800      	cmp	r0, #0
   2cbd8:	d1e5      	bne.n	2cba6 <att_chan_read+0xdc>
   2cbda:	e7aa      	b.n	2cb32 <att_chan_read+0x68>
		return 0;
   2cbdc:	2700      	movs	r7, #0
   2cbde:	e7d7      	b.n	2cb90 <att_chan_read+0xc6>

0002cbe0 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cbe0:	2200      	movs	r2, #0
	return list->head;
   2cbe2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cbe4:	b903      	cbnz	r3, 2cbe8 <sys_slist_find_and_remove.isra.0+0x8>
   2cbe6:	4770      	bx	lr
   2cbe8:	428b      	cmp	r3, r1
   2cbea:	d10f      	bne.n	2cc0c <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2cbec:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cbee:	b93a      	cbnz	r2, 2cc00 <sys_slist_find_and_remove.isra.0+0x20>
   2cbf0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2cbf2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cbf4:	4291      	cmp	r1, r2
   2cbf6:	d100      	bne.n	2cbfa <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2cbf8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2cbfa:	2300      	movs	r3, #0
   2cbfc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cbfe:	4770      	bx	lr
	parent->next = child;
   2cc00:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc02:	6843      	ldr	r3, [r0, #4]
   2cc04:	4299      	cmp	r1, r3
	list->tail = node;
   2cc06:	bf08      	it	eq
   2cc08:	6042      	streq	r2, [r0, #4]
}
   2cc0a:	e7f6      	b.n	2cbfa <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2cc0c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cc0e:	681b      	ldr	r3, [r3, #0]
   2cc10:	e7e8      	b.n	2cbe4 <sys_slist_find_and_remove.isra.0+0x4>

0002cc12 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2cc12:	2006      	movs	r0, #6
   2cc14:	4770      	bx	lr

0002cc16 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cc16:	2301      	movs	r3, #1
{
   2cc18:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cc1a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cc1e:	e8d0 3fef 	ldaex	r3, [r0]
   2cc22:	ea43 0201 	orr.w	r2, r3, r1
   2cc26:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2cc2a:	2c00      	cmp	r4, #0
   2cc2c:	d1f7      	bne.n	2cc1e <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   2cc2e:	4219      	tst	r1, r3
}
   2cc30:	bf14      	ite	ne
   2cc32:	2001      	movne	r0, #1
   2cc34:	2000      	moveq	r0, #0
   2cc36:	bd10      	pop	{r4, pc}

0002cc38 <read_cb>:
{
   2cc38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   2cc3a:	2300      	movs	r3, #0
{
   2cc3c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   2cc3e:	6816      	ldr	r6, [r2, #0]
{
   2cc40:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2cc42:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc44:	4629      	mov	r1, r5
	data->err = 0x00;
   2cc46:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc48:	2295      	movs	r2, #149	; 0x95
   2cc4a:	f000 fc02 	bl	2d452 <bt_gatt_check_perm>
   2cc4e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2cc50:	b980      	cbnz	r0, 2cc74 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2cc52:	e9cd 0000 	strd	r0, r0, [sp]
   2cc56:	4629      	mov	r1, r5
   2cc58:	4630      	mov	r0, r6
   2cc5a:	88a3      	ldrh	r3, [r4, #4]
   2cc5c:	68a2      	ldr	r2, [r4, #8]
   2cc5e:	f7ff ff34 	bl	2caca <att_chan_read>
	if (ret < 0) {
   2cc62:	2800      	cmp	r0, #0
   2cc64:	da09      	bge.n	2cc7a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2cc66:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2cc6a:	bf32      	itee	cc
   2cc6c:	200e      	movcc	r0, #14
		return -err;
   2cc6e:	4240      	negcs	r0, r0
   2cc70:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   2cc72:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2cc74:	2000      	movs	r0, #0
}
   2cc76:	b002      	add	sp, #8
   2cc78:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2cc7a:	2001      	movs	r0, #1
   2cc7c:	e7fb      	b.n	2cc76 <read_cb+0x3e>

0002cc7e <read_vl_cb>:
{
   2cc7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   2cc82:	2300      	movs	r3, #0
{
   2cc84:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   2cc86:	f8d2 8000 	ldr.w	r8, [r2]
{
   2cc8a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2cc8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc90:	4631      	mov	r1, r6
	data->err = 0x00;
   2cc92:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc94:	2295      	movs	r2, #149	; 0x95
   2cc96:	f000 fbdc 	bl	2d452 <bt_gatt_check_perm>
   2cc9a:	4605      	mov	r5, r0
   2cc9c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2cc9e:	b9e0      	cbnz	r0, 2ccda <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2cca0:	68a0      	ldr	r0, [r4, #8]
   2cca2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2cca6:	8a02      	ldrh	r2, [r0, #16]
   2cca8:	1a9b      	subs	r3, r3, r2
   2ccaa:	2b01      	cmp	r3, #1
   2ccac:	dd15      	ble.n	2ccda <read_vl_cb+0x5c>
   2ccae:	2102      	movs	r1, #2
   2ccb0:	300c      	adds	r0, #12
   2ccb2:	f7ee fd8b 	bl	1b7cc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2ccb6:	e9cd 5500 	strd	r5, r5, [sp]
   2ccba:	4607      	mov	r7, r0
   2ccbc:	88a3      	ldrh	r3, [r4, #4]
   2ccbe:	4631      	mov	r1, r6
   2ccc0:	4640      	mov	r0, r8
   2ccc2:	68a2      	ldr	r2, [r4, #8]
   2ccc4:	f7ff ff01 	bl	2caca <att_chan_read>
	if (read < 0) {
   2ccc8:	1e03      	subs	r3, r0, #0
   2ccca:	da0a      	bge.n	2cce2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2cccc:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2ccd0:	bf32      	itee	cc
   2ccd2:	230e      	movcc	r3, #14
		return -err;
   2ccd4:	425b      	negcs	r3, r3
   2ccd6:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2ccd8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2ccda:	2000      	movs	r0, #0
}
   2ccdc:	b002      	add	sp, #8
   2ccde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   2cce2:	2001      	movs	r0, #1
	rsp->len = read;
   2cce4:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2cce6:	e7f9      	b.n	2ccdc <read_vl_cb+0x5e>

0002cce8 <bt_att_sent>:
{
   2cce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ccea:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   2ccec:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2ccf0:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ccf2:	f100 0394 	add.w	r3, r0, #148	; 0x94
   2ccf6:	e8d3 1fef 	ldaex	r1, [r3]
   2ccfa:	f021 0110 	bic.w	r1, r1, #16
   2ccfe:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2cd02:	2a00      	cmp	r2, #0
   2cd04:	d1f7      	bne.n	2ccf6 <bt_att_sent+0xe>
	if (!att) {
   2cd06:	b30c      	cbz	r4, 2cd4c <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2cd08:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2cd0c:	b98b      	cbnz	r3, 2cd32 <bt_att_sent+0x4a>
   2cd0e:	6863      	ldr	r3, [r4, #4]
   2cd10:	b17b      	cbz	r3, 2cd32 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2cd12:	1d20      	adds	r0, r4, #4
   2cd14:	f7ff fd9c 	bl	2c850 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2cd18:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2cd1a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2cd1c:	4638      	mov	r0, r7
   2cd1e:	f7ff fe93 	bl	2ca48 <chan_req_send>
   2cd22:	2800      	cmp	r0, #0
   2cd24:	da12      	bge.n	2cd4c <bt_att_sent+0x64>
	return list->head;
   2cd26:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2cd28:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cd2a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2cd2c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cd2e:	b903      	cbnz	r3, 2cd32 <bt_att_sent+0x4a>
	list->tail = node;
   2cd30:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2cd32:	4638      	mov	r0, r7
   2cd34:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   2cd38:	f7ff fea0 	bl	2ca7c <process_queue>
	if (!err) {
   2cd3c:	b130      	cbz	r0, 2cd4c <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   2cd3e:	4638      	mov	r0, r7
   2cd40:	f104 010c 	add.w	r1, r4, #12
}
   2cd44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2cd48:	f7ff be98 	b.w	2ca7c <process_queue>
}
   2cd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cd4e <att_req_send_process>:
{
   2cd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2cd52:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2cd54:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cd56:	2c00      	cmp	r4, #0
   2cd58:	d03b      	beq.n	2cdd2 <att_req_send_process+0x84>
	return node->next;
   2cd5a:	f854 69f0 	ldr.w	r6, [r4], #-240
   2cd5e:	b106      	cbz	r6, 2cd62 <att_req_send_process+0x14>
   2cd60:	3ef0      	subs	r6, #240	; 0xf0
{
   2cd62:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   2cd64:	f108 0704 	add.w	r7, r8, #4
{
   2cd68:	461d      	mov	r5, r3
   2cd6a:	e013      	b.n	2cd94 <att_req_send_process+0x46>
		if (!req && prev &&
   2cd6c:	b1c3      	cbz	r3, 2cda0 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2cd6e:	2103      	movs	r1, #3
   2cd70:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2cd74:	f7ff fd90 	bl	2c898 <atomic_test_bit>
   2cd78:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2cd7a:	f103 0098 	add.w	r0, r3, #152	; 0x98
   2cd7e:	f7ff fd8b 	bl	2c898 <atomic_test_bit>
		if (!req && prev &&
   2cd82:	4282      	cmp	r2, r0
   2cd84:	d10c      	bne.n	2cda0 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cd86:	b326      	cbz	r6, 2cdd2 <att_req_send_process+0x84>
   2cd88:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   2cd8c:	b102      	cbz	r2, 2cd90 <att_req_send_process+0x42>
   2cd8e:	3af0      	subs	r2, #240	; 0xf0
{
   2cd90:	4634      	mov	r4, r6
   2cd92:	4616      	mov	r6, r2
		if (chan->req) {
   2cd94:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2cd98:	2a00      	cmp	r2, #0
   2cd9a:	d1f4      	bne.n	2cd86 <att_req_send_process+0x38>
		if (!req && prev &&
   2cd9c:	2d00      	cmp	r5, #0
   2cd9e:	d0e5      	beq.n	2cd6c <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2cda0:	4638      	mov	r0, r7
   2cda2:	f7ff fd55 	bl	2c850 <sys_slist_get>
	if (node) {
   2cda6:	4605      	mov	r5, r0
   2cda8:	b908      	cbnz	r0, 2cdae <att_req_send_process+0x60>
   2cdaa:	4623      	mov	r3, r4
   2cdac:	e7eb      	b.n	2cd86 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2cdae:	4601      	mov	r1, r0
   2cdb0:	4620      	mov	r0, r4
   2cdb2:	f7e9 f871 	bl	15e98 <bt_att_chan_req_send>
   2cdb6:	2800      	cmp	r0, #0
   2cdb8:	da0b      	bge.n	2cdd2 <att_req_send_process+0x84>
	return list->head;
   2cdba:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2cdbe:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cdc0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2cdc4:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cdc8:	2b00      	cmp	r3, #0
   2cdca:	d1ee      	bne.n	2cdaa <att_req_send_process+0x5c>
	list->tail = node;
   2cdcc:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2cdd0:	e7eb      	b.n	2cdaa <att_req_send_process+0x5c>
}
   2cdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cdd6 <bt_att_status>:
{
   2cdd6:	b538      	push	{r3, r4, r5, lr}
   2cdd8:	4605      	mov	r5, r0
   2cdda:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2cddc:	2100      	movs	r1, #0
   2cdde:	f7ff fd5b 	bl	2c898 <atomic_test_bit>
   2cde2:	b1c0      	cbz	r0, 2ce16 <bt_att_status+0x40>
	if (!chan->att) {
   2cde4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2cde8:	b1a8      	cbz	r0, 2ce16 <bt_att_status+0x40>
	if (chan->req) {
   2cdea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2cdee:	b993      	cbnz	r3, 2ce16 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2cdf0:	3004      	adds	r0, #4
   2cdf2:	f7ff fd2d 	bl	2c850 <sys_slist_get>
	if (!node) {
   2cdf6:	4604      	mov	r4, r0
   2cdf8:	b168      	cbz	r0, 2ce16 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2cdfa:	4601      	mov	r1, r0
   2cdfc:	1f28      	subs	r0, r5, #4
   2cdfe:	f7e9 f84b 	bl	15e98 <bt_att_chan_req_send>
   2ce02:	2800      	cmp	r0, #0
   2ce04:	da07      	bge.n	2ce16 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2ce06:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2ce0a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2ce0c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2ce0e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2ce10:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ce12:	b902      	cbnz	r2, 2ce16 <bt_att_status+0x40>
	list->tail = node;
   2ce14:	609c      	str	r4, [r3, #8]
}
   2ce16:	bd38      	pop	{r3, r4, r5, pc}

0002ce18 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2ce18:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2ce1a:	6883      	ldr	r3, [r0, #8]
   2ce1c:	699b      	ldr	r3, [r3, #24]
   2ce1e:	b10b      	cbz	r3, 2ce24 <att_sent+0xc>
		chan->ops->sent(chan);
   2ce20:	3004      	adds	r0, #4
   2ce22:	4718      	bx	r3
}
   2ce24:	4770      	bx	lr

0002ce26 <att_tx_complete>:
{
   2ce26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ce2a:	4606      	mov	r6, r0
   2ce2c:	460d      	mov	r5, r1
	if (!err) {
   2ce2e:	4614      	mov	r4, r2
   2ce30:	b122      	cbz	r2, 2ce3c <att_tx_complete+0x16>
}
   2ce32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2ce36:	4608      	mov	r0, r1
   2ce38:	f7e8 beda 	b.w	15bf0 <tx_meta_data_free>
		att_sent(conn, user_data);
   2ce3c:	f7ff ffec 	bl	2ce18 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2ce40:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   2ce42:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   2ce44:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2ce48:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2ce4c:	f7e8 fed0 	bl	15bf0 <tx_meta_data_free>
	if (!err && func) {
   2ce50:	b92f      	cbnz	r7, 2ce5e <att_tx_complete+0x38>
}
   2ce52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2ce56:	4649      	mov	r1, r9
   2ce58:	4630      	mov	r0, r6
   2ce5a:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2ce5c:	3401      	adds	r4, #1
   2ce5e:	b2a3      	uxth	r3, r4
   2ce60:	4543      	cmp	r3, r8
   2ce62:	d3f8      	bcc.n	2ce56 <att_tx_complete+0x30>
   2ce64:	e7f5      	b.n	2ce52 <att_tx_complete+0x2c>

0002ce66 <att_req_sent>:
{
   2ce66:	b510      	push	{r4, lr}
   2ce68:	460c      	mov	r4, r1
	if (!err) {
   2ce6a:	b90a      	cbnz	r2, 2ce70 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2ce6c:	f7ff ffd4 	bl	2ce18 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2ce70:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2ce72:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2ce76:	b12b      	cbz	r3, 2ce84 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2ce78:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ce7c:	2300      	movs	r3, #0
   2ce7e:	30c0      	adds	r0, #192	; 0xc0
   2ce80:	f7f9 f942 	bl	26108 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2ce84:	4620      	mov	r0, r4
}
   2ce86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2ce8a:	f7e8 beb1 	b.w	15bf0 <tx_meta_data_free>

0002ce8e <att_cfm_sent>:
{
   2ce8e:	b510      	push	{r4, lr}
   2ce90:	460c      	mov	r4, r1
	if (!err) {
   2ce92:	b90a      	cbnz	r2, 2ce98 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2ce94:	f7ff ffc0 	bl	2ce18 <att_sent>
   2ce98:	6823      	ldr	r3, [r4, #0]
   2ce9a:	3398      	adds	r3, #152	; 0x98
   2ce9c:	e8d3 1fef 	ldaex	r1, [r3]
   2cea0:	f021 0102 	bic.w	r1, r1, #2
   2cea4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2cea8:	2a00      	cmp	r2, #0
   2ceaa:	d1f7      	bne.n	2ce9c <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2ceac:	4620      	mov	r0, r4
}
   2ceae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2ceb2:	f7e8 be9d 	b.w	15bf0 <tx_meta_data_free>

0002ceb6 <att_rsp_sent>:
{
   2ceb6:	b510      	push	{r4, lr}
   2ceb8:	460c      	mov	r4, r1
	if (!err) {
   2ceba:	b90a      	cbnz	r2, 2cec0 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2cebc:	f7ff ffac 	bl	2ce18 <att_sent>
   2cec0:	6823      	ldr	r3, [r4, #0]
   2cec2:	3398      	adds	r3, #152	; 0x98
   2cec4:	e8d3 1fef 	ldaex	r1, [r3]
   2cec8:	f021 0101 	bic.w	r1, r1, #1
   2cecc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2ced0:	2a00      	cmp	r2, #0
   2ced2:	d1f7      	bne.n	2cec4 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   2ced4:	4620      	mov	r0, r4
}
   2ced6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2ceda:	f7e8 be89 	b.w	15bf0 <tx_meta_data_free>

0002cede <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2cede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cee2:	4688      	mov	r8, r1
   2cee4:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2cee6:	2101      	movs	r1, #1
   2cee8:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2ceea:	4605      	mov	r5, r0
   2ceec:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2ceee:	f7e9 f9a9 	bl	16244 <bt_att_chan_create_pdu>
	if (!buf) {
   2cef2:	4604      	mov	r4, r0
   2cef4:	b170      	cbz	r0, 2cf14 <send_err_rsp.part.0+0x36>
   2cef6:	2104      	movs	r1, #4
   2cef8:	300c      	adds	r0, #12
   2cefa:	f7ee fc67 	bl	1b7cc <net_buf_simple_add>
	rsp->request = req;
   2cefe:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2cf02:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2cf06:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2cf08:	4621      	mov	r1, r4
   2cf0a:	4628      	mov	r0, r5
}
   2cf0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2cf10:	f7ff bdcd 	b.w	2caae <bt_att_chan_send_rsp>
}
   2cf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cf18 <att_write_req>:
{
   2cf18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cf1a:	460c      	mov	r4, r1
   2cf1c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2cf1e:	f101 000c 	add.w	r0, r1, #12
   2cf22:	f001 f864 	bl	2dfee <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2cf26:	8a22      	ldrh	r2, [r4, #16]
   2cf28:	4603      	mov	r3, r0
   2cf2a:	9201      	str	r2, [sp, #4]
   2cf2c:	68e2      	ldr	r2, [r4, #12]
   2cf2e:	2112      	movs	r1, #18
   2cf30:	9200      	str	r2, [sp, #0]
   2cf32:	4628      	mov	r0, r5
   2cf34:	2213      	movs	r2, #19
   2cf36:	f7e9 fa9f 	bl	16478 <att_write_rsp.constprop.0>
}
   2cf3a:	b003      	add	sp, #12
   2cf3c:	bd30      	pop	{r4, r5, pc}

0002cf3e <att_write_cmd>:
{
   2cf3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cf40:	460c      	mov	r4, r1
   2cf42:	4605      	mov	r5, r0
   2cf44:	f101 000c 	add.w	r0, r1, #12
   2cf48:	f001 f851 	bl	2dfee <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2cf4c:	8a22      	ldrh	r2, [r4, #16]
   2cf4e:	4603      	mov	r3, r0
   2cf50:	9201      	str	r2, [sp, #4]
   2cf52:	68e2      	ldr	r2, [r4, #12]
   2cf54:	4628      	mov	r0, r5
   2cf56:	9200      	str	r2, [sp, #0]
   2cf58:	2200      	movs	r2, #0
   2cf5a:	4611      	mov	r1, r2
   2cf5c:	f7e9 fa8c 	bl	16478 <att_write_rsp.constprop.0>
}
   2cf60:	b003      	add	sp, #12
   2cf62:	bd30      	pop	{r4, r5, pc}

0002cf64 <att_read_blob_req>:
{
   2cf64:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2cf66:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2cf68:	210c      	movs	r1, #12
   2cf6a:	8813      	ldrh	r3, [r2, #0]
   2cf6c:	8852      	ldrh	r2, [r2, #2]
   2cf6e:	9200      	str	r2, [sp, #0]
   2cf70:	220d      	movs	r2, #13
   2cf72:	f7e9 fc45 	bl	16800 <att_read_rsp>
}
   2cf76:	b003      	add	sp, #12
   2cf78:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf7c <att_read_req>:
{
   2cf7c:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cf7e:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2cf80:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cf82:	210a      	movs	r1, #10
   2cf84:	881b      	ldrh	r3, [r3, #0]
   2cf86:	9200      	str	r2, [sp, #0]
   2cf88:	220b      	movs	r2, #11
   2cf8a:	f7e9 fc39 	bl	16800 <att_read_rsp>
}
   2cf8e:	b003      	add	sp, #12
   2cf90:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf94 <att_mtu_req>:
{
   2cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cf96:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2cf98:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2cf9c:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cf9e:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2cfa0:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cfa2:	f7ff fc79 	bl	2c898 <atomic_test_bit>
   2cfa6:	4604      	mov	r4, r0
   2cfa8:	b9f0      	cbnz	r0, 2cfe8 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2cfaa:	68db      	ldr	r3, [r3, #12]
   2cfac:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2cfae:	2e16      	cmp	r6, #22
   2cfb0:	d91c      	bls.n	2cfec <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2cfb2:	4638      	mov	r0, r7
   2cfb4:	2202      	movs	r2, #2
   2cfb6:	f7e9 fac3 	bl	16540 <bt_att_create_pdu>
	if (!pdu) {
   2cfba:	4607      	mov	r7, r0
   2cfbc:	b1c0      	cbz	r0, 2cff0 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2cfbe:	2102      	movs	r1, #2
   2cfc0:	300c      	adds	r0, #12
   2cfc2:	f7ee fc03 	bl	1b7cc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2cfc6:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   2cfc8:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2cfca:	7003      	strb	r3, [r0, #0]
   2cfcc:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2cfce:	4628      	mov	r0, r5
   2cfd0:	f7ff fd6d 	bl	2caae <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2cfd4:	2e41      	cmp	r6, #65	; 0x41
   2cfd6:	bf28      	it	cs
   2cfd8:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2cfda:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2cfdc:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2cfde:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2cfe0:	f7ff fc9c 	bl	2c91c <att_chan_mtu_updated>
	return 0;
   2cfe4:	4620      	mov	r0, r4
}
   2cfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2cfe8:	2006      	movs	r0, #6
   2cfea:	e7fc      	b.n	2cfe6 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2cfec:	2004      	movs	r0, #4
   2cfee:	e7fa      	b.n	2cfe6 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2cff0:	200e      	movs	r0, #14
   2cff2:	e7f8      	b.n	2cfe6 <att_mtu_req+0x52>

0002cff4 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2cff4:	8a0a      	ldrh	r2, [r1, #16]
   2cff6:	2300      	movs	r3, #0
   2cff8:	68c9      	ldr	r1, [r1, #12]
   2cffa:	f7e9 bdab 	b.w	16b54 <att_handle_rsp>

0002cffe <bt_att_encrypt_change>:
{
   2cffe:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2d000:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2d002:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2d006:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2d008:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   2d00c:	2b00      	cmp	r3, #0
   2d00e:	d038      	beq.n	2d082 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   2d010:	b141      	cbz	r1, 2d024 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   2d012:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2d016:	2b00      	cmp	r3, #0
   2d018:	d033      	beq.n	2d082 <bt_att_encrypt_change+0x84>
   2d01a:	7c1b      	ldrb	r3, [r3, #16]
   2d01c:	07da      	lsls	r2, r3, #31
   2d01e:	d530      	bpl.n	2d082 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   2d020:	2305      	movs	r3, #5
   2d022:	e021      	b.n	2d068 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   2d024:	4628      	mov	r0, r5
   2d026:	f7eb fb93 	bl	18750 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2d02a:	7a6b      	ldrb	r3, [r5, #9]
   2d02c:	2b01      	cmp	r3, #1
   2d02e:	d028      	beq.n	2d082 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2d030:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2d034:	b32d      	cbz	r5, 2d082 <bt_att_encrypt_change+0x84>
   2d036:	7c2b      	ldrb	r3, [r5, #16]
   2d038:	07db      	lsls	r3, r3, #31
   2d03a:	d522      	bpl.n	2d082 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2d03c:	68eb      	ldr	r3, [r5, #12]
   2d03e:	2b00      	cmp	r3, #0
   2d040:	d0ee      	beq.n	2d020 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2d042:	4630      	mov	r0, r6
   2d044:	696a      	ldr	r2, [r5, #20]
   2d046:	7c69      	ldrb	r1, [r5, #17]
   2d048:	f7e9 f8fc 	bl	16244 <bt_att_chan_create_pdu>
	if (!buf) {
   2d04c:	4604      	mov	r4, r0
   2d04e:	b150      	cbz	r0, 2d066 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   2d050:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2d054:	68eb      	ldr	r3, [r5, #12]
   2d056:	4798      	blx	r3
   2d058:	b168      	cbz	r0, 2d076 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2d05a:	69a0      	ldr	r0, [r4, #24]
   2d05c:	f7e8 fdc8 	bl	15bf0 <tx_meta_data_free>
		net_buf_unref(buf);
   2d060:	4620      	mov	r0, r4
   2d062:	f7ee fa91 	bl	1b588 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2d066:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2d068:	2200      	movs	r2, #0
   2d06a:	4630      	mov	r0, r6
}
   2d06c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2d070:	4611      	mov	r1, r2
   2d072:	f7e9 bd6f 	b.w	16b54 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2d076:	4621      	mov	r1, r4
   2d078:	4630      	mov	r0, r6
   2d07a:	f7e8 fe99 	bl	15db0 <chan_send>
   2d07e:	2800      	cmp	r0, #0
   2d080:	d1eb      	bne.n	2d05a <bt_att_encrypt_change+0x5c>
}
   2d082:	bd70      	pop	{r4, r5, r6, pc}

0002d084 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2d084:	2001      	movs	r0, #1
   2d086:	4770      	bx	lr

0002d088 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2d088:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2d08a:	f7e8 ff47 	bl	15f1c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2d08e:	b178      	cbz	r0, 2d0b0 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   2d090:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d092:	b16b      	cbz	r3, 2d0b0 <bt_att_clear_out_of_sync_sent+0x28>
   2d094:	3bf0      	subs	r3, #240	; 0xf0
   2d096:	f103 0298 	add.w	r2, r3, #152	; 0x98
   2d09a:	e8d2 0fef 	ldaex	r0, [r2]
   2d09e:	f020 0020 	bic.w	r0, r0, #32
   2d0a2:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2d0a6:	2900      	cmp	r1, #0
   2d0a8:	d1f7      	bne.n	2d09a <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2d0aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2d0ae:	e7f0      	b.n	2d092 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2d0b0:	bd08      	pop	{r3, pc}

0002d0b2 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2d0b2:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2d0b4:	2104      	movs	r1, #4
   2d0b6:	f7ff fbc1 	bl	2c83c <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2d0ba:	b128      	cbz	r0, 2d0c8 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2d0bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2d0c0:	2105      	movs	r1, #5
   2d0c2:	3094      	adds	r0, #148	; 0x94
   2d0c4:	f7ff bbe8 	b.w	2c898 <atomic_test_bit>
}
   2d0c8:	bd08      	pop	{r3, pc}

0002d0ca <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2d0ca:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2d0cc:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2d0d0:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   2d0d2:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   2d0d4:	8082      	strh	r2, [r0, #4]
}
   2d0d6:	4770      	bx	lr

0002d0d8 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2d0d8:	6010      	str	r0, [r2, #0]
}
   2d0da:	2000      	movs	r0, #0
   2d0dc:	4770      	bx	lr

0002d0de <gatt_ccc_changed>:
{
   2d0de:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2d0e0:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2d0e2:	895a      	ldrh	r2, [r3, #10]
   2d0e4:	428a      	cmp	r2, r1
   2d0e6:	d003      	beq.n	2d0f0 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2d0e8:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2d0ea:	68db      	ldr	r3, [r3, #12]
   2d0ec:	b103      	cbz	r3, 2d0f0 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2d0ee:	4718      	bx	r3
}
   2d0f0:	4770      	bx	lr

0002d0f2 <gatt_indicate_rsp>:
{
   2d0f2:	b510      	push	{r4, lr}
   2d0f4:	9c02      	ldr	r4, [sp, #8]
   2d0f6:	460a      	mov	r2, r1
	if (params->func) {
   2d0f8:	68a3      	ldr	r3, [r4, #8]
   2d0fa:	b10b      	cbz	r3, 2d100 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2d0fc:	4621      	mov	r1, r4
   2d0fe:	4798      	blx	r3
	params->_ref--;
   2d100:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d102:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2d104:	3b01      	subs	r3, #1
   2d106:	b2db      	uxtb	r3, r3
   2d108:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d10a:	b122      	cbz	r2, 2d116 <gatt_indicate_rsp+0x24>
   2d10c:	b91b      	cbnz	r3, 2d116 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2d10e:	4620      	mov	r0, r4
}
   2d110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2d114:	4710      	bx	r2
}
   2d116:	bd10      	pop	{r4, pc}

0002d118 <match_uuid>:
	data->attr = attr;
   2d118:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2d11a:	8091      	strh	r1, [r2, #4]
}
   2d11c:	2000      	movs	r0, #0
   2d11e:	4770      	bx	lr

0002d120 <ccc_set_cb>:
}
   2d120:	2000      	movs	r0, #0
   2d122:	4770      	bx	lr

0002d124 <gen_hash_m>:
{
   2d124:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d126:	6807      	ldr	r7, [r0, #0]
{
   2d128:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d12a:	783d      	ldrb	r5, [r7, #0]
{
   2d12c:	4614      	mov	r4, r2
   2d12e:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d130:	b9dd      	cbnz	r5, 2d16a <gen_hash_m+0x46>
	switch (u16->val) {
   2d132:	887b      	ldrh	r3, [r7, #2]
   2d134:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2d138:	d004      	beq.n	2d144 <gen_hash_m+0x20>
   2d13a:	d810      	bhi.n	2d15e <gen_hash_m+0x3a>
   2d13c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2d140:	2b03      	cmp	r3, #3
   2d142:	d812      	bhi.n	2d16a <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2d144:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d148:	2202      	movs	r2, #2
   2d14a:	4620      	mov	r0, r4
   2d14c:	f10d 010a 	add.w	r1, sp, #10
   2d150:	f7fe fb2f 	bl	2b7b2 <tc_cmac_update>
   2d154:	b968      	cbnz	r0, 2d172 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2d156:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2d15a:	65a2      	str	r2, [r4, #88]	; 0x58
   2d15c:	e006      	b.n	2d16c <gen_hash_m+0x48>
	switch (u16->val) {
   2d15e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2d162:	33ff      	adds	r3, #255	; 0xff
   2d164:	b29b      	uxth	r3, r3
   2d166:	2b04      	cmp	r3, #4
   2d168:	d91e      	bls.n	2d1a8 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2d16a:	2501      	movs	r5, #1
}
   2d16c:	4628      	mov	r0, r5
   2d16e:	b009      	add	sp, #36	; 0x24
   2d170:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2d172:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d174:	2202      	movs	r2, #2
   2d176:	4620      	mov	r0, r4
   2d178:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2d17c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d180:	f7fe fb17 	bl	2b7b2 <tc_cmac_update>
   2d184:	2800      	cmp	r0, #0
   2d186:	d0e6      	beq.n	2d156 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2d188:	2000      	movs	r0, #0
   2d18a:	9000      	str	r0, [sp, #0]
   2d18c:	aa03      	add	r2, sp, #12
   2d18e:	2313      	movs	r3, #19
   2d190:	4631      	mov	r1, r6
   2d192:	6877      	ldr	r7, [r6, #4]
   2d194:	47b8      	blx	r7
		if (len < 0) {
   2d196:	1e02      	subs	r2, r0, #0
   2d198:	dbdf      	blt.n	2d15a <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2d19a:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d19c:	4620      	mov	r0, r4
   2d19e:	f7fe fb08 	bl	2b7b2 <tc_cmac_update>
   2d1a2:	2800      	cmp	r0, #0
   2d1a4:	d1e1      	bne.n	2d16a <gen_hash_m+0x46>
   2d1a6:	e7d6      	b.n	2d156 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2d1a8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d1ac:	2202      	movs	r2, #2
   2d1ae:	4620      	mov	r0, r4
   2d1b0:	f10d 010a 	add.w	r1, sp, #10
   2d1b4:	f7fe fafd 	bl	2b7b2 <tc_cmac_update>
   2d1b8:	2800      	cmp	r0, #0
   2d1ba:	d0cc      	beq.n	2d156 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2d1bc:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d1be:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   2d1c0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d1c4:	f10d 010a 	add.w	r1, sp, #10
   2d1c8:	e7e8      	b.n	2d19c <gen_hash_m+0x78>

0002d1ca <bt_addr_le_eq>:
   2d1ca:	2207      	movs	r2, #7
{
   2d1cc:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2d1ce:	f003 f9be 	bl	3054e <memcmp>
}
   2d1d2:	fab0 f080 	clz	r0, r0
   2d1d6:	0940      	lsrs	r0, r0, #5
   2d1d8:	bd08      	pop	{r3, pc}

0002d1da <ccc_find_cfg>:
{
   2d1da:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2d1dc:	7803      	ldrb	r3, [r0, #0]
{
   2d1de:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2d1e0:	4293      	cmp	r3, r2
   2d1e2:	d105      	bne.n	2d1f0 <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2d1e4:	3001      	adds	r0, #1
   2d1e6:	f7ff fff0 	bl	2d1ca <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2d1ea:	b108      	cbz	r0, 2d1f0 <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2d1ec:	4620      	mov	r0, r4
}
   2d1ee:	bd10      	pop	{r4, pc}
	return NULL;
   2d1f0:	2000      	movs	r0, #0
   2d1f2:	e7fc      	b.n	2d1ee <ccc_find_cfg+0x14>

0002d1f4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d1f4:	e8d0 0faf 	lda	r0, [r0]
}
   2d1f8:	4770      	bx	lr

0002d1fa <atomic_or>:
{
   2d1fa:	4603      	mov	r3, r0
   2d1fc:	b510      	push	{r4, lr}
}
   2d1fe:	e8d3 0fef 	ldaex	r0, [r3]
   2d202:	ea40 0201 	orr.w	r2, r0, r1
   2d206:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d20a:	2c00      	cmp	r4, #0
   2d20c:	d1f7      	bne.n	2d1fe <atomic_or+0x4>
   2d20e:	bd10      	pop	{r4, pc}

0002d210 <atomic_and>:
{
   2d210:	4603      	mov	r3, r0
   2d212:	b510      	push	{r4, lr}
}
   2d214:	e8d3 0fef 	ldaex	r0, [r3]
   2d218:	ea00 0201 	and.w	r2, r0, r1
   2d21c:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d220:	2c00      	cmp	r4, #0
   2d222:	d1f7      	bne.n	2d214 <atomic_and+0x4>
   2d224:	bd10      	pop	{r4, pc}

0002d226 <bt_addr_le_copy>:
   2d226:	680b      	ldr	r3, [r1, #0]
   2d228:	6003      	str	r3, [r0, #0]
   2d22a:	888b      	ldrh	r3, [r1, #4]
   2d22c:	8083      	strh	r3, [r0, #4]
   2d22e:	798b      	ldrb	r3, [r1, #6]
   2d230:	7183      	strb	r3, [r0, #6]
}
   2d232:	4770      	bx	lr

0002d234 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2d234:	2300      	movs	r3, #0
   2d236:	6003      	str	r3, [r0, #0]
   2d238:	6043      	str	r3, [r0, #4]
   2d23a:	6083      	str	r3, [r0, #8]
}
   2d23c:	4770      	bx	lr

0002d23e <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2d23e:	b538      	push	{r3, r4, r5, lr}
   2d240:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2d244:	4615      	mov	r5, r2
	if (offset > value_len) {
   2d246:	4294      	cmp	r4, r2
   2d248:	d30a      	bcc.n	2d260 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   2d24a:	1aa4      	subs	r4, r4, r2
   2d24c:	428c      	cmp	r4, r1
   2d24e:	bfa8      	it	ge
   2d250:	460c      	movge	r4, r1
   2d252:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d254:	4622      	mov	r2, r4
   2d256:	1959      	adds	r1, r3, r5
   2d258:	f003 f989 	bl	3056e <memcpy>
}
   2d25c:	4620      	mov	r0, r4
   2d25e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d260:	f06f 0406 	mvn.w	r4, #6
   2d264:	e7fa      	b.n	2d25c <bt_gatt_attr_read.constprop.0+0x1e>

0002d266 <bt_gatt_attr_read_ccc>:
{
   2d266:	b530      	push	{r4, r5, lr}
   2d268:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   2d26a:	68c9      	ldr	r1, [r1, #12]
{
   2d26c:	4614      	mov	r4, r2
   2d26e:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2d270:	f7e9 fe18 	bl	16ea4 <find_ccc_cfg>
	if (cfg) {
   2d274:	b100      	cbz	r0, 2d278 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2d276:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2d278:	2302      	movs	r3, #2
   2d27a:	f8ad 000e 	strh.w	r0, [sp, #14]
   2d27e:	9300      	str	r3, [sp, #0]
   2d280:	4629      	mov	r1, r5
   2d282:	4620      	mov	r0, r4
   2d284:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d288:	f10d 030e 	add.w	r3, sp, #14
   2d28c:	f7ff ffd7 	bl	2d23e <bt_gatt_attr_read.constprop.0>
}
   2d290:	b005      	add	sp, #20
   2d292:	bd30      	pop	{r4, r5, pc}

0002d294 <bt_gatt_attr_read_service>:
{
   2d294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2d296:	460c      	mov	r4, r1
   2d298:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2d29a:	68e3      	ldr	r3, [r4, #12]
{
   2d29c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2d29e:	781c      	ldrb	r4, [r3, #0]
{
   2d2a0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2d2a4:	b13c      	cbz	r4, 2d2b6 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d2a6:	2410      	movs	r4, #16
   2d2a8:	3301      	adds	r3, #1
   2d2aa:	9406      	str	r4, [sp, #24]
}
   2d2ac:	b004      	add	sp, #16
   2d2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d2b2:	f7ff bfc4 	b.w	2d23e <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2d2b6:	885b      	ldrh	r3, [r3, #2]
   2d2b8:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d2bc:	2302      	movs	r3, #2
   2d2be:	9300      	str	r3, [sp, #0]
   2d2c0:	f10d 030e 	add.w	r3, sp, #14
   2d2c4:	f7ff ffbb 	bl	2d23e <bt_gatt_attr_read.constprop.0>
}
   2d2c8:	b004      	add	sp, #16
   2d2ca:	bd10      	pop	{r4, pc}

0002d2cc <cf_read>:
{
   2d2cc:	b530      	push	{r4, r5, lr}
   2d2ce:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2d2d0:	2300      	movs	r3, #0
{
   2d2d2:	b085      	sub	sp, #20
   2d2d4:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2d2d6:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2d2da:	f7e9 fd93 	bl	16e04 <find_cf_cfg>
	if (cfg) {
   2d2de:	b110      	cbz	r0, 2d2e6 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2d2e0:	7a03      	ldrb	r3, [r0, #8]
   2d2e2:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2d2e6:	2301      	movs	r3, #1
   2d2e8:	4629      	mov	r1, r5
   2d2ea:	9300      	str	r3, [sp, #0]
   2d2ec:	4620      	mov	r0, r4
   2d2ee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d2f2:	ab03      	add	r3, sp, #12
   2d2f4:	f7ff ffa3 	bl	2d23e <bt_gatt_attr_read.constprop.0>
}
   2d2f8:	b005      	add	sp, #20
   2d2fa:	bd30      	pop	{r4, r5, pc}

0002d2fc <read_name>:
{
   2d2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d300:	4614      	mov	r4, r2
   2d302:	461d      	mov	r5, r3
   2d304:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2d308:	f7e6 f98a 	bl	13620 <bt_get_name>
   2d30c:	4606      	mov	r6, r0
				 strlen(name));
   2d30e:	f7dc f83a 	bl	9386 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d312:	b280      	uxth	r0, r0
   2d314:	9006      	str	r0, [sp, #24]
   2d316:	4633      	mov	r3, r6
   2d318:	463a      	mov	r2, r7
   2d31a:	4629      	mov	r1, r5
   2d31c:	4620      	mov	r0, r4
}
   2d31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d322:	f7ff bf8c 	b.w	2d23e <bt_gatt_attr_read.constprop.0>

0002d326 <read_appearance>:
{
   2d326:	b530      	push	{r4, r5, lr}
   2d328:	b085      	sub	sp, #20
   2d32a:	4614      	mov	r4, r2
   2d32c:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d32e:	f7fe ff09 	bl	2c144 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d332:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d334:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d338:	9300      	str	r3, [sp, #0]
   2d33a:	4629      	mov	r1, r5
   2d33c:	4620      	mov	r0, r4
   2d33e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d342:	f10d 030e 	add.w	r3, sp, #14
   2d346:	f7ff ff7a 	bl	2d23e <bt_gatt_attr_read.constprop.0>
}
   2d34a:	b005      	add	sp, #20
   2d34c:	bd30      	pop	{r4, r5, pc}

0002d34e <z_log_msg_static_create.constprop.0>:
   2d34e:	2300      	movs	r3, #0
   2d350:	f7e1 ba9e 	b.w	e890 <z_impl_z_log_msg_static_create>

0002d354 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2d354:	2a02      	cmp	r2, #2
{
   2d356:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2d358:	d108      	bne.n	2d36c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2d35a:	2300      	movs	r3, #0
   2d35c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2d360:	461a      	mov	r2, r3
   2d362:	7a00      	ldrb	r0, [r0, #8]
   2d364:	f7e9 ffa4 	bl	172b0 <sc_save>
}
   2d368:	2002      	movs	r0, #2
   2d36a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2d36c:	f7e9 ff40 	bl	171f0 <sc_clear>
   2d370:	e7fa      	b.n	2d368 <sc_ccc_cfg_write+0x14>

0002d372 <sc_restore_rsp>:
{
   2d372:	b538      	push	{r3, r4, r5, lr}
   2d374:	4604      	mov	r4, r0
   2d376:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2d378:	f7ff fe84 	bl	2d084 <bt_att_fixed_chan_only>
   2d37c:	b150      	cbz	r0, 2d394 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2d37e:	4620      	mov	r0, r4
   2d380:	f7e9 fd40 	bl	16e04 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2d384:	b130      	cbz	r0, 2d394 <sc_restore_rsp+0x22>
   2d386:	7a03      	ldrb	r3, [r0, #8]
   2d388:	07db      	lsls	r3, r3, #31
   2d38a:	d503      	bpl.n	2d394 <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d38c:	2101      	movs	r1, #1
   2d38e:	300c      	adds	r0, #12
   2d390:	f7ff ff33 	bl	2d1fa <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2d394:	b955      	cbnz	r5, 2d3ac <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2d396:	7a20      	ldrb	r0, [r4, #8]
   2d398:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2d39c:	f7e9 fd60 	bl	16e60 <find_sc_cfg>
		if (sc_cfg) {
   2d3a0:	b120      	cbz	r0, 2d3ac <sc_restore_rsp+0x3a>
__ssp_bos_icheck3(memset, void *, int)
   2d3a2:	6085      	str	r5, [r0, #8]
}
   2d3a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2d3a8:	f7e9 bf4e 	b.w	17248 <sc_store>
}
   2d3ac:	bd38      	pop	{r3, r4, r5, pc}

0002d3ae <bt_gatt_attr_value_handle>:
{
   2d3ae:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d3b0:	4604      	mov	r4, r0
   2d3b2:	b910      	cbnz	r0, 2d3ba <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2d3b4:	2000      	movs	r0, #0
}
   2d3b6:	b002      	add	sp, #8
   2d3b8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d3ba:	2300      	movs	r3, #0
   2d3bc:	f88d 3004 	strb.w	r3, [sp, #4]
   2d3c0:	f642 0303 	movw	r3, #10243	; 0x2803
   2d3c4:	6800      	ldr	r0, [r0, #0]
   2d3c6:	a901      	add	r1, sp, #4
   2d3c8:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d3cc:	f7fe fd61 	bl	2be92 <bt_uuid_cmp>
   2d3d0:	2800      	cmp	r0, #0
   2d3d2:	d1ef      	bne.n	2d3b4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2d3d4:	68e3      	ldr	r3, [r4, #12]
   2d3d6:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2d3d8:	2800      	cmp	r0, #0
   2d3da:	d1ec      	bne.n	2d3b6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2d3dc:	4620      	mov	r0, r4
   2d3de:	f7ea fab3 	bl	17948 <bt_gatt_attr_get_handle>
   2d3e2:	3001      	adds	r0, #1
   2d3e4:	b280      	uxth	r0, r0
	return handle;
   2d3e6:	e7e6      	b.n	2d3b6 <bt_gatt_attr_value_handle+0x8>

0002d3e8 <bt_gatt_attr_read_chrc>:
{
   2d3e8:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2d3ea:	68cc      	ldr	r4, [r1, #12]
{
   2d3ec:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2d3ee:	79a3      	ldrb	r3, [r4, #6]
{
   2d3f0:	b088      	sub	sp, #32
   2d3f2:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2d3f4:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2d3f8:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2d3fa:	f7ff ffd8 	bl	2d3ae <bt_gatt_attr_value_handle>
   2d3fe:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2d402:	6824      	ldr	r4, [r4, #0]
   2d404:	7823      	ldrb	r3, [r4, #0]
   2d406:	b96b      	cbnz	r3, 2d424 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2d408:	8863      	ldrh	r3, [r4, #2]
   2d40a:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2d40e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2d410:	9300      	str	r3, [sp, #0]
   2d412:	4631      	mov	r1, r6
   2d414:	4628      	mov	r0, r5
   2d416:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2d41a:	ab03      	add	r3, sp, #12
   2d41c:	f7ff ff0f 	bl	2d23e <bt_gatt_attr_read.constprop.0>
}
   2d420:	b008      	add	sp, #32
   2d422:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2d424:	1c63      	adds	r3, r4, #1
   2d426:	f10d 020f 	add.w	r2, sp, #15
   2d42a:	3411      	adds	r4, #17
   2d42c:	f853 1b04 	ldr.w	r1, [r3], #4
   2d430:	42a3      	cmp	r3, r4
   2d432:	f842 1b04 	str.w	r1, [r2], #4
   2d436:	d1f9      	bne.n	2d42c <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2d438:	2313      	movs	r3, #19
   2d43a:	e7e9      	b.n	2d410 <bt_gatt_attr_read_chrc+0x28>

0002d43c <bt_gatt_foreach_attr>:
{
   2d43c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2d43e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2d442:	2300      	movs	r3, #0
   2d444:	461a      	mov	r2, r3
   2d446:	9300      	str	r3, [sp, #0]
   2d448:	f7ea fac6 	bl	179d8 <bt_gatt_foreach_attr_type>
}
   2d44c:	b005      	add	sp, #20
   2d44e:	f85d fb04 	ldr.w	pc, [sp], #4

0002d452 <bt_gatt_check_perm>:
{
   2d452:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2d454:	07d4      	lsls	r4, r2, #31
{
   2d456:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d458:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2d45a:	d504      	bpl.n	2d466 <bt_gatt_check_perm+0x14>
   2d45c:	f013 0f95 	tst.w	r3, #149	; 0x95
   2d460:	d027      	beq.n	2d4b2 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d462:	6848      	ldr	r0, [r1, #4]
   2d464:	b328      	cbz	r0, 2d4b2 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2d466:	0790      	lsls	r0, r2, #30
   2d468:	d504      	bpl.n	2d474 <bt_gatt_check_perm+0x22>
   2d46a:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2d46e:	d022      	beq.n	2d4b6 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2d470:	6889      	ldr	r1, [r1, #8]
   2d472:	b301      	cbz	r1, 2d4b6 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   2d474:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2d478:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2d47c:	d007      	beq.n	2d48e <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2d47e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2d482:	b90b      	cbnz	r3, 2d488 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2d484:	2005      	movs	r0, #5
}
   2d486:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2d488:	7b5b      	ldrb	r3, [r3, #13]
   2d48a:	06db      	lsls	r3, r3, #27
   2d48c:	d5fa      	bpl.n	2d484 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2d48e:	f014 0f30 	tst.w	r4, #48	; 0x30
   2d492:	d108      	bne.n	2d4a6 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2d494:	f014 000c 	ands.w	r0, r4, #12
   2d498:	d0f5      	beq.n	2d486 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2d49a:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2d49c:	2b00      	cmp	r3, #0
   2d49e:	bf14      	ite	ne
   2d4a0:	2000      	movne	r0, #0
   2d4a2:	200f      	moveq	r0, #15
   2d4a4:	e7ef      	b.n	2d486 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2d4a6:	4628      	mov	r0, r5
   2d4a8:	f7ff f8ed 	bl	2c686 <bt_conn_get_security>
   2d4ac:	2802      	cmp	r0, #2
   2d4ae:	d8f1      	bhi.n	2d494 <bt_gatt_check_perm+0x42>
   2d4b0:	e7e8      	b.n	2d484 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2d4b2:	2002      	movs	r0, #2
   2d4b4:	e7e7      	b.n	2d486 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2d4b6:	2003      	movs	r0, #3
   2d4b8:	e7e5      	b.n	2d486 <bt_gatt_check_perm+0x34>

0002d4ba <bt_gatt_change_aware>:
{
   2d4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4bc:	4605      	mov	r5, r0
   2d4be:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2d4c0:	f7e9 fca0 	bl	16e04 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2d4c4:	b1d0      	cbz	r0, 2d4fc <bt_gatt_change_aware+0x42>
   2d4c6:	7a03      	ldrb	r3, [r0, #8]
   2d4c8:	07db      	lsls	r3, r3, #31
   2d4ca:	d517      	bpl.n	2d4fc <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2d4cc:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d4d0:	4620      	mov	r0, r4
   2d4d2:	f7ff fe8f 	bl	2d1f4 <atomic_get>
   2d4d6:	f010 0601 	ands.w	r6, r0, #1
   2d4da:	d10f      	bne.n	2d4fc <bt_gatt_change_aware+0x42>
	if (!req) {
   2d4dc:	b17f      	cbz	r7, 2d4fe <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d4de:	f06f 0102 	mvn.w	r1, #2
   2d4e2:	4620      	mov	r0, r4
   2d4e4:	f7ff fe94 	bl	2d210 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d4e8:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2d4ec:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d4ee:	d008      	beq.n	2d502 <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   2d4f0:	f7ff fdca 	bl	2d088 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d4f4:	2101      	movs	r1, #1
   2d4f6:	4620      	mov	r0, r4
   2d4f8:	f7ff fe7f 	bl	2d1fa <atomic_or>
		return true;
   2d4fc:	2601      	movs	r6, #1
}
   2d4fe:	4630      	mov	r0, r6
   2d500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2d502:	f7ff fdbf 	bl	2d084 <bt_att_fixed_chan_only>
   2d506:	2800      	cmp	r0, #0
   2d508:	d0f9      	beq.n	2d4fe <bt_gatt_change_aware+0x44>
   2d50a:	4628      	mov	r0, r5
   2d50c:	f7ff fdd1 	bl	2d0b2 <bt_att_out_of_sync_sent_on_fixed>
   2d510:	2800      	cmp	r0, #0
   2d512:	d0f4      	beq.n	2d4fe <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d514:	f06f 0102 	mvn.w	r1, #2
   2d518:	4620      	mov	r0, r4
   2d51a:	f7ff fe79 	bl	2d210 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2d51e:	4628      	mov	r0, r5
   2d520:	e7e6      	b.n	2d4f0 <bt_gatt_change_aware+0x36>

0002d522 <ccc_delayed_store>:
{
   2d522:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2d524:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2d528:	4605      	mov	r5, r0
		if (!conn) {
   2d52a:	b184      	cbz	r4, 2d54e <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2d52c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2d530:	4631      	mov	r1, r6
   2d532:	7a20      	ldrb	r0, [r4, #8]
   2d534:	f7fe fe09 	bl	2c14a <bt_addr_le_is_bonded>
   2d538:	b148      	cbz	r0, 2d54e <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   2d53a:	2300      	movs	r3, #0
   2d53c:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2d540:	4631      	mov	r1, r6
   2d542:	7a20      	ldrb	r0, [r4, #8]
   2d544:	f7eb f914 	bl	18770 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2d548:	4620      	mov	r0, r4
   2d54a:	f7e7 fc7b 	bl	14e44 <bt_conn_unref>
}
   2d54e:	bd70      	pop	{r4, r5, r6, pc}

0002d550 <smp_pairing_rsp>:
}
   2d550:	2007      	movs	r0, #7
   2d552:	4770      	bx	lr

0002d554 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d554:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2d558:	4108      	asrs	r0, r1
}
   2d55a:	f000 0001 	and.w	r0, r0, #1
   2d55e:	4770      	bx	lr

0002d560 <update_keys_check>:
{
   2d560:	4603      	mov	r3, r0
   2d562:	b510      	push	{r4, lr}
	if (!keys ||
   2d564:	b1d9      	cbz	r1, 2d59e <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2d566:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2d568:	f010 0f24 	tst.w	r0, #36	; 0x24
   2d56c:	d017      	beq.n	2d59e <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2d56e:	7d1a      	ldrb	r2, [r3, #20]
   2d570:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2d572:	7b09      	ldrb	r1, [r1, #12]
   2d574:	42a2      	cmp	r2, r4
   2d576:	bf28      	it	cs
   2d578:	4622      	movcs	r2, r4
   2d57a:	4291      	cmp	r1, r2
   2d57c:	d901      	bls.n	2d582 <update_keys_check+0x22>
			return false;
   2d57e:	2000      	movs	r0, #0
}
   2d580:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2d582:	0682      	lsls	r2, r0, #26
   2d584:	d404      	bmi.n	2d590 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2d586:	7a18      	ldrb	r0, [r3, #8]
   2d588:	3800      	subs	r0, #0
   2d58a:	bf18      	it	ne
   2d58c:	2001      	movne	r0, #1
   2d58e:	e7f7      	b.n	2d580 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2d590:	2105      	movs	r1, #5
   2d592:	1d18      	adds	r0, r3, #4
   2d594:	f7ff ffde 	bl	2d554 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2d598:	2800      	cmp	r0, #0
   2d59a:	d1f4      	bne.n	2d586 <update_keys_check+0x26>
   2d59c:	e7ef      	b.n	2d57e <update_keys_check+0x1e>
	return true;
   2d59e:	2001      	movs	r0, #1
   2d5a0:	e7ee      	b.n	2d580 <update_keys_check+0x20>

0002d5a2 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d5a2:	2301      	movs	r3, #1
   2d5a4:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d5a6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d5a8:	e8d0 2fef 	ldaex	r2, [r0]
   2d5ac:	401a      	ands	r2, r3
   2d5ae:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2d5b2:	2900      	cmp	r1, #0
   2d5b4:	d1f8      	bne.n	2d5a8 <atomic_clear_bit+0x6>
}
   2d5b6:	4770      	bx	lr

0002d5b8 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d5b8:	680b      	ldr	r3, [r1, #0]
   2d5ba:	6003      	str	r3, [r0, #0]
   2d5bc:	888b      	ldrh	r3, [r1, #4]
   2d5be:	8083      	strh	r3, [r0, #4]
   2d5c0:	798b      	ldrb	r3, [r1, #6]
   2d5c2:	7183      	strb	r3, [r0, #6]
   2d5c4:	4770      	bx	lr

0002d5c6 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2d5c6:	2007      	movs	r0, #7
   2d5c8:	4770      	bx	lr

0002d5ca <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2d5ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d5cc:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2d5ce:	2200      	movs	r2, #0
   2d5d0:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2d5d2:	4604      	mov	r4, r0
   2d5d4:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2d5d6:	460a      	mov	r2, r1
   2d5d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2d5dc:	2106      	movs	r1, #6
   2d5de:	f7ff f90b 	bl	2c7f8 <bt_l2cap_send_cb>
   2d5e2:	b128      	cbz	r0, 2d5f0 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2d5e4:	4628      	mov	r0, r5
}
   2d5e6:	b003      	add	sp, #12
   2d5e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2d5ec:	f7ed bfcc 	b.w	1b588 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2d5f0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d5f4:	2300      	movs	r3, #0
   2d5f6:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   2d5fa:	b003      	add	sp, #12
   2d5fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2d600:	f7f8 bd82 	b.w	26108 <k_work_reschedule>

0002d604 <z_log_msg_static_create.constprop.0>:
   2d604:	2300      	movs	r3, #0
   2d606:	f7e1 b943 	b.w	e890 <z_impl_z_log_msg_static_create>

0002d60a <smp_chan_get>:
{
   2d60a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2d60c:	2106      	movs	r1, #6
   2d60e:	f7ff f915 	bl	2c83c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2d612:	b918      	cbnz	r0, 2d61c <smp_chan_get+0x12>
}
   2d614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2d618:	f7eb ba2c 	b.w	18a74 <smp_chan_get.part.0>
   2d61c:	38ec      	subs	r0, #236	; 0xec
   2d61e:	bd08      	pop	{r3, pc}

0002d620 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d620:	2301      	movs	r3, #1
   2d622:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d624:	e8d0 2fef 	ldaex	r2, [r0]
   2d628:	431a      	orrs	r2, r3
   2d62a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2d62e:	2900      	cmp	r1, #0
   2d630:	d1f8      	bne.n	2d624 <atomic_set_bit+0x4>
}
   2d632:	4770      	bx	lr

0002d634 <smp_keypress_notif>:
{
   2d634:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2d636:	210e      	movs	r1, #14
   2d638:	f7ff fff2 	bl	2d620 <atomic_set_bit>
}
   2d63c:	2000      	movs	r0, #0
   2d63e:	bd08      	pop	{r3, pc}

0002d640 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2d640:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d642:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2d644:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d646:	4628      	mov	r0, r5
   2d648:	2104      	movs	r1, #4
   2d64a:	f7ff ff83 	bl	2d554 <atomic_test_bit>
   2d64e:	b168      	cbz	r0, 2d66c <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2d650:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d652:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2d654:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d656:	4608      	mov	r0, r1
   2d658:	f7ff f8cb 	bl	2c7f2 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2d65c:	4604      	mov	r4, r0
   2d65e:	b940      	cbnz	r0, 2d672 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2d660:	2104      	movs	r1, #4
   2d662:	4628      	mov	r0, r5
   2d664:	f7ff ffdc 	bl	2d620 <atomic_set_bit>
}
   2d668:	4620      	mov	r0, r4
   2d66a:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2d66c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d670:	e7ef      	b.n	2d652 <smp_create_pdu.constprop.0+0x12>
   2d672:	2101      	movs	r1, #1
   2d674:	300c      	adds	r0, #12
   2d676:	f7ee f8a9 	bl	1b7cc <net_buf_simple_add>
	hdr->code = op;
   2d67a:	7006      	strb	r6, [r0, #0]
	return buf;
   2d67c:	e7f4      	b.n	2d668 <smp_create_pdu.constprop.0+0x28>

0002d67e <send_pairing_rsp>:
{
   2d67e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2d680:	2102      	movs	r1, #2
{
   2d682:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2d684:	f7ff ffdc 	bl	2d640 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2d688:	4605      	mov	r5, r0
   2d68a:	b180      	cbz	r0, 2d6ae <send_pairing_rsp+0x30>
   2d68c:	2106      	movs	r1, #6
   2d68e:	300c      	adds	r0, #12
   2d690:	f7ee f89c 	bl	1b7cc <net_buf_simple_add>
   2d694:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   2d698:	2200      	movs	r2, #0
   2d69a:	6003      	str	r3, [r0, #0]
   2d69c:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2d6a0:	4629      	mov	r1, r5
   2d6a2:	8083      	strh	r3, [r0, #4]
   2d6a4:	4620      	mov	r0, r4
   2d6a6:	f7ff ff90 	bl	2d5ca <smp_send.constprop.0>
	return 0;
   2d6aa:	2000      	movs	r0, #0
}
   2d6ac:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d6ae:	2008      	movs	r0, #8
   2d6b0:	e7fc      	b.n	2d6ac <send_pairing_rsp+0x2e>

0002d6b2 <smp_send_pairing_random>:
{
   2d6b2:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2d6b4:	2104      	movs	r1, #4
{
   2d6b6:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2d6b8:	f7ff ffc2 	bl	2d640 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2d6bc:	4605      	mov	r5, r0
   2d6be:	b1a0      	cbz	r0, 2d6ea <smp_send_pairing_random+0x38>
   2d6c0:	2110      	movs	r1, #16
   2d6c2:	300c      	adds	r0, #12
   2d6c4:	f7ee f882 	bl	1b7cc <net_buf_simple_add>
   2d6c8:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2d6cc:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2d6d0:	f853 1b04 	ldr.w	r1, [r3], #4
   2d6d4:	4293      	cmp	r3, r2
   2d6d6:	f840 1b04 	str.w	r1, [r0], #4
   2d6da:	d1f9      	bne.n	2d6d0 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2d6dc:	4620      	mov	r0, r4
   2d6de:	2200      	movs	r2, #0
   2d6e0:	4629      	mov	r1, r5
   2d6e2:	f7ff ff72 	bl	2d5ca <smp_send.constprop.0>
	return 0;
   2d6e6:	2000      	movs	r0, #0
}
   2d6e8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d6ea:	2008      	movs	r0, #8
   2d6ec:	e7fc      	b.n	2d6e8 <smp_send_pairing_random+0x36>

0002d6ee <smp_dhkey_check>:
{
   2d6ee:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2d6f0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   2d6f4:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2d6f6:	78db      	ldrb	r3, [r3, #3]
   2d6f8:	2b01      	cmp	r3, #1
   2d6fa:	d119      	bne.n	2d730 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2d6fc:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2d6fe:	1d06      	adds	r6, r0, #4
   2d700:	2110      	movs	r1, #16
   2d702:	4630      	mov	r0, r6
   2d704:	f7ff ff4d 	bl	2d5a2 <atomic_clear_bit>
   2d708:	462b      	mov	r3, r5
   2d70a:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2d70e:	f105 0110 	add.w	r1, r5, #16
   2d712:	f853 0b04 	ldr.w	r0, [r3], #4
   2d716:	428b      	cmp	r3, r1
   2d718:	f842 0b04 	str.w	r0, [r2], #4
   2d71c:	d1f9      	bne.n	2d712 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2d71e:	2107      	movs	r1, #7
   2d720:	4630      	mov	r0, r6
   2d722:	f7ff ff17 	bl	2d554 <atomic_test_bit>
   2d726:	b128      	cbz	r0, 2d734 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2d728:	2109      	movs	r1, #9
   2d72a:	4630      	mov	r0, r6
   2d72c:	f7ff ff78 	bl	2d620 <atomic_set_bit>
}
   2d730:	2000      	movs	r0, #0
   2d732:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d734:	210a      	movs	r1, #10
   2d736:	4630      	mov	r0, r6
   2d738:	f7ff ff0c 	bl	2d554 <atomic_test_bit>
   2d73c:	2800      	cmp	r0, #0
   2d73e:	d1f3      	bne.n	2d728 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2d740:	4620      	mov	r0, r4
}
   2d742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2d746:	f7eb bdab 	b.w	192a0 <compute_and_check_and_send_periph_dhcheck>

0002d74a <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2d74a:	2007      	movs	r0, #7
   2d74c:	4770      	bx	lr

0002d74e <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d74e:	2301      	movs	r3, #1
   2d750:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d754:	43ca      	mvns	r2, r1
{
   2d756:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d758:	e8d0 3fef 	ldaex	r3, [r0]
   2d75c:	ea03 0402 	and.w	r4, r3, r2
   2d760:	e8c0 4fe5 	stlex	r5, r4, [r0]
   2d764:	2d00      	cmp	r5, #0
   2d766:	d1f7      	bne.n	2d758 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   2d768:	4219      	tst	r1, r3
}
   2d76a:	bf14      	ite	ne
   2d76c:	2001      	movne	r0, #1
   2d76e:	2000      	moveq	r0, #0
   2d770:	bd30      	pop	{r4, r5, pc}

0002d772 <smp_reset>:
{
   2d772:	b538      	push	{r3, r4, r5, lr}
   2d774:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d776:	2500      	movs	r5, #0
   2d778:	1d03      	adds	r3, r0, #4
   2d77a:	e8d3 2fef 	ldaex	r2, [r3]
   2d77e:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2d782:	2900      	cmp	r1, #0
   2d784:	d1f9      	bne.n	2d77a <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   2d786:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2d78a:	f7f8 fcc3 	bl	26114 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2d78e:	7225      	strb	r5, [r4, #8]
   2d790:	e8d4 3fef 	ldaex	r3, [r4]
   2d794:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2d798:	2a00      	cmp	r2, #0
   2d79a:	d1f9      	bne.n	2d790 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2d79c:	4620      	mov	r0, r4
}
   2d79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2d7a2:	2101      	movs	r1, #1
   2d7a4:	f7ff bf3c 	b.w	2d620 <atomic_set_bit>

0002d7a8 <smp_c1>:
{
   2d7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d7aa:	b089      	sub	sp, #36	; 0x24
   2d7ac:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2d7b0:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2d7b2:	7830      	ldrb	r0, [r6, #0]
{
   2d7b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2d7b6:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2d7ba:	7838      	ldrb	r0, [r7, #0]
   2d7bc:	f101 0c10 	add.w	ip, r1, #16
   2d7c0:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2d7c4:	6810      	ldr	r0, [r2, #0]
   2d7c6:	f8cd 0002 	str.w	r0, [sp, #2]
   2d7ca:	8890      	ldrh	r0, [r2, #4]
   2d7cc:	7992      	ldrb	r2, [r2, #6]
   2d7ce:	f8ad 0006 	strh.w	r0, [sp, #6]
   2d7d2:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2d7d6:	681a      	ldr	r2, [r3, #0]
   2d7d8:	4668      	mov	r0, sp
   2d7da:	f8cd 2009 	str.w	r2, [sp, #9]
   2d7de:	889a      	ldrh	r2, [r3, #4]
   2d7e0:	799b      	ldrb	r3, [r3, #6]
   2d7e2:	f8ad 200d 	strh.w	r2, [sp, #13]
   2d7e6:	4622      	mov	r2, r4
   2d7e8:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   2d7ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   2d7f0:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   2d7f4:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   2d7f6:	ea83 030e 	eor.w	r3, r3, lr
   2d7fa:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2d7fe:	d1f5      	bne.n	2d7ec <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2d800:	4622      	mov	r2, r4
   2d802:	4621      	mov	r1, r4
   2d804:	4628      	mov	r0, r5
   2d806:	f7fe fe66 	bl	2c4d6 <bt_encrypt_le>
	if (err) {
   2d80a:	4603      	mov	r3, r0
   2d80c:	bb28      	cbnz	r0, 2d85a <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   2d80e:	9307      	str	r3, [sp, #28]
   2d810:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   2d812:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2d816:	f8d7 0001 	ldr.w	r0, [r7, #1]
   2d81a:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2d81e:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2d822:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   2d824:	f8cd 2016 	str.w	r2, [sp, #22]
   2d828:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   2d82c:	f104 0010 	add.w	r0, r4, #16
   2d830:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   2d834:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   2d836:	f813 2b01 	ldrb.w	r2, [r3], #1
   2d83a:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   2d83e:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   2d840:	ea82 0206 	eor.w	r2, r2, r6
   2d844:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   2d848:	d1f5      	bne.n	2d836 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   2d84a:	4622      	mov	r2, r4
   2d84c:	4621      	mov	r1, r4
   2d84e:	4628      	mov	r0, r5
}
   2d850:	b009      	add	sp, #36	; 0x24
   2d852:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2d856:	f7fe be3e 	b.w	2c4d6 <bt_encrypt_le>
}
   2d85a:	b009      	add	sp, #36	; 0x24
   2d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d85e <legacy_pairing_confirm>:
{
   2d85e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d860:	1d07      	adds	r7, r0, #4
{
   2d862:	4604      	mov	r4, r0
   2d864:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d866:	210a      	movs	r1, #10
   2d868:	4638      	mov	r0, r7
   2d86a:	f7ff fe73 	bl	2d554 <atomic_test_bit>
   2d86e:	bb88      	cbnz	r0, 2d8d4 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2d870:	2104      	movs	r1, #4
   2d872:	4620      	mov	r0, r4
   2d874:	f7ff fed4 	bl	2d620 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2d878:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2d87a:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2d87e:	f7ff fedf 	bl	2d640 <smp_create_pdu.constprop.0>
	if (!buf) {
   2d882:	4605      	mov	r5, r0
   2d884:	b1c0      	cbz	r0, 2d8b8 <legacy_pairing_confirm+0x5a>
   2d886:	2110      	movs	r1, #16
   2d888:	300c      	adds	r0, #12
   2d88a:	f7ed ff9f 	bl	1b7cc <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2d88e:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   2d892:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2d894:	9002      	str	r0, [sp, #8]
   2d896:	9301      	str	r3, [sp, #4]
   2d898:	9600      	str	r6, [sp, #0]
   2d89a:	f104 0310 	add.w	r3, r4, #16
   2d89e:	f104 0209 	add.w	r2, r4, #9
   2d8a2:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2d8a6:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2d8aa:	f7ff ff7d 	bl	2d7a8 <smp_c1>
   2d8ae:	4606      	mov	r6, r0
   2d8b0:	b128      	cbz	r0, 2d8be <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2d8b2:	4628      	mov	r0, r5
   2d8b4:	f7ed fe68 	bl	1b588 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2d8b8:	2008      	movs	r0, #8
}
   2d8ba:	b005      	add	sp, #20
   2d8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   2d8be:	4602      	mov	r2, r0
   2d8c0:	4629      	mov	r1, r5
   2d8c2:	4620      	mov	r0, r4
   2d8c4:	f7ff fe81 	bl	2d5ca <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2d8c8:	4631      	mov	r1, r6
   2d8ca:	4638      	mov	r0, r7
   2d8cc:	f7ff fe69 	bl	2d5a2 <atomic_clear_bit>
	return 0;
   2d8d0:	2000      	movs	r0, #0
   2d8d2:	e7f2      	b.n	2d8ba <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2d8d4:	2100      	movs	r1, #0
   2d8d6:	4638      	mov	r0, r7
   2d8d8:	f7ff fea2 	bl	2d620 <atomic_set_bit>
	return 0;
   2d8dc:	e7f8      	b.n	2d8d0 <legacy_pairing_confirm+0x72>

0002d8de <bt_smp_request_ltk>:
{
   2d8de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d8e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2d8e4:	4604      	mov	r4, r0
   2d8e6:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2d8ea:	f7ff fe8e 	bl	2d60a <smp_chan_get>
	if (!smp) {
   2d8ee:	4605      	mov	r5, r0
   2d8f0:	2800      	cmp	r0, #0
   2d8f2:	d07c      	beq.n	2d9ee <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2d8f4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d8f8:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2d8fa:	f1b8 0f00 	cmp.w	r8, #0
   2d8fe:	d128      	bne.n	2d952 <bt_smp_request_ltk+0x74>
   2d900:	e9dd 3200 	ldrd	r3, r2, [sp]
   2d904:	4313      	orrs	r3, r2
   2d906:	d124      	bne.n	2d952 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d908:	2103      	movs	r1, #3
   2d90a:	4630      	mov	r0, r6
   2d90c:	f7ff fe22 	bl	2d554 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2d910:	b1f8      	cbz	r0, 2d952 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2d912:	2101      	movs	r1, #1
   2d914:	4630      	mov	r0, r6
   2d916:	f7ff fe1d 	bl	2d554 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d91a:	b1d0      	cbz	r0, 2d952 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2d91c:	7d2c      	ldrb	r4, [r5, #20]
   2d91e:	7b6b      	ldrb	r3, [r5, #13]
   2d920:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2d924:	429c      	cmp	r4, r3
   2d926:	bf28      	it	cs
   2d928:	461c      	movcs	r4, r3
   2d92a:	4622      	mov	r2, r4
   2d92c:	4638      	mov	r0, r7
   2d92e:	f002 fe1e 	bl	3056e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2d932:	2c0f      	cmp	r4, #15
   2d934:	d805      	bhi.n	2d942 <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   2d936:	4641      	mov	r1, r8
   2d938:	f1c4 0210 	rsb	r2, r4, #16
   2d93c:	1938      	adds	r0, r7, r4
   2d93e:	f002 fe50 	bl	305e2 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2d942:	4630      	mov	r0, r6
   2d944:	2101      	movs	r1, #1
   2d946:	f7ff fe6b 	bl	2d620 <atomic_set_bit>
		return true;
   2d94a:	2001      	movs	r0, #1
}
   2d94c:	b002      	add	sp, #8
   2d94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2d952:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   2d956:	b983      	cbnz	r3, 2d97a <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2d958:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2d95c:	4642      	mov	r2, r8
   2d95e:	2020      	movs	r0, #32
   2d960:	7a21      	ldrb	r1, [r4, #8]
   2d962:	f7ec fd89 	bl	1a478 <bt_keys_find>
   2d966:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   2d96a:	b930      	cbnz	r0, 2d97a <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2d96c:	4642      	mov	r2, r8
   2d96e:	2001      	movs	r0, #1
   2d970:	7a21      	ldrb	r1, [r4, #8]
   2d972:	f7ec fd81 	bl	1a478 <bt_keys_find>
   2d976:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2d97a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d97e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2d982:	f1b8 0f00 	cmp.w	r8, #0
   2d986:	d10c      	bne.n	2d9a2 <bt_smp_request_ltk+0xc4>
   2d988:	e9dd 3200 	ldrd	r3, r2, [sp]
   2d98c:	4313      	orrs	r3, r2
   2d98e:	d108      	bne.n	2d9a2 <bt_smp_request_ltk+0xc4>
   2d990:	b300      	cbz	r0, 2d9d4 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d992:	89c3      	ldrh	r3, [r0, #14]
   2d994:	069a      	lsls	r2, r3, #26
   2d996:	d505      	bpl.n	2d9a4 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2d998:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d99a:	f100 011a 	add.w	r1, r0, #26
   2d99e:	4622      	mov	r2, r4
   2d9a0:	e7c4      	b.n	2d92c <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d9a2:	b1b8      	cbz	r0, 2d9d4 <bt_smp_request_ltk+0xf6>
   2d9a4:	89c3      	ldrh	r3, [r0, #14]
   2d9a6:	07db      	lsls	r3, r3, #31
   2d9a8:	d514      	bpl.n	2d9d4 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d9aa:	2208      	movs	r2, #8
   2d9ac:	4669      	mov	r1, sp
   2d9ae:	3040      	adds	r0, #64	; 0x40
   2d9b0:	f002 fdcd 	bl	3054e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d9b4:	b970      	cbnz	r0, 2d9d4 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2d9b6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   2d9ba:	2202      	movs	r2, #2
   2d9bc:	a908      	add	r1, sp, #32
   2d9be:	3048      	adds	r0, #72	; 0x48
   2d9c0:	f002 fdc5 	bl	3054e <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d9c4:	4680      	mov	r8, r0
   2d9c6:	b928      	cbnz	r0, 2d9d4 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2d9c8:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   2d9cc:	7b0c      	ldrb	r4, [r1, #12]
   2d9ce:	314a      	adds	r1, #74	; 0x4a
   2d9d0:	4622      	mov	r2, r4
   2d9d2:	e7ab      	b.n	2d92c <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2d9d4:	210f      	movs	r1, #15
   2d9d6:	4630      	mov	r0, r6
   2d9d8:	f7ff fdbc 	bl	2d554 <atomic_test_bit>
   2d9dc:	b120      	cbz	r0, 2d9e8 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2d9de:	2202      	movs	r2, #2
   2d9e0:	2106      	movs	r1, #6
   2d9e2:	4620      	mov	r0, r4
   2d9e4:	f7e7 fcae 	bl	15344 <bt_conn_security_changed>
	smp_reset(smp);
   2d9e8:	4628      	mov	r0, r5
   2d9ea:	f7ff fec2 	bl	2d772 <smp_reset>
		return false;
   2d9ee:	2000      	movs	r0, #0
   2d9f0:	e7ac      	b.n	2d94c <bt_smp_request_ltk+0x6e>

0002d9f2 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2d9f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d9f6:	4770      	bx	lr

0002d9f8 <bt_smp_dhkey_ready>:
{
   2d9f8:	b570      	push	{r4, r5, r6, lr}
   2d9fa:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2d9fc:	2008      	movs	r0, #8
   2d9fe:	f7ea ff97 	bl	18930 <smp_find>
	if (smp) {
   2da02:	4605      	mov	r5, r0
   2da04:	b1e0      	cbz	r0, 2da40 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2da06:	1d06      	adds	r6, r0, #4
   2da08:	2108      	movs	r1, #8
   2da0a:	4630      	mov	r0, r6
   2da0c:	f7ff fdc9 	bl	2d5a2 <atomic_clear_bit>
	if (!dhkey) {
   2da10:	b3bc      	cbz	r4, 2da82 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2da12:	2107      	movs	r1, #7
   2da14:	f7ff fdc5 	bl	2d5a2 <atomic_clear_bit>
   2da18:	4623      	mov	r3, r4
   2da1a:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2da1e:	f104 0120 	add.w	r1, r4, #32
   2da22:	f853 0b04 	ldr.w	r0, [r3], #4
   2da26:	428b      	cmp	r3, r1
   2da28:	f842 0b04 	str.w	r0, [r2], #4
   2da2c:	d1f9      	bne.n	2da22 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2da2e:	210a      	movs	r1, #10
   2da30:	4630      	mov	r0, r6
   2da32:	f7ff fd8f 	bl	2d554 <atomic_test_bit>
   2da36:	b170      	cbz	r0, 2da56 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2da38:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2da3a:	4630      	mov	r0, r6
   2da3c:	f7ff fdf0 	bl	2d620 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2da40:	2007      	movs	r0, #7
   2da42:	f7ea ff75 	bl	18930 <smp_find>
		if (smp) {
   2da46:	4604      	mov	r4, r0
   2da48:	b1e8      	cbz	r0, 2da86 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2da4a:	f7eb f843 	bl	18ad4 <smp_dhkey_generate>
			if (err) {
   2da4e:	4601      	mov	r1, r0
   2da50:	b1c8      	cbz	r0, 2da86 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2da52:	4620      	mov	r0, r4
   2da54:	e012      	b.n	2da7c <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2da56:	2110      	movs	r1, #16
   2da58:	4630      	mov	r0, r6
   2da5a:	f7ff fd7b 	bl	2d554 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2da5e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2da60:	2800      	cmp	r0, #0
   2da62:	d1ea      	bne.n	2da3a <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2da64:	4630      	mov	r0, r6
   2da66:	f7ff fd75 	bl	2d554 <atomic_test_bit>
   2da6a:	2800      	cmp	r0, #0
   2da6c:	d0e8      	beq.n	2da40 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2da6e:	4628      	mov	r0, r5
   2da70:	f7eb fc16 	bl	192a0 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2da74:	4601      	mov	r1, r0
   2da76:	2800      	cmp	r0, #0
   2da78:	d0e2      	beq.n	2da40 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2da7a:	4628      	mov	r0, r5
   2da7c:	f7eb ffac 	bl	199d8 <smp_error>
   2da80:	e7de      	b.n	2da40 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2da82:	210b      	movs	r1, #11
   2da84:	e7f9      	b.n	2da7a <bt_smp_dhkey_ready+0x82>
}
   2da86:	bd70      	pop	{r4, r5, r6, pc}

0002da88 <bt_smp_disconnected>:
{
   2da88:	b570      	push	{r4, r5, r6, lr}
   2da8a:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2da8c:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2da90:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2da94:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2da96:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   2da9a:	f7f8 fb3b 	bl	26114 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2da9e:	2103      	movs	r1, #3
   2daa0:	4620      	mov	r0, r4
   2daa2:	f7ff fd57 	bl	2d554 <atomic_test_bit>
   2daa6:	b1a0      	cbz	r0, 2dad2 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2daa8:	2108      	movs	r1, #8
   2daaa:	4630      	mov	r0, r6
   2daac:	f7eb ff10 	bl	198d0 <smp_pairing_complete>
	if (keys) {
   2dab0:	b13d      	cbz	r5, 2dac2 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2dab2:	89eb      	ldrh	r3, [r5, #14]
   2dab4:	b113      	cbz	r3, 2dabc <bt_smp_disconnected+0x34>
   2dab6:	7b6b      	ldrb	r3, [r5, #13]
   2dab8:	079b      	lsls	r3, r3, #30
   2daba:	d502      	bpl.n	2dac2 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2dabc:	4628      	mov	r0, r5
   2dabe:	f7ec fdc1 	bl	1a644 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2dac2:	4630      	mov	r0, r6
}
   2dac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2dac8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   2dacc:	2100      	movs	r1, #0
   2dace:	f002 bd88 	b.w	305e2 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2dad2:	2101      	movs	r1, #1
   2dad4:	4620      	mov	r0, r4
   2dad6:	f7ff fd3d 	bl	2d554 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2dada:	2800      	cmp	r0, #0
   2dadc:	d1e4      	bne.n	2daa8 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2dade:	210f      	movs	r1, #15
   2dae0:	4620      	mov	r0, r4
   2dae2:	f7ff fd37 	bl	2d554 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2dae6:	2800      	cmp	r0, #0
   2dae8:	d1de      	bne.n	2daa8 <bt_smp_disconnected+0x20>
   2daea:	e7e1      	b.n	2dab0 <bt_smp_disconnected+0x28>

0002daec <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2daec:	b510      	push	{r4, lr}
   2daee:	1e43      	subs	r3, r0, #1
   2daf0:	f100 0210 	add.w	r2, r0, #16
   2daf4:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2daf6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2dafa:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2dafe:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2db00:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2db02:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2db04:	d1f7      	bne.n	2daf6 <sys_mem_swap.constprop.0+0xa>
	}
}
   2db06:	bd10      	pop	{r4, pc}

0002db08 <bt_crypto_aes_cmac>:
{
   2db08:	b570      	push	{r4, r5, r6, lr}
   2db0a:	b0c2      	sub	sp, #264	; 0x108
   2db0c:	460d      	mov	r5, r1
   2db0e:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2db10:	4601      	mov	r1, r0
   2db12:	aa16      	add	r2, sp, #88	; 0x58
   2db14:	4668      	mov	r0, sp
{
   2db16:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2db18:	f7fd fe20 	bl	2b75c <tc_cmac_setup>
   2db1c:	b918      	cbnz	r0, 2db26 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2db1e:	f06f 0004 	mvn.w	r0, #4
}
   2db22:	b042      	add	sp, #264	; 0x108
   2db24:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2db26:	4632      	mov	r2, r6
   2db28:	4629      	mov	r1, r5
   2db2a:	4668      	mov	r0, sp
   2db2c:	f7fd fe41 	bl	2b7b2 <tc_cmac_update>
   2db30:	2800      	cmp	r0, #0
   2db32:	d0f4      	beq.n	2db1e <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2db34:	4669      	mov	r1, sp
   2db36:	4620      	mov	r0, r4
   2db38:	f7fd fea5 	bl	2b886 <tc_cmac_final>
   2db3c:	2800      	cmp	r0, #0
   2db3e:	d0ee      	beq.n	2db1e <bt_crypto_aes_cmac+0x16>
	return 0;
   2db40:	2000      	movs	r0, #0
   2db42:	e7ee      	b.n	2db22 <bt_crypto_aes_cmac+0x1a>

0002db44 <bt_crypto_f4>:
{
   2db44:	b5f0      	push	{r4, r5, r6, r7, lr}
   2db46:	460e      	mov	r6, r1
   2db48:	4614      	mov	r4, r2
   2db4a:	461d      	mov	r5, r3
   2db4c:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   2db4e:	4601      	mov	r1, r0
   2db50:	2220      	movs	r2, #32
   2db52:	a805      	add	r0, sp, #20
{
   2db54:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2db56:	f7ec fed3 	bl	1a900 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2db5a:	2220      	movs	r2, #32
   2db5c:	4631      	mov	r1, r6
   2db5e:	a80d      	add	r0, sp, #52	; 0x34
   2db60:	f7ec fece 	bl	1a900 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2db64:	4621      	mov	r1, r4
   2db66:	2210      	movs	r2, #16
   2db68:	a801      	add	r0, sp, #4
	m[64] = z;
   2db6a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2db6e:	f7ec fec7 	bl	1a900 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2db72:	463b      	mov	r3, r7
   2db74:	2241      	movs	r2, #65	; 0x41
   2db76:	a905      	add	r1, sp, #20
   2db78:	a801      	add	r0, sp, #4
   2db7a:	f7ff ffc5 	bl	2db08 <bt_crypto_aes_cmac>
	if (err) {
   2db7e:	4604      	mov	r4, r0
   2db80:	b910      	cbnz	r0, 2db88 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2db82:	4638      	mov	r0, r7
   2db84:	f7ff ffb2 	bl	2daec <sys_mem_swap.constprop.0>
}
   2db88:	4620      	mov	r0, r4
   2db8a:	b017      	add	sp, #92	; 0x5c
   2db8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002db8e <bt_crypto_f6>:
{
   2db8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2db92:	4616      	mov	r6, r2
   2db94:	461d      	mov	r5, r3
   2db96:	b097      	sub	sp, #92	; 0x5c
   2db98:	4604      	mov	r4, r0
   2db9a:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2db9e:	2210      	movs	r2, #16
   2dba0:	a805      	add	r0, sp, #20
{
   2dba2:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2dba4:	f7ec feac 	bl	1a900 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2dba8:	2210      	movs	r2, #16
   2dbaa:	4631      	mov	r1, r6
   2dbac:	a809      	add	r0, sp, #36	; 0x24
   2dbae:	f7ec fea7 	bl	1a900 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2dbb2:	2210      	movs	r2, #16
   2dbb4:	4629      	mov	r1, r5
   2dbb6:	a80d      	add	r0, sp, #52	; 0x34
   2dbb8:	f7ec fea2 	bl	1a900 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2dbbc:	2203      	movs	r2, #3
   2dbbe:	991e      	ldr	r1, [sp, #120]	; 0x78
   2dbc0:	a811      	add	r0, sp, #68	; 0x44
   2dbc2:	f7ec fe9d 	bl	1a900 <sys_memcpy_swap>
	m[51] = a1->type;
   2dbc6:	4649      	mov	r1, r9
   2dbc8:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   2dbcc:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2dbd0:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2dbd4:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2dbd6:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   2dbd8:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2dbda:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   2dbdc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2dbe0:	f7ec fe8e 	bl	1a900 <sys_memcpy_swap>
	m[58] = a2->type;
   2dbe4:	4641      	mov	r1, r8
   2dbe6:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dbea:	2206      	movs	r2, #6
	m[58] = a2->type;
   2dbec:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2dbf0:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dbf4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2dbf8:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   2dbfc:	888b      	ldrh	r3, [r1, #4]
   2dbfe:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dc02:	f7ec fe7d 	bl	1a900 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2dc06:	4621      	mov	r1, r4
   2dc08:	2210      	movs	r2, #16
   2dc0a:	a801      	add	r0, sp, #4
   2dc0c:	f7ec fe78 	bl	1a900 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2dc10:	463b      	mov	r3, r7
   2dc12:	2241      	movs	r2, #65	; 0x41
   2dc14:	a905      	add	r1, sp, #20
   2dc16:	a801      	add	r0, sp, #4
   2dc18:	f7ff ff76 	bl	2db08 <bt_crypto_aes_cmac>
	if (err) {
   2dc1c:	4604      	mov	r4, r0
   2dc1e:	b910      	cbnz	r0, 2dc26 <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   2dc20:	4638      	mov	r0, r7
   2dc22:	f7ff ff63 	bl	2daec <sys_mem_swap.constprop.0>
}
   2dc26:	4620      	mov	r0, r4
   2dc28:	b017      	add	sp, #92	; 0x5c
   2dc2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002dc2e <lfs_api_sync>:
}
   2dc2e:	2000      	movs	r0, #0
   2dc30:	4770      	bx	lr

0002dc32 <get_page_cb>:
{
   2dc32:	b530      	push	{r4, r5, lr}
	size_t area_start = ctx->area->fa_off;
   2dc34:	680d      	ldr	r5, [r1, #0]
	size_t info_end = info_start + info->size - 1U;
   2dc36:	e9d0 4200 	ldrd	r4, r2, [r0]
	size_t area_start = ctx->area->fa_off;
   2dc3a:	6868      	ldr	r0, [r5, #4]
	size_t info_end = info_start + info->size - 1U;
   2dc3c:	1e53      	subs	r3, r2, #1
   2dc3e:	4423      	add	r3, r4
	if (info_end < area_start) {
   2dc40:	4283      	cmp	r3, r0
   2dc42:	d308      	bcc.n	2dc56 <get_page_cb+0x24>
	size_t area_end = area_start + ctx->area->fa_size - 1U;
   2dc44:	68ab      	ldr	r3, [r5, #8]
   2dc46:	3b01      	subs	r3, #1
   2dc48:	4403      	add	r3, r0
	if (info_start > area_end) {
   2dc4a:	429c      	cmp	r4, r3
   2dc4c:	d805      	bhi.n	2dc5a <get_page_cb+0x28>
	if (info->size > ctx->max_size) {
   2dc4e:	684b      	ldr	r3, [r1, #4]
   2dc50:	429a      	cmp	r2, r3
		ctx->max_size = info->size;
   2dc52:	bf88      	it	hi
   2dc54:	604a      	strhi	r2, [r1, #4]
		return true;
   2dc56:	2001      	movs	r0, #1
}
   2dc58:	bd30      	pop	{r4, r5, pc}
		return false;
   2dc5a:	2000      	movs	r0, #0
   2dc5c:	e7fc      	b.n	2dc58 <get_page_cb+0x26>

0002dc5e <lfs_api_erase>:
{
   2dc5e:	b508      	push	{r3, lr}
	int rc = flash_area_erase(fa, offset, c->block_size);
   2dc60:	69c2      	ldr	r2, [r0, #28]
   2dc62:	6800      	ldr	r0, [r0, #0]
   2dc64:	4351      	muls	r1, r2
   2dc66:	f7fd fae7 	bl	2b238 <flash_area_erase>
}
   2dc6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return errno_to_lfs(rc);
   2dc6e:	f7ec bf97 	b.w	1aba0 <errno_to_lfs>

0002dc72 <lfs_api_prog>:
{
   2dc72:	b538      	push	{r3, r4, r5, lr}
   2dc74:	4614      	mov	r4, r2
	size_t offset = block * c->block_size + off;
   2dc76:	69c5      	ldr	r5, [r0, #28]
{
   2dc78:	461a      	mov	r2, r3
	int rc = flash_area_write(fa, offset, buffer, size);
   2dc7a:	fb05 4101 	mla	r1, r5, r1, r4
   2dc7e:	9b04      	ldr	r3, [sp, #16]
   2dc80:	6800      	ldr	r0, [r0, #0]
   2dc82:	f7fd fac4 	bl	2b20e <flash_area_write>
}
   2dc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return errno_to_lfs(rc);
   2dc8a:	f7ec bf89 	b.w	1aba0 <errno_to_lfs>

0002dc8e <lfs_api_read>:
{
   2dc8e:	b538      	push	{r3, r4, r5, lr}
   2dc90:	4614      	mov	r4, r2
	size_t offset = block * c->block_size + off;
   2dc92:	69c5      	ldr	r5, [r0, #28]
{
   2dc94:	461a      	mov	r2, r3
	int rc = flash_area_read(fa, offset, buffer, size);
   2dc96:	fb05 4101 	mla	r1, r5, r1, r4
   2dc9a:	9b04      	ldr	r3, [sp, #16]
   2dc9c:	6800      	ldr	r0, [r0, #0]
   2dc9e:	f7fd faa1 	bl	2b1e4 <flash_area_read>
}
   2dca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return errno_to_lfs(rc);
   2dca6:	f7ec bf7b 	b.w	1aba0 <errno_to_lfs>

0002dcaa <info_to_dirent>:
{
   2dcaa:	b510      	push	{r4, lr}
   2dcac:	460c      	mov	r4, r1
		       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   2dcae:	7803      	ldrb	r3, [r0, #0]
   2dcb0:	1e9a      	subs	r2, r3, #2
   2dcb2:	4253      	negs	r3, r2
   2dcb4:	4153      	adcs	r3, r2
   2dcb6:	700b      	strb	r3, [r1, #0]
	entry->size = info->size;
   2dcb8:	6843      	ldr	r3, [r0, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2dcba:	f240 1201 	movw	r2, #257	; 0x101
   2dcbe:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
   2dcc2:	f100 0108 	add.w	r1, r0, #8
   2dcc6:	1c60      	adds	r0, r4, #1
   2dcc8:	f002 fdeb 	bl	308a2 <strncpy>
	entry->name[sizeof(entry->name) - 1] = '\0';
   2dccc:	2300      	movs	r3, #0
   2dcce:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
}
   2dcd2:	bd10      	pop	{r4, pc}

0002dcd4 <z_log_msg_static_create.constprop.0>:
   2dcd4:	2300      	movs	r3, #0
   2dcd6:	f7e0 bddb 	b.w	e890 <z_impl_z_log_msg_static_create>

0002dcda <fs_lock>:
   2dcda:	f04f 32ff 	mov.w	r2, #4294967295
   2dcde:	f04f 33ff 	mov.w	r3, #4294967295
   2dce2:	30f0      	adds	r0, #240	; 0xf0
   2dce4:	f7f7 ba0e 	b.w	25104 <z_impl_k_mutex_lock>

0002dce8 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2dce8:	f7f7 badc 	b.w	252a4 <z_impl_k_mutex_unlock>

0002dcec <littlefs_read>:
{
   2dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dcee:	460e      	mov	r6, r1
   2dcf0:	4617      	mov	r7, r2
   2dcf2:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dcf4:	6843      	ldr	r3, [r0, #4]
   2dcf6:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dcf8:	4628      	mov	r0, r5
   2dcfa:	f7ff ffee 	bl	2dcda <fs_lock>
	ssize_t ret = lfs_file_read(&fs->lfs, LFS_FILEP(fp), ptr, len);
   2dcfe:	463b      	mov	r3, r7
   2dd00:	4632      	mov	r2, r6
   2dd02:	6821      	ldr	r1, [r4, #0]
   2dd04:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd08:	f7f5 fe08 	bl	2391c <lfs_file_read>
   2dd0c:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dd0e:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dd12:	f7ff ffe9 	bl	2dce8 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2dd16:	4620      	mov	r0, r4
}
   2dd18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2dd1c:	f7ec bf32 	b.w	1ab84 <lfs_to_errno>

0002dd20 <littlefs_write>:
{
   2dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd22:	460e      	mov	r6, r1
   2dd24:	4617      	mov	r7, r2
   2dd26:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd28:	6843      	ldr	r3, [r0, #4]
   2dd2a:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd2c:	4628      	mov	r0, r5
   2dd2e:	f7ff ffd4 	bl	2dcda <fs_lock>
	ssize_t ret = lfs_file_write(&fs->lfs, LFS_FILEP(fp), ptr, len);
   2dd32:	463b      	mov	r3, r7
   2dd34:	4632      	mov	r2, r6
   2dd36:	6821      	ldr	r1, [r4, #0]
   2dd38:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd3c:	f7f5 fe2a 	bl	23994 <lfs_file_write>
   2dd40:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dd42:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dd46:	f7ff ffcf 	bl	2dce8 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2dd4a:	4620      	mov	r0, r4
}
   2dd4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2dd50:	f7ec bf18 	b.w	1ab84 <lfs_to_errno>

0002dd54 <littlefs_seek>:
{
   2dd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd56:	460e      	mov	r6, r1
   2dd58:	4617      	mov	r7, r2
   2dd5a:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd5c:	6843      	ldr	r3, [r0, #4]
   2dd5e:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd60:	4628      	mov	r0, r5
   2dd62:	f7ff ffba 	bl	2dcda <fs_lock>
	off_t ret = lfs_file_seek(&fs->lfs, LFS_FILEP(fp), off, whence);
   2dd66:	463b      	mov	r3, r7
   2dd68:	4632      	mov	r2, r6
   2dd6a:	6821      	ldr	r1, [r4, #0]
   2dd6c:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd70:	f7f5 fe2e 	bl	239d0 <lfs_file_seek>
   2dd74:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dd76:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dd7a:	f7ff ffb5 	bl	2dce8 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2dd7e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
}
   2dd82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2dd86:	f7ec befd 	b.w	1ab84 <lfs_to_errno>

0002dd8a <littlefs_tell>:
{
   2dd8a:	b538      	push	{r3, r4, r5, lr}
   2dd8c:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd8e:	6843      	ldr	r3, [r0, #4]
   2dd90:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd92:	4628      	mov	r0, r5
   2dd94:	f7ff ffa1 	bl	2dcda <fs_lock>
	off_t ret = lfs_file_tell(&fs->lfs, LFS_FILEP(fp));
   2dd98:	6821      	ldr	r1, [r4, #0]
   2dd9a:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd9e:	f7f5 feaf 	bl	23b00 <lfs_file_tell>
   2dda2:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dda4:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dda8:	f7ff ff9e 	bl	2dce8 <k_mutex_unlock.isra.0>
}
   2ddac:	4620      	mov	r0, r4
   2ddae:	bd38      	pop	{r3, r4, r5, pc}

0002ddb0 <littlefs_truncate>:
{
   2ddb0:	b570      	push	{r4, r5, r6, lr}
   2ddb2:	460e      	mov	r6, r1
   2ddb4:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2ddb6:	6843      	ldr	r3, [r0, #4]
   2ddb8:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2ddba:	4628      	mov	r0, r5
   2ddbc:	f7ff ff8d 	bl	2dcda <fs_lock>
	int ret = lfs_file_truncate(&fs->lfs, LFS_FILEP(fp), length);
   2ddc0:	4632      	mov	r2, r6
   2ddc2:	6821      	ldr	r1, [r4, #0]
   2ddc4:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2ddc8:	f7f5 fe20 	bl	23a0c <lfs_file_truncate>
   2ddcc:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2ddce:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2ddd2:	f7ff ff89 	bl	2dce8 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2ddd6:	4620      	mov	r0, r4
}
   2ddd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2dddc:	f7ec bed2 	b.w	1ab84 <lfs_to_errno>

0002dde0 <littlefs_sync>:
{
   2dde0:	b538      	push	{r3, r4, r5, lr}
   2dde2:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dde4:	6843      	ldr	r3, [r0, #4]
   2dde6:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dde8:	4628      	mov	r0, r5
   2ddea:	f7ff ff76 	bl	2dcda <fs_lock>
	int ret = lfs_file_sync(&fs->lfs, LFS_FILEP(fp));
   2ddee:	6821      	ldr	r1, [r4, #0]
   2ddf0:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2ddf4:	f7f5 fd74 	bl	238e0 <lfs_file_sync>
   2ddf8:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2ddfa:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2ddfe:	f7ff ff73 	bl	2dce8 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2de02:	4620      	mov	r0, r4
}
   2de04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   2de08:	f7ec bebc 	b.w	1ab84 <lfs_to_errno>

0002de0c <littlefs_close>:
{
   2de0c:	b570      	push	{r4, r5, r6, lr}
   2de0e:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2de10:	6843      	ldr	r3, [r0, #4]
   2de12:	691e      	ldr	r6, [r3, #16]
	fs_lock(fs);
   2de14:	4630      	mov	r0, r6
   2de16:	f7ff ff60 	bl	2dcda <fs_lock>
	int ret = lfs_file_close(&fs->lfs, LFS_FILEP(fp));
   2de1a:	6821      	ldr	r1, [r4, #0]
   2de1c:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2de20:	f7f5 fd40 	bl	238a4 <lfs_file_close>
   2de24:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   2de26:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2de2a:	f7ff ff5d 	bl	2dce8 <k_mutex_unlock.isra.0>
	release_file_data(fp);
   2de2e:	4620      	mov	r0, r4
   2de30:	f7ec fe94 	bl	1ab5c <release_file_data>
	return lfs_to_errno(ret);
   2de34:	4628      	mov	r0, r5
}
   2de36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2de3a:	f7ec bea3 	b.w	1ab84 <lfs_to_errno>

0002de3e <littlefs_readdir>:
{
   2de3e:	b570      	push	{r4, r5, r6, lr}
   2de40:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   2de42:	6843      	ldr	r3, [r0, #4]
{
   2de44:	b0c2      	sub	sp, #264	; 0x108
	struct fs_littlefs *fs = dp->mp->fs_data;
   2de46:	691e      	ldr	r6, [r3, #16]
{
   2de48:	460d      	mov	r5, r1
	fs_lock(fs);
   2de4a:	4630      	mov	r0, r6
   2de4c:	f7ff ff45 	bl	2dcda <fs_lock>
	int ret = lfs_dir_read(&fs->lfs, dp->dirp, &info);
   2de50:	6821      	ldr	r1, [r4, #0]
   2de52:	466a      	mov	r2, sp
   2de54:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2de58:	f7f5 ff6c 	bl	23d34 <lfs_dir_read>
   2de5c:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2de5e:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2de62:	f7ff ff41 	bl	2dce8 <k_mutex_unlock.isra.0>
	if (ret > 0) {
   2de66:	2c00      	cmp	r4, #0
   2de68:	dd0a      	ble.n	2de80 <littlefs_readdir+0x42>
		info_to_dirent(&info, entry);
   2de6a:	4629      	mov	r1, r5
   2de6c:	4668      	mov	r0, sp
   2de6e:	f7ff ff1c 	bl	2dcaa <info_to_dirent>
		ret = 0;
   2de72:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   2de74:	4620      	mov	r0, r4
}
   2de76:	b042      	add	sp, #264	; 0x108
   2de78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2de7c:	f7ec be82 	b.w	1ab84 <lfs_to_errno>
	} else if (ret == 0) {
   2de80:	d1f8      	bne.n	2de74 <littlefs_readdir+0x36>
		entry->name[0] = 0;
   2de82:	706c      	strb	r4, [r5, #1]
   2de84:	e7f5      	b.n	2de72 <littlefs_readdir+0x34>

0002de86 <littlefs_unlink>:
{
   2de86:	b538      	push	{r3, r4, r5, lr}
   2de88:	4603      	mov	r3, r0
   2de8a:	4608      	mov	r0, r1
	path = fs_impl_strip_prefix(path, mountp);
   2de8c:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   2de8e:	691d      	ldr	r5, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   2de90:	f7ec fe52 	bl	1ab38 <fs_impl_strip_prefix>
   2de94:	4604      	mov	r4, r0
	fs_lock(fs);
   2de96:	4628      	mov	r0, r5
   2de98:	f7ff ff1f 	bl	2dcda <fs_lock>
	int ret = lfs_remove(&fs->lfs, path);
   2de9c:	4621      	mov	r1, r4
   2de9e:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dea2:	f7f5 fb49 	bl	23538 <lfs_remove>
   2dea6:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dea8:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2deac:	f7ff ff1c 	bl	2dce8 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2deb0:	4620      	mov	r0, r4
}
   2deb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   2deb6:	f7ec be65 	b.w	1ab84 <lfs_to_errno>

0002deba <littlefs_rename>:
{
   2deba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2debc:	4604      	mov	r4, r0
   2debe:	4608      	mov	r0, r1
	from = fs_impl_strip_prefix(from, mountp);
   2dec0:	4621      	mov	r1, r4
{
   2dec2:	4617      	mov	r7, r2
	struct fs_littlefs *fs = mountp->fs_data;
   2dec4:	6925      	ldr	r5, [r4, #16]
	from = fs_impl_strip_prefix(from, mountp);
   2dec6:	f7ec fe37 	bl	1ab38 <fs_impl_strip_prefix>
	to = fs_impl_strip_prefix(to, mountp);
   2deca:	4621      	mov	r1, r4
	from = fs_impl_strip_prefix(from, mountp);
   2decc:	4606      	mov	r6, r0
	to = fs_impl_strip_prefix(to, mountp);
   2dece:	4638      	mov	r0, r7
   2ded0:	f7ec fe32 	bl	1ab38 <fs_impl_strip_prefix>
   2ded4:	4604      	mov	r4, r0
	fs_lock(fs);
   2ded6:	4628      	mov	r0, r5
   2ded8:	f7ff feff 	bl	2dcda <fs_lock>
	int ret = lfs_rename(&fs->lfs, from, to);
   2dedc:	4622      	mov	r2, r4
   2dede:	4631      	mov	r1, r6
   2dee0:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dee4:	f7f5 fb96 	bl	23614 <lfs_rename>
   2dee8:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2deea:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2deee:	f7ff fefb 	bl	2dce8 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2def2:	4620      	mov	r0, r4
}
   2def4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2def8:	f7ec be44 	b.w	1ab84 <lfs_to_errno>

0002defc <littlefs_mkdir>:
{
   2defc:	b538      	push	{r3, r4, r5, lr}
   2defe:	4603      	mov	r3, r0
   2df00:	4608      	mov	r0, r1
	path = fs_impl_strip_prefix(path, mountp);
   2df02:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   2df04:	691d      	ldr	r5, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   2df06:	f7ec fe17 	bl	1ab38 <fs_impl_strip_prefix>
   2df0a:	4604      	mov	r4, r0
	fs_lock(fs);
   2df0c:	4628      	mov	r0, r5
   2df0e:	f7ff fee4 	bl	2dcda <fs_lock>
	int ret = lfs_mkdir(&fs->lfs, path);
   2df12:	4621      	mov	r1, r4
   2df14:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2df18:	f7f5 fe0c 	bl	23b34 <lfs_mkdir>
   2df1c:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2df1e:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2df22:	f7ff fee1 	bl	2dce8 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2df26:	4620      	mov	r0, r4
}
   2df28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   2df2c:	f7ec be2a 	b.w	1ab84 <lfs_to_errno>

0002df30 <littlefs_stat>:
{
   2df30:	4603      	mov	r3, r0
   2df32:	b570      	push	{r4, r5, r6, lr}
   2df34:	4608      	mov	r0, r1
   2df36:	b0c2      	sub	sp, #264	; 0x108
	path = fs_impl_strip_prefix(path, mountp);
   2df38:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   2df3a:	691e      	ldr	r6, [r3, #16]
{
   2df3c:	4615      	mov	r5, r2
	path = fs_impl_strip_prefix(path, mountp);
   2df3e:	f7ec fdfb 	bl	1ab38 <fs_impl_strip_prefix>
   2df42:	4604      	mov	r4, r0
	fs_lock(fs);
   2df44:	4630      	mov	r0, r6
   2df46:	f7ff fec8 	bl	2dcda <fs_lock>
	int ret = lfs_stat(&fs->lfs, path, &info);
   2df4a:	4621      	mov	r1, r4
   2df4c:	466a      	mov	r2, sp
   2df4e:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2df52:	f001 fcbd 	bl	2f8d0 <lfs_stat>
   2df56:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2df58:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2df5c:	f7ff fec4 	bl	2dce8 <k_mutex_unlock.isra.0>
	if (ret >= 0) {
   2df60:	2c00      	cmp	r4, #0
   2df62:	db04      	blt.n	2df6e <littlefs_stat+0x3e>
		info_to_dirent(&info, entry);
   2df64:	4629      	mov	r1, r5
   2df66:	4668      	mov	r0, sp
   2df68:	f7ff fe9f 	bl	2dcaa <info_to_dirent>
		ret = 0;
   2df6c:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   2df6e:	4620      	mov	r0, r4
}
   2df70:	b042      	add	sp, #264	; 0x108
   2df72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2df76:	f7ec be05 	b.w	1ab84 <lfs_to_errno>

0002df7a <littlefs_statvfs>:
{
   2df7a:	4603      	mov	r3, r0
   2df7c:	b570      	push	{r4, r5, r6, lr}
   2df7e:	4614      	mov	r4, r2
	struct fs_littlefs *fs = mountp->fs_data;
   2df80:	691e      	ldr	r6, [r3, #16]
{
   2df82:	4608      	mov	r0, r1
	stat->f_bsize = lfs->cfg->prog_size;
   2df84:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
	path = fs_impl_strip_prefix(path, mountp);
   2df88:	4619      	mov	r1, r3
	stat->f_bsize = lfs->cfg->prog_size;
   2df8a:	6992      	ldr	r2, [r2, #24]
   2df8c:	6022      	str	r2, [r4, #0]
	stat->f_frsize = lfs->cfg->block_size;
   2df8e:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
   2df92:	69d2      	ldr	r2, [r2, #28]
   2df94:	6062      	str	r2, [r4, #4]
	stat->f_blocks = lfs->cfg->block_count;
   2df96:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
   2df9a:	6a12      	ldr	r2, [r2, #32]
   2df9c:	60a2      	str	r2, [r4, #8]
	path = fs_impl_strip_prefix(path, mountp);
   2df9e:	f7ec fdcb 	bl	1ab38 <fs_impl_strip_prefix>
	fs_lock(fs);
   2dfa2:	4630      	mov	r0, r6
   2dfa4:	f7ff fe99 	bl	2dcda <fs_lock>
	ssize_t ret = lfs_fs_size(lfs);
   2dfa8:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2dfac:	f001 fcb2 	bl	2f914 <lfs_fs_size>
   2dfb0:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   2dfb2:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2dfb6:	f7ff fe97 	bl	2dce8 <k_mutex_unlock.isra.0>
	if (ret >= 0) {
   2dfba:	2d00      	cmp	r5, #0
		stat->f_bfree = stat->f_blocks - ret;
   2dfbc:	bfa1      	itttt	ge
   2dfbe:	68a3      	ldrge	r3, [r4, #8]
   2dfc0:	1b5b      	subge	r3, r3, r5
		ret = 0;
   2dfc2:	2500      	movge	r5, #0
		stat->f_bfree = stat->f_blocks - ret;
   2dfc4:	60e3      	strge	r3, [r4, #12]
	return lfs_to_errno(ret);
   2dfc6:	4628      	mov	r0, r5
}
   2dfc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2dfcc:	f7ec bdda 	b.w	1ab84 <lfs_to_errno>

0002dfd0 <fixed_data_unref>:
}
   2dfd0:	4770      	bx	lr

0002dfd2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2dfd2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2dfd4:	6849      	ldr	r1, [r1, #4]
   2dfd6:	6809      	ldr	r1, [r1, #0]
   2dfd8:	f7ed b8ce 	b.w	1b178 <net_buf_alloc_len>

0002dfdc <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2dfdc:	f7f7 ba8a 	b.w	254f4 <z_impl_k_queue_get>

0002dfe0 <net_buf_simple_push_u8>:
{
   2dfe0:	b510      	push	{r4, lr}
   2dfe2:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2dfe4:	2101      	movs	r1, #1
   2dfe6:	f7ed fb95 	bl	1b714 <net_buf_simple_push>
	*data = val;
   2dfea:	7004      	strb	r4, [r0, #0]
}
   2dfec:	bd10      	pop	{r4, pc}

0002dfee <net_buf_simple_pull_le16>:
{
   2dfee:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2dff0:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2dff2:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2dff4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2dff6:	f7ed fbad 	bl	1b754 <net_buf_simple_pull>
}
   2dffa:	4620      	mov	r0, r4
   2dffc:	bd10      	pop	{r4, pc}

0002dffe <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2dffe:	6802      	ldr	r2, [r0, #0]
   2e000:	6880      	ldr	r0, [r0, #8]
}
   2e002:	1a10      	subs	r0, r2, r0
   2e004:	4770      	bx	lr

0002e006 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2e006:	8883      	ldrh	r3, [r0, #4]
   2e008:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2e00a:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2e00c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2e00e:	6803      	ldr	r3, [r0, #0]
   2e010:	1a5b      	subs	r3, r3, r1
}
   2e012:	1ad0      	subs	r0, r2, r3
   2e014:	4770      	bx	lr

0002e016 <net_buf_simple_add_mem>:
{
   2e016:	b538      	push	{r3, r4, r5, lr}
   2e018:	460d      	mov	r5, r1
   2e01a:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2e01c:	4611      	mov	r1, r2
   2e01e:	f7ed fbd5 	bl	1b7cc <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e022:	4622      	mov	r2, r4
   2e024:	4629      	mov	r1, r5
}
   2e026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e02a:	f002 baa0 	b.w	3056e <memcpy>

0002e02e <net_buf_simple_add_u8>:
{
   2e02e:	b510      	push	{r4, lr}
   2e030:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2e032:	2101      	movs	r1, #1
   2e034:	f7ed fbca 	bl	1b7cc <net_buf_simple_add>
	*u8 = val;
   2e038:	7004      	strb	r4, [r0, #0]
}
   2e03a:	bd10      	pop	{r4, pc}

0002e03c <adc_context_on_timer_expired>:
{
   2e03c:	b410      	push	{r4}
   2e03e:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2e040:	3808      	subs	r0, #8
   2e042:	e8d0 2fef 	ldaex	r2, [r0]
   2e046:	1c51      	adds	r1, r2, #1
   2e048:	e8c0 1fe4 	stlex	r4, r1, [r0]
   2e04c:	2c00      	cmp	r4, #0
   2e04e:	d1f8      	bne.n	2e042 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2e050:	b912      	cbnz	r2, 2e058 <adc_context_on_timer_expired+0x1c>
}
   2e052:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2e054:	f7ed bbfc 	b.w	1b850 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2e058:	f06f 020f 	mvn.w	r2, #15
}
   2e05c:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   2e05e:	669a      	str	r2, [r3, #104]	; 0x68
}
   2e060:	4770      	bx	lr

0002e062 <set_on_state>:
	__asm__ volatile(
   2e062:	f04f 0320 	mov.w	r3, #32
   2e066:	f3ef 8211 	mrs	r2, BASEPRI
   2e06a:	f383 8812 	msr	BASEPRI_MAX, r3
   2e06e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2e072:	6803      	ldr	r3, [r0, #0]
   2e074:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e078:	f043 0302 	orr.w	r3, r3, #2
   2e07c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2e07e:	f382 8811 	msr	BASEPRI, r2
   2e082:	f3bf 8f6f 	isb	sy
}
   2e086:	4770      	bx	lr

0002e088 <async_start>:
{
   2e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e08a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2e08c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2e08e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2e090:	f04f 0520 	mov.w	r5, #32
   2e094:	f3ef 8611 	mrs	r6, BASEPRI
   2e098:	f385 8812 	msr	BASEPRI_MAX, r5
   2e09c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e0a0:	250c      	movs	r5, #12
   2e0a2:	4369      	muls	r1, r5
   2e0a4:	440c      	add	r4, r1
   2e0a6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2e0aa:	f005 0c07 	and.w	ip, r5, #7
   2e0ae:	f1bc 0f01 	cmp.w	ip, #1
   2e0b2:	d10c      	bne.n	2e0ce <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2e0b4:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   2e0b8:	f386 8811 	msr	BASEPRI, r6
   2e0bc:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2e0c0:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   2e0c4:	6843      	ldr	r3, [r0, #4]
   2e0c6:	585b      	ldr	r3, [r3, r1]
   2e0c8:	4798      	blx	r3
	return 0;
   2e0ca:	2000      	movs	r0, #0
}
   2e0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2e0ce:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2e0d2:	42af      	cmp	r7, r5
   2e0d4:	f386 8811 	msr	BASEPRI, r6
   2e0d8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2e0dc:	bf0c      	ite	eq
   2e0de:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2e0e2:	f04f 30ff 	movne.w	r0, #4294967295
   2e0e6:	e7f1      	b.n	2e0cc <async_start+0x44>

0002e0e8 <api_start>:
{
   2e0e8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2e0ea:	2480      	movs	r4, #128	; 0x80
   2e0ec:	9400      	str	r4, [sp, #0]
   2e0ee:	f7ff ffcb 	bl	2e088 <async_start>
}
   2e0f2:	b002      	add	sp, #8
   2e0f4:	bd10      	pop	{r4, pc}

0002e0f6 <onoff_started_callback>:
	return &data->mgr[type];
   2e0f6:	6900      	ldr	r0, [r0, #16]
   2e0f8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2e0fa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2e0fe:	2100      	movs	r1, #0
   2e100:	4710      	bx	r2

0002e102 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2e102:	2003      	movs	r0, #3
   2e104:	f7f0 becc 	b.w	1eea0 <nrfx_clock_start>

0002e108 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2e108:	2002      	movs	r0, #2
   2e10a:	f7f0 bec9 	b.w	1eea0 <nrfx_clock_start>

0002e10e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2e10e:	2000      	movs	r0, #0
   2e110:	f7f0 bec6 	b.w	1eea0 <nrfx_clock_start>

0002e114 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2e114:	2003      	movs	r0, #3
   2e116:	f7f0 bf41 	b.w	1ef9c <nrfx_clock_stop>

0002e11a <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2e11a:	2002      	movs	r0, #2
   2e11c:	f7f0 bf3e 	b.w	1ef9c <nrfx_clock_stop>

0002e120 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e120:	2000      	movs	r0, #0
   2e122:	f7f0 bf3b 	b.w	1ef9c <nrfx_clock_stop>

0002e126 <blocking_start_callback>:
{
   2e126:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2e128:	f7f7 ba4e 	b.w	255c8 <z_impl_k_sem_give>

0002e12c <api_stop>:
	return stop(dev, subsys, CTX_API);
   2e12c:	2280      	movs	r2, #128	; 0x80
   2e12e:	f7ed bdf7 	b.w	1bd20 <stop>

0002e132 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e132:	6843      	ldr	r3, [r0, #4]
}
   2e134:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e136:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2e138:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2e13a:	600b      	str	r3, [r1, #0]
}
   2e13c:	4770      	bx	lr

0002e13e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e13e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2e140:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e144:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2e146:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2e14a:	6098      	str	r0, [r3, #8]
}
   2e14c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e14e:	60d9      	str	r1, [r3, #12]
   2e150:	4770      	bx	lr

0002e152 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e152:	6843      	ldr	r3, [r0, #4]
}
   2e154:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e156:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2e158:	6099      	str	r1, [r3, #8]
}
   2e15a:	4770      	bx	lr

0002e15c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e15c:	6843      	ldr	r3, [r0, #4]
}
   2e15e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e160:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2e162:	60d9      	str	r1, [r3, #12]
}
   2e164:	4770      	bx	lr

0002e166 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e166:	6843      	ldr	r3, [r0, #4]
   2e168:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2e16a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2e16c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2e170:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2e172:	6090      	str	r0, [r2, #8]
}
   2e174:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e176:	60d3      	str	r3, [r2, #12]
   2e178:	4770      	bx	lr

0002e17a <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   2e17a:	2200      	movs	r2, #0
   2e17c:	2101      	movs	r1, #1
   2e17e:	200a      	movs	r0, #10
   2e180:	f7e2 bc7c 	b.w	10a7c <z_arm_irq_priority_set>

0002e184 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2e184:	b510      	push	{r4, lr}
	while (*count) {
   2e186:	680b      	ldr	r3, [r1, #0]
   2e188:	b913      	cbnz	r3, 2e190 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   2e18a:	4618      	mov	r0, r3
	*buf_len = 0;
   2e18c:	6013      	str	r3, [r2, #0]
	return NULL;
   2e18e:	e005      	b.n	2e19c <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2e190:	6803      	ldr	r3, [r0, #0]
   2e192:	685c      	ldr	r4, [r3, #4]
   2e194:	b11c      	cbz	r4, 2e19e <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2e196:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   2e198:	6803      	ldr	r3, [r0, #0]
   2e19a:	6818      	ldr	r0, [r3, #0]
}
   2e19c:	bd10      	pop	{r4, pc}
		++(*current);
   2e19e:	3308      	adds	r3, #8
   2e1a0:	6003      	str	r3, [r0, #0]
		--(*count);
   2e1a2:	680b      	ldr	r3, [r1, #0]
   2e1a4:	3b01      	subs	r3, #1
   2e1a6:	600b      	str	r3, [r1, #0]
   2e1a8:	e7ed      	b.n	2e186 <spi_context_get_next_buf.constprop.0+0x2>

0002e1aa <z_log_msg_static_create.constprop.0>:
   2e1aa:	2300      	movs	r3, #0
   2e1ac:	f7e0 bb70 	b.w	e890 <z_impl_z_log_msg_static_create>

0002e1b0 <_spi_context_cs_control>:
{
   2e1b0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2e1b2:	6803      	ldr	r3, [r0, #0]
{
   2e1b4:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2e1b6:	b1e3      	cbz	r3, 2e1f2 <_spi_context_cs_control+0x42>
   2e1b8:	6898      	ldr	r0, [r3, #8]
   2e1ba:	b1d0      	cbz	r0, 2e1f2 <_spi_context_cs_control+0x42>
   2e1bc:	6805      	ldr	r5, [r0, #0]
   2e1be:	b1c5      	cbz	r5, 2e1f2 <_spi_context_cs_control+0x42>
		if (on) {
   2e1c0:	b149      	cbz	r1, 2e1d6 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2e1c2:	2101      	movs	r1, #1
   2e1c4:	f7ee f996 	bl	1c4f4 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2e1c8:	6823      	ldr	r3, [r4, #0]
   2e1ca:	689b      	ldr	r3, [r3, #8]
   2e1cc:	6898      	ldr	r0, [r3, #8]
}
   2e1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2e1d2:	f002 b8b5 	b.w	30340 <z_impl_k_busy_wait>
			if (!force_off &&
   2e1d6:	b912      	cbnz	r2, 2e1de <_spi_context_cs_control+0x2e>
   2e1d8:	889b      	ldrh	r3, [r3, #4]
   2e1da:	04db      	lsls	r3, r3, #19
   2e1dc:	d409      	bmi.n	2e1f2 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2e1de:	6880      	ldr	r0, [r0, #8]
   2e1e0:	f002 f8ae 	bl	30340 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2e1e4:	6823      	ldr	r3, [r4, #0]
   2e1e6:	2100      	movs	r1, #0
   2e1e8:	6898      	ldr	r0, [r3, #8]
}
   2e1ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2e1ee:	f7ee b981 	b.w	1c4f4 <gpio_pin_set_dt.isra.0>
}
   2e1f2:	bd38      	pop	{r3, r4, r5, pc}

0002e1f4 <spi_context_unlock_unconditionally>:
{
   2e1f4:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2e1f6:	2201      	movs	r2, #1
   2e1f8:	2100      	movs	r1, #0
{
   2e1fa:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2e1fc:	f7ff ffd8 	bl	2e1b0 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2e200:	69a3      	ldr	r3, [r4, #24]
   2e202:	b933      	cbnz	r3, 2e212 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2e204:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2e206:	f104 0010 	add.w	r0, r4, #16
}
   2e20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e20e:	f7f7 b9db 	b.w	255c8 <z_impl_k_sem_give>
   2e212:	bd10      	pop	{r4, pc}

0002e214 <spi_nrfx_release>:
{
   2e214:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2e216:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2e218:	6803      	ldr	r3, [r0, #0]
   2e21a:	428b      	cmp	r3, r1
   2e21c:	d106      	bne.n	2e22c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2e21e:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2e222:	b934      	cbnz	r4, 2e232 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2e224:	f7ff ffe6 	bl	2e1f4 <spi_context_unlock_unconditionally>
	return 0;
   2e228:	4620      	mov	r0, r4
}
   2e22a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2e22c:	f06f 0015 	mvn.w	r0, #21
   2e230:	e7fb      	b.n	2e22a <spi_nrfx_release+0x16>
		return -EBUSY;
   2e232:	f06f 000f 	mvn.w	r0, #15
   2e236:	e7f8      	b.n	2e22a <spi_nrfx_release+0x16>

0002e238 <k_sem_give>:
   2e238:	f7f7 b9c6 	b.w	255c8 <z_impl_k_sem_give>

0002e23c <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2e23c:	b918      	cbnz	r0, 2e246 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2e23e:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2e242:	f7ff bff9 	b.w	2e238 <k_sem_give>
}
   2e246:	4770      	bx	lr

0002e248 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2e248:	f04f 32ff 	mov.w	r2, #4294967295
   2e24c:	f04f 33ff 	mov.w	r3, #4294967295
   2e250:	3018      	adds	r0, #24
   2e252:	f7f7 b9fd 	b.w	25650 <z_impl_k_sem_take>

0002e256 <qspi_trans_lock.isra.0>:
   2e256:	f04f 32ff 	mov.w	r2, #4294967295
   2e25a:	f04f 33ff 	mov.w	r3, #4294967295
   2e25e:	f7f7 b9f7 	b.w	25650 <z_impl_k_sem_take>

0002e262 <qspi_nor_write_protection_set>:
{
   2e262:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2e264:	2200      	movs	r2, #0
   2e266:	4291      	cmp	r1, r2
   2e268:	bf0c      	ite	eq
   2e26a:	2306      	moveq	r3, #6
   2e26c:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e26e:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2e270:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2e274:	9203      	str	r2, [sp, #12]
   2e276:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e27a:	f7ee fceb 	bl	1cc54 <qspi_send_cmd>
		ret = -EIO;
   2e27e:	2800      	cmp	r0, #0
}
   2e280:	bf18      	it	ne
   2e282:	f06f 0004 	mvnne.w	r0, #4
   2e286:	b005      	add	sp, #20
   2e288:	f85d fb04 	ldr.w	pc, [sp], #4

0002e28c <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2e28c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2e28e:	23ff      	movs	r3, #255	; 0xff
   2e290:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2e294:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2e298:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2e29a:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2e29c:	2301      	movs	r3, #1
   2e29e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2e2a2:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e2a4:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2e2a6:	f88d 300c 	strb.w	r3, [sp, #12]
   2e2aa:	ab01      	add	r3, sp, #4
   2e2ac:	9204      	str	r2, [sp, #16]
   2e2ae:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e2b0:	f7ee fcd0 	bl	1cc54 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2e2b4:	2800      	cmp	r0, #0
   2e2b6:	bfa8      	it	ge
   2e2b8:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2e2bc:	b007      	add	sp, #28
   2e2be:	f85d fb04 	ldr.w	pc, [sp], #4

0002e2c2 <is_regular_addr_valid>:
{
   2e2c2:	b538      	push	{r3, r4, r5, lr}
   2e2c4:	4605      	mov	r5, r0
   2e2c6:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2e2c8:	f000 fc6a 	bl	2eba0 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2e2cc:	2d00      	cmp	r5, #0
   2e2ce:	db07      	blt.n	2e2e0 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2e2d0:	42a8      	cmp	r0, r5
   2e2d2:	d905      	bls.n	2e2e0 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2e2d4:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2e2d6:	4284      	cmp	r4, r0
   2e2d8:	bf8c      	ite	hi
   2e2da:	2000      	movhi	r0, #0
   2e2dc:	2001      	movls	r0, #1
}
   2e2de:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2e2e0:	2000      	movs	r0, #0
   2e2e2:	e7fc      	b.n	2e2de <is_regular_addr_valid+0x1c>

0002e2e4 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2e2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e2e6:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2e2e8:	2300      	movs	r3, #0
{
   2e2ea:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2e2ec:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2e2ee:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2e2f0:	60a3      	str	r3, [r4, #8]
{
   2e2f2:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2e2f4:	6913      	ldr	r3, [r2, #16]
   2e2f6:	4669      	mov	r1, sp
   2e2f8:	aa01      	add	r2, sp, #4
   2e2fa:	4798      	blx	r3

	while (layout_size--) {
   2e2fc:	9b01      	ldr	r3, [sp, #4]
   2e2fe:	1e5a      	subs	r2, r3, #1
   2e300:	9201      	str	r2, [sp, #4]
   2e302:	b91b      	cbnz	r3, 2e30c <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2e304:	f06f 0015 	mvn.w	r0, #21
}
   2e308:	b003      	add	sp, #12
   2e30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2e30c:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2e30e:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2e310:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2e312:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2e314:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2e316:	b985      	cbnz	r5, 2e33a <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2e318:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2e31a:	f8d0 c000 	ldr.w	ip, [r0]
   2e31e:	4563      	cmp	r3, ip
   2e320:	bf28      	it	cs
   2e322:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2e324:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2e328:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2e32a:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2e32c:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2e32e:	6802      	ldr	r2, [r0, #0]
   2e330:	429a      	cmp	r2, r3
   2e332:	d806      	bhi.n	2e342 <flash_get_page_info+0x5e>
		layout++;
   2e334:	3008      	adds	r0, #8
   2e336:	9000      	str	r0, [sp, #0]
   2e338:	e7e0      	b.n	2e2fc <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2e33a:	1a6b      	subs	r3, r5, r1
   2e33c:	fbb3 f3f7 	udiv	r3, r3, r7
   2e340:	e7eb      	b.n	2e31a <flash_get_page_info+0x36>
			return 0;
   2e342:	2000      	movs	r0, #0
   2e344:	e7e0      	b.n	2e308 <flash_get_page_info+0x24>

0002e346 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2e346:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2e348:	2200      	movs	r2, #0
   2e34a:	f7ff bfcb 	b.w	2e2e4 <flash_get_page_info>

0002e34e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2e34e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   2e352:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   2e354:	6883      	ldr	r3, [r0, #8]
{
   2e356:	b086      	sub	sp, #24
   2e358:	4688      	mov	r8, r1
   2e35a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2e35c:	691b      	ldr	r3, [r3, #16]
   2e35e:	aa02      	add	r2, sp, #8
   2e360:	a901      	add	r1, sp, #4
   2e362:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   2e364:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2e366:	4625      	mov	r5, r4
   2e368:	9b02      	ldr	r3, [sp, #8]
   2e36a:	42ab      	cmp	r3, r5
   2e36c:	d802      	bhi.n	2e374 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2e36e:	b006      	add	sp, #24
   2e370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   2e374:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   2e376:	9f01      	ldr	r7, [sp, #4]
   2e378:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   2e37c:	687b      	ldr	r3, [r7, #4]
   2e37e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e380:	683a      	ldr	r2, [r7, #0]
   2e382:	eb0a 0306 	add.w	r3, sl, r6
   2e386:	42b2      	cmp	r2, r6
   2e388:	d802      	bhi.n	2e390 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2e38a:	469a      	mov	sl, r3
   2e38c:	3501      	adds	r5, #1
   2e38e:	e7eb      	b.n	2e368 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2e390:	4649      	mov	r1, r9
			page_info.start_offset = off;
   2e392:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2e394:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2e396:	a803      	add	r0, sp, #12
   2e398:	47c0      	blx	r8
   2e39a:	2800      	cmp	r0, #0
   2e39c:	d0e7      	beq.n	2e36e <flash_page_foreach+0x20>
			off += page_info.size;
   2e39e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e3a0:	3601      	adds	r6, #1
			off += page_info.size;
   2e3a2:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2e3a4:	e7ec      	b.n	2e380 <flash_page_foreach+0x32>

0002e3a6 <uarte_nrfx_config_get>:
{
   2e3a6:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2e3a8:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2e3aa:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2e3ae:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e3b2:	2000      	movs	r0, #0
   2e3b4:	4770      	bx	lr

0002e3b6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2e3b6:	6843      	ldr	r3, [r0, #4]
   2e3b8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e3ba:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e3be:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e3c2:	4770      	bx	lr

0002e3c4 <tx_start>:
{
   2e3c4:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2e3c6:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2e3c8:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2e3ca:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2e3ce:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e3d2:	2200      	movs	r2, #0
   2e3d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2e3d8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2e3dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2e3e0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e3e4:	6862      	ldr	r2, [r4, #4]
   2e3e6:	06d2      	lsls	r2, r2, #27
   2e3e8:	d511      	bpl.n	2e40e <tx_start+0x4a>
	if (data->async) {
   2e3ea:	6902      	ldr	r2, [r0, #16]
   2e3ec:	68d2      	ldr	r2, [r2, #12]
   2e3ee:	b12a      	cbz	r2, 2e3fc <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2e3f0:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2e3f4:	f041 0101 	orr.w	r1, r1, #1
   2e3f8:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2e3fc:	2108      	movs	r1, #8
	return config->uarte_regs;
   2e3fe:	6842      	ldr	r2, [r0, #4]
   2e400:	6812      	ldr	r2, [r2, #0]
   2e402:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2e406:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2e40a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e40e:	2201      	movs	r2, #1
   2e410:	609a      	str	r2, [r3, #8]
}
   2e412:	bd10      	pop	{r4, pc}

0002e414 <user_callback>:
	if (data->async->user_callback) {
   2e414:	6903      	ldr	r3, [r0, #16]
   2e416:	68da      	ldr	r2, [r3, #12]
   2e418:	6813      	ldr	r3, [r2, #0]
   2e41a:	b10b      	cbz	r3, 2e420 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2e41c:	6852      	ldr	r2, [r2, #4]
   2e41e:	4718      	bx	r3
}
   2e420:	4770      	bx	lr

0002e422 <notify_uart_rx_rdy>:
{
   2e422:	b570      	push	{r4, r5, r6, lr}
   2e424:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2e426:	6906      	ldr	r6, [r0, #16]
{
   2e428:	4604      	mov	r4, r0
   2e42a:	460d      	mov	r5, r1
	struct uart_event evt = {
   2e42c:	2214      	movs	r2, #20
   2e42e:	2100      	movs	r1, #0
   2e430:	a801      	add	r0, sp, #4
   2e432:	f002 f8d6 	bl	305e2 <memset>
   2e436:	2302      	movs	r3, #2
   2e438:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2e43c:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2e43e:	4620      	mov	r0, r4
	struct uart_event evt = {
   2e440:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2e444:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2e446:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2e44a:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2e44c:	f7ff ffe2 	bl	2e414 <user_callback>
}
   2e450:	b006      	add	sp, #24
   2e452:	bd70      	pop	{r4, r5, r6, pc}

0002e454 <rx_buf_release>:
{
   2e454:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2e456:	680e      	ldr	r6, [r1, #0]
{
   2e458:	4605      	mov	r5, r0
   2e45a:	460c      	mov	r4, r1
   2e45c:	b086      	sub	sp, #24
	if (*buf) {
   2e45e:	b17e      	cbz	r6, 2e480 <rx_buf_release+0x2c>
		struct uart_event evt = {
   2e460:	2214      	movs	r2, #20
   2e462:	2100      	movs	r1, #0
   2e464:	a801      	add	r0, sp, #4
   2e466:	f002 f8bc 	bl	305e2 <memset>
   2e46a:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2e46c:	4628      	mov	r0, r5
   2e46e:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2e472:	f88d 3004 	strb.w	r3, [sp, #4]
   2e476:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2e478:	f7ff ffcc 	bl	2e414 <user_callback>
		*buf = NULL;
   2e47c:	2300      	movs	r3, #0
   2e47e:	6023      	str	r3, [r4, #0]
}
   2e480:	b006      	add	sp, #24
   2e482:	bd70      	pop	{r4, r5, r6, pc}

0002e484 <notify_rx_disable>:
{
   2e484:	b510      	push	{r4, lr}
   2e486:	b086      	sub	sp, #24
   2e488:	4604      	mov	r4, r0
	struct uart_event evt = {
   2e48a:	2214      	movs	r2, #20
   2e48c:	2100      	movs	r1, #0
   2e48e:	a801      	add	r0, sp, #4
   2e490:	f002 f8a7 	bl	305e2 <memset>
   2e494:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2e496:	4620      	mov	r0, r4
   2e498:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2e49a:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2e49e:	f7ff ffb9 	bl	2e414 <user_callback>
}
   2e4a2:	b006      	add	sp, #24
   2e4a4:	bd10      	pop	{r4, pc}

0002e4a6 <uarte_nrfx_rx_buf_rsp>:
{
   2e4a6:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2e4a8:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e4aa:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e4ac:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2e4ae:	f04f 0020 	mov.w	r0, #32
   2e4b2:	f3ef 8611 	mrs	r6, BASEPRI
   2e4b6:	f380 8812 	msr	BASEPRI_MAX, r0
   2e4ba:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2e4be:	68ec      	ldr	r4, [r5, #12]
   2e4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e4c2:	b198      	cbz	r0, 2e4ec <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2e4c4:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2e4c6:	b9a0      	cbnz	r0, 2e4f2 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2e4c8:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2e4ca:	68ec      	ldr	r4, [r5, #12]
   2e4cc:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e4ce:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2e4d2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2e4d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2e4da:	f042 0220 	orr.w	r2, r2, #32
   2e4de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2e4e2:	f386 8811 	msr	BASEPRI, r6
   2e4e6:	f3bf 8f6f 	isb	sy
}
   2e4ea:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2e4ec:	f06f 000c 	mvn.w	r0, #12
   2e4f0:	e7f7      	b.n	2e4e2 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2e4f2:	f06f 000f 	mvn.w	r0, #15
   2e4f6:	e7f4      	b.n	2e4e2 <uarte_nrfx_rx_buf_rsp+0x3c>

0002e4f8 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2e4f8:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2e4fa:	68d8      	ldr	r0, [r3, #12]
   2e4fc:	b120      	cbz	r0, 2e508 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2e4fe:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2e500:	68db      	ldr	r3, [r3, #12]
	return 0;
   2e502:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2e504:	605a      	str	r2, [r3, #4]
	return 0;
   2e506:	4770      	bx	lr
		return -ENOTSUP;
   2e508:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2e50c:	4770      	bx	lr

0002e50e <uarte_nrfx_poll_in>:
{
   2e50e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2e510:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2e512:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2e514:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2e516:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2e518:	b960      	cbnz	r0, 2e534 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e51a:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e51e:	b164      	cbz	r4, 2e53a <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2e520:	6992      	ldr	r2, [r2, #24]
   2e522:	7812      	ldrb	r2, [r2, #0]
   2e524:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e526:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e52a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e52e:	2201      	movs	r2, #1
   2e530:	601a      	str	r2, [r3, #0]
}
   2e532:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2e534:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e538:	e7fb      	b.n	2e532 <uarte_nrfx_poll_in+0x24>
		return -1;
   2e53a:	f04f 30ff 	mov.w	r0, #4294967295
   2e53e:	e7f8      	b.n	2e532 <uarte_nrfx_poll_in+0x24>

0002e540 <uarte_nrfx_rx_disable>:
{
   2e540:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e542:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e544:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e546:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2e548:	68eb      	ldr	r3, [r5, #12]
   2e54a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e54c:	b1ba      	cbz	r2, 2e57e <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2e54e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2e550:	b153      	cbz	r3, 2e568 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2e552:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2e556:	f023 0320 	bic.w	r3, r3, #32
   2e55a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e55e:	2300      	movs	r3, #0
   2e560:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2e564:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2e568:	68e8      	ldr	r0, [r5, #12]
   2e56a:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2e56c:	f001 ff1a 	bl	303a4 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2e570:	2000      	movs	r0, #0
   2e572:	68eb      	ldr	r3, [r5, #12]
   2e574:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e578:	2301      	movs	r3, #1
   2e57a:	6063      	str	r3, [r4, #4]
}
   2e57c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2e57e:	f06f 000d 	mvn.w	r0, #13
   2e582:	e7fb      	b.n	2e57c <uarte_nrfx_rx_disable+0x3c>

0002e584 <setup_tx_cache>:
{
   2e584:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2e586:	68c3      	ldr	r3, [r0, #12]
   2e588:	68da      	ldr	r2, [r3, #12]
   2e58a:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2e58c:	1a52      	subs	r2, r2, r1
   2e58e:	d00f      	beq.n	2e5b0 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2e590:	2a08      	cmp	r2, #8
   2e592:	bf28      	it	cs
   2e594:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2e596:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2e598:	68c3      	ldr	r3, [r0, #12]
   2e59a:	6999      	ldr	r1, [r3, #24]
   2e59c:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2e59e:	68c3      	ldr	r3, [r0, #12]
   2e5a0:	6898      	ldr	r0, [r3, #8]
   2e5a2:	69d9      	ldr	r1, [r3, #28]
   2e5a4:	4401      	add	r1, r0
   2e5a6:	6998      	ldr	r0, [r3, #24]
   2e5a8:	f001 ffe1 	bl	3056e <memcpy>
	return true;
   2e5ac:	2001      	movs	r0, #1
}
   2e5ae:	bd08      	pop	{r3, pc}
		return false;
   2e5b0:	4610      	mov	r0, r2
   2e5b2:	e7fc      	b.n	2e5ae <setup_tx_cache+0x2a>

0002e5b4 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e5b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2e5b6:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e5b8:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2e5ba:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2e5bc:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2e5c0:	b1f1      	cbz	r1, 2e600 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2e5c2:	2100      	movs	r1, #0
   2e5c4:	4618      	mov	r0, r3
   2e5c6:	f002 f80c 	bl	305e2 <memset>
   2e5ca:	4603      	mov	r3, r0
   2e5cc:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e5ce:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e5d2:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e5d4:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2e5d6:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e5da:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2e5de:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e5e2:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e5e4:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e5e8:	2800      	cmp	r0, #0
   2e5ea:	d0fb      	beq.n	2e5e4 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e5ec:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2e5f0:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2e5f4:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2e5f8:	b92b      	cbnz	r3, 2e606 <rx_flush.isra.0+0x52>
			return rx_amount;
   2e5fa:	b2c0      	uxtb	r0, r0
}
   2e5fc:	b002      	add	sp, #8
   2e5fe:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2e600:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2e602:	4669      	mov	r1, sp
   2e604:	e7e3      	b.n	2e5ce <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2e606:	4285      	cmp	r5, r0
   2e608:	d1f7      	bne.n	2e5fa <rx_flush.isra.0+0x46>
   2e60a:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2e60c:	4293      	cmp	r3, r2
   2e60e:	d101      	bne.n	2e614 <rx_flush.isra.0+0x60>
	return 0;
   2e610:	2000      	movs	r0, #0
   2e612:	e7f3      	b.n	2e5fc <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2e614:	f813 1b01 	ldrb.w	r1, [r3], #1
   2e618:	2900      	cmp	r1, #0
   2e61a:	d0f7      	beq.n	2e60c <rx_flush.isra.0+0x58>
   2e61c:	e7ed      	b.n	2e5fa <rx_flush.isra.0+0x46>

0002e61e <async_uart_release>:
{
   2e61e:	b570      	push	{r4, r5, r6, lr}
   2e620:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2e622:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2e624:	f04f 0320 	mov.w	r3, #32
   2e628:	f3ef 8611 	mrs	r6, BASEPRI
   2e62c:	f383 8812 	msr	BASEPRI_MAX, r3
   2e630:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2e634:	68d0      	ldr	r0, [r2, #12]
   2e636:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2e63a:	ea23 0301 	bic.w	r3, r3, r1
   2e63e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2e642:	68d5      	ldr	r5, [r2, #12]
   2e644:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2e648:	b973      	cbnz	r3, 2e668 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2e64a:	2902      	cmp	r1, #2
   2e64c:	d107      	bne.n	2e65e <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2e64e:	2205      	movs	r2, #5
   2e650:	6860      	ldr	r0, [r4, #4]
   2e652:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2e656:	f7ff ffad 	bl	2e5b4 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2e65a:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2e65e:	2200      	movs	r2, #0
	return config->uarte_regs;
   2e660:	6863      	ldr	r3, [r4, #4]
   2e662:	681b      	ldr	r3, [r3, #0]
   2e664:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2e668:	f386 8811 	msr	BASEPRI, r6
   2e66c:	f3bf 8f6f 	isb	sy
}
   2e670:	bd70      	pop	{r4, r5, r6, pc}

0002e672 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2e672:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2e674:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e676:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e67a:	b940      	cbnz	r0, 2e68e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2e67c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e67e:	079b      	lsls	r3, r3, #30
   2e680:	d406      	bmi.n	2e690 <is_tx_ready.isra.0+0x1e>
   2e682:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2e686:	3800      	subs	r0, #0
   2e688:	bf18      	it	ne
   2e68a:	2001      	movne	r0, #1
   2e68c:	4770      	bx	lr
   2e68e:	2001      	movs	r0, #1
}
   2e690:	4770      	bx	lr

0002e692 <start_tx_locked>:
{
   2e692:	b510      	push	{r4, lr}
   2e694:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2e696:	6840      	ldr	r0, [r0, #4]
   2e698:	f7ff ffeb 	bl	2e672 <is_tx_ready.isra.0>
   2e69c:	68cb      	ldr	r3, [r1, #12]
   2e69e:	b918      	cbnz	r0, 2e6a8 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2e6a0:	2201      	movs	r2, #1
   2e6a2:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2e6a6:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2e6a8:	2200      	movs	r2, #0
   2e6aa:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2e6ae:	f04f 32ff 	mov.w	r2, #4294967295
   2e6b2:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e6b4:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2e6b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e6ba:	68cb      	ldr	r3, [r1, #12]
}
   2e6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e6c0:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2e6c4:	f7ff be7e 	b.w	2e3c4 <tx_start>

0002e6c8 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2e6c8:	b510      	push	{r4, lr}
   2e6ca:	4604      	mov	r4, r0
   2e6cc:	2200      	movs	r2, #0
   2e6ce:	2101      	movs	r1, #1
   2e6d0:	200b      	movs	r0, #11
   2e6d2:	f7e2 f9d3 	bl	10a7c <z_arm_irq_priority_set>
   2e6d6:	200b      	movs	r0, #11
   2e6d8:	f7e2 f9a0 	bl	10a1c <arch_irq_enable>
   2e6dc:	4620      	mov	r0, r4
   2e6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e6e2:	f7ef b83f 	b.w	1d764 <uarte_instance_init.constprop.0>

0002e6e6 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2e6e6:	b510      	push	{r4, lr}
   2e6e8:	4604      	mov	r4, r0
   2e6ea:	2200      	movs	r2, #0
   2e6ec:	2101      	movs	r1, #1
   2e6ee:	2008      	movs	r0, #8
   2e6f0:	f7e2 f9c4 	bl	10a7c <z_arm_irq_priority_set>
   2e6f4:	2008      	movs	r0, #8
   2e6f6:	f7e2 f991 	bl	10a1c <arch_irq_enable>
   2e6fa:	4620      	mov	r0, r4
   2e6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e700:	f7ef b830 	b.w	1d764 <uarte_instance_init.constprop.0>

0002e704 <rx_timeout>:
{
   2e704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2e706:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2e708:	68e3      	ldr	r3, [r4, #12]
   2e70a:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2e70e:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2e712:	bb13      	cbnz	r3, 2e75a <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   2e714:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2e716:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2e718:	6873      	ldr	r3, [r6, #4]
   2e71a:	681b      	ldr	r3, [r3, #0]
   2e71c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2e720:	68e3      	ldr	r3, [r4, #12]
   2e722:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2e726:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2e728:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2e72a:	bf1f      	itttt	ne
   2e72c:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2e72e:	68e3      	ldrne	r3, [r4, #12]
   2e730:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2e732:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2e734:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2e736:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2e73a:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2e73c:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2e73e:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2e740:	da0c      	bge.n	2e75c <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2e742:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2e746:	68e3      	ldr	r3, [r4, #12]
   2e748:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2e74c:	4281      	cmp	r1, r0
   2e74e:	d80b      	bhi.n	2e768 <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2e750:	2210      	movs	r2, #16
	return config->uarte_regs;
   2e752:	6873      	ldr	r3, [r6, #4]
   2e754:	681b      	ldr	r3, [r3, #0]
   2e756:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2e75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2e75c:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2e760:	eb02 0c01 	add.w	ip, r2, r1
   2e764:	4584      	cmp	ip, r0
   2e766:	d904      	bls.n	2e772 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2e768:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2e76a:	2d00      	cmp	r5, #0
   2e76c:	ddf0      	ble.n	2e750 <rx_timeout+0x4c>
		clipped = true;
   2e76e:	2701      	movs	r7, #1
   2e770:	e005      	b.n	2e77e <rx_timeout+0x7a>
	if (len > 0) {
   2e772:	2a00      	cmp	r2, #0
   2e774:	d0ec      	beq.n	2e750 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2e776:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2e77a:	428a      	cmp	r2, r1
   2e77c:	da12      	bge.n	2e7a4 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2e77e:	4629      	mov	r1, r5
   2e780:	4630      	mov	r0, r6
   2e782:	f7ff fe4e 	bl	2e422 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2e786:	68e2      	ldr	r2, [r4, #12]
   2e788:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2e78a:	442b      	add	r3, r5
   2e78c:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2e78e:	68e2      	ldr	r2, [r4, #12]
   2e790:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2e792:	442b      	add	r3, r5
   2e794:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2e796:	2f00      	cmp	r7, #0
   2e798:	d0da      	beq.n	2e750 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2e79a:	68e0      	ldr	r0, [r4, #12]
   2e79c:	3080      	adds	r0, #128	; 0x80
   2e79e:	f001 fe01 	bl	303a4 <z_impl_k_timer_stop>
}
   2e7a2:	e7d5      	b.n	2e750 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2e7a4:	1a52      	subs	r2, r2, r1
   2e7a6:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2e7a8:	e7d2      	b.n	2e750 <rx_timeout+0x4c>

0002e7aa <uarte_nrfx_tx_abort>:
{
   2e7aa:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e7ac:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e7ae:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2e7b0:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2e7b2:	68da      	ldr	r2, [r3, #12]
   2e7b4:	6891      	ldr	r1, [r2, #8]
   2e7b6:	b151      	cbz	r1, 2e7ce <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2e7b8:	2400      	movs	r4, #0
   2e7ba:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2e7be:	68d8      	ldr	r0, [r3, #12]
   2e7c0:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2e7c2:	f001 fdef 	bl	303a4 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e7c6:	2301      	movs	r3, #1
	return 0;
   2e7c8:	4620      	mov	r0, r4
   2e7ca:	60eb      	str	r3, [r5, #12]
}
   2e7cc:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2e7ce:	f06f 000d 	mvn.w	r0, #13
   2e7d2:	e7fb      	b.n	2e7cc <uarte_nrfx_tx_abort+0x22>

0002e7d4 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2e7d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2e7d6:	6818      	ldr	r0, [r3, #0]
   2e7d8:	f7ff bfe7 	b.w	2e7aa <uarte_nrfx_tx_abort>

0002e7dc <z_log_msg_static_create.constprop.0>:
   2e7dc:	2300      	movs	r3, #0
   2e7de:	f7e0 b857 	b.w	e890 <z_impl_z_log_msg_static_create>

0002e7e2 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2e7e2:	2000      	movs	r0, #0
   2e7e4:	4770      	bx	lr

0002e7e6 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2e7e6:	b538      	push	{r3, r4, r5, lr}
   2e7e8:	460c      	mov	r4, r1
   2e7ea:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2e7ec:	f7e4 ff10 	bl	13610 <bt_is_ready>
   2e7f0:	b128      	cbz	r0, 2e7fe <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2e7f2:	4629      	mov	r1, r5
   2e7f4:	4620      	mov	r0, r4
}
   2e7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2e7fa:	f7e4 b8cf 	b.w	1299c <bt_hci_le_rand>
}
   2e7fe:	f06f 000a 	mvn.w	r0, #10
   2e802:	bd38      	pop	{r3, r4, r5, pc}

0002e804 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2e804:	4608      	mov	r0, r1
   2e806:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2e808:	4611      	mov	r1, r2
   2e80a:	f7f0 f987 	bl	1eb1c <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2e80e:	2800      	cmp	r0, #0
	}

	return 0;
}
   2e810:	bf18      	it	ne
   2e812:	f06f 0004 	mvnne.w	r0, #4
   2e816:	bd08      	pop	{r3, pc}

0002e818 <entropy_psa_crypto_rng_init>:
{
   2e818:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2e81a:	f000 f911 	bl	2ea40 <psa_crypto_init>
		return -EIO;
   2e81e:	2800      	cmp	r0, #0
}
   2e820:	bf18      	it	ne
   2e822:	f06f 0004 	mvnne.w	r0, #4
   2e826:	bd08      	pop	{r3, pc}

0002e828 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2e828:	4770      	bx	lr

0002e82a <sys_clock_cycle_get_32>:
{
   2e82a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2e82c:	f7ef fdb6 	bl	1e39c <z_nrf_rtc_timer_read>
}
   2e830:	bd08      	pop	{r3, pc}

0002e832 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2e832:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2e834:	6843      	ldr	r3, [r0, #4]
   2e836:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e838:	7a05      	ldrb	r5, [r0, #8]
   2e83a:	6844      	ldr	r4, [r0, #4]
   2e83c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2e840:	42a3      	cmp	r3, r4
   2e842:	d302      	bcc.n	2e84a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2e844:	f06f 0001 	mvn.w	r0, #1
}
   2e848:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2e84a:	795c      	ldrb	r4, [r3, #5]
   2e84c:	428c      	cmp	r4, r1
   2e84e:	d001      	beq.n	2e854 <pinctrl_lookup_state+0x22>
		(*state)++;
   2e850:	3308      	adds	r3, #8
   2e852:	e7f0      	b.n	2e836 <pinctrl_lookup_state+0x4>
			return 0;
   2e854:	2000      	movs	r0, #0
   2e856:	e7f7      	b.n	2e848 <pinctrl_lookup_state+0x16>

0002e858 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e85c:	4615      	mov	r5, r2
   2e85e:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e860:	f04f 0901 	mov.w	r9, #1
   2e864:	b085      	sub	sp, #20
   2e866:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e86a:	45d0      	cmp	r8, sl
   2e86c:	d103      	bne.n	2e876 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2e86e:	2000      	movs	r0, #0
}
   2e870:	b005      	add	sp, #20
   2e872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e876:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2e87a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e87e:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2e882:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2e884:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2e888:	bf08      	it	eq
   2e88a:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2e88e:	2b22      	cmp	r3, #34	; 0x22
   2e890:	f200 8091 	bhi.w	2e9b6 <pinctrl_configure_pins+0x15e>
   2e894:	e8df f003 	tbb	[pc, r3]
   2e898:	38231e12 	.word	0x38231e12
   2e89c:	8f383426 	.word	0x8f383426
   2e8a0:	3b8f8f8f 	.word	0x3b8f8f8f
   2e8a4:	8f8f8f65 	.word	0x8f8f8f65
   2e8a8:	8f8f8f8f 	.word	0x8f8f8f8f
   2e8ac:	71688f8f 	.word	0x71688f8f
   2e8b0:	8f8f7774 	.word	0x8f8f7774
   2e8b4:	83807a8f 	.word	0x83807a8f
   2e8b8:	8986      	.short	0x8986
   2e8ba:	8c          	.byte	0x8c
   2e8bb:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2e8bc:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e8c0:	a803      	add	r0, sp, #12
   2e8c2:	9403      	str	r4, [sp, #12]
   2e8c4:	f7ef ffa2 	bl	1e80c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e8c8:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   2e8ca:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e8cc:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   2e8d0:	6083      	str	r3, [r0, #8]
   2e8d2:	e002      	b.n	2e8da <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   2e8d4:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e8d8:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   2e8da:	46b3      	mov	fp, r6
   2e8dc:	e01e      	b.n	2e91c <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   2e8de:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2e8e2:	e7ed      	b.n	2e8c0 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e8e4:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2e8e6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e8ea:	a803      	add	r0, sp, #12
   2e8ec:	9403      	str	r4, [sp, #12]
   2e8ee:	f7ef ff8d 	bl	1e80c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2e8f2:	9b03      	ldr	r3, [sp, #12]
   2e8f4:	f04f 0b01 	mov.w	fp, #1
   2e8f8:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   2e8fc:	60c3      	str	r3, [r0, #12]
   2e8fe:	e00d      	b.n	2e91c <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2e900:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2e904:	2601      	movs	r6, #1
   2e906:	e7f0      	b.n	2e8ea <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2e908:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2e90c:	e7e4      	b.n	2e8d8 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2e90e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2e912:	2f00      	cmp	r7, #0
   2e914:	d1e0      	bne.n	2e8d8 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e916:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   2e918:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e91a:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e91c:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e920:	a803      	add	r0, sp, #12
   2e922:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e926:	2a00      	cmp	r2, #0
   2e928:	bf1c      	itt	ne
   2e92a:	2601      	movne	r6, #1
   2e92c:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e930:	9301      	str	r3, [sp, #4]
   2e932:	9403      	str	r4, [sp, #12]
   2e934:	f7ef ff6a 	bl	1e80c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e938:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e93a:	9b01      	ldr	r3, [sp, #4]
   2e93c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e940:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e944:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2e948:	023b      	lsls	r3, r7, #8
   2e94a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2e94e:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e952:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   2e956:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2e958:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2e95c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e960:	e783      	b.n	2e86a <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2e962:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2e966:	e7d4      	b.n	2e912 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2e968:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2e96c:	f8da 3000 	ldr.w	r3, [sl]
   2e970:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2e974:	2b00      	cmp	r3, #0
   2e976:	d0c5      	beq.n	2e904 <pinctrl_configure_pins+0xac>
   2e978:	e7a2      	b.n	2e8c0 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2e97a:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2e97e:	e7f5      	b.n	2e96c <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2e980:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2e984:	e7f2      	b.n	2e96c <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2e986:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2e98a:	e7ef      	b.n	2e96c <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2e98c:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e990:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e992:	f04f 0b00 	mov.w	fp, #0
   2e996:	e7c1      	b.n	2e91c <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2e998:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2e99c:	e790      	b.n	2e8c0 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2e99e:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   2e9a2:	e7f5      	b.n	2e990 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2e9a4:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2e9a8:	e7f2      	b.n	2e990 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2e9aa:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2e9ae:	e7ef      	b.n	2e990 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2e9b0:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2e9b4:	e7ec      	b.n	2e990 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   2e9b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e9ba:	e759      	b.n	2e870 <pinctrl_configure_pins+0x18>

0002e9bc <mbox_nrf_register_callback>:
{
   2e9bc:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2e9be:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2e9c0:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2e9c2:	bf9f      	itttt	ls
   2e9c4:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2e9c8:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2e9cc:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2e9ce:	2000      	movls	r0, #0
		return -EINVAL;
   2e9d0:	bf88      	it	hi
   2e9d2:	f06f 0015 	mvnhi.w	r0, #21
}
   2e9d6:	bd10      	pop	{r4, pc}

0002e9d8 <mbox_nrf_mtu_get>:
}
   2e9d8:	2000      	movs	r0, #0
   2e9da:	4770      	bx	lr

0002e9dc <mbox_nrf_max_channels_get>:
}
   2e9dc:	2010      	movs	r0, #16
   2e9de:	4770      	bx	lr

0002e9e0 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2e9e0:	2000      	movs	r0, #0
   2e9e2:	4770      	bx	lr

0002e9e4 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2e9e4:	2300      	movs	r3, #0
{
   2e9e6:	b570      	push	{r4, r5, r6, lr}
   2e9e8:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   2e9ea:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2e9ee:	ab03      	add	r3, sp, #12
   2e9f0:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2e9f2:	2304      	movs	r3, #4
{
   2e9f4:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2e9f6:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2e9f8:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2e9fa:	b169      	cbz	r1, 2ea18 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   2e9fc:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2e9fe:	680b      	ldr	r3, [r1, #0]
   2ea00:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2ea02:	684b      	ldr	r3, [r1, #4]
   2ea04:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2ea06:	2101      	movs	r1, #1
   2ea08:	2041      	movs	r0, #65	; 0x41
   2ea0a:	f7f0 f8c5 	bl	1eb98 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2ea0e:	1e05      	subs	r5, r0, #0
   2ea10:	dc04      	bgt.n	2ea1c <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2ea12:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   2ea14:	b008      	add	sp, #32
   2ea16:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2ea18:	2601      	movs	r6, #1
   2ea1a:	e7f4      	b.n	2ea06 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   2ea1c:	1e23      	subs	r3, r4, #0
   2ea1e:	bf18      	it	ne
   2ea20:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2ea22:	2100      	movs	r1, #0
   2ea24:	e9cd 4300 	strd	r4, r3, [sp]
   2ea28:	aa04      	add	r2, sp, #16
   2ea2a:	4633      	mov	r3, r6
   2ea2c:	f7f0 f898 	bl	1eb60 <psa_call>
   2ea30:	4604      	mov	r4, r0
    psa_close(handle);
   2ea32:	4628      	mov	r0, r5
   2ea34:	f7f0 f8be 	bl	1ebb4 <psa_close>
    if (status < PSA_SUCCESS) {
   2ea38:	2c00      	cmp	r4, #0
   2ea3a:	dbea      	blt.n	2ea12 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   2ea3c:	4620      	mov	r0, r4
   2ea3e:	e7e9      	b.n	2ea14 <tfm_platform_ioctl+0x30>

0002ea40 <psa_crypto_init>:
}
   2ea40:	2000      	movs	r0, #0
   2ea42:	4770      	bx	lr

0002ea44 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   2ea44:	b510      	push	{r4, lr}
   2ea46:	b088      	sub	sp, #32
   2ea48:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2ea4a:	ab05      	add	r3, sp, #20
   2ea4c:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2ea4e:	230c      	movs	r3, #12
   2ea50:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2ea52:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   2ea54:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2ea58:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2ea5c:	eb0d 0103 	add.w	r1, sp, r3
   2ea60:	aa03      	add	r2, sp, #12
   2ea62:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   2ea64:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2ea68:	f7ff ffbc 	bl	2e9e4 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2ea6c:	9b00      	ldr	r3, [sp, #0]
   2ea6e:	6023      	str	r3, [r4, #0]

	return ret;
}
   2ea70:	b008      	add	sp, #32
   2ea72:	bd10      	pop	{r4, pc}

0002ea74 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   2ea74:	2300      	movs	r3, #0
{
   2ea76:	b510      	push	{r4, lr}
   2ea78:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2ea7a:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   2ea7e:	ab05      	add	r3, sp, #20
   2ea80:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2ea82:	230c      	movs	r3, #12
   2ea84:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2ea86:	2304      	movs	r3, #4
{
   2ea88:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2ea8a:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2ea8c:	aa03      	add	r2, sp, #12
   2ea8e:	eb0d 0103 	add.w	r1, sp, r3
   2ea92:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   2ea94:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2ea96:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2ea9a:	f7ff ffa3 	bl	2e9e4 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2ea9e:	9b00      	ldr	r3, [sp, #0]
   2eaa0:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   2eaa2:	b008      	add	sp, #32
   2eaa4:	bd10      	pop	{r4, pc}

0002eaa6 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2eaa6:	f7f0 b893 	b.w	1ebd0 <SystemCoreClockUpdate>

0002eaaa <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2eaaa:	4700      	bx	r0

0002eaac <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2eaac:	f001 bc48 	b.w	30340 <z_impl_k_busy_wait>

0002eab0 <nrf_gpio_pin_present_check>:
    switch (port)
   2eab0:	0943      	lsrs	r3, r0, #5
   2eab2:	d00b      	beq.n	2eacc <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2eab4:	2b01      	cmp	r3, #1
   2eab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2eaba:	bf18      	it	ne
   2eabc:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2eabe:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2eac2:	fa23 f000 	lsr.w	r0, r3, r0
}
   2eac6:	f000 0001 	and.w	r0, r0, #1
   2eaca:	4770      	bx	lr
    switch (port)
   2eacc:	f04f 33ff 	mov.w	r3, #4294967295
   2ead0:	e7f5      	b.n	2eabe <nrf_gpio_pin_present_check+0xe>

0002ead2 <pin_is_task_output>:
{
   2ead2:	b508      	push	{r3, lr}
   2ead4:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2ead6:	f7f0 fafd 	bl	1f0d4 <pin_is_output>
   2eada:	b110      	cbz	r0, 2eae2 <pin_is_task_output+0x10>
   2eadc:	4610      	mov	r0, r2
   2eade:	f7f0 fae3 	bl	1f0a8 <pin_in_use_by_te>
}
   2eae2:	f000 0001 	and.w	r0, r0, #1
   2eae6:	bd08      	pop	{r3, pc}

0002eae8 <nrf_gpio_reconfigure>:
{
   2eae8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2eaec:	4617      	mov	r7, r2
   2eaee:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2eaf2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2eaf4:	a801      	add	r0, sp, #4
{
   2eaf6:	460c      	mov	r4, r1
   2eaf8:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2eafa:	f7f0 fb6f 	bl	1f1dc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2eafe:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2eb00:	1e39      	subs	r1, r7, #0
   2eb02:	bf18      	it	ne
   2eb04:	2101      	movne	r1, #1
   2eb06:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2eb0a:	1e23      	subs	r3, r4, #0
   2eb0c:	bf18      	it	ne
   2eb0e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eb10:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2eb12:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eb16:	bf14      	ite	ne
   2eb18:	210c      	movne	r1, #12
   2eb1a:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2eb1c:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2eb1e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2eb22:	bf14      	ite	ne
   2eb24:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   2eb28:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2eb2a:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eb2e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2eb32:	bf14      	ite	ne
   2eb34:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2eb38:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2eb3a:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2eb3e:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2eb40:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2eb44:	b104      	cbz	r4, 2eb48 <nrf_gpio_reconfigure+0x60>
   2eb46:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2eb48:	b10f      	cbz	r7, 2eb4e <nrf_gpio_reconfigure+0x66>
   2eb4a:	783f      	ldrb	r7, [r7, #0]
   2eb4c:	007f      	lsls	r7, r7, #1
   2eb4e:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2eb50:	b10e      	cbz	r6, 2eb56 <nrf_gpio_reconfigure+0x6e>
   2eb52:	7836      	ldrb	r6, [r6, #0]
   2eb54:	00b6      	lsls	r6, r6, #2
   2eb56:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2eb58:	b18d      	cbz	r5, 2eb7e <nrf_gpio_reconfigure+0x96>
   2eb5a:	7829      	ldrb	r1, [r5, #0]
   2eb5c:	0209      	lsls	r1, r1, #8
   2eb5e:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2eb60:	f1b8 0f00 	cmp.w	r8, #0
   2eb64:	d003      	beq.n	2eb6e <nrf_gpio_reconfigure+0x86>
   2eb66:	f898 8000 	ldrb.w	r8, [r8]
   2eb6a:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2eb6e:	4321      	orrs	r1, r4
   2eb70:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2eb74:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2eb78:	b002      	add	sp, #8
   2eb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2eb7e:	4629      	mov	r1, r5
   2eb80:	e7ed      	b.n	2eb5e <nrf_gpio_reconfigure+0x76>

0002eb82 <nrf_gpio_cfg_sense_set>:
{
   2eb82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2eb84:	f10d 030f 	add.w	r3, sp, #15
   2eb88:	9301      	str	r3, [sp, #4]
   2eb8a:	2300      	movs	r3, #0
{
   2eb8c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2eb90:	461a      	mov	r2, r3
   2eb92:	4619      	mov	r1, r3
   2eb94:	9300      	str	r3, [sp, #0]
   2eb96:	f7ff ffa7 	bl	2eae8 <nrf_gpio_reconfigure>
}
   2eb9a:	b005      	add	sp, #20
   2eb9c:	f85d fb04 	ldr.w	pc, [sp], #4

0002eba0 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2eba0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2eba4:	4770      	bx	lr

0002eba6 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2eba6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2ebaa:	4770      	bx	lr

0002ebac <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2ebac:	f44f 7080 	mov.w	r0, #256	; 0x100
   2ebb0:	4770      	bx	lr

0002ebb2 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   2ebb2:	2100      	movs	r1, #0
   2ebb4:	f7f1 b864 	b.w	1fc80 <nrf_gpio_cfg.constprop.0>

0002ebb8 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2ebb8:	2302      	movs	r3, #2
   2ebba:	f7f0 bf9d 	b.w	1faf8 <qspi_xfer>

0002ebbe <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2ebbe:	2303      	movs	r3, #3
   2ebc0:	f7f0 bf9a 	b.w	1faf8 <qspi_xfer>

0002ebc4 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2ebc4:	2100      	movs	r1, #0
   2ebc6:	2002      	movs	r0, #2
   2ebc8:	f7f1 babc 	b.w	20144 <nrfx_qspi_erase>

0002ebcc <nrf_gpio_pin_clear>:
{
   2ebcc:	b507      	push	{r0, r1, r2, lr}
   2ebce:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ebd0:	a801      	add	r0, sp, #4
   2ebd2:	f7f1 fb31 	bl	20238 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2ebd6:	2301      	movs	r3, #1
   2ebd8:	9a01      	ldr	r2, [sp, #4]
   2ebda:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2ebdc:	60c3      	str	r3, [r0, #12]
}
   2ebde:	b003      	add	sp, #12
   2ebe0:	f85d fb04 	ldr.w	pc, [sp], #4

0002ebe4 <nrf_gpio_pin_set>:
{
   2ebe4:	b507      	push	{r0, r1, r2, lr}
   2ebe6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ebe8:	a801      	add	r0, sp, #4
   2ebea:	f7f1 fb25 	bl	20238 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2ebee:	2301      	movs	r3, #1
   2ebf0:	9a01      	ldr	r2, [sp, #4]
   2ebf2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2ebf4:	6083      	str	r3, [r0, #8]
}
   2ebf6:	b003      	add	sp, #12
   2ebf8:	f85d fb04 	ldr.w	pc, [sp], #4

0002ebfc <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   2ebfc:	7f83      	ldrb	r3, [r0, #30]
   2ebfe:	075a      	lsls	r2, r3, #29
   2ec00:	d40b      	bmi.n	2ec1a <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ec02:	7fc0      	ldrb	r0, [r0, #31]
   2ec04:	28ff      	cmp	r0, #255	; 0xff
   2ec06:	d008      	beq.n	2ec1a <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   2ec08:	079b      	lsls	r3, r3, #30
   2ec0a:	bf58      	it	pl
   2ec0c:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   2ec10:	b909      	cbnz	r1, 2ec16 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   2ec12:	f7ff bfdb 	b.w	2ebcc <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2ec16:	f7ff bfe5 	b.w	2ebe4 <nrf_gpio_pin_set>
}
   2ec1a:	4770      	bx	lr

0002ec1c <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2ec1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ec20:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ec22:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2ec24:	4698      	mov	r8, r3
   2ec26:	460f      	mov	r7, r1
   2ec28:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ec2a:	f7f1 fb05 	bl	20238 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ec2e:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2ec30:	f89d 4020 	ldrb.w	r4, [sp, #32]
   2ec34:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2ec38:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ec3a:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ec3e:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   2ec42:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ec46:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ec4a:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2ec4e:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   2ec50:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   2ec54:	b002      	add	sp, #8
   2ec56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ec5a <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2ec5a:	1c43      	adds	r3, r0, #1
{
   2ec5c:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2ec5e:	d005      	beq.n	2ec6c <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   2ec60:	2300      	movs	r3, #0
   2ec62:	2201      	movs	r2, #1
   2ec64:	4619      	mov	r1, r3
   2ec66:	9300      	str	r3, [sp, #0]
   2ec68:	f7ff ffd8 	bl	2ec1c <nrf_gpio_cfg.constprop.0>
}
   2ec6c:	b003      	add	sp, #12
   2ec6e:	f85d fb04 	ldr.w	pc, [sp], #4

0002ec72 <metal_device_open>:
{
   2ec72:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ec74:	460c      	mov	r4, r1
   2ec76:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2ec78:	4606      	mov	r6, r0
   2ec7a:	b918      	cbnz	r0, 2ec84 <metal_device_open+0x12>
		return -EINVAL;
   2ec7c:	f06f 0015 	mvn.w	r0, #21
}
   2ec80:	b002      	add	sp, #8
   2ec82:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   2ec84:	f7da fb7f 	bl	9386 <strlen>
   2ec88:	2800      	cmp	r0, #0
   2ec8a:	d0f7      	beq.n	2ec7c <metal_device_open+0xa>
   2ec8c:	2c00      	cmp	r4, #0
   2ec8e:	d0f5      	beq.n	2ec7c <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   2ec90:	4620      	mov	r0, r4
   2ec92:	f7da fb78 	bl	9386 <strlen>
   2ec96:	2800      	cmp	r0, #0
   2ec98:	d0f0      	beq.n	2ec7c <metal_device_open+0xa>
   2ec9a:	2d00      	cmp	r5, #0
   2ec9c:	d0ee      	beq.n	2ec7c <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   2ec9e:	4630      	mov	r0, r6
   2eca0:	a901      	add	r1, sp, #4
   2eca2:	f7f1 fddf 	bl	20864 <metal_bus_find>
	if (error)
   2eca6:	2800      	cmp	r0, #0
   2eca8:	d1ea      	bne.n	2ec80 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   2ecaa:	9801      	ldr	r0, [sp, #4]
   2ecac:	6883      	ldr	r3, [r0, #8]
   2ecae:	b12b      	cbz	r3, 2ecbc <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2ecb0:	462a      	mov	r2, r5
   2ecb2:	4621      	mov	r1, r4
}
   2ecb4:	b002      	add	sp, #8
   2ecb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2ecba:	4718      	bx	r3
		return -ENODEV;
   2ecbc:	f06f 0012 	mvn.w	r0, #18
   2ecc0:	e7de      	b.n	2ec80 <metal_device_open+0xe>

0002ecc2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   2ecc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ecc6:	b089      	sub	sp, #36	; 0x24
   2ecc8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2ecca:	4604      	mov	r4, r0
   2eccc:	4689      	mov	r9, r1
   2ecce:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   2ecd0:	2100      	movs	r1, #0
   2ecd2:	2220      	movs	r2, #32
   2ecd4:	4668      	mov	r0, sp
{
   2ecd6:	461f      	mov	r7, r3
   2ecd8:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   2ecda:	f001 fc82 	bl	305e2 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   2ecde:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   2ece0:	bf97      	itett	ls
   2ece2:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   2ece4:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   2ece8:	40b3      	lslls	r3, r6
   2ecea:	f103 33ff 	addls.w	r3, r3, #4294967295
   2ecee:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   2ecf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   2ecf2:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   2ecf6:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   2ecfa:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   2ecfc:	3418      	adds	r4, #24
   2ecfe:	b145      	cbz	r5, 2ed12 <metal_io_init+0x50>
   2ed00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2ed02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2ed04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2ed08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   2ed0c:	b009      	add	sp, #36	; 0x24
   2ed0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   2ed12:	466d      	mov	r5, sp
   2ed14:	e7f4      	b.n	2ed00 <metal_io_init+0x3e>

0002ed16 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   2ed16:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ed18:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2ed1a:	1c66      	adds	r6, r4, #1
   2ed1c:	d031      	beq.n	2ed82 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ed1e:	6885      	ldr	r5, [r0, #8]
   2ed20:	42a9      	cmp	r1, r5
   2ed22:	d22e      	bcs.n	2ed82 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   2ed24:	1864      	adds	r4, r4, r1
   2ed26:	d02c      	beq.n	2ed82 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ed28:	185e      	adds	r6, r3, r1
   2ed2a:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2ed2c:	bf88      	it	hi
   2ed2e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   2ed30:	6a05      	ldr	r5, [r0, #32]
   2ed32:	b135      	cbz	r5, 2ed42 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   2ed34:	9300      	str	r3, [sp, #0]
   2ed36:	2305      	movs	r3, #5
   2ed38:	47a8      	blx	r5
   2ed3a:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   2ed3c:	4618      	mov	r0, r3
   2ed3e:	b002      	add	sp, #8
   2ed40:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   2ed42:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2ed46:	4619      	mov	r1, r3
   2ed48:	1aa4      	subs	r4, r4, r2
   2ed4a:	1910      	adds	r0, r2, r4
   2ed4c:	b119      	cbz	r1, 2ed56 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   2ed4e:	ea40 0502 	orr.w	r5, r0, r2
   2ed52:	07ad      	lsls	r5, r5, #30
   2ed54:	d10a      	bne.n	2ed6c <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2ed56:	2903      	cmp	r1, #3
   2ed58:	dc0d      	bgt.n	2ed76 <metal_io_block_read+0x60>
   2ed5a:	3801      	subs	r0, #1
   2ed5c:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   2ed5e:	428a      	cmp	r2, r1
   2ed60:	d0ec      	beq.n	2ed3c <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   2ed62:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   2ed66:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2ed6a:	e7f8      	b.n	2ed5e <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   2ed6c:	7800      	ldrb	r0, [r0, #0]
			len--;
   2ed6e:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   2ed70:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   2ed74:	e7e9      	b.n	2ed4a <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2ed76:	f850 4b04 	ldr.w	r4, [r0], #4
   2ed7a:	3904      	subs	r1, #4
   2ed7c:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   2ed80:	e7e9      	b.n	2ed56 <metal_io_block_read+0x40>
		return -ERANGE;
   2ed82:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2ed86:	e7d9      	b.n	2ed3c <metal_io_block_read+0x26>

0002ed88 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2ed88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ed8a:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2ed8c:	1c65      	adds	r5, r4, #1
   2ed8e:	d032      	beq.n	2edf6 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ed90:	6885      	ldr	r5, [r0, #8]
   2ed92:	42a9      	cmp	r1, r5
   2ed94:	d22f      	bcs.n	2edf6 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2ed96:	1864      	adds	r4, r4, r1
   2ed98:	d02d      	beq.n	2edf6 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ed9a:	185e      	adds	r6, r3, r1
   2ed9c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2ed9e:	bf88      	it	hi
   2eda0:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2eda2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2eda4:	b1cd      	cbz	r5, 2edda <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   2eda6:	9300      	str	r3, [sp, #0]
   2eda8:	2305      	movs	r3, #5
   2edaa:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2edac:	b002      	add	sp, #8
   2edae:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   2edb0:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   2edb4:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2edb6:	7005      	strb	r5, [r0, #0]
			len--;
   2edb8:	4615      	mov	r5, r2
   2edba:	18a0      	adds	r0, r4, r2
		while ( len && (
   2edbc:	b119      	cbz	r1, 2edc6 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   2edbe:	ea40 0602 	orr.w	r6, r0, r2
   2edc2:	07b6      	lsls	r6, r6, #30
   2edc4:	d1f4      	bne.n	2edb0 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2edc6:	2903      	cmp	r1, #3
   2edc8:	dc0a      	bgt.n	2ede0 <metal_io_block_write+0x58>
   2edca:	3d01      	subs	r5, #1
   2edcc:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   2edce:	4288      	cmp	r0, r1
   2edd0:	d10c      	bne.n	2edec <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   2edd2:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2edd6:	4618      	mov	r0, r3
   2edd8:	e7e8      	b.n	2edac <metal_io_block_write+0x24>
   2edda:	4619      	mov	r1, r3
   2eddc:	1aa4      	subs	r4, r4, r2
   2edde:	e7eb      	b.n	2edb8 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2ede0:	f855 2b04 	ldr.w	r2, [r5], #4
   2ede4:	3904      	subs	r1, #4
   2ede6:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   2edea:	e7ec      	b.n	2edc6 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   2edec:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   2edf0:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   2edf4:	e7eb      	b.n	2edce <metal_io_block_write+0x46>
		return -ERANGE;
   2edf6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2edfa:	e7d7      	b.n	2edac <metal_io_block_write+0x24>

0002edfc <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2edfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2edfe:	6804      	ldr	r4, [r0, #0]
   2ee00:	461d      	mov	r5, r3
		: NULL);
   2ee02:	1c66      	adds	r6, r4, #1
   2ee04:	d02b      	beq.n	2ee5e <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ee06:	6883      	ldr	r3, [r0, #8]
   2ee08:	4299      	cmp	r1, r3
   2ee0a:	d228      	bcs.n	2ee5e <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   2ee0c:	1864      	adds	r4, r4, r1
   2ee0e:	d026      	beq.n	2ee5e <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ee10:	186e      	adds	r6, r5, r1
   2ee12:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   2ee14:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   2ee16:	bf88      	it	hi
   2ee18:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   2ee1a:	b12e      	cbz	r6, 2ee28 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   2ee1c:	2305      	movs	r3, #5
   2ee1e:	9500      	str	r5, [sp, #0]
   2ee20:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   2ee22:	4628      	mov	r0, r5
}
   2ee24:	b002      	add	sp, #8
   2ee26:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   2ee28:	4621      	mov	r1, r4
   2ee2a:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2ee2c:	b94b      	cbnz	r3, 2ee42 <metal_io_block_set+0x46>
   2ee2e:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   2ee30:	4299      	cmp	r1, r3
   2ee32:	d111      	bne.n	2ee58 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   2ee34:	f3bf 8f5b 	dmb	ish
   2ee38:	e7f3      	b.n	2ee22 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   2ee3a:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2ee3e:	3b01      	subs	r3, #1
   2ee40:	e7f4      	b.n	2ee2c <metal_io_block_set+0x30>
   2ee42:	0788      	lsls	r0, r1, #30
   2ee44:	d1f9      	bne.n	2ee3a <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2ee46:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   2ee4a:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2ee4c:	2b03      	cmp	r3, #3
   2ee4e:	ddee      	ble.n	2ee2e <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   2ee50:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2ee54:	3b04      	subs	r3, #4
   2ee56:	e7f9      	b.n	2ee4c <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2ee58:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   2ee5c:	e7e8      	b.n	2ee30 <metal_io_block_set+0x34>
		return -ERANGE;
   2ee5e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2ee62:	e7df      	b.n	2ee24 <metal_io_block_set+0x28>

0002ee64 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2ee64:	2000      	movs	r0, #0
   2ee66:	4770      	bx	lr

0002ee68 <lfs_pair_isnull>:
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   2ee68:	6803      	ldr	r3, [r0, #0]
   2ee6a:	3301      	adds	r3, #1
   2ee6c:	d004      	beq.n	2ee78 <lfs_pair_isnull+0x10>
   2ee6e:	6840      	ldr	r0, [r0, #4]
   2ee70:	1c43      	adds	r3, r0, #1
   2ee72:	4258      	negs	r0, r3
   2ee74:	4158      	adcs	r0, r3
   2ee76:	4770      	bx	lr
   2ee78:	2001      	movs	r0, #1
}
   2ee7a:	4770      	bx	lr

0002ee7c <lfs_pair_cmp>:
        const lfs_block_t pairb[2]) {
   2ee7c:	b510      	push	{r4, lr}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   2ee7e:	6804      	ldr	r4, [r0, #0]
   2ee80:	680b      	ldr	r3, [r1, #0]
   2ee82:	429c      	cmp	r4, r3
   2ee84:	d009      	beq.n	2ee9a <lfs_pair_cmp+0x1e>
   2ee86:	6840      	ldr	r0, [r0, #4]
   2ee88:	6849      	ldr	r1, [r1, #4]
   2ee8a:	4288      	cmp	r0, r1
   2ee8c:	d005      	beq.n	2ee9a <lfs_pair_cmp+0x1e>
   2ee8e:	428c      	cmp	r4, r1
   2ee90:	d003      	beq.n	2ee9a <lfs_pair_cmp+0x1e>
   2ee92:	1a18      	subs	r0, r3, r0
   2ee94:	bf18      	it	ne
   2ee96:	2001      	movne	r0, #1
}
   2ee98:	bd10      	pop	{r4, pc}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   2ee9a:	2000      	movs	r0, #0
   2ee9c:	e7fc      	b.n	2ee98 <lfs_pair_cmp+0x1c>

0002ee9e <lfs_tag_dsize>:
    return ((int32_t)(tag << 22) >> 22) == -1;
   2ee9e:	f340 0309 	sbfx	r3, r0, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   2eea2:	f1b3 3fff 	cmp.w	r3, #4294967295
   2eea6:	bf08      	it	eq
   2eea8:	3001      	addeq	r0, #1
    return tag & 0x000003ff;
   2eeaa:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
   2eeae:	3004      	adds	r0, #4
   2eeb0:	4770      	bx	lr

0002eeb2 <lfs_gstate_xor>:
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
   2eeb2:	b510      	push	{r4, lr}
   2eeb4:	1f03      	subs	r3, r0, #4
   2eeb6:	3904      	subs	r1, #4
   2eeb8:	3008      	adds	r0, #8
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   2eeba:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2eebe:	f851 4f04 	ldr.w	r4, [r1, #4]!
    for (int i = 0; i < 3; i++) {
   2eec2:	4283      	cmp	r3, r0
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   2eec4:	ea82 0204 	eor.w	r2, r2, r4
   2eec8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
   2eeca:	d1f6      	bne.n	2eeba <lfs_gstate_xor+0x8>
}
   2eecc:	bd10      	pop	{r4, pc}

0002eece <lfs_gstate_hasmovehere>:
        const lfs_block_t *pair) {
   2eece:	b508      	push	{r3, lr}
    return (tag & 0x70000000) >> 20;
   2eed0:	6803      	ldr	r3, [r0, #0]
        const lfs_block_t *pair) {
   2eed2:	4602      	mov	r2, r0
    return (tag & 0x70000000) >> 20;
   2eed4:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   2eed6:	f413 60e0 	ands.w	r0, r3, #1792	; 0x700
   2eeda:	d005      	beq.n	2eee8 <lfs_gstate_hasmovehere+0x1a>
   2eedc:	1d10      	adds	r0, r2, #4
   2eede:	f7ff ffcd 	bl	2ee7c <lfs_pair_cmp>
   2eee2:	fab0 f080 	clz	r0, r0
   2eee6:	0940      	lsrs	r0, r0, #5
}
   2eee8:	bd08      	pop	{r3, pc}

0002eeea <lfs_mlist_isopen>:
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
   2eeea:	b900      	cbnz	r0, 2eeee <lfs_mlist_isopen+0x4>
   2eeec:	4770      	bx	lr
        if (*p == (struct lfs_mlist*)node) {
   2eeee:	4288      	cmp	r0, r1
   2eef0:	d001      	beq.n	2eef6 <lfs_mlist_isopen+0xc>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
   2eef2:	6800      	ldr	r0, [r0, #0]
   2eef4:	e7f9      	b.n	2eeea <lfs_mlist_isopen>
            return true;
   2eef6:	2001      	movs	r0, #1
}
   2eef8:	4770      	bx	lr

0002eefa <lfs_alloc_lookahead>:
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
   2eefa:	b510      	push	{r4, lr}
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   2eefc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2eefe:	6a1a      	ldr	r2, [r3, #32]
   2ef00:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2ef02:	1ad3      	subs	r3, r2, r3
   2ef04:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->free.off)
   2ef06:	fbb1 f3f2 	udiv	r3, r1, r2
   2ef0a:	fb02 1113 	mls	r1, r2, r3, r1
    if (off < lfs->free.size) {
   2ef0e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2ef10:	428b      	cmp	r3, r1
   2ef12:	d90a      	bls.n	2ef2a <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
   2ef14:	2201      	movs	r2, #1
   2ef16:	6e40      	ldr	r0, [r0, #100]	; 0x64
   2ef18:	094c      	lsrs	r4, r1, #5
   2ef1a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   2ef1e:	f001 011f 	and.w	r1, r1, #31
   2ef22:	408a      	lsls	r2, r1
   2ef24:	4313      	orrs	r3, r2
   2ef26:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
}
   2ef2a:	2000      	movs	r0, #0
   2ef2c:	bd10      	pop	{r4, pc}

0002ef2e <lfs_dir_commit_size>:
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
   2ef2e:	4602      	mov	r2, r0
   2ef30:	b508      	push	{r3, lr}
    *size += lfs_tag_dsize(tag);
   2ef32:	4608      	mov	r0, r1
   2ef34:	f7ff ffb3 	bl	2ee9e <lfs_tag_dsize>
   2ef38:	6813      	ldr	r3, [r2, #0]
   2ef3a:	4403      	add	r3, r0
   2ef3c:	6013      	str	r3, [r2, #0]
}
   2ef3e:	2000      	movs	r0, #0
   2ef40:	bd08      	pop	{r3, pc}

0002ef42 <lfs_fs_size_count>:
    *size += 1;
   2ef42:	6803      	ldr	r3, [r0, #0]
   2ef44:	3301      	adds	r3, #1
   2ef46:	6003      	str	r3, [r0, #0]
}
   2ef48:	2000      	movs	r0, #0
   2ef4a:	4770      	bx	lr

0002ef4c <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
   2ef4c:	b510      	push	{r4, lr}
    if (!lfs->cfg->read_buffer) {
   2ef4e:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_deinit(lfs_t *lfs) {
   2ef50:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
   2ef52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2ef54:	b913      	cbnz	r3, 2ef5c <lfs_deinit+0x10>

/* Deallocate memory, only used if buffers are not provided to littlefs */
static inline void lfs_free(void *p)
{
#ifndef LFS_NO_MALLOC
	free(p);
   2ef56:	68c0      	ldr	r0, [r0, #12]
   2ef58:	f7f9 fbb4 	bl	286c4 <free>
    if (!lfs->cfg->prog_buffer) {
   2ef5c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2ef5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2ef60:	b913      	cbnz	r3, 2ef68 <lfs_deinit+0x1c>
   2ef62:	69e0      	ldr	r0, [r4, #28]
   2ef64:	f7f9 fbae 	bl	286c4 <free>
    if (!lfs->cfg->lookahead_buffer) {
   2ef68:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2ef6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2ef6c:	b913      	cbnz	r3, 2ef74 <lfs_deinit+0x28>
   2ef6e:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2ef70:	f7f9 fba8 	bl	286c4 <free>
}
   2ef74:	2000      	movs	r0, #0
   2ef76:	bd10      	pop	{r4, pc}

0002ef78 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
   2ef78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return tag & 0x000003ff;
   2ef7a:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
   2ef7e:	9402      	str	r4, [sp, #8]
   2ef80:	9c06      	ldr	r4, [sp, #24]
   2ef82:	9401      	str	r4, [sp, #4]
   2ef84:	2400      	movs	r4, #0
   2ef86:	9400      	str	r4, [sp, #0]
   2ef88:	f7f1 fe88 	bl	20c9c <lfs_dir_getslice>
}
   2ef8c:	b004      	add	sp, #16
   2ef8e:	bd10      	pop	{r4, pc}

0002ef90 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
   2ef90:	b530      	push	{r4, r5, lr}
   2ef92:	4613      	mov	r3, r2
   2ef94:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
   2ef96:	6802      	ldr	r2, [r0, #0]
    int err = lfs_bd_read(lfs,
   2ef98:	2008      	movs	r0, #8
        lfs_tag_t tag, const void *buffer) {
   2ef9a:	b087      	sub	sp, #28
    int err = lfs_bd_read(lfs,
   2ef9c:	ad04      	add	r5, sp, #16
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
   2ef9e:	6e91      	ldr	r1, [r2, #104]	; 0x68
    int err = lfs_bd_read(lfs,
   2efa0:	9003      	str	r0, [sp, #12]
   2efa2:	9502      	str	r5, [sp, #8]
   2efa4:	6858      	ldr	r0, [r3, #4]
   2efa6:	9001      	str	r0, [sp, #4]
   2efa8:	681b      	ldr	r3, [r3, #0]
   2efaa:	4610      	mov	r0, r2
   2efac:	9300      	str	r3, [sp, #0]
   2efae:	69cb      	ldr	r3, [r1, #28]
   2efb0:	f102 0110 	add.w	r1, r2, #16
   2efb4:	f7f1 fd9a 	bl	20aec <lfs_bd_read>
    if (err) {
   2efb8:	b930      	cbnz	r0, 2efc8 <lfs_fs_parent_match+0x38>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
   2efba:	4628      	mov	r0, r5
   2efbc:	1d21      	adds	r1, r4, #4
   2efbe:	f7ff ff5d 	bl	2ee7c <lfs_pair_cmp>
   2efc2:	3800      	subs	r0, #0
   2efc4:	bf18      	it	ne
   2efc6:	2001      	movne	r0, #1
}
   2efc8:	b007      	add	sp, #28
   2efca:	bd30      	pop	{r4, r5, pc}

0002efcc <lfs_bd_cmp.constprop.0>:
static int lfs_bd_cmp(lfs_t *lfs,
   2efcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efd0:	4607      	mov	r7, r0
   2efd2:	4688      	mov	r8, r1
   2efd4:	4691      	mov	r9, r2
   2efd6:	469a      	mov	sl, r3
    for (lfs_off_t i = 0; i < size; i += diff) {
   2efd8:	2400      	movs	r4, #0
static int lfs_bd_cmp(lfs_t *lfs,
   2efda:	b087      	sub	sp, #28
   2efdc:	9e12      	ldr	r6, [sp, #72]	; 0x48
        int res = lfs_bd_read(lfs,
   2efde:	f10d 0b10 	add.w	fp, sp, #16
    for (lfs_off_t i = 0; i < size; i += diff) {
   2efe2:	42a6      	cmp	r6, r4
   2efe4:	d801      	bhi.n	2efea <lfs_bd_cmp.constprop.0+0x1e>
    return LFS_CMP_EQ;
   2efe6:	2000      	movs	r0, #0
   2efe8:	e01b      	b.n	2f022 <lfs_bd_cmp.constprop.0+0x56>
        diff = lfs_min(size-i, sizeof(dat));
   2efea:	1b35      	subs	r5, r6, r4
	return (a < b) ? a : b;
   2efec:	2d08      	cmp	r5, #8
   2efee:	bf28      	it	cs
   2eff0:	2508      	movcs	r5, #8
        int res = lfs_bd_read(lfs,
   2eff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2eff4:	4642      	mov	r2, r8
   2eff6:	18e3      	adds	r3, r4, r3
   2eff8:	e9cd a300 	strd	sl, r3, [sp]
   2effc:	2100      	movs	r1, #0
   2effe:	4638      	mov	r0, r7
   2f000:	e9cd b502 	strd	fp, r5, [sp, #8]
   2f004:	eba9 0304 	sub.w	r3, r9, r4
   2f008:	f7f1 fd70 	bl	20aec <lfs_bd_read>
        if (res) {
   2f00c:	b948      	cbnz	r0, 2f022 <lfs_bd_cmp.constprop.0+0x56>
        res = memcmp(dat, data + i, diff);
   2f00e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2f010:	462a      	mov	r2, r5
   2f012:	4658      	mov	r0, fp
   2f014:	1919      	adds	r1, r3, r4
   2f016:	f001 fa9a 	bl	3054e <memcmp>
        if (res) {
   2f01a:	2800      	cmp	r0, #0
   2f01c:	d004      	beq.n	2f028 <lfs_bd_cmp.constprop.0+0x5c>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
   2f01e:	da05      	bge.n	2f02c <lfs_bd_cmp.constprop.0+0x60>
   2f020:	2001      	movs	r0, #1
}
   2f022:	b007      	add	sp, #28
   2f024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (lfs_off_t i = 0; i < size; i += diff) {
   2f028:	442c      	add	r4, r5
   2f02a:	e7da      	b.n	2efe2 <lfs_bd_cmp.constprop.0+0x16>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
   2f02c:	2002      	movs	r0, #2
   2f02e:	e7f8      	b.n	2f022 <lfs_bd_cmp.constprop.0+0x56>

0002f030 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
   2f030:	b530      	push	{r4, r5, lr}
   2f032:	4613      	mov	r3, r2
   2f034:	6882      	ldr	r2, [r0, #8]
    return tag & 0x000003ff;
   2f036:	f3c1 0509 	ubfx	r5, r1, #0, #10
   2f03a:	42aa      	cmp	r2, r5
   2f03c:	bf28      	it	cs
   2f03e:	462a      	movcs	r2, r5
        lfs_tag_t tag, const void *buffer) {
   2f040:	b085      	sub	sp, #20
    int res = lfs_bd_cmp(lfs,
   2f042:	9202      	str	r2, [sp, #8]
   2f044:	6841      	ldr	r1, [r0, #4]
        lfs_tag_t tag, const void *buffer) {
   2f046:	4604      	mov	r4, r0
    int res = lfs_bd_cmp(lfs,
   2f048:	9101      	str	r1, [sp, #4]
   2f04a:	6859      	ldr	r1, [r3, #4]
   2f04c:	9100      	str	r1, [sp, #0]
   2f04e:	6801      	ldr	r1, [r0, #0]
   2f050:	681b      	ldr	r3, [r3, #0]
   2f052:	4608      	mov	r0, r1
   2f054:	f7ff ffba 	bl	2efcc <lfs_bd_cmp.constprop.0>
    if (res != LFS_CMP_EQ) {
   2f058:	b928      	cbnz	r0, 2f066 <lfs_dir_find_match+0x36>
    if (name->size != lfs_tag_size(tag)) {
   2f05a:	68a3      	ldr	r3, [r4, #8]
   2f05c:	42ab      	cmp	r3, r5
   2f05e:	d002      	beq.n	2f066 <lfs_dir_find_match+0x36>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   2f060:	bf34      	ite	cc
   2f062:	2001      	movcc	r0, #1
   2f064:	2002      	movcs	r0, #2
}
   2f066:	b005      	add	sp, #20
   2f068:	bd30      	pop	{r4, r5, pc}

0002f06a <z_log_msg_static_create.constprop.0>:
   2f06a:	2300      	movs	r3, #0
   2f06c:	f7df bc10 	b.w	e890 <z_impl_z_log_msg_static_create>

0002f070 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
   2f070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   2f072:	2300      	movs	r3, #0
   2f074:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2f078:	9301      	str	r3, [sp, #4]
   2f07a:	f04f 33ff 	mov.w	r3, #4294967295
   2f07e:	9300      	str	r3, [sp, #0]
   2f080:	f7f2 f8bc 	bl	211fc <lfs_dir_fetchmatch>
}
   2f084:	b005      	add	sp, #20
   2f086:	f85d fb04 	ldr.w	pc, [sp], #4

0002f08a <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   2f08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdir->tail[1] = 1;
   2f08e:	2301      	movs	r3, #1
   2f090:	2400      	movs	r4, #0
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   2f092:	4606      	mov	r6, r0
   2f094:	4688      	mov	r8, r1
   2f096:	4615      	mov	r5, r2
    pdir->tail[1] = 1;
   2f098:	e9c2 4306 	strd	r4, r3, [r2, #24]
    while (!lfs_pair_isnull(pdir->tail)) {
   2f09c:	f102 0718 	add.w	r7, r2, #24
   2f0a0:	4638      	mov	r0, r7
   2f0a2:	f7ff fee1 	bl	2ee68 <lfs_pair_isnull>
   2f0a6:	b110      	cbz	r0, 2f0ae <lfs_fs_pred+0x24>
    return LFS_ERR_NOENT;
   2f0a8:	f06f 0001 	mvn.w	r0, #1
   2f0ac:	e011      	b.n	2f0d2 <lfs_fs_pred+0x48>
        if (cycle >= lfs->cfg->block_count/2) {
   2f0ae:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f0b0:	6a1b      	ldr	r3, [r3, #32]
   2f0b2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   2f0b6:	d20e      	bcs.n	2f0d6 <lfs_fs_pred+0x4c>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
   2f0b8:	4641      	mov	r1, r8
   2f0ba:	4638      	mov	r0, r7
        cycle += 1;
   2f0bc:	3401      	adds	r4, #1
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
   2f0be:	f7ff fedd 	bl	2ee7c <lfs_pair_cmp>
   2f0c2:	b130      	cbz	r0, 2f0d2 <lfs_fs_pred+0x48>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
   2f0c4:	463a      	mov	r2, r7
   2f0c6:	4629      	mov	r1, r5
   2f0c8:	4630      	mov	r0, r6
   2f0ca:	f7ff ffd1 	bl	2f070 <lfs_dir_fetch>
        if (err) {
   2f0ce:	2800      	cmp	r0, #0
   2f0d0:	d0e6      	beq.n	2f0a0 <lfs_fs_pred+0x16>
}
   2f0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LFS_ERR_CORRUPT;
   2f0d6:	f06f 0053 	mvn.w	r0, #83	; 0x53
   2f0da:	e7fa      	b.n	2f0d2 <lfs_fs_pred+0x48>

0002f0dc <lfs_ctz_index.isra.0>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   2f0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   2f0de:	69c6      	ldr	r6, [r0, #28]
    lfs_off_t size = *off;
   2f0e0:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   2f0e2:	3e08      	subs	r6, #8
    if (i == 0) {
   2f0e4:	42b5      	cmp	r5, r6
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   2f0e6:	460f      	mov	r7, r1
    if (i == 0) {
   2f0e8:	d313      	bcc.n	2f112 <lfs_ctz_index.isra.0+0x36>
    lfs_off_t i = size / b;
   2f0ea:	fbb5 f0f6 	udiv	r0, r5, r6
	return __builtin_popcount(a);
   2f0ee:	3801      	subs	r0, #1
   2f0f0:	f7d9 ffde 	bl	90b0 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   2f0f4:	1c84      	adds	r4, r0, #2
   2f0f6:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
   2f0fa:	fbb4 f4f6 	udiv	r4, r4, r6
   2f0fe:	4620      	mov	r0, r4
   2f100:	f7d9 ffd6 	bl	90b0 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
   2f104:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
    return i;
   2f108:	4620      	mov	r0, r4
    *off = size - b*i - 4*lfs_popc(i);
   2f10a:	fb04 5516 	mls	r5, r4, r6, r5
   2f10e:	603d      	str	r5, [r7, #0]
}
   2f110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   2f112:	2000      	movs	r0, #0
   2f114:	e7fc      	b.n	2f110 <lfs_ctz_index.isra.0+0x34>

0002f116 <lfs_ctz_find.constprop.0>:
static int lfs_ctz_find(lfs_t *lfs,
   2f116:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f11a:	b089      	sub	sp, #36	; 0x24
   2f11c:	4606      	mov	r6, r0
   2f11e:	460f      	mov	r7, r1
   2f120:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   2f124:	9205      	str	r2, [sp, #20]
    if (size == 0) {
   2f126:	b94b      	cbnz	r3, 2f13c <lfs_ctz_find.constprop.0+0x26>
        *block = LFS_BLOCK_NULL;
   2f128:	f04f 32ff 	mov.w	r2, #4294967295
   2f12c:	f8c8 2000 	str.w	r2, [r8]
        return 0;
   2f130:	2000      	movs	r0, #0
    *off = pos;
   2f132:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2f134:	6013      	str	r3, [r2, #0]
}
   2f136:	b009      	add	sp, #36	; 0x24
   2f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   2f13c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   2f13e:	3b01      	subs	r3, #1
   2f140:	a907      	add	r1, sp, #28
   2f142:	4620      	mov	r0, r4
   2f144:	9307      	str	r3, [sp, #28]
   2f146:	f7ff ffc9 	bl	2f0dc <lfs_ctz_index.isra.0>
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   2f14a:	a912      	add	r1, sp, #72	; 0x48
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   2f14c:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   2f14e:	4620      	mov	r0, r4
   2f150:	f7ff ffc4 	bl	2f0dc <lfs_ctz_index.isra.0>
        int err = lfs_bd_read(lfs,
   2f154:	f04f 0a04 	mov.w	sl, #4
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   2f158:	4681      	mov	r9, r0
        int err = lfs_bd_read(lfs,
   2f15a:	f10d 0b14 	add.w	fp, sp, #20
    while (current > target) {
   2f15e:	45a9      	cmp	r9, r5
        int err = lfs_bd_read(lfs,
   2f160:	9a05      	ldr	r2, [sp, #20]
    while (current > target) {
   2f162:	d303      	bcc.n	2f16c <lfs_ctz_find.constprop.0+0x56>
    *off = pos;
   2f164:	9b12      	ldr	r3, [sp, #72]	; 0x48
    *block = head;
   2f166:	f8c8 2000 	str.w	r2, [r8]
    return 0;
   2f16a:	e7e1      	b.n	2f130 <lfs_ctz_find.constprop.0+0x1a>
	return __builtin_ctz(a);
   2f16c:	fa95 f3a5 	rbit	r3, r5
                lfs_npw2(current-target+1) - 1,
   2f170:	eba5 0409 	sub.w	r4, r5, r9
	return 32 - __builtin_clz(a-1);
   2f174:	fab4 f484 	clz	r4, r4
	return __builtin_ctz(a);
   2f178:	fab3 f383 	clz	r3, r3
        lfs_size_t skip = lfs_min(
   2f17c:	f1c4 041f 	rsb	r4, r4, #31
	return (a < b) ? a : b;
   2f180:	429c      	cmp	r4, r3
   2f182:	bf28      	it	cs
   2f184:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
   2f186:	00a3      	lsls	r3, r4, #2
   2f188:	e9cd 2300 	strd	r2, r3, [sp]
   2f18c:	2100      	movs	r1, #0
   2f18e:	2304      	movs	r3, #4
   2f190:	463a      	mov	r2, r7
   2f192:	4630      	mov	r0, r6
   2f194:	e9cd ba02 	strd	fp, sl, [sp, #8]
   2f198:	f7f1 fca8 	bl	20aec <lfs_bd_read>
        if (err) {
   2f19c:	2800      	cmp	r0, #0
   2f19e:	d1ca      	bne.n	2f136 <lfs_ctz_find.constprop.0+0x20>
        current -= 1 << skip;
   2f1a0:	2301      	movs	r3, #1
   2f1a2:	40a3      	lsls	r3, r4
   2f1a4:	1aed      	subs	r5, r5, r3
   2f1a6:	e7da      	b.n	2f15e <lfs_ctz_find.constprop.0+0x48>

0002f1a8 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
   2f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f1ac:	b089      	sub	sp, #36	; 0x24
   2f1ae:	4607      	mov	r7, r0
   2f1b0:	e9dd 0a12 	ldrd	r0, sl, [sp, #72]	; 0x48
   2f1b4:	4688      	mov	r8, r1
   2f1b6:	4691      	mov	r9, r2
   2f1b8:	461e      	mov	r6, r3
    if (size == 0) {
   2f1ba:	b1e0      	cbz	r0, 2f1f6 <lfs_ctz_traverse+0x4e>
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   2f1bc:	3801      	subs	r0, #1
   2f1be:	9005      	str	r0, [sp, #20]
   2f1c0:	a905      	add	r1, sp, #20
   2f1c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   2f1c4:	f7ff ff8a 	bl	2f0dc <lfs_ctz_index.isra.0>
   2f1c8:	4604      	mov	r4, r0
        err = lfs_bd_read(lfs,
   2f1ca:	f10d 0b18 	add.w	fp, sp, #24
        int err = cb(data, head);
   2f1ce:	4631      	mov	r1, r6
   2f1d0:	9814      	ldr	r0, [sp, #80]	; 0x50
   2f1d2:	47d0      	blx	sl
        if (err) {
   2f1d4:	b978      	cbnz	r0, 2f1f6 <lfs_ctz_traverse+0x4e>
        if (index == 0) {
   2f1d6:	b174      	cbz	r4, 2f1f6 <lfs_ctz_traverse+0x4e>
        int count = 2 - (index & 1);
   2f1d8:	f004 0501 	and.w	r5, r4, #1
   2f1dc:	f1c5 0302 	rsb	r3, r5, #2
        err = lfs_bd_read(lfs,
   2f1e0:	009b      	lsls	r3, r3, #2
   2f1e2:	e9cd 6000 	strd	r6, r0, [sp]
   2f1e6:	464a      	mov	r2, r9
   2f1e8:	4641      	mov	r1, r8
   2f1ea:	4638      	mov	r0, r7
   2f1ec:	e9cd b302 	strd	fp, r3, [sp, #8]
   2f1f0:	f7f1 fc7c 	bl	20aec <lfs_bd_read>
        if (err) {
   2f1f4:	b110      	cbz	r0, 2f1fc <lfs_ctz_traverse+0x54>
}
   2f1f6:	b009      	add	sp, #36	; 0x24
   2f1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            err = cb(data, heads[i]);
   2f1fc:	9906      	ldr	r1, [sp, #24]
        for (int i = 0; i < count-1; i++) {
   2f1fe:	b925      	cbnz	r5, 2f20a <lfs_ctz_traverse+0x62>
            err = cb(data, heads[i]);
   2f200:	9814      	ldr	r0, [sp, #80]	; 0x50
   2f202:	47d0      	blx	sl
            if (err) {
   2f204:	2800      	cmp	r0, #0
   2f206:	d1f6      	bne.n	2f1f6 <lfs_ctz_traverse+0x4e>
        for (int i = 0; i < count-1; i++) {
   2f208:	2001      	movs	r0, #1
        head = heads[count-1];
   2f20a:	ab08      	add	r3, sp, #32
   2f20c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        index -= count;
   2f210:	3d02      	subs	r5, #2
        head = heads[count-1];
   2f212:	f850 6c08 	ldr.w	r6, [r0, #-8]
        index -= count;
   2f216:	442c      	add	r4, r5
    while (true) {
   2f218:	e7d9      	b.n	2f1ce <lfs_ctz_traverse+0x26>

0002f21a <lfs_cache_zero.isra.0>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
   2f21a:	b510      	push	{r4, lr}
   2f21c:	460c      	mov	r4, r1
   2f21e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2f220:	21ff      	movs	r1, #255	; 0xff
   2f222:	68e0      	ldr	r0, [r4, #12]
   2f224:	f001 f9dd 	bl	305e2 <memset>
    pcache->block = LFS_BLOCK_NULL;
   2f228:	f04f 33ff 	mov.w	r3, #4294967295
   2f22c:	6023      	str	r3, [r4, #0]
}
   2f22e:	bd10      	pop	{r4, pc}

0002f230 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
   2f230:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f232:	b085      	sub	sp, #20
    int err = lfs_bd_prog(lfs,
   2f234:	e9cd 2302 	strd	r2, r3, [sp, #8]
        const void *buffer, lfs_size_t size) {
   2f238:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
   2f23a:	684b      	ldr	r3, [r1, #4]
        const void *buffer, lfs_size_t size) {
   2f23c:	460c      	mov	r4, r1
    int err = lfs_bd_prog(lfs,
   2f23e:	9301      	str	r3, [sp, #4]
   2f240:	680b      	ldr	r3, [r1, #0]
        const void *buffer, lfs_size_t size) {
   2f242:	4617      	mov	r7, r2
    int err = lfs_bd_prog(lfs,
   2f244:	9300      	str	r3, [sp, #0]
   2f246:	4602      	mov	r2, r0
   2f248:	2300      	movs	r3, #0
   2f24a:	f100 0110 	add.w	r1, r0, #16
   2f24e:	f7f2 fdcb 	bl	21de8 <lfs_bd_prog>
    if (err) {
   2f252:	4606      	mov	r6, r0
   2f254:	b940      	cbnz	r0, 2f268 <lfs_dir_commitprog+0x38>
    commit->crc = lfs_crc(commit->crc, buffer, size);
   2f256:	462a      	mov	r2, r5
   2f258:	4639      	mov	r1, r7
   2f25a:	68e0      	ldr	r0, [r4, #12]
   2f25c:	f7f4 fdba 	bl	23dd4 <lfs_crc>
    commit->off += size;
   2f260:	6863      	ldr	r3, [r4, #4]
    commit->crc = lfs_crc(commit->crc, buffer, size);
   2f262:	60e0      	str	r0, [r4, #12]
    commit->off += size;
   2f264:	442b      	add	r3, r5
   2f266:	6063      	str	r3, [r4, #4]
}
   2f268:	4630      	mov	r0, r6
   2f26a:	b005      	add	sp, #20
   2f26c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f26e <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
   2f26e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f272:	4606      	mov	r6, r0
   2f274:	b087      	sub	sp, #28
    lfs_size_t dsize = lfs_tag_dsize(tag);
   2f276:	4610      	mov	r0, r2
        lfs_tag_t tag, const void *buffer) {
   2f278:	4699      	mov	r9, r3
    lfs_size_t dsize = lfs_tag_dsize(tag);
   2f27a:	f7ff fe10 	bl	2ee9e <lfs_tag_dsize>
    if (commit->off + dsize > commit->end) {
   2f27e:	684b      	ldr	r3, [r1, #4]
        lfs_tag_t tag, const void *buffer) {
   2f280:	4693      	mov	fp, r2
    if (commit->off + dsize > commit->end) {
   2f282:	694a      	ldr	r2, [r1, #20]
   2f284:	4403      	add	r3, r0
   2f286:	4293      	cmp	r3, r2
        lfs_tag_t tag, const void *buffer) {
   2f288:	460c      	mov	r4, r1
    lfs_size_t dsize = lfs_tag_dsize(tag);
   2f28a:	4680      	mov	r8, r0
    if (commit->off + dsize > commit->end) {
   2f28c:	d841      	bhi.n	2f312 <lfs_dir_commitattr+0xa4>
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
   2f28e:	688b      	ldr	r3, [r1, #8]
   2f290:	f02b 4a00 	bic.w	sl, fp, #2147483648	; 0x80000000
   2f294:	ea8a 0303 	eor.w	r3, sl, r3
	return __builtin_bswap32(a);
   2f298:	ba1b      	rev	r3, r3
   2f29a:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
   2f29c:	4630      	mov	r0, r6
   2f29e:	2304      	movs	r3, #4
   2f2a0:	aa05      	add	r2, sp, #20
   2f2a2:	f7ff ffc5 	bl	2f230 <lfs_dir_commitprog>
    if (err) {
   2f2a6:	4605      	mov	r5, r0
   2f2a8:	bb78      	cbnz	r0, 2f30a <lfs_dir_commitattr+0x9c>
    if (!(tag & 0x80000000)) {
   2f2aa:	f1bb 0f00 	cmp.w	fp, #0
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   2f2ae:	f1a8 0704 	sub.w	r7, r8, #4
    if (!(tag & 0x80000000)) {
   2f2b2:	da20      	bge.n	2f2f6 <lfs_dir_commitattr+0x88>
            err = lfs_bd_read(lfs,
   2f2b4:	f10d 0b13 	add.w	fp, sp, #19
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   2f2b8:	b32f      	cbz	r7, 2f306 <lfs_dir_commitattr+0x98>
            err = lfs_bd_read(lfs,
   2f2ba:	2301      	movs	r3, #1
   2f2bc:	e9cd b302 	strd	fp, r3, [sp, #8]
   2f2c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2f2c4:	4632      	mov	r2, r6
   2f2c6:	3b04      	subs	r3, #4
   2f2c8:	4443      	add	r3, r8
   2f2ca:	1bdb      	subs	r3, r3, r7
   2f2cc:	9301      	str	r3, [sp, #4]
   2f2ce:	f8d9 3000 	ldr.w	r3, [r9]
   2f2d2:	2100      	movs	r1, #0
   2f2d4:	9300      	str	r3, [sp, #0]
   2f2d6:	4630      	mov	r0, r6
   2f2d8:	463b      	mov	r3, r7
   2f2da:	f7f1 fc07 	bl	20aec <lfs_bd_read>
            if (err) {
   2f2de:	b940      	cbnz	r0, 2f2f2 <lfs_dir_commitattr+0x84>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
   2f2e0:	2301      	movs	r3, #1
   2f2e2:	465a      	mov	r2, fp
   2f2e4:	4621      	mov	r1, r4
   2f2e6:	4630      	mov	r0, r6
   2f2e8:	f7ff ffa2 	bl	2f230 <lfs_dir_commitprog>
            if (err) {
   2f2ec:	3f01      	subs	r7, #1
   2f2ee:	2800      	cmp	r0, #0
   2f2f0:	d0e2      	beq.n	2f2b8 <lfs_dir_commitattr+0x4a>
   2f2f2:	4605      	mov	r5, r0
   2f2f4:	e009      	b.n	2f30a <lfs_dir_commitattr+0x9c>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   2f2f6:	463b      	mov	r3, r7
   2f2f8:	464a      	mov	r2, r9
   2f2fa:	4621      	mov	r1, r4
   2f2fc:	4630      	mov	r0, r6
   2f2fe:	f7ff ff97 	bl	2f230 <lfs_dir_commitprog>
        if (err) {
   2f302:	2800      	cmp	r0, #0
   2f304:	d1f5      	bne.n	2f2f2 <lfs_dir_commitattr+0x84>
    commit->ptag = tag & 0x7fffffff;
   2f306:	f8c4 a008 	str.w	sl, [r4, #8]
}
   2f30a:	4628      	mov	r0, r5
   2f30c:	b007      	add	sp, #28
   2f30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_NOSPC;
   2f312:	f06f 051b 	mvn.w	r5, #27
   2f316:	e7f8      	b.n	2f30a <lfs_dir_commitattr+0x9c>

0002f318 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
   2f318:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
   2f31a:	460a      	mov	r2, r1
   2f31c:	e9d0 0100 	ldrd	r0, r1, [r0]
   2f320:	f7ff bfa5 	b.w	2f26e <lfs_dir_commitattr>

0002f324 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   2f324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2f326:	460c      	mov	r4, r1
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   2f328:	3104      	adds	r1, #4
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   2f32a:	4606      	mov	r6, r0
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   2f32c:	f7f2 feca 	bl	220c4 <lfs_alloc>
        if (err) {
   2f330:	4605      	mov	r5, r0
   2f332:	bb80      	cbnz	r0, 2f396 <lfs_dir_alloc+0x72>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   2f334:	4621      	mov	r1, r4
   2f336:	4630      	mov	r0, r6
   2f338:	f7f2 fec4 	bl	220c4 <lfs_alloc>
        if (err) {
   2f33c:	4605      	mov	r5, r0
   2f33e:	bb50      	cbnz	r0, 2f396 <lfs_dir_alloc+0x72>
    dir->rev = 0;
   2f340:	4622      	mov	r2, r4
    int err = lfs_bd_read(lfs,
   2f342:	2304      	movs	r3, #4
    dir->rev = 0;
   2f344:	f842 0f08 	str.w	r0, [r2, #8]!
    int err = lfs_bd_read(lfs,
   2f348:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f34c:	9001      	str	r0, [sp, #4]
   2f34e:	6822      	ldr	r2, [r4, #0]
   2f350:	4601      	mov	r1, r0
   2f352:	9200      	str	r2, [sp, #0]
   2f354:	4630      	mov	r0, r6
   2f356:	4632      	mov	r2, r6
   2f358:	f7f1 fbc8 	bl	20aec <lfs_bd_read>
    if (err && err != LFS_ERR_CORRUPT) {
   2f35c:	b110      	cbz	r0, 2f364 <lfs_dir_alloc+0x40>
   2f35e:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2f362:	d11b      	bne.n	2f39c <lfs_dir_alloc+0x78>
    if (lfs->cfg->block_cycles > 0) {
   2f364:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2f368:	2a00      	cmp	r2, #0
   2f36a:	dd0b      	ble.n	2f384 <lfs_dir_alloc+0x60>
	return lfs_aligndown(a + alignment-1, alignment);
   2f36c:	68a3      	ldr	r3, [r4, #8]
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
   2f36e:	3201      	adds	r2, #1
   2f370:	f042 0201 	orr.w	r2, r2, #1
   2f374:	3b01      	subs	r3, #1
   2f376:	4413      	add	r3, r2
	return a - (a % alignment);
   2f378:	fbb3 f1f2 	udiv	r1, r3, r2
   2f37c:	fb02 3211 	mls	r2, r2, r1, r3
   2f380:	1a9b      	subs	r3, r3, r2
   2f382:	60a3      	str	r3, [r4, #8]
    dir->etag = 0xffffffff;
   2f384:	f04f 33ff 	mov.w	r3, #4294967295
   2f388:	2204      	movs	r2, #4
   2f38a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    dir->count = 0;
   2f38e:	2200      	movs	r2, #0
    dir->tail[0] = LFS_BLOCK_NULL;
   2f390:	e9c4 2305 	strd	r2, r3, [r4, #20]
    dir->tail[1] = LFS_BLOCK_NULL;
   2f394:	61e3      	str	r3, [r4, #28]
}
   2f396:	4628      	mov	r0, r5
   2f398:	b004      	add	sp, #16
   2f39a:	bd70      	pop	{r4, r5, r6, pc}
   2f39c:	4605      	mov	r5, r0
   2f39e:	e7fa      	b.n	2f396 <lfs_dir_alloc+0x72>

0002f3a0 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
   2f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f3a4:	b091      	sub	sp, #68	; 0x44
   2f3a6:	e9cd 2307 	strd	r2, r3, [sp, #28]
    if ((file->flags & LFS_F_INLINE) &&
   2f3aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        const void *buffer, lfs_size_t size) {
   2f3ac:	4606      	mov	r6, r0
    if ((file->flags & LFS_F_INLINE) &&
   2f3ae:	02d8      	lsls	r0, r3, #11
        const void *buffer, lfs_size_t size) {
   2f3b0:	460d      	mov	r5, r1
    if ((file->flags & LFS_F_INLINE) &&
   2f3b2:	d52c      	bpl.n	2f40e <lfs_file_flushedwrite+0x6e>
            lfs_max(file->pos+nsize, file->ctz.size) >
   2f3b4:	9b08      	ldr	r3, [sp, #32]
   2f3b6:	6b48      	ldr	r0, [r1, #52]	; 0x34
                lfs->cfg->cache_size,
   2f3b8:	6eb2      	ldr	r2, [r6, #104]	; 0x68
            lfs_max(file->pos+nsize, file->ctz.size) >
   2f3ba:	18c1      	adds	r1, r0, r3
	return (a > b) ? a : b;
   2f3bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                lfs->cfg->cache_size,
   2f3be:	6a94      	ldr	r4, [r2, #40]	; 0x28
   2f3c0:	4299      	cmp	r1, r3
   2f3c2:	bf38      	it	cc
   2f3c4:	4619      	movcc	r1, r3
                (lfs->cfg->metadata_max ?
   2f3c6:	6c93      	ldr	r3, [r2, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
   2f3c8:	b1e3      	cbz	r3, 2f404 <lfs_file_flushedwrite+0x64>
	return (a < b) ? a : b;
   2f3ca:	f240 32fe 	movw	r2, #1022	; 0x3fe
   2f3ce:	42a2      	cmp	r2, r4
   2f3d0:	bf28      	it	cs
   2f3d2:	4622      	movcs	r2, r4
   2f3d4:	08db      	lsrs	r3, r3, #3
   2f3d6:	4293      	cmp	r3, r2
   2f3d8:	bf28      	it	cs
   2f3da:	4613      	movcs	r3, r2
    if ((file->flags & LFS_F_INLINE) &&
   2f3dc:	428b      	cmp	r3, r1
   2f3de:	d216      	bcs.n	2f40e <lfs_file_flushedwrite+0x6e>
    file->off = file->pos;
   2f3e0:	63e8      	str	r0, [r5, #60]	; 0x3c
    lfs->free.ack = lfs->cfg->block_count;
   2f3e2:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    int err = lfs_file_relocate(lfs, file);
   2f3e4:	4629      	mov	r1, r5
    lfs->free.ack = lfs->cfg->block_count;
   2f3e6:	6a1b      	ldr	r3, [r3, #32]
    int err = lfs_file_relocate(lfs, file);
   2f3e8:	4630      	mov	r0, r6
    lfs->free.ack = lfs->cfg->block_count;
   2f3ea:	6633      	str	r3, [r6, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
   2f3ec:	f7f2 fef4 	bl	221d8 <lfs_file_relocate>
    if (err) {
   2f3f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f3f2:	4604      	mov	r4, r0
   2f3f4:	b140      	cbz	r0, 2f408 <lfs_file_flushedwrite+0x68>
                file->flags |= LFS_F_ERRED;
   2f3f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2f3fa:	632b      	str	r3, [r5, #48]	; 0x30
}
   2f3fc:	4620      	mov	r0, r4
   2f3fe:	b011      	add	sp, #68	; 0x44
   2f400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lfs_min(0x3fe, lfs_min(
   2f404:	69d3      	ldr	r3, [r2, #28]
   2f406:	e7e0      	b.n	2f3ca <lfs_file_flushedwrite+0x2a>
    file->flags &= ~LFS_F_INLINE;
   2f408:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2f40c:	632b      	str	r3, [r5, #48]	; 0x30
            for (lfs_off_t i = 0; i < skips; i++) {
   2f40e:	9b08      	ldr	r3, [sp, #32]
   2f410:	9305      	str	r3, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2f412:	f105 0340 	add.w	r3, r5, #64	; 0x40
   2f416:	9304      	str	r3, [sp, #16]
    while (nsize > 0) {
   2f418:	9b05      	ldr	r3, [sp, #20]
   2f41a:	b90b      	cbnz	r3, 2f420 <lfs_file_flushedwrite+0x80>
    return size;
   2f41c:	9c08      	ldr	r4, [sp, #32]
   2f41e:	e7ed      	b.n	2f3fc <lfs_file_flushedwrite+0x5c>
        if (!(file->flags & LFS_F_WRITING) ||
   2f420:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f422:	0399      	lsls	r1, r3, #14
   2f424:	d50c      	bpl.n	2f440 <lfs_file_flushedwrite+0xa0>
                file->off == lfs->cfg->block_size) {
   2f426:	6eb2      	ldr	r2, [r6, #104]	; 0x68
        if (!(file->flags & LFS_F_WRITING) ||
   2f428:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   2f42a:	69d2      	ldr	r2, [r2, #28]
   2f42c:	4291      	cmp	r1, r2
   2f42e:	f040 80a6 	bne.w	2f57e <lfs_file_flushedwrite+0x1de>
            if (!(file->flags & LFS_F_INLINE)) {
   2f432:	02da      	lsls	r2, r3, #11
   2f434:	d51e      	bpl.n	2f474 <lfs_file_flushedwrite+0xd4>
                file->block = LFS_BLOCK_INLINE;
   2f436:	f06f 0301 	mvn.w	r3, #1
   2f43a:	63ab      	str	r3, [r5, #56]	; 0x38
                file->off = file->pos;
   2f43c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f43e:	e03c      	b.n	2f4ba <lfs_file_flushedwrite+0x11a>
            if (!(file->flags & LFS_F_INLINE)) {
   2f440:	02db      	lsls	r3, r3, #11
   2f442:	d4f8      	bmi.n	2f436 <lfs_file_flushedwrite+0x96>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   2f444:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f446:	b1ab      	cbz	r3, 2f474 <lfs_file_flushedwrite+0xd4>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2f448:	f105 023c 	add.w	r2, r5, #60	; 0x3c
   2f44c:	9202      	str	r2, [sp, #8]
   2f44e:	3b01      	subs	r3, #1
   2f450:	f105 0238 	add.w	r2, r5, #56	; 0x38
   2f454:	9201      	str	r2, [sp, #4]
   2f456:	9300      	str	r3, [sp, #0]
   2f458:	4630      	mov	r0, r6
   2f45a:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
   2f45e:	9904      	ldr	r1, [sp, #16]
   2f460:	f7ff fe59 	bl	2f116 <lfs_ctz_find.constprop.0>
                    if (err) {
   2f464:	4604      	mov	r4, r0
   2f466:	b108      	cbz	r0, 2f46c <lfs_file_flushedwrite+0xcc>
                file->flags |= LFS_F_ERRED;
   2f468:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f46a:	e7c4      	b.n	2f3f6 <lfs_file_flushedwrite+0x56>
                    lfs_cache_zero(lfs, &file->cache);
   2f46c:	9904      	ldr	r1, [sp, #16]
   2f46e:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   2f470:	f7ff fed3 	bl	2f21a <lfs_cache_zero.isra.0>
    lfs->free.ack = lfs->cfg->block_count;
   2f474:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f476:	6a1b      	ldr	r3, [r3, #32]
   2f478:	6633      	str	r3, [r6, #96]	; 0x60
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   2f47a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2f47c:	9309      	str	r3, [sp, #36]	; 0x24
   2f47e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f480:	9306      	str	r3, [sp, #24]
            lfs_size_t noff = size - 1;
   2f482:	3b01      	subs	r3, #1
   2f484:	930b      	str	r3, [sp, #44]	; 0x2c
        int err = lfs_alloc(lfs, &nblock);
   2f486:	4630      	mov	r0, r6
   2f488:	a90d      	add	r1, sp, #52	; 0x34
   2f48a:	f7f2 fe1b 	bl	220c4 <lfs_alloc>
        if (err) {
   2f48e:	4604      	mov	r4, r0
   2f490:	2800      	cmp	r0, #0
   2f492:	d1e9      	bne.n	2f468 <lfs_file_flushedwrite+0xc8>
            err = lfs_bd_erase(lfs, nblock);
   2f494:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   2f498:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   2f49a:	4649      	mov	r1, r9
   2f49c:	f7f2 faec 	bl	21a78 <lfs_bd_erase.isra.0>
            if (err) {
   2f4a0:	4604      	mov	r4, r0
   2f4a2:	b130      	cbz	r0, 2f4b2 <lfs_file_flushedwrite+0x112>
                    if (err == LFS_ERR_CORRUPT) {
   2f4a4:	f114 0f54 	cmn.w	r4, #84	; 0x54
   2f4a8:	d1de      	bne.n	2f468 <lfs_file_flushedwrite+0xc8>
    rcache->block = LFS_BLOCK_NULL;
   2f4aa:	f04f 33ff 	mov.w	r3, #4294967295
   2f4ae:	642b      	str	r3, [r5, #64]	; 0x40
   2f4b0:	e7e9      	b.n	2f486 <lfs_file_flushedwrite+0xe6>
            if (size == 0) {
   2f4b2:	9b06      	ldr	r3, [sp, #24]
   2f4b4:	b91b      	cbnz	r3, 2f4be <lfs_file_flushedwrite+0x11e>
                *block = nblock;
   2f4b6:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
                file->off = file->pos;
   2f4ba:	63eb      	str	r3, [r5, #60]	; 0x3c
   2f4bc:	e05b      	b.n	2f576 <lfs_file_flushedwrite+0x1d6>
            lfs_size_t noff = size - 1;
   2f4be:	6eb7      	ldr	r7, [r6, #104]	; 0x68
   2f4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   2f4c2:	4638      	mov	r0, r7
   2f4c4:	a90e      	add	r1, sp, #56	; 0x38
            lfs_size_t noff = size - 1;
   2f4c6:	930e      	str	r3, [sp, #56]	; 0x38
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   2f4c8:	f7ff fe08 	bl	2f0dc <lfs_ctz_index.isra.0>
            noff = noff + 1;
   2f4cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f4ce:	f103 0801 	add.w	r8, r3, #1
            if (noff != lfs->cfg->block_size) {
   2f4d2:	69fb      	ldr	r3, [r7, #28]
            noff = noff + 1;
   2f4d4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
            if (noff != lfs->cfg->block_size) {
   2f4d8:	4598      	cmp	r8, r3
   2f4da:	d173      	bne.n	2f5c4 <lfs_file_flushedwrite+0x224>
            index += 1;
   2f4dc:	3001      	adds	r0, #1
	return __builtin_ctz(a);
   2f4de:	fa90 fba0 	rbit	fp, r0
   2f4e2:	fabb fb8b 	clz	fp, fp
            for (lfs_off_t i = 0; i < skips; i++) {
   2f4e6:	46a0      	mov	r8, r4
            lfs_block_t nhead = head;
   2f4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
            lfs_size_t skips = lfs_ctz(index) + 1;
   2f4ea:	f10b 0a01 	add.w	sl, fp, #1
            lfs_block_t nhead = head;
   2f4ee:	930f      	str	r3, [sp, #60]	; 0x3c
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   2f4f0:	af0f      	add	r7, sp, #60	; 0x3c
   2f4f2:	ea4f 0388 	mov.w	r3, r8, lsl #2
   2f4f6:	930a      	str	r3, [sp, #40]	; 0x28
   2f4f8:	2304      	movs	r3, #4
   2f4fa:	e9cd 7302 	strd	r7, r3, [sp, #8]
   2f4fe:	ea4f 0388 	mov.w	r3, r8, lsl #2
   2f502:	e9cd 9300 	strd	r9, r3, [sp]
   2f506:	4632      	mov	r2, r6
   2f508:	2301      	movs	r3, #1
   2f50a:	4630      	mov	r0, r6
   2f50c:	9904      	ldr	r1, [sp, #16]
   2f50e:	f7f2 fc6b 	bl	21de8 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
   2f512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                if (err) {
   2f514:	4604      	mov	r4, r0
   2f516:	2800      	cmp	r0, #0
   2f518:	d1c4      	bne.n	2f4a4 <lfs_file_flushedwrite+0x104>
                if (i != skips-1) {
   2f51a:	45c3      	cmp	fp, r8
   2f51c:	d157      	bne.n	2f5ce <lfs_file_flushedwrite+0x22e>
            for (lfs_off_t i = 0; i < skips; i++) {
   2f51e:	f108 0801 	add.w	r8, r8, #1
   2f522:	45c2      	cmp	sl, r8
   2f524:	d8e5      	bhi.n	2f4f2 <lfs_file_flushedwrite+0x152>
            *block = nblock;
   2f526:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
            *off = 4*skips;
   2f52a:	ea4f 038a 	mov.w	r3, sl, lsl #2
   2f52e:	e7c4      	b.n	2f4ba <lfs_file_flushedwrite+0x11a>
                    err = lfs_bd_read(lfs,
   2f530:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2f532:	4632      	mov	r2, r6
   2f534:	9300      	str	r3, [sp, #0]
   2f536:	2100      	movs	r1, #0
   2f538:	4630      	mov	r0, r6
   2f53a:	e9cd 7b02 	strd	r7, fp, [sp, #8]
   2f53e:	f8cd a004 	str.w	sl, [sp, #4]
   2f542:	eba8 030a 	sub.w	r3, r8, sl
   2f546:	f7f1 fad1 	bl	20aec <lfs_bd_read>
                    if (err) {
   2f54a:	4604      	mov	r4, r0
   2f54c:	2800      	cmp	r0, #0
   2f54e:	d18b      	bne.n	2f468 <lfs_file_flushedwrite+0xc8>
                    err = lfs_bd_prog(lfs,
   2f550:	2301      	movs	r3, #1
   2f552:	4632      	mov	r2, r6
   2f554:	4630      	mov	r0, r6
   2f556:	e9cd 7b02 	strd	r7, fp, [sp, #8]
   2f55a:	e9cd 9a00 	strd	r9, sl, [sp]
   2f55e:	9904      	ldr	r1, [sp, #16]
   2f560:	f7f2 fc42 	bl	21de8 <lfs_bd_prog>
                    if (err) {
   2f564:	4604      	mov	r4, r0
   2f566:	2800      	cmp	r0, #0
   2f568:	d19c      	bne.n	2f4a4 <lfs_file_flushedwrite+0x104>
                for (lfs_off_t i = 0; i < noff; i++) {
   2f56a:	f10a 0a01 	add.w	sl, sl, #1
   2f56e:	45d0      	cmp	r8, sl
   2f570:	d8de      	bhi.n	2f530 <lfs_file_flushedwrite+0x190>
                *off = noff;
   2f572:	e9c5 980e 	strd	r9, r8, [r5, #56]	; 0x38
            file->flags |= LFS_F_WRITING;
   2f576:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2f57c:	632b      	str	r3, [r5, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   2f57e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f580:	69df      	ldr	r7, [r3, #28]
   2f582:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2f584:	1aff      	subs	r7, r7, r3
	return (a < b) ? a : b;
   2f586:	9b05      	ldr	r3, [sp, #20]
   2f588:	429f      	cmp	r7, r3
   2f58a:	bf28      	it	cs
   2f58c:	461f      	movcs	r7, r3
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   2f58e:	9b07      	ldr	r3, [sp, #28]
   2f590:	9703      	str	r7, [sp, #12]
   2f592:	9302      	str	r3, [sp, #8]
   2f594:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2f596:	4632      	mov	r2, r6
   2f598:	9301      	str	r3, [sp, #4]
   2f59a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2f59c:	4630      	mov	r0, r6
   2f59e:	9300      	str	r3, [sp, #0]
   2f5a0:	9904      	ldr	r1, [sp, #16]
   2f5a2:	2301      	movs	r3, #1
   2f5a4:	f7f2 fc20 	bl	21de8 <lfs_bd_prog>
            if (err) {
   2f5a8:	4604      	mov	r4, r0
   2f5aa:	b300      	cbz	r0, 2f5ee <lfs_file_flushedwrite+0x24e>
                if (err == LFS_ERR_CORRUPT) {
   2f5ac:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2f5b0:	f47f af5a 	bne.w	2f468 <lfs_file_flushedwrite+0xc8>
            err = lfs_file_relocate(lfs, file);
   2f5b4:	4629      	mov	r1, r5
   2f5b6:	4630      	mov	r0, r6
   2f5b8:	f7f2 fe0e 	bl	221d8 <lfs_file_relocate>
            if (err) {
   2f5bc:	4604      	mov	r4, r0
   2f5be:	2800      	cmp	r0, #0
   2f5c0:	d0e5      	beq.n	2f58e <lfs_file_flushedwrite+0x1ee>
   2f5c2:	e751      	b.n	2f468 <lfs_file_flushedwrite+0xc8>
                for (lfs_off_t i = 0; i < noff; i++) {
   2f5c4:	46a2      	mov	sl, r4
                    err = lfs_bd_read(lfs,
   2f5c6:	f04f 0b01 	mov.w	fp, #1
   2f5ca:	af0f      	add	r7, sp, #60	; 0x3c
   2f5cc:	e7cf      	b.n	2f56e <lfs_file_flushedwrite+0x1ce>
                    err = lfs_bd_read(lfs,
   2f5ce:	2204      	movs	r2, #4
   2f5d0:	e9cd 7202 	strd	r7, r2, [sp, #8]
   2f5d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2f5d6:	4601      	mov	r1, r0
   2f5d8:	e9cd 3200 	strd	r3, r2, [sp]
   2f5dc:	4630      	mov	r0, r6
   2f5de:	2304      	movs	r3, #4
   2f5e0:	4632      	mov	r2, r6
   2f5e2:	f7f1 fa83 	bl	20aec <lfs_bd_read>
                    if (err) {
   2f5e6:	4604      	mov	r4, r0
   2f5e8:	2800      	cmp	r0, #0
   2f5ea:	d098      	beq.n	2f51e <lfs_file_flushedwrite+0x17e>
   2f5ec:	e73c      	b.n	2f468 <lfs_file_flushedwrite+0xc8>
        file->pos += diff;
   2f5ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f5f0:	443b      	add	r3, r7
   2f5f2:	636b      	str	r3, [r5, #52]	; 0x34
        file->off += diff;
   2f5f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2f5f6:	443b      	add	r3, r7
   2f5f8:	63eb      	str	r3, [r5, #60]	; 0x3c
        data += diff;
   2f5fa:	9b07      	ldr	r3, [sp, #28]
   2f5fc:	443b      	add	r3, r7
   2f5fe:	9307      	str	r3, [sp, #28]
        nsize -= diff;
   2f600:	9b05      	ldr	r3, [sp, #20]
   2f602:	1bdb      	subs	r3, r3, r7
   2f604:	9305      	str	r3, [sp, #20]
    lfs->free.ack = lfs->cfg->block_count;
   2f606:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f608:	6a1b      	ldr	r3, [r3, #32]
   2f60a:	6633      	str	r3, [r6, #96]	; 0x60
}
   2f60c:	e704      	b.n	2f418 <lfs_file_flushedwrite+0x78>

0002f60e <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2f60e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (file->flags & LFS_F_READING) {
   2f610:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2f612:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
   2f614:	0359      	lsls	r1, r3, #13
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2f616:	4605      	mov	r5, r0
   2f618:	b097      	sub	sp, #92	; 0x5c
    if (file->flags & LFS_F_READING) {
   2f61a:	d508      	bpl.n	2f62e <lfs_file_flush+0x20>
        if (!(file->flags & LFS_F_INLINE)) {
   2f61c:	02da      	lsls	r2, r3, #11
    rcache->block = LFS_BLOCK_NULL;
   2f61e:	bf58      	it	pl
   2f620:	f04f 32ff 	movpl.w	r2, #4294967295
        file->flags &= ~LFS_F_READING;
   2f624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    rcache->block = LFS_BLOCK_NULL;
   2f628:	bf58      	it	pl
   2f62a:	6422      	strpl	r2, [r4, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
   2f62c:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
   2f62e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2f630:	038b      	lsls	r3, r1, #14
   2f632:	d402      	bmi.n	2f63a <lfs_file_flush+0x2c>
    return 0;
   2f634:	2000      	movs	r0, #0
}
   2f636:	b017      	add	sp, #92	; 0x5c
   2f638:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!(file->flags & LFS_F_INLINE)) {
   2f63a:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
        lfs_off_t pos = file->pos;
   2f63e:	6b66      	ldr	r6, [r4, #52]	; 0x34
                .ctz.size = file->ctz.size,
   2f640:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        if (!(file->flags & LFS_F_INLINE)) {
   2f642:	d13f      	bne.n	2f6c4 <lfs_file_flush+0xb6>
            lfs_file_t orig = {
   2f644:	2254      	movs	r2, #84	; 0x54
   2f646:	a801      	add	r0, sp, #4
   2f648:	f000 ffcb 	bl	305e2 <memset>
   2f64c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2f64e:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
   2f652:	2301      	movs	r3, #1
   2f654:	af11      	add	r7, sp, #68	; 0x44
   2f656:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
   2f65a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2f65e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
   2f662:	f04f 37ff 	mov.w	r7, #4294967295
   2f666:	602f      	str	r7, [r5, #0]
            while (file->pos < file->ctz.size) {
   2f668:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2f66a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2f66c:	429a      	cmp	r2, r3
   2f66e:	d312      	bcc.n	2f696 <lfs_file_flush+0x88>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
   2f670:	f104 0740 	add.w	r7, r4, #64	; 0x40
   2f674:	2301      	movs	r3, #1
   2f676:	462a      	mov	r2, r5
   2f678:	4639      	mov	r1, r7
   2f67a:	4628      	mov	r0, r5
   2f67c:	f7f2 fb5a 	bl	21d34 <lfs_bd_flush>
                if (err) {
   2f680:	b320      	cbz	r0, 2f6cc <lfs_file_flush+0xbe>
                    if (err == LFS_ERR_CORRUPT) {
   2f682:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2f686:	d1d6      	bne.n	2f636 <lfs_file_flush+0x28>
                err = lfs_file_relocate(lfs, file);
   2f688:	4621      	mov	r1, r4
   2f68a:	4628      	mov	r0, r5
   2f68c:	f7f2 fda4 	bl	221d8 <lfs_file_relocate>
                if (err) {
   2f690:	2800      	cmp	r0, #0
   2f692:	d0ef      	beq.n	2f674 <lfs_file_flush+0x66>
   2f694:	e7cf      	b.n	2f636 <lfs_file_flush+0x28>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
   2f696:	2301      	movs	r3, #1
   2f698:	4628      	mov	r0, r5
   2f69a:	f10d 0203 	add.w	r2, sp, #3
   2f69e:	a901      	add	r1, sp, #4
   2f6a0:	f7f2 f8ca 	bl	21838 <lfs_file_flushedread>
                if (res < 0) {
   2f6a4:	2800      	cmp	r0, #0
   2f6a6:	dbc6      	blt.n	2f636 <lfs_file_flush+0x28>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
   2f6a8:	2301      	movs	r3, #1
   2f6aa:	4621      	mov	r1, r4
   2f6ac:	4628      	mov	r0, r5
   2f6ae:	f10d 0203 	add.w	r2, sp, #3
   2f6b2:	f7ff fe75 	bl	2f3a0 <lfs_file_flushedwrite>
                if (res < 0) {
   2f6b6:	2800      	cmp	r0, #0
   2f6b8:	dbbd      	blt.n	2f636 <lfs_file_flush+0x28>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
   2f6ba:	682b      	ldr	r3, [r5, #0]
   2f6bc:	3301      	adds	r3, #1
   2f6be:	d0d3      	beq.n	2f668 <lfs_file_flush+0x5a>
    rcache->block = LFS_BLOCK_NULL;
   2f6c0:	9711      	str	r7, [sp, #68]	; 0x44
   2f6c2:	e7d0      	b.n	2f666 <lfs_file_flush+0x58>
            file->pos = lfs_max(file->pos, file->ctz.size);
   2f6c4:	42be      	cmp	r6, r7
   2f6c6:	bf2c      	ite	cs
   2f6c8:	6366      	strcs	r6, [r4, #52]	; 0x34
   2f6ca:	6367      	strcc	r7, [r4, #52]	; 0x34
        file->ctz.head = file->block;
   2f6cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2f6ce:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
   2f6d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2f6d2:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
   2f6d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f6d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
   2f6da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        file->pos = pos;
   2f6de:	e9c4 360c 	strd	r3, r6, [r4, #48]	; 0x30
   2f6e2:	e7a7      	b.n	2f634 <lfs_file_flush+0x26>

0002f6e4 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   2f6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f6e8:	b08d      	sub	sp, #52	; 0x34
   2f6ea:	460c      	mov	r4, r1
    int err = lfs_dir_alloc(lfs, &tail);
   2f6ec:	a904      	add	r1, sp, #16
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   2f6ee:	4605      	mov	r5, r0
   2f6f0:	4617      	mov	r7, r2
   2f6f2:	4698      	mov	r8, r3
   2f6f4:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
    int err = lfs_dir_alloc(lfs, &tail);
   2f6f8:	f7ff fe14 	bl	2f324 <lfs_dir_alloc>
    if (err) {
   2f6fc:	4606      	mov	r6, r0
   2f6fe:	bb28      	cbnz	r0, 2f74c <lfs_dir_split+0x68>
    tail.split = dir->split;
   2f700:	7de3      	ldrb	r3, [r4, #23]
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f702:	463a      	mov	r2, r7
    tail.split = dir->split;
   2f704:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
   2f708:	69a3      	ldr	r3, [r4, #24]
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f70a:	4628      	mov	r0, r5
    tail.tail[0] = dir->tail[0];
   2f70c:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
   2f70e:	69e3      	ldr	r3, [r4, #28]
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f710:	a904      	add	r1, sp, #16
    tail.tail[1] = dir->tail[1];
   2f712:	930b      	str	r3, [sp, #44]	; 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f714:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   2f718:	e9cd 9301 	strd	r9, r3, [sp, #4]
   2f71c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2f71e:	9300      	str	r3, [sp, #0]
   2f720:	4643      	mov	r3, r8
   2f722:	f7f2 fe27 	bl	22374 <lfs_dir_compact>
    if (res < 0) {
   2f726:	2800      	cmp	r0, #0
   2f728:	db14      	blt.n	2f754 <lfs_dir_split+0x70>
    dir->split = true;
   2f72a:	2301      	movs	r3, #1
    dir->tail[0] = tail.pair[0];
   2f72c:	9f04      	ldr	r7, [sp, #16]
    dir->tail[1] = tail.pair[1];
   2f72e:	9a05      	ldr	r2, [sp, #20]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   2f730:	4620      	mov	r0, r4
    dir->tail[0] = tail.pair[0];
   2f732:	61a7      	str	r7, [r4, #24]
    dir->tail[1] = tail.pair[1];
   2f734:	61e2      	str	r2, [r4, #28]
    dir->split = true;
   2f736:	75e3      	strb	r3, [r4, #23]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   2f738:	f105 0120 	add.w	r1, r5, #32
   2f73c:	f7ff fb9e 	bl	2ee7c <lfs_pair_cmp>
   2f740:	b920      	cbnz	r0, 2f74c <lfs_dir_split+0x68>
   2f742:	f1b9 0f00 	cmp.w	r9, #0
   2f746:	d101      	bne.n	2f74c <lfs_dir_split+0x68>
        lfs->root[1] = tail.pair[1];
   2f748:	e9c5 7208 	strd	r7, r2, [r5, #32]
}
   2f74c:	4630      	mov	r0, r6
   2f74e:	b00d      	add	sp, #52	; 0x34
   2f750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f754:	4606      	mov	r6, r0
   2f756:	e7f9      	b.n	2f74c <lfs_dir_split+0x68>

0002f758 <lfs_file_rawseek>:
        lfs_soff_t off, int whence) {
   2f758:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f75c:	4606      	mov	r6, r0
   2f75e:	460d      	mov	r5, r1
   2f760:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
   2f762:	6b48      	ldr	r0, [r1, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
   2f764:	b11b      	cbz	r3, 2f76e <lfs_file_rawseek+0x16>
    } else if (whence == LFS_SEEK_CUR) {
   2f766:	2b01      	cmp	r3, #1
   2f768:	d126      	bne.n	2f7b8 <lfs_file_rawseek+0x60>
        if ((lfs_soff_t)file->pos + off < 0) {
   2f76a:	1884      	adds	r4, r0, r2
        if (res < 0) {
   2f76c:	d429      	bmi.n	2f7c2 <lfs_file_rawseek+0x6a>
    if (npos > lfs->file_max) {
   2f76e:	6f33      	ldr	r3, [r6, #112]	; 0x70
   2f770:	42a3      	cmp	r3, r4
   2f772:	d326      	bcc.n	2f7c2 <lfs_file_rawseek+0x6a>
    if (file->pos == npos) {
   2f774:	4284      	cmp	r4, r0
   2f776:	d01c      	beq.n	2f7b2 <lfs_file_rawseek+0x5a>
        !(file->flags & LFS_F_WRITING)
   2f778:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    if (
   2f77a:	039b      	lsls	r3, r3, #14
   2f77c:	d42d      	bmi.n	2f7da <lfs_file_rawseek+0x82>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
   2f77e:	f8d6 8068 	ldr.w	r8, [r6, #104]	; 0x68
   2f782:	4669      	mov	r1, sp
   2f784:	9000      	str	r0, [sp, #0]
   2f786:	4640      	mov	r0, r8
   2f788:	f7ff fca8 	bl	2f0dc <lfs_ctz_index.isra.0>
        int nindex = lfs_ctz_index(lfs, &noff);
   2f78c:	a901      	add	r1, sp, #4
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
   2f78e:	4607      	mov	r7, r0
        int nindex = lfs_ctz_index(lfs, &noff);
   2f790:	4640      	mov	r0, r8
        lfs_off_t noff = npos;
   2f792:	9401      	str	r4, [sp, #4]
        int nindex = lfs_ctz_index(lfs, &noff);
   2f794:	f7ff fca2 	bl	2f0dc <lfs_ctz_index.isra.0>
        if (oindex == nindex
   2f798:	4287      	cmp	r7, r0
   2f79a:	d11e      	bne.n	2f7da <lfs_file_rawseek+0x82>
                && noff >= file->cache.off
   2f79c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   2f79e:	9a01      	ldr	r2, [sp, #4]
   2f7a0:	4293      	cmp	r3, r2
   2f7a2:	d81a      	bhi.n	2f7da <lfs_file_rawseek+0x82>
                && noff < file->cache.off + file->cache.size) {
   2f7a4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   2f7a6:	440b      	add	r3, r1
   2f7a8:	429a      	cmp	r2, r3
   2f7aa:	d216      	bcs.n	2f7da <lfs_file_rawseek+0x82>
            file->pos = npos;
   2f7ac:	636c      	str	r4, [r5, #52]	; 0x34
            file->off = noff;
   2f7ae:	63ea      	str	r2, [r5, #60]	; 0x3c
    return npos;
   2f7b0:	4620      	mov	r0, r4
}
   2f7b2:	b002      	add	sp, #8
   2f7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (whence == LFS_SEEK_END) {
   2f7b8:	2b02      	cmp	r3, #2
   2f7ba:	d005      	beq.n	2f7c8 <lfs_file_rawseek+0x70>
    if (npos > lfs->file_max) {
   2f7bc:	6f33      	ldr	r3, [r6, #112]	; 0x70
   2f7be:	4298      	cmp	r0, r3
   2f7c0:	d9f7      	bls.n	2f7b2 <lfs_file_rawseek+0x5a>
            return LFS_ERR_INVAL;
   2f7c2:	f06f 0015 	mvn.w	r0, #21
   2f7c6:	e7f4      	b.n	2f7b2 <lfs_file_rawseek+0x5a>
    if (file->flags & LFS_F_WRITING) {
   2f7c8:	e9d1 320b 	ldrd	r3, r2, [r1, #44]	; 0x2c
   2f7cc:	0392      	lsls	r2, r2, #14
   2f7ce:	d502      	bpl.n	2f7d6 <lfs_file_rawseek+0x7e>
	return (a > b) ? a : b;
   2f7d0:	4283      	cmp	r3, r0
   2f7d2:	bf38      	it	cc
   2f7d4:	4603      	movcc	r3, r0
        if (res < 0) {
   2f7d6:	18e4      	adds	r4, r4, r3
   2f7d8:	e7c8      	b.n	2f76c <lfs_file_rawseek+0x14>
    int err = lfs_file_flush(lfs, file);
   2f7da:	4629      	mov	r1, r5
   2f7dc:	4630      	mov	r0, r6
   2f7de:	f7ff ff16 	bl	2f60e <lfs_file_flush>
    if (err) {
   2f7e2:	2800      	cmp	r0, #0
   2f7e4:	d1e5      	bne.n	2f7b2 <lfs_file_rawseek+0x5a>
    file->pos = npos;
   2f7e6:	636c      	str	r4, [r5, #52]	; 0x34
   2f7e8:	e7e2      	b.n	2f7b0 <lfs_file_rawseek+0x58>

0002f7ea <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
   2f7ea:	b510      	push	{r4, lr}
   2f7ec:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
   2f7ee:	f7f3 f96b 	bl	22ac8 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
   2f7f2:	2800      	cmp	r0, #0
   2f7f4:	db06      	blt.n	2f804 <lfs_dir_commit+0x1a>
    if (orphans) {
   2f7f6:	d005      	beq.n	2f804 <lfs_dir_commit+0x1a>
        int err = lfs_fs_deorphan(lfs, false);
   2f7f8:	4620      	mov	r0, r4
}
   2f7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        int err = lfs_fs_deorphan(lfs, false);
   2f7fe:	2100      	movs	r1, #0
   2f800:	f7f3 bb00 	b.w	22e04 <lfs_fs_deorphan>
}
   2f804:	bd10      	pop	{r4, pc}

0002f806 <lfs_file_rawsync>:
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
   2f806:	b570      	push	{r4, r5, r6, lr}
    if (file->flags & LFS_F_ERRED) {
   2f808:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
   2f80a:	4605      	mov	r5, r0
    if (file->flags & LFS_F_ERRED) {
   2f80c:	031e      	lsls	r6, r3, #12
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
   2f80e:	460c      	mov	r4, r1
   2f810:	b086      	sub	sp, #24
    if (file->flags & LFS_F_ERRED) {
   2f812:	d440      	bmi.n	2f896 <lfs_file_rawsync+0x90>
    int err = lfs_file_flush(lfs, file);
   2f814:	f7ff fefb 	bl	2f60e <lfs_file_flush>
    if (err) {
   2f818:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2f81a:	b120      	cbz	r0, 2f826 <lfs_file_rawsync+0x20>
        file->flags |= LFS_F_ERRED;
   2f81c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   2f820:	6322      	str	r2, [r4, #48]	; 0x30
}
   2f822:	b006      	add	sp, #24
   2f824:	bd70      	pop	{r4, r5, r6, pc}
    if ((file->flags & LFS_F_DIRTY) &&
   2f826:	03d1      	lsls	r1, r2, #15
   2f828:	d535      	bpl.n	2f896 <lfs_file_rawsync+0x90>
            !lfs_pair_isnull(file->m.pair)) {
   2f82a:	f104 0608 	add.w	r6, r4, #8
   2f82e:	4630      	mov	r0, r6
   2f830:	f7ff fb1a 	bl	2ee68 <lfs_pair_isnull>
    if ((file->flags & LFS_F_DIRTY) &&
   2f834:	2800      	cmp	r0, #0
   2f836:	d12e      	bne.n	2f896 <lfs_file_rawsync+0x90>
        if (file->flags & LFS_F_INLINE) {
   2f838:	02d3      	lsls	r3, r2, #11
            ctz = file->ctz;
   2f83a:	bf5f      	itttt	pl
   2f83c:	466b      	movpl	r3, sp
   2f83e:	e9d4 010a 	ldrdpl	r0, r1, [r4, #40]	; 0x28
            size = sizeof(ctz);
   2f842:	2208      	movpl	r2, #8
            ctz = file->ctz;
   2f844:	e9c3 0100 	strdpl	r0, r1, [r3]
            type = LFS_TYPE_INLINESTRUCT;
   2f848:	bf4c      	ite	mi
   2f84a:	f240 2001 	movwmi	r0, #513	; 0x201
            type = LFS_TYPE_CTZSTRUCT;
   2f84e:	f240 2002 	movwpl	r0, #514	; 0x202
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   2f852:	88a1      	ldrh	r1, [r4, #4]
            size = file->ctz.size;
   2f854:	bf44      	itt	mi
   2f856:	6ae2      	ldrmi	r2, [r4, #44]	; 0x2c
            buffer = file->cache.buffer;
   2f858:	6ce3      	ldrmi	r3, [r4, #76]	; 0x4c
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   2f85a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
   2f85e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
   2f862:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f866:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2f868:	4628      	mov	r0, r5
   2f86a:	6893      	ldr	r3, [r2, #8]
   2f86c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
   2f870:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   2f874:	9304      	str	r3, [sp, #16]
   2f876:	6853      	ldr	r3, [r2, #4]
   2f878:	4631      	mov	r1, r6
   2f87a:	9305      	str	r3, [sp, #20]
   2f87c:	aa02      	add	r2, sp, #8
   2f87e:	2302      	movs	r3, #2
   2f880:	f7ff ffb3 	bl	2f7ea <lfs_dir_commit>
        if (err) {
   2f884:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f886:	b118      	cbz	r0, 2f890 <lfs_file_rawsync+0x8a>
            file->flags |= LFS_F_ERRED;
   2f888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2f88c:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   2f88e:	e7c8      	b.n	2f822 <lfs_file_rawsync+0x1c>
        file->flags &= ~LFS_F_DIRTY;
   2f890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2f894:	6323      	str	r3, [r4, #48]	; 0x30
        return 0;
   2f896:	2000      	movs	r0, #0
   2f898:	e7c3      	b.n	2f822 <lfs_file_rawsync+0x1c>

0002f89a <lfs_file_rawclose>:
static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
   2f89a:	b570      	push	{r4, r5, r6, lr}
   2f89c:	4605      	mov	r5, r0
   2f89e:	460c      	mov	r4, r1
    int err = lfs_file_rawsync(lfs, file);
   2f8a0:	f7ff ffb1 	bl	2f806 <lfs_file_rawsync>
   2f8a4:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f8a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2f8a8:	f105 0228 	add.w	r2, r5, #40	; 0x28
   2f8ac:	b11b      	cbz	r3, 2f8b6 <lfs_file_rawclose+0x1c>
        if (*p == mlist) {
   2f8ae:	429c      	cmp	r4, r3
            *p = (*p)->next;
   2f8b0:	6819      	ldr	r1, [r3, #0]
        if (*p == mlist) {
   2f8b2:	d108      	bne.n	2f8c6 <lfs_file_rawclose+0x2c>
            *p = (*p)->next;
   2f8b4:	6011      	str	r1, [r2, #0]
    if (!file->cfg->buffer) {
   2f8b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2f8b8:	681b      	ldr	r3, [r3, #0]
   2f8ba:	b913      	cbnz	r3, 2f8c2 <lfs_file_rawclose+0x28>
	free(p);
   2f8bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2f8be:	f7f8 ff01 	bl	286c4 <free>
}
   2f8c2:	4630      	mov	r0, r6
   2f8c4:	bd70      	pop	{r4, r5, r6, pc}
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f8c6:	461a      	mov	r2, r3
            *p = (*p)->next;
   2f8c8:	460b      	mov	r3, r1
   2f8ca:	e7ef      	b.n	2f8ac <lfs_file_rawclose+0x12>

0002f8cc <lfs_unmount>:
    return lfs_deinit(lfs);
   2f8cc:	f7ff bb3e 	b.w	2ef4c <lfs_deinit>

0002f8d0 <lfs_stat>:
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   2f8d0:	b530      	push	{r4, r5, lr}
   2f8d2:	b08b      	sub	sp, #44	; 0x2c
   2f8d4:	9101      	str	r1, [sp, #4]
   2f8d6:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   2f8d8:	2300      	movs	r3, #0
   2f8da:	aa01      	add	r2, sp, #4
   2f8dc:	a902      	add	r1, sp, #8
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   2f8de:	4604      	mov	r4, r0
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   2f8e0:	f7f1 ff04 	bl	216ec <lfs_dir_find>
    if (tag < 0) {
   2f8e4:	2800      	cmp	r0, #0
   2f8e6:	db06      	blt.n	2f8f6 <lfs_stat+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
   2f8e8:	f3c0 2289 	ubfx	r2, r0, #10, #10
   2f8ec:	462b      	mov	r3, r5
   2f8ee:	4620      	mov	r0, r4
   2f8f0:	a902      	add	r1, sp, #8
   2f8f2:	f7f1 fa7f 	bl	20df4 <lfs_dir_getinfo>
}
   2f8f6:	b00b      	add	sp, #44	; 0x2c
   2f8f8:	bd30      	pop	{r4, r5, pc}

0002f8fa <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f8fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2f8fc:	f100 0228 	add.w	r2, r0, #40	; 0x28
   2f900:	b11b      	cbz	r3, 2f90a <lfs_dir_close+0x10>
        if (*p == mlist) {
   2f902:	4299      	cmp	r1, r3
            *p = (*p)->next;
   2f904:	6818      	ldr	r0, [r3, #0]
        if (*p == mlist) {
   2f906:	d102      	bne.n	2f90e <lfs_dir_close+0x14>
            *p = (*p)->next;
   2f908:	6010      	str	r0, [r2, #0]
}
   2f90a:	2000      	movs	r0, #0
   2f90c:	4770      	bx	lr
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f90e:	461a      	mov	r2, r3
            *p = (*p)->next;
   2f910:	4603      	mov	r3, r0
   2f912:	e7f5      	b.n	2f900 <lfs_dir_close+0x6>

0002f914 <lfs_fs_size>:
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);

    lfs_ssize_t res = lfs_fs_rawsize(lfs);
   2f914:	f7f2 b8a2 	b.w	21a5c <lfs_fs_rawsize>

0002f918 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2f918:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2f91a:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2f91c:	4602      	mov	r2, r0
   2f91e:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   2f920:	b984      	cbnz	r4, 2f944 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   2f922:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   2f924:	291f      	cmp	r1, #31
   2f926:	bf98      	it	ls
   2f928:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   2f92c:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   2f92e:	b161      	cbz	r1, 2f94a <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   2f930:	6880      	ldr	r0, [r0, #8]
   2f932:	4283      	cmp	r3, r0
   2f934:	d209      	bcs.n	2f94a <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   2f936:	6910      	ldr	r0, [r2, #16]
   2f938:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2f93a:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2f93e:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   2f940:	bc10      	pop	{r4}
   2f942:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   2f944:	4623      	mov	r3, r4
}
   2f946:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2f948:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2f94a:	f04f 30ff 	mov.w	r0, #4294967295
   2f94e:	e7f7      	b.n	2f940 <metal_io_phys+0x28>

0002f950 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2f950:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   2f952:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   2f954:	4605      	mov	r5, r0
   2f956:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2f958:	b9e3      	cbnz	r3, 2f994 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2f95a:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2f95c:	1c62      	adds	r2, r4, #1
   2f95e:	bf09      	itett	eq
   2f960:	6843      	ldreq	r3, [r0, #4]
   2f962:	400c      	andne	r4, r1
   2f964:	681c      	ldreq	r4, [r3, #0]
   2f966:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   2f968:	4621      	mov	r1, r4
   2f96a:	4628      	mov	r0, r5
   2f96c:	f7ff ffd4 	bl	2f918 <metal_io_phys>
   2f970:	4286      	cmp	r6, r0
   2f972:	d007      	beq.n	2f984 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   2f974:	692b      	ldr	r3, [r5, #16]
   2f976:	3301      	adds	r3, #1
   2f978:	441c      	add	r4, r3
		} while (offset < io->size);
   2f97a:	68ab      	ldr	r3, [r5, #8]
   2f97c:	429c      	cmp	r4, r3
   2f97e:	d3f3      	bcc.n	2f968 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   2f980:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2f984:	6828      	ldr	r0, [r5, #0]
		: NULL);
   2f986:	1c43      	adds	r3, r0, #1
   2f988:	d007      	beq.n	2f99a <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2f98a:	68ab      	ldr	r3, [r5, #8]
   2f98c:	42a3      	cmp	r3, r4
   2f98e:	d904      	bls.n	2f99a <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   2f990:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   2f992:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   2f994:	4798      	blx	r3
   2f996:	4604      	mov	r4, r0
   2f998:	e7f4      	b.n	2f984 <metal_io_phys_to_virt+0x34>
		: NULL);
   2f99a:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2f99c:	e7f9      	b.n	2f992 <metal_io_phys_to_virt+0x42>

0002f99e <virtqueue_create>:
{
   2f99e:	b530      	push	{r4, r5, lr}
   2f9a0:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   2f9a2:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   2f9a6:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   2f9a8:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   2f9aa:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   2f9ac:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   2f9ae:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   2f9b0:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2f9b2:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   2f9b4:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2f9b6:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2f9ba:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   2f9be:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2f9c2:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2f9c4:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2f9c6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   2f9ca:	1c6a      	adds	r2, r5, #1
   2f9cc:	4413      	add	r3, r2
   2f9ce:	426d      	negs	r5, r5
   2f9d0:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   2f9d2:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2f9d4:	6983      	ldr	r3, [r0, #24]
   2f9d6:	b953      	cbnz	r3, 2f9ee <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   2f9d8:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   2f9da:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   2f9dc:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   2f9de:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   2f9e2:	db06      	blt.n	2f9f2 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2f9e4:	2300      	movs	r3, #0
   2f9e6:	7393      	strb	r3, [r2, #14]
   2f9e8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2f9ec:	73d3      	strb	r3, [r2, #15]
}
   2f9ee:	2000      	movs	r0, #0
   2f9f0:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   2f9f2:	3301      	adds	r3, #1
   2f9f4:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2f9f6:	e7f0      	b.n	2f9da <virtqueue_create+0x3c>

0002f9f8 <virtqueue_add_buffer>:
{
   2f9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   2f9fc:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   2fa00:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2fa02:	4655      	mov	r5, sl
   2fa04:	2600      	movs	r6, #0
{
   2fa06:	b085      	sub	sp, #20
	needed = readable + writable;
   2fa08:	eb02 0803 	add.w	r8, r2, r3
{
   2fa0c:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   2fa0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2fa10:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   2fa14:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   2fa18:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2fa1a:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   2fa1e:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2fa22:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2fa24:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   2fa26:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2fa28:	45b0      	cmp	r8, r6
   2fa2a:	dc1a      	bgt.n	2fa62 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   2fa2c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   2fa2e:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2fa30:	eba3 030b 	sub.w	r3, r3, fp
   2fa34:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2fa36:	69e3      	ldr	r3, [r4, #28]
   2fa38:	8961      	ldrh	r1, [r4, #10]
   2fa3a:	885a      	ldrh	r2, [r3, #2]
   2fa3c:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2fa3e:	400a      	ands	r2, r1
   2fa40:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2fa44:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   2fa48:	f3bf 8f5b 	dmb	ish
}
   2fa4c:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   2fa4e:	69e2      	ldr	r2, [r4, #28]
   2fa50:	8853      	ldrh	r3, [r2, #2]
   2fa52:	3301      	adds	r3, #1
   2fa54:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2fa56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2fa58:	3301      	adds	r3, #1
   2fa5a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2fa5c:	b005      	add	sp, #20
   2fa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   2fa62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2fa64:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2fa66:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2fa6a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   2fa6e:	9302      	str	r3, [sp, #8]
   2fa70:	6803      	ldr	r3, [r0, #0]
   2fa72:	9203      	str	r2, [sp, #12]
   2fa74:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2fa76:	6883      	ldr	r3, [r0, #8]
   2fa78:	3708      	adds	r7, #8
   2fa7a:	4299      	cmp	r1, r3
   2fa7c:	bf28      	it	cs
   2fa7e:	f04f 31ff 	movcs.w	r1, #4294967295
   2fa82:	f7ff ff49 	bl	2f918 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2fa86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2fa8a:	5098      	str	r0, [r3, r2]
   2fa8c:	2200      	movs	r2, #0
   2fa8e:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   2fa90:	f857 2c08 	ldr.w	r2, [r7, #-8]
   2fa94:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2fa96:	9a01      	ldr	r2, [sp, #4]
   2fa98:	4296      	cmp	r6, r2
   2fa9a:	bfac      	ite	ge
   2fa9c:	2200      	movge	r2, #0
   2fa9e:	2201      	movlt	r2, #1
		if (i >= readable)
   2faa0:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   2faa2:	bfd8      	it	le
   2faa4:	f042 0202 	orrle.w	r2, r2, #2
   2faa8:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2faaa:	3601      	adds	r6, #1
   2faac:	89ed      	ldrh	r5, [r5, #14]
   2faae:	e7bb      	b.n	2fa28 <virtqueue_add_buffer+0x30>

0002fab0 <virtqueue_get_buffer>:
{
   2fab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2fab2:	b350      	cbz	r0, 2fb0a <virtqueue_get_buffer+0x5a>
   2fab4:	6a05      	ldr	r5, [r0, #32]
   2fab6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   2fab8:	886b      	ldrh	r3, [r5, #2]
   2faba:	42a3      	cmp	r3, r4
   2fabc:	d030      	beq.n	2fb20 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2fabe:	1c63      	adds	r3, r4, #1
   2fac0:	85c3      	strh	r3, [r0, #46]	; 0x2e
   2fac2:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   2fac4:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2fac8:	3b01      	subs	r3, #1
   2faca:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   2facc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2fad0:	686b      	ldr	r3, [r5, #4]
   2fad2:	b29e      	uxth	r6, r3
	if (len)
   2fad4:	b109      	cbz	r1, 2fada <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2fad6:	68ad      	ldr	r5, [r5, #8]
   2fad8:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2fada:	f8d0 c018 	ldr.w	ip, [r0, #24]
   2fade:	b29b      	uxth	r3, r3
   2fae0:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   2fae4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2fae8:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2faea:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2faec:	442f      	add	r7, r5
	dxp->ndescs--;
   2faee:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2faf0:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   2faf2:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2faf4:	898d      	ldrh	r5, [r1, #12]
   2faf6:	076f      	lsls	r7, r5, #29
   2faf8:	d50e      	bpl.n	2fb18 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   2fafa:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2fafc:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2fafe:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2fb00:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   2fb02:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2fb04:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2fb06:	b102      	cbz	r2, 2fb0a <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2fb08:	8014      	strh	r4, [r2, #0]
}
   2fb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2fb0c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2fb0e:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2fb10:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   2fb12:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2fb16:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2fb18:	898d      	ldrh	r5, [r1, #12]
   2fb1a:	07ed      	lsls	r5, r5, #31
   2fb1c:	d4f6      	bmi.n	2fb0c <virtqueue_get_buffer+0x5c>
   2fb1e:	e7ec      	b.n	2fafa <virtqueue_get_buffer+0x4a>
		return NULL;
   2fb20:	2000      	movs	r0, #0
   2fb22:	e7f2      	b.n	2fb0a <virtqueue_get_buffer+0x5a>

0002fb24 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2fb24:	6983      	ldr	r3, [r0, #24]
   2fb26:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2fb2a:	6898      	ldr	r0, [r3, #8]
   2fb2c:	4770      	bx	lr

0002fb2e <virtqueue_get_available_buffer>:
{
   2fb2e:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2fb30:	f3bf 8f5b 	dmb	ish
{
   2fb34:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fb36:	69c1      	ldr	r1, [r0, #28]
{
   2fb38:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fb3a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2fb3c:	884a      	ldrh	r2, [r1, #2]
{
   2fb3e:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fb40:	429a      	cmp	r2, r3
   2fb42:	d016      	beq.n	2fb72 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2fb44:	1c5a      	adds	r2, r3, #1
   2fb46:	8602      	strh	r2, [r0, #48]	; 0x30
   2fb48:	8942      	ldrh	r2, [r0, #10]
   2fb4a:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2fb4c:	4013      	ands	r3, r2
   2fb4e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2fb52:	888a      	ldrh	r2, [r1, #4]
   2fb54:	802a      	strh	r2, [r5, #0]
   2fb56:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2fb58:	6982      	ldr	r2, [r0, #24]
   2fb5a:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   2fb5c:	58d1      	ldr	r1, [r2, r3]
   2fb5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2fb60:	f7ff fef6 	bl	2f950 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   2fb64:	882a      	ldrh	r2, [r5, #0]
   2fb66:	69a3      	ldr	r3, [r4, #24]
   2fb68:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2fb6c:	689b      	ldr	r3, [r3, #8]
   2fb6e:	6033      	str	r3, [r6, #0]
}
   2fb70:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2fb72:	2000      	movs	r0, #0
   2fb74:	e7fc      	b.n	2fb70 <virtqueue_get_available_buffer+0x42>

0002fb76 <virtqueue_disable_cb>:
{
   2fb76:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fb78:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fb7a:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fb7c:	6912      	ldr	r2, [r2, #16]
   2fb7e:	0092      	lsls	r2, r2, #2
   2fb80:	d517      	bpl.n	2fbb2 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fb82:	b943      	cbnz	r3, 2fb96 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2fb84:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   2fb86:	69c2      	ldr	r2, [r0, #28]
   2fb88:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2fb8a:	8944      	ldrh	r4, [r0, #10]
   2fb8c:	3b01      	subs	r3, #1
   2fb8e:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   2fb90:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2fb94:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fb96:	6803      	ldr	r3, [r0, #0]
   2fb98:	699b      	ldr	r3, [r3, #24]
   2fb9a:	2b01      	cmp	r3, #1
   2fb9c:	d108      	bne.n	2fbb0 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2fb9e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   2fba0:	6a02      	ldr	r2, [r0, #32]
   2fba2:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2fba4:	8940      	ldrh	r0, [r0, #10]
   2fba6:	3b01      	subs	r3, #1
   2fba8:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   2fbaa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2fbae:	8093      	strh	r3, [r2, #4]
}
   2fbb0:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fbb2:	b923      	cbnz	r3, 2fbbe <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2fbb4:	69c2      	ldr	r2, [r0, #28]
   2fbb6:	8813      	ldrh	r3, [r2, #0]
   2fbb8:	f043 0301 	orr.w	r3, r3, #1
   2fbbc:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fbbe:	6803      	ldr	r3, [r0, #0]
   2fbc0:	699b      	ldr	r3, [r3, #24]
   2fbc2:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2fbc4:	bf01      	itttt	eq
   2fbc6:	6a02      	ldreq	r2, [r0, #32]
   2fbc8:	8813      	ldrheq	r3, [r2, #0]
   2fbca:	f043 0301 	orreq.w	r3, r3, #1
   2fbce:	8013      	strheq	r3, [r2, #0]
}
   2fbd0:	e7ee      	b.n	2fbb0 <virtqueue_disable_cb+0x3a>

0002fbd2 <virtqueue_kick>:
{
   2fbd2:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2fbd4:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fbd8:	6803      	ldr	r3, [r0, #0]
{
   2fbda:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fbdc:	691a      	ldr	r2, [r3, #16]
   2fbde:	699b      	ldr	r3, [r3, #24]
   2fbe0:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2fbe4:	d01a      	beq.n	2fc1c <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fbe6:	b97b      	cbnz	r3, 2fc08 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   2fbe8:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   2fbea:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   2fbec:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2fbee:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2fbf0:	3b01      	subs	r3, #1
   2fbf2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2fbf6:	8892      	ldrh	r2, [r2, #4]
   2fbf8:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2fbfa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2fbfc:	b29b      	uxth	r3, r3
   2fbfe:	429a      	cmp	r2, r3
   2fc00:	d814      	bhi.n	2fc2c <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   2fc02:	2300      	movs	r3, #0
   2fc04:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2fc06:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fc08:	2b01      	cmp	r3, #1
   2fc0a:	d1fa      	bne.n	2fc02 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   2fc0c:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2fc0e:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   2fc10:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   2fc12:	6941      	ldr	r1, [r0, #20]
   2fc14:	3b01      	subs	r3, #1
   2fc16:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2fc1a:	e7ec      	b.n	2fbf6 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fc1c:	b963      	cbnz	r3, 2fc38 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   2fc1e:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   2fc20:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2fc22:	43db      	mvns	r3, r3
   2fc24:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2fc28:	2b00      	cmp	r3, #0
   2fc2a:	d0ea      	beq.n	2fc02 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2fc2c:	6923      	ldr	r3, [r4, #16]
   2fc2e:	2b00      	cmp	r3, #0
   2fc30:	d0e7      	beq.n	2fc02 <virtqueue_kick+0x30>
		vq->notify(vq);
   2fc32:	4620      	mov	r0, r4
   2fc34:	4798      	blx	r3
   2fc36:	e7e4      	b.n	2fc02 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fc38:	2b01      	cmp	r3, #1
   2fc3a:	d1e2      	bne.n	2fc02 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   2fc3c:	69c3      	ldr	r3, [r0, #28]
   2fc3e:	e7ef      	b.n	2fc20 <virtqueue_kick+0x4e>

0002fc40 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fc40:	69c3      	ldr	r3, [r0, #28]
   2fc42:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   2fc44:	8859      	ldrh	r1, [r3, #2]
   2fc46:	4291      	cmp	r1, r2
   2fc48:	d00a      	beq.n	2fc60 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2fc4a:	8941      	ldrh	r1, [r0, #10]
   2fc4c:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   2fc4e:	400a      	ands	r2, r1
   2fc50:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   2fc54:	889a      	ldrh	r2, [r3, #4]
   2fc56:	6983      	ldr	r3, [r0, #24]
   2fc58:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2fc5c:	6898      	ldr	r0, [r3, #8]
	return len;
   2fc5e:	4770      	bx	lr
		return 0;
   2fc60:	2000      	movs	r0, #0
}
   2fc62:	4770      	bx	lr

0002fc64 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   2fc64:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2fc68:	68c3      	ldr	r3, [r0, #12]
   2fc6a:	b103      	cbz	r3, 2fc6e <virtqueue_notification+0xa>
		vq->callback(vq);
   2fc6c:	4718      	bx	r3
}
   2fc6e:	4770      	bx	lr

0002fc70 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2fc70:	f04f 32ff 	mov.w	r2, #4294967295
   2fc74:	f04f 33ff 	mov.w	r3, #4294967295
   2fc78:	f7f5 bcea 	b.w	25650 <z_impl_k_sem_take>

0002fc7c <rpmsg_unregister_endpoint>:
{
   2fc7c:	b570      	push	{r4, r5, r6, lr}
   2fc7e:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2fc80:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2fc82:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2fc86:	4630      	mov	r0, r6
   2fc88:	f7ff fff2 	bl	2fc70 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2fc8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2fc8e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   2fc92:	2b7f      	cmp	r3, #127	; 0x7f
   2fc94:	d80b      	bhi.n	2fcae <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2fc96:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2fc98:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2fc9a:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2fc9c:	f003 031f 	and.w	r3, r3, #31
   2fca0:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2fca2:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   2fca6:	ea23 0302 	bic.w	r3, r3, r2
   2fcaa:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   2fcae:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2fcb2:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2fcb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   2fcb6:	f104 0334 	add.w	r3, r4, #52	; 0x34
   2fcba:	6011      	str	r1, [r2, #0]
	node->next = node;
   2fcbc:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2fcc0:	2300      	movs	r3, #0
   2fcc2:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2fcc4:	4630      	mov	r0, r6
}
   2fcc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2fcca:	f7f5 bc7d 	b.w	255c8 <z_impl_k_sem_give>

0002fcce <rpmsg_send_ns_message>:
{
   2fcce:	b530      	push	{r4, r5, lr}
   2fcd0:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   2fcd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   2fcd4:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2fcd6:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2fcd8:	2220      	movs	r2, #32
   2fcda:	4601      	mov	r1, r0
   2fcdc:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2fcde:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2fce0:	f000 fddf 	bl	308a2 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2fce4:	2328      	movs	r3, #40	; 0x28
   2fce6:	2201      	movs	r2, #1
   2fce8:	4629      	mov	r1, r5
   2fcea:	e9cd 3200 	strd	r3, r2, [sp]
   2fcee:	4620      	mov	r0, r4
   2fcf0:	2235      	movs	r2, #53	; 0x35
   2fcf2:	ab02      	add	r3, sp, #8
   2fcf4:	f7f4 f912 	bl	23f1c <rpmsg_send_offchannel_raw>
}
   2fcf8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2fcfc:	b00d      	add	sp, #52	; 0x34
   2fcfe:	bd30      	pop	{r4, r5, pc}

0002fd00 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2fd00:	b128      	cbz	r0, 2fd0e <rpmsg_hold_rx_buffer+0xe>
   2fd02:	6a00      	ldr	r0, [r0, #32]
   2fd04:	b118      	cbz	r0, 2fd0e <rpmsg_hold_rx_buffer+0xe>
   2fd06:	b111      	cbz	r1, 2fd0e <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   2fd08:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2fd0a:	b103      	cbz	r3, 2fd0e <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   2fd0c:	4718      	bx	r3
}
   2fd0e:	4770      	bx	lr

0002fd10 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2fd10:	b130      	cbz	r0, 2fd20 <rpmsg_release_rx_buffer+0x10>
   2fd12:	6a00      	ldr	r0, [r0, #32]
   2fd14:	b120      	cbz	r0, 2fd20 <rpmsg_release_rx_buffer+0x10>
   2fd16:	b119      	cbz	r1, 2fd20 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2fd18:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2fd1c:	b103      	cbz	r3, 2fd20 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   2fd1e:	4718      	bx	r3
}
   2fd20:	4770      	bx	lr

0002fd22 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   2fd22:	b130      	cbz	r0, 2fd32 <rpmsg_get_tx_payload_buffer+0x10>
   2fd24:	6a00      	ldr	r0, [r0, #32]
   2fd26:	b120      	cbz	r0, 2fd32 <rpmsg_get_tx_payload_buffer+0x10>
   2fd28:	b119      	cbz	r1, 2fd32 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   2fd2a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   2fd2e:	b103      	cbz	r3, 2fd32 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   2fd30:	4718      	bx	r3
}
   2fd32:	2000      	movs	r0, #0
   2fd34:	4770      	bx	lr

0002fd36 <rpmsg_get_endpoint>:
{
   2fd36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2fd3a:	4606      	mov	r6, r0
   2fd3c:	4688      	mov	r8, r1
   2fd3e:	4617      	mov	r7, r2
   2fd40:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2fd42:	6804      	ldr	r4, [r0, #0]
   2fd44:	42a6      	cmp	r6, r4
   2fd46:	d101      	bne.n	2fd4c <rpmsg_get_endpoint+0x16>
	return NULL;
   2fd48:	2500      	movs	r5, #0
   2fd4a:	e023      	b.n	2fd94 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd4c:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2fd4e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd52:	d002      	beq.n	2fd5a <rpmsg_get_endpoint+0x24>
   2fd54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2fd56:	42bb      	cmp	r3, r7
   2fd58:	d01c      	beq.n	2fd94 <rpmsg_get_endpoint+0x5e>
		if (name)
   2fd5a:	f1b8 0f00 	cmp.w	r8, #0
   2fd5e:	d101      	bne.n	2fd64 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   2fd60:	6824      	ldr	r4, [r4, #0]
   2fd62:	e7ef      	b.n	2fd44 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   2fd64:	2220      	movs	r2, #32
   2fd66:	4641      	mov	r1, r8
   2fd68:	4628      	mov	r0, r5
   2fd6a:	f000 fd88 	bl	3087e <strncmp>
		if (!name || !name_match)
   2fd6e:	2800      	cmp	r0, #0
   2fd70:	d1f6      	bne.n	2fd60 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2fd72:	f1b9 3fff 	cmp.w	r9, #4294967295
   2fd76:	d002      	beq.n	2fd7e <rpmsg_get_endpoint+0x48>
   2fd78:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2fd7a:	454b      	cmp	r3, r9
   2fd7c:	d00a      	beq.n	2fd94 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2fd7e:	1c7b      	adds	r3, r7, #1
   2fd80:	d00b      	beq.n	2fd9a <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   2fd82:	6824      	ldr	r4, [r4, #0]
   2fd84:	42b4      	cmp	r4, r6
   2fd86:	d0df      	beq.n	2fd48 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd88:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2fd8c:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd90:	429f      	cmp	r7, r3
   2fd92:	d1e7      	bne.n	2fd64 <rpmsg_get_endpoint+0x2e>
}
   2fd94:	4628      	mov	r0, r5
   2fd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2fd9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2fd9c:	3301      	adds	r3, #1
   2fd9e:	d0f9      	beq.n	2fd94 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   2fda0:	6824      	ldr	r4, [r4, #0]
   2fda2:	42b4      	cmp	r4, r6
   2fda4:	d0d0      	beq.n	2fd48 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2fda6:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fdaa:	e7d6      	b.n	2fd5a <rpmsg_get_endpoint+0x24>

0002fdac <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2fdac:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   2fdae:	4604      	mov	r4, r0
   2fdb0:	b190      	cbz	r0, 2fdd8 <rpmsg_destroy_ept+0x2c>
   2fdb2:	6a03      	ldr	r3, [r0, #32]
   2fdb4:	b183      	cbz	r3, 2fdd8 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   2fdb6:	7802      	ldrb	r2, [r0, #0]
   2fdb8:	b14a      	cbz	r2, 2fdce <rpmsg_destroy_ept+0x22>
   2fdba:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   2fdbe:	b133      	cbz	r3, 2fdce <rpmsg_destroy_ept+0x22>
   2fdc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2fdc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2fdc6:	d302      	bcc.n	2fdce <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2fdc8:	2101      	movs	r1, #1
   2fdca:	f7ff ff80 	bl	2fcce <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2fdce:	4620      	mov	r0, r4
}
   2fdd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2fdd4:	f7ff bf52 	b.w	2fc7c <rpmsg_unregister_endpoint>
}
   2fdd8:	bd10      	pop	{r4, pc}

0002fdda <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2fdda:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2fdde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2fde2:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2fde6:	4770      	bx	lr

0002fde8 <rpmsg_virtio_tx_callback>:
}
   2fde8:	4770      	bx	lr

0002fdea <k_sem_give>:
   2fdea:	f7f5 bbed 	b.w	255c8 <z_impl_k_sem_give>

0002fdee <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2fdee:	f04f 32ff 	mov.w	r2, #4294967295
   2fdf2:	f04f 33ff 	mov.w	r3, #4294967295
   2fdf6:	f7f5 bc2b 	b.w	25650 <z_impl_k_sem_take>

0002fdfa <rpmsg_virtio_release_tx_buffer>:
{
   2fdfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fdfc:	460c      	mov	r4, r1
   2fdfe:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   2fe00:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2fe04:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2fe08:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2fe0a:	b2b6      	uxth	r6, r6
   2fe0c:	f7ff ffef 	bl	2fdee <__metal_mutex_acquire>
	r_desc->idx = idx;
   2fe10:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   2fe14:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2fe18:	f1a4 0310 	sub.w	r3, r4, #16
   2fe1c:	f844 2c0c 	str.w	r2, [r4, #-12]
   2fe20:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   2fe24:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2fe28:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   2fe2c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   2fe30:	4638      	mov	r0, r7
   2fe32:	6013      	str	r3, [r2, #0]
   2fe34:	f7ff ffd9 	bl	2fdea <k_sem_give>
}
   2fe38:	2000      	movs	r0, #0
   2fe3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fe3c <rpmsg_virtio_ns_callback>:
{
   2fe3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   2fe40:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   2fe42:	2a28      	cmp	r2, #40	; 0x28
{
   2fe44:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   2fe46:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   2fe4a:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   2fe4c:	d126      	bne.n	2fe9c <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2fe4e:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2fe50:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2fe52:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   2fe54:	42a1      	cmp	r1, r4
   2fe56:	bf28      	it	cs
   2fe58:	f04f 31ff 	movcs.w	r1, #4294967295
   2fe5c:	2320      	movs	r3, #32
   2fe5e:	466a      	mov	r2, sp
   2fe60:	f7fe ff59 	bl	2ed16 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2fe64:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   2fe68:	f8d7 8020 	ldr.w	r8, [r7, #32]
   2fe6c:	4630      	mov	r0, r6
   2fe6e:	f7ff ffbe 	bl	2fdee <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2fe72:	4643      	mov	r3, r8
   2fe74:	f04f 32ff 	mov.w	r2, #4294967295
   2fe78:	4669      	mov	r1, sp
   2fe7a:	4628      	mov	r0, r5
   2fe7c:	f7ff ff5b 	bl	2fd36 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2fe80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2fe82:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2fe84:	07db      	lsls	r3, r3, #31
   2fe86:	d519      	bpl.n	2febc <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   2fe88:	b960      	cbnz	r0, 2fea4 <rpmsg_virtio_ns_callback+0x68>
   2fe8a:	4630      	mov	r0, r6
   2fe8c:	f7ff ffad 	bl	2fdea <k_sem_give>
		if (rdev->ns_unbind_cb)
   2fe90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   2fe92:	b11b      	cbz	r3, 2fe9c <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   2fe94:	4642      	mov	r2, r8
   2fe96:	4669      	mov	r1, sp
   2fe98:	4628      	mov	r0, r5
   2fe9a:	4798      	blx	r3
}
   2fe9c:	2000      	movs	r0, #0
   2fe9e:	b008      	add	sp, #32
   2fea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2fea4:	f04f 33ff 	mov.w	r3, #4294967295
   2fea8:	6283      	str	r3, [r0, #40]	; 0x28
   2feaa:	4630      	mov	r0, r6
   2feac:	f7ff ff9d 	bl	2fdea <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2feb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2feb2:	2b00      	cmp	r3, #0
   2feb4:	d0ec      	beq.n	2fe90 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   2feb6:	4620      	mov	r0, r4
   2feb8:	4798      	blx	r3
   2feba:	e7e9      	b.n	2fe90 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   2febc:	b920      	cbnz	r0, 2fec8 <rpmsg_virtio_ns_callback+0x8c>
   2febe:	4630      	mov	r0, r6
   2fec0:	f7ff ff93 	bl	2fdea <k_sem_give>
			if (rdev->ns_bind_cb)
   2fec4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2fec6:	e7e4      	b.n	2fe92 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2fec8:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2fecc:	4630      	mov	r0, r6
   2fece:	f7ff ff8c 	bl	2fdea <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2fed2:	e7e3      	b.n	2fe9c <rpmsg_virtio_ns_callback+0x60>

0002fed4 <rpmsg_virtio_get_rx_buffer>:
{
   2fed4:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2fed6:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2feda:	4613      	mov	r3, r2
   2fedc:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   2fede:	b925      	cbnz	r5, 2feea <rpmsg_virtio_get_rx_buffer+0x16>
}
   2fee0:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2fee2:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2fee6:	f7ff bde3 	b.w	2fab0 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2feea:	2d01      	cmp	r5, #1
   2feec:	d106      	bne.n	2fefc <rpmsg_virtio_get_rx_buffer+0x28>
}
   2feee:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2fef0:	460a      	mov	r2, r1
   2fef2:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2fef6:	4619      	mov	r1, r3
   2fef8:	f7ff be19 	b.w	2fb2e <virtqueue_get_available_buffer>
}
   2fefc:	2000      	movs	r0, #0
   2fefe:	bc30      	pop	{r4, r5}
   2ff00:	4770      	bx	lr

0002ff02 <rpmsg_virtio_return_buffer>:
{
   2ff02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2ff04:	460c      	mov	r4, r1
   2ff06:	4619      	mov	r1, r3
   2ff08:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2ff0c:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2ff0e:	b95d      	cbnz	r5, 2ff28 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2ff10:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2ff12:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2ff16:	2301      	movs	r3, #1
   2ff18:	462a      	mov	r2, r5
   2ff1a:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2ff1e:	a902      	add	r1, sp, #8
   2ff20:	f7ff fd6a 	bl	2f9f8 <virtqueue_add_buffer>
}
   2ff24:	b004      	add	sp, #16
   2ff26:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2ff28:	2d01      	cmp	r5, #1
   2ff2a:	d1fb      	bne.n	2ff24 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2ff2c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   2ff30:	b004      	add	sp, #16
   2ff32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2ff36:	f7f3 bfd5 	b.w	23ee4 <virtqueue_add_consumed_buffer>

0002ff3a <rpmsg_virtio_release_rx_buffer>:
{
   2ff3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ff3c:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2ff3e:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2ff42:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2ff46:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2ff48:	b2b6      	uxth	r6, r6
{
   2ff4a:	460d      	mov	r5, r1
   2ff4c:	f7ff ff4f 	bl	2fdee <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2ff50:	4631      	mov	r1, r6
   2ff52:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2ff56:	f7ff fde5 	bl	2fb24 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2ff5a:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2ff5c:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2ff5e:	f1a5 0110 	sub.w	r1, r5, #16
   2ff62:	4620      	mov	r0, r4
   2ff64:	f7ff ffcd 	bl	2ff02 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   2ff68:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2ff6c:	f7ff fe31 	bl	2fbd2 <virtqueue_kick>
   2ff70:	4638      	mov	r0, r7
}
   2ff72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ff76:	f7ff bf38 	b.w	2fdea <k_sem_give>

0002ff7a <rpmsg_virtio_shm_pool_get_buffer>:
{
   2ff7a:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   2ff7c:	b148      	cbz	r0, 2ff92 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   2ff7e:	b149      	cbz	r1, 2ff94 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   2ff80:	6843      	ldr	r3, [r0, #4]
   2ff82:	428b      	cmp	r3, r1
   2ff84:	d306      	bcc.n	2ff94 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2ff86:	6882      	ldr	r2, [r0, #8]
   2ff88:	6804      	ldr	r4, [r0, #0]
   2ff8a:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   2ff8c:	1a5b      	subs	r3, r3, r1
   2ff8e:	6043      	str	r3, [r0, #4]
	return buffer;
   2ff90:	18a0      	adds	r0, r4, r2
}
   2ff92:	bd10      	pop	{r4, pc}
		return NULL;
   2ff94:	2000      	movs	r0, #0
   2ff96:	e7fc      	b.n	2ff92 <rpmsg_virtio_shm_pool_get_buffer+0x18>

0002ff98 <rpmsg_virtio_get_tx_payload_buffer>:
{
   2ff98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2ff9c:	4605      	mov	r5, r0
   2ff9e:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   2ffa2:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2ffa4:	6a03      	ldr	r3, [r0, #32]
   2ffa6:	4617      	mov	r7, r2
   2ffa8:	681b      	ldr	r3, [r3, #0]
   2ffaa:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2ffac:	0743      	lsls	r3, r0, #29
   2ffae:	d403      	bmi.n	2ffb8 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   2ffb0:	2000      	movs	r0, #0
}
   2ffb2:	b002      	add	sp, #8
   2ffb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2ffb8:	f643 2398 	movw	r3, #15000	; 0x3a98
   2ffbc:	2f00      	cmp	r7, #0
   2ffbe:	bf18      	it	ne
   2ffc0:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   2ffc2:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2ffc6:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2ffca:	4640      	mov	r0, r8
   2ffcc:	f7ff ff0f 	bl	2fdee <__metal_mutex_acquire>
	return list->next == list;
   2ffd0:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   2ffd4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2ffd8:	4554      	cmp	r4, sl
   2ffda:	f8d3 9018 	ldr.w	r9, [r3, #24]
   2ffde:	d025      	beq.n	3002c <CONFIG_FLASH_LOAD_SIZE+0x2c>
	if (node) {
   2ffe0:	b324      	cbz	r4, 3002c <CONFIG_FLASH_LOAD_SIZE+0x2c>
	node->next->prev = node->prev;
   2ffe2:	e9d4 2300 	ldrd	r2, r3, [r4]
   2ffe6:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   2ffe8:	6822      	ldr	r2, [r4, #0]
   2ffea:	601a      	str	r2, [r3, #0]
	node->next = node;
   2ffec:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   2fff0:	f1b9 0f00 	cmp.w	r9, #0
   2fff4:	d10e      	bne.n	30014 <CONFIG_FLASH_LOAD_SIZE+0x14>
			*len = rvdev->config.h2r_buf_size;
   2fff6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2fffa:	6033      	str	r3, [r6, #0]
   2fffc:	4640      	mov	r0, r8
   2fffe:	f7ff fef4 	bl	2fdea <k_sem_give>
	rp_hdr->reserved = idx;
   30002:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30006:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   3000a:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   3000c:	6833      	ldr	r3, [r6, #0]
   3000e:	3b10      	subs	r3, #16
   30010:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30012:	e7ce      	b.n	2ffb2 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   30014:	f1b9 0f01 	cmp.w	r9, #1
   30018:	d1f0      	bne.n	2fffc <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   3001a:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   3001c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   30020:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   30024:	f7ff fd7e 	bl	2fb24 <virtqueue_get_buffer_length>
   30028:	6030      	str	r0, [r6, #0]
   3002a:	e7e7      	b.n	2fffc <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   3002c:	f1b9 0f00 	cmp.w	r9, #0
   30030:	d12a      	bne.n	30088 <CONFIG_FLASH_LOAD_SIZE+0x88>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   30032:	4631      	mov	r1, r6
   30034:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30038:	f10d 0206 	add.w	r2, sp, #6
   3003c:	f7ff fd38 	bl	2fab0 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   30040:	4604      	mov	r4, r0
   30042:	2800      	cmp	r0, #0
   30044:	d1da      	bne.n	2fffc <rpmsg_virtio_get_tx_payload_buffer+0x64>
   30046:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   3004a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   3004c:	b953      	cbnz	r3, 30064 <CONFIG_FLASH_LOAD_SIZE+0x64>
   3004e:	4640      	mov	r0, r8
   30050:	f7ff fecb 	bl	2fdea <k_sem_give>
		if (rp_hdr || !tick_count)
   30054:	2f00      	cmp	r7, #0
   30056:	d0ab      	beq.n	2ffb0 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   30058:	2021      	movs	r0, #33	; 0x21
   3005a:	2100      	movs	r1, #0
   3005c:	f7f7 f9a8 	bl	273b0 <z_impl_k_sleep>
		tick_count--;
   30060:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   30062:	e7b2      	b.n	2ffca <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   30064:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   30068:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   3006c:	f7ff ff85 	bl	2ff7a <rpmsg_virtio_shm_pool_get_buffer>
   30070:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   30072:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   30076:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   3007a:	6033      	str	r3, [r6, #0]
   3007c:	4640      	mov	r0, r8
   3007e:	f7ff feb4 	bl	2fdea <k_sem_give>
		if (rp_hdr || !tick_count)
   30082:	2c00      	cmp	r4, #0
   30084:	d0e6      	beq.n	30054 <CONFIG_FLASH_LOAD_SIZE+0x54>
   30086:	e7bc      	b.n	30002 <CONFIG_FLASH_LOAD_SIZE+0x2>
	} else if (role == RPMSG_REMOTE) {
   30088:	f1b9 0f01 	cmp.w	r9, #1
   3008c:	d1df      	bne.n	3004e <CONFIG_FLASH_LOAD_SIZE+0x4e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   3008e:	4632      	mov	r2, r6
   30090:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30094:	f10d 0106 	add.w	r1, sp, #6
   30098:	f7ff fd49 	bl	2fb2e <virtqueue_get_available_buffer>
   3009c:	4604      	mov	r4, r0
   3009e:	e7ed      	b.n	3007c <CONFIG_FLASH_LOAD_SIZE+0x7c>

000300a0 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   300a0:	b120      	cbz	r0, 300ac <rpmsg_virtio_init_shm_pool+0xc>
   300a2:	b119      	cbz	r1, 300ac <rpmsg_virtio_init_shm_pool+0xc>
   300a4:	b112      	cbz	r2, 300ac <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   300a6:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   300aa:	6001      	str	r1, [r0, #0]
}
   300ac:	4770      	bx	lr

000300ae <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   300ae:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   300b0:	4604      	mov	r4, r0
   300b2:	b918      	cbnz	r0, 300bc <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   300b4:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   300b6:	3834      	subs	r0, #52	; 0x34
   300b8:	f7ff fe78 	bl	2fdac <rpmsg_destroy_ept>
	return list->next == list;
   300bc:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   300be:	4284      	cmp	r4, r0
   300c0:	d1f9      	bne.n	300b6 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   300c2:	2300      	movs	r3, #0
		rvdev->svq = 0;
   300c4:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   300c8:	e7f4      	b.n	300b4 <rpmsg_deinit_vdev+0x6>

000300ca <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   300ca:	f7f4 ba7d 	b.w	245c8 <_DoInit>

000300ce <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   300ce:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   300d0:	f7ff fffb 	bl	300ca <SEGGER_RTT_Init>

	return 0;
}
   300d4:	2000      	movs	r0, #0
   300d6:	bd08      	pop	{r3, pc}

000300d8 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   300d8:	4770      	bx	lr

000300da <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   300da:	b140      	cbz	r0, 300ee <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   300dc:	68c3      	ldr	r3, [r0, #12]
   300de:	7858      	ldrb	r0, [r3, #1]
   300e0:	f010 0001 	ands.w	r0, r0, #1
   300e4:	bf1e      	ittt	ne
   300e6:	7818      	ldrbne	r0, [r3, #0]
   300e8:	fab0 f080 	clzne	r0, r0
   300ec:	0940      	lsrne	r0, r0, #5
}
   300ee:	4770      	bx	lr

000300f0 <z_early_memset>:
   300f0:	f000 ba77 	b.w	305e2 <memset>

000300f4 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   300f4:	f000 ba3b 	b.w	3056e <memcpy>

000300f8 <k_heap_init>:
{
   300f8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   300fa:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   300fe:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   30102:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   30104:	f7dc bd0e 	b.w	cb24 <sys_heap_init>

00030108 <k_heap_alloc>:
{
   30108:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   3010a:	e9cd 2300 	strd	r2, r3, [sp]
   3010e:	460a      	mov	r2, r1
   30110:	2104      	movs	r1, #4
   30112:	f7f4 fc9d 	bl	24a50 <k_heap_aligned_alloc>
}
   30116:	b003      	add	sp, #12
   30118:	f85d fb04 	ldr.w	pc, [sp], #4

0003011c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3011c:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   30120:	4313      	orrs	r3, r2
   30122:	f013 0303 	ands.w	r3, r3, #3
   30126:	d10c      	bne.n	30142 <create_free_list+0x26>
	slab->free_list = NULL;
   30128:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3012a:	68c1      	ldr	r1, [r0, #12]
   3012c:	4299      	cmp	r1, r3
   3012e:	d801      	bhi.n	30134 <create_free_list+0x18>
	return 0;
   30130:	2000      	movs	r0, #0
   30132:	4770      	bx	lr
		*(char **)p = slab->free_list;
   30134:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   30136:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   30138:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   3013a:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   3013c:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   3013e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   30140:	e7f3      	b.n	3012a <create_free_list+0xe>
		return -EINVAL;
   30142:	f06f 0015 	mvn.w	r0, #21
}
   30146:	4770      	bx	lr

00030148 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   30148:	f3ef 8005 	mrs	r0, IPSR
}
   3014c:	3800      	subs	r0, #0
   3014e:	bf18      	it	ne
   30150:	2001      	movne	r0, #1
   30152:	4770      	bx	lr

00030154 <z_impl_k_thread_name_set>:
}
   30154:	f06f 0057 	mvn.w	r0, #87	; 0x57
   30158:	4770      	bx	lr

0003015a <k_thread_name_get>:
}
   3015a:	2000      	movs	r0, #0
   3015c:	4770      	bx	lr

0003015e <z_impl_k_thread_start>:
	z_sched_start(thread);
   3015e:	f7f6 ba87 	b.w	26670 <z_sched_start>

00030162 <z_pm_save_idle_exit>:
{
   30162:	b508      	push	{r3, lr}
	pm_system_resume();
   30164:	f7e0 f8dc 	bl	10320 <pm_system_resume>
}
   30168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   3016c:	f7fe bb5c 	b.w	2e828 <sys_clock_idle_exit>

00030170 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   30170:	f990 300e 	ldrsb.w	r3, [r0, #14]
   30174:	428b      	cmp	r3, r1
   30176:	d001      	beq.n	3017c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   30178:	f7f6 bd7c 	b.w	26c74 <z_set_prio>
}
   3017c:	2000      	movs	r0, #0
   3017e:	4770      	bx	lr

00030180 <z_impl_k_mutex_init>:
{
   30180:	4603      	mov	r3, r0
	mutex->owner = NULL;
   30182:	2000      	movs	r0, #0
   30184:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   30188:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   3018c:	4770      	bx	lr

0003018e <z_queue_node_peek>:
{
   3018e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   30190:	4604      	mov	r4, r0
   30192:	b130      	cbz	r0, 301a2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30194:	6802      	ldr	r2, [r0, #0]
   30196:	0793      	lsls	r3, r2, #30
   30198:	d003      	beq.n	301a2 <z_queue_node_peek+0x14>
		ret = anode->data;
   3019a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3019c:	b109      	cbz	r1, 301a2 <z_queue_node_peek+0x14>
			k_free(anode);
   3019e:	f000 f9bc 	bl	3051a <k_free>
}
   301a2:	4620      	mov	r0, r4
   301a4:	bd10      	pop	{r4, pc}

000301a6 <z_impl_k_queue_init>:
	list->head = NULL;
   301a6:	2300      	movs	r3, #0
	list->tail = NULL;
   301a8:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   301ac:	6083      	str	r3, [r0, #8]
   301ae:	f100 030c 	add.w	r3, r0, #12
   301b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   301b6:	f100 0314 	add.w	r3, r0, #20
   301ba:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   301be:	4770      	bx	lr

000301c0 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   301c0:	2301      	movs	r3, #1
{
   301c2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   301c4:	9300      	str	r3, [sp, #0]
   301c6:	2300      	movs	r3, #0
{
   301c8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   301ca:	4619      	mov	r1, r3
   301cc:	f7f5 f8f8 	bl	253c0 <queue_insert>
}
   301d0:	b003      	add	sp, #12
   301d2:	f85d fb04 	ldr.w	pc, [sp], #4

000301d6 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   301d6:	2300      	movs	r3, #0
{
   301d8:	b507      	push	{r0, r1, r2, lr}
   301da:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   301dc:	9300      	str	r3, [sp, #0]
   301de:	4619      	mov	r1, r3
   301e0:	f7f5 f8ee 	bl	253c0 <queue_insert>
}
   301e4:	b003      	add	sp, #12
   301e6:	f85d fb04 	ldr.w	pc, [sp], #4

000301ea <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   301ea:	b15a      	cbz	r2, 30204 <z_impl_k_sem_init+0x1a>
   301ec:	428a      	cmp	r2, r1
   301ee:	d309      	bcc.n	30204 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   301f0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   301f4:	e9c0 1202 	strd	r1, r2, [r0, #8]
   301f8:	e9c0 0000 	strd	r0, r0, [r0]
   301fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   30200:	2000      	movs	r0, #0
   30202:	4770      	bx	lr
		return -EINVAL;
   30204:	f06f 0015 	mvn.w	r0, #21
}
   30208:	4770      	bx	lr

0003020a <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   3020a:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   3020c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   3020e:	408b      	lsls	r3, r1
   30210:	ea22 0303 	bic.w	r3, r2, r3
   30214:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   30216:	fa22 f001 	lsr.w	r0, r2, r1
}
   3021a:	f000 0001 	and.w	r0, r0, #1
   3021e:	4770      	bx	lr

00030220 <unschedule_locked>:
{
   30220:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30222:	2103      	movs	r1, #3
{
   30224:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30226:	300c      	adds	r0, #12
   30228:	f7ff ffef 	bl	3020a <flag_test_and_clear>
   3022c:	4604      	mov	r4, r0
   3022e:	b118      	cbz	r0, 30238 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   30230:	f105 0010 	add.w	r0, r5, #16
   30234:	f7f7 fb5c 	bl	278f0 <z_abort_timeout>
}
   30238:	4620      	mov	r0, r4
   3023a:	bd38      	pop	{r3, r4, r5, pc}

0003023c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   3023c:	b120      	cbz	r0, 30248 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3023e:	2200      	movs	r2, #0
   30240:	3090      	adds	r0, #144	; 0x90
   30242:	4611      	mov	r1, r2
   30244:	f7f7 b9b6 	b.w	275b4 <z_sched_wake>
}
   30248:	4770      	bx	lr

0003024a <cancel_async_locked>:
{
   3024a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   3024c:	68c3      	ldr	r3, [r0, #12]
{
   3024e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30250:	f3c3 0640 	ubfx	r6, r3, #1, #1
   30254:	079b      	lsls	r3, r3, #30
   30256:	d416      	bmi.n	30286 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   30258:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   3025a:	2102      	movs	r1, #2
   3025c:	300c      	adds	r0, #12
   3025e:	f7ff ffd4 	bl	3020a <flag_test_and_clear>
   30262:	b180      	cbz	r0, 30286 <cancel_async_locked+0x3c>
	return list->head;
   30264:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30268:	b16a      	cbz	r2, 30286 <cancel_async_locked+0x3c>
   3026a:	4294      	cmp	r4, r2
   3026c:	d11d      	bne.n	302aa <cancel_async_locked+0x60>
	return node->next;
   3026e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   30270:	b99e      	cbnz	r6, 3029a <cancel_async_locked+0x50>
   30272:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   30276:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   3027a:	429c      	cmp	r4, r3
   3027c:	d101      	bne.n	30282 <cancel_async_locked+0x38>
	list->tail = node;
   3027e:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   30282:	2300      	movs	r3, #0
   30284:	6023      	str	r3, [r4, #0]
	return *flagp;
   30286:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   30288:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   3028c:	bf1e      	ittt	ne
   3028e:	f043 0302 	orrne.w	r3, r3, #2
   30292:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   30294:	f040 0002 	orrne.w	r0, r0, #2
}
   30298:	bd70      	pop	{r4, r5, r6, pc}
   3029a:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   3029c:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   302a0:	4294      	cmp	r4, r2
	list->tail = node;
   302a2:	bf08      	it	eq
   302a4:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   302a8:	e7eb      	b.n	30282 <cancel_async_locked+0x38>
	return node->next;
   302aa:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   302ac:	6812      	ldr	r2, [r2, #0]
   302ae:	e7db      	b.n	30268 <cancel_async_locked+0x1e>

000302b0 <k_work_submit_to_queue>:
{
   302b0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   302b2:	f7f5 fc9d 	bl	25bf0 <z_work_submit_to_queue>
	if (ret > 0) {
   302b6:	1e04      	subs	r4, r0, #0
   302b8:	dd09      	ble.n	302ce <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   302ba:	f04f 0320 	mov.w	r3, #32
   302be:	f3ef 8011 	mrs	r0, BASEPRI
   302c2:	f383 8812 	msr	BASEPRI_MAX, r3
   302c6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   302ca:	f000 f80d 	bl	302e8 <z_reschedule_irqlock>
}
   302ce:	4620      	mov	r0, r4
   302d0:	bd10      	pop	{r4, pc}

000302d2 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   302d2:	f7f5 bc47 	b.w	25b64 <k_work_busy_get>

000302d6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   302d6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   302da:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   302de:	4283      	cmp	r3, r0
		return b2 - b1;
   302e0:	bf14      	ite	ne
   302e2:	1ac0      	subne	r0, r0, r3
	return 0;
   302e4:	2000      	moveq	r0, #0
}
   302e6:	4770      	bx	lr

000302e8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   302e8:	4603      	mov	r3, r0
   302ea:	b920      	cbnz	r0, 302f6 <z_reschedule_irqlock+0xe>
   302ec:	f3ef 8205 	mrs	r2, IPSR
   302f0:	b90a      	cbnz	r2, 302f6 <z_reschedule_irqlock+0xe>
   302f2:	f7e0 bc15 	b.w	10b20 <arch_swap>
	__asm__ volatile(
   302f6:	f383 8811 	msr	BASEPRI, r3
   302fa:	f3bf 8f6f 	isb	sy
}
   302fe:	4770      	bx	lr

00030300 <z_reschedule_unlocked>:
	__asm__ volatile(
   30300:	f04f 0320 	mov.w	r3, #32
   30304:	f3ef 8011 	mrs	r0, BASEPRI
   30308:	f383 8812 	msr	BASEPRI_MAX, r3
   3030c:	f3bf 8f6f 	isb	sy
   30310:	f7ff bfea 	b.w	302e8 <z_reschedule_irqlock>

00030314 <z_unpend_all>:
{
   30314:	b538      	push	{r3, r4, r5, lr}
   30316:	4605      	mov	r5, r0
	int need_sched = 0;
   30318:	2000      	movs	r0, #0
	return list->head == list;
   3031a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3031c:	42a5      	cmp	r5, r4
   3031e:	d000      	beq.n	30322 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   30320:	b904      	cbnz	r4, 30324 <z_unpend_all+0x10>
}
   30322:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   30324:	4620      	mov	r0, r4
   30326:	f7f6 fdbf 	bl	26ea8 <z_unpend_thread>
		z_ready_thread(thread);
   3032a:	4620      	mov	r0, r4
   3032c:	f7f6 f8d2 	bl	264d4 <z_ready_thread>
		need_sched = 1;
   30330:	2001      	movs	r0, #1
   30332:	e7f2      	b.n	3031a <z_unpend_all+0x6>

00030334 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   30334:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   30336:	f7f7 fc5d 	bl	27bf4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3033a:	bd08      	pop	{r3, pc}

0003033c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3033c:	f7f7 bc5a 	b.w	27bf4 <sys_clock_tick_get>

00030340 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   30340:	b108      	cbz	r0, 30346 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   30342:	f7dd bd95 	b.w	de70 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   30346:	4770      	bx	lr

00030348 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30348:	f1b1 3fff 	cmp.w	r1, #4294967295
   3034c:	bf08      	it	eq
   3034e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   30352:	b538      	push	{r3, r4, r5, lr}
   30354:	460c      	mov	r4, r1
   30356:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30358:	d014      	beq.n	30384 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3035a:	4308      	orrs	r0, r1
   3035c:	d103      	bne.n	30366 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3035e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   30362:	f7f7 bc47 	b.w	27bf4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   30366:	f06f 0001 	mvn.w	r0, #1
   3036a:	f04f 33ff 	mov.w	r3, #4294967295
   3036e:	1b40      	subs	r0, r0, r5
   30370:	eb63 0101 	sbc.w	r1, r3, r1
   30374:	2900      	cmp	r1, #0
   30376:	da04      	bge.n	30382 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   30378:	f7f7 fc3c 	bl	27bf4 <sys_clock_tick_get>
   3037c:	1940      	adds	r0, r0, r5
   3037e:	eb41 0104 	adc.w	r1, r1, r4
}
   30382:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   30384:	f04f 30ff 	mov.w	r0, #4294967295
   30388:	4601      	mov	r1, r0
   3038a:	e7fa      	b.n	30382 <sys_clock_timeout_end_calc+0x3a>

0003038c <k_timer_init>:
	timer->status = 0U;
   3038c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   3038e:	e9c0 1208 	strd	r1, r2, [r0, #32]
   30392:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   30396:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   3039a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   3039e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   303a0:	6343      	str	r3, [r0, #52]	; 0x34
}
   303a2:	4770      	bx	lr

000303a4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   303a4:	b510      	push	{r4, lr}
   303a6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   303a8:	f7f7 faa2 	bl	278f0 <z_abort_timeout>

	if (inactive) {
   303ac:	b9b0      	cbnz	r0, 303dc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   303ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   303b0:	b10b      	cbz	r3, 303b6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   303b2:	4620      	mov	r0, r4
   303b4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   303b6:	f104 0018 	add.w	r0, r4, #24
   303ba:	f7f6 fe17 	bl	26fec <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   303be:	b168      	cbz	r0, 303dc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   303c0:	f7f6 f888 	bl	264d4 <z_ready_thread>
   303c4:	f04f 0320 	mov.w	r3, #32
   303c8:	f3ef 8011 	mrs	r0, BASEPRI
   303cc:	f383 8812 	msr	BASEPRI_MAX, r3
   303d0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   303d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   303d8:	f7ff bf86 	b.w	302e8 <z_reschedule_irqlock>
   303dc:	bd10      	pop	{r4, pc}

000303de <add_event>:
{
   303de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   303e0:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   303e2:	e9d0 1300 	ldrd	r1, r3, [r0]
   303e6:	4288      	cmp	r0, r1
   303e8:	4604      	mov	r4, r0
   303ea:	d105      	bne.n	303f8 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   303ec:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   303ee:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   303f2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   303f4:	6065      	str	r5, [r4, #4]
   303f6:	e01d      	b.n	30434 <add_event+0x56>
	if ((pending == NULL) ||
   303f8:	2b00      	cmp	r3, #0
   303fa:	d0f7      	beq.n	303ec <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   303fc:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   303fe:	b100      	cbz	r0, 30402 <add_event+0x24>
   30400:	3860      	subs	r0, #96	; 0x60
   30402:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   30406:	4639      	mov	r1, r7
   30408:	f7ff ff65 	bl	302d6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3040c:	2800      	cmp	r0, #0
   3040e:	dced      	bgt.n	303ec <add_event+0xe>
	return list->head == list;
   30410:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30412:	42b4      	cmp	r4, r6
   30414:	d0ea      	beq.n	303ec <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   30416:	2e00      	cmp	r6, #0
   30418:	d0e8      	beq.n	303ec <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   3041a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3041c:	b101      	cbz	r1, 30420 <add_event+0x42>
   3041e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   30420:	4638      	mov	r0, r7
   30422:	f7ff ff58 	bl	302d6 <z_sched_prio_cmp>
   30426:	2800      	cmp	r0, #0
   30428:	dd05      	ble.n	30436 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   3042a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3042c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   30430:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   30432:	6075      	str	r5, [r6, #4]
}
   30434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   30436:	6863      	ldr	r3, [r4, #4]
   30438:	429e      	cmp	r6, r3
   3043a:	d0d7      	beq.n	303ec <add_event+0xe>
   3043c:	6836      	ldr	r6, [r6, #0]
   3043e:	e7ea      	b.n	30416 <add_event+0x38>

00030440 <signal_poll_event>:
{
   30440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   30444:	6884      	ldr	r4, [r0, #8]
{
   30446:	4605      	mov	r5, r0
   30448:	460e      	mov	r6, r1
	if (poller != NULL) {
   3044a:	b144      	cbz	r4, 3045e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   3044c:	7863      	ldrb	r3, [r4, #1]
   3044e:	2b01      	cmp	r3, #1
   30450:	d12e      	bne.n	304b0 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   30452:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   30456:	f013 0302 	ands.w	r3, r3, #2
   3045a:	d10a      	bne.n	30472 <signal_poll_event+0x32>
		poller->is_polling = false;
   3045c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   3045e:	2000      	movs	r0, #0
	event->state |= state;
   30460:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   30462:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   30464:	f3c3 3286 	ubfx	r2, r3, #14, #7
   30468:	4316      	orrs	r6, r2
   3046a:	f366 3394 	bfi	r3, r6, #14, #7
   3046e:	60eb      	str	r3, [r5, #12]
	return retcode;
   30470:	e03e      	b.n	304f0 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   30472:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   30476:	f1b3 3fff 	cmp.w	r3, #4294967295
   3047a:	bf08      	it	eq
   3047c:	f112 0f02 	cmneq.w	r2, #2
   30480:	d032      	beq.n	304e8 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   30482:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   30486:	4640      	mov	r0, r8
   30488:	f7f6 fd0e 	bl	26ea8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3048c:	2e08      	cmp	r6, #8
   3048e:	bf0c      	ite	eq
   30490:	f06f 0303 	mvneq.w	r3, #3
   30494:	2300      	movne	r3, #0
   30496:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   30498:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   3049c:	06db      	lsls	r3, r3, #27
   3049e:	d109      	bne.n	304b4 <signal_poll_event+0x74>
   304a0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   304a4:	b937      	cbnz	r7, 304b4 <signal_poll_event+0x74>
	z_ready_thread(thread);
   304a6:	4640      	mov	r0, r8
   304a8:	f7f6 f814 	bl	264d4 <z_ready_thread>
		poller->is_polling = false;
   304ac:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   304ae:	e7d6      	b.n	3045e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   304b0:	2b02      	cmp	r3, #2
   304b2:	d001      	beq.n	304b8 <signal_poll_event+0x78>
		poller->is_polling = false;
   304b4:	2300      	movs	r3, #0
   304b6:	e7d1      	b.n	3045c <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   304b8:	7823      	ldrb	r3, [r4, #0]
   304ba:	2b00      	cmp	r3, #0
   304bc:	d0cf      	beq.n	3045e <signal_poll_event+0x1e>
   304be:	f854 7c04 	ldr.w	r7, [r4, #-4]
   304c2:	2f00      	cmp	r7, #0
   304c4:	d0f2      	beq.n	304ac <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   304c6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   304ca:	f1a4 0914 	sub.w	r9, r4, #20
   304ce:	f104 0014 	add.w	r0, r4, #20
   304d2:	f7f7 fa0d 	bl	278f0 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   304d6:	4649      	mov	r1, r9
   304d8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   304da:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   304de:	f7f5 fb87 	bl	25bf0 <z_work_submit_to_queue>
		poller->is_polling = false;
   304e2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   304e6:	e7ba      	b.n	3045e <signal_poll_event+0x1e>
		poller->is_polling = false;
   304e8:	2300      	movs	r3, #0
		return -EAGAIN;
   304ea:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   304ee:	7023      	strb	r3, [r4, #0]
}
   304f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000304f4 <z_handle_obj_poll_events>:
{
   304f4:	4603      	mov	r3, r0
	return list->head == list;
   304f6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   304f8:	4283      	cmp	r3, r0
   304fa:	d008      	beq.n	3050e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   304fc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   30500:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30502:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30504:	2300      	movs	r3, #0
	node->prev = NULL;
   30506:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3050a:	f7ff bf99 	b.w	30440 <signal_poll_event>
}
   3050e:	4770      	bx	lr

00030510 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   30510:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   30512:	e9c0 0000 	strd	r0, r0, [r0]
   30516:	6083      	str	r3, [r0, #8]
}
   30518:	4770      	bx	lr

0003051a <k_free>:
	if (ptr != NULL) {
   3051a:	b120      	cbz	r0, 30526 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   3051c:	1f01      	subs	r1, r0, #4
   3051e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   30522:	f7f4 bb35 	b.w	24b90 <k_heap_free>
}
   30526:	4770      	bx	lr

00030528 <k_malloc>:
{
   30528:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   3052a:	2004      	movs	r0, #4
   3052c:	f7f8 b828 	b.w	28580 <k_aligned_alloc>

00030530 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   30530:	4770      	bx	lr

00030532 <memchr>:
   30532:	b2c9      	uxtb	r1, r1
   30534:	4603      	mov	r3, r0
   30536:	4402      	add	r2, r0
   30538:	b510      	push	{r4, lr}
   3053a:	4293      	cmp	r3, r2
   3053c:	4618      	mov	r0, r3
   3053e:	d101      	bne.n	30544 <memchr+0x12>
   30540:	2000      	movs	r0, #0
   30542:	e003      	b.n	3054c <memchr+0x1a>
   30544:	7804      	ldrb	r4, [r0, #0]
   30546:	3301      	adds	r3, #1
   30548:	428c      	cmp	r4, r1
   3054a:	d1f6      	bne.n	3053a <memchr+0x8>
   3054c:	bd10      	pop	{r4, pc}

0003054e <memcmp>:
   3054e:	3901      	subs	r1, #1
   30550:	4402      	add	r2, r0
   30552:	b510      	push	{r4, lr}
   30554:	4290      	cmp	r0, r2
   30556:	d101      	bne.n	3055c <memcmp+0xe>
   30558:	2000      	movs	r0, #0
   3055a:	e005      	b.n	30568 <memcmp+0x1a>
   3055c:	7803      	ldrb	r3, [r0, #0]
   3055e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   30562:	42a3      	cmp	r3, r4
   30564:	d001      	beq.n	3056a <memcmp+0x1c>
   30566:	1b18      	subs	r0, r3, r4
   30568:	bd10      	pop	{r4, pc}
   3056a:	3001      	adds	r0, #1
   3056c:	e7f2      	b.n	30554 <memcmp+0x6>

0003056e <memcpy>:
   3056e:	440a      	add	r2, r1
   30570:	1e43      	subs	r3, r0, #1
   30572:	4291      	cmp	r1, r2
   30574:	d100      	bne.n	30578 <memcpy+0xa>
   30576:	4770      	bx	lr
   30578:	b510      	push	{r4, lr}
   3057a:	f811 4b01 	ldrb.w	r4, [r1], #1
   3057e:	4291      	cmp	r1, r2
   30580:	f803 4f01 	strb.w	r4, [r3, #1]!
   30584:	d1f9      	bne.n	3057a <memcpy+0xc>
   30586:	bd10      	pop	{r4, pc}

00030588 <__memcpy_chk>:
   30588:	429a      	cmp	r2, r3
   3058a:	b508      	push	{r3, lr}
   3058c:	d901      	bls.n	30592 <__memcpy_chk+0xa>
   3058e:	f7e1 fa55 	bl	11a3c <__chk_fail>
   30592:	4281      	cmp	r1, r0
   30594:	d804      	bhi.n	305a0 <__memcpy_chk+0x18>
   30596:	188b      	adds	r3, r1, r2
   30598:	4298      	cmp	r0, r3
   3059a:	d3f8      	bcc.n	3058e <__memcpy_chk+0x6>
   3059c:	4281      	cmp	r1, r0
   3059e:	d102      	bne.n	305a6 <__memcpy_chk+0x1e>
   305a0:	1883      	adds	r3, r0, r2
   305a2:	4299      	cmp	r1, r3
   305a4:	d3f3      	bcc.n	3058e <__memcpy_chk+0x6>
   305a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   305aa:	f7ff bfe0 	b.w	3056e <memcpy>

000305ae <memmove>:
   305ae:	4288      	cmp	r0, r1
   305b0:	b510      	push	{r4, lr}
   305b2:	eb01 0402 	add.w	r4, r1, r2
   305b6:	d902      	bls.n	305be <memmove+0x10>
   305b8:	4284      	cmp	r4, r0
   305ba:	4623      	mov	r3, r4
   305bc:	d807      	bhi.n	305ce <memmove+0x20>
   305be:	1e43      	subs	r3, r0, #1
   305c0:	42a1      	cmp	r1, r4
   305c2:	d008      	beq.n	305d6 <memmove+0x28>
   305c4:	f811 2b01 	ldrb.w	r2, [r1], #1
   305c8:	f803 2f01 	strb.w	r2, [r3, #1]!
   305cc:	e7f8      	b.n	305c0 <memmove+0x12>
   305ce:	4402      	add	r2, r0
   305d0:	4601      	mov	r1, r0
   305d2:	428a      	cmp	r2, r1
   305d4:	d100      	bne.n	305d8 <memmove+0x2a>
   305d6:	bd10      	pop	{r4, pc}
   305d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   305dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   305e0:	e7f7      	b.n	305d2 <memmove+0x24>

000305e2 <memset>:
   305e2:	4402      	add	r2, r0
   305e4:	4603      	mov	r3, r0
   305e6:	4293      	cmp	r3, r2
   305e8:	d100      	bne.n	305ec <memset+0xa>
   305ea:	4770      	bx	lr
   305ec:	f803 1b01 	strb.w	r1, [r3], #1
   305f0:	e7f9      	b.n	305e6 <memset+0x4>

000305f2 <_calloc_r>:
   305f2:	b538      	push	{r3, r4, r5, lr}
   305f4:	fb02 f501 	mul.w	r5, r2, r1
   305f8:	4629      	mov	r1, r5
   305fa:	f7f8 f8b5 	bl	28768 <_malloc_r>
   305fe:	4604      	mov	r4, r0
   30600:	b118      	cbz	r0, 3060a <_calloc_r+0x18>
   30602:	462a      	mov	r2, r5
   30604:	2100      	movs	r1, #0
   30606:	f7ff ffec 	bl	305e2 <memset>
   3060a:	4620      	mov	r0, r4
   3060c:	bd38      	pop	{r3, r4, r5, pc}

0003060e <__cvt>:
   3060e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30612:	b089      	sub	sp, #36	; 0x24
   30614:	2b00      	cmp	r3, #0
   30616:	461d      	mov	r5, r3
   30618:	4614      	mov	r4, r2
   3061a:	bfba      	itte	lt
   3061c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   30620:	4614      	movlt	r4, r2
   30622:	2300      	movge	r3, #0
   30624:	9a14      	ldr	r2, [sp, #80]	; 0x50
   30626:	bfbc      	itt	lt
   30628:	461d      	movlt	r5, r3
   3062a:	232d      	movlt	r3, #45	; 0x2d
   3062c:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   30630:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   30634:	f028 0a20 	bic.w	sl, r8, #32
   30638:	7013      	strb	r3, [r2, #0]
   3063a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   3063e:	d005      	beq.n	3064c <__cvt+0x3e>
   30640:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   30644:	d100      	bne.n	30648 <__cvt+0x3a>
   30646:	3601      	adds	r6, #1
   30648:	2302      	movs	r3, #2
   3064a:	e000      	b.n	3064e <__cvt+0x40>
   3064c:	2303      	movs	r3, #3
   3064e:	aa07      	add	r2, sp, #28
   30650:	9204      	str	r2, [sp, #16]
   30652:	aa06      	add	r2, sp, #24
   30654:	e9cd 3600 	strd	r3, r6, [sp]
   30658:	e9cd 9202 	strd	r9, r2, [sp, #8]
   3065c:	462b      	mov	r3, r5
   3065e:	4622      	mov	r2, r4
   30660:	f7d9 fb22 	bl	9ca8 <_dtoa_r>
   30664:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   30668:	4607      	mov	r7, r0
   3066a:	d119      	bne.n	306a0 <__cvt+0x92>
   3066c:	f01b 0f01 	tst.w	fp, #1
   30670:	d00e      	beq.n	30690 <__cvt+0x82>
   30672:	eb07 0806 	add.w	r8, r7, r6
   30676:	2200      	movs	r2, #0
   30678:	2300      	movs	r3, #0
   3067a:	4620      	mov	r0, r4
   3067c:	4629      	mov	r1, r5
   3067e:	f7d8 fca7 	bl	8fd0 <__aeabi_dcmpeq>
   30682:	b108      	cbz	r0, 30688 <__cvt+0x7a>
   30684:	f8cd 801c 	str.w	r8, [sp, #28]
   30688:	2230      	movs	r2, #48	; 0x30
   3068a:	9b07      	ldr	r3, [sp, #28]
   3068c:	4543      	cmp	r3, r8
   3068e:	d321      	bcc.n	306d4 <__cvt+0xc6>
   30690:	9b07      	ldr	r3, [sp, #28]
   30692:	4638      	mov	r0, r7
   30694:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   30696:	1bdb      	subs	r3, r3, r7
   30698:	6013      	str	r3, [r2, #0]
   3069a:	b009      	add	sp, #36	; 0x24
   3069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   306a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   306a4:	d0e2      	beq.n	3066c <__cvt+0x5e>
   306a6:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   306aa:	eb00 0806 	add.w	r8, r0, r6
   306ae:	d1e2      	bne.n	30676 <__cvt+0x68>
   306b0:	7803      	ldrb	r3, [r0, #0]
   306b2:	2b30      	cmp	r3, #48	; 0x30
   306b4:	d10a      	bne.n	306cc <__cvt+0xbe>
   306b6:	2200      	movs	r2, #0
   306b8:	2300      	movs	r3, #0
   306ba:	4620      	mov	r0, r4
   306bc:	4629      	mov	r1, r5
   306be:	f7d8 fc87 	bl	8fd0 <__aeabi_dcmpeq>
   306c2:	b918      	cbnz	r0, 306cc <__cvt+0xbe>
   306c4:	f1c6 0601 	rsb	r6, r6, #1
   306c8:	f8c9 6000 	str.w	r6, [r9]
   306cc:	f8d9 3000 	ldr.w	r3, [r9]
   306d0:	4498      	add	r8, r3
   306d2:	e7d0      	b.n	30676 <__cvt+0x68>
   306d4:	1c59      	adds	r1, r3, #1
   306d6:	9107      	str	r1, [sp, #28]
   306d8:	701a      	strb	r2, [r3, #0]
   306da:	e7d6      	b.n	3068a <__cvt+0x7c>

000306dc <__exponent>:
   306dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   306de:	2900      	cmp	r1, #0
   306e0:	7002      	strb	r2, [r0, #0]
   306e2:	bfba      	itte	lt
   306e4:	4249      	neglt	r1, r1
   306e6:	232d      	movlt	r3, #45	; 0x2d
   306e8:	232b      	movge	r3, #43	; 0x2b
   306ea:	2909      	cmp	r1, #9
   306ec:	7043      	strb	r3, [r0, #1]
   306ee:	dd28      	ble.n	30742 <__exponent+0x66>
   306f0:	f10d 0307 	add.w	r3, sp, #7
   306f4:	270a      	movs	r7, #10
   306f6:	461d      	mov	r5, r3
   306f8:	461a      	mov	r2, r3
   306fa:	3b01      	subs	r3, #1
   306fc:	fbb1 f6f7 	udiv	r6, r1, r7
   30700:	fb07 1416 	mls	r4, r7, r6, r1
   30704:	3430      	adds	r4, #48	; 0x30
   30706:	f802 4c01 	strb.w	r4, [r2, #-1]
   3070a:	460c      	mov	r4, r1
   3070c:	4631      	mov	r1, r6
   3070e:	2c63      	cmp	r4, #99	; 0x63
   30710:	dcf2      	bgt.n	306f8 <__exponent+0x1c>
   30712:	3130      	adds	r1, #48	; 0x30
   30714:	1e94      	subs	r4, r2, #2
   30716:	f803 1c01 	strb.w	r1, [r3, #-1]
   3071a:	1c41      	adds	r1, r0, #1
   3071c:	4623      	mov	r3, r4
   3071e:	42ab      	cmp	r3, r5
   30720:	d30a      	bcc.n	30738 <__exponent+0x5c>
   30722:	f10d 0309 	add.w	r3, sp, #9
   30726:	1a9b      	subs	r3, r3, r2
   30728:	42ac      	cmp	r4, r5
   3072a:	bf88      	it	hi
   3072c:	2300      	movhi	r3, #0
   3072e:	3302      	adds	r3, #2
   30730:	4403      	add	r3, r0
   30732:	1a18      	subs	r0, r3, r0
   30734:	b003      	add	sp, #12
   30736:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30738:	f813 6b01 	ldrb.w	r6, [r3], #1
   3073c:	f801 6f01 	strb.w	r6, [r1, #1]!
   30740:	e7ed      	b.n	3071e <__exponent+0x42>
   30742:	2330      	movs	r3, #48	; 0x30
   30744:	3130      	adds	r1, #48	; 0x30
   30746:	7083      	strb	r3, [r0, #2]
   30748:	1d03      	adds	r3, r0, #4
   3074a:	70c1      	strb	r1, [r0, #3]
   3074c:	e7f1      	b.n	30732 <__exponent+0x56>

0003074e <_printf_common>:
   3074e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30752:	4616      	mov	r6, r2
   30754:	4698      	mov	r8, r3
   30756:	688a      	ldr	r2, [r1, #8]
   30758:	4607      	mov	r7, r0
   3075a:	690b      	ldr	r3, [r1, #16]
   3075c:	460c      	mov	r4, r1
   3075e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   30762:	4293      	cmp	r3, r2
   30764:	bfb8      	it	lt
   30766:	4613      	movlt	r3, r2
   30768:	6033      	str	r3, [r6, #0]
   3076a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3076e:	b10a      	cbz	r2, 30774 <_printf_common+0x26>
   30770:	3301      	adds	r3, #1
   30772:	6033      	str	r3, [r6, #0]
   30774:	6823      	ldr	r3, [r4, #0]
   30776:	0699      	lsls	r1, r3, #26
   30778:	bf42      	ittt	mi
   3077a:	6833      	ldrmi	r3, [r6, #0]
   3077c:	3302      	addmi	r3, #2
   3077e:	6033      	strmi	r3, [r6, #0]
   30780:	6825      	ldr	r5, [r4, #0]
   30782:	f015 0506 	ands.w	r5, r5, #6
   30786:	d106      	bne.n	30796 <_printf_common+0x48>
   30788:	f104 0a19 	add.w	sl, r4, #25
   3078c:	68e3      	ldr	r3, [r4, #12]
   3078e:	6832      	ldr	r2, [r6, #0]
   30790:	1a9b      	subs	r3, r3, r2
   30792:	42ab      	cmp	r3, r5
   30794:	dc2b      	bgt.n	307ee <_printf_common+0xa0>
   30796:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   3079a:	6822      	ldr	r2, [r4, #0]
   3079c:	3b00      	subs	r3, #0
   3079e:	bf18      	it	ne
   307a0:	2301      	movne	r3, #1
   307a2:	0692      	lsls	r2, r2, #26
   307a4:	d430      	bmi.n	30808 <_printf_common+0xba>
   307a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   307aa:	4641      	mov	r1, r8
   307ac:	4638      	mov	r0, r7
   307ae:	47c8      	blx	r9
   307b0:	3001      	adds	r0, #1
   307b2:	d023      	beq.n	307fc <_printf_common+0xae>
   307b4:	6823      	ldr	r3, [r4, #0]
   307b6:	341a      	adds	r4, #26
   307b8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   307bc:	f003 0306 	and.w	r3, r3, #6
   307c0:	2b04      	cmp	r3, #4
   307c2:	bf0a      	itet	eq
   307c4:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   307c8:	2500      	movne	r5, #0
   307ca:	6833      	ldreq	r3, [r6, #0]
   307cc:	f04f 0600 	mov.w	r6, #0
   307d0:	bf08      	it	eq
   307d2:	1aed      	subeq	r5, r5, r3
   307d4:	f854 3c12 	ldr.w	r3, [r4, #-18]
   307d8:	bf08      	it	eq
   307da:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   307de:	4293      	cmp	r3, r2
   307e0:	bfc4      	itt	gt
   307e2:	1a9b      	subgt	r3, r3, r2
   307e4:	18ed      	addgt	r5, r5, r3
   307e6:	42b5      	cmp	r5, r6
   307e8:	d11a      	bne.n	30820 <_printf_common+0xd2>
   307ea:	2000      	movs	r0, #0
   307ec:	e008      	b.n	30800 <_printf_common+0xb2>
   307ee:	2301      	movs	r3, #1
   307f0:	4652      	mov	r2, sl
   307f2:	4641      	mov	r1, r8
   307f4:	4638      	mov	r0, r7
   307f6:	47c8      	blx	r9
   307f8:	3001      	adds	r0, #1
   307fa:	d103      	bne.n	30804 <_printf_common+0xb6>
   307fc:	f04f 30ff 	mov.w	r0, #4294967295
   30800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30804:	3501      	adds	r5, #1
   30806:	e7c1      	b.n	3078c <_printf_common+0x3e>
   30808:	18e1      	adds	r1, r4, r3
   3080a:	1c5a      	adds	r2, r3, #1
   3080c:	2030      	movs	r0, #48	; 0x30
   3080e:	3302      	adds	r3, #2
   30810:	4422      	add	r2, r4
   30812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   30816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   3081a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3081e:	e7c2      	b.n	307a6 <_printf_common+0x58>
   30820:	2301      	movs	r3, #1
   30822:	4622      	mov	r2, r4
   30824:	4641      	mov	r1, r8
   30826:	4638      	mov	r0, r7
   30828:	47c8      	blx	r9
   3082a:	3001      	adds	r0, #1
   3082c:	d0e6      	beq.n	307fc <_printf_common+0xae>
   3082e:	3601      	adds	r6, #1
   30830:	e7d9      	b.n	307e6 <_printf_common+0x98>

00030832 <strchr>:
   30832:	b2c9      	uxtb	r1, r1
   30834:	4603      	mov	r3, r0
   30836:	4618      	mov	r0, r3
   30838:	f813 2b01 	ldrb.w	r2, [r3], #1
   3083c:	b112      	cbz	r2, 30844 <strchr+0x12>
   3083e:	428a      	cmp	r2, r1
   30840:	d1f9      	bne.n	30836 <strchr+0x4>
   30842:	4770      	bx	lr
   30844:	2900      	cmp	r1, #0
   30846:	bf18      	it	ne
   30848:	2000      	movne	r0, #0
   3084a:	4770      	bx	lr

0003084c <strcpy>:
   3084c:	4603      	mov	r3, r0
   3084e:	f811 2b01 	ldrb.w	r2, [r1], #1
   30852:	f803 2b01 	strb.w	r2, [r3], #1
   30856:	2a00      	cmp	r2, #0
   30858:	d1f9      	bne.n	3084e <strcpy+0x2>
   3085a:	4770      	bx	lr

0003085c <strcspn>:
   3085c:	4603      	mov	r3, r0
   3085e:	b570      	push	{r4, r5, r6, lr}
   30860:	461e      	mov	r6, r3
   30862:	f813 4b01 	ldrb.w	r4, [r3], #1
   30866:	b144      	cbz	r4, 3087a <strcspn+0x1e>
   30868:	1e4a      	subs	r2, r1, #1
   3086a:	e001      	b.n	30870 <strcspn+0x14>
   3086c:	42a5      	cmp	r5, r4
   3086e:	d004      	beq.n	3087a <strcspn+0x1e>
   30870:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   30874:	2d00      	cmp	r5, #0
   30876:	d1f9      	bne.n	3086c <strcspn+0x10>
   30878:	e7f2      	b.n	30860 <strcspn+0x4>
   3087a:	1a30      	subs	r0, r6, r0
   3087c:	bd70      	pop	{r4, r5, r6, pc}

0003087e <strncmp>:
   3087e:	b510      	push	{r4, lr}
   30880:	b16a      	cbz	r2, 3089e <strncmp+0x20>
   30882:	3901      	subs	r1, #1
   30884:	1884      	adds	r4, r0, r2
   30886:	f810 2b01 	ldrb.w	r2, [r0], #1
   3088a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   3088e:	429a      	cmp	r2, r3
   30890:	d103      	bne.n	3089a <strncmp+0x1c>
   30892:	42a0      	cmp	r0, r4
   30894:	d001      	beq.n	3089a <strncmp+0x1c>
   30896:	2a00      	cmp	r2, #0
   30898:	d1f5      	bne.n	30886 <strncmp+0x8>
   3089a:	1ad0      	subs	r0, r2, r3
   3089c:	bd10      	pop	{r4, pc}
   3089e:	4610      	mov	r0, r2
   308a0:	e7fc      	b.n	3089c <strncmp+0x1e>

000308a2 <strncpy>:
   308a2:	3901      	subs	r1, #1
   308a4:	4603      	mov	r3, r0
   308a6:	b510      	push	{r4, lr}
   308a8:	b132      	cbz	r2, 308b8 <strncpy+0x16>
   308aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   308ae:	3a01      	subs	r2, #1
   308b0:	f803 4b01 	strb.w	r4, [r3], #1
   308b4:	2c00      	cmp	r4, #0
   308b6:	d1f7      	bne.n	308a8 <strncpy+0x6>
   308b8:	441a      	add	r2, r3
   308ba:	2100      	movs	r1, #0
   308bc:	4293      	cmp	r3, r2
   308be:	d100      	bne.n	308c2 <strncpy+0x20>
   308c0:	bd10      	pop	{r4, pc}
   308c2:	f803 1b01 	strb.w	r1, [r3], #1
   308c6:	e7f9      	b.n	308bc <strncpy+0x1a>

000308c8 <strnlen>:
   308c8:	4602      	mov	r2, r0
   308ca:	4401      	add	r1, r0
   308cc:	b510      	push	{r4, lr}
   308ce:	428a      	cmp	r2, r1
   308d0:	4613      	mov	r3, r2
   308d2:	d003      	beq.n	308dc <strnlen+0x14>
   308d4:	781c      	ldrb	r4, [r3, #0]
   308d6:	3201      	adds	r2, #1
   308d8:	2c00      	cmp	r4, #0
   308da:	d1f8      	bne.n	308ce <strnlen+0x6>
   308dc:	1a18      	subs	r0, r3, r0
   308de:	bd10      	pop	{r4, pc}

000308e0 <strspn>:
   308e0:	4603      	mov	r3, r0
   308e2:	b570      	push	{r4, r5, r6, lr}
   308e4:	461e      	mov	r6, r3
   308e6:	f813 4b01 	ldrb.w	r4, [r3], #1
   308ea:	b13c      	cbz	r4, 308fc <strspn+0x1c>
   308ec:	1e4a      	subs	r2, r1, #1
   308ee:	e001      	b.n	308f4 <strspn+0x14>
   308f0:	42a5      	cmp	r5, r4
   308f2:	d0f7      	beq.n	308e4 <strspn+0x4>
   308f4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   308f8:	2d00      	cmp	r5, #0
   308fa:	d1f9      	bne.n	308f0 <strspn+0x10>
   308fc:	1a30      	subs	r0, r6, r0
   308fe:	bd70      	pop	{r4, r5, r6, pc}

00030900 <quorem>:
   30900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30904:	6903      	ldr	r3, [r0, #16]
   30906:	4607      	mov	r7, r0
   30908:	690c      	ldr	r4, [r1, #16]
   3090a:	42a3      	cmp	r3, r4
   3090c:	f2c0 8083 	blt.w	30a16 <quorem+0x116>
   30910:	3c01      	subs	r4, #1
   30912:	f100 0514 	add.w	r5, r0, #20
   30916:	f101 0814 	add.w	r8, r1, #20
   3091a:	00a3      	lsls	r3, r4, #2
   3091c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   30920:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   30924:	9300      	str	r3, [sp, #0]
   30926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3092a:	9301      	str	r3, [sp, #4]
   3092c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   30930:	3301      	adds	r3, #1
   30932:	429a      	cmp	r2, r3
   30934:	fbb2 f6f3 	udiv	r6, r2, r3
   30938:	d331      	bcc.n	3099e <quorem+0x9e>
   3093a:	f04f 0a00 	mov.w	sl, #0
   3093e:	46c4      	mov	ip, r8
   30940:	46ae      	mov	lr, r5
   30942:	46d3      	mov	fp, sl
   30944:	f85c 3b04 	ldr.w	r3, [ip], #4
   30948:	b298      	uxth	r0, r3
   3094a:	45e1      	cmp	r9, ip
   3094c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   30950:	fb06 a000 	mla	r0, r6, r0, sl
   30954:	ea4f 4210 	mov.w	r2, r0, lsr #16
   30958:	b280      	uxth	r0, r0
   3095a:	fb06 2303 	mla	r3, r6, r3, r2
   3095e:	f8de 2000 	ldr.w	r2, [lr]
   30962:	b292      	uxth	r2, r2
   30964:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   30968:	eba2 0200 	sub.w	r2, r2, r0
   3096c:	b29b      	uxth	r3, r3
   3096e:	f8de 0000 	ldr.w	r0, [lr]
   30972:	445a      	add	r2, fp
   30974:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   30978:	b292      	uxth	r2, r2
   3097a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   3097e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   30982:	ea4f 4b23 	mov.w	fp, r3, asr #16
   30986:	f84e 2b04 	str.w	r2, [lr], #4
   3098a:	d2db      	bcs.n	30944 <quorem+0x44>
   3098c:	9b00      	ldr	r3, [sp, #0]
   3098e:	58eb      	ldr	r3, [r5, r3]
   30990:	b92b      	cbnz	r3, 3099e <quorem+0x9e>
   30992:	9b01      	ldr	r3, [sp, #4]
   30994:	3b04      	subs	r3, #4
   30996:	429d      	cmp	r5, r3
   30998:	461a      	mov	r2, r3
   3099a:	d330      	bcc.n	309fe <quorem+0xfe>
   3099c:	613c      	str	r4, [r7, #16]
   3099e:	4638      	mov	r0, r7
   309a0:	f000 f8bf 	bl	30b22 <__mcmp>
   309a4:	2800      	cmp	r0, #0
   309a6:	db26      	blt.n	309f6 <quorem+0xf6>
   309a8:	4629      	mov	r1, r5
   309aa:	2000      	movs	r0, #0
   309ac:	f858 2b04 	ldr.w	r2, [r8], #4
   309b0:	f8d1 c000 	ldr.w	ip, [r1]
   309b4:	fa1f fe82 	uxth.w	lr, r2
   309b8:	45c1      	cmp	r9, r8
   309ba:	fa1f f38c 	uxth.w	r3, ip
   309be:	ea4f 4212 	mov.w	r2, r2, lsr #16
   309c2:	eba3 030e 	sub.w	r3, r3, lr
   309c6:	4403      	add	r3, r0
   309c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   309cc:	b29b      	uxth	r3, r3
   309ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   309d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   309d6:	ea4f 4022 	mov.w	r0, r2, asr #16
   309da:	f841 3b04 	str.w	r3, [r1], #4
   309de:	d2e5      	bcs.n	309ac <quorem+0xac>
   309e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   309e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   309e8:	b922      	cbnz	r2, 309f4 <quorem+0xf4>
   309ea:	3b04      	subs	r3, #4
   309ec:	429d      	cmp	r5, r3
   309ee:	461a      	mov	r2, r3
   309f0:	d30b      	bcc.n	30a0a <quorem+0x10a>
   309f2:	613c      	str	r4, [r7, #16]
   309f4:	3601      	adds	r6, #1
   309f6:	4630      	mov	r0, r6
   309f8:	b003      	add	sp, #12
   309fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   309fe:	6812      	ldr	r2, [r2, #0]
   30a00:	3b04      	subs	r3, #4
   30a02:	2a00      	cmp	r2, #0
   30a04:	d1ca      	bne.n	3099c <quorem+0x9c>
   30a06:	3c01      	subs	r4, #1
   30a08:	e7c5      	b.n	30996 <quorem+0x96>
   30a0a:	6812      	ldr	r2, [r2, #0]
   30a0c:	3b04      	subs	r3, #4
   30a0e:	2a00      	cmp	r2, #0
   30a10:	d1ef      	bne.n	309f2 <quorem+0xf2>
   30a12:	3c01      	subs	r4, #1
   30a14:	e7ea      	b.n	309ec <quorem+0xec>
   30a16:	2000      	movs	r0, #0
   30a18:	e7ee      	b.n	309f8 <quorem+0xf8>

00030a1a <__sfmoreglue>:
   30a1a:	b570      	push	{r4, r5, r6, lr}
   30a1c:	2368      	movs	r3, #104	; 0x68
   30a1e:	1e4d      	subs	r5, r1, #1
   30a20:	460e      	mov	r6, r1
   30a22:	435d      	muls	r5, r3
   30a24:	f105 0174 	add.w	r1, r5, #116	; 0x74
   30a28:	f7f7 fe9e 	bl	28768 <_malloc_r>
   30a2c:	4604      	mov	r4, r0
   30a2e:	b140      	cbz	r0, 30a42 <__sfmoreglue+0x28>
   30a30:	2100      	movs	r1, #0
   30a32:	f105 0268 	add.w	r2, r5, #104	; 0x68
   30a36:	e9c0 1600 	strd	r1, r6, [r0]
   30a3a:	300c      	adds	r0, #12
   30a3c:	60a0      	str	r0, [r4, #8]
   30a3e:	f7ff fdd0 	bl	305e2 <memset>
   30a42:	4620      	mov	r0, r4
   30a44:	bd70      	pop	{r4, r5, r6, pc}

00030a46 <_fwalk_reent>:
   30a46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30a4a:	4606      	mov	r6, r0
   30a4c:	4688      	mov	r8, r1
   30a4e:	f100 0448 	add.w	r4, r0, #72	; 0x48
   30a52:	2700      	movs	r7, #0
   30a54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   30a58:	f1b9 0901 	subs.w	r9, r9, #1
   30a5c:	d505      	bpl.n	30a6a <_fwalk_reent+0x24>
   30a5e:	6824      	ldr	r4, [r4, #0]
   30a60:	2c00      	cmp	r4, #0
   30a62:	d1f7      	bne.n	30a54 <_fwalk_reent+0xe>
   30a64:	4638      	mov	r0, r7
   30a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30a6a:	89ab      	ldrh	r3, [r5, #12]
   30a6c:	2b01      	cmp	r3, #1
   30a6e:	d907      	bls.n	30a80 <_fwalk_reent+0x3a>
   30a70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   30a74:	3301      	adds	r3, #1
   30a76:	d003      	beq.n	30a80 <_fwalk_reent+0x3a>
   30a78:	4629      	mov	r1, r5
   30a7a:	4630      	mov	r0, r6
   30a7c:	47c0      	blx	r8
   30a7e:	4307      	orrs	r7, r0
   30a80:	3568      	adds	r5, #104	; 0x68
   30a82:	e7e9      	b.n	30a58 <_fwalk_reent+0x12>

00030a84 <__hi0bits>:
   30a84:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   30a88:	4603      	mov	r3, r0
   30a8a:	bf36      	itet	cc
   30a8c:	0403      	lslcc	r3, r0, #16
   30a8e:	2000      	movcs	r0, #0
   30a90:	2010      	movcc	r0, #16
   30a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   30a96:	bf3c      	itt	cc
   30a98:	021b      	lslcc	r3, r3, #8
   30a9a:	3008      	addcc	r0, #8
   30a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   30aa0:	bf3c      	itt	cc
   30aa2:	011b      	lslcc	r3, r3, #4
   30aa4:	3004      	addcc	r0, #4
   30aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   30aaa:	d303      	bcc.n	30ab4 <__hi0bits+0x30>
   30aac:	2b00      	cmp	r3, #0
   30aae:	db0a      	blt.n	30ac6 <__hi0bits+0x42>
   30ab0:	3001      	adds	r0, #1
   30ab2:	4770      	bx	lr
   30ab4:	009b      	lsls	r3, r3, #2
   30ab6:	d501      	bpl.n	30abc <__hi0bits+0x38>
   30ab8:	3002      	adds	r0, #2
   30aba:	4770      	bx	lr
   30abc:	005b      	lsls	r3, r3, #1
   30abe:	d501      	bpl.n	30ac4 <__hi0bits+0x40>
   30ac0:	3003      	adds	r0, #3
   30ac2:	4770      	bx	lr
   30ac4:	2020      	movs	r0, #32
   30ac6:	4770      	bx	lr

00030ac8 <__lo0bits>:
   30ac8:	6803      	ldr	r3, [r0, #0]
   30aca:	4602      	mov	r2, r0
   30acc:	f013 0007 	ands.w	r0, r3, #7
   30ad0:	d00b      	beq.n	30aea <__lo0bits+0x22>
   30ad2:	07d9      	lsls	r1, r3, #31
   30ad4:	d421      	bmi.n	30b1a <__lo0bits+0x52>
   30ad6:	0798      	lsls	r0, r3, #30
   30ad8:	bf47      	ittee	mi
   30ada:	085b      	lsrmi	r3, r3, #1
   30adc:	2001      	movmi	r0, #1
   30ade:	089b      	lsrpl	r3, r3, #2
   30ae0:	2002      	movpl	r0, #2
   30ae2:	bf4c      	ite	mi
   30ae4:	6013      	strmi	r3, [r2, #0]
   30ae6:	6013      	strpl	r3, [r2, #0]
   30ae8:	4770      	bx	lr
   30aea:	b299      	uxth	r1, r3
   30aec:	b909      	cbnz	r1, 30af2 <__lo0bits+0x2a>
   30aee:	0c1b      	lsrs	r3, r3, #16
   30af0:	2010      	movs	r0, #16
   30af2:	b2d9      	uxtb	r1, r3
   30af4:	b909      	cbnz	r1, 30afa <__lo0bits+0x32>
   30af6:	3008      	adds	r0, #8
   30af8:	0a1b      	lsrs	r3, r3, #8
   30afa:	0719      	lsls	r1, r3, #28
   30afc:	bf04      	itt	eq
   30afe:	091b      	lsreq	r3, r3, #4
   30b00:	3004      	addeq	r0, #4
   30b02:	0799      	lsls	r1, r3, #30
   30b04:	bf04      	itt	eq
   30b06:	089b      	lsreq	r3, r3, #2
   30b08:	3002      	addeq	r0, #2
   30b0a:	07d9      	lsls	r1, r3, #31
   30b0c:	d403      	bmi.n	30b16 <__lo0bits+0x4e>
   30b0e:	085b      	lsrs	r3, r3, #1
   30b10:	f100 0001 	add.w	r0, r0, #1
   30b14:	d003      	beq.n	30b1e <__lo0bits+0x56>
   30b16:	6013      	str	r3, [r2, #0]
   30b18:	4770      	bx	lr
   30b1a:	2000      	movs	r0, #0
   30b1c:	4770      	bx	lr
   30b1e:	2020      	movs	r0, #32
   30b20:	4770      	bx	lr

00030b22 <__mcmp>:
   30b22:	4603      	mov	r3, r0
   30b24:	690a      	ldr	r2, [r1, #16]
   30b26:	6900      	ldr	r0, [r0, #16]
   30b28:	1a80      	subs	r0, r0, r2
   30b2a:	b530      	push	{r4, r5, lr}
   30b2c:	d10e      	bne.n	30b4c <__mcmp+0x2a>
   30b2e:	3314      	adds	r3, #20
   30b30:	3114      	adds	r1, #20
   30b32:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   30b36:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   30b3a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   30b3e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   30b42:	4295      	cmp	r5, r2
   30b44:	d003      	beq.n	30b4e <__mcmp+0x2c>
   30b46:	d205      	bcs.n	30b54 <__mcmp+0x32>
   30b48:	f04f 30ff 	mov.w	r0, #4294967295
   30b4c:	bd30      	pop	{r4, r5, pc}
   30b4e:	42a3      	cmp	r3, r4
   30b50:	d3f3      	bcc.n	30b3a <__mcmp+0x18>
   30b52:	e7fb      	b.n	30b4c <__mcmp+0x2a>
   30b54:	2001      	movs	r0, #1
   30b56:	e7f9      	b.n	30b4c <__mcmp+0x2a>

00030b58 <__sfputc_r>:
   30b58:	6893      	ldr	r3, [r2, #8]
   30b5a:	3b01      	subs	r3, #1
   30b5c:	2b00      	cmp	r3, #0
   30b5e:	6093      	str	r3, [r2, #8]
   30b60:	b410      	push	{r4}
   30b62:	da07      	bge.n	30b74 <__sfputc_r+0x1c>
   30b64:	6994      	ldr	r4, [r2, #24]
   30b66:	42a3      	cmp	r3, r4
   30b68:	db01      	blt.n	30b6e <__sfputc_r+0x16>
   30b6a:	290a      	cmp	r1, #10
   30b6c:	d102      	bne.n	30b74 <__sfputc_r+0x1c>
   30b6e:	bc10      	pop	{r4}
   30b70:	f7f8 bfa6 	b.w	29ac0 <__swbuf_r>
   30b74:	6813      	ldr	r3, [r2, #0]
   30b76:	1c58      	adds	r0, r3, #1
   30b78:	6010      	str	r0, [r2, #0]
   30b7a:	4608      	mov	r0, r1
   30b7c:	7019      	strb	r1, [r3, #0]
   30b7e:	bc10      	pop	{r4}
   30b80:	4770      	bx	lr

00030b82 <__sfputs_r>:
   30b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30b84:	4606      	mov	r6, r0
   30b86:	460f      	mov	r7, r1
   30b88:	4614      	mov	r4, r2
   30b8a:	18d5      	adds	r5, r2, r3
   30b8c:	42ac      	cmp	r4, r5
   30b8e:	d101      	bne.n	30b94 <__sfputs_r+0x12>
   30b90:	2000      	movs	r0, #0
   30b92:	e007      	b.n	30ba4 <__sfputs_r+0x22>
   30b94:	463a      	mov	r2, r7
   30b96:	f814 1b01 	ldrb.w	r1, [r4], #1
   30b9a:	4630      	mov	r0, r6
   30b9c:	f7ff ffdc 	bl	30b58 <__sfputc_r>
   30ba0:	1c43      	adds	r3, r0, #1
   30ba2:	d1f3      	bne.n	30b8c <__sfputs_r+0xa>
   30ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030ba6 <__sread>:
   30ba6:	b510      	push	{r4, lr}
   30ba8:	460c      	mov	r4, r1
   30baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30bae:	f7f9 f8f5 	bl	29d9c <_read_r>
   30bb2:	2800      	cmp	r0, #0
   30bb4:	bfab      	itete	ge
   30bb6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   30bb8:	89a3      	ldrhlt	r3, [r4, #12]
   30bba:	181b      	addge	r3, r3, r0
   30bbc:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   30bc0:	bfac      	ite	ge
   30bc2:	6563      	strge	r3, [r4, #84]	; 0x54
   30bc4:	81a3      	strhlt	r3, [r4, #12]
   30bc6:	bd10      	pop	{r4, pc}

00030bc8 <__swrite>:
   30bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30bcc:	461f      	mov	r7, r3
   30bce:	898b      	ldrh	r3, [r1, #12]
   30bd0:	4605      	mov	r5, r0
   30bd2:	460c      	mov	r4, r1
   30bd4:	05db      	lsls	r3, r3, #23
   30bd6:	4616      	mov	r6, r2
   30bd8:	d505      	bpl.n	30be6 <__swrite+0x1e>
   30bda:	2302      	movs	r3, #2
   30bdc:	2200      	movs	r2, #0
   30bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30be2:	f7f9 f889 	bl	29cf8 <_lseek_r>
   30be6:	89a3      	ldrh	r3, [r4, #12]
   30be8:	4632      	mov	r2, r6
   30bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   30bee:	4628      	mov	r0, r5
   30bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   30bf4:	81a3      	strh	r3, [r4, #12]
   30bf6:	463b      	mov	r3, r7
   30bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   30bfc:	f7f8 bfb2 	b.w	29b64 <_write_r>

00030c00 <__sseek>:
   30c00:	b510      	push	{r4, lr}
   30c02:	460c      	mov	r4, r1
   30c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30c08:	f7f9 f876 	bl	29cf8 <_lseek_r>
   30c0c:	1c43      	adds	r3, r0, #1
   30c0e:	89a3      	ldrh	r3, [r4, #12]
   30c10:	bf15      	itete	ne
   30c12:	6560      	strne	r0, [r4, #84]	; 0x54
   30c14:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   30c18:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   30c1c:	81a3      	strheq	r3, [r4, #12]
   30c1e:	bf18      	it	ne
   30c20:	81a3      	strhne	r3, [r4, #12]
   30c22:	bd10      	pop	{r4, pc}

00030c24 <__sclose>:
   30c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30c28:	f7f9 b81a 	b.w	29c60 <_close_r>

00030c2c <abort>:
   30c2c:	2006      	movs	r0, #6
   30c2e:	b508      	push	{r3, lr}
   30c30:	f7f9 f8c6 	bl	29dc0 <raise>
   30c34:	2001      	movs	r0, #1
   30c36:	f7e0 fe81 	bl	1193c <_exit>

00030c3a <__sflush_r>:
   30c3a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   30c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30c40:	0717      	lsls	r7, r2, #28
   30c42:	4605      	mov	r5, r0
   30c44:	460c      	mov	r4, r1
   30c46:	d456      	bmi.n	30cf6 <__sflush_r+0xbc>
   30c48:	684b      	ldr	r3, [r1, #4]
   30c4a:	2b00      	cmp	r3, #0
   30c4c:	dc02      	bgt.n	30c54 <__sflush_r+0x1a>
   30c4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   30c50:	2b00      	cmp	r3, #0
   30c52:	dd3d      	ble.n	30cd0 <__sflush_r+0x96>
   30c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   30c56:	2e00      	cmp	r6, #0
   30c58:	d03a      	beq.n	30cd0 <__sflush_r+0x96>
   30c5a:	2300      	movs	r3, #0
   30c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   30c60:	682f      	ldr	r7, [r5, #0]
   30c62:	6a21      	ldr	r1, [r4, #32]
   30c64:	602b      	str	r3, [r5, #0]
   30c66:	d025      	beq.n	30cb4 <__sflush_r+0x7a>
   30c68:	6d62      	ldr	r2, [r4, #84]	; 0x54
   30c6a:	89a3      	ldrh	r3, [r4, #12]
   30c6c:	0758      	lsls	r0, r3, #29
   30c6e:	d505      	bpl.n	30c7c <__sflush_r+0x42>
   30c70:	6863      	ldr	r3, [r4, #4]
   30c72:	1ad2      	subs	r2, r2, r3
   30c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
   30c76:	b10b      	cbz	r3, 30c7c <__sflush_r+0x42>
   30c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
   30c7a:	1ad2      	subs	r2, r2, r3
   30c7c:	6a21      	ldr	r1, [r4, #32]
   30c7e:	2300      	movs	r3, #0
   30c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   30c82:	4628      	mov	r0, r5
   30c84:	47b0      	blx	r6
   30c86:	1c41      	adds	r1, r0, #1
   30c88:	d024      	beq.n	30cd4 <__sflush_r+0x9a>
   30c8a:	2300      	movs	r3, #0
   30c8c:	6063      	str	r3, [r4, #4]
   30c8e:	6923      	ldr	r3, [r4, #16]
   30c90:	6023      	str	r3, [r4, #0]
   30c92:	89a3      	ldrh	r3, [r4, #12]
   30c94:	04da      	lsls	r2, r3, #19
   30c96:	d500      	bpl.n	30c9a <__sflush_r+0x60>
   30c98:	6560      	str	r0, [r4, #84]	; 0x54
   30c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   30c9c:	602f      	str	r7, [r5, #0]
   30c9e:	b1b9      	cbz	r1, 30cd0 <__sflush_r+0x96>
   30ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   30ca4:	4299      	cmp	r1, r3
   30ca6:	d002      	beq.n	30cae <__sflush_r+0x74>
   30ca8:	4628      	mov	r0, r5
   30caa:	f7f7 fd13 	bl	286d4 <_free_r>
   30cae:	2300      	movs	r3, #0
   30cb0:	6363      	str	r3, [r4, #52]	; 0x34
   30cb2:	e00d      	b.n	30cd0 <__sflush_r+0x96>
   30cb4:	2301      	movs	r3, #1
   30cb6:	4628      	mov	r0, r5
   30cb8:	47b0      	blx	r6
   30cba:	1c46      	adds	r6, r0, #1
   30cbc:	4602      	mov	r2, r0
   30cbe:	d1d4      	bne.n	30c6a <__sflush_r+0x30>
   30cc0:	682b      	ldr	r3, [r5, #0]
   30cc2:	2b00      	cmp	r3, #0
   30cc4:	d0d1      	beq.n	30c6a <__sflush_r+0x30>
   30cc6:	2b1d      	cmp	r3, #29
   30cc8:	d001      	beq.n	30cce <__sflush_r+0x94>
   30cca:	2b16      	cmp	r3, #22
   30ccc:	d129      	bne.n	30d22 <__sflush_r+0xe8>
   30cce:	602f      	str	r7, [r5, #0]
   30cd0:	2000      	movs	r0, #0
   30cd2:	e02d      	b.n	30d30 <__sflush_r+0xf6>
   30cd4:	682a      	ldr	r2, [r5, #0]
   30cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   30cda:	b142      	cbz	r2, 30cee <__sflush_r+0xb4>
   30cdc:	2a1d      	cmp	r2, #29
   30cde:	d001      	beq.n	30ce4 <__sflush_r+0xaa>
   30ce0:	2a16      	cmp	r2, #22
   30ce2:	d120      	bne.n	30d26 <__sflush_r+0xec>
   30ce4:	2300      	movs	r3, #0
   30ce6:	6063      	str	r3, [r4, #4]
   30ce8:	6923      	ldr	r3, [r4, #16]
   30cea:	6023      	str	r3, [r4, #0]
   30cec:	e7d5      	b.n	30c9a <__sflush_r+0x60>
   30cee:	6062      	str	r2, [r4, #4]
   30cf0:	6922      	ldr	r2, [r4, #16]
   30cf2:	6022      	str	r2, [r4, #0]
   30cf4:	e7ce      	b.n	30c94 <__sflush_r+0x5a>
   30cf6:	690f      	ldr	r7, [r1, #16]
   30cf8:	2f00      	cmp	r7, #0
   30cfa:	d0e9      	beq.n	30cd0 <__sflush_r+0x96>
   30cfc:	0793      	lsls	r3, r2, #30
   30cfe:	680e      	ldr	r6, [r1, #0]
   30d00:	600f      	str	r7, [r1, #0]
   30d02:	bf0c      	ite	eq
   30d04:	694b      	ldreq	r3, [r1, #20]
   30d06:	2300      	movne	r3, #0
   30d08:	1bf6      	subs	r6, r6, r7
   30d0a:	608b      	str	r3, [r1, #8]
   30d0c:	2e00      	cmp	r6, #0
   30d0e:	dddf      	ble.n	30cd0 <__sflush_r+0x96>
   30d10:	4633      	mov	r3, r6
   30d12:	463a      	mov	r2, r7
   30d14:	6a21      	ldr	r1, [r4, #32]
   30d16:	4628      	mov	r0, r5
   30d18:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   30d1c:	47e0      	blx	ip
   30d1e:	2800      	cmp	r0, #0
   30d20:	dc07      	bgt.n	30d32 <__sflush_r+0xf8>
   30d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   30d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   30d2a:	f04f 30ff 	mov.w	r0, #4294967295
   30d2e:	81a3      	strh	r3, [r4, #12]
   30d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30d32:	4407      	add	r7, r0
   30d34:	1a36      	subs	r6, r6, r0
   30d36:	e7e9      	b.n	30d0c <__sflush_r+0xd2>

00030d38 <__swhatbuf_r>:
   30d38:	b570      	push	{r4, r5, r6, lr}
   30d3a:	460c      	mov	r4, r1
   30d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30d40:	b096      	sub	sp, #88	; 0x58
   30d42:	4615      	mov	r5, r2
   30d44:	2900      	cmp	r1, #0
   30d46:	461e      	mov	r6, r3
   30d48:	da0c      	bge.n	30d64 <__swhatbuf_r+0x2c>
   30d4a:	89a3      	ldrh	r3, [r4, #12]
   30d4c:	2100      	movs	r1, #0
   30d4e:	f013 0f80 	tst.w	r3, #128	; 0x80
   30d52:	bf14      	ite	ne
   30d54:	2340      	movne	r3, #64	; 0x40
   30d56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   30d5a:	2000      	movs	r0, #0
   30d5c:	6031      	str	r1, [r6, #0]
   30d5e:	602b      	str	r3, [r5, #0]
   30d60:	b016      	add	sp, #88	; 0x58
   30d62:	bd70      	pop	{r4, r5, r6, pc}
   30d64:	466a      	mov	r2, sp
   30d66:	f7f9 f845 	bl	29df4 <_fstat_r>
   30d6a:	2800      	cmp	r0, #0
   30d6c:	dbed      	blt.n	30d4a <__swhatbuf_r+0x12>
   30d6e:	9901      	ldr	r1, [sp, #4]
   30d70:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   30d74:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   30d78:	4259      	negs	r1, r3
   30d7a:	4159      	adcs	r1, r3
   30d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   30d80:	e7eb      	b.n	30d5a <__swhatbuf_r+0x22>

00030d82 <__ascii_mbtowc>:
   30d82:	b082      	sub	sp, #8
   30d84:	b901      	cbnz	r1, 30d88 <__ascii_mbtowc+0x6>
   30d86:	a901      	add	r1, sp, #4
   30d88:	b142      	cbz	r2, 30d9c <__ascii_mbtowc+0x1a>
   30d8a:	b14b      	cbz	r3, 30da0 <__ascii_mbtowc+0x1e>
   30d8c:	7813      	ldrb	r3, [r2, #0]
   30d8e:	600b      	str	r3, [r1, #0]
   30d90:	7812      	ldrb	r2, [r2, #0]
   30d92:	1e10      	subs	r0, r2, #0
   30d94:	bf18      	it	ne
   30d96:	2001      	movne	r0, #1
   30d98:	b002      	add	sp, #8
   30d9a:	4770      	bx	lr
   30d9c:	4610      	mov	r0, r2
   30d9e:	e7fb      	b.n	30d98 <__ascii_mbtowc+0x16>
   30da0:	f06f 0001 	mvn.w	r0, #1
   30da4:	e7f8      	b.n	30d98 <__ascii_mbtowc+0x16>

00030da6 <_raise_r>:
   30da6:	291f      	cmp	r1, #31
   30da8:	b538      	push	{r3, r4, r5, lr}
   30daa:	4605      	mov	r5, r0
   30dac:	460c      	mov	r4, r1
   30dae:	d904      	bls.n	30dba <_raise_r+0x14>
   30db0:	2316      	movs	r3, #22
   30db2:	6003      	str	r3, [r0, #0]
   30db4:	f04f 30ff 	mov.w	r0, #4294967295
   30db8:	bd38      	pop	{r3, r4, r5, pc}
   30dba:	6c42      	ldr	r2, [r0, #68]	; 0x44
   30dbc:	b112      	cbz	r2, 30dc4 <_raise_r+0x1e>
   30dbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   30dc2:	b94b      	cbnz	r3, 30dd8 <_raise_r+0x32>
   30dc4:	4628      	mov	r0, r5
   30dc6:	f000 f816 	bl	30df6 <_getpid_r>
   30dca:	4622      	mov	r2, r4
   30dcc:	4601      	mov	r1, r0
   30dce:	4628      	mov	r0, r5
   30dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   30dd4:	f7f8 bffc 	b.w	29dd0 <_kill_r>
   30dd8:	2b01      	cmp	r3, #1
   30dda:	d00a      	beq.n	30df2 <_raise_r+0x4c>
   30ddc:	1c59      	adds	r1, r3, #1
   30dde:	d103      	bne.n	30de8 <_raise_r+0x42>
   30de0:	2316      	movs	r3, #22
   30de2:	6003      	str	r3, [r0, #0]
   30de4:	2001      	movs	r0, #1
   30de6:	e7e7      	b.n	30db8 <_raise_r+0x12>
   30de8:	2100      	movs	r1, #0
   30dea:	4620      	mov	r0, r4
   30dec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   30df0:	4798      	blx	r3
   30df2:	2000      	movs	r0, #0
   30df4:	e7e0      	b.n	30db8 <_raise_r+0x12>

00030df6 <_getpid_r>:
   30df6:	f7fa bff6 	b.w	2bde6 <_getpid>

00030dfa <__ascii_wctomb>:
   30dfa:	4603      	mov	r3, r0
   30dfc:	4608      	mov	r0, r1
   30dfe:	b141      	cbz	r1, 30e12 <__ascii_wctomb+0x18>
   30e00:	2aff      	cmp	r2, #255	; 0xff
   30e02:	d904      	bls.n	30e0e <__ascii_wctomb+0x14>
   30e04:	228a      	movs	r2, #138	; 0x8a
   30e06:	f04f 30ff 	mov.w	r0, #4294967295
   30e0a:	601a      	str	r2, [r3, #0]
   30e0c:	4770      	bx	lr
   30e0e:	2001      	movs	r0, #1
   30e10:	700a      	strb	r2, [r1, #0]
   30e12:	4770      	bx	lr
