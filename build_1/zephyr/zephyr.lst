
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	70 4d 03 20 b9 18 01 00 eb 72 02 00 8d 18 01 00     pM. .....r......
    8010:	8d 18 01 00 8d 18 01 00 8d 18 01 00 8d 18 01 00     ................
	...
    802c:	71 11 01 00 8d 18 01 00 00 00 00 00 11 11 01 00     q...............
    803c:	8d 18 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8050:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8060:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8070:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8080:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8090:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    80a0:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    80b0:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    80c0:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    80d0:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    80e0:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    80f0:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8100:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8110:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8120:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8130:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8140:	f9 11 01 00 f9 11 01 00 f9 11 01 00 f9 11 01 00     ................
    8150:	f9 11 01 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b875 	b.w	8f5c <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f96a 	bl	915a <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f95d 	bl	915a <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f94c 	bl	915a <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f93e 	bl	915a <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b82a 	b.w	8f5c <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f923 	bl	915a <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_d2ulz>:
    8f20:	b5d0      	push	{r4, r6, r7, lr}
    8f22:	2200      	movs	r2, #0
    8f24:	4b0b      	ldr	r3, [pc, #44]	; (8f54 <__aeabi_d2ulz+0x34>)
    8f26:	4606      	mov	r6, r0
    8f28:	460f      	mov	r7, r1
    8f2a:	f7ff fad1 	bl	84d0 <__aeabi_dmul>
    8f2e:	f000 f89f 	bl	9070 <__aeabi_d2uiz>
    8f32:	4604      	mov	r4, r0
    8f34:	f7ff fa52 	bl	83dc <__aeabi_ui2d>
    8f38:	2200      	movs	r2, #0
    8f3a:	4b07      	ldr	r3, [pc, #28]	; (8f58 <__aeabi_d2ulz+0x38>)
    8f3c:	f7ff fac8 	bl	84d0 <__aeabi_dmul>
    8f40:	4602      	mov	r2, r0
    8f42:	460b      	mov	r3, r1
    8f44:	4630      	mov	r0, r6
    8f46:	4639      	mov	r1, r7
    8f48:	f7ff f90a 	bl	8160 <__aeabi_dsub>
    8f4c:	f000 f890 	bl	9070 <__aeabi_d2uiz>
    8f50:	4621      	mov	r1, r4
    8f52:	bdd0      	pop	{r4, r6, r7, pc}
    8f54:	3df00000 	.word	0x3df00000
    8f58:	41f00000 	.word	0x41f00000

00008f5c <__aeabi_idiv0>:
    8f5c:	4770      	bx	lr
    8f5e:	bf00      	nop

00008f60 <__gedf2>:
    8f60:	f04f 3cff 	mov.w	ip, #4294967295
    8f64:	e006      	b.n	8f74 <__cmpdf2+0x4>
    8f66:	bf00      	nop

00008f68 <__ledf2>:
    8f68:	f04f 0c01 	mov.w	ip, #1
    8f6c:	e002      	b.n	8f74 <__cmpdf2+0x4>
    8f6e:	bf00      	nop

00008f70 <__cmpdf2>:
    8f70:	f04f 0c01 	mov.w	ip, #1
    8f74:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f84:	bf18      	it	ne
    8f86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f8a:	d01b      	beq.n	8fc4 <__cmpdf2+0x54>
    8f8c:	b001      	add	sp, #4
    8f8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f92:	bf0c      	ite	eq
    8f94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f98:	ea91 0f03 	teqne	r1, r3
    8f9c:	bf02      	ittt	eq
    8f9e:	ea90 0f02 	teqeq	r0, r2
    8fa2:	2000      	moveq	r0, #0
    8fa4:	4770      	bxeq	lr
    8fa6:	f110 0f00 	cmn.w	r0, #0
    8faa:	ea91 0f03 	teq	r1, r3
    8fae:	bf58      	it	pl
    8fb0:	4299      	cmppl	r1, r3
    8fb2:	bf08      	it	eq
    8fb4:	4290      	cmpeq	r0, r2
    8fb6:	bf2c      	ite	cs
    8fb8:	17d8      	asrcs	r0, r3, #31
    8fba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8fbe:	f040 0001 	orr.w	r0, r0, #1
    8fc2:	4770      	bx	lr
    8fc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8fc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fcc:	d102      	bne.n	8fd4 <__cmpdf2+0x64>
    8fce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8fd2:	d107      	bne.n	8fe4 <__cmpdf2+0x74>
    8fd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fdc:	d1d6      	bne.n	8f8c <__cmpdf2+0x1c>
    8fde:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fe2:	d0d3      	beq.n	8f8c <__cmpdf2+0x1c>
    8fe4:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fe8:	4770      	bx	lr
    8fea:	bf00      	nop

00008fec <__aeabi_cdrcmple>:
    8fec:	4684      	mov	ip, r0
    8fee:	4610      	mov	r0, r2
    8ff0:	4662      	mov	r2, ip
    8ff2:	468c      	mov	ip, r1
    8ff4:	4619      	mov	r1, r3
    8ff6:	4663      	mov	r3, ip
    8ff8:	e000      	b.n	8ffc <__aeabi_cdcmpeq>
    8ffa:	bf00      	nop

00008ffc <__aeabi_cdcmpeq>:
    8ffc:	b501      	push	{r0, lr}
    8ffe:	f7ff ffb7 	bl	8f70 <__cmpdf2>
    9002:	2800      	cmp	r0, #0
    9004:	bf48      	it	mi
    9006:	f110 0f00 	cmnmi.w	r0, #0
    900a:	bd01      	pop	{r0, pc}

0000900c <__aeabi_dcmpeq>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff fff4 	bl	8ffc <__aeabi_cdcmpeq>
    9014:	bf0c      	ite	eq
    9016:	2001      	moveq	r0, #1
    9018:	2000      	movne	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmplt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffea 	bl	8ffc <__aeabi_cdcmpeq>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmple>:
    9034:	f84d ed08 	str.w	lr, [sp, #-8]!
    9038:	f7ff ffe0 	bl	8ffc <__aeabi_cdcmpeq>
    903c:	bf94      	ite	ls
    903e:	2001      	movls	r0, #1
    9040:	2000      	movhi	r0, #0
    9042:	f85d fb08 	ldr.w	pc, [sp], #8
    9046:	bf00      	nop

00009048 <__aeabi_dcmpge>:
    9048:	f84d ed08 	str.w	lr, [sp, #-8]!
    904c:	f7ff ffce 	bl	8fec <__aeabi_cdrcmple>
    9050:	bf94      	ite	ls
    9052:	2001      	movls	r0, #1
    9054:	2000      	movhi	r0, #0
    9056:	f85d fb08 	ldr.w	pc, [sp], #8
    905a:	bf00      	nop

0000905c <__aeabi_dcmpgt>:
    905c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9060:	f7ff ffc4 	bl	8fec <__aeabi_cdrcmple>
    9064:	bf34      	ite	cc
    9066:	2001      	movcc	r0, #1
    9068:	2000      	movcs	r0, #0
    906a:	f85d fb08 	ldr.w	pc, [sp], #8
    906e:	bf00      	nop

00009070 <__aeabi_d2uiz>:
    9070:	004a      	lsls	r2, r1, #1
    9072:	d211      	bcs.n	9098 <__aeabi_d2uiz+0x28>
    9074:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9078:	d211      	bcs.n	909e <__aeabi_d2uiz+0x2e>
    907a:	d50d      	bpl.n	9098 <__aeabi_d2uiz+0x28>
    907c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9080:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9084:	d40e      	bmi.n	90a4 <__aeabi_d2uiz+0x34>
    9086:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    908a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    908e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9092:	fa23 f002 	lsr.w	r0, r3, r2
    9096:	4770      	bx	lr
    9098:	f04f 0000 	mov.w	r0, #0
    909c:	4770      	bx	lr
    909e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    90a2:	d102      	bne.n	90aa <__aeabi_d2uiz+0x3a>
    90a4:	f04f 30ff 	mov.w	r0, #4294967295
    90a8:	4770      	bx	lr
    90aa:	f04f 0000 	mov.w	r0, #0
    90ae:	4770      	bx	lr

000090b0 <__aeabi_dcmpun>:
    90b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    90b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    90b8:	d102      	bne.n	90c0 <__aeabi_dcmpun+0x10>
    90ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    90be:	d10a      	bne.n	90d6 <__aeabi_dcmpun+0x26>
    90c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    90c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    90c8:	d102      	bne.n	90d0 <__aeabi_dcmpun+0x20>
    90ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    90ce:	d102      	bne.n	90d6 <__aeabi_dcmpun+0x26>
    90d0:	f04f 0000 	mov.w	r0, #0
    90d4:	4770      	bx	lr
    90d6:	f04f 0001 	mov.w	r0, #1
    90da:	4770      	bx	lr

000090dc <__aeabi_d2iz>:
    90dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
    90e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    90e4:	d215      	bcs.n	9112 <__aeabi_d2iz+0x36>
    90e6:	d511      	bpl.n	910c <__aeabi_d2iz+0x30>
    90e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    90ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    90f0:	d912      	bls.n	9118 <__aeabi_d2iz+0x3c>
    90f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    90f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    90fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    90fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9102:	fa23 f002 	lsr.w	r0, r3, r2
    9106:	bf18      	it	ne
    9108:	4240      	negne	r0, r0
    910a:	4770      	bx	lr
    910c:	f04f 0000 	mov.w	r0, #0
    9110:	4770      	bx	lr
    9112:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    9116:	d105      	bne.n	9124 <__aeabi_d2iz+0x48>
    9118:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    911c:	bf08      	it	eq
    911e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    9122:	4770      	bx	lr
    9124:	f04f 0000 	mov.w	r0, #0
    9128:	4770      	bx	lr
    912a:	bf00      	nop

0000912c <__aeabi_d2lz>:
    912c:	b538      	push	{r3, r4, r5, lr}
    912e:	2200      	movs	r2, #0
    9130:	2300      	movs	r3, #0
    9132:	4604      	mov	r4, r0
    9134:	460d      	mov	r5, r1
    9136:	f7ff ff73 	bl	9020 <__aeabi_dcmplt>
    913a:	b928      	cbnz	r0, 9148 <__aeabi_d2lz+0x1c>
    913c:	4620      	mov	r0, r4
    913e:	4629      	mov	r1, r5
    9140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9144:	f7ff beec 	b.w	8f20 <__aeabi_d2ulz>
    9148:	4620      	mov	r0, r4
    914a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    914e:	f7ff fee7 	bl	8f20 <__aeabi_d2ulz>
    9152:	4240      	negs	r0, r0
    9154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9158:	bd38      	pop	{r3, r4, r5, pc}

0000915a <__udivmoddi4>:
    915a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    915e:	4686      	mov	lr, r0
    9160:	468c      	mov	ip, r1
    9162:	4608      	mov	r0, r1
    9164:	9e08      	ldr	r6, [sp, #32]
    9166:	4615      	mov	r5, r2
    9168:	4674      	mov	r4, lr
    916a:	4619      	mov	r1, r3
    916c:	2b00      	cmp	r3, #0
    916e:	f040 80c1 	bne.w	92f4 <__udivmoddi4+0x19a>
    9172:	4285      	cmp	r5, r0
    9174:	fab2 f282 	clz	r2, r2
    9178:	d945      	bls.n	9206 <__udivmoddi4+0xac>
    917a:	b14a      	cbz	r2, 9190 <__udivmoddi4+0x36>
    917c:	f1c2 0320 	rsb	r3, r2, #32
    9180:	fa00 fc02 	lsl.w	ip, r0, r2
    9184:	4095      	lsls	r5, r2
    9186:	4094      	lsls	r4, r2
    9188:	fa2e f303 	lsr.w	r3, lr, r3
    918c:	ea43 0c0c 	orr.w	ip, r3, ip
    9190:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9194:	b2a8      	uxth	r0, r5
    9196:	0c23      	lsrs	r3, r4, #16
    9198:	fbbc f8fe 	udiv	r8, ip, lr
    919c:	fb0e cc18 	mls	ip, lr, r8, ip
    91a0:	fb08 f900 	mul.w	r9, r8, r0
    91a4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    91a8:	4599      	cmp	r9, r3
    91aa:	d928      	bls.n	91fe <__udivmoddi4+0xa4>
    91ac:	18eb      	adds	r3, r5, r3
    91ae:	f108 37ff 	add.w	r7, r8, #4294967295
    91b2:	d204      	bcs.n	91be <__udivmoddi4+0x64>
    91b4:	4599      	cmp	r9, r3
    91b6:	d902      	bls.n	91be <__udivmoddi4+0x64>
    91b8:	f1a8 0702 	sub.w	r7, r8, #2
    91bc:	442b      	add	r3, r5
    91be:	eba3 0309 	sub.w	r3, r3, r9
    91c2:	b2a4      	uxth	r4, r4
    91c4:	fbb3 fcfe 	udiv	ip, r3, lr
    91c8:	fb0e 331c 	mls	r3, lr, ip, r3
    91cc:	fb0c f000 	mul.w	r0, ip, r0
    91d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91d4:	42a0      	cmp	r0, r4
    91d6:	d914      	bls.n	9202 <__udivmoddi4+0xa8>
    91d8:	192c      	adds	r4, r5, r4
    91da:	f10c 33ff 	add.w	r3, ip, #4294967295
    91de:	d204      	bcs.n	91ea <__udivmoddi4+0x90>
    91e0:	42a0      	cmp	r0, r4
    91e2:	d902      	bls.n	91ea <__udivmoddi4+0x90>
    91e4:	f1ac 0302 	sub.w	r3, ip, #2
    91e8:	442c      	add	r4, r5
    91ea:	1a24      	subs	r4, r4, r0
    91ec:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    91f0:	b11e      	cbz	r6, 91fa <__udivmoddi4+0xa0>
    91f2:	40d4      	lsrs	r4, r2
    91f4:	2300      	movs	r3, #0
    91f6:	6034      	str	r4, [r6, #0]
    91f8:	6073      	str	r3, [r6, #4]
    91fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91fe:	4647      	mov	r7, r8
    9200:	e7dd      	b.n	91be <__udivmoddi4+0x64>
    9202:	4663      	mov	r3, ip
    9204:	e7f1      	b.n	91ea <__udivmoddi4+0x90>
    9206:	bb92      	cbnz	r2, 926e <__udivmoddi4+0x114>
    9208:	1b43      	subs	r3, r0, r5
    920a:	2101      	movs	r1, #1
    920c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9210:	b2af      	uxth	r7, r5
    9212:	0c20      	lsrs	r0, r4, #16
    9214:	fbb3 fcfe 	udiv	ip, r3, lr
    9218:	fb0e 331c 	mls	r3, lr, ip, r3
    921c:	fb0c f807 	mul.w	r8, ip, r7
    9220:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    9224:	4598      	cmp	r8, r3
    9226:	d961      	bls.n	92ec <__udivmoddi4+0x192>
    9228:	18eb      	adds	r3, r5, r3
    922a:	f10c 30ff 	add.w	r0, ip, #4294967295
    922e:	d204      	bcs.n	923a <__udivmoddi4+0xe0>
    9230:	4598      	cmp	r8, r3
    9232:	d902      	bls.n	923a <__udivmoddi4+0xe0>
    9234:	f1ac 0002 	sub.w	r0, ip, #2
    9238:	442b      	add	r3, r5
    923a:	eba3 0308 	sub.w	r3, r3, r8
    923e:	b2a4      	uxth	r4, r4
    9240:	fbb3 fcfe 	udiv	ip, r3, lr
    9244:	fb0e 331c 	mls	r3, lr, ip, r3
    9248:	fb0c f707 	mul.w	r7, ip, r7
    924c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9250:	42a7      	cmp	r7, r4
    9252:	d94d      	bls.n	92f0 <__udivmoddi4+0x196>
    9254:	192c      	adds	r4, r5, r4
    9256:	f10c 33ff 	add.w	r3, ip, #4294967295
    925a:	d204      	bcs.n	9266 <__udivmoddi4+0x10c>
    925c:	42a7      	cmp	r7, r4
    925e:	d902      	bls.n	9266 <__udivmoddi4+0x10c>
    9260:	f1ac 0302 	sub.w	r3, ip, #2
    9264:	442c      	add	r4, r5
    9266:	1be4      	subs	r4, r4, r7
    9268:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    926c:	e7c0      	b.n	91f0 <__udivmoddi4+0x96>
    926e:	f1c2 0320 	rsb	r3, r2, #32
    9272:	4095      	lsls	r5, r2
    9274:	4094      	lsls	r4, r2
    9276:	fa20 f103 	lsr.w	r1, r0, r3
    927a:	fa2e f303 	lsr.w	r3, lr, r3
    927e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9282:	4090      	lsls	r0, r2
    9284:	b2af      	uxth	r7, r5
    9286:	4303      	orrs	r3, r0
    9288:	fbb1 fcfe 	udiv	ip, r1, lr
    928c:	fb0e 101c 	mls	r0, lr, ip, r1
    9290:	0c19      	lsrs	r1, r3, #16
    9292:	fb0c f807 	mul.w	r8, ip, r7
    9296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    929a:	4588      	cmp	r8, r1
    929c:	d922      	bls.n	92e4 <__udivmoddi4+0x18a>
    929e:	1869      	adds	r1, r5, r1
    92a0:	f10c 30ff 	add.w	r0, ip, #4294967295
    92a4:	d204      	bcs.n	92b0 <__udivmoddi4+0x156>
    92a6:	4588      	cmp	r8, r1
    92a8:	d902      	bls.n	92b0 <__udivmoddi4+0x156>
    92aa:	f1ac 0002 	sub.w	r0, ip, #2
    92ae:	4429      	add	r1, r5
    92b0:	eba1 0108 	sub.w	r1, r1, r8
    92b4:	b29b      	uxth	r3, r3
    92b6:	fbb1 fcfe 	udiv	ip, r1, lr
    92ba:	fb0e 111c 	mls	r1, lr, ip, r1
    92be:	fb0c f707 	mul.w	r7, ip, r7
    92c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    92c6:	429f      	cmp	r7, r3
    92c8:	d90e      	bls.n	92e8 <__udivmoddi4+0x18e>
    92ca:	18eb      	adds	r3, r5, r3
    92cc:	f10c 31ff 	add.w	r1, ip, #4294967295
    92d0:	d204      	bcs.n	92dc <__udivmoddi4+0x182>
    92d2:	429f      	cmp	r7, r3
    92d4:	d902      	bls.n	92dc <__udivmoddi4+0x182>
    92d6:	f1ac 0102 	sub.w	r1, ip, #2
    92da:	442b      	add	r3, r5
    92dc:	1bdb      	subs	r3, r3, r7
    92de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    92e2:	e793      	b.n	920c <__udivmoddi4+0xb2>
    92e4:	4660      	mov	r0, ip
    92e6:	e7e3      	b.n	92b0 <__udivmoddi4+0x156>
    92e8:	4661      	mov	r1, ip
    92ea:	e7f7      	b.n	92dc <__udivmoddi4+0x182>
    92ec:	4660      	mov	r0, ip
    92ee:	e7a4      	b.n	923a <__udivmoddi4+0xe0>
    92f0:	4663      	mov	r3, ip
    92f2:	e7b8      	b.n	9266 <__udivmoddi4+0x10c>
    92f4:	4283      	cmp	r3, r0
    92f6:	d906      	bls.n	9306 <__udivmoddi4+0x1ac>
    92f8:	b916      	cbnz	r6, 9300 <__udivmoddi4+0x1a6>
    92fa:	2100      	movs	r1, #0
    92fc:	4608      	mov	r0, r1
    92fe:	e77c      	b.n	91fa <__udivmoddi4+0xa0>
    9300:	e9c6 e000 	strd	lr, r0, [r6]
    9304:	e7f9      	b.n	92fa <__udivmoddi4+0x1a0>
    9306:	fab3 f783 	clz	r7, r3
    930a:	b98f      	cbnz	r7, 9330 <__udivmoddi4+0x1d6>
    930c:	4283      	cmp	r3, r0
    930e:	d301      	bcc.n	9314 <__udivmoddi4+0x1ba>
    9310:	4572      	cmp	r2, lr
    9312:	d808      	bhi.n	9326 <__udivmoddi4+0x1cc>
    9314:	ebbe 0402 	subs.w	r4, lr, r2
    9318:	eb60 0303 	sbc.w	r3, r0, r3
    931c:	2001      	movs	r0, #1
    931e:	469c      	mov	ip, r3
    9320:	b91e      	cbnz	r6, 932a <__udivmoddi4+0x1d0>
    9322:	2100      	movs	r1, #0
    9324:	e769      	b.n	91fa <__udivmoddi4+0xa0>
    9326:	4638      	mov	r0, r7
    9328:	e7fa      	b.n	9320 <__udivmoddi4+0x1c6>
    932a:	e9c6 4c00 	strd	r4, ip, [r6]
    932e:	e7f8      	b.n	9322 <__udivmoddi4+0x1c8>
    9330:	f1c7 0c20 	rsb	ip, r7, #32
    9334:	40bb      	lsls	r3, r7
    9336:	fa0e f507 	lsl.w	r5, lr, r7
    933a:	fa22 f40c 	lsr.w	r4, r2, ip
    933e:	fa2e f10c 	lsr.w	r1, lr, ip
    9342:	40ba      	lsls	r2, r7
    9344:	431c      	orrs	r4, r3
    9346:	fa20 f30c 	lsr.w	r3, r0, ip
    934a:	40b8      	lsls	r0, r7
    934c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9350:	4301      	orrs	r1, r0
    9352:	fa1f fe84 	uxth.w	lr, r4
    9356:	fbb3 f8f9 	udiv	r8, r3, r9
    935a:	fb09 3018 	mls	r0, r9, r8, r3
    935e:	0c0b      	lsrs	r3, r1, #16
    9360:	fb08 fa0e 	mul.w	sl, r8, lr
    9364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9368:	459a      	cmp	sl, r3
    936a:	d940      	bls.n	93ee <__udivmoddi4+0x294>
    936c:	18e3      	adds	r3, r4, r3
    936e:	f108 30ff 	add.w	r0, r8, #4294967295
    9372:	d204      	bcs.n	937e <__udivmoddi4+0x224>
    9374:	459a      	cmp	sl, r3
    9376:	d902      	bls.n	937e <__udivmoddi4+0x224>
    9378:	f1a8 0002 	sub.w	r0, r8, #2
    937c:	4423      	add	r3, r4
    937e:	eba3 030a 	sub.w	r3, r3, sl
    9382:	b289      	uxth	r1, r1
    9384:	fbb3 f8f9 	udiv	r8, r3, r9
    9388:	fb09 3318 	mls	r3, r9, r8, r3
    938c:	fb08 fe0e 	mul.w	lr, r8, lr
    9390:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9394:	458e      	cmp	lr, r1
    9396:	d92c      	bls.n	93f2 <__udivmoddi4+0x298>
    9398:	1861      	adds	r1, r4, r1
    939a:	f108 33ff 	add.w	r3, r8, #4294967295
    939e:	d204      	bcs.n	93aa <__udivmoddi4+0x250>
    93a0:	458e      	cmp	lr, r1
    93a2:	d902      	bls.n	93aa <__udivmoddi4+0x250>
    93a4:	f1a8 0302 	sub.w	r3, r8, #2
    93a8:	4421      	add	r1, r4
    93aa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    93ae:	eba1 010e 	sub.w	r1, r1, lr
    93b2:	fba0 9802 	umull	r9, r8, r0, r2
    93b6:	4541      	cmp	r1, r8
    93b8:	46ce      	mov	lr, r9
    93ba:	4643      	mov	r3, r8
    93bc:	d302      	bcc.n	93c4 <__udivmoddi4+0x26a>
    93be:	d106      	bne.n	93ce <__udivmoddi4+0x274>
    93c0:	454d      	cmp	r5, r9
    93c2:	d204      	bcs.n	93ce <__udivmoddi4+0x274>
    93c4:	3801      	subs	r0, #1
    93c6:	ebb9 0e02 	subs.w	lr, r9, r2
    93ca:	eb68 0304 	sbc.w	r3, r8, r4
    93ce:	2e00      	cmp	r6, #0
    93d0:	d0a7      	beq.n	9322 <__udivmoddi4+0x1c8>
    93d2:	ebb5 020e 	subs.w	r2, r5, lr
    93d6:	eb61 0103 	sbc.w	r1, r1, r3
    93da:	fa01 fc0c 	lsl.w	ip, r1, ip
    93de:	fa22 f307 	lsr.w	r3, r2, r7
    93e2:	40f9      	lsrs	r1, r7
    93e4:	ea4c 0303 	orr.w	r3, ip, r3
    93e8:	e9c6 3100 	strd	r3, r1, [r6]
    93ec:	e799      	b.n	9322 <__udivmoddi4+0x1c8>
    93ee:	4640      	mov	r0, r8
    93f0:	e7c5      	b.n	937e <__udivmoddi4+0x224>
    93f2:	4643      	mov	r3, r8
    93f4:	e7d9      	b.n	93aa <__udivmoddi4+0x250>

000093f6 <strcmp>:
    93f6:	f810 2b01 	ldrb.w	r2, [r0], #1
    93fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    93fe:	2a01      	cmp	r2, #1
    9400:	bf28      	it	cs
    9402:	429a      	cmpcs	r2, r3
    9404:	d0f7      	beq.n	93f6 <strcmp>
    9406:	1ad0      	subs	r0, r2, r3
    9408:	4770      	bx	lr

0000940a <strlen>:
    940a:	4603      	mov	r3, r0
    940c:	f813 2b01 	ldrb.w	r2, [r3], #1
    9410:	2a00      	cmp	r2, #0
    9412:	d1fb      	bne.n	940c <strlen+0x2>
    9414:	1a18      	subs	r0, r3, r0
    9416:	3801      	subs	r0, #1
    9418:	4770      	bx	lr
    941a:	0000      	movs	r0, r0
    941c:	0000      	movs	r0, r0
	...

00009420 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9422:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9424:	f7fe ffea 	bl	83fc <__aeabi_i2d>
    9428:	a325      	add	r3, pc, #148	; (adr r3, 94c0 <ntc_temperature+0xa0>)
    942a:	e9d3 2300 	ldrd	r2, r3, [r3]
    942e:	f7ff f84f 	bl	84d0 <__aeabi_dmul>
    9432:	f7ff fa5f 	bl	88f4 <__aeabi_d2f>
    9436:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9438:	1e63      	subs	r3, r4, #1
    943a:	b2db      	uxtb	r3, r3
    943c:	2b02      	cmp	r3, #2
    943e:	bf96      	itet	ls
    9440:	4a27      	ldrls	r2, [pc, #156]	; (94e0 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9442:	2000      	movhi	r0, #0
    9444:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9448:	4629      	mov	r1, r5
    944a:	f7ff fbb1 	bl	8bb0 <__aeabi_fmul>
    944e:	f7fe ffe7 	bl	8420 <__aeabi_f2d>
    9452:	4606      	mov	r6, r0
    9454:	4628      	mov	r0, r5
    9456:	460f      	mov	r7, r1
    9458:	f7fe ffe2 	bl	8420 <__aeabi_f2d>
    945c:	4602      	mov	r2, r0
    945e:	460b      	mov	r3, r1
    9460:	2000      	movs	r0, #0
    9462:	4920      	ldr	r1, [pc, #128]	; (94e4 <ntc_temperature+0xc4>)
    9464:	f7fe fe7c 	bl	8160 <__aeabi_dsub>
    9468:	4602      	mov	r2, r0
    946a:	460b      	mov	r3, r1
    946c:	4630      	mov	r0, r6
    946e:	4639      	mov	r1, r7
    9470:	f7ff f958 	bl	8724 <__aeabi_ddiv>
    9474:	f7ff fa3e 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    9478:	491b      	ldr	r1, [pc, #108]	; (94e8 <ntc_temperature+0xc8>)
    947a:	f7ff fc4d 	bl	8d18 <__aeabi_fdiv>
    947e:	f7fe ffcf 	bl	8420 <__aeabi_f2d>
    9482:	f01a fc67 	bl	23d54 <log>
    9486:	a310      	add	r3, pc, #64	; (adr r3, 94c8 <ntc_temperature+0xa8>)
    9488:	e9d3 2300 	ldrd	r2, r3, [r3]
    948c:	f7ff f94a 	bl	8724 <__aeabi_ddiv>
    9490:	a30f      	add	r3, pc, #60	; (adr r3, 94d0 <ntc_temperature+0xb0>)
    9492:	e9d3 2300 	ldrd	r2, r3, [r3]
    9496:	f7fe fe65 	bl	8164 <__adddf3>
    949a:	4602      	mov	r2, r0
    949c:	460b      	mov	r3, r1
    949e:	2000      	movs	r0, #0
    94a0:	4912      	ldr	r1, [pc, #72]	; (94ec <ntc_temperature+0xcc>)
    94a2:	f7ff f93f 	bl	8724 <__aeabi_ddiv>
    94a6:	f7ff fa25 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    94aa:	f7fe ffb9 	bl	8420 <__aeabi_f2d>
    94ae:	a30a      	add	r3, pc, #40	; (adr r3, 94d8 <ntc_temperature+0xb8>)
    94b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    94b4:	f7fe fe54 	bl	8160 <__aeabi_dsub>
    94b8:	f7ff fa1c 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    94bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94be:	bf00      	nop
    94c0:	3a66a002 	.word	0x3a66a002
    94c4:	3f2ccdb3 	.word	0x3f2ccdb3
    94c8:	00000000 	.word	0x00000000
    94cc:	40af0200 	.word	0x40af0200
    94d0:	dcb5db83 	.word	0xdcb5db83
    94d4:	3f6b79e1 	.word	0x3f6b79e1
    94d8:	66666666 	.word	0x66666666
    94dc:	40711266 	.word	0x40711266
    94e0:	0002c468 	.word	0x0002c468
    94e4:	40080000 	.word	0x40080000
    94e8:	461c4000 	.word	0x461c4000
    94ec:	3ff00000 	.word	0x3ff00000

000094f0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    94f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f2:	4d64      	ldr	r5, [pc, #400]	; (9684 <bt_init+0x194>)
{
    94f4:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f6:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    94fa:	6899      	ldr	r1, [r3, #8]
    94fc:	f011 0101 	ands.w	r1, r1, #1
    9500:	d11a      	bne.n	9538 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9502:	f640 4003 	movw	r0, #3075	; 0xc03
    9506:	aa05      	add	r2, sp, #20
    9508:	f009 fac2 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
    950c:	4604      	mov	r4, r0
    950e:	2800      	cmp	r0, #0
    9510:	f040 80b5 	bne.w	967e <bt_init+0x18e>
		hci_reset_complete(rsp);
    9514:	9805      	ldr	r0, [sp, #20]
	uint8_t status = buf->data[0];
    9516:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	b95b      	cbnz	r3, 9534 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    951c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9520:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9524:	f002 0209 	and.w	r2, r2, #9
    9528:	e8d3 1fef 	ldaex	r1, [r3]
    952c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9530:	2c00      	cmp	r4, #0
    9532:	d1f9      	bne.n	9528 <bt_init+0x38>
		net_buf_unref(rsp);
    9534:	f010 fe7a 	bl	1a22c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9538:	2100      	movs	r1, #0
    953a:	f241 0003 	movw	r0, #4099	; 0x1003
    953e:	aa05      	add	r2, sp, #20
    9540:	f009 faa6 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    9544:	4604      	mov	r4, r0
    9546:	2800      	cmp	r0, #0
    9548:	f040 8099 	bne.w	967e <bt_init+0x18e>
	read_local_features_complete(rsp);
    954c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    954e:	4e4e      	ldr	r6, [pc, #312]	; (9688 <bt_init+0x198>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    9550:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    9552:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9556:	f8d2 1005 	ldr.w	r1, [r2, #5]
    955a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    955c:	4618      	mov	r0, r3
    955e:	f010 fe65 	bl	1a22c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9562:	4621      	mov	r1, r4
    9564:	f241 0001 	movw	r0, #4097	; 0x1001
    9568:	aa05      	add	r2, sp, #20
    956a:	f009 fa91 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    956e:	4604      	mov	r4, r0
    9570:	2800      	cmp	r0, #0
    9572:	f040 8084 	bne.w	967e <bt_init+0x18e>
	read_local_ver_complete(rsp);
    9576:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    9578:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    957a:	785a      	ldrb	r2, [r3, #1]
    957c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    9580:	885a      	ldrh	r2, [r3, #2]
    9582:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    9586:	791a      	ldrb	r2, [r3, #4]
    9588:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    958c:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9590:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9594:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    9598:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    959c:	f010 fe46 	bl	1a22c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    95a0:	4621      	mov	r1, r4
    95a2:	f241 0002 	movw	r0, #4098	; 0x1002
    95a6:	aa05      	add	r2, sp, #20
    95a8:	f009 fa72 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    95ac:	4604      	mov	r4, r0
    95ae:	2800      	cmp	r0, #0
    95b0:	d165      	bne.n	967e <bt_init+0x18e>
	read_supported_commands_complete(rsp);
    95b2:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    95b4:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    95b6:	1c53      	adds	r3, r2, #1
    95b8:	3241      	adds	r2, #65	; 0x41
    95ba:	4634      	mov	r4, r6
    95bc:	6818      	ldr	r0, [r3, #0]
    95be:	6859      	ldr	r1, [r3, #4]
    95c0:	3308      	adds	r3, #8
    95c2:	c403      	stmia	r4!, {r0, r1}
    95c4:	4293      	cmp	r3, r2
    95c6:	4626      	mov	r6, r4
    95c8:	d1f7      	bne.n	95ba <bt_init+0xca>
	net_buf_unref(rsp);
    95ca:	4638      	mov	r0, r7
    95cc:	f010 fe2e 	bl	1a22c <net_buf_unref>
		err = prng_init();
    95d0:	f00b f882 	bl	146d8 <prng_init>
		if (err) {
    95d4:	4604      	mov	r4, r0
    95d6:	2800      	cmp	r0, #0
    95d8:	d151      	bne.n	967e <bt_init+0x18e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    95da:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    95de:	f013 0320 	ands.w	r3, r3, #32
    95e2:	d118      	bne.n	9616 <bt_init+0x126>
		LOG_WRN("Controller to host flow control not supported");
    95e4:	4a29      	ldr	r2, [pc, #164]	; (968c <bt_init+0x19c>)
    95e6:	492a      	ldr	r1, [pc, #168]	; (9690 <bt_init+0x1a0>)
    95e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    95ec:	9300      	str	r3, [sp, #0]
    95ee:	2202      	movs	r2, #2
    95f0:	f01d ffb3 	bl	2755a <z_log_msg_runtime_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    95f4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    95f8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    95fc:	d14c      	bne.n	9698 <bt_init+0x1a8>
		LOG_ERR("Non-LE capable controller detected!");
    95fe:	4a25      	ldr	r2, [pc, #148]	; (9694 <bt_init+0x1a4>)
    9600:	4618      	mov	r0, r3
    9602:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9606:	4922      	ldr	r1, [pc, #136]	; (9690 <bt_init+0x1a0>)
    9608:	2201      	movs	r2, #1
    960a:	9300      	str	r3, [sp, #0]
    960c:	f01d ffa5 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    9610:	f06f 0412 	mvn.w	r4, #18
    9614:	e033      	b.n	967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9616:	2107      	movs	r1, #7
    9618:	f640 4033 	movw	r0, #3123	; 0xc33
    961c:	f009 f9ea 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
    9620:	4606      	mov	r6, r0
    9622:	2800      	cmp	r0, #0
    9624:	f000 8140 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9628:	2107      	movs	r1, #7
    962a:	300c      	adds	r0, #12
    962c:	f010 ff20 	bl	1a470 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9630:	2345      	movs	r3, #69	; 0x45
    9632:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9634:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9636:	f8c0 4002 	str.w	r4, [r0, #2]
    963a:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    963c:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    963e:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9640:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9642:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9644:	4631      	mov	r1, r6
    9646:	f640 4033 	movw	r0, #3123	; 0xc33
    964a:	f009 fa21 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    964e:	4604      	mov	r4, r0
    9650:	b9a8      	cbnz	r0, 967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    9652:	2101      	movs	r1, #1
    9654:	f640 4031 	movw	r0, #3121	; 0xc31
    9658:	f009 f9cc 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
    965c:	4606      	mov	r6, r0
    965e:	2800      	cmp	r0, #0
    9660:	f000 8122 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    9664:	2101      	movs	r1, #1
    9666:	300c      	adds	r0, #12
    9668:	f01f fdf3 	bl	29252 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    966c:	4622      	mov	r2, r4
    966e:	4631      	mov	r1, r6
    9670:	f640 4031 	movw	r0, #3121	; 0xc31
    9674:	f009 fa0c 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    9678:	4604      	mov	r4, r0
    967a:	2800      	cmp	r0, #0
    967c:	d0ba      	beq.n	95f4 <bt_init+0x104>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    967e:	4620      	mov	r0, r4
    9680:	b007      	add	sp, #28
    9682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9684:	20008000 	.word	0x20008000
    9688:	20008070 	.word	0x20008070
    968c:	0002f634 	.word	0x0002f634
    9690:	0002c094 	.word	0x0002c094
    9694:	0002f662 	.word	0x0002f662
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9698:	2100      	movs	r1, #0
    969a:	f242 0003 	movw	r0, #8195	; 0x2003
    969e:	aa05      	add	r2, sp, #20
    96a0:	f009 f9f6 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    96a4:	4604      	mov	r4, r0
    96a6:	2800      	cmp	r0, #0
    96a8:	d1e9      	bne.n	967e <bt_init+0x18e>
	read_le_features_complete(rsp);
    96aa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96ac:	4ebe      	ldr	r6, [pc, #760]	; (99a8 <bt_init+0x4b8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    96ae:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96b0:	f8d2 0001 	ldr.w	r0, [r2, #1]
    96b4:	f8d2 1005 	ldr.w	r1, [r2, #5]
    96b8:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    96ba:	4618      	mov	r0, r3
    96bc:	f010 fdb6 	bl	1a22c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    96c0:	4621      	mov	r1, r4
    96c2:	f242 0002 	movw	r0, #8194	; 0x2002
    96c6:	aa05      	add	r2, sp, #20
    96c8:	f009 f9e2 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
    96cc:	4604      	mov	r4, r0
    96ce:	2800      	cmp	r0, #0
    96d0:	d1d5      	bne.n	967e <bt_init+0x18e>
		le_read_buffer_size_complete(rsp);
    96d2:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    96d4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    96d6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    96da:	b291      	uxth	r1, r2
    96dc:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    96e0:	b129      	cbz	r1, 96ee <bt_init+0x1fe>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    96e2:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    96e4:	4611      	mov	r1, r2
    96e6:	f106 0028 	add.w	r0, r6, #40	; 0x28
    96ea:	f021 f96a 	bl	2a9c2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    96ee:	4620      	mov	r0, r4
    96f0:	f010 fd9c 	bl	1a22c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    96f4:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    96f8:	f016 0620 	ands.w	r6, r6, #32
    96fc:	d118      	bne.n	9730 <bt_init+0x240>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    96fe:	2102      	movs	r1, #2
    9700:	f640 406d 	movw	r0, #3181	; 0xc6d
    9704:	f009 f976 	bl	129f4 <bt_hci_cmd_create>
		if (!buf) {
    9708:	4604      	mov	r4, r0
    970a:	2800      	cmp	r0, #0
    970c:	f000 80cc 	beq.w	98a8 <bt_init+0x3b8>
	return net_buf_simple_add(&buf->b, len);
    9710:	2102      	movs	r1, #2
    9712:	300c      	adds	r0, #12
    9714:	f010 feac 	bl	1a470 <net_buf_simple_add>
		cp_le->le = 0x01;
    9718:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    971a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    971c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    971e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9720:	4632      	mov	r2, r6
    9722:	f640 406d 	movw	r0, #3181	; 0xc6d
    9726:	f009 f9b3 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
    972a:	4604      	mov	r4, r0
    972c:	2800      	cmp	r0, #0
    972e:	d1a6      	bne.n	967e <bt_init+0x18e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9730:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9734:	071f      	lsls	r7, r3, #28
    9736:	d512      	bpl.n	975e <bt_init+0x26e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9738:	2100      	movs	r1, #0
    973a:	f242 001c 	movw	r0, #8220	; 0x201c
    973e:	aa05      	add	r2, sp, #20
    9740:	f009 f9a6 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
    9744:	4604      	mov	r4, r0
    9746:	2800      	cmp	r0, #0
    9748:	d199      	bne.n	967e <bt_init+0x18e>
		le_read_supp_states_complete(rsp);
    974a:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    974c:	68c3      	ldr	r3, [r0, #12]
    974e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    9752:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9756:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    975a:	f010 fd67 	bl	1a22c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    975e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9762:	069e      	lsls	r6, r3, #26
    9764:	d524      	bpl.n	97b0 <bt_init+0x2c0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9766:	f10d 0112 	add.w	r1, sp, #18
    976a:	a804      	add	r0, sp, #16
    976c:	f009 fa06 	bl	12b7c <hci_le_read_max_data_len>
		if (err) {
    9770:	4604      	mov	r4, r0
    9772:	2800      	cmp	r0, #0
    9774:	d183      	bne.n	967e <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9776:	2104      	movs	r1, #4
    9778:	f242 0024 	movw	r0, #8228	; 0x2024
    977c:	f009 f93a 	bl	129f4 <bt_hci_cmd_create>
		if (!buf) {
    9780:	4606      	mov	r6, r0
    9782:	2800      	cmp	r0, #0
    9784:	f000 8090 	beq.w	98a8 <bt_init+0x3b8>
    9788:	2104      	movs	r1, #4
    978a:	300c      	adds	r0, #12
    978c:	f010 fe70 	bl	1a470 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9790:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9794:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9796:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9798:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    979c:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    979e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    97a0:	f242 0024 	movw	r0, #8228	; 0x2024
    97a4:	f009 f974 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
    97a8:	4604      	mov	r4, r0
    97aa:	2800      	cmp	r0, #0
    97ac:	f47f af67 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    97b0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    97b4:	065c      	lsls	r4, r3, #25
    97b6:	d510      	bpl.n	97da <bt_init+0x2ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    97b8:	2100      	movs	r1, #0
    97ba:	f242 002a 	movw	r0, #8234	; 0x202a
    97be:	aa05      	add	r2, sp, #20
    97c0:	f009 f966 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
    97c4:	4604      	mov	r4, r0
    97c6:	2800      	cmp	r0, #0
    97c8:	f47f af59 	bne.w	967e <bt_init+0x18e>
		le_read_resolving_list_size_complete(rsp);
    97cc:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
    97ce:	68c3      	ldr	r3, [r0, #12]
    97d0:	785b      	ldrb	r3, [r3, #1]
    97d2:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    97d6:	f010 fd29 	bl	1a22c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    97da:	2108      	movs	r1, #8
    97dc:	f242 0001 	movw	r0, #8193	; 0x2001
    97e0:	f009 f908 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
    97e4:	4604      	mov	r4, r0
    97e6:	2800      	cmp	r0, #0
    97e8:	d05e      	beq.n	98a8 <bt_init+0x3b8>
    97ea:	2108      	movs	r1, #8
    97ec:	300c      	adds	r0, #12
    97ee:	f010 fe3f 	bl	1a470 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    97f2:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    97f6:	f240 2302 	movw	r3, #514	; 0x202
    97fa:	f011 0f40 	tst.w	r1, #64	; 0x40
    97fe:	bf08      	it	eq
    9800:	2303      	moveq	r3, #3
    9802:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9804:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9806:	bf4c      	ite	mi
    9808:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    980c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9810:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9812:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9816:	bf48      	it	mi
    9818:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    981c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9820:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9824:	bf18      	it	ne
    9826:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    982a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    982e:	07cf      	lsls	r7, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9830:	bf48      	it	mi
    9832:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9836:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9838:	bf08      	it	eq
    983a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    983e:	2100      	movs	r1, #0
    9840:	f01d fea2 	bl	27588 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9844:	4621      	mov	r1, r4
    9846:	2200      	movs	r2, #0
    9848:	f242 0001 	movw	r0, #8193	; 0x2001
    984c:	f009 f920 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    9850:	4604      	mov	r4, r0
    9852:	2800      	cmp	r0, #0
    9854:	f47f af13 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9858:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    985c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9860:	069e      	lsls	r6, r3, #26
    9862:	d424      	bmi.n	98ae <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    9864:	b9c9      	cbnz	r1, 989a <bt_init+0x3aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9866:	f241 0005 	movw	r0, #4101	; 0x1005
    986a:	aa05      	add	r2, sp, #20
    986c:	f009 f910 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    9870:	4604      	mov	r4, r0
    9872:	2800      	cmp	r0, #0
    9874:	f47f af03 	bne.w	967e <bt_init+0x18e>
	if (bt_dev.le.acl_mtu) {
    9878:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    987c:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    987e:	b94b      	cbnz	r3, 9894 <bt_init+0x3a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    9880:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    9882:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9886:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    988a:	889a      	ldrh	r2, [r3, #4]
    988c:	4847      	ldr	r0, [pc, #284]	; (99ac <bt_init+0x4bc>)
    988e:	4611      	mov	r1, r2
    9890:	f021 f897 	bl	2a9c2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9894:	4620      	mov	r0, r4
    9896:	f010 fcc9 	bl	1a22c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    989a:	2108      	movs	r1, #8
    989c:	f640 4001 	movw	r0, #3073	; 0xc01
    98a0:	f009 f8a8 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
    98a4:	4604      	mov	r4, r0
    98a6:	b980      	cbnz	r0, 98ca <bt_init+0x3da>
		return -ENOBUFS;
    98a8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    98ac:	e6e7      	b.n	967e <bt_init+0x18e>
	else if (!bt_dev.le.acl_mtu) {
    98ae:	2900      	cmp	r1, #0
    98b0:	d1f3      	bne.n	989a <bt_init+0x3aa>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    98b2:	4b3f      	ldr	r3, [pc, #252]	; (99b0 <bt_init+0x4c0>)
    98b4:	2201      	movs	r2, #1
    98b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
    98ba:	493e      	ldr	r1, [pc, #248]	; (99b4 <bt_init+0x4c4>)
    98bc:	4603      	mov	r3, r0
    98be:	9000      	str	r0, [sp, #0]
    98c0:	f01d fe4b 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    98c4:	f06f 0404 	mvn.w	r4, #4
    98c8:	e6d9      	b.n	967e <bt_init+0x18e>
    98ca:	2108      	movs	r1, #8
    98cc:	300c      	adds	r0, #12
    98ce:	f010 fdcf 	bl	1a470 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    98d2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    98d6:	4602      	mov	r2, r0
    98d8:	07d9      	lsls	r1, r3, #31
    98da:	d41c      	bmi.n	9916 <bt_init+0x426>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    98dc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    98e0:	4835      	ldr	r0, [pc, #212]	; (99b8 <bt_init+0x4c8>)
	sys_put_le64(mask, ev->events);
    98e2:	f01d fe51 	bl	27588 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    98e6:	4621      	mov	r1, r4
    98e8:	2200      	movs	r2, #0
    98ea:	f640 4001 	movw	r0, #3073	; 0xc01
    98ee:	f009 f8cf 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    98f2:	4604      	mov	r4, r0
    98f4:	2800      	cmp	r0, #0
    98f6:	f47f aec2 	bne.w	967e <bt_init+0x18e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    98fa:	4601      	mov	r1, r0
    98fc:	aa05      	add	r2, sp, #20
    98fe:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9902:	f009 f8c5 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    9906:	4606      	mov	r6, r0
    9908:	b148      	cbz	r0, 991e <bt_init+0x42e>
		LOG_WRN("Vendor HCI extensions not available");
    990a:	4b2c      	ldr	r3, [pc, #176]	; (99bc <bt_init+0x4cc>)
			LOG_WRN("Failed to read supported vendor features");
    990c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9910:	9400      	str	r4, [sp, #0]
    9912:	4623      	mov	r3, r4
    9914:	e013      	b.n	993e <bt_init+0x44e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9916:	a122      	add	r1, pc, #136	; (adr r1, 99a0 <bt_init+0x4b0>)
    9918:	e9d1 0100 	ldrd	r0, r1, [r1]
    991c:	e7e1      	b.n	98e2 <bt_init+0x3f2>
	net_buf_unref(rsp);
    991e:	9805      	ldr	r0, [sp, #20]
    9920:	f010 fc84 	bl	1a22c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9924:	4631      	mov	r1, r6
    9926:	f64f 4002 	movw	r0, #64514	; 0xfc02
    992a:	aa05      	add	r2, sp, #20
    992c:	f009 f8b0 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
    9930:	4604      	mov	r4, r0
    9932:	b1c0      	cbz	r0, 9966 <bt_init+0x476>
		LOG_WRN("Failed to read supported vendor commands");
    9934:	4b22      	ldr	r3, [pc, #136]	; (99c0 <bt_init+0x4d0>)
    9936:	9600      	str	r6, [sp, #0]
    9938:	e9cd 6301 	strd	r6, r3, [sp, #4]
    993c:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
    993e:	2202      	movs	r2, #2
    9940:	4618      	mov	r0, r3
    9942:	491c      	ldr	r1, [pc, #112]	; (99b4 <bt_init+0x4c4>)
    9944:	f01d fe09 	bl	2755a <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
    9948:	f00a fb46 	bl	13fd8 <bt_id_init>
	if (err) {
    994c:	4604      	mov	r4, r0
    994e:	2800      	cmp	r0, #0
    9950:	f47f ae95 	bne.w	967e <bt_init+0x18e>
		err = bt_conn_init();
    9954:	f00c f826 	bl	159a4 <bt_conn_init>
		if (err) {
    9958:	4604      	mov	r4, r0
    995a:	2800      	cmp	r0, #0
    995c:	f47f ae8f 	bne.w	967e <bt_init+0x18e>
	bt_finalize_init();
    9960:	f009 fe8a 	bl	13678 <bt_finalize_init>
	return 0;
    9964:	e68b      	b.n	967e <bt_init+0x18e>
	rp.cmds = (void *)rsp->data;
    9966:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9968:	68c3      	ldr	r3, [r0, #12]
    996a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    996e:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    9972:	f010 fc5b 	bl	1a22c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9976:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    997a:	075b      	lsls	r3, r3, #29
    997c:	d5e4      	bpl.n	9948 <bt_init+0x458>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    997e:	4621      	mov	r1, r4
    9980:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9984:	aa05      	add	r2, sp, #20
    9986:	f009 f883 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
    998a:	b108      	cbz	r0, 9990 <bt_init+0x4a0>
			LOG_WRN("Failed to read supported vendor features");
    998c:	4b0d      	ldr	r3, [pc, #52]	; (99c4 <bt_init+0x4d4>)
    998e:	e7bd      	b.n	990c <bt_init+0x41c>
		rp.feat = (void *)rsp->data;
    9990:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9992:	68c3      	ldr	r3, [r0, #12]
    9994:	785b      	ldrb	r3, [r3, #1]
    9996:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    999a:	f010 fc47 	bl	1a22c <net_buf_unref>
    999e:	e7d3      	b.n	9948 <bt_init+0x458>
    99a0:	02008890 	.word	0x02008890
    99a4:	20008000 	.word	0x20008000
    99a8:	200080d0 	.word	0x200080d0
    99ac:	20008100 	.word	0x20008100
    99b0:	0002f686 	.word	0x0002f686
    99b4:	0002c094 	.word	0x0002c094
    99b8:	02008810 	.word	0x02008810
    99bc:	0002f6a9 	.word	0x0002f6a9
    99c0:	0002f6cd 	.word	0x0002f6cd
    99c4:	0002f6f6 	.word	0x0002f6f6

000099c8 <__ieee754_log>:
    99c8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    99cc:	4602      	mov	r2, r0
    99ce:	460b      	mov	r3, r1
    99d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99d4:	460d      	mov	r5, r1
    99d6:	b087      	sub	sp, #28
    99d8:	da24      	bge.n	9a24 <__ieee754_log+0x5c>
    99da:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    99de:	4304      	orrs	r4, r0
    99e0:	d108      	bne.n	99f4 <__ieee754_log+0x2c>
    99e2:	2200      	movs	r2, #0
    99e4:	2300      	movs	r3, #0
    99e6:	2000      	movs	r0, #0
    99e8:	49c9      	ldr	r1, [pc, #804]	; (9d10 <__ieee754_log+0x348>)
    99ea:	f7fe fe9b 	bl	8724 <__aeabi_ddiv>
    99ee:	b007      	add	sp, #28
    99f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99f4:	2900      	cmp	r1, #0
    99f6:	da04      	bge.n	9a02 <__ieee754_log+0x3a>
    99f8:	f7fe fbb2 	bl	8160 <__aeabi_dsub>
    99fc:	2200      	movs	r2, #0
    99fe:	2300      	movs	r3, #0
    9a00:	e7f3      	b.n	99ea <__ieee754_log+0x22>
    9a02:	2200      	movs	r2, #0
    9a04:	4bc3      	ldr	r3, [pc, #780]	; (9d14 <__ieee754_log+0x34c>)
    9a06:	f7fe fd63 	bl	84d0 <__aeabi_dmul>
    9a0a:	460b      	mov	r3, r1
    9a0c:	460d      	mov	r5, r1
    9a0e:	4602      	mov	r2, r0
    9a10:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9a14:	48c0      	ldr	r0, [pc, #768]	; (9d18 <__ieee754_log+0x350>)
    9a16:	4285      	cmp	r5, r0
    9a18:	dd06      	ble.n	9a28 <__ieee754_log+0x60>
    9a1a:	4610      	mov	r0, r2
    9a1c:	4619      	mov	r1, r3
    9a1e:	f7fe fba1 	bl	8164 <__adddf3>
    9a22:	e7e4      	b.n	99ee <__ieee754_log+0x26>
    9a24:	2100      	movs	r1, #0
    9a26:	e7f5      	b.n	9a14 <__ieee754_log+0x4c>
    9a28:	152c      	asrs	r4, r5, #20
    9a2a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    9a2e:	4610      	mov	r0, r2
    9a30:	2200      	movs	r2, #0
    9a32:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    9a36:	440c      	add	r4, r1
    9a38:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    9a3c:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9a40:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    9a44:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    9a48:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    9a4c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    9a50:	ea41 0305 	orr.w	r3, r1, r5
    9a54:	4619      	mov	r1, r3
    9a56:	4bb1      	ldr	r3, [pc, #708]	; (9d1c <__ieee754_log+0x354>)
    9a58:	f7fe fb82 	bl	8160 <__aeabi_dsub>
    9a5c:	1cab      	adds	r3, r5, #2
    9a5e:	4682      	mov	sl, r0
    9a60:	468b      	mov	fp, r1
    9a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9a66:	2200      	movs	r2, #0
    9a68:	2b02      	cmp	r3, #2
    9a6a:	dc53      	bgt.n	9b14 <__ieee754_log+0x14c>
    9a6c:	2300      	movs	r3, #0
    9a6e:	f7ff facd 	bl	900c <__aeabi_dcmpeq>
    9a72:	b1d0      	cbz	r0, 9aaa <__ieee754_log+0xe2>
    9a74:	2c00      	cmp	r4, #0
    9a76:	f000 8120 	beq.w	9cba <__ieee754_log+0x2f2>
    9a7a:	4620      	mov	r0, r4
    9a7c:	f7fe fcbe 	bl	83fc <__aeabi_i2d>
    9a80:	4606      	mov	r6, r0
    9a82:	460f      	mov	r7, r1
    9a84:	a38e      	add	r3, pc, #568	; (adr r3, 9cc0 <__ieee754_log+0x2f8>)
    9a86:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a8a:	f7fe fd21 	bl	84d0 <__aeabi_dmul>
    9a8e:	4604      	mov	r4, r0
    9a90:	460d      	mov	r5, r1
    9a92:	4630      	mov	r0, r6
    9a94:	4639      	mov	r1, r7
    9a96:	a38c      	add	r3, pc, #560	; (adr r3, 9cc8 <__ieee754_log+0x300>)
    9a98:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a9c:	f7fe fd18 	bl	84d0 <__aeabi_dmul>
    9aa0:	4602      	mov	r2, r0
    9aa2:	460b      	mov	r3, r1
    9aa4:	4620      	mov	r0, r4
    9aa6:	4629      	mov	r1, r5
    9aa8:	e7b9      	b.n	9a1e <__ieee754_log+0x56>
    9aaa:	a389      	add	r3, pc, #548	; (adr r3, 9cd0 <__ieee754_log+0x308>)
    9aac:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ab0:	4650      	mov	r0, sl
    9ab2:	4659      	mov	r1, fp
    9ab4:	f7fe fd0c 	bl	84d0 <__aeabi_dmul>
    9ab8:	4602      	mov	r2, r0
    9aba:	460b      	mov	r3, r1
    9abc:	2000      	movs	r0, #0
    9abe:	4998      	ldr	r1, [pc, #608]	; (9d20 <__ieee754_log+0x358>)
    9ac0:	f7fe fb4e 	bl	8160 <__aeabi_dsub>
    9ac4:	4606      	mov	r6, r0
    9ac6:	460f      	mov	r7, r1
    9ac8:	4652      	mov	r2, sl
    9aca:	465b      	mov	r3, fp
    9acc:	4650      	mov	r0, sl
    9ace:	4659      	mov	r1, fp
    9ad0:	f7fe fcfe 	bl	84d0 <__aeabi_dmul>
    9ad4:	4602      	mov	r2, r0
    9ad6:	460b      	mov	r3, r1
    9ad8:	4630      	mov	r0, r6
    9ada:	4639      	mov	r1, r7
    9adc:	f7fe fcf8 	bl	84d0 <__aeabi_dmul>
    9ae0:	4606      	mov	r6, r0
    9ae2:	460f      	mov	r7, r1
    9ae4:	b914      	cbnz	r4, 9aec <__ieee754_log+0x124>
    9ae6:	4632      	mov	r2, r6
    9ae8:	463b      	mov	r3, r7
    9aea:	e0a0      	b.n	9c2e <__ieee754_log+0x266>
    9aec:	4620      	mov	r0, r4
    9aee:	f7fe fc85 	bl	83fc <__aeabi_i2d>
    9af2:	4680      	mov	r8, r0
    9af4:	4689      	mov	r9, r1
    9af6:	a372      	add	r3, pc, #456	; (adr r3, 9cc0 <__ieee754_log+0x2f8>)
    9af8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9afc:	f7fe fce8 	bl	84d0 <__aeabi_dmul>
    9b00:	4604      	mov	r4, r0
    9b02:	460d      	mov	r5, r1
    9b04:	4640      	mov	r0, r8
    9b06:	4649      	mov	r1, r9
    9b08:	a36f      	add	r3, pc, #444	; (adr r3, 9cc8 <__ieee754_log+0x300>)
    9b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b0e:	f7fe fcdf 	bl	84d0 <__aeabi_dmul>
    9b12:	e0a5      	b.n	9c60 <__ieee754_log+0x298>
    9b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9b18:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9b1c:	f7fe fb22 	bl	8164 <__adddf3>
    9b20:	4602      	mov	r2, r0
    9b22:	460b      	mov	r3, r1
    9b24:	4650      	mov	r0, sl
    9b26:	4659      	mov	r1, fp
    9b28:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9b2c:	f7fe fdfa 	bl	8724 <__aeabi_ddiv>
    9b30:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9b34:	3551      	adds	r5, #81	; 0x51
    9b36:	e9cd 0100 	strd	r0, r1, [sp]
    9b3a:	4620      	mov	r0, r4
    9b3c:	4335      	orrs	r5, r6
    9b3e:	f7fe fc5d 	bl	83fc <__aeabi_i2d>
    9b42:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9b4a:	4610      	mov	r0, r2
    9b4c:	4619      	mov	r1, r3
    9b4e:	f7fe fcbf 	bl	84d0 <__aeabi_dmul>
    9b52:	4602      	mov	r2, r0
    9b54:	460b      	mov	r3, r1
    9b56:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9b5a:	f7fe fcb9 	bl	84d0 <__aeabi_dmul>
    9b5e:	4680      	mov	r8, r0
    9b60:	4689      	mov	r9, r1
    9b62:	a35d      	add	r3, pc, #372	; (adr r3, 9cd8 <__ieee754_log+0x310>)
    9b64:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b68:	f7fe fcb2 	bl	84d0 <__aeabi_dmul>
    9b6c:	a35c      	add	r3, pc, #368	; (adr r3, 9ce0 <__ieee754_log+0x318>)
    9b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b72:	f7fe faf7 	bl	8164 <__adddf3>
    9b76:	4642      	mov	r2, r8
    9b78:	464b      	mov	r3, r9
    9b7a:	f7fe fca9 	bl	84d0 <__aeabi_dmul>
    9b7e:	a35a      	add	r3, pc, #360	; (adr r3, 9ce8 <__ieee754_log+0x320>)
    9b80:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b84:	f7fe faee 	bl	8164 <__adddf3>
    9b88:	4642      	mov	r2, r8
    9b8a:	464b      	mov	r3, r9
    9b8c:	f7fe fca0 	bl	84d0 <__aeabi_dmul>
    9b90:	a357      	add	r3, pc, #348	; (adr r3, 9cf0 <__ieee754_log+0x328>)
    9b92:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b96:	f7fe fae5 	bl	8164 <__adddf3>
    9b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9b9e:	f7fe fc97 	bl	84d0 <__aeabi_dmul>
    9ba2:	a355      	add	r3, pc, #340	; (adr r3, 9cf8 <__ieee754_log+0x330>)
    9ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9bac:	4640      	mov	r0, r8
    9bae:	4649      	mov	r1, r9
    9bb0:	f7fe fc8e 	bl	84d0 <__aeabi_dmul>
    9bb4:	a352      	add	r3, pc, #328	; (adr r3, 9d00 <__ieee754_log+0x338>)
    9bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bba:	f7fe fad3 	bl	8164 <__adddf3>
    9bbe:	4642      	mov	r2, r8
    9bc0:	464b      	mov	r3, r9
    9bc2:	f7fe fc85 	bl	84d0 <__aeabi_dmul>
    9bc6:	a350      	add	r3, pc, #320	; (adr r3, 9d08 <__ieee754_log+0x340>)
    9bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bcc:	f7fe faca 	bl	8164 <__adddf3>
    9bd0:	4642      	mov	r2, r8
    9bd2:	464b      	mov	r3, r9
    9bd4:	f7fe fc7c 	bl	84d0 <__aeabi_dmul>
    9bd8:	4602      	mov	r2, r0
    9bda:	460b      	mov	r3, r1
    9bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9be0:	f7fe fac0 	bl	8164 <__adddf3>
    9be4:	2d00      	cmp	r5, #0
    9be6:	4680      	mov	r8, r0
    9be8:	4689      	mov	r9, r1
    9bea:	dd48      	ble.n	9c7e <__ieee754_log+0x2b6>
    9bec:	2200      	movs	r2, #0
    9bee:	4b4c      	ldr	r3, [pc, #304]	; (9d20 <__ieee754_log+0x358>)
    9bf0:	4650      	mov	r0, sl
    9bf2:	4659      	mov	r1, fp
    9bf4:	f7fe fc6c 	bl	84d0 <__aeabi_dmul>
    9bf8:	4652      	mov	r2, sl
    9bfa:	465b      	mov	r3, fp
    9bfc:	f7fe fc68 	bl	84d0 <__aeabi_dmul>
    9c00:	4602      	mov	r2, r0
    9c02:	460b      	mov	r3, r1
    9c04:	4606      	mov	r6, r0
    9c06:	460f      	mov	r7, r1
    9c08:	4640      	mov	r0, r8
    9c0a:	4649      	mov	r1, r9
    9c0c:	f7fe faaa 	bl	8164 <__adddf3>
    9c10:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c14:	f7fe fc5c 	bl	84d0 <__aeabi_dmul>
    9c18:	4680      	mov	r8, r0
    9c1a:	4689      	mov	r9, r1
    9c1c:	b964      	cbnz	r4, 9c38 <__ieee754_log+0x270>
    9c1e:	4602      	mov	r2, r0
    9c20:	460b      	mov	r3, r1
    9c22:	4630      	mov	r0, r6
    9c24:	4639      	mov	r1, r7
    9c26:	f7fe fa9b 	bl	8160 <__aeabi_dsub>
    9c2a:	4602      	mov	r2, r0
    9c2c:	460b      	mov	r3, r1
    9c2e:	4650      	mov	r0, sl
    9c30:	4659      	mov	r1, fp
    9c32:	f7fe fa95 	bl	8160 <__aeabi_dsub>
    9c36:	e6da      	b.n	99ee <__ieee754_log+0x26>
    9c38:	a321      	add	r3, pc, #132	; (adr r3, 9cc0 <__ieee754_log+0x2f8>)
    9c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c42:	f7fe fc45 	bl	84d0 <__aeabi_dmul>
    9c46:	4604      	mov	r4, r0
    9c48:	460d      	mov	r5, r1
    9c4a:	a31f      	add	r3, pc, #124	; (adr r3, 9cc8 <__ieee754_log+0x300>)
    9c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c54:	f7fe fc3c 	bl	84d0 <__aeabi_dmul>
    9c58:	4642      	mov	r2, r8
    9c5a:	464b      	mov	r3, r9
    9c5c:	f7fe fa82 	bl	8164 <__adddf3>
    9c60:	4602      	mov	r2, r0
    9c62:	460b      	mov	r3, r1
    9c64:	4630      	mov	r0, r6
    9c66:	4639      	mov	r1, r7
    9c68:	f7fe fa7a 	bl	8160 <__aeabi_dsub>
    9c6c:	4652      	mov	r2, sl
    9c6e:	465b      	mov	r3, fp
    9c70:	f7fe fa76 	bl	8160 <__aeabi_dsub>
    9c74:	4602      	mov	r2, r0
    9c76:	460b      	mov	r3, r1
    9c78:	4620      	mov	r0, r4
    9c7a:	4629      	mov	r1, r5
    9c7c:	e7d9      	b.n	9c32 <__ieee754_log+0x26a>
    9c7e:	4602      	mov	r2, r0
    9c80:	460b      	mov	r3, r1
    9c82:	4650      	mov	r0, sl
    9c84:	4659      	mov	r1, fp
    9c86:	f7fe fa6b 	bl	8160 <__aeabi_dsub>
    9c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c8e:	f7fe fc1f 	bl	84d0 <__aeabi_dmul>
    9c92:	4606      	mov	r6, r0
    9c94:	460f      	mov	r7, r1
    9c96:	2c00      	cmp	r4, #0
    9c98:	f43f af25 	beq.w	9ae6 <__ieee754_log+0x11e>
    9c9c:	a308      	add	r3, pc, #32	; (adr r3, 9cc0 <__ieee754_log+0x2f8>)
    9c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9ca6:	f7fe fc13 	bl	84d0 <__aeabi_dmul>
    9caa:	4604      	mov	r4, r0
    9cac:	460d      	mov	r5, r1
    9cae:	a306      	add	r3, pc, #24	; (adr r3, 9cc8 <__ieee754_log+0x300>)
    9cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9cb8:	e729      	b.n	9b0e <__ieee754_log+0x146>
    9cba:	2000      	movs	r0, #0
    9cbc:	2100      	movs	r1, #0
    9cbe:	e696      	b.n	99ee <__ieee754_log+0x26>
    9cc0:	fee00000 	.word	0xfee00000
    9cc4:	3fe62e42 	.word	0x3fe62e42
    9cc8:	35793c76 	.word	0x35793c76
    9ccc:	3dea39ef 	.word	0x3dea39ef
    9cd0:	55555555 	.word	0x55555555
    9cd4:	3fd55555 	.word	0x3fd55555
    9cd8:	df3e5244 	.word	0xdf3e5244
    9cdc:	3fc2f112 	.word	0x3fc2f112
    9ce0:	96cb03de 	.word	0x96cb03de
    9ce4:	3fc74664 	.word	0x3fc74664
    9ce8:	94229359 	.word	0x94229359
    9cec:	3fd24924 	.word	0x3fd24924
    9cf0:	55555593 	.word	0x55555593
    9cf4:	3fe55555 	.word	0x3fe55555
    9cf8:	d078c69f 	.word	0xd078c69f
    9cfc:	3fc39a09 	.word	0x3fc39a09
    9d00:	1d8e78af 	.word	0x1d8e78af
    9d04:	3fcc71c5 	.word	0x3fcc71c5
    9d08:	9997fa04 	.word	0x9997fa04
    9d0c:	3fd99999 	.word	0x3fd99999
    9d10:	c3500000 	.word	0xc3500000
    9d14:	43500000 	.word	0x43500000
    9d18:	7fefffff 	.word	0x7fefffff
    9d1c:	3ff00000 	.word	0x3ff00000
    9d20:	3fe00000 	.word	0x3fe00000
    9d24:	00000000 	.word	0x00000000

00009d28 <_strtod_l>:
    9d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d2c:	461f      	mov	r7, r3
    9d2e:	b09d      	sub	sp, #116	; 0x74
    9d30:	2300      	movs	r3, #0
    9d32:	460c      	mov	r4, r1
    9d34:	4682      	mov	sl, r0
    9d36:	920e      	str	r2, [sp, #56]	; 0x38
    9d38:	9318      	str	r3, [sp, #96]	; 0x60
    9d3a:	f04f 0800 	mov.w	r8, #0
    9d3e:	4b97      	ldr	r3, [pc, #604]	; (9f9c <_strtod_l+0x274>)
    9d40:	f04f 0900 	mov.w	r9, #0
    9d44:	681d      	ldr	r5, [r3, #0]
    9d46:	4628      	mov	r0, r5
    9d48:	f7ff fb5f 	bl	940a <strlen>
    9d4c:	4622      	mov	r2, r4
    9d4e:	4683      	mov	fp, r0
    9d50:	9217      	str	r2, [sp, #92]	; 0x5c
    9d52:	7813      	ldrb	r3, [r2, #0]
    9d54:	2b2b      	cmp	r3, #43	; 0x2b
    9d56:	d03b      	beq.n	9dd0 <_strtod_l+0xa8>
    9d58:	d82c      	bhi.n	9db4 <_strtod_l+0x8c>
    9d5a:	2b0d      	cmp	r3, #13
    9d5c:	d826      	bhi.n	9dac <_strtod_l+0x84>
    9d5e:	2b08      	cmp	r3, #8
    9d60:	d826      	bhi.n	9db0 <_strtod_l+0x88>
    9d62:	2b00      	cmp	r3, #0
    9d64:	d02f      	beq.n	9dc6 <_strtod_l+0x9e>
    9d66:	2300      	movs	r3, #0
    9d68:	930c      	str	r3, [sp, #48]	; 0x30
    9d6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    9d6c:	7833      	ldrb	r3, [r6, #0]
    9d6e:	2b30      	cmp	r3, #48	; 0x30
    9d70:	d172      	bne.n	9e58 <_strtod_l+0x130>
    9d72:	7873      	ldrb	r3, [r6, #1]
    9d74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9d78:	2b58      	cmp	r3, #88	; 0x58
    9d7a:	d163      	bne.n	9e44 <_strtod_l+0x11c>
    9d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d7e:	a917      	add	r1, sp, #92	; 0x5c
    9d80:	4a87      	ldr	r2, [pc, #540]	; (9fa0 <_strtod_l+0x278>)
    9d82:	4650      	mov	r0, sl
    9d84:	9301      	str	r3, [sp, #4]
    9d86:	ab18      	add	r3, sp, #96	; 0x60
    9d88:	9702      	str	r7, [sp, #8]
    9d8a:	9300      	str	r3, [sp, #0]
    9d8c:	ab19      	add	r3, sp, #100	; 0x64
    9d8e:	f01a fd89 	bl	248a4 <__gethex>
    9d92:	f010 0507 	ands.w	r5, r0, #7
    9d96:	4604      	mov	r4, r0
    9d98:	d035      	beq.n	9e06 <_strtod_l+0xde>
    9d9a:	2d06      	cmp	r5, #6
    9d9c:	d11a      	bne.n	9dd4 <_strtod_l+0xac>
    9d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9da0:	b10b      	cbz	r3, 9da6 <_strtod_l+0x7e>
    9da2:	3601      	adds	r6, #1
    9da4:	601e      	str	r6, [r3, #0]
    9da6:	4640      	mov	r0, r8
    9da8:	4649      	mov	r1, r9
    9daa:	e037      	b.n	9e1c <_strtod_l+0xf4>
    9dac:	2b20      	cmp	r3, #32
    9dae:	d1da      	bne.n	9d66 <_strtod_l+0x3e>
    9db0:	3201      	adds	r2, #1
    9db2:	e7cd      	b.n	9d50 <_strtod_l+0x28>
    9db4:	2b2d      	cmp	r3, #45	; 0x2d
    9db6:	d1d6      	bne.n	9d66 <_strtod_l+0x3e>
    9db8:	2301      	movs	r3, #1
    9dba:	930c      	str	r3, [sp, #48]	; 0x30
    9dbc:	1c53      	adds	r3, r2, #1
    9dbe:	9317      	str	r3, [sp, #92]	; 0x5c
    9dc0:	7853      	ldrb	r3, [r2, #1]
    9dc2:	2b00      	cmp	r3, #0
    9dc4:	d1d1      	bne.n	9d6a <_strtod_l+0x42>
    9dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9dc8:	2b00      	cmp	r3, #0
    9dca:	d0ec      	beq.n	9da6 <_strtod_l+0x7e>
    9dcc:	601c      	str	r4, [r3, #0]
    9dce:	e7ea      	b.n	9da6 <_strtod_l+0x7e>
    9dd0:	2300      	movs	r3, #0
    9dd2:	e7f2      	b.n	9dba <_strtod_l+0x92>
    9dd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9dd6:	b13a      	cbz	r2, 9de8 <_strtod_l+0xc0>
    9dd8:	2135      	movs	r1, #53	; 0x35
    9dda:	a81a      	add	r0, sp, #104	; 0x68
    9ddc:	f021 fc52 	bl	2b684 <__copybits>
    9de0:	9918      	ldr	r1, [sp, #96]	; 0x60
    9de2:	4650      	mov	r0, sl
    9de4:	f01a ffde 	bl	24da4 <_Bfree>
    9de8:	3d01      	subs	r5, #1
    9dea:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9dec:	2d04      	cmp	r5, #4
    9dee:	d806      	bhi.n	9dfe <_strtod_l+0xd6>
    9df0:	e8df f005 	tbb	[pc, r5]
    9df4:	23200317 	.word	0x23200317
    9df8:	17          	.byte	0x17
    9df9:	00          	.byte	0x00
    9dfa:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    9dfe:	0721      	lsls	r1, r4, #28
    9e00:	d501      	bpl.n	9e06 <_strtod_l+0xde>
    9e02:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    9e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e08:	b113      	cbz	r3, 9e10 <_strtod_l+0xe8>
    9e0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9e0e:	6013      	str	r3, [r2, #0]
    9e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e12:	2b00      	cmp	r3, #0
    9e14:	d0c7      	beq.n	9da6 <_strtod_l+0x7e>
    9e16:	4640      	mov	r0, r8
    9e18:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
    9e1c:	b01d      	add	sp, #116	; 0x74
    9e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e22:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    9e26:	f202 4233 	addw	r2, r2, #1075	; 0x433
    9e2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    9e2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    9e32:	e7e4      	b.n	9dfe <_strtod_l+0xd6>
    9e34:	f8df 916c 	ldr.w	r9, [pc, #364]	; 9fa4 <_strtod_l+0x27c>
    9e38:	e7e1      	b.n	9dfe <_strtod_l+0xd6>
    9e3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    9e3e:	f04f 38ff 	mov.w	r8, #4294967295
    9e42:	e7dc      	b.n	9dfe <_strtod_l+0xd6>
    9e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e46:	1c5a      	adds	r2, r3, #1
    9e48:	9217      	str	r2, [sp, #92]	; 0x5c
    9e4a:	785b      	ldrb	r3, [r3, #1]
    9e4c:	2b30      	cmp	r3, #48	; 0x30
    9e4e:	d0f9      	beq.n	9e44 <_strtod_l+0x11c>
    9e50:	2b00      	cmp	r3, #0
    9e52:	d0d8      	beq.n	9e06 <_strtod_l+0xde>
    9e54:	2301      	movs	r3, #1
    9e56:	e000      	b.n	9e5a <_strtod_l+0x132>
    9e58:	2300      	movs	r3, #0
    9e5a:	2700      	movs	r7, #0
    9e5c:	9304      	str	r3, [sp, #16]
    9e5e:	220a      	movs	r2, #10
    9e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e62:	e9cd 7705 	strd	r7, r7, [sp, #20]
    9e66:	930a      	str	r3, [sp, #40]	; 0x28
    9e68:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9e6a:	7806      	ldrb	r6, [r0, #0]
    9e6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    9e70:	b2d9      	uxtb	r1, r3
    9e72:	2909      	cmp	r1, #9
    9e74:	d924      	bls.n	9ec0 <_strtod_l+0x198>
    9e76:	465a      	mov	r2, fp
    9e78:	4629      	mov	r1, r5
    9e7a:	f021 f8d0 	bl	2b01e <strncmp>
    9e7e:	2800      	cmp	r0, #0
    9e80:	d02d      	beq.n	9ede <_strtod_l+0x1b6>
    9e82:	2000      	movs	r0, #0
    9e84:	4632      	mov	r2, r6
    9e86:	9d05      	ldr	r5, [sp, #20]
    9e88:	4683      	mov	fp, r0
    9e8a:	4603      	mov	r3, r0
    9e8c:	2a65      	cmp	r2, #101	; 0x65
    9e8e:	d001      	beq.n	9e94 <_strtod_l+0x16c>
    9e90:	2a45      	cmp	r2, #69	; 0x45
    9e92:	d113      	bne.n	9ebc <_strtod_l+0x194>
    9e94:	b91d      	cbnz	r5, 9e9e <_strtod_l+0x176>
    9e96:	9a04      	ldr	r2, [sp, #16]
    9e98:	4302      	orrs	r2, r0
    9e9a:	d094      	beq.n	9dc6 <_strtod_l+0x9e>
    9e9c:	2500      	movs	r5, #0
    9e9e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    9ea0:	1c62      	adds	r2, r4, #1
    9ea2:	9217      	str	r2, [sp, #92]	; 0x5c
    9ea4:	7862      	ldrb	r2, [r4, #1]
    9ea6:	2a2b      	cmp	r2, #43	; 0x2b
    9ea8:	d06e      	beq.n	9f88 <_strtod_l+0x260>
    9eaa:	2a2d      	cmp	r2, #45	; 0x2d
    9eac:	d072      	beq.n	9f94 <_strtod_l+0x26c>
    9eae:	f04f 0c00 	mov.w	ip, #0
    9eb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    9eb6:	2909      	cmp	r1, #9
    9eb8:	d97a      	bls.n	9fb0 <_strtod_l+0x288>
    9eba:	9417      	str	r4, [sp, #92]	; 0x5c
    9ebc:	2600      	movs	r6, #0
    9ebe:	e099      	b.n	9ff4 <_strtod_l+0x2cc>
    9ec0:	9905      	ldr	r1, [sp, #20]
    9ec2:	3001      	adds	r0, #1
    9ec4:	2908      	cmp	r1, #8
    9ec6:	9017      	str	r0, [sp, #92]	; 0x5c
    9ec8:	bfd7      	itett	le
    9eca:	9906      	ldrle	r1, [sp, #24]
    9ecc:	fb02 3707 	mlagt	r7, r2, r7, r3
    9ed0:	fb02 3301 	mlale	r3, r2, r1, r3
    9ed4:	9306      	strle	r3, [sp, #24]
    9ed6:	9b05      	ldr	r3, [sp, #20]
    9ed8:	3301      	adds	r3, #1
    9eda:	9305      	str	r3, [sp, #20]
    9edc:	e7c4      	b.n	9e68 <_strtod_l+0x140>
    9ede:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9ee0:	eb03 020b 	add.w	r2, r3, fp
    9ee4:	9217      	str	r2, [sp, #92]	; 0x5c
    9ee6:	f813 200b 	ldrb.w	r2, [r3, fp]
    9eea:	9b05      	ldr	r3, [sp, #20]
    9eec:	b3a3      	cbz	r3, 9f58 <_strtod_l+0x230>
    9eee:	4683      	mov	fp, r0
    9ef0:	461d      	mov	r5, r3
    9ef2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    9ef6:	2b09      	cmp	r3, #9
    9ef8:	d912      	bls.n	9f20 <_strtod_l+0x1f8>
    9efa:	2301      	movs	r3, #1
    9efc:	e7c6      	b.n	9e8c <_strtod_l+0x164>
    9efe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f00:	3001      	adds	r0, #1
    9f02:	1c5a      	adds	r2, r3, #1
    9f04:	9217      	str	r2, [sp, #92]	; 0x5c
    9f06:	785a      	ldrb	r2, [r3, #1]
    9f08:	2a30      	cmp	r2, #48	; 0x30
    9f0a:	d0f8      	beq.n	9efe <_strtod_l+0x1d6>
    9f0c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    9f10:	2b08      	cmp	r3, #8
    9f12:	f200 84ea 	bhi.w	a8ea <_strtod_l+0xbc2>
    9f16:	4683      	mov	fp, r0
    9f18:	2000      	movs	r0, #0
    9f1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f1c:	4605      	mov	r5, r0
    9f1e:	930a      	str	r3, [sp, #40]	; 0x28
    9f20:	3a30      	subs	r2, #48	; 0x30
    9f22:	f100 0301 	add.w	r3, r0, #1
    9f26:	d011      	beq.n	9f4c <_strtod_l+0x224>
    9f28:	449b      	add	fp, r3
    9f2a:	eb00 0c05 	add.w	ip, r0, r5
    9f2e:	462b      	mov	r3, r5
    9f30:	210a      	movs	r1, #10
    9f32:	4563      	cmp	r3, ip
    9f34:	d112      	bne.n	9f5c <_strtod_l+0x234>
    9f36:	182b      	adds	r3, r5, r0
    9f38:	3501      	adds	r5, #1
    9f3a:	2b08      	cmp	r3, #8
    9f3c:	4405      	add	r5, r0
    9f3e:	dc19      	bgt.n	9f74 <_strtod_l+0x24c>
    9f40:	9906      	ldr	r1, [sp, #24]
    9f42:	230a      	movs	r3, #10
    9f44:	fb03 2301 	mla	r3, r3, r1, r2
    9f48:	9306      	str	r3, [sp, #24]
    9f4a:	2300      	movs	r3, #0
    9f4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9f4e:	4618      	mov	r0, r3
    9f50:	1c51      	adds	r1, r2, #1
    9f52:	9117      	str	r1, [sp, #92]	; 0x5c
    9f54:	7852      	ldrb	r2, [r2, #1]
    9f56:	e7cc      	b.n	9ef2 <_strtod_l+0x1ca>
    9f58:	9805      	ldr	r0, [sp, #20]
    9f5a:	e7d5      	b.n	9f08 <_strtod_l+0x1e0>
    9f5c:	2b08      	cmp	r3, #8
    9f5e:	f103 0301 	add.w	r3, r3, #1
    9f62:	dc03      	bgt.n	9f6c <_strtod_l+0x244>
    9f64:	9e06      	ldr	r6, [sp, #24]
    9f66:	434e      	muls	r6, r1
    9f68:	9606      	str	r6, [sp, #24]
    9f6a:	e7e2      	b.n	9f32 <_strtod_l+0x20a>
    9f6c:	2b10      	cmp	r3, #16
    9f6e:	bfd8      	it	le
    9f70:	434f      	mulle	r7, r1
    9f72:	e7de      	b.n	9f32 <_strtod_l+0x20a>
    9f74:	2b0f      	cmp	r3, #15
    9f76:	bfdc      	itt	le
    9f78:	230a      	movle	r3, #10
    9f7a:	fb03 2707 	mlale	r7, r3, r7, r2
    9f7e:	e7e4      	b.n	9f4a <_strtod_l+0x222>
    9f80:	f04f 0b00 	mov.w	fp, #0
    9f84:	2301      	movs	r3, #1
    9f86:	e786      	b.n	9e96 <_strtod_l+0x16e>
    9f88:	f04f 0c00 	mov.w	ip, #0
    9f8c:	1ca2      	adds	r2, r4, #2
    9f8e:	9217      	str	r2, [sp, #92]	; 0x5c
    9f90:	78a2      	ldrb	r2, [r4, #2]
    9f92:	e78e      	b.n	9eb2 <_strtod_l+0x18a>
    9f94:	f04f 0c01 	mov.w	ip, #1
    9f98:	e7f8      	b.n	9f8c <_strtod_l+0x264>
    9f9a:	bf00      	nop
    9f9c:	0002cff8 	.word	0x0002cff8
    9fa0:	0002cf84 	.word	0x0002cf84
    9fa4:	7ff00000 	.word	0x7ff00000
    9fa8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9faa:	1c51      	adds	r1, r2, #1
    9fac:	9117      	str	r1, [sp, #92]	; 0x5c
    9fae:	7852      	ldrb	r2, [r2, #1]
    9fb0:	2a30      	cmp	r2, #48	; 0x30
    9fb2:	d0f9      	beq.n	9fa8 <_strtod_l+0x280>
    9fb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    9fb8:	2908      	cmp	r1, #8
    9fba:	f63f af7f 	bhi.w	9ebc <_strtod_l+0x194>
    9fbe:	3a30      	subs	r2, #48	; 0x30
    9fc0:	9207      	str	r2, [sp, #28]
    9fc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9fc4:	920d      	str	r2, [sp, #52]	; 0x34
    9fc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9fc8:	1c56      	adds	r6, r2, #1
    9fca:	9617      	str	r6, [sp, #92]	; 0x5c
    9fcc:	7852      	ldrb	r2, [r2, #1]
    9fce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    9fd2:	f1be 0f09 	cmp.w	lr, #9
    9fd6:	d938      	bls.n	a04a <_strtod_l+0x322>
    9fd8:	990d      	ldr	r1, [sp, #52]	; 0x34
    9fda:	1a76      	subs	r6, r6, r1
    9fdc:	2e08      	cmp	r6, #8
    9fde:	f644 661f 	movw	r6, #19999	; 0x4e1f
    9fe2:	dc03      	bgt.n	9fec <_strtod_l+0x2c4>
    9fe4:	9907      	ldr	r1, [sp, #28]
    9fe6:	428e      	cmp	r6, r1
    9fe8:	bfa8      	it	ge
    9fea:	460e      	movge	r6, r1
    9fec:	f1bc 0f00 	cmp.w	ip, #0
    9ff0:	d000      	beq.n	9ff4 <_strtod_l+0x2cc>
    9ff2:	4276      	negs	r6, r6
    9ff4:	2d00      	cmp	r5, #0
    9ff6:	d14f      	bne.n	a098 <_strtod_l+0x370>
    9ff8:	9904      	ldr	r1, [sp, #16]
    9ffa:	4308      	orrs	r0, r1
    9ffc:	f47f af03 	bne.w	9e06 <_strtod_l+0xde>
    a000:	2b00      	cmp	r3, #0
    a002:	f47f aee0 	bne.w	9dc6 <_strtod_l+0x9e>
    a006:	2a69      	cmp	r2, #105	; 0x69
    a008:	d029      	beq.n	a05e <_strtod_l+0x336>
    a00a:	dc26      	bgt.n	a05a <_strtod_l+0x332>
    a00c:	2a49      	cmp	r2, #73	; 0x49
    a00e:	d026      	beq.n	a05e <_strtod_l+0x336>
    a010:	2a4e      	cmp	r2, #78	; 0x4e
    a012:	f47f aed8 	bne.w	9dc6 <_strtod_l+0x9e>
    a016:	499d      	ldr	r1, [pc, #628]	; (a28c <_strtod_l+0x564>)
    a018:	a817      	add	r0, sp, #92	; 0x5c
    a01a:	f021 f9ca 	bl	2b3b2 <__match>
    a01e:	2800      	cmp	r0, #0
    a020:	f43f aed1 	beq.w	9dc6 <_strtod_l+0x9e>
    a024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a026:	781b      	ldrb	r3, [r3, #0]
    a028:	2b28      	cmp	r3, #40	; 0x28
    a02a:	d12f      	bne.n	a08c <_strtod_l+0x364>
    a02c:	aa1a      	add	r2, sp, #104	; 0x68
    a02e:	4998      	ldr	r1, [pc, #608]	; (a290 <_strtod_l+0x568>)
    a030:	a817      	add	r0, sp, #92	; 0x5c
    a032:	f021 f9d2 	bl	2b3da <__hexnan>
    a036:	2805      	cmp	r0, #5
    a038:	d128      	bne.n	a08c <_strtod_l+0x364>
    a03a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a03c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    a040:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    a044:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    a048:	e6dd      	b.n	9e06 <_strtod_l+0xde>
    a04a:	9e07      	ldr	r6, [sp, #28]
    a04c:	210a      	movs	r1, #10
    a04e:	fb01 2106 	mla	r1, r1, r6, r2
    a052:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a056:	9207      	str	r2, [sp, #28]
    a058:	e7b5      	b.n	9fc6 <_strtod_l+0x29e>
    a05a:	2a6e      	cmp	r2, #110	; 0x6e
    a05c:	e7d9      	b.n	a012 <_strtod_l+0x2ea>
    a05e:	498d      	ldr	r1, [pc, #564]	; (a294 <_strtod_l+0x56c>)
    a060:	a817      	add	r0, sp, #92	; 0x5c
    a062:	f021 f9a6 	bl	2b3b2 <__match>
    a066:	2800      	cmp	r0, #0
    a068:	f43f aead 	beq.w	9dc6 <_strtod_l+0x9e>
    a06c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a06e:	a817      	add	r0, sp, #92	; 0x5c
    a070:	4989      	ldr	r1, [pc, #548]	; (a298 <_strtod_l+0x570>)
    a072:	3b01      	subs	r3, #1
    a074:	9317      	str	r3, [sp, #92]	; 0x5c
    a076:	f021 f99c 	bl	2b3b2 <__match>
    a07a:	b910      	cbnz	r0, a082 <_strtod_l+0x35a>
    a07c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a07e:	3301      	adds	r3, #1
    a080:	9317      	str	r3, [sp, #92]	; 0x5c
    a082:	f8df 9218 	ldr.w	r9, [pc, #536]	; a29c <_strtod_l+0x574>
    a086:	f04f 0800 	mov.w	r8, #0
    a08a:	e6bc      	b.n	9e06 <_strtod_l+0xde>
    a08c:	4884      	ldr	r0, [pc, #528]	; (a2a0 <_strtod_l+0x578>)
    a08e:	f019 fe9b 	bl	23dc8 <nan>
    a092:	4680      	mov	r8, r0
    a094:	4689      	mov	r9, r1
    a096:	e6b6      	b.n	9e06 <_strtod_l+0xde>
    a098:	eba6 030b 	sub.w	r3, r6, fp
    a09c:	9806      	ldr	r0, [sp, #24]
    a09e:	462c      	mov	r4, r5
    a0a0:	930f      	str	r3, [sp, #60]	; 0x3c
    a0a2:	9b05      	ldr	r3, [sp, #20]
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	bf08      	it	eq
    a0a8:	462b      	moveq	r3, r5
    a0aa:	2d10      	cmp	r5, #16
    a0ac:	9305      	str	r3, [sp, #20]
    a0ae:	bfa8      	it	ge
    a0b0:	2410      	movge	r4, #16
    a0b2:	f7fe f993 	bl	83dc <__aeabi_ui2d>
    a0b6:	2d09      	cmp	r5, #9
    a0b8:	4680      	mov	r8, r0
    a0ba:	4689      	mov	r9, r1
    a0bc:	dc14      	bgt.n	a0e8 <_strtod_l+0x3c0>
    a0be:	eba6 030b 	sub.w	r3, r6, fp
    a0c2:	2b00      	cmp	r3, #0
    a0c4:	f43f ae9f 	beq.w	9e06 <_strtod_l+0xde>
    a0c8:	eba6 030b 	sub.w	r3, r6, fp
    a0cc:	dd79      	ble.n	a1c2 <_strtod_l+0x49a>
    a0ce:	2b16      	cmp	r3, #22
    a0d0:	dc45      	bgt.n	a15e <_strtod_l+0x436>
    a0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0d4:	4642      	mov	r2, r8
    a0d6:	4973      	ldr	r1, [pc, #460]	; (a2a4 <_strtod_l+0x57c>)
    a0d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a0dc:	464b      	mov	r3, r9
    a0de:	e9d1 0100 	ldrd	r0, r1, [r1]
    a0e2:	f7fe f9f5 	bl	84d0 <__aeabi_dmul>
    a0e6:	e7d4      	b.n	a092 <_strtod_l+0x36a>
    a0e8:	4b6e      	ldr	r3, [pc, #440]	; (a2a4 <_strtod_l+0x57c>)
    a0ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a0ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    a0f2:	f7fe f9ed 	bl	84d0 <__aeabi_dmul>
    a0f6:	4680      	mov	r8, r0
    a0f8:	4689      	mov	r9, r1
    a0fa:	4638      	mov	r0, r7
    a0fc:	f7fe f96e 	bl	83dc <__aeabi_ui2d>
    a100:	4602      	mov	r2, r0
    a102:	460b      	mov	r3, r1
    a104:	4640      	mov	r0, r8
    a106:	4649      	mov	r1, r9
    a108:	f7fe f82c 	bl	8164 <__adddf3>
    a10c:	2d0f      	cmp	r5, #15
    a10e:	4680      	mov	r8, r0
    a110:	4689      	mov	r9, r1
    a112:	ddd4      	ble.n	a0be <_strtod_l+0x396>
    a114:	1b2c      	subs	r4, r5, r4
    a116:	eba6 030b 	sub.w	r3, r6, fp
    a11a:	441c      	add	r4, r3
    a11c:	2c00      	cmp	r4, #0
    a11e:	dc26      	bgt.n	a16e <_strtod_l+0x446>
    a120:	f000 80a3 	beq.w	a26a <_strtod_l+0x542>
    a124:	4264      	negs	r4, r4
    a126:	f014 020f 	ands.w	r2, r4, #15
    a12a:	d00a      	beq.n	a142 <_strtod_l+0x41a>
    a12c:	4b5d      	ldr	r3, [pc, #372]	; (a2a4 <_strtod_l+0x57c>)
    a12e:	4640      	mov	r0, r8
    a130:	4649      	mov	r1, r9
    a132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a136:	e9d3 2300 	ldrd	r2, r3, [r3]
    a13a:	f7fe faf3 	bl	8724 <__aeabi_ddiv>
    a13e:	4680      	mov	r8, r0
    a140:	4689      	mov	r9, r1
    a142:	1124      	asrs	r4, r4, #4
    a144:	f000 8091 	beq.w	a26a <_strtod_l+0x542>
    a148:	2c1f      	cmp	r4, #31
    a14a:	f340 80b3 	ble.w	a2b4 <_strtod_l+0x58c>
    a14e:	2322      	movs	r3, #34	; 0x22
    a150:	f04f 0800 	mov.w	r8, #0
    a154:	f04f 0900 	mov.w	r9, #0
    a158:	f8ca 3000 	str.w	r3, [sl]
    a15c:	e653      	b.n	9e06 <_strtod_l+0xde>
    a15e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    a162:	eba6 020b 	sub.w	r2, r6, fp
    a166:	4293      	cmp	r3, r2
    a168:	da19      	bge.n	a19e <_strtod_l+0x476>
    a16a:	1b2c      	subs	r4, r5, r4
    a16c:	4414      	add	r4, r2
    a16e:	f014 030f 	ands.w	r3, r4, #15
    a172:	d00a      	beq.n	a18a <_strtod_l+0x462>
    a174:	494b      	ldr	r1, [pc, #300]	; (a2a4 <_strtod_l+0x57c>)
    a176:	4642      	mov	r2, r8
    a178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a17c:	464b      	mov	r3, r9
    a17e:	e9d1 0100 	ldrd	r0, r1, [r1]
    a182:	f7fe f9a5 	bl	84d0 <__aeabi_dmul>
    a186:	4680      	mov	r8, r0
    a188:	4689      	mov	r9, r1
    a18a:	f034 040f 	bics.w	r4, r4, #15
    a18e:	d06c      	beq.n	a26a <_strtod_l+0x542>
    a190:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    a194:	dd41      	ble.n	a21a <_strtod_l+0x4f2>
    a196:	2322      	movs	r3, #34	; 0x22
    a198:	f8ca 3000 	str.w	r3, [sl]
    a19c:	e771      	b.n	a082 <_strtod_l+0x35a>
    a19e:	f1c5 050f 	rsb	r5, r5, #15
    a1a2:	4c40      	ldr	r4, [pc, #256]	; (a2a4 <_strtod_l+0x57c>)
    a1a4:	4642      	mov	r2, r8
    a1a6:	464b      	mov	r3, r9
    a1a8:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    a1ac:	e9d1 0100 	ldrd	r0, r1, [r1]
    a1b0:	f7fe f98e 	bl	84d0 <__aeabi_dmul>
    a1b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1b6:	1b5d      	subs	r5, r3, r5
    a1b8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    a1bc:	e9d4 2300 	ldrd	r2, r3, [r4]
    a1c0:	e78f      	b.n	a0e2 <_strtod_l+0x3ba>
    a1c2:	3316      	adds	r3, #22
    a1c4:	dba6      	blt.n	a114 <_strtod_l+0x3ec>
    a1c6:	ebab 0206 	sub.w	r2, fp, r6
    a1ca:	4b36      	ldr	r3, [pc, #216]	; (a2a4 <_strtod_l+0x57c>)
    a1cc:	4640      	mov	r0, r8
    a1ce:	4649      	mov	r1, r9
    a1d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a1d8:	f7fe faa4 	bl	8724 <__aeabi_ddiv>
    a1dc:	e759      	b.n	a092 <_strtod_l+0x36a>
    a1de:	2300      	movs	r3, #0
    a1e0:	9306      	str	r3, [sp, #24]
    a1e2:	2322      	movs	r3, #34	; 0x22
    a1e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a29c <_strtod_l+0x574>
    a1e8:	f04f 0800 	mov.w	r8, #0
    a1ec:	f8ca 3000 	str.w	r3, [sl]
    a1f0:	9918      	ldr	r1, [sp, #96]	; 0x60
    a1f2:	4650      	mov	r0, sl
    a1f4:	f01a fdd6 	bl	24da4 <_Bfree>
    a1f8:	9906      	ldr	r1, [sp, #24]
    a1fa:	4650      	mov	r0, sl
    a1fc:	f01a fdd2 	bl	24da4 <_Bfree>
    a200:	9905      	ldr	r1, [sp, #20]
    a202:	4650      	mov	r0, sl
    a204:	f01a fdce 	bl	24da4 <_Bfree>
    a208:	9910      	ldr	r1, [sp, #64]	; 0x40
    a20a:	4650      	mov	r0, sl
    a20c:	f01a fdca 	bl	24da4 <_Bfree>
    a210:	9907      	ldr	r1, [sp, #28]
    a212:	4650      	mov	r0, sl
    a214:	f01a fdc6 	bl	24da4 <_Bfree>
    a218:	e5f5      	b.n	9e06 <_strtod_l+0xde>
    a21a:	2300      	movs	r3, #0
    a21c:	1124      	asrs	r4, r4, #4
    a21e:	4640      	mov	r0, r8
    a220:	4649      	mov	r1, r9
    a222:	4f21      	ldr	r7, [pc, #132]	; (a2a8 <_strtod_l+0x580>)
    a224:	9304      	str	r3, [sp, #16]
    a226:	2c01      	cmp	r4, #1
    a228:	dc22      	bgt.n	a270 <_strtod_l+0x548>
    a22a:	b10b      	cbz	r3, a230 <_strtod_l+0x508>
    a22c:	4680      	mov	r8, r0
    a22e:	4689      	mov	r9, r1
    a230:	9b04      	ldr	r3, [sp, #16]
    a232:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    a236:	491c      	ldr	r1, [pc, #112]	; (a2a8 <_strtod_l+0x580>)
    a238:	4642      	mov	r2, r8
    a23a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a23e:	464b      	mov	r3, r9
    a240:	e9d1 0100 	ldrd	r0, r1, [r1]
    a244:	f7fe f944 	bl	84d0 <__aeabi_dmul>
    a248:	4b14      	ldr	r3, [pc, #80]	; (a29c <_strtod_l+0x574>)
    a24a:	460a      	mov	r2, r1
    a24c:	4680      	mov	r8, r0
    a24e:	400b      	ands	r3, r1
    a250:	4916      	ldr	r1, [pc, #88]	; (a2ac <_strtod_l+0x584>)
    a252:	428b      	cmp	r3, r1
    a254:	d89f      	bhi.n	a196 <_strtod_l+0x46e>
    a256:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    a25a:	428b      	cmp	r3, r1
    a25c:	bf86      	itte	hi
    a25e:	f8df 9050 	ldrhi.w	r9, [pc, #80]	; a2b0 <_strtod_l+0x588>
    a262:	f04f 38ff 	movhi.w	r8, #4294967295
    a266:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    a26a:	2300      	movs	r3, #0
    a26c:	9304      	str	r3, [sp, #16]
    a26e:	e04c      	b.n	a30a <_strtod_l+0x5e2>
    a270:	07e2      	lsls	r2, r4, #31
    a272:	d504      	bpl.n	a27e <_strtod_l+0x556>
    a274:	e9d7 2300 	ldrd	r2, r3, [r7]
    a278:	f7fe f92a 	bl	84d0 <__aeabi_dmul>
    a27c:	2301      	movs	r3, #1
    a27e:	9a04      	ldr	r2, [sp, #16]
    a280:	1064      	asrs	r4, r4, #1
    a282:	3708      	adds	r7, #8
    a284:	3201      	adds	r2, #1
    a286:	9204      	str	r2, [sp, #16]
    a288:	e7cd      	b.n	a226 <_strtod_l+0x4fe>
    a28a:	bf00      	nop
    a28c:	000300a3 	.word	0x000300a3
    a290:	0002cf70 	.word	0x0002cf70
    a294:	0002e37c 	.word	0x0002e37c
    a298:	00032bd8 	.word	0x00032bd8
    a29c:	7ff00000 	.word	0x7ff00000
    a2a0:	00030d21 	.word	0x00030d21
    a2a4:	0002c2b8 	.word	0x0002c2b8
    a2a8:	0002c290 	.word	0x0002c290
    a2ac:	7ca00000 	.word	0x7ca00000
    a2b0:	7fefffff 	.word	0x7fefffff
    a2b4:	f014 0310 	ands.w	r3, r4, #16
    a2b8:	4640      	mov	r0, r8
    a2ba:	4649      	mov	r1, r9
    a2bc:	4fab      	ldr	r7, [pc, #684]	; (a56c <_strtod_l+0x844>)
    a2be:	bf18      	it	ne
    a2c0:	236a      	movne	r3, #106	; 0x6a
    a2c2:	9304      	str	r3, [sp, #16]
    a2c4:	2300      	movs	r3, #0
    a2c6:	07e2      	lsls	r2, r4, #31
    a2c8:	d504      	bpl.n	a2d4 <_strtod_l+0x5ac>
    a2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
    a2ce:	f7fe f8ff 	bl	84d0 <__aeabi_dmul>
    a2d2:	2301      	movs	r3, #1
    a2d4:	1064      	asrs	r4, r4, #1
    a2d6:	f107 0708 	add.w	r7, r7, #8
    a2da:	d1f4      	bne.n	a2c6 <_strtod_l+0x59e>
    a2dc:	b10b      	cbz	r3, a2e2 <_strtod_l+0x5ba>
    a2de:	4680      	mov	r8, r0
    a2e0:	4689      	mov	r9, r1
    a2e2:	9b04      	ldr	r3, [sp, #16]
    a2e4:	b143      	cbz	r3, a2f8 <_strtod_l+0x5d0>
    a2e6:	f3c9 520a 	ubfx	r2, r9, #20, #11
    a2ea:	4649      	mov	r1, r9
    a2ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    a2f0:	2b00      	cmp	r3, #0
    a2f2:	dc50      	bgt.n	a396 <_strtod_l+0x66e>
    a2f4:	236a      	movs	r3, #106	; 0x6a
    a2f6:	9304      	str	r3, [sp, #16]
    a2f8:	2200      	movs	r2, #0
    a2fa:	2300      	movs	r3, #0
    a2fc:	4640      	mov	r0, r8
    a2fe:	4649      	mov	r1, r9
    a300:	f7fe fe84 	bl	900c <__aeabi_dcmpeq>
    a304:	2800      	cmp	r0, #0
    a306:	f47f af22 	bne.w	a14e <_strtod_l+0x426>
    a30a:	9b06      	ldr	r3, [sp, #24]
    a30c:	4650      	mov	r0, sl
    a30e:	9a05      	ldr	r2, [sp, #20]
    a310:	9300      	str	r3, [sp, #0]
    a312:	462b      	mov	r3, r5
    a314:	990a      	ldr	r1, [sp, #40]	; 0x28
    a316:	f01a fdaf 	bl	24e78 <__s2b>
    a31a:	9010      	str	r0, [sp, #64]	; 0x40
    a31c:	2800      	cmp	r0, #0
    a31e:	f43f af3a 	beq.w	a196 <_strtod_l+0x46e>
    a322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a324:	ebab 0b06 	sub.w	fp, fp, r6
    a328:	2b00      	cmp	r3, #0
    a32a:	bfb4      	ite	lt
    a32c:	465b      	movlt	r3, fp
    a32e:	2300      	movge	r3, #0
    a330:	9311      	str	r3, [sp, #68]	; 0x44
    a332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a334:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a338:	9314      	str	r3, [sp, #80]	; 0x50
    a33a:	2300      	movs	r3, #0
    a33c:	9307      	str	r3, [sp, #28]
    a33e:	9305      	str	r3, [sp, #20]
    a340:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a342:	4650      	mov	r0, sl
    a344:	6859      	ldr	r1, [r3, #4]
    a346:	f01a fced 	bl	24d24 <_Balloc>
    a34a:	9006      	str	r0, [sp, #24]
    a34c:	2800      	cmp	r0, #0
    a34e:	f43f af48 	beq.w	a1e2 <_strtod_l+0x4ba>
    a352:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a354:	300c      	adds	r0, #12
    a356:	691a      	ldr	r2, [r3, #16]
    a358:	f103 010c 	add.w	r1, r3, #12
    a35c:	3202      	adds	r2, #2
    a35e:	0092      	lsls	r2, r2, #2
    a360:	f020 fce6 	bl	2ad30 <memcpy>
    a364:	ab1a      	add	r3, sp, #104	; 0x68
    a366:	4642      	mov	r2, r8
    a368:	4650      	mov	r0, sl
    a36a:	9301      	str	r3, [sp, #4]
    a36c:	ab19      	add	r3, sp, #100	; 0x64
    a36e:	9300      	str	r3, [sp, #0]
    a370:	464b      	mov	r3, r9
    a372:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    a376:	f01b f84f 	bl	25418 <__d2b>
    a37a:	9018      	str	r0, [sp, #96]	; 0x60
    a37c:	2800      	cmp	r0, #0
    a37e:	f43f af30 	beq.w	a1e2 <_strtod_l+0x4ba>
    a382:	2101      	movs	r1, #1
    a384:	4650      	mov	r0, sl
    a386:	f01a fdc1 	bl	24f0c <__i2b>
    a38a:	4603      	mov	r3, r0
    a38c:	9005      	str	r0, [sp, #20]
    a38e:	b9d0      	cbnz	r0, a3c6 <_strtod_l+0x69e>
    a390:	2300      	movs	r3, #0
    a392:	9305      	str	r3, [sp, #20]
    a394:	e725      	b.n	a1e2 <_strtod_l+0x4ba>
    a396:	2b1f      	cmp	r3, #31
    a398:	dd0e      	ble.n	a3b8 <_strtod_l+0x690>
    a39a:	2b34      	cmp	r3, #52	; 0x34
    a39c:	f04f 0800 	mov.w	r8, #0
    a3a0:	bfdb      	ittet	le
    a3a2:	f04f 33ff 	movle.w	r3, #4294967295
    a3a6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    a3aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    a3ae:	4093      	lslle	r3, r2
    a3b0:	bfd8      	it	le
    a3b2:	ea03 0901 	andle.w	r9, r3, r1
    a3b6:	e79d      	b.n	a2f4 <_strtod_l+0x5cc>
    a3b8:	f04f 32ff 	mov.w	r2, #4294967295
    a3bc:	fa02 f303 	lsl.w	r3, r2, r3
    a3c0:	ea03 0808 	and.w	r8, r3, r8
    a3c4:	e796      	b.n	a2f4 <_strtod_l+0x5cc>
    a3c6:	9c19      	ldr	r4, [sp, #100]	; 0x64
    a3c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a3ca:	2c00      	cmp	r4, #0
    a3cc:	bfa9      	itett	ge
    a3ce:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    a3d0:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
    a3d2:	18e7      	addge	r7, r4, r3
    a3d4:	9e14      	ldrge	r6, [sp, #80]	; 0x50
    a3d6:	bfb8      	it	lt
    a3d8:	1b1e      	sublt	r6, r3, r4
    a3da:	9b04      	ldr	r3, [sp, #16]
    a3dc:	bfb8      	it	lt
    a3de:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    a3e0:	1ae4      	subs	r4, r4, r3
    a3e2:	4b63      	ldr	r3, [pc, #396]	; (a570 <_strtod_l+0x848>)
    a3e4:	4414      	add	r4, r2
    a3e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    a3ea:	3c01      	subs	r4, #1
    a3ec:	429c      	cmp	r4, r3
    a3ee:	f280 80b0 	bge.w	a552 <_strtod_l+0x82a>
    a3f2:	1b1b      	subs	r3, r3, r4
    a3f4:	2501      	movs	r5, #1
    a3f6:	2b1f      	cmp	r3, #31
    a3f8:	eba2 0203 	sub.w	r2, r2, r3
    a3fc:	bfcd      	iteet	gt
    a3fe:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    a402:	409d      	lslle	r5, r3
    a404:	2400      	movle	r4, #0
    a406:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    a40a:	bfc2      	ittt	gt
    a40c:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    a410:	34e2      	addgt	r4, #226	; 0xe2
    a412:	fa05 f404 	lslgt.w	r4, r5, r4
    a416:	eb07 0b02 	add.w	fp, r7, r2
    a41a:	9b04      	ldr	r3, [sp, #16]
    a41c:	4416      	add	r6, r2
    a41e:	455f      	cmp	r7, fp
    a420:	441e      	add	r6, r3
    a422:	463b      	mov	r3, r7
    a424:	bfa8      	it	ge
    a426:	465b      	movge	r3, fp
    a428:	42b3      	cmp	r3, r6
    a42a:	bfa8      	it	ge
    a42c:	4633      	movge	r3, r6
    a42e:	2b00      	cmp	r3, #0
    a430:	bfc2      	ittt	gt
    a432:	ebab 0b03 	subgt.w	fp, fp, r3
    a436:	1af6      	subgt	r6, r6, r3
    a438:	1aff      	subgt	r7, r7, r3
    a43a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a43c:	2b00      	cmp	r3, #0
    a43e:	dd16      	ble.n	a46e <_strtod_l+0x746>
    a440:	461a      	mov	r2, r3
    a442:	9905      	ldr	r1, [sp, #20]
    a444:	4650      	mov	r0, sl
    a446:	f01a fe21 	bl	2508c <__pow5mult>
    a44a:	9005      	str	r0, [sp, #20]
    a44c:	2800      	cmp	r0, #0
    a44e:	d09f      	beq.n	a390 <_strtod_l+0x668>
    a450:	4601      	mov	r1, r0
    a452:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a454:	4650      	mov	r0, sl
    a456:	f01a fd6f 	bl	24f38 <__multiply>
    a45a:	900d      	str	r0, [sp, #52]	; 0x34
    a45c:	2800      	cmp	r0, #0
    a45e:	f43f aec0 	beq.w	a1e2 <_strtod_l+0x4ba>
    a462:	9918      	ldr	r1, [sp, #96]	; 0x60
    a464:	4650      	mov	r0, sl
    a466:	f01a fc9d 	bl	24da4 <_Bfree>
    a46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a46c:	9318      	str	r3, [sp, #96]	; 0x60
    a46e:	f1bb 0f00 	cmp.w	fp, #0
    a472:	dc71      	bgt.n	a558 <_strtod_l+0x830>
    a474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a476:	2b00      	cmp	r3, #0
    a478:	dd08      	ble.n	a48c <_strtod_l+0x764>
    a47a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a47c:	4650      	mov	r0, sl
    a47e:	9906      	ldr	r1, [sp, #24]
    a480:	f01a fe04 	bl	2508c <__pow5mult>
    a484:	9006      	str	r0, [sp, #24]
    a486:	2800      	cmp	r0, #0
    a488:	f43f aea9 	beq.w	a1de <_strtod_l+0x4b6>
    a48c:	2e00      	cmp	r6, #0
    a48e:	dd08      	ble.n	a4a2 <_strtod_l+0x77a>
    a490:	4632      	mov	r2, r6
    a492:	9906      	ldr	r1, [sp, #24]
    a494:	4650      	mov	r0, sl
    a496:	f01a fe53 	bl	25140 <__lshift>
    a49a:	9006      	str	r0, [sp, #24]
    a49c:	2800      	cmp	r0, #0
    a49e:	f43f ae9e 	beq.w	a1de <_strtod_l+0x4b6>
    a4a2:	2f00      	cmp	r7, #0
    a4a4:	dd08      	ble.n	a4b8 <_strtod_l+0x790>
    a4a6:	463a      	mov	r2, r7
    a4a8:	9905      	ldr	r1, [sp, #20]
    a4aa:	4650      	mov	r0, sl
    a4ac:	f01a fe48 	bl	25140 <__lshift>
    a4b0:	9005      	str	r0, [sp, #20]
    a4b2:	2800      	cmp	r0, #0
    a4b4:	f43f ae95 	beq.w	a1e2 <_strtod_l+0x4ba>
    a4b8:	9a06      	ldr	r2, [sp, #24]
    a4ba:	4650      	mov	r0, sl
    a4bc:	9918      	ldr	r1, [sp, #96]	; 0x60
    a4be:	f01a feab 	bl	25218 <__mdiff>
    a4c2:	9007      	str	r0, [sp, #28]
    a4c4:	2800      	cmp	r0, #0
    a4c6:	f43f ae8c 	beq.w	a1e2 <_strtod_l+0x4ba>
    a4ca:	68c3      	ldr	r3, [r0, #12]
    a4cc:	9905      	ldr	r1, [sp, #20]
    a4ce:	930d      	str	r3, [sp, #52]	; 0x34
    a4d0:	2300      	movs	r3, #0
    a4d2:	60c3      	str	r3, [r0, #12]
    a4d4:	f021 f88b 	bl	2b5ee <__mcmp>
    a4d8:	2800      	cmp	r0, #0
    a4da:	da4b      	bge.n	a574 <_strtod_l+0x84c>
    a4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a4de:	ea53 0308 	orrs.w	r3, r3, r8
    a4e2:	f040 80bc 	bne.w	a65e <_strtod_l+0x936>
    a4e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	f040 80b7 	bne.w	a65e <_strtod_l+0x936>
    a4f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a4f4:	0d1b      	lsrs	r3, r3, #20
    a4f6:	051b      	lsls	r3, r3, #20
    a4f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a4fc:	f240 80af 	bls.w	a65e <_strtod_l+0x936>
    a500:	9b07      	ldr	r3, [sp, #28]
    a502:	695b      	ldr	r3, [r3, #20]
    a504:	b923      	cbnz	r3, a510 <_strtod_l+0x7e8>
    a506:	9b07      	ldr	r3, [sp, #28]
    a508:	691b      	ldr	r3, [r3, #16]
    a50a:	2b01      	cmp	r3, #1
    a50c:	f340 80a7 	ble.w	a65e <_strtod_l+0x936>
    a510:	2201      	movs	r2, #1
    a512:	9907      	ldr	r1, [sp, #28]
    a514:	4650      	mov	r0, sl
    a516:	f01a fe13 	bl	25140 <__lshift>
    a51a:	9905      	ldr	r1, [sp, #20]
    a51c:	9007      	str	r0, [sp, #28]
    a51e:	f021 f866 	bl	2b5ee <__mcmp>
    a522:	2800      	cmp	r0, #0
    a524:	f340 809b 	ble.w	a65e <_strtod_l+0x936>
    a528:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a52c:	9a04      	ldr	r2, [sp, #16]
    a52e:	0d1b      	lsrs	r3, r3, #20
    a530:	051b      	lsls	r3, r3, #20
    a532:	2a00      	cmp	r2, #0
    a534:	d079      	beq.n	a62a <_strtod_l+0x902>
    a536:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a53a:	d86d      	bhi.n	a618 <_strtod_l+0x8f0>
    a53c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    a540:	d846      	bhi.n	a5d0 <_strtod_l+0x8a8>
    a542:	f04f 0800 	mov.w	r8, #0
    a546:	f04f 0900 	mov.w	r9, #0
    a54a:	2322      	movs	r3, #34	; 0x22
    a54c:	f8ca 3000 	str.w	r3, [sl]
    a550:	e64e      	b.n	a1f0 <_strtod_l+0x4c8>
    a552:	2400      	movs	r4, #0
    a554:	2501      	movs	r5, #1
    a556:	e75e      	b.n	a416 <_strtod_l+0x6ee>
    a558:	465a      	mov	r2, fp
    a55a:	9918      	ldr	r1, [sp, #96]	; 0x60
    a55c:	4650      	mov	r0, sl
    a55e:	f01a fdef 	bl	25140 <__lshift>
    a562:	9018      	str	r0, [sp, #96]	; 0x60
    a564:	2800      	cmp	r0, #0
    a566:	d185      	bne.n	a474 <_strtod_l+0x74c>
    a568:	e63b      	b.n	a1e2 <_strtod_l+0x4ba>
    a56a:	bf00      	nop
    a56c:	0002c268 	.word	0x0002c268
    a570:	fffffc02 	.word	0xfffffc02
    a574:	46cb      	mov	fp, r9
    a576:	f040 80a3 	bne.w	a6c0 <_strtod_l+0x998>
    a57a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a57c:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a580:	2a00      	cmp	r2, #0
    a582:	d040      	beq.n	a606 <_strtod_l+0x8de>
    a584:	4a96      	ldr	r2, [pc, #600]	; (a7e0 <_strtod_l+0xab8>)
    a586:	4293      	cmp	r3, r2
    a588:	d158      	bne.n	a63c <_strtod_l+0x914>
    a58a:	9b04      	ldr	r3, [sp, #16]
    a58c:	4642      	mov	r2, r8
    a58e:	b97b      	cbnz	r3, a5b0 <_strtod_l+0x888>
    a590:	f1b8 3fff 	cmp.w	r8, #4294967295
    a594:	f040 8089 	bne.w	a6aa <_strtod_l+0x982>
    a598:	4b92      	ldr	r3, [pc, #584]	; (a7e4 <_strtod_l+0xabc>)
    a59a:	4599      	cmp	r9, r3
    a59c:	f43f ae21 	beq.w	a1e2 <_strtod_l+0x4ba>
    a5a0:	4b91      	ldr	r3, [pc, #580]	; (a7e8 <_strtod_l+0xac0>)
    a5a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    a5a6:	ea09 0303 	and.w	r3, r9, r3
    a5aa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a5ae:	e61f      	b.n	a1f0 <_strtod_l+0x4c8>
    a5b0:	4b8d      	ldr	r3, [pc, #564]	; (a7e8 <_strtod_l+0xac0>)
    a5b2:	ea09 0303 	and.w	r3, r9, r3
    a5b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a5ba:	d916      	bls.n	a5ea <_strtod_l+0x8c2>
    a5bc:	f118 0101 	adds.w	r1, r8, #1
    a5c0:	d11b      	bne.n	a5fa <_strtod_l+0x8d2>
    a5c2:	4a88      	ldr	r2, [pc, #544]	; (a7e4 <_strtod_l+0xabc>)
    a5c4:	4591      	cmp	r9, r2
    a5c6:	f43f ae0c 	beq.w	a1e2 <_strtod_l+0x4ba>
    a5ca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a5ce:	4680      	mov	r8, r0
    a5d0:	4b86      	ldr	r3, [pc, #536]	; (a7ec <_strtod_l+0xac4>)
    a5d2:	4640      	mov	r0, r8
    a5d4:	4649      	mov	r1, r9
    a5d6:	2200      	movs	r2, #0
    a5d8:	f7fd ff7a 	bl	84d0 <__aeabi_dmul>
    a5dc:	460b      	mov	r3, r1
    a5de:	4680      	mov	r8, r0
    a5e0:	4689      	mov	r9, r1
    a5e2:	4303      	orrs	r3, r0
    a5e4:	f47f ae04 	bne.w	a1f0 <_strtod_l+0x4c8>
    a5e8:	e7af      	b.n	a54a <_strtod_l+0x822>
    a5ea:	0d1e      	lsrs	r6, r3, #20
    a5ec:	f04f 31ff 	mov.w	r1, #4294967295
    a5f0:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    a5f4:	40b1      	lsls	r1, r6
    a5f6:	4588      	cmp	r8, r1
    a5f8:	d0e7      	beq.n	a5ca <_strtod_l+0x8a2>
    a5fa:	2c00      	cmp	r4, #0
    a5fc:	d05e      	beq.n	a6bc <_strtod_l+0x994>
    a5fe:	ea14 0f0b 	tst.w	r4, fp
    a602:	d0e5      	beq.n	a5d0 <_strtod_l+0x8a8>
    a604:	e01e      	b.n	a644 <_strtod_l+0x91c>
    a606:	2b00      	cmp	r3, #0
    a608:	d14a      	bne.n	a6a0 <_strtod_l+0x978>
    a60a:	f1b8 0f00 	cmp.w	r8, #0
    a60e:	d08b      	beq.n	a528 <_strtod_l+0x800>
    a610:	b364      	cbz	r4, a66c <_strtod_l+0x944>
    a612:	ea14 0f0b 	tst.w	r4, fp
    a616:	e02b      	b.n	a670 <_strtod_l+0x948>
    a618:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a61c:	f04f 38ff 	mov.w	r8, #4294967295
    a620:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a624:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a628:	e7d2      	b.n	a5d0 <_strtod_l+0x8a8>
    a62a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a62e:	f04f 38ff 	mov.w	r8, #4294967295
    a632:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a636:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a63a:	e5d9      	b.n	a1f0 <_strtod_l+0x4c8>
    a63c:	b19c      	cbz	r4, a666 <_strtod_l+0x93e>
    a63e:	ea14 0f09 	tst.w	r4, r9
    a642:	d00c      	beq.n	a65e <_strtod_l+0x936>
    a644:	9a04      	ldr	r2, [sp, #16]
    a646:	4640      	mov	r0, r8
    a648:	4649      	mov	r1, r9
    a64a:	f020 fd2f 	bl	2b0ac <sulp>
    a64e:	4602      	mov	r2, r0
    a650:	460b      	mov	r3, r1
    a652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a656:	f7fd fd85 	bl	8164 <__adddf3>
    a65a:	4680      	mov	r8, r0
    a65c:	4689      	mov	r9, r1
    a65e:	9b04      	ldr	r3, [sp, #16]
    a660:	2b00      	cmp	r3, #0
    a662:	d1b5      	bne.n	a5d0 <_strtod_l+0x8a8>
    a664:	e5c4      	b.n	a1f0 <_strtod_l+0x4c8>
    a666:	ea15 0f08 	tst.w	r5, r8
    a66a:	e7ea      	b.n	a642 <_strtod_l+0x91a>
    a66c:	ea18 0f05 	tst.w	r8, r5
    a670:	d0f5      	beq.n	a65e <_strtod_l+0x936>
    a672:	9a04      	ldr	r2, [sp, #16]
    a674:	4640      	mov	r0, r8
    a676:	4649      	mov	r1, r9
    a678:	f020 fd18 	bl	2b0ac <sulp>
    a67c:	4602      	mov	r2, r0
    a67e:	460b      	mov	r3, r1
    a680:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a684:	f7fd fd6c 	bl	8160 <__aeabi_dsub>
    a688:	2200      	movs	r2, #0
    a68a:	2300      	movs	r3, #0
    a68c:	4604      	mov	r4, r0
    a68e:	460d      	mov	r5, r1
    a690:	f7fe fcbc 	bl	900c <__aeabi_dcmpeq>
    a694:	2800      	cmp	r0, #0
    a696:	f47f af54 	bne.w	a542 <_strtod_l+0x81a>
    a69a:	46a0      	mov	r8, r4
    a69c:	46a9      	mov	r9, r5
    a69e:	e7de      	b.n	a65e <_strtod_l+0x936>
    a6a0:	2c00      	cmp	r4, #0
    a6a2:	d1b6      	bne.n	a612 <_strtod_l+0x8ea>
    a6a4:	ea15 0f08 	tst.w	r5, r8
    a6a8:	e7e2      	b.n	a670 <_strtod_l+0x948>
    a6aa:	b124      	cbz	r4, a6b6 <_strtod_l+0x98e>
    a6ac:	ea14 0f09 	tst.w	r4, r9
    a6b0:	f43f ad9e 	beq.w	a1f0 <_strtod_l+0x4c8>
    a6b4:	e7c6      	b.n	a644 <_strtod_l+0x91c>
    a6b6:	ea18 0f05 	tst.w	r8, r5
    a6ba:	e7f9      	b.n	a6b0 <_strtod_l+0x988>
    a6bc:	422a      	tst	r2, r5
    a6be:	e7a0      	b.n	a602 <_strtod_l+0x8da>
    a6c0:	9905      	ldr	r1, [sp, #20]
    a6c2:	9807      	ldr	r0, [sp, #28]
    a6c4:	f020 ffae 	bl	2b624 <__ratio>
    a6c8:	2200      	movs	r2, #0
    a6ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a6ce:	4604      	mov	r4, r0
    a6d0:	460d      	mov	r5, r1
    a6d2:	f7fe fcaf 	bl	9034 <__aeabi_dcmple>
    a6d6:	2800      	cmp	r0, #0
    a6d8:	d06d      	beq.n	a7b6 <_strtod_l+0xa8e>
    a6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a6dc:	2b00      	cmp	r3, #0
    a6de:	d178      	bne.n	a7d2 <_strtod_l+0xaaa>
    a6e0:	f1b8 0f00 	cmp.w	r8, #0
    a6e4:	d156      	bne.n	a794 <_strtod_l+0xa6c>
    a6e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	d159      	bne.n	a7a2 <_strtod_l+0xa7a>
    a6ee:	2200      	movs	r2, #0
    a6f0:	4b3f      	ldr	r3, [pc, #252]	; (a7f0 <_strtod_l+0xac8>)
    a6f2:	4620      	mov	r0, r4
    a6f4:	4629      	mov	r1, r5
    a6f6:	f7fe fc93 	bl	9020 <__aeabi_dcmplt>
    a6fa:	2800      	cmp	r0, #0
    a6fc:	d158      	bne.n	a7b0 <_strtod_l+0xa88>
    a6fe:	4620      	mov	r0, r4
    a700:	4629      	mov	r1, r5
    a702:	2200      	movs	r2, #0
    a704:	4b3b      	ldr	r3, [pc, #236]	; (a7f4 <_strtod_l+0xacc>)
    a706:	f7fd fee3 	bl	84d0 <__aeabi_dmul>
    a70a:	4604      	mov	r4, r0
    a70c:	460d      	mov	r5, r1
    a70e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    a712:	9408      	str	r4, [sp, #32]
    a714:	9309      	str	r3, [sp, #36]	; 0x24
    a716:	4b34      	ldr	r3, [pc, #208]	; (a7e8 <_strtod_l+0xac0>)
    a718:	4a33      	ldr	r2, [pc, #204]	; (a7e8 <_strtod_l+0xac0>)
    a71a:	ea0b 0303 	and.w	r3, fp, r3
    a71e:	ea0b 0202 	and.w	r2, fp, r2
    a722:	9315      	str	r3, [sp, #84]	; 0x54
    a724:	4b34      	ldr	r3, [pc, #208]	; (a7f8 <_strtod_l+0xad0>)
    a726:	429a      	cmp	r2, r3
    a728:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a72c:	f040 809e 	bne.w	a86c <_strtod_l+0xb44>
    a730:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    a734:	4640      	mov	r0, r8
    a736:	4649      	mov	r1, r9
    a738:	f01a fe04 	bl	25344 <__ulp>
    a73c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a740:	f7fd fec6 	bl	84d0 <__aeabi_dmul>
    a744:	4642      	mov	r2, r8
    a746:	464b      	mov	r3, r9
    a748:	f7fd fd0c 	bl	8164 <__adddf3>
    a74c:	460b      	mov	r3, r1
    a74e:	4926      	ldr	r1, [pc, #152]	; (a7e8 <_strtod_l+0xac0>)
    a750:	4680      	mov	r8, r0
    a752:	4a2a      	ldr	r2, [pc, #168]	; (a7fc <_strtod_l+0xad4>)
    a754:	4019      	ands	r1, r3
    a756:	4291      	cmp	r1, r2
    a758:	d954      	bls.n	a804 <_strtod_l+0xadc>
    a75a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a75c:	4b21      	ldr	r3, [pc, #132]	; (a7e4 <_strtod_l+0xabc>)
    a75e:	429a      	cmp	r2, r3
    a760:	d103      	bne.n	a76a <_strtod_l+0xa42>
    a762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a764:	3301      	adds	r3, #1
    a766:	f43f ad3c 	beq.w	a1e2 <_strtod_l+0x4ba>
    a76a:	f8df 9078 	ldr.w	r9, [pc, #120]	; a7e4 <_strtod_l+0xabc>
    a76e:	f04f 38ff 	mov.w	r8, #4294967295
    a772:	9918      	ldr	r1, [sp, #96]	; 0x60
    a774:	4650      	mov	r0, sl
    a776:	f01a fb15 	bl	24da4 <_Bfree>
    a77a:	9906      	ldr	r1, [sp, #24]
    a77c:	4650      	mov	r0, sl
    a77e:	f01a fb11 	bl	24da4 <_Bfree>
    a782:	9905      	ldr	r1, [sp, #20]
    a784:	4650      	mov	r0, sl
    a786:	f01a fb0d 	bl	24da4 <_Bfree>
    a78a:	9907      	ldr	r1, [sp, #28]
    a78c:	4650      	mov	r0, sl
    a78e:	f01a fb09 	bl	24da4 <_Bfree>
    a792:	e5d5      	b.n	a340 <_strtod_l+0x618>
    a794:	f1b8 0f01 	cmp.w	r8, #1
    a798:	d103      	bne.n	a7a2 <_strtod_l+0xa7a>
    a79a:	f1b9 0f00 	cmp.w	r9, #0
    a79e:	f43f aed0 	beq.w	a542 <_strtod_l+0x81a>
    a7a2:	4c17      	ldr	r4, [pc, #92]	; (a800 <_strtod_l+0xad8>)
    a7a4:	2300      	movs	r3, #0
    a7a6:	4d12      	ldr	r5, [pc, #72]	; (a7f0 <_strtod_l+0xac8>)
    a7a8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a7ac:	2400      	movs	r4, #0
    a7ae:	e7b2      	b.n	a716 <_strtod_l+0x9ee>
    a7b0:	2400      	movs	r4, #0
    a7b2:	4d10      	ldr	r5, [pc, #64]	; (a7f4 <_strtod_l+0xacc>)
    a7b4:	e7ab      	b.n	a70e <_strtod_l+0x9e6>
    a7b6:	4b0f      	ldr	r3, [pc, #60]	; (a7f4 <_strtod_l+0xacc>)
    a7b8:	4620      	mov	r0, r4
    a7ba:	4629      	mov	r1, r5
    a7bc:	2200      	movs	r2, #0
    a7be:	f7fd fe87 	bl	84d0 <__aeabi_dmul>
    a7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a7c4:	4604      	mov	r4, r0
    a7c6:	460d      	mov	r5, r1
    a7c8:	2b00      	cmp	r3, #0
    a7ca:	d0a0      	beq.n	a70e <_strtod_l+0x9e6>
    a7cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
    a7d0:	e7a1      	b.n	a716 <_strtod_l+0x9ee>
    a7d2:	4c07      	ldr	r4, [pc, #28]	; (a7f0 <_strtod_l+0xac8>)
    a7d4:	2300      	movs	r3, #0
    a7d6:	4625      	mov	r5, r4
    a7d8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a7dc:	461c      	mov	r4, r3
    a7de:	e79a      	b.n	a716 <_strtod_l+0x9ee>
    a7e0:	000fffff 	.word	0x000fffff
    a7e4:	7fefffff 	.word	0x7fefffff
    a7e8:	7ff00000 	.word	0x7ff00000
    a7ec:	39500000 	.word	0x39500000
    a7f0:	3ff00000 	.word	0x3ff00000
    a7f4:	3fe00000 	.word	0x3fe00000
    a7f8:	7fe00000 	.word	0x7fe00000
    a7fc:	7c9fffff 	.word	0x7c9fffff
    a800:	bff00000 	.word	0xbff00000
    a804:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    a808:	9b04      	ldr	r3, [sp, #16]
    a80a:	464e      	mov	r6, r9
    a80c:	2b00      	cmp	r3, #0
    a80e:	d1b0      	bne.n	a772 <_strtod_l+0xa4a>
    a810:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a814:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a816:	0d1b      	lsrs	r3, r3, #20
    a818:	051b      	lsls	r3, r3, #20
    a81a:	429a      	cmp	r2, r3
    a81c:	d1a9      	bne.n	a772 <_strtod_l+0xa4a>
    a81e:	4620      	mov	r0, r4
    a820:	4629      	mov	r1, r5
    a822:	f7fe fc83 	bl	912c <__aeabi_d2lz>
    a826:	f3c9 0613 	ubfx	r6, r9, #0, #20
    a82a:	f7fd fe23 	bl	8474 <__aeabi_l2d>
    a82e:	460b      	mov	r3, r1
    a830:	4602      	mov	r2, r0
    a832:	4629      	mov	r1, r5
    a834:	4620      	mov	r0, r4
    a836:	ea46 0608 	orr.w	r6, r6, r8
    a83a:	f7fd fc91 	bl	8160 <__aeabi_dsub>
    a83e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a840:	4604      	mov	r4, r0
    a842:	460d      	mov	r5, r1
    a844:	431e      	orrs	r6, r3
    a846:	d04a      	beq.n	a8de <_strtod_l+0xbb6>
    a848:	a32d      	add	r3, pc, #180	; (adr r3, a900 <_strtod_l+0xbd8>)
    a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a84e:	f7fe fbe7 	bl	9020 <__aeabi_dcmplt>
    a852:	2800      	cmp	r0, #0
    a854:	f47f accc 	bne.w	a1f0 <_strtod_l+0x4c8>
    a858:	4620      	mov	r0, r4
    a85a:	4629      	mov	r1, r5
    a85c:	a32a      	add	r3, pc, #168	; (adr r3, a908 <_strtod_l+0xbe0>)
    a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a862:	f7fe fbfb 	bl	905c <__aeabi_dcmpgt>
    a866:	2800      	cmp	r0, #0
    a868:	d083      	beq.n	a772 <_strtod_l+0xa4a>
    a86a:	e4c1      	b.n	a1f0 <_strtod_l+0x4c8>
    a86c:	9b04      	ldr	r3, [sp, #16]
    a86e:	b313      	cbz	r3, a8b6 <_strtod_l+0xb8e>
    a870:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a872:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a876:	d81e      	bhi.n	a8b6 <_strtod_l+0xb8e>
    a878:	4620      	mov	r0, r4
    a87a:	4629      	mov	r1, r5
    a87c:	a324      	add	r3, pc, #144	; (adr r3, a910 <_strtod_l+0xbe8>)
    a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a882:	f7fe fbd7 	bl	9034 <__aeabi_dcmple>
    a886:	b190      	cbz	r0, a8ae <_strtod_l+0xb86>
    a888:	4629      	mov	r1, r5
    a88a:	4620      	mov	r0, r4
    a88c:	f7fe fbf0 	bl	9070 <__aeabi_d2uiz>
    a890:	2801      	cmp	r0, #1
    a892:	bf38      	it	cc
    a894:	2001      	movcc	r0, #1
    a896:	f7fd fda1 	bl	83dc <__aeabi_ui2d>
    a89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a89c:	4604      	mov	r4, r0
    a89e:	460d      	mov	r5, r1
    a8a0:	b9d3      	cbnz	r3, a8d8 <_strtod_l+0xbb0>
    a8a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a8a6:	9012      	str	r0, [sp, #72]	; 0x48
    a8a8:	9313      	str	r3, [sp, #76]	; 0x4c
    a8aa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    a8ae:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    a8b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a8b4:	1a9f      	subs	r7, r3, r2
    a8b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a8ba:	f01a fd43 	bl	25344 <__ulp>
    a8be:	4602      	mov	r2, r0
    a8c0:	460b      	mov	r3, r1
    a8c2:	4630      	mov	r0, r6
    a8c4:	4639      	mov	r1, r7
    a8c6:	f7fd fe03 	bl	84d0 <__aeabi_dmul>
    a8ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a8ce:	f7fd fc49 	bl	8164 <__adddf3>
    a8d2:	4680      	mov	r8, r0
    a8d4:	4689      	mov	r9, r1
    a8d6:	e797      	b.n	a808 <_strtod_l+0xae0>
    a8d8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    a8dc:	e7e5      	b.n	a8aa <_strtod_l+0xb82>
    a8de:	a30e      	add	r3, pc, #56	; (adr r3, a918 <_strtod_l+0xbf0>)
    a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8e4:	f7fe fb9c 	bl	9020 <__aeabi_dcmplt>
    a8e8:	e7bd      	b.n	a866 <_strtod_l+0xb3e>
    a8ea:	2a65      	cmp	r2, #101	; 0x65
    a8ec:	f43f ab48 	beq.w	9f80 <_strtod_l+0x258>
    a8f0:	2a45      	cmp	r2, #69	; 0x45
    a8f2:	f43f ab45 	beq.w	9f80 <_strtod_l+0x258>
    a8f6:	2301      	movs	r3, #1
    a8f8:	f7ff bb7e 	b.w	9ff8 <_strtod_l+0x2d0>
    a8fc:	f3af 8000 	nop.w
    a900:	94a03595 	.word	0x94a03595
    a904:	3fdfffff 	.word	0x3fdfffff
    a908:	35afe535 	.word	0x35afe535
    a90c:	3fe00000 	.word	0x3fe00000
    a910:	ffc00000 	.word	0xffc00000
    a914:	41dfffff 	.word	0x41dfffff
    a918:	94a03595 	.word	0x94a03595
    a91c:	3fcfffff 	.word	0x3fcfffff

0000a920 <_dtoa_r>:
    a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a924:	4614      	mov	r4, r2
    a926:	b097      	sub	sp, #92	; 0x5c
    a928:	461d      	mov	r5, r3
    a92a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    a92c:	4683      	mov	fp, r0
    a92e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    a930:	e9cd 4504 	strd	r4, r5, [sp, #16]
    a934:	b97f      	cbnz	r7, a956 <_dtoa_r+0x36>
    a936:	2010      	movs	r0, #16
    a938:	f019 fa4c 	bl	23dd4 <malloc>
    a93c:	4602      	mov	r2, r0
    a93e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    a942:	b920      	cbnz	r0, a94e <_dtoa_r+0x2e>
    a944:	4ba2      	ldr	r3, [pc, #648]	; (abd0 <_dtoa_r+0x2b0>)
    a946:	21ea      	movs	r1, #234	; 0xea
    a948:	48a2      	ldr	r0, [pc, #648]	; (abd4 <_dtoa_r+0x2b4>)
    a94a:	f019 febb 	bl	246c4 <__assert_func>
    a94e:	e9c0 7701 	strd	r7, r7, [r0, #4]
    a952:	6007      	str	r7, [r0, #0]
    a954:	60c7      	str	r7, [r0, #12]
    a956:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a95a:	6819      	ldr	r1, [r3, #0]
    a95c:	b159      	cbz	r1, a976 <_dtoa_r+0x56>
    a95e:	685a      	ldr	r2, [r3, #4]
    a960:	2301      	movs	r3, #1
    a962:	4658      	mov	r0, fp
    a964:	4093      	lsls	r3, r2
    a966:	604a      	str	r2, [r1, #4]
    a968:	608b      	str	r3, [r1, #8]
    a96a:	f01a fa1b 	bl	24da4 <_Bfree>
    a96e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a972:	2200      	movs	r2, #0
    a974:	601a      	str	r2, [r3, #0]
    a976:	1e2b      	subs	r3, r5, #0
    a978:	bfb7      	itett	lt
    a97a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    a97e:	2300      	movge	r3, #0
    a980:	2201      	movlt	r2, #1
    a982:	9305      	strlt	r3, [sp, #20]
    a984:	bfa8      	it	ge
    a986:	6033      	strge	r3, [r6, #0]
    a988:	9f05      	ldr	r7, [sp, #20]
    a98a:	4b93      	ldr	r3, [pc, #588]	; (abd8 <_dtoa_r+0x2b8>)
    a98c:	bfb8      	it	lt
    a98e:	6032      	strlt	r2, [r6, #0]
    a990:	43bb      	bics	r3, r7
    a992:	d119      	bne.n	a9c8 <_dtoa_r+0xa8>
    a994:	f242 730f 	movw	r3, #9999	; 0x270f
    a998:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a99a:	6013      	str	r3, [r2, #0]
    a99c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    a9a0:	4323      	orrs	r3, r4
    a9a2:	f000 85e0 	beq.w	b566 <_dtoa_r+0xc46>
    a9a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a9a8:	b953      	cbnz	r3, a9c0 <_dtoa_r+0xa0>
    a9aa:	4b8c      	ldr	r3, [pc, #560]	; (abdc <_dtoa_r+0x2bc>)
    a9ac:	e021      	b.n	a9f2 <_dtoa_r+0xd2>
    a9ae:	4b8c      	ldr	r3, [pc, #560]	; (abe0 <_dtoa_r+0x2c0>)
    a9b0:	9308      	str	r3, [sp, #32]
    a9b2:	3308      	adds	r3, #8
    a9b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a9b6:	6013      	str	r3, [r2, #0]
    a9b8:	9808      	ldr	r0, [sp, #32]
    a9ba:	b017      	add	sp, #92	; 0x5c
    a9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9c0:	4b86      	ldr	r3, [pc, #536]	; (abdc <_dtoa_r+0x2bc>)
    a9c2:	9308      	str	r3, [sp, #32]
    a9c4:	3303      	adds	r3, #3
    a9c6:	e7f5      	b.n	a9b4 <_dtoa_r+0x94>
    a9c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a9cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    a9d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a9d4:	2200      	movs	r2, #0
    a9d6:	2300      	movs	r3, #0
    a9d8:	f7fe fb18 	bl	900c <__aeabi_dcmpeq>
    a9dc:	4680      	mov	r8, r0
    a9de:	b150      	cbz	r0, a9f6 <_dtoa_r+0xd6>
    a9e0:	2301      	movs	r3, #1
    a9e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a9e4:	6013      	str	r3, [r2, #0]
    a9e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a9e8:	b113      	cbz	r3, a9f0 <_dtoa_r+0xd0>
    a9ea:	4b7e      	ldr	r3, [pc, #504]	; (abe4 <_dtoa_r+0x2c4>)
    a9ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a9ee:	6013      	str	r3, [r2, #0]
    a9f0:	4b7d      	ldr	r3, [pc, #500]	; (abe8 <_dtoa_r+0x2c8>)
    a9f2:	9308      	str	r3, [sp, #32]
    a9f4:	e7e0      	b.n	a9b8 <_dtoa_r+0x98>
    a9f6:	ab14      	add	r3, sp, #80	; 0x50
    a9f8:	f3c7 560a 	ubfx	r6, r7, #20, #11
    a9fc:	4658      	mov	r0, fp
    a9fe:	9301      	str	r3, [sp, #4]
    aa00:	ab15      	add	r3, sp, #84	; 0x54
    aa02:	9300      	str	r3, [sp, #0]
    aa04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    aa08:	f01a fd06 	bl	25418 <__d2b>
    aa0c:	9003      	str	r0, [sp, #12]
    aa0e:	2e00      	cmp	r6, #0
    aa10:	d078      	beq.n	ab04 <_dtoa_r+0x1e4>
    aa12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aa14:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    aa18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    aa1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    aa20:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    aa24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aa28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    aa2c:	4619      	mov	r1, r3
    aa2e:	2200      	movs	r2, #0
    aa30:	4b6e      	ldr	r3, [pc, #440]	; (abec <_dtoa_r+0x2cc>)
    aa32:	f7fd fb95 	bl	8160 <__aeabi_dsub>
    aa36:	a360      	add	r3, pc, #384	; (adr r3, abb8 <_dtoa_r+0x298>)
    aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa3c:	f7fd fd48 	bl	84d0 <__aeabi_dmul>
    aa40:	a35f      	add	r3, pc, #380	; (adr r3, abc0 <_dtoa_r+0x2a0>)
    aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa46:	f7fd fb8d 	bl	8164 <__adddf3>
    aa4a:	4604      	mov	r4, r0
    aa4c:	460d      	mov	r5, r1
    aa4e:	4630      	mov	r0, r6
    aa50:	f7fd fcd4 	bl	83fc <__aeabi_i2d>
    aa54:	a35c      	add	r3, pc, #368	; (adr r3, abc8 <_dtoa_r+0x2a8>)
    aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa5a:	f7fd fd39 	bl	84d0 <__aeabi_dmul>
    aa5e:	4602      	mov	r2, r0
    aa60:	460b      	mov	r3, r1
    aa62:	4620      	mov	r0, r4
    aa64:	4629      	mov	r1, r5
    aa66:	f7fd fb7d 	bl	8164 <__adddf3>
    aa6a:	4604      	mov	r4, r0
    aa6c:	460d      	mov	r5, r1
    aa6e:	f7fe fb35 	bl	90dc <__aeabi_d2iz>
    aa72:	2200      	movs	r2, #0
    aa74:	4607      	mov	r7, r0
    aa76:	2300      	movs	r3, #0
    aa78:	4620      	mov	r0, r4
    aa7a:	4629      	mov	r1, r5
    aa7c:	f7fe fad0 	bl	9020 <__aeabi_dcmplt>
    aa80:	b140      	cbz	r0, aa94 <_dtoa_r+0x174>
    aa82:	4638      	mov	r0, r7
    aa84:	f7fd fcba 	bl	83fc <__aeabi_i2d>
    aa88:	4622      	mov	r2, r4
    aa8a:	462b      	mov	r3, r5
    aa8c:	f7fe fabe 	bl	900c <__aeabi_dcmpeq>
    aa90:	b900      	cbnz	r0, aa94 <_dtoa_r+0x174>
    aa92:	3f01      	subs	r7, #1
    aa94:	2f16      	cmp	r7, #22
    aa96:	d854      	bhi.n	ab42 <_dtoa_r+0x222>
    aa98:	4b55      	ldr	r3, [pc, #340]	; (abf0 <_dtoa_r+0x2d0>)
    aa9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    aa9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
    aaa6:	f7fe fabb 	bl	9020 <__aeabi_dcmplt>
    aaaa:	2800      	cmp	r0, #0
    aaac:	d04b      	beq.n	ab46 <_dtoa_r+0x226>
    aaae:	3f01      	subs	r7, #1
    aab0:	2300      	movs	r3, #0
    aab2:	9312      	str	r3, [sp, #72]	; 0x48
    aab4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aab6:	1b9b      	subs	r3, r3, r6
    aab8:	1e5a      	subs	r2, r3, #1
    aaba:	bf4c      	ite	mi
    aabc:	f1c3 0301 	rsbmi	r3, r3, #1
    aac0:	2300      	movpl	r3, #0
    aac2:	920a      	str	r2, [sp, #40]	; 0x28
    aac4:	bf45      	ittet	mi
    aac6:	9306      	strmi	r3, [sp, #24]
    aac8:	2300      	movmi	r3, #0
    aaca:	9306      	strpl	r3, [sp, #24]
    aacc:	930a      	strmi	r3, [sp, #40]	; 0x28
    aace:	2f00      	cmp	r7, #0
    aad0:	db3b      	blt.n	ab4a <_dtoa_r+0x22a>
    aad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aad4:	970f      	str	r7, [sp, #60]	; 0x3c
    aad6:	443b      	add	r3, r7
    aad8:	930a      	str	r3, [sp, #40]	; 0x28
    aada:	2300      	movs	r3, #0
    aadc:	930b      	str	r3, [sp, #44]	; 0x2c
    aade:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aae0:	2b09      	cmp	r3, #9
    aae2:	f200 8089 	bhi.w	abf8 <_dtoa_r+0x2d8>
    aae6:	2b05      	cmp	r3, #5
    aae8:	bfc5      	ittet	gt
    aaea:	3b04      	subgt	r3, #4
    aaec:	2400      	movgt	r4, #0
    aaee:	2401      	movle	r4, #1
    aaf0:	9320      	strgt	r3, [sp, #128]	; 0x80
    aaf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aaf4:	3b02      	subs	r3, #2
    aaf6:	2b03      	cmp	r3, #3
    aaf8:	f200 8089 	bhi.w	ac0e <_dtoa_r+0x2ee>
    aafc:	e8df f003 	tbb	[pc, r3]
    ab00:	59383a2d 	.word	0x59383a2d
    ab04:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    ab08:	441e      	add	r6, r3
    ab0a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    ab0e:	2b20      	cmp	r3, #32
    ab10:	bfc9      	itett	gt
    ab12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    ab16:	f1c3 0320 	rsble	r3, r3, #32
    ab1a:	409f      	lslgt	r7, r3
    ab1c:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    ab20:	bfd8      	it	le
    ab22:	fa04 f003 	lslle.w	r0, r4, r3
    ab26:	f106 36ff 	add.w	r6, r6, #4294967295
    ab2a:	bfc4      	itt	gt
    ab2c:	fa24 f303 	lsrgt.w	r3, r4, r3
    ab30:	ea47 0003 	orrgt.w	r0, r7, r3
    ab34:	f7fd fc52 	bl	83dc <__aeabi_ui2d>
    ab38:	2201      	movs	r2, #1
    ab3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    ab3e:	9213      	str	r2, [sp, #76]	; 0x4c
    ab40:	e774      	b.n	aa2c <_dtoa_r+0x10c>
    ab42:	2301      	movs	r3, #1
    ab44:	e7b5      	b.n	aab2 <_dtoa_r+0x192>
    ab46:	9012      	str	r0, [sp, #72]	; 0x48
    ab48:	e7b4      	b.n	aab4 <_dtoa_r+0x194>
    ab4a:	9b06      	ldr	r3, [sp, #24]
    ab4c:	1bdb      	subs	r3, r3, r7
    ab4e:	9306      	str	r3, [sp, #24]
    ab50:	427b      	negs	r3, r7
    ab52:	930b      	str	r3, [sp, #44]	; 0x2c
    ab54:	2300      	movs	r3, #0
    ab56:	930f      	str	r3, [sp, #60]	; 0x3c
    ab58:	e7c1      	b.n	aade <_dtoa_r+0x1be>
    ab5a:	2300      	movs	r3, #0
    ab5c:	930e      	str	r3, [sp, #56]	; 0x38
    ab5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ab60:	2b00      	cmp	r3, #0
    ab62:	dc57      	bgt.n	ac14 <_dtoa_r+0x2f4>
    ab64:	2301      	movs	r3, #1
    ab66:	4699      	mov	r9, r3
    ab68:	461a      	mov	r2, r3
    ab6a:	9309      	str	r3, [sp, #36]	; 0x24
    ab6c:	9221      	str	r2, [sp, #132]	; 0x84
    ab6e:	e00c      	b.n	ab8a <_dtoa_r+0x26a>
    ab70:	2301      	movs	r3, #1
    ab72:	e7f3      	b.n	ab5c <_dtoa_r+0x23c>
    ab74:	2300      	movs	r3, #0
    ab76:	930e      	str	r3, [sp, #56]	; 0x38
    ab78:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ab7a:	18fb      	adds	r3, r7, r3
    ab7c:	f103 0901 	add.w	r9, r3, #1
    ab80:	9309      	str	r3, [sp, #36]	; 0x24
    ab82:	464b      	mov	r3, r9
    ab84:	2b01      	cmp	r3, #1
    ab86:	bfb8      	it	lt
    ab88:	2301      	movlt	r3, #1
    ab8a:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    ab8e:	2100      	movs	r1, #0
    ab90:	2204      	movs	r2, #4
    ab92:	f102 0514 	add.w	r5, r2, #20
    ab96:	429d      	cmp	r5, r3
    ab98:	d940      	bls.n	ac1c <_dtoa_r+0x2fc>
    ab9a:	6041      	str	r1, [r0, #4]
    ab9c:	4658      	mov	r0, fp
    ab9e:	f01a f8c1 	bl	24d24 <_Balloc>
    aba2:	9008      	str	r0, [sp, #32]
    aba4:	2800      	cmp	r0, #0
    aba6:	d13c      	bne.n	ac22 <_dtoa_r+0x302>
    aba8:	4b12      	ldr	r3, [pc, #72]	; (abf4 <_dtoa_r+0x2d4>)
    abaa:	4602      	mov	r2, r0
    abac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    abb0:	e6ca      	b.n	a948 <_dtoa_r+0x28>
    abb2:	2301      	movs	r3, #1
    abb4:	e7df      	b.n	ab76 <_dtoa_r+0x256>
    abb6:	bf00      	nop
    abb8:	636f4361 	.word	0x636f4361
    abbc:	3fd287a7 	.word	0x3fd287a7
    abc0:	8b60c8b3 	.word	0x8b60c8b3
    abc4:	3fc68a28 	.word	0x3fc68a28
    abc8:	509f79fb 	.word	0x509f79fb
    abcc:	3fd34413 	.word	0x3fd34413
    abd0:	00032b0c 	.word	0x00032b0c
    abd4:	00032be2 	.word	0x00032be2
    abd8:	7ff00000 	.word	0x7ff00000
    abdc:	00032bde 	.word	0x00032bde
    abe0:	00032bd5 	.word	0x00032bd5
    abe4:	0003297d 	.word	0x0003297d
    abe8:	0003297c 	.word	0x0003297c
    abec:	3ff80000 	.word	0x3ff80000
    abf0:	0002c2b8 	.word	0x0002c2b8
    abf4:	00032c56 	.word	0x00032c56
    abf8:	2401      	movs	r4, #1
    abfa:	2300      	movs	r3, #0
    abfc:	940e      	str	r4, [sp, #56]	; 0x38
    abfe:	9320      	str	r3, [sp, #128]	; 0x80
    ac00:	f04f 33ff 	mov.w	r3, #4294967295
    ac04:	2200      	movs	r2, #0
    ac06:	4699      	mov	r9, r3
    ac08:	9309      	str	r3, [sp, #36]	; 0x24
    ac0a:	2312      	movs	r3, #18
    ac0c:	e7ae      	b.n	ab6c <_dtoa_r+0x24c>
    ac0e:	2301      	movs	r3, #1
    ac10:	930e      	str	r3, [sp, #56]	; 0x38
    ac12:	e7f5      	b.n	ac00 <_dtoa_r+0x2e0>
    ac14:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac16:	4699      	mov	r9, r3
    ac18:	9309      	str	r3, [sp, #36]	; 0x24
    ac1a:	e7b6      	b.n	ab8a <_dtoa_r+0x26a>
    ac1c:	3101      	adds	r1, #1
    ac1e:	0052      	lsls	r2, r2, #1
    ac20:	e7b7      	b.n	ab92 <_dtoa_r+0x272>
    ac22:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ac26:	f1b9 0f0e 	cmp.w	r9, #14
    ac2a:	9a08      	ldr	r2, [sp, #32]
    ac2c:	601a      	str	r2, [r3, #0]
    ac2e:	d86f      	bhi.n	ad10 <_dtoa_r+0x3f0>
    ac30:	2c00      	cmp	r4, #0
    ac32:	d06d      	beq.n	ad10 <_dtoa_r+0x3f0>
    ac34:	2f00      	cmp	r7, #0
    ac36:	dd36      	ble.n	aca6 <_dtoa_r+0x386>
    ac38:	f007 020f 	and.w	r2, r7, #15
    ac3c:	4ba0      	ldr	r3, [pc, #640]	; (aec0 <_dtoa_r+0x5a0>)
    ac3e:	05f8      	lsls	r0, r7, #23
    ac40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ac44:	e9d3 3400 	ldrd	r3, r4, [r3]
    ac48:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    ac4c:	ea4f 1427 	mov.w	r4, r7, asr #4
    ac50:	d517      	bpl.n	ac82 <_dtoa_r+0x362>
    ac52:	4b9c      	ldr	r3, [pc, #624]	; (aec4 <_dtoa_r+0x5a4>)
    ac54:	f004 040f 	and.w	r4, r4, #15
    ac58:	f04f 0803 	mov.w	r8, #3
    ac5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    ac60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ac64:	f7fd fd5e 	bl	8724 <__aeabi_ddiv>
    ac68:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ac6c:	4d95      	ldr	r5, [pc, #596]	; (aec4 <_dtoa_r+0x5a4>)
    ac6e:	b95c      	cbnz	r4, ac88 <_dtoa_r+0x368>
    ac70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ac74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ac78:	f7fd fd54 	bl	8724 <__aeabi_ddiv>
    ac7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ac80:	e02b      	b.n	acda <_dtoa_r+0x3ba>
    ac82:	f04f 0802 	mov.w	r8, #2
    ac86:	e7f1      	b.n	ac6c <_dtoa_r+0x34c>
    ac88:	07e1      	lsls	r1, r4, #31
    ac8a:	d509      	bpl.n	aca0 <_dtoa_r+0x380>
    ac8c:	f108 0801 	add.w	r8, r8, #1
    ac90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ac94:	e9d5 2300 	ldrd	r2, r3, [r5]
    ac98:	f7fd fc1a 	bl	84d0 <__aeabi_dmul>
    ac9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    aca0:	1064      	asrs	r4, r4, #1
    aca2:	3508      	adds	r5, #8
    aca4:	e7e3      	b.n	ac6e <_dtoa_r+0x34e>
    aca6:	f000 8107 	beq.w	aeb8 <_dtoa_r+0x598>
    acaa:	427c      	negs	r4, r7
    acac:	4b84      	ldr	r3, [pc, #528]	; (aec0 <_dtoa_r+0x5a0>)
    acae:	4d85      	ldr	r5, [pc, #532]	; (aec4 <_dtoa_r+0x5a4>)
    acb0:	f04f 0802 	mov.w	r8, #2
    acb4:	f004 020f 	and.w	r2, r4, #15
    acb8:	1124      	asrs	r4, r4, #4
    acba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    acbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    acc6:	f7fd fc03 	bl	84d0 <__aeabi_dmul>
    acca:	2300      	movs	r3, #0
    accc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    acd0:	2c00      	cmp	r4, #0
    acd2:	f040 80e5 	bne.w	aea0 <_dtoa_r+0x580>
    acd6:	2b00      	cmp	r3, #0
    acd8:	d1d0      	bne.n	ac7c <_dtoa_r+0x35c>
    acda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    acdc:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ace0:	2b00      	cmp	r3, #0
    ace2:	f000 814c 	beq.w	af7e <_dtoa_r+0x65e>
    ace6:	2200      	movs	r2, #0
    ace8:	4b77      	ldr	r3, [pc, #476]	; (aec8 <_dtoa_r+0x5a8>)
    acea:	4620      	mov	r0, r4
    acec:	4629      	mov	r1, r5
    acee:	f7fe f997 	bl	9020 <__aeabi_dcmplt>
    acf2:	2800      	cmp	r0, #0
    acf4:	f000 8143 	beq.w	af7e <_dtoa_r+0x65e>
    acf8:	f1b9 0f00 	cmp.w	r9, #0
    acfc:	f000 813f 	beq.w	af7e <_dtoa_r+0x65e>
    ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad02:	2b00      	cmp	r3, #0
    ad04:	f300 80e4 	bgt.w	aed0 <_dtoa_r+0x5b0>
    ad08:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ad0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ad10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ad12:	2b00      	cmp	r3, #0
    ad14:	db02      	blt.n	ad1c <_dtoa_r+0x3fc>
    ad16:	2f0e      	cmp	r7, #14
    ad18:	f340 8242 	ble.w	b1a0 <_dtoa_r+0x880>
    ad1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ad1e:	2a00      	cmp	r2, #0
    ad20:	f040 8267 	bne.w	b1f2 <_dtoa_r+0x8d2>
    ad24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ad26:	2500      	movs	r5, #0
    ad28:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ad2c:	f1b8 0f00 	cmp.w	r8, #0
    ad30:	d00d      	beq.n	ad4e <_dtoa_r+0x42e>
    ad32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad34:	2b00      	cmp	r3, #0
    ad36:	dd0a      	ble.n	ad4e <_dtoa_r+0x42e>
    ad38:	4543      	cmp	r3, r8
    ad3a:	9a06      	ldr	r2, [sp, #24]
    ad3c:	bfa8      	it	ge
    ad3e:	4643      	movge	r3, r8
    ad40:	1ad2      	subs	r2, r2, r3
    ad42:	eba8 0803 	sub.w	r8, r8, r3
    ad46:	9206      	str	r2, [sp, #24]
    ad48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ad4a:	1ad3      	subs	r3, r2, r3
    ad4c:	930a      	str	r3, [sp, #40]	; 0x28
    ad4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad50:	b30b      	cbz	r3, ad96 <_dtoa_r+0x476>
    ad52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ad54:	2b00      	cmp	r3, #0
    ad56:	f000 82a6 	beq.w	b2a6 <_dtoa_r+0x986>
    ad5a:	2c00      	cmp	r4, #0
    ad5c:	f000 82a1 	beq.w	b2a2 <_dtoa_r+0x982>
    ad60:	4629      	mov	r1, r5
    ad62:	4622      	mov	r2, r4
    ad64:	4658      	mov	r0, fp
    ad66:	f01a f991 	bl	2508c <__pow5mult>
    ad6a:	9a03      	ldr	r2, [sp, #12]
    ad6c:	4601      	mov	r1, r0
    ad6e:	4605      	mov	r5, r0
    ad70:	4658      	mov	r0, fp
    ad72:	f01a f8e1 	bl	24f38 <__multiply>
    ad76:	9903      	ldr	r1, [sp, #12]
    ad78:	4606      	mov	r6, r0
    ad7a:	4658      	mov	r0, fp
    ad7c:	f01a f812 	bl	24da4 <_Bfree>
    ad80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad82:	1b1b      	subs	r3, r3, r4
    ad84:	930b      	str	r3, [sp, #44]	; 0x2c
    ad86:	f000 8291 	beq.w	b2ac <_dtoa_r+0x98c>
    ad8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ad8c:	4631      	mov	r1, r6
    ad8e:	4658      	mov	r0, fp
    ad90:	f01a f97c 	bl	2508c <__pow5mult>
    ad94:	9003      	str	r0, [sp, #12]
    ad96:	2101      	movs	r1, #1
    ad98:	4658      	mov	r0, fp
    ad9a:	f01a f8b7 	bl	24f0c <__i2b>
    ad9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ada0:	4604      	mov	r4, r0
    ada2:	2b00      	cmp	r3, #0
    ada4:	f000 8284 	beq.w	b2b0 <_dtoa_r+0x990>
    ada8:	461a      	mov	r2, r3
    adaa:	4601      	mov	r1, r0
    adac:	4658      	mov	r0, fp
    adae:	f01a f96d 	bl	2508c <__pow5mult>
    adb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    adb4:	4604      	mov	r4, r0
    adb6:	2b01      	cmp	r3, #1
    adb8:	dc03      	bgt.n	adc2 <_dtoa_r+0x4a2>
    adba:	9b04      	ldr	r3, [sp, #16]
    adbc:	2b00      	cmp	r3, #0
    adbe:	f000 827c 	beq.w	b2ba <_dtoa_r+0x99a>
    adc2:	2600      	movs	r6, #0
    adc4:	6923      	ldr	r3, [r4, #16]
    adc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    adca:	6918      	ldr	r0, [r3, #16]
    adcc:	f020 fbc0 	bl	2b550 <__hi0bits>
    add0:	f1c0 0020 	rsb	r0, r0, #32
    add4:	960f      	str	r6, [sp, #60]	; 0x3c
    add6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    add8:	4418      	add	r0, r3
    adda:	f010 001f 	ands.w	r0, r0, #31
    adde:	f000 8291 	beq.w	b304 <_dtoa_r+0x9e4>
    ade2:	f1c0 0320 	rsb	r3, r0, #32
    ade6:	2b04      	cmp	r3, #4
    ade8:	f340 8281 	ble.w	b2ee <_dtoa_r+0x9ce>
    adec:	f1c0 001c 	rsb	r0, r0, #28
    adf0:	9b06      	ldr	r3, [sp, #24]
    adf2:	4403      	add	r3, r0
    adf4:	4480      	add	r8, r0
    adf6:	9306      	str	r3, [sp, #24]
    adf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    adfa:	4403      	add	r3, r0
    adfc:	930a      	str	r3, [sp, #40]	; 0x28
    adfe:	9b06      	ldr	r3, [sp, #24]
    ae00:	2b00      	cmp	r3, #0
    ae02:	dd05      	ble.n	ae10 <_dtoa_r+0x4f0>
    ae04:	461a      	mov	r2, r3
    ae06:	9903      	ldr	r1, [sp, #12]
    ae08:	4658      	mov	r0, fp
    ae0a:	f01a f999 	bl	25140 <__lshift>
    ae0e:	9003      	str	r0, [sp, #12]
    ae10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae12:	2b00      	cmp	r3, #0
    ae14:	dd05      	ble.n	ae22 <_dtoa_r+0x502>
    ae16:	4621      	mov	r1, r4
    ae18:	461a      	mov	r2, r3
    ae1a:	4658      	mov	r0, fp
    ae1c:	f01a f990 	bl	25140 <__lshift>
    ae20:	4604      	mov	r4, r0
    ae22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae24:	2b00      	cmp	r3, #0
    ae26:	f000 8276 	beq.w	b316 <_dtoa_r+0x9f6>
    ae2a:	4621      	mov	r1, r4
    ae2c:	9803      	ldr	r0, [sp, #12]
    ae2e:	f020 fbde 	bl	2b5ee <__mcmp>
    ae32:	2800      	cmp	r0, #0
    ae34:	f280 826f 	bge.w	b316 <_dtoa_r+0x9f6>
    ae38:	2300      	movs	r3, #0
    ae3a:	220a      	movs	r2, #10
    ae3c:	9903      	ldr	r1, [sp, #12]
    ae3e:	4658      	mov	r0, fp
    ae40:	f019 ffd2 	bl	24de8 <__multadd>
    ae44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae46:	1e7e      	subs	r6, r7, #1
    ae48:	9003      	str	r0, [sp, #12]
    ae4a:	2b00      	cmp	r3, #0
    ae4c:	f000 825c 	beq.w	b308 <_dtoa_r+0x9e8>
    ae50:	2300      	movs	r3, #0
    ae52:	4629      	mov	r1, r5
    ae54:	220a      	movs	r2, #10
    ae56:	4658      	mov	r0, fp
    ae58:	f019 ffc6 	bl	24de8 <__multadd>
    ae5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae5e:	4605      	mov	r5, r0
    ae60:	2b00      	cmp	r3, #0
    ae62:	dc03      	bgt.n	ae6c <_dtoa_r+0x54c>
    ae64:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ae66:	2b02      	cmp	r3, #2
    ae68:	f300 825e 	bgt.w	b328 <_dtoa_r+0xa08>
    ae6c:	f1b8 0f00 	cmp.w	r8, #0
    ae70:	dd05      	ble.n	ae7e <_dtoa_r+0x55e>
    ae72:	4629      	mov	r1, r5
    ae74:	4642      	mov	r2, r8
    ae76:	4658      	mov	r0, fp
    ae78:	f01a f962 	bl	25140 <__lshift>
    ae7c:	4605      	mov	r5, r0
    ae7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ae80:	2b00      	cmp	r3, #0
    ae82:	f000 82d0 	beq.w	b426 <_dtoa_r+0xb06>
    ae86:	6869      	ldr	r1, [r5, #4]
    ae88:	4658      	mov	r0, fp
    ae8a:	f019 ff4b 	bl	24d24 <_Balloc>
    ae8e:	4607      	mov	r7, r0
    ae90:	2800      	cmp	r0, #0
    ae92:	f040 827f 	bne.w	b394 <_dtoa_r+0xa74>
    ae96:	4b0d      	ldr	r3, [pc, #52]	; (aecc <_dtoa_r+0x5ac>)
    ae98:	4602      	mov	r2, r0
    ae9a:	f240 21ea 	movw	r1, #746	; 0x2ea
    ae9e:	e553      	b.n	a948 <_dtoa_r+0x28>
    aea0:	07e2      	lsls	r2, r4, #31
    aea2:	d506      	bpl.n	aeb2 <_dtoa_r+0x592>
    aea4:	f108 0801 	add.w	r8, r8, #1
    aea8:	e9d5 2300 	ldrd	r2, r3, [r5]
    aeac:	f7fd fb10 	bl	84d0 <__aeabi_dmul>
    aeb0:	2301      	movs	r3, #1
    aeb2:	1064      	asrs	r4, r4, #1
    aeb4:	3508      	adds	r5, #8
    aeb6:	e70b      	b.n	acd0 <_dtoa_r+0x3b0>
    aeb8:	f04f 0802 	mov.w	r8, #2
    aebc:	e70d      	b.n	acda <_dtoa_r+0x3ba>
    aebe:	bf00      	nop
    aec0:	0002c2b8 	.word	0x0002c2b8
    aec4:	0002c290 	.word	0x0002c290
    aec8:	3ff00000 	.word	0x3ff00000
    aecc:	00032c56 	.word	0x00032c56
    aed0:	4620      	mov	r0, r4
    aed2:	2200      	movs	r2, #0
    aed4:	4bac      	ldr	r3, [pc, #688]	; (b188 <_dtoa_r+0x868>)
    aed6:	4629      	mov	r1, r5
    aed8:	f7fd fafa 	bl	84d0 <__aeabi_dmul>
    aedc:	1e7e      	subs	r6, r7, #1
    aede:	f108 0801 	add.w	r8, r8, #1
    aee2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    aee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    aee8:	4640      	mov	r0, r8
    aeea:	f7fd fa87 	bl	83fc <__aeabi_i2d>
    aeee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aef2:	f7fd faed 	bl	84d0 <__aeabi_dmul>
    aef6:	4ba5      	ldr	r3, [pc, #660]	; (b18c <_dtoa_r+0x86c>)
    aef8:	2200      	movs	r2, #0
    aefa:	f7fd f933 	bl	8164 <__adddf3>
    aefe:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    af02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    af06:	9311      	str	r3, [sp, #68]	; 0x44
    af08:	2c00      	cmp	r4, #0
    af0a:	d13b      	bne.n	af84 <_dtoa_r+0x664>
    af0c:	2200      	movs	r2, #0
    af0e:	4ba0      	ldr	r3, [pc, #640]	; (b190 <_dtoa_r+0x870>)
    af10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af14:	f7fd f924 	bl	8160 <__aeabi_dsub>
    af18:	4602      	mov	r2, r0
    af1a:	460b      	mov	r3, r1
    af1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    af20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    af24:	f7fe f89a 	bl	905c <__aeabi_dcmpgt>
    af28:	2800      	cmp	r0, #0
    af2a:	f040 8157 	bne.w	b1dc <_dtoa_r+0x8bc>
    af2e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    af32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    af36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af3a:	f7fe f871 	bl	9020 <__aeabi_dcmplt>
    af3e:	2800      	cmp	r0, #0
    af40:	f43f aee2 	beq.w	ad08 <_dtoa_r+0x3e8>
    af44:	2400      	movs	r4, #0
    af46:	4625      	mov	r5, r4
    af48:	9b21      	ldr	r3, [sp, #132]	; 0x84
    af4a:	f8dd a020 	ldr.w	sl, [sp, #32]
    af4e:	43de      	mvns	r6, r3
    af50:	f04f 0800 	mov.w	r8, #0
    af54:	4621      	mov	r1, r4
    af56:	4658      	mov	r0, fp
    af58:	f019 ff24 	bl	24da4 <_Bfree>
    af5c:	2d00      	cmp	r5, #0
    af5e:	f000 80a9 	beq.w	b0b4 <_dtoa_r+0x794>
    af62:	f1b8 0f00 	cmp.w	r8, #0
    af66:	d005      	beq.n	af74 <_dtoa_r+0x654>
    af68:	45a8      	cmp	r8, r5
    af6a:	d003      	beq.n	af74 <_dtoa_r+0x654>
    af6c:	4641      	mov	r1, r8
    af6e:	4658      	mov	r0, fp
    af70:	f019 ff18 	bl	24da4 <_Bfree>
    af74:	4629      	mov	r1, r5
    af76:	4658      	mov	r0, fp
    af78:	f019 ff14 	bl	24da4 <_Bfree>
    af7c:	e09a      	b.n	b0b4 <_dtoa_r+0x794>
    af7e:	463e      	mov	r6, r7
    af80:	464c      	mov	r4, r9
    af82:	e7b1      	b.n	aee8 <_dtoa_r+0x5c8>
    af84:	4b83      	ldr	r3, [pc, #524]	; (b194 <_dtoa_r+0x874>)
    af86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    af8a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    af8e:	9b08      	ldr	r3, [sp, #32]
    af90:	441c      	add	r4, r3
    af92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af94:	2b00      	cmp	r3, #0
    af96:	d04a      	beq.n	b02e <_dtoa_r+0x70e>
    af98:	4602      	mov	r2, r0
    af9a:	460b      	mov	r3, r1
    af9c:	2000      	movs	r0, #0
    af9e:	497e      	ldr	r1, [pc, #504]	; (b198 <_dtoa_r+0x878>)
    afa0:	f7fd fbc0 	bl	8724 <__aeabi_ddiv>
    afa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    afa8:	f7fd f8da 	bl	8160 <__aeabi_dsub>
    afac:	f8dd a020 	ldr.w	sl, [sp, #32]
    afb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    afb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    afb8:	f7fe f890 	bl	90dc <__aeabi_d2iz>
    afbc:	4605      	mov	r5, r0
    afbe:	f7fd fa1d 	bl	83fc <__aeabi_i2d>
    afc2:	4602      	mov	r2, r0
    afc4:	3530      	adds	r5, #48	; 0x30
    afc6:	460b      	mov	r3, r1
    afc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    afcc:	f7fd f8c8 	bl	8160 <__aeabi_dsub>
    afd0:	f80a 5b01 	strb.w	r5, [sl], #1
    afd4:	4602      	mov	r2, r0
    afd6:	460b      	mov	r3, r1
    afd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    afdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    afe0:	f7fe f83c 	bl	905c <__aeabi_dcmpgt>
    afe4:	2800      	cmp	r0, #0
    afe6:	d165      	bne.n	b0b4 <_dtoa_r+0x794>
    afe8:	2000      	movs	r0, #0
    afea:	496c      	ldr	r1, [pc, #432]	; (b19c <_dtoa_r+0x87c>)
    afec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aff0:	f7fd f8b6 	bl	8160 <__aeabi_dsub>
    aff4:	4602      	mov	r2, r0
    aff6:	460b      	mov	r3, r1
    aff8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    affc:	f7fe f82e 	bl	905c <__aeabi_dcmpgt>
    b000:	2800      	cmp	r0, #0
    b002:	f040 810d 	bne.w	b220 <_dtoa_r+0x900>
    b006:	45a2      	cmp	sl, r4
    b008:	f000 80ea 	beq.w	b1e0 <_dtoa_r+0x8c0>
    b00c:	2200      	movs	r2, #0
    b00e:	4b5e      	ldr	r3, [pc, #376]	; (b188 <_dtoa_r+0x868>)
    b010:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b014:	f7fd fa5c 	bl	84d0 <__aeabi_dmul>
    b018:	2200      	movs	r2, #0
    b01a:	4b5b      	ldr	r3, [pc, #364]	; (b188 <_dtoa_r+0x868>)
    b01c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b024:	f7fd fa54 	bl	84d0 <__aeabi_dmul>
    b028:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b02c:	e7c2      	b.n	afb4 <_dtoa_r+0x694>
    b02e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b032:	f7fd fa4d 	bl	84d0 <__aeabi_dmul>
    b036:	46a0      	mov	r8, r4
    b038:	f8dd a020 	ldr.w	sl, [sp, #32]
    b03c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b040:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b044:	f7fe f84a 	bl	90dc <__aeabi_d2iz>
    b048:	4605      	mov	r5, r0
    b04a:	f7fd f9d7 	bl	83fc <__aeabi_i2d>
    b04e:	4602      	mov	r2, r0
    b050:	3530      	adds	r5, #48	; 0x30
    b052:	460b      	mov	r3, r1
    b054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b058:	f7fd f882 	bl	8160 <__aeabi_dsub>
    b05c:	f80a 5b01 	strb.w	r5, [sl], #1
    b060:	4602      	mov	r2, r0
    b062:	460b      	mov	r3, r1
    b064:	45a2      	cmp	sl, r4
    b066:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b06a:	f04f 0200 	mov.w	r2, #0
    b06e:	d123      	bne.n	b0b8 <_dtoa_r+0x798>
    b070:	4b49      	ldr	r3, [pc, #292]	; (b198 <_dtoa_r+0x878>)
    b072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b076:	f7fd f875 	bl	8164 <__adddf3>
    b07a:	4602      	mov	r2, r0
    b07c:	460b      	mov	r3, r1
    b07e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b082:	f7fd ffeb 	bl	905c <__aeabi_dcmpgt>
    b086:	2800      	cmp	r0, #0
    b088:	f040 80ca 	bne.w	b220 <_dtoa_r+0x900>
    b08c:	2000      	movs	r0, #0
    b08e:	4942      	ldr	r1, [pc, #264]	; (b198 <_dtoa_r+0x878>)
    b090:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b094:	f7fd f864 	bl	8160 <__aeabi_dsub>
    b098:	4602      	mov	r2, r0
    b09a:	460b      	mov	r3, r1
    b09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0a0:	f7fd ffbe 	bl	9020 <__aeabi_dcmplt>
    b0a4:	b170      	cbz	r0, b0c4 <_dtoa_r+0x7a4>
    b0a6:	46c2      	mov	sl, r8
    b0a8:	f108 38ff 	add.w	r8, r8, #4294967295
    b0ac:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b0b0:	2b30      	cmp	r3, #48	; 0x30
    b0b2:	d0f8      	beq.n	b0a6 <_dtoa_r+0x786>
    b0b4:	4637      	mov	r7, r6
    b0b6:	e055      	b.n	b164 <_dtoa_r+0x844>
    b0b8:	4b33      	ldr	r3, [pc, #204]	; (b188 <_dtoa_r+0x868>)
    b0ba:	f7fd fa09 	bl	84d0 <__aeabi_dmul>
    b0be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b0c2:	e7bd      	b.n	b040 <_dtoa_r+0x720>
    b0c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b0c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	f6ff ae28 	blt.w	ad24 <_dtoa_r+0x404>
    b0d4:	2f0e      	cmp	r7, #14
    b0d6:	f73f ae25 	bgt.w	ad24 <_dtoa_r+0x404>
    b0da:	4b2e      	ldr	r3, [pc, #184]	; (b194 <_dtoa_r+0x874>)
    b0dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b0e0:	e9d3 3400 	ldrd	r3, r4, [r3]
    b0e4:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b0e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	da02      	bge.n	b0f4 <_dtoa_r+0x7d4>
    b0ee:	f1b9 0f00 	cmp.w	r9, #0
    b0f2:	d064      	beq.n	b1be <_dtoa_r+0x89e>
    b0f4:	f8dd a020 	ldr.w	sl, [sp, #32]
    b0f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    b0fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b100:	4620      	mov	r0, r4
    b102:	4629      	mov	r1, r5
    b104:	f7fd fb0e 	bl	8724 <__aeabi_ddiv>
    b108:	f7fd ffe8 	bl	90dc <__aeabi_d2iz>
    b10c:	4606      	mov	r6, r0
    b10e:	f7fd f975 	bl	83fc <__aeabi_i2d>
    b112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b116:	f7fd f9db 	bl	84d0 <__aeabi_dmul>
    b11a:	4602      	mov	r2, r0
    b11c:	4620      	mov	r0, r4
    b11e:	f106 0430 	add.w	r4, r6, #48	; 0x30
    b122:	460b      	mov	r3, r1
    b124:	4629      	mov	r1, r5
    b126:	f7fd f81b 	bl	8160 <__aeabi_dsub>
    b12a:	f80a 4b01 	strb.w	r4, [sl], #1
    b12e:	9c08      	ldr	r4, [sp, #32]
    b130:	4602      	mov	r2, r0
    b132:	460b      	mov	r3, r1
    b134:	ebaa 0404 	sub.w	r4, sl, r4
    b138:	45a1      	cmp	r9, r4
    b13a:	f040 8082 	bne.w	b242 <_dtoa_r+0x922>
    b13e:	f7fd f811 	bl	8164 <__adddf3>
    b142:	4604      	mov	r4, r0
    b144:	460d      	mov	r5, r1
    b146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b14a:	f7fd ff87 	bl	905c <__aeabi_dcmpgt>
    b14e:	2800      	cmp	r0, #0
    b150:	d165      	bne.n	b21e <_dtoa_r+0x8fe>
    b152:	4620      	mov	r0, r4
    b154:	4629      	mov	r1, r5
    b156:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b15a:	f7fd ff57 	bl	900c <__aeabi_dcmpeq>
    b15e:	b108      	cbz	r0, b164 <_dtoa_r+0x844>
    b160:	07f3      	lsls	r3, r6, #31
    b162:	d45c      	bmi.n	b21e <_dtoa_r+0x8fe>
    b164:	9903      	ldr	r1, [sp, #12]
    b166:	4658      	mov	r0, fp
    b168:	f019 fe1c 	bl	24da4 <_Bfree>
    b16c:	2300      	movs	r3, #0
    b16e:	3701      	adds	r7, #1
    b170:	f88a 3000 	strb.w	r3, [sl]
    b174:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b176:	601f      	str	r7, [r3, #0]
    b178:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b17a:	2b00      	cmp	r3, #0
    b17c:	f43f ac1c 	beq.w	a9b8 <_dtoa_r+0x98>
    b180:	f8c3 a000 	str.w	sl, [r3]
    b184:	e418      	b.n	a9b8 <_dtoa_r+0x98>
    b186:	bf00      	nop
    b188:	40240000 	.word	0x40240000
    b18c:	401c0000 	.word	0x401c0000
    b190:	40140000 	.word	0x40140000
    b194:	0002c2b8 	.word	0x0002c2b8
    b198:	3fe00000 	.word	0x3fe00000
    b19c:	3ff00000 	.word	0x3ff00000
    b1a0:	4ba2      	ldr	r3, [pc, #648]	; (b42c <_dtoa_r+0xb0c>)
    b1a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b1a6:	e9d3 3400 	ldrd	r3, r4, [r3]
    b1aa:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b1ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b1b0:	2b00      	cmp	r3, #0
    b1b2:	da9f      	bge.n	b0f4 <_dtoa_r+0x7d4>
    b1b4:	f1b9 0f00 	cmp.w	r9, #0
    b1b8:	dc9c      	bgt.n	b0f4 <_dtoa_r+0x7d4>
    b1ba:	f47f aec3 	bne.w	af44 <_dtoa_r+0x624>
    b1be:	2200      	movs	r2, #0
    b1c0:	4b9b      	ldr	r3, [pc, #620]	; (b430 <_dtoa_r+0xb10>)
    b1c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b1c6:	f7fd f983 	bl	84d0 <__aeabi_dmul>
    b1ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b1ce:	f7fd ff3b 	bl	9048 <__aeabi_dcmpge>
    b1d2:	4604      	mov	r4, r0
    b1d4:	2800      	cmp	r0, #0
    b1d6:	f47f aeb5 	bne.w	af44 <_dtoa_r+0x624>
    b1da:	463e      	mov	r6, r7
    b1dc:	4625      	mov	r5, r4
    b1de:	e0b4      	b.n	b34a <_dtoa_r+0xa2a>
    b1e0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b1e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b1e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	db01      	blt.n	b1f2 <_dtoa_r+0x8d2>
    b1ee:	2f0e      	cmp	r7, #14
    b1f0:	ddd6      	ble.n	b1a0 <_dtoa_r+0x880>
    b1f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b1f4:	2a01      	cmp	r2, #1
    b1f6:	dc36      	bgt.n	b266 <_dtoa_r+0x946>
    b1f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b1fa:	b382      	cbz	r2, b25e <_dtoa_r+0x93e>
    b1fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
    b200:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b202:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b206:	9a06      	ldr	r2, [sp, #24]
    b208:	2101      	movs	r1, #1
    b20a:	4658      	mov	r0, fp
    b20c:	441a      	add	r2, r3
    b20e:	9206      	str	r2, [sp, #24]
    b210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b212:	441a      	add	r2, r3
    b214:	920a      	str	r2, [sp, #40]	; 0x28
    b216:	f019 fe79 	bl	24f0c <__i2b>
    b21a:	4605      	mov	r5, r0
    b21c:	e586      	b.n	ad2c <_dtoa_r+0x40c>
    b21e:	463e      	mov	r6, r7
    b220:	4653      	mov	r3, sl
    b222:	469a      	mov	sl, r3
    b224:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    b228:	2a39      	cmp	r2, #57	; 0x39
    b22a:	d106      	bne.n	b23a <_dtoa_r+0x91a>
    b22c:	9a08      	ldr	r2, [sp, #32]
    b22e:	429a      	cmp	r2, r3
    b230:	d1f7      	bne.n	b222 <_dtoa_r+0x902>
    b232:	2230      	movs	r2, #48	; 0x30
    b234:	9908      	ldr	r1, [sp, #32]
    b236:	3601      	adds	r6, #1
    b238:	700a      	strb	r2, [r1, #0]
    b23a:	781a      	ldrb	r2, [r3, #0]
    b23c:	3201      	adds	r2, #1
    b23e:	701a      	strb	r2, [r3, #0]
    b240:	e738      	b.n	b0b4 <_dtoa_r+0x794>
    b242:	2200      	movs	r2, #0
    b244:	4b7b      	ldr	r3, [pc, #492]	; (b434 <_dtoa_r+0xb14>)
    b246:	f7fd f943 	bl	84d0 <__aeabi_dmul>
    b24a:	2200      	movs	r2, #0
    b24c:	2300      	movs	r3, #0
    b24e:	4604      	mov	r4, r0
    b250:	460d      	mov	r5, r1
    b252:	f7fd fedb 	bl	900c <__aeabi_dcmpeq>
    b256:	2800      	cmp	r0, #0
    b258:	f43f af50 	beq.w	b0fc <_dtoa_r+0x7dc>
    b25c:	e782      	b.n	b164 <_dtoa_r+0x844>
    b25e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b260:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    b264:	e7cc      	b.n	b200 <_dtoa_r+0x8e0>
    b266:	f109 34ff 	add.w	r4, r9, #4294967295
    b26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b26c:	42a3      	cmp	r3, r4
    b26e:	db08      	blt.n	b282 <_dtoa_r+0x962>
    b270:	f1b9 0f00 	cmp.w	r9, #0
    b274:	eba3 0404 	sub.w	r4, r3, r4
    b278:	db0e      	blt.n	b298 <_dtoa_r+0x978>
    b27a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b27e:	464b      	mov	r3, r9
    b280:	e7c1      	b.n	b206 <_dtoa_r+0x8e6>
    b282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b284:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b286:	1ae3      	subs	r3, r4, r3
    b288:	940b      	str	r4, [sp, #44]	; 0x2c
    b28a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b28e:	2400      	movs	r4, #0
    b290:	441a      	add	r2, r3
    b292:	464b      	mov	r3, r9
    b294:	920f      	str	r2, [sp, #60]	; 0x3c
    b296:	e7b6      	b.n	b206 <_dtoa_r+0x8e6>
    b298:	9b06      	ldr	r3, [sp, #24]
    b29a:	eba3 0809 	sub.w	r8, r3, r9
    b29e:	2300      	movs	r3, #0
    b2a0:	e7b1      	b.n	b206 <_dtoa_r+0x8e6>
    b2a2:	9e03      	ldr	r6, [sp, #12]
    b2a4:	e571      	b.n	ad8a <_dtoa_r+0x46a>
    b2a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b2a8:	9903      	ldr	r1, [sp, #12]
    b2aa:	e570      	b.n	ad8e <_dtoa_r+0x46e>
    b2ac:	9603      	str	r6, [sp, #12]
    b2ae:	e572      	b.n	ad96 <_dtoa_r+0x476>
    b2b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b2b2:	2b01      	cmp	r3, #1
    b2b4:	dc17      	bgt.n	b2e6 <_dtoa_r+0x9c6>
    b2b6:	9b04      	ldr	r3, [sp, #16]
    b2b8:	b9ab      	cbnz	r3, b2e6 <_dtoa_r+0x9c6>
    b2ba:	9b05      	ldr	r3, [sp, #20]
    b2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    b2c0:	b99b      	cbnz	r3, b2ea <_dtoa_r+0x9ca>
    b2c2:	9b05      	ldr	r3, [sp, #20]
    b2c4:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    b2c8:	0d36      	lsrs	r6, r6, #20
    b2ca:	0536      	lsls	r6, r6, #20
    b2cc:	b136      	cbz	r6, b2dc <_dtoa_r+0x9bc>
    b2ce:	9b06      	ldr	r3, [sp, #24]
    b2d0:	2601      	movs	r6, #1
    b2d2:	3301      	adds	r3, #1
    b2d4:	9306      	str	r3, [sp, #24]
    b2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b2d8:	3301      	adds	r3, #1
    b2da:	930a      	str	r3, [sp, #40]	; 0x28
    b2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b2de:	2b00      	cmp	r3, #0
    b2e0:	f47f ad70 	bne.w	adc4 <_dtoa_r+0x4a4>
    b2e4:	960f      	str	r6, [sp, #60]	; 0x3c
    b2e6:	2001      	movs	r0, #1
    b2e8:	e575      	b.n	add6 <_dtoa_r+0x4b6>
    b2ea:	2600      	movs	r6, #0
    b2ec:	e7f6      	b.n	b2dc <_dtoa_r+0x9bc>
    b2ee:	f43f ad86 	beq.w	adfe <_dtoa_r+0x4de>
    b2f2:	331c      	adds	r3, #28
    b2f4:	9a06      	ldr	r2, [sp, #24]
    b2f6:	441a      	add	r2, r3
    b2f8:	4498      	add	r8, r3
    b2fa:	9206      	str	r2, [sp, #24]
    b2fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b2fe:	441a      	add	r2, r3
    b300:	920a      	str	r2, [sp, #40]	; 0x28
    b302:	e57c      	b.n	adfe <_dtoa_r+0x4de>
    b304:	4603      	mov	r3, r0
    b306:	e7f4      	b.n	b2f2 <_dtoa_r+0x9d2>
    b308:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b30a:	2b00      	cmp	r3, #0
    b30c:	dc2b      	bgt.n	b366 <_dtoa_r+0xa46>
    b30e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b310:	2b02      	cmp	r3, #2
    b312:	dc09      	bgt.n	b328 <_dtoa_r+0xa08>
    b314:	e027      	b.n	b366 <_dtoa_r+0xa46>
    b316:	f1b9 0f00 	cmp.w	r9, #0
    b31a:	dc1d      	bgt.n	b358 <_dtoa_r+0xa38>
    b31c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b31e:	2b02      	cmp	r3, #2
    b320:	dd1a      	ble.n	b358 <_dtoa_r+0xa38>
    b322:	463e      	mov	r6, r7
    b324:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b32a:	2b00      	cmp	r3, #0
    b32c:	f47f ae0c 	bne.w	af48 <_dtoa_r+0x628>
    b330:	4621      	mov	r1, r4
    b332:	2205      	movs	r2, #5
    b334:	4658      	mov	r0, fp
    b336:	f019 fd57 	bl	24de8 <__multadd>
    b33a:	4601      	mov	r1, r0
    b33c:	4604      	mov	r4, r0
    b33e:	9803      	ldr	r0, [sp, #12]
    b340:	f020 f955 	bl	2b5ee <__mcmp>
    b344:	2800      	cmp	r0, #0
    b346:	f77f adff 	ble.w	af48 <_dtoa_r+0x628>
    b34a:	f8dd a020 	ldr.w	sl, [sp, #32]
    b34e:	2331      	movs	r3, #49	; 0x31
    b350:	3601      	adds	r6, #1
    b352:	f80a 3b01 	strb.w	r3, [sl], #1
    b356:	e5fb      	b.n	af50 <_dtoa_r+0x630>
    b358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b35a:	463e      	mov	r6, r7
    b35c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b360:	2b00      	cmp	r3, #0
    b362:	f47f ad83 	bne.w	ae6c <_dtoa_r+0x54c>
    b366:	9f08      	ldr	r7, [sp, #32]
    b368:	4621      	mov	r1, r4
    b36a:	9803      	ldr	r0, [sp, #12]
    b36c:	f01f fee7 	bl	2b13e <quorem>
    b370:	9b08      	ldr	r3, [sp, #32]
    b372:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b376:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b378:	f807 9b01 	strb.w	r9, [r7], #1
    b37c:	1afb      	subs	r3, r7, r3
    b37e:	429a      	cmp	r2, r3
    b380:	f340 80cb 	ble.w	b51a <_dtoa_r+0xbfa>
    b384:	2300      	movs	r3, #0
    b386:	220a      	movs	r2, #10
    b388:	9903      	ldr	r1, [sp, #12]
    b38a:	4658      	mov	r0, fp
    b38c:	f019 fd2c 	bl	24de8 <__multadd>
    b390:	9003      	str	r0, [sp, #12]
    b392:	e7e9      	b.n	b368 <_dtoa_r+0xa48>
    b394:	692a      	ldr	r2, [r5, #16]
    b396:	f105 010c 	add.w	r1, r5, #12
    b39a:	300c      	adds	r0, #12
    b39c:	3202      	adds	r2, #2
    b39e:	0092      	lsls	r2, r2, #2
    b3a0:	f01f fcc6 	bl	2ad30 <memcpy>
    b3a4:	2201      	movs	r2, #1
    b3a6:	4639      	mov	r1, r7
    b3a8:	4658      	mov	r0, fp
    b3aa:	f019 fec9 	bl	25140 <__lshift>
    b3ae:	9b08      	ldr	r3, [sp, #32]
    b3b0:	46a8      	mov	r8, r5
    b3b2:	4605      	mov	r5, r0
    b3b4:	f103 0a01 	add.w	sl, r3, #1
    b3b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b3bc:	4413      	add	r3, r2
    b3be:	930a      	str	r3, [sp, #40]	; 0x28
    b3c0:	9b04      	ldr	r3, [sp, #16]
    b3c2:	f003 0301 	and.w	r3, r3, #1
    b3c6:	930b      	str	r3, [sp, #44]	; 0x2c
    b3c8:	f10a 33ff 	add.w	r3, sl, #4294967295
    b3cc:	4621      	mov	r1, r4
    b3ce:	9803      	ldr	r0, [sp, #12]
    b3d0:	9306      	str	r3, [sp, #24]
    b3d2:	f01f feb4 	bl	2b13e <quorem>
    b3d6:	4641      	mov	r1, r8
    b3d8:	9009      	str	r0, [sp, #36]	; 0x24
    b3da:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b3de:	9803      	ldr	r0, [sp, #12]
    b3e0:	f020 f905 	bl	2b5ee <__mcmp>
    b3e4:	462a      	mov	r2, r5
    b3e6:	4621      	mov	r1, r4
    b3e8:	4607      	mov	r7, r0
    b3ea:	4658      	mov	r0, fp
    b3ec:	f019 ff14 	bl	25218 <__mdiff>
    b3f0:	68c2      	ldr	r2, [r0, #12]
    b3f2:	4601      	mov	r1, r0
    b3f4:	b302      	cbz	r2, b438 <_dtoa_r+0xb18>
    b3f6:	4658      	mov	r0, fp
    b3f8:	f019 fcd4 	bl	24da4 <_Bfree>
    b3fc:	2f00      	cmp	r7, #0
    b3fe:	da3a      	bge.n	b476 <_dtoa_r+0xb56>
    b400:	2201      	movs	r2, #1
    b402:	9903      	ldr	r1, [sp, #12]
    b404:	4658      	mov	r0, fp
    b406:	f019 fe9b 	bl	25140 <__lshift>
    b40a:	4621      	mov	r1, r4
    b40c:	9003      	str	r0, [sp, #12]
    b40e:	f020 f8ee 	bl	2b5ee <__mcmp>
    b412:	2800      	cmp	r0, #0
    b414:	dc03      	bgt.n	b41e <_dtoa_r+0xafe>
    b416:	d129      	bne.n	b46c <_dtoa_r+0xb4c>
    b418:	f019 0f01 	tst.w	r9, #1
    b41c:	d026      	beq.n	b46c <_dtoa_r+0xb4c>
    b41e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b422:	d11d      	bne.n	b460 <_dtoa_r+0xb40>
    b424:	e032      	b.n	b48c <_dtoa_r+0xb6c>
    b426:	4628      	mov	r0, r5
    b428:	e7c1      	b.n	b3ae <_dtoa_r+0xa8e>
    b42a:	bf00      	nop
    b42c:	0002c2b8 	.word	0x0002c2b8
    b430:	40140000 	.word	0x40140000
    b434:	40240000 	.word	0x40240000
    b438:	900e      	str	r0, [sp, #56]	; 0x38
    b43a:	9803      	ldr	r0, [sp, #12]
    b43c:	f020 f8d7 	bl	2b5ee <__mcmp>
    b440:	990e      	ldr	r1, [sp, #56]	; 0x38
    b442:	900c      	str	r0, [sp, #48]	; 0x30
    b444:	4658      	mov	r0, fp
    b446:	f019 fcad 	bl	24da4 <_Bfree>
    b44a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b44c:	bb5a      	cbnz	r2, b4a6 <_dtoa_r+0xb86>
    b44e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b450:	b953      	cbnz	r3, b468 <_dtoa_r+0xb48>
    b452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b454:	b943      	cbnz	r3, b468 <_dtoa_r+0xb48>
    b456:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b45a:	d017      	beq.n	b48c <_dtoa_r+0xb6c>
    b45c:	2f00      	cmp	r7, #0
    b45e:	dd05      	ble.n	b46c <_dtoa_r+0xb4c>
    b460:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b462:	f103 0931 	add.w	r9, r3, #49	; 0x31
    b466:	e001      	b.n	b46c <_dtoa_r+0xb4c>
    b468:	2f00      	cmp	r7, #0
    b46a:	da2a      	bge.n	b4c2 <_dtoa_r+0xba2>
    b46c:	f8dd a018 	ldr.w	sl, [sp, #24]
    b470:	f80a 9b01 	strb.w	r9, [sl], #1
    b474:	e56e      	b.n	af54 <_dtoa_r+0x634>
    b476:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b478:	433b      	orrs	r3, r7
    b47a:	d104      	bne.n	b486 <_dtoa_r+0xb66>
    b47c:	9b04      	ldr	r3, [sp, #16]
    b47e:	f003 0301 	and.w	r3, r3, #1
    b482:	2b00      	cmp	r3, #0
    b484:	d0bc      	beq.n	b400 <_dtoa_r+0xae0>
    b486:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b48a:	d136      	bne.n	b4fa <_dtoa_r+0xbda>
    b48c:	9f06      	ldr	r7, [sp, #24]
    b48e:	2339      	movs	r3, #57	; 0x39
    b490:	f807 3b01 	strb.w	r3, [r7], #1
    b494:	46ba      	mov	sl, r7
    b496:	3f01      	subs	r7, #1
    b498:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b49c:	2b39      	cmp	r3, #57	; 0x39
    b49e:	d05a      	beq.n	b556 <_dtoa_r+0xc36>
    b4a0:	3301      	adds	r3, #1
    b4a2:	703b      	strb	r3, [r7, #0]
    b4a4:	e556      	b.n	af54 <_dtoa_r+0x634>
    b4a6:	2f00      	cmp	r7, #0
    b4a8:	db06      	blt.n	b4b8 <_dtoa_r+0xb98>
    b4aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b4ac:	433b      	orrs	r3, r7
    b4ae:	d106      	bne.n	b4be <_dtoa_r+0xb9e>
    b4b0:	9b04      	ldr	r3, [sp, #16]
    b4b2:	f003 0301 	and.w	r3, r3, #1
    b4b6:	b913      	cbnz	r3, b4be <_dtoa_r+0xb9e>
    b4b8:	2a00      	cmp	r2, #0
    b4ba:	dca1      	bgt.n	b400 <_dtoa_r+0xae0>
    b4bc:	e7d6      	b.n	b46c <_dtoa_r+0xb4c>
    b4be:	2a00      	cmp	r2, #0
    b4c0:	dce1      	bgt.n	b486 <_dtoa_r+0xb66>
    b4c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b4c4:	4657      	mov	r7, sl
    b4c6:	f80a 9c01 	strb.w	r9, [sl, #-1]
    b4ca:	4553      	cmp	r3, sl
    b4cc:	d02e      	beq.n	b52c <_dtoa_r+0xc0c>
    b4ce:	2300      	movs	r3, #0
    b4d0:	220a      	movs	r2, #10
    b4d2:	9903      	ldr	r1, [sp, #12]
    b4d4:	4658      	mov	r0, fp
    b4d6:	f019 fc87 	bl	24de8 <__multadd>
    b4da:	45a8      	cmp	r8, r5
    b4dc:	9003      	str	r0, [sp, #12]
    b4de:	f04f 0300 	mov.w	r3, #0
    b4e2:	f04f 020a 	mov.w	r2, #10
    b4e6:	4641      	mov	r1, r8
    b4e8:	4658      	mov	r0, fp
    b4ea:	d10b      	bne.n	b504 <_dtoa_r+0xbe4>
    b4ec:	f019 fc7c 	bl	24de8 <__multadd>
    b4f0:	4680      	mov	r8, r0
    b4f2:	4605      	mov	r5, r0
    b4f4:	f10a 0a01 	add.w	sl, sl, #1
    b4f8:	e766      	b.n	b3c8 <_dtoa_r+0xaa8>
    b4fa:	f8dd a018 	ldr.w	sl, [sp, #24]
    b4fe:	f109 0901 	add.w	r9, r9, #1
    b502:	e7b5      	b.n	b470 <_dtoa_r+0xb50>
    b504:	f019 fc70 	bl	24de8 <__multadd>
    b508:	4629      	mov	r1, r5
    b50a:	4680      	mov	r8, r0
    b50c:	2300      	movs	r3, #0
    b50e:	220a      	movs	r2, #10
    b510:	4658      	mov	r0, fp
    b512:	f019 fc69 	bl	24de8 <__multadd>
    b516:	4605      	mov	r5, r0
    b518:	e7ec      	b.n	b4f4 <_dtoa_r+0xbd4>
    b51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b51c:	f04f 0800 	mov.w	r8, #0
    b520:	2b00      	cmp	r3, #0
    b522:	bfcc      	ite	gt
    b524:	461f      	movgt	r7, r3
    b526:	2701      	movle	r7, #1
    b528:	9b08      	ldr	r3, [sp, #32]
    b52a:	441f      	add	r7, r3
    b52c:	2201      	movs	r2, #1
    b52e:	9903      	ldr	r1, [sp, #12]
    b530:	4658      	mov	r0, fp
    b532:	f019 fe05 	bl	25140 <__lshift>
    b536:	4621      	mov	r1, r4
    b538:	9003      	str	r0, [sp, #12]
    b53a:	f020 f858 	bl	2b5ee <__mcmp>
    b53e:	2800      	cmp	r0, #0
    b540:	dca8      	bgt.n	b494 <_dtoa_r+0xb74>
    b542:	d102      	bne.n	b54a <_dtoa_r+0xc2a>
    b544:	f019 0f01 	tst.w	r9, #1
    b548:	d1a4      	bne.n	b494 <_dtoa_r+0xb74>
    b54a:	46ba      	mov	sl, r7
    b54c:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    b550:	2b30      	cmp	r3, #48	; 0x30
    b552:	d0fa      	beq.n	b54a <_dtoa_r+0xc2a>
    b554:	e4fe      	b.n	af54 <_dtoa_r+0x634>
    b556:	9b08      	ldr	r3, [sp, #32]
    b558:	42bb      	cmp	r3, r7
    b55a:	d19b      	bne.n	b494 <_dtoa_r+0xb74>
    b55c:	2331      	movs	r3, #49	; 0x31
    b55e:	9a08      	ldr	r2, [sp, #32]
    b560:	3601      	adds	r6, #1
    b562:	7013      	strb	r3, [r2, #0]
    b564:	e4f6      	b.n	af54 <_dtoa_r+0x634>
    b566:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b568:	2b00      	cmp	r3, #0
    b56a:	f47f aa20 	bne.w	a9ae <_dtoa_r+0x8e>
    b56e:	4b01      	ldr	r3, [pc, #4]	; (b574 <_dtoa_r+0xc54>)
    b570:	f7ff ba3f 	b.w	a9f2 <_dtoa_r+0xd2>
    b574:	00032bd5 	.word	0x00032bd5

0000b578 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    b578:	4603      	mov	r3, r0
    b57a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b57c:	2401      	movs	r4, #1
    b57e:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    b580:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b582:	409c      	lsls	r4, r3
    b584:	6843      	ldr	r3, [r0, #4]
    b586:	681b      	ldr	r3, [r3, #0]
    b588:	421c      	tst	r4, r3
    b58a:	d10e      	bne.n	b5aa <gpio_pin_get_dt+0x32>
    b58c:	490e      	ldr	r1, [pc, #56]	; (b5c8 <gpio_pin_get_dt+0x50>)
    b58e:	f240 43e4 	movw	r3, #1252	; 0x4e4
    b592:	4a0e      	ldr	r2, [pc, #56]	; (b5cc <gpio_pin_get_dt+0x54>)
    b594:	480e      	ldr	r0, [pc, #56]	; (b5d0 <gpio_pin_get_dt+0x58>)
    b596:	f01a fe62 	bl	2625e <assert_print>
    b59a:	480e      	ldr	r0, [pc, #56]	; (b5d4 <gpio_pin_get_dt+0x5c>)
    b59c:	f01a fe5f 	bl	2625e <assert_print>
    b5a0:	f240 41e4 	movw	r1, #1252	; 0x4e4
    b5a4:	4809      	ldr	r0, [pc, #36]	; (b5cc <gpio_pin_get_dt+0x54>)
    b5a6:	f01a fe53 	bl	26250 <assert_post_action>
	const struct gpio_driver_data *const data =
    b5aa:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    b5ac:	6883      	ldr	r3, [r0, #8]
    b5ae:	a901      	add	r1, sp, #4
    b5b0:	685b      	ldr	r3, [r3, #4]
    b5b2:	4798      	blx	r3
	if (ret == 0) {
    b5b4:	b930      	cbnz	r0, b5c4 <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    b5b6:	682a      	ldr	r2, [r5, #0]
    b5b8:	9b01      	ldr	r3, [sp, #4]
    b5ba:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    b5bc:	4223      	tst	r3, r4
    b5be:	bf14      	ite	ne
    b5c0:	2001      	movne	r0, #1
    b5c2:	2000      	moveq	r0, #0
}
    b5c4:	b003      	add	sp, #12
    b5c6:	bd30      	pop	{r4, r5, pc}
    b5c8:	0002d057 	.word	0x0002d057
    b5cc:	0002d026 	.word	0x0002d026
    b5d0:	0002d095 	.word	0x0002d095
    b5d4:	0002d0b2 	.word	0x0002d0b2

0000b5d8 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
}

// DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    b5d8:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    b5da:	f01e fa54 	bl	29a86 <sys_clock_cycle_get_32>
    b5de:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    b5e0:	4804      	ldr	r0, [pc, #16]	; (b5f4 <digital_0_call_back+0x1c>)
    b5e2:	f01a fc7a 	bl	25eda <printk>
	if (digital_value[0] <= DIGITAL_0_LIMIT)
    b5e6:	4a04      	ldr	r2, [pc, #16]	; (b5f8 <digital_0_call_back+0x20>)
    b5e8:	8813      	ldrh	r3, [r2, #0]
		digital_value[0]++;
    b5ea:	8813      	ldrh	r3, [r2, #0]
    b5ec:	3301      	adds	r3, #1
    b5ee:	b21b      	sxth	r3, r3
    b5f0:	8013      	strh	r3, [r2, #0]
}
    b5f2:	bd08      	pop	{r3, pc}
    b5f4:	0002d0c4 	.word	0x0002d0c4
    b5f8:	20022c04 	.word	0x20022c04

0000b5fc <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    b5fc:	b508      	push	{r3, lr}
    b5fe:	f01e fa42 	bl	29a86 <sys_clock_cycle_get_32>
    b602:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    b604:	4804      	ldr	r0, [pc, #16]	; (b618 <digital_1_call_back+0x1c>)
    b606:	f01a fc68 	bl	25eda <printk>
	if (digital_value[1] <= DIGITAL_0_LIMIT)
    b60a:	4a04      	ldr	r2, [pc, #16]	; (b61c <digital_1_call_back+0x20>)
    b60c:	8853      	ldrh	r3, [r2, #2]
		digital_value[1]++;
    b60e:	8853      	ldrh	r3, [r2, #2]
    b610:	3301      	adds	r3, #1
    b612:	b21b      	sxth	r3, r3
    b614:	8053      	strh	r3, [r2, #2]
}
    b616:	bd08      	pop	{r3, pc}
    b618:	0002d0df 	.word	0x0002d0df
    b61c:	20022c04 	.word	0x20022c04

0000b620 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    b620:	b508      	push	{r3, lr}
    b622:	f01e fa30 	bl	29a86 <sys_clock_cycle_get_32>
    b626:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    b628:	4804      	ldr	r0, [pc, #16]	; (b63c <digital_2_call_back+0x1c>)
    b62a:	f01a fc56 	bl	25eda <printk>
	if (digital_value[2] <= DIGITAL_0_LIMIT)
    b62e:	4a04      	ldr	r2, [pc, #16]	; (b640 <digital_2_call_back+0x20>)
    b630:	8893      	ldrh	r3, [r2, #4]
		digital_value[2]++;
    b632:	8893      	ldrh	r3, [r2, #4]
    b634:	3301      	adds	r3, #1
    b636:	b21b      	sxth	r3, r3
    b638:	8093      	strh	r3, [r2, #4]
}
    b63a:	bd08      	pop	{r3, pc}
    b63c:	0002d0fa 	.word	0x0002d0fa
    b640:	20022c04 	.word	0x20022c04

0000b644 <shoot_minute_save_thread>:
}

// THREADS

void shoot_minute_save_thread(void)
{
    b644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// each one minute this thread will shot.
	uint64_t actual_time = k_uptime_get() / 1000;
    b648:	f01a fa2d 	bl	25aa6 <k_uptime_get>
    b64c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b650:	2300      	movs	r3, #0
    b652:	f7fd fbfd 	bl	8e50 <__aeabi_ldivmod>
	signed int h, m, s, last_minute;
	h = (actual_time / 3600);
    b656:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b65a:	2300      	movs	r3, #0
	uint64_t actual_time = k_uptime_get() / 1000;
    b65c:	460d      	mov	r5, r1
    b65e:	4606      	mov	r6, r0
	h = (actual_time / 3600);
    b660:	f7fd fc46 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time - (3600 * h)) / 60;
    b664:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b668:	fb03 f100 	mul.w	r1, r3, r0
    b66c:	1a70      	subs	r0, r6, r1
    b66e:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b672:	f04f 0300 	mov.w	r3, #0
    b676:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    b67a:	f7fd fc39 	bl	8ef0 <__aeabi_uldivmod>
    b67e:	4607      	mov	r7, r0
			if (h == 24)
			{
				h = 0;
			} // only up to 23:59:59h
			  // START RUN THE MINUTE ROUTINE
			printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n", h, m, s);
    b680:	f8df 9070 	ldr.w	r9, [pc, #112]	; b6f4 <shoot_minute_save_thread+0xb0>
		m = (actual_time - (3600 * h)) / 60;
    b684:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
		actual_time = k_uptime_get() / 1000;
    b688:	f01a fa0d 	bl	25aa6 <k_uptime_get>
    b68c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b690:	2300      	movs	r3, #0
    b692:	f7fd fbdd 	bl	8e50 <__aeabi_ldivmod>
		h = (actual_time / 3600);
    b696:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b69a:	2300      	movs	r3, #0
		actual_time = k_uptime_get() / 1000;
    b69c:	4604      	mov	r4, r0
    b69e:	4688      	mov	r8, r1
		h = (actual_time / 3600);
    b6a0:	f7fd fc26 	bl	8ef0 <__aeabi_uldivmod>
		m = (actual_time - (3600 * h)) / 60;
    b6a4:	fb0a f600 	mul.w	r6, sl, r0
		h = (actual_time / 3600);
    b6a8:	4605      	mov	r5, r0
		m = (actual_time - (3600 * h)) / 60;
    b6aa:	1ba0      	subs	r0, r4, r6
    b6ac:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b6b0:	eb68 71e6 	sbc.w	r1, r8, r6, asr #31
    b6b4:	2300      	movs	r3, #0
    b6b6:	f7fd fc1b 	bl	8ef0 <__aeabi_uldivmod>
		if (m == (last_minute + 1))
    b6ba:	1c7a      	adds	r2, r7, #1
    b6bc:	4282      	cmp	r2, r0
    b6be:	d1e3      	bne.n	b688 <shoot_minute_save_thread+0x44>
			printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n", h, m, s);
    b6c0:	233c      	movs	r3, #60	; 0x3c
				last_minute = -1;
    b6c2:	2a3b      	cmp	r2, #59	; 0x3b
    b6c4:	bf14      	ite	ne
    b6c6:	4617      	movne	r7, r2
    b6c8:	f04f 37ff 	moveq.w	r7, #4294967295
		s = (actual_time - (3600 * h) - (m * 60));
    b6cc:	1ba4      	subs	r4, r4, r6
				h = 0;
    b6ce:	2d18      	cmp	r5, #24
			printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n", h, m, s);
    b6d0:	fb03 4312 	mls	r3, r3, r2, r4
    b6d4:	bf14      	ite	ne
    b6d6:	4629      	movne	r1, r5
    b6d8:	2100      	moveq	r1, #0
    b6da:	4648      	mov	r0, r9
    b6dc:	f01a fbfd 	bl	25eda <printk>

			feed_circular_buffer();
    b6e0:	f001 fac0 	bl	cc64 <feed_circular_buffer>
			print_current_position_cb(C_Buffer_Current_Position);
    b6e4:	4b04      	ldr	r3, [pc, #16]	; (b6f8 <shoot_minute_save_thread+0xb4>)
    b6e6:	6818      	ldr	r0, [r3, #0]
    b6e8:	f001 fbfa 	bl	cee0 <print_current_position_cb>
			printk(" \n");
    b6ec:	4803      	ldr	r0, [pc, #12]	; (b6fc <shoot_minute_save_thread+0xb8>)
    b6ee:	f01a fbf4 	bl	25eda <printk>
    b6f2:	e7c7      	b.n	b684 <shoot_minute_save_thread+0x40>
    b6f4:	0002d115 	.word	0x0002d115
    b6f8:	200225ec 	.word	0x200225ec
    b6fc:	0002daa1 	.word	0x0002daa1

0000b700 <uart_2_work_handler>:
{
    b700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf2 = k_malloc(sizeof(*buf2)); // SIZE IS 92 BYTES
    b702:	206c      	movs	r0, #108	; 0x6c
    b704:	f01f fafc 	bl	2ad00 <k_malloc>
    b708:	4603      	mov	r3, r0
	if (buf2)
    b70a:	b148      	cbz	r0, b720 <uart_2_work_handler+0x20>
		buf2->len = 0;
    b70c:	2200      	movs	r2, #0
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b70e:	1d01      	adds	r1, r0, #4
		buf2->len = 0;
    b710:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b714:	480b      	ldr	r0, [pc, #44]	; (b744 <uart_2_work_handler+0x44>)
}
    b716:	b005      	add	sp, #20
    b718:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b71c:	f01a b9e0 	b.w	25ae0 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    b720:	4a09      	ldr	r2, [pc, #36]	; (b748 <uart_2_work_handler+0x48>)
    b722:	9000      	str	r0, [sp, #0]
    b724:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b728:	4908      	ldr	r1, [pc, #32]	; (b74c <uart_2_work_handler+0x4c>)
    b72a:	2202      	movs	r2, #2
    b72c:	f01a f9c9 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b730:	f240 6267 	movw	r2, #1639	; 0x667
    b734:	2300      	movs	r3, #0
    b736:	4806      	ldr	r0, [pc, #24]	; (b750 <uart_2_work_handler+0x50>)
}
    b738:	b005      	add	sp, #20
    b73a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b73e:	f016 b873 	b.w	21828 <k_work_reschedule>
    b742:	bf00      	nop
    b744:	0002bb1c 	.word	0x0002bb1c
    b748:	0002d145 	.word	0x0002d145
    b74c:	0002c154 	.word	0x0002c154
    b750:	200091b0 	.word	0x200091b0

0000b754 <uart_work_handler>:
{
    b754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    b756:	206c      	movs	r0, #108	; 0x6c
    b758:	f01f fad2 	bl	2ad00 <k_malloc>
    b75c:	4603      	mov	r3, r0
	if (buf)
    b75e:	b148      	cbz	r0, b774 <uart_work_handler+0x20>
		buf->len = 0;
    b760:	2200      	movs	r2, #0
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b762:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    b764:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b768:	480b      	ldr	r0, [pc, #44]	; (b798 <uart_work_handler+0x44>)
}
    b76a:	b005      	add	sp, #20
    b76c:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b770:	f01a b9b6 	b.w	25ae0 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_1 receive buffer");
    b774:	4a09      	ldr	r2, [pc, #36]	; (b79c <uart_work_handler+0x48>)
    b776:	9000      	str	r0, [sp, #0]
    b778:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b77c:	4908      	ldr	r1, [pc, #32]	; (b7a0 <uart_work_handler+0x4c>)
    b77e:	2202      	movs	r2, #2
    b780:	f01a f99f 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b784:	f240 6267 	movw	r2, #1639	; 0x667
    b788:	2300      	movs	r3, #0
    b78a:	4806      	ldr	r0, [pc, #24]	; (b7a4 <uart_work_handler+0x50>)
}
    b78c:	b005      	add	sp, #20
    b78e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b792:	f016 b849 	b.w	21828 <k_work_reschedule>
    b796:	bf00      	nop
    b798:	0002bb34 	.word	0x0002bb34
    b79c:	0002d170 	.word	0x0002d170
    b7a0:	0002c154 	.word	0x0002c154
    b7a4:	200091e0 	.word	0x200091e0

0000b7a8 <button3_thread>:
		print_current_position_cb_new(0);
	}
}

void button3_thread(void)
{
    b7a8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	while (1)
	{
		i = 0;
		k_sem_take(&button_3, K_FOREVER);
    b7aa:	4e09      	ldr	r6, [pc, #36]	; (b7d0 <button3_thread+0x28>)
		while (i <= C_Buffer_Current_Position)
    b7ac:	4d09      	ldr	r5, [pc, #36]	; (b7d4 <button3_thread+0x2c>)
		k_sem_take(&button_3, K_FOREVER);
    b7ae:	f04f 32ff 	mov.w	r2, #4294967295
    b7b2:	f04f 33ff 	mov.w	r3, #4294967295
    b7b6:	4630      	mov	r0, r6
    b7b8:	f01a f9a2 	bl	25b00 <k_sem_take.constprop.0.isra.0>
		i = 0;
    b7bc:	2400      	movs	r4, #0
		{
			print_current_position_cb(i);
    b7be:	4620      	mov	r0, r4
    b7c0:	f001 fb8e 	bl	cee0 <print_current_position_cb>
		while (i <= C_Buffer_Current_Position)
    b7c4:	682b      	ldr	r3, [r5, #0]
			i++;
    b7c6:	3401      	adds	r4, #1
		while (i <= C_Buffer_Current_Position)
    b7c8:	42a3      	cmp	r3, r4
    b7ca:	d3f0      	bcc.n	b7ae <button3_thread+0x6>
    b7cc:	e7f7      	b.n	b7be <button3_thread+0x16>
    b7ce:	bf00      	nop
    b7d0:	20008ae8 	.word	0x20008ae8
    b7d4:	200225ec 	.word	0x200225ec

0000b7d8 <button4_thread>:
		}
	}
}

void button4_thread(void)
{
    b7d8:	b570      	push	{r4, r5, r6, lr}
    b7da:	b086      	sub	sp, #24
	// print ISADORA PENATI FERREIRA
	char Name[] = "ISADORA PENATI FERREIRA";
    b7dc:	466a      	mov	r2, sp
    b7de:	4615      	mov	r5, r2
    b7e0:	4b0c      	ldr	r3, [pc, #48]	; (b814 <button4_thread+0x3c>)
    b7e2:	f103 0618 	add.w	r6, r3, #24
    b7e6:	4614      	mov	r4, r2
    b7e8:	6818      	ldr	r0, [r3, #0]
    b7ea:	6859      	ldr	r1, [r3, #4]
    b7ec:	3308      	adds	r3, #8
    b7ee:	c403      	stmia	r4!, {r0, r1}
    b7f0:	42b3      	cmp	r3, r6
    b7f2:	4622      	mov	r2, r4
    b7f4:	d1f7      	bne.n	b7e6 <button4_thread+0xe>
	*(packet_data+7) = 0x20;//SPACE
	*/

	while (1)
	{
		k_sem_take(&button_test, K_FOREVER);
    b7f6:	4c08      	ldr	r4, [pc, #32]	; (b818 <button4_thread+0x40>)
    b7f8:	4620      	mov	r0, r4
    b7fa:	f04f 32ff 	mov.w	r2, #4294967295
    b7fe:	f04f 33ff 	mov.w	r3, #4294967295
    b802:	f01a f97d 	bl	25b00 <k_sem_take.constprop.0.isra.0>
		bt_nus_send(NULL, Name, size);
    b806:	2218      	movs	r2, #24
    b808:	4629      	mov	r1, r5
    b80a:	2000      	movs	r0, #0
    b80c:	f005 f9da 	bl	10bc4 <bt_nus_send>
	while (1)
    b810:	e7f2      	b.n	b7f8 <button4_thread+0x20>
    b812:	bf00      	nop
    b814:	0002d19b 	.word	0x0002d19b
    b818:	20008b00 	.word	0x20008b00

0000b81c <write_memory_thread>:
{
    b81c:	b510      	push	{r4, lr}
		k_sem_take(&save_memory, K_FOREVER);
    b81e:	4c07      	ldr	r4, [pc, #28]	; (b83c <write_memory_thread+0x20>)
    b820:	4620      	mov	r0, r4
    b822:	f04f 32ff 	mov.w	r2, #4294967295
    b826:	f04f 33ff 	mov.w	r3, #4294967295
    b82a:	f01a f969 	bl	25b00 <k_sem_take.constprop.0.isra.0>
		flash_button2_counter();
    b82e:	f001 f967 	bl	cb00 <flash_button2_counter>
		print_current_position_cb_new(0);
    b832:	2000      	movs	r0, #0
    b834:	f001 fbb8 	bl	cfa8 <print_current_position_cb_new>
	while (1)
    b838:	e7f2      	b.n	b820 <write_memory_thread+0x4>
    b83a:	bf00      	nop
    b83c:	20008b30 	.word	0x20008b30

0000b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    b840:	4603      	mov	r3, r0
    b842:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    b844:	6800      	ldr	r0, [r0, #0]
    b846:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b848:	2301      	movs	r3, #1
    b84a:	6845      	ldr	r5, [r0, #4]
    b84c:	408b      	lsls	r3, r1
    b84e:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    b850:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b852:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    b854:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b856:	d10e      	bne.n	b876 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    b858:	490e      	ldr	r1, [pc, #56]	; (b894 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    b85a:	f44f 731d 	mov.w	r3, #628	; 0x274
    b85e:	4a0e      	ldr	r2, [pc, #56]	; (b898 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    b860:	480e      	ldr	r0, [pc, #56]	; (b89c <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    b862:	f01a fcfc 	bl	2625e <assert_print>
    b866:	480e      	ldr	r0, [pc, #56]	; (b8a0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    b868:	f01a fcf9 	bl	2625e <assert_print>
    b86c:	f44f 711d 	mov.w	r1, #628	; 0x274
    b870:	4809      	ldr	r0, [pc, #36]	; (b898 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    b872:	f01a fced 	bl	26250 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    b876:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    b878:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    b87a:	6994      	ldr	r4, [r2, #24]
    b87c:	bf18      	it	ne
    b87e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    b882:	46a4      	mov	ip, r4
}
    b884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    b888:	bf08      	it	eq
    b88a:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    b88e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    b892:	4760      	bx	ip
    b894:	0002d057 	.word	0x0002d057
    b898:	0002d026 	.word	0x0002d026
    b89c:	0002d095 	.word	0x0002d095
    b8a0:	0002d0b2 	.word	0x0002d0b2

0000b8a4 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    b8a4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    b8a6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    b8a8:	b08a      	sub	sp, #40	; 0x28
    b8aa:	4604      	mov	r4, r0
    b8ac:	460e      	mov	r6, r1
    b8ae:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    b8b0:	2b03      	cmp	r3, #3
    b8b2:	d820      	bhi.n	b8f6 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    b8b4:	e8df f003 	tbb	[pc, r3]
    b8b8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    b8bc:	4911      	ldr	r1, [pc, #68]	; (b904 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    b8be:	4628      	mov	r0, r5
    b8c0:	f01f fba5 	bl	2b00e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    b8c4:	9505      	str	r5, [sp, #20]
    b8c6:	7863      	ldrb	r3, [r4, #1]
    b8c8:	211e      	movs	r1, #30
    b8ca:	9304      	str	r3, [sp, #16]
    b8cc:	78a3      	ldrb	r3, [r4, #2]
    b8ce:	4630      	mov	r0, r6
    b8d0:	9303      	str	r3, [sp, #12]
    b8d2:	78e3      	ldrb	r3, [r4, #3]
    b8d4:	4a0c      	ldr	r2, [pc, #48]	; (b908 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    b8d6:	9302      	str	r3, [sp, #8]
    b8d8:	7923      	ldrb	r3, [r4, #4]
    b8da:	9301      	str	r3, [sp, #4]
    b8dc:	7963      	ldrb	r3, [r4, #5]
    b8de:	9300      	str	r3, [sp, #0]
    b8e0:	79a3      	ldrb	r3, [r4, #6]
    b8e2:	f01a fb07 	bl	25ef4 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    b8e6:	b00a      	add	sp, #40	; 0x28
    b8e8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    b8ea:	4908      	ldr	r1, [pc, #32]	; (b90c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    b8ec:	e7e7      	b.n	b8be <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    b8ee:	4908      	ldr	r1, [pc, #32]	; (b910 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    b8f0:	e7e5      	b.n	b8be <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    b8f2:	4908      	ldr	r1, [pc, #32]	; (b914 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    b8f4:	e7e3      	b.n	b8be <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    b8f6:	210a      	movs	r1, #10
    b8f8:	4628      	mov	r0, r5
    b8fa:	4a07      	ldr	r2, [pc, #28]	; (b918 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    b8fc:	f01a fafa 	bl	25ef4 <snprintk>
		break;
    b900:	e7e0      	b.n	b8c4 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    b902:	bf00      	nop
    b904:	0002d1b3 	.word	0x0002d1b3
    b908:	0002d1d5 	.word	0x0002d1d5
    b90c:	0002d1ba 	.word	0x0002d1ba
    b910:	0002d1c1 	.word	0x0002d1c1
    b914:	0002d1cb 	.word	0x0002d1cb
    b918:	00030a19 	.word	0x00030a19

0000b91c <security_changed>:
{
    b91c:	b570      	push	{r4, r5, r6, lr}
    b91e:	4614      	mov	r4, r2
    b920:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b922:	ae06      	add	r6, sp, #24
{
    b924:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b926:	f01c f9c2 	bl	27cae <bt_conn_get_dst>
    b92a:	4631      	mov	r1, r6
    b92c:	f7ff ffba 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err)
    b930:	b96c      	cbnz	r4, b94e <security_changed+0x32>
		LOG_INF("Security changed: %s level %u", addr, level);
    b932:	4b0e      	ldr	r3, [pc, #56]	; (b96c <security_changed+0x50>)
    b934:	2203      	movs	r2, #3
    b936:	e9cd 4301 	strd	r4, r3, [sp, #4]
    b93a:	4620      	mov	r0, r4
    b93c:	4623      	mov	r3, r4
    b93e:	e9cd 6503 	strd	r6, r5, [sp, #12]
    b942:	490b      	ldr	r1, [pc, #44]	; (b970 <security_changed+0x54>)
    b944:	9400      	str	r4, [sp, #0]
    b946:	f01a f8bc 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
}
    b94a:	b00e      	add	sp, #56	; 0x38
    b94c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    b94e:	4b09      	ldr	r3, [pc, #36]	; (b974 <security_changed+0x58>)
    b950:	2202      	movs	r2, #2
    b952:	9302      	str	r3, [sp, #8]
    b954:	2300      	movs	r3, #0
    b956:	e9cd 5404 	strd	r5, r4, [sp, #16]
    b95a:	4618      	mov	r0, r3
    b95c:	e9cd 3300 	strd	r3, r3, [sp]
    b960:	4903      	ldr	r1, [pc, #12]	; (b970 <security_changed+0x54>)
    b962:	9603      	str	r6, [sp, #12]
    b964:	f01a f8ad 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
}
    b968:	e7ef      	b.n	b94a <security_changed+0x2e>
    b96a:	bf00      	nop
    b96c:	0002d1f8 	.word	0x0002d1f8
    b970:	0002c154 	.word	0x0002c154
    b974:	0002d216 	.word	0x0002d216

0000b978 <pairing_failed>:
{
    b978:	b530      	push	{r4, r5, lr}
    b97a:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b97c:	ad06      	add	r5, sp, #24
{
    b97e:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b980:	f01c f995 	bl	27cae <bt_conn_get_dst>
    b984:	4629      	mov	r1, r5
    b986:	f7ff ff8d 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    b98a:	4b07      	ldr	r3, [pc, #28]	; (b9a8 <pairing_failed+0x30>)
    b98c:	2203      	movs	r2, #3
    b98e:	9302      	str	r3, [sp, #8]
    b990:	2300      	movs	r3, #0
    b992:	e9cd 5403 	strd	r5, r4, [sp, #12]
    b996:	4618      	mov	r0, r3
    b998:	e9cd 3300 	strd	r3, r3, [sp]
    b99c:	4903      	ldr	r1, [pc, #12]	; (b9ac <pairing_failed+0x34>)
    b99e:	f01a f890 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
}
    b9a2:	b00f      	add	sp, #60	; 0x3c
    b9a4:	bd30      	pop	{r4, r5, pc}
    b9a6:	bf00      	nop
    b9a8:	0002d23a 	.word	0x0002d23a
    b9ac:	0002c154 	.word	0x0002c154

0000b9b0 <pairing_complete>:
{
    b9b0:	b530      	push	{r4, r5, lr}
    b9b2:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b9b4:	ad06      	add	r5, sp, #24
{
    b9b6:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b9b8:	f01c f979 	bl	27cae <bt_conn_get_dst>
    b9bc:	4629      	mov	r1, r5
    b9be:	f7ff ff71 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    b9c2:	4b07      	ldr	r3, [pc, #28]	; (b9e0 <pairing_complete+0x30>)
    b9c4:	2203      	movs	r2, #3
    b9c6:	9302      	str	r3, [sp, #8]
    b9c8:	2300      	movs	r3, #0
    b9ca:	e9cd 5403 	strd	r5, r4, [sp, #12]
    b9ce:	4618      	mov	r0, r3
    b9d0:	e9cd 3300 	strd	r3, r3, [sp]
    b9d4:	4903      	ldr	r1, [pc, #12]	; (b9e4 <pairing_complete+0x34>)
    b9d6:	f01a f874 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
}
    b9da:	b00f      	add	sp, #60	; 0x3c
    b9dc:	bd30      	pop	{r4, r5, pc}
    b9de:	bf00      	nop
    b9e0:	0002d25d 	.word	0x0002d25d
    b9e4:	0002c154 	.word	0x0002c154

0000b9e8 <auth_cancel>:
{
    b9e8:	b510      	push	{r4, lr}
    b9ea:	b08c      	sub	sp, #48	; 0x30
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b9ec:	ac04      	add	r4, sp, #16
    b9ee:	f01c f95e 	bl	27cae <bt_conn_get_dst>
    b9f2:	4621      	mov	r1, r4
    b9f4:	f7ff ff56 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    b9f8:	4b06      	ldr	r3, [pc, #24]	; (ba14 <auth_cancel+0x2c>)
    b9fa:	2203      	movs	r2, #3
    b9fc:	9302      	str	r3, [sp, #8]
    b9fe:	2300      	movs	r3, #0
    ba00:	4905      	ldr	r1, [pc, #20]	; (ba18 <auth_cancel+0x30>)
    ba02:	4618      	mov	r0, r3
    ba04:	e9cd 3300 	strd	r3, r3, [sp]
    ba08:	9403      	str	r4, [sp, #12]
    ba0a:	f01a f85a 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
}
    ba0e:	b00c      	add	sp, #48	; 0x30
    ba10:	bd10      	pop	{r4, pc}
    ba12:	bf00      	nop
    ba14:	0002d27f 	.word	0x0002d27f
    ba18:	0002c154 	.word	0x0002c154

0000ba1c <auth_passkey_display>:
{
    ba1c:	b530      	push	{r4, r5, lr}
    ba1e:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ba20:	ad06      	add	r5, sp, #24
{
    ba22:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ba24:	f01c f943 	bl	27cae <bt_conn_get_dst>
    ba28:	4629      	mov	r1, r5
    ba2a:	f7ff ff3b 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ba2e:	4b07      	ldr	r3, [pc, #28]	; (ba4c <auth_passkey_display+0x30>)
    ba30:	2203      	movs	r2, #3
    ba32:	9302      	str	r3, [sp, #8]
    ba34:	2300      	movs	r3, #0
    ba36:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ba3a:	4618      	mov	r0, r3
    ba3c:	e9cd 3300 	strd	r3, r3, [sp]
    ba40:	4903      	ldr	r1, [pc, #12]	; (ba50 <auth_passkey_display+0x34>)
    ba42:	f01a f83e 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
}
    ba46:	b00f      	add	sp, #60	; 0x3c
    ba48:	bd30      	pop	{r4, r5, pc}
    ba4a:	bf00      	nop
    ba4c:	0002d295 	.word	0x0002d295
    ba50:	0002c154 	.word	0x0002c154

0000ba54 <auth_passkey_confirm>:
{
    ba54:	b570      	push	{r4, r5, r6, lr}
    ba56:	b08e      	sub	sp, #56	; 0x38
    ba58:	460c      	mov	r4, r1
    ba5a:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    ba5c:	f009 faa4 	bl	14fa8 <bt_conn_ref>
    ba60:	4b11      	ldr	r3, [pc, #68]	; (baa8 <auth_passkey_confirm+0x54>)
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ba62:	ae06      	add	r6, sp, #24
	auth_conn = bt_conn_ref(conn);
    ba64:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ba66:	4628      	mov	r0, r5
    ba68:	f01c f921 	bl	27cae <bt_conn_get_dst>
    ba6c:	4631      	mov	r1, r6
    ba6e:	f7ff ff19 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ba72:	e9cd 6403 	strd	r6, r4, [sp, #12]
    ba76:	2400      	movs	r4, #0
    ba78:	4d0c      	ldr	r5, [pc, #48]	; (baac <auth_passkey_confirm+0x58>)
    ba7a:	4b0d      	ldr	r3, [pc, #52]	; (bab0 <auth_passkey_confirm+0x5c>)
    ba7c:	4629      	mov	r1, r5
    ba7e:	4620      	mov	r0, r4
    ba80:	9302      	str	r3, [sp, #8]
    ba82:	2203      	movs	r2, #3
    ba84:	4623      	mov	r3, r4
    ba86:	e9cd 4400 	strd	r4, r4, [sp]
    ba8a:	f01a f81a 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    ba8e:	4b09      	ldr	r3, [pc, #36]	; (bab4 <auth_passkey_confirm+0x60>)
    ba90:	2203      	movs	r2, #3
    ba92:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ba96:	4629      	mov	r1, r5
    ba98:	4623      	mov	r3, r4
    ba9a:	4620      	mov	r0, r4
    ba9c:	9400      	str	r4, [sp, #0]
    ba9e:	f01a f810 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
}
    baa2:	b00e      	add	sp, #56	; 0x38
    baa4:	bd70      	pop	{r4, r5, r6, pc}
    baa6:	bf00      	nop
    baa8:	20009ddc 	.word	0x20009ddc
    baac:	0002c154 	.word	0x0002c154
    bab0:	0002d295 	.word	0x0002d295
    bab4:	0002d2aa 	.word	0x0002d2aa

0000bab8 <bt_receive_cb>:
{
    bab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    babc:	2400      	movs	r4, #0
{
    babe:	4605      	mov	r5, r0
    bac0:	b088      	sub	sp, #32
    bac2:	460f      	mov	r7, r1
    bac4:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    bac6:	4621      	mov	r1, r4
    bac8:	221a      	movs	r2, #26
    baca:	a801      	add	r0, sp, #4
    bacc:	9400      	str	r4, [sp, #0]
    bace:	f01f f969 	bl	2ada4 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    bad2:	4628      	mov	r0, r5
    bad4:	f01c f8eb 	bl	27cae <bt_conn_get_dst>
    bad8:	4669      	mov	r1, sp
    bada:	f7ff fee3 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    bade:	4669      	mov	r1, sp
    bae0:	481f      	ldr	r0, [pc, #124]	; (bb60 <bt_receive_cb+0xa8>)
    bae2:	f018 fd87 	bl	245f4 <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bae6:	f8df 807c 	ldr.w	r8, [pc, #124]	; bb64 <bt_receive_cb+0xac>
			k_fifo_put(&fifo_uart_tx_data, tx);
    baea:	f8df 907c 	ldr.w	r9, [pc, #124]	; bb68 <bt_receive_cb+0xb0>
	for (uint16_t pos = 0; pos != len;)
    baee:	42b4      	cmp	r4, r6
    baf0:	d007      	beq.n	bb02 <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    baf2:	206c      	movs	r0, #108	; 0x6c
    baf4:	f01f f904 	bl	2ad00 <k_malloc>
		if (!tx)
    baf8:	4605      	mov	r5, r0
    bafa:	b928      	cbnz	r0, bb08 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    bafc:	481b      	ldr	r0, [pc, #108]	; (bb6c <bt_receive_cb+0xb4>)
    bafe:	f018 fd79 	bl	245f4 <iprintf>
}
    bb02:	b008      	add	sp, #32
    bb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size)
    bb08:	1b32      	subs	r2, r6, r4
    bb0a:	2a63      	cmp	r2, #99	; 0x63
			tx->len = tx_data_size;
    bb0c:	bf8c      	ite	hi
    bb0e:	2263      	movhi	r2, #99	; 0x63
			tx->len = (len - pos);
    bb10:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    bb12:	f100 0a04 	add.w	sl, r0, #4
    bb16:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bb1a:	1939      	adds	r1, r7, r4
    bb1c:	4650      	mov	r0, sl
    bb1e:	f01f f907 	bl	2ad30 <memcpy>
		pos += tx->len;
    bb22:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    bb26:	441c      	add	r4, r3
    bb28:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r'))
    bb2a:	42a6      	cmp	r6, r4
    bb2c:	d10a      	bne.n	bb44 <bt_receive_cb+0x8c>
    bb2e:	19ba      	adds	r2, r7, r6
    bb30:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    bb34:	2a0d      	cmp	r2, #13
    bb36:	d105      	bne.n	bb44 <bt_receive_cb+0x8c>
			tx->data[tx->len] = '\n';
    bb38:	210a      	movs	r1, #10
    bb3a:	18ea      	adds	r2, r5, r3
			tx->len++;
    bb3c:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    bb3e:	7111      	strb	r1, [r2, #4]
			tx->len++;
    bb40:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bb44:	4651      	mov	r1, sl
    bb46:	4640      	mov	r0, r8
    bb48:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    bb4c:	f019 ffd0 	bl	25af0 <uart_tx.constprop.0>
		if (err)
    bb50:	2800      	cmp	r0, #0
    bb52:	d0cc      	beq.n	baee <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    bb54:	4629      	mov	r1, r5
    bb56:	4648      	mov	r0, r9
    bb58:	f01e ff1e 	bl	2a998 <k_queue_append>
    bb5c:	e7c7      	b.n	baee <bt_receive_cb+0x36>
    bb5e:	bf00      	nop
    bb60:	0002d2d9 	.word	0x0002d2d9
    bb64:	0002bb34 	.word	0x0002bb34
    bb68:	20008bb0 	.word	0x20008bb0
    bb6c:	0002d2f0 	.word	0x0002d2f0

0000bb70 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    bb70:	4603      	mov	r3, r0
    bb72:	b510      	push	{r4, lr}
    bb74:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    bb76:	7919      	ldrb	r1, [r3, #4]
    bb78:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    bb7a:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    bb7c:	fa03 f101 	lsl.w	r1, r3, r1
    bb80:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    bb82:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    bb84:	681b      	ldr	r3, [r3, #0]
    bb86:	4219      	tst	r1, r3
    bb88:	d10e      	bne.n	bba8 <gpio_pin_set_dt.isra.0+0x38>
    bb8a:	490e      	ldr	r1, [pc, #56]	; (bbc4 <gpio_pin_set_dt.isra.0+0x54>)
    bb8c:	f240 533d 	movw	r3, #1341	; 0x53d
    bb90:	4a0d      	ldr	r2, [pc, #52]	; (bbc8 <gpio_pin_set_dt.isra.0+0x58>)
    bb92:	480e      	ldr	r0, [pc, #56]	; (bbcc <gpio_pin_set_dt.isra.0+0x5c>)
    bb94:	f01a fb63 	bl	2625e <assert_print>
    bb98:	480d      	ldr	r0, [pc, #52]	; (bbd0 <gpio_pin_set_dt.isra.0+0x60>)
    bb9a:	f01a fb60 	bl	2625e <assert_print>
    bb9e:	f240 513d 	movw	r1, #1341	; 0x53d
    bba2:	4809      	ldr	r0, [pc, #36]	; (bbc8 <gpio_pin_set_dt.isra.0+0x58>)
    bba4:	f01a fb54 	bl	26250 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    bba8:	6823      	ldr	r3, [r4, #0]
    bbaa:	4219      	tst	r1, r3
    bbac:	d003      	beq.n	bbb6 <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    bbae:	b122      	cbz	r2, bbba <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    bbb0:	6883      	ldr	r3, [r0, #8]
    bbb2:	691b      	ldr	r3, [r3, #16]
    bbb4:	e003      	b.n	bbbe <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    bbb6:	2a00      	cmp	r2, #0
    bbb8:	d0fa      	beq.n	bbb0 <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    bbba:	6883      	ldr	r3, [r0, #8]
    bbbc:	68db      	ldr	r3, [r3, #12]
}
    bbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    bbc2:	4718      	bx	r3
    bbc4:	0002d057 	.word	0x0002d057
    bbc8:	0002d026 	.word	0x0002d026
    bbcc:	0002d095 	.word	0x0002d095
    bbd0:	0002d0b2 	.word	0x0002d0b2

0000bbd4 <button_pressed_1>:
{
    bbd4:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    bbd6:	4807      	ldr	r0, [pc, #28]	; (bbf4 <button_pressed_1+0x20>)
    bbd8:	f015 f886 	bl	20ce8 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    bbdc:	2101      	movs	r1, #1
    bbde:	4806      	ldr	r0, [pc, #24]	; (bbf8 <button_pressed_1+0x24>)
    bbe0:	f7ff ffc6 	bl	bb70 <gpio_pin_set_dt.isra.0>
    bbe4:	f01d ff4f 	bl	29a86 <sys_clock_cycle_get_32>
}
    bbe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bbec:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    bbee:	4803      	ldr	r0, [pc, #12]	; (bbfc <button_pressed_1+0x28>)
    bbf0:	f01a b973 	b.w	25eda <printk>
    bbf4:	20008b60 	.word	0x20008b60
    bbf8:	0002c410 	.word	0x0002c410
    bbfc:	0002d31b 	.word	0x0002d31b

0000bc00 <connected>:
{
    bc00:	b570      	push	{r4, r5, r6, lr}
    bc02:	4605      	mov	r5, r0
	if (err)
    bc04:	460c      	mov	r4, r1
{
    bc06:	b08c      	sub	sp, #48	; 0x30
	if (err)
    bc08:	b161      	cbz	r1, bc24 <connected+0x24>
		LOG_ERR("Connection failed (err %u)", err);
    bc0a:	4b14      	ldr	r3, [pc, #80]	; (bc5c <connected+0x5c>)
    bc0c:	9103      	str	r1, [sp, #12]
    bc0e:	9302      	str	r3, [sp, #8]
    bc10:	2300      	movs	r3, #0
    bc12:	2201      	movs	r2, #1
    bc14:	4618      	mov	r0, r3
    bc16:	e9cd 3300 	strd	r3, r3, [sp]
    bc1a:	4911      	ldr	r1, [pc, #68]	; (bc60 <connected+0x60>)
    bc1c:	f019 ff51 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
}
    bc20:	b00c      	add	sp, #48	; 0x30
    bc22:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc24:	ae04      	add	r6, sp, #16
    bc26:	f01c f842 	bl	27cae <bt_conn_get_dst>
    bc2a:	4631      	mov	r1, r6
    bc2c:	f7ff fe3a 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    bc30:	4b0c      	ldr	r3, [pc, #48]	; (bc64 <connected+0x64>)
    bc32:	2203      	movs	r2, #3
    bc34:	4620      	mov	r0, r4
    bc36:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bc3a:	4909      	ldr	r1, [pc, #36]	; (bc60 <connected+0x60>)
    bc3c:	4623      	mov	r3, r4
    bc3e:	9603      	str	r6, [sp, #12]
    bc40:	9400      	str	r4, [sp, #0]
    bc42:	f019 ff3e 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    bc46:	4628      	mov	r0, r5
    bc48:	f009 f9ae 	bl	14fa8 <bt_conn_ref>
    bc4c:	4b06      	ldr	r3, [pc, #24]	; (bc68 <connected+0x68>)
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bc4e:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    bc50:	6018      	str	r0, [r3, #0]
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bc52:	4806      	ldr	r0, [pc, #24]	; (bc6c <connected+0x6c>)
    bc54:	f7ff ff8c 	bl	bb70 <gpio_pin_set_dt.isra.0>
    bc58:	e7e2      	b.n	bc20 <connected+0x20>
    bc5a:	bf00      	nop
    bc5c:	0002d333 	.word	0x0002d333
    bc60:	0002c154 	.word	0x0002c154
    bc64:	0002d34e 	.word	0x0002d34e
    bc68:	20009de0 	.word	0x20009de0
    bc6c:	0002c428 	.word	0x0002c428

0000bc70 <disconnected>:
{
    bc70:	b530      	push	{r4, r5, lr}
    bc72:	460c      	mov	r4, r1
    bc74:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc76:	ad06      	add	r5, sp, #24
    bc78:	f01c f819 	bl	27cae <bt_conn_get_dst>
    bc7c:	4629      	mov	r1, r5
    bc7e:	f7ff fe11 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    bc82:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bc86:	2400      	movs	r4, #0
    bc88:	4b0d      	ldr	r3, [pc, #52]	; (bcc0 <disconnected+0x50>)
	if (auth_conn)
    bc8a:	4d0e      	ldr	r5, [pc, #56]	; (bcc4 <disconnected+0x54>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    bc8c:	4620      	mov	r0, r4
    bc8e:	9302      	str	r3, [sp, #8]
    bc90:	2203      	movs	r2, #3
    bc92:	4623      	mov	r3, r4
    bc94:	e9cd 4400 	strd	r4, r4, [sp]
    bc98:	490b      	ldr	r1, [pc, #44]	; (bcc8 <disconnected+0x58>)
    bc9a:	f019 ff12 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
	if (auth_conn)
    bc9e:	6828      	ldr	r0, [r5, #0]
    bca0:	b110      	cbz	r0, bca8 <disconnected+0x38>
		bt_conn_unref(auth_conn);
    bca2:	f009 f9a9 	bl	14ff8 <bt_conn_unref>
		auth_conn = NULL;
    bca6:	602c      	str	r4, [r5, #0]
	if (current_conn)
    bca8:	4c08      	ldr	r4, [pc, #32]	; (bccc <disconnected+0x5c>)
    bcaa:	6820      	ldr	r0, [r4, #0]
    bcac:	b130      	cbz	r0, bcbc <disconnected+0x4c>
		bt_conn_unref(current_conn);
    bcae:	f009 f9a3 	bl	14ff8 <bt_conn_unref>
		current_conn = NULL;
    bcb2:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    bcb4:	4806      	ldr	r0, [pc, #24]	; (bcd0 <disconnected+0x60>)
		current_conn = NULL;
    bcb6:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    bcb8:	f7ff ff5a 	bl	bb70 <gpio_pin_set_dt.isra.0>
}
    bcbc:	b00f      	add	sp, #60	; 0x3c
    bcbe:	bd30      	pop	{r4, r5, pc}
    bcc0:	0002d35b 	.word	0x0002d35b
    bcc4:	20009ddc 	.word	0x20009ddc
    bcc8:	0002c154 	.word	0x0002c154
    bccc:	20009de0 	.word	0x20009de0
    bcd0:	0002c428 	.word	0x0002c428

0000bcd4 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    bcd4:	4603      	mov	r3, r0
    bcd6:	b570      	push	{r4, r5, r6, lr}
    bcd8:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    bcda:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    bcdc:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    bcde:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    bce0:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    bce2:	f002 0430 	and.w	r4, r2, #48	; 0x30
    bce6:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    bce8:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    bcea:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    bcee:	d10e      	bne.n	bd0e <gpio_pin_configure_dt.isra.0+0x3a>
    bcf0:	4925      	ldr	r1, [pc, #148]	; (bd88 <gpio_pin_configure_dt.isra.0+0xb4>)
    bcf2:	f240 23b7 	movw	r3, #695	; 0x2b7
    bcf6:	4a25      	ldr	r2, [pc, #148]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bcf8:	4825      	ldr	r0, [pc, #148]	; (bd90 <gpio_pin_configure_dt.isra.0+0xbc>)
    bcfa:	f01a fab0 	bl	2625e <assert_print>
    bcfe:	4825      	ldr	r0, [pc, #148]	; (bd94 <gpio_pin_configure_dt.isra.0+0xc0>)
    bd00:	f01a faad 	bl	2625e <assert_print>
    bd04:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    bd08:	4820      	ldr	r0, [pc, #128]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bd0a:	f01a faa1 	bl	26250 <assert_post_action>
    bd0e:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    bd12:	2c02      	cmp	r4, #2
    bd14:	d10c      	bne.n	bd30 <gpio_pin_configure_dt.isra.0+0x5c>
    bd16:	4920      	ldr	r1, [pc, #128]	; (bd98 <gpio_pin_configure_dt.isra.0+0xc4>)
    bd18:	f240 23bb 	movw	r3, #699	; 0x2bb
    bd1c:	4a1b      	ldr	r2, [pc, #108]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bd1e:	481c      	ldr	r0, [pc, #112]	; (bd90 <gpio_pin_configure_dt.isra.0+0xbc>)
    bd20:	f01a fa9d 	bl	2625e <assert_print>
    bd24:	481d      	ldr	r0, [pc, #116]	; (bd9c <gpio_pin_configure_dt.isra.0+0xc8>)
    bd26:	f01a fa9a 	bl	2625e <assert_print>
    bd2a:	f240 21bb 	movw	r1, #699	; 0x2bb
    bd2e:	e7eb      	b.n	bd08 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    bd30:	f002 0406 	and.w	r4, r2, #6
    bd34:	2c04      	cmp	r4, #4
    bd36:	d109      	bne.n	bd4c <gpio_pin_configure_dt.isra.0+0x78>
    bd38:	4919      	ldr	r1, [pc, #100]	; (bda0 <gpio_pin_configure_dt.isra.0+0xcc>)
    bd3a:	f240 23bf 	movw	r3, #703	; 0x2bf
    bd3e:	4a13      	ldr	r2, [pc, #76]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bd40:	4813      	ldr	r0, [pc, #76]	; (bd90 <gpio_pin_configure_dt.isra.0+0xbc>)
    bd42:	f01a fa8c 	bl	2625e <assert_print>
    bd46:	f240 21bf 	movw	r1, #703	; 0x2bf
    bd4a:	e7dd      	b.n	bd08 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    bd4c:	2401      	movs	r4, #1
    bd4e:	681b      	ldr	r3, [r3, #0]
    bd50:	408c      	lsls	r4, r1
    bd52:	421c      	tst	r4, r3
    bd54:	d10c      	bne.n	bd70 <gpio_pin_configure_dt.isra.0+0x9c>
    bd56:	4913      	ldr	r1, [pc, #76]	; (bda4 <gpio_pin_configure_dt.isra.0+0xd0>)
    bd58:	f240 23d2 	movw	r3, #722	; 0x2d2
    bd5c:	4a0b      	ldr	r2, [pc, #44]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bd5e:	480c      	ldr	r0, [pc, #48]	; (bd90 <gpio_pin_configure_dt.isra.0+0xbc>)
    bd60:	f01a fa7d 	bl	2625e <assert_print>
    bd64:	4810      	ldr	r0, [pc, #64]	; (bda8 <gpio_pin_configure_dt.isra.0+0xd4>)
    bd66:	f01a fa7a 	bl	2625e <assert_print>
    bd6a:	f240 21d2 	movw	r1, #722	; 0x2d2
    bd6e:	e7cb      	b.n	bd08 <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bd70:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    bd72:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bd76:	bf14      	ite	ne
    bd78:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    bd7a:	43a3      	biceq	r3, r4
    bd7c:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    bd7e:	6833      	ldr	r3, [r6, #0]
}
    bd80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    bd84:	4718      	bx	r3
    bd86:	bf00      	nop
    bd88:	0002d378 	.word	0x0002d378
    bd8c:	0002d026 	.word	0x0002d026
    bd90:	0002d095 	.word	0x0002d095
    bd94:	0002d3b1 	.word	0x0002d3b1
    bd98:	0002d3ee 	.word	0x0002d3ee
    bd9c:	0002d423 	.word	0x0002d423
    bda0:	0002d475 	.word	0x0002d475
    bda4:	0002d057 	.word	0x0002d057
    bda8:	0002d0b2 	.word	0x0002d0b2

0000bdac <adc_thread>:
	}
	// k_free(packet_data);
}

void adc_thread(void)
{
    bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    bdb0:	4e36      	ldr	r6, [pc, #216]	; (be8c <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    bdb2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; be90 <adc_thread+0xe4>
    bdb6:	b085      	sub	sp, #20
	int err;

	while (1)
	{
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    bdb8:	4c36      	ldr	r4, [pc, #216]	; (be94 <adc_thread+0xe8>)
    bdba:	2700      	movs	r7, #0
    bdbc:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
			k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id] = buf_adc;
    bdbe:	f8df 80d8 	ldr.w	r8, [pc, #216]	; be98 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    bdc2:	7963      	ldrb	r3, [r4, #5]
    bdc4:	b13b      	cbz	r3, bdd6 <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    bdc6:	2301      	movs	r3, #1
    bdc8:	7922      	ldrb	r2, [r4, #4]
    bdca:	4093      	lsls	r3, r2
    bdcc:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    bdce:	7c23      	ldrb	r3, [r4, #16]
    bdd0:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    bdd2:	7c63      	ldrb	r3, [r4, #17]
    bdd4:	7473      	strb	r3, [r6, #17]
    bdd6:	f04f 32ff 	mov.w	r2, #4294967295
    bdda:	f04f 33ff 	mov.w	r3, #4294967295
    bdde:	4650      	mov	r0, sl
    bde0:	f014 fd20 	bl	20824 <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    bde4:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    bde6:	68ab      	ldr	r3, [r5, #8]
    bde8:	4631      	mov	r1, r6
    bdea:	4628      	mov	r0, r5
    bdec:	685b      	ldr	r3, [r3, #4]
    bdee:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id] = buf_adc;
    bdf0:	7922      	ldrb	r2, [r4, #4]
    bdf2:	f9b8 1000 	ldrsh.w	r1, [r8]
    bdf6:	4b29      	ldr	r3, [pc, #164]	; (be9c <adc_thread+0xf0>)
    bdf8:	9201      	str	r2, [sp, #4]
    bdfa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

			if (flag == 1)
    bdfe:	f8df 90a0 	ldr.w	r9, [pc, #160]	; bea0 <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    be02:	4650      	mov	r0, sl
    be04:	f014 fdde 	bl	209c4 <z_impl_k_mutex_unlock>
    be08:	f8d9 3000 	ldr.w	r3, [r9]
    be0c:	9a01      	ldr	r2, [sp, #4]
    be0e:	2b01      	cmp	r3, #1
    be10:	d12d      	bne.n	be6e <adc_thread+0xc2>
			{
				printk("- %s, channel %d: ", adc_channels[i].dev->name, adc_channels[i].channel_id);
    be12:	6829      	ldr	r1, [r5, #0]
    be14:	4823      	ldr	r0, [pc, #140]	; (bea4 <adc_thread+0xf8>)
    be16:	f01a f860 	bl	25eda <printk>
				printk("%" PRId16, buf_adc);
    be1a:	f9b8 1000 	ldrsh.w	r1, [r8]
    be1e:	4822      	ldr	r0, [pc, #136]	; (bea8 <adc_thread+0xfc>)
    be20:	f01a f85b 	bl	25eda <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    be24:	7963      	ldrb	r3, [r4, #5]
				val_mv = buf_adc;
    be26:	f9b8 5000 	ldrsh.w	r5, [r8]
    be2a:	b1e3      	cbz	r3, be66 <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    be2c:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    be2e:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    be30:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    be34:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    be36:	bf0a      	itet	eq
    be38:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    be3a:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    be3c:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    be3e:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    be40:	bf08      	it	eq
    be42:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    be44:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    be46:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    be48:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    be4a:	bf44      	itt	mi
    be4c:	f103 33ff 	addmi.w	r3, r3, #4294967295
    be50:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    be52:	79a0      	ldrb	r0, [r4, #6]
    be54:	a903      	add	r1, sp, #12
    be56:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    be58:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    be5a:	f00e fb35 	bl	1a4c8 <adc_gain_invert>
	if (ret == 0) {
    be5e:	b910      	cbnz	r0, be66 <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    be60:	9d03      	ldr	r5, [sp, #12]
    be62:	9b01      	ldr	r3, [sp, #4]
    be64:	411d      	asrs	r5, r3
				adc_raw_to_millivolts_dt(&adc_channels[i], &val_mv);
				printk(" = %" PRId32 " mV\n", val_mv);
    be66:	4629      	mov	r1, r5
    be68:	4810      	ldr	r0, [pc, #64]	; (beac <adc_thread+0x100>)
    be6a:	f01a f836 	bl	25eda <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    be6e:	3701      	adds	r7, #1
    be70:	2f06      	cmp	r7, #6
    be72:	f104 0414 	add.w	r4, r4, #20
    be76:	d1a4      	bne.n	bdc2 <adc_thread+0x16>
			}
		}
		flag = 0;
    be78:	2300      	movs	r3, #0
		k_sleep(K_MSEC(100));
    be7a:	f640 40cd 	movw	r0, #3277	; 0xccd
    be7e:	2100      	movs	r1, #0
		flag = 0;
    be80:	f8c9 3000 	str.w	r3, [r9]
		k_sleep(K_MSEC(100));
    be84:	f019 fe44 	bl	25b10 <k_sleep.isra.0>
	{
    be88:	e796      	b.n	bdb8 <adc_thread+0xc>
    be8a:	bf00      	nop
    be8c:	200083e4 	.word	0x200083e4
    be90:	20009e38 	.word	0x20009e38
    be94:	0002c398 	.word	0x0002c398
    be98:	20022c24 	.word	0x20022c24
    be9c:	20022c14 	.word	0x20022c14
    bea0:	20009e34 	.word	0x20009e34
    bea4:	0002d4a8 	.word	0x0002d4a8
    bea8:	0002d4bb 	.word	0x0002d4bb
    beac:	0002d4bf 	.word	0x0002d4bf

0000beb0 <uart_cb>:
{
    beb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type)
    beb2:	780b      	ldrb	r3, [r1, #0]
    beb4:	2b05      	cmp	r3, #5
    beb6:	d829      	bhi.n	bf0c <uart_cb+0x5c>
    beb8:	e8df f003 	tbb	[pc, r3]
    bebc:	6b2c9503 	.word	0x6b2c9503
    bec0:	4984      	.short	0x4984
		if ((evt->data.tx.len == 0) ||
    bec2:	688b      	ldr	r3, [r1, #8]
    bec4:	b313      	cbz	r3, bf0c <uart_cb+0x5c>
			(!evt->data.tx.buf))
    bec6:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    bec8:	b300      	cbz	r0, bf0c <uart_cb+0x5c>
		if (aborted_buf){
    beca:	4a51      	ldr	r2, [pc, #324]	; (c010 <uart_cb+0x160>)
    becc:	6813      	ldr	r3, [r2, #0]
    bece:	b1fb      	cbz	r3, bf10 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    bed0:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    bed2:	2300      	movs	r3, #0
    bed4:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    bed6:	4a4f      	ldr	r2, [pc, #316]	; (c014 <uart_cb+0x164>)
    bed8:	6013      	str	r3, [r2, #0]
		k_free(buf);
    beda:	f01e ff0a 	bl	2acf2 <k_free>
	return z_impl_k_queue_get(queue, timeout);
    bede:	2200      	movs	r2, #0
    bee0:	2300      	movs	r3, #0
    bee2:	484d      	ldr	r0, [pc, #308]	; (c018 <uart_cb+0x168>)
    bee4:	f014 fe96 	bl	20c14 <z_impl_k_queue_get>
		if (!buf)
    bee8:	b180      	cbz	r0, bf0c <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS))
    beea:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    beee:	1d01      	adds	r1, r0, #4
    bef0:	484a      	ldr	r0, [pc, #296]	; (c01c <uart_cb+0x16c>)
    bef2:	f019 fdfd 	bl	25af0 <uart_tx.constprop.0>
    bef6:	b148      	cbz	r0, bf0c <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    bef8:	4b49      	ldr	r3, [pc, #292]	; (c020 <uart_cb+0x170>)
    befa:	2202      	movs	r2, #2
    befc:	9302      	str	r3, [sp, #8]
    befe:	2300      	movs	r3, #0
    bf00:	4618      	mov	r0, r3
    bf02:	e9cd 3300 	strd	r3, r3, [sp]
    bf06:	4947      	ldr	r1, [pc, #284]	; (c024 <uart_cb+0x174>)
			LOG_WRN("Not able to allocate UART receive buffer");
    bf08:	f019 fddb 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
}
    bf0c:	b004      	add	sp, #16
    bf0e:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data);
    bf10:	3804      	subs	r0, #4
    bf12:	e7e2      	b.n	beda <uart_cb+0x2a>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    bf14:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    bf16:	68cb      	ldr	r3, [r1, #12]
    bf18:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
    bf1c:	4403      	add	r3, r0
		if (disable_req)
    bf1e:	4842      	ldr	r0, [pc, #264]	; (c028 <uart_cb+0x178>)
		buf->len += evt->data.rx.len;
    bf20:	b29b      	uxth	r3, r3
    bf22:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		if (disable_req)
    bf26:	7802      	ldrb	r2, [r0, #0]
    bf28:	2a00      	cmp	r2, #0
    bf2a:	d1ef      	bne.n	bf0c <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    bf2c:	684a      	ldr	r2, [r1, #4]
    bf2e:	4413      	add	r3, r2
    bf30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    bf34:	2b0a      	cmp	r3, #10
    bf36:	d001      	beq.n	bf3c <uart_cb+0x8c>
    bf38:	2b0d      	cmp	r3, #13
    bf3a:	d1e7      	bne.n	bf0c <uart_cb+0x5c>
			disable_req = true;
    bf3c:	2301      	movs	r3, #1
    bf3e:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    bf40:	4836      	ldr	r0, [pc, #216]	; (c01c <uart_cb+0x16c>)
    bf42:	6883      	ldr	r3, [r0, #8]
    bf44:	695b      	ldr	r3, [r3, #20]
}
    bf46:	b004      	add	sp, #16
    bf48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bf4c:	4718      	bx	r3
		disable_req = false;
    bf4e:	2400      	movs	r4, #0
    bf50:	4b35      	ldr	r3, [pc, #212]	; (c028 <uart_cb+0x178>)
		buf = k_malloc(sizeof(*buf));
    bf52:	206c      	movs	r0, #108	; 0x6c
		disable_req = false;
    bf54:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    bf56:	f01e fed3 	bl	2ad00 <k_malloc>
    bf5a:	4603      	mov	r3, r0
		if (buf)
    bf5c:	b140      	cbz	r0, bf70 <uart_cb+0xc0>
			buf->len = 0;
    bf5e:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    bf62:	1d01      	adds	r1, r0, #4
    bf64:	482d      	ldr	r0, [pc, #180]	; (c01c <uart_cb+0x16c>)
}
    bf66:	b004      	add	sp, #16
    bf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    bf6c:	f019 bdb8 	b.w	25ae0 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    bf70:	4a2e      	ldr	r2, [pc, #184]	; (c02c <uart_cb+0x17c>)
    bf72:	9000      	str	r0, [sp, #0]
    bf74:	e9cd 0201 	strd	r0, r2, [sp, #4]
    bf78:	492a      	ldr	r1, [pc, #168]	; (c024 <uart_cb+0x174>)
    bf7a:	2202      	movs	r2, #2
    bf7c:	f019 fda1 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    bf80:	f240 6267 	movw	r2, #1639	; 0x667
    bf84:	2300      	movs	r3, #0
    bf86:	482a      	ldr	r0, [pc, #168]	; (c030 <uart_cb+0x180>)
}
    bf88:	b004      	add	sp, #16
    bf8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    bf8e:	f015 bc4b 	b.w	21828 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    bf92:	206c      	movs	r0, #108	; 0x6c
    bf94:	f01e feb4 	bl	2ad00 <k_malloc>
    bf98:	4603      	mov	r3, r0
		if (buf)
    bf9a:	b160      	cbz	r0, bfb6 <uart_cb+0x106>
			buf->len = 0;
    bf9c:	2200      	movs	r2, #0
    bf9e:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	return api->rx_buf_rsp(dev, buf, len);
    bfa2:	481e      	ldr	r0, [pc, #120]	; (c01c <uart_cb+0x16c>)
    bfa4:	1d19      	adds	r1, r3, #4
    bfa6:	6882      	ldr	r2, [r0, #8]
    bfa8:	6914      	ldr	r4, [r2, #16]
    bfaa:	2264      	movs	r2, #100	; 0x64
    bfac:	4623      	mov	r3, r4
}
    bfae:	b004      	add	sp, #16
    bfb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bfb4:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    bfb6:	4a1d      	ldr	r2, [pc, #116]	; (c02c <uart_cb+0x17c>)
    bfb8:	491a      	ldr	r1, [pc, #104]	; (c024 <uart_cb+0x174>)
    bfba:	e9cd 0201 	strd	r0, r2, [sp, #4]
    bfbe:	9000      	str	r0, [sp, #0]
    bfc0:	2202      	movs	r2, #2
    bfc2:	e7a1      	b.n	bf08 <uart_cb+0x58>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    bfc4:	684b      	ldr	r3, [r1, #4]
    bfc6:	1f19      	subs	r1, r3, #4
		if (buf->len > 0)
    bfc8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
    bfcc:	b12b      	cbz	r3, bfda <uart_cb+0x12a>
			k_fifo_put(&fifo_uart_rx_data, buf);
    bfce:	4819      	ldr	r0, [pc, #100]	; (c034 <uart_cb+0x184>)
}
    bfd0:	b004      	add	sp, #16
    bfd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    bfd6:	f01e bcdf 	b.w	2a998 <k_queue_append>
			k_free(buf);
    bfda:	4608      	mov	r0, r1
}
    bfdc:	b004      	add	sp, #16
    bfde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    bfe2:	f01e be86 	b.w	2acf2 <k_free>
		if (!aborted_buf)
    bfe6:	4a0a      	ldr	r2, [pc, #40]	; (c010 <uart_cb+0x160>)
    bfe8:	6813      	ldr	r3, [r2, #0]
    bfea:	b90b      	cbnz	r3, bff0 <uart_cb+0x140>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    bfec:	684b      	ldr	r3, [r1, #4]
    bfee:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    bff0:	4808      	ldr	r0, [pc, #32]	; (c014 <uart_cb+0x164>)
    bff2:	688b      	ldr	r3, [r1, #8]
    bff4:	6801      	ldr	r1, [r0, #0]
    bff6:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    bff8:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    bffa:	6003      	str	r3, [r0, #0]
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    bffc:	f8b1 2064 	ldrh.w	r2, [r1, #100]	; 0x64
    c000:	4806      	ldr	r0, [pc, #24]	; (c01c <uart_cb+0x16c>)
    c002:	1ad2      	subs	r2, r2, r3
    c004:	4419      	add	r1, r3
}
    c006:	b004      	add	sp, #16
    c008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    c00c:	f019 bd70 	b.w	25af0 <uart_tx.constprop.0>
    c010:	20009dcc 	.word	0x20009dcc
    c014:	20009dc8 	.word	0x20009dc8
    c018:	20008bb0 	.word	0x20008bb0
    c01c:	0002bb34 	.word	0x0002bb34
    c020:	0002d4c9 	.word	0x0002d4c9
    c024:	0002c154 	.word	0x0002c154
    c028:	20022e22 	.word	0x20022e22
    c02c:	0002d4e7 	.word	0x0002d4e7
    c030:	200091e0 	.word	0x200091e0
    c034:	20008b94 	.word	0x20008b94

0000c038 <button_pressed_4>:
{
    c038:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    c03a:	4805      	ldr	r0, [pc, #20]	; (c050 <button_pressed_4+0x18>)
    c03c:	f014 fe54 	bl	20ce8 <z_impl_k_sem_give>
    c040:	f01d fd21 	bl	29a86 <sys_clock_cycle_get_32>
}
    c044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c048:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    c04a:	4802      	ldr	r0, [pc, #8]	; (c054 <button_pressed_4+0x1c>)
    c04c:	f019 bf45 	b.w	25eda <printk>
    c050:	20008b00 	.word	0x20008b00
    c054:	0002d510 	.word	0x0002d510

0000c058 <button_pressed_3>:
{
    c058:	b508      	push	{r3, lr}
    c05a:	4805      	ldr	r0, [pc, #20]	; (c070 <button_pressed_3+0x18>)
    c05c:	f014 fe44 	bl	20ce8 <z_impl_k_sem_give>
    c060:	f01d fd11 	bl	29a86 <sys_clock_cycle_get_32>
}
    c064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c068:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    c06a:	4802      	ldr	r0, [pc, #8]	; (c074 <button_pressed_3+0x1c>)
    c06c:	f019 bf35 	b.w	25eda <printk>
    c070:	20008ae8 	.word	0x20008ae8
    c074:	0002d528 	.word	0x0002d528

0000c078 <button_pressed_2>:
{
    c078:	b508      	push	{r3, lr}
    c07a:	4807      	ldr	r0, [pc, #28]	; (c098 <button_pressed_2+0x20>)
    c07c:	f014 fe34 	bl	20ce8 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    c080:	2101      	movs	r1, #1
    c082:	4806      	ldr	r0, [pc, #24]	; (c09c <button_pressed_2+0x24>)
    c084:	f7ff fd74 	bl	bb70 <gpio_pin_set_dt.isra.0>
    c088:	f01d fcfd 	bl	29a86 <sys_clock_cycle_get_32>
}
    c08c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c090:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    c092:	4803      	ldr	r0, [pc, #12]	; (c0a0 <button_pressed_2+0x28>)
    c094:	f019 bf21 	b.w	25eda <printk>
    c098:	20008b30 	.word	0x20008b30
    c09c:	0002c418 	.word	0x0002c418
    c0a0:	0002d540 	.word	0x0002d540

0000c0a4 <ble_write_thread>:
{
    c0a4:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    c0a6:	f04f 32ff 	mov.w	r2, #4294967295
    c0aa:	f04f 33ff 	mov.w	r3, #4294967295
    c0ae:	480d      	ldr	r0, [pc, #52]	; (c0e4 <ble_write_thread+0x40>)
    c0b0:	f019 fd26 	bl	25b00 <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    c0b4:	4d0c      	ldr	r5, [pc, #48]	; (c0e8 <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    c0b6:	4e0d      	ldr	r6, [pc, #52]	; (c0ec <ble_write_thread+0x48>)
    c0b8:	f04f 32ff 	mov.w	r2, #4294967295
    c0bc:	f04f 33ff 	mov.w	r3, #4294967295
    c0c0:	4628      	mov	r0, r5
    c0c2:	f014 fda7 	bl	20c14 <z_impl_k_queue_get>
    c0c6:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len))
    c0c8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    c0cc:	1d01      	adds	r1, r0, #4
    c0ce:	2000      	movs	r0, #0
    c0d0:	f004 fd78 	bl	10bc4 <bt_nus_send>
    c0d4:	b110      	cbz	r0, c0dc <ble_write_thread+0x38>
			printk("Falha aqui- Failed to send data over BLE connection");
    c0d6:	4630      	mov	r0, r6
    c0d8:	f019 feff 	bl	25eda <printk>
		k_free(buf);
    c0dc:	4620      	mov	r0, r4
    c0de:	f01e fe08 	bl	2acf2 <k_free>
	{
    c0e2:	e7e9      	b.n	c0b8 <ble_write_thread+0x14>
    c0e4:	20008ad0 	.word	0x20008ad0
    c0e8:	20008b94 	.word	0x20008b94
    c0ec:	0002d558 	.word	0x0002d558

0000c0f0 <uart_cb_2>:
{
    c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (evt->type)
    c0f4:	780b      	ldrb	r3, [r1, #0]
    c0f6:	3b02      	subs	r3, #2
    c0f8:	2b03      	cmp	r3, #3
    c0fa:	d87b      	bhi.n	c1f4 <uart_cb_2+0x104>
    c0fc:	e8df f003 	tbb	[pc, r3]
    c100:	4d716202 	.word	0x4d716202
		buf2 = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    c104:	684c      	ldr	r4, [r1, #4]
		buf2->len += evt->data.rx.len;
    c106:	68cb      	ldr	r3, [r1, #12]
    c108:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    c10c:	4d3a      	ldr	r5, [pc, #232]	; (c1f8 <uart_cb_2+0x108>)
    c10e:	4413      	add	r3, r2
    c110:	b29b      	uxth	r3, r3
    c112:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        if(buf2->data[buf2->len - 1]==0x24  && buff_marker==0){
    c116:	4423      	add	r3, r4
    c118:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c11c:	2b24      	cmp	r3, #36	; 0x24
    c11e:	d10e      	bne.n	c13e <uart_cb_2+0x4e>
    c120:	682e      	ldr	r6, [r5, #0]
    c122:	b966      	cbnz	r6, c13e <uart_cb_2+0x4e>
			buf_extra = k_malloc(sizeof(*buf_extra));
    c124:	206c      	movs	r0, #108	; 0x6c
    c126:	f01e fdeb 	bl	2ad00 <k_malloc>
    c12a:	4b34      	ldr	r3, [pc, #208]	; (c1fc <uart_cb_2+0x10c>)
			blink(LED3,2);
    c12c:	2102      	movs	r1, #2
			buf_extra = k_malloc(sizeof(*buf_extra));
    c12e:	6018      	str	r0, [r3, #0]
			buff_extra_index=0;
    c130:	4b33      	ldr	r3, [pc, #204]	; (c200 <uart_cb_2+0x110>)
			blink(LED3,2);
    c132:	4834      	ldr	r0, [pc, #208]	; (c204 <uart_cb_2+0x114>)
			buff_extra_index=0;
    c134:	601e      	str	r6, [r3, #0]
			buff_marker=1;
    c136:	2301      	movs	r3, #1
    c138:	602b      	str	r3, [r5, #0]
			blink(LED3,2);
    c13a:	f019 fceb 	bl	25b14 <blink>
        if(buff_marker==1 && (buff_extra_index<(sizeof(*buf2)-1)) ){
    c13e:	682b      	ldr	r3, [r5, #0]
    c140:	2b01      	cmp	r3, #1
    c142:	d157      	bne.n	c1f4 <uart_cb_2+0x104>
    c144:	482e      	ldr	r0, [pc, #184]	; (c200 <uart_cb_2+0x110>)
    c146:	6803      	ldr	r3, [r0, #0]
    c148:	2b6a      	cmp	r3, #106	; 0x6a
    c14a:	d853      	bhi.n	c1f4 <uart_cb_2+0x104>
		    buf_extra->data[buff_extra_index++]=buf2->data[buf2->len - 1];
    c14c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    c150:	4e2a      	ldr	r6, [pc, #168]	; (c1fc <uart_cb_2+0x10c>)
    c152:	1c5a      	adds	r2, r3, #1
    c154:	3f01      	subs	r7, #1
    c156:	6002      	str	r2, [r0, #0]
    c158:	6831      	ldr	r1, [r6, #0]
    c15a:	f814 c007 	ldrb.w	ip, [r4, r7]
    c15e:	18cf      	adds	r7, r1, r3
    c160:	f887 c004 	strb.w	ip, [r7, #4]
			if(buf2->data[buf2->len - 1]==0x0A){
    c164:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    c168:	443c      	add	r4, r7
    c16a:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    c16e:	2c0a      	cmp	r4, #10
    c170:	d140      	bne.n	c1f4 <uart_cb_2+0x104>
			   buf_extra->data[buff_extra_index++] = 0x00;
    c172:	2400      	movs	r4, #0
    c174:	3302      	adds	r3, #2
    c176:	440a      	add	r2, r1
    c178:	7114      	strb	r4, [r2, #4]
    c17a:	6003      	str	r3, [r0, #0]
			   buf_extra->len = buff_extra_index;
    c17c:	f8a1 3068 	strh.w	r3, [r1, #104]	; 0x68
				 k_fifo_put(&fifo_uart2_rx_data, buf_extra);
    c180:	4821      	ldr	r0, [pc, #132]	; (c208 <uart_cb_2+0x118>)
    c182:	f01e fc09 	bl	2a998 <k_queue_append>
				 k_free(buf_extra);
    c186:	6830      	ldr	r0, [r6, #0]
    c188:	f01e fdb3 	bl	2acf2 <k_free>
			   buff_marker=0;
    c18c:	602c      	str	r4, [r5, #0]
			   blink(LED4,2);
    c18e:	2102      	movs	r1, #2
}
    c190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			   blink(LED4,2);
    c194:	481d      	ldr	r0, [pc, #116]	; (c20c <uart_cb_2+0x11c>)
    c196:	f019 bcbd 	b.w	25b14 <blink>
		buf2 = k_malloc(sizeof(*buf2)); // THE SIZE IS 92 BYTES
    c19a:	206c      	movs	r0, #108	; 0x6c
    c19c:	f01e fdb0 	bl	2ad00 <k_malloc>
		if (buf2)
    c1a0:	b140      	cbz	r0, c1b4 <uart_cb_2+0xc4>
			buf2->len = 0;
    c1a2:	2300      	movs	r3, #0
    c1a4:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    c1a8:	1d01      	adds	r1, r0, #4
}
    c1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    c1ae:	4818      	ldr	r0, [pc, #96]	; (c210 <uart_cb_2+0x120>)
    c1b0:	f019 bc96 	b.w	25ae0 <uart_rx_enable.constprop.0>
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    c1b4:	f240 6267 	movw	r2, #1639	; 0x667
}
    c1b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    c1bc:	2300      	movs	r3, #0
    c1be:	4815      	ldr	r0, [pc, #84]	; (c214 <uart_cb_2+0x124>)
    c1c0:	f015 bb32 	b.w	21828 <k_work_reschedule>
		buf2 = k_malloc(sizeof(*buf2));
    c1c4:	206c      	movs	r0, #108	; 0x6c
    c1c6:	f01e fd9b 	bl	2ad00 <k_malloc>
		buf2->len = 0;
    c1ca:	2300      	movs	r3, #0
		buf2 = k_malloc(sizeof(*buf2));
    c1cc:	4601      	mov	r1, r0
		buf2->len = 0;
    c1ce:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    c1d2:	480f      	ldr	r0, [pc, #60]	; (c210 <uart_cb_2+0x120>)
    c1d4:	2264      	movs	r2, #100	; 0x64
}
    c1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c1da:	6883      	ldr	r3, [r0, #8]
    c1dc:	3104      	adds	r1, #4
    c1de:	691b      	ldr	r3, [r3, #16]
    c1e0:	4718      	bx	r3
		buf2 = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data);
    c1e2:	6848      	ldr	r0, [r1, #4]
		if (buf2->len > 0)
    c1e4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    c1e8:	b123      	cbz	r3, c1f4 <uart_cb_2+0x104>
}
    c1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_free(buf2);
    c1ee:	3804      	subs	r0, #4
    c1f0:	f01e bd7f 	b.w	2acf2 <k_free>
}
    c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1f8:	20009dd0 	.word	0x20009dd0
    c1fc:	20009dd8 	.word	0x20009dd8
    c200:	20009dd4 	.word	0x20009dd4
    c204:	0002c418 	.word	0x0002c418
    c208:	20008b78 	.word	0x20008b78
    c20c:	0002c410 	.word	0x0002c410
    c210:	0002bb1c 	.word	0x0002bb1c
    c214:	200091b0 	.word	0x200091b0

0000c218 <gnss_write_thread>:
	}
}

void gnss_write_thread(void)
{
    c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c21c:	b09b      	sub	sp, #108	; 0x6c
    uint8_t debug = ON;
	uint8_t value;
	uint32_t i = 0, j = 1, k = 0, h = 0, g = 0, index = 0, bfcnt = 0;
	uint64_t time = k_uptime_get();
    c21e:	f019 fc42 	bl	25aa6 <k_uptime_get>
	uint8_t state = 0, pkt_init = 0;
	static uint8_t buffer[BUFF_SIZE];

    //http://aprs.gids.nl/nmea/     sentences descriptions
    //const char nmea_id[10] = "$GPGGA"; //capture this sentence
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c222:	4b80      	ldr	r3, [pc, #512]	; (c424 <gnss_write_thread+0x20c>)
    c224:	f8df 8200 	ldr.w	r8, [pc, #512]	; c428 <gnss_write_thread+0x210>
    c228:	889a      	ldrh	r2, [r3, #4]
    c22a:	6818      	ldr	r0, [r3, #0]
    c22c:	799b      	ldrb	r3, [r3, #6]
    c22e:	f8ad 2010 	strh.w	r2, [sp, #16]
    c232:	f88d 3012 	strb.w	r3, [sp, #18]
    c236:	2300      	movs	r3, #0
    c238:	f8ad 3013 	strh.w	r3, [sp, #19]
    c23c:	f88d 3015 	strb.w	r3, [sp, #21]
	

    char *field[20];
    char *ret;
    char *token;
    char marker[2]="\n";
    c240:	230a      	movs	r3, #10
    c242:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    c246:	f8ad 3008 	strh.w	r3, [sp, #8]
    //marker[0]=0x0d;

	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c24a:	2220      	movs	r2, #32
    char marker[2]="\n";
    c24c:	4643      	mov	r3, r8
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c24e:	9003      	str	r0, [sp, #12]
	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c250:	3c01      	subs	r4, #1
    c252:	f803 2b01 	strb.w	r2, [r3], #1
    c256:	d1fb      	bne.n	c250 <gnss_write_thread+0x38>
	i = 0;

	struct uart_data_t *buf2a;
	buf2a = k_malloc(sizeof(*buf2a));
    c258:	206c      	movs	r0, #108	; 0x6c
    c25a:	f01e fd51 	bl	2ad00 <k_malloc>
	uint32_t i = 0, j = 1, k = 0, h = 0, g = 0, index = 0, bfcnt = 0;
    c25e:	46a2      	mov	sl, r4
	uint8_t state = 0, pkt_init = 0;
    c260:	4626      	mov	r6, r4
    c262:	4625      	mov	r5, r4
    c264:	f8df 91c4 	ldr.w	r9, [pc, #452]	; c42c <gnss_write_thread+0x214>
    c268:	f04f 32ff 	mov.w	r2, #4294967295
    c26c:	f04f 33ff 	mov.w	r3, #4294967295
    c270:	4648      	mov	r0, r9
    c272:	f014 fccf 	bl	20c14 <z_impl_k_queue_get>
    c276:	4607      	mov	r7, r0
	z_impl_k_queue_init(queue);
    c278:	4648      	mov	r0, r9
    c27a:	f01e fb80 	bl	2a97e <z_impl_k_queue_init>
	for (;;)
	{
		buf2a = k_fifo_get(&fifo_uart2_rx_data, K_FOREVER);
		k_fifo_init(&fifo_uart2_rx_data);

		if (buf2a->len > 0)
    c27e:	f8b7 b068 	ldrh.w	fp, [r7, #104]	; 0x68
    c282:	f1bb 0f00 	cmp.w	fp, #0
    c286:	d024      	beq.n	c2d2 <gnss_write_thread+0xba>
		{
			k = (buf2a->len);

			i = 0;
			index = 0;
			blink(LED4,2);
    c288:	2102      	movs	r1, #2
    c28a:	4869      	ldr	r0, [pc, #420]	; (c430 <gnss_write_thread+0x218>)
			k = (buf2a->len);
    c28c:	46da      	mov	sl, fp
			blink(LED4,2);
    c28e:	f019 fc41 	bl	25b14 <blink>
           
			while (i < k && pkt_init == 0)
    c292:	b9f6      	cbnz	r6, c2d2 <gnss_write_thread+0xba>
			index = 0;
    c294:	4631      	mov	r1, r6
			i = 0;
    c296:	4630      	mov	r0, r6
    c298:	f107 0c03 	add.w	ip, r7, #3
			{
				// printf("%02X ",buf2a->data[i]);
				switch (buf2a->data[i])
    c29c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    c2a0:	2b52      	cmp	r3, #82	; 0x52
    c2a2:	d807      	bhi.n	c2b4 <gnss_write_thread+0x9c>
    c2a4:	2b46      	cmp	r3, #70	; 0x46
    c2a6:	d874      	bhi.n	c392 <gnss_write_thread+0x17a>
    c2a8:	2b24      	cmp	r3, #36	; 0x24
    c2aa:	f000 8091 	beq.w	c3d0 <gnss_write_thread+0x1b8>
    c2ae:	2b43      	cmp	r3, #67	; 0x43
    c2b0:	f000 80a3 	beq.w	c3fa <gnss_write_thread+0x1e2>
						state = 6;
					    index = i - 5;
					}
					break;
				}
				i++;
    c2b4:	3001      	adds	r0, #1
			while (i < k && pkt_init == 0)
    c2b6:	4558      	cmp	r0, fp
    c2b8:	d3f0      	bcc.n	c29c <gnss_write_thread+0x84>
			}

			if (state == 6 && pkt_init == 0)
    c2ba:	2d06      	cmp	r5, #6
    c2bc:	d109      	bne.n	c2d2 <gnss_write_thread+0xba>
			{
				printf("BEGIN:\n");
    c2be:	485d      	ldr	r0, [pc, #372]	; (c434 <gnss_write_thread+0x21c>)
    c2c0:	9101      	str	r1, [sp, #4]
    c2c2:	f018 f997 	bl	245f4 <iprintf>
				while (index < k)
    c2c6:	9901      	ldr	r1, [sp, #4]
				{
					//printf("%c", buf2a->data[index]);
					if (buf2a->data[index]!=0x0D) {
    c2c8:	3704      	adds	r7, #4
				while (index < k)
    c2ca:	4559      	cmp	r1, fp
    c2cc:	f0c0 809a 	bcc.w	c404 <gnss_write_thread+0x1ec>
						buffer[bfcnt] = buf2a->data[index];
						bfcnt++;
					}
					index++;
				}
				pkt_init=1;
    c2d0:	2601      	movs	r6, #1
	return z_impl_k_queue_get(queue, timeout);
    c2d2:	f04f 33ff 	mov.w	r3, #4294967295
    c2d6:	f04f 32ff 	mov.w	r2, #4294967295
    c2da:	4648      	mov	r0, r9
    c2dc:	f014 fc9a 	bl	20c14 <z_impl_k_queue_get>
			}
		}

		buf2a = k_fifo_get(&fifo_uart2_rx_data, K_FOREVER);
		if (buf2a->len > 0)
    c2e0:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d0bf      	beq.n	c268 <gnss_write_thread+0x50>
		{
			if ((pkt_init >= 1) && (bfcnt < BUFF_SIZE)  )
    c2e8:	b176      	cbz	r6, c308 <gnss_write_thread+0xf0>
    c2ea:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c2ee:	d20e      	bcs.n	c30e <gnss_write_thread+0xf6>
    c2f0:	f10a 0203 	add.w	r2, sl, #3
    c2f4:	1cc3      	adds	r3, r0, #3
    c2f6:	4410      	add	r0, r2
			{
				index = 0;
				while ((index < k)  && (bfcnt < BUFF_SIZE))
    c2f8:	4298      	cmp	r0, r3
    c2fa:	d003      	beq.n	c304 <gnss_write_thread+0xec>
    c2fc:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c300:	f040 8088 	bne.w	c414 <gnss_write_thread+0x1fc>
						buffer[bfcnt] = buf2a->data[index];
						bfcnt++;
					}
					index++;
				}
				pkt_init++;
    c304:	3601      	adds	r6, #1
    c306:	b2f6      	uxtb	r6, r6
			}

			if (bfcnt >= BUFF_SIZE - 1)
    c308:	f5b4 7fef 	cmp.w	r4, #478	; 0x1de
    c30c:	d9ac      	bls.n	c268 <gnss_write_thread+0x50>
                index = 0;
                while(index < bfcnt ){
					//printf("%c",buffer[index]);
				   	index++;
				}
   				ret = strstr(buffer, nmea_id);
    c30e:	a903      	add	r1, sp, #12
    c310:	4845      	ldr	r0, [pc, #276]	; (c428 <gnss_write_thread+0x210>)
    c312:	f01e feb5 	bl	2b080 <strstr>
   				//printf("The substring is: %s\n", ret);
   				token = strtok(ret, marker);
    c316:	a902      	add	r1, sp, #8
    c318:	f018 f9a0 	bl	2465c <strtok>
   				//printf("%s\n", token );
   				i=parse_comma_delimited_str(token, field, 20);
    c31c:	2214      	movs	r2, #20
    c31e:	a906      	add	r1, sp, #24
    c320:	f019 fc28 	bl	25b74 <parse_comma_delimited_str>
                //debug_print_fields(i,field);
				
				if (i==12){
    c324:	280c      	cmp	r0, #12
    c326:	d129      	bne.n	c37c <gnss_write_thread+0x164>
				  printf("GPS Fixed  :%s\r\n",field[2]); //(0=invalid; 1=GPS fix; 2=Diff. GPS fix)
    c328:	9908      	ldr	r1, [sp, #32]
    c32a:	4843      	ldr	r0, [pc, #268]	; (c438 <gnss_write_thread+0x220>)
    c32c:	f018 f962 	bl	245f4 <iprintf>
				  
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c330:	9b08      	ldr	r3, [sp, #32]
    c332:	4c42      	ldr	r4, [pc, #264]	; (c43c <gnss_write_thread+0x224>)
    c334:	781b      	ldrb	r3, [r3, #0]
    c336:	3b40      	subs	r3, #64	; 0x40
    c338:	b2db      	uxtb	r3, r3
				  //printf("inteiro %d\n",position.gps_fixed);
				  if (position.gps_fixed==1){  
    c33a:	2b01      	cmp	r3, #1
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c33c:	7323      	strb	r3, [r4, #12]
				  if (position.gps_fixed==1){  
    c33e:	d11d      	bne.n	c37c <gnss_write_thread+0x164>
				   printf("TimeStamp  :%s\r\n",field[1]);
    c340:	9907      	ldr	r1, [sp, #28]
    c342:	483f      	ldr	r0, [pc, #252]	; (c440 <gnss_write_thread+0x228>)
    c344:	f018 f956 	bl	245f4 <iprintf>
				   printf("Date       :%s\r\n",field[9]);
    c348:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c34a:	483e      	ldr	r0, [pc, #248]	; (c444 <gnss_write_thread+0x22c>)
    c34c:	f018 f952 	bl	245f4 <iprintf>
                   printf("Latitude  N:%s\r\n",field[3]);
    c350:	9909      	ldr	r1, [sp, #36]	; 0x24
    c352:	483d      	ldr	r0, [pc, #244]	; (c448 <gnss_write_thread+0x230>)
    c354:	f018 f94e 	bl	245f4 <iprintf>
                   printf("Longitude E:%s\r\n",field[5]);
    c358:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c35a:	483c      	ldr	r0, [pc, #240]	; (c44c <gnss_write_thread+0x234>)
    c35c:	f018 f94a 	bl	245f4 <iprintf>
                   

				   position.latitude=atof(field[3]);
    c360:	9809      	ldr	r0, [sp, #36]	; 0x24
    c362:	f01e fcd2 	bl	2ad0a <atof>
    c366:	f7fc fac5 	bl	88f4 <__aeabi_d2f>
    c36a:	6060      	str	r0, [r4, #4]
				   position.longitude=atof(field[5]);
    c36c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c36e:	f01e fccc 	bl	2ad0a <atof>
    c372:	f7fc fabf 	bl	88f4 <__aeabi_d2f>
				   position.timestamp=field[1];
    c376:	9b07      	ldr	r3, [sp, #28]
				   position.longitude=atof(field[5]);
    c378:	60a0      	str	r0, [r4, #8]
				   position.timestamp=field[1];
    c37a:	6023      	str	r3, [r4, #0]
				pkt_init=1;
    c37c:	4643      	mov	r3, r8
    c37e:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
			    }
				index = 0;
				pkt_init = 0;
				bfcnt = 0;
				state = 0;
				while (index < BUFF_SIZE)buffer[index++] = 0x20;//space
    c382:	2220      	movs	r2, #32
    c384:	3c01      	subs	r4, #1
    c386:	f803 2b01 	strb.w	r2, [r3], #1
    c38a:	d1fb      	bne.n	c384 <gnss_write_thread+0x16c>
				pkt_init = 0;
    c38c:	4626      	mov	r6, r4
				state = 0;
    c38e:	4625      	mov	r5, r4
    c390:	e76a      	b.n	c268 <gnss_write_thread+0x50>
				switch (buf2a->data[i])
    c392:	3b47      	subs	r3, #71	; 0x47
    c394:	2b0b      	cmp	r3, #11
    c396:	d88d      	bhi.n	c2b4 <gnss_write_thread+0x9c>
    c398:	f20f 0e04 	addw	lr, pc, #4
    c39c:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    c3a0:	0000c3db 	.word	0x0000c3db
    c3a4:	0000c2b5 	.word	0x0000c2b5
    c3a8:	0000c2b5 	.word	0x0000c2b5
    c3ac:	0000c2b5 	.word	0x0000c2b5
    c3b0:	0000c2b5 	.word	0x0000c2b5
    c3b4:	0000c2b5 	.word	0x0000c2b5
    c3b8:	0000c3f3 	.word	0x0000c3f3
    c3bc:	0000c2b5 	.word	0x0000c2b5
    c3c0:	0000c2b5 	.word	0x0000c2b5
    c3c4:	0000c3e3 	.word	0x0000c3e3
    c3c8:	0000c2b5 	.word	0x0000c2b5
    c3cc:	0000c3eb 	.word	0x0000c3eb
					if (state == 0)state = 1;
    c3d0:	2d01      	cmp	r5, #1
    c3d2:	bf38      	it	cc
    c3d4:	2501      	movcc	r5, #1
    c3d6:	b2ed      	uxtb	r5, r5
    c3d8:	e76c      	b.n	c2b4 <gnss_write_thread+0x9c>
					if (state == 1)state = 2;
    c3da:	2d01      	cmp	r5, #1
    c3dc:	bf08      	it	eq
    c3de:	2502      	moveq	r5, #2
    c3e0:	e768      	b.n	c2b4 <gnss_write_thread+0x9c>
					if (state == 2)state = 3;
    c3e2:	2d02      	cmp	r5, #2
    c3e4:	bf08      	it	eq
    c3e6:	2503      	moveq	r5, #3
    c3e8:	e764      	b.n	c2b4 <gnss_write_thread+0x9c>
					if (state == 3)state = 4;
    c3ea:	2d03      	cmp	r5, #3
    c3ec:	bf08      	it	eq
    c3ee:	2504      	moveq	r5, #4
    c3f0:	e760      	b.n	c2b4 <gnss_write_thread+0x9c>
					if (state == 4)state = 5;
    c3f2:	2d04      	cmp	r5, #4
    c3f4:	bf08      	it	eq
    c3f6:	2505      	moveq	r5, #5
    c3f8:	e75c      	b.n	c2b4 <gnss_write_thread+0x9c>
					if (state == 5){
    c3fa:	2d05      	cmp	r5, #5
						state = 6;
    c3fc:	bf04      	itt	eq
    c3fe:	2506      	moveq	r5, #6
					    index = i - 5;
    c400:	1f41      	subeq	r1, r0, #5
    c402:	e757      	b.n	c2b4 <gnss_write_thread+0x9c>
					if (buf2a->data[index]!=0x0D) {
    c404:	5c7b      	ldrb	r3, [r7, r1]
					index++;
    c406:	3101      	adds	r1, #1
					if (buf2a->data[index]!=0x0D) {
    c408:	2b0d      	cmp	r3, #13
						buffer[bfcnt] = buf2a->data[index];
    c40a:	bf1c      	itt	ne
    c40c:	f808 3004 	strbne.w	r3, [r8, r4]
						bfcnt++;
    c410:	3401      	addne	r4, #1
					index++;
    c412:	e75a      	b.n	c2ca <gnss_write_thread+0xb2>
					if (buf2a->data[index]!=0x0D) {
    c414:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c418:	2a0d      	cmp	r2, #13
						buffer[bfcnt] = buf2a->data[index];
    c41a:	bf1c      	itt	ne
    c41c:	f808 2004 	strbne.w	r2, [r8, r4]
						bfcnt++;
    c420:	3401      	addne	r4, #1
					index++;
    c422:	e769      	b.n	c2f8 <gnss_write_thread+0xe0>
    c424:	0002c1a0 	.word	0x0002c1a0
    c428:	20022c42 	.word	0x20022c42
    c42c:	20008b78 	.word	0x20008b78
    c430:	0002c410 	.word	0x0002c410
    c434:	0002d58c 	.word	0x0002d58c
    c438:	0002d594 	.word	0x0002d594
    c43c:	20009de4 	.word	0x20009de4
    c440:	0002d5a5 	.word	0x0002d5a5
    c444:	0002d5b6 	.word	0x0002d5b6
    c448:	0002d5c7 	.word	0x0002d5c7
    c44c:	0002d5d8 	.word	0x0002d5d8

0000c450 <flash_init>:
{
    c450:	b570      	push	{r4, r5, r6, lr}
	fs.flash_device = NVS_PARTITION_DEVICE;
    c452:	4833      	ldr	r0, [pc, #204]	; (c520 <flash_init+0xd0>)
    c454:	4c33      	ldr	r4, [pc, #204]	; (c524 <flash_init+0xd4>)
    c456:	62a0      	str	r0, [r4, #40]	; 0x28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    c458:	f01e fa25 	bl	2a8a6 <z_device_is_ready>
	if (!device_is_ready(fs.flash_device))
    c45c:	b930      	cbnz	r0, c46c <flash_init+0x1c>
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    c45e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c460:	4831      	ldr	r0, [pc, #196]	; (c528 <flash_init+0xd8>)
    c462:	6819      	ldr	r1, [r3, #0]
}
    c464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    c468:	f019 bd37 	b.w	25eda <printk>
	fs.offset = NVS_PARTITION_OFFSET;
    c46c:	2100      	movs	r1, #0
	rc = flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info);
    c46e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	fs.offset = NVS_PARTITION_OFFSET;
    c470:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    c472:	4d2e      	ldr	r5, [pc, #184]	; (c52c <flash_init+0xdc>)
    c474:	462a      	mov	r2, r5
    c476:	f01d f8b4 	bl	295e2 <z_impl_flash_get_page_info_by_offs>
	if (rc)
    c47a:	b120      	cbz	r0, c486 <flash_init+0x36>
		printk("Unable to get page info\n");
    c47c:	482c      	ldr	r0, [pc, #176]	; (c530 <flash_init+0xe0>)
}
    c47e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash Init failed\n");
    c482:	f019 bd2a 	b.w	25eda <printk>
	fs.sector_size = info.size;
    c486:	686b      	ldr	r3, [r5, #4]
	rc = nvs_mount(&fs);
    c488:	4620      	mov	r0, r4
	fs.sector_size = info.size;
    c48a:	81a3      	strh	r3, [r4, #12]
	fs.sector_count = 2048U; // NUMBER OF SECTORS total 0X800000 BYTES
    c48c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    c490:	81e3      	strh	r3, [r4, #14]
	rc = nvs_mount(&fs);
    c492:	f003 fae9 	bl	fa68 <nvs_mount>
	if (rc)
    c496:	b108      	cbz	r0, c49c <flash_init+0x4c>
		printk("Flash Init failed\n");
    c498:	4826      	ldr	r0, [pc, #152]	; (c534 <flash_init+0xe4>)
    c49a:	e7f0      	b.n	c47e <flash_init+0x2e>
	rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    c49c:	4d26      	ldr	r5, [pc, #152]	; (c538 <flash_init+0xe8>)
    c49e:	2304      	movs	r3, #4
    c4a0:	462a      	mov	r2, r5
    c4a2:	2101      	movs	r1, #1
    c4a4:	4620      	mov	r0, r4
    c4a6:	f01a f907 	bl	266b8 <nvs_read>
	if (rc > 0)
    c4aa:	2800      	cmp	r0, #0
    c4ac:	dd21      	ble.n	c4f2 <flash_init+0xa2>
		printk("Id: %d, button2_counter: %d\n",
    c4ae:	2101      	movs	r1, #1
    c4b0:	682a      	ldr	r2, [r5, #0]
    c4b2:	4822      	ldr	r0, [pc, #136]	; (c53c <flash_init+0xec>)
    c4b4:	f019 fd11 	bl	25eda <printk>
	rc = nvs_read(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c4b8:	4c21      	ldr	r4, [pc, #132]	; (c540 <flash_init+0xf0>)
    c4ba:	2304      	movs	r3, #4
    c4bc:	4622      	mov	r2, r4
    c4be:	2102      	movs	r1, #2
    c4c0:	4818      	ldr	r0, [pc, #96]	; (c524 <flash_init+0xd4>)
    c4c2:	f01a f8f9 	bl	266b8 <nvs_read>
	if (rc > 0)
    c4c6:	2800      	cmp	r0, #0
    c4c8:	dd1e      	ble.n	c508 <flash_init+0xb8>
		printk("Id: %d, Current Position: %d\n",
    c4ca:	6822      	ldr	r2, [r4, #0]
    c4cc:	2102      	movs	r1, #2
    c4ce:	481d      	ldr	r0, [pc, #116]	; (c544 <flash_init+0xf4>)
    c4d0:	f019 fd03 	bl	25eda <printk>
		if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS)
    c4d4:	4b1c      	ldr	r3, [pc, #112]	; (c548 <flash_init+0xf8>)
    c4d6:	681a      	ldr	r2, [r3, #0]
    c4d8:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
			C_Buffer_Free_Position = C_Buffer_Current_Position + 1;
    c4dc:	bf3e      	ittt	cc
    c4de:	6822      	ldrcc	r2, [r4, #0]
    c4e0:	3201      	addcc	r2, #1
    c4e2:	601a      	strcc	r2, [r3, #0]
		if (C_Buffer_Free_Position == CIRCULAR_BUFFER_ELEMENTS)
    c4e4:	681a      	ldr	r2, [r3, #0]
    c4e6:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
    c4ea:	d101      	bne.n	c4f0 <flash_init+0xa0>
			C_Buffer_Free_Position = 0;
    c4ec:	2200      	movs	r2, #0
    c4ee:	601a      	str	r2, [r3, #0]
}
    c4f0:	bd70      	pop	{r4, r5, r6, pc}
		printk("No Reboot counter found, adding it at id %d\n",
    c4f2:	2101      	movs	r1, #1
    c4f4:	4815      	ldr	r0, [pc, #84]	; (c54c <flash_init+0xfc>)
    c4f6:	f019 fcf0 	bl	25eda <printk>
		(void)nvs_write(&fs, BOOT_POSITION, &button2_counter,
    c4fa:	2304      	movs	r3, #4
    c4fc:	462a      	mov	r2, r5
    c4fe:	2101      	movs	r1, #1
    c500:	4620      	mov	r0, r4
    c502:	f003 fc83 	bl	fe0c <nvs_write>
    c506:	e7d7      	b.n	c4b8 <flash_init+0x68>
		printk("Current Position counter found, adding it at id %d\n",
    c508:	2102      	movs	r1, #2
    c50a:	4811      	ldr	r0, [pc, #68]	; (c550 <flash_init+0x100>)
    c50c:	f019 fce5 	bl	25eda <printk>
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c510:	4622      	mov	r2, r4
}
    c512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c516:	2304      	movs	r3, #4
    c518:	2102      	movs	r1, #2
    c51a:	4802      	ldr	r0, [pc, #8]	; (c524 <flash_init+0xd4>)
    c51c:	f003 bc76 	b.w	fe0c <nvs_write>
    c520:	0002bbc4 	.word	0x0002bbc4
    c524:	20009e04 	.word	0x20009e04
    c528:	0002d5e9 	.word	0x0002d5e9
    c52c:	20009df8 	.word	0x20009df8
    c530:	0002d607 	.word	0x0002d607
    c534:	0002d620 	.word	0x0002d620
    c538:	20009df4 	.word	0x20009df4
    c53c:	0002d633 	.word	0x0002d633
    c540:	200225ec 	.word	0x200225ec
    c544:	0002d67d 	.word	0x0002d67d
    c548:	200225f0 	.word	0x200225f0
    c54c:	0002d650 	.word	0x0002d650
    c550:	0002d69b 	.word	0x0002d69b

0000c554 <send_bluetooth>:
{
    c554:	b084      	sub	sp, #16
    c556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c55a:	ac06      	add	r4, sp, #24
    c55c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c560:	203d      	movs	r0, #61	; 0x3d
	uint32_t comprimento = buf.len;
    c562:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c566:	f01e fbcb 	bl	2ad00 <k_malloc>
	int k = 0;
    c56a:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c56c:	4605      	mov	r5, r0
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c56e:	f8df 8054 	ldr.w	r8, [pc, #84]	; c5c4 <send_bluetooth+0x70>
	while (k < comprimento - 1)
    c572:	1e77      	subs	r7, r6, #1
    c574:	42a7      	cmp	r7, r4
    c576:	d91d      	bls.n	c5b4 <send_bluetooth+0x60>
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c578:	42b4      	cmp	r4, r6
    c57a:	d301      	bcc.n	c580 <send_bluetooth+0x2c>
    c57c:	2200      	movs	r2, #0
    c57e:	e00f      	b.n	c5a0 <send_bluetooth+0x4c>
    c580:	2200      	movs	r2, #0
    c582:	1e6b      	subs	r3, r5, #1
			data[small_pkt] = buf.data[k];
    c584:	f104 0118 	add.w	r1, r4, #24
    c588:	4469      	add	r1, sp
			small_pkt++;
    c58a:	3201      	adds	r2, #1
			*(packet_data + small_pkt) = buf.data[k];
    c58c:	7909      	ldrb	r1, [r1, #4]
			small_pkt++;
    c58e:	b292      	uxth	r2, r2
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c590:	2a3d      	cmp	r2, #61	; 0x3d
			*(packet_data + small_pkt) = buf.data[k];
    c592:	f803 1f01 	strb.w	r1, [r3, #1]!
			k++;
    c596:	f104 0401 	add.w	r4, r4, #1
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c59a:	d001      	beq.n	c5a0 <send_bluetooth+0x4c>
    c59c:	42a6      	cmp	r6, r4
    c59e:	d8f1      	bhi.n	c584 <send_bluetooth+0x30>
		if (bt_nus_send(NULL, packet_data, small_pkt))
    c5a0:	4629      	mov	r1, r5
    c5a2:	2000      	movs	r0, #0
    c5a4:	f004 fb0e 	bl	10bc4 <bt_nus_send>
    c5a8:	2800      	cmp	r0, #0
    c5aa:	d0e3      	beq.n	c574 <send_bluetooth+0x20>
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c5ac:	4640      	mov	r0, r8
    c5ae:	f019 fc94 	bl	25eda <printk>
    c5b2:	e7df      	b.n	c574 <send_bluetooth+0x20>
	k_free(packet_data);
    c5b4:	4628      	mov	r0, r5
    c5b6:	f01e fb9c 	bl	2acf2 <k_free>
}
    c5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c5be:	2000      	movs	r0, #0
    c5c0:	b004      	add	sp, #16
    c5c2:	4770      	bx	lr
    c5c4:	0002d6cf 	.word	0x0002d6cf

0000c5c8 <send_protobuf_thread>:
{
    c5c8:	b510      	push	{r4, lr}
		k_sem_take(&send_proto, K_FOREVER);
    c5ca:	4c05      	ldr	r4, [pc, #20]	; (c5e0 <send_protobuf_thread+0x18>)
    c5cc:	f04f 32ff 	mov.w	r2, #4294967295
    c5d0:	f04f 33ff 	mov.w	r3, #4294967295
    c5d4:	4620      	mov	r0, r4
    c5d6:	f019 fa93 	bl	25b00 <k_sem_take.constprop.0.isra.0>
		send_protobuf();
    c5da:	f019 faac 	bl	25b36 <send_protobuf>
	while (1)
    c5de:	e7f5      	b.n	c5cc <send_protobuf_thread+0x4>
    c5e0:	20008b60 	.word	0x20008b60

0000c5e4 <configure_all_buttons>:
{
    c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    c5e6:	4c30      	ldr	r4, [pc, #192]	; (c6a8 <configure_all_buttons+0xc4>)
    c5e8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c5ec:	4620      	mov	r0, r4
    c5ee:	f7ff fb71 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c5f2:	4620      	mov	r0, r4
    c5f4:	f7ff f924 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    c5f8:	492c      	ldr	r1, [pc, #176]	; (c6ac <configure_all_buttons+0xc8>)
    c5fa:	4b2d      	ldr	r3, [pc, #180]	; (c6b0 <configure_all_buttons+0xcc>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c5fc:	4c2d      	ldr	r4, [pc, #180]	; (c6b4 <configure_all_buttons+0xd0>)
    c5fe:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c600:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    c604:	4620      	mov	r0, r4
    c606:	608b      	str	r3, [r1, #8]
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c608:	4d2b      	ldr	r5, [pc, #172]	; (c6b8 <configure_all_buttons+0xd4>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c60a:	f019 fa7b 	bl	25b04 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c60e:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c610:	4f2a      	ldr	r7, [pc, #168]	; (c6bc <configure_all_buttons+0xd8>)
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c612:	2217      	movs	r2, #23
    c614:	4631      	mov	r1, r6
    c616:	4628      	mov	r0, r5
    c618:	f019 fc5f 	bl	25eda <printk>
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c61c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c620:	4638      	mov	r0, r7
    c622:	f7ff fb57 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c626:	4638      	mov	r0, r7
    c628:	f7ff f90a 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c62c:	4924      	ldr	r1, [pc, #144]	; (c6c0 <configure_all_buttons+0xdc>)
    c62e:	4b25      	ldr	r3, [pc, #148]	; (c6c4 <configure_all_buttons+0xe0>)
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c630:	4620      	mov	r0, r4
    c632:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c638:	4f23      	ldr	r7, [pc, #140]	; (c6c8 <configure_all_buttons+0xe4>)
    c63a:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c63c:	f019 fa62 	bl	25b04 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    c640:	2218      	movs	r2, #24
    c642:	4631      	mov	r1, r6
    c644:	4628      	mov	r0, r5
    c646:	f019 fc48 	bl	25eda <printk>
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c64a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c64e:	4638      	mov	r0, r7
    c650:	f7ff fb40 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON3_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c654:	4638      	mov	r0, r7
    c656:	f7ff f8f3 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c65a:	491c      	ldr	r1, [pc, #112]	; (c6cc <configure_all_buttons+0xe8>)
    c65c:	4b1c      	ldr	r3, [pc, #112]	; (c6d0 <configure_all_buttons+0xec>)
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c65e:	4620      	mov	r0, r4
    c660:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c662:	f44f 7380 	mov.w	r3, #256	; 0x100
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c666:	4f1b      	ldr	r7, [pc, #108]	; (c6d4 <configure_all_buttons+0xf0>)
    c668:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c66a:	f019 fa4b 	bl	25b04 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    c66e:	2208      	movs	r2, #8
    c670:	4631      	mov	r1, r6
    c672:	4628      	mov	r0, r5
    c674:	f019 fc31 	bl	25eda <printk>
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c678:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c67c:	4638      	mov	r0, r7
    c67e:	f7ff fb29 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON4_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c682:	4638      	mov	r0, r7
    c684:	f7ff f8dc 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c688:	4913      	ldr	r1, [pc, #76]	; (c6d8 <configure_all_buttons+0xf4>)
    c68a:	4b14      	ldr	r3, [pc, #80]	; (c6dc <configure_all_buttons+0xf8>)
	gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    c68c:	4620      	mov	r0, r4
    c68e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c690:	f44f 7300 	mov.w	r3, #512	; 0x200
    c694:	608b      	str	r3, [r1, #8]
    c696:	f019 fa35 	bl	25b04 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    c69a:	4631      	mov	r1, r6
    c69c:	4628      	mov	r0, r5
}
    c69e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    c6a2:	2209      	movs	r2, #9
    c6a4:	f019 bc19 	b.w	25eda <printk>
    c6a8:	0002c460 	.word	0x0002c460
    c6ac:	20009e94 	.word	0x20009e94
    c6b0:	0000bbd5 	.word	0x0000bbd5
    c6b4:	0002bad4 	.word	0x0002bad4
    c6b8:	0002d6f3 	.word	0x0002d6f3
    c6bc:	0002c458 	.word	0x0002c458
    c6c0:	20009e88 	.word	0x20009e88
    c6c4:	0000c079 	.word	0x0000c079
    c6c8:	0002c450 	.word	0x0002c450
    c6cc:	20009e7c 	.word	0x20009e7c
    c6d0:	0000c059 	.word	0x0000c059
    c6d4:	0002c448 	.word	0x0002c448
    c6d8:	20009e70 	.word	0x20009e70
    c6dc:	0000c039 	.word	0x0000c039

0000c6e0 <configure_digital_inputs>:
{
    c6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT);
    c6e2:	4c2e      	ldr	r4, [pc, #184]	; (c79c <configure_digital_inputs+0xbc>)
    c6e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c6e8:	4620      	mov	r0, r4
    c6ea:	f7ff faf3 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 4 Value:%d \n", gpio_pin_get_dt(DIG_0_ADR));
    c6ee:	4620      	mov	r0, r4
    c6f0:	f7fe ff42 	bl	b578 <gpio_pin_get_dt>
    c6f4:	4601      	mov	r1, r0
    c6f6:	482a      	ldr	r0, [pc, #168]	; (c7a0 <configure_digital_inputs+0xc0>)
    c6f8:	f019 fbef 	bl	25eda <printk>
	gpio_pin_interrupt_configure_dt(DIG_0_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c6fc:	4620      	mov	r0, r4
    c6fe:	f7ff f89f 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c702:	4928      	ldr	r1, [pc, #160]	; (c7a4 <configure_digital_inputs+0xc4>)
    c704:	4b28      	ldr	r3, [pc, #160]	; (c7a8 <configure_digital_inputs+0xc8>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    c706:	4c29      	ldr	r4, [pc, #164]	; (c7ac <configure_digital_inputs+0xcc>)
    c708:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c70a:	2310      	movs	r3, #16
    c70c:	4620      	mov	r0, r4
    c70e:	608b      	str	r3, [r1, #8]
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    c710:	4d27      	ldr	r5, [pc, #156]	; (c7b0 <configure_digital_inputs+0xd0>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    c712:	f019 f9f7 	bl	25b04 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    c716:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    c718:	4f26      	ldr	r7, [pc, #152]	; (c7b4 <configure_digital_inputs+0xd4>)
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    c71a:	2204      	movs	r2, #4
    c71c:	4631      	mov	r1, r6
    c71e:	4628      	mov	r0, r5
    c720:	f019 fbdb 	bl	25eda <printk>
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    c724:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c728:	4638      	mov	r0, r7
    c72a:	f7ff fad3 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 5 Value:%d \n", gpio_pin_get_dt(DIG_1_ADR));
    c72e:	4638      	mov	r0, r7
    c730:	f7fe ff22 	bl	b578 <gpio_pin_get_dt>
    c734:	4601      	mov	r1, r0
    c736:	4820      	ldr	r0, [pc, #128]	; (c7b8 <configure_digital_inputs+0xd8>)
    c738:	f019 fbcf 	bl	25eda <printk>
	gpio_pin_interrupt_configure_dt(DIG_1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c73c:	4638      	mov	r0, r7
    c73e:	f7ff f87f 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c742:	491e      	ldr	r1, [pc, #120]	; (c7bc <configure_digital_inputs+0xdc>)
    c744:	4b1e      	ldr	r3, [pc, #120]	; (c7c0 <configure_digital_inputs+0xe0>)
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    c746:	4f1f      	ldr	r7, [pc, #124]	; (c7c4 <configure_digital_inputs+0xe4>)
    c748:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c74a:	2320      	movs	r3, #32
	gpio_add_callback(DIG_1.port, DIG_1_CB);
    c74c:	4620      	mov	r0, r4
    c74e:	608b      	str	r3, [r1, #8]
    c750:	f019 f9d8 	bl	25b04 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    c754:	2205      	movs	r2, #5
    c756:	4631      	mov	r1, r6
    c758:	4628      	mov	r0, r5
    c75a:	f019 fbbe 	bl	25eda <printk>
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    c75e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c762:	4638      	mov	r0, r7
    c764:	f7ff fab6 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 6 Value:%d \n", gpio_pin_get_dt(DIG_2_ADR));
    c768:	4638      	mov	r0, r7
    c76a:	f7fe ff05 	bl	b578 <gpio_pin_get_dt>
    c76e:	4601      	mov	r1, r0
    c770:	4815      	ldr	r0, [pc, #84]	; (c7c8 <configure_digital_inputs+0xe8>)
    c772:	f019 fbb2 	bl	25eda <printk>
	gpio_pin_interrupt_configure_dt(DIG_2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c776:	4638      	mov	r0, r7
    c778:	f7ff f862 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c77c:	4913      	ldr	r1, [pc, #76]	; (c7cc <configure_digital_inputs+0xec>)
    c77e:	4b14      	ldr	r3, [pc, #80]	; (c7d0 <configure_digital_inputs+0xf0>)
	gpio_add_callback(DIG_2.port, DIG_2_CB);
    c780:	4620      	mov	r0, r4
    c782:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c784:	2340      	movs	r3, #64	; 0x40
    c786:	608b      	str	r3, [r1, #8]
    c788:	f019 f9bc 	bl	25b04 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    c78c:	4631      	mov	r1, r6
    c78e:	4628      	mov	r0, r5
}
    c790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    c794:	2206      	movs	r2, #6
    c796:	f019 bba0 	b.w	25eda <printk>
    c79a:	bf00      	nop
    c79c:	0002c440 	.word	0x0002c440
    c7a0:	0002d70f 	.word	0x0002d70f
    c7a4:	20009e64 	.word	0x20009e64
    c7a8:	0000b5d9 	.word	0x0000b5d9
    c7ac:	0002babc 	.word	0x0002babc
    c7b0:	0002d727 	.word	0x0002d727
    c7b4:	0002c438 	.word	0x0002c438
    c7b8:	0002d74a 	.word	0x0002d74a
    c7bc:	20009e58 	.word	0x20009e58
    c7c0:	0000b5fd 	.word	0x0000b5fd
    c7c4:	0002c430 	.word	0x0002c430
    c7c8:	0002d762 	.word	0x0002d762
    c7cc:	20009e4c 	.word	0x20009e4c
    c7d0:	0000b621 	.word	0x0000b621

0000c7d4 <configure_led>:
{
    c7d4:	b508      	push	{r3, lr}
	gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    c7d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7da:	480a      	ldr	r0, [pc, #40]	; (c804 <configure_led+0x30>)
    c7dc:	f7ff fa7a 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    c7e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7e4:	4808      	ldr	r0, [pc, #32]	; (c808 <configure_led+0x34>)
    c7e6:	f7ff fa75 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    c7ea:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7ee:	4807      	ldr	r0, [pc, #28]	; (c80c <configure_led+0x38>)
    c7f0:	f7ff fa70 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
}
    c7f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    c7f8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7fc:	4804      	ldr	r0, [pc, #16]	; (c810 <configure_led+0x3c>)
    c7fe:	f7ff ba69 	b.w	bcd4 <gpio_pin_configure_dt.isra.0>
    c802:	bf00      	nop
    c804:	0002c428 	.word	0x0002c428
    c808:	0002c420 	.word	0x0002c420
    c80c:	0002c418 	.word	0x0002c418
    c810:	0002c410 	.word	0x0002c410

0000c814 <turn_off_all_leds>:
{
    c814:	b508      	push	{r3, lr}
	gpio_pin_set_dt(LED1, OFF);
    c816:	2100      	movs	r1, #0
    c818:	4808      	ldr	r0, [pc, #32]	; (c83c <turn_off_all_leds+0x28>)
    c81a:	f7ff f9a9 	bl	bb70 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED2, OFF);
    c81e:	2100      	movs	r1, #0
    c820:	4807      	ldr	r0, [pc, #28]	; (c840 <turn_off_all_leds+0x2c>)
    c822:	f7ff f9a5 	bl	bb70 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED3, OFF);
    c826:	2100      	movs	r1, #0
    c828:	4806      	ldr	r0, [pc, #24]	; (c844 <turn_off_all_leds+0x30>)
    c82a:	f7ff f9a1 	bl	bb70 <gpio_pin_set_dt.isra.0>
}
    c82e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_set_dt(LED4, OFF);
    c832:	2100      	movs	r1, #0
    c834:	4804      	ldr	r0, [pc, #16]	; (c848 <turn_off_all_leds+0x34>)
    c836:	f7ff b99b 	b.w	bb70 <gpio_pin_set_dt.isra.0>
    c83a:	bf00      	nop
    c83c:	0002c428 	.word	0x0002c428
    c840:	0002c420 	.word	0x0002c420
    c844:	0002c418 	.word	0x0002c418
    c848:	0002c410 	.word	0x0002c410

0000c84c <configure_adc>:
{
    c84c:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    c84e:	2500      	movs	r5, #0
    c850:	4c12      	ldr	r4, [pc, #72]	; (c89c <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev))
    c852:	f854 0c06 	ldr.w	r0, [r4, #-6]
    c856:	f01e f826 	bl	2a8a6 <z_device_is_ready>
    c85a:	b920      	cbnz	r0, c866 <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    c85c:	4810      	ldr	r0, [pc, #64]	; (c8a0 <configure_adc+0x54>)
}
    c85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    c862:	f019 bb3a 	b.w	25eda <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    c866:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    c86a:	b16b      	cbz	r3, c888 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    c86c:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    c870:	6883      	ldr	r3, [r0, #8]
    c872:	4621      	mov	r1, r4
    c874:	681b      	ldr	r3, [r3, #0]
    c876:	4798      	blx	r3
		if (err < 0)
    c878:	1e02      	subs	r2, r0, #0
    c87a:	da08      	bge.n	c88e <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    c87c:	4629      	mov	r1, r5
}
    c87e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    c882:	4808      	ldr	r0, [pc, #32]	; (c8a4 <configure_adc+0x58>)
    c884:	f019 bb29 	b.w	25eda <printk>
		return -ENOTSUP;
    c888:	f06f 0285 	mvn.w	r2, #133	; 0x85
    c88c:	e7f6      	b.n	c87c <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    c88e:	3501      	adds	r5, #1
    c890:	2d06      	cmp	r5, #6
    c892:	f104 0414 	add.w	r4, r4, #20
    c896:	d1dc      	bne.n	c852 <configure_adc+0x6>
}
    c898:	bd38      	pop	{r3, r4, r5, pc}
    c89a:	bf00      	nop
    c89c:	0002c39e 	.word	0x0002c39e
    c8a0:	0002d77a 	.word	0x0002d77a
    c8a4:	0002d79b 	.word	0x0002d79b

0000c8a8 <main>:
{
    c8a8:	b570      	push	{r4, r5, r6, lr}
    c8aa:	b08c      	sub	sp, #48	; 0x30
	return z_impl_k_mutex_init(mutex);
    c8ac:	4865      	ldr	r0, [pc, #404]	; (ca44 <main+0x19c>)
    c8ae:	f01e f853 	bl	2a958 <z_impl_k_mutex_init>
	configure_led();
    c8b2:	f7ff ff8f 	bl	c7d4 <configure_led>
	turn_off_all_leds();
    c8b6:	f7ff ffad 	bl	c814 <turn_off_all_leds>
	configure_all_buttons();
    c8ba:	f7ff fe93 	bl	c5e4 <configure_all_buttons>
	configure_digital_inputs();
    c8be:	f7ff ff0f 	bl	c6e0 <configure_digital_inputs>
	configure_adc();
    c8c2:	f7ff ffc3 	bl	c84c <configure_adc>
    c8c6:	4d60      	ldr	r5, [pc, #384]	; (ca48 <main+0x1a0>)
    c8c8:	4628      	mov	r0, r5
    c8ca:	f01d ffec 	bl	2a8a6 <z_device_is_ready>
	if (!device_is_ready(uart))
    c8ce:	b1d8      	cbz	r0, c908 <main+0x60>
	rx = k_malloc(sizeof(*rx));
    c8d0:	206c      	movs	r0, #108	; 0x6c
    c8d2:	f01e fa15 	bl	2ad00 <k_malloc>
	if (rx)
    c8d6:	4604      	mov	r4, r0
    c8d8:	b1b0      	cbz	r0, c908 <main+0x60>
		rx->len = 0;
    c8da:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    c8dc:	495b      	ldr	r1, [pc, #364]	; (ca4c <main+0x1a4>)
		rx->len = 0;
    c8de:	f8a0 6068 	strh.w	r6, [r0, #104]	; 0x68
	k_work_init_delayable(&uart_work, uart_work_handler);
    c8e2:	485b      	ldr	r0, [pc, #364]	; (ca50 <main+0x1a8>)
    c8e4:	f014 fe84 	bl	215f0 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    c8e8:	68ab      	ldr	r3, [r5, #8]
    c8ea:	681b      	ldr	r3, [r3, #0]
    c8ec:	b973      	cbnz	r3, c90c <main+0x64>
		k_free(rx);
    c8ee:	4620      	mov	r0, r4
    c8f0:	f01e f9ff 	bl	2acf2 <k_free>
		LOG_ERR("Cannot initialize UART callback");
    c8f4:	4b57      	ldr	r3, [pc, #348]	; (ca54 <main+0x1ac>)
    c8f6:	2201      	movs	r2, #1
    c8f8:	9302      	str	r3, [sp, #8]
    c8fa:	2300      	movs	r3, #0
    c8fc:	4956      	ldr	r1, [pc, #344]	; (ca58 <main+0x1b0>)
    c8fe:	4618      	mov	r0, r3
    c900:	e9cd 3300 	strd	r3, r3, [sp]
    c904:	f019 f8dd 	bl	25ac2 <z_log_msg_runtime_create.constprop.0>
		error();
    c908:	f019 f92b 	bl	25b62 <error>
	return api->callback_set(dev, callback, user_data);
    c90c:	4632      	mov	r2, r6
    c90e:	4628      	mov	r0, r5
    c910:	4952      	ldr	r1, [pc, #328]	; (ca5c <main+0x1b4>)
    c912:	4798      	blx	r3
	if (err)
    c914:	2800      	cmp	r0, #0
    c916:	d1ea      	bne.n	c8ee <main+0x46>
	tx = k_malloc(sizeof(*tx));
    c918:	206c      	movs	r0, #108	; 0x6c
    c91a:	f01e f9f1 	bl	2ad00 <k_malloc>
	if (tx)
    c91e:	4606      	mov	r6, r0
    c920:	2800      	cmp	r0, #0
    c922:	d0f1      	beq.n	c908 <main+0x60>
		pos = snprintf(tx->data, sizeof(tx->data),
    c924:	1d03      	adds	r3, r0, #4
    c926:	4618      	mov	r0, r3
    c928:	494d      	ldr	r1, [pc, #308]	; (ca60 <main+0x1b8>)
    c92a:	f01e fb70 	bl	2b00e <strcpy>
		tx->len = pos;
    c92e:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    c930:	4601      	mov	r1, r0
		tx->len = pos;
    c932:	f8a6 2068 	strh.w	r2, [r6, #104]	; 0x68
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    c936:	4628      	mov	r0, r5
    c938:	f019 f8da 	bl	25af0 <uart_tx.constprop.0>
	if (err)
    c93c:	4601      	mov	r1, r0
    c93e:	b118      	cbz	r0, c948 <main+0xa0>
		printf("Cannot display welcome message (err: %d)", err);
    c940:	4848      	ldr	r0, [pc, #288]	; (ca64 <main+0x1bc>)
    c942:	f017 fe57 	bl	245f4 <iprintf>
	if (err)
    c946:	e7df      	b.n	c908 <main+0x60>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_WAIT_FOR_RX);
    c948:	4628      	mov	r0, r5
    c94a:	1d21      	adds	r1, r4, #4
    c94c:	f019 f8c8 	bl	25ae0 <uart_rx_enable.constprop.0>
	if (err)
    c950:	2800      	cmp	r0, #0
    c952:	d1d9      	bne.n	c908 <main+0x60>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    c954:	4844      	ldr	r0, [pc, #272]	; (ca68 <main+0x1c0>)
    c956:	f008 ffef 	bl	15938 <bt_conn_auth_cb_register>
		if (err)
    c95a:	b128      	cbz	r0, c968 <main+0xc0>
			printk("Failed to register authorization callbacks.\n");
    c95c:	4843      	ldr	r0, [pc, #268]	; (ca6c <main+0x1c4>)
}
    c95e:	b00c      	add	sp, #48	; 0x30
    c960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    c964:	f019 bab9 	b.w	25eda <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    c968:	4841      	ldr	r0, [pc, #260]	; (ca70 <main+0x1c8>)
    c96a:	f008 ffff 	bl	1596c <bt_conn_auth_info_cb_register>
		if (err)
    c96e:	b108      	cbz	r0, c974 <main+0xcc>
			printk("Failed to register authorization info callbacks.\n");
    c970:	4840      	ldr	r0, [pc, #256]	; (ca74 <main+0x1cc>)
    c972:	e7f4      	b.n	c95e <main+0xb6>
	err = bt_enable(NULL);
    c974:	f006 fe92 	bl	1369c <bt_enable>
	if (err)
    c978:	2800      	cmp	r0, #0
    c97a:	d1c5      	bne.n	c908 <main+0x60>
	printf("Bluetooth initialized \n\r");
    c97c:	483e      	ldr	r0, [pc, #248]	; (ca78 <main+0x1d0>)
    c97e:	f017 fe39 	bl	245f4 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    c982:	483e      	ldr	r0, [pc, #248]	; (ca7c <main+0x1d4>)
    c984:	f017 fe36 	bl	245f4 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    c988:	483d      	ldr	r0, [pc, #244]	; (ca80 <main+0x1d8>)
    c98a:	f017 fe33 	bl	245f4 <iprintf>
	z_impl_k_sem_give(sem);
    c98e:	483d      	ldr	r0, [pc, #244]	; (ca84 <main+0x1dc>)
    c990:	f014 f9aa 	bl	20ce8 <z_impl_k_sem_give>
	err = bt_nus_init(&nus_cb);
    c994:	483c      	ldr	r0, [pc, #240]	; (ca88 <main+0x1e0>)
    c996:	f004 f909 	bl	10bac <bt_nus_init>
	if (err)
    c99a:	4601      	mov	r1, r0
    c99c:	b128      	cbz	r0, c9aa <main+0x102>
		printf("Failed to initialize UART service (err: %d)", err);
    c99e:	483b      	ldr	r0, [pc, #236]	; (ca8c <main+0x1e4>)
}
    c9a0:	b00c      	add	sp, #48	; 0x30
    c9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    c9a6:	f017 be25 	b.w	245f4 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    c9aa:	4d39      	ldr	r5, [pc, #228]	; (ca90 <main+0x1e8>)
    c9ac:	ac07      	add	r4, sp, #28
    c9ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c9b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c9b2:	682b      	ldr	r3, [r5, #0]
    c9b4:	2501      	movs	r5, #1
    c9b6:	6023      	str	r3, [r4, #0]
    c9b8:	2202      	movs	r2, #2
    c9ba:	4b36      	ldr	r3, [pc, #216]	; (ca94 <main+0x1ec>)
    c9bc:	4936      	ldr	r1, [pc, #216]	; (ca98 <main+0x1f0>)
    c9be:	9500      	str	r5, [sp, #0]
    c9c0:	a807      	add	r0, sp, #28
    c9c2:	f007 fd5f 	bl	14484 <bt_le_adv_start>
	if (err)
    c9c6:	4604      	mov	r4, r0
    c9c8:	b128      	cbz	r0, c9d6 <main+0x12e>
		printf("Advertising failed to start (err %d)", err);
    c9ca:	4601      	mov	r1, r0
    c9cc:	4833      	ldr	r0, [pc, #204]	; (ca9c <main+0x1f4>)
    c9ce:	f017 fe11 	bl	245f4 <iprintf>
}
    c9d2:	b00c      	add	sp, #48	; 0x30
    c9d4:	bd70      	pop	{r4, r5, r6, pc}
	flag = 1; // print ad values once
    c9d6:	4b32      	ldr	r3, [pc, #200]	; (caa0 <main+0x1f8>)
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    c9d8:	f242 6067 	movw	r0, #9831	; 0x2667
    c9dc:	2100      	movs	r1, #0
    c9de:	601d      	str	r5, [r3, #0]
    c9e0:	f019 f896 	bl	25b10 <k_sleep.isra.0>
	flash_init();
    c9e4:	f7ff fd34 	bl	c450 <flash_init>
    c9e8:	4e2e      	ldr	r6, [pc, #184]	; (caa4 <main+0x1fc>)
    c9ea:	4630      	mov	r0, r6
    c9ec:	f01d ff5b 	bl	2a8a6 <z_device_is_ready>
	if (!device_is_ready(uart_2))
    c9f0:	2800      	cmp	r0, #0
    c9f2:	d089      	beq.n	c908 <main+0x60>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    c9f4:	206c      	movs	r0, #108	; 0x6c
    c9f6:	f01e f983 	bl	2ad00 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    c9fa:	492b      	ldr	r1, [pc, #172]	; (caa8 <main+0x200>)
	rx_uart2->len = 0;
    c9fc:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    ca00:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    ca02:	482a      	ldr	r0, [pc, #168]	; (caac <main+0x204>)
    ca04:	f014 fdf4 	bl	215f0 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    ca08:	68b3      	ldr	r3, [r6, #8]
    ca0a:	681b      	ldr	r3, [r3, #0]
    ca0c:	b11b      	cbz	r3, ca16 <main+0x16e>
	return api->callback_set(dev, callback, user_data);
    ca0e:	4622      	mov	r2, r4
    ca10:	4630      	mov	r0, r6
    ca12:	4927      	ldr	r1, [pc, #156]	; (cab0 <main+0x208>)
    ca14:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), UART_WAIT_FOR_RX);
    ca16:	1d29      	adds	r1, r5, #4
    ca18:	4822      	ldr	r0, [pc, #136]	; (caa4 <main+0x1fc>)
    ca1a:	f019 f861 	bl	25ae0 <uart_rx_enable.constprop.0>
	if (err)
    ca1e:	4e25      	ldr	r6, [pc, #148]	; (cab4 <main+0x20c>)
    ca20:	ad05      	add	r5, sp, #20
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ca22:	3401      	adds	r4, #1
    ca24:	e896 0003 	ldmia.w	r6, {r0, r1}
    ca28:	e885 0003 	stmia.w	r5, {r0, r1}
	gpio_pin_set_dt(&led, value);
    ca2c:	4628      	mov	r0, r5
    ca2e:	f004 0101 	and.w	r1, r4, #1
    ca32:	f7ff f89d 	bl	bb70 <gpio_pin_set_dt.isra.0>
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
    ca36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ca3a:	2100      	movs	r1, #0
    ca3c:	f019 f868 	bl	25b10 <k_sleep.isra.0>
	for (;;)
    ca40:	e7ef      	b.n	ca22 <main+0x17a>
    ca42:	bf00      	nop
    ca44:	20009e38 	.word	0x20009e38
    ca48:	0002bb34 	.word	0x0002bb34
    ca4c:	0000b755 	.word	0x0000b755
    ca50:	200091e0 	.word	0x200091e0
    ca54:	0002d7bd 	.word	0x0002d7bd
    ca58:	0002c154 	.word	0x0002c154
    ca5c:	0000beb1 	.word	0x0000beb1
    ca60:	0002d7dd 	.word	0x0002d7dd
    ca64:	0002d804 	.word	0x0002d804
    ca68:	200083cc 	.word	0x200083cc
    ca6c:	0002d82d 	.word	0x0002d82d
    ca70:	200083bc 	.word	0x200083bc
    ca74:	0002d85a 	.word	0x0002d85a
    ca78:	0002d88c 	.word	0x0002d88c
    ca7c:	0002d8a5 	.word	0x0002d8a5
    ca80:	0002d8c6 	.word	0x0002d8c6
    ca84:	20008ad0 	.word	0x20008ad0
    ca88:	200083b0 	.word	0x200083b0
    ca8c:	0002d8ef 	.word	0x0002d8ef
    ca90:	0002c1ac 	.word	0x0002c1ac
    ca94:	0002c380 	.word	0x0002c380
    ca98:	0002c388 	.word	0x0002c388
    ca9c:	0002d91b 	.word	0x0002d91b
    caa0:	20009e34 	.word	0x20009e34
    caa4:	0002bb1c 	.word	0x0002bb1c
    caa8:	0000b701 	.word	0x0000b701
    caac:	200091b0 	.word	0x200091b0
    cab0:	0000c0f1 	.word	0x0000c0f1
    cab4:	0002c420 	.word	0x0002c420

0000cab8 <adc_raw_to_millivolts_dt.constprop.0.isra.0>:
	if (!spec->channel_cfg_dt_node_exists) {
    cab8:	4b10      	ldr	r3, [pc, #64]	; (cafc <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x44>)
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    caba:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!spec->channel_cfg_dt_node_exists) {
    cabc:	795a      	ldrb	r2, [r3, #5]
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    cabe:	4605      	mov	r5, r0
	if (!spec->channel_cfg_dt_node_exists) {
    cac0:	b1d2      	cbz	r2, caf8 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    cac2:	79da      	ldrb	r2, [r3, #7]
	resolution = spec->resolution;
    cac4:	7c1c      	ldrb	r4, [r3, #16]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    cac6:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
    cac8:	bf09      	itett	eq
    caca:	681a      	ldreq	r2, [r3, #0]
		vref_mv = spec->vref_mv;
    cacc:	89d9      	ldrhne	r1, [r3, #14]
	return api->ref_internal;
    cace:	6892      	ldreq	r2, [r2, #8]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    cad0:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
    cad2:	7a9a      	ldrb	r2, [r3, #10]
    cad4:	0692      	lsls	r2, r2, #26
	int32_t adc_mv = *valp * ref_mv;
    cad6:	6802      	ldr	r2, [r0, #0]
		resolution -= 1U;
    cad8:	bf48      	it	mi
    cada:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int32_t adc_mv = *valp * ref_mv;
    cade:	fb01 f202 	mul.w	r2, r1, r2
	int ret = adc_gain_invert(gain, &adc_mv);
    cae2:	7998      	ldrb	r0, [r3, #6]
    cae4:	a901      	add	r1, sp, #4
		resolution -= 1U;
    cae6:	bf48      	it	mi
    cae8:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    caea:	9201      	str	r2, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    caec:	f00d fcec 	bl	1a4c8 <adc_gain_invert>
	if (ret == 0) {
    caf0:	b910      	cbnz	r0, caf8 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
		*valp = (adc_mv >> resolution);
    caf2:	9b01      	ldr	r3, [sp, #4]
    caf4:	4123      	asrs	r3, r4
    caf6:	602b      	str	r3, [r5, #0]
}
    caf8:	b003      	add	sp, #12
    cafa:	bd30      	pop	{r4, r5, pc}
    cafc:	0002c398 	.word	0x0002c398

0000cb00 <flash_button2_counter>:
void flash_button2_counter(void){
    cb00:	b510      	push	{r4, lr}
    button2_counter++;
    cb02:	4c0d      	ldr	r4, [pc, #52]	; (cb38 <flash_button2_counter+0x38>)
	(void)nvs_write(
    cb04:	2101      	movs	r1, #1
    button2_counter++;
    cb06:	6823      	ldr	r3, [r4, #0]
	(void)nvs_write(
    cb08:	4622      	mov	r2, r4
    button2_counter++;
    cb0a:	3301      	adds	r3, #1
    cb0c:	6023      	str	r3, [r4, #0]
	(void)nvs_write(
    cb0e:	480b      	ldr	r0, [pc, #44]	; (cb3c <flash_button2_counter+0x3c>)
    cb10:	2304      	movs	r3, #4
    cb12:	f003 f97b 	bl	fe0c <nvs_write>
    rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    cb16:	2304      	movs	r3, #4
    cb18:	4622      	mov	r2, r4
    cb1a:	2101      	movs	r1, #1
    cb1c:	4807      	ldr	r0, [pc, #28]	; (cb3c <flash_button2_counter+0x3c>)
    cb1e:	f019 fdcb 	bl	266b8 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    cb22:	2800      	cmp	r0, #0
    cb24:	dd06      	ble.n	cb34 <flash_button2_counter+0x34>
		printk("Id: %d, button2_counter: %d\n",
    cb26:	6822      	ldr	r2, [r4, #0]
    cb28:	2101      	movs	r1, #1
}
    cb2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Id: %d, button2_counter: %d\n",
    cb2e:	4804      	ldr	r0, [pc, #16]	; (cb40 <flash_button2_counter+0x40>)
    cb30:	f019 b9d3 	b.w	25eda <printk>
}
    cb34:	bd10      	pop	{r4, pc}
    cb36:	bf00      	nop
    cb38:	20009df4 	.word	0x20009df4
    cb3c:	20009e04 	.word	0x20009e04
    cb40:	0002d633 	.word	0x0002d633

0000cb44 <time_stamp_function>:
uint32_t time_stamp_function(void){
    cb44:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    cb46:	f01d ffe5 	bl	2ab14 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    cb4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cb4e:	fba0 0302 	umull	r0, r3, r0, r2
    cb52:	fb02 3101 	mla	r1, r2, r1, r3
    cb56:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    cb58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cb5c:	2300      	movs	r3, #0
    cb5e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    cb62:	0bc9      	lsrs	r1, r1, #15
    cb64:	f7fc f974 	bl	8e50 <__aeabi_ldivmod>
    cb68:	4603      	mov	r3, r0
}
    cb6a:	4801      	ldr	r0, [pc, #4]	; (cb70 <time_stamp_function+0x2c>)
    cb6c:	4418      	add	r0, r3
    cb6e:	bd08      	pop	{r3, pc}
    cb70:	61cf9980 	.word	0x61cf9980

0000cb74 <values_of_gnss_module>:
Gnss values_of_gnss_module(void){
    cb74:	b570      	push	{r4, r5, r6, lr}
  gnss_return_value.latitude=position.latitude;
    cb76:	4b05      	ldr	r3, [pc, #20]	; (cb8c <values_of_gnss_module+0x18>)
Gnss values_of_gnss_module(void){
    cb78:	4604      	mov	r4, r0
  gnss_return_value.latitude=position.latitude;
    cb7a:	685e      	ldr	r6, [r3, #4]
  gnss_return_value.longitude=position.longitude;
    cb7c:	689d      	ldr	r5, [r3, #8]
  gnss_return_value.timestamp=time_stamp_function();
    cb7e:	f7ff ffe1 	bl	cb44 <time_stamp_function>
  return gnss_return_value;
    cb82:	6066      	str	r6, [r4, #4]
    cb84:	6020      	str	r0, [r4, #0]
    cb86:	60a5      	str	r5, [r4, #8]
}
    cb88:	4620      	mov	r0, r4
    cb8a:	bd70      	pop	{r4, r5, r6, pc}
    cb8c:	20009de4 	.word	0x20009de4

0000cb90 <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    cb90:	b538      	push	{r3, r4, r5, lr}
    cb92:	460d      	mov	r5, r1
    cb94:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    cb96:	f7ff ffd5 	bl	cb44 <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    cb9a:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    cb9c:	4b04      	ldr	r3, [pc, #16]	; (cbb0 <values_of_digital_sensor+0x20>)
    cb9e:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    cba2:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    cba6:	e9c4 0200 	strd	r0, r2, [r4]
}
    cbaa:	4620      	mov	r0, r4
    cbac:	bd38      	pop	{r3, r4, r5, pc}
    cbae:	bf00      	nop
    cbb0:	20022c04 	.word	0x20022c04

0000cbb4 <read_memory>:
_Circular_Buffer read_memory(uint32_t Pos){
    cbb4:	b570      	push	{r4, r5, r6, lr}
    cbb6:	4605      	mov	r5, r0
    cbb8:	460c      	mov	r4, r1
    buf = k_malloc(size);
    cbba:	2044      	movs	r0, #68	; 0x44
    cbbc:	f01e f8a0 	bl	2ad00 <k_malloc>
    uint16_t Id= Pos + BASE_DATA_BUFFER;
    cbc0:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_read(&fs, Id, buf, size);
    cbc4:	2344      	movs	r3, #68	; 0x44
    cbc6:	4602      	mov	r2, r0
    buf = k_malloc(size);
    cbc8:	4606      	mov	r6, r0
    err=nvs_read(&fs, Id, buf, size);
    cbca:	b289      	uxth	r1, r1
    cbcc:	4806      	ldr	r0, [pc, #24]	; (cbe8 <read_memory+0x34>)
    cbce:	f019 fd73 	bl	266b8 <nvs_read>
    printf("Result read=%d bytes\n",err);
    cbd2:	b281      	uxth	r1, r0
    cbd4:	4805      	ldr	r0, [pc, #20]	; (cbec <read_memory+0x38>)
    cbd6:	f017 fd0d 	bl	245f4 <iprintf>
    return *buf;
    cbda:	2244      	movs	r2, #68	; 0x44
    cbdc:	4631      	mov	r1, r6
    cbde:	4628      	mov	r0, r5
    cbe0:	f01e f8a6 	bl	2ad30 <memcpy>
}
    cbe4:	4628      	mov	r0, r5
    cbe6:	bd70      	pop	{r4, r5, r6, pc}
    cbe8:	20009e04 	.word	0x20009e04
    cbec:	0002d9e3 	.word	0x0002d9e3

0000cbf0 <save_memory>:
void save_memory(uint32_t Pos){
    cbf0:	b570      	push	{r4, r5, r6, lr}
    printf("Size of structure=%d bytes\n",size);
    cbf2:	2144      	movs	r1, #68	; 0x44
void save_memory(uint32_t Pos){
    cbf4:	4604      	mov	r4, r0
    printf("Size of structure=%d bytes\n",size);
    cbf6:	4815      	ldr	r0, [pc, #84]	; (cc4c <save_memory+0x5c>)
    cbf8:	f017 fcfc 	bl	245f4 <iprintf>
    buf = k_malloc(size);
    cbfc:	2044      	movs	r0, #68	; 0x44
    cbfe:	f01e f87f 	bl	2ad00 <k_malloc>
    *buf=C_Buffer[Pos];
    cc02:	2644      	movs	r6, #68	; 0x44
    buf = k_malloc(size);
    cc04:	4605      	mov	r5, r0
    *buf=C_Buffer[Pos];
    cc06:	4912      	ldr	r1, [pc, #72]	; (cc50 <save_memory+0x60>)
    cc08:	4632      	mov	r2, r6
    cc0a:	fb06 1104 	mla	r1, r6, r4, r1
    cc0e:	f01e f88f 	bl	2ad30 <memcpy>
    printf("Position %d\n",Pos); 
    cc12:	4621      	mov	r1, r4
    cc14:	480f      	ldr	r0, [pc, #60]	; (cc54 <save_memory+0x64>)
    cc16:	f017 fced 	bl	245f4 <iprintf>
    uint16_t id= Pos + BASE_DATA_BUFFER;
    cc1a:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_write(&fs, id, buf,size);
    cc1e:	4c0e      	ldr	r4, [pc, #56]	; (cc58 <save_memory+0x68>)
    cc20:	4633      	mov	r3, r6
    cc22:	462a      	mov	r2, r5
    cc24:	4620      	mov	r0, r4
    cc26:	b289      	uxth	r1, r1
    cc28:	f003 f8f0 	bl	fe0c <nvs_write>
    printf("Result=%d bytes saved\n",err);
    cc2c:	b281      	uxth	r1, r0
    cc2e:	480b      	ldr	r0, [pc, #44]	; (cc5c <save_memory+0x6c>)
    cc30:	f017 fce0 	bl	245f4 <iprintf>
    (void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position,sizeof(C_Buffer_Current_Position));
    cc34:	4620      	mov	r0, r4
    cc36:	2304      	movs	r3, #4
    cc38:	2102      	movs	r1, #2
    cc3a:	4a09      	ldr	r2, [pc, #36]	; (cc60 <save_memory+0x70>)
    cc3c:	f003 f8e6 	bl	fe0c <nvs_write>
    k_free(buf);
    cc40:	4628      	mov	r0, r5
}
    cc42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_free(buf);
    cc46:	f01e b854 	b.w	2acf2 <k_free>
    cc4a:	bf00      	nop
    cc4c:	0002d9f9 	.word	0x0002d9f9
    cc50:	2000a76c 	.word	0x2000a76c
    cc54:	0002da15 	.word	0x0002da15
    cc58:	20009e04 	.word	0x20009e04
    cc5c:	0002da22 	.word	0x0002da22
    cc60:	200225ec 	.word	0x200225ec

0000cc64 <feed_circular_buffer>:
void feed_circular_buffer(void){
    cc64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    cc68:	4d33      	ldr	r5, [pc, #204]	; (cd38 <feed_circular_buffer+0xd4>)
    cc6a:	4b34      	ldr	r3, [pc, #208]	; (cd3c <feed_circular_buffer+0xd8>)
    cc6c:	682f      	ldr	r7, [r5, #0]
void feed_circular_buffer(void){
    cc6e:	b085      	sub	sp, #20
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    cc70:	f5b7 6fb4 	cmp.w	r7, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    cc74:	601f      	str	r7, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    cc76:	d25d      	bcs.n	cd34 <feed_circular_buffer+0xd0>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    cc78:	f04f 0844 	mov.w	r8, #68	; 0x44
    cc7c:	466e      	mov	r6, sp
    cc7e:	4c30      	ldr	r4, [pc, #192]	; (cd40 <feed_circular_buffer+0xdc>)
    cc80:	4630      	mov	r0, r6
    cc82:	fb08 4707 	mla	r7, r8, r7, r4
    cc86:	3704      	adds	r7, #4
    cc88:	f7ff ff74 	bl	cb74 <values_of_gnss_module>
    cc8c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    cc90:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    cc94:	f8d5 9000 	ldr.w	r9, [r5]
  analog_return_value.timestamp=time_stamp_function();
    cc98:	f7ff ff54 	bl	cb44 <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    cc9c:	4f29      	ldr	r7, [pc, #164]	; (cd44 <feed_circular_buffer+0xe0>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    cc9e:	fb08 4309 	mla	r3, r8, r9, r4
  analog_return_value.value=adc_value[channel];
    cca2:	f9b7 2000 	ldrsh.w	r2, [r7]
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    cca6:	e9c3 0205 	strd	r0, r2, [r3, #20]
  ntc_return.timestamp=time_stamp_function();
    ccaa:	f7ff ff4b 	bl	cb44 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    ccae:	682b      	ldr	r3, [r5, #0]
    ccb0:	887a      	ldrh	r2, [r7, #2]
    ccb2:	fb08 4303 	mla	r3, r8, r3, r4
    ccb6:	841a      	strh	r2, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    ccb8:	f7ff ff44 	bl	cb44 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    ccbc:	682b      	ldr	r3, [r5, #0]
    ccbe:	88ba      	ldrh	r2, [r7, #4]
    ccc0:	fb08 4303 	mla	r3, r8, r3, r4
    ccc4:	851a      	strh	r2, [r3, #40]	; 0x28
  ntc_return.timestamp=time_stamp_function();
    ccc6:	f7ff ff3d 	bl	cb44 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    ccca:	682b      	ldr	r3, [r5, #0]
    cccc:	88fa      	ldrh	r2, [r7, #6]
    ccce:	fb08 4303 	mla	r3, r8, r3, r4
    ccd2:	861a      	strh	r2, [r3, #48]	; 0x30
  ntc_return.timestamp=time_stamp_function();
    ccd4:	f7ff ff36 	bl	cb44 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    ccd8:	682b      	ldr	r3, [r5, #0]
    ccda:	fb08 4303 	mla	r3, r8, r3, r4
    ccde:	61d8      	str	r0, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    cce0:	f7ff ff30 	bl	cb44 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    cce4:	682b      	ldr	r3, [r5, #0]
    cce6:	fb08 4303 	mla	r3, r8, r3, r4
    ccea:	6258      	str	r0, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    ccec:	f7ff ff2a 	bl	cb44 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    ccf0:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    ccf2:	2100      	movs	r1, #0
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    ccf4:	fb08 4707 	mla	r7, r8, r7, r4
    ccf8:	62f8      	str	r0, [r7, #44]	; 0x2c
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    ccfa:	4630      	mov	r0, r6
    ccfc:	f7ff ff48 	bl	cb90 <values_of_digital_sensor>
    cd00:	e896 0003 	ldmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    cd04:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    cd06:	3734      	adds	r7, #52	; 0x34
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    cd08:	fb08 4403 	mla	r4, r8, r3, r4
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    cd0c:	e887 0003 	stmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    cd10:	343c      	adds	r4, #60	; 0x3c
    cd12:	2101      	movs	r1, #1
    cd14:	4630      	mov	r0, r6
    cd16:	f7ff ff3b 	bl	cb90 <values_of_digital_sensor>
    cd1a:	e896 0003 	ldmia.w	r6, {r0, r1}
    cd1e:	e884 0003 	stmia.w	r4, {r0, r1}
     save_memory(C_Buffer_Free_Position);
    cd22:	6828      	ldr	r0, [r5, #0]
    cd24:	f7ff ff64 	bl	cbf0 <save_memory>
     C_Buffer_Free_Position++;
    cd28:	682b      	ldr	r3, [r5, #0]
    cd2a:	3301      	adds	r3, #1
    cd2c:	602b      	str	r3, [r5, #0]
}
    cd2e:	b005      	add	sp, #20
    cd30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cd34:	2300      	movs	r3, #0
    cd36:	e7f9      	b.n	cd2c <feed_circular_buffer+0xc8>
    cd38:	200225f0 	.word	0x200225f0
    cd3c:	200225ec 	.word	0x200225ec
    cd40:	2000a76c 	.word	0x2000a76c
    cd44:	20022c14 	.word	0x20022c14

0000cd48 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    cd4a:	4b1c      	ldr	r3, [pc, #112]	; (cdbc <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    cd4c:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    cd4e:	6818      	ldr	r0, [r3, #0]
    cd50:	889b      	ldrh	r3, [r3, #4]
    cd52:	9000      	str	r0, [sp, #0]
    cd54:	2218      	movs	r2, #24
    cd56:	2100      	movs	r1, #0
    cd58:	f10d 0006 	add.w	r0, sp, #6
    cd5c:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    cd60:	2601      	movs	r6, #1
   char tag[30]="10203";
    cd62:	f01e f81f 	bl	2ada4 <memset>
     msg.positions.timestamp=1;
    cd66:	2300      	movs	r3, #0
    msg.timestamp=0;
    cd68:	4c15      	ldr	r4, [pc, #84]	; (cdc0 <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    cd6a:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    cd6c:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    cd70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cd74:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    cd76:	4b13      	ldr	r3, [pc, #76]	; (cdc4 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    cd78:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    cd7a:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    cd7c:	230b      	movs	r3, #11
    cd7e:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    cd80:	4b11      	ldr	r3, [pc, #68]	; (cdc8 <fill_fields_to_test+0x80>)
    cd82:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    cd84:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    cd86:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    cd88:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    cd8a:	7766      	strb	r6, [r4, #29]
    cd8c:	f104 001e 	add.w	r0, r4, #30
    cd90:	f01e f93d 	bl	2b00e <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    cd94:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    cd98:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    cd9c:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    cda0:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    cda2:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    cda6:	f7fb feaf 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    cdaa:	3501      	adds	r5, #1
    cdac:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    cdae:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    cdb0:	f104 0424 	add.w	r4, r4, #36	; 0x24
    cdb4:	d1e6      	bne.n	cd84 <fill_fields_to_test+0x3c>
}
    cdb6:	4802      	ldr	r0, [pc, #8]	; (cdc0 <fill_fields_to_test+0x78>)
    cdb8:	b009      	add	sp, #36	; 0x24
    cdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdbc:	0002c208 	.word	0x0002c208
    cdc0:	2000a67c 	.word	0x2000a67c
    cdc4:	40400000 	.word	0x40400000
    cdc8:	41400000 	.word	0x41400000

0000cdcc <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    cdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdce:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    cdd2:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    cdd4:	f7ff ffb8 	bl	cd48 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    cdd8:	2202      	movs	r2, #2
    cdda:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    cdde:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    cde2:	4a3a      	ldr	r2, [pc, #232]	; (cecc <send_array_dd_v0+0x100>)
    cde4:	ae0c      	add	r6, sp, #48	; 0x30
    cde6:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    cde8:	4631      	mov	r1, r6
    cdea:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    cdec:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    cdee:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    cdf0:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    cdf2:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    cdf4:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    cdf6:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    cdf8:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    cdfa:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    cdfc:	f101 010c 	add.w	r1, r1, #12
    ce00:	d1f8      	bne.n	cdf4 <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    ce02:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    ce04:	6958      	ldr	r0, [r3, #20]
    ce06:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    ce08:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    ce0a:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    ce0c:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    ce10:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    ce14:	f101 0108 	add.w	r1, r1, #8
    ce18:	d1f6      	bne.n	ce08 <send_array_dd_v0+0x3c>
    ce1a:	f103 051e 	add.w	r5, r3, #30
    ce1e:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    ce22:	f855 3c06 	ldr.w	r3, [r5, #-6]
    ce26:	4629      	mov	r1, r5
    ce28:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    ce2c:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    ce30:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    ce34:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    ce38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    ce3c:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    ce40:	f01e f8e5 	bl	2b00e <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    ce44:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    ce46:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    ce48:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    ce4c:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    ce4e:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    ce52:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    ce56:	4633      	mov	r3, r6
    ce58:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    ce5c:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    ce5e:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    ce60:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    ce64:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    ce68:	f103 0308 	add.w	r3, r3, #8
    ce6c:	d1f6      	bne.n	ce5c <send_array_dd_v0+0x90>
   while (sensor_id<6){
    ce6e:	3524      	adds	r5, #36	; 0x24
    ce70:	42a5      	cmp	r5, r4
    ce72:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    ce76:	d1d4      	bne.n	ce22 <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    ce78:	466c      	mov	r4, sp
    ce7a:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    ce7e:	4668      	mov	r0, sp
    ce80:	4913      	ldr	r1, [pc, #76]	; (ced0 <send_array_dd_v0+0x104>)
    ce82:	ad07      	add	r5, sp, #28
    ce84:	f000 f962 	bl	d14c <pb_ostream_from_buffer>
    ce88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    ce8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ce8c:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    ce8e:	4911      	ldr	r1, [pc, #68]	; (ced4 <send_array_dd_v0+0x108>)
    ce90:	aa0c      	add	r2, sp, #48	; 0x30
    ce92:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    ce94:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    ce96:	f000 fbd9 	bl	d64c <pb_encode>
   int j=0;
    ce9a:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    ce9c:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    ce9e:	490c      	ldr	r1, [pc, #48]	; (ced0 <send_array_dd_v0+0x104>)
    cea0:	4a0d      	ldr	r2, [pc, #52]	; (ced8 <send_array_dd_v0+0x10c>)
    cea2:	4283      	cmp	r3, r0
    cea4:	d10b      	bne.n	cebe <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    cea6:	490d      	ldr	r1, [pc, #52]	; (cedc <send_array_dd_v0+0x110>)
    return function_return;
    cea8:	f240 72dc 	movw	r2, #2012	; 0x7dc
    ceac:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    ceae:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    ceb2:	f01d ff3d 	bl	2ad30 <memcpy>
}
    ceb6:	4638      	mov	r0, r7
    ceb8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    cebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    cebe:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    cec2:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    cec4:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    cec8:	e7eb      	b.n	cea2 <send_array_dd_v0+0xd6>
    ceca:	bf00      	nop
    cecc:	0012d687 	.word	0x0012d687
    ced0:	20022e23 	.word	0x20022e23
    ced4:	0002c474 	.word	0x0002c474
    ced8:	20009ea3 	.word	0x20009ea3
    cedc:	20009ea0 	.word	0x20009ea0

0000cee0 <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cee4:	4606      	mov	r6, r0
      C_Buffer[pos].gnss_module.latitude,
    cee6:	2444      	movs	r4, #68	; 0x44
    cee8:	4d29      	ldr	r5, [pc, #164]	; (cf90 <print_current_position_cb+0xb0>)
void print_current_position_cb(uint32_t pos){
    ceea:	b087      	sub	sp, #28
      C_Buffer[pos].gnss_module.latitude,
    ceec:	fb04 5406 	mla	r4, r4, r6, r5
    printf("\n\n####Position %d #####\n",pos);
    cef0:	4601      	mov	r1, r0
    cef2:	4828      	ldr	r0, [pc, #160]	; (cf94 <print_current_position_cb+0xb4>)
    cef4:	f017 fb7e 	bl	245f4 <iprintf>
    printf("GNSS Position Lat=%f Long=%f TimeStamp=%d \n",
    cef8:	68a0      	ldr	r0, [r4, #8]
    cefa:	f7fb fa91 	bl	8420 <__aeabi_f2d>
    cefe:	6863      	ldr	r3, [r4, #4]
    cf00:	4680      	mov	r8, r0
    cf02:	9302      	str	r3, [sp, #8]
    cf04:	68e0      	ldr	r0, [r4, #12]
    cf06:	4689      	mov	r9, r1
    cf08:	f7fb fa8a 	bl	8420 <__aeabi_f2d>
    cf0c:	4642      	mov	r2, r8
    cf0e:	e9cd 0100 	strd	r0, r1, [sp]
    cf12:	464b      	mov	r3, r9
    cf14:	4820      	ldr	r0, [pc, #128]	; (cf98 <print_current_position_cb+0xb8>)
    cf16:	f017 fb6d 	bl	245f4 <iprintf>
    val_mv = C_Buffer[pos].analog.value;
    cf1a:	69a3      	ldr	r3, [r4, #24]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    cf1c:	a805      	add	r0, sp, #20
    val_mv = C_Buffer[pos].analog.value;
    cf1e:	9305      	str	r3, [sp, #20]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    cf20:	f7ff fdca 	bl	cab8 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    cf24:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
    cf28:	9b05      	ldr	r3, [sp, #20]
    cf2a:	481c      	ldr	r0, [pc, #112]	; (cf9c <print_current_position_cb+0xbc>)
    cf2c:	f017 fb62 	bl	245f4 <iprintf>
    int i=0;
    cf30:	2700      	movs	r7, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    cf32:	f8df 906c 	ldr.w	r9, [pc, #108]	; cfa0 <print_current_position_cb+0xc0>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    cf36:	f107 0801 	add.w	r8, r7, #1
    cf3a:	8c20      	ldrh	r0, [r4, #32]
    cf3c:	fa5f f188 	uxtb.w	r1, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    cf40:	f8d4 a01c 	ldr.w	sl, [r4, #28]
      C_Buffer[pos].ntc[i].value,
    cf44:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    cf48:	f7fc fa6a 	bl	9420 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    cf4c:	f7fb fa68 	bl	8420 <__aeabi_f2d>
    cf50:	e9cd 0100 	strd	r0, r1, [sp]
    cf54:	4639      	mov	r1, r7
      i++;
    cf56:	4647      	mov	r7, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    cf58:	465b      	mov	r3, fp
    cf5a:	4652      	mov	r2, sl
    cf5c:	4648      	mov	r0, r9
    cf5e:	f017 fb49 	bl	245f4 <iprintf>
    while (i<3){
    cf62:	2f03      	cmp	r7, #3
    cf64:	f104 0408 	add.w	r4, r4, #8
    cf68:	d1e5      	bne.n	cf36 <print_current_position_cb+0x56>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    cf6a:	2344      	movs	r3, #68	; 0x44
    cf6c:	fb03 5506 	mla	r5, r3, r6, r5
    cf70:	2100      	movs	r1, #0
    cf72:	e9d5 230d 	ldrd	r2, r3, [r5, #52]	; 0x34
    cf76:	480b      	ldr	r0, [pc, #44]	; (cfa4 <print_current_position_cb+0xc4>)
    cf78:	f017 fb3c 	bl	245f4 <iprintf>
    cf7c:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
    cf80:	2101      	movs	r1, #1
    cf82:	4808      	ldr	r0, [pc, #32]	; (cfa4 <print_current_position_cb+0xc4>)
}
    cf84:	b007      	add	sp, #28
    cf86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    cf8a:	f017 bb33 	b.w	245f4 <iprintf>
    cf8e:	bf00      	nop
    cf90:	2000a76c 	.word	0x2000a76c
    cf94:	0002da39 	.word	0x0002da39
    cf98:	0002da52 	.word	0x0002da52
    cf9c:	0002da7e 	.word	0x0002da7e
    cfa0:	0002daa4 	.word	0x0002daa4
    cfa4:	0002daca 	.word	0x0002daca

0000cfa8 <print_current_position_cb_new>:
void print_current_position_cb_new(uint32_t pos){
    cfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cfac:	4605      	mov	r5, r0
    cfae:	b098      	sub	sp, #96	; 0x60
   C_Buffer = k_malloc(size);
    cfb0:	2044      	movs	r0, #68	; 0x44
    cfb2:	f01d fea5 	bl	2ad00 <k_malloc>
    cfb6:	4604      	mov	r4, r0
   *C_Buffer=read_memory(pos);
    cfb8:	4629      	mov	r1, r5
    cfba:	a804      	add	r0, sp, #16
    cfbc:	f7ff fdfa 	bl	cbb4 <read_memory>
    cfc0:	2244      	movs	r2, #68	; 0x44
    cfc2:	a904      	add	r1, sp, #16
    cfc4:	4620      	mov	r0, r4
    cfc6:	f01d feb3 	bl	2ad30 <memcpy>
    printf("\n\n####Position %d #####\n",pos);
    cfca:	4629      	mov	r1, r5
    cfcc:	4826      	ldr	r0, [pc, #152]	; (d068 <print_current_position_cb_new+0xc0>)
    cfce:	f017 fb11 	bl	245f4 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    cfd2:	68a0      	ldr	r0, [r4, #8]
    cfd4:	f7fb fa24 	bl	8420 <__aeabi_f2d>
    cfd8:	6863      	ldr	r3, [r4, #4]
    cfda:	4606      	mov	r6, r0
    cfdc:	9302      	str	r3, [sp, #8]
    cfde:	68e0      	ldr	r0, [r4, #12]
    cfe0:	460f      	mov	r7, r1
    cfe2:	f7fb fa1d 	bl	8420 <__aeabi_f2d>
    cfe6:	4632      	mov	r2, r6
    cfe8:	e9cd 0100 	strd	r0, r1, [sp]
    cfec:	463b      	mov	r3, r7
    cfee:	481f      	ldr	r0, [pc, #124]	; (d06c <print_current_position_cb_new+0xc4>)
    cff0:	f017 fb00 	bl	245f4 <iprintf>
    val_mv = C_Buffer->analog.value;
    cff4:	69a3      	ldr	r3, [r4, #24]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    cff6:	a817      	add	r0, sp, #92	; 0x5c
    val_mv = C_Buffer->analog.value;
    cff8:	9317      	str	r3, [sp, #92]	; 0x5c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    cffa:	f7ff fd5d 	bl	cab8 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    cffe:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
    d002:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d004:	481a      	ldr	r0, [pc, #104]	; (d070 <print_current_position_cb_new+0xc8>)
    d006:	f017 faf5 	bl	245f4 <iprintf>
    while (i<3){
    d00a:	4625      	mov	r5, r4
    int i=0;
    d00c:	2600      	movs	r6, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d00e:	f8df 8064 	ldr.w	r8, [pc, #100]	; d074 <print_current_position_cb_new+0xcc>
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d012:	1c77      	adds	r7, r6, #1
    d014:	8c28      	ldrh	r0, [r5, #32]
    d016:	b2f9      	uxtb	r1, r7
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d018:	f8d5 901c 	ldr.w	r9, [r5, #28]
      C_Buffer->ntc[i].value,
    d01c:	f9b5 a020 	ldrsh.w	sl, [r5, #32]
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d020:	f7fc f9fe 	bl	9420 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d024:	f7fb f9fc 	bl	8420 <__aeabi_f2d>
    d028:	4653      	mov	r3, sl
    d02a:	e9cd 0100 	strd	r0, r1, [sp]
    d02e:	464a      	mov	r2, r9
    d030:	4631      	mov	r1, r6
    d032:	4640      	mov	r0, r8
    d034:	f017 fade 	bl	245f4 <iprintf>
    while (i<3){
    d038:	2f03      	cmp	r7, #3
      i++;
    d03a:	463e      	mov	r6, r7
    while (i<3){
    d03c:	f105 0508 	add.w	r5, r5, #8
    d040:	d1e7      	bne.n	d012 <print_current_position_cb_new+0x6a>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    d042:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
    d046:	2100      	movs	r1, #0
    d048:	480b      	ldr	r0, [pc, #44]	; (d078 <print_current_position_cb_new+0xd0>)
    d04a:	f017 fad3 	bl	245f4 <iprintf>
    d04e:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
    d052:	2101      	movs	r1, #1
    d054:	4808      	ldr	r0, [pc, #32]	; (d078 <print_current_position_cb_new+0xd0>)
    d056:	f017 facd 	bl	245f4 <iprintf>
 k_free(C_Buffer);
    d05a:	4620      	mov	r0, r4
}
    d05c:	b018      	add	sp, #96	; 0x60
    d05e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 k_free(C_Buffer);
    d062:	f01d be46 	b.w	2acf2 <k_free>
    d066:	bf00      	nop
    d068:	0002da39 	.word	0x0002da39
    d06c:	0002daec 	.word	0x0002daec
    d070:	0002da7e 	.word	0x0002da7e
    d074:	0002daa4 	.word	0x0002daa4
    d078:	0002daca 	.word	0x0002daca

0000d07c <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    d07c:	b500      	push	{lr}
    pb_type_t type = field->type;
    d07e:	7d83      	ldrb	r3, [r0, #22]
{
    d080:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    d082:	2b3f      	cmp	r3, #63	; 0x3f
{
    d084:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    d086:	d849      	bhi.n	d11c <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    d088:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    d08c:	d01c      	beq.n	d0c8 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    d08e:	2820      	cmp	r0, #32
    d090:	d102      	bne.n	d098 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    d092:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    d094:	8818      	ldrh	r0, [r3, #0]
    d096:	e006      	b.n	d0a6 <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    d098:	2830      	cmp	r0, #48	; 0x30
    d09a:	d0fa      	beq.n	d092 <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    d09c:	2810      	cmp	r0, #16
    d09e:	d106      	bne.n	d0ae <pb_check_proto3_default_value+0x32>
    d0a0:	6a0a      	ldr	r2, [r1, #32]
    d0a2:	b122      	cbz	r2, d0ae <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    d0a4:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    d0a6:	fab0 f080 	clz	r0, r0
    d0aa:	0940      	lsrs	r0, r0, #5
    d0ac:	e00c      	b.n	d0c8 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    d0ae:	680a      	ldr	r2, [r1, #0]
    d0b0:	6890      	ldr	r0, [r2, #8]
    d0b2:	b980      	cbnz	r0, d0d6 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    d0b4:	f003 020f 	and.w	r2, r3, #15
    d0b8:	2a05      	cmp	r2, #5
    d0ba:	d80e      	bhi.n	d0da <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    d0bc:	69cb      	ldr	r3, [r1, #28]
    d0be:	8a4a      	ldrh	r2, [r1, #18]
    d0c0:	441a      	add	r2, r3
    d0c2:	4293      	cmp	r3, r2
    d0c4:	d103      	bne.n	d0ce <pb_check_proto3_default_value+0x52>
            return true;
    d0c6:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    d0c8:	b00b      	add	sp, #44	; 0x2c
    d0ca:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    d0ce:	f813 1b01 	ldrb.w	r1, [r3], #1
    d0d2:	2900      	cmp	r1, #0
    d0d4:	d0f5      	beq.n	d0c2 <pb_check_proto3_default_value+0x46>
            return false;
    d0d6:	2000      	movs	r0, #0
    d0d8:	e7f6      	b.n	d0c8 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    d0da:	2a06      	cmp	r2, #6
    d0dc:	d101      	bne.n	d0e2 <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    d0de:	69cb      	ldr	r3, [r1, #28]
    d0e0:	e7d8      	b.n	d094 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    d0e2:	2a07      	cmp	r2, #7
    d0e4:	d102      	bne.n	d0ec <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    d0e6:	69cb      	ldr	r3, [r1, #28]
    d0e8:	7818      	ldrb	r0, [r3, #0]
    d0ea:	e7dc      	b.n	d0a6 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    d0ec:	2a0b      	cmp	r2, #11
    d0ee:	d101      	bne.n	d0f4 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    d0f0:	8a48      	ldrh	r0, [r1, #18]
    d0f2:	e7d8      	b.n	d0a6 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    d0f4:	f003 030e 	and.w	r3, r3, #14
    d0f8:	2b08      	cmp	r3, #8
    d0fa:	d1e5      	bne.n	d0c8 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    d0fc:	69ca      	ldr	r2, [r1, #28]
    d0fe:	4668      	mov	r0, sp
    d100:	6a49      	ldr	r1, [r1, #36]	; 0x24
    d102:	f018 fded 	bl	25ce0 <pb_field_iter_begin>
    d106:	2800      	cmp	r0, #0
    d108:	d0dd      	beq.n	d0c6 <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    d10a:	4668      	mov	r0, sp
    d10c:	f7ff ffb6 	bl	d07c <pb_check_proto3_default_value>
    d110:	2800      	cmp	r0, #0
    d112:	d0d9      	beq.n	d0c8 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    d114:	4668      	mov	r0, sp
    d116:	f018 fe06 	bl	25d26 <pb_field_iter_next>
    d11a:	e7f4      	b.n	d106 <pb_check_proto3_default_value+0x8a>
    d11c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    d120:	2a80      	cmp	r2, #128	; 0x80
    d122:	d101      	bne.n	d128 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    d124:	69c0      	ldr	r0, [r0, #28]
    d126:	e7be      	b.n	d0a6 <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    d128:	2a40      	cmp	r2, #64	; 0x40
    d12a:	d1d4      	bne.n	d0d6 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    d12c:	f003 030f 	and.w	r3, r3, #15
    d130:	2b0a      	cmp	r3, #10
    d132:	d102      	bne.n	d13a <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    d134:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    d136:	6818      	ldr	r0, [r3, #0]
    d138:	e7b5      	b.n	d0a6 <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    d13a:	6803      	ldr	r3, [r0, #0]
    d13c:	4a02      	ldr	r2, [pc, #8]	; (d148 <pb_check_proto3_default_value+0xcc>)
    d13e:	68d8      	ldr	r0, [r3, #12]
    d140:	4290      	cmp	r0, r2
    d142:	d1b0      	bne.n	d0a6 <pb_check_proto3_default_value+0x2a>
    d144:	e7f6      	b.n	d134 <pb_check_proto3_default_value+0xb8>
    d146:	bf00      	nop
    d148:	00025d45 	.word	0x00025d45

0000d14c <pb_ostream_from_buffer>:
    return stream;
    d14c:	6082      	str	r2, [r0, #8]
    d14e:	2200      	movs	r2, #0
{
    d150:	b510      	push	{r4, lr}
    return stream;
    d152:	4c03      	ldr	r4, [pc, #12]	; (d160 <pb_ostream_from_buffer+0x14>)
    d154:	e9c0 2203 	strd	r2, r2, [r0, #12]
    d158:	e9c0 4100 	strd	r4, r1, [r0]
}
    d15c:	bd10      	pop	{r4, pc}
    d15e:	bf00      	nop
    d160:	00025d75 	.word	0x00025d75

0000d164 <pb_write>:
{
    d164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d166:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    d168:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    d16a:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    d16c:	b19a      	cbz	r2, d196 <pb_write+0x32>
    d16e:	6806      	ldr	r6, [r0, #0]
    d170:	b18e      	cbz	r6, d196 <pb_write+0x32>
    d172:	18d3      	adds	r3, r2, r3
    d174:	d202      	bcs.n	d17c <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    d176:	6887      	ldr	r7, [r0, #8]
    d178:	429f      	cmp	r7, r3
    d17a:	d207      	bcs.n	d18c <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    d17c:	6923      	ldr	r3, [r4, #16]
    d17e:	4a08      	ldr	r2, [pc, #32]	; (d1a0 <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    d180:	2b00      	cmp	r3, #0
    d182:	bf08      	it	eq
    d184:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    d186:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    d188:	6123      	str	r3, [r4, #16]
}
    d18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    d18c:	47b0      	blx	r6
    d18e:	b910      	cbnz	r0, d196 <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    d190:	6923      	ldr	r3, [r4, #16]
    d192:	4a04      	ldr	r2, [pc, #16]	; (d1a4 <pb_write+0x40>)
    d194:	e7f4      	b.n	d180 <pb_write+0x1c>
    stream->bytes_written += count;
    d196:	68e3      	ldr	r3, [r4, #12]
    return true;
    d198:	2001      	movs	r0, #1
    stream->bytes_written += count;
    d19a:	442b      	add	r3, r5
    d19c:	60e3      	str	r3, [r4, #12]
    return true;
    d19e:	e7f4      	b.n	d18a <pb_write+0x26>
    d1a0:	0002db18 	.word	0x0002db18
    d1a4:	0002db24 	.word	0x0002db24

0000d1a8 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    d1a8:	b410      	push	{r4}
    d1aa:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    d1ac:	8a4b      	ldrh	r3, [r1, #18]
    d1ae:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    d1b2:	2c02      	cmp	r4, #2
    d1b4:	d117      	bne.n	d1e6 <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    d1b6:	2b01      	cmp	r3, #1
    d1b8:	d105      	bne.n	d1c6 <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    d1ba:	69cb      	ldr	r3, [r1, #28]
    d1bc:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    d1be:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    d1c0:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    d1c2:	f018 bde0 	b.w	25d86 <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    d1c6:	2b02      	cmp	r3, #2
    d1c8:	d102      	bne.n	d1d0 <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    d1ca:	69cb      	ldr	r3, [r1, #28]
    d1cc:	881a      	ldrh	r2, [r3, #0]
    d1ce:	e7f6      	b.n	d1be <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    d1d0:	2b04      	cmp	r3, #4
    d1d2:	d102      	bne.n	d1da <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    d1d4:	69cb      	ldr	r3, [r1, #28]
    d1d6:	681a      	ldr	r2, [r3, #0]
    d1d8:	e7f1      	b.n	d1be <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    d1da:	2b08      	cmp	r3, #8
    d1dc:	d11f      	bne.n	d21e <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    d1de:	69cb      	ldr	r3, [r1, #28]
    d1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d1e4:	e7ec      	b.n	d1c0 <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    d1e6:	2b01      	cmp	r3, #1
    d1e8:	d108      	bne.n	d1fc <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    d1ea:	69cb      	ldr	r3, [r1, #28]
    d1ec:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    d1f0:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    d1f2:	2c03      	cmp	r4, #3
    d1f4:	d1e4      	bne.n	d1c0 <pb_enc_varint+0x18>
}
    d1f6:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    d1f8:	f018 be04 	b.w	25e04 <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    d1fc:	2b02      	cmp	r3, #2
    d1fe:	d103      	bne.n	d208 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    d200:	69cb      	ldr	r3, [r1, #28]
    d202:	f9b3 2000 	ldrsh.w	r2, [r3]
    d206:	e7f3      	b.n	d1f0 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    d208:	2b04      	cmp	r3, #4
    d20a:	d102      	bne.n	d212 <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    d20c:	69cb      	ldr	r3, [r1, #28]
    d20e:	681a      	ldr	r2, [r3, #0]
    d210:	e7ee      	b.n	d1f0 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    d212:	2b08      	cmp	r3, #8
    d214:	d103      	bne.n	d21e <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    d216:	69cb      	ldr	r3, [r1, #28]
    d218:	e9d3 2300 	ldrd	r2, r3, [r3]
    d21c:	e7e9      	b.n	d1f2 <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    d21e:	6903      	ldr	r3, [r0, #16]
    d220:	4a03      	ldr	r2, [pc, #12]	; (d230 <pb_enc_varint+0x88>)
    d222:	2b00      	cmp	r3, #0
    d224:	bf08      	it	eq
    d226:	4613      	moveq	r3, r2
    d228:	6103      	str	r3, [r0, #16]
}
    d22a:	bc10      	pop	{r4}
    d22c:	2000      	movs	r0, #0
    d22e:	4770      	bx	lr
    d230:	0002db2d 	.word	0x0002db2d

0000d234 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    d234:	8a4a      	ldrh	r2, [r1, #18]
    d236:	2a04      	cmp	r2, #4
    d238:	d102      	bne.n	d240 <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    d23a:	69c9      	ldr	r1, [r1, #28]
    d23c:	f018 bdeb 	b.w	25e16 <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    d240:	2a08      	cmp	r2, #8
    d242:	d102      	bne.n	d24a <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    d244:	69c9      	ldr	r1, [r1, #28]
    d246:	f018 bde9 	b.w	25e1c <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    d24a:	6902      	ldr	r2, [r0, #16]
    d24c:	4903      	ldr	r1, [pc, #12]	; (d25c <pb_enc_fixed+0x28>)
    d24e:	2a00      	cmp	r2, #0
    d250:	bf08      	it	eq
    d252:	460a      	moveq	r2, r1
    d254:	6102      	str	r2, [r0, #16]
    }
}
    d256:	2000      	movs	r0, #0
    d258:	4770      	bx	lr
    d25a:	bf00      	nop
    d25c:	0002db2d 	.word	0x0002db2d

0000d260 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    d260:	7d8a      	ldrb	r2, [r1, #22]
{
    d262:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    d264:	f002 020f 	and.w	r2, r2, #15
    d268:	2a0b      	cmp	r2, #11
    d26a:	d811      	bhi.n	d290 <pb_encode_tag_for_field+0x30>
    d26c:	e8df f002 	tbb	[pc, r2]
    d270:	0c0c0c0c 	.word	0x0c0c0c0c
    d274:	0a0a060e 	.word	0x0a0a060e
    d278:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    d27c:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    d27e:	8a1a      	ldrh	r2, [r3, #16]
    d280:	f018 bdcf 	b.w	25e22 <pb_encode_tag>
            wiretype = PB_WT_STRING;
    d284:	2102      	movs	r1, #2
            break;
    d286:	e7fa      	b.n	d27e <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    d288:	2100      	movs	r1, #0
    d28a:	e7f8      	b.n	d27e <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    d28c:	2105      	movs	r1, #5
    d28e:	e7f6      	b.n	d27e <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    d290:	6903      	ldr	r3, [r0, #16]
    d292:	4a03      	ldr	r2, [pc, #12]	; (d2a0 <pb_encode_tag_for_field+0x40>)
    d294:	2b00      	cmp	r3, #0
    d296:	bf08      	it	eq
    d298:	4613      	moveq	r3, r2
    d29a:	6103      	str	r3, [r0, #16]
}
    d29c:	2000      	movs	r0, #0
    d29e:	4770      	bx	lr
    d2a0:	0002db3f 	.word	0x0002db3f

0000d2a4 <pb_encode_submessage>:
{
    d2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2a8:	460e      	mov	r6, r1
    d2aa:	4617      	mov	r7, r2
    d2ac:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    d2ae:	2214      	movs	r2, #20
    d2b0:	2100      	movs	r1, #0
{
    d2b2:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    d2b4:	a801      	add	r0, sp, #4
    d2b6:	f01d fd75 	bl	2ada4 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    d2ba:	463a      	mov	r2, r7
    d2bc:	4631      	mov	r1, r6
    d2be:	a801      	add	r0, sp, #4
    d2c0:	f000 f9c4 	bl	d64c <pb_encode>
    d2c4:	b910      	cbnz	r0, d2cc <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    d2c6:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    d2c8:	6123      	str	r3, [r4, #16]
    d2ca:	e008      	b.n	d2de <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    d2cc:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    d2d0:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    d2d2:	4643      	mov	r3, r8
    d2d4:	462a      	mov	r2, r5
    d2d6:	4620      	mov	r0, r4
    d2d8:	f018 fd55 	bl	25d86 <pb_encode_varint>
    d2dc:	b918      	cbnz	r0, d2e6 <pb_encode_submessage+0x42>
        return false;
    d2de:	2000      	movs	r0, #0
}
    d2e0:	b006      	add	sp, #24
    d2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    d2e6:	6821      	ldr	r1, [r4, #0]
    d2e8:	b921      	cbnz	r1, d2f4 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    d2ea:	462a      	mov	r2, r5
    d2ec:	4620      	mov	r0, r4
    d2ee:	f7ff ff39 	bl	d164 <pb_write>
    d2f2:	e7f5      	b.n	d2e0 <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    d2f4:	68e3      	ldr	r3, [r4, #12]
    d2f6:	68a2      	ldr	r2, [r4, #8]
    d2f8:	442b      	add	r3, r5
    d2fa:	4293      	cmp	r3, r2
    d2fc:	d905      	bls.n	d30a <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    d2fe:	6923      	ldr	r3, [r4, #16]
    d300:	4a0e      	ldr	r2, [pc, #56]	; (d33c <pb_encode_submessage+0x98>)
    d302:	2b00      	cmp	r3, #0
    d304:	bf08      	it	eq
    d306:	4613      	moveq	r3, r2
    d308:	e7de      	b.n	d2c8 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    d30a:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    d30c:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    d30e:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    d310:	a801      	add	r0, sp, #4
    d312:	4631      	mov	r1, r6
    substream.max_size = size;
    d314:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    d318:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    d31c:	f000 f996 	bl	d64c <pb_encode>
    stream->bytes_written += substream.bytes_written;
    d320:	9a04      	ldr	r2, [sp, #16]
    d322:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    d324:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    d326:	4413      	add	r3, r2
    d328:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    d32a:	9b02      	ldr	r3, [sp, #8]
    d32c:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    d32e:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    d330:	d101      	bne.n	d336 <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    d332:	6123      	str	r3, [r4, #16]
    d334:	e7d4      	b.n	d2e0 <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    d336:	4a02      	ldr	r2, [pc, #8]	; (d340 <pb_encode_submessage+0x9c>)
    d338:	e7e3      	b.n	d302 <pb_encode_submessage+0x5e>
    d33a:	bf00      	nop
    d33c:	0002db18 	.word	0x0002db18
    d340:	0002db52 	.word	0x0002db52

0000d344 <encode_basic_field>:
{
    d344:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    d346:	69cb      	ldr	r3, [r1, #28]
{
    d348:	4604      	mov	r4, r0
    d34a:	460d      	mov	r5, r1
    if (!field->pData)
    d34c:	2b00      	cmp	r3, #0
    d34e:	d07f      	beq.n	d450 <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    d350:	f7ff ff86 	bl	d260 <pb_encode_tag_for_field>
    d354:	2800      	cmp	r0, #0
    d356:	d073      	beq.n	d440 <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    d358:	7da8      	ldrb	r0, [r5, #22]
    d35a:	f000 030f 	and.w	r3, r0, #15
    d35e:	2b0b      	cmp	r3, #11
    d360:	d873      	bhi.n	d44a <encode_basic_field+0x106>
    d362:	e8df f003 	tbb	[pc, r3]
    d366:	1106      	.short	0x1106
    d368:	17171111 	.word	0x17171111
    d36c:	5252351d 	.word	0x5252351d
    d370:	6f72      	.short	0x6f72
        if (p[i] != 0)
    d372:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    d374:	4620      	mov	r0, r4
}
    d376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    d37a:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    d37c:	2300      	movs	r3, #0
    d37e:	3a00      	subs	r2, #0
    d380:	bf18      	it	ne
    d382:	2201      	movne	r2, #1
    d384:	f018 bcff 	b.w	25d86 <pb_encode_varint>
            return pb_enc_varint(stream, field);
    d388:	4629      	mov	r1, r5
    d38a:	4620      	mov	r0, r4
}
    d38c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    d390:	f7ff bf0a 	b.w	d1a8 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    d394:	4629      	mov	r1, r5
    d396:	4620      	mov	r0, r4
}
    d398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    d39c:	f7ff bf4a 	b.w	d234 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    d3a0:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    d3a2:	b909      	cbnz	r1, d3a8 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    d3a4:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    d3a6:	e00e      	b.n	d3c6 <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    d3a8:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    d3aa:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    d3ac:	d80a      	bhi.n	d3c4 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    d3ae:	8a6b      	ldrh	r3, [r5, #18]
    d3b0:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    d3b2:	4293      	cmp	r3, r2
    d3b4:	d206      	bcs.n	d3c4 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    d3b6:	6923      	ldr	r3, [r4, #16]
    d3b8:	4a26      	ldr	r2, [pc, #152]	; (d454 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	bf08      	it	eq
    d3be:	4613      	moveq	r3, r2
    d3c0:	6123      	str	r3, [r4, #16]
    d3c2:	e03d      	b.n	d440 <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    d3c4:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    d3c6:	4620      	mov	r0, r4
}
    d3c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    d3cc:	f018 bd2f 	b.w	25e2e <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    d3d0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    d3d4:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    d3d6:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    d3d8:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    d3da:	d00e      	beq.n	d3fa <encode_basic_field+0xb6>
        if (max_size == 0)
    d3dc:	b913      	cbnz	r3, d3e4 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    d3de:	6923      	ldr	r3, [r4, #16]
    d3e0:	4a1d      	ldr	r2, [pc, #116]	; (d458 <encode_basic_field+0x114>)
    d3e2:	e7ea      	b.n	d3ba <encode_basic_field+0x76>
        max_size -= 1;
    d3e4:	3b01      	subs	r3, #1
    if (str == NULL)
    d3e6:	2900      	cmp	r1, #0
    d3e8:	d0dc      	beq.n	d3a4 <encode_basic_field+0x60>
    size_t size = 0;
    d3ea:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    d3ec:	429a      	cmp	r2, r3
    d3ee:	5c88      	ldrb	r0, [r1, r2]
    d3f0:	d006      	beq.n	d400 <encode_basic_field+0xbc>
    d3f2:	2800      	cmp	r0, #0
    d3f4:	d0e7      	beq.n	d3c6 <encode_basic_field+0x82>
            size++;
    d3f6:	3201      	adds	r2, #1
            p++;
    d3f8:	e7f8      	b.n	d3ec <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    d3fa:	f04f 33ff 	mov.w	r3, #4294967295
    d3fe:	e7f2      	b.n	d3e6 <encode_basic_field+0xa2>
        if (*p != '\0')
    d400:	2800      	cmp	r0, #0
    d402:	d0e0      	beq.n	d3c6 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    d404:	6923      	ldr	r3, [r4, #16]
    d406:	4a15      	ldr	r2, [pc, #84]	; (d45c <encode_basic_field+0x118>)
    d408:	e7d7      	b.n	d3ba <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    d40a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    d40c:	b912      	cbnz	r2, d414 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    d40e:	6923      	ldr	r3, [r4, #16]
    d410:	4a13      	ldr	r2, [pc, #76]	; (d460 <encode_basic_field+0x11c>)
    d412:	e7d2      	b.n	d3ba <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    d414:	2b09      	cmp	r3, #9
    d416:	d006      	beq.n	d426 <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    d418:	4620      	mov	r0, r4
    d41a:	69ea      	ldr	r2, [r5, #28]
    d41c:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    d41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    d422:	f7ff bf3f 	b.w	d2a4 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    d426:	6a2a      	ldr	r2, [r5, #32]
    d428:	2a00      	cmp	r2, #0
    d42a:	d0f5      	beq.n	d418 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    d42c:	f852 3c08 	ldr.w	r3, [r2, #-8]
    d430:	2b00      	cmp	r3, #0
    d432:	d0f1      	beq.n	d418 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    d434:	4629      	mov	r1, r5
    d436:	4620      	mov	r0, r4
    d438:	3a04      	subs	r2, #4
    d43a:	4798      	blx	r3
    d43c:	2800      	cmp	r0, #0
    d43e:	d1eb      	bne.n	d418 <encode_basic_field+0xd4>
        return false;
    d440:	2000      	movs	r0, #0
}
    d442:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    d444:	8a6a      	ldrh	r2, [r5, #18]
    d446:	69e9      	ldr	r1, [r5, #28]
    d448:	e7bd      	b.n	d3c6 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    d44a:	6923      	ldr	r3, [r4, #16]
    d44c:	4a05      	ldr	r2, [pc, #20]	; (d464 <encode_basic_field+0x120>)
    d44e:	e7b4      	b.n	d3ba <encode_basic_field+0x76>
        return true;
    d450:	2001      	movs	r0, #1
    d452:	e7f6      	b.n	d442 <encode_basic_field+0xfe>
    d454:	0002db66 	.word	0x0002db66
    d458:	0002db7a 	.word	0x0002db7a
    d45c:	0002db8d 	.word	0x0002db8d
    d460:	0002dba1 	.word	0x0002dba1
    d464:	0002db3f 	.word	0x0002db3f

0000d468 <encode_field>:
{
    d468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    d46c:	7d8b      	ldrb	r3, [r1, #22]
{
    d46e:	4605      	mov	r5, r0
    d470:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    d474:	2a30      	cmp	r2, #48	; 0x30
{
    d476:	460c      	mov	r4, r1
    d478:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    d47a:	d112      	bne.n	d4a2 <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    d47c:	6a0b      	ldr	r3, [r1, #32]
    d47e:	881a      	ldrh	r2, [r3, #0]
    d480:	8a0b      	ldrh	r3, [r1, #16]
    d482:	429a      	cmp	r2, r3
    d484:	d114      	bne.n	d4b0 <encode_field+0x48>
    if (!field->pData)
    d486:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    d488:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    d48a:	b9ea      	cbnz	r2, d4c8 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    d48c:	f013 0f30 	tst.w	r3, #48	; 0x30
    d490:	d10e      	bne.n	d4b0 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    d492:	692b      	ldr	r3, [r5, #16]
    d494:	4a69      	ldr	r2, [pc, #420]	; (d63c <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    d496:	2b00      	cmp	r3, #0
    d498:	bf08      	it	eq
    d49a:	4613      	moveq	r3, r2
    d49c:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    d49e:	2000      	movs	r0, #0
    d4a0:	e007      	b.n	d4b2 <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    d4a2:	2a10      	cmp	r2, #16
    d4a4:	d1ef      	bne.n	d486 <encode_field+0x1e>
        if (field->pSize)
    d4a6:	6a0a      	ldr	r2, [r1, #32]
    d4a8:	b132      	cbz	r2, d4b8 <encode_field+0x50>
        if (p[i] != 0)
    d4aa:	7813      	ldrb	r3, [r2, #0]
    d4ac:	2b00      	cmp	r3, #0
    d4ae:	d1ea      	bne.n	d486 <encode_field+0x1e>
            return true;
    d4b0:	2001      	movs	r0, #1
}
    d4b2:	b007      	add	sp, #28
    d4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    d4b8:	2b3f      	cmp	r3, #63	; 0x3f
    d4ba:	d8e4      	bhi.n	d486 <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    d4bc:	4608      	mov	r0, r1
    d4be:	f7ff fddd 	bl	d07c <pb_check_proto3_default_value>
    d4c2:	2800      	cmp	r0, #0
    d4c4:	d0df      	beq.n	d486 <encode_field+0x1e>
    d4c6:	e7f3      	b.n	d4b0 <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    d4c8:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    d4cc:	2a40      	cmp	r2, #64	; 0x40
    d4ce:	d10c      	bne.n	d4ea <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    d4d0:	6823      	ldr	r3, [r4, #0]
    d4d2:	68db      	ldr	r3, [r3, #12]
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	d0eb      	beq.n	d4b0 <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    d4d8:	4622      	mov	r2, r4
    d4da:	4629      	mov	r1, r5
    d4dc:	2000      	movs	r0, #0
    d4de:	4798      	blx	r3
    d4e0:	2800      	cmp	r0, #0
    d4e2:	d1e5      	bne.n	d4b0 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    d4e4:	692b      	ldr	r3, [r5, #16]
    d4e6:	4a56      	ldr	r2, [pc, #344]	; (d640 <encode_field+0x1d8>)
    d4e8:	e7d5      	b.n	d496 <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    d4ea:	f003 0130 	and.w	r1, r3, #48	; 0x30
    d4ee:	2920      	cmp	r1, #32
    d4f0:	f040 809d 	bne.w	d62e <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    d4f4:	6a21      	ldr	r1, [r4, #32]
    d4f6:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    d4f8:	2e00      	cmp	r6, #0
    d4fa:	d0d9      	beq.n	d4b0 <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    d4fc:	2a80      	cmp	r2, #128	; 0x80
    d4fe:	d120      	bne.n	d542 <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    d500:	f003 030f 	and.w	r3, r3, #15
    d504:	2b05      	cmp	r3, #5
    d506:	d85e      	bhi.n	d5c6 <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    d508:	2102      	movs	r1, #2
    d50a:	4628      	mov	r0, r5
    d50c:	8a22      	ldrh	r2, [r4, #16]
    d50e:	f018 fc88 	bl	25e22 <pb_encode_tag>
    d512:	2800      	cmp	r0, #0
    d514:	d0c3      	beq.n	d49e <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    d516:	7da3      	ldrb	r3, [r4, #22]
    d518:	f003 030f 	and.w	r3, r3, #15
    d51c:	2b04      	cmp	r3, #4
    d51e:	d116      	bne.n	d54e <encode_field+0xe6>
            size = 4 * (size_t)count;
    d520:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    d522:	463a      	mov	r2, r7
    d524:	2300      	movs	r3, #0
    d526:	4628      	mov	r0, r5
    d528:	f018 fc2d 	bl	25d86 <pb_encode_varint>
    d52c:	2800      	cmp	r0, #0
    d52e:	d0b6      	beq.n	d49e <encode_field+0x36>
        if (stream->callback == NULL)
    d530:	6829      	ldr	r1, [r5, #0]
    d532:	bb79      	cbnz	r1, d594 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    d534:	463a      	mov	r2, r7
    d536:	4628      	mov	r0, r5
}
    d538:	b007      	add	sp, #28
    d53a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    d53e:	f7ff be11 	b.w	d164 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    d542:	8aa2      	ldrh	r2, [r4, #20]
    d544:	42b2      	cmp	r2, r6
    d546:	d2db      	bcs.n	d500 <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    d548:	692b      	ldr	r3, [r5, #16]
    d54a:	4a3e      	ldr	r2, [pc, #248]	; (d644 <encode_field+0x1dc>)
    d54c:	e7a3      	b.n	d496 <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    d54e:	2b05      	cmp	r3, #5
    d550:	d101      	bne.n	d556 <encode_field+0xee>
            size = 8 * (size_t)count;
    d552:	00f7      	lsls	r7, r6, #3
    d554:	e7e5      	b.n	d522 <encode_field+0xba>
            void *pData_orig = field->pData;
    d556:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    d558:	2214      	movs	r2, #20
    d55a:	2100      	movs	r1, #0
    d55c:	a801      	add	r0, sp, #4
    d55e:	f01d fc21 	bl	2ada4 <memset>
            void *pData_orig = field->pData;
    d562:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    d566:	4621      	mov	r1, r4
    d568:	a801      	add	r0, sp, #4
    d56a:	f7ff fe1d 	bl	d1a8 <pb_enc_varint>
    d56e:	b928      	cbnz	r0, d57c <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    d570:	692b      	ldr	r3, [r5, #16]
    d572:	2b00      	cmp	r3, #0
    d574:	d192      	bne.n	d49c <encode_field+0x34>
    d576:	9b05      	ldr	r3, [sp, #20]
    d578:	4a33      	ldr	r2, [pc, #204]	; (d648 <encode_field+0x1e0>)
    d57a:	e78c      	b.n	d496 <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    d57c:	69e3      	ldr	r3, [r4, #28]
    d57e:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    d580:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    d582:	4413      	add	r3, r2
    d584:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    d586:	b2bb      	uxth	r3, r7
    d588:	429e      	cmp	r6, r3
    d58a:	d8ec      	bhi.n	d566 <encode_field+0xfe>
            size = sizestream.bytes_written;
    d58c:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    d58e:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    d592:	e7c6      	b.n	d522 <encode_field+0xba>
    d594:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    d596:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    d598:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    d59a:	f003 030e 	and.w	r3, r3, #14
    d59e:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    d5a0:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    d5a2:	d10d      	bne.n	d5c0 <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    d5a4:	f7ff fe46 	bl	d234 <pb_enc_fixed>
    d5a8:	2800      	cmp	r0, #0
    d5aa:	f43f af78 	beq.w	d49e <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    d5ae:	69e3      	ldr	r3, [r4, #28]
    d5b0:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    d5b2:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    d5b4:	4413      	add	r3, r2
    d5b6:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    d5b8:	b2bb      	uxth	r3, r7
    d5ba:	429e      	cmp	r6, r3
    d5bc:	d8eb      	bhi.n	d596 <encode_field+0x12e>
    d5be:	e777      	b.n	d4b0 <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    d5c0:	f7ff fdf2 	bl	d1a8 <pb_enc_varint>
    d5c4:	e7f0      	b.n	d5a8 <encode_field+0x140>
    d5c6:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    d5ca:	7da3      	ldrb	r3, [r4, #22]
    d5cc:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    d5d0:	2b86      	cmp	r3, #134	; 0x86
    d5d2:	d127      	bne.n	d624 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    d5d4:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    d5d6:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    d5d8:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    d5dc:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    d5de:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    d5e2:	f1b9 0f00 	cmp.w	r9, #0
    d5e6:	d11a      	bne.n	d61e <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    d5e8:	f7ff fe3a 	bl	d260 <pb_encode_tag_for_field>
    d5ec:	b908      	cbnz	r0, d5f2 <encode_field+0x18a>
                field->pData = pData_orig;
    d5ee:	61e7      	str	r7, [r4, #28]
                if (!status)
    d5f0:	e755      	b.n	d49e <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    d5f2:	2201      	movs	r2, #1
    d5f4:	4628      	mov	r0, r5
    d5f6:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    d5f8:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    d5fc:	f7ff fdb2 	bl	d164 <pb_write>
                field->pData = pData_orig;
    d600:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    d602:	2800      	cmp	r0, #0
    d604:	f43f af4b 	beq.w	d49e <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    d608:	69e3      	ldr	r3, [r4, #28]
    d60a:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    d60c:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    d610:	4413      	add	r3, r2
    d612:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    d614:	fa1f f388 	uxth.w	r3, r8
    d618:	429e      	cmp	r6, r3
    d61a:	d8d6      	bhi.n	d5ca <encode_field+0x162>
    d61c:	e748      	b.n	d4b0 <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    d61e:	f7ff fe91 	bl	d344 <encode_basic_field>
    d622:	e7ed      	b.n	d600 <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    d624:	4621      	mov	r1, r4
    d626:	4628      	mov	r0, r5
    d628:	f7ff fe8c 	bl	d344 <encode_basic_field>
    d62c:	e7e9      	b.n	d602 <encode_field+0x19a>
        return encode_basic_field(stream, field);
    d62e:	4621      	mov	r1, r4
    d630:	4628      	mov	r0, r5
}
    d632:	b007      	add	sp, #28
    d634:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    d638:	f7ff be84 	b.w	d344 <encode_basic_field>
    d63c:	0002dbba 	.word	0x0002dbba
    d640:	0002dbd1 	.word	0x0002dbd1
    d644:	0002dbe0 	.word	0x0002dbe0
    d648:	0002dbf8 	.word	0x0002dbf8

0000d64c <pb_encode>:
{
    d64c:	b530      	push	{r4, r5, lr}
    d64e:	b095      	sub	sp, #84	; 0x54
    d650:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    d652:	4668      	mov	r0, sp
    d654:	f018 fb72 	bl	25d3c <pb_field_iter_begin_const>
    d658:	b370      	cbz	r0, d6b8 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    d65a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d65e:	f003 030f 	and.w	r3, r3, #15
    d662:	2b0a      	cmp	r3, #10
    d664:	d121      	bne.n	d6aa <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    d666:	9b07      	ldr	r3, [sp, #28]
    d668:	681d      	ldr	r5, [r3, #0]
    while (extension)
    d66a:	b91d      	cbnz	r5, d674 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    d66c:	4668      	mov	r0, sp
    d66e:	f018 fb5a 	bl	25d26 <pb_field_iter_next>
    d672:	e7f1      	b.n	d658 <pb_encode+0xc>
        if (extension->type->encode)
    d674:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    d676:	4629      	mov	r1, r5
        if (extension->type->encode)
    d678:	685b      	ldr	r3, [r3, #4]
    d67a:	b123      	cbz	r3, d686 <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    d67c:	4620      	mov	r0, r4
    d67e:	4798      	blx	r3
        if (!status)
    d680:	b158      	cbz	r0, d69a <pb_encode+0x4e>
        extension = extension->next;
    d682:	68ad      	ldr	r5, [r5, #8]
    d684:	e7f1      	b.n	d66a <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    d686:	a80a      	add	r0, sp, #40	; 0x28
    d688:	f018 fb5a 	bl	25d40 <pb_field_iter_begin_extension_const>
    d68c:	b940      	cbnz	r0, d6a0 <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    d68e:	6923      	ldr	r3, [r4, #16]
    d690:	4a0a      	ldr	r2, [pc, #40]	; (d6bc <pb_encode+0x70>)
    d692:	2b00      	cmp	r3, #0
    d694:	bf08      	it	eq
    d696:	4613      	moveq	r3, r2
    d698:	6123      	str	r3, [r4, #16]
                return false;
    d69a:	2000      	movs	r0, #0
}
    d69c:	b015      	add	sp, #84	; 0x54
    d69e:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    d6a0:	4620      	mov	r0, r4
    d6a2:	a90a      	add	r1, sp, #40	; 0x28
    d6a4:	f7ff fee0 	bl	d468 <encode_field>
    d6a8:	e7ea      	b.n	d680 <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    d6aa:	4669      	mov	r1, sp
    d6ac:	4620      	mov	r0, r4
    d6ae:	f7ff fedb 	bl	d468 <encode_field>
    d6b2:	2800      	cmp	r0, #0
    d6b4:	d1da      	bne.n	d66c <pb_encode+0x20>
    d6b6:	e7f0      	b.n	d69a <pb_encode+0x4e>
        return true; /* Empty message type */
    d6b8:	2001      	movs	r0, #1
    d6ba:	e7ef      	b.n	d69c <pb_encode+0x50>
    d6bc:	0002dbff 	.word	0x0002dbff

0000d6c0 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6c4:	b091      	sub	sp, #68	; 0x44
    d6c6:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    d6c8:	f002 0304 	and.w	r3, r2, #4
    d6cc:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    d6ce:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    d6d2:	3301      	adds	r3, #1
    d6d4:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    d6d6:	0783      	lsls	r3, r0, #30
{
    d6d8:	4605      	mov	r5, r0
    d6da:	460e      	mov	r6, r1
    d6dc:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    d6e0:	9202      	str	r2, [sp, #8]
	if ((uintptr_t)packaged % sizeof(void *)) {
    d6e2:	f040 81fe 	bne.w	dae2 <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    d6e6:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    d6e8:	b130      	cbz	r0, d6f8 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    d6ea:	2907      	cmp	r1, #7
    d6ec:	d809      	bhi.n	d702 <cbvprintf_package+0x42>
		return -ENOSPC;
    d6ee:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    d6f2:	b011      	add	sp, #68	; 0x44
    d6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    d6f8:	f001 0607 	and.w	r6, r1, #7
    d6fc:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    d6fe:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    d702:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    d706:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    d70a:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    d70c:	4647      	mov	r7, r8
	s = fmt--;
    d70e:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    d710:	f04f 32ff 	mov.w	r2, #4294967295
	bool parsing = false;
    d714:	4643      	mov	r3, r8
	size = sizeof(char *);
    d716:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    d718:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
    d71c:	b10d      	cbz	r5, d722 <cbvprintf_package+0x62>
				*(const char **)buf = s;
    d71e:	9800      	ldr	r0, [sp, #0]
    d720:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d722:	9804      	ldr	r0, [sp, #16]
    d724:	2800      	cmp	r0, #0
    d726:	f300 80e1 	bgt.w	d8ec <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    d72a:	489c      	ldr	r0, [pc, #624]	; (d99c <cbvprintf_package+0x2dc>)
    d72c:	f8dd c000 	ldr.w	ip, [sp]
    d730:	4584      	cmp	ip, r0
    d732:	d303      	bcc.n	d73c <cbvprintf_package+0x7c>
    d734:	489a      	ldr	r0, [pc, #616]	; (d9a0 <cbvprintf_package+0x2e0>)
    d736:	4584      	cmp	ip, r0
    d738:	f0c0 80d8 	bcc.w	d8ec <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d73c:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d740:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d744:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d748:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d74c:	f000 80e9 	beq.w	d922 <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d750:	f04f 0c00 	mov.w	ip, #0
    d754:	e0d3      	b.n	d8fe <cbvprintf_package+0x23e>
			switch (*fmt) {
    d756:	287a      	cmp	r0, #122	; 0x7a
    d758:	d864      	bhi.n	d824 <cbvprintf_package+0x164>
    d75a:	284b      	cmp	r0, #75	; 0x4b
    d75c:	d80f      	bhi.n	d77e <cbvprintf_package+0xbe>
    d75e:	2847      	cmp	r0, #71	; 0x47
    d760:	d860      	bhi.n	d824 <cbvprintf_package+0x164>
    d762:	2829      	cmp	r0, #41	; 0x29
    d764:	d82f      	bhi.n	d7c6 <cbvprintf_package+0x106>
    d766:	2825      	cmp	r0, #37	; 0x25
    d768:	d05b      	beq.n	d822 <cbvprintf_package+0x162>
    d76a:	d85b      	bhi.n	d824 <cbvprintf_package+0x164>
    d76c:	2820      	cmp	r0, #32
    d76e:	d07f      	beq.n	d870 <cbvprintf_package+0x1b0>
    d770:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    d774:	f1d9 0300 	rsbs	r3, r9, #0
    d778:	eb43 0309 	adc.w	r3, r3, r9
    d77c:	e078      	b.n	d870 <cbvprintf_package+0x1b0>
    d77e:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    d782:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    d786:	d84d      	bhi.n	d824 <cbvprintf_package+0x164>
    d788:	e8df f00e 	tbb	[pc, lr]
    d78c:	4c4c4c72 	.word	0x4c4c4c72
    d790:	4c4c4c4c 	.word	0x4c4c4c4c
    d794:	4c4c4c4c 	.word	0x4c4c4c4c
    d798:	4c4c4c4e 	.word	0x4c4c4c4e
    d79c:	4c4c4c4c 	.word	0x4c4c4c4c
    d7a0:	4e4c5c4c 	.word	0x4e4c5c4c
    d7a4:	5c5c5c4e 	.word	0x5c5c5c4e
    d7a8:	4c6f4e72 	.word	0x4c6f4e72
    d7ac:	4e184c72 	.word	0x4e184c72
    d7b0:	814c4c18 	.word	0x814c4c18
    d7b4:	4c4c4e7e 	.word	0x4c4c4e7e
    d7b8:	4c4e      	.short	0x4c4e
    d7ba:	7e          	.byte	0x7e
    d7bb:	00          	.byte	0x00
    d7bc:	2000      	movs	r0, #0
    d7be:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    d7c0:	f04f 0b04 	mov.w	fp, #4
    d7c4:	e03c      	b.n	d840 <cbvprintf_package+0x180>
			switch (*fmt) {
    d7c6:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    d7ca:	2001      	movs	r0, #1
    d7cc:	fa5f fe8e 	uxtb.w	lr, lr
    d7d0:	fa00 fe0e 	lsl.w	lr, r0, lr
    d7d4:	f64f 70da 	movw	r0, #65498	; 0xffda
    d7d8:	ea1e 0f00 	tst.w	lr, r0
    d7dc:	d148      	bne.n	d870 <cbvprintf_package+0x1b0>
    d7de:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    d7e2:	d12f      	bne.n	d844 <cbvprintf_package+0x184>
    d7e4:	f01e 0301 	ands.w	r3, lr, #1
    d7e8:	d042      	beq.n	d870 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    d7ea:	3c01      	subs	r4, #1
    d7ec:	445c      	add	r4, fp
    d7ee:	f1cb 0e00 	rsb	lr, fp, #0
    d7f2:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    d7f6:	2d00      	cmp	r5, #0
    d7f8:	d05e      	beq.n	d8b8 <cbvprintf_package+0x1f8>
    d7fa:	ebaa 0e05 	sub.w	lr, sl, r5
    d7fe:	44a6      	add	lr, r4
    d800:	4576      	cmp	r6, lr
    d802:	f4ff af74 	bcc.w	d6ee <cbvprintf_package+0x2e>
		if (is_str_arg) {
    d806:	2800      	cmp	r0, #0
    d808:	d168      	bne.n	d8dc <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    d80a:	f1ba 0f04 	cmp.w	sl, #4
    d80e:	d143      	bne.n	d898 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    d810:	46e1      	mov	r9, ip
    d812:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    d816:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    d818:	46cc      	mov	ip, r9
    d81a:	f04f 0a04 	mov.w	sl, #4
    d81e:	3404      	adds	r4, #4
    d820:	e026      	b.n	d870 <cbvprintf_package+0x1b0>
				arg_idx--;
    d822:	3a01      	subs	r2, #1
				parsing = false;
    d824:	2300      	movs	r3, #0
				continue;
    d826:	e023      	b.n	d870 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    d828:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    d82c:	2b6c      	cmp	r3, #108	; 0x6c
    d82e:	d130      	bne.n	d892 <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    d830:	2000      	movs	r0, #0
    d832:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    d836:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    d838:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    d83a:	d1c1      	bne.n	d7c0 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    d83c:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    d840:	46da      	mov	sl, fp
    d842:	e7d2      	b.n	d7ea <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    d844:	f10c 0907 	add.w	r9, ip, #7
    d848:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    d84c:	3407      	adds	r4, #7
    d84e:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    d852:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
    d856:	b135      	cbz	r5, d866 <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    d858:	9805      	ldr	r0, [sp, #20]
    d85a:	4420      	add	r0, r4
    d85c:	42b0      	cmp	r0, r6
    d85e:	f63f af46 	bhi.w	d6ee <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    d862:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    d866:	2300      	movs	r3, #0
				buf += size;
    d868:	3408      	adds	r4, #8
			switch (*fmt) {
    d86a:	f04f 0b08 	mov.w	fp, #8
    d86e:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    d870:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    d874:	2800      	cmp	r0, #0
    d876:	f000 80bc 	beq.w	d9f2 <cbvprintf_package+0x332>
			if (!parsing) {
    d87a:	2b00      	cmp	r3, #0
    d87c:	f47f af6b 	bne.w	d756 <cbvprintf_package+0x96>
				if (*fmt == '%') {
    d880:	2825      	cmp	r0, #37	; 0x25
    d882:	d1f5      	bne.n	d870 <cbvprintf_package+0x1b0>
					parsing = true;
    d884:	2301      	movs	r3, #1
					arg_idx++;
    d886:	3201      	adds	r2, #1
				align = VA_STACK_ALIGN(size_t);
    d888:	f04f 0b04 	mov.w	fp, #4
    d88c:	e7ef      	b.n	d86e <cbvprintf_package+0x1ae>
			switch (*fmt) {
    d88e:	4618      	mov	r0, r3
    d890:	e795      	b.n	d7be <cbvprintf_package+0xfe>
    d892:	2000      	movs	r0, #0
				parsing = false;
    d894:	4603      	mov	r3, r0
    d896:	e7a8      	b.n	d7ea <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    d898:	f1ba 0f08 	cmp.w	sl, #8
    d89c:	f040 809b 	bne.w	d9d6 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    d8a0:	f10c 0907 	add.w	r9, ip, #7
    d8a4:	f029 0c07 	bic.w	ip, r9, #7
    d8a8:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    d8ac:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    d8b0:	f04f 0a08 	mov.w	sl, #8
    d8b4:	3408      	adds	r4, #8
    d8b6:	e7db      	b.n	d870 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    d8b8:	b980      	cbnz	r0, d8dc <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    d8ba:	f1ba 0f04 	cmp.w	sl, #4
    d8be:	d102      	bne.n	d8c6 <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    d8c0:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    d8c4:	e7a8      	b.n	d818 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    d8c6:	f1ba 0f08 	cmp.w	sl, #8
    d8ca:	f040 8084 	bne.w	d9d6 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    d8ce:	f10c 0907 	add.w	r9, ip, #7
    d8d2:	f029 0907 	bic.w	r9, r9, #7
    d8d6:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    d8da:	e7e9      	b.n	d8b0 <cbvprintf_package+0x1f0>
			s = va_arg(ap, char *);
    d8dc:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d8de:	9804      	ldr	r0, [sp, #16]
    d8e0:	3801      	subs	r0, #1
    d8e2:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    d8e4:	f859 0b04 	ldr.w	r0, [r9], #4
    d8e8:	9000      	str	r0, [sp, #0]
    d8ea:	e717      	b.n	d71c <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    d8ec:	9802      	ldr	r0, [sp, #8]
    d8ee:	0780      	lsls	r0, r0, #30
    d8f0:	d548      	bpl.n	d984 <cbvprintf_package+0x2c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d8f2:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d8f6:	eba4 0e05 	sub.w	lr, r4, r5
    d8fa:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d8fe:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    d902:	d31d      	bcc.n	d940 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    d904:	4927      	ldr	r1, [pc, #156]	; (d9a4 <cbvprintf_package+0x2e4>)
    d906:	f240 237b 	movw	r3, #635	; 0x27b
    d90a:	4a27      	ldr	r2, [pc, #156]	; (d9a8 <cbvprintf_package+0x2e8>)
    d90c:	4827      	ldr	r0, [pc, #156]	; (d9ac <cbvprintf_package+0x2ec>)
    d90e:	f018 fca6 	bl	2625e <assert_print>
    d912:	4827      	ldr	r0, [pc, #156]	; (d9b0 <cbvprintf_package+0x2f0>)
    d914:	f018 fca3 	bl	2625e <assert_print>
    d918:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    d91c:	4822      	ldr	r0, [pc, #136]	; (d9a8 <cbvprintf_package+0x2e8>)
    d91e:	f018 fc97 	bl	26250 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    d922:	2f0f      	cmp	r7, #15
    d924:	d80e      	bhi.n	d944 <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    d926:	2d00      	cmp	r5, #0
    d928:	d046      	beq.n	d9b8 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    d92a:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    d92e:	44ec      	add	ip, sp
    d930:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    d934:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    d938:	9803      	ldr	r0, [sp, #12]
    d93a:	3001      	adds	r0, #1
    d93c:	9003      	str	r0, [sp, #12]
    d93e:	e020      	b.n	d982 <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    d940:	2f0f      	cmp	r7, #15
    d942:	d90c      	bls.n	d95e <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    d944:	4917      	ldr	r1, [pc, #92]	; (d9a4 <cbvprintf_package+0x2e4>)
    d946:	f44f 7320 	mov.w	r3, #640	; 0x280
    d94a:	4a17      	ldr	r2, [pc, #92]	; (d9a8 <cbvprintf_package+0x2e8>)
    d94c:	4817      	ldr	r0, [pc, #92]	; (d9ac <cbvprintf_package+0x2ec>)
    d94e:	f018 fc86 	bl	2625e <assert_print>
    d952:	4818      	ldr	r0, [pc, #96]	; (d9b4 <cbvprintf_package+0x2f4>)
    d954:	f018 fc83 	bl	2625e <assert_print>
    d958:	f44f 7120 	mov.w	r1, #640	; 0x280
    d95c:	e7de      	b.n	d91c <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    d95e:	b1bd      	cbz	r5, d990 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    d960:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    d964:	44ee      	add	lr, sp
    d966:	b2c0      	uxtb	r0, r0
    d968:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    d96c:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    d970:	f1bc 0f00 	cmp.w	ip, #0
    d974:	d0e0      	beq.n	d938 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    d976:	f060 007f 	orn	r0, r0, #127	; 0x7f
    d97a:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    d97e:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    d982:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    d984:	f1c5 0008 	rsb	r0, r5, #8
    d988:	46cc      	mov	ip, r9
			buf += sizeof(char *);
    d98a:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    d98c:	9005      	str	r0, [sp, #20]
    d98e:	e76f      	b.n	d870 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    d990:	f1bc 0f00 	cmp.w	ip, #0
    d994:	d010      	beq.n	d9b8 <cbvprintf_package+0x2f8>
					len += 1;
    d996:	3601      	adds	r6, #1
    d998:	e7f3      	b.n	d982 <cbvprintf_package+0x2c2>
    d99a:	bf00      	nop
    d99c:	0002b9ac 	.word	0x0002b9ac
    d9a0:	00032d70 	.word	0x00032d70
    d9a4:	0003297c 	.word	0x0003297c
    d9a8:	0002dc11 	.word	0x0002dc11
    d9ac:	0002d095 	.word	0x0002d095
    d9b0:	0002dc3f 	.word	0x0002dc3f
    d9b4:	0002dc60 	.word	0x0002dc60
				} else if (rws_pos_en) {
    d9b8:	9801      	ldr	r0, [sp, #4]
					len += 2;
    d9ba:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    d9bc:	2800      	cmp	r0, #0
    d9be:	d1e0      	bne.n	d982 <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    d9c0:	9800      	ldr	r0, [sp, #0]
    d9c2:	e9cd 3106 	strd	r3, r1, [sp, #24]
    d9c6:	9205      	str	r2, [sp, #20]
    d9c8:	f7fb fd1f 	bl	940a <strlen>
    d9cc:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    d9d0:	9a05      	ldr	r2, [sp, #20]
    d9d2:	4406      	add	r6, r0
    d9d4:	e7d5      	b.n	d982 <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    d9d6:	f240 23c5 	movw	r3, #709	; 0x2c5
    d9da:	4a43      	ldr	r2, [pc, #268]	; (dae8 <cbvprintf_package+0x428>)
    d9dc:	4943      	ldr	r1, [pc, #268]	; (daec <cbvprintf_package+0x42c>)
    d9de:	4844      	ldr	r0, [pc, #272]	; (daf0 <cbvprintf_package+0x430>)
    d9e0:	f018 fc3d 	bl	2625e <assert_print>
    d9e4:	4651      	mov	r1, sl
    d9e6:	4843      	ldr	r0, [pc, #268]	; (daf4 <cbvprintf_package+0x434>)
    d9e8:	f018 fc39 	bl	2625e <assert_print>
    d9ec:	f240 21c5 	movw	r1, #709	; 0x2c5
    d9f0:	e794      	b.n	d91c <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    d9f2:	1b63      	subs	r3, r4, r5
    d9f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    d9f8:	d30c      	bcc.n	da14 <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    d9fa:	493c      	ldr	r1, [pc, #240]	; (daec <cbvprintf_package+0x42c>)
    d9fc:	f240 23d1 	movw	r3, #721	; 0x2d1
    da00:	4a39      	ldr	r2, [pc, #228]	; (dae8 <cbvprintf_package+0x428>)
    da02:	483b      	ldr	r0, [pc, #236]	; (daf0 <cbvprintf_package+0x430>)
    da04:	f018 fc2b 	bl	2625e <assert_print>
    da08:	483b      	ldr	r0, [pc, #236]	; (daf8 <cbvprintf_package+0x438>)
    da0a:	f018 fc28 	bl	2625e <assert_print>
    da0e:	f240 21d1 	movw	r1, #721	; 0x2d1
    da12:	e783      	b.n	d91c <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    da14:	b91d      	cbnz	r5, da1e <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    da16:	f1a6 0408 	sub.w	r4, r6, #8
    da1a:	18e0      	adds	r0, r4, r3
    da1c:	e669      	b.n	d6f2 <cbvprintf_package+0x32>
	if (rws_pos_en) {
    da1e:	9a01      	ldr	r2, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    da20:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    da22:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    da24:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    da26:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    da2a:	b1c2      	cbz	r2, da5e <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    da2c:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    da2e:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    da32:	f1b8 0f00 	cmp.w	r8, #0
    da36:	d005      	beq.n	da44 <cbvprintf_package+0x384>
		for (i = 0; i < s_idx; i++) {
    da38:	2200      	movs	r2, #0
    da3a:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    da3c:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    da40:	4297      	cmp	r7, r2
    da42:	d10e      	bne.n	da62 <cbvprintf_package+0x3a2>
			*buf++ = str_ptr_arg[i];
    da44:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    da48:	f1c5 0301 	rsb	r3, r5, #1
    da4c:	f10d 0920 	add.w	r9, sp, #32
    da50:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    da52:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    da56:	4557      	cmp	r7, sl
    da58:	d112      	bne.n	da80 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    da5a:	1b60      	subs	r0, r4, r5
    da5c:	e649      	b.n	d6f2 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    da5e:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    da60:	e7e5      	b.n	da2e <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    da62:	f810 3b01 	ldrb.w	r3, [r0], #1
    da66:	0619      	lsls	r1, r3, #24
    da68:	d508      	bpl.n	da7c <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    da6a:	eb04 0e0c 	add.w	lr, r4, ip
    da6e:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    da70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    da74:	f4ff ae3b 	bcc.w	d6ee <cbvprintf_package+0x2e>
			*buf++ = pos;
    da78:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    da7c:	3201      	adds	r2, #1
    da7e:	e7df      	b.n	da40 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    da80:	f1b8 0f00 	cmp.w	r8, #0
    da84:	d003      	beq.n	da8e <cbvprintf_package+0x3ce>
    da86:	f999 2000 	ldrsb.w	r2, [r9]
    da8a:	2a00      	cmp	r2, #0
    da8c:	db17      	blt.n	dabe <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    da8e:	9b01      	ldr	r3, [sp, #4]
    da90:	b1d3      	cbz	r3, dac8 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    da92:	f81a 200b 	ldrb.w	r2, [sl, fp]
    da96:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    da9a:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    da9c:	9b02      	ldr	r3, [sp, #8]
    da9e:	1898      	adds	r0, r3, r2
    daa0:	4420      	add	r0, r4
    daa2:	4286      	cmp	r6, r0
    daa4:	f4ff ae23 	bcc.w	d6ee <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    daa8:	f899 0000 	ldrb.w	r0, [r9]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    daac:	9900      	ldr	r1, [sp, #0]
    daae:	f804 0b01 	strb.w	r0, [r4], #1
    dab2:	4620      	mov	r0, r4
    dab4:	9203      	str	r2, [sp, #12]
    dab6:	f01d f93b 	bl	2ad30 <memcpy>
		buf += size;
    daba:	9a03      	ldr	r2, [sp, #12]
    dabc:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    dabe:	f10a 0a01 	add.w	sl, sl, #1
    dac2:	f109 0901 	add.w	r9, r9, #1
    dac6:	e7c6      	b.n	da56 <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    dac8:	f899 2000 	ldrb.w	r2, [r9]
    dacc:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    dad0:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    dad2:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
    dad4:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    dad6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    dada:	f7fb fc96 	bl	940a <strlen>
    dade:	1c42      	adds	r2, r0, #1
    dae0:	e7dc      	b.n	da9c <cbvprintf_package+0x3dc>
		return -EFAULT;
    dae2:	f06f 000d 	mvn.w	r0, #13
    dae6:	e604      	b.n	d6f2 <cbvprintf_package+0x32>
    dae8:	0002dc11 	.word	0x0002dc11
    daec:	0003297c 	.word	0x0003297c
    daf0:	0002d095 	.word	0x0002d095
    daf4:	0002dc7a 	.word	0x0002dc7a
    daf8:	0002dc8f 	.word	0x0002dc8f

0000dafc <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    dafc:	4b01      	ldr	r3, [pc, #4]	; (db04 <char_out+0x8>)
    dafe:	681b      	ldr	r3, [r3, #0]
    db00:	4718      	bx	r3
    db02:	bf00      	nop
    db04:	200083f8 	.word	0x200083f8

0000db08 <__printk_hook_install>:
	_char_out = fn;
    db08:	4b01      	ldr	r3, [pc, #4]	; (db10 <__printk_hook_install+0x8>)
    db0a:	6018      	str	r0, [r3, #0]
}
    db0c:	4770      	bx	lr
    db0e:	bf00      	nop
    db10:	200083f8 	.word	0x200083f8

0000db14 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    db14:	b507      	push	{r0, r1, r2, lr}
    db16:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    db18:	2100      	movs	r1, #0
    db1a:	4602      	mov	r2, r0
    db1c:	9100      	str	r1, [sp, #0]
    db1e:	4803      	ldr	r0, [pc, #12]	; (db2c <vprintk+0x18>)
    db20:	f000 fcb0 	bl	e484 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    db24:	b003      	add	sp, #12
    db26:	f85d fb04 	ldr.w	pc, [sp], #4
    db2a:	bf00      	nop
    db2c:	0000dafd 	.word	0x0000dafd

0000db30 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    db30:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    db32:	2500      	movs	r5, #0
{
    db34:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    db36:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    db3a:	4604      	mov	r4, r0
    db3c:	9500      	str	r5, [sp, #0]
    db3e:	a903      	add	r1, sp, #12
    db40:	4805      	ldr	r0, [pc, #20]	; (db58 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    db42:	9505      	str	r5, [sp, #20]
    db44:	f000 fc9e 	bl	e484 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    db48:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    db4c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    db4e:	bfb8      	it	lt
    db50:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    db52:	b007      	add	sp, #28
    db54:	bd30      	pop	{r4, r5, pc}
    db56:	bf00      	nop
    db58:	00025eb5 	.word	0x00025eb5

0000db5c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    db5c:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    db5e:	460c      	mov	r4, r1
    db60:	2900      	cmp	r1, #0
    db62:	d034      	beq.n	dbce <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    db64:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    db66:	1f0b      	subs	r3, r1, #4
    db68:	1a9b      	subs	r3, r3, r2
    db6a:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    db6c:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    db70:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    db72:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    db74:	07e8      	lsls	r0, r5, #31
    db76:	d40d      	bmi.n	db94 <sys_heap_free+0x38>
    db78:	23af      	movs	r3, #175	; 0xaf
    db7a:	4a15      	ldr	r2, [pc, #84]	; (dbd0 <sys_heap_free+0x74>)
    db7c:	4915      	ldr	r1, [pc, #84]	; (dbd4 <sys_heap_free+0x78>)
    db7e:	4816      	ldr	r0, [pc, #88]	; (dbd8 <sys_heap_free+0x7c>)
    db80:	f018 fb6d 	bl	2625e <assert_print>
    db84:	4621      	mov	r1, r4
    db86:	4815      	ldr	r0, [pc, #84]	; (dbdc <sys_heap_free+0x80>)
    db88:	f018 fb69 	bl	2625e <assert_print>
    db8c:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    db8e:	4810      	ldr	r0, [pc, #64]	; (dbd0 <sys_heap_free+0x74>)
    db90:	f018 fb5e 	bl	26250 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    db94:	4610      	mov	r0, r2
    db96:	f018 f9c4 	bl	25f22 <chunk_size>
    db9a:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    db9c:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    dba0:	1b80      	subs	r0, r0, r6
    dba2:	4281      	cmp	r1, r0
    dba4:	d00b      	beq.n	dbbe <sys_heap_free+0x62>
    dba6:	23b7      	movs	r3, #183	; 0xb7
    dba8:	4a09      	ldr	r2, [pc, #36]	; (dbd0 <sys_heap_free+0x74>)
    dbaa:	490d      	ldr	r1, [pc, #52]	; (dbe0 <sys_heap_free+0x84>)
    dbac:	480a      	ldr	r0, [pc, #40]	; (dbd8 <sys_heap_free+0x7c>)
    dbae:	f018 fb56 	bl	2625e <assert_print>
    dbb2:	4621      	mov	r1, r4
    dbb4:	480b      	ldr	r0, [pc, #44]	; (dbe4 <sys_heap_free+0x88>)
    dbb6:	f018 fb52 	bl	2625e <assert_print>
    dbba:	21b7      	movs	r1, #183	; 0xb7
    dbbc:	e7e7      	b.n	db8e <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    dbbe:	f025 0501 	bic.w	r5, r5, #1
    dbc2:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    dbc4:	4610      	mov	r0, r2
}
    dbc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    dbca:	f018 ba67 	b.w	2609c <free_chunk>
}
    dbce:	bd70      	pop	{r4, r5, r6, pc}
    dbd0:	0002dcb7 	.word	0x0002dcb7
    dbd4:	0002dcd8 	.word	0x0002dcd8
    dbd8:	0002d095 	.word	0x0002d095
    dbdc:	0002dce9 	.word	0x0002dce9
    dbe0:	0002dd21 	.word	0x0002dd21
    dbe4:	0002dd47 	.word	0x0002dd47

0000dbe8 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    dbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dbec:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    dbee:	400b      	ands	r3, r1
{
    dbf0:	460f      	mov	r7, r1
    dbf2:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    dbf4:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    dbf6:	d010      	beq.n	dc1a <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    dbf8:	f1c1 0900 	rsb	r9, r1, #0
    dbfc:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    dc00:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    dc02:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    dc04:	2a04      	cmp	r2, #4
    dc06:	bf28      	it	cs
    dc08:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    dc0a:	4219      	tst	r1, r3
    dc0c:	d10c      	bne.n	dc28 <sys_heap_aligned_alloc+0x40>
    dc0e:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    dc10:	b9e4      	cbnz	r4, dc4c <sys_heap_aligned_alloc+0x64>
		return NULL;
    dc12:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    dc14:	4628      	mov	r0, r5
    dc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    dc1a:	2904      	cmp	r1, #4
    dc1c:	d813      	bhi.n	dc46 <sys_heap_aligned_alloc+0x5e>
}
    dc1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    dc22:	4611      	mov	r1, r2
    dc24:	f018 ba6b 	b.w	260fe <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    dc28:	492c      	ldr	r1, [pc, #176]	; (dcdc <sys_heap_aligned_alloc+0xf4>)
    dc2a:	f44f 73a2 	mov.w	r3, #324	; 0x144
    dc2e:	4a2c      	ldr	r2, [pc, #176]	; (dce0 <sys_heap_aligned_alloc+0xf8>)
    dc30:	482c      	ldr	r0, [pc, #176]	; (dce4 <sys_heap_aligned_alloc+0xfc>)
    dc32:	f018 fb14 	bl	2625e <assert_print>
    dc36:	482c      	ldr	r0, [pc, #176]	; (dce8 <sys_heap_aligned_alloc+0x100>)
    dc38:	f018 fb11 	bl	2625e <assert_print>
    dc3c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    dc40:	4827      	ldr	r0, [pc, #156]	; (dce0 <sys_heap_aligned_alloc+0xf8>)
    dc42:	f018 fb05 	bl	26250 <assert_post_action>
		rew = 0;
    dc46:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    dc48:	2204      	movs	r2, #4
    dc4a:	e7e1      	b.n	dc10 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    dc4c:	68b3      	ldr	r3, [r6, #8]
    dc4e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    dc52:	d9de      	bls.n	dc12 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    dc54:	f104 010b 	add.w	r1, r4, #11
    dc58:	4439      	add	r1, r7
    dc5a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    dc5c:	4630      	mov	r0, r6
    dc5e:	08c9      	lsrs	r1, r1, #3
    dc60:	f018 f9b5 	bl	25fce <alloc_chunk>
	if (c0 == 0) {
    dc64:	4680      	mov	r8, r0
    dc66:	2800      	cmp	r0, #0
    dc68:	d0d3      	beq.n	dc12 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    dc6a:	f109 0504 	add.w	r5, r9, #4
    dc6e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    dc72:	1e7b      	subs	r3, r7, #1
    dc74:	4435      	add	r5, r6
    dc76:	441d      	add	r5, r3
    dc78:	427f      	negs	r7, r7
    dc7a:	403d      	ands	r5, r7
    dc7c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    dc80:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    dc82:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    dc84:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    dc86:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    dc88:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    dc8c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    dc8e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    dc92:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    dc96:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    dc9a:	d208      	bcs.n	dcae <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    dc9c:	4601      	mov	r1, r0
    dc9e:	463a      	mov	r2, r7
    dca0:	4630      	mov	r0, r6
    dca2:	f018 f9e1 	bl	26068 <split_chunks>
		free_list_add(h, c0);
    dca6:	4641      	mov	r1, r8
    dca8:	4630      	mov	r0, r6
    dcaa:	f018 f93f 	bl	25f2c <free_list_add>
	return c + chunk_size(h, c);
    dcae:	4639      	mov	r1, r7
    dcb0:	4630      	mov	r0, r6
    dcb2:	f018 f936 	bl	25f22 <chunk_size>
    dcb6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    dcb8:	4284      	cmp	r4, r0
    dcba:	d207      	bcs.n	dccc <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    dcbc:	4630      	mov	r0, r6
    dcbe:	4622      	mov	r2, r4
    dcc0:	f018 f9d2 	bl	26068 <split_chunks>
		free_list_add(h, c_end);
    dcc4:	4621      	mov	r1, r4
    dcc6:	4630      	mov	r0, r6
    dcc8:	f018 f930 	bl	25f2c <free_list_add>
	void *cmem = &buf[c];
    dccc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dcd0:	8873      	ldrh	r3, [r6, #2]
    dcd2:	f043 0301 	orr.w	r3, r3, #1
    dcd6:	8073      	strh	r3, [r6, #2]
    dcd8:	e79c      	b.n	dc14 <sys_heap_aligned_alloc+0x2c>
    dcda:	bf00      	nop
    dcdc:	0002dd83 	.word	0x0002dd83
    dce0:	0002dcb7 	.word	0x0002dcb7
    dce4:	0002d095 	.word	0x0002d095
    dce8:	0002dd9e 	.word	0x0002dd9e

0000dcec <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    dcec:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcf2:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    dcf4:	d30e      	bcc.n	dd14 <sys_heap_init+0x28>
    dcf6:	493a      	ldr	r1, [pc, #232]	; (dde0 <sys_heap_init+0xf4>)
    dcf8:	f240 13eb 	movw	r3, #491	; 0x1eb
    dcfc:	4a39      	ldr	r2, [pc, #228]	; (dde4 <sys_heap_init+0xf8>)
    dcfe:	483a      	ldr	r0, [pc, #232]	; (dde8 <sys_heap_init+0xfc>)
    dd00:	f018 faad 	bl	2625e <assert_print>
    dd04:	4839      	ldr	r0, [pc, #228]	; (ddec <sys_heap_init+0x100>)
    dd06:	f018 faaa 	bl	2625e <assert_print>
    dd0a:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    dd0e:	4835      	ldr	r0, [pc, #212]	; (dde4 <sys_heap_init+0xf8>)
    dd10:	f018 fa9e 	bl	26250 <assert_post_action>
    dd14:	2a04      	cmp	r2, #4
    dd16:	d80c      	bhi.n	dd32 <sys_heap_init+0x46>
    dd18:	4935      	ldr	r1, [pc, #212]	; (ddf0 <sys_heap_init+0x104>)
    dd1a:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    dd1e:	4a31      	ldr	r2, [pc, #196]	; (dde4 <sys_heap_init+0xf8>)
    dd20:	4831      	ldr	r0, [pc, #196]	; (dde8 <sys_heap_init+0xfc>)
    dd22:	f018 fa9c 	bl	2625e <assert_print>
    dd26:	4833      	ldr	r0, [pc, #204]	; (ddf4 <sys_heap_init+0x108>)
    dd28:	f018 fa99 	bl	2625e <assert_print>
    dd2c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    dd30:	e7ed      	b.n	dd0e <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    dd32:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    dd34:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    dd36:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    dd38:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    dd3c:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    dd40:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    dd42:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    dd44:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    dd48:	d80c      	bhi.n	dd64 <sys_heap_init+0x78>
    dd4a:	492b      	ldr	r1, [pc, #172]	; (ddf8 <sys_heap_init+0x10c>)
    dd4c:	f240 13fb 	movw	r3, #507	; 0x1fb
    dd50:	4a24      	ldr	r2, [pc, #144]	; (dde4 <sys_heap_init+0xf8>)
    dd52:	4825      	ldr	r0, [pc, #148]	; (dde8 <sys_heap_init+0xfc>)
    dd54:	f018 fa83 	bl	2625e <assert_print>
    dd58:	4826      	ldr	r0, [pc, #152]	; (ddf4 <sys_heap_init+0x108>)
    dd5a:	f018 fa80 	bl	2625e <assert_print>
    dd5e:	f240 11fb 	movw	r1, #507	; 0x1fb
    dd62:	e7d4      	b.n	dd0e <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    dd64:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    dd68:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    dd6a:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    dd6c:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    dd70:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    dd74:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    dd76:	3107      	adds	r1, #7
    dd78:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    dd7a:	1c4d      	adds	r5, r1, #1
    dd7c:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    dd7e:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    dd80:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    dd82:	d90c      	bls.n	dd9e <sys_heap_init+0xb2>
    dd84:	491d      	ldr	r1, [pc, #116]	; (ddfc <sys_heap_init+0x110>)
    dd86:	f44f 7303 	mov.w	r3, #524	; 0x20c
    dd8a:	4a16      	ldr	r2, [pc, #88]	; (dde4 <sys_heap_init+0xf8>)
    dd8c:	4816      	ldr	r0, [pc, #88]	; (dde8 <sys_heap_init+0xfc>)
    dd8e:	f018 fa66 	bl	2625e <assert_print>
    dd92:	4818      	ldr	r0, [pc, #96]	; (ddf4 <sys_heap_init+0x108>)
    dd94:	f018 fa63 	bl	2625e <assert_print>
    dd98:	f44f 7103 	mov.w	r1, #524	; 0x20c
    dd9c:	e7b7      	b.n	dd0e <sys_heap_init+0x22>
    dd9e:	f100 050c 	add.w	r5, r0, #12
    dda2:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    dda6:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    ddaa:	42b5      	cmp	r5, r6
    ddac:	d1fb      	bne.n	dda6 <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ddae:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ddb0:	f045 0501 	orr.w	r5, r5, #1
    ddb4:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ddb6:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    ddb8:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ddbc:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    ddbe:	8004      	strh	r4, [r0, #0]
    ddc0:	8077      	strh	r7, [r6, #2]
    ddc2:	1886      	adds	r6, r0, r2
    ddc4:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    ddc8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    ddcc:	8074      	strh	r4, [r6, #2]
    ddce:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ddd0:	885a      	ldrh	r2, [r3, #2]
    ddd2:	f042 0201 	orr.w	r2, r2, #1
    ddd6:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    ddd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    dddc:	f018 b8a6 	b.w	25f2c <free_list_add>
    dde0:	0002ddbb 	.word	0x0002ddbb
    dde4:	0002dcb7 	.word	0x0002dcb7
    dde8:	0002d095 	.word	0x0002d095
    ddec:	0002ddd1 	.word	0x0002ddd1
    ddf0:	0002dde8 	.word	0x0002dde8
    ddf4:	0002de09 	.word	0x0002de09
    ddf8:	0002de22 	.word	0x0002de22
    ddfc:	0002de4b 	.word	0x0002de4b

0000de00 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    de00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de04:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    de06:	8ba3      	ldrh	r3, [r4, #28]
{
    de08:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    de0a:	0719      	lsls	r1, r3, #28
{
    de0c:	4615      	mov	r5, r2
	if (processing) {
    de0e:	d412      	bmi.n	de36 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    de10:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    de12:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    de16:	d164      	bne.n	dee2 <process_event+0xe2>
			evt = process_recheck(mgr);
    de18:	4620      	mov	r0, r4
    de1a:	f018 f999 	bl	26150 <process_recheck>
		}

		if (evt == EVT_NOP) {
    de1e:	b188      	cbz	r0, de44 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    de20:	3801      	subs	r0, #1
    de22:	2804      	cmp	r0, #4
    de24:	f200 8134 	bhi.w	e090 <process_event+0x290>
    de28:	e8df f010 	tbh	[pc, r0, lsl #1]
    de2c:	0132005b 	.word	0x0132005b
    de30:	00d10081 	.word	0x00d10081
    de34:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    de36:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    de38:	bf0c      	ite	eq
    de3a:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    de3e:	f043 0120 	orrne.w	r1, r3, #32
    de42:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    de44:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    de46:	4620      	mov	r0, r4
    de48:	f012 fca4 	bl	20794 <z_spin_unlock_valid>
    de4c:	2800      	cmp	r0, #0
    de4e:	f040 819b 	bne.w	e188 <process_event+0x388>
    de52:	4998      	ldr	r1, [pc, #608]	; (e0b4 <process_event+0x2b4>)
    de54:	23c2      	movs	r3, #194	; 0xc2
    de56:	4a98      	ldr	r2, [pc, #608]	; (e0b8 <process_event+0x2b8>)
    de58:	4898      	ldr	r0, [pc, #608]	; (e0bc <process_event+0x2bc>)
    de5a:	f018 fa00 	bl	2625e <assert_print>
    de5e:	4621      	mov	r1, r4
    de60:	e0b0      	b.n	dfc4 <process_event+0x1c4>
    de62:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    de66:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    de68:	2801      	cmp	r0, #1
    de6a:	d81e      	bhi.n	deaa <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    de6c:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    de6e:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    de70:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    de72:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    de76:	d114      	bne.n	dea2 <process_event+0xa2>
		*clients = mgr->clients;
    de78:	463a      	mov	r2, r7
    de7a:	e003      	b.n	de84 <process_event+0x84>
				mgr->refs += 1U;
    de7c:	8be0      	ldrh	r0, [r4, #30]
    de7e:	3001      	adds	r0, #1
    de80:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    de82:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    de84:	2a00      	cmp	r2, #0
    de86:	d1f9      	bne.n	de7c <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    de88:	f023 0307 	bic.w	r3, r3, #7
    de8c:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    de90:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    de92:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    de94:	f018 f95c 	bl	26150 <process_recheck>
    de98:	b390      	cbz	r0, df00 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    de9a:	f042 0220 	orr.w	r2, r2, #32
    de9e:	83a2      	strh	r2, [r4, #28]
    dea0:	e02e      	b.n	df00 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dea2:	f023 0307 	bic.w	r3, r3, #7
    dea6:	b29a      	uxth	r2, r3
}
    dea8:	e7f2      	b.n	de90 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    deaa:	2a04      	cmp	r2, #4
    deac:	d133      	bne.n	df16 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    deae:	f023 0307 	bic.w	r3, r3, #7
    deb2:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    deb4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    deb6:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    deb8:	f018 f94a 	bl	26150 <process_recheck>
    debc:	b110      	cbz	r0, dec4 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    debe:	f042 0220 	orr.w	r2, r2, #32
    dec2:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    dec4:	8ba3      	ldrh	r3, [r4, #28]
    dec6:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    deca:	4589      	cmp	r9, r1
    decc:	f040 80ea 	bne.w	e0a4 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ded0:	8ba1      	ldrh	r1, [r4, #28]
    ded2:	06ca      	lsls	r2, r1, #27
    ded4:	f140 814f 	bpl.w	e176 <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ded8:	f021 0310 	bic.w	r3, r1, #16
    dedc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    dede:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    dee2:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dee6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    dee8:	f1b8 0f00 	cmp.w	r8, #0
    deec:	dab9      	bge.n	de62 <process_event+0x62>
	list->head = NULL;
    deee:	2200      	movs	r2, #0
		*clients = mgr->clients;
    def0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    def2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    def6:	e9c4 2200 	strd	r2, r2, [r4]
    defa:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    defe:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    df00:	8ba3      	ldrh	r3, [r4, #28]
    df02:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    df06:	4589      	cmp	r9, r1
    df08:	f040 80cd 	bne.w	e0a6 <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    df0c:	2f00      	cmp	r7, #0
    df0e:	d0df      	beq.n	ded0 <process_event+0xd0>
    df10:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    df12:	46b2      	mov	sl, r6
    df14:	e044      	b.n	dfa0 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    df16:	496a      	ldr	r1, [pc, #424]	; (e0c0 <process_event+0x2c0>)
    df18:	f240 131b 	movw	r3, #283	; 0x11b
    df1c:	4a69      	ldr	r2, [pc, #420]	; (e0c4 <process_event+0x2c4>)
    df1e:	4867      	ldr	r0, [pc, #412]	; (e0bc <process_event+0x2bc>)
    df20:	f018 f99d 	bl	2625e <assert_print>
    df24:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    df28:	4866      	ldr	r0, [pc, #408]	; (e0c4 <process_event+0x2c4>)
    df2a:	f018 f991 	bl	26250 <assert_post_action>
    df2e:	b149      	cbz	r1, df44 <process_event+0x144>
    df30:	4965      	ldr	r1, [pc, #404]	; (e0c8 <process_event+0x2c8>)
    df32:	f44f 73ab 	mov.w	r3, #342	; 0x156
    df36:	4a63      	ldr	r2, [pc, #396]	; (e0c4 <process_event+0x2c4>)
    df38:	4860      	ldr	r0, [pc, #384]	; (e0bc <process_event+0x2bc>)
    df3a:	f018 f990 	bl	2625e <assert_print>
    df3e:	f44f 71ab 	mov.w	r1, #342	; 0x156
    df42:	e7f1      	b.n	df28 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    df44:	6823      	ldr	r3, [r4, #0]
    df46:	b94b      	cbnz	r3, df5c <process_event+0x15c>
    df48:	4960      	ldr	r1, [pc, #384]	; (e0cc <process_event+0x2cc>)
    df4a:	f240 1357 	movw	r3, #343	; 0x157
    df4e:	4a5d      	ldr	r2, [pc, #372]	; (e0c4 <process_event+0x2c4>)
    df50:	485a      	ldr	r0, [pc, #360]	; (e0bc <process_event+0x2bc>)
    df52:	f018 f984 	bl	2625e <assert_print>
    df56:	f240 1157 	movw	r1, #343	; 0x157
    df5a:	e7e5      	b.n	df28 <process_event+0x128>
			transit = mgr->transitions->start;
    df5c:	6923      	ldr	r3, [r4, #16]
    df5e:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    df60:	b94e      	cbnz	r6, df76 <process_event+0x176>
    df62:	495b      	ldr	r1, [pc, #364]	; (e0d0 <process_event+0x2d0>)
    df64:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    df68:	4a56      	ldr	r2, [pc, #344]	; (e0c4 <process_event+0x2c4>)
    df6a:	4854      	ldr	r0, [pc, #336]	; (e0bc <process_event+0x2bc>)
    df6c:	f018 f977 	bl	2625e <assert_print>
    df70:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    df74:	e7d8      	b.n	df28 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    df76:	460f      	mov	r7, r1
		res = 0;
    df78:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    df7a:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    df7e:	8ba3      	ldrh	r3, [r4, #28]
    df80:	f023 0307 	bic.w	r3, r3, #7
    df84:	f043 0306 	orr.w	r3, r3, #6
    df88:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    df8a:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    df8c:	68a2      	ldr	r2, [r4, #8]
    df8e:	2a00      	cmp	r2, #0
    df90:	f040 808b 	bne.w	e0aa <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    df94:	2f00      	cmp	r7, #0
    df96:	f040 808b 	bne.w	e0b0 <process_event+0x2b0>
		    || (transit != NULL)) {
    df9a:	2e00      	cmp	r6, #0
    df9c:	d098      	beq.n	ded0 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    df9e:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    dfa0:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    dfa4:	f104 0b14 	add.w	fp, r4, #20
    dfa8:	4658      	mov	r0, fp
			mgr->flags = flags;
    dfaa:	83a3      	strh	r3, [r4, #28]
    dfac:	f012 fbf2 	bl	20794 <z_spin_unlock_valid>
    dfb0:	2800      	cmp	r0, #0
    dfb2:	f040 8097 	bne.w	e0e4 <process_event+0x2e4>
    dfb6:	493f      	ldr	r1, [pc, #252]	; (e0b4 <process_event+0x2b4>)
    dfb8:	23c2      	movs	r3, #194	; 0xc2
    dfba:	4a3f      	ldr	r2, [pc, #252]	; (e0b8 <process_event+0x2b8>)
    dfbc:	483f      	ldr	r0, [pc, #252]	; (e0bc <process_event+0x2bc>)
    dfbe:	f018 f94e 	bl	2625e <assert_print>
    dfc2:	4659      	mov	r1, fp
    dfc4:	4843      	ldr	r0, [pc, #268]	; (e0d4 <process_event+0x2d4>)
    dfc6:	f018 f94a 	bl	2625e <assert_print>
    dfca:	21c2      	movs	r1, #194	; 0xc2
    dfcc:	e0ae      	b.n	e12c <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    dfce:	2902      	cmp	r1, #2
    dfd0:	d009      	beq.n	dfe6 <process_event+0x1e6>
    dfd2:	4941      	ldr	r1, [pc, #260]	; (e0d8 <process_event+0x2d8>)
    dfd4:	f240 135d 	movw	r3, #349	; 0x15d
    dfd8:	4a3a      	ldr	r2, [pc, #232]	; (e0c4 <process_event+0x2c4>)
    dfda:	4838      	ldr	r0, [pc, #224]	; (e0bc <process_event+0x2bc>)
    dfdc:	f018 f93f 	bl	2625e <assert_print>
    dfe0:	f240 115d 	movw	r1, #349	; 0x15d
    dfe4:	e7a0      	b.n	df28 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    dfe6:	8be7      	ldrh	r7, [r4, #30]
    dfe8:	b14f      	cbz	r7, dffe <process_event+0x1fe>
    dfea:	493c      	ldr	r1, [pc, #240]	; (e0dc <process_event+0x2dc>)
    dfec:	f44f 73af 	mov.w	r3, #350	; 0x15e
    dff0:	4a34      	ldr	r2, [pc, #208]	; (e0c4 <process_event+0x2c4>)
    dff2:	4832      	ldr	r0, [pc, #200]	; (e0bc <process_event+0x2bc>)
    dff4:	f018 f933 	bl	2625e <assert_print>
    dff8:	f44f 71af 	mov.w	r1, #350	; 0x15e
    dffc:	e794      	b.n	df28 <process_event+0x128>
			transit = mgr->transitions->stop;
    dffe:	6923      	ldr	r3, [r4, #16]
    e000:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    e002:	b94e      	cbnz	r6, e018 <process_event+0x218>
    e004:	4932      	ldr	r1, [pc, #200]	; (e0d0 <process_event+0x2d0>)
    e006:	f240 1361 	movw	r3, #353	; 0x161
    e00a:	4a2e      	ldr	r2, [pc, #184]	; (e0c4 <process_event+0x2c4>)
    e00c:	482b      	ldr	r0, [pc, #172]	; (e0bc <process_event+0x2bc>)
    e00e:	f018 f926 	bl	2625e <assert_print>
    e012:	f240 1161 	movw	r1, #353	; 0x161
    e016:	e787      	b.n	df28 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e018:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    e01a:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e01c:	f023 0307 	bic.w	r3, r3, #7
    e020:	f043 0304 	orr.w	r3, r3, #4
    e024:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e026:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e02a:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e02c:	e7ae      	b.n	df8c <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    e02e:	2901      	cmp	r1, #1
    e030:	d009      	beq.n	e046 <process_event+0x246>
    e032:	492b      	ldr	r1, [pc, #172]	; (e0e0 <process_event+0x2e0>)
    e034:	f44f 73b2 	mov.w	r3, #356	; 0x164
    e038:	4a22      	ldr	r2, [pc, #136]	; (e0c4 <process_event+0x2c4>)
    e03a:	4820      	ldr	r0, [pc, #128]	; (e0bc <process_event+0x2bc>)
    e03c:	f018 f90f 	bl	2625e <assert_print>
    e040:	f44f 71b2 	mov.w	r1, #356	; 0x164
    e044:	e770      	b.n	df28 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    e046:	6823      	ldr	r3, [r4, #0]
    e048:	b94b      	cbnz	r3, e05e <process_event+0x25e>
    e04a:	4920      	ldr	r1, [pc, #128]	; (e0cc <process_event+0x2cc>)
    e04c:	f240 1365 	movw	r3, #357	; 0x165
    e050:	4a1c      	ldr	r2, [pc, #112]	; (e0c4 <process_event+0x2c4>)
    e052:	481a      	ldr	r0, [pc, #104]	; (e0bc <process_event+0x2bc>)
    e054:	f018 f903 	bl	2625e <assert_print>
    e058:	f240 1165 	movw	r1, #357	; 0x165
    e05c:	e764      	b.n	df28 <process_event+0x128>
			transit = mgr->transitions->reset;
    e05e:	6923      	ldr	r3, [r4, #16]
    e060:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    e062:	b94e      	cbnz	r6, e078 <process_event+0x278>
    e064:	491a      	ldr	r1, [pc, #104]	; (e0d0 <process_event+0x2d0>)
    e066:	f44f 73b4 	mov.w	r3, #360	; 0x168
    e06a:	4a16      	ldr	r2, [pc, #88]	; (e0c4 <process_event+0x2c4>)
    e06c:	4813      	ldr	r0, [pc, #76]	; (e0bc <process_event+0x2bc>)
    e06e:	f018 f8f6 	bl	2625e <assert_print>
    e072:	f44f 71b4 	mov.w	r1, #360	; 0x168
    e076:	e757      	b.n	df28 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    e078:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e07a:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    e07c:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e07e:	f023 0307 	bic.w	r3, r3, #7
    e082:	f043 0305 	orr.w	r3, r3, #5
    e086:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e088:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    e08c:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e08e:	e77d      	b.n	df8c <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    e090:	490b      	ldr	r1, [pc, #44]	; (e0c0 <process_event+0x2c0>)
    e092:	f240 136b 	movw	r3, #363	; 0x16b
    e096:	4a0b      	ldr	r2, [pc, #44]	; (e0c4 <process_event+0x2c4>)
    e098:	4808      	ldr	r0, [pc, #32]	; (e0bc <process_event+0x2bc>)
    e09a:	f018 f8e0 	bl	2625e <assert_print>
    e09e:	f240 116b 	movw	r1, #363	; 0x16b
    e0a2:	e741      	b.n	df28 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    e0a4:	2700      	movs	r7, #0
    e0a6:	2600      	movs	r6, #0
    e0a8:	e770      	b.n	df8c <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e0aa:	f04f 0a01 	mov.w	sl, #1
    e0ae:	e777      	b.n	dfa0 <process_event+0x1a0>
    e0b0:	4692      	mov	sl, r2
    e0b2:	e775      	b.n	dfa0 <process_event+0x1a0>
    e0b4:	0002df46 	.word	0x0002df46
    e0b8:	0002df19 	.word	0x0002df19
    e0bc:	0002d095 	.word	0x0002d095
    e0c0:	0003297c 	.word	0x0003297c
    e0c4:	0002de76 	.word	0x0002de76
    e0c8:	0002de98 	.word	0x0002de98
    e0cc:	0002dea4 	.word	0x0002dea4
    e0d0:	0002dec7 	.word	0x0002dec7
    e0d4:	0002df5d 	.word	0x0002df5d
    e0d8:	0002dede 	.word	0x0002dede
    e0dc:	0002def4 	.word	0x0002def4
    e0e0:	0002df03 	.word	0x0002df03
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e0e4:	f385 8811 	msr	BASEPRI, r5
    e0e8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    e0ec:	f1ba 0f00 	cmp.w	sl, #0
    e0f0:	d11e      	bne.n	e130 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    e0f2:	2f00      	cmp	r7, #0
    e0f4:	d12f      	bne.n	e156 <process_event+0x356>
			if (transit != NULL) {
    e0f6:	b116      	cbz	r6, e0fe <process_event+0x2fe>
				transit(mgr, transition_complete);
    e0f8:	4620      	mov	r0, r4
    e0fa:	4926      	ldr	r1, [pc, #152]	; (e194 <process_event+0x394>)
    e0fc:	47b0      	blx	r6
	__asm__ volatile(
    e0fe:	f04f 0320 	mov.w	r3, #32
    e102:	f3ef 8511 	mrs	r5, BASEPRI
    e106:	f383 8812 	msr	BASEPRI_MAX, r3
    e10a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e10e:	4658      	mov	r0, fp
    e110:	f012 fb32 	bl	20778 <z_spin_lock_valid>
    e114:	bb38      	cbnz	r0, e166 <process_event+0x366>
    e116:	2394      	movs	r3, #148	; 0x94
    e118:	4a1f      	ldr	r2, [pc, #124]	; (e198 <process_event+0x398>)
    e11a:	4920      	ldr	r1, [pc, #128]	; (e19c <process_event+0x39c>)
    e11c:	4820      	ldr	r0, [pc, #128]	; (e1a0 <process_event+0x3a0>)
    e11e:	f018 f89e 	bl	2625e <assert_print>
    e122:	4659      	mov	r1, fp
    e124:	481f      	ldr	r0, [pc, #124]	; (e1a4 <process_event+0x3a4>)
    e126:	f018 f89a 	bl	2625e <assert_print>
    e12a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e12c:	481a      	ldr	r0, [pc, #104]	; (e198 <process_event+0x398>)
    e12e:	e6fc      	b.n	df2a <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    e130:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e132:	2900      	cmp	r1, #0
    e134:	d0dd      	beq.n	e0f2 <process_event+0x2f2>
	return node->next;
    e136:	680d      	ldr	r5, [r1, #0]
    e138:	2900      	cmp	r1, #0
    e13a:	d0da      	beq.n	e0f2 <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    e13c:	4643      	mov	r3, r8
    e13e:	464a      	mov	r2, r9
    e140:	4620      	mov	r0, r4
    e142:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e146:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e148:	b11d      	cbz	r5, e152 <process_event+0x352>
    e14a:	682b      	ldr	r3, [r5, #0]
    e14c:	4629      	mov	r1, r5
    e14e:	461d      	mov	r5, r3
    e150:	e7f2      	b.n	e138 <process_event+0x338>
    e152:	462b      	mov	r3, r5
    e154:	e7fa      	b.n	e14c <process_event+0x34c>
    e156:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    e158:	4643      	mov	r3, r8
    e15a:	464a      	mov	r2, r9
    e15c:	4620      	mov	r0, r4
    e15e:	683f      	ldr	r7, [r7, #0]
    e160:	f018 f822 	bl	261a8 <notify_one>
    e164:	e7c5      	b.n	e0f2 <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    e166:	4658      	mov	r0, fp
    e168:	f012 fb22 	bl	207b0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    e16c:	8ba3      	ldrh	r3, [r4, #28]
    e16e:	f023 0308 	bic.w	r3, r3, #8
    e172:	83a3      	strh	r3, [r4, #28]
    e174:	e6ac      	b.n	ded0 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    e176:	068b      	lsls	r3, r1, #26
    e178:	f57f ae64 	bpl.w	de44 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    e17c:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e180:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    e182:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    e186:	e647      	b.n	de18 <process_event+0x18>
	__asm__ volatile(
    e188:	f385 8811 	msr	BASEPRI, r5
    e18c:	f3bf 8f6f 	isb	sy
}
    e190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e194:	0000e1a9 	.word	0x0000e1a9
    e198:	0002df19 	.word	0x0002df19
    e19c:	0002df72 	.word	0x0002df72
    e1a0:	0002d095 	.word	0x0002d095
    e1a4:	0002df87 	.word	0x0002df87

0000e1a8 <transition_complete>:
{
    e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1aa:	4604      	mov	r4, r0
    e1ac:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e1ae:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e1b2:	f04f 0320 	mov.w	r3, #32
    e1b6:	f3ef 8711 	mrs	r7, BASEPRI
    e1ba:	f383 8812 	msr	BASEPRI_MAX, r3
    e1be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e1c2:	4630      	mov	r0, r6
    e1c4:	f012 fad8 	bl	20778 <z_spin_lock_valid>
    e1c8:	b968      	cbnz	r0, e1e6 <transition_complete+0x3e>
    e1ca:	2394      	movs	r3, #148	; 0x94
    e1cc:	4a0b      	ldr	r2, [pc, #44]	; (e1fc <transition_complete+0x54>)
    e1ce:	490c      	ldr	r1, [pc, #48]	; (e200 <transition_complete+0x58>)
    e1d0:	480c      	ldr	r0, [pc, #48]	; (e204 <transition_complete+0x5c>)
    e1d2:	f018 f844 	bl	2625e <assert_print>
    e1d6:	4631      	mov	r1, r6
    e1d8:	480b      	ldr	r0, [pc, #44]	; (e208 <transition_complete+0x60>)
    e1da:	f018 f840 	bl	2625e <assert_print>
    e1de:	2194      	movs	r1, #148	; 0x94
    e1e0:	4806      	ldr	r0, [pc, #24]	; (e1fc <transition_complete+0x54>)
    e1e2:	f018 f835 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
    e1e6:	4630      	mov	r0, r6
    e1e8:	f012 fae2 	bl	207b0 <z_spin_lock_set_owner>
	mgr->last_res = res;
    e1ec:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    e1ee:	463a      	mov	r2, r7
    e1f0:	4620      	mov	r0, r4
}
    e1f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    e1f6:	2101      	movs	r1, #1
    e1f8:	f7ff be02 	b.w	de00 <process_event>
    e1fc:	0002df19 	.word	0x0002df19
    e200:	0002df72 	.word	0x0002df72
    e204:	0002d095 	.word	0x0002d095
    e208:	0002df87 	.word	0x0002df87

0000e20c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    e20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e210:	4604      	mov	r4, r0
    e212:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    e214:	f017 ffb8 	bl	26188 <validate_args>

	if (rv < 0) {
    e218:	1e05      	subs	r5, r0, #0
    e21a:	db67      	blt.n	e2ec <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e21c:	f104 0914 	add.w	r9, r4, #20
    e220:	f04f 0320 	mov.w	r3, #32
    e224:	f3ef 8a11 	mrs	sl, BASEPRI
    e228:	f383 8812 	msr	BASEPRI_MAX, r3
    e22c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e230:	4648      	mov	r0, r9
    e232:	f012 faa1 	bl	20778 <z_spin_lock_valid>
    e236:	4680      	mov	r8, r0
    e238:	b960      	cbnz	r0, e254 <onoff_request+0x48>
    e23a:	2394      	movs	r3, #148	; 0x94
    e23c:	4a37      	ldr	r2, [pc, #220]	; (e31c <onoff_request+0x110>)
    e23e:	4938      	ldr	r1, [pc, #224]	; (e320 <onoff_request+0x114>)
    e240:	4838      	ldr	r0, [pc, #224]	; (e324 <onoff_request+0x118>)
    e242:	f018 f80c 	bl	2625e <assert_print>
    e246:	4649      	mov	r1, r9
    e248:	4837      	ldr	r0, [pc, #220]	; (e328 <onoff_request+0x11c>)
    e24a:	f018 f808 	bl	2625e <assert_print>
    e24e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e250:	4832      	ldr	r0, [pc, #200]	; (e31c <onoff_request+0x110>)
    e252:	e040      	b.n	e2d6 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    e254:	4648      	mov	r0, r9
    e256:	f012 faab 	bl	207b0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    e25a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e25e:	8be3      	ldrh	r3, [r4, #30]
    e260:	8ba6      	ldrh	r6, [r4, #28]
    e262:	4293      	cmp	r3, r2
    e264:	f006 0607 	and.w	r6, r6, #7
    e268:	d043      	beq.n	e2f2 <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    e26a:	2e02      	cmp	r6, #2
    e26c:	d113      	bne.n	e296 <onoff_request+0x8a>
	rv = state;
    e26e:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    e270:	3301      	adds	r3, #1
    e272:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e274:	4648      	mov	r0, r9
    e276:	f012 fa8d 	bl	20794 <z_spin_unlock_valid>
    e27a:	2800      	cmp	r0, #0
    e27c:	d13f      	bne.n	e2fe <onoff_request+0xf2>
    e27e:	23c2      	movs	r3, #194	; 0xc2
    e280:	4a26      	ldr	r2, [pc, #152]	; (e31c <onoff_request+0x110>)
    e282:	492a      	ldr	r1, [pc, #168]	; (e32c <onoff_request+0x120>)
    e284:	4827      	ldr	r0, [pc, #156]	; (e324 <onoff_request+0x118>)
    e286:	f017 ffea 	bl	2625e <assert_print>
    e28a:	4649      	mov	r1, r9
    e28c:	4828      	ldr	r0, [pc, #160]	; (e330 <onoff_request+0x124>)
    e28e:	f017 ffe6 	bl	2625e <assert_print>
    e292:	21c2      	movs	r1, #194	; 0xc2
    e294:	e7dc      	b.n	e250 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    e296:	2e06      	cmp	r6, #6
    e298:	d813      	bhi.n	e2c2 <onoff_request+0xb6>
    e29a:	e8df f006 	tbb	[pc, r6]
    e29e:	2d09      	.short	0x2d09
    e2a0:	04091212 	.word	0x04091212
    e2a4:	09          	.byte	0x09
    e2a5:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    e2a6:	f06f 0585 	mvn.w	r5, #133	; 0x85
    e2aa:	f04f 0800 	mov.w	r8, #0
    e2ae:	e7e1      	b.n	e274 <onoff_request+0x68>
	parent->next = child;
    e2b0:	2300      	movs	r3, #0
    e2b2:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    e2b4:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    e2b6:	b983      	cbnz	r3, e2da <onoff_request+0xce>
	list->head = node;
    e2b8:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    e2bc:	b186      	cbz	r6, e2e0 <onoff_request+0xd4>
	rv = state;
    e2be:	4635      	mov	r5, r6
    e2c0:	e7f3      	b.n	e2aa <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    e2c2:	491c      	ldr	r1, [pc, #112]	; (e334 <onoff_request+0x128>)
    e2c4:	4817      	ldr	r0, [pc, #92]	; (e324 <onoff_request+0x118>)
    e2c6:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    e2ca:	4a1b      	ldr	r2, [pc, #108]	; (e338 <onoff_request+0x12c>)
    e2cc:	f017 ffc7 	bl	2625e <assert_print>
    e2d0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e2d4:	4818      	ldr	r0, [pc, #96]	; (e338 <onoff_request+0x12c>)
    e2d6:	f017 ffbb 	bl	26250 <assert_post_action>
	parent->next = child;
    e2da:	601f      	str	r7, [r3, #0]
	list->tail = node;
    e2dc:	6067      	str	r7, [r4, #4]
}
    e2de:	e7ed      	b.n	e2bc <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    e2e0:	4652      	mov	r2, sl
    e2e2:	2102      	movs	r1, #2
    e2e4:	4620      	mov	r0, r4
    e2e6:	f7ff fd8b 	bl	de00 <process_event>
    e2ea:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    e2ec:	4628      	mov	r0, r5
    e2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    e2f2:	f06f 050a 	mvn.w	r5, #10
    e2f6:	e7d8      	b.n	e2aa <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    e2f8:	f06f 0504 	mvn.w	r5, #4
    e2fc:	e7d5      	b.n	e2aa <onoff_request+0x9e>
	__asm__ volatile(
    e2fe:	f38a 8811 	msr	BASEPRI, sl
    e302:	f3bf 8f6f 	isb	sy
		if (notify) {
    e306:	f1b8 0f00 	cmp.w	r8, #0
    e30a:	d0ef      	beq.n	e2ec <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    e30c:	2300      	movs	r3, #0
    e30e:	4632      	mov	r2, r6
    e310:	4639      	mov	r1, r7
    e312:	4620      	mov	r0, r4
    e314:	f017 ff48 	bl	261a8 <notify_one>
    e318:	e7e8      	b.n	e2ec <onoff_request+0xe0>
    e31a:	bf00      	nop
    e31c:	0002df19 	.word	0x0002df19
    e320:	0002df72 	.word	0x0002df72
    e324:	0002d095 	.word	0x0002d095
    e328:	0002df87 	.word	0x0002df87
    e32c:	0002df46 	.word	0x0002df46
    e330:	0002df5d 	.word	0x0002df5d
    e334:	0002df03 	.word	0x0002df03
    e338:	0002de76 	.word	0x0002de76

0000e33c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    e33c:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e33e:	6842      	ldr	r2, [r0, #4]
    e340:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    e342:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    e346:	2a02      	cmp	r2, #2
	notify->result = res;
    e348:	6081      	str	r1, [r0, #8]
	switch (method) {
    e34a:	d00a      	beq.n	e362 <sys_notify_finalize+0x26>
    e34c:	2a03      	cmp	r2, #3
    e34e:	f04f 0100 	mov.w	r1, #0
    e352:	d003      	beq.n	e35c <sys_notify_finalize+0x20>
    e354:	2a01      	cmp	r2, #1
    e356:	d10a      	bne.n	e36e <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e358:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    e35a:	e006      	b.n	e36a <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    e35c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e35e:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    e360:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    e362:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e364:	2200      	movs	r2, #0
    e366:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    e368:	b958      	cbnz	r0, e382 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    e36a:	2000      	movs	r0, #0
    e36c:	e7f8      	b.n	e360 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    e36e:	4906      	ldr	r1, [pc, #24]	; (e388 <sys_notify_finalize+0x4c>)
    e370:	4806      	ldr	r0, [pc, #24]	; (e38c <sys_notify_finalize+0x50>)
    e372:	2345      	movs	r3, #69	; 0x45
    e374:	4a06      	ldr	r2, [pc, #24]	; (e390 <sys_notify_finalize+0x54>)
    e376:	f017 ff72 	bl	2625e <assert_print>
    e37a:	2145      	movs	r1, #69	; 0x45
    e37c:	4804      	ldr	r0, [pc, #16]	; (e390 <sys_notify_finalize+0x54>)
    e37e:	f017 ff67 	bl	26250 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    e382:	f015 fbff 	bl	23b84 <z_impl_k_poll_signal_raise>
    e386:	e7f0      	b.n	e36a <sys_notify_finalize+0x2e>
    e388:	0003297c 	.word	0x0003297c
    e38c:	0002d095 	.word	0x0002d095
    e390:	0002df9f 	.word	0x0002df9f

0000e394 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    e394:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e396:	4c09      	ldr	r4, [pc, #36]	; (e3bc <crc8_ccitt+0x28>)
    e398:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    e39a:	4291      	cmp	r1, r2
    e39c:	d100      	bne.n	e3a0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    e39e:	bd10      	pop	{r4, pc}
		val ^= p[i];
    e3a0:	f811 3b01 	ldrb.w	r3, [r1], #1
    e3a4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e3a6:	0903      	lsrs	r3, r0, #4
    e3a8:	5ce3      	ldrb	r3, [r4, r3]
    e3aa:	0100      	lsls	r0, r0, #4
    e3ac:	b2c0      	uxtb	r0, r0
    e3ae:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e3b0:	0918      	lsrs	r0, r3, #4
    e3b2:	5c20      	ldrb	r0, [r4, r0]
    e3b4:	011b      	lsls	r3, r3, #4
    e3b6:	b2db      	uxtb	r3, r3
    e3b8:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    e3ba:	e7ee      	b.n	e39a <crc8_ccitt+0x6>
    e3bc:	0002dfc2 	.word	0x0002dfc2

0000e3c0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    e3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3c2:	4602      	mov	r2, r0
    e3c4:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    e3c6:	270a      	movs	r7, #10
	size_t val = 0;
    e3c8:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    e3ca:	4e07      	ldr	r6, [pc, #28]	; (e3e8 <extract_decimal+0x28>)
    e3cc:	460b      	mov	r3, r1
    e3ce:	781c      	ldrb	r4, [r3, #0]
    e3d0:	3101      	adds	r1, #1
    e3d2:	5d35      	ldrb	r5, [r6, r4]
    e3d4:	076d      	lsls	r5, r5, #29
    e3d6:	d401      	bmi.n	e3dc <extract_decimal+0x1c>
	}
	*str = sp;
    e3d8:	6013      	str	r3, [r2, #0]
	return val;
}
    e3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    e3dc:	fb07 4300 	mla	r3, r7, r0, r4
    e3e0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e3e4:	e7f2      	b.n	e3cc <extract_decimal+0xc>
    e3e6:	bf00      	nop
    e3e8:	000329de 	.word	0x000329de

0000e3ec <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    e3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3f0:	4615      	mov	r5, r2
    e3f2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    e3f4:	78d3      	ldrb	r3, [r2, #3]
    e3f6:	4a22      	ldr	r2, [pc, #136]	; (e480 <encode_uint+0x94>)
	switch (specifier) {
    e3f8:	2b6f      	cmp	r3, #111	; 0x6f
    e3fa:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    e3fe:	4680      	mov	r8, r0
    e400:	460f      	mov	r7, r1
    e402:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    e406:	d029      	beq.n	e45c <encode_uint+0x70>
    e408:	d824      	bhi.n	e454 <encode_uint+0x68>
		return 10;
    e40a:	2b58      	cmp	r3, #88	; 0x58
    e40c:	bf0c      	ite	eq
    e40e:	2610      	moveq	r6, #16
    e410:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    e412:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    e416:	4632      	mov	r2, r6
    e418:	2300      	movs	r3, #0
    e41a:	4640      	mov	r0, r8
    e41c:	4639      	mov	r1, r7
    e41e:	f7fa fd67 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    e422:	2a09      	cmp	r2, #9
    e424:	b2d4      	uxtb	r4, r2
    e426:	d81e      	bhi.n	e466 <encode_uint+0x7a>
    e428:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    e42a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e42c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    e42e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e432:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    e436:	d301      	bcc.n	e43c <encode_uint+0x50>
    e438:	45d1      	cmp	r9, sl
    e43a:	d811      	bhi.n	e460 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    e43c:	782b      	ldrb	r3, [r5, #0]
    e43e:	069b      	lsls	r3, r3, #26
    e440:	d505      	bpl.n	e44e <encode_uint+0x62>
		if (radix == 8) {
    e442:	2e08      	cmp	r6, #8
    e444:	d115      	bne.n	e472 <encode_uint+0x86>
			conv->altform_0 = true;
    e446:	78ab      	ldrb	r3, [r5, #2]
    e448:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    e44c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    e44e:	4648      	mov	r0, r9
    e450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    e454:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    e458:	2b70      	cmp	r3, #112	; 0x70
    e45a:	e7d7      	b.n	e40c <encode_uint+0x20>
	switch (specifier) {
    e45c:	2608      	movs	r6, #8
    e45e:	e7d8      	b.n	e412 <encode_uint+0x26>
		value /= radix;
    e460:	4680      	mov	r8, r0
    e462:	460f      	mov	r7, r1
    e464:	e7d7      	b.n	e416 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e466:	f1bb 0f01 	cmp.w	fp, #1
    e46a:	bf0c      	ite	eq
    e46c:	3437      	addeq	r4, #55	; 0x37
    e46e:	3457      	addne	r4, #87	; 0x57
    e470:	e7db      	b.n	e42a <encode_uint+0x3e>
		} else if (radix == 16) {
    e472:	2e10      	cmp	r6, #16
    e474:	d1eb      	bne.n	e44e <encode_uint+0x62>
			conv->altform_0c = true;
    e476:	78ab      	ldrb	r3, [r5, #2]
    e478:	f043 0310 	orr.w	r3, r3, #16
    e47c:	e7e6      	b.n	e44c <encode_uint+0x60>
    e47e:	bf00      	nop
    e480:	000329de 	.word	0x000329de

0000e484 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    e484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e488:	4682      	mov	sl, r0
    e48a:	4617      	mov	r7, r2
    e48c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    e48e:	2500      	movs	r5, #0
{
    e490:	b097      	sub	sp, #92	; 0x5c
    e492:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    e494:	7838      	ldrb	r0, [r7, #0]
    e496:	b908      	cbnz	r0, e49c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    e498:	4628      	mov	r0, r5
    e49a:	e349      	b.n	eb30 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    e49c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    e49e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    e4a0:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    e4a2:	d006      	beq.n	e4b2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    e4a4:	9903      	ldr	r1, [sp, #12]
    e4a6:	47d0      	blx	sl
    e4a8:	2800      	cmp	r0, #0
    e4aa:	f2c0 8341 	blt.w	eb30 <z_cbvprintf_impl+0x6ac>
    e4ae:	3501      	adds	r5, #1
		if (bps == NULL) {
    e4b0:	e1f0      	b.n	e894 <z_cbvprintf_impl+0x410>
		} state = {
    e4b2:	2218      	movs	r2, #24
    e4b4:	2100      	movs	r1, #0
    e4b6:	a810      	add	r0, sp, #64	; 0x40
    e4b8:	f01c fc74 	bl	2ada4 <memset>
	if (*sp == '%') {
    e4bc:	787b      	ldrb	r3, [r7, #1]
    e4be:	2b25      	cmp	r3, #37	; 0x25
    e4c0:	f000 80a3 	beq.w	e60a <z_cbvprintf_impl+0x186>
    e4c4:	2300      	movs	r3, #0
    e4c6:	4698      	mov	r8, r3
    e4c8:	469e      	mov	lr, r3
    e4ca:	469c      	mov	ip, r3
    e4cc:	4618      	mov	r0, r3
    e4ce:	1c79      	adds	r1, r7, #1
    e4d0:	460e      	mov	r6, r1
		switch (*sp) {
    e4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
    e4d6:	2a2b      	cmp	r2, #43	; 0x2b
    e4d8:	f000 80c6 	beq.w	e668 <z_cbvprintf_impl+0x1e4>
    e4dc:	f200 80bd 	bhi.w	e65a <z_cbvprintf_impl+0x1d6>
    e4e0:	2a20      	cmp	r2, #32
    e4e2:	f000 80c4 	beq.w	e66e <z_cbvprintf_impl+0x1ea>
    e4e6:	2a23      	cmp	r2, #35	; 0x23
    e4e8:	f000 80c4 	beq.w	e674 <z_cbvprintf_impl+0x1f0>
    e4ec:	b12b      	cbz	r3, e4fa <z_cbvprintf_impl+0x76>
    e4ee:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e4f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e4f6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e4fa:	f1b8 0f00 	cmp.w	r8, #0
    e4fe:	d005      	beq.n	e50c <z_cbvprintf_impl+0x88>
    e500:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e504:	f043 0320 	orr.w	r3, r3, #32
    e508:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e50c:	f1be 0f00 	cmp.w	lr, #0
    e510:	d005      	beq.n	e51e <z_cbvprintf_impl+0x9a>
    e512:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e516:	f043 0310 	orr.w	r3, r3, #16
    e51a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e51e:	f1bc 0f00 	cmp.w	ip, #0
    e522:	d005      	beq.n	e530 <z_cbvprintf_impl+0xac>
    e524:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e528:	f043 0308 	orr.w	r3, r3, #8
    e52c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e530:	b128      	cbz	r0, e53e <z_cbvprintf_impl+0xba>
    e532:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e536:	f043 0304 	orr.w	r3, r3, #4
    e53a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    e53e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e542:	f003 0144 	and.w	r1, r3, #68	; 0x44
    e546:	2944      	cmp	r1, #68	; 0x44
    e548:	d103      	bne.n	e552 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    e54a:	f36f 1386 	bfc	r3, #6, #1
    e54e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    e552:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e556:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    e558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e55c:	9609      	str	r6, [sp, #36]	; 0x24
    e55e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e562:	f040 808c 	bne.w	e67e <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    e566:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e56a:	f043 0301 	orr.w	r3, r3, #1
    e56e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    e572:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    e574:	781a      	ldrb	r2, [r3, #0]
    e576:	2a2e      	cmp	r2, #46	; 0x2e
    e578:	bf0c      	ite	eq
    e57a:	2101      	moveq	r1, #1
    e57c:	2100      	movne	r1, #0
    e57e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e582:	f361 0241 	bfi	r2, r1, #1, #1
    e586:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    e58a:	d10c      	bne.n	e5a6 <z_cbvprintf_impl+0x122>
	++sp;
    e58c:	1c5a      	adds	r2, r3, #1
    e58e:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    e590:	785a      	ldrb	r2, [r3, #1]
    e592:	2a2a      	cmp	r2, #42	; 0x2a
    e594:	f040 8083 	bne.w	e69e <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    e598:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    e59c:	3302      	adds	r3, #2
		conv->prec_star = true;
    e59e:	f042 0204 	orr.w	r2, r2, #4
    e5a2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    e5a6:	781a      	ldrb	r2, [r3, #0]
    e5a8:	2a6c      	cmp	r2, #108	; 0x6c
    e5aa:	f000 80a4 	beq.w	e6f6 <z_cbvprintf_impl+0x272>
    e5ae:	f200 8086 	bhi.w	e6be <z_cbvprintf_impl+0x23a>
    e5b2:	2a68      	cmp	r2, #104	; 0x68
    e5b4:	f000 808c 	beq.w	e6d0 <z_cbvprintf_impl+0x24c>
    e5b8:	2a6a      	cmp	r2, #106	; 0x6a
    e5ba:	f000 80a5 	beq.w	e708 <z_cbvprintf_impl+0x284>
    e5be:	2a4c      	cmp	r2, #76	; 0x4c
    e5c0:	f000 80aa 	beq.w	e718 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    e5c4:	461a      	mov	r2, r3
    e5c6:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    e5ca:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    e5cc:	9204      	str	r2, [sp, #16]
    e5ce:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    e5d2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    e5d6:	f200 8117 	bhi.w	e808 <z_cbvprintf_impl+0x384>
    e5da:	2b6d      	cmp	r3, #109	; 0x6d
    e5dc:	f200 80a9 	bhi.w	e732 <z_cbvprintf_impl+0x2ae>
    e5e0:	2b69      	cmp	r3, #105	; 0x69
    e5e2:	f200 8111 	bhi.w	e808 <z_cbvprintf_impl+0x384>
    e5e6:	2b57      	cmp	r3, #87	; 0x57
    e5e8:	f200 80be 	bhi.w	e768 <z_cbvprintf_impl+0x2e4>
    e5ec:	2b41      	cmp	r3, #65	; 0x41
    e5ee:	d003      	beq.n	e5f8 <z_cbvprintf_impl+0x174>
    e5f0:	3b45      	subs	r3, #69	; 0x45
    e5f2:	2b02      	cmp	r3, #2
    e5f4:	f200 8108 	bhi.w	e808 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    e5f8:	2204      	movs	r2, #4
    e5fa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e5fe:	f362 0302 	bfi	r3, r2, #0, #3
    e602:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    e606:	2301      	movs	r3, #1
			break;
    e608:	e0ca      	b.n	e7a0 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    e60a:	1cba      	adds	r2, r7, #2
    e60c:	9204      	str	r2, [sp, #16]
    e60e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    e612:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e616:	07da      	lsls	r2, r3, #31
    e618:	f140 80fd 	bpl.w	e816 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    e61c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    e620:	f1b9 0f00 	cmp.w	r9, #0
    e624:	da07      	bge.n	e636 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    e626:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    e62a:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    e62e:	f042 0204 	orr.w	r2, r2, #4
    e632:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    e636:	075e      	lsls	r6, r3, #29
    e638:	f140 80f6 	bpl.w	e828 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    e63c:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    e640:	f1bb 0f00 	cmp.w	fp, #0
    e644:	f280 80f5 	bge.w	e832 <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    e648:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e64c:	f36f 0341 	bfc	r3, #1, #1
    e650:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    e654:	f04f 3bff 	mov.w	fp, #4294967295
    e658:	e0eb      	b.n	e832 <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    e65a:	2a2d      	cmp	r2, #45	; 0x2d
    e65c:	d00d      	beq.n	e67a <z_cbvprintf_impl+0x1f6>
    e65e:	2a30      	cmp	r2, #48	; 0x30
    e660:	f47f af44 	bne.w	e4ec <z_cbvprintf_impl+0x68>
    e664:	2301      	movs	r3, #1
	} while (loop);
    e666:	e733      	b.n	e4d0 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    e668:	f04f 0c01 	mov.w	ip, #1
    e66c:	e730      	b.n	e4d0 <z_cbvprintf_impl+0x4c>
    e66e:	f04f 0e01 	mov.w	lr, #1
    e672:	e72d      	b.n	e4d0 <z_cbvprintf_impl+0x4c>
    e674:	f04f 0801 	mov.w	r8, #1
    e678:	e72a      	b.n	e4d0 <z_cbvprintf_impl+0x4c>
    e67a:	2001      	movs	r0, #1
    e67c:	e728      	b.n	e4d0 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    e67e:	a809      	add	r0, sp, #36	; 0x24
    e680:	f7ff fe9e 	bl	e3c0 <extract_decimal>
	if (sp != wp) {
    e684:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e686:	42b3      	cmp	r3, r6
    e688:	f43f af74 	beq.w	e574 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    e68c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    e690:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    e692:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    e694:	f360 0241 	bfi	r2, r0, #1, #1
    e698:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    e69c:	e76a      	b.n	e574 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    e69e:	a809      	add	r0, sp, #36	; 0x24
    e6a0:	f7ff fe8e 	bl	e3c0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    e6a4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    e6a8:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    e6aa:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e6ae:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    e6b2:	f362 0341 	bfi	r3, r2, #1, #1
    e6b6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    e6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6bc:	e773      	b.n	e5a6 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    e6be:	2a74      	cmp	r2, #116	; 0x74
    e6c0:	d026      	beq.n	e710 <z_cbvprintf_impl+0x28c>
    e6c2:	2a7a      	cmp	r2, #122	; 0x7a
    e6c4:	f47f af7e 	bne.w	e5c4 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    e6c8:	2106      	movs	r1, #6
    e6ca:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e6ce:	e00c      	b.n	e6ea <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    e6d0:	785a      	ldrb	r2, [r3, #1]
    e6d2:	2a68      	cmp	r2, #104	; 0x68
    e6d4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e6d8:	d106      	bne.n	e6e8 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    e6da:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    e6dc:	f361 02c6 	bfi	r2, r1, #3, #4
    e6e0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    e6e4:	3302      	adds	r3, #2
    e6e6:	e76d      	b.n	e5c4 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    e6e8:	2102      	movs	r1, #2
    e6ea:	f361 02c6 	bfi	r2, r1, #3, #4
    e6ee:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    e6f2:	3301      	adds	r3, #1
    e6f4:	e766      	b.n	e5c4 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    e6f6:	785a      	ldrb	r2, [r3, #1]
    e6f8:	2a6c      	cmp	r2, #108	; 0x6c
    e6fa:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e6fe:	d101      	bne.n	e704 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    e700:	2104      	movs	r1, #4
    e702:	e7eb      	b.n	e6dc <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    e704:	2103      	movs	r1, #3
    e706:	e7f0      	b.n	e6ea <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    e708:	2105      	movs	r1, #5
    e70a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e70e:	e7ec      	b.n	e6ea <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    e710:	2107      	movs	r1, #7
    e712:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e716:	e7e8      	b.n	e6ea <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    e718:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    e71c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    e720:	f022 0202 	bic.w	r2, r2, #2
    e724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    e728:	f042 0202 	orr.w	r2, r2, #2
    e72c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    e730:	e7df      	b.n	e6f2 <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    e732:	3b6e      	subs	r3, #110	; 0x6e
    e734:	b2d9      	uxtb	r1, r3
    e736:	2301      	movs	r3, #1
    e738:	408b      	lsls	r3, r1
    e73a:	f240 4182 	movw	r1, #1154	; 0x482
    e73e:	420b      	tst	r3, r1
    e740:	d138      	bne.n	e7b4 <z_cbvprintf_impl+0x330>
    e742:	f013 0f24 	tst.w	r3, #36	; 0x24
    e746:	d152      	bne.n	e7ee <z_cbvprintf_impl+0x36a>
    e748:	07d8      	lsls	r0, r3, #31
    e74a:	d55d      	bpl.n	e808 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    e74c:	2103      	movs	r1, #3
    e74e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e752:	f361 0302 	bfi	r3, r1, #0, #3
    e756:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e75a:	f002 0378 	and.w	r3, r2, #120	; 0x78
    e75e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    e762:	424b      	negs	r3, r1
    e764:	414b      	adcs	r3, r1
    e766:	e01b      	b.n	e7a0 <z_cbvprintf_impl+0x31c>
    e768:	2001      	movs	r0, #1
	switch (conv->specifier) {
    e76a:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    e76e:	b2c9      	uxtb	r1, r1
    e770:	fa00 f101 	lsl.w	r1, r0, r1
    e774:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    e778:	f47f af3e 	bne.w	e5f8 <z_cbvprintf_impl+0x174>
    e77c:	f640 0601 	movw	r6, #2049	; 0x801
    e780:	4231      	tst	r1, r6
    e782:	d11d      	bne.n	e7c0 <z_cbvprintf_impl+0x33c>
    e784:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    e788:	d03e      	beq.n	e808 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    e78a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e78e:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e792:	f002 0278 	and.w	r2, r2, #120	; 0x78
    e796:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    e798:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e79c:	d034      	beq.n	e808 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    e79e:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    e7a0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    e7a4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    e7a8:	430b      	orrs	r3, r1
    e7aa:	f363 0241 	bfi	r2, r3, #1, #1
    e7ae:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    e7b2:	e72e      	b.n	e612 <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    e7b4:	2102      	movs	r1, #2
    e7b6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e7ba:	f361 0302 	bfi	r3, r1, #0, #3
    e7be:	e7e8      	b.n	e792 <z_cbvprintf_impl+0x30e>
    e7c0:	2002      	movs	r0, #2
    e7c2:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e7c6:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    e7ca:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e7ce:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    e7d0:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    e7d4:	bf02      	ittt	eq
    e7d6:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    e7da:	f041 0101 	orreq.w	r1, r1, #1
    e7de:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    e7e2:	2b63      	cmp	r3, #99	; 0x63
    e7e4:	d1db      	bne.n	e79e <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    e7e6:	1e13      	subs	r3, r2, #0
    e7e8:	bf18      	it	ne
    e7ea:	2301      	movne	r3, #1
    e7ec:	e7d8      	b.n	e7a0 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    e7ee:	2103      	movs	r1, #3
    e7f0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    e7f4:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    e7f8:	f361 0302 	bfi	r3, r1, #0, #3
    e7fc:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    e800:	bf14      	ite	ne
    e802:	2301      	movne	r3, #1
    e804:	2300      	moveq	r3, #0
    e806:	e7cb      	b.n	e7a0 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    e808:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e80c:	f043 0301 	orr.w	r3, r3, #1
    e810:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    e814:	e7c3      	b.n	e79e <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    e816:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    e81a:	2a00      	cmp	r2, #0
		int width = -1;
    e81c:	bfac      	ite	ge
    e81e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    e822:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    e826:	e706      	b.n	e636 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    e828:	0798      	lsls	r0, r3, #30
    e82a:	f57f af13 	bpl.w	e654 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    e82e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    e832:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    e834:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    e838:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    e83c:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    e840:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    e844:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    e846:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    e84a:	d133      	bne.n	e8b4 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    e84c:	1ecb      	subs	r3, r1, #3
    e84e:	2b04      	cmp	r3, #4
    e850:	d804      	bhi.n	e85c <z_cbvprintf_impl+0x3d8>
    e852:	e8df f003 	tbb	[pc, r3]
    e856:	4621      	.short	0x4621
    e858:	2146      	.short	0x2146
    e85a:	21          	.byte	0x21
    e85b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    e85c:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    e85e:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    e860:	ea4f 72e3 	mov.w	r2, r3, asr #31
    e864:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    e868:	d11c      	bne.n	e8a4 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    e86a:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    e86e:	17da      	asrs	r2, r3, #31
    e870:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    e874:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    e876:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e87a:	f013 0603 	ands.w	r6, r3, #3
    e87e:	d050      	beq.n	e922 <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    e880:	463a      	mov	r2, r7
    e882:	4650      	mov	r0, sl
    e884:	9b04      	ldr	r3, [sp, #16]
    e886:	9903      	ldr	r1, [sp, #12]
    e888:	f017 fccb 	bl	26222 <outs>
    e88c:	2800      	cmp	r0, #0
    e88e:	f2c0 814f 	blt.w	eb30 <z_cbvprintf_impl+0x6ac>
    e892:	4405      	add	r5, r0
			continue;
    e894:	9f04      	ldr	r7, [sp, #16]
    e896:	e5fd      	b.n	e494 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e898:	f854 3b04 	ldr.w	r3, [r4], #4
    e89c:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    e89e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    e8a2:	e7e8      	b.n	e876 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    e8a4:	2902      	cmp	r1, #2
    e8a6:	d1e5      	bne.n	e874 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    e8a8:	b21a      	sxth	r2, r3
    e8aa:	f343 33c0 	sbfx	r3, r3, #15, #1
    e8ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    e8b2:	e7df      	b.n	e874 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    e8b4:	2b02      	cmp	r3, #2
    e8b6:	d124      	bne.n	e902 <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    e8b8:	1ecb      	subs	r3, r1, #3
    e8ba:	2b04      	cmp	r3, #4
    e8bc:	d804      	bhi.n	e8c8 <z_cbvprintf_impl+0x444>
    e8be:	e8df f003 	tbb	[pc, r3]
    e8c2:	1018      	.short	0x1018
    e8c4:	1810      	.short	0x1810
    e8c6:	18          	.byte	0x18
    e8c7:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    e8c8:	2901      	cmp	r1, #1
    e8ca:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    e8ce:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    e8d2:	d014      	beq.n	e8fe <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    e8d4:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    e8d6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    e8da:	d1cc      	bne.n	e876 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    e8dc:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    e8de:	9310      	str	r3, [sp, #64]	; 0x40
    e8e0:	e7c9      	b.n	e876 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    e8e2:	3407      	adds	r4, #7
    e8e4:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    e8e8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    e8ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    e8f0:	e7c1      	b.n	e876 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    e8f2:	f854 3b04 	ldr.w	r3, [r4], #4
    e8f6:	9310      	str	r3, [sp, #64]	; 0x40
    e8f8:	2300      	movs	r3, #0
    e8fa:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    e8fc:	e7bb      	b.n	e876 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    e8fe:	b2db      	uxtb	r3, r3
    e900:	e7cd      	b.n	e89e <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    e902:	2b04      	cmp	r3, #4
    e904:	d108      	bne.n	e918 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    e906:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    e908:	f024 0407 	bic.w	r4, r4, #7
    e90c:	e9d4 2300 	ldrd	r2, r3, [r4]
    e910:	3408      	adds	r4, #8
    e912:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    e916:	e7ae      	b.n	e876 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    e918:	2b03      	cmp	r3, #3
    e91a:	d1ac      	bne.n	e876 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    e91c:	f854 3b04 	ldr.w	r3, [r4], #4
    e920:	e7dd      	b.n	e8de <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    e922:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    e926:	2878      	cmp	r0, #120	; 0x78
    e928:	d8b4      	bhi.n	e894 <z_cbvprintf_impl+0x410>
    e92a:	2862      	cmp	r0, #98	; 0x62
    e92c:	d81c      	bhi.n	e968 <z_cbvprintf_impl+0x4e4>
    e92e:	2825      	cmp	r0, #37	; 0x25
    e930:	f43f adb8 	beq.w	e4a4 <z_cbvprintf_impl+0x20>
    e934:	2858      	cmp	r0, #88	; 0x58
    e936:	d1ad      	bne.n	e894 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    e938:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    e93c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    e940:	9300      	str	r3, [sp, #0]
    e942:	aa12      	add	r2, sp, #72	; 0x48
    e944:	ab0a      	add	r3, sp, #40	; 0x28
    e946:	f7ff fd51 	bl	e3ec <encode_uint>
			if (precision >= 0) {
    e94a:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    e94e:	4607      	mov	r7, r0
			if (precision >= 0) {
    e950:	f280 8097 	bge.w	ea82 <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    e954:	2f00      	cmp	r7, #0
    e956:	d09d      	beq.n	e894 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    e958:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    e95c:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    e960:	2e00      	cmp	r6, #0
    e962:	d04e      	beq.n	ea02 <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    e964:	3001      	adds	r0, #1
    e966:	e04c      	b.n	ea02 <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    e968:	3863      	subs	r0, #99	; 0x63
    e96a:	2815      	cmp	r0, #21
    e96c:	d892      	bhi.n	e894 <z_cbvprintf_impl+0x410>
    e96e:	a201      	add	r2, pc, #4	; (adr r2, e974 <z_cbvprintf_impl+0x4f0>)
    e970:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    e974:	0000e9f3 	.word	0x0000e9f3
    e978:	0000ea59 	.word	0x0000ea59
    e97c:	0000e895 	.word	0x0000e895
    e980:	0000e895 	.word	0x0000e895
    e984:	0000e895 	.word	0x0000e895
    e988:	0000e895 	.word	0x0000e895
    e98c:	0000ea59 	.word	0x0000ea59
    e990:	0000e895 	.word	0x0000e895
    e994:	0000e895 	.word	0x0000e895
    e998:	0000e895 	.word	0x0000e895
    e99c:	0000e895 	.word	0x0000e895
    e9a0:	0000eae1 	.word	0x0000eae1
    e9a4:	0000ea7d 	.word	0x0000ea7d
    e9a8:	0000eaa3 	.word	0x0000eaa3
    e9ac:	0000e895 	.word	0x0000e895
    e9b0:	0000e895 	.word	0x0000e895
    e9b4:	0000e9cd 	.word	0x0000e9cd
    e9b8:	0000e895 	.word	0x0000e895
    e9bc:	0000ea7d 	.word	0x0000ea7d
    e9c0:	0000e895 	.word	0x0000e895
    e9c4:	0000e895 	.word	0x0000e895
    e9c8:	0000ea7d 	.word	0x0000ea7d
			if (precision >= 0) {
    e9cc:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    e9d0:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    e9d2:	db0a      	blt.n	e9ea <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    e9d4:	4659      	mov	r1, fp
    e9d6:	4638      	mov	r0, r7
    e9d8:	f01c fb46 	bl	2b068 <strnlen>
			bpe = bps + len;
    e9dc:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    e9e0:	2f00      	cmp	r7, #0
    e9e2:	f43f af57 	beq.w	e894 <z_cbvprintf_impl+0x410>
		char sign = 0;
    e9e6:	2600      	movs	r6, #0
    e9e8:	e00b      	b.n	ea02 <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    e9ea:	4638      	mov	r0, r7
    e9ec:	f7fa fd0d 	bl	940a <strlen>
    e9f0:	e7f4      	b.n	e9dc <z_cbvprintf_impl+0x558>
		char sign = 0;
    e9f2:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    e9f4:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    e9f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    e9f8:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    e9fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    ea00:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    ea02:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ea06:	f013 0210 	ands.w	r2, r3, #16
    ea0a:	9205      	str	r2, [sp, #20]
    ea0c:	f000 8083 	beq.w	eb16 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    ea10:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    ea12:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    ea14:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    ea18:	bf48      	it	mi
    ea1a:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    ea1c:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    ea1e:	bf48      	it	mi
    ea20:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    ea22:	f1b9 0f00 	cmp.w	r9, #0
    ea26:	f340 8090 	ble.w	eb4a <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    ea2a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    ea2e:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    ea32:	f3c2 0380 	ubfx	r3, r2, #2, #1
    ea36:	0750      	lsls	r0, r2, #29
    ea38:	9306      	str	r3, [sp, #24]
    ea3a:	f100 8086 	bmi.w	eb4a <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    ea3e:	0651      	lsls	r1, r2, #25
    ea40:	d579      	bpl.n	eb36 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    ea42:	b13e      	cbz	r6, ea54 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    ea44:	4630      	mov	r0, r6
    ea46:	9903      	ldr	r1, [sp, #12]
    ea48:	47d0      	blx	sl
    ea4a:	2800      	cmp	r0, #0
    ea4c:	db70      	blt.n	eb30 <z_cbvprintf_impl+0x6ac>
    ea4e:	9b06      	ldr	r3, [sp, #24]
    ea50:	3501      	adds	r5, #1
    ea52:	461e      	mov	r6, r3
					pad = '0';
    ea54:	2230      	movs	r2, #48	; 0x30
    ea56:	e06f      	b.n	eb38 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    ea58:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    ea5a:	bf5a      	itte	pl
    ea5c:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    ea60:	015e      	lslpl	r6, r3, #5
				sign = '+';
    ea62:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    ea64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    ea68:	2b00      	cmp	r3, #0
    ea6a:	f6bf af65 	bge.w	e938 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    ea6e:	4252      	negs	r2, r2
    ea70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    ea74:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    ea76:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    ea7a:	e75d      	b.n	e938 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    ea7c:	2600      	movs	r6, #0
    ea7e:	e75b      	b.n	e938 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    ea80:	2600      	movs	r6, #0
				conv->flag_zero = false;
    ea82:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    ea86:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    ea8a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    ea8c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ea90:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    ea92:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    ea96:	f67f af5d 	bls.w	e954 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    ea9a:	ebab 0303 	sub.w	r3, fp, r3
    ea9e:	9313      	str	r3, [sp, #76]	; 0x4c
    eaa0:	e758      	b.n	e954 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    eaa2:	9810      	ldr	r0, [sp, #64]	; 0x40
    eaa4:	b380      	cbz	r0, eb08 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    eaa6:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    eaaa:	ab0a      	add	r3, sp, #40	; 0x28
    eaac:	2100      	movs	r1, #0
    eaae:	f8cd 8000 	str.w	r8, [sp]
    eab2:	aa12      	add	r2, sp, #72	; 0x48
    eab4:	f7ff fc9a 	bl	e3ec <encode_uint>
				conv->altform_0c = true;
    eab8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    eabc:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    eac0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    eac4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    eac8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    eacc:	4607      	mov	r7, r0
				conv->altform_0c = true;
    eace:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    ead2:	dad5      	bge.n	ea80 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    ead4:	2800      	cmp	r0, #0
    ead6:	f43f aedd 	beq.w	e894 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    eada:	eba8 0000 	sub.w	r0, r8, r0
    eade:	e782      	b.n	e9e6 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    eae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    eae2:	2907      	cmp	r1, #7
    eae4:	f63f aed6 	bhi.w	e894 <z_cbvprintf_impl+0x410>
    eae8:	e8df f001 	tbb	[pc, r1]
    eaec:	0c06040c 	.word	0x0c06040c
    eaf0:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    eaf4:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    eaf6:	e6cd      	b.n	e894 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    eaf8:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    eafa:	e6cb      	b.n	e894 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    eafc:	17ea      	asrs	r2, r5, #31
    eafe:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    eb02:	e6c7      	b.n	e894 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    eb04:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    eb06:	e6c5      	b.n	e894 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    eb08:	f8df 80bc 	ldr.w	r8, [pc, #188]	; ebc8 <z_cbvprintf_impl+0x744>
		char sign = 0;
    eb0c:	4606      	mov	r6, r0
    eb0e:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    eb12:	2005      	movs	r0, #5
    eb14:	e775      	b.n	ea02 <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    eb16:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    eb18:	bf48      	it	mi
    eb1a:	3001      	addmi	r0, #1
    eb1c:	e779      	b.n	ea12 <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    eb1e:	4610      	mov	r0, r2
    eb20:	9307      	str	r3, [sp, #28]
    eb22:	9206      	str	r2, [sp, #24]
    eb24:	9903      	ldr	r1, [sp, #12]
    eb26:	47d0      	blx	sl
    eb28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    eb2c:	2800      	cmp	r0, #0
    eb2e:	da04      	bge.n	eb3a <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    eb30:	b017      	add	sp, #92	; 0x5c
    eb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    eb36:	2220      	movs	r2, #32
					pad = '0';
    eb38:	464b      	mov	r3, r9
				while (width-- > 0) {
    eb3a:	4619      	mov	r1, r3
    eb3c:	2900      	cmp	r1, #0
    eb3e:	f103 33ff 	add.w	r3, r3, #4294967295
    eb42:	dcec      	bgt.n	eb1e <z_cbvprintf_impl+0x69a>
    eb44:	444d      	add	r5, r9
    eb46:	4699      	mov	r9, r3
    eb48:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    eb4a:	b12e      	cbz	r6, eb58 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    eb4c:	4630      	mov	r0, r6
    eb4e:	9903      	ldr	r1, [sp, #12]
    eb50:	47d0      	blx	sl
    eb52:	2800      	cmp	r0, #0
    eb54:	dbec      	blt.n	eb30 <z_cbvprintf_impl+0x6ac>
    eb56:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    eb58:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    eb5c:	06da      	lsls	r2, r3, #27
    eb5e:	d401      	bmi.n	eb64 <z_cbvprintf_impl+0x6e0>
    eb60:	071b      	lsls	r3, r3, #28
    eb62:	d505      	bpl.n	eb70 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    eb64:	2030      	movs	r0, #48	; 0x30
    eb66:	9903      	ldr	r1, [sp, #12]
    eb68:	47d0      	blx	sl
    eb6a:	2800      	cmp	r0, #0
    eb6c:	dbe0      	blt.n	eb30 <z_cbvprintf_impl+0x6ac>
    eb6e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    eb70:	9b05      	ldr	r3, [sp, #20]
    eb72:	b133      	cbz	r3, eb82 <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    eb74:	9903      	ldr	r1, [sp, #12]
    eb76:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    eb7a:	47d0      	blx	sl
    eb7c:	2800      	cmp	r0, #0
    eb7e:	dbd7      	blt.n	eb30 <z_cbvprintf_impl+0x6ac>
    eb80:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    eb82:	44ab      	add	fp, r5
    eb84:	e005      	b.n	eb92 <z_cbvprintf_impl+0x70e>
				OUTC('0');
    eb86:	2030      	movs	r0, #48	; 0x30
    eb88:	9903      	ldr	r1, [sp, #12]
    eb8a:	47d0      	blx	sl
    eb8c:	2800      	cmp	r0, #0
    eb8e:	dbcf      	blt.n	eb30 <z_cbvprintf_impl+0x6ac>
    eb90:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    eb92:	ebab 0305 	sub.w	r3, fp, r5
    eb96:	2b00      	cmp	r3, #0
    eb98:	dcf5      	bgt.n	eb86 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    eb9a:	4643      	mov	r3, r8
    eb9c:	463a      	mov	r2, r7
    eb9e:	4650      	mov	r0, sl
    eba0:	9903      	ldr	r1, [sp, #12]
    eba2:	f017 fb3e 	bl	26222 <outs>
    eba6:	2800      	cmp	r0, #0
    eba8:	dbc2      	blt.n	eb30 <z_cbvprintf_impl+0x6ac>
    ebaa:	4405      	add	r5, r0
		while (width > 0) {
    ebac:	44a9      	add	r9, r5
    ebae:	eba9 0305 	sub.w	r3, r9, r5
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	f77f ae6e 	ble.w	e894 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    ebb8:	2020      	movs	r0, #32
    ebba:	9903      	ldr	r1, [sp, #12]
    ebbc:	47d0      	blx	sl
    ebbe:	2800      	cmp	r0, #0
    ebc0:	dbb6      	blt.n	eb30 <z_cbvprintf_impl+0x6ac>
    ebc2:	3501      	adds	r5, #1
			--width;
    ebc4:	e7f3      	b.n	ebae <z_cbvprintf_impl+0x72a>
    ebc6:	bf00      	nop
    ebc8:	0002dfd7 	.word	0x0002dfd7

0000ebcc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ebcc:	b148      	cbz	r0, ebe2 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    ebce:	4b05      	ldr	r3, [pc, #20]	; (ebe4 <arch_busy_wait+0x18>)
    ebd0:	4a05      	ldr	r2, [pc, #20]	; (ebe8 <arch_busy_wait+0x1c>)
    ebd2:	681b      	ldr	r3, [r3, #0]
    ebd4:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    ebd8:	4358      	muls	r0, r3
    ebda:	4b04      	ldr	r3, [pc, #16]	; (ebec <arch_busy_wait+0x20>)
    ebdc:	f043 0301 	orr.w	r3, r3, #1
    ebe0:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    ebe2:	4770      	bx	lr
    ebe4:	20008684 	.word	0x20008684
    ebe8:	000f4240 	.word	0x000f4240
    ebec:	0002c260 	.word	0x0002c260

0000ebf0 <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    ebf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    ebf2:	ab0b      	add	r3, sp, #44	; 0x2c
    ebf4:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    ebf6:	9303      	str	r3, [sp, #12]
    ebf8:	4b05      	ldr	r3, [pc, #20]	; (ec10 <z_log_msg_runtime_create.constprop.0+0x20>)
    ebfa:	2201      	movs	r2, #1
    ebfc:	9302      	str	r3, [sp, #8]
    ebfe:	2300      	movs	r3, #0
    ec00:	4618      	mov	r0, r3
    ec02:	e9cd 3300 	strd	r3, r3, [sp]
    ec06:	f000 fb09 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    ec0a:	b007      	add	sp, #28
    ec0c:	f85d fb04 	ldr.w	pc, [sp], #4
    ec10:	0002dfdc 	.word	0x0002dfdc

0000ec14 <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    ec14:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    ec16:	b570      	push	{r4, r5, r6, lr}
    ec18:	4605      	mov	r5, r0
    ec1a:	461e      	mov	r6, r3
    ec1c:	4608      	mov	r0, r1
    ec1e:	d90b      	bls.n	ec38 <ppi_ipc_to_rtc.isra.0+0x24>
    ec20:	491d      	ldr	r1, [pc, #116]	; (ec98 <ppi_ipc_to_rtc.isra.0+0x84>)
    ec22:	481e      	ldr	r0, [pc, #120]	; (ec9c <ppi_ipc_to_rtc.isra.0+0x88>)
    ec24:	f240 13e7 	movw	r3, #487	; 0x1e7
    ec28:	4a1d      	ldr	r2, [pc, #116]	; (eca0 <ppi_ipc_to_rtc.isra.0+0x8c>)
    ec2a:	f017 fb18 	bl	2625e <assert_print>
    ec2e:	f240 11e7 	movw	r1, #487	; 0x1e7
    ec32:	481b      	ldr	r0, [pc, #108]	; (eca0 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    ec34:	f017 fb0c 	bl	26250 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    ec38:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    ec3a:	f00e f917 	bl	1ce6c <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    ec3e:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    ec42:	b1ae      	cbz	r6, ec70 <ppi_ipc_to_rtc.isra.0+0x5c>
    ec44:	b950      	cbnz	r0, ec5c <ppi_ipc_to_rtc.isra.0+0x48>
    ec46:	4917      	ldr	r1, [pc, #92]	; (eca4 <ppi_ipc_to_rtc.isra.0+0x90>)
    ec48:	f240 234e 	movw	r3, #590	; 0x24e
    ec4c:	4a16      	ldr	r2, [pc, #88]	; (eca8 <ppi_ipc_to_rtc.isra.0+0x94>)
    ec4e:	4813      	ldr	r0, [pc, #76]	; (ec9c <ppi_ipc_to_rtc.isra.0+0x88>)
    ec50:	f017 fb05 	bl	2625e <assert_print>
    ec54:	f240 214e 	movw	r1, #590	; 0x24e
    ec58:	4813      	ldr	r0, [pc, #76]	; (eca8 <ppi_ipc_to_rtc.isra.0+0x94>)
    ec5a:	e7eb      	b.n	ec34 <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    ec5c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    ec60:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    ec64:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    ec68:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    ec6c:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    ec6e:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    ec70:	b948      	cbnz	r0, ec86 <ppi_ipc_to_rtc.isra.0+0x72>
    ec72:	490c      	ldr	r1, [pc, #48]	; (eca4 <ppi_ipc_to_rtc.isra.0+0x90>)
    ec74:	f240 2363 	movw	r3, #611	; 0x263
    ec78:	4a0b      	ldr	r2, [pc, #44]	; (eca8 <ppi_ipc_to_rtc.isra.0+0x94>)
    ec7a:	4808      	ldr	r0, [pc, #32]	; (ec9c <ppi_ipc_to_rtc.isra.0+0x88>)
    ec7c:	f017 faef 	bl	2625e <assert_print>
    ec80:	f240 2163 	movw	r1, #611	; 0x263
    ec84:	e7e8      	b.n	ec58 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    ec86:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    ec8a:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    ec8e:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    ec92:	6016      	str	r6, [r2, #0]
    ec94:	e7eb      	b.n	ec6e <ppi_ipc_to_rtc.isra.0+0x5a>
    ec96:	bf00      	nop
    ec98:	0002e036 	.word	0x0002e036
    ec9c:	0002d095 	.word	0x0002d095
    eca0:	0002e004 	.word	0x0002e004
    eca4:	0002e079 	.word	0x0002e079
    eca8:	0002e041 	.word	0x0002e041

0000ecac <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    ecac:	b570      	push	{r4, r5, r6, lr}
    ecae:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    ecb0:	a805      	add	r0, sp, #20
    ecb2:	f00e ff8f 	bl	1dbd4 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    ecb6:	4b25      	ldr	r3, [pc, #148]	; (ed4c <sync_rtc_setup+0xa0>)
    ecb8:	4298      	cmp	r0, r3
    ecba:	d143      	bne.n	ed44 <sync_rtc_setup+0x98>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    ecbc:	f00e faca 	bl	1d254 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    ecc0:	1e04      	subs	r4, r0, #0
    ecc2:	da0f      	bge.n	ece4 <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    ecc4:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ecc8:	f00e ff8a 	bl	1dbe0 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    eccc:	4b20      	ldr	r3, [pc, #128]	; (ed50 <sync_rtc_setup+0xa4>)
    ecce:	2201      	movs	r2, #1
    ecd0:	9302      	str	r3, [sp, #8]
    ecd2:	2300      	movs	r3, #0
    ecd4:	491f      	ldr	r1, [pc, #124]	; (ed54 <sync_rtc_setup+0xa8>)
    ecd6:	4618      	mov	r0, r3
    ecd8:	e9cd 3300 	strd	r3, r3, [sp]
    ecdc:	9403      	str	r4, [sp, #12]
    ecde:	f7ff ff87 	bl	ebf0 <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    ece2:	e02c      	b.n	ed3e <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    ece4:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    ece8:	4d1b      	ldr	r5, [pc, #108]	; (ed58 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    ecea:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    ecee:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    ecf0:	f8ad 3016 	strh.w	r3, [sp, #22]
    ecf4:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    ecf6:	9b05      	ldr	r3, [sp, #20]
    ecf8:	b914      	cbnz	r4, ed00 <sync_rtc_setup+0x54>
		return -ENOSYS;
    ecfa:	f06f 0457 	mvn.w	r4, #87	; 0x57
    ecfe:	e7e5      	b.n	eccc <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    ed00:	2108      	movs	r1, #8
    ed02:	4628      	mov	r0, r5
    ed04:	4a15      	ldr	r2, [pc, #84]	; (ed5c <sync_rtc_setup+0xb0>)
    ed06:	47a0      	blx	r4
	if (err < 0) {
    ed08:	1e04      	subs	r4, r0, #0
    ed0a:	dbdf      	blt.n	eccc <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    ed0c:	6933      	ldr	r3, [r6, #16]
    ed0e:	2b00      	cmp	r3, #0
    ed10:	d0f3      	beq.n	ecfa <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    ed12:	2201      	movs	r2, #1
    ed14:	2108      	movs	r1, #8
    ed16:	4628      	mov	r0, r5
    ed18:	4798      	blx	r3
	if (rv < 0) {
    ed1a:	1e04      	subs	r4, r0, #0
    ed1c:	dbd6      	blt.n	eccc <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    ed1e:	2301      	movs	r3, #1
    ed20:	f89d 0014 	ldrb.w	r0, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    ed24:	4a0e      	ldr	r2, [pc, #56]	; (ed60 <sync_rtc_setup+0xb4>)
    ed26:	fa03 f100 	lsl.w	r1, r3, r0
    ed2a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    ed2e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ed32:	f89d 1015 	ldrb.w	r1, [sp, #21]
    ed36:	f7ff ff6d 	bl	ec14 <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    ed3a:	2c00      	cmp	r4, #0
    ed3c:	d1c6      	bne.n	eccc <sync_rtc_setup+0x20>
}
    ed3e:	4620      	mov	r0, r4
    ed40:	b006      	add	sp, #24
    ed42:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    ed44:	f06f 0412 	mvn.w	r4, #18
    ed48:	e7c0      	b.n	eccc <sync_rtc_setup+0x20>
    ed4a:	bf00      	nop
    ed4c:	0bad0000 	.word	0x0bad0000
    ed50:	0002dfdc 	.word	0x0002dfdc
    ed54:	0002c17c 	.word	0x0002c17c
    ed58:	0002bb94 	.word	0x0002bb94
    ed5c:	0000ee15 	.word	0x0000ee15
    ed60:	40017000 	.word	0x40017000

0000ed64 <rtc_cb>:
{
    ed64:	b570      	push	{r4, r5, r6, lr}
    ed66:	9e04      	ldr	r6, [sp, #16]
    ed68:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    ed6c:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    ed6e:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ed72:	4630      	mov	r0, r6
    ed74:	f00e f860 	bl	1ce38 <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    ed78:	2c0f      	cmp	r4, #15
    ed7a:	d90b      	bls.n	ed94 <rtc_cb+0x30>
    ed7c:	491b      	ldr	r1, [pc, #108]	; (edec <rtc_cb+0x88>)
    ed7e:	481c      	ldr	r0, [pc, #112]	; (edf0 <rtc_cb+0x8c>)
    ed80:	f240 13e1 	movw	r3, #481	; 0x1e1
    ed84:	4a1b      	ldr	r2, [pc, #108]	; (edf4 <rtc_cb+0x90>)
    ed86:	f017 fa6a 	bl	2625e <assert_print>
    ed8a:	f240 11e1 	movw	r1, #481	; 0x1e1
    ed8e:	4819      	ldr	r0, [pc, #100]	; (edf4 <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    ed90:	f017 fa5e 	bl	26250 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    ed94:	00a4      	lsls	r4, r4, #2
    ed96:	b2e4      	uxtb	r4, r4
    ed98:	b950      	cbnz	r0, edb0 <rtc_cb+0x4c>
    ed9a:	4917      	ldr	r1, [pc, #92]	; (edf8 <rtc_cb+0x94>)
    ed9c:	4814      	ldr	r0, [pc, #80]	; (edf0 <rtc_cb+0x8c>)
    ed9e:	f44f 7317 	mov.w	r3, #604	; 0x25c
    eda2:	4a16      	ldr	r2, [pc, #88]	; (edfc <rtc_cb+0x98>)
    eda4:	f017 fa5b 	bl	2625e <assert_print>
    eda8:	f44f 7117 	mov.w	r1, #604	; 0x25c
    edac:	4813      	ldr	r0, [pc, #76]	; (edfc <rtc_cb+0x98>)
    edae:	e7ef      	b.n	ed90 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    edb0:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    edb2:	4b13      	ldr	r3, [pc, #76]	; (ee00 <rtc_cb+0x9c>)
    edb4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    edb8:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    edba:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    edbc:	4a11      	ldr	r2, [pc, #68]	; (ee04 <rtc_cb+0xa0>)
    edbe:	40ab      	lsls	r3, r5
    edc0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    edc4:	4630      	mov	r0, r6
    edc6:	f00e fa63 	bl	1d290 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    edca:	4628      	mov	r0, r5
    edcc:	f00e ff08 	bl	1dbe0 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    edd0:	4b0d      	ldr	r3, [pc, #52]	; (ee08 <rtc_cb+0xa4>)
    edd2:	4298      	cmp	r0, r3
    edd4:	d008      	beq.n	ede8 <rtc_cb+0x84>
    edd6:	490d      	ldr	r1, [pc, #52]	; (ee0c <rtc_cb+0xa8>)
    edd8:	4805      	ldr	r0, [pc, #20]	; (edf0 <rtc_cb+0x8c>)
    edda:	2374      	movs	r3, #116	; 0x74
    eddc:	4a0c      	ldr	r2, [pc, #48]	; (ee10 <rtc_cb+0xac>)
    edde:	f017 fa3e 	bl	2625e <assert_print>
    ede2:	2174      	movs	r1, #116	; 0x74
    ede4:	480a      	ldr	r0, [pc, #40]	; (ee10 <rtc_cb+0xac>)
    ede6:	e7d3      	b.n	ed90 <rtc_cb+0x2c>
}
    ede8:	bd70      	pop	{r4, r5, r6, pc}
    edea:	bf00      	nop
    edec:	0002e036 	.word	0x0002e036
    edf0:	0002d095 	.word	0x0002d095
    edf4:	0002e004 	.word	0x0002e004
    edf8:	0002e07d 	.word	0x0002e07d
    edfc:	0002e041 	.word	0x0002e041
    ee00:	4002a080 	.word	0x4002a080
    ee04:	40017000 	.word	0x40017000
    ee08:	0bad0000 	.word	0x0bad0000
    ee0c:	0002e0b8 	.word	0x0002e0b8
    ee10:	0002e081 	.word	0x0002e081

0000ee14 <mbox_callback>:
{
    ee14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ee18:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    ee1a:	6883      	ldr	r3, [r0, #8]
    ee1c:	691b      	ldr	r3, [r3, #16]
    ee1e:	b94b      	cbnz	r3, ee34 <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    ee20:	4927      	ldr	r1, [pc, #156]	; (eec0 <mbox_callback+0xac>)
    ee22:	4828      	ldr	r0, [pc, #160]	; (eec4 <mbox_callback+0xb0>)
    ee24:	23ca      	movs	r3, #202	; 0xca
    ee26:	4a28      	ldr	r2, [pc, #160]	; (eec8 <mbox_callback+0xb4>)
    ee28:	f017 fa19 	bl	2625e <assert_print>
    ee2c:	21ca      	movs	r1, #202	; 0xca
    ee2e:	4826      	ldr	r0, [pc, #152]	; (eec8 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    ee30:	f017 fa0e 	bl	26250 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    ee34:	2200      	movs	r2, #0
    ee36:	4798      	blx	r3
    ee38:	4606      	mov	r6, r0
    ee3a:	2800      	cmp	r0, #0
    ee3c:	d1f0      	bne.n	ee20 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    ee3e:	f3c4 2907 	ubfx	r9, r4, #8, #8
    ee42:	4648      	mov	r0, r9
    ee44:	f00e f82c 	bl	1cea0 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    ee48:	fa5f f884 	uxtb.w	r8, r4
    ee4c:	4633      	mov	r3, r6
    ee4e:	4649      	mov	r1, r9
    ee50:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    ee52:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    ee54:	4640      	mov	r0, r8
    ee56:	f7ff fedd 	bl	ec14 <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    ee5a:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    ee5e:	4648      	mov	r0, r9
    ee60:	f00d ffea 	bl	1ce38 <z_nrf_rtc_timer_compare_evt_address_get>
    ee64:	2d0f      	cmp	r5, #15
    ee66:	d90a      	bls.n	ee7e <mbox_callback+0x6a>
    ee68:	4918      	ldr	r1, [pc, #96]	; (eecc <mbox_callback+0xb8>)
    ee6a:	4816      	ldr	r0, [pc, #88]	; (eec4 <mbox_callback+0xb0>)
    ee6c:	f240 13e1 	movw	r3, #481	; 0x1e1
    ee70:	4a17      	ldr	r2, [pc, #92]	; (eed0 <mbox_callback+0xbc>)
    ee72:	f017 f9f4 	bl	2625e <assert_print>
    ee76:	f240 11e1 	movw	r1, #481	; 0x1e1
    ee7a:	4815      	ldr	r0, [pc, #84]	; (eed0 <mbox_callback+0xbc>)
    ee7c:	e7d8      	b.n	ee30 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    ee7e:	4a15      	ldr	r2, [pc, #84]	; (eed4 <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    ee80:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    ee82:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    ee84:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    ee88:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    ee8a:	b950      	cbnz	r0, eea2 <mbox_callback+0x8e>
    ee8c:	4912      	ldr	r1, [pc, #72]	; (eed8 <mbox_callback+0xc4>)
    ee8e:	480d      	ldr	r0, [pc, #52]	; (eec4 <mbox_callback+0xb0>)
    ee90:	f44f 7312 	mov.w	r3, #584	; 0x248
    ee94:	4a11      	ldr	r2, [pc, #68]	; (eedc <mbox_callback+0xc8>)
    ee96:	f017 f9e2 	bl	2625e <assert_print>
    ee9a:	f44f 7112 	mov.w	r1, #584	; 0x248
    ee9e:	480f      	ldr	r0, [pc, #60]	; (eedc <mbox_callback+0xc8>)
    eea0:	e7c6      	b.n	ee30 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    eea2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    eea6:	4b0e      	ldr	r3, [pc, #56]	; (eee0 <mbox_callback+0xcc>)
    eea8:	f107 0232 	add.w	r2, r7, #50	; 0x32
    eeac:	9300      	str	r3, [sp, #0]
    eeae:	4648      	mov	r0, r9
    eeb0:	4633      	mov	r3, r6
    eeb2:	9401      	str	r4, [sp, #4]
    eeb4:	0052      	lsls	r2, r2, #1
    eeb6:	f00e f8dd 	bl	1d074 <z_nrf_rtc_timer_set>
}
    eeba:	b003      	add	sp, #12
    eebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    eec0:	0002e0cc 	.word	0x0002e0cc
    eec4:	0002d095 	.word	0x0002d095
    eec8:	0002e081 	.word	0x0002e081
    eecc:	0002e036 	.word	0x0002e036
    eed0:	0002e004 	.word	0x0002e004
    eed4:	4002a080 	.word	0x4002a080
    eed8:	0002e07d 	.word	0x0002e07d
    eedc:	0002e041 	.word	0x0002e041
    eee0:	0000ed65 	.word	0x0000ed65

0000eee4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    eee4:	f01a bf1d 	b.w	29d22 <SystemInit>

0000eee8 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    eee8:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    eeea:	aa01      	add	r2, sp, #4
    eeec:	f01a ff00 	bl	29cf0 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    eef0:	4604      	mov	r4, r0
    eef2:	b168      	cbz	r0, ef10 <soc_secure_gpio_pin_mcu_select+0x28>
    eef4:	2316      	movs	r3, #22
    eef6:	4a0e      	ldr	r2, [pc, #56]	; (ef30 <soc_secure_gpio_pin_mcu_select+0x48>)
    eef8:	490e      	ldr	r1, [pc, #56]	; (ef34 <soc_secure_gpio_pin_mcu_select+0x4c>)
    eefa:	480f      	ldr	r0, [pc, #60]	; (ef38 <soc_secure_gpio_pin_mcu_select+0x50>)
    eefc:	f017 f9af 	bl	2625e <assert_print>
    ef00:	4621      	mov	r1, r4
    ef02:	480e      	ldr	r0, [pc, #56]	; (ef3c <soc_secure_gpio_pin_mcu_select+0x54>)
    ef04:	f017 f9ab 	bl	2625e <assert_print>
    ef08:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    ef0a:	4809      	ldr	r0, [pc, #36]	; (ef30 <soc_secure_gpio_pin_mcu_select+0x48>)
    ef0c:	f017 f9a0 	bl	26250 <assert_post_action>
    ef10:	9b01      	ldr	r3, [sp, #4]
    ef12:	b15b      	cbz	r3, ef2c <soc_secure_gpio_pin_mcu_select+0x44>
    ef14:	2317      	movs	r3, #23
    ef16:	4a06      	ldr	r2, [pc, #24]	; (ef30 <soc_secure_gpio_pin_mcu_select+0x48>)
    ef18:	4909      	ldr	r1, [pc, #36]	; (ef40 <soc_secure_gpio_pin_mcu_select+0x58>)
    ef1a:	4807      	ldr	r0, [pc, #28]	; (ef38 <soc_secure_gpio_pin_mcu_select+0x50>)
    ef1c:	f017 f99f 	bl	2625e <assert_print>
    ef20:	9901      	ldr	r1, [sp, #4]
    ef22:	4808      	ldr	r0, [pc, #32]	; (ef44 <soc_secure_gpio_pin_mcu_select+0x5c>)
    ef24:	f017 f99b 	bl	2625e <assert_print>
    ef28:	2117      	movs	r1, #23
    ef2a:	e7ee      	b.n	ef0a <soc_secure_gpio_pin_mcu_select+0x22>
}
    ef2c:	b002      	add	sp, #8
    ef2e:	bd10      	pop	{r4, pc}
    ef30:	0002e0de 	.word	0x0002e0de
    ef34:	0002e118 	.word	0x0002e118
    ef38:	0002d095 	.word	0x0002d095
    ef3c:	0002e138 	.word	0x0002e138
    ef40:	0002e152 	.word	0x0002e152
    ef44:	0002e15e 	.word	0x0002e15e

0000ef48 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    ef48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    ef4c:	f8df a0fc 	ldr.w	sl, [pc, #252]	; f04c <z_log_init.isra.0+0x104>
    ef50:	4f3f      	ldr	r7, [pc, #252]	; (f050 <z_log_init.isra.0+0x108>)
    ef52:	4681      	mov	r9, r0
    ef54:	ebaa 0307 	sub.w	r3, sl, r7

	if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    ef58:	2b9f      	cmp	r3, #159	; 0x9f
static uint32_t z_log_init(bool blocking, bool can_sleep)
    ef5a:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    ef5c:	d90b      	bls.n	ef76 <z_log_init.isra.0+0x2e>
    ef5e:	493d      	ldr	r1, [pc, #244]	; (f054 <z_log_init.isra.0+0x10c>)
    ef60:	f240 1315 	movw	r3, #277	; 0x115
    ef64:	4a3c      	ldr	r2, [pc, #240]	; (f058 <z_log_init.isra.0+0x110>)
    ef66:	483d      	ldr	r0, [pc, #244]	; (f05c <z_log_init.isra.0+0x114>)
    ef68:	f017 f979 	bl	2625e <assert_print>
    ef6c:	f240 1115 	movw	r1, #277	; 0x115
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ef70:	4839      	ldr	r0, [pc, #228]	; (f058 <z_log_init.isra.0+0x110>)
    ef72:	f017 f96d 	bl	26250 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    ef76:	483a      	ldr	r0, [pc, #232]	; (f060 <z_log_init.isra.0+0x118>)
    ef78:	f017 f9da 	bl	26330 <atomic_inc>
    ef7c:	4606      	mov	r6, r0
    ef7e:	2800      	cmp	r0, #0
    ef80:	d134      	bne.n	efec <z_log_init.isra.0+0xa4>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ef82:	463c      	mov	r4, r7
	uint32_t mask = 0;
    ef84:	4605      	mov	r5, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    ef86:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ef8a:	4554      	cmp	r4, sl
    ef8c:	d927      	bls.n	efde <z_log_init.isra.0+0x96>
    ef8e:	4935      	ldr	r1, [pc, #212]	; (f064 <z_log_init.isra.0+0x11c>)
    ef90:	f44f 7391 	mov.w	r3, #290	; 0x122
    ef94:	4a30      	ldr	r2, [pc, #192]	; (f058 <z_log_init.isra.0+0x110>)
    ef96:	4831      	ldr	r0, [pc, #196]	; (f05c <z_log_init.isra.0+0x114>)
    ef98:	f017 f961 	bl	2625e <assert_print>
    ef9c:	4832      	ldr	r0, [pc, #200]	; (f068 <z_log_init.isra.0+0x120>)
    ef9e:	f017 f95e 	bl	2625e <assert_print>
    efa2:	f44f 7191 	mov.w	r1, #290	; 0x122
    efa6:	e7e3      	b.n	ef70 <z_log_init.isra.0+0x28>
		if (backend->autostart) {
    efa8:	7b23      	ldrb	r3, [r4, #12]
    efaa:	b173      	cbz	r3, efca <z_log_init.isra.0+0x82>
	if (backend->api->init) {
    efac:	6823      	ldr	r3, [r4, #0]
    efae:	68db      	ldr	r3, [r3, #12]
    efb0:	b10b      	cbz	r3, efb6 <z_log_init.isra.0+0x6e>
		backend->api->init(backend);
    efb2:	4620      	mov	r0, r4
    efb4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    efb6:	6823      	ldr	r3, [r4, #0]
    efb8:	691b      	ldr	r3, [r3, #16]
    efba:	b943      	cbnz	r3, efce <z_log_init.isra.0+0x86>
				log_backend_enable(backend,
    efbc:	6863      	ldr	r3, [r4, #4]
    efbe:	2204      	movs	r2, #4
    efc0:	4620      	mov	r0, r4
    efc2:	6819      	ldr	r1, [r3, #0]
    efc4:	f000 f904 	bl	f1d0 <log_backend_enable>
			}

			i++;
    efc8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    efca:	3410      	adds	r4, #16
    efcc:	e7dd      	b.n	ef8a <z_log_init.isra.0+0x42>
		return backend->api->is_ready(backend);
    efce:	4620      	mov	r0, r4
    efd0:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    efd2:	2800      	cmp	r0, #0
    efd4:	d0f2      	beq.n	efbc <z_log_init.isra.0+0x74>
				mask |= BIT(i);
    efd6:	fa0b f306 	lsl.w	r3, fp, r6
    efda:	431d      	orrs	r5, r3
    efdc:	e7f4      	b.n	efc8 <z_log_init.isra.0+0x80>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    efde:	d3e3      	bcc.n	efa8 <z_log_init.isra.0+0x60>
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    efe0:	f1b9 0f00 	cmp.w	r9, #0
    efe4:	d002      	beq.n	efec <z_log_init.isra.0+0xa4>
		mask_cpy &= ~BIT(i);
    efe6:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    efea:	b90d      	cbnz	r5, eff0 <z_log_init.isra.0+0xa8>
			}
		}
	}

	return mask;
}
    efec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eff0:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    eff2:	fa95 f4a5 	rbit	r4, r5
    eff6:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    effa:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    effe:	0126      	lsls	r6, r4, #4
    f000:	eb07 1404 	add.w	r4, r7, r4, lsl #4
		mask_cpy &= ~BIT(i);
    f004:	ea6f 0b03 	mvn.w	fp, r3
    f008:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f00c:	7b23      	ldrb	r3, [r4, #12]
    f00e:	b15b      	cbz	r3, f028 <z_log_init.isra.0+0xe0>
	if (backend->api->is_ready != NULL) {
    f010:	59bb      	ldr	r3, [r7, r6]
    f012:	691b      	ldr	r3, [r3, #16]
    f014:	b9a3      	cbnz	r3, f040 <z_log_init.isra.0+0xf8>
					   backend->cb->ctx,
    f016:	443e      	add	r6, r7
			log_backend_enable(backend,
    f018:	6873      	ldr	r3, [r6, #4]
    f01a:	2204      	movs	r2, #4
    f01c:	4620      	mov	r0, r4
    f01e:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    f020:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    f024:	f000 f8d4 	bl	f1d0 <log_backend_enable>
	while (mask_cpy) {
    f028:	2d00      	cmp	r5, #0
    f02a:	d1e2      	bne.n	eff2 <z_log_init.isra.0+0xaa>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    f02c:	f1b8 0f00 	cmp.w	r8, #0
    f030:	d004      	beq.n	f03c <z_log_init.isra.0+0xf4>
	return z_impl_k_sleep(timeout);
    f032:	f44f 70a4 	mov.w	r0, #328	; 0x148
    f036:	2100      	movs	r1, #0
    f038:	f013 fd4a 	bl	22ad0 <z_impl_k_sleep>
    f03c:	464d      	mov	r5, r9
    f03e:	e7d4      	b.n	efea <z_log_init.isra.0+0xa2>
		return backend->api->is_ready(backend);
    f040:	4620      	mov	r0, r4
    f042:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f044:	2800      	cmp	r0, #0
    f046:	d1ef      	bne.n	f028 <z_log_init.isra.0+0xe0>
    f048:	e7e5      	b.n	f016 <z_log_init.isra.0+0xce>
    f04a:	bf00      	nop
    f04c:	0002c19c 	.word	0x0002c19c
    f050:	0002c18c 	.word	0x0002c18c
    f054:	0002e1a5 	.word	0x0002e1a5
    f058:	0002e178 	.word	0x0002e178
    f05c:	0002d095 	.word	0x0002d095
    f060:	200225fc 	.word	0x200225fc
    f064:	0002e1c9 	.word	0x0002e1c9
    f068:	0002e1ea 	.word	0x0002e1ea

0000f06c <log_format_func_t_get>:
}
    f06c:	4b01      	ldr	r3, [pc, #4]	; (f074 <log_format_func_t_get+0x8>)
    f06e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f072:	4770      	bx	lr
    f074:	0002c68c 	.word	0x0002c68c

0000f078 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    f078:	b508      	push	{r3, lr}
    f07a:	4603      	mov	r3, r0
    f07c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    f07e:	b12b      	cbz	r3, f08c <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    f080:	4a04      	ldr	r2, [pc, #16]	; (f094 <log_set_timestamp_func+0x1c>)
    f082:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    f084:	f000 faec 	bl	f660 <log_output_timestamp_freq_set>
	}

	return 0;
    f088:	2000      	movs	r0, #0
}
    f08a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f08c:	f06f 0015 	mvn.w	r0, #21
    f090:	e7fb      	b.n	f08a <log_set_timestamp_func+0x12>
    f092:	bf00      	nop
    f094:	200083fc 	.word	0x200083fc

0000f098 <log_core_init>:
	panic_mode = false;
    f098:	2300      	movs	r3, #0
    f09a:	4a04      	ldr	r2, [pc, #16]	; (f0ac <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    f09c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    f0a0:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    f0a2:	4a03      	ldr	r2, [pc, #12]	; (f0b0 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    f0a4:	4803      	ldr	r0, [pc, #12]	; (f0b4 <log_core_init+0x1c>)
	dropped_cnt = 0;
    f0a6:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    f0a8:	f7ff bfe6 	b.w	f078 <log_set_timestamp_func>
    f0ac:	200235f6 	.word	0x200235f6
    f0b0:	200225f4 	.word	0x200225f4
    f0b4:	0002632d 	.word	0x0002632d

0000f0b8 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    f0b8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    f0ba:	4d13      	ldr	r5, [pc, #76]	; (f108 <z_impl_log_panic+0x50>)
    f0bc:	7829      	ldrb	r1, [r5, #0]
    f0be:	bb09      	cbnz	r1, f104 <z_impl_log_panic+0x4c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    f0c0:	2001      	movs	r0, #1
    f0c2:	f7ff ff41 	bl	ef48 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f0c6:	4c11      	ldr	r4, [pc, #68]	; (f10c <z_impl_log_panic+0x54>)
    f0c8:	4e11      	ldr	r6, [pc, #68]	; (f110 <z_impl_log_panic+0x58>)
    f0ca:	42b4      	cmp	r4, r6
    f0cc:	d917      	bls.n	f0fe <z_impl_log_panic+0x46>
    f0ce:	4911      	ldr	r1, [pc, #68]	; (f114 <z_impl_log_panic+0x5c>)
    f0d0:	f44f 73c2 	mov.w	r3, #388	; 0x184
    f0d4:	4a10      	ldr	r2, [pc, #64]	; (f118 <z_impl_log_panic+0x60>)
    f0d6:	4811      	ldr	r0, [pc, #68]	; (f11c <z_impl_log_panic+0x64>)
    f0d8:	f017 f8c1 	bl	2625e <assert_print>
    f0dc:	4810      	ldr	r0, [pc, #64]	; (f120 <z_impl_log_panic+0x68>)
    f0de:	f017 f8be 	bl	2625e <assert_print>
    f0e2:	f44f 71c2 	mov.w	r1, #388	; 0x184
    f0e6:	480c      	ldr	r0, [pc, #48]	; (f118 <z_impl_log_panic+0x60>)
    f0e8:	f017 f8b2 	bl	26250 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f0ec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f0ee:	795b      	ldrb	r3, [r3, #5]
    f0f0:	b11b      	cbz	r3, f0fa <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    f0f2:	6823      	ldr	r3, [r4, #0]
    f0f4:	4620      	mov	r0, r4
    f0f6:	689b      	ldr	r3, [r3, #8]
    f0f8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f0fa:	3410      	adds	r4, #16
    f0fc:	e7e5      	b.n	f0ca <z_impl_log_panic+0x12>
    f0fe:	d3f5      	bcc.n	f0ec <z_impl_log_panic+0x34>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    f100:	2301      	movs	r3, #1
    f102:	702b      	strb	r3, [r5, #0]
}
    f104:	bd70      	pop	{r4, r5, r6, pc}
    f106:	bf00      	nop
    f108:	200235f6 	.word	0x200235f6
    f10c:	0002c18c 	.word	0x0002c18c
    f110:	0002c19c 	.word	0x0002c19c
    f114:	0002e1c9 	.word	0x0002e1c9
    f118:	0002e178 	.word	0x0002e178
    f11c:	0002d095 	.word	0x0002d095
    f120:	0002e1ea 	.word	0x0002e1ea

0000f124 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    f124:	b510      	push	{r4, lr}
    f126:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    f128:	4806      	ldr	r0, [pc, #24]	; (f144 <z_log_dropped+0x20>)
    f12a:	f017 f901 	bl	26330 <atomic_inc>
	if (buffered) {
    f12e:	b13c      	cbz	r4, f140 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f130:	4b05      	ldr	r3, [pc, #20]	; (f148 <z_log_dropped+0x24>)
    f132:	e8d3 1fef 	ldaex	r1, [r3]
    f136:	3901      	subs	r1, #1
    f138:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f13c:	2a00      	cmp	r2, #0
    f13e:	d1f8      	bne.n	f132 <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    f140:	bd10      	pop	{r4, pc}
    f142:	bf00      	nop
    f144:	200225f4 	.word	0x200225f4
    f148:	200225f8 	.word	0x200225f8

0000f14c <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    f14c:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    f14e:	4b12      	ldr	r3, [pc, #72]	; (f198 <z_log_msg_commit+0x4c>)
{
    f150:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    f152:	681b      	ldr	r3, [r3, #0]
    f154:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f156:	4c11      	ldr	r4, [pc, #68]	; (f19c <z_log_msg_commit+0x50>)
    f158:	4e11      	ldr	r6, [pc, #68]	; (f1a0 <z_log_msg_commit+0x54>)
	msg->hdr.timestamp = timestamp_func();
    f15a:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f15c:	42b4      	cmp	r4, r6
    f15e:	d918      	bls.n	f192 <z_log_msg_commit+0x46>
    f160:	4910      	ldr	r1, [pc, #64]	; (f1a4 <z_log_msg_commit+0x58>)
    f162:	f240 13c1 	movw	r3, #449	; 0x1c1
    f166:	4a10      	ldr	r2, [pc, #64]	; (f1a8 <z_log_msg_commit+0x5c>)
    f168:	4810      	ldr	r0, [pc, #64]	; (f1ac <z_log_msg_commit+0x60>)
    f16a:	f017 f878 	bl	2625e <assert_print>
    f16e:	4810      	ldr	r0, [pc, #64]	; (f1b0 <z_log_msg_commit+0x64>)
    f170:	f017 f875 	bl	2625e <assert_print>
    f174:	f240 11c1 	movw	r1, #449	; 0x1c1
    f178:	480b      	ldr	r0, [pc, #44]	; (f1a8 <z_log_msg_commit+0x5c>)
    f17a:	f017 f869 	bl	26250 <assert_post_action>
	return backend->cb->active;
    f17e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    f180:	795b      	ldrb	r3, [r3, #5]
    f182:	b123      	cbz	r3, f18e <z_log_msg_commit+0x42>
	backend->api->process(backend, msg);
    f184:	6823      	ldr	r3, [r4, #0]
    f186:	4629      	mov	r1, r5
    f188:	4620      	mov	r0, r4
    f18a:	681b      	ldr	r3, [r3, #0]
    f18c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f18e:	3410      	adds	r4, #16
    f190:	e7e4      	b.n	f15c <z_log_msg_commit+0x10>
    f192:	d3f4      	bcc.n	f17e <z_log_msg_commit+0x32>
	msg_commit(&log_buffer, msg);
}
    f194:	bd70      	pop	{r4, r5, r6, pc}
    f196:	bf00      	nop
    f198:	200083fc 	.word	0x200083fc
    f19c:	0002c18c 	.word	0x0002c18c
    f1a0:	0002c19c 	.word	0x0002c19c
    f1a4:	0002e1c9 	.word	0x0002e1c9
    f1a8:	0002e178 	.word	0x0002e178
    f1ac:	0002d095 	.word	0x0002d095
    f1b0:	0002e1ea 	.word	0x0002e1ea

0000f1b4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    f1b4:	4a04      	ldr	r2, [pc, #16]	; (f1c8 <log_source_name_get+0x14>)
    f1b6:	4b05      	ldr	r3, [pc, #20]	; (f1cc <log_source_name_get+0x18>)
    f1b8:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    f1ba:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    f1be:	bf34      	ite	cc
    f1c0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    f1c4:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    f1c6:	4770      	bx	lr
    f1c8:	0002c034 	.word	0x0002c034
    f1cc:	0002c18c 	.word	0x0002c18c

0000f1d0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    f1d0:	4b0e      	ldr	r3, [pc, #56]	; (f20c <log_backend_enable+0x3c>)
{
    f1d2:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    f1d4:	1ac3      	subs	r3, r0, r3
    f1d6:	111b      	asrs	r3, r3, #4
    f1d8:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    f1da:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    f1dc:	b948      	cbnz	r0, f1f2 <log_backend_enable+0x22>
    f1de:	490c      	ldr	r1, [pc, #48]	; (f210 <log_backend_enable+0x40>)
    f1e0:	480c      	ldr	r0, [pc, #48]	; (f214 <log_backend_enable+0x44>)
    f1e2:	23de      	movs	r3, #222	; 0xde
    f1e4:	4a0c      	ldr	r2, [pc, #48]	; (f218 <log_backend_enable+0x48>)
    f1e6:	f017 f83a 	bl	2625e <assert_print>
    f1ea:	21de      	movs	r1, #222	; 0xde
    f1ec:	480a      	ldr	r0, [pc, #40]	; (f218 <log_backend_enable+0x48>)
    f1ee:	f017 f82f 	bl	26250 <assert_post_action>
	backend->cb->id = id;
    f1f2:	6844      	ldr	r4, [r0, #4]
    f1f4:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    f1f6:	6843      	ldr	r3, [r0, #4]
    f1f8:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    f1fa:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    f1fc:	6843      	ldr	r3, [r0, #4]
    f1fe:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    f200:	6843      	ldr	r3, [r0, #4]
    f202:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    f204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    f208:	f017 b8a2 	b.w	26350 <z_log_notify_backend_enabled>
    f20c:	0002c18c 	.word	0x0002c18c
    f210:	0002e28d 	.word	0x0002e28d
    f214:	0002d095 	.word	0x0002d095
    f218:	0002e255 	.word	0x0002e255

0000f21c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f220:	b085      	sub	sp, #20
    f222:	af02      	add	r7, sp, #8
    f224:	4604      	mov	r4, r0
    f226:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    f22a:	460e      	mov	r6, r1
    f22c:	4693      	mov	fp, r2
    f22e:	4698      	mov	r8, r3
    f230:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    f232:	f1ba 0f00 	cmp.w	sl, #0
    f236:	d015      	beq.n	f264 <z_impl_z_log_msg_runtime_vcreate+0x48>
		va_list ap2;

		va_copy(ap2, ap);
    f238:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    f23c:	f8cd 9000 	str.w	r9, [sp]
    f240:	2110      	movs	r1, #16
    f242:	4653      	mov	r3, sl
    f244:	2000      	movs	r0, #0
    f246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f248:	f7fe fa3a 	bl	d6c0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    f24c:	1e01      	subs	r1, r0, #0
    f24e:	da0a      	bge.n	f266 <z_impl_z_log_msg_runtime_vcreate+0x4a>
    f250:	491f      	ldr	r1, [pc, #124]	; (f2d0 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    f252:	2368      	movs	r3, #104	; 0x68
    f254:	4a1f      	ldr	r2, [pc, #124]	; (f2d4 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    f256:	4820      	ldr	r0, [pc, #128]	; (f2d8 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    f258:	f017 f801 	bl	2625e <assert_print>
    f25c:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    f25e:	481d      	ldr	r0, [pc, #116]	; (f2d4 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    f260:	f016 fff6 	bl	26250 <assert_post_action>
		plen = 0;
    f264:	4651      	mov	r1, sl
	struct log_msg_desc desc =
    f266:	4a1d      	ldr	r2, [pc, #116]	; (f2dc <z_impl_z_log_msg_runtime_vcreate+0xc0>)
    f268:	f004 0407 	and.w	r4, r4, #7
    f26c:	f00b 0b07 	and.w	fp, fp, #7
    f270:	00e4      	lsls	r4, r4, #3
    f272:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    f276:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    f27a:	4314      	orrs	r4, r2
    f27c:	4a18      	ldr	r2, [pc, #96]	; (f2e0 <z_impl_z_log_msg_runtime_vcreate+0xc4>)
    f27e:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    f282:	3517      	adds	r5, #23
    f284:	440d      	add	r5, r1
		msg = alloca(msg_wlen * sizeof(int));
    f286:	f025 0507 	bic.w	r5, r5, #7
    f28a:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    f28e:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    f290:	ad02      	add	r5, sp, #8
	if (pkg && fmt) {
    f292:	f1ba 0f00 	cmp.w	sl, #0
    f296:	d011      	beq.n	f2bc <z_impl_z_log_msg_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    f298:	f8cd 9000 	str.w	r9, [sp]
    f29c:	4653      	mov	r3, sl
    f29e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f2a0:	f105 0010 	add.w	r0, r5, #16
    f2a4:	f7fe fa0c 	bl	d6c0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    f2a8:	2800      	cmp	r0, #0
    f2aa:	da07      	bge.n	f2bc <z_impl_z_log_msg_runtime_vcreate+0xa0>
    f2ac:	4908      	ldr	r1, [pc, #32]	; (f2d0 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    f2ae:	2382      	movs	r3, #130	; 0x82
    f2b0:	4a08      	ldr	r2, [pc, #32]	; (f2d4 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    f2b2:	4809      	ldr	r0, [pc, #36]	; (f2d8 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    f2b4:	f016 ffd3 	bl	2625e <assert_print>
    f2b8:	2182      	movs	r1, #130	; 0x82
    f2ba:	e7d0      	b.n	f25e <z_impl_z_log_msg_runtime_vcreate+0x42>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    f2bc:	4643      	mov	r3, r8
    f2be:	4622      	mov	r2, r4
    f2c0:	4631      	mov	r1, r6
    f2c2:	4628      	mov	r0, r5
    f2c4:	f017 f847 	bl	26356 <z_log_msg_finalize>
	}
}
    f2c8:	370c      	adds	r7, #12
    f2ca:	46bd      	mov	sp, r7
    f2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2d0:	0002e2d9 	.word	0x0002e2d9
    f2d4:	0002e2ad 	.word	0x0002e2ad
    f2d8:	0002d095 	.word	0x0002d095
    f2dc:	0007fe00 	.word	0x0007fe00
    f2e0:	7ff80000 	.word	0x7ff80000

0000f2e4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    f2e4:	b40e      	push	{r1, r2, r3}
    f2e6:	b503      	push	{r0, r1, lr}
    f2e8:	ab03      	add	r3, sp, #12
    f2ea:	f853 2b04 	ldr.w	r2, [r3], #4
    f2ee:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f2f0:	4804      	ldr	r0, [pc, #16]	; (f304 <print_formatted+0x20>)
	va_start(args, fmt);
    f2f2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f2f4:	f017 f872 	bl	263dc <cbvprintf>
	va_end(args);

	return length;
}
    f2f8:	b002      	add	sp, #8
    f2fa:	f85d eb04 	ldr.w	lr, [sp], #4
    f2fe:	b003      	add	sp, #12
    f300:	4770      	bx	lr
    f302:	bf00      	nop
    f304:	0002638b 	.word	0x0002638b

0000f308 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f308:	06ca      	lsls	r2, r1, #27
    f30a:	d405      	bmi.n	f318 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f30c:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    f30e:	bf4c      	ite	mi
    f310:	4902      	ldrmi	r1, [pc, #8]	; (f31c <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    f312:	4903      	ldrpl	r1, [pc, #12]	; (f320 <newline_print+0x18>)
    f314:	f7ff bfe6 	b.w	f2e4 <print_formatted>
	}
}
    f318:	4770      	bx	lr
    f31a:	bf00      	nop
    f31c:	00030d20 	.word	0x00030d20
    f320:	0002d801 	.word	0x0002d801

0000f324 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    f324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f328:	b089      	sub	sp, #36	; 0x24
    f32a:	469a      	mov	sl, r3
    f32c:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    f330:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    f334:	9305      	str	r3, [sp, #20]
    f336:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f338:	4604      	mov	r4, r0
    f33a:	460d      	mov	r5, r1
    f33c:	9e16      	ldr	r6, [sp, #88]	; 0x58
    f33e:	9206      	str	r2, [sp, #24]
    f340:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    f342:	f1bb 0f00 	cmp.w	fp, #0
    f346:	f000 8085 	beq.w	f454 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f34a:	f006 0308 	and.w	r3, r6, #8
    f34e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    f350:	f016 ffff 	bl	26352 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    f354:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    f358:	4602      	mov	r2, r0
    f35a:	2800      	cmp	r0, #0
    f35c:	d049      	beq.n	f3f2 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    f35e:	4620      	mov	r0, r4
    f360:	498c      	ldr	r1, [pc, #560]	; (f594 <log_output_process+0x270>)
    f362:	f7ff ffbf 	bl	f2e4 <print_formatted>
    f366:	4680      	mov	r8, r0
	if (stamp) {
    f368:	f1b9 0f00 	cmp.w	r9, #0
    f36c:	d008      	beq.n	f380 <log_output_process+0x5c>
	if (!format) {
    f36e:	f016 0f44 	tst.w	r6, #68	; 0x44
    f372:	d140      	bne.n	f3f6 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    f374:	462a      	mov	r2, r5
    f376:	4620      	mov	r0, r4
    f378:	4987      	ldr	r1, [pc, #540]	; (f598 <log_output_process+0x274>)
    f37a:	f7ff ffb3 	bl	f2e4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    f37e:	4480      	add	r8, r0
	if (color) {
    f380:	f006 0301 	and.w	r3, r6, #1
    f384:	b153      	cbz	r3, f39c <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    f386:	4b85      	ldr	r3, [pc, #532]	; (f59c <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    f388:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    f38a:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    f38e:	4b84      	ldr	r3, [pc, #528]	; (f5a0 <log_output_process+0x27c>)
    f390:	4984      	ldr	r1, [pc, #528]	; (f5a4 <log_output_process+0x280>)
    f392:	2a00      	cmp	r2, #0
    f394:	bf08      	it	eq
    f396:	461a      	moveq	r2, r3
    f398:	f7ff ffa4 	bl	f2e4 <print_formatted>
	if (level_on) {
    f39c:	f006 0308 	and.w	r3, r6, #8
    f3a0:	2b00      	cmp	r3, #0
    f3a2:	d054      	beq.n	f44e <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    f3a4:	4b80      	ldr	r3, [pc, #512]	; (f5a8 <log_output_process+0x284>)
    f3a6:	4620      	mov	r0, r4
    f3a8:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    f3ac:	497f      	ldr	r1, [pc, #508]	; (f5ac <log_output_process+0x288>)
    f3ae:	f7ff ff99 	bl	f2e4 <print_formatted>
    f3b2:	4605      	mov	r5, r0
	if (domain) {
    f3b4:	9b06      	ldr	r3, [sp, #24]
    f3b6:	b12b      	cbz	r3, f3c4 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    f3b8:	461a      	mov	r2, r3
    f3ba:	4620      	mov	r0, r4
    f3bc:	497c      	ldr	r1, [pc, #496]	; (f5b0 <log_output_process+0x28c>)
    f3be:	f7ff ff91 	bl	f2e4 <print_formatted>
    f3c2:	4405      	add	r5, r0
	if (source) {
    f3c4:	f1ba 0f00 	cmp.w	sl, #0
    f3c8:	d005      	beq.n	f3d6 <log_output_process+0xb2>
		total += print_formatted(output,
    f3ca:	4652      	mov	r2, sl
    f3cc:	4620      	mov	r0, r4
    f3ce:	4979      	ldr	r1, [pc, #484]	; (f5b4 <log_output_process+0x290>)
    f3d0:	f7ff ff88 	bl	f2e4 <print_formatted>
    f3d4:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    f3d6:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    f3d8:	2f00      	cmp	r7, #0
    f3da:	d149      	bne.n	f470 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    f3dc:	9b04      	ldr	r3, [sp, #16]
    f3de:	2b00      	cmp	r3, #0
    f3e0:	d160      	bne.n	f4a4 <log_output_process+0x180>
	if (color) {
    f3e2:	07f3      	lsls	r3, r6, #31
    f3e4:	f100 80cf 	bmi.w	f586 <log_output_process+0x262>
	newline_print(output, flags);
    f3e8:	4631      	mov	r1, r6
    f3ea:	4620      	mov	r0, r4
    f3ec:	f7ff ff8c 	bl	f308 <newline_print>
}
    f3f0:	e0c3      	b.n	f57a <log_output_process+0x256>
	uint32_t length = 0U;
    f3f2:	4680      	mov	r8, r0
    f3f4:	e7b8      	b.n	f368 <log_output_process+0x44>
	} else if (freq != 0U) {
    f3f6:	4b70      	ldr	r3, [pc, #448]	; (f5b8 <log_output_process+0x294>)
    f3f8:	6818      	ldr	r0, [r3, #0]
    f3fa:	2800      	cmp	r0, #0
    f3fc:	d0bf      	beq.n	f37e <log_output_process+0x5a>
		timestamp /= timestamp_div;
    f3fe:	4b6f      	ldr	r3, [pc, #444]	; (f5bc <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    f400:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f404:	681b      	ldr	r3, [r3, #0]
    f406:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    f40a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    f40e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    f412:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    f416:	fb09 f505 	mul.w	r5, r9, r5
    f41a:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f41e:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    f422:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    f426:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f42a:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    f42e:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f432:	fb09 f505 	mul.w	r5, r9, r5
    f436:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    f43a:	fb0c 1113 	mls	r1, ip, r3, r1
    f43e:	4620      	mov	r0, r4
    f440:	9100      	str	r1, [sp, #0]
    f442:	e9cd e501 	strd	lr, r5, [sp, #4]
    f446:	495e      	ldr	r1, [pc, #376]	; (f5c0 <log_output_process+0x29c>)
    f448:	f7ff ff4c 	bl	f2e4 <print_formatted>
    f44c:	e797      	b.n	f37e <log_output_process+0x5a>
	int total = 0;
    f44e:	f006 0508 	and.w	r5, r6, #8
    f452:	e7af      	b.n	f3b4 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f454:	f1ba 0f01 	cmp.w	sl, #1
    f458:	d106      	bne.n	f468 <log_output_process+0x144>
	if (package) {
    f45a:	b9ef      	cbnz	r7, f498 <log_output_process+0x174>
	if (data_len) {
    f45c:	9b04      	ldr	r3, [sp, #16]
    f45e:	2b00      	cmp	r3, #0
    f460:	f000 808b 	beq.w	f57a <log_output_process+0x256>
		prefix_offset = 0;
    f464:	2500      	movs	r5, #0
    f466:	e01d      	b.n	f4a4 <log_output_process+0x180>
	if (package) {
    f468:	2f00      	cmp	r7, #0
    f46a:	d0f7      	beq.n	f45c <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f46c:	4855      	ldr	r0, [pc, #340]	; (f5c4 <log_output_process+0x2a0>)
    f46e:	e014      	b.n	f49a <log_output_process+0x176>
		cb = out_func;
    f470:	4855      	ldr	r0, [pc, #340]	; (f5c8 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    f472:	463b      	mov	r3, r7
    f474:	4622      	mov	r2, r4
    f476:	4955      	ldr	r1, [pc, #340]	; (f5cc <log_output_process+0x2a8>)
    f478:	f016 fce9 	bl	25e4e <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    f47c:	2800      	cmp	r0, #0
    f47e:	da0e      	bge.n	f49e <log_output_process+0x17a>
    f480:	4953      	ldr	r1, [pc, #332]	; (f5d0 <log_output_process+0x2ac>)
    f482:	4854      	ldr	r0, [pc, #336]	; (f5d4 <log_output_process+0x2b0>)
    f484:	f44f 7300 	mov.w	r3, #512	; 0x200
    f488:	4a53      	ldr	r2, [pc, #332]	; (f5d8 <log_output_process+0x2b4>)
    f48a:	f016 fee8 	bl	2625e <assert_print>
    f48e:	f44f 7100 	mov.w	r1, #512	; 0x200
    f492:	4851      	ldr	r0, [pc, #324]	; (f5d8 <log_output_process+0x2b4>)
    f494:	f016 fedc 	bl	26250 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f498:	484b      	ldr	r0, [pc, #300]	; (f5c8 <log_output_process+0x2a4>)
		prefix_offset = 0;
    f49a:	465d      	mov	r5, fp
    f49c:	e7e9      	b.n	f472 <log_output_process+0x14e>
	if (data_len) {
    f49e:	9b04      	ldr	r3, [sp, #16]
    f4a0:	2b00      	cmp	r3, #0
    f4a2:	d066      	beq.n	f572 <log_output_process+0x24e>
		print_formatted(output, " ");
    f4a4:	f8df 8134 	ldr.w	r8, [pc, #308]	; f5dc <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    f4a8:	f8df 9134 	ldr.w	r9, [pc, #308]	; f5e0 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f4ac:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    f4ae:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f4b0:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    f4b2:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f4b4:	bf28      	it	cs
    f4b6:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    f4b8:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    f4bc:	f7ff ff24 	bl	f308 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    f4c0:	4555      	cmp	r5, sl
    f4c2:	dc43      	bgt.n	f54c <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    f4c4:	9b05      	ldr	r3, [sp, #20]
    f4c6:	4649      	mov	r1, r9
    f4c8:	4620      	mov	r0, r4
    f4ca:	781a      	ldrb	r2, [r3, #0]
    f4cc:	f7ff ff0a 	bl	f2e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f4d0:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    f4d4:	f01a 0f07 	tst.w	sl, #7
    f4d8:	d103      	bne.n	f4e2 <log_output_process+0x1be>
			print_formatted(output, " ");
    f4da:	4641      	mov	r1, r8
    f4dc:	4620      	mov	r0, r4
    f4de:	f7ff ff01 	bl	f2e4 <print_formatted>
		if (i < length) {
    f4e2:	4557      	cmp	r7, sl
    f4e4:	d939      	bls.n	f55a <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    f4e6:	9b05      	ldr	r3, [sp, #20]
    f4e8:	4649      	mov	r1, r9
    f4ea:	4620      	mov	r0, r4
    f4ec:	f813 200a 	ldrb.w	r2, [r3, sl]
    f4f0:	f7ff fef8 	bl	f2e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f4f4:	f10a 0a01 	add.w	sl, sl, #1
    f4f8:	f1ba 0f10 	cmp.w	sl, #16
    f4fc:	d1ea      	bne.n	f4d4 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f4fe:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    f502:	4620      	mov	r0, r4
    f504:	4937      	ldr	r1, [pc, #220]	; (f5e4 <log_output_process+0x2c0>)
    f506:	f7ff feed 	bl	f2e4 <print_formatted>
		if (i < length) {
    f50a:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    f50c:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    f50e:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    f510:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    f512:	4b35      	ldr	r3, [pc, #212]	; (f5e8 <log_output_process+0x2c4>)
    f514:	5c99      	ldrb	r1, [r3, r2]
    f516:	f011 0f97 	tst.w	r1, #151	; 0x97
    f51a:	bf08      	it	eq
    f51c:	222e      	moveq	r2, #46	; 0x2e
    f51e:	4933      	ldr	r1, [pc, #204]	; (f5ec <log_output_process+0x2c8>)
    f520:	f7ff fee0 	bl	f2e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f524:	f10a 0a01 	add.w	sl, sl, #1
    f528:	f1ba 0f10 	cmp.w	sl, #16
    f52c:	d01a      	beq.n	f564 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    f52e:	f01a 0f07 	tst.w	sl, #7
    f532:	d103      	bne.n	f53c <log_output_process+0x218>
			print_formatted(output, " ");
    f534:	4641      	mov	r1, r8
    f536:	4620      	mov	r0, r4
    f538:	f7ff fed4 	bl	f2e4 <print_formatted>
		if (i < length) {
    f53c:	4557      	cmp	r7, sl
    f53e:	4652      	mov	r2, sl
    f540:	d8e4      	bhi.n	f50c <log_output_process+0x1e8>
			print_formatted(output, " ");
    f542:	4641      	mov	r1, r8
    f544:	4620      	mov	r0, r4
    f546:	f7ff fecd 	bl	f2e4 <print_formatted>
    f54a:	e7eb      	b.n	f524 <log_output_process+0x200>
		print_formatted(output, " ");
    f54c:	4641      	mov	r1, r8
    f54e:	4620      	mov	r0, r4
    f550:	f7ff fec8 	bl	f2e4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f554:	f10a 0a01 	add.w	sl, sl, #1
    f558:	e7b2      	b.n	f4c0 <log_output_process+0x19c>
			print_formatted(output, "   ");
    f55a:	4620      	mov	r0, r4
    f55c:	4924      	ldr	r1, [pc, #144]	; (f5f0 <log_output_process+0x2cc>)
    f55e:	f7ff fec1 	bl	f2e4 <print_formatted>
    f562:	e7c7      	b.n	f4f4 <log_output_process+0x1d0>
		data += length;
    f564:	9b05      	ldr	r3, [sp, #20]
    f566:	443b      	add	r3, r7
    f568:	9305      	str	r3, [sp, #20]
	} while (len);
    f56a:	9b04      	ldr	r3, [sp, #16]
    f56c:	1bdb      	subs	r3, r3, r7
    f56e:	9304      	str	r3, [sp, #16]
    f570:	d19c      	bne.n	f4ac <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    f572:	f1bb 0f00 	cmp.w	fp, #0
    f576:	f47f af34 	bne.w	f3e2 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    f57a:	4620      	mov	r0, r4
}
    f57c:	b009      	add	sp, #36	; 0x24
    f57e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    f582:	f016 bf32 	b.w	263ea <log_output_flush>
		print_formatted(output, "%s", log_color);
    f586:	4620      	mov	r0, r4
    f588:	4a05      	ldr	r2, [pc, #20]	; (f5a0 <log_output_process+0x27c>)
    f58a:	4906      	ldr	r1, [pc, #24]	; (f5a4 <log_output_process+0x280>)
    f58c:	f7ff feaa 	bl	f2e4 <print_formatted>
}
    f590:	e72a      	b.n	f3e8 <log_output_process+0xc4>
    f592:	bf00      	nop
    f594:	0002e2e8 	.word	0x0002e2e8
    f598:	0002e2ec 	.word	0x0002e2ec
    f59c:	0002c69c 	.word	0x0002c69c
    f5a0:	0002e2e3 	.word	0x0002e2e3
    f5a4:	0002d292 	.word	0x0002d292
    f5a8:	0002c6b0 	.word	0x0002c6b0
    f5ac:	0002e311 	.word	0x0002e311
    f5b0:	0002e317 	.word	0x0002e317
    f5b4:	0002e31b 	.word	0x0002e31b
    f5b8:	20022604 	.word	0x20022604
    f5bc:	20022600 	.word	0x20022600
    f5c0:	0002e2f5 	.word	0x0002e2f5
    f5c4:	000263a7 	.word	0x000263a7
    f5c8:	0002638b 	.word	0x0002638b
    f5cc:	000263dd 	.word	0x000263dd
    f5d0:	0002e34f 	.word	0x0002e34f
    f5d4:	0002d095 	.word	0x0002d095
    f5d8:	0002e320 	.word	0x0002e320
    f5dc:	00031e9e 	.word	0x00031e9e
    f5e0:	0002e358 	.word	0x0002e358
    f5e4:	0002e35e 	.word	0x0002e35e
    f5e8:	000329de 	.word	0x000329de
    f5ec:	0002e360 	.word	0x0002e360
    f5f0:	00031e9c 	.word	0x00031e9c

0000f5f4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    f5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    f5f8:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    f5fa:	684b      	ldr	r3, [r1, #4]
    f5fc:	4605      	mov	r5, r0
    f5fe:	460c      	mov	r4, r1
    f600:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    f602:	688e      	ldr	r6, [r1, #8]
    f604:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    f606:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    f60a:	b15b      	cbz	r3, f624 <log_output_msg_process+0x30>
    f60c:	4a13      	ldr	r2, [pc, #76]	; (f65c <log_output_msg_process+0x68>)
    f60e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    f610:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    f614:	2900      	cmp	r1, #0
    f616:	db1f      	blt.n	f658 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    f618:	7820      	ldrb	r0, [r4, #0]
    f61a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f61e:	f7ff fdc9 	bl	f1b4 <log_source_name_get>
    f622:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    f624:	4621      	mov	r1, r4
    f626:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    f62a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    f62c:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    f630:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    f632:	eb01 0402 	add.w	r4, r1, r2
    f636:	bf08      	it	eq
    f638:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    f63a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    f63e:	e9cd 0803 	strd	r0, r8, [sp, #12]
    f642:	e9cd 1401 	strd	r1, r4, [sp, #4]
    f646:	2200      	movs	r2, #0
    f648:	4631      	mov	r1, r6
    f64a:	4628      	mov	r0, r5
    f64c:	9700      	str	r7, [sp, #0]
    f64e:	f7ff fe69 	bl	f324 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    f652:	b006      	add	sp, #24
    f654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    f658:	2300      	movs	r3, #0
    f65a:	e7e3      	b.n	f624 <log_output_msg_process+0x30>
    f65c:	0002c034 	.word	0x0002c034

0000f660 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f660:	2100      	movs	r1, #0
    f662:	2301      	movs	r3, #1
    f664:	4a06      	ldr	r2, [pc, #24]	; (f680 <log_output_timestamp_freq_set+0x20>)
    f666:	4290      	cmp	r0, r2
    f668:	d806      	bhi.n	f678 <log_output_timestamp_freq_set+0x18>
    f66a:	4a06      	ldr	r2, [pc, #24]	; (f684 <log_output_timestamp_freq_set+0x24>)
    f66c:	b901      	cbnz	r1, f670 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    f66e:	2301      	movs	r3, #1
    f670:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f672:	4b05      	ldr	r3, [pc, #20]	; (f688 <log_output_timestamp_freq_set+0x28>)
    f674:	6018      	str	r0, [r3, #0]
}
    f676:	4770      	bx	lr
		timestamp_div *= 2U;
    f678:	2101      	movs	r1, #1
		frequency /= 2U;
    f67a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f67c:	005b      	lsls	r3, r3, #1
    f67e:	e7f2      	b.n	f666 <log_output_timestamp_freq_set+0x6>
    f680:	000f4240 	.word	0x000f4240
    f684:	20022600 	.word	0x20022600
    f688:	20022604 	.word	0x20022604

0000f68c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    f68c:	2201      	movs	r2, #1
    f68e:	4b01      	ldr	r3, [pc, #4]	; (f694 <log_backend_rtt_init+0x8>)
    f690:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    f692:	4770      	bx	lr
    f694:	200235f7 	.word	0x200235f7

0000f698 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    f698:	4b01      	ldr	r3, [pc, #4]	; (f6a0 <format_set+0x8>)
	return 0;
}
    f69a:	2000      	movs	r0, #0
	log_format_current = log_type;
    f69c:	6019      	str	r1, [r3, #0]
}
    f69e:	4770      	bx	lr
    f6a0:	2002261c 	.word	0x2002261c

0000f6a4 <panic>:
	panic_mode = true;
    f6a4:	2201      	movs	r2, #1
    f6a6:	4b02      	ldr	r3, [pc, #8]	; (f6b0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    f6a8:	4802      	ldr	r0, [pc, #8]	; (f6b4 <panic+0x10>)
    f6aa:	701a      	strb	r2, [r3, #0]
    f6ac:	f016 be9d 	b.w	263ea <log_output_flush>
    f6b0:	200235f8 	.word	0x200235f8
    f6b4:	0002c6e0 	.word	0x0002c6e0

0000f6b8 <process>:
{
    f6b8:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f6ba:	4b06      	ldr	r3, [pc, #24]	; (f6d4 <process+0x1c>)
{
    f6bc:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f6be:	6818      	ldr	r0, [r3, #0]
    f6c0:	f7ff fcd4 	bl	f06c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    f6c4:	4621      	mov	r1, r4
}
    f6c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f6ca:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    f6cc:	220f      	movs	r2, #15
    f6ce:	4802      	ldr	r0, [pc, #8]	; (f6d8 <process+0x20>)
    f6d0:	4718      	bx	r3
    f6d2:	bf00      	nop
    f6d4:	2002261c 	.word	0x2002261c
    f6d8:	0002c6e0 	.word	0x0002c6e0

0000f6dc <data_out_block_mode>:
{
    f6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6de:	4607      	mov	r7, r0
    f6e0:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    f6e2:	2404      	movs	r4, #4
    f6e4:	4d17      	ldr	r5, [pc, #92]	; (f744 <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    f6e6:	4632      	mov	r2, r6
    f6e8:	4639      	mov	r1, r7
    f6ea:	2000      	movs	r0, #0
    f6ec:	f010 fb58 	bl	1fda0 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    f6f0:	b1c8      	cbz	r0, f726 <data_out_block_mode+0x4a>
	host_present = true;
    f6f2:	2301      	movs	r3, #1
    f6f4:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    f6f6:	4b14      	ldr	r3, [pc, #80]	; (f748 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    f6f8:	781b      	ldrb	r3, [r3, #0]
    f6fa:	b92b      	cbnz	r3, f708 <data_out_block_mode+0x2c>
}
    f6fc:	4630      	mov	r0, r6
    f6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    f700:	b95c      	cbnz	r4, f71a <data_out_block_mode+0x3e>
		host_present = false;
    f702:	702c      	strb	r4, [r5, #0]
    f704:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    f708:	2000      	movs	r0, #0
    f70a:	f010 fb91 	bl	1fe30 <SEGGER_RTT_HasDataUp>
    f70e:	2800      	cmp	r0, #0
    f710:	d0f4      	beq.n	f6fc <data_out_block_mode+0x20>
    f712:	782b      	ldrb	r3, [r5, #0]
    f714:	2b00      	cmp	r3, #0
    f716:	d1f3      	bne.n	f700 <data_out_block_mode+0x24>
    f718:	e7f0      	b.n	f6fc <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    f71a:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    f71c:	f241 3088 	movw	r0, #5000	; 0x1388
    f720:	f01b f9fa 	bl	2ab18 <z_impl_k_busy_wait>
}
    f724:	e7f0      	b.n	f708 <data_out_block_mode+0x2c>
		} else if (host_present) {
    f726:	782b      	ldrb	r3, [r5, #0]
    f728:	b113      	cbz	r3, f730 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    f72a:	3c01      	subs	r4, #1
    f72c:	d104      	bne.n	f738 <data_out_block_mode+0x5c>
		host_present = false;
    f72e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    f730:	782b      	ldrb	r3, [r5, #0]
    f732:	2b00      	cmp	r3, #0
    f734:	d1d7      	bne.n	f6e6 <data_out_block_mode+0xa>
    f736:	e7e1      	b.n	f6fc <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    f738:	f241 3088 	movw	r0, #5000	; 0x1388
    f73c:	f01b f9ec 	bl	2ab18 <z_impl_k_busy_wait>
    f740:	e7f6      	b.n	f730 <data_out_block_mode+0x54>
    f742:	bf00      	nop
    f744:	200235f7 	.word	0x200235f7
    f748:	200235f8 	.word	0x200235f8

0000f74c <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    f74c:	b570      	push	{r4, r5, r6, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    f74e:	8983      	ldrh	r3, [r0, #12]
    f750:	6805      	ldr	r5, [r0, #0]
	addr &= ADDR_SECT_MASK;
    f752:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    f754:	0c09      	lsrs	r1, r1, #16
    f756:	fb03 5501 	mla	r5, r3, r1, r5
{
    f75a:	b086      	sub	sp, #24

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    f75c:	e9cd 5304 	strd	r5, r3, [sp, #16]
    f760:	4b11      	ldr	r3, [pc, #68]	; (f7a8 <nvs_flash_erase_sector+0x5c>)
    f762:	2208      	movs	r2, #8
    f764:	9303      	str	r3, [sp, #12]
    f766:	4b11      	ldr	r3, [pc, #68]	; (f7ac <nvs_flash_erase_sector+0x60>)
{
    f768:	4604      	mov	r4, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    f76a:	9302      	str	r3, [sp, #8]
    f76c:	2300      	movs	r3, #0
    f76e:	4910      	ldr	r1, [pc, #64]	; (f7b0 <nvs_flash_erase_sector+0x64>)
    f770:	4618      	mov	r0, r3
    f772:	e9cd 3200 	strd	r3, r2, [sp]
    f776:	2204      	movs	r2, #4
    f778:	f016 feb7 	bl	264ea <z_log_msg_runtime_create.constprop.0>
	addr &= ADDR_SECT_MASK;
    f77c:	0436      	lsls	r6, r6, #16
		fs->sector_size);

#ifdef CONFIG_NVS_LOOKUP_CACHE
	nvs_lookup_cache_invalidate(fs, addr >> ADDR_SECT_SHIFT);
#endif
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    f77e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f780:	89a2      	ldrh	r2, [r4, #12]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    f782:	6883      	ldr	r3, [r0, #8]
    f784:	4629      	mov	r1, r5
    f786:	689b      	ldr	r3, [r3, #8]
    f788:	4798      	blx	r3

	if (rc) {
    f78a:	b950      	cbnz	r0, f7a2 <nvs_flash_erase_sector+0x56>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    f78c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f78e:	4631      	mov	r1, r6
    f790:	4620      	mov	r0, r4
    f792:	89a3      	ldrh	r3, [r4, #12]
    f794:	7912      	ldrb	r2, [r2, #4]
    f796:	f016 fe83 	bl	264a0 <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    f79a:	2800      	cmp	r0, #0
    f79c:	bf18      	it	ne
    f79e:	f06f 0005 	mvnne.w	r0, #5
	}

	return rc;
}
    f7a2:	b006      	add	sp, #24
    f7a4:	bd70      	pop	{r4, r5, r6, pc}
    f7a6:	bf00      	nop
    f7a8:	0002e556 	.word	0x0002e556
    f7ac:	0002e393 	.word	0x0002e393
    f7b0:	0002c10c 	.word	0x0002c10c

0000f7b4 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    f7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t data_end_addr, ate_end_addr;
	struct nvs_ate end_ate;
	size_t ate_size;
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
    f7b8:	884b      	ldrh	r3, [r1, #2]
{
    f7ba:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Recovering last ate from sector %d",
    f7bc:	9304      	str	r3, [sp, #16]
    f7be:	4b1d      	ldr	r3, [pc, #116]	; (f834 <nvs_recover_last_ate+0x80>)
    f7c0:	2408      	movs	r4, #8
    f7c2:	9303      	str	r3, [sp, #12]
    f7c4:	4b1c      	ldr	r3, [pc, #112]	; (f838 <nvs_recover_last_ate+0x84>)
{
    f7c6:	4607      	mov	r7, r0
	LOG_DBG("Recovering last ate from sector %d",
    f7c8:	9302      	str	r3, [sp, #8]
    f7ca:	2300      	movs	r3, #0
{
    f7cc:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    f7ce:	4618      	mov	r0, r3
    f7d0:	e9cd 3400 	strd	r3, r4, [sp]
    f7d4:	4919      	ldr	r1, [pc, #100]	; (f83c <nvs_recover_last_ate+0x88>)
    f7d6:	2204      	movs	r2, #4
    f7d8:	f016 fe87 	bl	264ea <z_log_msg_runtime_create.constprop.0>
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f7dc:	4621      	mov	r1, r4
    f7de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f7e0:	f016 fe93 	bl	2650a <nvs_al_size.isra.0>
    f7e4:	4680      	mov	r8, r0

	*addr -= ate_size;
    f7e6:	682c      	ldr	r4, [r5, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    f7e8:	f8df 9054 	ldr.w	r9, [pc, #84]	; f840 <nvs_recover_last_ate+0x8c>
	*addr -= ate_size;
    f7ec:	1a24      	subs	r4, r4, r0
    f7ee:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    f7f0:	ea04 0609 	and.w	r6, r4, r9
	while (ate_end_addr > data_end_addr) {
    f7f4:	42b4      	cmp	r4, r6
    f7f6:	d803      	bhi.n	f800 <nvs_recover_last_ate+0x4c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    f7f8:	2000      	movs	r0, #0
}
    f7fa:	b009      	add	sp, #36	; 0x24
    f7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f800:	2308      	movs	r3, #8
    f802:	4621      	mov	r1, r4
    f804:	4638      	mov	r0, r7
    f806:	aa06      	add	r2, sp, #24
    f808:	f016 fdfc 	bl	26404 <nvs_flash_rd>
		if (rc) {
    f80c:	2800      	cmp	r0, #0
    f80e:	d1f4      	bne.n	f7fa <nvs_recover_last_ate+0x46>
		if (nvs_ate_valid(fs, &end_ate)) {
    f810:	4638      	mov	r0, r7
    f812:	a906      	add	r1, sp, #24
    f814:	f016 fe83 	bl	2651e <nvs_ate_valid>
    f818:	b140      	cbz	r0, f82c <nvs_recover_last_ate+0x78>
			data_end_addr += end_ate.offset + end_ate.len;
    f81a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f81e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
			data_end_addr &= ADDR_SECT_MASK;
    f822:	ea06 0609 	and.w	r6, r6, r9
			data_end_addr += end_ate.offset + end_ate.len;
    f826:	4413      	add	r3, r2
    f828:	441e      	add	r6, r3
			*addr = ate_end_addr;
    f82a:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    f82c:	eba4 0408 	sub.w	r4, r4, r8
    f830:	e7e0      	b.n	f7f4 <nvs_recover_last_ate+0x40>
    f832:	bf00      	nop
    f834:	0002e541 	.word	0x0002e541
    f838:	0002e3b4 	.word	0x0002e3b4
    f83c:	0002c10c 	.word	0x0002c10c
    f840:	ffff0000 	.word	0xffff0000

0000f844 <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    f844:	b530      	push	{r4, r5, lr}
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    f846:	8883      	ldrh	r3, [r0, #4]
{
    f848:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    f84a:	9304      	str	r3, [sp, #16]
    f84c:	4b10      	ldr	r3, [pc, #64]	; (f890 <nvs_add_gc_done_ate+0x4c>)
    f84e:	2500      	movs	r5, #0
    f850:	9303      	str	r3, [sp, #12]
    f852:	4b10      	ldr	r3, [pc, #64]	; (f894 <nvs_add_gc_done_ate+0x50>)
{
    f854:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    f856:	9302      	str	r3, [sp, #8]
    f858:	2308      	movs	r3, #8
    f85a:	2204      	movs	r2, #4
    f85c:	4628      	mov	r0, r5
    f85e:	e9cd 5300 	strd	r5, r3, [sp]
    f862:	490d      	ldr	r1, [pc, #52]	; (f898 <nvs_add_gc_done_ate+0x54>)
    f864:	462b      	mov	r3, r5
    f866:	f016 fe40 	bl	264ea <z_log_msg_runtime_create.constprop.0>
	gc_done_ate.id = 0xffff;
    f86a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f86e:	f8ad 3018 	strh.w	r3, [sp, #24]
	gc_done_ate.len = 0U;
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f872:	68a3      	ldr	r3, [r4, #8]
	nvs_ate_crc8_update(&gc_done_ate);
    f874:	a806      	add	r0, sp, #24
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f876:	f8ad 301a 	strh.w	r3, [sp, #26]
	gc_done_ate.len = 0U;
    f87a:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&gc_done_ate);
    f87e:	f016 fe06 	bl	2648e <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    f882:	4620      	mov	r0, r4
    f884:	a906      	add	r1, sp, #24
    f886:	f016 ff06 	bl	26696 <nvs_flash_ate_wrt>
}
    f88a:	b009      	add	sp, #36	; 0x24
    f88c:	bd30      	pop	{r4, r5, pc}
    f88e:	bf00      	nop
    f890:	0002e526 	.word	0x0002e526
    f894:	0002e3db 	.word	0x0002e3db
    f898:	0002c10c 	.word	0x0002c10c

0000f89c <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    f89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f8a0:	2108      	movs	r1, #8
{
    f8a2:	b09b      	sub	sp, #108	; 0x6c
    f8a4:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f8a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f8a8:	f016 fe2f 	bl	2650a <nvs_al_size.isra.0>
    f8ac:	4605      	mov	r5, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    f8ae:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    f8b0:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    f8b2:	0c1b      	lsrs	r3, r3, #16
    f8b4:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    f8b6:	a909      	add	r1, sp, #36	; 0x24
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    f8b8:	9309      	str	r3, [sp, #36]	; 0x24
	nvs_sector_advance(fs, &sec_addr);
    f8ba:	f016 fdb1 	bl	26420 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    f8be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    f8c2:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f8c4:	aa0c      	add	r2, sp, #48	; 0x30
	gc_addr = sec_addr + fs->sector_size - ate_size;
    f8c6:	445e      	add	r6, fp
    f8c8:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f8ca:	2308      	movs	r3, #8
    f8cc:	4631      	mov	r1, r6
    f8ce:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    f8d0:	960a      	str	r6, [sp, #40]	; 0x28
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f8d2:	f016 fd97 	bl	26404 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    f8d6:	1e02      	subs	r2, r0, #0
    f8d8:	f2c0 80bb 	blt.w	fa52 <nvs_gc+0x1b6>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    f8dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f8de:	aa0c      	add	r2, sp, #48	; 0x30
    f8e0:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    f8e2:	2300      	movs	r3, #0
		if (data8[i] != value) {
    f8e4:	f812 0b01 	ldrb.w	r0, [r2], #1
    f8e8:	4281      	cmp	r1, r0
    f8ea:	f040 80a1 	bne.w	fa30 <nvs_gc+0x194>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    f8ee:	3301      	adds	r3, #1
    f8f0:	2b08      	cmp	r3, #8
    f8f2:	d1f7      	bne.n	f8e4 <nvs_gc+0x48>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    f8f4:	68a3      	ldr	r3, [r4, #8]
    f8f6:	6862      	ldr	r2, [r4, #4]
    f8f8:	442b      	add	r3, r5
    f8fa:	429a      	cmp	r2, r3
    f8fc:	f080 8090 	bcs.w	fa20 <nvs_gc+0x184>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    f900:	4659      	mov	r1, fp
    f902:	4620      	mov	r0, r4
    f904:	f7ff ff22 	bl	f74c <nvs_flash_erase_sector>
    f908:	4602      	mov	r2, r0
	if (rc) {
    f90a:	e0a2      	b.n	fa52 <nvs_gc+0x1b6>
		gc_addr += close_ate.offset;
    f90c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
		gc_addr &= ADDR_SECT_MASK;
    f910:	0c36      	lsrs	r6, r6, #16
    f912:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    f914:	441e      	add	r6, r3
    f916:	960a      	str	r6, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    f918:	aa0e      	add	r2, sp, #56	; 0x38
    f91a:	4620      	mov	r0, r4
    f91c:	a90a      	add	r1, sp, #40	; 0x28
		gc_prev_addr = gc_addr;
    f91e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    f922:	f016 fe34 	bl	2658e <nvs_prev_ate>
		if (rc) {
    f926:	4602      	mov	r2, r0
    f928:	2800      	cmp	r0, #0
    f92a:	f040 8092 	bne.w	fa52 <nvs_gc+0x1b6>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    f92e:	4620      	mov	r0, r4
    f930:	a90e      	add	r1, sp, #56	; 0x38
    f932:	f016 fdf4 	bl	2651e <nvs_ate_valid>
    f936:	b918      	cbnz	r0, f940 <nvs_gc+0xa4>
	} while (gc_prev_addr != stop_addr);
    f938:	9b07      	ldr	r3, [sp, #28]
    f93a:	4553      	cmp	r3, sl
    f93c:	d1ec      	bne.n	f918 <nvs_gc+0x7c>
    f93e:	e7d9      	b.n	f8f4 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    f940:	6863      	ldr	r3, [r4, #4]
    f942:	930b      	str	r3, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f944:	aa10      	add	r2, sp, #64	; 0x40
    f946:	4620      	mov	r0, r4
    f948:	a90b      	add	r1, sp, #44	; 0x2c
			wlk_prev_addr = wlk_addr;
    f94a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f94c:	f016 fe1f 	bl	2658e <nvs_prev_ate>
			if (rc) {
    f950:	4602      	mov	r2, r0
    f952:	2800      	cmp	r0, #0
    f954:	d17d      	bne.n	fa52 <nvs_gc+0x1b6>
			if ((wlk_ate.id == gc_ate.id) &&
    f956:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    f95a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    f95e:	429a      	cmp	r2, r3
    f960:	d038      	beq.n	f9d4 <nvs_gc+0x138>
		} while (wlk_addr != fs->ate_wra);
    f962:	6862      	ldr	r2, [r4, #4]
    f964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f966:	429a      	cmp	r2, r3
    f968:	d1ec      	bne.n	f944 <nvs_gc+0xa8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    f96a:	45b2      	cmp	sl, r6
    f96c:	d1e4      	bne.n	f938 <nvs_gc+0x9c>
    f96e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    f972:	2b00      	cmp	r3, #0
    f974:	d0e0      	beq.n	f938 <nvs_gc+0x9c>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    f976:	9305      	str	r3, [sp, #20]
    f978:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    f97c:	2208      	movs	r2, #8
    f97e:	9304      	str	r3, [sp, #16]
    f980:	4b36      	ldr	r3, [pc, #216]	; (fa5c <nvs_gc+0x1c0>)
    f982:	4937      	ldr	r1, [pc, #220]	; (fa60 <nvs_gc+0x1c4>)
    f984:	9303      	str	r3, [sp, #12]
    f986:	4b37      	ldr	r3, [pc, #220]	; (fa64 <nvs_gc+0x1c8>)
    f988:	9302      	str	r3, [sp, #8]
    f98a:	2300      	movs	r3, #0
    f98c:	4618      	mov	r0, r3
    f98e:	e9cd 3200 	strd	r3, r2, [sp]
    f992:	2204      	movs	r2, #4
    f994:	f016 fda9 	bl	264ea <z_log_msg_runtime_create.constprop.0>
			data_addr += gc_ate.offset;
    f998:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    f99c:	ea4f 431a 	mov.w	r3, sl, lsr #16
    f9a0:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    f9a2:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f9a4:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    f9a6:	a80e      	add	r0, sp, #56	; 0x38
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f9a8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			nvs_ate_crc8_update(&gc_ate);
    f9ac:	f016 fd6f 	bl	2648e <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    f9b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    f9b2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    f9b6:	681e      	ldr	r6, [r3, #0]
    f9b8:	4276      	negs	r6, r6
	block_size =
    f9ba:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    f9be:	f1b9 0f00 	cmp.w	r9, #0
    f9c2:	d10e      	bne.n	f9e2 <nvs_gc+0x146>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    f9c4:	4620      	mov	r0, r4
    f9c6:	a90e      	add	r1, sp, #56	; 0x38
    f9c8:	f016 fe65 	bl	26696 <nvs_flash_ate_wrt>
			if (rc) {
    f9cc:	4602      	mov	r2, r0
    f9ce:	2800      	cmp	r0, #0
    f9d0:	d0b2      	beq.n	f938 <nvs_gc+0x9c>
    f9d2:	e03e      	b.n	fa52 <nvs_gc+0x1b6>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    f9d4:	4620      	mov	r0, r4
    f9d6:	a910      	add	r1, sp, #64	; 0x40
    f9d8:	f016 fda1 	bl	2651e <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    f9dc:	2800      	cmp	r0, #0
    f9de:	d0c0      	beq.n	f962 <nvs_gc+0xc6>
    f9e0:	e7c3      	b.n	f96a <nvs_gc+0xce>
		bytes_to_copy = MIN(block_size, len);
    f9e2:	454e      	cmp	r6, r9
    f9e4:	46b0      	mov	r8, r6
    f9e6:	bf28      	it	cs
    f9e8:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    f9ea:	aa12      	add	r2, sp, #72	; 0x48
    f9ec:	4643      	mov	r3, r8
    f9ee:	4639      	mov	r1, r7
    f9f0:	4620      	mov	r0, r4
    f9f2:	f016 fd07 	bl	26404 <nvs_flash_rd>
		if (rc) {
    f9f6:	4602      	mov	r2, r0
    f9f8:	bb58      	cbnz	r0, fa52 <nvs_gc+0x1b6>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f9fa:	4643      	mov	r3, r8
    f9fc:	68a1      	ldr	r1, [r4, #8]
    f9fe:	aa12      	add	r2, sp, #72	; 0x48
    fa00:	4620      	mov	r0, r4
    fa02:	f016 fe0e 	bl	26622 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    fa06:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    fa08:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    fa0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fa0c:	f016 fd7d 	bl	2650a <nvs_al_size.isra.0>
    fa10:	68a3      	ldr	r3, [r4, #8]
    fa12:	4403      	add	r3, r0
    fa14:	60a3      	str	r3, [r4, #8]
		if (rc) {
    fa16:	b9e2      	cbnz	r2, fa52 <nvs_gc+0x1b6>
		len -= bytes_to_copy;
    fa18:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    fa1c:	4447      	add	r7, r8
    fa1e:	e7ce      	b.n	f9be <nvs_gc+0x122>
		rc = nvs_add_gc_done_ate(fs);
    fa20:	4620      	mov	r0, r4
    fa22:	f7ff ff0f 	bl	f844 <nvs_add_gc_done_ate>
		if (rc) {
    fa26:	4602      	mov	r2, r0
    fa28:	2800      	cmp	r0, #0
    fa2a:	f43f af69 	beq.w	f900 <nvs_gc+0x64>
    fa2e:	e010      	b.n	fa52 <nvs_gc+0x1b6>
	stop_addr = gc_addr - ate_size;
    fa30:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fa32:	4620      	mov	r0, r4
    fa34:	a90c      	add	r1, sp, #48	; 0x30
	stop_addr = gc_addr - ate_size;
    fa36:	9307      	str	r3, [sp, #28]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fa38:	f016 fd8b 	bl	26552 <nvs_close_ate_valid>
    fa3c:	2800      	cmp	r0, #0
    fa3e:	f47f af65 	bne.w	f90c <nvs_gc+0x70>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    fa42:	4620      	mov	r0, r4
    fa44:	a90a      	add	r1, sp, #40	; 0x28
    fa46:	f7ff feb5 	bl	f7b4 <nvs_recover_last_ate>
		if (rc) {
    fa4a:	4602      	mov	r2, r0
    fa4c:	2800      	cmp	r0, #0
    fa4e:	f43f af63 	beq.w	f918 <nvs_gc+0x7c>
		return rc;
	}
	return 0;
}
    fa52:	4610      	mov	r0, r2
    fa54:	b01b      	add	sp, #108	; 0x6c
    fa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa5a:	bf00      	nop
    fa5c:	0002e53a 	.word	0x0002e53a
    fa60:	0002c10c 	.word	0x0002c10c
    fa64:	0002e3f8 	.word	0x0002e3f8

0000fa68 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    fa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa6c:	4604      	mov	r4, r0
    fa6e:	b08e      	sub	sp, #56	; 0x38

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    fa70:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    fa74:	4638      	mov	r0, r7
    fa76:	f01a ff6f 	bl	2a958 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    fa7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    fa7c:	6883      	ldr	r3, [r0, #8]
    fa7e:	68db      	ldr	r3, [r3, #12]
    fa80:	4798      	blx	r3
    fa82:	4603      	mov	r3, r0
    fa84:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    fa86:	b930      	cbnz	r0, fa96 <nvs_mount+0x2e>
		LOG_ERR("Could not obtain flash parameters");
    fa88:	4a90      	ldr	r2, [pc, #576]	; (fccc <nvs_mount+0x264>)
    fa8a:	9000      	str	r0, [sp, #0]
    fa8c:	e9cd 0201 	strd	r0, r2, [sp, #4]
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    fa90:	2201      	movs	r2, #1
    fa92:	498f      	ldr	r1, [pc, #572]	; (fcd0 <nvs_mount+0x268>)
    fa94:	e00f      	b.n	fab6 <nvs_mount+0x4e>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    fa96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    fa98:	6883      	ldr	r3, [r0, #8]
    fa9a:	68db      	ldr	r3, [r3, #12]
    fa9c:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    fa9e:	6803      	ldr	r3, [r0, #0]
    faa0:	3b01      	subs	r3, #1
    faa2:	2b1f      	cmp	r3, #31
    faa4:	d90f      	bls.n	fac6 <nvs_mount+0x5e>
		LOG_ERR("Unsupported write block size");
    faa6:	4b8b      	ldr	r3, [pc, #556]	; (fcd4 <nvs_mount+0x26c>)
    faa8:	9302      	str	r3, [sp, #8]
    faaa:	2300      	movs	r3, #0
    faac:	2201      	movs	r2, #1
    faae:	4618      	mov	r0, r3
    fab0:	e9cd 3300 	strd	r3, r3, [sp]
    fab4:	4986      	ldr	r1, [pc, #536]	; (fcd0 <nvs_mount+0x268>)
    fab6:	f016 fd18 	bl	264ea <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    faba:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    fabe:	4628      	mov	r0, r5
    fac0:	b00e      	add	sp, #56	; 0x38
    fac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    fac6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fac8:	6821      	ldr	r1, [r4, #0]
    faca:	aa0b      	add	r2, sp, #44	; 0x2c
    facc:	f019 fd89 	bl	295e2 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    fad0:	b108      	cbz	r0, fad6 <nvs_mount+0x6e>
		LOG_ERR("Unable to get page info");
    fad2:	4b81      	ldr	r3, [pc, #516]	; (fcd8 <nvs_mount+0x270>)
    fad4:	e7e8      	b.n	faa8 <nvs_mount+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    fad6:	89a5      	ldrh	r5, [r4, #12]
    fad8:	b12d      	cbz	r5, fae6 <nvs_mount+0x7e>
    fada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fadc:	fbb5 f2f3 	udiv	r2, r5, r3
    fae0:	fb03 5512 	mls	r5, r3, r2, r5
    fae4:	b10d      	cbz	r5, faea <nvs_mount+0x82>
		LOG_ERR("Invalid sector size");
    fae6:	4b7d      	ldr	r3, [pc, #500]	; (fcdc <nvs_mount+0x274>)
    fae8:	e7de      	b.n	faa8 <nvs_mount+0x40>
	if (fs->sector_count < 2) {
    faea:	89e3      	ldrh	r3, [r4, #14]
    faec:	2b01      	cmp	r3, #1
    faee:	d805      	bhi.n	fafc <nvs_mount+0x94>
		LOG_ERR("Configuration error - sector count");
    faf0:	4b7b      	ldr	r3, [pc, #492]	; (fce0 <nvs_mount+0x278>)
    faf2:	9500      	str	r5, [sp, #0]
    faf4:	e9cd 5301 	strd	r5, r3, [sp, #4]
    faf8:	462b      	mov	r3, r5
    fafa:	e7c9      	b.n	fa90 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    fafc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    fafe:	9506      	str	r5, [sp, #24]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    fb00:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    fb04:	f04f 33ff 	mov.w	r3, #4294967295
    fb08:	f04f 32ff 	mov.w	r2, #4294967295
    fb0c:	4638      	mov	r0, r7
    fb0e:	f010 fe89 	bl	20824 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fb12:	2108      	movs	r1, #8
    fb14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fb16:	f016 fcf8 	bl	2650a <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    fb1a:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fb1c:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    fb1e:	89e3      	ldrh	r3, [r4, #14]
    fb20:	fa1f fa85 	uxth.w	sl, r5
    fb24:	4553      	cmp	r3, sl
    fb26:	d808      	bhi.n	fb3a <nvs_mount+0xd2>
	if (closed_sectors == fs->sector_count) {
    fb28:	89e3      	ldrh	r3, [r4, #14]
    fb2a:	4543      	cmp	r3, r8
    fb2c:	d123      	bne.n	fb76 <nvs_mount+0x10e>
	return z_impl_k_mutex_unlock(mutex);
    fb2e:	4638      	mov	r0, r7
    fb30:	f010 ff48 	bl	209c4 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    fb34:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    fb38:	e7c1      	b.n	fabe <nvs_mount+0x56>
		       (uint16_t)(fs->sector_size - ate_size);
    fb3a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    fb3c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    fb3e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    fb40:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fb44:	464a      	mov	r2, r9
    fb46:	2308      	movs	r3, #8
    fb48:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    fb4a:	9106      	str	r1, [sp, #24]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fb4c:	f016 fca8 	bl	264a0 <nvs_flash_cmp_const>
		if (rc) {
    fb50:	b178      	cbz	r0, fb72 <nvs_mount+0x10a>
			nvs_sector_advance(fs, &addr);
    fb52:	4620      	mov	r0, r4
    fb54:	a906      	add	r1, sp, #24
    fb56:	f016 fc63 	bl	26420 <nvs_sector_advance>
			closed_sectors++;
    fb5a:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fb5e:	2308      	movs	r3, #8
    fb60:	464a      	mov	r2, r9
    fb62:	4620      	mov	r0, r4
    fb64:	9906      	ldr	r1, [sp, #24]
			closed_sectors++;
    fb66:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fb6a:	f016 fc99 	bl	264a0 <nvs_flash_cmp_const>
			if (!rc) {
    fb6e:	2800      	cmp	r0, #0
    fb70:	d0da      	beq.n	fb28 <nvs_mount+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    fb72:	3501      	adds	r5, #1
    fb74:	e7d3      	b.n	fb1e <nvs_mount+0xb6>
	if (i == fs->sector_count) {
    fb76:	4553      	cmp	r3, sl
    fb78:	d10b      	bne.n	fb92 <nvs_mount+0x12a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    fb7a:	9906      	ldr	r1, [sp, #24]
    fb7c:	2308      	movs	r3, #8
    fb7e:	464a      	mov	r2, r9
    fb80:	4620      	mov	r0, r4
    fb82:	1b89      	subs	r1, r1, r6
    fb84:	f016 fc8c 	bl	264a0 <nvs_flash_cmp_const>
		if (!rc) {
    fb88:	b918      	cbnz	r0, fb92 <nvs_mount+0x12a>
			nvs_sector_advance(fs, &addr);
    fb8a:	4620      	mov	r0, r4
    fb8c:	a906      	add	r1, sp, #24
    fb8e:	f016 fc47 	bl	26420 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    fb92:	4620      	mov	r0, r4
    fb94:	a906      	add	r1, sp, #24
    fb96:	f7ff fe0d 	bl	f7b4 <nvs_recover_last_ate>
	if (rc) {
    fb9a:	4605      	mov	r5, r0
    fb9c:	b118      	cbz	r0, fba6 <nvs_mount+0x13e>
    fb9e:	4638      	mov	r0, r7
    fba0:	f010 ff10 	bl	209c4 <z_impl_k_mutex_unlock>
	if (rc) {
    fba4:	e78b      	b.n	fabe <nvs_mount+0x56>
	fs->ate_wra = addr;
    fba6:	9b06      	ldr	r3, [sp, #24]
	fs->data_wra = addr & ADDR_SECT_MASK;
    fba8:	ea4f 4813 	mov.w	r8, r3, lsr #16
    fbac:	ea4f 4808 	mov.w	r8, r8, lsl #16
	fs->ate_wra = addr;
    fbb0:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    fbb2:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    fbb6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    fbba:	4299      	cmp	r1, r3
    fbbc:	d30f      	bcc.n	fbde <nvs_mount+0x176>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fbbe:	2308      	movs	r3, #8
    fbc0:	4620      	mov	r0, r4
    fbc2:	aa07      	add	r2, sp, #28
    fbc4:	f016 fc1e 	bl	26404 <nvs_flash_rd>
		if (rc) {
    fbc8:	4605      	mov	r5, r0
    fbca:	2800      	cmp	r0, #0
    fbcc:	d1e7      	bne.n	fb9e <nvs_mount+0x136>
    fbce:	ab07      	add	r3, sp, #28
		if (data8[i] != value) {
    fbd0:	f813 2b01 	ldrb.w	r2, [r3], #1
    fbd4:	4591      	cmp	r9, r2
    fbd6:	d143      	bne.n	fc60 <nvs_mount+0x1f8>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fbd8:	3501      	adds	r5, #1
    fbda:	2d08      	cmp	r5, #8
    fbdc:	d1f8      	bne.n	fbd0 <nvs_mount+0x168>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fbde:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    fbe0:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fbe2:	0c1b      	lsrs	r3, r3, #16
    fbe4:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    fbe6:	a906      	add	r1, sp, #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fbe8:	9306      	str	r3, [sp, #24]
	nvs_sector_advance(fs, &addr);
    fbea:	f016 fc19 	bl	26420 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    fbee:	464a      	mov	r2, r9
    fbf0:	4620      	mov	r0, r4
    fbf2:	89a3      	ldrh	r3, [r4, #12]
    fbf4:	9906      	ldr	r1, [sp, #24]
    fbf6:	f016 fc53 	bl	264a0 <nvs_flash_cmp_const>
	if (rc < 0) {
    fbfa:	1e05      	subs	r5, r0, #0
    fbfc:	dbcf      	blt.n	fb9e <nvs_mount+0x136>
		addr = fs->ate_wra + ate_size;
    fbfe:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    fc00:	f000 8082 	beq.w	fd08 <nvs_mount+0x2a0>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    fc04:	f64f 79ff 	movw	r9, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    fc08:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    fc0c:	89a3      	ldrh	r3, [r4, #12]
    fc0e:	fa1f f288 	uxth.w	r2, r8
    fc12:	1b9b      	subs	r3, r3, r6
    fc14:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    fc16:	f8cd 8018 	str.w	r8, [sp, #24]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    fc1a:	d33d      	bcc.n	fc98 <nvs_mount+0x230>
		LOG_INF("No GC Done marker found: restarting gc");
    fc1c:	4b31      	ldr	r3, [pc, #196]	; (fce4 <nvs_mount+0x27c>)
    fc1e:	2203      	movs	r2, #3
    fc20:	9302      	str	r3, [sp, #8]
    fc22:	2300      	movs	r3, #0
    fc24:	492a      	ldr	r1, [pc, #168]	; (fcd0 <nvs_mount+0x268>)
    fc26:	4618      	mov	r0, r3
    fc28:	e9cd 3300 	strd	r3, r3, [sp]
    fc2c:	f016 fc5d 	bl	264ea <z_log_msg_runtime_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    fc30:	4620      	mov	r0, r4
    fc32:	6861      	ldr	r1, [r4, #4]
    fc34:	f7ff fd8a 	bl	f74c <nvs_flash_erase_sector>
		if (rc) {
    fc38:	4605      	mov	r5, r0
    fc3a:	2800      	cmp	r0, #0
    fc3c:	d1af      	bne.n	fb9e <nvs_mount+0x136>
		fs->ate_wra &= ADDR_SECT_MASK;
    fc3e:	6863      	ldr	r3, [r4, #4]
    fc40:	4a29      	ldr	r2, [pc, #164]	; (fce8 <nvs_mount+0x280>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    fc42:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    fc44:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    fc46:	440b      	add	r3, r1
    fc48:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    fc4c:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    fc4e:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    fc50:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    fc52:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    fc54:	f7ff fe22 	bl	f89c <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    fc58:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fc5a:	2d00      	cmp	r5, #0
    fc5c:	d070      	beq.n	fd40 <nvs_mount+0x2d8>
    fc5e:	e79e      	b.n	fb9e <nvs_mount+0x136>
		if (nvs_ate_valid(fs, &last_ate)) {
    fc60:	4620      	mov	r0, r4
    fc62:	a907      	add	r1, sp, #28
    fc64:	f016 fc5b 	bl	2651e <nvs_ate_valid>
    fc68:	6862      	ldr	r2, [r4, #4]
    fc6a:	b910      	cbnz	r0, fc72 <nvs_mount+0x20a>
		fs->ate_wra -= ate_size;
    fc6c:	1b92      	subs	r2, r2, r6
    fc6e:	6062      	str	r2, [r4, #4]
    fc70:	e7a1      	b.n	fbb6 <nvs_mount+0x14e>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fc72:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    fc76:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    fc7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    fc7c:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fc80:	4429      	add	r1, r5
    fc82:	f016 fc42 	bl	2650a <nvs_al_size.isra.0>
    fc86:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    fc88:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fc8a:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    fc8c:	d1ee      	bne.n	fc6c <nvs_mount+0x204>
    fc8e:	2d00      	cmp	r5, #0
    fc90:	d0ec      	beq.n	fc6c <nvs_mount+0x204>
				rc = -ESPIPE;
    fc92:	f06f 051c 	mvn.w	r5, #28
    fc96:	e090      	b.n	fdba <nvs_mount+0x352>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fc98:	2308      	movs	r3, #8
    fc9a:	4641      	mov	r1, r8
    fc9c:	4620      	mov	r0, r4
    fc9e:	aa09      	add	r2, sp, #36	; 0x24
    fca0:	f016 fbb0 	bl	26404 <nvs_flash_rd>
			if (rc) {
    fca4:	4605      	mov	r5, r0
    fca6:	2800      	cmp	r0, #0
    fca8:	f47f af79 	bne.w	fb9e <nvs_mount+0x136>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    fcac:	4620      	mov	r0, r4
    fcae:	a909      	add	r1, sp, #36	; 0x24
    fcb0:	f016 fc35 	bl	2651e <nvs_ate_valid>
    fcb4:	b138      	cbz	r0, fcc6 <nvs_mount+0x25e>
    fcb6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    fcba:	454b      	cmp	r3, r9
    fcbc:	d103      	bne.n	fcc6 <nvs_mount+0x25e>
			    (gc_done_ate.id == 0xffff) &&
    fcbe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d07f      	beq.n	fdc6 <nvs_mount+0x35e>
			addr += ate_size;
    fcc6:	44b0      	add	r8, r6
    fcc8:	e7a0      	b.n	fc0c <nvs_mount+0x1a4>
    fcca:	bf00      	nop
    fccc:	0002e422 	.word	0x0002e422
    fcd0:	0002c10c 	.word	0x0002c10c
    fcd4:	0002e444 	.word	0x0002e444
    fcd8:	0002e461 	.word	0x0002e461
    fcdc:	0002e479 	.word	0x0002e479
    fce0:	0002e48d 	.word	0x0002e48d
    fce4:	0002e4ea 	.word	0x0002e4ea
    fce8:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    fcec:	464a      	mov	r2, r9
    fcee:	4620      	mov	r0, r4
    fcf0:	1a5b      	subs	r3, r3, r1
    fcf2:	f016 fbd5 	bl	264a0 <nvs_flash_cmp_const>
		if (rc < 0) {
    fcf6:	1e05      	subs	r5, r0, #0
    fcf8:	f6ff af51 	blt.w	fb9e <nvs_mount+0x136>
		if (!rc) {
    fcfc:	d008      	beq.n	fd10 <nvs_mount+0x2a8>
		fs->data_wra += fs->flash_parameters->write_block_size;
    fcfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    fd00:	68a3      	ldr	r3, [r4, #8]
    fd02:	6812      	ldr	r2, [r2, #0]
    fd04:	4413      	add	r3, r2
    fd06:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    fd08:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    fd0c:	428b      	cmp	r3, r1
    fd0e:	d8ed      	bhi.n	fcec <nvs_mount+0x284>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    fd10:	6861      	ldr	r1, [r4, #4]
    fd12:	89a3      	ldrh	r3, [r4, #12]
    fd14:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    fd18:	429a      	cmp	r2, r3
    fd1a:	d19e      	bne.n	fc5a <nvs_mount+0x1f2>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    fd1c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; fdf4 <nvs_mount+0x38c>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    fd20:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    fd22:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    fd26:	429a      	cmp	r2, r3
    fd28:	d097      	beq.n	fc5a <nvs_mount+0x1f2>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    fd2a:	4620      	mov	r0, r4
    fd2c:	f7ff fd0e 	bl	f74c <nvs_flash_erase_sector>
		if (rc) {
    fd30:	4605      	mov	r5, r0
    fd32:	2800      	cmp	r0, #0
    fd34:	f47f af33 	bne.w	fb9e <nvs_mount+0x136>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    fd38:	6863      	ldr	r3, [r4, #4]
    fd3a:	ea03 0308 	and.w	r3, r3, r8
    fd3e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    fd40:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fd42:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    fd44:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fd48:	429a      	cmp	r2, r3
    fd4a:	d032      	beq.n	fdb2 <nvs_mount+0x34a>
    fd4c:	4638      	mov	r0, r7
    fd4e:	f010 fe39 	bl	209c4 <z_impl_k_mutex_unlock>
	fs->ready = true;
    fd52:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    fd54:	2500      	movs	r5, #0
	fs->ready = true;
    fd56:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    fd58:	89a3      	ldrh	r3, [r4, #12]
    fd5a:	4628      	mov	r0, r5
    fd5c:	9304      	str	r3, [sp, #16]
    fd5e:	89e3      	ldrh	r3, [r4, #14]
    fd60:	2203      	movs	r2, #3
    fd62:	9303      	str	r3, [sp, #12]
    fd64:	4b24      	ldr	r3, [pc, #144]	; (fdf8 <nvs_mount+0x390>)
    fd66:	e9cd 5500 	strd	r5, r5, [sp]
    fd6a:	9302      	str	r3, [sp, #8]
    fd6c:	4923      	ldr	r1, [pc, #140]	; (fdfc <nvs_mount+0x394>)
    fd6e:	462b      	mov	r3, r5
    fd70:	f016 fbbb 	bl	264ea <z_log_msg_runtime_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
    fd74:	6863      	ldr	r3, [r4, #4]
    fd76:	4628      	mov	r0, r5
    fd78:	b29a      	uxth	r2, r3
    fd7a:	0c1b      	lsrs	r3, r3, #16
    fd7c:	9303      	str	r3, [sp, #12]
    fd7e:	4b20      	ldr	r3, [pc, #128]	; (fe00 <nvs_mount+0x398>)
    fd80:	9204      	str	r2, [sp, #16]
    fd82:	e9cd 5301 	strd	r5, r3, [sp, #4]
    fd86:	2203      	movs	r2, #3
    fd88:	462b      	mov	r3, r5
    fd8a:	491c      	ldr	r1, [pc, #112]	; (fdfc <nvs_mount+0x394>)
    fd8c:	9500      	str	r5, [sp, #0]
    fd8e:	f016 fbac 	bl	264ea <z_log_msg_runtime_create.constprop.0>
	LOG_INF("data wra: %d, %x",
    fd92:	68a3      	ldr	r3, [r4, #8]
    fd94:	4628      	mov	r0, r5
    fd96:	b29a      	uxth	r2, r3
    fd98:	0c1b      	lsrs	r3, r3, #16
    fd9a:	9303      	str	r3, [sp, #12]
    fd9c:	4b19      	ldr	r3, [pc, #100]	; (fe04 <nvs_mount+0x39c>)
    fd9e:	9204      	str	r2, [sp, #16]
    fda0:	e9cd 5301 	strd	r5, r3, [sp, #4]
    fda4:	2203      	movs	r2, #3
    fda6:	462b      	mov	r3, r5
    fda8:	4914      	ldr	r1, [pc, #80]	; (fdfc <nvs_mount+0x394>)
    fdaa:	9500      	str	r5, [sp, #0]
    fdac:	f016 fb9d 	bl	264ea <z_log_msg_runtime_create.constprop.0>
	return 0;
    fdb0:	e685      	b.n	fabe <nvs_mount+0x56>
		rc = nvs_add_gc_done_ate(fs);
    fdb2:	4620      	mov	r0, r4
    fdb4:	f7ff fd46 	bl	f844 <nvs_add_gc_done_ate>
    fdb8:	4605      	mov	r5, r0
    fdba:	4638      	mov	r0, r7
    fdbc:	f010 fe02 	bl	209c4 <z_impl_k_mutex_unlock>
	if (rc) {
    fdc0:	2d00      	cmp	r5, #0
    fdc2:	d0c6      	beq.n	fd52 <nvs_mount+0x2ea>
    fdc4:	e67b      	b.n	fabe <nvs_mount+0x56>
			LOG_INF("GC Done marker found");
    fdc6:	4b10      	ldr	r3, [pc, #64]	; (fe08 <nvs_mount+0x3a0>)
    fdc8:	2203      	movs	r2, #3
    fdca:	4628      	mov	r0, r5
    fdcc:	e9cd 5301 	strd	r5, r3, [sp, #4]
    fdd0:	490a      	ldr	r1, [pc, #40]	; (fdfc <nvs_mount+0x394>)
    fdd2:	462b      	mov	r3, r5
    fdd4:	9500      	str	r5, [sp, #0]
    fdd6:	f016 fb88 	bl	264ea <z_log_msg_runtime_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    fdda:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    fddc:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    fdde:	0c1b      	lsrs	r3, r3, #16
    fde0:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    fde2:	a906      	add	r1, sp, #24
			addr = fs->ate_wra & ADDR_SECT_MASK;
    fde4:	9306      	str	r3, [sp, #24]
			nvs_sector_advance(fs, &addr);
    fde6:	f016 fb1b 	bl	26420 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    fdea:	4620      	mov	r0, r4
    fdec:	9906      	ldr	r1, [sp, #24]
    fdee:	f7ff fcad 	bl	f74c <nvs_flash_erase_sector>
    fdf2:	e731      	b.n	fc58 <nvs_mount+0x1f0>
    fdf4:	ffff0000 	.word	0xffff0000
    fdf8:	0002e4b0 	.word	0x0002e4b0
    fdfc:	0002c10c 	.word	0x0002c10c
    fe00:	0002e4c7 	.word	0x0002e4c7
    fe04:	0002e4d9 	.word	0x0002e4d9
    fe08:	0002e511 	.word	0x0002e511

0000fe0c <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    fe0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe10:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    fe12:	7c03      	ldrb	r3, [r0, #16]
{
    fe14:	4604      	mov	r4, r0
    fe16:	4689      	mov	r9, r1
    fe18:	4690      	mov	r8, r2
    fe1a:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    fe1c:	b973      	cbnz	r3, fe3c <nvs_write+0x30>
		LOG_ERR("NVS not initialized");
    fe1e:	4a66      	ldr	r2, [pc, #408]	; (ffb8 <nvs_write+0x1ac>)
    fe20:	4618      	mov	r0, r3
    fe22:	e9cd 3201 	strd	r3, r2, [sp, #4]
    fe26:	4965      	ldr	r1, [pc, #404]	; (ffbc <nvs_write+0x1b0>)
    fe28:	2201      	movs	r2, #1
    fe2a:	9300      	str	r3, [sp, #0]
    fe2c:	f016 fb5d 	bl	264ea <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    fe30:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    fe34:	4630      	mov	r0, r6
    fe36:	b00d      	add	sp, #52	; 0x34
    fe38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fe3c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    fe3e:	2108      	movs	r1, #8
    fe40:	4610      	mov	r0, r2
    fe42:	f016 fb62 	bl	2650a <nvs_al_size.isra.0>
    fe46:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    fe48:	4629      	mov	r1, r5
    fe4a:	4610      	mov	r0, r2
    fe4c:	f016 fb5d 	bl	2650a <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    fe50:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    fe52:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    fe54:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    fe58:	42ab      	cmp	r3, r5
    fe5a:	f0c0 80a9 	bcc.w	ffb0 <nvs_write+0x1a4>
    fe5e:	b11d      	cbz	r5, fe68 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
    fe60:	f1b8 0f00 	cmp.w	r8, #0
    fe64:	f000 80a4 	beq.w	ffb0 <nvs_write+0x1a4>
	wlk_addr = fs->ate_wra;
    fe68:	6863      	ldr	r3, [r4, #4]
    fe6a:	9307      	str	r3, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fe6c:	4620      	mov	r0, r4
    fe6e:	aa08      	add	r2, sp, #32
    fe70:	a907      	add	r1, sp, #28
		rd_addr = wlk_addr;
    fe72:	f8dd b01c 	ldr.w	fp, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fe76:	f016 fb8a 	bl	2658e <nvs_prev_ate>
		if (rc) {
    fe7a:	4606      	mov	r6, r0
    fe7c:	2800      	cmp	r0, #0
    fe7e:	d1d9      	bne.n	fe34 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    fe80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    fe84:	454b      	cmp	r3, r9
    fe86:	d005      	beq.n	fe94 <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
    fe88:	6862      	ldr	r2, [r4, #4]
    fe8a:	9b07      	ldr	r3, [sp, #28]
    fe8c:	429a      	cmp	r2, r3
    fe8e:	d1ed      	bne.n	fe6c <nvs_write+0x60>
		if (len == 0) {
    fe90:	b9e5      	cbnz	r5, fecc <nvs_write+0xc0>
    fe92:	e7cf      	b.n	fe34 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    fe94:	4620      	mov	r0, r4
    fe96:	a908      	add	r1, sp, #32
    fe98:	f016 fb41 	bl	2651e <nvs_ate_valid>
    fe9c:	2800      	cmp	r0, #0
    fe9e:	d0f3      	beq.n	fe88 <nvs_write+0x7c>
		rd_addr += wlk_ate.offset;
    fea0:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
			if (wlk_ate.len == 0U) {
    fea4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
		if (len == 0) {
    fea8:	b175      	cbz	r5, fec8 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
    feaa:	42ab      	cmp	r3, r5
    feac:	d10e      	bne.n	fecc <nvs_write+0xc0>
		rd_addr &= ADDR_SECT_MASK;
    feae:	ea4f 411b 	mov.w	r1, fp, lsr #16
    feb2:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    feb4:	4401      	add	r1, r0
    feb6:	462b      	mov	r3, r5
    feb8:	4642      	mov	r2, r8
    feba:	4620      	mov	r0, r4
    febc:	f016 fabd 	bl	2643a <nvs_flash_block_cmp>
			if (rc <= 0) {
    fec0:	2800      	cmp	r0, #0
    fec2:	dc03      	bgt.n	fecc <nvs_write+0xc0>
    fec4:	4606      	mov	r6, r0
    fec6:	e7b5      	b.n	fe34 <nvs_write+0x28>
			if (wlk_ate.len == 0U) {
    fec8:	2b00      	cmp	r3, #0
    feca:	d0b3      	beq.n	fe34 <nvs_write+0x28>
	if (data_size) {
    fecc:	2f00      	cmp	r7, #0
    fece:	d13e      	bne.n	ff4e <nvs_write+0x142>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    fed0:	f104 0314 	add.w	r3, r4, #20
    fed4:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
    fed6:	f04f 32ff 	mov.w	r2, #4294967295
    feda:	f04f 33ff 	mov.w	r3, #4294967295
    fede:	f104 0014 	add.w	r0, r4, #20
    fee2:	f010 fc9f 	bl	20824 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    fee6:	f8df b0d8 	ldr.w	fp, [pc, #216]	; ffc0 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    feea:	89e3      	ldrh	r3, [r4, #14]
    feec:	429e      	cmp	r6, r3
    feee:	d05c      	beq.n	ffaa <nvs_write+0x19e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    fef0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    fef4:	18f9      	adds	r1, r7, r3
    fef6:	428a      	cmp	r2, r1
    fef8:	d32c      	bcc.n	ff54 <nvs_write+0x148>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fefa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	entry.part = 0xff;
    fefe:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    ff00:	a80a      	add	r0, sp, #40	; 0x28
	entry.part = 0xff;
    ff02:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	entry.id = id;
    ff06:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
	entry.len = (uint16_t)len;
    ff0a:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	nvs_ate_crc8_update(&entry);
    ff0e:	f016 fabe 	bl	2648e <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    ff12:	462b      	mov	r3, r5
    ff14:	4642      	mov	r2, r8
    ff16:	68a1      	ldr	r1, [r4, #8]
    ff18:	4620      	mov	r0, r4
    ff1a:	f016 fb82 	bl	26622 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    ff1e:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    ff20:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    ff22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ff24:	f016 faf1 	bl	2650a <nvs_al_size.isra.0>
    ff28:	68a2      	ldr	r2, [r4, #8]
    ff2a:	4402      	add	r2, r0
    ff2c:	60a2      	str	r2, [r4, #8]
	if (rc) {
    ff2e:	f1ba 0f00 	cmp.w	sl, #0
    ff32:	d107      	bne.n	ff44 <nvs_write+0x138>
	rc = nvs_flash_ate_wrt(fs, &entry);
    ff34:	4620      	mov	r0, r4
    ff36:	a90a      	add	r1, sp, #40	; 0x28
    ff38:	f016 fbad 	bl	26696 <nvs_flash_ate_wrt>
	rc = len;
    ff3c:	2800      	cmp	r0, #0
    ff3e:	bf14      	ite	ne
    ff40:	4682      	movne	sl, r0
    ff42:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    ff44:	9805      	ldr	r0, [sp, #20]
    ff46:	f010 fd3d 	bl	209c4 <z_impl_k_mutex_unlock>
	return rc;
    ff4a:	4656      	mov	r6, sl
    ff4c:	e772      	b.n	fe34 <nvs_write+0x28>
		required_space = data_size + ate_size;
    ff4e:	4457      	add	r7, sl
    ff50:	b2bf      	uxth	r7, r7
    ff52:	e7bd      	b.n	fed0 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ff54:	2108      	movs	r1, #8
    ff56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ff58:	f016 fad7 	bl	2650a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    ff5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ff60:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	close_ate.len = 0U;
    ff64:	2300      	movs	r3, #0
    ff66:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    ff6a:	1813      	adds	r3, r2, r0
    ff6c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	fs->ate_wra += (fs->sector_size - ate_size);
    ff70:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    ff72:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    ff76:	441a      	add	r2, r3
    ff78:	1a10      	subs	r0, r2, r0
    ff7a:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    ff7c:	a80a      	add	r0, sp, #40	; 0x28
    ff7e:	f016 fa86 	bl	2648e <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    ff82:	a90a      	add	r1, sp, #40	; 0x28
    ff84:	4620      	mov	r0, r4
    ff86:	f016 fb86 	bl	26696 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    ff8a:	4620      	mov	r0, r4
    ff8c:	1d21      	adds	r1, r4, #4
    ff8e:	f016 fa47 	bl	26420 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    ff92:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    ff94:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    ff96:	ea03 030b 	and.w	r3, r3, fp
    ff9a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    ff9c:	f7ff fc7e 	bl	f89c <nvs_gc>
		if (rc) {
    ffa0:	4682      	mov	sl, r0
    ffa2:	2800      	cmp	r0, #0
    ffa4:	d1ce      	bne.n	ff44 <nvs_write+0x138>
		gc_count++;
    ffa6:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    ffa8:	e79f      	b.n	feea <nvs_write+0xde>
			rc = -ENOSPC;
    ffaa:	f06f 0a1b 	mvn.w	sl, #27
    ffae:	e7c9      	b.n	ff44 <nvs_write+0x138>
		return -EINVAL;
    ffb0:	f06f 0615 	mvn.w	r6, #21
    ffb4:	e73e      	b.n	fe34 <nvs_write+0x28>
    ffb6:	bf00      	nop
    ffb8:	0002e40e 	.word	0x0002e40e
    ffbc:	0002c10c 	.word	0x0002c10c
    ffc0:	ffff0000 	.word	0xffff0000

0000ffc4 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    ffc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffc8:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    ffca:	7c03      	ldrb	r3, [r0, #16]
{
    ffcc:	b088      	sub	sp, #32
    ffce:	4604      	mov	r4, r0
    ffd0:	460f      	mov	r7, r1
    ffd2:	4690      	mov	r8, r2
    ffd4:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    ffd8:	b96b      	cbnz	r3, fff6 <nvs_read_hist+0x32>
		LOG_ERR("NVS not initialized");
    ffda:	4a2f      	ldr	r2, [pc, #188]	; (10098 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x98>)
    ffdc:	4618      	mov	r0, r3
    ffde:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ffe2:	492e      	ldr	r1, [pc, #184]	; (1009c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x9c>)
    ffe4:	2201      	movs	r2, #1
    ffe6:	9300      	str	r3, [sp, #0]
    ffe8:	f016 fa7f 	bl	264ea <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    ffec:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    fff0:	b008      	add	sp, #32
    fff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fff6:	2108      	movs	r1, #8
    fff8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fffa:	f016 fa86 	bl	2650a <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    fffe:	89a3      	ldrh	r3, [r4, #12]
   10000:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   10004:	42b3      	cmp	r3, r6
   10006:	d343      	bcc.n	10090 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x90>
	cnt_his = 0U;
   10008:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
   1000a:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1000e:	f8cd a014 	str.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   10012:	454d      	cmp	r5, r9
   10014:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   10016:	f8dd a014 	ldr.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   1001a:	d909      	bls.n	10030 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x30>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1001c:	6863      	ldr	r3, [r4, #4]
   1001e:	4553      	cmp	r3, sl
   10020:	d11e      	bne.n	10060 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x60>
   10022:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10026:	42bb      	cmp	r3, r7
   10028:	d01a      	beq.n	10060 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x60>
		return -ENOENT;
   1002a:	f06f 0001 	mvn.w	r0, #1
   1002e:	e7df      	b.n	fff0 <nvs_read_hist+0x2c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   10030:	4620      	mov	r0, r4
   10032:	aa06      	add	r2, sp, #24
   10034:	a905      	add	r1, sp, #20
   10036:	f016 faaa 	bl	2658e <nvs_prev_ate>
		if (rc) {
   1003a:	2800      	cmp	r0, #0
   1003c:	d1d8      	bne.n	fff0 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   1003e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10042:	42bb      	cmp	r3, r7
   10044:	d106      	bne.n	10054 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x54>
   10046:	4620      	mov	r0, r4
   10048:	a906      	add	r1, sp, #24
   1004a:	f016 fa68 	bl	2651e <nvs_ate_valid>
   1004e:	b108      	cbz	r0, 10054 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x54>
			cnt_his++;
   10050:	3501      	adds	r5, #1
   10052:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   10054:	6862      	ldr	r2, [r4, #4]
   10056:	9b05      	ldr	r3, [sp, #20]
   10058:	429a      	cmp	r2, r3
   1005a:	d1da      	bne.n	10012 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x12>
		rd_addr = wlk_addr;
   1005c:	4651      	mov	r1, sl
   1005e:	e7e0      	b.n	10022 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x22>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   10060:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   10064:	2b00      	cmp	r3, #0
   10066:	d0e0      	beq.n	1002a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   10068:	45a9      	cmp	r9, r5
   1006a:	d8de      	bhi.n	1002a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a>
	rd_addr += wlk_ate.offset;
   1006c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	rd_addr &= ADDR_SECT_MASK;
   10070:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   10072:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   10074:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   10078:	bf28      	it	cs
   1007a:	4633      	movcs	r3, r6
   1007c:	4401      	add	r1, r0
   1007e:	4642      	mov	r2, r8
   10080:	4620      	mov	r0, r4
   10082:	f016 f9bf 	bl	26404 <nvs_flash_rd>
	if (rc) {
   10086:	2800      	cmp	r0, #0
   10088:	d1b2      	bne.n	fff0 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   1008a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   1008e:	e7af      	b.n	fff0 <nvs_read_hist+0x2c>
		return -EINVAL;
   10090:	f06f 0015 	mvn.w	r0, #21
   10094:	e7ac      	b.n	fff0 <nvs_read_hist+0x2c>
   10096:	bf00      	nop
   10098:	0002e40e 	.word	0x0002e40e
   1009c:	0002c10c 	.word	0x0002c10c

000100a0 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
   100a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   100a2:	4603      	mov	r3, r0
	const struct ipc_service_backend *backend;

	if (!instance) {
   100a4:	b960      	cbnz	r0, 100c0 <ipc_service_open_instance+0x20>
		LOG_ERR("Invalid instance");
   100a6:	4a11      	ldr	r2, [pc, #68]	; (100ec <ipc_service_open_instance+0x4c>)
   100a8:	9000      	str	r0, [sp, #0]
   100aa:	e9cd 0201 	strd	r0, r2, [sp, #4]
   100ae:	4910      	ldr	r1, [pc, #64]	; (100f0 <ipc_service_open_instance+0x50>)
   100b0:	2201      	movs	r2, #1
   100b2:	f016 fb08 	bl	266c6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   100b6:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
   100ba:	b005      	add	sp, #20
   100bc:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
   100c0:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
   100c2:	b95b      	cbnz	r3, 100dc <ipc_service_open_instance+0x3c>
		LOG_ERR("Invalid backend configuration");
   100c4:	4a0b      	ldr	r2, [pc, #44]	; (100f4 <ipc_service_open_instance+0x54>)
   100c6:	4618      	mov	r0, r3
   100c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   100cc:	4908      	ldr	r1, [pc, #32]	; (100f0 <ipc_service_open_instance+0x50>)
   100ce:	2201      	movs	r2, #1
   100d0:	9300      	str	r3, [sp, #0]
   100d2:	f016 faf8 	bl	266c6 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   100d6:	f06f 0004 	mvn.w	r0, #4
   100da:	e7ee      	b.n	100ba <ipc_service_open_instance+0x1a>
	if (!backend->open_instance) {
   100dc:	681b      	ldr	r3, [r3, #0]
   100de:	b11b      	cbz	r3, 100e8 <ipc_service_open_instance+0x48>
}
   100e0:	b005      	add	sp, #20
   100e2:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
   100e6:	4718      	bx	r3
		return 0;
   100e8:	4618      	mov	r0, r3
   100ea:	e7e6      	b.n	100ba <ipc_service_open_instance+0x1a>
   100ec:	0002e574 	.word	0x0002e574
   100f0:	0002c114 	.word	0x0002c114
   100f4:	0002e585 	.word	0x0002e585

000100f8 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
   100f8:	b530      	push	{r4, r5, lr}
   100fa:	b085      	sub	sp, #20
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
   100fc:	b108      	cbz	r0, 10102 <ipc_service_register_endpoint+0xa>
   100fe:	b101      	cbz	r1, 10102 <ipc_service_register_endpoint+0xa>
   10100:	b96a      	cbnz	r2, 1011e <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
   10102:	4b13      	ldr	r3, [pc, #76]	; (10150 <ipc_service_register_endpoint+0x58>)
   10104:	2201      	movs	r2, #1
   10106:	9302      	str	r3, [sp, #8]
   10108:	2300      	movs	r3, #0
   1010a:	4912      	ldr	r1, [pc, #72]	; (10154 <ipc_service_register_endpoint+0x5c>)
   1010c:	4618      	mov	r0, r3
   1010e:	e9cd 3300 	strd	r3, r3, [sp]
   10112:	f016 fad8 	bl	266c6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   10116:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
   1011a:	b005      	add	sp, #20
   1011c:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
   1011e:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
   10120:	b10c      	cbz	r4, 10126 <ipc_service_register_endpoint+0x2e>
   10122:	68e5      	ldr	r5, [r4, #12]
   10124:	b965      	cbnz	r5, 10140 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
   10126:	4b0c      	ldr	r3, [pc, #48]	; (10158 <ipc_service_register_endpoint+0x60>)
   10128:	2201      	movs	r2, #1
   1012a:	9302      	str	r3, [sp, #8]
   1012c:	2300      	movs	r3, #0
   1012e:	4909      	ldr	r1, [pc, #36]	; (10154 <ipc_service_register_endpoint+0x5c>)
   10130:	4618      	mov	r0, r3
   10132:	e9cd 3300 	strd	r3, r3, [sp]
   10136:	f016 fac6 	bl	266c6 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1013a:	f06f 0004 	mvn.w	r0, #4
   1013e:	e7ec      	b.n	1011a <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
   10140:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
   10144:	68e3      	ldr	r3, [r4, #12]
}
   10146:	b005      	add	sp, #20
   10148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
   1014c:	4718      	bx	r3
   1014e:	bf00      	nop
   10150:	0002e5a3 	.word	0x0002e5a3
   10154:	0002c114 	.word	0x0002c114
   10158:	0002e585 	.word	0x0002e585

0001015c <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
   1015c:	b530      	push	{r4, r5, lr}
   1015e:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
   10160:	4604      	mov	r4, r0
{
   10162:	b085      	sub	sp, #20
	if (!ept) {
   10164:	b960      	cbnz	r0, 10180 <ipc_service_send+0x24>
		LOG_ERR("Invalid endpoint");
   10166:	4b19      	ldr	r3, [pc, #100]	; (101cc <ipc_service_send+0x70>)
   10168:	9000      	str	r0, [sp, #0]
   1016a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1016e:	2201      	movs	r2, #1
   10170:	4603      	mov	r3, r0
   10172:	4917      	ldr	r1, [pc, #92]	; (101d0 <ipc_service_send+0x74>)
   10174:	f016 faa7 	bl	266c6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   10178:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
   1017c:	b005      	add	sp, #20
   1017e:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
   10180:	6800      	ldr	r0, [r0, #0]
   10182:	b958      	cbnz	r0, 1019c <ipc_service_send+0x40>
		LOG_ERR("Endpoint not registered\n");
   10184:	4b13      	ldr	r3, [pc, #76]	; (101d4 <ipc_service_send+0x78>)
   10186:	9000      	str	r0, [sp, #0]
   10188:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1018c:	2201      	movs	r2, #1
   1018e:	4603      	mov	r3, r0
   10190:	490f      	ldr	r1, [pc, #60]	; (101d0 <ipc_service_send+0x74>)
   10192:	f016 fa98 	bl	266c6 <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
   10196:	f06f 0001 	mvn.w	r0, #1
   1019a:	e7ef      	b.n	1017c <ipc_service_send+0x20>
	backend = ept->instance->api;
   1019c:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
   1019e:	b10a      	cbz	r2, 101a4 <ipc_service_send+0x48>
   101a0:	6895      	ldr	r5, [r2, #8]
   101a2:	b965      	cbnz	r5, 101be <ipc_service_send+0x62>
		LOG_ERR("Invalid backend configuration");
   101a4:	4b0c      	ldr	r3, [pc, #48]	; (101d8 <ipc_service_send+0x7c>)
   101a6:	2201      	movs	r2, #1
   101a8:	9302      	str	r3, [sp, #8]
   101aa:	2300      	movs	r3, #0
   101ac:	4908      	ldr	r1, [pc, #32]	; (101d0 <ipc_service_send+0x74>)
   101ae:	4618      	mov	r0, r3
   101b0:	e9cd 3300 	strd	r3, r3, [sp]
   101b4:	f016 fa87 	bl	266c6 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   101b8:	f06f 0004 	mvn.w	r0, #4
   101bc:	e7de      	b.n	1017c <ipc_service_send+0x20>
	return backend->send(ept->instance, ept->token, data, len);
   101be:	460a      	mov	r2, r1
   101c0:	46ac      	mov	ip, r5
   101c2:	6861      	ldr	r1, [r4, #4]
}
   101c4:	b005      	add	sp, #20
   101c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
   101ca:	4760      	bx	ip
   101cc:	0002e5cf 	.word	0x0002e5cf
   101d0:	0002c114 	.word	0x0002c114
   101d4:	0002e5e0 	.word	0x0002e5e0
   101d8:	0002e585 	.word	0x0002e585

000101dc <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
   101dc:	2000      	movs	r0, #0
   101de:	4b01      	ldr	r3, [pc, #4]	; (101e4 <shared_memory_prepare+0x8>)
   101e0:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
   101e2:	4770      	bx	lr
   101e4:	20070000 	.word	0x20070000

000101e8 <advertise_ept>:
{
   101e8:	b530      	push	{r4, r5, lr}
   101ea:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   101ec:	490e      	ldr	r1, [pc, #56]	; (10228 <advertise_ept+0x40>)
{
   101ee:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   101f0:	9102      	str	r1, [sp, #8]
   101f2:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
   101f6:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   101f8:	e9cd 3100 	strd	r3, r1, [sp]
   101fc:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   10200:	f04f 33ff 	mov.w	r3, #4294967295
   10204:	4620      	mov	r0, r4
   10206:	f00f fa91 	bl	1f72c <rpmsg_create_ept>
	if (err != 0) {
   1020a:	b950      	cbnz	r0, 10222 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
   1020c:	2301      	movs	r3, #1
   1020e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
   10212:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
   10216:	b123      	cbz	r3, 10222 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
   10218:	4620      	mov	r0, r4
}
   1021a:	b005      	add	sp, #20
   1021c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
   10220:	4718      	bx	r3
}
   10222:	b005      	add	sp, #20
   10224:	bd30      	pop	{r4, r5, pc}
   10226:	bf00      	nop
   10228:	000267d7 	.word	0x000267d7

0001022c <get_ept>:
{
   1022c:	b538      	push	{r3, r4, r5, lr}
   1022e:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   10230:	4611      	mov	r1, r2
{
   10232:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   10234:	f016 fad1 	bl	267da <get_ept_slot_with_name>
	if (ept != NULL) {
   10238:	4603      	mov	r3, r0
   1023a:	b938      	cbnz	r0, 1024c <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
   1023c:	4628      	mov	r0, r5
   1023e:	4904      	ldr	r1, [pc, #16]	; (10250 <get_ept+0x24>)
   10240:	f016 facb 	bl	267da <get_ept_slot_with_name>
   10244:	4603      	mov	r3, r0
	if (ept != NULL) {
   10246:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
   10248:	6023      	str	r3, [r4, #0]
}
   1024a:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   1024c:	2001      	movs	r0, #1
   1024e:	e7fb      	b.n	10248 <get_ept+0x1c>
   10250:	00030d21 	.word	0x00030d21

00010254 <open>:
{
   10254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10258:	2301      	movs	r3, #1
   1025a:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
   1025c:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   1025e:	6846      	ldr	r6, [r0, #4]
{
   10260:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
   10262:	f505 775b 	add.w	r7, r5, #876	; 0x36c
   10266:	e8d7 2fef 	ldaex	r2, [r7]
   1026a:	2a00      	cmp	r2, #0
   1026c:	d103      	bne.n	10276 <open+0x22>
   1026e:	e8c7 3fe1 	stlex	r1, r3, [r7]
   10272:	2900      	cmp	r1, #0
   10274:	d1f7      	bne.n	10266 <open+0x12>
   10276:	f040 80b8 	bne.w	103ea <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
   1027a:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   1027c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
   1027e:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   10280:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
   10282:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   10286:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
   1028a:	bf26      	itte	cs
   1028c:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
   10290:	fab3 f383 	clzcs	r3, r3
		return 0;
   10294:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
   10296:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
   1029a:	bf28      	it	cs
   1029c:	f1c3 0320 	rsbcs	r3, r3, #32
   102a0:	3b01      	subs	r3, #1
	if (num_desc == 0) {
   102a2:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
   102a4:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
   102a8:	f000 8099 	beq.w	103de <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
   102ac:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   102ae:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
   102b0:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
   102b2:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   102b4:	eb02 0244 	add.w	r2, r2, r4, lsl #1
   102b8:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   102ba:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
   102bc:	3209      	adds	r2, #9
   102be:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
   102c2:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
   102c4:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
   102c8:	440a      	add	r2, r1
	return (buf_size * num);
   102ca:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   102cc:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
   102d0:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
   102d2:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   102d6:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
   102da:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   102dc:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
   102de:	eb00 0341 	add.w	r3, r0, r1, lsl #1
   102e2:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
   102e6:	3303      	adds	r3, #3
   102e8:	4413      	add	r3, r2
   102ea:	f023 0303 	bic.w	r3, r3, #3
   102ee:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
   102f2:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
   102f4:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
   102f8:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
   102fc:	4b3c      	ldr	r3, [pc, #240]	; (103f0 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
   102fe:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
   10300:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
   10304:	6831      	ldr	r1, [r6, #0]
   10306:	f000 fa1d 	bl	10744 <ipc_static_vrings_init>
	if (err != 0) {
   1030a:	4604      	mov	r4, r0
   1030c:	bb30      	cbnz	r0, 1035c <open+0x108>
	const struct backend_config_t *conf = instance->config;
   1030e:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
   10312:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   10316:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
   1031a:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   1031e:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
   10320:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   10322:	bf08      	it	eq
   10324:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
   10326:	f011 f853 	bl	213d0 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
   1032a:	2300      	movs	r3, #0
   1032c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   10330:	4930      	ldr	r1, [pc, #192]	; (103f4 <open+0x1a0>)
   10332:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10336:	eb01 2180 	add.w	r1, r1, r0, lsl #10
   1033a:	9300      	str	r3, [sp, #0]
   1033c:	4658      	mov	r0, fp
   1033e:	4623      	mov	r3, r4
   10340:	f011 f860 	bl	21404 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
   10344:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
   10348:	492b      	ldr	r1, [pc, #172]	; (103f8 <open+0x1a4>)
   1034a:	f010 ff75 	bl	21238 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
   1034e:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
   10352:	6883      	ldr	r3, [r0, #8]
   10354:	685c      	ldr	r4, [r3, #4]
   10356:	b91c      	cbnz	r4, 10360 <open+0x10c>
		return -ENOSYS;
   10358:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
   1035c:	2100      	movs	r1, #0
   1035e:	e037      	b.n	103d0 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
   10360:	464b      	mov	r3, r9
   10362:	4a26      	ldr	r2, [pc, #152]	; (103fc <open+0x1a8>)
   10364:	f8da 1018 	ldr.w	r1, [sl, #24]
   10368:	47a0      	blx	r4
	if (err != 0) {
   1036a:	4604      	mov	r4, r0
   1036c:	2800      	cmp	r0, #0
   1036e:	d1f5      	bne.n	1035c <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
   10370:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
   10374:	6883      	ldr	r3, [r0, #8]
   10376:	691b      	ldr	r3, [r3, #16]
   10378:	2b00      	cmp	r3, #0
   1037a:	d0ed      	beq.n	10358 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
   1037c:	2201      	movs	r2, #1
   1037e:	f8da 1018 	ldr.w	r1, [sl, #24]
   10382:	4798      	blx	r3
	if (err != 0) {
   10384:	4604      	mov	r4, r0
   10386:	2800      	cmp	r0, #0
   10388:	d1e8      	bne.n	1035c <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
   1038a:	4b1d      	ldr	r3, [pc, #116]	; (10400 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   1038c:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
   1038e:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
   10392:	4b1c      	ldr	r3, [pc, #112]	; (10404 <open+0x1b0>)
   10394:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   10398:	4b1b      	ldr	r3, [pc, #108]	; (10408 <open+0x1b4>)
   1039a:	9303      	str	r3, [sp, #12]
   1039c:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
   103a0:	9302      	str	r3, [sp, #8]
   103a2:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
   103a6:	e9cd 8300 	strd	r8, r3, [sp]
   103aa:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
   103ae:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   103b0:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
   103b4:	f000 f98e 	bl	106d4 <ipc_rpmsg_init>
	if (err != 0) {
   103b8:	4604      	mov	r4, r0
   103ba:	2800      	cmp	r0, #0
   103bc:	d1ce      	bne.n	1035c <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   103be:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   103c2:	f00f fb57 	bl	1fa74 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
   103c6:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   103c8:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
   103cc:	db0a      	blt.n	103e4 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
   103ce:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
   103d0:	4638      	mov	r0, r7
   103d2:	f016 fa37 	bl	26844 <atomic_set.isra.0>
}
   103d6:	4620      	mov	r0, r4
   103d8:	b005      	add	sp, #20
   103da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   103de:	f06f 040b 	mvn.w	r4, #11
   103e2:	e7bb      	b.n	1035c <open+0x108>
		err = -EINVAL;
   103e4:	f06f 0415 	mvn.w	r4, #21
   103e8:	e7b8      	b.n	1035c <open+0x108>
		return -EALREADY;
   103ea:	f06f 0477 	mvn.w	r4, #119	; 0x77
   103ee:	e7f2      	b.n	103d6 <open+0x182>
   103f0:	0002682d 	.word	0x0002682d
   103f4:	20032d70 	.word	0x20032d70
   103f8:	00026813 	.word	0x00026813
   103fc:	00026807 	.word	0x00026807
   10400:	000104d1 	.word	0x000104d1
   10404:	000268e5 	.word	0x000268e5
   10408:	00026875 	.word	0x00026875

0001040c <close>:
{
   1040c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10410:	4606      	mov	r6, r0
   10412:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
   10416:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   10418:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
   1041c:	f505 775b 	add.w	r7, r5, #876	; 0x36c
   10420:	e8d7 3fef 	ldaex	r3, [r7]
   10424:	2b02      	cmp	r3, #2
   10426:	d103      	bne.n	10430 <close+0x24>
   10428:	e8c7 9fe2 	stlex	r2, r9, [r7]
   1042c:	2a00      	cmp	r2, #0
   1042e:	d1f7      	bne.n	10420 <close+0x14>
   10430:	d149      	bne.n	104c6 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
   10432:	4826      	ldr	r0, [pc, #152]	; (104cc <close+0xc0>)
   10434:	f105 0140 	add.w	r1, r5, #64	; 0x40
   10438:	f7f8 ffdd 	bl	93f6 <strcmp>
   1043c:	b120      	cbz	r0, 10448 <close+0x3c>
		return -EBUSY;
   1043e:	f06f 040f 	mvn.w	r4, #15
}
   10442:	4620      	mov	r0, r4
   10444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
   10448:	4820      	ldr	r0, [pc, #128]	; (104cc <close+0xc0>)
   1044a:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
   1044e:	f7f8 ffd2 	bl	93f6 <strcmp>
   10452:	2800      	cmp	r0, #0
   10454:	d1f3      	bne.n	1043e <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
   10456:	4628      	mov	r0, r5
   10458:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
   1045c:	f016 fa75 	bl	2694a <ipc_rpmsg_deinit>
	if (err != 0) {
   10460:	4604      	mov	r4, r0
   10462:	bb70      	cbnz	r0, 104c2 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
   10464:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
   10466:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
   10468:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
   1046a:	6883      	ldr	r3, [r0, #8]
   1046c:	691b      	ldr	r3, [r3, #16]
   1046e:	b333      	cbz	r3, 104be <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
   10470:	4622      	mov	r2, r4
   10472:	6989      	ldr	r1, [r1, #24]
   10474:	4798      	blx	r3
	if (err != 0) {
   10476:	4604      	mov	r4, r0
   10478:	bb18      	cbnz	r0, 104c2 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
   1047a:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
   1047e:	4649      	mov	r1, r9
   10480:	4630      	mov	r0, r6
   10482:	f011 f827 	bl	214d4 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
   10486:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
   10488:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
   1048c:	f001 fa8e 	bl	119ac <z_impl_k_thread_abort>
   10490:	4630      	mov	r0, r6
   10492:	f8d8 1000 	ldr.w	r1, [r8]
   10496:	f016 fa95 	bl	269c4 <ipc_static_vrings_deinit>
	if (err != 0) {
   1049a:	4604      	mov	r4, r0
   1049c:	b988      	cbnz	r0, 104c2 <close+0xb6>
   1049e:	4601      	mov	r1, r0
   104a0:	22e8      	movs	r2, #232	; 0xe8
   104a2:	4630      	mov	r0, r6
   104a4:	f01a fc7e 	bl	2ada4 <memset>
   104a8:	4621      	mov	r1, r4
   104aa:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   104ae:	4628      	mov	r0, r5
   104b0:	f01a fc78 	bl	2ada4 <memset>
	atomic_set(&data->state, STATE_READY);
   104b4:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
   104b6:	4638      	mov	r0, r7
   104b8:	f016 f9c4 	bl	26844 <atomic_set.isra.0>
	return err;
   104bc:	e7c1      	b.n	10442 <close+0x36>
		return -ENOSYS;
   104be:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
   104c2:	2102      	movs	r1, #2
   104c4:	e7f7      	b.n	104b6 <close+0xaa>
		return -EALREADY;
   104c6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   104ca:	e7ba      	b.n	10442 <close+0x36>
   104cc:	00030d21 	.word	0x00030d21

000104d0 <bound_cb>:
{
   104d0:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
   104d2:	4604      	mov	r4, r0
   104d4:	b140      	cbz	r0, 104e8 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
   104d6:	2300      	movs	r3, #0
   104d8:	2201      	movs	r2, #1
   104da:	e9cd 3200 	strd	r3, r2, [sp]
   104de:	4b07      	ldr	r3, [pc, #28]	; (104fc <bound_cb+0x2c>)
   104e0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   104e4:	f00f f8d6 	bl	1f694 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
   104e8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   104ea:	681b      	ldr	r3, [r3, #0]
   104ec:	b123      	cbz	r3, 104f8 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
   104ee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
   104f0:	b002      	add	sp, #8
   104f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
   104f6:	4718      	bx	r3
}
   104f8:	b002      	add	sp, #8
   104fa:	bd10      	pop	{r4, pc}
   104fc:	00030d21 	.word	0x00030d21

00010500 <send>:
{
   10500:	b513      	push	{r0, r1, r4, lr}
   10502:	4604      	mov	r4, r0
   10504:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10506:	6921      	ldr	r1, [r4, #16]
   10508:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   1050c:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   10510:	2902      	cmp	r1, #2
   10512:	d110      	bne.n	10536 <send+0x36>
	if (len == 0) {
   10514:	b193      	cbz	r3, 1053c <send+0x3c>
	if (!rpmsg_ept) {
   10516:	b1a0      	cbz	r0, 10542 <send+0x42>
   10518:	2101      	movs	r1, #1
   1051a:	e9cd 3100 	strd	r3, r1, [sp]
   1051e:	4613      	mov	r3, r2
   10520:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   10524:	f00f f8b6 	bl	1f694 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
   10528:	4b07      	ldr	r3, [pc, #28]	; (10548 <send+0x48>)
		return -ENOMEM;
   1052a:	4298      	cmp	r0, r3
   1052c:	bf08      	it	eq
   1052e:	f06f 000b 	mvneq.w	r0, #11
}
   10532:	b002      	add	sp, #8
   10534:	bd10      	pop	{r4, pc}
		return -EBUSY;
   10536:	f06f 000f 	mvn.w	r0, #15
   1053a:	e7fa      	b.n	10532 <send+0x32>
		return -EBADMSG;
   1053c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   10540:	e7f7      	b.n	10532 <send+0x32>
		return -ENOENT;
   10542:	f06f 0001 	mvn.w	r0, #1
   10546:	e7f4      	b.n	10532 <send+0x32>
   10548:	fffff82e 	.word	0xfffff82e

0001054c <register_ept>:
{
   1054c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10550:	4688      	mov	r8, r1
   10552:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
   10554:	6906      	ldr	r6, [r0, #16]
   10556:	f506 735b 	add.w	r3, r6, #876	; 0x36c
   1055a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1055e:	2b02      	cmp	r3, #2
   10560:	d15f      	bne.n	10622 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10562:	6813      	ldr	r3, [r2, #0]
   10564:	b923      	cbnz	r3, 10570 <register_ept+0x24>
		return -EINVAL;
   10566:	f06f 0015 	mvn.w	r0, #21
}
   1056a:	b003      	add	sp, #12
   1056c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10570:	781b      	ldrb	r3, [r3, #0]
   10572:	2b00      	cmp	r3, #0
   10574:	d0f7      	beq.n	10566 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
   10576:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
   1057a:	f1b9 0f00 	cmp.w	r9, #0
   1057e:	d133      	bne.n	105e8 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   10580:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
   10584:	f04f 32ff 	mov.w	r2, #4294967295
   10588:	f04f 33ff 	mov.w	r3, #4294967295
   1058c:	4638      	mov	r0, r7
   1058e:	f010 f949 	bl	20824 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
   10592:	4630      	mov	r0, r6
   10594:	682a      	ldr	r2, [r5, #0]
   10596:	a901      	add	r1, sp, #4
   10598:	f7ff fe48 	bl	1022c <get_ept>
	if (rpmsg_ept == NULL) {
   1059c:	9c01      	ldr	r4, [sp, #4]
   1059e:	b91c      	cbnz	r4, 105a8 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
   105a0:	4638      	mov	r0, r7
   105a2:	f016 f94d 	bl	26840 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   105a6:	e7de      	b.n	10566 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   105a8:	f105 0308 	add.w	r3, r5, #8
   105ac:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   105ae:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
   105b0:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
   105b4:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
   105b6:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
   105b8:	b160      	cbz	r0, 105d4 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
   105ba:	4638      	mov	r0, r7
   105bc:	f016 f940 	bl	26840 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
   105c0:	4621      	mov	r1, r4
   105c2:	4630      	mov	r0, r6
   105c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   105c6:	682a      	ldr	r2, [r5, #0]
   105c8:	f7ff fe0e 	bl	101e8 <advertise_ept>
	return 0;
   105cc:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
   105ce:	f8c8 4000 	str.w	r4, [r8]
	return 0;
   105d2:	e7ca      	b.n	1056a <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   105d4:	2220      	movs	r2, #32
   105d6:	6829      	ldr	r1, [r5, #0]
   105d8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   105dc:	f01a fd31 	bl	2b042 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
   105e0:	4638      	mov	r0, r7
   105e2:	f016 f92d 	bl	26840 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   105e6:	e7f1      	b.n	105cc <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
   105e8:	4630      	mov	r0, r6
   105ea:	490f      	ldr	r1, [pc, #60]	; (10628 <register_ept+0xdc>)
   105ec:	f016 f8f5 	bl	267da <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
   105f0:	4604      	mov	r4, r0
   105f2:	2800      	cmp	r0, #0
   105f4:	d0b7      	beq.n	10566 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   105f6:	f105 0308 	add.w	r3, r5, #8
   105fa:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   105fc:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
   105fe:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
   10600:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
   10602:	2300      	movs	r3, #0
   10604:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
   10608:	2220      	movs	r2, #32
   1060a:	6829      	ldr	r1, [r5, #0]
   1060c:	3040      	adds	r0, #64	; 0x40
   1060e:	f01a fd18 	bl	2b042 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
   10612:	4622      	mov	r2, r4
   10614:	2101      	movs	r1, #1
   10616:	4630      	mov	r0, r6
   10618:	f000 f83e 	bl	10698 <ipc_rpmsg_register_ept>
	if (err != 0) {
   1061c:	2800      	cmp	r0, #0
   1061e:	d0d5      	beq.n	105cc <register_ept+0x80>
   10620:	e7a1      	b.n	10566 <register_ept+0x1a>
		return -EBUSY;
   10622:	f06f 000f 	mvn.w	r0, #15
   10626:	e7a0      	b.n	1056a <register_ept+0x1e>
   10628:	00030d21 	.word	0x00030d21

0001062c <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
   1062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10630:	4605      	mov	r5, r0
   10632:	460e      	mov	r6, r1
   10634:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10636:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   10638:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
   1063c:	b085      	sub	sp, #20
   1063e:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
   10642:	4621      	mov	r1, r4
   10644:	4630      	mov	r0, r6
   10646:	f7f8 fed6 	bl	93f6 <strcmp>
   1064a:	b9e0      	cbnz	r0, 10686 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   1064c:	4b11      	ldr	r3, [pc, #68]	; (10694 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
   1064e:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10652:	9302      	str	r3, [sp, #8]
   10654:	f8da 3010 	ldr.w	r3, [sl, #16]
   10658:	4632      	mov	r2, r6
   1065a:	e9cd 8300 	strd	r8, r3, [sp]
   1065e:	4629      	mov	r1, r5
   10660:	f04f 33ff 	mov.w	r3, #4294967295
   10664:	4658      	mov	r0, fp
   10666:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
   1066a:	f00f f85f 	bl	1f72c <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
   1066e:	b960      	cbnz	r0, 1068a <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
   10670:	2370      	movs	r3, #112	; 0x70
   10672:	2201      	movs	r2, #1
   10674:	fb03 9307 	mla	r3, r3, r7, r9
   10678:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
   1067c:	f8da 300c 	ldr.w	r3, [sl, #12]
   10680:	b10b      	cbz	r3, 10686 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
   10682:	4658      	mov	r0, fp
   10684:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10686:	3470      	adds	r4, #112	; 0x70
   10688:	b117      	cbz	r7, 10690 <ns_bind_cb+0x64>
			}
		}
	}
}
   1068a:	b005      	add	sp, #20
   1068c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10690:	2701      	movs	r7, #1
   10692:	e7d6      	b.n	10642 <ns_bind_cb+0x16>
   10694:	00026947 	.word	0x00026947

00010698 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
   10698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1069a:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
   1069c:	b190      	cbz	r0, 106c4 <ipc_rpmsg_register_ept+0x2c>
   1069e:	b18a      	cbz	r2, 106c4 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
   106a0:	2901      	cmp	r1, #1
   106a2:	d112      	bne.n	106ca <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
   106a4:	4b0a      	ldr	r3, [pc, #40]	; (106d0 <ipc_rpmsg_register_ept+0x38>)
   106a6:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   106aa:	9302      	str	r3, [sp, #8]
   106ac:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
   106b0:	3240      	adds	r2, #64	; 0x40
   106b2:	9301      	str	r3, [sp, #4]
   106b4:	f04f 33ff 	mov.w	r3, #4294967295
   106b8:	4620      	mov	r0, r4
   106ba:	9300      	str	r3, [sp, #0]
   106bc:	f00f f836 	bl	1f72c <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
   106c0:	b004      	add	sp, #16
   106c2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   106c4:	f06f 0015 	mvn.w	r0, #21
   106c8:	e7fa      	b.n	106c0 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
   106ca:	2000      	movs	r0, #0
   106cc:	e7f8      	b.n	106c0 <ipc_rpmsg_register_ept+0x28>
   106ce:	bf00      	nop
   106d0:	00026947 	.word	0x00026947

000106d4 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
   106d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   106d8:	b087      	sub	sp, #28
   106da:	460e      	mov	r6, r1
   106dc:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
   106e0:	4614      	mov	r4, r2
   106e2:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
   106e6:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
   106e8:	b330      	cbz	r0, 10738 <ipc_rpmsg_init+0x64>
   106ea:	b329      	cbz	r1, 10738 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
   106ec:	f8df c050 	ldr.w	ip, [pc, #80]	; 10740 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   106f0:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
   106f4:	2d00      	cmp	r5, #0
   106f6:	bf08      	it	eq
   106f8:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
   106fa:	b99e      	cbnz	r6, 10724 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
   106fc:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   10700:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
   10704:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
   10706:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   10708:	f01a f8b0 	bl	2a86c <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   1070c:	ab03      	add	r3, sp, #12
   1070e:	e9cd 4300 	strd	r4, r3, [sp]
   10712:	462a      	mov	r2, r5
   10714:	463b      	mov	r3, r7
   10716:	4641      	mov	r1, r8
   10718:	4648      	mov	r0, r9
   1071a:	f00f f9d1 	bl	1fac0 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
   1071e:	b007      	add	sp, #28
   10720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   10724:	2200      	movs	r2, #0
   10726:	4641      	mov	r1, r8
   10728:	920e      	str	r2, [sp, #56]	; 0x38
   1072a:	4648      	mov	r0, r9
   1072c:	462a      	mov	r2, r5
}
   1072e:	b007      	add	sp, #28
   10730:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   10734:	f00f baee 	b.w	1fd14 <rpmsg_init_vdev>
		return -EINVAL;
   10738:	f06f 0015 	mvn.w	r0, #21
   1073c:	e7ef      	b.n	1071e <ipc_rpmsg_init+0x4a>
   1073e:	bf00      	nop
   10740:	0001062d 	.word	0x0001062d

00010744 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
   10744:	b5f0      	push	{r4, r5, r6, r7, lr}
   10746:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
   10748:	4604      	mov	r4, r0
{
   1074a:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
   1074c:	2800      	cmp	r0, #0
   1074e:	d06f      	beq.n	10830 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
   10750:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
   10752:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
   10754:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10756:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
   10758:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
   1075c:	4f36      	ldr	r7, [pc, #216]	; (10838 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   1075e:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
   10760:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
   10764:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10768:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1076c:	f04f 33ff 	mov.w	r3, #4294967295
   10770:	9300      	str	r3, [sp, #0]
   10772:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   10774:	f019 fbe3 	bl	29f3e <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
   10778:	4a30      	ldr	r2, [pc, #192]	; (1083c <ipc_static_vrings_init+0xf8>)
   1077a:	ab06      	add	r3, sp, #24
   1077c:	e892 0003 	ldmia.w	r2, {r0, r1}
   10780:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
   10784:	4618      	mov	r0, r3
   10786:	f00e fea5 	bl	1f4d4 <metal_init>
	if (err != 0) {
   1078a:	4605      	mov	r5, r0
   1078c:	b9d8      	cbnz	r0, 107c6 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
   1078e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10792:	f00e fe7f 	bl	1f494 <metal_register_generic_device>
	if (err != 0) {
   10796:	4605      	mov	r5, r0
   10798:	b9a8      	cbnz	r0, 107c6 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
   1079a:	4639      	mov	r1, r7
   1079c:	4828      	ldr	r0, [pc, #160]	; (10840 <ipc_static_vrings_init+0xfc>)
   1079e:	aa05      	add	r2, sp, #20
   107a0:	f019 fba5 	bl	29eee <metal_device_open>
	if (err != 0) {
   107a4:	4605      	mov	r5, r0
   107a6:	b970      	cbnz	r0, 107c6 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
   107a8:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
   107aa:	689a      	ldr	r2, [r3, #8]
   107ac:	b172      	cbz	r2, 107cc <ipc_static_vrings_init+0x88>
   107ae:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   107b0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
   107b4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   107b8:	f016 f8f6 	bl	269a8 <virtqueue_allocate>
   107bc:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
   107c0:	b930      	cbnz	r0, 107d0 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
   107c2:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
   107c6:	4628      	mov	r0, r5
   107c8:	b009      	add	sp, #36	; 0x24
   107ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107cc:	4603      	mov	r3, r0
   107ce:	e7ef      	b.n	107b0 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
   107d0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   107d4:	f016 f8e8 	bl	269a8 <virtqueue_allocate>
   107d8:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
   107dc:	2800      	cmp	r0, #0
   107de:	d0f0      	beq.n	107c2 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   107e0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   107e4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   107e8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
   107ec:	2304      	movs	r3, #4
   107ee:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
   107f2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
   107f6:	2302      	movs	r3, #2
   107f8:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
   107fa:	4b12      	ldr	r3, [pc, #72]	; (10844 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   107fc:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   10800:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   10804:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
   10808:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   1080c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
   10810:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
   10812:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   10816:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   1081a:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   1081e:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
   10822:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
   10826:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
   1082a:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
   1082c:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
   1082e:	e7ca      	b.n	107c6 <ipc_static_vrings_init+0x82>
		return -EINVAL;
   10830:	f06f 0515 	mvn.w	r5, #21
   10834:	e7c7      	b.n	107c6 <ipc_static_vrings_init+0x82>
   10836:	bf00      	nop
   10838:	0002e60a 	.word	0x0002e60a
   1083c:	0002c1c0 	.word	0x0002c1c0
   10840:	0002e614 	.word	0x0002e614
   10844:	0002c71c 	.word	0x0002c71c

00010848 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1084c:	4605      	mov	r5, r0
	__asm__ volatile(
   1084e:	f04f 0320 	mov.w	r3, #32
   10852:	f3ef 8611 	mrs	r6, BASEPRI
   10856:	f383 8812 	msr	BASEPRI_MAX, r3
   1085a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1085e:	4820      	ldr	r0, [pc, #128]	; (108e0 <pm_state_notify+0x98>)
   10860:	f00f ff8a 	bl	20778 <z_spin_lock_valid>
   10864:	b968      	cbnz	r0, 10882 <pm_state_notify+0x3a>
   10866:	2394      	movs	r3, #148	; 0x94
   10868:	4a1e      	ldr	r2, [pc, #120]	; (108e4 <pm_state_notify+0x9c>)
   1086a:	491f      	ldr	r1, [pc, #124]	; (108e8 <pm_state_notify+0xa0>)
   1086c:	481f      	ldr	r0, [pc, #124]	; (108ec <pm_state_notify+0xa4>)
   1086e:	f015 fcf6 	bl	2625e <assert_print>
   10872:	491b      	ldr	r1, [pc, #108]	; (108e0 <pm_state_notify+0x98>)
   10874:	481e      	ldr	r0, [pc, #120]	; (108f0 <pm_state_notify+0xa8>)
   10876:	f015 fcf2 	bl	2625e <assert_print>
   1087a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1087c:	4819      	ldr	r0, [pc, #100]	; (108e4 <pm_state_notify+0x9c>)
   1087e:	f015 fce7 	bl	26250 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10882:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
   10886:	4816      	ldr	r0, [pc, #88]	; (108e0 <pm_state_notify+0x98>)
   10888:	f00f ff92 	bl	207b0 <z_spin_lock_set_owner>
	return list->head;
   1088c:	4b19      	ldr	r3, [pc, #100]	; (108f4 <pm_state_notify+0xac>)
   1088e:	4f1a      	ldr	r7, [pc, #104]	; (108f8 <pm_state_notify+0xb0>)
   10890:	681c      	ldr	r4, [r3, #0]
   10892:	f8df 8068 	ldr.w	r8, [pc, #104]	; 108fc <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10896:	b97c      	cbnz	r4, 108b8 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10898:	4811      	ldr	r0, [pc, #68]	; (108e0 <pm_state_notify+0x98>)
   1089a:	f00f ff7b 	bl	20794 <z_spin_unlock_valid>
   1089e:	b9c8      	cbnz	r0, 108d4 <pm_state_notify+0x8c>
   108a0:	23c2      	movs	r3, #194	; 0xc2
   108a2:	4a10      	ldr	r2, [pc, #64]	; (108e4 <pm_state_notify+0x9c>)
   108a4:	4916      	ldr	r1, [pc, #88]	; (10900 <pm_state_notify+0xb8>)
   108a6:	4811      	ldr	r0, [pc, #68]	; (108ec <pm_state_notify+0xa4>)
   108a8:	f015 fcd9 	bl	2625e <assert_print>
   108ac:	490c      	ldr	r1, [pc, #48]	; (108e0 <pm_state_notify+0x98>)
   108ae:	4815      	ldr	r0, [pc, #84]	; (10904 <pm_state_notify+0xbc>)
   108b0:	f015 fcd5 	bl	2625e <assert_print>
   108b4:	21c2      	movs	r1, #194	; 0xc2
   108b6:	e7e1      	b.n	1087c <pm_state_notify+0x34>
			callback = notifier->state_exit;
   108b8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   108bc:	2d00      	cmp	r5, #0
   108be:	bf18      	it	ne
   108c0:	4613      	movne	r3, r2
		if (callback) {
   108c2:	b12b      	cbz	r3, 108d0 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   108c4:	f898 2014 	ldrb.w	r2, [r8, #20]
   108c8:	fb09 f202 	mul.w	r2, r9, r2
   108cc:	5cb8      	ldrb	r0, [r7, r2]
   108ce:	4798      	blx	r3
	return node->next;
   108d0:	6824      	ldr	r4, [r4, #0]
   108d2:	e7e0      	b.n	10896 <pm_state_notify+0x4e>
	__asm__ volatile(
   108d4:	f386 8811 	msr	BASEPRI, r6
   108d8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   108dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   108e0:	20022620 	.word	0x20022620
   108e4:	0002df19 	.word	0x0002df19
   108e8:	0002df72 	.word	0x0002df72
   108ec:	0002d095 	.word	0x0002d095
   108f0:	0002df87 	.word	0x0002df87
   108f4:	20022640 	.word	0x20022640
   108f8:	20022634 	.word	0x20022634
   108fc:	20022b9c 	.word	0x20022b9c
   10900:	0002df46 	.word	0x0002df46
   10904:	0002df5d 	.word	0x0002df5d

00010908 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10908:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   1090a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1090c:	4b16      	ldr	r3, [pc, #88]	; (10968 <pm_system_resume+0x60>)
   1090e:	7d1c      	ldrb	r4, [r3, #20]
   10910:	f004 031f 	and.w	r3, r4, #31
   10914:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10916:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10918:	4b14      	ldr	r3, [pc, #80]	; (1096c <pm_system_resume+0x64>)
   1091a:	0961      	lsrs	r1, r4, #5
   1091c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10920:	e8d3 1fef 	ldaex	r1, [r3]
   10924:	ea01 0500 	and.w	r5, r1, r0
   10928:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1092c:	2e00      	cmp	r6, #0
   1092e:	d1f7      	bne.n	10920 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10930:	420a      	tst	r2, r1
   10932:	d013      	beq.n	1095c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   10934:	4b0e      	ldr	r3, [pc, #56]	; (10970 <pm_system_resume+0x68>)
   10936:	4d0f      	ldr	r5, [pc, #60]	; (10974 <pm_system_resume+0x6c>)
   10938:	b18b      	cbz	r3, 1095e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1093a:	230c      	movs	r3, #12
   1093c:	4363      	muls	r3, r4
   1093e:	18ea      	adds	r2, r5, r3
   10940:	7851      	ldrb	r1, [r2, #1]
   10942:	5ce8      	ldrb	r0, [r5, r3]
   10944:	f015 fcd0 	bl	262e8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10948:	2000      	movs	r0, #0
   1094a:	f7ff ff7d 	bl	10848 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1094e:	230c      	movs	r3, #12
   10950:	435c      	muls	r4, r3
   10952:	2300      	movs	r3, #0
   10954:	192a      	adds	r2, r5, r4
   10956:	512b      	str	r3, [r5, r4]
   10958:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1095c:	bd70      	pop	{r4, r5, r6, pc}
   1095e:	f383 8811 	msr	BASEPRI, r3
   10962:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10966:	e7ef      	b.n	10948 <pm_system_resume+0x40>
   10968:	20022b9c 	.word	0x20022b9c
   1096c:	20022648 	.word	0x20022648
   10970:	000262e9 	.word	0x000262e9
   10974:	20022634 	.word	0x20022634

00010978 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   1097c:	4b45      	ldr	r3, [pc, #276]	; (10a94 <pm_system_suspend+0x11c>)
{
   1097e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10980:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   10982:	f04f 0320 	mov.w	r3, #32
   10986:	f3ef 8811 	mrs	r8, BASEPRI
   1098a:	f383 8812 	msr	BASEPRI_MAX, r3
   1098e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10992:	4841      	ldr	r0, [pc, #260]	; (10a98 <pm_system_suspend+0x120>)
   10994:	f00f fef0 	bl	20778 <z_spin_lock_valid>
   10998:	b968      	cbnz	r0, 109b6 <pm_system_suspend+0x3e>
   1099a:	2394      	movs	r3, #148	; 0x94
   1099c:	4a3f      	ldr	r2, [pc, #252]	; (10a9c <pm_system_suspend+0x124>)
   1099e:	4940      	ldr	r1, [pc, #256]	; (10aa0 <pm_system_suspend+0x128>)
   109a0:	4840      	ldr	r0, [pc, #256]	; (10aa4 <pm_system_suspend+0x12c>)
   109a2:	f015 fc5c 	bl	2625e <assert_print>
   109a6:	493c      	ldr	r1, [pc, #240]	; (10a98 <pm_system_suspend+0x120>)
   109a8:	483f      	ldr	r0, [pc, #252]	; (10aa8 <pm_system_suspend+0x130>)
   109aa:	f015 fc58 	bl	2625e <assert_print>
   109ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   109b0:	483a      	ldr	r0, [pc, #232]	; (10a9c <pm_system_suspend+0x124>)
   109b2:	f015 fc4d 	bl	26250 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   109b6:	240c      	movs	r4, #12
   109b8:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
   109ba:	4837      	ldr	r0, [pc, #220]	; (10a98 <pm_system_suspend+0x120>)
   109bc:	f00f fef8 	bl	207b0 <z_spin_lock_set_owner>
   109c0:	4b3a      	ldr	r3, [pc, #232]	; (10aac <pm_system_suspend+0x134>)
   109c2:	4e3b      	ldr	r6, [pc, #236]	; (10ab0 <pm_system_suspend+0x138>)
   109c4:	5d19      	ldrb	r1, [r3, r4]
   109c6:	191a      	adds	r2, r3, r4
   109c8:	b1b9      	cbz	r1, 109fa <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   109ca:	ca07      	ldmia	r2, {r0, r1, r2}
   109cc:	eb06 0c04 	add.w	ip, r6, r4
   109d0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   109d4:	2200      	movs	r2, #0
   109d6:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   109d8:	482f      	ldr	r0, [pc, #188]	; (10a98 <pm_system_suspend+0x120>)
   109da:	f00f fedb 	bl	20794 <z_spin_unlock_valid>
   109de:	4604      	mov	r4, r0
   109e0:	b9b0      	cbnz	r0, 10a10 <pm_system_suspend+0x98>
   109e2:	23c2      	movs	r3, #194	; 0xc2
   109e4:	4a2d      	ldr	r2, [pc, #180]	; (10a9c <pm_system_suspend+0x124>)
   109e6:	4933      	ldr	r1, [pc, #204]	; (10ab4 <pm_system_suspend+0x13c>)
   109e8:	482e      	ldr	r0, [pc, #184]	; (10aa4 <pm_system_suspend+0x12c>)
   109ea:	f015 fc38 	bl	2625e <assert_print>
   109ee:	492a      	ldr	r1, [pc, #168]	; (10a98 <pm_system_suspend+0x120>)
   109f0:	4831      	ldr	r0, [pc, #196]	; (10ab8 <pm_system_suspend+0x140>)
   109f2:	f015 fc34 	bl	2625e <assert_print>
   109f6:	21c2      	movs	r1, #194	; 0xc2
   109f8:	e7da      	b.n	109b0 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   109fa:	4639      	mov	r1, r7
   109fc:	4628      	mov	r0, r5
   109fe:	f000 f865 	bl	10acc <pm_policy_next_state>
		if (info != NULL) {
   10a02:	2800      	cmp	r0, #0
   10a04:	d0e8      	beq.n	109d8 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   10a06:	c807      	ldmia	r0, {r0, r1, r2}
   10a08:	4434      	add	r4, r6
   10a0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10a0e:	e7e3      	b.n	109d8 <pm_system_suspend+0x60>
	__asm__ volatile(
   10a10:	f388 8811 	msr	BASEPRI, r8
   10a14:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10a18:	230c      	movs	r3, #12
   10a1a:	436b      	muls	r3, r5
   10a1c:	18f2      	adds	r2, r6, r3
   10a1e:	5cf3      	ldrb	r3, [r6, r3]
   10a20:	b3ab      	cbz	r3, 10a8e <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10a22:	1c7b      	adds	r3, r7, #1
   10a24:	d00f      	beq.n	10a46 <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10a26:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10a2a:	2100      	movs	r1, #0
   10a2c:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10a30:	4822      	ldr	r0, [pc, #136]	; (10abc <pm_system_suspend+0x144>)
   10a32:	2300      	movs	r3, #0
   10a34:	fbee 010c 	umlal	r0, r1, lr, ip
   10a38:	4a21      	ldr	r2, [pc, #132]	; (10ac0 <pm_system_suspend+0x148>)
   10a3a:	f7f8 fa59 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10a3e:	2101      	movs	r1, #1
   10a40:	1a38      	subs	r0, r7, r0
   10a42:	f012 fb77 	bl	23134 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10a46:	f011 f9f5 	bl	21e34 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10a4a:	2001      	movs	r0, #1
   10a4c:	f7ff fefc 	bl	10848 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10a50:	4b1c      	ldr	r3, [pc, #112]	; (10ac4 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10a52:	096a      	lsrs	r2, r5, #5
   10a54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10a58:	2201      	movs	r2, #1
   10a5a:	f005 011f 	and.w	r1, r5, #31
   10a5e:	408a      	lsls	r2, r1
   10a60:	e8d3 0fef 	ldaex	r0, [r3]
   10a64:	4310      	orrs	r0, r2
   10a66:	e8c3 0fe1 	stlex	r1, r0, [r3]
   10a6a:	2900      	cmp	r1, #0
   10a6c:	d1f8      	bne.n	10a60 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
   10a6e:	4b16      	ldr	r3, [pc, #88]	; (10ac8 <pm_system_suspend+0x150>)
   10a70:	b133      	cbz	r3, 10a80 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
   10a72:	230c      	movs	r3, #12
   10a74:	436b      	muls	r3, r5
   10a76:	18f2      	adds	r2, r6, r3
   10a78:	7851      	ldrb	r1, [r2, #1]
   10a7a:	5cf0      	ldrb	r0, [r6, r3]
   10a7c:	f015 fc28 	bl	262d0 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10a80:	f7ff ff42 	bl	10908 <pm_system_resume>
	k_sched_unlock();
   10a84:	f011 fa42 	bl	21f0c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   10a88:	4620      	mov	r0, r4
   10a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   10a8e:	461c      	mov	r4, r3
   10a90:	e7fa      	b.n	10a88 <pm_system_suspend+0x110>
   10a92:	bf00      	nop
   10a94:	20022b9c 	.word	0x20022b9c
   10a98:	20022624 	.word	0x20022624
   10a9c:	0002df19 	.word	0x0002df19
   10aa0:	0002df72 	.word	0x0002df72
   10aa4:	0002d095 	.word	0x0002d095
   10aa8:	0002df87 	.word	0x0002df87
   10aac:	20022628 	.word	0x20022628
   10ab0:	20022634 	.word	0x20022634
   10ab4:	0002df46 	.word	0x0002df46
   10ab8:	0002df5d 	.word	0x0002df5d
   10abc:	000f423f 	.word	0x000f423f
   10ac0:	000f4240 	.word	0x000f4240
   10ac4:	20022648 	.word	0x20022648
   10ac8:	000262d1 	.word	0x000262d1

00010acc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ad0:	b085      	sub	sp, #20
   10ad2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10ad4:	a903      	add	r1, sp, #12
   10ad6:	f000 f843 	bl	10b60 <pm_state_cpu_get_all>
   10ada:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10ade:	4604      	mov	r4, r0
   10ae0:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10ae4:	4b1b      	ldr	r3, [pc, #108]	; (10b54 <pm_policy_next_state+0x88>)
   10ae6:	9d03      	ldr	r5, [sp, #12]
   10ae8:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10aec:	1e43      	subs	r3, r0, #1
   10aee:	b21b      	sxth	r3, r3
   10af0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10af4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10b58 <pm_policy_next_state+0x8c>
   10af8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10afc:	b924      	cbnz	r4, 10b08 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10afe:	46a1      	mov	r9, r4
}
   10b00:	4648      	mov	r0, r9
   10b02:	b005      	add	sp, #20
   10b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b08:	46c4      	mov	ip, r8
   10b0a:	4659      	mov	r1, fp
   10b0c:	6868      	ldr	r0, [r5, #4]
   10b0e:	2300      	movs	r3, #0
   10b10:	fbe0 c107 	umlal	ip, r1, r0, r7
   10b14:	4a11      	ldr	r2, [pc, #68]	; (10b5c <pm_policy_next_state+0x90>)
   10b16:	4660      	mov	r0, ip
   10b18:	f7f8 f9ea 	bl	8ef0 <__aeabi_uldivmod>
   10b1c:	46c4      	mov	ip, r8
   10b1e:	4659      	mov	r1, fp
   10b20:	9001      	str	r0, [sp, #4]
   10b22:	68a8      	ldr	r0, [r5, #8]
   10b24:	2300      	movs	r3, #0
   10b26:	fbe0 c107 	umlal	ip, r1, r0, r7
   10b2a:	4a0c      	ldr	r2, [pc, #48]	; (10b5c <pm_policy_next_state+0x90>)
   10b2c:	4660      	mov	r0, ip
   10b2e:	f7f8 f9df 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10b32:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   10b36:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10b38:	d001      	beq.n	10b3e <pm_policy_next_state+0x72>
   10b3a:	4582      	cmp	sl, r0
   10b3c:	d905      	bls.n	10b4a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10b3e:	1c73      	adds	r3, r6, #1
   10b40:	d0de      	beq.n	10b00 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   10b42:	9b01      	ldr	r3, [sp, #4]
   10b44:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   10b46:	42b0      	cmp	r0, r6
   10b48:	d9da      	bls.n	10b00 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10b4a:	3c01      	subs	r4, #1
   10b4c:	b2a4      	uxth	r4, r4
   10b4e:	3d0c      	subs	r5, #12
   10b50:	e7d4      	b.n	10afc <pm_policy_next_state+0x30>
   10b52:	bf00      	nop
   10b54:	2000842c 	.word	0x2000842c
   10b58:	000f423f 	.word	0x000f423f
   10b5c:	000f4240 	.word	0x000f4240

00010b60 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10b60:	b908      	cbnz	r0, 10b66 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   10b62:	4b02      	ldr	r3, [pc, #8]	; (10b6c <pm_state_cpu_get_all+0xc>)
   10b64:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10b66:	2000      	movs	r0, #0
   10b68:	4770      	bx	lr
   10b6a:	bf00      	nop
   10b6c:	0002c740 	.word	0x0002c740

00010b70 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   10b70:	4b03      	ldr	r3, [pc, #12]	; (10b80 <nus_ccc_cfg_changed+0x10>)
   10b72:	689b      	ldr	r3, [r3, #8]
   10b74:	b11b      	cbz	r3, 10b7e <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   10b76:	1e48      	subs	r0, r1, #1
   10b78:	bf18      	it	ne
   10b7a:	2001      	movne	r0, #1
   10b7c:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   10b7e:	4770      	bx	lr
   10b80:	2002264c 	.word	0x2002264c

00010b84 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   10b84:	b510      	push	{r4, lr}
   10b86:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   10b88:	4b03      	ldr	r3, [pc, #12]	; (10b98 <on_receive+0x14>)
{
   10b8a:	4611      	mov	r1, r2
	if (nus_cb.received) {
   10b8c:	681b      	ldr	r3, [r3, #0]
   10b8e:	b10b      	cbz	r3, 10b94 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   10b90:	4622      	mov	r2, r4
   10b92:	4798      	blx	r3
}
	return len;
}
   10b94:	4620      	mov	r0, r4
   10b96:	bd10      	pop	{r4, pc}
   10b98:	2002264c 	.word	0x2002264c

00010b9c <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   10b9c:	4b02      	ldr	r3, [pc, #8]	; (10ba8 <on_sent+0xc>)
   10b9e:	685b      	ldr	r3, [r3, #4]
   10ba0:	b103      	cbz	r3, 10ba4 <on_sent+0x8>
		nus_cb.sent(conn);
   10ba2:	4718      	bx	r3
	}
}
   10ba4:	4770      	bx	lr
   10ba6:	bf00      	nop
   10ba8:	2002264c 	.word	0x2002264c

00010bac <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   10bac:	b130      	cbz	r0, 10bbc <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   10bae:	4b04      	ldr	r3, [pc, #16]	; (10bc0 <bt_nus_init+0x14>)
   10bb0:	6802      	ldr	r2, [r0, #0]
   10bb2:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   10bb4:	6842      	ldr	r2, [r0, #4]
   10bb6:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   10bb8:	6882      	ldr	r2, [r0, #8]
   10bba:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   10bbc:	2000      	movs	r0, #0
   10bbe:	4770      	bx	lr
   10bc0:	2002264c 	.word	0x2002264c

00010bc4 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   10bc4:	b570      	push	{r4, r5, r6, lr}
   10bc6:	460e      	mov	r6, r1
   10bc8:	4615      	mov	r5, r2
   10bca:	4604      	mov	r4, r0
   10bcc:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   10bce:	2100      	movs	r1, #0
   10bd0:	2218      	movs	r2, #24
   10bd2:	4668      	mov	r0, sp
   10bd4:	f01a f8e6 	bl	2ada4 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   10bd8:	490b      	ldr	r1, [pc, #44]	; (10c08 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   10bda:	4b0c      	ldr	r3, [pc, #48]	; (10c0c <bt_nus_send+0x48>)
	params.data = data;
   10bdc:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   10be0:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   10be4:	9304      	str	r3, [sp, #16]

	if (!conn) {
   10be6:	b92c      	cbnz	r4, 10bf4 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   10be8:	4669      	mov	r1, sp
   10bea:	4620      	mov	r0, r4
   10bec:	f007 f866 	bl	17cbc <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   10bf0:	b006      	add	sp, #24
   10bf2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   10bf4:	2201      	movs	r2, #1
   10bf6:	4620      	mov	r0, r4
   10bf8:	f006 fd26 	bl	17648 <bt_gatt_is_subscribed>
   10bfc:	2800      	cmp	r0, #0
   10bfe:	d1f3      	bne.n	10be8 <bt_nus_send+0x24>
		return -EINVAL;
   10c00:	f06f 0015 	mvn.w	r0, #21
   10c04:	e7f4      	b.n	10bf0 <bt_nus_send+0x2c>
   10c06:	bf00      	nop
   10c08:	0002c768 	.word	0x0002c768
   10c0c:	00010b9d 	.word	0x00010b9d

00010c10 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10c10:	4904      	ldr	r1, [pc, #16]	; (10c24 <sub_bytes+0x14>)
   10c12:	1e43      	subs	r3, r0, #1
   10c14:	300f      	adds	r0, #15
   10c16:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10c1a:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   10c1c:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   10c1e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10c20:	d1f9      	bne.n	10c16 <sub_bytes+0x6>
	}
}
   10c22:	4770      	bx	lr
   10c24:	0002e626 	.word	0x0002e626

00010c28 <tc_aes128_set_encrypt_key>:
{
   10c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c2a:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   10c2c:	4e26      	ldr	r6, [pc, #152]	; (10cc8 <tc_aes128_set_encrypt_key+0xa0>)
{
   10c2e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10c30:	ad01      	add	r5, sp, #4
{
   10c32:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10c34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10c38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10c3c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10c40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   10c44:	4638      	mov	r0, r7
   10c46:	2f00      	cmp	r7, #0
   10c48:	d039      	beq.n	10cbe <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   10c4a:	2c00      	cmp	r4, #0
   10c4c:	d039      	beq.n	10cc2 <tc_aes128_set_encrypt_key+0x9a>
   10c4e:	1f38      	subs	r0, r7, #4
   10c50:	4602      	mov	r2, r0
   10c52:	4621      	mov	r1, r4
   10c54:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10c56:	784b      	ldrb	r3, [r1, #1]
   10c58:	780d      	ldrb	r5, [r1, #0]
   10c5a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10c5c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10c60:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   10c62:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10c64:	432b      	orrs	r3, r5
   10c66:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   10c6a:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10c6c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10c70:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10c74:	d1ef      	bne.n	10c56 <tc_aes128_set_encrypt_key+0x2e>
   10c76:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10c78:	4c14      	ldr	r4, [pc, #80]	; (10ccc <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   10c7a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10c7c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   10c7e:	d116      	bne.n	10cae <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10c80:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10c84:	5ca5      	ldrb	r5, [r4, r2]
   10c86:	0e1a      	lsrs	r2, r3, #24
   10c88:	5ca2      	ldrb	r2, [r4, r2]
   10c8a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   10c8e:	f3c3 2507 	ubfx	r5, r3, #8, #8
   10c92:	5d65      	ldrb	r5, [r4, r5]
   10c94:	b2db      	uxtb	r3, r3
   10c96:	5ce3      	ldrb	r3, [r4, r3]
   10c98:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10c9c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   10ca0:	f021 0303 	bic.w	r3, r1, #3
   10ca4:	3330      	adds	r3, #48	; 0x30
   10ca6:	446b      	add	r3, sp
   10ca8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10cac:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   10cae:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   10cb2:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   10cb4:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10cb6:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10cb8:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10cba:	d1de      	bne.n	10c7a <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   10cbc:	2001      	movs	r0, #1
}
   10cbe:	b00d      	add	sp, #52	; 0x34
   10cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   10cc2:	4620      	mov	r0, r4
   10cc4:	e7fb      	b.n	10cbe <tc_aes128_set_encrypt_key+0x96>
   10cc6:	bf00      	nop
   10cc8:	0002c1c8 	.word	0x0002c1c8
   10ccc:	0002e626 	.word	0x0002e626

00010cd0 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   10cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10cd4:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10cd6:	6803      	ldr	r3, [r0, #0]
{
   10cd8:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10cda:	9302      	str	r3, [sp, #8]
   10cdc:	6843      	ldr	r3, [r0, #4]
   10cde:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 10e9c <compress+0x1cc>
   10ce2:	9303      	str	r3, [sp, #12]
   10ce4:	6883      	ldr	r3, [r0, #8]
   10ce6:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   10cea:	9304      	str	r3, [sp, #16]
   10cec:	68c3      	ldr	r3, [r0, #12]
   10cee:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10cf0:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10cf2:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10cf6:	9306      	str	r3, [sp, #24]
   10cf8:	6943      	ldr	r3, [r0, #20]
   10cfa:	9307      	str	r3, [sp, #28]
   10cfc:	6983      	ldr	r3, [r0, #24]
   10cfe:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   10d02:	9308      	str	r3, [sp, #32]
   10d04:	69c3      	ldr	r3, [r0, #28]
   10d06:	4698      	mov	r8, r3
   10d08:	9309      	str	r3, [sp, #36]	; 0x24
   10d0a:	9b08      	ldr	r3, [sp, #32]
   10d0c:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   10d0e:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   10d10:	ab0c      	add	r3, sp, #48	; 0x30
   10d12:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10d14:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   10d18:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   10d1a:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10d1e:	44a9      	add	r9, r5
   10d20:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   10d24:	9d00      	ldr	r5, [sp, #0]
   10d26:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   10d2a:	444b      	add	r3, r9
   10d2c:	ea25 0502 	bic.w	r5, r5, r2
   10d30:	ea02 090c 	and.w	r9, r2, ip
   10d34:	ea85 0509 	eor.w	r5, r5, r9
   10d38:	442b      	add	r3, r5
   10d3a:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   10d3c:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   10d40:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   10d44:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   10d48:	4025      	ands	r5, r4
   10d4a:	ea06 090b 	and.w	r9, r6, fp
   10d4e:	ea85 0509 	eor.w	r5, r5, r9
   10d52:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   10d56:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   10d58:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   10d5a:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   10d5c:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   10d60:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   10d62:	46de      	mov	lr, fp
   10d64:	f8dd 8000 	ldr.w	r8, [sp]
   10d68:	f040 8088 	bne.w	10e7c <compress+0x1ac>
   10d6c:	f04f 0a10 	mov.w	sl, #16
   10d70:	494b      	ldr	r1, [pc, #300]	; (10ea0 <compress+0x1d0>)
   10d72:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   10d74:	4651      	mov	r1, sl
   10d76:	f10a 0a01 	add.w	sl, sl, #1
   10d7a:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10d7e:	f00a 070f 	and.w	r7, sl, #15
   10d82:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10d86:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10d8a:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   10d8e:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   10d92:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   10d94:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   10d98:	f101 070e 	add.w	r7, r1, #14
   10d9c:	f007 070f 	and.w	r7, r7, #15
   10da0:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10da4:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10da8:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   10daa:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   10dae:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   10db2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10db6:	f001 010f 	and.w	r1, r1, #15
   10dba:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10dbe:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   10dc2:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   10dc6:	f859 ec40 	ldr.w	lr, [r9, #-64]
   10dca:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   10dce:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10dd2:	4471      	add	r1, lr
		s0 = sigma0(s0);
   10dd4:	f8dd e004 	ldr.w	lr, [sp, #4]
   10dd8:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   10ddc:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10de0:	4441      	add	r1, r8
		s1 = sigma1(s1);
   10de2:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10de6:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10de8:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   10dec:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10df0:	ea2c 0705 	bic.w	r7, ip, r5
   10df4:	ea87 0708 	eor.w	r7, r7, r8
   10df8:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   10dfc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10e00:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   10e04:	4477      	add	r7, lr
   10e06:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10e0a:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10e0e:	4477      	add	r7, lr
   10e10:	440f      	add	r7, r1
   10e12:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   10e14:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10e18:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   10e1a:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10e1e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   10e22:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   10e26:	ea07 0703 	and.w	r7, r7, r3
   10e2a:	ea04 0806 	and.w	r8, r4, r6
   10e2e:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   10e32:	ea87 0708 	eor.w	r7, r7, r8
   10e36:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   10e38:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   10e3a:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   10e3e:	f8cd c000 	str.w	ip, [sp]
   10e42:	46b3      	mov	fp, r6
   10e44:	d122      	bne.n	10e8c <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   10e46:	9902      	ldr	r1, [sp, #8]
   10e48:	4439      	add	r1, r7
   10e4a:	6001      	str	r1, [r0, #0]
   10e4c:	9903      	ldr	r1, [sp, #12]
   10e4e:	4419      	add	r1, r3
   10e50:	9b04      	ldr	r3, [sp, #16]
   10e52:	6041      	str	r1, [r0, #4]
   10e54:	4423      	add	r3, r4
   10e56:	6083      	str	r3, [r0, #8]
   10e58:	9b05      	ldr	r3, [sp, #20]
   10e5a:	4433      	add	r3, r6
   10e5c:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   10e5e:	9b06      	ldr	r3, [sp, #24]
   10e60:	4473      	add	r3, lr
   10e62:	6103      	str	r3, [r0, #16]
   10e64:	9b07      	ldr	r3, [sp, #28]
   10e66:	442b      	add	r3, r5
   10e68:	6143      	str	r3, [r0, #20]
   10e6a:	9b08      	ldr	r3, [sp, #32]
   10e6c:	4413      	add	r3, r2
   10e6e:	6183      	str	r3, [r0, #24]
   10e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e72:	4463      	add	r3, ip
   10e74:	61c3      	str	r3, [r0, #28]
}
   10e76:	b01d      	add	sp, #116	; 0x74
   10e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e7c:	46b3      	mov	fp, r6
   10e7e:	f8cd c000 	str.w	ip, [sp]
   10e82:	4626      	mov	r6, r4
   10e84:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   10e86:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10e88:	462a      	mov	r2, r5
   10e8a:	e740      	b.n	10d0e <compress+0x3e>
   10e8c:	4694      	mov	ip, r2
   10e8e:	4626      	mov	r6, r4
   10e90:	462a      	mov	r2, r5
   10e92:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10e94:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   10e96:	463b      	mov	r3, r7
   10e98:	e76c      	b.n	10d74 <compress+0xa4>
   10e9a:	bf00      	nop
   10e9c:	0002c7b8 	.word	0x0002c7b8
   10ea0:	0002c7f4 	.word	0x0002c7f4

00010ea4 <tc_sha256_init>:
{
   10ea4:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   10ea6:	4604      	mov	r4, r0
   10ea8:	b1c8      	cbz	r0, 10ede <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   10eaa:	2270      	movs	r2, #112	; 0x70
   10eac:	2100      	movs	r1, #0
   10eae:	f015 fdc6 	bl	26a3e <_set>
	s->iv[1] = 0xbb67ae85;
   10eb2:	4b0b      	ldr	r3, [pc, #44]	; (10ee0 <tc_sha256_init+0x3c>)
   10eb4:	4a0b      	ldr	r2, [pc, #44]	; (10ee4 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   10eb6:	490c      	ldr	r1, [pc, #48]	; (10ee8 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   10eb8:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   10ebc:	4b0b      	ldr	r3, [pc, #44]	; (10eec <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   10ebe:	480c      	ldr	r0, [pc, #48]	; (10ef0 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   10ec0:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   10ec4:	4b0b      	ldr	r3, [pc, #44]	; (10ef4 <tc_sha256_init+0x50>)
   10ec6:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   10eca:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   10ecc:	4b0a      	ldr	r3, [pc, #40]	; (10ef8 <tc_sha256_init+0x54>)
   10ece:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   10ed0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   10ed4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   10ed8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   10edc:	61e3      	str	r3, [r4, #28]
}
   10ede:	bd10      	pop	{r4, pc}
   10ee0:	bb67ae85 	.word	0xbb67ae85
   10ee4:	6a09e667 	.word	0x6a09e667
   10ee8:	3c6ef372 	.word	0x3c6ef372
   10eec:	a54ff53a 	.word	0xa54ff53a
   10ef0:	510e527f 	.word	0x510e527f
   10ef4:	9b05688c 	.word	0x9b05688c
   10ef8:	1f83d9ab 	.word	0x1f83d9ab

00010efc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10efc:	4901      	ldr	r1, [pc, #4]	; (10f04 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   10efe:	2210      	movs	r2, #16
	str	r2, [r1]
   10f00:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   10f02:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   10f04:	e000ed10 	.word	0xe000ed10

00010f08 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10f08:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10f0a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10f0c:	f380 8811 	msr	BASEPRI, r0
	isb
   10f10:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   10f14:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10f18:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   10f1a:	b662      	cpsie	i
	isb
   10f1c:	f3bf 8f6f 	isb	sy

	bx	lr
   10f20:	4770      	bx	lr
   10f22:	bf00      	nop

00010f24 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   10f24:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   10f26:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10f28:	f381 8811 	msr	BASEPRI, r1

	wfe
   10f2c:	bf20      	wfe

	msr	BASEPRI, r0
   10f2e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   10f32:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   10f34:	4770      	bx	lr
   10f36:	bf00      	nop

00010f38 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10f38:	b570      	push	{r4, r5, r6, lr}
   10f3a:	4606      	mov	r6, r0

	if (esf != NULL) {
   10f3c:	460d      	mov	r5, r1
{
   10f3e:	b086      	sub	sp, #24
	if (esf != NULL) {
   10f40:	2900      	cmp	r1, #0
   10f42:	d038      	beq.n	10fb6 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   10f44:	2400      	movs	r4, #0
   10f46:	688b      	ldr	r3, [r1, #8]
   10f48:	2201      	movs	r2, #1
   10f4a:	9305      	str	r3, [sp, #20]
   10f4c:	684b      	ldr	r3, [r1, #4]
   10f4e:	4620      	mov	r0, r4
   10f50:	9304      	str	r3, [sp, #16]
   10f52:	680b      	ldr	r3, [r1, #0]
   10f54:	491b      	ldr	r1, [pc, #108]	; (10fc4 <z_arm_fatal_error+0x8c>)
   10f56:	9303      	str	r3, [sp, #12]
   10f58:	4b1b      	ldr	r3, [pc, #108]	; (10fc8 <z_arm_fatal_error+0x90>)
   10f5a:	e9cd 4400 	strd	r4, r4, [sp]
   10f5e:	9302      	str	r3, [sp, #8]
   10f60:	4623      	mov	r3, r4
   10f62:	f016 f9aa 	bl	272ba <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   10f66:	696b      	ldr	r3, [r5, #20]
   10f68:	2201      	movs	r2, #1
   10f6a:	9305      	str	r3, [sp, #20]
   10f6c:	692b      	ldr	r3, [r5, #16]
   10f6e:	4620      	mov	r0, r4
   10f70:	9304      	str	r3, [sp, #16]
   10f72:	68eb      	ldr	r3, [r5, #12]
   10f74:	4913      	ldr	r1, [pc, #76]	; (10fc4 <z_arm_fatal_error+0x8c>)
   10f76:	9303      	str	r3, [sp, #12]
   10f78:	4b14      	ldr	r3, [pc, #80]	; (10fcc <z_arm_fatal_error+0x94>)
   10f7a:	9400      	str	r4, [sp, #0]
   10f7c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10f80:	4623      	mov	r3, r4
   10f82:	f016 f99a 	bl	272ba <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   10f86:	69eb      	ldr	r3, [r5, #28]
   10f88:	2201      	movs	r2, #1
   10f8a:	9303      	str	r3, [sp, #12]
   10f8c:	4b10      	ldr	r3, [pc, #64]	; (10fd0 <z_arm_fatal_error+0x98>)
   10f8e:	4620      	mov	r0, r4
   10f90:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10f94:	490b      	ldr	r1, [pc, #44]	; (10fc4 <z_arm_fatal_error+0x8c>)
   10f96:	4623      	mov	r3, r4
   10f98:	9400      	str	r4, [sp, #0]
   10f9a:	f016 f98e 	bl	272ba <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   10f9e:	69ab      	ldr	r3, [r5, #24]
   10fa0:	2201      	movs	r2, #1
   10fa2:	9303      	str	r3, [sp, #12]
   10fa4:	4b0b      	ldr	r3, [pc, #44]	; (10fd4 <z_arm_fatal_error+0x9c>)
   10fa6:	4620      	mov	r0, r4
   10fa8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10fac:	4905      	ldr	r1, [pc, #20]	; (10fc4 <z_arm_fatal_error+0x8c>)
   10fae:	4623      	mov	r3, r4
   10fb0:	9400      	str	r4, [sp, #0]
   10fb2:	f016 f982 	bl	272ba <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10fb6:	4629      	mov	r1, r5
   10fb8:	4630      	mov	r0, r6
}
   10fba:	b006      	add	sp, #24
   10fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   10fc0:	f00e bf46 	b.w	1fe50 <z_fatal_error>
   10fc4:	0002c14c 	.word	0x0002c14c
   10fc8:	0002e726 	.word	0x0002e726
   10fcc:	0002e755 	.word	0x0002e755
   10fd0:	0002e784 	.word	0x0002e784
   10fd4:	0002e793 	.word	0x0002e793

00010fd8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10fd8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10fda:	2800      	cmp	r0, #0
   10fdc:	db07      	blt.n	10fee <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10fde:	2301      	movs	r3, #1
   10fe0:	0941      	lsrs	r1, r0, #5
   10fe2:	4a03      	ldr	r2, [pc, #12]	; (10ff0 <arch_irq_enable+0x18>)
   10fe4:	f000 001f 	and.w	r0, r0, #31
   10fe8:	4083      	lsls	r3, r0
   10fea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10fee:	4770      	bx	lr
   10ff0:	e000e100 	.word	0xe000e100

00010ff4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10ff4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10ff6:	2800      	cmp	r0, #0
   10ff8:	db0c      	blt.n	11014 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10ffa:	2201      	movs	r2, #1
   10ffc:	4906      	ldr	r1, [pc, #24]	; (11018 <arch_irq_disable+0x24>)
   10ffe:	0943      	lsrs	r3, r0, #5
   11000:	f000 001f 	and.w	r0, r0, #31
   11004:	4082      	lsls	r2, r0
   11006:	3320      	adds	r3, #32
   11008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1100c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11010:	f3bf 8f6f 	isb	sy
}
   11014:	4770      	bx	lr
   11016:	bf00      	nop
   11018:	e000e100 	.word	0xe000e100

0001101c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1101c:	4b05      	ldr	r3, [pc, #20]	; (11034 <arch_irq_is_enabled+0x18>)
   1101e:	0942      	lsrs	r2, r0, #5
   11020:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11024:	2301      	movs	r3, #1
   11026:	f000 001f 	and.w	r0, r0, #31
   1102a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1102e:	4010      	ands	r0, r2
   11030:	4770      	bx	lr
   11032:	bf00      	nop
   11034:	e000e100 	.word	0xe000e100

00011038 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   11038:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1103a:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1103c:	2b07      	cmp	r3, #7
{
   1103e:	4604      	mov	r4, r0
   11040:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   11042:	d90f      	bls.n	11064 <z_arm_irq_priority_set+0x2c>
   11044:	235b      	movs	r3, #91	; 0x5b
   11046:	4a10      	ldr	r2, [pc, #64]	; (11088 <z_arm_irq_priority_set+0x50>)
   11048:	4910      	ldr	r1, [pc, #64]	; (1108c <z_arm_irq_priority_set+0x54>)
   1104a:	4811      	ldr	r0, [pc, #68]	; (11090 <z_arm_irq_priority_set+0x58>)
   1104c:	f015 f907 	bl	2625e <assert_print>
   11050:	4629      	mov	r1, r5
   11052:	4810      	ldr	r0, [pc, #64]	; (11094 <z_arm_irq_priority_set+0x5c>)
   11054:	2307      	movs	r3, #7
   11056:	4622      	mov	r2, r4
   11058:	f015 f901 	bl	2625e <assert_print>
   1105c:	215b      	movs	r1, #91	; 0x5b
   1105e:	480a      	ldr	r0, [pc, #40]	; (11088 <z_arm_irq_priority_set+0x50>)
   11060:	f015 f8f6 	bl	26250 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11064:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11066:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11068:	bfac      	ite	ge
   1106a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1106e:	4a0a      	ldrlt	r2, [pc, #40]	; (11098 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11070:	ea4f 1343 	mov.w	r3, r3, lsl #5
   11074:	b2db      	uxtb	r3, r3
   11076:	bfab      	itete	ge
   11078:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1107c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11080:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11084:	5413      	strblt	r3, [r2, r0]
}
   11086:	bd38      	pop	{r3, r4, r5, pc}
   11088:	0002e7c1 	.word	0x0002e7c1
   1108c:	0002e7f7 	.word	0x0002e7f7
   11090:	0002d095 	.word	0x0002d095
   11094:	0002e812 	.word	0x0002e812
   11098:	e000ed14 	.word	0xe000ed14

0001109c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1109c:	bf30      	wfi
    b z_SysNmiOnReset
   1109e:	f7ff bffd 	b.w	1109c <z_SysNmiOnReset>
   110a2:	bf00      	nop

000110a4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   110a4:	4a0b      	ldr	r2, [pc, #44]	; (110d4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   110a6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   110a8:	4b0b      	ldr	r3, [pc, #44]	; (110d8 <z_arm_prep_c+0x34>)
   110aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   110ae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   110b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   110b4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   110b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   110bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   110c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   110c4:	f00e ff7a 	bl	1ffbc <z_bss_zero>
	z_data_copy();
   110c8:	f011 fe74 	bl	22db4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   110cc:	f000 fbe8 	bl	118a0 <z_arm_interrupt_init>
	z_cstart();
   110d0:	f00e ffb4 	bl	2003c <z_cstart>
   110d4:	00008000 	.word	0x00008000
   110d8:	e000ed00 	.word	0xe000ed00

000110dc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   110dc:	4a09      	ldr	r2, [pc, #36]	; (11104 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   110de:	490a      	ldr	r1, [pc, #40]	; (11108 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   110e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   110e2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   110e4:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   110e6:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   110e8:	4908      	ldr	r1, [pc, #32]	; (1110c <arch_swap+0x30>)
   110ea:	684b      	ldr	r3, [r1, #4]
   110ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   110f0:	604b      	str	r3, [r1, #4]
   110f2:	2300      	movs	r3, #0
   110f4:	f383 8811 	msr	BASEPRI, r3
   110f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   110fc:	6893      	ldr	r3, [r2, #8]
}
   110fe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   11100:	4770      	bx	lr
   11102:	bf00      	nop
   11104:	20022b9c 	.word	0x20022b9c
   11108:	0002cf3c 	.word	0x0002cf3c
   1110c:	e000ed00 	.word	0xe000ed00

00011110 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11110:	4915      	ldr	r1, [pc, #84]	; (11168 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11112:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   11114:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11118:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1111c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1111e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11122:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11126:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   11128:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1112c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11130:	4f0e      	ldr	r7, [pc, #56]	; (1116c <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11132:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11136:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   11138:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1113a:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1113c:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11140:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   11142:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11144:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11146:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1114a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1114e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11152:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   11156:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1115a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1115c:	f016 f8cc 	bl	272f8 <configure_builtin_stack_guard>
    pop {r2, lr}
   11160:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   11164:	4770      	bx	lr
   11166:	0000      	.short	0x0000
    ldr r1, =_kernel
   11168:	20022b9c 	.word	0x20022b9c
    ldr v4, =_SCS_ICSR
   1116c:	e000ed04 	.word	0xe000ed04

00011170 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11170:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11174:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11176:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1117a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1117e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11180:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11184:	2902      	cmp	r1, #2
    beq _oops
   11186:	d0ff      	beq.n	11188 <_oops>

00011188 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11188:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1118a:	f016 f8a6 	bl	272da <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1118e:	bd01      	pop	{r0, pc}

00011190 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11190:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   11194:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   11196:	490d      	ldr	r1, [pc, #52]	; (111cc <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   11198:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1119c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1119e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   111a2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   111a6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   111a8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   111ac:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   111b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   111b4:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   111b8:	2300      	movs	r3, #0
   111ba:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   111bc:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   111c0:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   111c2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   111c4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   111c8:	4770      	bx	lr
   111ca:	bf00      	nop
   111cc:	00025f0f 	.word	0x00025f0f

000111d0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   111d0:	4b08      	ldr	r3, [pc, #32]	; (111f4 <arch_switch_to_main_thread+0x24>)
   111d2:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   111d4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   111d6:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   111da:	4610      	mov	r0, r2
   111dc:	f381 8809 	msr	PSP, r1
   111e0:	2100      	movs	r1, #0
   111e2:	b663      	cpsie	if
   111e4:	f381 8811 	msr	BASEPRI, r1
   111e8:	f3bf 8f6f 	isb	sy
   111ec:	2200      	movs	r2, #0
   111ee:	2300      	movs	r3, #0
   111f0:	f014 fe8d 	bl	25f0e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   111f4:	20022b9c 	.word	0x20022b9c

000111f8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   111f8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   111fa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   111fc:	4a0b      	ldr	r2, [pc, #44]	; (1122c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   111fe:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   11200:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   11202:	bf1e      	ittt	ne
	movne	r1, #0
   11204:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11206:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   11208:	f019 fb97 	blne	2a93a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1120c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1120e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11212:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11216:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1121a:	4905      	ldr	r1, [pc, #20]	; (11230 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1121c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1121e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11220:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   11222:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11226:	4903      	ldr	r1, [pc, #12]	; (11234 <_isr_wrapper+0x3c>)
	bx r1
   11228:	4708      	bx	r1
   1122a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1122c:	20022b9c 	.word	0x20022b9c
	ldr r1, =_sw_isr_table
   11230:	0002bbdc 	.word	0x0002bbdc
	ldr r1, =z_arm_int_exit
   11234:	00011239 	.word	0x00011239

00011238 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11238:	4b04      	ldr	r3, [pc, #16]	; (1124c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1123a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1123c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1123e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11240:	d003      	beq.n	1124a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11242:	4903      	ldr	r1, [pc, #12]	; (11250 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11248:	600a      	str	r2, [r1, #0]

0001124a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1124a:	4770      	bx	lr
	ldr r3, =_kernel
   1124c:	20022b9c 	.word	0x20022b9c
	ldr r1, =_SCS_ICSR
   11250:	e000ed04 	.word	0xe000ed04

00011254 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11254:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   11256:	2400      	movs	r4, #0
   11258:	4b48      	ldr	r3, [pc, #288]	; (1137c <mem_manage_fault.constprop.0+0x128>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1125a:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   1125c:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1125e:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   11260:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11262:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   11264:	2201      	movs	r2, #1
   11266:	4620      	mov	r0, r4
   11268:	e9cd 4400 	strd	r4, r4, [sp]
   1126c:	4944      	ldr	r1, [pc, #272]	; (11380 <mem_manage_fault.constprop.0+0x12c>)
   1126e:	f016 f847 	bl	27300 <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11272:	4b44      	ldr	r3, [pc, #272]	; (11384 <mem_manage_fault.constprop.0+0x130>)
   11274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11276:	06dd      	lsls	r5, r3, #27
   11278:	d509      	bpl.n	1128e <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1127a:	4b43      	ldr	r3, [pc, #268]	; (11388 <mem_manage_fault.constprop.0+0x134>)
   1127c:	2201      	movs	r2, #1
   1127e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11282:	4620      	mov	r0, r4
   11284:	4623      	mov	r3, r4
   11286:	493e      	ldr	r1, [pc, #248]	; (11380 <mem_manage_fault.constprop.0+0x12c>)
   11288:	9400      	str	r4, [sp, #0]
   1128a:	f016 f839 	bl	27300 <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1128e:	4b3d      	ldr	r3, [pc, #244]	; (11384 <mem_manage_fault.constprop.0+0x130>)
   11290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11292:	0718      	lsls	r0, r3, #28
   11294:	d509      	bpl.n	112aa <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   11296:	4b3d      	ldr	r3, [pc, #244]	; (1138c <mem_manage_fault.constprop.0+0x138>)
   11298:	2201      	movs	r2, #1
   1129a:	9302      	str	r3, [sp, #8]
   1129c:	2300      	movs	r3, #0
   1129e:	4938      	ldr	r1, [pc, #224]	; (11380 <mem_manage_fault.constprop.0+0x12c>)
   112a0:	4618      	mov	r0, r3
   112a2:	e9cd 3300 	strd	r3, r3, [sp]
   112a6:	f016 f82b 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   112aa:	4d36      	ldr	r5, [pc, #216]	; (11384 <mem_manage_fault.constprop.0+0x130>)
   112ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
   112ae:	0799      	lsls	r1, r3, #30
   112b0:	d51e      	bpl.n	112f0 <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   112b2:	2400      	movs	r4, #0
   112b4:	4b36      	ldr	r3, [pc, #216]	; (11390 <mem_manage_fault.constprop.0+0x13c>)
   112b6:	2201      	movs	r2, #1
   112b8:	9302      	str	r3, [sp, #8]
   112ba:	4620      	mov	r0, r4
   112bc:	4623      	mov	r3, r4
   112be:	e9cd 4400 	strd	r4, r4, [sp]
   112c2:	492f      	ldr	r1, [pc, #188]	; (11380 <mem_manage_fault.constprop.0+0x12c>)
   112c4:	f016 f81c 	bl	27300 <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   112c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   112ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   112cc:	0612      	lsls	r2, r2, #24
   112ce:	d50f      	bpl.n	112f0 <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   112d0:	9303      	str	r3, [sp, #12]
   112d2:	4b30      	ldr	r3, [pc, #192]	; (11394 <mem_manage_fault.constprop.0+0x140>)
   112d4:	2201      	movs	r2, #1
   112d6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   112da:	4620      	mov	r0, r4
   112dc:	4623      	mov	r3, r4
   112de:	4928      	ldr	r1, [pc, #160]	; (11380 <mem_manage_fault.constprop.0+0x12c>)
   112e0:	9400      	str	r4, [sp, #0]
   112e2:	f016 f80d 	bl	27300 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   112e6:	b11f      	cbz	r7, 112f0 <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   112e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   112ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   112ee:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   112f0:	4b24      	ldr	r3, [pc, #144]	; (11384 <mem_manage_fault.constprop.0+0x130>)
   112f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   112f4:	07df      	lsls	r7, r3, #31
   112f6:	d509      	bpl.n	1130c <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   112f8:	4b27      	ldr	r3, [pc, #156]	; (11398 <mem_manage_fault.constprop.0+0x144>)
   112fa:	2201      	movs	r2, #1
   112fc:	9302      	str	r3, [sp, #8]
   112fe:	2300      	movs	r3, #0
   11300:	491f      	ldr	r1, [pc, #124]	; (11380 <mem_manage_fault.constprop.0+0x12c>)
   11302:	4618      	mov	r0, r3
   11304:	e9cd 3300 	strd	r3, r3, [sp]
   11308:	f015 fffa 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1130c:	4b1d      	ldr	r3, [pc, #116]	; (11384 <mem_manage_fault.constprop.0+0x130>)
   1130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11310:	069d      	lsls	r5, r3, #26
   11312:	d509      	bpl.n	11328 <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   11314:	4b21      	ldr	r3, [pc, #132]	; (1139c <mem_manage_fault.constprop.0+0x148>)
   11316:	2201      	movs	r2, #1
   11318:	9302      	str	r3, [sp, #8]
   1131a:	2300      	movs	r3, #0
   1131c:	4918      	ldr	r1, [pc, #96]	; (11380 <mem_manage_fault.constprop.0+0x12c>)
   1131e:	4618      	mov	r0, r3
   11320:	e9cd 3300 	strd	r3, r3, [sp]
   11324:	f015 ffec 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11328:	4b16      	ldr	r3, [pc, #88]	; (11384 <mem_manage_fault.constprop.0+0x130>)
   1132a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1132c:	06d4      	lsls	r4, r2, #27
   1132e:	d402      	bmi.n	11336 <mem_manage_fault.constprop.0+0xe2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   11330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11332:	0790      	lsls	r0, r2, #30
   11334:	d511      	bpl.n	1135a <mem_manage_fault.constprop.0+0x106>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   11336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11338:	06d9      	lsls	r1, r3, #27
   1133a:	d50e      	bpl.n	1135a <mem_manage_fault.constprop.0+0x106>
   1133c:	4918      	ldr	r1, [pc, #96]	; (113a0 <mem_manage_fault.constprop.0+0x14c>)
   1133e:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   11342:	4a18      	ldr	r2, [pc, #96]	; (113a4 <mem_manage_fault.constprop.0+0x150>)
   11344:	4818      	ldr	r0, [pc, #96]	; (113a8 <mem_manage_fault.constprop.0+0x154>)
   11346:	f014 ff8a 	bl	2625e <assert_print>
   1134a:	4818      	ldr	r0, [pc, #96]	; (113ac <mem_manage_fault.constprop.0+0x158>)
   1134c:	f014 ff87 	bl	2625e <assert_print>
   11350:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   11354:	4813      	ldr	r0, [pc, #76]	; (113a4 <mem_manage_fault.constprop.0+0x150>)
   11356:	f014 ff7b 	bl	26250 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1135a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1135c:	4b09      	ldr	r3, [pc, #36]	; (11384 <mem_manage_fault.constprop.0+0x130>)
   1135e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11360:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   11362:	bf42      	ittt	mi
   11364:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   11366:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1136a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1136c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1136e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11372:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11374:	7030      	strb	r0, [r6, #0]

	return reason;
}
   11376:	b005      	add	sp, #20
   11378:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1137a:	bf00      	nop
   1137c:	0002e852 	.word	0x0002e852
   11380:	0002c14c 	.word	0x0002c14c
   11384:	e000ed00 	.word	0xe000ed00
   11388:	0002e868 	.word	0x0002e868
   1138c:	0002e89b 	.word	0x0002e89b
   11390:	0002e8ae 	.word	0x0002e8ae
   11394:	0002e8c6 	.word	0x0002e8c6
   11398:	0002e8dc 	.word	0x0002e8dc
   1139c:	0002e8fb 	.word	0x0002e8fb
   113a0:	0002e964 	.word	0x0002e964
   113a4:	0002e92a 	.word	0x0002e92a
   113a8:	0002d095 	.word	0x0002d095
   113ac:	0002e9ae 	.word	0x0002e9ae

000113b0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   113b0:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   113b2:	2400      	movs	r4, #0
   113b4:	4b3b      	ldr	r3, [pc, #236]	; (114a4 <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   113b6:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   113b8:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   113ba:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   113bc:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   113be:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   113c0:	2201      	movs	r2, #1
   113c2:	4620      	mov	r0, r4
   113c4:	e9cd 4400 	strd	r4, r4, [sp]
   113c8:	4937      	ldr	r1, [pc, #220]	; (114a8 <bus_fault.constprop.0+0xf8>)
   113ca:	f015 ff99 	bl	27300 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   113ce:	4b37      	ldr	r3, [pc, #220]	; (114ac <bus_fault.constprop.0+0xfc>)
   113d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113d2:	04db      	lsls	r3, r3, #19
   113d4:	d509      	bpl.n	113ea <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   113d6:	4b36      	ldr	r3, [pc, #216]	; (114b0 <bus_fault.constprop.0+0x100>)
   113d8:	2201      	movs	r2, #1
   113da:	e9cd 4301 	strd	r4, r3, [sp, #4]
   113de:	4620      	mov	r0, r4
   113e0:	4623      	mov	r3, r4
   113e2:	4931      	ldr	r1, [pc, #196]	; (114a8 <bus_fault.constprop.0+0xf8>)
   113e4:	9400      	str	r4, [sp, #0]
   113e6:	f015 ff8b 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   113ea:	4b30      	ldr	r3, [pc, #192]	; (114ac <bus_fault.constprop.0+0xfc>)
   113ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113ee:	051d      	lsls	r5, r3, #20
   113f0:	d509      	bpl.n	11406 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   113f2:	4b30      	ldr	r3, [pc, #192]	; (114b4 <bus_fault.constprop.0+0x104>)
   113f4:	2201      	movs	r2, #1
   113f6:	9302      	str	r3, [sp, #8]
   113f8:	2300      	movs	r3, #0
   113fa:	492b      	ldr	r1, [pc, #172]	; (114a8 <bus_fault.constprop.0+0xf8>)
   113fc:	4618      	mov	r0, r3
   113fe:	e9cd 3300 	strd	r3, r3, [sp]
   11402:	f015 ff7d 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11406:	4d29      	ldr	r5, [pc, #164]	; (114ac <bus_fault.constprop.0+0xfc>)
   11408:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1140a:	059c      	lsls	r4, r3, #22
   1140c:	d51e      	bpl.n	1144c <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   1140e:	2400      	movs	r4, #0
   11410:	4b29      	ldr	r3, [pc, #164]	; (114b8 <bus_fault.constprop.0+0x108>)
   11412:	2201      	movs	r2, #1
   11414:	4620      	mov	r0, r4
   11416:	9302      	str	r3, [sp, #8]
   11418:	e9cd 4400 	strd	r4, r4, [sp]
   1141c:	4623      	mov	r3, r4
   1141e:	4922      	ldr	r1, [pc, #136]	; (114a8 <bus_fault.constprop.0+0xf8>)
   11420:	f015 ff6e 	bl	27300 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11424:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11426:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11428:	0410      	lsls	r0, r2, #16
   1142a:	d50f      	bpl.n	1144c <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1142c:	9303      	str	r3, [sp, #12]
   1142e:	4b23      	ldr	r3, [pc, #140]	; (114bc <bus_fault.constprop.0+0x10c>)
   11430:	2201      	movs	r2, #1
   11432:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11436:	4620      	mov	r0, r4
   11438:	4623      	mov	r3, r4
   1143a:	491b      	ldr	r1, [pc, #108]	; (114a8 <bus_fault.constprop.0+0xf8>)
   1143c:	9400      	str	r4, [sp, #0]
   1143e:	f015 ff5f 	bl	27300 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   11442:	b11f      	cbz	r7, 1144c <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11444:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11446:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1144a:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1144c:	4b17      	ldr	r3, [pc, #92]	; (114ac <bus_fault.constprop.0+0xfc>)
   1144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11450:	0559      	lsls	r1, r3, #21
   11452:	d509      	bpl.n	11468 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   11454:	4b1a      	ldr	r3, [pc, #104]	; (114c0 <bus_fault.constprop.0+0x110>)
   11456:	2201      	movs	r2, #1
   11458:	9302      	str	r3, [sp, #8]
   1145a:	2300      	movs	r3, #0
   1145c:	4912      	ldr	r1, [pc, #72]	; (114a8 <bus_fault.constprop.0+0xf8>)
   1145e:	4618      	mov	r0, r3
   11460:	e9cd 3300 	strd	r3, r3, [sp]
   11464:	f015 ff4c 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11468:	4a10      	ldr	r2, [pc, #64]	; (114ac <bus_fault.constprop.0+0xfc>)
   1146a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1146c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   11470:	d012      	beq.n	11498 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   11472:	4b14      	ldr	r3, [pc, #80]	; (114c4 <bus_fault.constprop.0+0x114>)
   11474:	9302      	str	r3, [sp, #8]
   11476:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11478:	2201      	movs	r2, #1
   1147a:	4618      	mov	r0, r3
   1147c:	e9cd 3300 	strd	r3, r3, [sp]
   11480:	4909      	ldr	r1, [pc, #36]	; (114a8 <bus_fault.constprop.0+0xf8>)
   11482:	f015 ff3d 	bl	27300 <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   11486:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11488:	4a08      	ldr	r2, [pc, #32]	; (114ac <bus_fault.constprop.0+0xfc>)
   1148a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1148c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11490:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11492:	7030      	strb	r0, [r6, #0]

	return reason;
}
   11494:	b005      	add	sp, #20
   11496:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11498:	6a92      	ldr	r2, [r2, #40]	; 0x28
   1149a:	0492      	lsls	r2, r2, #18
   1149c:	d5f3      	bpl.n	11486 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1149e:	4a0a      	ldr	r2, [pc, #40]	; (114c8 <bus_fault.constprop.0+0x118>)
   114a0:	9202      	str	r2, [sp, #8]
   114a2:	e7e9      	b.n	11478 <bus_fault.constprop.0+0xc8>
   114a4:	0002ea12 	.word	0x0002ea12
   114a8:	0002c14c 	.word	0x0002c14c
   114ac:	e000ed00 	.word	0xe000ed00
   114b0:	0002ea28 	.word	0x0002ea28
   114b4:	0002e89b 	.word	0x0002e89b
   114b8:	0002ea39 	.word	0x0002ea39
   114bc:	0002ea52 	.word	0x0002ea52
   114c0:	0002ea67 	.word	0x0002ea67
   114c4:	0002ea82 	.word	0x0002ea82
   114c8:	0002e8fb 	.word	0x0002e8fb

000114cc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   114cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   114ce:	2400      	movs	r4, #0
   114d0:	4b3b      	ldr	r3, [pc, #236]	; (115c0 <usage_fault.constprop.0+0xf4>)
   114d2:	2201      	movs	r2, #1
   114d4:	9302      	str	r3, [sp, #8]
   114d6:	4620      	mov	r0, r4
   114d8:	4623      	mov	r3, r4
   114da:	e9cd 4400 	strd	r4, r4, [sp]
   114de:	4939      	ldr	r1, [pc, #228]	; (115c4 <usage_fault.constprop.0+0xf8>)
   114e0:	f015 ff0e 	bl	27300 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   114e4:	4b38      	ldr	r3, [pc, #224]	; (115c8 <usage_fault.constprop.0+0xfc>)
   114e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   114e8:	019b      	lsls	r3, r3, #6
   114ea:	d509      	bpl.n	11500 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   114ec:	4b37      	ldr	r3, [pc, #220]	; (115cc <usage_fault.constprop.0+0x100>)
   114ee:	2201      	movs	r2, #1
   114f0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   114f4:	4620      	mov	r0, r4
   114f6:	4623      	mov	r3, r4
   114f8:	4932      	ldr	r1, [pc, #200]	; (115c4 <usage_fault.constprop.0+0xf8>)
   114fa:	9400      	str	r4, [sp, #0]
   114fc:	f015 ff00 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11500:	4b31      	ldr	r3, [pc, #196]	; (115c8 <usage_fault.constprop.0+0xfc>)
   11502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11504:	01dc      	lsls	r4, r3, #7
   11506:	d509      	bpl.n	1151c <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   11508:	4b31      	ldr	r3, [pc, #196]	; (115d0 <usage_fault.constprop.0+0x104>)
   1150a:	2201      	movs	r2, #1
   1150c:	9302      	str	r3, [sp, #8]
   1150e:	2300      	movs	r3, #0
   11510:	492c      	ldr	r1, [pc, #176]	; (115c4 <usage_fault.constprop.0+0xf8>)
   11512:	4618      	mov	r0, r3
   11514:	e9cd 3300 	strd	r3, r3, [sp]
   11518:	f015 fef2 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1151c:	4b2a      	ldr	r3, [pc, #168]	; (115c8 <usage_fault.constprop.0+0xfc>)
   1151e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   11520:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   11524:	d00a      	beq.n	1153c <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   11526:	4b2b      	ldr	r3, [pc, #172]	; (115d4 <usage_fault.constprop.0+0x108>)
   11528:	2201      	movs	r2, #1
   1152a:	9302      	str	r3, [sp, #8]
   1152c:	2300      	movs	r3, #0
   1152e:	4925      	ldr	r1, [pc, #148]	; (115c4 <usage_fault.constprop.0+0xf8>)
   11530:	4618      	mov	r0, r3
   11532:	e9cd 3300 	strd	r3, r3, [sp]
   11536:	f015 fee3 	bl	27300 <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1153a:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1153c:	4b22      	ldr	r3, [pc, #136]	; (115c8 <usage_fault.constprop.0+0xfc>)
   1153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11540:	0318      	lsls	r0, r3, #12
   11542:	d509      	bpl.n	11558 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   11544:	4b24      	ldr	r3, [pc, #144]	; (115d8 <usage_fault.constprop.0+0x10c>)
   11546:	2201      	movs	r2, #1
   11548:	9302      	str	r3, [sp, #8]
   1154a:	2300      	movs	r3, #0
   1154c:	491d      	ldr	r1, [pc, #116]	; (115c4 <usage_fault.constprop.0+0xf8>)
   1154e:	4618      	mov	r0, r3
   11550:	e9cd 3300 	strd	r3, r3, [sp]
   11554:	f015 fed4 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11558:	4b1b      	ldr	r3, [pc, #108]	; (115c8 <usage_fault.constprop.0+0xfc>)
   1155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1155c:	0359      	lsls	r1, r3, #13
   1155e:	d509      	bpl.n	11574 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   11560:	4b1e      	ldr	r3, [pc, #120]	; (115dc <usage_fault.constprop.0+0x110>)
   11562:	2201      	movs	r2, #1
   11564:	9302      	str	r3, [sp, #8]
   11566:	2300      	movs	r3, #0
   11568:	4916      	ldr	r1, [pc, #88]	; (115c4 <usage_fault.constprop.0+0xf8>)
   1156a:	4618      	mov	r0, r3
   1156c:	e9cd 3300 	strd	r3, r3, [sp]
   11570:	f015 fec6 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11574:	4b14      	ldr	r3, [pc, #80]	; (115c8 <usage_fault.constprop.0+0xfc>)
   11576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11578:	039a      	lsls	r2, r3, #14
   1157a:	d509      	bpl.n	11590 <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1157c:	4b18      	ldr	r3, [pc, #96]	; (115e0 <usage_fault.constprop.0+0x114>)
   1157e:	2201      	movs	r2, #1
   11580:	9302      	str	r3, [sp, #8]
   11582:	2300      	movs	r3, #0
   11584:	490f      	ldr	r1, [pc, #60]	; (115c4 <usage_fault.constprop.0+0xf8>)
   11586:	4618      	mov	r0, r3
   11588:	e9cd 3300 	strd	r3, r3, [sp]
   1158c:	f015 feb8 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11590:	4b0d      	ldr	r3, [pc, #52]	; (115c8 <usage_fault.constprop.0+0xfc>)
   11592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11594:	03db      	lsls	r3, r3, #15
   11596:	d509      	bpl.n	115ac <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11598:	4b12      	ldr	r3, [pc, #72]	; (115e4 <usage_fault.constprop.0+0x118>)
   1159a:	2201      	movs	r2, #1
   1159c:	9302      	str	r3, [sp, #8]
   1159e:	2300      	movs	r3, #0
   115a0:	4908      	ldr	r1, [pc, #32]	; (115c4 <usage_fault.constprop.0+0xf8>)
   115a2:	4618      	mov	r0, r3
   115a4:	e9cd 3300 	strd	r3, r3, [sp]
   115a8:	f015 feaa 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   115ac:	4a06      	ldr	r2, [pc, #24]	; (115c8 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   115ae:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   115b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   115b2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   115b6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   115ba:	6293      	str	r3, [r2, #40]	; 0x28
}
   115bc:	b004      	add	sp, #16
   115be:	bd10      	pop	{r4, pc}
   115c0:	0002ea9a 	.word	0x0002ea9a
   115c4:	0002c14c 	.word	0x0002c14c
   115c8:	e000ed00 	.word	0xe000ed00
   115cc:	0002eab2 	.word	0x0002eab2
   115d0:	0002eac5 	.word	0x0002eac5
   115d4:	0002eadf 	.word	0x0002eadf
   115d8:	0002eb09 	.word	0x0002eb09
   115dc:	0002eb27 	.word	0x0002eb27
   115e0:	0002eb4c 	.word	0x0002eb4c
   115e4:	0002eb66 	.word	0x0002eb66

000115e8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   115e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   115ec:	4b8e      	ldr	r3, [pc, #568]	; (11828 <z_arm_fault+0x240>)
{
   115ee:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   115f0:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   115f4:	4688      	mov	r8, r1
   115f6:	4616      	mov	r6, r2
   115f8:	2300      	movs	r3, #0
   115fa:	b090      	sub	sp, #64	; 0x40
   115fc:	f3ca 0708 	ubfx	r7, sl, #0, #9
   11600:	f383 8811 	msr	BASEPRI, r3
   11604:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11608:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1160c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11610:	d00e      	beq.n	11630 <z_arm_fault+0x48>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   11612:	4986      	ldr	r1, [pc, #536]	; (1182c <z_arm_fault+0x244>)
   11614:	f44f 6384 	mov.w	r3, #1056	; 0x420
   11618:	4a85      	ldr	r2, [pc, #532]	; (11830 <z_arm_fault+0x248>)
   1161a:	4886      	ldr	r0, [pc, #536]	; (11834 <z_arm_fault+0x24c>)
   1161c:	f014 fe1f 	bl	2625e <assert_print>
   11620:	4885      	ldr	r0, [pc, #532]	; (11838 <z_arm_fault+0x250>)
   11622:	f014 fe1c 	bl	2625e <assert_print>
   11626:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   1162a:	4881      	ldr	r0, [pc, #516]	; (11830 <z_arm_fault+0x248>)
   1162c:	f014 fe10 	bl	26250 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   11630:	f012 0401 	ands.w	r4, r2, #1
   11634:	d1ed      	bne.n	11612 <z_arm_fault+0x2a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11636:	0650      	lsls	r0, r2, #25
   11638:	d404      	bmi.n	11644 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1163a:	0711      	lsls	r1, r2, #28
   1163c:	d40e      	bmi.n	1165c <z_arm_fault+0x74>
			*nested_exc = true;
   1163e:	f04f 0901 	mov.w	r9, #1
   11642:	e00e      	b.n	11662 <z_arm_fault+0x7a>
		PR_FAULT_INFO("Exception occurred in Secure State");
   11644:	4b7d      	ldr	r3, [pc, #500]	; (1183c <z_arm_fault+0x254>)
   11646:	2201      	movs	r2, #1
   11648:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1164c:	4620      	mov	r0, r4
   1164e:	4623      	mov	r3, r4
   11650:	497b      	ldr	r1, [pc, #492]	; (11840 <z_arm_fault+0x258>)
   11652:	9400      	str	r4, [sp, #0]
   11654:	f015 fe54 	bl	27300 <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   11658:	0772      	lsls	r2, r6, #29
   1165a:	d500      	bpl.n	1165e <z_arm_fault+0x76>
			ptr_esf = (z_arch_esf_t *)psp;
   1165c:	4645      	mov	r5, r8
	*nested_exc = false;
   1165e:	f04f 0900 	mov.w	r9, #0
	__ASSERT(esf != NULL,
   11662:	2d00      	cmp	r5, #0
   11664:	d0d5      	beq.n	11612 <z_arm_fault+0x2a>
	*recoverable = false;
   11666:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   1166a:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   1166c:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
   11670:	2b09      	cmp	r3, #9
   11672:	f200 80bf 	bhi.w	117f4 <z_arm_fault+0x20c>
   11676:	e8df f003 	tbb	[pc, r3]
   1167a:	b305      	.short	0xb305
   1167c:	bdbd96b7 	.word	0xbdbd96b7
   11680:	bbbdbdbd 	.word	0xbbbdbdbd
	PR_FAULT_INFO("***** HARD FAULT *****");
   11684:	4b6f      	ldr	r3, [pc, #444]	; (11844 <z_arm_fault+0x25c>)
   11686:	2201      	movs	r2, #1
   11688:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1168c:	2300      	movs	r3, #0
   1168e:	496c      	ldr	r1, [pc, #432]	; (11840 <z_arm_fault+0x258>)
   11690:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11692:	4f65      	ldr	r7, [pc, #404]	; (11828 <z_arm_fault+0x240>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   11694:	f8cd 8000 	str.w	r8, [sp]
   11698:	f015 fe32 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   1169c:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   116a0:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   116a2:	f016 0602 	ands.w	r6, r6, #2
   116a6:	d005      	beq.n	116b4 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   116a8:	4b67      	ldr	r3, [pc, #412]	; (11848 <z_arm_fault+0x260>)
	PR_FAULT_INFO(
   116aa:	e9cd 8301 	strd	r8, r3, [sp, #4]
   116ae:	f8cd 8000 	str.w	r8, [sp]
   116b2:	e006      	b.n	116c2 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   116b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   116b6:	2b00      	cmp	r3, #0
   116b8:	da0a      	bge.n	116d0 <z_arm_fault+0xe8>
		PR_EXC("  Debug event");
   116ba:	4b64      	ldr	r3, [pc, #400]	; (1184c <z_arm_fault+0x264>)
   116bc:	9600      	str	r6, [sp, #0]
   116be:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
   116c2:	2300      	movs	r3, #0
   116c4:	2201      	movs	r2, #1
   116c6:	4618      	mov	r0, r3
   116c8:	495d      	ldr	r1, [pc, #372]	; (11840 <z_arm_fault+0x258>)
   116ca:	f015 fe19 	bl	27300 <z_log_msg_runtime_create.constprop.0>
}
   116ce:	e03b      	b.n	11748 <z_arm_fault+0x160>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   116d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   116d2:	005b      	lsls	r3, r3, #1
   116d4:	d577      	bpl.n	117c6 <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   116d6:	4b5e      	ldr	r3, [pc, #376]	; (11850 <z_arm_fault+0x268>)
   116d8:	2201      	movs	r2, #1
   116da:	e9cd 6301 	strd	r6, r3, [sp, #4]
   116de:	4630      	mov	r0, r6
   116e0:	4633      	mov	r3, r6
   116e2:	4957      	ldr	r1, [pc, #348]	; (11840 <z_arm_fault+0x258>)
   116e4:	9600      	str	r6, [sp, #0]
   116e6:	f015 fe0b 	bl	27300 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   116ea:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   116ec:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   116ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   116f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   116f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   116f8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   116fc:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   116fe:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   11706:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1170c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11710:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11714:	429a      	cmp	r2, r3
   11716:	d00a      	beq.n	1172e <z_arm_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   11718:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1171a:	b2db      	uxtb	r3, r3
   1171c:	2b00      	cmp	r3, #0
   1171e:	d034      	beq.n	1178a <z_arm_fault+0x1a2>
			reason = mem_manage_fault(esf, 1, recoverable);
   11720:	2001      	movs	r0, #1
   11722:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   11726:	f7ff fd95 	bl	11254 <mem_manage_fault.constprop.0>
   1172a:	4604      	mov	r4, r0
		break;
   1172c:	e00c      	b.n	11748 <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1172e:	682b      	ldr	r3, [r5, #0]
   11730:	2201      	movs	r2, #1
   11732:	9303      	str	r3, [sp, #12]
   11734:	4b47      	ldr	r3, [pc, #284]	; (11854 <z_arm_fault+0x26c>)
   11736:	4630      	mov	r0, r6
   11738:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1173c:	4940      	ldr	r1, [pc, #256]	; (11840 <z_arm_fault+0x258>)
   1173e:	4633      	mov	r3, r6
   11740:	9600      	str	r6, [sp, #0]
   11742:	f015 fddd 	bl	27300 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   11746:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11748:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1174c:	b9d3      	cbnz	r3, 11784 <z_arm_fault+0x19c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1174e:	aa08      	add	r2, sp, #32
   11750:	f105 0620 	add.w	r6, r5, #32
   11754:	4613      	mov	r3, r2
   11756:	6828      	ldr	r0, [r5, #0]
   11758:	6869      	ldr	r1, [r5, #4]
   1175a:	3508      	adds	r5, #8
   1175c:	c303      	stmia	r3!, {r0, r1}
   1175e:	42b5      	cmp	r5, r6
   11760:	461a      	mov	r2, r3
   11762:	d1f7      	bne.n	11754 <z_arm_fault+0x16c>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11766:	f1b9 0f00 	cmp.w	r9, #0
   1176a:	d057      	beq.n	1181c <z_arm_fault+0x234>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1176c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11770:	b922      	cbnz	r2, 1177c <z_arm_fault+0x194>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11772:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11776:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1177a:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   1177c:	4620      	mov	r0, r4
   1177e:	a908      	add	r1, sp, #32
   11780:	f7ff fbda 	bl	10f38 <z_arm_fatal_error>
}
   11784:	b010      	add	sp, #64	; 0x40
   11786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1178c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   11790:	d005      	beq.n	1179e <z_arm_fault+0x1b6>
			reason = bus_fault(esf, 1, recoverable);
   11792:	2001      	movs	r0, #1
   11794:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   11798:	f7ff fe0a 	bl	113b0 <bus_fault.constprop.0>
   1179c:	e7c5      	b.n	1172a <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   117a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   117a4:	d302      	bcc.n	117ac <z_arm_fault+0x1c4>
		reason = usage_fault(esf);
   117a6:	f7ff fe91 	bl	114cc <usage_fault.constprop.0>
   117aa:	e7be      	b.n	1172a <z_arm_fault+0x142>
			__ASSERT(0,
   117ac:	492a      	ldr	r1, [pc, #168]	; (11858 <z_arm_fault+0x270>)
   117ae:	f240 23f2 	movw	r3, #754	; 0x2f2
   117b2:	4a1f      	ldr	r2, [pc, #124]	; (11830 <z_arm_fault+0x248>)
   117b4:	481f      	ldr	r0, [pc, #124]	; (11834 <z_arm_fault+0x24c>)
   117b6:	f014 fd52 	bl	2625e <assert_print>
   117ba:	4828      	ldr	r0, [pc, #160]	; (1185c <z_arm_fault+0x274>)
   117bc:	f014 fd4f 	bl	2625e <assert_print>
   117c0:	f240 21f2 	movw	r1, #754	; 0x2f2
   117c4:	e731      	b.n	1162a <z_arm_fault+0x42>
		__ASSERT(0,
   117c6:	4924      	ldr	r1, [pc, #144]	; (11858 <z_arm_fault+0x270>)
   117c8:	f240 23f6 	movw	r3, #758	; 0x2f6
   117cc:	4a18      	ldr	r2, [pc, #96]	; (11830 <z_arm_fault+0x248>)
   117ce:	4819      	ldr	r0, [pc, #100]	; (11834 <z_arm_fault+0x24c>)
   117d0:	f014 fd45 	bl	2625e <assert_print>
   117d4:	4822      	ldr	r0, [pc, #136]	; (11860 <z_arm_fault+0x278>)
   117d6:	f014 fd42 	bl	2625e <assert_print>
   117da:	f240 21f6 	movw	r1, #758	; 0x2f6
   117de:	e724      	b.n	1162a <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   117e0:	2000      	movs	r0, #0
   117e2:	f10d 011f 	add.w	r1, sp, #31
   117e6:	e79e      	b.n	11726 <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
   117e8:	2000      	movs	r0, #0
   117ea:	f10d 011f 	add.w	r1, sp, #31
   117ee:	e7d3      	b.n	11798 <z_arm_fault+0x1b0>
	PR_FAULT_INFO(
   117f0:	4b1c      	ldr	r3, [pc, #112]	; (11864 <z_arm_fault+0x27c>)
   117f2:	e75a      	b.n	116aa <z_arm_fault+0xc2>
	PR_FAULT_INFO("***** %s %d) *****",
   117f4:	4a1c      	ldr	r2, [pc, #112]	; (11868 <z_arm_fault+0x280>)
   117f6:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   117fa:	4b1c      	ldr	r3, [pc, #112]	; (1186c <z_arm_fault+0x284>)
   117fc:	bf18      	it	ne
   117fe:	4613      	movne	r3, r2
   11800:	3f10      	subs	r7, #16
   11802:	e9cd 3703 	strd	r3, r7, [sp, #12]
   11806:	4b1a      	ldr	r3, [pc, #104]	; (11870 <z_arm_fault+0x288>)
   11808:	2201      	movs	r2, #1
   1180a:	9302      	str	r3, [sp, #8]
   1180c:	2300      	movs	r3, #0
   1180e:	490c      	ldr	r1, [pc, #48]	; (11840 <z_arm_fault+0x258>)
   11810:	4618      	mov	r0, r3
   11812:	e9cd 3300 	strd	r3, r3, [sp]
   11816:	f015 fd73 	bl	27300 <z_log_msg_runtime_create.constprop.0>
}
   1181a:	e795      	b.n	11748 <z_arm_fault+0x160>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1181c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11820:	f023 0301 	bic.w	r3, r3, #1
   11824:	e7a9      	b.n	1177a <z_arm_fault+0x192>
   11826:	bf00      	nop
   11828:	e000ed00 	.word	0xe000ed00
   1182c:	0002ebbf 	.word	0x0002ebbf
   11830:	0002e92a 	.word	0x0002e92a
   11834:	0002d095 	.word	0x0002d095
   11838:	0002ebd2 	.word	0x0002ebd2
   1183c:	0002ec10 	.word	0x0002ec10
   11840:	0002c14c 	.word	0x0002c14c
   11844:	0002ec33 	.word	0x0002ec33
   11848:	0002ec4a 	.word	0x0002ec4a
   1184c:	0002ec6b 	.word	0x0002ec6b
   11850:	0002ec79 	.word	0x0002ec79
   11854:	0002ec98 	.word	0x0002ec98
   11858:	0003297c 	.word	0x0003297c
   1185c:	0002ecb4 	.word	0x0002ecb4
   11860:	0002ecd8 	.word	0x0002ecd8
   11864:	0002ed08 	.word	0x0002ed08
   11868:	0002eba6 	.word	0x0002eba6
   1186c:	0002eb91 	.word	0x0002eb91
   11870:	0002ed2c 	.word	0x0002ed2c

00011874 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11874:	4b04      	ldr	r3, [pc, #16]	; (11888 <z_arm_fault_init+0x14>)
   11876:	695a      	ldr	r2, [r3, #20]
   11878:	f042 0210 	orr.w	r2, r2, #16
   1187c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1187e:	695a      	ldr	r2, [r3, #20]
   11880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   11884:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11886:	4770      	bx	lr
   11888:	e000ed00 	.word	0xe000ed00

0001188c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1188c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11890:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11894:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11896:	4672      	mov	r2, lr
	bl z_arm_fault
   11898:	f7ff fea6 	bl	115e8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1189c:	bd01      	pop	{r0, pc}
   1189e:	bf00      	nop

000118a0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   118a0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   118a2:	2120      	movs	r1, #32
   118a4:	4803      	ldr	r0, [pc, #12]	; (118b4 <z_arm_interrupt_init+0x14>)
   118a6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   118a8:	3301      	adds	r3, #1
   118aa:	2b45      	cmp	r3, #69	; 0x45
   118ac:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   118b0:	d1f9      	bne.n	118a6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   118b2:	4770      	bx	lr
   118b4:	e000e100 	.word	0xe000e100

000118b8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   118b8:	2000      	movs	r0, #0
    msr CONTROL, r0
   118ba:	f380 8814 	msr	CONTROL, r0
    isb
   118be:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   118c2:	2000      	movs	r0, #0
    msr MSPLIM, r0
   118c4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   118c8:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   118cc:	f7fd fb0a 	bl	eee4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   118d0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   118d2:	490e      	ldr	r1, [pc, #56]	; (1190c <__start+0x54>)
    str r0, [r1]
   118d4:	6008      	str	r0, [r1, #0]
    dsb
   118d6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   118da:	480d      	ldr	r0, [pc, #52]	; (11910 <__start+0x58>)
    msr msp, r0
   118dc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   118e0:	f000 f83e 	bl	11960 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   118e4:	2020      	movs	r0, #32
    msr BASEPRI, r0
   118e6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   118ea:	480a      	ldr	r0, [pc, #40]	; (11914 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   118ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   118f0:	1840      	adds	r0, r0, r1
    msr PSP, r0
   118f2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   118f6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   118fa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   118fc:	4308      	orrs	r0, r1
    msr CONTROL, r0
   118fe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11902:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11906:	f7ff fbcd 	bl	110a4 <z_arm_prep_c>
   1190a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1190c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11910:	20034d70 	.word	0x20034d70
    ldr r0, =z_interrupt_stacks
   11914:	20034030 	.word	0x20034030

00011918 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11918:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1191c:	4905      	ldr	r1, [pc, #20]	; (11934 <sys_arch_reboot+0x1c>)
   1191e:	4b06      	ldr	r3, [pc, #24]	; (11938 <sys_arch_reboot+0x20>)
   11920:	68ca      	ldr	r2, [r1, #12]
   11922:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11926:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11928:	60cb      	str	r3, [r1, #12]
   1192a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1192e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11930:	e7fd      	b.n	1192e <sys_arch_reboot+0x16>
   11932:	bf00      	nop
   11934:	e000ed00 	.word	0xe000ed00
   11938:	05fa0004 	.word	0x05fa0004

0001193c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   1193c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1193e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11940:	4906      	ldr	r1, [pc, #24]	; (1195c <z_arm_clear_arm_mpu_config+0x20>)
   11942:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   11946:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   1194a:	4293      	cmp	r3, r2
   1194c:	db00      	blt.n	11950 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1194e:	4770      	bx	lr
  mpu->RNR = rnr;
   11950:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   11954:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   11958:	3301      	adds	r3, #1
   1195a:	e7f6      	b.n	1194a <z_arm_clear_arm_mpu_config+0xe>
   1195c:	e000ed00 	.word	0xe000ed00

00011960 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11960:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11962:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11964:	2400      	movs	r4, #0
   11966:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1196a:	f7ff ffe7 	bl	1193c <z_arm_clear_arm_mpu_config>
   1196e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   11970:	f04f 30ff 	mov.w	r0, #4294967295
   11974:	4a0c      	ldr	r2, [pc, #48]	; (119a8 <z_arm_init_arch_hw_at_boot+0x48>)
   11976:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1197a:	3301      	adds	r3, #1
   1197c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1197e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11982:	d1f8      	bne.n	11976 <z_arm_init_arch_hw_at_boot+0x16>
   11984:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11986:	f04f 30ff 	mov.w	r0, #4294967295
   1198a:	4a07      	ldr	r2, [pc, #28]	; (119a8 <z_arm_init_arch_hw_at_boot+0x48>)
   1198c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11990:	3301      	adds	r3, #1
   11992:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11994:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11998:	d1f8      	bne.n	1198c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1199a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1199c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   119a0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   119a4:	bd10      	pop	{r4, pc}
   119a6:	bf00      	nop
   119a8:	e000e100 	.word	0xe000e100

000119ac <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   119ac:	4b08      	ldr	r3, [pc, #32]	; (119d0 <z_impl_k_thread_abort+0x24>)
   119ae:	689b      	ldr	r3, [r3, #8]
   119b0:	4283      	cmp	r3, r0
   119b2:	d10b      	bne.n	119cc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   119b4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   119b8:	b143      	cbz	r3, 119cc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   119ba:	4b06      	ldr	r3, [pc, #24]	; (119d4 <z_impl_k_thread_abort+0x28>)
   119bc:	685a      	ldr	r2, [r3, #4]
   119be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   119c2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   119c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   119c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   119ca:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   119cc:	f011 b8ba 	b.w	22b44 <z_thread_abort>
   119d0:	20022b9c 	.word	0x20022b9c
   119d4:	e000ed00 	.word	0xe000ed00

000119d8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   119d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   119da:	4c09      	ldr	r4, [pc, #36]	; (11a00 <z_arm_configure_static_mpu_regions+0x28>)
   119dc:	4a09      	ldr	r2, [pc, #36]	; (11a04 <z_arm_configure_static_mpu_regions+0x2c>)
   119de:	4623      	mov	r3, r4
   119e0:	2101      	movs	r1, #1
   119e2:	4809      	ldr	r0, [pc, #36]	; (11a08 <z_arm_configure_static_mpu_regions+0x30>)
   119e4:	f000 f918 	bl	11c18 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   119e8:	2300      	movs	r3, #0
   119ea:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   119ec:	4b07      	ldr	r3, [pc, #28]	; (11a0c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   119ee:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   119f0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   119f2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   119f4:	9301      	str	r3, [sp, #4]
   119f6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   119f8:	f000 f932 	bl	11c60 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   119fc:	b004      	add	sp, #16
   119fe:	bd10      	pop	{r4, pc}
   11a00:	20070000 	.word	0x20070000
   11a04:	20008000 	.word	0x20008000
   11a08:	0002c8b8 	.word	0x0002c8b8
   11a0c:	20008d70 	.word	0x20008d70

00011a10 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11a10:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   11a12:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11a14:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11a16:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11a1a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   11a1e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11a20:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11a22:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11a24:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   11a28:	4905      	ldr	r1, [pc, #20]	; (11a40 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11a2a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11a2e:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   11a32:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   11a36:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   11a3a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11a3e:	bd10      	pop	{r4, pc}
   11a40:	e000ed00 	.word	0xe000ed00

00011a44 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   11a44:	2807      	cmp	r0, #7
{
   11a46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11a48:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   11a4a:	d90f      	bls.n	11a6c <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11a4c:	4b09      	ldr	r3, [pc, #36]	; (11a74 <region_allocate_and_init+0x30>)
   11a4e:	9003      	str	r0, [sp, #12]
   11a50:	9302      	str	r3, [sp, #8]
   11a52:	2300      	movs	r3, #0
   11a54:	2201      	movs	r2, #1
   11a56:	4618      	mov	r0, r3
   11a58:	e9cd 3300 	strd	r3, r3, [sp]
   11a5c:	4906      	ldr	r1, [pc, #24]	; (11a78 <region_allocate_and_init+0x34>)
   11a5e:	f015 fc6a 	bl	27336 <z_log_msg_runtime_create.constprop.0>
   11a62:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   11a66:	4620      	mov	r0, r4
   11a68:	b004      	add	sp, #16
   11a6a:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   11a6c:	f7ff ffd0 	bl	11a10 <region_init>
	return index;
   11a70:	e7f9      	b.n	11a66 <region_allocate_and_init+0x22>
   11a72:	bf00      	nop
   11a74:	0002ed43 	.word	0x0002ed43
   11a78:	0002c134 	.word	0x0002c134

00011a7c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a80:	4689      	mov	r9, r1
   11a82:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11a84:	4606      	mov	r6, r0
   11a86:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   11a8a:	4d54      	ldr	r5, [pc, #336]	; (11bdc <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11a8c:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   11a8e:	45c8      	cmp	r8, r9
   11a90:	da2d      	bge.n	11aee <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   11a92:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11a96:	f1ba 0f00 	cmp.w	sl, #0
   11a9a:	d04a      	beq.n	11b32 <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   11a9c:	f1ba 0f1f 	cmp.w	sl, #31
   11aa0:	d917      	bls.n	11ad2 <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   11aa2:	f01a 0f1f 	tst.w	sl, #31
   11aa6:	d114      	bne.n	11ad2 <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   11aa8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11aac:	f01b 0f1f 	tst.w	fp, #31
   11ab0:	d10f      	bne.n	11ad2 <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11ab2:	4658      	mov	r0, fp
   11ab4:	f015 fc36 	bl	27324 <arm_cmse_mpu_region_get>
   11ab8:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11aba:	eb0a 000b 	add.w	r0, sl, fp
   11abe:	3801      	subs	r0, #1
   11ac0:	f015 fc30 	bl	27324 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11ac4:	4287      	cmp	r7, r0
   11ac6:	d016      	beq.n	11af6 <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   11ac8:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11acc:	4b44      	ldr	r3, [pc, #272]	; (11be0 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   11ace:	9703      	str	r7, [sp, #12]
   11ad0:	e002      	b.n	11ad8 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   11ad2:	4b44      	ldr	r3, [pc, #272]	; (11be4 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   11ad4:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   11ad8:	9302      	str	r3, [sp, #8]
   11ada:	2300      	movs	r3, #0
   11adc:	2201      	movs	r2, #1
   11ade:	4618      	mov	r0, r3
   11ae0:	e9cd 3300 	strd	r3, r3, [sp]
   11ae4:	4940      	ldr	r1, [pc, #256]	; (11be8 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   11ae6:	f015 fc26 	bl	27336 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   11aea:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11aee:	4620      	mov	r0, r4
   11af0:	b009      	add	sp, #36	; 0x24
   11af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   11af6:	f117 0f16 	cmn.w	r7, #22
   11afa:	d0e7      	beq.n	11acc <mpu_configure_regions_and_partition.constprop.0+0x50>
   11afc:	42bc      	cmp	r4, r7
   11afe:	dde5      	ble.n	11acc <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   11b00:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11b04:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   11b08:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11b0c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11b10:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11b14:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11b18:	e9d6 3200 	ldrd	r3, r2, [r6]
   11b1c:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   11b1e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11b20:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   11b24:	d11d      	bne.n	11b62 <mpu_configure_regions_and_partition.constprop.0+0xe6>
   11b26:	45d3      	cmp	fp, sl
   11b28:	d107      	bne.n	11b3a <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   11b2a:	4631      	mov	r1, r6
   11b2c:	b2f8      	uxtb	r0, r7
   11b2e:	f015 fc12 	bl	27356 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11b32:	f108 0801 	add.w	r8, r8, #1
   11b36:	360c      	adds	r6, #12
   11b38:	e7a9      	b.n	11a8e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   11b3a:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   11b3c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11b40:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   11b44:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   11b48:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   11b4c:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   11b4e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   11b52:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   11b54:	f015 fbff 	bl	27356 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11b58:	f110 0f16 	cmn.w	r0, #22
   11b5c:	d0c5      	beq.n	11aea <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   11b5e:	1c44      	adds	r4, r0, #1
   11b60:	e7e7      	b.n	11b32 <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   11b62:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11b66:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   11b6a:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11b6c:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11b70:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11b74:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   11b76:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   11b78:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   11b7a:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   11b7c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   11b80:	d0e8      	beq.n	11b54 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   11b82:	f015 fbe8 	bl	27356 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11b86:	f110 0f16 	cmn.w	r0, #22
   11b8a:	d0ae      	beq.n	11aea <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   11b8c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11b90:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11b94:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   11b98:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
   11b9c:	f362 0304 	bfi	r3, r2, #0, #5
   11ba0:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   11ba4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11ba8:	f89d 2018 	ldrb.w	r2, [sp, #24]
   11bac:	085b      	lsrs	r3, r3, #1
   11bae:	f363 1247 	bfi	r2, r3, #5, #3
   11bb2:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   11bb6:	e9d6 3200 	ldrd	r3, r2, [r6]
   11bba:	4413      	add	r3, r2
   11bbc:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11bbe:	f023 031f 	bic.w	r3, r3, #31
   11bc2:	445b      	add	r3, fp
   11bc4:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   11bc8:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   11bca:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   11bce:	a904      	add	r1, sp, #16
   11bd0:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   11bd2:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   11bd4:	f7ff ff36 	bl	11a44 <region_allocate_and_init>
   11bd8:	e7be      	b.n	11b58 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   11bda:	bf00      	nop
   11bdc:	e000ed00 	.word	0xe000ed00
   11be0:	0002ed8c 	.word	0x0002ed8c
   11be4:	0002ed69 	.word	0x0002ed69
   11be8:	0002c134 	.word	0x0002c134

00011bec <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11bec:	2205      	movs	r2, #5
   11bee:	4b04      	ldr	r3, [pc, #16]	; (11c00 <arm_core_mpu_enable+0x14>)
   11bf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11bf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11bf8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11bfc:	4770      	bx	lr
   11bfe:	bf00      	nop
   11c00:	e000ed00 	.word	0xe000ed00

00011c04 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11c04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11c08:	2200      	movs	r2, #0
   11c0a:	4b02      	ldr	r3, [pc, #8]	; (11c14 <arm_core_mpu_disable+0x10>)
   11c0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11c10:	4770      	bx	lr
   11c12:	bf00      	nop
   11c14:	e000ed00 	.word	0xe000ed00

00011c18 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11c18:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11c1a:	4d0c      	ldr	r5, [pc, #48]	; (11c4c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   11c1c:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11c1e:	782a      	ldrb	r2, [r5, #0]
   11c20:	f7ff ff2c 	bl	11a7c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11c24:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   11c26:	3016      	adds	r0, #22
   11c28:	d10f      	bne.n	11c4a <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11c2a:	f44f 738d 	mov.w	r3, #282	; 0x11a
   11c2e:	4a08      	ldr	r2, [pc, #32]	; (11c50 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   11c30:	4908      	ldr	r1, [pc, #32]	; (11c54 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   11c32:	4809      	ldr	r0, [pc, #36]	; (11c58 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11c34:	f014 fb13 	bl	2625e <assert_print>
   11c38:	4621      	mov	r1, r4
   11c3a:	4808      	ldr	r0, [pc, #32]	; (11c5c <arm_core_mpu_configure_static_mpu_regions+0x44>)
   11c3c:	f014 fb0f 	bl	2625e <assert_print>
   11c40:	f44f 718d 	mov.w	r1, #282	; 0x11a
   11c44:	4802      	ldr	r0, [pc, #8]	; (11c50 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   11c46:	f014 fb03 	bl	26250 <assert_post_action>
			regions_num);
	}
}
   11c4a:	bd38      	pop	{r3, r4, r5, pc}
   11c4c:	200235fa 	.word	0x200235fa
   11c50:	0002edaf 	.word	0x0002edaf
   11c54:	0003297c 	.word	0x0003297c
   11c58:	0002d095 	.word	0x0002d095
   11c5c:	0002ede6 	.word	0x0002ede6

00011c60 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   11c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c64:	4e31      	ldr	r6, [pc, #196]	; (11d2c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   11c66:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11c68:	4605      	mov	r5, r0
   11c6a:	f04f 0800 	mov.w	r8, #0
   11c6e:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   11c70:	4f2f      	ldr	r7, [pc, #188]	; (11d30 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11c72:	45c8      	cmp	r8, r9
   11c74:	db02      	blt.n	11c7c <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   11c76:	b003      	add	sp, #12
   11c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   11c7c:	f8d5 a004 	ldr.w	sl, [r5, #4]
   11c80:	f1ba 0f00 	cmp.w	sl, #0
   11c84:	d04c      	beq.n	11d20 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11c86:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11c88:	4608      	mov	r0, r1
   11c8a:	9101      	str	r1, [sp, #4]
   11c8c:	f015 fb4a 	bl	27324 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11c90:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11c92:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11c94:	eb0a 0001 	add.w	r0, sl, r1
   11c98:	3801      	subs	r0, #1
   11c9a:	f015 fb43 	bl	27324 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11c9e:	4284      	cmp	r4, r0
   11ca0:	f04f 0214 	mov.w	r2, #20
   11ca4:	4b23      	ldr	r3, [pc, #140]	; (11d34 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   11ca6:	d015      	beq.n	11cd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   11ca8:	fb02 f308 	mul.w	r3, r2, r8
   11cac:	f06f 0215 	mvn.w	r2, #21
   11cb0:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   11cb4:	f44f 7395 	mov.w	r3, #298	; 0x12a
   11cb8:	4a1f      	ldr	r2, [pc, #124]	; (11d38 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11cba:	4920      	ldr	r1, [pc, #128]	; (11d3c <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   11cbc:	4820      	ldr	r0, [pc, #128]	; (11d40 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   11cbe:	f014 face 	bl	2625e <assert_print>
   11cc2:	4649      	mov	r1, r9
   11cc4:	481f      	ldr	r0, [pc, #124]	; (11d44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   11cc6:	f014 faca 	bl	2625e <assert_print>
   11cca:	f44f 7195 	mov.w	r1, #298	; 0x12a
   11cce:	481a      	ldr	r0, [pc, #104]	; (11d38 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11cd0:	f014 fabe 	bl	26250 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11cd4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11cd8:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11cda:	d0eb      	beq.n	11cb4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11cdc:	7819      	ldrb	r1, [r3, #0]
   11cde:	42a1      	cmp	r1, r4
   11ce0:	dde8      	ble.n	11cb4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   11ce2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   11ce6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   11cea:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   11cee:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11cf2:	f100 0108 	add.w	r1, r0, #8
   11cf6:	7b00      	ldrb	r0, [r0, #12]
   11cf8:	f364 0004 	bfi	r0, r4, #0, #5
   11cfc:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   11cfe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11d02:	790c      	ldrb	r4, [r1, #4]
   11d04:	0840      	lsrs	r0, r0, #1
   11d06:	f360 1447 	bfi	r4, r0, #5, #3
   11d0a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   11d0c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11d10:	f021 011f 	bic.w	r1, r1, #31
   11d14:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   11d16:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   11d1a:	f021 011f 	bic.w	r1, r1, #31
   11d1e:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11d20:	f108 0801 	add.w	r8, r8, #1
   11d24:	3614      	adds	r6, #20
   11d26:	350c      	adds	r5, #12
   11d28:	e7a3      	b.n	11c72 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   11d2a:	bf00      	nop
   11d2c:	20022658 	.word	0x20022658
   11d30:	e000ed00 	.word	0xe000ed00
   11d34:	200235fa 	.word	0x200235fa
   11d38:	0002edaf 	.word	0x0002edaf
   11d3c:	0003297c 	.word	0x0003297c
   11d40:	0002d095 	.word	0x0002d095
   11d44:	0002ee12 	.word	0x0002ee12

00011d48 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   11d48:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11d4a:	4d1f      	ldr	r5, [pc, #124]	; (11dc8 <z_arm_mpu_init+0x80>)
   11d4c:	682c      	ldr	r4, [r5, #0]
   11d4e:	2c08      	cmp	r4, #8
   11d50:	d910      	bls.n	11d74 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   11d52:	f240 1351 	movw	r3, #337	; 0x151
   11d56:	4a1d      	ldr	r2, [pc, #116]	; (11dcc <z_arm_mpu_init+0x84>)
   11d58:	491d      	ldr	r1, [pc, #116]	; (11dd0 <z_arm_mpu_init+0x88>)
   11d5a:	481e      	ldr	r0, [pc, #120]	; (11dd4 <z_arm_mpu_init+0x8c>)
   11d5c:	f014 fa7f 	bl	2625e <assert_print>
   11d60:	4621      	mov	r1, r4
   11d62:	2208      	movs	r2, #8
   11d64:	481c      	ldr	r0, [pc, #112]	; (11dd8 <z_arm_mpu_init+0x90>)
   11d66:	f014 fa7a 	bl	2625e <assert_print>
   11d6a:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   11d6e:	4817      	ldr	r0, [pc, #92]	; (11dcc <z_arm_mpu_init+0x84>)
   11d70:	f014 fa6e 	bl	26250 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11d74:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   11d76:	f7ff ff45 	bl	11c04 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   11d7a:	4b18      	ldr	r3, [pc, #96]	; (11ddc <z_arm_mpu_init+0x94>)
   11d7c:	4a18      	ldr	r2, [pc, #96]	; (11de0 <z_arm_mpu_init+0x98>)
   11d7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11d82:	4284      	cmp	r4, r0
   11d84:	d117      	bne.n	11db6 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   11d86:	4b17      	ldr	r3, [pc, #92]	; (11de4 <z_arm_mpu_init+0x9c>)
   11d88:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   11d8a:	f7ff ff2f 	bl	11bec <arm_core_mpu_enable>
	__ASSERT(
   11d8e:	4b13      	ldr	r3, [pc, #76]	; (11ddc <z_arm_mpu_init+0x94>)
   11d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   11d94:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11d98:	2b08      	cmp	r3, #8
   11d9a:	d013      	beq.n	11dc4 <z_arm_mpu_init+0x7c>
   11d9c:	4912      	ldr	r1, [pc, #72]	; (11de8 <z_arm_mpu_init+0xa0>)
   11d9e:	f240 13bb 	movw	r3, #443	; 0x1bb
   11da2:	4a0a      	ldr	r2, [pc, #40]	; (11dcc <z_arm_mpu_init+0x84>)
   11da4:	480b      	ldr	r0, [pc, #44]	; (11dd4 <z_arm_mpu_init+0x8c>)
   11da6:	f014 fa5a 	bl	2625e <assert_print>
   11daa:	4810      	ldr	r0, [pc, #64]	; (11dec <z_arm_mpu_init+0xa4>)
   11dac:	f014 fa57 	bl	2625e <assert_print>
   11db0:	f240 11bb 	movw	r1, #443	; 0x1bb
   11db4:	e7db      	b.n	11d6e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11db6:	6869      	ldr	r1, [r5, #4]
   11db8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11dbc:	f7ff fe28 	bl	11a10 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11dc0:	3001      	adds	r0, #1
   11dc2:	e7de      	b.n	11d82 <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11dc4:	2000      	movs	r0, #0
   11dc6:	bd38      	pop	{r3, r4, r5, pc}
   11dc8:	0002c8c4 	.word	0x0002c8c4
   11dcc:	0002edaf 	.word	0x0002edaf
   11dd0:	0003297c 	.word	0x0003297c
   11dd4:	0002d095 	.word	0x0002d095
   11dd8:	0002ee41 	.word	0x0002ee41
   11ddc:	e000ed00 	.word	0xe000ed00
   11de0:	0044ffaa 	.word	0x0044ffaa
   11de4:	200235fa 	.word	0x200235fa
   11de8:	0002ee75 	.word	0x0002ee75
   11dec:	0002eec5 	.word	0x0002eec5

00011df0 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11df0:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   11df2:	4b0b      	ldr	r3, [pc, #44]	; (11e20 <malloc_prepare+0x30>)
   11df4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11df8:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   11dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11e00:	d20c      	bcs.n	11e1c <malloc_prepare+0x2c>
   11e02:	4908      	ldr	r1, [pc, #32]	; (11e24 <malloc_prepare+0x34>)
   11e04:	2381      	movs	r3, #129	; 0x81
   11e06:	4a08      	ldr	r2, [pc, #32]	; (11e28 <malloc_prepare+0x38>)
   11e08:	4808      	ldr	r0, [pc, #32]	; (11e2c <malloc_prepare+0x3c>)
   11e0a:	f014 fa28 	bl	2625e <assert_print>
   11e0e:	4808      	ldr	r0, [pc, #32]	; (11e30 <malloc_prepare+0x40>)
   11e10:	f014 fa25 	bl	2625e <assert_print>
   11e14:	2181      	movs	r1, #129	; 0x81
   11e16:	4804      	ldr	r0, [pc, #16]	; (11e28 <malloc_prepare+0x38>)
   11e18:	f014 fa1a 	bl	26250 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   11e1c:	2000      	movs	r0, #0
   11e1e:	bd08      	pop	{r3, pc}
   11e20:	2003acb0 	.word	0x2003acb0
   11e24:	0002ef16 	.word	0x0002ef16
   11e28:	0002eee6 	.word	0x0002eee6
   11e2c:	0002d095 	.word	0x0002d095
   11e30:	0002ef5d 	.word	0x0002ef5d

00011e34 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11e34:	4b01      	ldr	r3, [pc, #4]	; (11e3c <__stdout_hook_install+0x8>)
   11e36:	6018      	str	r0, [r3, #0]
}
   11e38:	4770      	bx	lr
   11e3a:	bf00      	nop
   11e3c:	20008468 	.word	0x20008468

00011e40 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   11e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e42:	4606      	mov	r6, r0
   11e44:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   11e46:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   11e48:	4f06      	ldr	r7, [pc, #24]	; (11e64 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   11e4a:	42ac      	cmp	r4, r5
   11e4c:	da08      	bge.n	11e60 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   11e4e:	683b      	ldr	r3, [r7, #0]
   11e50:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11e52:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   11e54:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   11e56:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11e5a:	d001      	beq.n	11e60 <z_impl_zephyr_read_stdin+0x20>
   11e5c:	280d      	cmp	r0, #13
   11e5e:	d1f4      	bne.n	11e4a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   11e60:	4620      	mov	r0, r4
   11e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e64:	20008464 	.word	0x20008464

00011e68 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   11e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e6a:	460d      	mov	r5, r1
   11e6c:	4f09      	ldr	r7, [pc, #36]	; (11e94 <z_impl_zephyr_write_stdout+0x2c>)
   11e6e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11e70:	f1c0 0401 	rsb	r4, r0, #1
   11e74:	19a3      	adds	r3, r4, r6
   11e76:	429d      	cmp	r5, r3
   11e78:	dc01      	bgt.n	11e7e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   11e7a:	4628      	mov	r0, r5
   11e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11e7e:	7873      	ldrb	r3, [r6, #1]
   11e80:	2b0a      	cmp	r3, #10
   11e82:	d102      	bne.n	11e8a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11e84:	200d      	movs	r0, #13
   11e86:	683b      	ldr	r3, [r7, #0]
   11e88:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   11e8a:	683b      	ldr	r3, [r7, #0]
   11e8c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11e90:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11e92:	e7ef      	b.n	11e74 <z_impl_zephyr_write_stdout+0xc>
   11e94:	20008468 	.word	0x20008468

00011e98 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   11e98:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11e9a:	2105      	movs	r1, #5
   11e9c:	4801      	ldr	r0, [pc, #4]	; (11ea4 <_exit+0xc>)
   11e9e:	f7ff ffe3 	bl	11e68 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11ea2:	e7fe      	b.n	11ea2 <_exit+0xa>
   11ea4:	0002efe4 	.word	0x0002efe4

00011ea8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11ea8:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11eaa:	4c07      	ldr	r4, [pc, #28]	; (11ec8 <_sbrk+0x20>)
   11eac:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11eae:	18c2      	adds	r2, r0, r3
   11eb0:	4806      	ldr	r0, [pc, #24]	; (11ecc <_sbrk+0x24>)
   11eb2:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11eb6:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   11eba:	428a      	cmp	r2, r1
		heap_sz += count;
   11ebc:	bf36      	itet	cc
   11ebe:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11ec0:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11ec4:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   11ec6:	bd10      	pop	{r4, pc}
   11ec8:	2002266c 	.word	0x2002266c
   11ecc:	2003acb0 	.word	0x2003acb0

00011ed0 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   11ed0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11ed2:	4604      	mov	r4, r0
   11ed4:	b958      	cbnz	r0, 11eee <__retarget_lock_init_recursive+0x1e>
   11ed6:	4911      	ldr	r1, [pc, #68]	; (11f1c <__retarget_lock_init_recursive+0x4c>)
   11ed8:	f240 137b 	movw	r3, #379	; 0x17b
   11edc:	4a10      	ldr	r2, [pc, #64]	; (11f20 <__retarget_lock_init_recursive+0x50>)
   11ede:	4811      	ldr	r0, [pc, #68]	; (11f24 <__retarget_lock_init_recursive+0x54>)
   11ee0:	f014 f9bd 	bl	2625e <assert_print>
   11ee4:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11ee8:	480d      	ldr	r0, [pc, #52]	; (11f20 <__retarget_lock_init_recursive+0x50>)
   11eea:	f014 f9b1 	bl	26250 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   11eee:	2014      	movs	r0, #20
   11ef0:	f011 ff70 	bl	23dd4 <malloc>
   11ef4:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11ef6:	b960      	cbnz	r0, 11f12 <__retarget_lock_init_recursive+0x42>
   11ef8:	490b      	ldr	r1, [pc, #44]	; (11f28 <__retarget_lock_init_recursive+0x58>)
   11efa:	f240 1383 	movw	r3, #387	; 0x183
   11efe:	4a08      	ldr	r2, [pc, #32]	; (11f20 <__retarget_lock_init_recursive+0x50>)
   11f00:	4808      	ldr	r0, [pc, #32]	; (11f24 <__retarget_lock_init_recursive+0x54>)
   11f02:	f014 f9ac 	bl	2625e <assert_print>
   11f06:	4809      	ldr	r0, [pc, #36]	; (11f2c <__retarget_lock_init_recursive+0x5c>)
   11f08:	f014 f9a9 	bl	2625e <assert_print>
   11f0c:	f240 1183 	movw	r1, #387	; 0x183
   11f10:	e7ea      	b.n	11ee8 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   11f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   11f16:	f018 bd1f 	b.w	2a958 <z_impl_k_mutex_init>
   11f1a:	bf00      	nop
   11f1c:	0002efeb 	.word	0x0002efeb
   11f20:	0002eee6 	.word	0x0002eee6
   11f24:	0002d095 	.word	0x0002d095
   11f28:	0002efea 	.word	0x0002efea
   11f2c:	0002f026 	.word	0x0002f026

00011f30 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   11f30:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11f32:	b958      	cbnz	r0, 11f4c <__retarget_lock_acquire_recursive+0x1c>
   11f34:	4909      	ldr	r1, [pc, #36]	; (11f5c <__retarget_lock_acquire_recursive+0x2c>)
   11f36:	480a      	ldr	r0, [pc, #40]	; (11f60 <__retarget_lock_acquire_recursive+0x30>)
   11f38:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11f3c:	4a09      	ldr	r2, [pc, #36]	; (11f64 <__retarget_lock_acquire_recursive+0x34>)
   11f3e:	f014 f98e 	bl	2625e <assert_print>
   11f42:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   11f46:	4807      	ldr	r0, [pc, #28]	; (11f64 <__retarget_lock_acquire_recursive+0x34>)
   11f48:	f014 f982 	bl	26250 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   11f4c:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   11f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11f54:	f04f 33ff 	mov.w	r3, #4294967295
   11f58:	f00e bc64 	b.w	20824 <z_impl_k_mutex_lock>
   11f5c:	0002efeb 	.word	0x0002efeb
   11f60:	0002d095 	.word	0x0002d095
   11f64:	0002eee6 	.word	0x0002eee6

00011f68 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   11f68:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11f6a:	b958      	cbnz	r0, 11f84 <__retarget_lock_release_recursive+0x1c>
   11f6c:	4907      	ldr	r1, [pc, #28]	; (11f8c <__retarget_lock_release_recursive+0x24>)
   11f6e:	4808      	ldr	r0, [pc, #32]	; (11f90 <__retarget_lock_release_recursive+0x28>)
   11f70:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   11f74:	4a07      	ldr	r2, [pc, #28]	; (11f94 <__retarget_lock_release_recursive+0x2c>)
   11f76:	f014 f972 	bl	2625e <assert_print>
   11f7a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   11f7e:	4805      	ldr	r0, [pc, #20]	; (11f94 <__retarget_lock_release_recursive+0x2c>)
   11f80:	f014 f966 	bl	26250 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   11f84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   11f88:	f00e bd1c 	b.w	209c4 <z_impl_k_mutex_unlock>
   11f8c:	0002efeb 	.word	0x0002efeb
   11f90:	0002d095 	.word	0x0002d095
   11f94:	0002eee6 	.word	0x0002eee6

00011f98 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11f98:	b508      	push	{r3, lr}
   11f9a:	211d      	movs	r1, #29
   11f9c:	4804      	ldr	r0, [pc, #16]	; (11fb0 <__chk_fail+0x18>)
   11f9e:	f7ff ff63 	bl	11e68 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11fa2:	4040      	eors	r0, r0
   11fa4:	f380 8811 	msr	BASEPRI, r0
   11fa8:	f04f 0003 	mov.w	r0, #3
   11fac:	df02      	svc	2
	CODE_UNREACHABLE;
   11fae:	bf00      	nop
   11fb0:	0002f049 	.word	0x0002f049

00011fb4 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   11fb4:	2000      	movs	r0, #0
   11fb6:	4b02      	ldr	r3, [pc, #8]	; (11fc0 <remoteproc_mgr_boot+0xc>)
   11fb8:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11fbc:	4770      	bx	lr
   11fbe:	bf00      	nop
   11fc0:	40005000 	.word	0x40005000

00011fc4 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11fc4:	4b0e      	ldr	r3, [pc, #56]	; (12000 <bt_hex+0x3c>)
   11fc6:	2940      	cmp	r1, #64	; 0x40
   11fc8:	bf28      	it	cs
   11fca:	2140      	movcs	r1, #64	; 0x40
{
   11fcc:	b570      	push	{r4, r5, r6, lr}
   11fce:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   11fd0:	4c0c      	ldr	r4, [pc, #48]	; (12004 <bt_hex+0x40>)
   11fd2:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   11fd4:	42b0      	cmp	r0, r6
   11fd6:	f103 0302 	add.w	r3, r3, #2
   11fda:	d104      	bne.n	11fe6 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11fdc:	2300      	movs	r3, #0
   11fde:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   11fe2:	4807      	ldr	r0, [pc, #28]	; (12000 <bt_hex+0x3c>)
   11fe4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   11fe6:	7802      	ldrb	r2, [r0, #0]
   11fe8:	0912      	lsrs	r2, r2, #4
   11fea:	5ca2      	ldrb	r2, [r4, r2]
   11fec:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
   11ff4:	f002 020f 	and.w	r2, r2, #15
   11ff8:	5ca2      	ldrb	r2, [r4, r2]
   11ffa:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   11ffe:	e7e9      	b.n	11fd4 <bt_hex+0x10>
   12000:	20023619 	.word	0x20023619
   12004:	0002f0a9 	.word	0x0002f0a9

00012008 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   12008:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1200a:	7803      	ldrb	r3, [r0, #0]
   1200c:	b08b      	sub	sp, #44	; 0x2c
   1200e:	4604      	mov	r4, r0
   12010:	ad07      	add	r5, sp, #28
   12012:	2b03      	cmp	r3, #3
   12014:	d821      	bhi.n	1205a <bt_addr_le_str+0x52>
   12016:	e8df f003 	tbb	[pc, r3]
   1201a:	1a02      	.short	0x1a02
   1201c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1201e:	4912      	ldr	r1, [pc, #72]	; (12068 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   12020:	4628      	mov	r0, r5
   12022:	f018 fff4 	bl	2b00e <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   12026:	9505      	str	r5, [sp, #20]
   12028:	7863      	ldrb	r3, [r4, #1]
   1202a:	211e      	movs	r1, #30
   1202c:	9304      	str	r3, [sp, #16]
   1202e:	78a3      	ldrb	r3, [r4, #2]
   12030:	4a0e      	ldr	r2, [pc, #56]	; (1206c <bt_addr_le_str+0x64>)
   12032:	9303      	str	r3, [sp, #12]
   12034:	78e3      	ldrb	r3, [r4, #3]
   12036:	480e      	ldr	r0, [pc, #56]	; (12070 <bt_addr_le_str+0x68>)
   12038:	9302      	str	r3, [sp, #8]
   1203a:	7923      	ldrb	r3, [r4, #4]
   1203c:	9301      	str	r3, [sp, #4]
   1203e:	7963      	ldrb	r3, [r4, #5]
   12040:	9300      	str	r3, [sp, #0]
   12042:	79a3      	ldrb	r3, [r4, #6]
   12044:	f013 ff56 	bl	25ef4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   12048:	4809      	ldr	r0, [pc, #36]	; (12070 <bt_addr_le_str+0x68>)
   1204a:	b00b      	add	sp, #44	; 0x2c
   1204c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1204e:	4909      	ldr	r1, [pc, #36]	; (12074 <bt_addr_le_str+0x6c>)
   12050:	e7e6      	b.n	12020 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   12052:	4909      	ldr	r1, [pc, #36]	; (12078 <bt_addr_le_str+0x70>)
   12054:	e7e4      	b.n	12020 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   12056:	4909      	ldr	r1, [pc, #36]	; (1207c <bt_addr_le_str+0x74>)
   12058:	e7e2      	b.n	12020 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1205a:	210a      	movs	r1, #10
   1205c:	4628      	mov	r0, r5
   1205e:	4a08      	ldr	r2, [pc, #32]	; (12080 <bt_addr_le_str+0x78>)
   12060:	f013 ff48 	bl	25ef4 <snprintk>
		break;
   12064:	e7df      	b.n	12026 <bt_addr_le_str+0x1e>
   12066:	bf00      	nop
   12068:	0002d1b3 	.word	0x0002d1b3
   1206c:	0002d1d5 	.word	0x0002d1d5
   12070:	200235fb 	.word	0x200235fb
   12074:	0002d1ba 	.word	0x0002d1ba
   12078:	0002d1c1 	.word	0x0002d1c1
   1207c:	0002d1cb 	.word	0x0002d1cb
   12080:	00030a19 	.word	0x00030a19

00012084 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   12084:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   12086:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   12088:	4d09      	ldr	r5, [pc, #36]	; (120b0 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1208a:	4b0a      	ldr	r3, [pc, #40]	; (120b4 <long_wq_init+0x30>)
{
   1208c:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   1208e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   12090:	9302      	str	r3, [sp, #8]
   12092:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   12094:	f00f f99c 	bl	213d0 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   12098:	ab02      	add	r3, sp, #8
   1209a:	4628      	mov	r0, r5
   1209c:	9300      	str	r3, [sp, #0]
   1209e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   120a2:	230a      	movs	r3, #10
   120a4:	4904      	ldr	r1, [pc, #16]	; (120b8 <long_wq_init+0x34>)
   120a6:	f00f f9ad 	bl	21404 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   120aa:	4620      	mov	r0, r4
   120ac:	b005      	add	sp, #20
   120ae:	bd30      	pop	{r4, r5, pc}
   120b0:	20009588 	.word	0x20009588
   120b4:	0002f0c1 	.word	0x0002f0c1
   120b8:	20033170 	.word	0x20033170

000120bc <bt_long_wq_schedule>:
{
   120bc:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   120be:	4801      	ldr	r0, [pc, #4]	; (120c4 <bt_long_wq_schedule+0x8>)
   120c0:	f00f bac2 	b.w	21648 <k_work_schedule_for_queue>
   120c4:	20009588 	.word	0x20009588

000120c8 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   120c8:	7803      	ldrb	r3, [r0, #0]
{
   120ca:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   120cc:	2b01      	cmp	r3, #1
   120ce:	d013      	beq.n	120f8 <uuid_to_uuid128+0x30>
   120d0:	2b02      	cmp	r3, #2
   120d2:	d027      	beq.n	12124 <uuid_to_uuid128+0x5c>
   120d4:	b97b      	cbnz	r3, 120f6 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   120d6:	460a      	mov	r2, r1
   120d8:	4b18      	ldr	r3, [pc, #96]	; (1213c <uuid_to_uuid128+0x74>)
   120da:	f103 0410 	add.w	r4, r3, #16
   120de:	f853 5b04 	ldr.w	r5, [r3], #4
   120e2:	42a3      	cmp	r3, r4
   120e4:	f842 5b04 	str.w	r5, [r2], #4
   120e8:	d1f9      	bne.n	120de <uuid_to_uuid128+0x16>
   120ea:	781b      	ldrb	r3, [r3, #0]
   120ec:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   120ee:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   120f0:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   120f2:	0a1b      	lsrs	r3, r3, #8
   120f4:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   120f6:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   120f8:	460a      	mov	r2, r1
   120fa:	4b10      	ldr	r3, [pc, #64]	; (1213c <uuid_to_uuid128+0x74>)
   120fc:	f103 0410 	add.w	r4, r3, #16
   12100:	f853 5b04 	ldr.w	r5, [r3], #4
   12104:	42a3      	cmp	r3, r4
   12106:	f842 5b04 	str.w	r5, [r2], #4
   1210a:	d1f9      	bne.n	12100 <uuid_to_uuid128+0x38>
   1210c:	781b      	ldrb	r3, [r3, #0]
   1210e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   12110:	6843      	ldr	r3, [r0, #4]
   12112:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   12116:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   12118:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1211a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   1211c:	0a1b      	lsrs	r3, r3, #8
   1211e:	738a      	strb	r2, [r1, #14]
   12120:	740b      	strb	r3, [r1, #16]
}
   12122:	e7e8      	b.n	120f6 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12124:	f100 0310 	add.w	r3, r0, #16
   12128:	f850 2b04 	ldr.w	r2, [r0], #4
   1212c:	4298      	cmp	r0, r3
   1212e:	f841 2b04 	str.w	r2, [r1], #4
   12132:	d1f9      	bne.n	12128 <uuid_to_uuid128+0x60>
   12134:	7803      	ldrb	r3, [r0, #0]
   12136:	700b      	strb	r3, [r1, #0]
   12138:	e7dd      	b.n	120f6 <uuid_to_uuid128+0x2e>
   1213a:	bf00      	nop
   1213c:	0002f0ca 	.word	0x0002f0ca

00012140 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   12140:	b538      	push	{r3, r4, r5, lr}
   12142:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   12144:	2d01      	cmp	r5, #1
{
   12146:	4610      	mov	r0, r2
   12148:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1214a:	d010      	beq.n	1216e <bt_buf_get_rx+0x2e>
   1214c:	2d03      	cmp	r5, #3
   1214e:	d01a      	beq.n	12186 <bt_buf_get_rx+0x46>
   12150:	2d05      	cmp	r5, #5
   12152:	d018      	beq.n	12186 <bt_buf_get_rx+0x46>
   12154:	490e      	ldr	r1, [pc, #56]	; (12190 <bt_buf_get_rx+0x50>)
   12156:	233d      	movs	r3, #61	; 0x3d
   12158:	4a0e      	ldr	r2, [pc, #56]	; (12194 <bt_buf_get_rx+0x54>)
   1215a:	480f      	ldr	r0, [pc, #60]	; (12198 <bt_buf_get_rx+0x58>)
   1215c:	f014 f87f 	bl	2625e <assert_print>
   12160:	480e      	ldr	r0, [pc, #56]	; (1219c <bt_buf_get_rx+0x5c>)
   12162:	f014 f87c 	bl	2625e <assert_print>
   12166:	213d      	movs	r1, #61	; 0x3d
   12168:	480a      	ldr	r0, [pc, #40]	; (12194 <bt_buf_get_rx+0x54>)
   1216a:	f014 f871 	bl	26250 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1216e:	480c      	ldr	r0, [pc, #48]	; (121a0 <bt_buf_get_rx+0x60>)
   12170:	f017 f841 	bl	291f6 <net_buf_alloc_fixed>
   12174:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   12176:	b120      	cbz	r0, 12182 <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   12178:	2101      	movs	r1, #1
   1217a:	300c      	adds	r0, #12
   1217c:	f007 ff44 	bl	1a008 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12180:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   12182:	4620      	mov	r0, r4
   12184:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   12186:	4602      	mov	r2, r0
   12188:	460b      	mov	r3, r1
   1218a:	4806      	ldr	r0, [pc, #24]	; (121a4 <bt_buf_get_rx+0x64>)
   1218c:	e7f0      	b.n	12170 <bt_buf_get_rx+0x30>
   1218e:	bf00      	nop
   12190:	0002f10a 	.word	0x0002f10a
   12194:	0002f0db 	.word	0x0002f0db
   12198:	0002d095 	.word	0x0002d095
   1219c:	0002f14f 	.word	0x0002f14f
   121a0:	20008ca0 	.word	0x20008ca0
   121a4:	20008c04 	.word	0x20008c04

000121a8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   121a8:	b510      	push	{r4, lr}
   121aa:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   121ac:	490a      	ldr	r1, [pc, #40]	; (121d8 <bt_buf_get_cmd_complete+0x30>)
{
   121ae:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   121b0:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   121b4:	b920      	cbnz	r0, 121c0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   121b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   121ba:	2001      	movs	r0, #1
   121bc:	f7ff bfc0 	b.w	12140 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   121c0:	f008 f878 	bl	1a2b4 <net_buf_ref>
   121c4:	2101      	movs	r1, #1
		buf->len = 0U;
   121c6:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   121c8:	4604      	mov	r4, r0
   121ca:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   121cc:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   121ce:	300c      	adds	r0, #12
   121d0:	f007 ff1a 	bl	1a008 <net_buf_simple_reserve>
}
   121d4:	4620      	mov	r0, r4
   121d6:	bd10      	pop	{r4, pc}
   121d8:	20008000 	.word	0x20008000

000121dc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   121dc:	b570      	push	{r4, r5, r6, lr}
   121de:	4604      	mov	r4, r0
	switch (evt) {
   121e0:	2c0f      	cmp	r4, #15
{
   121e2:	460d      	mov	r5, r1
   121e4:	4610      	mov	r0, r2
   121e6:	4619      	mov	r1, r3
	switch (evt) {
   121e8:	d805      	bhi.n	121f6 <bt_buf_get_evt+0x1a>
   121ea:	2c0d      	cmp	r4, #13
   121ec:	d90d      	bls.n	1220a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   121ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   121f2:	f7ff bfd9 	b.w	121a8 <bt_buf_get_cmd_complete>
	switch (evt) {
   121f6:	2c13      	cmp	r4, #19
   121f8:	d107      	bne.n	1220a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   121fa:	480c      	ldr	r0, [pc, #48]	; (1222c <bt_buf_get_evt+0x50>)
   121fc:	f016 fffb 	bl	291f6 <net_buf_alloc_fixed>
			if (buf) {
   12200:	4604      	mov	r4, r0
   12202:	b938      	cbnz	r0, 12214 <bt_buf_get_evt+0x38>
{
   12204:	2400      	movs	r4, #0
}
   12206:	4620      	mov	r0, r4
   12208:	bd70      	pop	{r4, r5, r6, pc}
   1220a:	4602      	mov	r2, r0
   1220c:	460b      	mov	r3, r1
		if (discardable) {
   1220e:	b145      	cbz	r5, 12222 <bt_buf_get_evt+0x46>
   12210:	4807      	ldr	r0, [pc, #28]	; (12230 <bt_buf_get_evt+0x54>)
   12212:	e7f3      	b.n	121fc <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   12214:	2101      	movs	r1, #1
   12216:	300c      	adds	r0, #12
   12218:	f007 fef6 	bl	1a008 <net_buf_simple_reserve>
   1221c:	2301      	movs	r3, #1
   1221e:	7623      	strb	r3, [r4, #24]
}
   12220:	e7f1      	b.n	12206 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12222:	2001      	movs	r0, #1
}
   12224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12228:	f7ff bf8a 	b.w	12140 <bt_buf_get_rx>
   1222c:	20008d3c 	.word	0x20008d3c
   12230:	20008c6c 	.word	0x20008c6c

00012234 <hci_disconn_complete_prio>:
{
   12234:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12236:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12238:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   1223c:	781b      	ldrb	r3, [r3, #0]
   1223e:	b963      	cbnz	r3, 1225a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   12240:	4620      	mov	r0, r4
   12242:	f002 ff09 	bl	15058 <bt_conn_lookup_handle>
	if (!conn) {
   12246:	4605      	mov	r5, r0
   12248:	b940      	cbnz	r0, 1225c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1224a:	4b08      	ldr	r3, [pc, #32]	; (1226c <hci_disconn_complete_prio+0x38>)
   1224c:	881a      	ldrh	r2, [r3, #0]
   1224e:	b922      	cbnz	r2, 1225a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   12250:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   12254:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   12258:	8018      	strh	r0, [r3, #0]
}
   1225a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1225c:	2101      	movs	r1, #1
   1225e:	f002 ff03 	bl	15068 <bt_conn_set_state>
	bt_conn_unref(conn);
   12262:	4628      	mov	r0, r5
}
   12264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   12268:	f002 bec6 	b.w	14ff8 <bt_conn_unref>
   1226c:	20022c26 	.word	0x20022c26

00012270 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   12270:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   12272:	4c08      	ldr	r4, [pc, #32]	; (12294 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   12274:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   12276:	2205      	movs	r2, #5
   12278:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1227c:	f003 f9c8 	bl	15610 <bt_conn_lookup_state_le>
		if (!conn) {
   12280:	b938      	cbnz	r0, 12292 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   12282:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   12286:	2204      	movs	r2, #4
}
   12288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1228c:	4902      	ldr	r1, [pc, #8]	; (12298 <find_pending_connect.part.0+0x28>)
   1228e:	f003 b9bf 	b.w	15610 <bt_conn_lookup_state_le>
}
   12292:	bd10      	pop	{r4, pc}
   12294:	20008000 	.word	0x20008000
   12298:	0002f08f 	.word	0x0002f08f

0001229c <hci_data_buf_overflow>:
{
   1229c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1229e:	68c3      	ldr	r3, [r0, #12]
   122a0:	2202      	movs	r2, #2
   122a2:	781b      	ldrb	r3, [r3, #0]
   122a4:	4906      	ldr	r1, [pc, #24]	; (122c0 <hci_data_buf_overflow+0x24>)
   122a6:	9303      	str	r3, [sp, #12]
   122a8:	4b06      	ldr	r3, [pc, #24]	; (122c4 <hci_data_buf_overflow+0x28>)
   122aa:	9302      	str	r3, [sp, #8]
   122ac:	2300      	movs	r3, #0
   122ae:	4618      	mov	r0, r3
   122b0:	e9cd 3300 	strd	r3, r3, [sp]
   122b4:	f015 f951 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   122b8:	b005      	add	sp, #20
   122ba:	f85d fb04 	ldr.w	pc, [sp], #4
   122be:	bf00      	nop
   122c0:	0002c094 	.word	0x0002c094
   122c4:	0002f16f 	.word	0x0002f16f

000122c8 <rx_queue_put>:
{
   122c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   122ca:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   122cc:	480b      	ldr	r0, [pc, #44]	; (122fc <rx_queue_put+0x34>)
   122ce:	f007 fec1 	bl	1a054 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   122d2:	490b      	ldr	r1, [pc, #44]	; (12300 <rx_queue_put+0x38>)
   122d4:	480b      	ldr	r0, [pc, #44]	; (12304 <rx_queue_put+0x3c>)
   122d6:	f018 fbd7 	bl	2aa88 <k_work_submit_to_queue>
	if (err < 0) {
   122da:	2800      	cmp	r0, #0
   122dc:	da0a      	bge.n	122f4 <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   122de:	4b0a      	ldr	r3, [pc, #40]	; (12308 <rx_queue_put+0x40>)
   122e0:	9003      	str	r0, [sp, #12]
   122e2:	9302      	str	r3, [sp, #8]
   122e4:	2300      	movs	r3, #0
   122e6:	2201      	movs	r2, #1
   122e8:	4618      	mov	r0, r3
   122ea:	e9cd 3300 	strd	r3, r3, [sp]
   122ee:	4907      	ldr	r1, [pc, #28]	; (1230c <rx_queue_put+0x44>)
   122f0:	f015 f933 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   122f4:	b005      	add	sp, #20
   122f6:	f85d fb04 	ldr.w	pc, [sp], #4
   122fa:	bf00      	nop
   122fc:	2000813c 	.word	0x2000813c
   12300:	200084a8 	.word	0x200084a8
   12304:	200096b8 	.word	0x200096b8
   12308:	0002f197 	.word	0x0002f197
   1230c:	0002c094 	.word	0x0002c094

00012310 <hci_hardware_error>:
{
   12310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   12312:	2101      	movs	r1, #1
   12314:	300c      	adds	r0, #12
   12316:	f008 f88d 	bl	1a434 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1231a:	7803      	ldrb	r3, [r0, #0]
   1231c:	2201      	movs	r2, #1
   1231e:	9303      	str	r3, [sp, #12]
   12320:	4b05      	ldr	r3, [pc, #20]	; (12338 <hci_hardware_error+0x28>)
   12322:	4906      	ldr	r1, [pc, #24]	; (1233c <hci_hardware_error+0x2c>)
   12324:	9302      	str	r3, [sp, #8]
   12326:	2300      	movs	r3, #0
   12328:	4618      	mov	r0, r3
   1232a:	e9cd 3300 	strd	r3, r3, [sp]
   1232e:	f015 f914 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   12332:	b005      	add	sp, #20
   12334:	f85d fb04 	ldr.w	pc, [sp], #4
   12338:	0002f1b4 	.word	0x0002f1b4
   1233c:	0002c094 	.word	0x0002c094

00012340 <le_data_len_change>:
{
   12340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12342:	68c3      	ldr	r3, [r0, #12]
   12344:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   12346:	4620      	mov	r0, r4
   12348:	f002 fe86 	bl	15058 <bt_conn_lookup_handle>
   1234c:	4603      	mov	r3, r0
	if (!conn) {
   1234e:	b950      	cbnz	r0, 12366 <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12350:	4a07      	ldr	r2, [pc, #28]	; (12370 <le_data_len_change+0x30>)
   12352:	4908      	ldr	r1, [pc, #32]	; (12374 <le_data_len_change+0x34>)
   12354:	e9cd 0201 	strd	r0, r2, [sp, #4]
   12358:	9403      	str	r4, [sp, #12]
   1235a:	2201      	movs	r2, #1
   1235c:	9000      	str	r0, [sp, #0]
   1235e:	f015 f8fc 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   12362:	b004      	add	sp, #16
   12364:	bd10      	pop	{r4, pc}
   12366:	b004      	add	sp, #16
   12368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1236c:	f002 be44 	b.w	14ff8 <bt_conn_unref>
   12370:	0002f1d6 	.word	0x0002f1d6
   12374:	0002c094 	.word	0x0002c094

00012378 <le_phy_update_complete>:
{
   12378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1237a:	68c3      	ldr	r3, [r0, #12]
   1237c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   12380:	4620      	mov	r0, r4
   12382:	f002 fe69 	bl	15058 <bt_conn_lookup_handle>
   12386:	4603      	mov	r3, r0
	if (!conn) {
   12388:	b950      	cbnz	r0, 123a0 <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1238a:	4a08      	ldr	r2, [pc, #32]	; (123ac <le_phy_update_complete+0x34>)
   1238c:	4908      	ldr	r1, [pc, #32]	; (123b0 <le_phy_update_complete+0x38>)
   1238e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   12392:	9403      	str	r4, [sp, #12]
   12394:	2201      	movs	r2, #1
   12396:	9000      	str	r0, [sp, #0]
   12398:	f015 f8df 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   1239c:	b004      	add	sp, #16
   1239e:	bd10      	pop	{r4, pc}
   123a0:	b004      	add	sp, #16
   123a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   123a6:	f002 be27 	b.w	14ff8 <bt_conn_unref>
   123aa:	bf00      	nop
   123ac:	0002f1d6 	.word	0x0002f1d6
   123b0:	0002c094 	.word	0x0002c094

000123b4 <hci_disconn_complete>:
{
   123b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   123b6:	68c5      	ldr	r5, [r0, #12]
{
   123b8:	b085      	sub	sp, #20
	if (evt->status) {
   123ba:	782e      	ldrb	r6, [r5, #0]
   123bc:	b986      	cbnz	r6, 123e0 <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   123be:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   123c2:	4638      	mov	r0, r7
   123c4:	f002 fe48 	bl	15058 <bt_conn_lookup_handle>
	if (!conn) {
   123c8:	4604      	mov	r4, r0
   123ca:	b958      	cbnz	r0, 123e4 <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   123cc:	4b0b      	ldr	r3, [pc, #44]	; (123fc <hci_disconn_complete+0x48>)
   123ce:	2201      	movs	r2, #1
   123d0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   123d4:	490a      	ldr	r1, [pc, #40]	; (12400 <hci_disconn_complete+0x4c>)
   123d6:	4603      	mov	r3, r0
   123d8:	9703      	str	r7, [sp, #12]
   123da:	9000      	str	r0, [sp, #0]
   123dc:	f015 f8bd 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   123e0:	b005      	add	sp, #20
   123e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   123e4:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   123e6:	4631      	mov	r1, r6
	conn->err = evt->reason;
   123e8:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   123ea:	f002 fe3d 	bl	15068 <bt_conn_set_state>
		bt_conn_unref(conn);
   123ee:	4620      	mov	r0, r4
}
   123f0:	b005      	add	sp, #20
   123f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   123f6:	f002 bdff 	b.w	14ff8 <bt_conn_unref>
   123fa:	bf00      	nop
   123fc:	0002f1fa 	.word	0x0002f1fa
   12400:	0002c094 	.word	0x0002c094

00012404 <handle_event>:
{
   12404:	b530      	push	{r4, r5, lr}
   12406:	4604      	mov	r4, r0
   12408:	4608      	mov	r0, r1
   1240a:	b087      	sub	sp, #28
   1240c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   12410:	4293      	cmp	r3, r2
   12412:	d112      	bne.n	1243a <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   12414:	8a05      	ldrh	r5, [r0, #16]
   12416:	68c0      	ldr	r0, [r0, #12]
   12418:	4629      	mov	r1, r5
   1241a:	f7ff fdd3 	bl	11fc4 <bt_hex>
   1241e:	4b16      	ldr	r3, [pc, #88]	; (12478 <handle_event+0x74>)
   12420:	e9cd 5004 	strd	r5, r0, [sp, #16]
   12424:	9302      	str	r3, [sp, #8]
   12426:	2300      	movs	r3, #0
   12428:	2202      	movs	r2, #2
   1242a:	4618      	mov	r0, r3
   1242c:	e9cd 3300 	strd	r3, r3, [sp]
   12430:	4912      	ldr	r1, [pc, #72]	; (1247c <handle_event+0x78>)
   12432:	9403      	str	r4, [sp, #12]
   12434:	f015 f891 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   12438:	e014      	b.n	12464 <handle_event+0x60>
		if (handler->event != event) {
   1243a:	4611      	mov	r1, r2
   1243c:	f811 5b08 	ldrb.w	r5, [r1], #8
   12440:	42a5      	cmp	r5, r4
   12442:	d116      	bne.n	12472 <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   12444:	8a03      	ldrh	r3, [r0, #16]
   12446:	7851      	ldrb	r1, [r2, #1]
   12448:	4299      	cmp	r1, r3
   1244a:	d90d      	bls.n	12468 <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   1244c:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12450:	4b0b      	ldr	r3, [pc, #44]	; (12480 <handle_event+0x7c>)
   12452:	2201      	movs	r2, #1
   12454:	9302      	str	r3, [sp, #8]
   12456:	2300      	movs	r3, #0
   12458:	4908      	ldr	r1, [pc, #32]	; (1247c <handle_event+0x78>)
   1245a:	4618      	mov	r0, r3
   1245c:	e9cd 3300 	strd	r3, r3, [sp]
   12460:	f015 f87b 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   12464:	b007      	add	sp, #28
   12466:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   12468:	6853      	ldr	r3, [r2, #4]
}
   1246a:	b007      	add	sp, #28
   1246c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   12470:	4718      	bx	r3
   12472:	460a      	mov	r2, r1
   12474:	e7cc      	b.n	12410 <handle_event+0xc>
   12476:	bf00      	nop
   12478:	0002f242 	.word	0x0002f242
   1247c:	0002c094 	.word	0x0002c094
   12480:	0002f220 	.word	0x0002f220

00012484 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   12484:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   12486:	4853      	ldr	r0, [pc, #332]	; (125d4 <rx_work_handler+0x150>)
{
   12488:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1248a:	f007 fe4d 	bl	1a128 <net_buf_slist_get>
	if (!buf) {
   1248e:	4604      	mov	r4, r0
   12490:	2800      	cmp	r0, #0
   12492:	d064      	beq.n	1255e <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12494:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   12496:	2b01      	cmp	r3, #1
   12498:	d063      	beq.n	12562 <rx_work_handler+0xde>
   1249a:	2b03      	cmp	r3, #3
   1249c:	f040 8090 	bne.w	125c0 <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   124a0:	8a03      	ldrh	r3, [r0, #16]
   124a2:	2b03      	cmp	r3, #3
   124a4:	d80c      	bhi.n	124c0 <rx_work_handler+0x3c>
   124a6:	f240 13ed 	movw	r3, #493	; 0x1ed
   124aa:	4a4b      	ldr	r2, [pc, #300]	; (125d8 <rx_work_handler+0x154>)
   124ac:	494b      	ldr	r1, [pc, #300]	; (125dc <rx_work_handler+0x158>)
   124ae:	484c      	ldr	r0, [pc, #304]	; (125e0 <rx_work_handler+0x15c>)
   124b0:	f013 fed5 	bl	2625e <assert_print>
   124b4:	4040      	eors	r0, r0
   124b6:	f380 8811 	msr	BASEPRI, r0
   124ba:	f04f 0003 	mov.w	r0, #3
   124be:	df02      	svc	2
   124c0:	2104      	movs	r1, #4
   124c2:	f104 000c 	add.w	r0, r4, #12
   124c6:	f007 ffb5 	bl	1a434 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   124ca:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   124cc:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   124ce:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   124d0:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   124d2:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   124d4:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   124d8:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   124da:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   124dc:	d00f      	beq.n	124fe <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   124de:	e9cd 3203 	strd	r3, r2, [sp, #12]
   124e2:	4b40      	ldr	r3, [pc, #256]	; (125e4 <rx_work_handler+0x160>)
   124e4:	2201      	movs	r2, #1
   124e6:	9302      	str	r3, [sp, #8]
   124e8:	2300      	movs	r3, #0
   124ea:	493f      	ldr	r1, [pc, #252]	; (125e8 <rx_work_handler+0x164>)
   124ec:	4618      	mov	r0, r3
   124ee:	e9cd 3300 	strd	r3, r3, [sp]
   124f2:	f015 f832 	bl	2755a <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   124f6:	4620      	mov	r0, r4
   124f8:	f007 fe98 	bl	1a22c <net_buf_unref>
		break;
   124fc:	e01a      	b.n	12534 <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   124fe:	f002 fdab 	bl	15058 <bt_conn_lookup_handle>
	if (!conn) {
   12502:	4605      	mov	r5, r0
   12504:	b958      	cbnz	r0, 1251e <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   12506:	8b63      	ldrh	r3, [r4, #26]
   12508:	2201      	movs	r2, #1
   1250a:	9303      	str	r3, [sp, #12]
   1250c:	4b37      	ldr	r3, [pc, #220]	; (125ec <rx_work_handler+0x168>)
   1250e:	4936      	ldr	r1, [pc, #216]	; (125e8 <rx_work_handler+0x164>)
   12510:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12514:	4603      	mov	r3, r0
   12516:	9000      	str	r0, [sp, #0]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12518:	f015 f81f 	bl	2755a <z_log_msg_runtime_create.constprop.0>
   1251c:	e7eb      	b.n	124f6 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   1251e:	f002 fe87 	bl	15230 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   12522:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   12524:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   12526:	0b32      	lsrs	r2, r6, #12
   12528:	4628      	mov	r0, r5
   1252a:	f002 fc09 	bl	14d40 <bt_conn_recv>
	bt_conn_unref(conn);
   1252e:	4628      	mov	r0, r5
   12530:	f002 fd62 	bl	14ff8 <bt_conn_unref>
	return list->head;
   12534:	4b2e      	ldr	r3, [pc, #184]	; (125f0 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   12536:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1253a:	b183      	cbz	r3, 1255e <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1253c:	492d      	ldr	r1, [pc, #180]	; (125f4 <rx_work_handler+0x170>)
   1253e:	482e      	ldr	r0, [pc, #184]	; (125f8 <rx_work_handler+0x174>)
   12540:	f018 faa2 	bl	2aa88 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   12544:	2800      	cmp	r0, #0
   12546:	da0a      	bge.n	1255e <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   12548:	4b2c      	ldr	r3, [pc, #176]	; (125fc <rx_work_handler+0x178>)
   1254a:	9003      	str	r0, [sp, #12]
   1254c:	9302      	str	r3, [sp, #8]
   1254e:	2300      	movs	r3, #0
   12550:	2201      	movs	r2, #1
   12552:	4618      	mov	r0, r3
   12554:	e9cd 3300 	strd	r3, r3, [sp]
   12558:	4923      	ldr	r1, [pc, #140]	; (125e8 <rx_work_handler+0x164>)
   1255a:	f014 fffe 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   1255e:	b006      	add	sp, #24
   12560:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12562:	8a03      	ldrh	r3, [r0, #16]
   12564:	2b01      	cmp	r3, #1
   12566:	d80c      	bhi.n	12582 <rx_work_handler+0xfe>
   12568:	f640 136d 	movw	r3, #2413	; 0x96d
   1256c:	4a1a      	ldr	r2, [pc, #104]	; (125d8 <rx_work_handler+0x154>)
   1256e:	491b      	ldr	r1, [pc, #108]	; (125dc <rx_work_handler+0x158>)
   12570:	481b      	ldr	r0, [pc, #108]	; (125e0 <rx_work_handler+0x15c>)
   12572:	f013 fe74 	bl	2625e <assert_print>
   12576:	4040      	eors	r0, r0
   12578:	f380 8811 	msr	BASEPRI, r0
   1257c:	f04f 0003 	mov.w	r0, #3
   12580:	df02      	svc	2
   12582:	2102      	movs	r1, #2
   12584:	f104 000c 	add.w	r0, r4, #12
   12588:	f007 ff54 	bl	1a434 <net_buf_simple_pull_mem>
   1258c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1258e:	7800      	ldrb	r0, [r0, #0]
   12590:	f014 ffa1 	bl	274d6 <bt_hci_evt_get_flags>
   12594:	0783      	lsls	r3, r0, #30
   12596:	d40c      	bmi.n	125b2 <rx_work_handler+0x12e>
   12598:	f640 1371 	movw	r3, #2417	; 0x971
   1259c:	4a0e      	ldr	r2, [pc, #56]	; (125d8 <rx_work_handler+0x154>)
   1259e:	4918      	ldr	r1, [pc, #96]	; (12600 <rx_work_handler+0x17c>)
   125a0:	480f      	ldr	r0, [pc, #60]	; (125e0 <rx_work_handler+0x15c>)
   125a2:	f013 fe5c 	bl	2625e <assert_print>
   125a6:	4040      	eors	r0, r0
   125a8:	f380 8811 	msr	BASEPRI, r0
   125ac:	f04f 0003 	mov.w	r0, #3
   125b0:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   125b2:	2306      	movs	r3, #6
   125b4:	4621      	mov	r1, r4
   125b6:	4a13      	ldr	r2, [pc, #76]	; (12604 <rx_work_handler+0x180>)
   125b8:	7828      	ldrb	r0, [r5, #0]
   125ba:	f7ff ff23 	bl	12404 <handle_event>
	net_buf_unref(buf);
   125be:	e79a      	b.n	124f6 <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   125c0:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   125c2:	4b11      	ldr	r3, [pc, #68]	; (12608 <rx_work_handler+0x184>)
   125c4:	2201      	movs	r2, #1
   125c6:	9302      	str	r3, [sp, #8]
   125c8:	2300      	movs	r3, #0
   125ca:	4907      	ldr	r1, [pc, #28]	; (125e8 <rx_work_handler+0x164>)
   125cc:	4618      	mov	r0, r3
   125ce:	e9cd 3300 	strd	r3, r3, [sp]
   125d2:	e7a1      	b.n	12518 <rx_work_handler+0x94>
   125d4:	2000813c 	.word	0x2000813c
   125d8:	0002f264 	.word	0x0002f264
   125dc:	0002f298 	.word	0x0002f298
   125e0:	0002d095 	.word	0x0002d095
   125e4:	0002f2b1 	.word	0x0002f2b1
   125e8:	0002c094 	.word	0x0002c094
   125ec:	0002f2d5 	.word	0x0002f2d5
   125f0:	20008000 	.word	0x20008000
   125f4:	200084a8 	.word	0x200084a8
   125f8:	200096b8 	.word	0x200096b8
   125fc:	0002f197 	.word	0x0002f197
   12600:	0002f2f7 	.word	0x0002f2f7
   12604:	0002c954 	.word	0x0002c954
   12608:	0002f325 	.word	0x0002f325

0001260c <hci_le_meta_event>:
{
   1260c:	b510      	push	{r4, lr}
   1260e:	2101      	movs	r1, #1
   12610:	4604      	mov	r4, r0
   12612:	300c      	adds	r0, #12
   12614:	f007 ff0e 	bl	1a434 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12618:	4621      	mov	r1, r4
}
   1261a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1261e:	230a      	movs	r3, #10
   12620:	4a01      	ldr	r2, [pc, #4]	; (12628 <hci_le_meta_event+0x1c>)
   12622:	7800      	ldrb	r0, [r0, #0]
   12624:	f7ff beee 	b.w	12404 <handle_event>
   12628:	0002c984 	.word	0x0002c984

0001262c <le_remote_feat_complete>:
{
   1262c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1262e:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12630:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12634:	4630      	mov	r0, r6
   12636:	f002 fd0f 	bl	15058 <bt_conn_lookup_handle>
	if (!conn) {
   1263a:	4604      	mov	r4, r0
   1263c:	b958      	cbnz	r0, 12656 <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1263e:	4b10      	ldr	r3, [pc, #64]	; (12680 <le_remote_feat_complete+0x54>)
   12640:	2201      	movs	r2, #1
   12642:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12646:	490f      	ldr	r1, [pc, #60]	; (12684 <le_remote_feat_complete+0x58>)
   12648:	4603      	mov	r3, r0
   1264a:	9603      	str	r6, [sp, #12]
   1264c:	9000      	str	r0, [sp, #0]
   1264e:	f014 ff84 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   12652:	b004      	add	sp, #16
   12654:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   12656:	782b      	ldrb	r3, [r5, #0]
   12658:	b93b      	cbnz	r3, 1266a <le_remote_feat_complete+0x3e>
   1265a:	f8d5 3003 	ldr.w	r3, [r5, #3]
   1265e:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   12662:	f8d5 3007 	ldr.w	r3, [r5, #7]
   12666:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1266a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1266e:	1d20      	adds	r0, r4, #4
   12670:	f014 ff5c 	bl	2752c <atomic_or>
	bt_conn_unref(conn);
   12674:	4620      	mov	r0, r4
}
   12676:	b004      	add	sp, #16
   12678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1267c:	f002 bcbc 	b.w	14ff8 <bt_conn_unref>
   12680:	0002f1d6 	.word	0x0002f1d6
   12684:	0002c094 	.word	0x0002c094

00012688 <hci_cmd_done>:
{
   12688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1268c:	4606      	mov	r6, r0
   1268e:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12690:	7a90      	ldrb	r0, [r2, #10]
{
   12692:	460f      	mov	r7, r1
   12694:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12696:	f007 fb8f 	bl	19db8 <net_buf_pool_get>
   1269a:	4d3d      	ldr	r5, [pc, #244]	; (12790 <hci_cmd_done+0x108>)
   1269c:	4285      	cmp	r5, r0
   1269e:	d014      	beq.n	126ca <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   126a0:	7aa4      	ldrb	r4, [r4, #10]
   126a2:	4620      	mov	r0, r4
   126a4:	f007 fb88 	bl	19db8 <net_buf_pool_get>
   126a8:	4b3a      	ldr	r3, [pc, #232]	; (12794 <hci_cmd_done+0x10c>)
   126aa:	e9cd 0505 	strd	r0, r5, [sp, #20]
   126ae:	9302      	str	r3, [sp, #8]
   126b0:	2300      	movs	r3, #0
   126b2:	2202      	movs	r2, #2
   126b4:	4618      	mov	r0, r3
   126b6:	e9cd 6403 	strd	r6, r4, [sp, #12]
   126ba:	e9cd 3300 	strd	r3, r3, [sp]
   126be:	4936      	ldr	r1, [pc, #216]	; (12798 <hci_cmd_done+0x110>)
   126c0:	f014 ff4b 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   126c4:	b008      	add	sp, #32
   126c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   126ca:	4620      	mov	r0, r4
   126cc:	f007 fb7c 	bl	19dc8 <net_buf_id>
   126d0:	f04f 080c 	mov.w	r8, #12
   126d4:	4d31      	ldr	r5, [pc, #196]	; (1279c <hci_cmd_done+0x114>)
   126d6:	fb08 5000 	mla	r0, r8, r0, r5
   126da:	8843      	ldrh	r3, [r0, #2]
   126dc:	42b3      	cmp	r3, r6
   126de:	d012      	beq.n	12706 <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   126e0:	4620      	mov	r0, r4
   126e2:	f007 fb71 	bl	19dc8 <net_buf_id>
   126e6:	fb08 5000 	mla	r0, r8, r0, r5
   126ea:	8843      	ldrh	r3, [r0, #2]
   126ec:	2202      	movs	r2, #2
   126ee:	e9cd 6303 	strd	r6, r3, [sp, #12]
   126f2:	4b2b      	ldr	r3, [pc, #172]	; (127a0 <hci_cmd_done+0x118>)
   126f4:	4928      	ldr	r1, [pc, #160]	; (12798 <hci_cmd_done+0x110>)
   126f6:	9302      	str	r3, [sp, #8]
   126f8:	2300      	movs	r3, #0
   126fa:	4618      	mov	r0, r3
   126fc:	e9cd 3300 	strd	r3, r3, [sp]
   12700:	f014 ff2b 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		return;
   12704:	e7de      	b.n	126c4 <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   12706:	4e27      	ldr	r6, [pc, #156]	; (127a4 <hci_cmd_done+0x11c>)
   12708:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   1270c:	b120      	cbz	r0, 12718 <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   1270e:	f007 fd8d 	bl	1a22c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12712:	2300      	movs	r3, #0
   12714:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   12718:	4620      	mov	r0, r4
   1271a:	f007 fb55 	bl	19dc8 <net_buf_id>
   1271e:	260c      	movs	r6, #12
   12720:	fb06 5000 	mla	r0, r6, r0, r5
   12724:	6843      	ldr	r3, [r0, #4]
   12726:	b19b      	cbz	r3, 12750 <hci_cmd_done+0xc8>
   12728:	b997      	cbnz	r7, 12750 <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1272a:	4620      	mov	r0, r4
   1272c:	f007 fb4c 	bl	19dc8 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12730:	2101      	movs	r1, #1
   12732:	fb06 5000 	mla	r0, r6, r0, r5
   12736:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   12738:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   1273c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1273e:	f003 061f 	and.w	r6, r3, #31
   12742:	40b1      	lsls	r1, r6
	if (val) {
   12744:	095b      	lsrs	r3, r3, #5
   12746:	b1e2      	cbz	r2, 12782 <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12748:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1274c:	f014 feee 	bl	2752c <atomic_or>
	if (cmd(buf)->sync) {
   12750:	4620      	mov	r0, r4
   12752:	f007 fb39 	bl	19dc8 <net_buf_id>
   12756:	260c      	movs	r6, #12
   12758:	fb06 5000 	mla	r0, r6, r0, r5
   1275c:	6883      	ldr	r3, [r0, #8]
   1275e:	2b00      	cmp	r3, #0
   12760:	d0b0      	beq.n	126c4 <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   12762:	4620      	mov	r0, r4
   12764:	f007 fb30 	bl	19dc8 <net_buf_id>
   12768:	4370      	muls	r0, r6
   1276a:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1276c:	4620      	mov	r0, r4
   1276e:	f007 fb2b 	bl	19dc8 <net_buf_id>
   12772:	fb06 5500 	mla	r5, r6, r0, r5
   12776:	68a8      	ldr	r0, [r5, #8]
}
   12778:	b008      	add	sp, #32
   1277a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   1277e:	f00e bab3 	b.w	20ce8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12782:	43c9      	mvns	r1, r1
   12784:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12788:	f014 fef6 	bl	27578 <atomic_and.isra.0>
   1278c:	e7e0      	b.n	12750 <hci_cmd_done+0xc8>
   1278e:	bf00      	nop
   12790:	20008d08 	.word	0x20008d08
   12794:	0002f339 	.word	0x0002f339
   12798:	0002c094 	.word	0x0002c094
   1279c:	20022670 	.word	0x20022670
   127a0:	0002f36e 	.word	0x0002f36e
   127a4:	20008000 	.word	0x20008000

000127a8 <hci_cmd_status>:
{
   127a8:	b538      	push	{r3, r4, r5, lr}
   127aa:	2104      	movs	r1, #4
   127ac:	4604      	mov	r4, r0
   127ae:	300c      	adds	r0, #12
   127b0:	f007 fe40 	bl	1a434 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   127b4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   127b6:	7801      	ldrb	r1, [r0, #0]
   127b8:	4622      	mov	r2, r4
   127ba:	8840      	ldrh	r0, [r0, #2]
   127bc:	f7ff ff64 	bl	12688 <hci_cmd_done>
	if (ncmd) {
   127c0:	b125      	cbz	r5, 127cc <hci_cmd_status+0x24>
}
   127c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   127c6:	4802      	ldr	r0, [pc, #8]	; (127d0 <hci_cmd_status+0x28>)
   127c8:	f00e ba8e 	b.w	20ce8 <z_impl_k_sem_give>
   127cc:	bd38      	pop	{r3, r4, r5, pc}
   127ce:	bf00      	nop
   127d0:	20008120 	.word	0x20008120

000127d4 <hci_cmd_complete>:
{
   127d4:	b538      	push	{r3, r4, r5, lr}
   127d6:	2103      	movs	r1, #3
   127d8:	4604      	mov	r4, r0
   127da:	300c      	adds	r0, #12
   127dc:	f007 fe2a 	bl	1a434 <net_buf_simple_pull_mem>
	status = buf->data[0];
   127e0:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   127e2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   127e4:	4622      	mov	r2, r4
   127e6:	7819      	ldrb	r1, [r3, #0]
   127e8:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   127ec:	f7ff ff4c 	bl	12688 <hci_cmd_done>
	if (ncmd) {
   127f0:	b125      	cbz	r5, 127fc <hci_cmd_complete+0x28>
}
   127f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   127f6:	4802      	ldr	r0, [pc, #8]	; (12800 <hci_cmd_complete+0x2c>)
   127f8:	f00e ba76 	b.w	20ce8 <z_impl_k_sem_give>
   127fc:	bd38      	pop	{r3, r4, r5, pc}
   127fe:	bf00      	nop
   12800:	20008120 	.word	0x20008120

00012804 <hci_num_completed_packets>:
{
   12804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   12808:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   1280a:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1280c:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   1280e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 128f8 <hci_num_completed_packets+0xf4>
	for (i = 0; i < evt->num_handles; i++) {
   12812:	783b      	ldrb	r3, [r7, #0]
   12814:	429d      	cmp	r5, r3
   12816:	db02      	blt.n	1281e <hci_num_completed_packets+0x1a>
}
   12818:	b004      	add	sp, #16
   1281a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1281e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   12822:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   12826:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1282a:	4650      	mov	r0, sl
   1282c:	f002 fc14 	bl	15058 <bt_conn_lookup_handle>
		if (!conn) {
   12830:	4604      	mov	r4, r0
   12832:	b1d8      	cbz	r0, 1286c <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   12834:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   12838:	2e00      	cmp	r6, #0
   1283a:	d032      	beq.n	128a2 <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   1283c:	f04f 0320 	mov.w	r3, #32
   12840:	f3ef 8211 	mrs	r2, BASEPRI
   12844:	f383 8812 	msr	BASEPRI_MAX, r3
   12848:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1284c:	69e3      	ldr	r3, [r4, #28]
   1284e:	b1d3      	cbz	r3, 12886 <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   12850:	3b01      	subs	r3, #1
   12852:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   12854:	f382 8811 	msr	BASEPRI, r2
   12858:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1285c:	4620      	mov	r0, r4
   1285e:	f002 f9f3 	bl	14c48 <bt_conn_get_pkts>
   12862:	3e01      	subs	r6, #1
   12864:	f00e fa40 	bl	20ce8 <z_impl_k_sem_give>
   12868:	b2b6      	uxth	r6, r6
   1286a:	e7e5      	b.n	12838 <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   1286c:	4b23      	ldr	r3, [pc, #140]	; (128fc <hci_num_completed_packets+0xf8>)
   1286e:	2201      	movs	r2, #1
   12870:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12874:	4922      	ldr	r1, [pc, #136]	; (12900 <hci_num_completed_packets+0xfc>)
   12876:	4603      	mov	r3, r0
   12878:	f8cd a00c 	str.w	sl, [sp, #12]
   1287c:	9000      	str	r0, [sp, #0]
   1287e:	f014 fe6c 	bl	2755a <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   12882:	3501      	adds	r5, #1
   12884:	e7c5      	b.n	12812 <hci_num_completed_packets+0xe>
   12886:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   12888:	b97b      	cbnz	r3, 128aa <hci_num_completed_packets+0xa6>
   1288a:	f382 8811 	msr	BASEPRI, r2
   1288e:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   12892:	2201      	movs	r2, #1
   12894:	4618      	mov	r0, r3
   12896:	e9cd 3901 	strd	r3, r9, [sp, #4]
   1289a:	4919      	ldr	r1, [pc, #100]	; (12900 <hci_num_completed_packets+0xfc>)
   1289c:	9300      	str	r3, [sp, #0]
   1289e:	f014 fe5c 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   128a2:	4620      	mov	r0, r4
   128a4:	f002 fba8 	bl	14ff8 <bt_conn_unref>
   128a8:	e7eb      	b.n	12882 <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   128aa:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   128ac:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   128ae:	4283      	cmp	r3, r0
	list->head = node;
   128b0:	6161      	str	r1, [r4, #20]
	list->tail = node;
   128b2:	bf08      	it	eq
   128b4:	61a1      	streq	r1, [r4, #24]
   128b6:	f382 8811 	msr	BASEPRI, r2
   128ba:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   128be:	f04f 0220 	mov.w	r2, #32
   128c2:	f3ef 8111 	mrs	r1, BASEPRI
   128c6:	f382 8812 	msr	BASEPRI_MAX, r2
   128ca:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   128ce:	68da      	ldr	r2, [r3, #12]
   128d0:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   128d2:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   128d6:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   128da:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   128dc:	b94a      	cbnz	r2, 128f2 <hci_num_completed_packets+0xee>
	list->head = node;
   128de:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   128e2:	f381 8811 	msr	BASEPRI, r1
   128e6:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   128ea:	4650      	mov	r0, sl
   128ec:	f00e fd6a 	bl	213c4 <k_work_submit>
   128f0:	e7b4      	b.n	1285c <hci_num_completed_packets+0x58>
	parent->next = child;
   128f2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   128f4:	6263      	str	r3, [r4, #36]	; 0x24
}
   128f6:	e7f4      	b.n	128e2 <hci_num_completed_packets+0xde>
   128f8:	0002f3bd 	.word	0x0002f3bd
   128fc:	0002f3a1 	.word	0x0002f3a1
   12900:	0002c094 	.word	0x0002c094

00012904 <le_conn_update_complete>:
{
   12904:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   12906:	68c5      	ldr	r5, [r0, #12]
{
   12908:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(evt->handle);
   1290a:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1290e:	4630      	mov	r0, r6
   12910:	f002 fba2 	bl	15058 <bt_conn_lookup_handle>
	if (!conn) {
   12914:	4604      	mov	r4, r0
   12916:	b958      	cbnz	r0, 12930 <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12918:	4b2b      	ldr	r3, [pc, #172]	; (129c8 <le_conn_update_complete+0xc4>)
   1291a:	2201      	movs	r2, #1
   1291c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12920:	492a      	ldr	r1, [pc, #168]	; (129cc <le_conn_update_complete+0xc8>)
   12922:	4603      	mov	r3, r0
   12924:	9603      	str	r6, [sp, #12]
   12926:	9000      	str	r0, [sp, #0]
   12928:	f014 fe17 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   1292c:	b006      	add	sp, #24
   1292e:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   12930:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   12932:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   12934:	2b1a      	cmp	r3, #26
   12936:	d119      	bne.n	1296c <le_conn_update_complete+0x68>
   12938:	78c3      	ldrb	r3, [r0, #3]
   1293a:	2b01      	cmp	r3, #1
   1293c:	d12a      	bne.n	12994 <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1293e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12942:	4630      	mov	r0, r6
   12944:	f014 fdf2 	bl	2752c <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   12948:	0542      	lsls	r2, r0, #21
   1294a:	d40f      	bmi.n	1296c <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
   1294c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   12950:	4620      	mov	r0, r4
		param.interval_min = conn->le.interval_min;
   12952:	9304      	str	r3, [sp, #16]
		param.latency = conn->le.pending_latency;
   12954:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   12958:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   1295a:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   1295c:	f003 f98a 	bl	15c74 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   12960:	4620      	mov	r0, r4
}
   12962:	b006      	add	sp, #24
   12964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   12968:	f002 bb46 	b.w	14ff8 <bt_conn_unref>
		if (!evt->status) {
   1296c:	782b      	ldrb	r3, [r5, #0]
   1296e:	b98b      	cbnz	r3, 12994 <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   12970:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   12974:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   12978:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1297c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12980:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   12984:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12988:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1298c:	4630      	mov	r0, r6
   1298e:	f014 fdf3 	bl	27578 <atomic_and.isra.0>
}
   12992:	e014      	b.n	129be <le_conn_update_complete+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12994:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   12998:	05db      	lsls	r3, r3, #23
   1299a:	d5f5      	bpl.n	12988 <le_conn_update_complete+0x84>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1299c:	782b      	ldrb	r3, [r5, #0]
   1299e:	2b20      	cmp	r3, #32
   129a0:	d1f2      	bne.n	12988 <le_conn_update_complete+0x84>
			   conn->le.conn_param_retry_countdown) {
   129a2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   129a6:	2b00      	cmp	r3, #0
   129a8:	d0ee      	beq.n	12988 <le_conn_update_complete+0x84>
			conn->le.conn_param_retry_countdown--;
   129aa:	3b01      	subs	r3, #1
   129ac:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   129b0:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   129b4:	2300      	movs	r3, #0
   129b6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   129ba:	f00e febb 	bl	21734 <k_work_schedule>
		notify_le_param_updated(conn);
   129be:	4620      	mov	r0, r4
   129c0:	f002 fc9a 	bl	152f8 <notify_le_param_updated>
   129c4:	e7cc      	b.n	12960 <le_conn_update_complete+0x5c>
   129c6:	bf00      	nop
   129c8:	0002f1d6 	.word	0x0002f1d6
   129cc:	0002c094 	.word	0x0002c094

000129d0 <bt_hci_cmd_state_set_init>:
{
   129d0:	b510      	push	{r4, lr}
	state->bit = bit;
   129d2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   129d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   129da:	460c      	mov	r4, r1
	state->val = val;
   129dc:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   129de:	f007 f9f3 	bl	19dc8 <net_buf_id>
   129e2:	220c      	movs	r2, #12
   129e4:	4b02      	ldr	r3, [pc, #8]	; (129f0 <bt_hci_cmd_state_set_init+0x20>)
   129e6:	fb02 3300 	mla	r3, r2, r0, r3
   129ea:	605c      	str	r4, [r3, #4]
}
   129ec:	bd10      	pop	{r4, pc}
   129ee:	bf00      	nop
   129f0:	20022670 	.word	0x20022670

000129f4 <bt_hci_cmd_create>:
{
   129f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   129f8:	f04f 32ff 	mov.w	r2, #4294967295
   129fc:	4606      	mov	r6, r0
   129fe:	f04f 33ff 	mov.w	r3, #4294967295
   12a02:	481e      	ldr	r0, [pc, #120]	; (12a7c <bt_hci_cmd_create+0x88>)
   12a04:	460f      	mov	r7, r1
   12a06:	f016 fbf6 	bl	291f6 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   12a0a:	4604      	mov	r4, r0
   12a0c:	b958      	cbnz	r0, 12a26 <bt_hci_cmd_create+0x32>
   12a0e:	491c      	ldr	r1, [pc, #112]	; (12a80 <bt_hci_cmd_create+0x8c>)
   12a10:	481c      	ldr	r0, [pc, #112]	; (12a84 <bt_hci_cmd_create+0x90>)
   12a12:	f240 1301 	movw	r3, #257	; 0x101
   12a16:	4a1c      	ldr	r2, [pc, #112]	; (12a88 <bt_hci_cmd_create+0x94>)
   12a18:	f013 fc21 	bl	2625e <assert_print>
   12a1c:	f240 1101 	movw	r1, #257	; 0x101
   12a20:	4819      	ldr	r0, [pc, #100]	; (12a88 <bt_hci_cmd_create+0x94>)
   12a22:	f013 fc15 	bl	26250 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12a26:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   12a2a:	f100 0a0c 	add.w	sl, r0, #12
   12a2e:	2101      	movs	r1, #1
   12a30:	4650      	mov	r0, sl
   12a32:	f007 fae9 	bl	1a008 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   12a36:	4620      	mov	r0, r4
   12a38:	f884 8018 	strb.w	r8, [r4, #24]
   12a3c:	f007 f9c4 	bl	19dc8 <net_buf_id>
   12a40:	f04f 090c 	mov.w	r9, #12
   12a44:	4d11      	ldr	r5, [pc, #68]	; (12a8c <bt_hci_cmd_create+0x98>)
   12a46:	fb09 5000 	mla	r0, r9, r0, r5
   12a4a:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   12a4c:	4620      	mov	r0, r4
   12a4e:	f007 f9bb 	bl	19dc8 <net_buf_id>
   12a52:	fb09 5000 	mla	r0, r9, r0, r5
   12a56:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   12a5a:	4620      	mov	r0, r4
   12a5c:	f007 f9b4 	bl	19dc8 <net_buf_id>
   12a60:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   12a64:	2103      	movs	r1, #3
   12a66:	4650      	mov	r0, sl
   12a68:	f8c5 8004 	str.w	r8, [r5, #4]
   12a6c:	f007 fd00 	bl	1a470 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   12a70:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   12a72:	7087      	strb	r7, [r0, #2]
}
   12a74:	4620      	mov	r0, r4
   12a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a7a:	bf00      	nop
   12a7c:	20008d08 	.word	0x20008d08
   12a80:	00030d9e 	.word	0x00030d9e
   12a84:	0002d095 	.word	0x0002d095
   12a88:	0002f264 	.word	0x0002f264
   12a8c:	20022670 	.word	0x20022670

00012a90 <bt_hci_cmd_send_sync>:
{
   12a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a94:	4607      	mov	r7, r0
   12a96:	4615      	mov	r5, r2
	if (!buf) {
   12a98:	460c      	mov	r4, r1
{
   12a9a:	b08c      	sub	sp, #48	; 0x30
	if (!buf) {
   12a9c:	b921      	cbnz	r1, 12aa8 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   12a9e:	f7ff ffa9 	bl	129f4 <bt_hci_cmd_create>
		if (!buf) {
   12aa2:	4604      	mov	r4, r0
   12aa4:	2800      	cmp	r0, #0
   12aa6:	d056      	beq.n	12b56 <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12aa8:	ae06      	add	r6, sp, #24
   12aaa:	2201      	movs	r2, #1
   12aac:	2100      	movs	r1, #0
   12aae:	4630      	mov	r0, r6
   12ab0:	f017 ff87 	bl	2a9c2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   12ab4:	4620      	mov	r0, r4
   12ab6:	f007 f987 	bl	19dc8 <net_buf_id>
   12aba:	230c      	movs	r3, #12
   12abc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12b5c <bt_hci_cmd_send_sync+0xcc>
   12ac0:	fb03 8000 	mla	r0, r3, r0, r8
   12ac4:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   12ac6:	4620      	mov	r0, r4
   12ac8:	f007 fbf4 	bl	1a2b4 <net_buf_ref>
   12acc:	4601      	mov	r1, r0
   12ace:	4824      	ldr	r0, [pc, #144]	; (12b60 <bt_hci_cmd_send_sync+0xd0>)
   12ad0:	f007 fb86 	bl	1a1e0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   12ad4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   12ad8:	4630      	mov	r0, r6
   12ada:	2300      	movs	r3, #0
   12adc:	f00e f948 	bl	20d70 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   12ae0:	4606      	mov	r6, r0
   12ae2:	b180      	cbz	r0, 12b06 <bt_hci_cmd_send_sync+0x76>
   12ae4:	f240 1349 	movw	r3, #329	; 0x149
   12ae8:	4a1e      	ldr	r2, [pc, #120]	; (12b64 <bt_hci_cmd_send_sync+0xd4>)
   12aea:	491f      	ldr	r1, [pc, #124]	; (12b68 <bt_hci_cmd_send_sync+0xd8>)
   12aec:	481f      	ldr	r0, [pc, #124]	; (12b6c <bt_hci_cmd_send_sync+0xdc>)
   12aee:	f013 fbb6 	bl	2625e <assert_print>
   12af2:	4631      	mov	r1, r6
   12af4:	481e      	ldr	r0, [pc, #120]	; (12b70 <bt_hci_cmd_send_sync+0xe0>)
   12af6:	f013 fbb2 	bl	2625e <assert_print>
   12afa:	4040      	eors	r0, r0
   12afc:	f380 8811 	msr	BASEPRI, r0
   12b00:	f04f 0003 	mov.w	r0, #3
   12b04:	df02      	svc	2
	status = cmd(buf)->status;
   12b06:	4620      	mov	r0, r4
   12b08:	f007 f95e 	bl	19dc8 <net_buf_id>
   12b0c:	230c      	movs	r3, #12
   12b0e:	4358      	muls	r0, r3
   12b10:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   12b14:	b1be      	cbz	r6, 12b46 <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   12b16:	4b17      	ldr	r3, [pc, #92]	; (12b74 <bt_hci_cmd_send_sync+0xe4>)
   12b18:	2202      	movs	r2, #2
   12b1a:	9302      	str	r3, [sp, #8]
   12b1c:	2300      	movs	r3, #0
   12b1e:	4916      	ldr	r1, [pc, #88]	; (12b78 <bt_hci_cmd_send_sync+0xe8>)
   12b20:	4618      	mov	r0, r3
   12b22:	e9cd 3300 	strd	r3, r3, [sp]
   12b26:	e9cd 7603 	strd	r7, r6, [sp, #12]
   12b2a:	f014 fd16 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   12b2e:	4620      	mov	r0, r4
   12b30:	f007 fb7c 	bl	1a22c <net_buf_unref>
			return -ECONNREFUSED;
   12b34:	2e09      	cmp	r6, #9
   12b36:	bf14      	ite	ne
   12b38:	f06f 0004 	mvnne.w	r0, #4
   12b3c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   12b40:	b00c      	add	sp, #48	; 0x30
   12b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   12b46:	b115      	cbz	r5, 12b4e <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   12b48:	602c      	str	r4, [r5, #0]
	return 0;
   12b4a:	2000      	movs	r0, #0
   12b4c:	e7f8      	b.n	12b40 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   12b4e:	4620      	mov	r0, r4
   12b50:	f007 fb6c 	bl	1a22c <net_buf_unref>
   12b54:	e7f9      	b.n	12b4a <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   12b56:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12b5a:	e7f1      	b.n	12b40 <bt_hci_cmd_send_sync+0xb0>
   12b5c:	20022670 	.word	0x20022670
   12b60:	20008144 	.word	0x20008144
   12b64:	0002f264 	.word	0x0002f264
   12b68:	0002e0cc 	.word	0x0002e0cc
   12b6c:	0002d095 	.word	0x0002d095
   12b70:	0002f3d4 	.word	0x0002f3d4
   12b74:	0002f3f4 	.word	0x0002f3f4
   12b78:	0002c094 	.word	0x0002c094

00012b7c <hci_le_read_max_data_len>:
{
   12b7c:	b570      	push	{r4, r5, r6, lr}
   12b7e:	b086      	sub	sp, #24
   12b80:	4606      	mov	r6, r0
   12b82:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   12b84:	f242 002f 	movw	r0, #8239	; 0x202f
   12b88:	2100      	movs	r1, #0
   12b8a:	aa05      	add	r2, sp, #20
   12b8c:	f7ff ff80 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
   12b90:	4604      	mov	r4, r0
   12b92:	b160      	cbz	r0, 12bae <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   12b94:	4b0b      	ldr	r3, [pc, #44]	; (12bc4 <hci_le_read_max_data_len+0x48>)
   12b96:	2201      	movs	r2, #1
   12b98:	9302      	str	r3, [sp, #8]
   12b9a:	2300      	movs	r3, #0
   12b9c:	490a      	ldr	r1, [pc, #40]	; (12bc8 <hci_le_read_max_data_len+0x4c>)
   12b9e:	4618      	mov	r0, r3
   12ba0:	e9cd 3300 	strd	r3, r3, [sp]
   12ba4:	f014 fcd9 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   12ba8:	4620      	mov	r0, r4
   12baa:	b006      	add	sp, #24
   12bac:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   12bae:	9805      	ldr	r0, [sp, #20]
   12bb0:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   12bb2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12bb6:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   12bb8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   12bbc:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   12bbe:	f007 fb35 	bl	1a22c <net_buf_unref>
	return 0;
   12bc2:	e7f1      	b.n	12ba8 <hci_le_read_max_data_len+0x2c>
   12bc4:	0002f410 	.word	0x0002f410
   12bc8:	0002c094 	.word	0x0002c094

00012bcc <bt_hci_le_rand>:
{
   12bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12bce:	4b14      	ldr	r3, [pc, #80]	; (12c20 <bt_hci_le_rand+0x54>)
{
   12bd0:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12bd2:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   12bd6:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12bd8:	2b00      	cmp	r3, #0
   12bda:	da1d      	bge.n	12c18 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   12bdc:	b914      	cbnz	r4, 12be4 <bt_hci_le_rand+0x18>
	return 0;
   12bde:	4620      	mov	r0, r4
}
   12be0:	b003      	add	sp, #12
   12be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   12be4:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   12be6:	f04f 0100 	mov.w	r1, #0
   12bea:	f242 0018 	movw	r0, #8216	; 0x2018
   12bee:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   12bf0:	4626      	mov	r6, r4
   12bf2:	bf28      	it	cs
   12bf4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   12bf6:	f7ff ff4b 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
   12bfa:	2800      	cmp	r0, #0
   12bfc:	d1f0      	bne.n	12be0 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   12bfe:	9f01      	ldr	r7, [sp, #4]
   12c00:	4632      	mov	r2, r6
   12c02:	68f9      	ldr	r1, [r7, #12]
   12c04:	4628      	mov	r0, r5
   12c06:	3101      	adds	r1, #1
   12c08:	f018 f892 	bl	2ad30 <memcpy>
		net_buf_unref(rsp);
   12c0c:	4638      	mov	r0, r7
   12c0e:	f007 fb0d 	bl	1a22c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   12c12:	4435      	add	r5, r6
		len -= count;
   12c14:	1ba4      	subs	r4, r4, r6
   12c16:	e7e1      	b.n	12bdc <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   12c18:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12c1c:	e7e0      	b.n	12be0 <bt_hci_le_rand+0x14>
   12c1e:	bf00      	nop
   12c20:	20008000 	.word	0x20008000

00012c24 <bt_hci_le_enh_conn_complete>:
{
   12c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12c28:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   12c2c:	2700      	movs	r7, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   12c2e:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   12c32:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   12c36:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   12c38:	4a9f      	ldr	r2, [pc, #636]	; (12eb8 <bt_hci_le_enh_conn_complete+0x294>)
   12c3a:	b29b      	uxth	r3, r3
   12c3c:	8811      	ldrh	r1, [r2, #0]
{
   12c3e:	b08a      	sub	sp, #40	; 0x28
		if (disconnected_handles[i] == handle) {
   12c40:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   12c42:	bf04      	itt	eq
   12c44:	8017      	strheq	r7, [r2, #0]
			return true;
   12c46:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   12c48:	f000 fe96 	bl	13978 <bt_id_pending_keys_update>
	if (evt->status) {
   12c4c:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12c4e:	fa1f f988 	uxth.w	r9, r8
	if (evt->status) {
   12c52:	b37e      	cbz	r6, 12cb4 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12c54:	2e3c      	cmp	r6, #60	; 0x3c
   12c56:	d121      	bne.n	12c9c <bt_hci_le_enh_conn_complete+0x78>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12c58:	f001 fada 	bl	14210 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12c5c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12c60:	3010      	adds	r0, #16
   12c62:	f014 fc89 	bl	27578 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12c66:	2000      	movs	r0, #0
   12c68:	f7ff fb02 	bl	12270 <find_pending_connect.part.0>
		if (!conn) {
   12c6c:	4604      	mov	r4, r0
   12c6e:	b958      	cbnz	r0, 12c88 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   12c70:	4b92      	ldr	r3, [pc, #584]	; (12ebc <bt_hci_le_enh_conn_complete+0x298>)
   12c72:	2201      	movs	r2, #1
   12c74:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12c78:	4991      	ldr	r1, [pc, #580]	; (12ec0 <bt_hci_le_enh_conn_complete+0x29c>)
   12c7a:	4603      	mov	r3, r0
   12c7c:	9000      	str	r0, [sp, #0]
   12c7e:	f014 fc6c 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   12c82:	b00a      	add	sp, #40	; 0x28
   12c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12c88:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12c8a:	2100      	movs	r1, #0
   12c8c:	f002 f9ec 	bl	15068 <bt_conn_set_state>
		bt_conn_unref(conn);
   12c90:	4620      	mov	r0, r4
}
   12c92:	b00a      	add	sp, #40	; 0x28
   12c94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   12c98:	f002 b9ae 	b.w	14ff8 <bt_conn_unref>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   12c9c:	4b89      	ldr	r3, [pc, #548]	; (12ec4 <bt_hci_le_enh_conn_complete+0x2a0>)
   12c9e:	2202      	movs	r2, #2
   12ca0:	9302      	str	r3, [sp, #8]
   12ca2:	2300      	movs	r3, #0
   12ca4:	4986      	ldr	r1, [pc, #536]	; (12ec0 <bt_hci_le_enh_conn_complete+0x29c>)
   12ca6:	4618      	mov	r0, r3
   12ca8:	e9cd 3300 	strd	r3, r3, [sp]
   12cac:	9603      	str	r6, [sp, #12]
   12cae:	f014 fc54 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		return;
   12cb2:	e7e6      	b.n	12c82 <bt_hci_le_enh_conn_complete+0x5e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12cb4:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12cb6:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12cba:	3b02      	subs	r3, #2
   12cbc:	2b01      	cmp	r3, #1
   12cbe:	d827      	bhi.n	12d10 <bt_hci_le_enh_conn_complete+0xec>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12cc0:	4651      	mov	r1, sl
   12cc2:	a808      	add	r0, sp, #32
   12cc4:	f014 fc42 	bl	2754c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12cc8:	f89d 3020 	ldrb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12ccc:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12cd0:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12cd2:	f10d 0019 	add.w	r0, sp, #25
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12cd6:	f88d 3020 	strb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12cda:	f014 fc32 	bl	27542 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12cde:	2301      	movs	r3, #1
   12ce0:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12ce4:	78eb      	ldrb	r3, [r5, #3]
   12ce6:	2b01      	cmp	r3, #1
   12ce8:	d025      	beq.n	12d36 <bt_hci_le_enh_conn_complete+0x112>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   12cea:	4650      	mov	r0, sl
   12cec:	f7ff f98c 	bl	12008 <bt_addr_le_str>
   12cf0:	4b75      	ldr	r3, [pc, #468]	; (12ec8 <bt_hci_le_enh_conn_complete+0x2a4>)
   12cf2:	9003      	str	r0, [sp, #12]
   12cf4:	9302      	str	r3, [sp, #8]
   12cf6:	2300      	movs	r3, #0
   12cf8:	2201      	movs	r2, #1
   12cfa:	4618      	mov	r0, r3
   12cfc:	e9cd 3300 	strd	r3, r3, [sp]
   12d00:	496f      	ldr	r1, [pc, #444]	; (12ec0 <bt_hci_le_enh_conn_complete+0x29c>)
   12d02:	f014 fc2a 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   12d06:	211f      	movs	r1, #31
   12d08:	4648      	mov	r0, r9
   12d0a:	f014 fc4d 	bl	275a8 <bt_hci_disconnect>
		return;
   12d0e:	e7b8      	b.n	12c82 <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12d10:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   12d12:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12d14:	2b01      	cmp	r3, #1
   12d16:	bf04      	itt	eq
   12d18:	4b6c      	ldreq	r3, [pc, #432]	; (12ecc <bt_hci_le_enh_conn_complete+0x2a8>)
   12d1a:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12d1e:	4630      	mov	r0, r6
   12d20:	f014 fd6f 	bl	27802 <bt_lookup_id_addr>
   12d24:	4601      	mov	r1, r0
   12d26:	a808      	add	r0, sp, #32
   12d28:	f014 fc10 	bl	2754c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   12d2c:	4651      	mov	r1, sl
   12d2e:	a806      	add	r0, sp, #24
   12d30:	f014 fc0c 	bl	2754c <bt_addr_le_copy>
   12d34:	e7d6      	b.n	12ce4 <bt_hci_le_enh_conn_complete+0xc0>
   12d36:	a808      	add	r0, sp, #32
   12d38:	f7ff fa9a 	bl	12270 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12d3c:	78eb      	ldrb	r3, [r5, #3]
   12d3e:	4604      	mov	r4, r0
   12d40:	2b01      	cmp	r3, #1
   12d42:	d10a      	bne.n	12d5a <bt_hci_le_enh_conn_complete+0x136>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12d44:	f001 fa64 	bl	14210 <bt_le_adv_lookup_legacy>
   12d48:	4606      	mov	r6, r0
   12d4a:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12d4e:	3010      	adds	r0, #16
   12d50:	f014 fc12 	bl	27578 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   12d54:	4630      	mov	r0, r6
   12d56:	f014 fe82 	bl	27a5e <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   12d5a:	2c00      	cmp	r4, #0
   12d5c:	d0c5      	beq.n	12cea <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   12d5e:	4620      	mov	r0, r4
	conn->err = 0U;
   12d60:	2200      	movs	r2, #0
	conn->handle = handle;
   12d62:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12d66:	a908      	add	r1, sp, #32
   12d68:	f014 fbf0 	bl	2754c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12d6c:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   12d70:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12d74:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   12d78:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12d7c:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   12d80:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12d84:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   12d86:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12d88:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   12d8a:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12d8c:	d115      	bne.n	12dba <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   12d8e:	a906      	add	r1, sp, #24
   12d90:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12d94:	f014 fbda 	bl	2754c <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12d98:	f001 fa3a 	bl	14210 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   12d9c:	7a21      	ldrb	r1, [r4, #8]
   12d9e:	4a4b      	ldr	r2, [pc, #300]	; (12ecc <bt_hci_le_enh_conn_complete+0x2a8>)
   12da0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   12da4:	4411      	add	r1, r2
   12da6:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12daa:	f014 fbcf 	bl	2754c <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   12dae:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   12db2:	065d      	lsls	r5, r3, #25
   12db4:	d501      	bpl.n	12dba <bt_hci_le_enh_conn_complete+0x196>
			bt_le_adv_resume();
   12db6:	f001 fbef 	bl	14598 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12dba:	2107      	movs	r1, #7
   12dbc:	4620      	mov	r0, r4
   12dbe:	f002 f953 	bl	15068 <bt_conn_set_state>
	if (is_disconnected) {
   12dc2:	b11f      	cbz	r7, 12dcc <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12dc4:	2101      	movs	r1, #1
   12dc6:	4620      	mov	r0, r4
   12dc8:	f002 f94e 	bl	15068 <bt_conn_set_state>
	bt_conn_connected(conn);
   12dcc:	4620      	mov	r0, r4
   12dce:	f014 fef7 	bl	27bc0 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   12dd2:	7b63      	ldrb	r3, [r4, #13]
   12dd4:	2b07      	cmp	r3, #7
   12dd6:	d167      	bne.n	12ea8 <bt_hci_le_enh_conn_complete+0x284>
   12dd8:	1d23      	adds	r3, r4, #4
   12dda:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12dde:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12de2:	4e3a      	ldr	r6, [pc, #232]	; (12ecc <bt_hci_le_enh_conn_complete+0x2a8>)
   12de4:	d125      	bne.n	12e32 <bt_hci_le_enh_conn_complete+0x20e>
   12de6:	78e3      	ldrb	r3, [r4, #3]
   12de8:	b11b      	cbz	r3, 12df2 <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   12dea:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   12dee:	0718      	lsls	r0, r3, #28
   12df0:	d51f      	bpl.n	12e32 <bt_hci_le_enh_conn_complete+0x20e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12df2:	2102      	movs	r1, #2
   12df4:	f242 0016 	movw	r0, #8214	; 0x2016
   12df8:	f7ff fdfc 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   12dfc:	4605      	mov	r5, r0
   12dfe:	2800      	cmp	r0, #0
   12e00:	d056      	beq.n	12eb0 <bt_hci_le_enh_conn_complete+0x28c>
   12e02:	2102      	movs	r1, #2
   12e04:	300c      	adds	r0, #12
   12e06:	f007 fb33 	bl	1a470 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12e0a:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12e0c:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   12e0e:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12e10:	4629      	mov	r1, r5
   12e12:	f242 0016 	movw	r0, #8214	; 0x2016
   12e16:	f7ff fe3b 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
   12e1a:	b150      	cbz	r0, 12e32 <bt_hci_le_enh_conn_complete+0x20e>
			LOG_ERR("Failed read remote features (%d)", err);
   12e1c:	4b2c      	ldr	r3, [pc, #176]	; (12ed0 <bt_hci_le_enh_conn_complete+0x2ac>)
   12e1e:	9003      	str	r0, [sp, #12]
   12e20:	9302      	str	r3, [sp, #8]
   12e22:	2300      	movs	r3, #0
   12e24:	2201      	movs	r2, #1
   12e26:	4618      	mov	r0, r3
   12e28:	e9cd 3300 	strd	r3, r3, [sp]
   12e2c:	4924      	ldr	r1, [pc, #144]	; (12ec0 <bt_hci_le_enh_conn_complete+0x29c>)
   12e2e:	f014 fb94 	bl	2755a <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12e32:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   12e36:	07d9      	lsls	r1, r3, #31
   12e38:	d513      	bpl.n	12e62 <bt_hci_le_enh_conn_complete+0x23e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12e3a:	2500      	movs	r5, #0
   12e3c:	2302      	movs	r3, #2
   12e3e:	4629      	mov	r1, r5
   12e40:	461a      	mov	r2, r3
   12e42:	4620      	mov	r0, r4
   12e44:	9500      	str	r5, [sp, #0]
   12e46:	f014 fbe8 	bl	2761a <bt_le_set_phy>
		if (err) {
   12e4a:	b150      	cbz	r0, 12e62 <bt_hci_le_enh_conn_complete+0x23e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   12e4c:	4b21      	ldr	r3, [pc, #132]	; (12ed4 <bt_hci_le_enh_conn_complete+0x2b0>)
   12e4e:	9003      	str	r0, [sp, #12]
   12e50:	e9cd 5301 	strd	r5, r3, [sp, #4]
   12e54:	2201      	movs	r2, #1
   12e56:	462b      	mov	r3, r5
   12e58:	4628      	mov	r0, r5
   12e5a:	4919      	ldr	r1, [pc, #100]	; (12ec0 <bt_hci_le_enh_conn_complete+0x29c>)
   12e5c:	9500      	str	r5, [sp, #0]
   12e5e:	f014 fb7c 	bl	2755a <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12e62:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   12e66:	069a      	lsls	r2, r3, #26
   12e68:	d51e      	bpl.n	12ea8 <bt_hci_le_enh_conn_complete+0x284>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12e6a:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   12e6e:	689b      	ldr	r3, [r3, #8]
   12e70:	079b      	lsls	r3, r3, #30
   12e72:	d519      	bpl.n	12ea8 <bt_hci_le_enh_conn_complete+0x284>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12e74:	f10d 0116 	add.w	r1, sp, #22
   12e78:	a805      	add	r0, sp, #20
   12e7a:	f7ff fe7f 	bl	12b7c <hci_le_read_max_data_len>
			if (!err) {
   12e7e:	4605      	mov	r5, r0
   12e80:	b990      	cbnz	r0, 12ea8 <bt_hci_le_enh_conn_complete+0x284>
				err = bt_le_set_data_len(conn,
   12e82:	4620      	mov	r0, r4
   12e84:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   12e88:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   12e8c:	f014 fba7 	bl	275de <bt_le_set_data_len>
				if (err) {
   12e90:	b150      	cbz	r0, 12ea8 <bt_hci_le_enh_conn_complete+0x284>
					LOG_ERR("Failed to set data len (%d)", err);
   12e92:	4b11      	ldr	r3, [pc, #68]	; (12ed8 <bt_hci_le_enh_conn_complete+0x2b4>)
   12e94:	9003      	str	r0, [sp, #12]
   12e96:	e9cd 5301 	strd	r5, r3, [sp, #4]
   12e9a:	2201      	movs	r2, #1
   12e9c:	462b      	mov	r3, r5
   12e9e:	4628      	mov	r0, r5
   12ea0:	4907      	ldr	r1, [pc, #28]	; (12ec0 <bt_hci_le_enh_conn_complete+0x29c>)
   12ea2:	9500      	str	r5, [sp, #0]
   12ea4:	f014 fb59 	bl	2755a <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   12ea8:	4620      	mov	r0, r4
   12eaa:	f002 f8a5 	bl	14ff8 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12eae:	e6e8      	b.n	12c82 <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   12eb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12eb4:	e7b2      	b.n	12e1c <bt_hci_le_enh_conn_complete+0x1f8>
   12eb6:	bf00      	nop
   12eb8:	20022c26 	.word	0x20022c26
   12ebc:	0002f430 	.word	0x0002f430
   12ec0:	0002c094 	.word	0x0002c094
   12ec4:	0002f451 	.word	0x0002f451
   12ec8:	0002f46a 	.word	0x0002f46a
   12ecc:	20008000 	.word	0x20008000
   12ed0:	0002f486 	.word	0x0002f486
   12ed4:	0002f4a7 	.word	0x0002f4a7
   12ed8:	0002f4be 	.word	0x0002f4be

00012edc <le_legacy_conn_complete>:
{
   12edc:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   12ede:	68c1      	ldr	r1, [r0, #12]
{
   12ee0:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   12ee2:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12ee4:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   12ee6:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   12eea:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12eee:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   12ef0:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   12ef4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12ef8:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   12efc:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   12f00:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   12f04:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   12f08:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   12f0c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   12f10:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   12f14:	7b4b      	ldrb	r3, [r1, #13]
   12f16:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12f1a:	f014 fb17 	bl	2754c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   12f1e:	4907      	ldr	r1, [pc, #28]	; (12f3c <le_legacy_conn_complete+0x60>)
   12f20:	f10d 000b 	add.w	r0, sp, #11
   12f24:	f014 fb0d 	bl	27542 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12f28:	f10d 0011 	add.w	r0, sp, #17
   12f2c:	f014 fb09 	bl	27542 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   12f30:	4668      	mov	r0, sp
   12f32:	f7ff fe77 	bl	12c24 <bt_hci_le_enh_conn_complete>
}
   12f36:	b009      	add	sp, #36	; 0x24
   12f38:	f85d fb04 	ldr.w	pc, [sp], #4
   12f3c:	0002f0a3 	.word	0x0002f0a3

00012f40 <bt_security_err_get>:
	switch (hci_err) {
   12f40:	2829      	cmp	r0, #41	; 0x29
   12f42:	bf9a      	itte	ls
   12f44:	4b01      	ldrls	r3, [pc, #4]	; (12f4c <bt_security_err_get+0xc>)
   12f46:	5c18      	ldrbls	r0, [r3, r0]
{
   12f48:	2009      	movhi	r0, #9
}
   12f4a:	4770      	bx	lr
   12f4c:	0002f760 	.word	0x0002f760

00012f50 <hci_encrypt_key_refresh_complete>:
{
   12f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   12f52:	68c3      	ldr	r3, [r0, #12]
{
   12f54:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(evt->handle);
   12f56:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   12f5a:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   12f5c:	4630      	mov	r0, r6
   12f5e:	f002 f87b 	bl	15058 <bt_conn_lookup_handle>
	if (!conn) {
   12f62:	4604      	mov	r4, r0
   12f64:	b958      	cbnz	r0, 12f7e <hci_encrypt_key_refresh_complete+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12f66:	4b1e      	ldr	r3, [pc, #120]	; (12fe0 <hci_encrypt_key_refresh_complete+0x90>)
   12f68:	2201      	movs	r2, #1
   12f6a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12f6e:	491d      	ldr	r1, [pc, #116]	; (12fe4 <hci_encrypt_key_refresh_complete+0x94>)
   12f70:	4603      	mov	r3, r0
   12f72:	9603      	str	r6, [sp, #12]
   12f74:	9000      	str	r0, [sp, #0]
   12f76:	f014 faf0 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   12f7a:	b005      	add	sp, #20
   12f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   12f7e:	b16d      	cbz	r5, 12f9c <hci_encrypt_key_refresh_complete+0x4c>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12f80:	4628      	mov	r0, r5
   12f82:	f7ff ffdd 	bl	12f40 <bt_security_err_get>
   12f86:	4629      	mov	r1, r5
   12f88:	4602      	mov	r2, r0
   12f8a:	4620      	mov	r0, r4
   12f8c:	f002 faa4 	bl	154d8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12f90:	4620      	mov	r0, r4
}
   12f92:	b005      	add	sp, #20
   12f94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   12f98:	f002 b82e 	b.w	14ff8 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   12f9c:	7887      	ldrb	r7, [r0, #2]
   12f9e:	2f01      	cmp	r7, #1
   12fa0:	d1ee      	bne.n	12f80 <hci_encrypt_key_refresh_complete+0x30>
		bt_smp_update_keys(conn);
   12fa2:	f006 fc2b 	bl	197fc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12fa6:	4620      	mov	r0, r4
   12fa8:	f014 faa7 	bl	274fa <update_sec_level>
   12fac:	4606      	mov	r6, r0
   12fae:	2800      	cmp	r0, #0
   12fb0:	d1e6      	bne.n	12f80 <hci_encrypt_key_refresh_complete+0x30>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12fb2:	2005      	movs	r0, #5
   12fb4:	f7ff ffc4 	bl	12f40 <bt_security_err_get>
   12fb8:	2105      	movs	r1, #5
   12fba:	4602      	mov	r2, r0
   12fbc:	4620      	mov	r0, r4
   12fbe:	f002 fa8b 	bl	154d8 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12fc2:	4b09      	ldr	r3, [pc, #36]	; (12fe8 <hci_encrypt_key_refresh_complete+0x98>)
   12fc4:	4630      	mov	r0, r6
   12fc6:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12fca:	463a      	mov	r2, r7
   12fcc:	4633      	mov	r3, r6
   12fce:	4905      	ldr	r1, [pc, #20]	; (12fe4 <hci_encrypt_key_refresh_complete+0x94>)
   12fd0:	9600      	str	r6, [sp, #0]
   12fd2:	f014 fac2 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12fd6:	2105      	movs	r1, #5
   12fd8:	4620      	mov	r0, r4
   12fda:	f014 fdfa 	bl	27bd2 <bt_conn_disconnect>
   12fde:	e7d7      	b.n	12f90 <hci_encrypt_key_refresh_complete+0x40>
   12fe0:	0002f1fa 	.word	0x0002f1fa
   12fe4:	0002c094 	.word	0x0002c094
   12fe8:	0002f4da 	.word	0x0002f4da

00012fec <hci_encrypt_change>:
{
   12fec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   12fee:	68c6      	ldr	r6, [r0, #12]
{
   12ff0:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12ff2:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   12ff6:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   12ff8:	4638      	mov	r0, r7
   12ffa:	f002 f82d 	bl	15058 <bt_conn_lookup_handle>
	if (!conn) {
   12ffe:	4604      	mov	r4, r0
   13000:	b958      	cbnz	r0, 1301a <hci_encrypt_change+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   13002:	4b23      	ldr	r3, [pc, #140]	; (13090 <hci_encrypt_change+0xa4>)
   13004:	2201      	movs	r2, #1
   13006:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1300a:	4922      	ldr	r1, [pc, #136]	; (13094 <hci_encrypt_change+0xa8>)
   1300c:	4603      	mov	r3, r0
   1300e:	9703      	str	r7, [sp, #12]
   13010:	9000      	str	r0, [sp, #0]
   13012:	f014 faa2 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   13016:	b005      	add	sp, #20
   13018:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1301a:	b16d      	cbz	r5, 13038 <hci_encrypt_change+0x4c>
		bt_conn_security_changed(conn, status,
   1301c:	4628      	mov	r0, r5
   1301e:	f7ff ff8f 	bl	12f40 <bt_security_err_get>
   13022:	4629      	mov	r1, r5
   13024:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   13026:	4620      	mov	r0, r4
   13028:	f002 fa56 	bl	154d8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1302c:	4620      	mov	r0, r4
}
   1302e:	b005      	add	sp, #20
   13030:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   13034:	f001 bfe0 	b.w	14ff8 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   13038:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1303a:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   1303c:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   1303e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   13040:	d005      	beq.n	1304e <hci_encrypt_change+0x62>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   13042:	2000      	movs	r0, #0
   13044:	f7ff ff7c 	bl	12f40 <bt_security_err_get>
   13048:	2100      	movs	r1, #0
   1304a:	4602      	mov	r2, r0
   1304c:	e7eb      	b.n	13026 <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   1304e:	b10b      	cbz	r3, 13054 <hci_encrypt_change+0x68>
			bt_smp_update_keys(conn);
   13050:	f006 fbd4 	bl	197fc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   13054:	4620      	mov	r0, r4
   13056:	f014 fa50 	bl	274fa <update_sec_level>
   1305a:	4605      	mov	r5, r0
   1305c:	2800      	cmp	r0, #0
   1305e:	d1f0      	bne.n	13042 <hci_encrypt_change+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   13060:	2005      	movs	r0, #5
   13062:	f7ff ff6d 	bl	12f40 <bt_security_err_get>
   13066:	2105      	movs	r1, #5
   13068:	4602      	mov	r2, r0
   1306a:	4620      	mov	r0, r4
   1306c:	f002 fa34 	bl	154d8 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   13070:	4b09      	ldr	r3, [pc, #36]	; (13098 <hci_encrypt_change+0xac>)
   13072:	4628      	mov	r0, r5
   13074:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13078:	2201      	movs	r2, #1
   1307a:	462b      	mov	r3, r5
   1307c:	4905      	ldr	r1, [pc, #20]	; (13094 <hci_encrypt_change+0xa8>)
   1307e:	9500      	str	r5, [sp, #0]
   13080:	f014 fa6b 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   13084:	2105      	movs	r1, #5
   13086:	4620      	mov	r0, r4
   13088:	f014 fda3 	bl	27bd2 <bt_conn_disconnect>
   1308c:	e7ce      	b.n	1302c <hci_encrypt_change+0x40>
   1308e:	bf00      	nop
   13090:	0002f1fa 	.word	0x0002f1fa
   13094:	0002c094 	.word	0x0002c094
   13098:	0002f4da 	.word	0x0002f4da

0001309c <bt_send>:
	return bt_dev.drv->send(buf);
   1309c:	4b02      	ldr	r3, [pc, #8]	; (130a8 <bt_send+0xc>)
   1309e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   130a2:	695b      	ldr	r3, [r3, #20]
   130a4:	4718      	bx	r3
   130a6:	bf00      	nop
   130a8:	20008000 	.word	0x20008000

000130ac <bt_hci_cmd_send>:
{
   130ac:	b530      	push	{r4, r5, lr}
   130ae:	4605      	mov	r5, r0
	if (!buf) {
   130b0:	460c      	mov	r4, r1
{
   130b2:	b085      	sub	sp, #20
	if (!buf) {
   130b4:	b919      	cbnz	r1, 130be <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   130b6:	f7ff fc9d 	bl	129f4 <bt_hci_cmd_create>
		if (!buf) {
   130ba:	4604      	mov	r4, r0
   130bc:	b1f8      	cbz	r0, 130fe <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   130be:	f640 4335 	movw	r3, #3125	; 0xc35
   130c2:	429d      	cmp	r5, r3
   130c4:	d115      	bne.n	130f2 <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   130c6:	4620      	mov	r0, r4
   130c8:	f7ff ffe8 	bl	1309c <bt_send>
		if (err) {
   130cc:	4605      	mov	r5, r0
   130ce:	b1a0      	cbz	r0, 130fa <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   130d0:	4b0c      	ldr	r3, [pc, #48]	; (13104 <bt_hci_cmd_send+0x58>)
   130d2:	9003      	str	r0, [sp, #12]
   130d4:	9302      	str	r3, [sp, #8]
   130d6:	2300      	movs	r3, #0
   130d8:	2201      	movs	r2, #1
   130da:	4618      	mov	r0, r3
   130dc:	e9cd 3300 	strd	r3, r3, [sp]
   130e0:	4909      	ldr	r1, [pc, #36]	; (13108 <bt_hci_cmd_send+0x5c>)
   130e2:	f014 fa3a 	bl	2755a <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   130e6:	4620      	mov	r0, r4
   130e8:	f007 f8a0 	bl	1a22c <net_buf_unref>
}
   130ec:	4628      	mov	r0, r5
   130ee:	b005      	add	sp, #20
   130f0:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   130f2:	4621      	mov	r1, r4
   130f4:	4805      	ldr	r0, [pc, #20]	; (1310c <bt_hci_cmd_send+0x60>)
   130f6:	f007 f873 	bl	1a1e0 <net_buf_put>
	return 0;
   130fa:	2500      	movs	r5, #0
   130fc:	e7f6      	b.n	130ec <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   130fe:	f06f 0568 	mvn.w	r5, #104	; 0x68
   13102:	e7f3      	b.n	130ec <bt_hci_cmd_send+0x40>
   13104:	0002f500 	.word	0x0002f500
   13108:	0002c094 	.word	0x0002c094
   1310c:	20008144 	.word	0x20008144

00013110 <bt_hci_host_num_completed_packets>:
{
   13110:	b5f0      	push	{r4, r5, r6, r7, lr}
   13112:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   13114:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   13116:	7e46      	ldrb	r6, [r0, #25]
{
   13118:	b085      	sub	sp, #20
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1311a:	7a80      	ldrb	r0, [r0, #10]
   1311c:	f006 fe4c 	bl	19db8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   13120:	4621      	mov	r1, r4
   13122:	f017 fc44 	bl	2a9ae <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   13126:	4b2a      	ldr	r3, [pc, #168]	; (131d0 <bt_hci_host_num_completed_packets+0xc0>)
   13128:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   1312c:	069b      	lsls	r3, r3, #26
   1312e:	d50e      	bpl.n	1314e <bt_hci_host_num_completed_packets+0x3e>
	conn = bt_conn_lookup_index(index);
   13130:	4630      	mov	r0, r6
   13132:	f002 fc2f 	bl	15994 <bt_conn_lookup_index>
	if (!conn) {
   13136:	4604      	mov	r4, r0
   13138:	b958      	cbnz	r0, 13152 <bt_hci_host_num_completed_packets+0x42>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   1313a:	4b26      	ldr	r3, [pc, #152]	; (131d4 <bt_hci_host_num_completed_packets+0xc4>)
   1313c:	2202      	movs	r2, #2
   1313e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13142:	4925      	ldr	r1, [pc, #148]	; (131d8 <bt_hci_host_num_completed_packets+0xc8>)
   13144:	4603      	mov	r3, r0
   13146:	9603      	str	r6, [sp, #12]
   13148:	9000      	str	r0, [sp, #0]
   1314a:	f014 fa06 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   1314e:	b005      	add	sp, #20
   13150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   13152:	7b43      	ldrb	r3, [r0, #13]
   13154:	3b07      	subs	r3, #7
   13156:	2b01      	cmp	r3, #1
   13158:	d90f      	bls.n	1317a <bt_hci_host_num_completed_packets+0x6a>
		LOG_WRN("Not reporting packet for non-connected conn");
   1315a:	4b20      	ldr	r3, [pc, #128]	; (131dc <bt_hci_host_num_completed_packets+0xcc>)
   1315c:	2202      	movs	r2, #2
   1315e:	9302      	str	r3, [sp, #8]
   13160:	2300      	movs	r3, #0
   13162:	491d      	ldr	r1, [pc, #116]	; (131d8 <bt_hci_host_num_completed_packets+0xc8>)
   13164:	4618      	mov	r0, r3
   13166:	e9cd 3300 	strd	r3, r3, [sp]
   1316a:	f014 f9f6 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1316e:	4620      	mov	r0, r4
}
   13170:	b005      	add	sp, #20
   13172:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   13176:	f001 bf3f 	b.w	14ff8 <bt_conn_unref>
	bt_conn_unref(conn);
   1317a:	f001 ff3d 	bl	14ff8 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   1317e:	2105      	movs	r1, #5
   13180:	f640 4035 	movw	r0, #3125	; 0xc35
   13184:	f7ff fc36 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   13188:	4604      	mov	r4, r0
   1318a:	b948      	cbnz	r0, 131a0 <bt_hci_host_num_completed_packets+0x90>
		LOG_ERR("Unable to allocate new HCI command");
   1318c:	4b14      	ldr	r3, [pc, #80]	; (131e0 <bt_hci_host_num_completed_packets+0xd0>)
   1318e:	2201      	movs	r2, #1
   13190:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13194:	4910      	ldr	r1, [pc, #64]	; (131d8 <bt_hci_host_num_completed_packets+0xc8>)
   13196:	4603      	mov	r3, r0
   13198:	9000      	str	r0, [sp, #0]
   1319a:	f014 f9de 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		return;
   1319e:	e7d6      	b.n	1314e <bt_hci_host_num_completed_packets+0x3e>
	return net_buf_simple_add(&buf->b, len);
   131a0:	f100 070c 	add.w	r7, r0, #12
   131a4:	2101      	movs	r1, #1
   131a6:	4638      	mov	r0, r7
   131a8:	f007 f962 	bl	1a470 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   131ac:	2601      	movs	r6, #1
   131ae:	2104      	movs	r1, #4
   131b0:	7006      	strb	r6, [r0, #0]
   131b2:	4638      	mov	r0, r7
   131b4:	f007 f95c 	bl	1a470 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   131b8:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   131ba:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   131bc:	7086      	strb	r6, [r0, #2]
   131be:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   131c0:	4621      	mov	r1, r4
   131c2:	f640 4035 	movw	r0, #3125	; 0xc35
}
   131c6:	b005      	add	sp, #20
   131c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   131cc:	f7ff bf6e 	b.w	130ac <bt_hci_cmd_send>
   131d0:	20008000 	.word	0x20008000
   131d4:	0002f522 	.word	0x0002f522
   131d8:	0002c094 	.word	0x0002c094
   131dc:	0002f54b 	.word	0x0002f54b
   131e0:	0002f577 	.word	0x0002f577

000131e4 <le_ltk_request>:
{
   131e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   131e6:	68c6      	ldr	r6, [r0, #12]
{
   131e8:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
   131ea:	8837      	ldrh	r7, [r6, #0]
   131ec:	b2bd      	uxth	r5, r7
	conn = bt_conn_lookup_handle(handle);
   131ee:	4628      	mov	r0, r5
   131f0:	f001 ff32 	bl	15058 <bt_conn_lookup_handle>
	if (!conn) {
   131f4:	4604      	mov	r4, r0
   131f6:	b958      	cbnz	r0, 13210 <le_ltk_request+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   131f8:	4b2a      	ldr	r3, [pc, #168]	; (132a4 <le_ltk_request+0xc0>)
   131fa:	2201      	movs	r2, #1
   131fc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13200:	4929      	ldr	r1, [pc, #164]	; (132a8 <le_ltk_request+0xc4>)
   13202:	4603      	mov	r3, r0
   13204:	9503      	str	r5, [sp, #12]
   13206:	9000      	str	r0, [sp, #0]
   13208:	f014 f9a7 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   1320c:	b009      	add	sp, #36	; 0x24
   1320e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   13210:	ad04      	add	r5, sp, #16
   13212:	f8d6 2002 	ldr.w	r2, [r6, #2]
   13216:	f8d6 3006 	ldr.w	r3, [r6, #6]
   1321a:	9501      	str	r5, [sp, #4]
   1321c:	8971      	ldrh	r1, [r6, #10]
   1321e:	9100      	str	r1, [sp, #0]
   13220:	f015 fe40 	bl	28ea4 <bt_smp_request_ltk>
   13224:	b360      	cbz	r0, 13280 <le_ltk_request+0x9c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   13226:	2112      	movs	r1, #18
   13228:	f242 001a 	movw	r0, #8218	; 0x201a
   1322c:	f7ff fbe2 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   13230:	4606      	mov	r6, r0
   13232:	b968      	cbnz	r0, 13250 <le_ltk_request+0x6c>
		LOG_ERR("Out of command buffers");
   13234:	4b1d      	ldr	r3, [pc, #116]	; (132ac <le_ltk_request+0xc8>)
   13236:	2201      	movs	r2, #1
   13238:	9302      	str	r3, [sp, #8]
   1323a:	2300      	movs	r3, #0
   1323c:	491a      	ldr	r1, [pc, #104]	; (132a8 <le_ltk_request+0xc4>)
   1323e:	4618      	mov	r0, r3
   13240:	e9cd 3300 	strd	r3, r3, [sp]
   13244:	f014 f989 	bl	2755a <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   13248:	4620      	mov	r0, r4
   1324a:	f001 fed5 	bl	14ff8 <bt_conn_unref>
   1324e:	e7dd      	b.n	1320c <le_ltk_request+0x28>
   13250:	2112      	movs	r1, #18
   13252:	300c      	adds	r0, #12
   13254:	f007 f90c 	bl	1a470 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   13258:	4602      	mov	r2, r0
   1325a:	462b      	mov	r3, r5
   1325c:	f822 7b02 	strh.w	r7, [r2], #2
   13260:	af08      	add	r7, sp, #32
   13262:	461d      	mov	r5, r3
   13264:	cd03      	ldmia	r5!, {r0, r1}
   13266:	42bd      	cmp	r5, r7
   13268:	6010      	str	r0, [r2, #0]
   1326a:	6051      	str	r1, [r2, #4]
   1326c:	462b      	mov	r3, r5
   1326e:	f102 0208 	add.w	r2, r2, #8
   13272:	d1f6      	bne.n	13262 <le_ltk_request+0x7e>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   13274:	4631      	mov	r1, r6
   13276:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1327a:	f7ff ff17 	bl	130ac <bt_hci_cmd_send>
   1327e:	e7e3      	b.n	13248 <le_ltk_request+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   13280:	2102      	movs	r1, #2
   13282:	f242 001b 	movw	r0, #8219	; 0x201b
   13286:	f7ff fbb5 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   1328a:	4605      	mov	r5, r0
   1328c:	2800      	cmp	r0, #0
   1328e:	d0d1      	beq.n	13234 <le_ltk_request+0x50>
   13290:	2102      	movs	r1, #2
   13292:	300c      	adds	r0, #12
   13294:	f007 f8ec 	bl	1a470 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   13298:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   1329a:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1329c:	f242 001b 	movw	r0, #8219	; 0x201b
   132a0:	e7eb      	b.n	1327a <le_ltk_request+0x96>
   132a2:	bf00      	nop
   132a4:	0002f1d6 	.word	0x0002f1d6
   132a8:	0002c094 	.word	0x0002c094
   132ac:	0002f59a 	.word	0x0002f59a

000132b0 <le_conn_param_neg_reply>:
{
   132b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   132b2:	4606      	mov	r6, r0
   132b4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   132b6:	f242 0021 	movw	r0, #8225	; 0x2021
   132ba:	2103      	movs	r1, #3
   132bc:	f7ff fb9a 	bl	129f4 <bt_hci_cmd_create>
   132c0:	4604      	mov	r4, r0
	if (!buf) {
   132c2:	b950      	cbnz	r0, 132da <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   132c4:	4b0c      	ldr	r3, [pc, #48]	; (132f8 <le_conn_param_neg_reply+0x48>)
   132c6:	2201      	movs	r2, #1
   132c8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   132cc:	490b      	ldr	r1, [pc, #44]	; (132fc <le_conn_param_neg_reply+0x4c>)
   132ce:	4603      	mov	r3, r0
   132d0:	9000      	str	r0, [sp, #0]
   132d2:	f014 f942 	bl	2755a <z_log_msg_runtime_create.constprop.0>
}
   132d6:	b004      	add	sp, #16
   132d8:	bd70      	pop	{r4, r5, r6, pc}
   132da:	2103      	movs	r1, #3
   132dc:	300c      	adds	r0, #12
   132de:	f007 f8c7 	bl	1a470 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   132e2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   132e4:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   132e6:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   132e8:	f242 0021 	movw	r0, #8225	; 0x2021
}
   132ec:	b004      	add	sp, #16
   132ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   132f2:	f7ff bedb 	b.w	130ac <bt_hci_cmd_send>
   132f6:	bf00      	nop
   132f8:	0002f5b1 	.word	0x0002f5b1
   132fc:	0002c094 	.word	0x0002c094

00013300 <le_conn_param_req>:
{
   13300:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   13302:	68c3      	ldr	r3, [r0, #12]
{
   13304:	b086      	sub	sp, #24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   13306:	78d9      	ldrb	r1, [r3, #3]
   13308:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1330a:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1330c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13310:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   13314:	7959      	ldrb	r1, [r3, #5]
   13316:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   13318:	b2b5      	uxth	r5, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1331a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1331e:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   13322:	799a      	ldrb	r2, [r3, #6]
   13324:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   13326:	4628      	mov	r0, r5
	param.latency = sys_le16_to_cpu(evt->latency);
   13328:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1332c:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   13330:	7a1a      	ldrb	r2, [r3, #8]
   13332:	7a5b      	ldrb	r3, [r3, #9]
   13334:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   13338:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   1333c:	f001 fe8c 	bl	15058 <bt_conn_lookup_handle>
	if (!conn) {
   13340:	4604      	mov	r4, r0
   13342:	b978      	cbnz	r0, 13364 <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13344:	4b1e      	ldr	r3, [pc, #120]	; (133c0 <le_conn_param_req+0xc0>)
   13346:	491f      	ldr	r1, [pc, #124]	; (133c4 <le_conn_param_req+0xc4>)
   13348:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1334c:	9000      	str	r0, [sp, #0]
   1334e:	4603      	mov	r3, r0
   13350:	2201      	movs	r2, #1
   13352:	9503      	str	r5, [sp, #12]
   13354:	f014 f901 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   13358:	2102      	movs	r1, #2
   1335a:	4628      	mov	r0, r5
   1335c:	f7ff ffa8 	bl	132b0 <le_conn_param_neg_reply>
}
   13360:	b006      	add	sp, #24
   13362:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   13364:	a904      	add	r1, sp, #16
   13366:	f002 f81f 	bl	153a8 <le_param_req>
   1336a:	b938      	cbnz	r0, 1337c <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1336c:	211e      	movs	r1, #30
   1336e:	4628      	mov	r0, r5
   13370:	f7ff ff9e 	bl	132b0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   13374:	4620      	mov	r0, r4
   13376:	f001 fe3f 	bl	14ff8 <bt_conn_unref>
   1337a:	e7f1      	b.n	13360 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1337c:	210e      	movs	r1, #14
   1337e:	f242 0020 	movw	r0, #8224	; 0x2020
   13382:	f7ff fb37 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   13386:	4605      	mov	r5, r0
   13388:	2800      	cmp	r0, #0
   1338a:	d0f3      	beq.n	13374 <le_conn_param_req+0x74>
   1338c:	210e      	movs	r1, #14
   1338e:	300c      	adds	r0, #12
   13390:	f007 f86e 	bl	1a470 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13394:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   13396:	8006      	strh	r6, [r0, #0]
   13398:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1339c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   133a0:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   133a2:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   133a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   133a8:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   133aa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   133ae:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   133b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   133b4:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   133b6:	f242 0020 	movw	r0, #8224	; 0x2020
   133ba:	f7ff fe77 	bl	130ac <bt_hci_cmd_send>
   133be:	e7d9      	b.n	13374 <le_conn_param_req+0x74>
   133c0:	0002f1d6 	.word	0x0002f1d6
   133c4:	0002c094 	.word	0x0002c094

000133c8 <hci_tx_thread>:
{
   133c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   133cc:	f8df 8148 	ldr.w	r8, [pc, #328]	; 13518 <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   133d0:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1351c <hci_tx_thread+0x154>
{
   133d4:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   133d6:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   133da:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   133de:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   133e0:	f36f 3394 	bfc	r3, #14, #7
   133e4:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   133e8:	f001 fda6 	bl	14f38 <bt_conn_prepare_events>
   133ec:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   133ee:	f04f 32ff 	mov.w	r2, #4294967295
   133f2:	f04f 33ff 	mov.w	r3, #4294967295
   133f6:	4629      	mov	r1, r5
   133f8:	4847      	ldr	r0, [pc, #284]	; (13518 <hci_tx_thread+0x150>)
   133fa:	f010 fae7 	bl	239cc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   133fe:	b160      	cbz	r0, 1341a <hci_tx_thread+0x52>
   13400:	f640 13e6 	movw	r3, #2534	; 0x9e6
   13404:	464a      	mov	r2, r9
   13406:	4946      	ldr	r1, [pc, #280]	; (13520 <hci_tx_thread+0x158>)
   13408:	4846      	ldr	r0, [pc, #280]	; (13524 <hci_tx_thread+0x15c>)
   1340a:	f012 ff28 	bl	2625e <assert_print>
   1340e:	4040      	eors	r0, r0
   13410:	f380 8811 	msr	BASEPRI, r0
   13414:	f04f 0003 	mov.w	r0, #3
   13418:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1341a:	f04f 0a00 	mov.w	sl, #0
{
   1341e:	4e3e      	ldr	r6, [pc, #248]	; (13518 <hci_tx_thread+0x150>)
	for (; count; ev++, count--) {
   13420:	b915      	cbnz	r5, 13428 <hci_tx_thread+0x60>
	z_impl_k_yield();
   13422:	f00f fa1b 	bl	2285c <z_impl_k_yield>
	while (1) {
   13426:	e7d8      	b.n	133da <hci_tx_thread+0x12>
		switch (ev->state) {
   13428:	68f3      	ldr	r3, [r6, #12]
   1342a:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1342e:	2b01      	cmp	r3, #1
   13430:	d95a      	bls.n	134e8 <hci_tx_thread+0x120>
   13432:	2b04      	cmp	r3, #4
   13434:	d162      	bne.n	134fc <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   13436:	7b33      	ldrb	r3, [r6, #12]
   13438:	2b00      	cmp	r3, #0
   1343a:	d158      	bne.n	134ee <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1343c:	2200      	movs	r2, #0
   1343e:	2300      	movs	r3, #0
   13440:	4839      	ldr	r0, [pc, #228]	; (13528 <hci_tx_thread+0x160>)
   13442:	f015 fedd 	bl	29200 <net_buf_get>
	BT_ASSERT(buf);
   13446:	4604      	mov	r4, r0
   13448:	b960      	cbnz	r0, 13464 <hci_tx_thread+0x9c>
   1344a:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1344e:	464a      	mov	r2, r9
   13450:	4936      	ldr	r1, [pc, #216]	; (1352c <hci_tx_thread+0x164>)
   13452:	4834      	ldr	r0, [pc, #208]	; (13524 <hci_tx_thread+0x15c>)
   13454:	f012 ff03 	bl	2625e <assert_print>
   13458:	4040      	eors	r0, r0
   1345a:	f380 8811 	msr	BASEPRI, r0
   1345e:	f04f 0003 	mov.w	r0, #3
   13462:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   13464:	4f32      	ldr	r7, [pc, #200]	; (13530 <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   13466:	f04f 33ff 	mov.w	r3, #4294967295
   1346a:	f04f 32ff 	mov.w	r2, #4294967295
   1346e:	4831      	ldr	r0, [pc, #196]	; (13534 <hci_tx_thread+0x16c>)
   13470:	f00d fc7e 	bl	20d70 <z_impl_k_sem_take>
   13474:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   13478:	b183      	cbz	r3, 1349c <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   1347a:	4b2f      	ldr	r3, [pc, #188]	; (13538 <hci_tx_thread+0x170>)
   1347c:	2201      	movs	r2, #1
   1347e:	9302      	str	r3, [sp, #8]
   13480:	2300      	movs	r3, #0
   13482:	492e      	ldr	r1, [pc, #184]	; (1353c <hci_tx_thread+0x174>)
   13484:	4618      	mov	r0, r3
   13486:	e9cd 3300 	strd	r3, r3, [sp]
   1348a:	f014 f866 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   1348e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   13492:	f006 fecb 	bl	1a22c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13496:	2300      	movs	r3, #0
   13498:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1349c:	4620      	mov	r0, r4
   1349e:	f006 ff09 	bl	1a2b4 <net_buf_ref>
   134a2:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   134a6:	4620      	mov	r0, r4
   134a8:	f7ff fdf8 	bl	1309c <bt_send>
	if (err) {
   134ac:	b1e0      	cbz	r0, 134e8 <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   134ae:	4b24      	ldr	r3, [pc, #144]	; (13540 <hci_tx_thread+0x178>)
   134b0:	9003      	str	r0, [sp, #12]
   134b2:	9302      	str	r3, [sp, #8]
   134b4:	2300      	movs	r3, #0
   134b6:	2201      	movs	r2, #1
   134b8:	4618      	mov	r0, r3
   134ba:	e9cd 3300 	strd	r3, r3, [sp]
   134be:	491f      	ldr	r1, [pc, #124]	; (1353c <hci_tx_thread+0x174>)
   134c0:	f014 f84b 	bl	2755a <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   134c4:	481b      	ldr	r0, [pc, #108]	; (13534 <hci_tx_thread+0x16c>)
   134c6:	f00d fc0f 	bl	20ce8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   134ca:	4620      	mov	r0, r4
   134cc:	f006 fc7c 	bl	19dc8 <net_buf_id>
   134d0:	220c      	movs	r2, #12
   134d2:	4b1c      	ldr	r3, [pc, #112]	; (13544 <hci_tx_thread+0x17c>)
   134d4:	211f      	movs	r1, #31
   134d6:	fb02 3000 	mla	r0, r2, r0, r3
   134da:	4622      	mov	r2, r4
   134dc:	8840      	ldrh	r0, [r0, #2]
   134de:	f7ff f8d3 	bl	12688 <hci_cmd_done>
		net_buf_unref(buf);
   134e2:	4620      	mov	r0, r4
   134e4:	f006 fea2 	bl	1a22c <net_buf_unref>
	for (; count; ev++, count--) {
   134e8:	3614      	adds	r6, #20
   134ea:	3d01      	subs	r5, #1
   134ec:	e798      	b.n	13420 <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   134ee:	2b01      	cmp	r3, #1
   134f0:	d1fa      	bne.n	134e8 <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   134f2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   134f4:	3838      	subs	r0, #56	; 0x38
   134f6:	f002 f9b7 	bl	15868 <bt_conn_process_tx>
   134fa:	e7f5      	b.n	134e8 <hci_tx_thread+0x120>
		switch (ev->state) {
   134fc:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   134fe:	4b12      	ldr	r3, [pc, #72]	; (13548 <hci_tx_thread+0x180>)
   13500:	2202      	movs	r2, #2
   13502:	e9cd a301 	strd	sl, r3, [sp, #4]
   13506:	2300      	movs	r3, #0
   13508:	490c      	ldr	r1, [pc, #48]	; (1353c <hci_tx_thread+0x174>)
   1350a:	4618      	mov	r0, r3
   1350c:	f8cd a000 	str.w	sl, [sp]
   13510:	f014 f823 	bl	2755a <z_log_msg_runtime_create.constprop.0>
   13514:	e7e8      	b.n	134e8 <hci_tx_thread+0x120>
   13516:	bf00      	nop
   13518:	2000846c 	.word	0x2000846c
   1351c:	0002f264 	.word	0x0002f264
   13520:	0002e0cc 	.word	0x0002e0cc
   13524:	0002d095 	.word	0x0002d095
   13528:	20008144 	.word	0x20008144
   1352c:	00030d9e 	.word	0x00030d9e
   13530:	20008000 	.word	0x20008000
   13534:	20008120 	.word	0x20008120
   13538:	0002f5cb 	.word	0x0002f5cb
   1353c:	0002c094 	.word	0x0002c094
   13540:	0002f500 	.word	0x0002f500
   13544:	20022670 	.word	0x20022670
   13548:	0002f5e6 	.word	0x0002f5e6

0001354c <hci_event_prio>:
{
   1354c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13550:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   13552:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   13556:	4630      	mov	r0, r6
   13558:	f015 fe63 	bl	29222 <net_buf_simple_headroom>
	state->len = buf->len;
   1355c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   13560:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13562:	f1b8 0f01 	cmp.w	r8, #1
   13566:	d80c      	bhi.n	13582 <hci_event_prio+0x36>
   13568:	f640 537b 	movw	r3, #3451	; 0xd7b
   1356c:	4a1b      	ldr	r2, [pc, #108]	; (135dc <hci_event_prio+0x90>)
   1356e:	491c      	ldr	r1, [pc, #112]	; (135e0 <hci_event_prio+0x94>)
   13570:	481c      	ldr	r0, [pc, #112]	; (135e4 <hci_event_prio+0x98>)
   13572:	f012 fe74 	bl	2625e <assert_print>
   13576:	4040      	eors	r0, r0
   13578:	f380 8811 	msr	BASEPRI, r0
   1357c:	f04f 0003 	mov.w	r0, #3
   13580:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   13582:	4630      	mov	r0, r6
   13584:	2102      	movs	r1, #2
   13586:	f006 ff55 	bl	1a434 <net_buf_simple_pull_mem>
   1358a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1358c:	7800      	ldrb	r0, [r0, #0]
   1358e:	f013 ffa2 	bl	274d6 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13592:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13594:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13596:	d40c      	bmi.n	135b2 <hci_event_prio+0x66>
   13598:	f640 537f 	movw	r3, #3455	; 0xd7f
   1359c:	4a0f      	ldr	r2, [pc, #60]	; (135dc <hci_event_prio+0x90>)
   1359e:	4912      	ldr	r1, [pc, #72]	; (135e8 <hci_event_prio+0x9c>)
   135a0:	4810      	ldr	r0, [pc, #64]	; (135e4 <hci_event_prio+0x98>)
   135a2:	f012 fe5c 	bl	2625e <assert_print>
   135a6:	4040      	eors	r0, r0
   135a8:	f380 8811 	msr	BASEPRI, r0
   135ac:	f04f 0003 	mov.w	r0, #3
   135b0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   135b2:	2305      	movs	r3, #5
   135b4:	4621      	mov	r1, r4
   135b6:	4a0d      	ldr	r2, [pc, #52]	; (135ec <hci_event_prio+0xa0>)
   135b8:	7838      	ldrb	r0, [r7, #0]
   135ba:	f7fe ff23 	bl	12404 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   135be:	07b3      	lsls	r3, r6, #30
   135c0:	d507      	bpl.n	135d2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   135c2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   135c4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   135c8:	fa13 f585 	uxtah	r5, r3, r5
   135cc:	60e5      	str	r5, [r4, #12]
}
   135ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   135d2:	4620      	mov	r0, r4
}
   135d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   135d8:	f006 be28 	b.w	1a22c <net_buf_unref>
   135dc:	0002f264 	.word	0x0002f264
   135e0:	0002f298 	.word	0x0002f298
   135e4:	0002d095 	.word	0x0002d095
   135e8:	0002f607 	.word	0x0002f607
   135ec:	0002c92c 	.word	0x0002c92c

000135f0 <bt_recv>:
{
   135f0:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   135f2:	7e03      	ldrb	r3, [r0, #24]
   135f4:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   135f6:	2b01      	cmp	r3, #1
{
   135f8:	b085      	sub	sp, #20
	switch (bt_buf_get_type(buf)) {
   135fa:	d006      	beq.n	1360a <bt_recv+0x1a>
   135fc:	2b03      	cmp	r3, #3
   135fe:	d112      	bne.n	13626 <bt_recv+0x36>
			rx_queue_put(buf);
   13600:	f7fe fe62 	bl	122c8 <rx_queue_put>
		return 0;
   13604:	2000      	movs	r0, #0
}
   13606:	b005      	add	sp, #20
   13608:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1360a:	68c3      	ldr	r3, [r0, #12]
   1360c:	7818      	ldrb	r0, [r3, #0]
   1360e:	f013 ff62 	bl	274d6 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13612:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13614:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13616:	d502      	bpl.n	1361e <bt_recv+0x2e>
			hci_event_prio(buf);
   13618:	4620      	mov	r0, r4
   1361a:	f7ff ff97 	bl	1354c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1361e:	07ab      	lsls	r3, r5, #30
   13620:	d5f0      	bpl.n	13604 <bt_recv+0x14>
			rx_queue_put(buf);
   13622:	4620      	mov	r0, r4
   13624:	e7ec      	b.n	13600 <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   13626:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   13628:	4b07      	ldr	r3, [pc, #28]	; (13648 <bt_recv+0x58>)
   1362a:	2201      	movs	r2, #1
   1362c:	9302      	str	r3, [sp, #8]
   1362e:	2300      	movs	r3, #0
   13630:	4906      	ldr	r1, [pc, #24]	; (1364c <bt_recv+0x5c>)
   13632:	4618      	mov	r0, r3
   13634:	e9cd 3300 	strd	r3, r3, [sp]
   13638:	f013 ff8f 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1363c:	4620      	mov	r0, r4
   1363e:	f006 fdf5 	bl	1a22c <net_buf_unref>
		return -EINVAL;
   13642:	f06f 0015 	mvn.w	r0, #21
   13646:	e7de      	b.n	13606 <bt_recv+0x16>
   13648:	0002f620 	.word	0x0002f620
   1364c:	0002c094 	.word	0x0002c094

00013650 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   13650:	4a08      	ldr	r2, [pc, #32]	; (13674 <bt_hci_driver_register+0x24>)
{
   13652:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   13654:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   13658:	b930      	cbnz	r0, 13668 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1365a:	68d9      	ldr	r1, [r3, #12]
   1365c:	b139      	cbz	r1, 1366e <bt_hci_driver_register+0x1e>
   1365e:	6959      	ldr	r1, [r3, #20]
   13660:	b129      	cbz	r1, 1366e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   13662:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   13666:	4770      	bx	lr
		return -EALREADY;
   13668:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1366c:	4770      	bx	lr
		return -EINVAL;
   1366e:	f06f 0015 	mvn.w	r0, #21
}
   13672:	4770      	bx	lr
   13674:	20008000 	.word	0x20008000

00013678 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13678:	2104      	movs	r1, #4
   1367a:	4801      	ldr	r0, [pc, #4]	; (13680 <bt_finalize_init+0x8>)
   1367c:	f013 bf56 	b.w	2752c <atomic_or>
   13680:	200080cc 	.word	0x200080cc

00013684 <init_work>:
{
   13684:	b510      	push	{r4, lr}
	err = bt_init();
   13686:	f7f5 ff33 	bl	94f0 <bt_init>
	if (ready_cb) {
   1368a:	4b03      	ldr	r3, [pc, #12]	; (13698 <init_work+0x14>)
   1368c:	681b      	ldr	r3, [r3, #0]
   1368e:	b113      	cbz	r3, 13696 <init_work+0x12>
}
   13690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   13694:	4718      	bx	r3
}
   13696:	bd10      	pop	{r4, pc}
   13698:	200226e8 	.word	0x200226e8

0001369c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1369c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   1369e:	4e38      	ldr	r6, [pc, #224]	; (13780 <bt_enable+0xe4>)
{
   136a0:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   136a2:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
{
   136a6:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   136a8:	b96b      	cbnz	r3, 136c6 <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   136aa:	4a36      	ldr	r2, [pc, #216]	; (13784 <bt_enable+0xe8>)
   136ac:	4618      	mov	r0, r3
   136ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
   136b2:	4935      	ldr	r1, [pc, #212]	; (13788 <bt_enable+0xec>)
   136b4:	2201      	movs	r2, #1
   136b6:	9300      	str	r3, [sp, #0]
   136b8:	f013 ff4f 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   136bc:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   136c0:	4628      	mov	r0, r5
   136c2:	b009      	add	sp, #36	; 0x24
   136c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   136c6:	f06f 0102 	mvn.w	r1, #2
   136ca:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   136ce:	f013 ff53 	bl	27578 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   136d2:	2101      	movs	r1, #1
   136d4:	f013 ff2a 	bl	2752c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   136d8:	ea10 0401 	ands.w	r4, r0, r1
   136dc:	d14d      	bne.n	1377a <bt_enable+0xde>
	ready_cb = cb;
   136de:	4b2b      	ldr	r3, [pc, #172]	; (1378c <bt_enable+0xf0>)
   136e0:	601f      	str	r7, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   136e2:	460a      	mov	r2, r1
   136e4:	f506 7090 	add.w	r0, r6, #288	; 0x120
   136e8:	f017 f96b 	bl	2a9c2 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   136ec:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   136f0:	f017 f945 	bl	2a97e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   136f4:	2200      	movs	r2, #0
   136f6:	2300      	movs	r3, #0
   136f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   136fc:	f06f 0308 	mvn.w	r3, #8
   13700:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13704:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13708:	e9cd 4400 	strd	r4, r4, [sp]
   1370c:	4b20      	ldr	r3, [pc, #128]	; (13790 <bt_enable+0xf4>)
   1370e:	4921      	ldr	r1, [pc, #132]	; (13794 <bt_enable+0xf8>)
   13710:	9404      	str	r4, [sp, #16]
   13712:	4821      	ldr	r0, [pc, #132]	; (13798 <bt_enable+0xfc>)
   13714:	f00c ff66 	bl	205e4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13718:	4920      	ldr	r1, [pc, #128]	; (1379c <bt_enable+0x100>)
   1371a:	481f      	ldr	r0, [pc, #124]	; (13798 <bt_enable+0xfc>)
   1371c:	f017 f906 	bl	2a92c <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   13720:	481f      	ldr	r0, [pc, #124]	; (137a0 <bt_enable+0x104>)
   13722:	f00d fe55 	bl	213d0 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   13726:	f06f 0307 	mvn.w	r3, #7
   1372a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1372e:	491d      	ldr	r1, [pc, #116]	; (137a4 <bt_enable+0x108>)
   13730:	481b      	ldr	r0, [pc, #108]	; (137a0 <bt_enable+0x104>)
   13732:	9400      	str	r4, [sp, #0]
   13734:	f00d fe66 	bl	21404 <k_work_queue_start>
   13738:	491b      	ldr	r1, [pc, #108]	; (137a8 <bt_enable+0x10c>)
   1373a:	4819      	ldr	r0, [pc, #100]	; (137a0 <bt_enable+0x104>)
   1373c:	f017 f8f6 	bl	2a92c <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   13740:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   13744:	68db      	ldr	r3, [r3, #12]
   13746:	4798      	blx	r3
	if (err) {
   13748:	4605      	mov	r5, r0
   1374a:	b158      	cbz	r0, 13764 <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   1374c:	4b17      	ldr	r3, [pc, #92]	; (137ac <bt_enable+0x110>)
   1374e:	9003      	str	r0, [sp, #12]
   13750:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13754:	2201      	movs	r2, #1
   13756:	4623      	mov	r3, r4
   13758:	4620      	mov	r0, r4
   1375a:	490b      	ldr	r1, [pc, #44]	; (13788 <bt_enable+0xec>)
   1375c:	9400      	str	r4, [sp, #0]
   1375e:	f013 fefc 	bl	2755a <z_log_msg_runtime_create.constprop.0>
		return err;
   13762:	e7ad      	b.n	136c0 <bt_enable+0x24>
	if (!cb) {
   13764:	b927      	cbnz	r7, 13770 <bt_enable+0xd4>
}
   13766:	b009      	add	sp, #36	; 0x24
   13768:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   1376c:	f7f5 bec0 	b.w	94f0 <bt_init>
	k_work_submit(&bt_dev.init);
   13770:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   13774:	f00d fe26 	bl	213c4 <k_work_submit>
	return 0;
   13778:	e7a2      	b.n	136c0 <bt_enable+0x24>
		return -EALREADY;
   1377a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1377e:	e79f      	b.n	136c0 <bt_enable+0x24>
   13780:	20008000 	.word	0x20008000
   13784:	0002f71f 	.word	0x0002f71f
   13788:	0002c094 	.word	0x0002c094
   1378c:	200226e8 	.word	0x200226e8
   13790:	000133c9 	.word	0x000133c9
   13794:	20033688 	.word	0x20033688
   13798:	20009630 	.word	0x20009630
   1379c:	0002f738 	.word	0x0002f738
   137a0:	200096b8 	.word	0x200096b8
   137a4:	20033a88 	.word	0x20033a88
   137a8:	0002f73e 	.word	0x0002f73e
   137ac:	0002f744 	.word	0x0002f744

000137b0 <bt_is_ready>:
   137b0:	4b02      	ldr	r3, [pc, #8]	; (137bc <bt_is_ready+0xc>)
   137b2:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   137b6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   137ba:	4770      	bx	lr
   137bc:	200080cc 	.word	0x200080cc

000137c0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   137c0:	4800      	ldr	r0, [pc, #0]	; (137c4 <bt_get_name+0x4>)
   137c2:	4770      	bx	lr
   137c4:	0002d9c4 	.word	0x0002d9c4

000137c8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   137c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   137ca:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   137cc:	2500      	movs	r5, #0
   137ce:	4f09      	ldr	r7, [pc, #36]	; (137f4 <id_find+0x2c>)
   137d0:	79fb      	ldrb	r3, [r7, #7]
   137d2:	b2ec      	uxtb	r4, r5
   137d4:	42a3      	cmp	r3, r4
   137d6:	d802      	bhi.n	137de <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   137d8:	f06f 0001 	mvn.w	r0, #1
   137dc:	e009      	b.n	137f2 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   137de:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   137e2:	4630      	mov	r0, r6
   137e4:	4439      	add	r1, r7
   137e6:	f013 ff70 	bl	276ca <bt_addr_le_eq>
   137ea:	3501      	adds	r5, #1
   137ec:	2800      	cmp	r0, #0
   137ee:	d0ef      	beq.n	137d0 <id_find+0x8>
   137f0:	4620      	mov	r0, r4
}
   137f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137f4:	20008000 	.word	0x20008000

000137f8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   137f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   137fa:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   137fc:	460d      	mov	r5, r1
   137fe:	b171      	cbz	r1, 1381e <id_create.constprop.0+0x26>
   13800:	4628      	mov	r0, r5
   13802:	4912      	ldr	r1, [pc, #72]	; (1384c <id_create.constprop.0+0x54>)
   13804:	f013 ff61 	bl	276ca <bt_addr_le_eq>
   13808:	b948      	cbnz	r0, 1381e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1380a:	4629      	mov	r1, r5
   1380c:	4810      	ldr	r0, [pc, #64]	; (13850 <id_create.constprop.0+0x58>)
   1380e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13812:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13814:	f013 ff66 	bl	276e4 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   13818:	2000      	movs	r0, #0
}
   1381a:	b003      	add	sp, #12
   1381c:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1381e:	4668      	mov	r0, sp
   13820:	f013 fe4b 	bl	274ba <bt_addr_le_create_static>
			if (err) {
   13824:	2800      	cmp	r0, #0
   13826:	d1f8      	bne.n	1381a <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   13828:	4668      	mov	r0, sp
   1382a:	f7ff ffcd 	bl	137c8 <id_find>
   1382e:	2800      	cmp	r0, #0
   13830:	daf5      	bge.n	1381e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   13832:	4b07      	ldr	r3, [pc, #28]	; (13850 <id_create.constprop.0+0x58>)
   13834:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   13838:	4669      	mov	r1, sp
   1383a:	4418      	add	r0, r3
   1383c:	f013 ff52 	bl	276e4 <bt_addr_le_copy>
		if (addr) {
   13840:	2d00      	cmp	r5, #0
   13842:	d0e9      	beq.n	13818 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13844:	4601      	mov	r1, r0
   13846:	4628      	mov	r0, r5
   13848:	e7e4      	b.n	13814 <id_create.constprop.0+0x1c>
   1384a:	bf00      	nop
   1384c:	0002f096 	.word	0x0002f096
   13850:	20008000 	.word	0x20008000

00013854 <set_random_address>:
{
   13854:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   13856:	2206      	movs	r2, #6
   13858:	4911      	ldr	r1, [pc, #68]	; (138a0 <set_random_address+0x4c>)
   1385a:	4605      	mov	r5, r0
   1385c:	f017 fa58 	bl	2ad10 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   13860:	b1c8      	cbz	r0, 13896 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   13862:	2106      	movs	r1, #6
   13864:	f242 0005 	movw	r0, #8197	; 0x2005
   13868:	f7ff f8c4 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   1386c:	4604      	mov	r4, r0
   1386e:	b1a0      	cbz	r0, 1389a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13870:	2206      	movs	r2, #6
   13872:	4629      	mov	r1, r5
   13874:	300c      	adds	r0, #12
   13876:	f015 fce0 	bl	2923a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1387a:	2200      	movs	r2, #0
   1387c:	4621      	mov	r1, r4
   1387e:	f242 0005 	movw	r0, #8197	; 0x2005
   13882:	f7ff f905 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
   13886:	b938      	cbnz	r0, 13898 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   13888:	4805      	ldr	r0, [pc, #20]	; (138a0 <set_random_address+0x4c>)
   1388a:	4629      	mov	r1, r5
   1388c:	f013 ff25 	bl	276da <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13890:	2301      	movs	r3, #1
   13892:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   13896:	2000      	movs	r0, #0
}
   13898:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1389a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1389e:	e7fb      	b.n	13898 <set_random_address+0x44>
   138a0:	20008061 	.word	0x20008061

000138a4 <find_rl_conflict>:
{
   138a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138a8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   138aa:	460c      	mov	r4, r1
{
   138ac:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   138ae:	b959      	cbnz	r1, 138c8 <find_rl_conflict+0x24>
   138b0:	492b      	ldr	r1, [pc, #172]	; (13960 <find_rl_conflict+0xbc>)
   138b2:	f44f 7357 	mov.w	r3, #860	; 0x35c
   138b6:	4a2b      	ldr	r2, [pc, #172]	; (13964 <find_rl_conflict+0xc0>)
   138b8:	482b      	ldr	r0, [pc, #172]	; (13968 <find_rl_conflict+0xc4>)
   138ba:	f012 fcd0 	bl	2625e <assert_print>
   138be:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   138c2:	4828      	ldr	r0, [pc, #160]	; (13964 <find_rl_conflict+0xc0>)
   138c4:	f012 fcc4 	bl	26250 <assert_post_action>
   138c8:	6808      	ldr	r0, [r1, #0]
   138ca:	b948      	cbnz	r0, 138e0 <find_rl_conflict+0x3c>
   138cc:	4927      	ldr	r1, [pc, #156]	; (1396c <find_rl_conflict+0xc8>)
   138ce:	f240 335d 	movw	r3, #861	; 0x35d
   138d2:	4a24      	ldr	r2, [pc, #144]	; (13964 <find_rl_conflict+0xc0>)
   138d4:	4824      	ldr	r0, [pc, #144]	; (13968 <find_rl_conflict+0xc4>)
   138d6:	f012 fcc2 	bl	2625e <assert_print>
   138da:	f240 315d 	movw	r1, #861	; 0x35d
   138de:	e7f0      	b.n	138c2 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   138e0:	b94d      	cbnz	r5, 138f6 <find_rl_conflict+0x52>
   138e2:	4923      	ldr	r1, [pc, #140]	; (13970 <find_rl_conflict+0xcc>)
   138e4:	f240 335e 	movw	r3, #862	; 0x35e
   138e8:	4a1e      	ldr	r2, [pc, #120]	; (13964 <find_rl_conflict+0xc0>)
   138ea:	481f      	ldr	r0, [pc, #124]	; (13968 <find_rl_conflict+0xc4>)
   138ec:	f012 fcb7 	bl	2625e <assert_print>
   138f0:	f240 315e 	movw	r1, #862	; 0x35e
   138f4:	e7e5      	b.n	138c2 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   138f6:	7a03      	ldrb	r3, [r0, #8]
   138f8:	075a      	lsls	r2, r3, #29
   138fa:	d509      	bpl.n	13910 <find_rl_conflict+0x6c>
   138fc:	491d      	ldr	r1, [pc, #116]	; (13974 <find_rl_conflict+0xd0>)
   138fe:	f44f 7358 	mov.w	r3, #864	; 0x360
   13902:	4a18      	ldr	r2, [pc, #96]	; (13964 <find_rl_conflict+0xc0>)
   13904:	4818      	ldr	r0, [pc, #96]	; (13968 <find_rl_conflict+0xc4>)
   13906:	f012 fcaa 	bl	2625e <assert_print>
   1390a:	f44f 7158 	mov.w	r1, #864	; 0x360
   1390e:	e7d8      	b.n	138c2 <find_rl_conflict+0x1e>
	if (conflict->found) {
   13910:	684f      	ldr	r7, [r1, #4]
   13912:	b9f7      	cbnz	r7, 13952 <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   13914:	7a2b      	ldrb	r3, [r5, #8]
   13916:	075b      	lsls	r3, r3, #29
   13918:	d51b      	bpl.n	13952 <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1391a:	1c69      	adds	r1, r5, #1
   1391c:	3001      	adds	r0, #1
   1391e:	f013 fed4 	bl	276ca <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   13922:	f8d4 8000 	ldr.w	r8, [r4]
   13926:	2216      	movs	r2, #22
   13928:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1392a:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1392c:	4668      	mov	r0, sp
   1392e:	f017 fa39 	bl	2ada4 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   13932:	2210      	movs	r2, #16
   13934:	4669      	mov	r1, sp
   13936:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   1393a:	f017 f9e9 	bl	2ad10 <memcmp>
   1393e:	b158      	cbz	r0, 13958 <find_rl_conflict+0xb4>
   13940:	6820      	ldr	r0, [r4, #0]
   13942:	2210      	movs	r2, #16
   13944:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   13948:	302a      	adds	r0, #42	; 0x2a
   1394a:	f017 f9e1 	bl	2ad10 <memcmp>
   1394e:	b918      	cbnz	r0, 13958 <find_rl_conflict+0xb4>
		conflict->found = resident;
   13950:	6065      	str	r5, [r4, #4]
}
   13952:	b006      	add	sp, #24
   13954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   13958:	2e00      	cmp	r6, #0
   1395a:	d1f9      	bne.n	13950 <find_rl_conflict+0xac>
   1395c:	e7f9      	b.n	13952 <find_rl_conflict+0xae>
   1395e:	bf00      	nop
   13960:	0002f7c4 	.word	0x0002f7c4
   13964:	0002f796 	.word	0x0002f796
   13968:	0002d095 	.word	0x0002d095
   1396c:	0002f7dc 	.word	0x0002f7dc
   13970:	0002f7ff 	.word	0x0002f7ff
   13974:	0002f817 	.word	0x0002f817

00013978 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13978:	4b08      	ldr	r3, [pc, #32]	; (1399c <bt_id_pending_keys_update+0x24>)
   1397a:	e8d3 2fef 	ldaex	r2, [r3]
   1397e:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   13982:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13986:	2800      	cmp	r0, #0
   13988:	d1f7      	bne.n	1397a <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1398a:	0413      	lsls	r3, r2, #16
   1398c:	d504      	bpl.n	13998 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   1398e:	2200      	movs	r2, #0
   13990:	2002      	movs	r0, #2
   13992:	4903      	ldr	r1, [pc, #12]	; (139a0 <bt_id_pending_keys_update+0x28>)
   13994:	f006 b818 	b.w	199c8 <bt_keys_foreach_type>
}
   13998:	4770      	bx	lr
   1399a:	bf00      	nop
   1399c:	200080cc 	.word	0x200080cc
   139a0:	00027861 	.word	0x00027861

000139a4 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   139a4:	2300      	movs	r3, #0
{
   139a6:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   139a8:	4905      	ldr	r1, [pc, #20]	; (139c0 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   139aa:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   139ae:	466a      	mov	r2, sp
   139b0:	2002      	movs	r0, #2
   139b2:	f006 f809 	bl	199c8 <bt_keys_foreach_type>
}
   139b6:	9801      	ldr	r0, [sp, #4]
   139b8:	b003      	add	sp, #12
   139ba:	f85d fb04 	ldr.w	pc, [sp], #4
   139be:	bf00      	nop
   139c0:	000138a5 	.word	0x000138a5

000139c4 <bt_id_add>:
{
   139c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   139c6:	4605      	mov	r5, r0
{
   139c8:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   139ca:	b170      	cbz	r0, 139ea <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   139cc:	4c59      	ldr	r4, [pc, #356]	; (13b34 <bt_id_add+0x170>)
   139ce:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   139d2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   139d6:	b10a      	cbz	r2, 139dc <bt_id_add+0x18>
   139d8:	429a      	cmp	r2, r3
   139da:	d208      	bcs.n	139ee <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   139dc:	3301      	adds	r3, #1
   139de:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   139e2:	7a2b      	ldrb	r3, [r5, #8]
   139e4:	f043 0304 	orr.w	r3, r3, #4
   139e8:	722b      	strb	r3, [r5, #8]
}
   139ea:	b007      	add	sp, #28
   139ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   139ee:	2100      	movs	r1, #0
   139f0:	2206      	movs	r2, #6
   139f2:	4608      	mov	r0, r1
   139f4:	f001 fe0c 	bl	15610 <bt_conn_lookup_state_le>
	if (conn) {
   139f8:	4606      	mov	r6, r0
   139fa:	b188      	cbz	r0, 13a20 <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   139fc:	34cc      	adds	r4, #204	; 0xcc
   139fe:	e8d4 3fef 	ldaex	r3, [r4]
   13a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13a06:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13a0a:	2a00      	cmp	r2, #0
   13a0c:	d1f7      	bne.n	139fe <bt_id_add+0x3a>
	keys->state |= flag;
   13a0e:	7a2b      	ldrb	r3, [r5, #8]
   13a10:	f043 0301 	orr.w	r3, r3, #1
   13a14:	722b      	strb	r3, [r5, #8]
}
   13a16:	b007      	add	sp, #28
   13a18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   13a1c:	f001 baec 	b.w	14ff8 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13a20:	4601      	mov	r1, r0
   13a22:	4845      	ldr	r0, [pc, #276]	; (13b38 <bt_id_add+0x174>)
   13a24:	f000 fbee 	bl	14204 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   13a28:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13a2c:	b163      	cbz	r3, 13a48 <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13a2e:	4630      	mov	r0, r6
   13a30:	f013 feaa 	bl	27788 <addr_res_enable>
		if (err) {
   13a34:	b140      	cbz	r0, 13a48 <bt_id_add+0x84>
			LOG_WRN("Failed to disable address resolution");
   13a36:	4b41      	ldr	r3, [pc, #260]	; (13b3c <bt_id_add+0x178>)
   13a38:	2202      	movs	r2, #2
   13a3a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13a3e:	4633      	mov	r3, r6
   13a40:	9600      	str	r6, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   13a42:	4618      	mov	r0, r3
   13a44:	493e      	ldr	r1, [pc, #248]	; (13b40 <bt_id_add+0x17c>)
   13a46:	e054      	b.n	13af2 <bt_id_add+0x12e>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   13a48:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   13a4c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   13a50:	429a      	cmp	r2, r3
   13a52:	d12b      	bne.n	13aac <bt_id_add+0xe8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   13a54:	2600      	movs	r6, #0
   13a56:	4b3b      	ldr	r3, [pc, #236]	; (13b44 <bt_id_add+0x180>)
   13a58:	2202      	movs	r2, #2
   13a5a:	4630      	mov	r0, r6
   13a5c:	4938      	ldr	r1, [pc, #224]	; (13b40 <bt_id_add+0x17c>)
   13a5e:	9302      	str	r3, [sp, #8]
   13a60:	e9cd 6600 	strd	r6, r6, [sp]
   13a64:	4633      	mov	r3, r6
   13a66:	f013 fe80 	bl	2776a <z_log_msg_runtime_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   13a6a:	4632      	mov	r2, r6
   13a6c:	4631      	mov	r1, r6
   13a6e:	f242 0029 	movw	r0, #8233	; 0x2029
   13a72:	f7ff f80d 	bl	12a90 <bt_hci_cmd_send_sync>
		if (err) {
   13a76:	b130      	cbz	r0, 13a86 <bt_id_add+0xc2>
			LOG_ERR("Failed to clear resolution list");
   13a78:	4b33      	ldr	r3, [pc, #204]	; (13b48 <bt_id_add+0x184>)
   13a7a:	9600      	str	r6, [sp, #0]
   13a7c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13a80:	4633      	mov	r3, r6
		LOG_ERR("Failed to set privacy mode");
   13a82:	2201      	movs	r2, #1
   13a84:	e7dd      	b.n	13a42 <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
   13a86:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13a8a:	3301      	adds	r3, #1
   13a8c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   13a90:	7a2b      	ldrb	r3, [r5, #8]
   13a92:	f043 0304 	orr.w	r3, r3, #4
   13a96:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13a98:	2001      	movs	r0, #1
   13a9a:	f013 fe75 	bl	27788 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13a9e:	2100      	movs	r1, #0
   13aa0:	482a      	ldr	r0, [pc, #168]	; (13b4c <bt_id_add+0x188>)
}
   13aa2:	b007      	add	sp, #28
   13aa4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13aa8:	f000 bbac 	b.w	14204 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   13aac:	462a      	mov	r2, r5
   13aae:	1c6f      	adds	r7, r5, #1
   13ab0:	4639      	mov	r1, r7
   13ab2:	f812 0b2a 	ldrb.w	r0, [r2], #42
   13ab6:	f013 fe1c 	bl	276f2 <hci_id_add>
	if (err) {
   13aba:	4606      	mov	r6, r0
   13abc:	b128      	cbz	r0, 13aca <bt_id_add+0x106>
		LOG_ERR("Failed to add IRK to controller");
   13abe:	4b24      	ldr	r3, [pc, #144]	; (13b50 <bt_id_add+0x18c>)
		LOG_ERR("Failed to set privacy mode");
   13ac0:	9302      	str	r3, [sp, #8]
   13ac2:	2300      	movs	r3, #0
   13ac4:	e9cd 3300 	strd	r3, r3, [sp]
   13ac8:	e7db      	b.n	13a82 <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   13aca:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13ace:	3301      	adds	r3, #1
   13ad0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   13ad4:	7a2b      	ldrb	r3, [r5, #8]
   13ad6:	f043 0304 	orr.w	r3, r3, #4
   13ada:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   13adc:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   13ae0:	f013 0304 	ands.w	r3, r3, #4
   13ae4:	d108      	bne.n	13af8 <bt_id_add+0x134>
		LOG_WRN("Set privacy mode command is not supported");
   13ae6:	4a1b      	ldr	r2, [pc, #108]	; (13b54 <bt_id_add+0x190>)
   13ae8:	4915      	ldr	r1, [pc, #84]	; (13b40 <bt_id_add+0x17c>)
   13aea:	e9cd 3201 	strd	r3, r2, [sp, #4]
   13aee:	2202      	movs	r2, #2
   13af0:	9300      	str	r3, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   13af2:	f013 fe3a 	bl	2776a <z_log_msg_runtime_create.constprop.0>
		goto done;
   13af6:	e7cf      	b.n	13a98 <bt_id_add+0xd4>
	bt_addr_le_copy(&cp.id_addr, addr);
   13af8:	4639      	mov	r1, r7
   13afa:	a804      	add	r0, sp, #16
   13afc:	f013 fdf2 	bl	276e4 <bt_addr_le_copy>
	cp.mode = mode;
   13b00:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   13b02:	2108      	movs	r1, #8
   13b04:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   13b08:	f88d 3017 	strb.w	r3, [sp, #23]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   13b0c:	f7fe ff72 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   13b10:	4604      	mov	r4, r0
   13b12:	b160      	cbz	r0, 13b2e <bt_id_add+0x16a>
   13b14:	2208      	movs	r2, #8
   13b16:	a904      	add	r1, sp, #16
   13b18:	300c      	adds	r0, #12
   13b1a:	f015 fb8e 	bl	2923a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   13b1e:	4632      	mov	r2, r6
   13b20:	4621      	mov	r1, r4
   13b22:	f242 004e 	movw	r0, #8270	; 0x204e
   13b26:	f7fe ffb3 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
   13b2a:	2800      	cmp	r0, #0
   13b2c:	d0b4      	beq.n	13a98 <bt_id_add+0xd4>
		LOG_ERR("Failed to set privacy mode");
   13b2e:	4b0a      	ldr	r3, [pc, #40]	; (13b58 <bt_id_add+0x194>)
   13b30:	e7c6      	b.n	13ac0 <bt_id_add+0xfc>
   13b32:	bf00      	nop
   13b34:	20008000 	.word	0x20008000
   13b38:	000277df 	.word	0x000277df
   13b3c:	0002f84c 	.word	0x0002f84c
   13b40:	0002c0ac 	.word	0x0002c0ac
   13b44:	0002f871 	.word	0x0002f871
   13b48:	0002f8a2 	.word	0x0002f8a2
   13b4c:	000277b9 	.word	0x000277b9
   13b50:	0002f8c2 	.word	0x0002f8c2
   13b54:	0002f8e2 	.word	0x0002f8e2
   13b58:	0002f90c 	.word	0x0002f90c

00013b5c <bt_id_del>:
{
   13b5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   13b60:	4605      	mov	r5, r0
   13b62:	b3a8      	cbz	r0, 13bd0 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   13b64:	4c4c      	ldr	r4, [pc, #304]	; (13c98 <bt_id_del+0x13c>)
   13b66:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13b6a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   13b6e:	b1da      	cbz	r2, 13ba8 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13b70:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   13b72:	4293      	cmp	r3, r2
   13b74:	dc25      	bgt.n	13bc2 <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   13b76:	2100      	movs	r1, #0
   13b78:	2206      	movs	r2, #6
   13b7a:	4608      	mov	r0, r1
   13b7c:	f001 fd48 	bl	15610 <bt_conn_lookup_state_le>
	if (conn) {
   13b80:	4606      	mov	r6, r0
   13b82:	b340      	cbz	r0, 13bd6 <bt_id_del+0x7a>
   13b84:	34cc      	adds	r4, #204	; 0xcc
   13b86:	e8d4 3fef 	ldaex	r3, [r4]
   13b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13b8e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13b92:	2a00      	cmp	r2, #0
   13b94:	d1f7      	bne.n	13b86 <bt_id_del+0x2a>
	keys->state |= flag;
   13b96:	7a2b      	ldrb	r3, [r5, #8]
   13b98:	f043 0302 	orr.w	r3, r3, #2
   13b9c:	722b      	strb	r3, [r5, #8]
}
   13b9e:	b004      	add	sp, #16
   13ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   13ba4:	f001 ba28 	b.w	14ff8 <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   13ba8:	b95b      	cbnz	r3, 13bc2 <bt_id_del+0x66>
   13baa:	493c      	ldr	r1, [pc, #240]	; (13c9c <bt_id_del+0x140>)
   13bac:	483c      	ldr	r0, [pc, #240]	; (13ca0 <bt_id_del+0x144>)
   13bae:	f240 4323 	movw	r3, #1059	; 0x423
   13bb2:	4a3c      	ldr	r2, [pc, #240]	; (13ca4 <bt_id_del+0x148>)
   13bb4:	f012 fb53 	bl	2625e <assert_print>
   13bb8:	f240 4123 	movw	r1, #1059	; 0x423
   13bbc:	4839      	ldr	r0, [pc, #228]	; (13ca4 <bt_id_del+0x148>)
   13bbe:	f012 fb47 	bl	26250 <assert_post_action>
			bt_dev.le.rl_entries--;
   13bc2:	3b01      	subs	r3, #1
   13bc4:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13bc8:	7a2b      	ldrb	r3, [r5, #8]
   13bca:	f023 0304 	bic.w	r3, r3, #4
   13bce:	722b      	strb	r3, [r5, #8]
}
   13bd0:	b004      	add	sp, #16
   13bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13bd6:	4601      	mov	r1, r0
   13bd8:	4833      	ldr	r0, [pc, #204]	; (13ca8 <bt_id_del+0x14c>)
   13bda:	f000 fb13 	bl	14204 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13bde:	4630      	mov	r0, r6
   13be0:	f013 fdd2 	bl	27788 <addr_res_enable>
	if (err) {
   13be4:	4607      	mov	r7, r0
   13be6:	b1b8      	cbz	r0, 13c18 <bt_id_del+0xbc>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   13be8:	4b30      	ldr	r3, [pc, #192]	; (13cac <bt_id_del+0x150>)
   13bea:	9003      	str	r0, [sp, #12]
   13bec:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13bf0:	2201      	movs	r2, #1
   13bf2:	4633      	mov	r3, r6
   13bf4:	4630      	mov	r0, r6
   13bf6:	492e      	ldr	r1, [pc, #184]	; (13cb0 <bt_id_del+0x154>)
   13bf8:	9600      	str	r6, [sp, #0]
   13bfa:	f013 fdb6 	bl	2776a <z_log_msg_runtime_create.constprop.0>
	if (bt_dev.le.rl_entries) {
   13bfe:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13c02:	b113      	cbz	r3, 13c0a <bt_id_del+0xae>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13c04:	2001      	movs	r0, #1
   13c06:	f013 fdbf 	bl	27788 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13c0a:	2100      	movs	r1, #0
   13c0c:	4829      	ldr	r0, [pc, #164]	; (13cb4 <bt_id_del+0x158>)
}
   13c0e:	b004      	add	sp, #16
   13c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13c14:	f000 baf6 	b.w	14204 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13c18:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13c1c:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   13c20:	429a      	cmp	r2, r3
   13c22:	d20c      	bcs.n	13c3e <bt_id_del+0xe2>
		bt_dev.le.rl_entries--;
   13c24:	3b01      	subs	r3, #1
   13c26:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13c2a:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13c2c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   13c2e:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13c32:	2002      	movs	r0, #2
   13c34:	4920      	ldr	r1, [pc, #128]	; (13cb8 <bt_id_del+0x15c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   13c36:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13c38:	f005 fec6 	bl	199c8 <bt_keys_foreach_type>
		goto done;
   13c3c:	e7df      	b.n	13bfe <bt_id_del+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   13c3e:	2107      	movs	r1, #7
   13c40:	f242 0028 	movw	r0, #8232	; 0x2028
   13c44:	f7fe fed6 	bl	129f4 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   13c48:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   13c4c:	4606      	mov	r6, r0
   13c4e:	b950      	cbnz	r0, 13c66 <bt_id_del+0x10a>
		LOG_ERR("Failed to remove IRK from controller");
   13c50:	4b1a      	ldr	r3, [pc, #104]	; (13cbc <bt_id_del+0x160>)
   13c52:	2201      	movs	r2, #1
   13c54:	9302      	str	r3, [sp, #8]
   13c56:	2300      	movs	r3, #0
   13c58:	4915      	ldr	r1, [pc, #84]	; (13cb0 <bt_id_del+0x154>)
   13c5a:	4618      	mov	r0, r3
   13c5c:	e9cd 3300 	strd	r3, r3, [sp]
   13c60:	f013 fd83 	bl	2776a <z_log_msg_runtime_create.constprop.0>
		goto done;
   13c64:	e7cb      	b.n	13bfe <bt_id_del+0xa2>
	return net_buf_simple_add(&buf->b, len);
   13c66:	2107      	movs	r1, #7
   13c68:	300c      	adds	r0, #12
   13c6a:	f006 fc01 	bl	1a470 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13c6e:	4641      	mov	r1, r8
   13c70:	f013 fd38 	bl	276e4 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   13c74:	463a      	mov	r2, r7
   13c76:	4631      	mov	r1, r6
   13c78:	f242 0028 	movw	r0, #8232	; 0x2028
   13c7c:	f7fe ff08 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
   13c80:	2800      	cmp	r0, #0
   13c82:	d1e5      	bne.n	13c50 <bt_id_del+0xf4>
	bt_dev.le.rl_entries--;
   13c84:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13c88:	3b01      	subs	r3, #1
   13c8a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   13c8e:	7a2b      	ldrb	r3, [r5, #8]
   13c90:	f023 0304 	bic.w	r3, r3, #4
   13c94:	722b      	strb	r3, [r5, #8]
   13c96:	e7b2      	b.n	13bfe <bt_id_del+0xa2>
   13c98:	20008000 	.word	0x20008000
   13c9c:	0002f927 	.word	0x0002f927
   13ca0:	0002d095 	.word	0x0002d095
   13ca4:	0002f796 	.word	0x0002f796
   13ca8:	000277df 	.word	0x000277df
   13cac:	0002f940 	.word	0x0002f940
   13cb0:	0002c0ac 	.word	0x0002c0ac
   13cb4:	000277b9 	.word	0x000277b9
   13cb8:	00027755 	.word	0x00027755
   13cbc:	0002f96d 	.word	0x0002f96d

00013cc0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13cc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13cc2:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13cc4:	4604      	mov	r4, r0
   13cc6:	b920      	cbnz	r0, 13cd2 <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13cc8:	b31d      	cbz	r5, 13d12 <bt_id_create+0x52>
			return -EINVAL;
   13cca:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   13cce:	b004      	add	sp, #16
   13cd0:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13cd2:	4921      	ldr	r1, [pc, #132]	; (13d58 <bt_id_create+0x98>)
   13cd4:	f013 fcf9 	bl	276ca <bt_addr_le_eq>
   13cd8:	2800      	cmp	r0, #0
   13cda:	d1f5      	bne.n	13cc8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13cdc:	7823      	ldrb	r3, [r4, #0]
   13cde:	2b01      	cmp	r3, #1
   13ce0:	d104      	bne.n	13cec <bt_id_create+0x2c>
   13ce2:	79a3      	ldrb	r3, [r4, #6]
   13ce4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13ce8:	2bc0      	cmp	r3, #192	; 0xc0
   13cea:	d00a      	beq.n	13d02 <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   13cec:	4b1b      	ldr	r3, [pc, #108]	; (13d5c <bt_id_create+0x9c>)
   13cee:	2201      	movs	r2, #1
   13cf0:	9302      	str	r3, [sp, #8]
   13cf2:	2300      	movs	r3, #0
   13cf4:	491a      	ldr	r1, [pc, #104]	; (13d60 <bt_id_create+0xa0>)
   13cf6:	4618      	mov	r0, r3
   13cf8:	e9cd 3300 	strd	r3, r3, [sp]
   13cfc:	f013 fd35 	bl	2776a <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   13d00:	e7e3      	b.n	13cca <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   13d02:	4620      	mov	r0, r4
   13d04:	f7ff fd60 	bl	137c8 <id_find>
   13d08:	2800      	cmp	r0, #0
   13d0a:	dbdd      	blt.n	13cc8 <bt_id_create+0x8>
			return -EALREADY;
   13d0c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13d10:	e7dd      	b.n	13cce <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13d12:	4d14      	ldr	r5, [pc, #80]	; (13d64 <bt_id_create+0xa4>)
   13d14:	79eb      	ldrb	r3, [r5, #7]
   13d16:	2b01      	cmp	r3, #1
   13d18:	d01a      	beq.n	13d50 <bt_id_create+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13d1a:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   13d1e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13d22:	07db      	lsls	r3, r3, #31
   13d24:	d50b      	bpl.n	13d3e <bt_id_create+0x7e>
	new_id = bt_dev.id_count;
   13d26:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   13d28:	4621      	mov	r1, r4
   13d2a:	4630      	mov	r0, r6
   13d2c:	f7ff fd64 	bl	137f8 <id_create.constprop.0>
	if (err) {
   13d30:	2800      	cmp	r0, #0
   13d32:	d1cc      	bne.n	13cce <bt_id_create+0xe>
		bt_dev.id_count++;
   13d34:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   13d36:	4630      	mov	r0, r6
		bt_dev.id_count++;
   13d38:	3301      	adds	r3, #1
   13d3a:	71eb      	strb	r3, [r5, #7]
	return new_id;
   13d3c:	e7c7      	b.n	13cce <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   13d3e:	2c00      	cmp	r4, #0
   13d40:	d0c3      	beq.n	13cca <bt_id_create+0xa>
   13d42:	4620      	mov	r0, r4
   13d44:	4904      	ldr	r1, [pc, #16]	; (13d58 <bt_id_create+0x98>)
   13d46:	f013 fcc0 	bl	276ca <bt_addr_le_eq>
   13d4a:	2800      	cmp	r0, #0
   13d4c:	d0eb      	beq.n	13d26 <bt_id_create+0x66>
   13d4e:	e7bc      	b.n	13cca <bt_id_create+0xa>
		return -ENOMEM;
   13d50:	f06f 000b 	mvn.w	r0, #11
   13d54:	e7bb      	b.n	13cce <bt_id_create+0xe>
   13d56:	bf00      	nop
   13d58:	0002f096 	.word	0x0002f096
   13d5c:	0002f992 	.word	0x0002f992
   13d60:	0002c0ac 	.word	0x0002c0ac
   13d64:	20008000 	.word	0x20008000

00013d68 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13d68:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   13d6a:	4604      	mov	r4, r0
{
   13d6c:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   13d6e:	b958      	cbnz	r0, 13d88 <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   13d70:	4b1d      	ldr	r3, [pc, #116]	; (13de8 <bt_id_read_public_addr+0x80>)
   13d72:	2202      	movs	r2, #2
   13d74:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13d78:	4603      	mov	r3, r0
   13d7a:	491c      	ldr	r1, [pc, #112]	; (13dec <bt_id_read_public_addr+0x84>)
   13d7c:	9000      	str	r0, [sp, #0]
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   13d7e:	f013 fcf4 	bl	2776a <z_log_msg_runtime_create.constprop.0>
		return 0U;
   13d82:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13d84:	b006      	add	sp, #24
   13d86:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13d88:	2100      	movs	r1, #0
   13d8a:	f241 0009 	movw	r0, #4105	; 0x1009
   13d8e:	aa05      	add	r2, sp, #20
   13d90:	f7fe fe7e 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
   13d94:	4606      	mov	r6, r0
   13d96:	b140      	cbz	r0, 13daa <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   13d98:	4b15      	ldr	r3, [pc, #84]	; (13df0 <bt_id_read_public_addr+0x88>)
   13d9a:	2202      	movs	r2, #2
   13d9c:	9302      	str	r3, [sp, #8]
   13d9e:	2300      	movs	r3, #0
   13da0:	4912      	ldr	r1, [pc, #72]	; (13dec <bt_id_read_public_addr+0x84>)
   13da2:	4618      	mov	r0, r3
   13da4:	e9cd 3300 	strd	r3, r3, [sp]
   13da8:	e7e9      	b.n	13d7e <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   13daa:	9b05      	ldr	r3, [sp, #20]
   13dac:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13dae:	68dd      	ldr	r5, [r3, #12]
   13db0:	4910      	ldr	r1, [pc, #64]	; (13df4 <bt_id_read_public_addr+0x8c>)
   13db2:	3501      	adds	r5, #1
   13db4:	4628      	mov	r0, r5
   13db6:	f016 ffab 	bl	2ad10 <memcmp>
   13dba:	b918      	cbnz	r0, 13dc4 <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   13dbc:	9805      	ldr	r0, [sp, #20]
   13dbe:	f006 fa35 	bl	1a22c <net_buf_unref>
		return 0U;
   13dc2:	e7de      	b.n	13d82 <bt_id_read_public_addr+0x1a>
   13dc4:	2206      	movs	r2, #6
   13dc6:	4628      	mov	r0, r5
   13dc8:	490b      	ldr	r1, [pc, #44]	; (13df8 <bt_id_read_public_addr+0x90>)
   13dca:	f016 ffa1 	bl	2ad10 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13dce:	2800      	cmp	r0, #0
   13dd0:	d0f4      	beq.n	13dbc <bt_id_read_public_addr+0x54>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   13dd2:	4629      	mov	r1, r5
   13dd4:	1c60      	adds	r0, r4, #1
   13dd6:	f013 fc80 	bl	276da <bt_addr_copy>
	net_buf_unref(rsp);
   13dda:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   13ddc:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   13dde:	f006 fa25 	bl	1a22c <net_buf_unref>
	return 1U;
   13de2:	2001      	movs	r0, #1
   13de4:	e7ce      	b.n	13d84 <bt_id_read_public_addr+0x1c>
   13de6:	bf00      	nop
   13de8:	0002f9c0 	.word	0x0002f9c0
   13dec:	0002c0ac 	.word	0x0002c0ac
   13df0:	0002f9d9 	.word	0x0002f9d9
   13df4:	0002f0a3 	.word	0x0002f0a3
   13df8:	0002f09d 	.word	0x0002f09d

00013dfc <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13dfc:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13dfe:	4668      	mov	r0, sp
   13e00:	f7ff ffb2 	bl	13d68 <bt_id_read_public_addr>
   13e04:	4b04      	ldr	r3, [pc, #16]	; (13e18 <bt_setup_public_id_addr+0x1c>)
   13e06:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13e08:	b118      	cbz	r0, 13e12 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13e0a:	4669      	mov	r1, sp
   13e0c:	2000      	movs	r0, #0
   13e0e:	f7ff fcf3 	bl	137f8 <id_create.constprop.0>
}
   13e12:	b003      	add	sp, #12
   13e14:	f85d fb04 	ldr.w	pc, [sp], #4
   13e18:	20008000 	.word	0x20008000

00013e1c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e1e:	4b25      	ldr	r3, [pc, #148]	; (13eb4 <bt_read_static_addr+0x98>)
{
   13e20:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e22:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   13e26:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e28:	f013 0301 	ands.w	r3, r3, #1
{
   13e2c:	b087      	sub	sp, #28
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13e2e:	d10c      	bne.n	13e4a <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   13e30:	4a21      	ldr	r2, [pc, #132]	; (13eb8 <bt_read_static_addr+0x9c>)
   13e32:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   13e34:	2202      	movs	r2, #2
   13e36:	4618      	mov	r0, r3
   13e38:	e9cd 3300 	strd	r3, r3, [sp]
   13e3c:	491f      	ldr	r1, [pc, #124]	; (13ebc <bt_read_static_addr+0xa0>)
   13e3e:	f013 fc94 	bl	2776a <z_log_msg_runtime_create.constprop.0>
		return 0;
   13e42:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   13e44:	4620      	mov	r0, r4
   13e46:	b007      	add	sp, #28
   13e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13e4a:	2100      	movs	r1, #0
   13e4c:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13e50:	aa05      	add	r2, sp, #20
   13e52:	f7fe fe1d 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
   13e56:	4603      	mov	r3, r0
   13e58:	b118      	cbz	r0, 13e62 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   13e5a:	4b19      	ldr	r3, [pc, #100]	; (13ec0 <bt_read_static_addr+0xa4>)
   13e5c:	9302      	str	r3, [sp, #8]
   13e5e:	2300      	movs	r3, #0
   13e60:	e7e8      	b.n	13e34 <bt_read_static_addr+0x18>
	rp = (void *)rsp->data;
   13e62:	9805      	ldr	r0, [sp, #20]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   13e64:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   13e66:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   13e68:	7854      	ldrb	r4, [r2, #1]
   13e6a:	3202      	adds	r2, #2
   13e6c:	42b4      	cmp	r4, r6
   13e6e:	bf28      	it	cs
   13e70:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   13e72:	429c      	cmp	r4, r3
   13e74:	dc0e      	bgt.n	13e94 <bt_read_static_addr+0x78>
	net_buf_unref(rsp);
   13e76:	f006 f9d9 	bl	1a22c <net_buf_unref>
	if (!cnt) {
   13e7a:	2c00      	cmp	r4, #0
   13e7c:	d1e2      	bne.n	13e44 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   13e7e:	4b11      	ldr	r3, [pc, #68]	; (13ec4 <bt_read_static_addr+0xa8>)
   13e80:	2202      	movs	r2, #2
   13e82:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13e86:	4620      	mov	r0, r4
   13e88:	4623      	mov	r3, r4
   13e8a:	490c      	ldr	r1, [pc, #48]	; (13ebc <bt_read_static_addr+0xa0>)
   13e8c:	9400      	str	r4, [sp, #0]
   13e8e:	f013 fc6c 	bl	2776a <z_log_msg_runtime_create.constprop.0>
   13e92:	e7d7      	b.n	13e44 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13e94:	4611      	mov	r1, r2
   13e96:	fb07 5603 	mla	r6, r7, r3, r5
   13e9a:	f102 0c14 	add.w	ip, r2, #20
   13e9e:	f851 eb04 	ldr.w	lr, [r1], #4
   13ea2:	4561      	cmp	r1, ip
   13ea4:	f846 eb04 	str.w	lr, [r6], #4
   13ea8:	d1f9      	bne.n	13e9e <bt_read_static_addr+0x82>
   13eaa:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   13eac:	3301      	adds	r3, #1
   13eae:	8031      	strh	r1, [r6, #0]
   13eb0:	3216      	adds	r2, #22
   13eb2:	e7de      	b.n	13e72 <bt_read_static_addr+0x56>
   13eb4:	20008000 	.word	0x20008000
   13eb8:	0002f9f7 	.word	0x0002f9f7
   13ebc:	0002c0ac 	.word	0x0002c0ac
   13ec0:	0002fa23 	.word	0x0002fa23
   13ec4:	0002fa43 	.word	0x0002fa43

00013ec8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13ec8:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13eca:	4d15      	ldr	r5, [pc, #84]	; (13f20 <bt_setup_random_id_addr+0x58>)
{
   13ecc:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   13ece:	79ec      	ldrb	r4, [r5, #7]
   13ed0:	b92c      	cbnz	r4, 13ede <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13ed2:	2101      	movs	r1, #1
   13ed4:	a802      	add	r0, sp, #8
   13ed6:	f7ff ffa1 	bl	13e1c <bt_read_static_addr>
   13eda:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13edc:	b9c0      	cbnz	r0, 13f10 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13ede:	2100      	movs	r1, #0
   13ee0:	4608      	mov	r0, r1
}
   13ee2:	b008      	add	sp, #32
   13ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   13ee8:	f7ff beea 	b.w	13cc0 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13eec:	ab02      	add	r3, sp, #8
   13eee:	fb06 3102 	mla	r1, r6, r2, r3
   13ef2:	f10d 0001 	add.w	r0, sp, #1
   13ef6:	f013 fbf0 	bl	276da <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13efa:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13efc:	4669      	mov	r1, sp
   13efe:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   13f00:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13f04:	f7ff fc78 	bl	137f8 <id_create.constprop.0>
				if (err) {
   13f08:	3401      	adds	r4, #1
   13f0a:	b110      	cbz	r0, 13f12 <bt_setup_random_id_addr+0x4a>
}
   13f0c:	b008      	add	sp, #32
   13f0e:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13f10:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13f12:	79eb      	ldrb	r3, [r5, #7]
   13f14:	b2e2      	uxtb	r2, r4
   13f16:	4293      	cmp	r3, r2
   13f18:	d8e8      	bhi.n	13eec <bt_setup_random_id_addr+0x24>
			return 0;
   13f1a:	2000      	movs	r0, #0
   13f1c:	e7f6      	b.n	13f0c <bt_setup_random_id_addr+0x44>
   13f1e:	bf00      	nop
   13f20:	20008000 	.word	0x20008000

00013f24 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f28:	4690      	mov	r8, r2
   13f2a:	460e      	mov	r6, r1
   13f2c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   13f2e:	4602      	mov	r2, r0
   13f30:	2800      	cmp	r0, #0
   13f32:	d04b      	beq.n	13fcc <bt_id_set_adv_own_addr+0xa8>
   13f34:	2b00      	cmp	r3, #0
   13f36:	d049      	beq.n	13fcc <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13f38:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   13f3a:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13f3c:	d531      	bpl.n	13fa2 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13f3e:	4f25      	ldr	r7, [pc, #148]	; (13fd4 <bt_id_set_adv_own_addr+0xb0>)
   13f40:	f1b8 0f00 	cmp.w	r8, #0
   13f44:	d013      	beq.n	13f6e <bt_id_set_adv_own_addr+0x4a>
   13f46:	0688      	lsls	r0, r1, #26
   13f48:	d40a      	bmi.n	13f60 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13f4a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13f4e:	5cfb      	ldrb	r3, [r7, r3]
   13f50:	2b01      	cmp	r3, #1
   13f52:	d015      	beq.n	13f80 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   13f54:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13f56:	06b2      	lsls	r2, r6, #26
   13f58:	d50f      	bpl.n	13f7a <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13f5a:	f043 0302 	orr.w	r3, r3, #2
   13f5e:	e00b      	b.n	13f78 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13f60:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   13f64:	0659      	lsls	r1, r3, #25
   13f66:	d4f0      	bmi.n	13f4a <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   13f68:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13f6c:	e006      	b.n	13f7c <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13f6e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13f72:	5cfb      	ldrb	r3, [r7, r3]
   13f74:	2b01      	cmp	r3, #1
   13f76:	d003      	beq.n	13f80 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   13f78:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   13f7a:	2000      	movs	r0, #0
}
   13f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13f80:	2107      	movs	r1, #7
   13f82:	fb01 7104 	mla	r1, r1, r4, r7
   13f86:	4610      	mov	r0, r2
   13f88:	3101      	adds	r1, #1
   13f8a:	f013 fc46 	bl	2781a <bt_id_set_adv_random_addr>
				if (err) {
   13f8e:	2800      	cmp	r0, #0
   13f90:	d1f4      	bne.n	13f7c <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   13f92:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13f96:	5d3b      	ldrb	r3, [r7, r4]
   13f98:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13f9a:	f1b8 0f00 	cmp.w	r8, #0
   13f9e:	d0ec      	beq.n	13f7a <bt_id_set_adv_own_addr+0x56>
   13fa0:	e7d9      	b.n	13f56 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13fa2:	074b      	lsls	r3, r1, #29
   13fa4:	d50e      	bpl.n	13fc4 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13fa6:	4e0b      	ldr	r6, [pc, #44]	; (13fd4 <bt_id_set_adv_own_addr+0xb0>)
   13fa8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   13fac:	5df3      	ldrb	r3, [r6, r7]
   13fae:	2b01      	cmp	r3, #1
   13fb0:	d1e2      	bne.n	13f78 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13fb2:	2107      	movs	r1, #7
   13fb4:	fb11 3104 	smlabb	r1, r1, r4, r3
   13fb8:	4431      	add	r1, r6
   13fba:	f013 fc2e 	bl	2781a <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   13fbe:	5df3      	ldrb	r3, [r6, r7]
   13fc0:	702b      	strb	r3, [r5, #0]
		if (err) {
   13fc2:	e7db      	b.n	13f7c <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   13fc4:	f013 fc31 	bl	2782a <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13fc8:	2301      	movs	r3, #1
   13fca:	e7f9      	b.n	13fc0 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   13fcc:	f06f 0015 	mvn.w	r0, #21
   13fd0:	e7d4      	b.n	13f7c <bt_id_set_adv_own_addr+0x58>
   13fd2:	bf00      	nop
   13fd4:	20008000 	.word	0x20008000

00013fd8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   13fd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13fda:	4e13      	ldr	r6, [pc, #76]	; (14028 <bt_id_init+0x50>)
   13fdc:	79f5      	ldrb	r5, [r6, #7]
   13fde:	b11d      	cbz	r5, 13fe8 <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   13fe0:	2400      	movs	r4, #0
}
   13fe2:	4620      	mov	r0, r4
   13fe4:	b004      	add	sp, #16
   13fe6:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   13fe8:	f7ff ff08 	bl	13dfc <bt_setup_public_id_addr>
		if (err) {
   13fec:	4604      	mov	r4, r0
   13fee:	b150      	cbz	r0, 14006 <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   13ff0:	4b0e      	ldr	r3, [pc, #56]	; (1402c <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   13ff2:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13ff6:	2201      	movs	r2, #1
   13ff8:	462b      	mov	r3, r5
   13ffa:	4628      	mov	r0, r5
   13ffc:	490c      	ldr	r1, [pc, #48]	; (14030 <bt_id_init+0x58>)
   13ffe:	9500      	str	r5, [sp, #0]
   14000:	f013 fbb3 	bl	2776a <z_log_msg_runtime_create.constprop.0>
			return err;
   14004:	e7ed      	b.n	13fe2 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14006:	79f5      	ldrb	r5, [r6, #7]
   14008:	2d00      	cmp	r5, #0
   1400a:	d1e9      	bne.n	13fe0 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1400c:	f7ff ff5c 	bl	13ec8 <bt_setup_random_id_addr>
		if (err) {
   14010:	4604      	mov	r4, r0
   14012:	2800      	cmp	r0, #0
   14014:	d1ec      	bne.n	13ff0 <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14016:	1c70      	adds	r0, r6, #1
   14018:	f7ff fc1c 	bl	13854 <set_random_address>
		if (err) {
   1401c:	4604      	mov	r4, r0
   1401e:	2800      	cmp	r0, #0
   14020:	d0de      	beq.n	13fe0 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   14022:	4b04      	ldr	r3, [pc, #16]	; (14034 <bt_id_init+0x5c>)
   14024:	e7e5      	b.n	13ff2 <bt_id_init+0x1a>
   14026:	bf00      	nop
   14028:	20008000 	.word	0x20008000
   1402c:	0002fa6c 	.word	0x0002fa6c
   14030:	0002c0ac 	.word	0x0002c0ac
   14034:	0002fa8b 	.word	0x0002fa8b

00014038 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   14038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1403c:	460c      	mov	r4, r1
   1403e:	b087      	sub	sp, #28
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   14040:	2120      	movs	r1, #32
{
   14042:	4692      	mov	sl, r2
   14044:	9004      	str	r0, [sp, #16]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   14046:	f7fe fcd5 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   1404a:	4605      	mov	r5, r0
   1404c:	2800      	cmp	r0, #0
   1404e:	d05a      	beq.n	14106 <hci_set_ad+0xce>
   14050:	2120      	movs	r1, #32
   14052:	300c      	adds	r0, #12
   14054:	f006 fa0c 	bl	1a470 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   14058:	2220      	movs	r2, #32
   1405a:	4681      	mov	r9, r0
   1405c:	2100      	movs	r1, #0
   1405e:	f016 fea1 	bl	2ada4 <memset>
	uint8_t set_data_len = 0;
   14062:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   14064:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   14068:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   1406c:	2300      	movs	r3, #0
   1406e:	f8d4 8000 	ldr.w	r8, [r4]
   14072:	6862      	ldr	r2, [r4, #4]
   14074:	4293      	cmp	r3, r2
   14076:	d30c      	bcc.n	14092 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   14078:	3408      	adds	r4, #8
   1407a:	45a2      	cmp	sl, r4
   1407c:	d1f6      	bne.n	1406c <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1407e:	2200      	movs	r2, #0
   14080:	4629      	mov	r1, r5
   14082:	9804      	ldr	r0, [sp, #16]
	*data_len = set_data_len;
   14084:	f889 6000 	strb.w	r6, [r9]
}
   14088:	b007      	add	sp, #28
   1408a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1408e:	f7fe bcff 	b.w	12a90 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   14092:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   14096:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   14098:	1811      	adds	r1, r2, r0
   1409a:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   1409c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   140a0:	d91a      	bls.n	140d8 <hci_set_ad+0xa0>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   140a2:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   140a6:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   140aa:	d101      	bne.n	140b0 <hci_set_ad+0x78>
   140ac:	2a00      	cmp	r2, #0
   140ae:	dc11      	bgt.n	140d4 <hci_set_ad+0x9c>
					LOG_ERR("Too big advertising data");
   140b0:	4b16      	ldr	r3, [pc, #88]	; (1410c <hci_set_ad+0xd4>)
   140b2:	2201      	movs	r2, #1
   140b4:	9302      	str	r3, [sp, #8]
   140b6:	2300      	movs	r3, #0
   140b8:	4915      	ldr	r1, [pc, #84]	; (14110 <hci_set_ad+0xd8>)
   140ba:	4618      	mov	r0, r3
   140bc:	e9cd 3300 	strd	r3, r3, [sp]
   140c0:	f013 fc02 	bl	278c8 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   140c4:	4628      	mov	r0, r5
   140c6:	f006 f8b1 	bl	1a22c <net_buf_unref>
					return -EINVAL;
   140ca:	f06f 0015 	mvn.w	r0, #21
}
   140ce:	b007      	add	sp, #28
   140d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   140d4:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   140d8:	b2d7      	uxtb	r7, r2
   140da:	1c79      	adds	r1, r7, #1
   140dc:	f80b 1006 	strb.w	r1, [fp, r6]
   140e0:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   140e2:	b2c9      	uxtb	r1, r1
   140e4:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   140e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
   140ec:	fa5b f080 	uxtab	r0, fp, r0
   140f0:	9305      	str	r3, [sp, #20]
			set_data_len += len;
   140f2:	3702      	adds	r7, #2
   140f4:	f016 fe1c 	bl	2ad30 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   140f8:	9b05      	ldr	r3, [sp, #20]
			set_data_len += len;
   140fa:	4437      	add	r7, r6
   140fc:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   140fe:	3301      	adds	r3, #1
   14100:	f108 0808 	add.w	r8, r8, #8
   14104:	e7b5      	b.n	14072 <hci_set_ad+0x3a>
		return -ENOBUFS;
   14106:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1410a:	e7e0      	b.n	140ce <hci_set_ad+0x96>
   1410c:	0002faae 	.word	0x0002faae
   14110:	0002c064 	.word	0x0002c064

00014114 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   14114:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   14116:	4605      	mov	r5, r0
   14118:	4b16      	ldr	r3, [pc, #88]	; (14174 <le_adv_start_add_conn+0x60>)
   1411a:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   1411e:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   14120:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   14124:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   14126:	2207      	movs	r2, #7
   14128:	4628      	mov	r0, r5
   1412a:	4913      	ldr	r1, [pc, #76]	; (14178 <le_adv_start_add_conn+0x64>)
   1412c:	f016 fdf0 	bl	2ad10 <memcmp>
   14130:	4603      	mov	r3, r0
   14132:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14134:	b96b      	cbnz	r3, 14152 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14136:	4911      	ldr	r1, [pc, #68]	; (1417c <le_adv_start_add_conn+0x68>)
   14138:	f001 fa0c 	bl	15554 <bt_conn_add_le>
		if (!conn) {
   1413c:	4604      	mov	r4, r0
   1413e:	b910      	cbnz	r0, 14146 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   14140:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   14144:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   14146:	2104      	movs	r1, #4
   14148:	f000 ff8e 	bl	15068 <bt_conn_set_state>
		return 0;
   1414c:	2000      	movs	r0, #0
		*out_conn = conn;
   1414e:	6034      	str	r4, [r6, #0]
   14150:	e7f8      	b.n	14144 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14152:	4629      	mov	r1, r5
   14154:	f001 fa36 	bl	155c4 <bt_conn_exists_le>
   14158:	b940      	cbnz	r0, 1416c <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1415a:	7820      	ldrb	r0, [r4, #0]
   1415c:	4629      	mov	r1, r5
   1415e:	f001 f9f9 	bl	15554 <bt_conn_add_le>
	if (!conn) {
   14162:	4604      	mov	r4, r0
   14164:	2800      	cmp	r0, #0
   14166:	d0eb      	beq.n	14140 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   14168:	2105      	movs	r1, #5
   1416a:	e7ed      	b.n	14148 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   1416c:	f06f 0015 	mvn.w	r0, #21
   14170:	e7e8      	b.n	14144 <le_adv_start_add_conn+0x30>
   14172:	bf00      	nop
   14174:	20008000 	.word	0x20008000
   14178:	0002f096 	.word	0x0002f096
   1417c:	0002f08f 	.word	0x0002f08f

00014180 <valid_adv_param>:
{
   14180:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14182:	6843      	ldr	r3, [r0, #4]
{
   14184:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14186:	0558      	lsls	r0, r3, #21
   14188:	d501      	bpl.n	1418e <valid_adv_param+0xe>
		return false;
   1418a:	2000      	movs	r0, #0
}
   1418c:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1418e:	6922      	ldr	r2, [r4, #16]
   14190:	b10a      	cbz	r2, 14196 <valid_adv_param+0x16>
   14192:	07d9      	lsls	r1, r3, #31
   14194:	d5f9      	bpl.n	1418a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   14196:	4d19      	ldr	r5, [pc, #100]	; (141fc <valid_adv_param+0x7c>)
   14198:	7820      	ldrb	r0, [r4, #0]
   1419a:	79eb      	ldrb	r3, [r5, #7]
   1419c:	4283      	cmp	r3, r0
   1419e:	d9f4      	bls.n	1418a <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   141a0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   141a4:	2207      	movs	r2, #7
   141a6:	4916      	ldr	r1, [pc, #88]	; (14200 <valid_adv_param+0x80>)
   141a8:	4428      	add	r0, r5
   141aa:	f016 fdb1 	bl	2ad10 <memcmp>
	if (param->id >= bt_dev.id_count ||
   141ae:	2800      	cmp	r0, #0
   141b0:	d0eb      	beq.n	1418a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   141b2:	6860      	ldr	r0, [r4, #4]
   141b4:	07c2      	lsls	r2, r0, #31
   141b6:	d406      	bmi.n	141c6 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   141b8:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   141bc:	2b08      	cmp	r3, #8
   141be:	d802      	bhi.n	141c6 <valid_adv_param+0x46>
   141c0:	68a3      	ldr	r3, [r4, #8]
   141c2:	2b9f      	cmp	r3, #159	; 0x9f
   141c4:	d9e1      	bls.n	1418a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   141c6:	f010 0f30 	tst.w	r0, #48	; 0x30
   141ca:	d002      	beq.n	141d2 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   141cc:	6923      	ldr	r3, [r4, #16]
   141ce:	2b00      	cmp	r3, #0
   141d0:	d0db      	beq.n	1418a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   141d2:	06c3      	lsls	r3, r0, #27
   141d4:	d401      	bmi.n	141da <valid_adv_param+0x5a>
   141d6:	6923      	ldr	r3, [r4, #16]
   141d8:	b943      	cbnz	r3, 141ec <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   141da:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   141de:	429a      	cmp	r2, r3
   141e0:	d8d3      	bhi.n	1418a <valid_adv_param+0xa>
   141e2:	2a1f      	cmp	r2, #31
   141e4:	d9d1      	bls.n	1418a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   141e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   141ea:	d8ce      	bhi.n	1418a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   141ec:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   141f0:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   141f4:	bf18      	it	ne
   141f6:	2001      	movne	r0, #1
   141f8:	e7c8      	b.n	1418c <valid_adv_param+0xc>
   141fa:	bf00      	nop
   141fc:	20008000 	.word	0x20008000
   14200:	0002f096 	.word	0x0002f096

00014204 <bt_le_ext_adv_foreach>:
{
   14204:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   14206:	4801      	ldr	r0, [pc, #4]	; (1420c <bt_le_ext_adv_foreach+0x8>)
   14208:	4718      	bx	r3
   1420a:	bf00      	nop
   1420c:	20008018 	.word	0x20008018

00014210 <bt_le_adv_lookup_legacy>:
}
   14210:	4800      	ldr	r0, [pc, #0]	; (14214 <bt_le_adv_lookup_legacy+0x4>)
   14212:	4770      	bx	lr
   14214:	20008018 	.word	0x20008018

00014218 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   14218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1421c:	b08d      	sub	sp, #52	; 0x34
   1421e:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   14220:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   14222:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   14226:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   14228:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1422c:	4890      	ldr	r0, [pc, #576]	; (14470 <bt_le_adv_start_legacy+0x258>)
   1422e:	bf18      	it	ne
   14230:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   14232:	9307      	str	r3, [sp, #28]
   14234:	f013 fb33 	bl	2789e <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14238:	0747      	lsls	r7, r0, #29
{
   1423a:	460d      	mov	r5, r1
   1423c:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1423e:	f140 810d 	bpl.w	1445c <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   14242:	4608      	mov	r0, r1
   14244:	f7ff ff9c 	bl	14180 <valid_adv_param>
   14248:	b928      	cbnz	r0, 14256 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1424a:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1424e:	4620      	mov	r0, r4
   14250:	b00d      	add	sp, #52	; 0x34
   14252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   14256:	4628      	mov	r0, r5
   14258:	f013 fafe 	bl	27858 <bt_id_adv_random_addr_check>
   1425c:	4681      	mov	r9, r0
   1425e:	2800      	cmp	r0, #0
   14260:	d0f3      	beq.n	1424a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14262:	f106 0810 	add.w	r8, r6, #16
   14266:	4640      	mov	r0, r8
   14268:	f013 fb19 	bl	2789e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1426c:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   14270:	0600      	lsls	r0, r0, #24
   14272:	f100 80f6 	bmi.w	14462 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   14276:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1427a:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1427e:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14280:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14282:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14286:	68eb      	ldr	r3, [r5, #12]
   14288:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1428c:	f013 faf8 	bl	27880 <get_adv_channel_map>
	if (adv->id != param->id) {
   14290:	7832      	ldrb	r2, [r6, #0]
   14292:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14294:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   14298:	429a      	cmp	r2, r3
   1429a:	d004      	beq.n	142a6 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1429c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   142a0:	4873      	ldr	r0, [pc, #460]	; (14470 <bt_le_adv_start_legacy+0x258>)
   142a2:	f013 faff 	bl	278a4 <atomic_and>
	adv->id = param->id;
   142a6:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   142a8:	4a72      	ldr	r2, [pc, #456]	; (14474 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   142aa:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   142ac:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   142b0:	4630      	mov	r0, r6
   142b2:	4622      	mov	r2, r4
   142b4:	6869      	ldr	r1, [r5, #4]
   142b6:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   142ba:	f7ff fe33 	bl	13f24 <bt_id_set_adv_own_addr>
	if (err) {
   142be:	4604      	mov	r4, r0
   142c0:	2800      	cmp	r0, #0
   142c2:	d1c4      	bne.n	1424e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   142c4:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   142c8:	f1ba 0f00 	cmp.w	sl, #0
   142cc:	d013      	beq.n	142f6 <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   142ce:	6929      	ldr	r1, [r5, #16]
   142d0:	f013 faf3 	bl	278ba <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   142d4:	4628      	mov	r0, r5
   142d6:	f013 fb8b 	bl	279f0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   142da:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   142dc:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   142de:	07d9      	lsls	r1, r3, #31
   142e0:	d416      	bmi.n	14310 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   142e2:	059b      	lsls	r3, r3, #22
   142e4:	d403      	bmi.n	142ee <bt_le_adv_start_legacy+0xd6>
   142e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   142e8:	b90b      	cbnz	r3, 142ee <bt_le_adv_start_legacy+0xd6>
   142ea:	2f02      	cmp	r7, #2
   142ec:	d159      	bne.n	143a2 <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   142ee:	2302      	movs	r3, #2
   142f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   142f4:	e019      	b.n	1432a <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   142f6:	4960      	ldr	r1, [pc, #384]	; (14478 <bt_le_adv_start_legacy+0x260>)
   142f8:	f013 fadf 	bl	278ba <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   142fc:	4628      	mov	r0, r5
   142fe:	f013 fb77 	bl	279f0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14302:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   14304:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14306:	07da      	lsls	r2, r3, #31
   14308:	d5eb      	bpl.n	142e2 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   1430a:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1430e:	e00c      	b.n	1432a <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   14310:	f013 0f10 	tst.w	r3, #16
   14314:	bf0c      	ite	eq
   14316:	2301      	moveq	r3, #1
   14318:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1431a:	6929      	ldr	r1, [r5, #16]
   1431c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   14320:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   14324:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   14326:	f013 fac8 	bl	278ba <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1432a:	210f      	movs	r1, #15
   1432c:	f242 0006 	movw	r0, #8198	; 0x2006
   14330:	f7fe fb60 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   14334:	4604      	mov	r4, r0
   14336:	2800      	cmp	r0, #0
   14338:	f000 8096 	beq.w	14468 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1433c:	220f      	movs	r2, #15
   1433e:	a908      	add	r1, sp, #32
   14340:	300c      	adds	r0, #12
   14342:	f014 ff7a 	bl	2923a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   14346:	4621      	mov	r1, r4
   14348:	2200      	movs	r2, #0
   1434a:	f242 0006 	movw	r0, #8198	; 0x2006
   1434e:	f7fe fb9f 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
   14352:	4604      	mov	r4, r0
   14354:	2800      	cmp	r0, #0
   14356:	f47f af7a 	bne.w	1424e <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1435a:	f1ba 0f00 	cmp.w	sl, #0
   1435e:	d026      	beq.n	143ae <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14360:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14362:	07dc      	lsls	r4, r3, #31
   14364:	d431      	bmi.n	143ca <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14366:	4630      	mov	r0, r6
   14368:	2101      	movs	r1, #1
   1436a:	f013 fb51 	bl	27a10 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1436e:	9e07      	ldr	r6, [sp, #28]
	if (err) {
   14370:	4604      	mov	r4, r0
   14372:	2800      	cmp	r0, #0
   14374:	d06a      	beq.n	1444c <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   14376:	2500      	movs	r5, #0
   14378:	4b40      	ldr	r3, [pc, #256]	; (1447c <bt_le_adv_start_legacy+0x264>)
   1437a:	2201      	movs	r2, #1
   1437c:	9302      	str	r3, [sp, #8]
   1437e:	4628      	mov	r0, r5
   14380:	462b      	mov	r3, r5
   14382:	e9cd 5500 	strd	r5, r5, [sp]
   14386:	493e      	ldr	r1, [pc, #248]	; (14480 <bt_le_adv_start_legacy+0x268>)
   14388:	f013 fa9e 	bl	278c8 <z_log_msg_runtime_create.constprop.0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1438c:	2e00      	cmp	r6, #0
   1438e:	f43f af5e 	beq.w	1424e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14392:	4630      	mov	r0, r6
   14394:	4629      	mov	r1, r5
   14396:	f000 fe67 	bl	15068 <bt_conn_set_state>
			bt_conn_unref(conn);
   1439a:	4630      	mov	r0, r6
   1439c:	f000 fe2c 	bl	14ff8 <bt_conn_unref>
   143a0:	e755      	b.n	1424e <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   143a2:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   143a4:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   143a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   143ac:	e7bd      	b.n	1432a <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   143ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   143b0:	4659      	mov	r1, fp
   143b2:	9300      	str	r3, [sp, #0]
   143b4:	4630      	mov	r0, r6
   143b6:	e9cd 9701 	strd	r9, r7, [sp, #4]
   143ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
   143bc:	9a05      	ldr	r2, [sp, #20]
   143be:	f013 faa5 	bl	2790c <le_adv_update.constprop.0>
		if (err) {
   143c2:	4604      	mov	r4, r0
   143c4:	2800      	cmp	r0, #0
   143c6:	d0cb      	beq.n	14360 <bt_le_adv_start_legacy+0x148>
   143c8:	e741      	b.n	1424e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   143ca:	4630      	mov	r0, r6
   143cc:	a907      	add	r1, sp, #28
   143ce:	f7ff fea1 	bl	14114 <le_adv_start_add_conn>
		if (err) {
   143d2:	4604      	mov	r4, r0
   143d4:	2800      	cmp	r0, #0
   143d6:	d0c6      	beq.n	14366 <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   143d8:	f110 0f0c 	cmn.w	r0, #12
   143dc:	f47f af37 	bne.w	1424e <bt_le_adv_start_legacy+0x36>
   143e0:	f1ba 0f00 	cmp.w	sl, #0
   143e4:	f47f af33 	bne.w	1424e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   143e8:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   143ea:	0798      	lsls	r0, r3, #30
   143ec:	f53f af2f 	bmi.w	1424e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   143f0:	686c      	ldr	r4, [r5, #4]
   143f2:	f084 0402 	eor.w	r4, r4, #2
   143f6:	f3c4 0440 	ubfx	r4, r4, #1, #1
   143fa:	f004 0201 	and.w	r2, r4, #1
   143fe:	210e      	movs	r1, #14
   14400:	4640      	mov	r0, r8
   14402:	f013 fa70 	bl	278e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   14406:	1e7b      	subs	r3, r7, #1
   14408:	425a      	negs	r2, r3
   1440a:	415a      	adcs	r2, r3
   1440c:	2108      	movs	r1, #8
   1440e:	4640      	mov	r0, r8
   14410:	f013 fa69 	bl	278e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   14414:	1eb9      	subs	r1, r7, #2
   14416:	424a      	negs	r2, r1
   14418:	414a      	adcs	r2, r1
   1441a:	4640      	mov	r0, r8
   1441c:	2109      	movs	r1, #9
   1441e:	f013 fa62 	bl	278e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   14422:	686a      	ldr	r2, [r5, #4]
   14424:	210a      	movs	r1, #10
   14426:	4640      	mov	r0, r8
   14428:	f002 0201 	and.w	r2, r2, #1
   1442c:	f013 fa5b 	bl	278e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   14430:	464a      	mov	r2, r9
   14432:	210b      	movs	r1, #11
   14434:	4640      	mov	r0, r8
   14436:	f013 fa56 	bl	278e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1443a:	686a      	ldr	r2, [r5, #4]
   1443c:	210d      	movs	r1, #13
   1443e:	4640      	mov	r0, r8
   14440:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14444:	f013 fa4f 	bl	278e6 <atomic_set_bit_to>
	return 0;
   14448:	2400      	movs	r4, #0
   1444a:	e700      	b.n	1424e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1444c:	b116      	cbz	r6, 14454 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   1444e:	4630      	mov	r0, r6
   14450:	f000 fdd2 	bl	14ff8 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14454:	f1ba 0f00 	cmp.w	sl, #0
   14458:	d1cf      	bne.n	143fa <bt_le_adv_start_legacy+0x1e2>
   1445a:	e7c9      	b.n	143f0 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   1445c:	f06f 040a 	mvn.w	r4, #10
   14460:	e6f5      	b.n	1424e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   14462:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14466:	e6f2      	b.n	1424e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   14468:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1446c:	e6ef      	b.n	1424e <bt_le_adv_start_legacy+0x36>
   1446e:	bf00      	nop
   14470:	200080cc 	.word	0x200080cc
   14474:	20008000 	.word	0x20008000
   14478:	0002f096 	.word	0x0002f096
   1447c:	0002fac7 	.word	0x0002fac7
   14480:	0002c064 	.word	0x0002c064

00014484 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   14484:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14486:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14488:	9a06      	ldr	r2, [sp, #24]
{
   1448a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1448c:	e9cd 3200 	strd	r3, r2, [sp]
   14490:	462b      	mov	r3, r5
   14492:	460a      	mov	r2, r1
   14494:	4601      	mov	r1, r0
   14496:	4811      	ldr	r0, [pc, #68]	; (144dc <bt_le_adv_start+0x58>)
   14498:	f7ff febe 	bl	14218 <bt_le_adv_start_legacy>
   1449c:	4621      	mov	r1, r4
   1449e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   144a0:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   144a2:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   144a6:	429d      	cmp	r5, r3
   144a8:	d102      	bne.n	144b0 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   144aa:	4630      	mov	r0, r6
   144ac:	b002      	add	sp, #8
   144ae:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   144b0:	880a      	ldrh	r2, [r1, #0]
   144b2:	4282      	cmp	r2, r0
   144b4:	d104      	bne.n	144c0 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   144b6:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   144b8:	b112      	cbz	r2, 144c0 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   144ba:	7812      	ldrb	r2, [r2, #0]
   144bc:	07d2      	lsls	r2, r2, #31
   144be:	d402      	bmi.n	144c6 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   144c0:	3301      	adds	r3, #1
   144c2:	3108      	adds	r1, #8
   144c4:	e7ef      	b.n	144a6 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   144c6:	4906      	ldr	r1, [pc, #24]	; (144e0 <bt_le_adv_start+0x5c>)
   144c8:	4806      	ldr	r0, [pc, #24]	; (144e4 <bt_le_adv_start+0x60>)
   144ca:	f00d f891 	bl	215f0 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   144ce:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   144d2:	2300      	movs	r3, #0
   144d4:	4803      	ldr	r0, [pc, #12]	; (144e4 <bt_le_adv_start+0x60>)
   144d6:	f00d f9a7 	bl	21828 <k_work_reschedule>
   144da:	e7e6      	b.n	144aa <bt_le_adv_start+0x26>
   144dc:	20008018 	.word	0x20008018
   144e0:	0001456d 	.word	0x0001456d
   144e4:	20008030 	.word	0x20008030

000144e8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   144e8:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   144ea:	481a      	ldr	r0, [pc, #104]	; (14554 <bt_le_adv_stop+0x6c>)
   144ec:	f013 fab7 	bl	27a5e <bt_le_lim_adv_cancel_timeout>
   144f0:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   144f4:	4818      	ldr	r0, [pc, #96]	; (14558 <bt_le_adv_stop+0x70>)
   144f6:	f013 f9d5 	bl	278a4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   144fa:	4817      	ldr	r0, [pc, #92]	; (14558 <bt_le_adv_stop+0x70>)
   144fc:	f013 f9cf 	bl	2789e <atomic_get>
   14500:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14502:	061a      	lsls	r2, r3, #24
   14504:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   14508:	d523      	bpl.n	14552 <bt_le_adv_stop+0x6a>
   1450a:	4813      	ldr	r0, [pc, #76]	; (14558 <bt_le_adv_stop+0x70>)
   1450c:	f013 f9c7 	bl	2789e <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14510:	0543      	lsls	r3, r0, #21
   14512:	d514      	bpl.n	1453e <bt_le_adv_stop+0x56>
   14514:	2207      	movs	r2, #7
   14516:	4911      	ldr	r1, [pc, #68]	; (1455c <bt_le_adv_stop+0x74>)
   14518:	4811      	ldr	r0, [pc, #68]	; (14560 <bt_le_adv_stop+0x78>)
   1451a:	f016 fbf9 	bl	2ad10 <memcmp>
   1451e:	4b11      	ldr	r3, [pc, #68]	; (14564 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14520:	b998      	cbnz	r0, 1454a <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   14522:	2204      	movs	r2, #4
   14524:	4910      	ldr	r1, [pc, #64]	; (14568 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   14526:	7e18      	ldrb	r0, [r3, #24]
   14528:	f001 f872 	bl	15610 <bt_conn_lookup_state_le>
   1452c:	4604      	mov	r4, r0
	if (conn) {
   1452e:	b130      	cbz	r0, 1453e <bt_le_adv_stop+0x56>
		conn->err = status;
   14530:	2100      	movs	r1, #0
   14532:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14534:	f000 fd98 	bl	15068 <bt_conn_set_state>
		bt_conn_unref(conn);
   14538:	4620      	mov	r0, r4
   1453a:	f000 fd5d 	bl	14ff8 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1453e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   14542:	2100      	movs	r1, #0
   14544:	4803      	ldr	r0, [pc, #12]	; (14554 <bt_le_adv_stop+0x6c>)
   14546:	f013 ba63 	b.w	27a10 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1454a:	2205      	movs	r2, #5
   1454c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   14550:	e7e9      	b.n	14526 <bt_le_adv_stop+0x3e>
}
   14552:	bd10      	pop	{r4, pc}
   14554:	20008018 	.word	0x20008018
   14558:	20008028 	.word	0x20008028
   1455c:	0002f096 	.word	0x0002f096
   14560:	20008021 	.word	0x20008021
   14564:	20008000 	.word	0x20008000
   14568:	0002f08f 	.word	0x0002f08f

0001456c <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1456c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1456e:	f7ff ffbb 	bl	144e8 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   14572:	4b07      	ldr	r3, [pc, #28]	; (14590 <adv_timeout+0x24>)
   14574:	9003      	str	r0, [sp, #12]
   14576:	9302      	str	r3, [sp, #8]
   14578:	2300      	movs	r3, #0
   1457a:	2202      	movs	r2, #2
   1457c:	4618      	mov	r0, r3
   1457e:	e9cd 3300 	strd	r3, r3, [sp]
   14582:	4904      	ldr	r1, [pc, #16]	; (14594 <adv_timeout+0x28>)
   14584:	f013 f9a0 	bl	278c8 <z_log_msg_runtime_create.constprop.0>
}
   14588:	b005      	add	sp, #20
   1458a:	f85d fb04 	ldr.w	pc, [sp], #4
   1458e:	bf00      	nop
   14590:	0002fae2 	.word	0x0002fae2
   14594:	0002c064 	.word	0x0002c064

00014598 <bt_le_adv_resume>:
{
   14598:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1459a:	4c1e      	ldr	r4, [pc, #120]	; (14614 <bt_le_adv_resume+0x7c>)
   1459c:	4620      	mov	r0, r4
   1459e:	f013 f97e 	bl	2789e <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   145a2:	0440      	lsls	r0, r0, #17
   145a4:	d534      	bpl.n	14610 <bt_le_adv_resume+0x78>
   145a6:	4620      	mov	r0, r4
   145a8:	f013 f979 	bl	2789e <atomic_get>
   145ac:	0601      	lsls	r1, r0, #24
   145ae:	d42f      	bmi.n	14610 <bt_le_adv_resume+0x78>
   145b0:	4620      	mov	r0, r4
   145b2:	f013 f974 	bl	2789e <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   145b6:	0542      	lsls	r2, r0, #21
   145b8:	d52a      	bpl.n	14610 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   145ba:	a901      	add	r1, sp, #4
   145bc:	f1a4 0010 	sub.w	r0, r4, #16
   145c0:	f7ff fda8 	bl	14114 <le_adv_start_add_conn>
	if (err) {
   145c4:	4605      	mov	r5, r0
   145c6:	bb18      	cbnz	r0, 14610 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   145c8:	2101      	movs	r1, #1
   145ca:	f1a4 0010 	sub.w	r0, r4, #16
   145ce:	f013 fa1f 	bl	27a10 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   145d2:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   145d4:	b928      	cbnz	r0, 145e2 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   145d6:	4630      	mov	r0, r6
}
   145d8:	b002      	add	sp, #8
   145da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   145de:	f000 bd0b 	b.w	14ff8 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   145e2:	4629      	mov	r1, r5
   145e4:	4630      	mov	r0, r6
   145e6:	f000 fd3f 	bl	15068 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   145ea:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   145ee:	4620      	mov	r0, r4
   145f0:	f013 f958 	bl	278a4 <atomic_and>
   145f4:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   145f6:	4630      	mov	r0, r6
   145f8:	f000 fcfe 	bl	14ff8 <bt_conn_unref>
	if (persist_paused) {
   145fc:	046b      	lsls	r3, r5, #17
   145fe:	d507      	bpl.n	14610 <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14600:	e8d4 3fef 	ldaex	r3, [r4]
   14604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   14608:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1460c:	2a00      	cmp	r2, #0
   1460e:	d1f7      	bne.n	14600 <bt_le_adv_resume+0x68>
}
   14610:	b002      	add	sp, #8
   14612:	bd70      	pop	{r4, r5, r6, pc}
   14614:	20008028 	.word	0x20008028

00014618 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   14618:	b530      	push	{r4, r5, lr}
   1461a:	b08f      	sub	sp, #60	; 0x3c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1461c:	2120      	movs	r1, #32
   1461e:	a806      	add	r0, sp, #24
   14620:	f7fe fad4 	bl	12bcc <bt_hci_le_rand>
	if (ret) {
   14624:	4604      	mov	r4, r0
   14626:	bb08      	cbnz	r0, 1466c <prng_reseed.constprop.0+0x54>
	return z_impl_k_uptime_ticks();
   14628:	f016 fa74 	bl	2ab14 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1462c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   14630:	fba0 2305 	umull	r2, r3, r0, r5
   14634:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   14638:	2308      	movs	r3, #8
   1463a:	0bd2      	lsrs	r2, r2, #15
   1463c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   14640:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   14642:	e9cd 2104 	strd	r2, r1, [sp, #16]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   14646:	9300      	str	r3, [sp, #0]
   14648:	2220      	movs	r2, #32
   1464a:	480a      	ldr	r0, [pc, #40]	; (14674 <prng_reseed.constprop.0+0x5c>)
   1464c:	ab04      	add	r3, sp, #16
   1464e:	a906      	add	r1, sp, #24
   14650:	f012 fdd3 	bl	271fa <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   14654:	b950      	cbnz	r0, 1466c <prng_reseed.constprop.0+0x54>
		LOG_ERR("Failed to re-seed PRNG");
   14656:	4b08      	ldr	r3, [pc, #32]	; (14678 <prng_reseed.constprop.0+0x60>)
   14658:	9400      	str	r4, [sp, #0]
   1465a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1465e:	2201      	movs	r2, #1
   14660:	4623      	mov	r3, r4
   14662:	4906      	ldr	r1, [pc, #24]	; (1467c <prng_reseed.constprop.0+0x64>)
   14664:	f013 f9fe 	bl	27a64 <z_log_msg_runtime_create.constprop.0>
   14668:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
   1466c:	4620      	mov	r0, r4
   1466e:	b00f      	add	sp, #60	; 0x3c
   14670:	bd30      	pop	{r4, r5, pc}
   14672:	bf00      	nop
   14674:	20009760 	.word	0x20009760
   14678:	0002fb08 	.word	0x0002fb08
   1467c:	0002c0a4 	.word	0x0002c0a4

00014680 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14680:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   14682:	b508      	push	{r3, lr}
   14684:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14688:	d910      	bls.n	146ac <sys_memcpy_swap.constprop.0+0x2c>
   1468a:	4298      	cmp	r0, r3
   1468c:	d213      	bcs.n	146b6 <sys_memcpy_swap.constprop.0+0x36>
   1468e:	490e      	ldr	r1, [pc, #56]	; (146c8 <sys_memcpy_swap.constprop.0+0x48>)
   14690:	f240 2315 	movw	r3, #533	; 0x215
   14694:	4a0d      	ldr	r2, [pc, #52]	; (146cc <sys_memcpy_swap.constprop.0+0x4c>)
   14696:	480e      	ldr	r0, [pc, #56]	; (146d0 <sys_memcpy_swap.constprop.0+0x50>)
   14698:	f011 fde1 	bl	2625e <assert_print>
   1469c:	480d      	ldr	r0, [pc, #52]	; (146d4 <sys_memcpy_swap.constprop.0+0x54>)
   1469e:	f011 fdde 	bl	2625e <assert_print>
   146a2:	f240 2115 	movw	r1, #533	; 0x215
   146a6:	4809      	ldr	r0, [pc, #36]	; (146cc <sys_memcpy_swap.constprop.0+0x4c>)
   146a8:	f011 fdd2 	bl	26250 <assert_post_action>
   146ac:	d0ef      	beq.n	1468e <sys_memcpy_swap.constprop.0+0xe>
   146ae:	f100 0210 	add.w	r2, r0, #16
   146b2:	4291      	cmp	r1, r2
   146b4:	e7ea      	b.n	1468c <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   146b6:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   146b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   146bc:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   146be:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   146c2:	d1f9      	bne.n	146b8 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   146c4:	bd08      	pop	{r3, pc}
   146c6:	bf00      	nop
   146c8:	0002fb51 	.word	0x0002fb51
   146cc:	0002fb1f 	.word	0x0002fb1f
   146d0:	0002d095 	.word	0x0002d095
   146d4:	0002fba8 	.word	0x0002fba8

000146d8 <prng_init>:

int prng_init(void)
{
   146d8:	b510      	push	{r4, lr}
   146da:	b086      	sub	sp, #24
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   146dc:	2108      	movs	r1, #8
   146de:	a804      	add	r0, sp, #16
   146e0:	f7fe fa74 	bl	12bcc <bt_hci_le_rand>
	if (ret) {
   146e4:	4604      	mov	r4, r0
   146e6:	b980      	cbnz	r0, 1470a <prng_init+0x32>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   146e8:	2208      	movs	r2, #8
   146ea:	480b      	ldr	r0, [pc, #44]	; (14718 <prng_init+0x40>)
   146ec:	a904      	add	r1, sp, #16
   146ee:	f012 fd64 	bl	271ba <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   146f2:	b968      	cbnz	r0, 14710 <prng_init+0x38>
		LOG_ERR("Failed to initialize PRNG");
   146f4:	4b09      	ldr	r3, [pc, #36]	; (1471c <prng_init+0x44>)
   146f6:	9400      	str	r4, [sp, #0]
   146f8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   146fc:	2201      	movs	r2, #1
   146fe:	4623      	mov	r3, r4
   14700:	4907      	ldr	r1, [pc, #28]	; (14720 <prng_init+0x48>)
   14702:	f013 f9af 	bl	27a64 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   14706:	f06f 0404 	mvn.w	r4, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1470a:	4620      	mov	r0, r4
   1470c:	b006      	add	sp, #24
   1470e:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   14710:	f7ff ff82 	bl	14618 <prng_reseed.constprop.0>
   14714:	4604      	mov	r4, r0
   14716:	e7f8      	b.n	1470a <prng_init+0x32>
   14718:	20009760 	.word	0x20009760
   1471c:	0002fbda 	.word	0x0002fbda
   14720:	0002c0a4 	.word	0x0002c0a4

00014724 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   14724:	b538      	push	{r3, r4, r5, lr}
   14726:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   14728:	4604      	mov	r4, r0
   1472a:	b198      	cbz	r0, 14754 <bt_rand+0x30>
   1472c:	b191      	cbz	r1, 14754 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1472e:	4a0b      	ldr	r2, [pc, #44]	; (1475c <bt_rand+0x38>)
   14730:	f012 fd7c 	bl	2722c <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   14734:	1c43      	adds	r3, r0, #1
   14736:	d107      	bne.n	14748 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   14738:	f7ff ff6e 	bl	14618 <prng_reseed.constprop.0>
		if (ret) {
   1473c:	b948      	cbnz	r0, 14752 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1473e:	4629      	mov	r1, r5
   14740:	4620      	mov	r0, r4
   14742:	4a06      	ldr	r2, [pc, #24]	; (1475c <bt_rand+0x38>)
   14744:	f012 fd72 	bl	2722c <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   14748:	2801      	cmp	r0, #1
   1474a:	bf0c      	ite	eq
   1474c:	2000      	moveq	r0, #0
   1474e:	f06f 0004 	mvnne.w	r0, #4
}
   14752:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14754:	f06f 0015 	mvn.w	r0, #21
   14758:	e7fb      	b.n	14752 <bt_rand+0x2e>
   1475a:	bf00      	nop
   1475c:	20009760 	.word	0x20009760

00014760 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14760:	2240      	movs	r2, #64	; 0x40
{
   14762:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14764:	4903      	ldr	r1, [pc, #12]	; (14774 <bt_pub_key_is_debug+0x14>)
   14766:	f016 fad3 	bl	2ad10 <memcmp>
}
   1476a:	fab0 f080 	clz	r0, r0
   1476e:	0940      	lsrs	r0, r0, #5
   14770:	bd08      	pop	{r3, pc}
   14772:	bf00      	nop
   14774:	0002fc8a 	.word	0x0002fc8a

00014778 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   14778:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1477a:	4b3c      	ldr	r3, [pc, #240]	; (1486c <bt_pub_key_gen+0xf4>)
{
   1477c:	b085      	sub	sp, #20
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1477e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   14782:	f003 0306 	and.w	r3, r3, #6
   14786:	2b06      	cmp	r3, #6
   14788:	d00e      	beq.n	147a8 <bt_pub_key_gen+0x30>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   1478a:	4b39      	ldr	r3, [pc, #228]	; (14870 <bt_pub_key_gen+0xf8>)
   1478c:	2202      	movs	r2, #2
   1478e:	9302      	str	r3, [sp, #8]
   14790:	2300      	movs	r3, #0
   14792:	4938      	ldr	r1, [pc, #224]	; (14874 <bt_pub_key_gen+0xfc>)
   14794:	4618      	mov	r0, r3
   14796:	e9cd 3300 	strd	r3, r3, [sp]
   1479a:	f013 f99f 	bl	27adc <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1479e:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   147a2:	4628      	mov	r0, r5
   147a4:	b005      	add	sp, #20
   147a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   147a8:	2800      	cmp	r0, #0
   147aa:	d05b      	beq.n	14864 <bt_pub_key_gen+0xec>
	return list->head;
   147ac:	4e32      	ldr	r6, [pc, #200]	; (14878 <bt_pub_key_gen+0x100>)
   147ae:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147b0:	b19a      	cbz	r2, 147da <bt_pub_key_gen+0x62>
   147b2:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   147b4:	4283      	cmp	r3, r0
   147b6:	d10c      	bne.n	147d2 <bt_pub_key_gen+0x5a>
			LOG_WRN("Callback already registered");
   147b8:	4b30      	ldr	r3, [pc, #192]	; (1487c <bt_pub_key_gen+0x104>)
   147ba:	2202      	movs	r2, #2
   147bc:	9302      	str	r3, [sp, #8]
   147be:	2300      	movs	r3, #0
   147c0:	492c      	ldr	r1, [pc, #176]	; (14874 <bt_pub_key_gen+0xfc>)
   147c2:	4618      	mov	r0, r3
   147c4:	e9cd 3300 	strd	r3, r3, [sp]
   147c8:	f013 f988 	bl	27adc <z_log_msg_runtime_create.constprop.0>
			return -EALREADY;
   147cc:	f06f 0577 	mvn.w	r5, #119	; 0x77
   147d0:	e7e7      	b.n	147a2 <bt_pub_key_gen+0x2a>
	return node->next;
   147d2:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147d4:	b10b      	cbz	r3, 147da <bt_pub_key_gen+0x62>
   147d6:	3b04      	subs	r3, #4
   147d8:	e7ec      	b.n	147b4 <bt_pub_key_gen+0x3c>
	parent->next = child;
   147da:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   147dc:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   147de:	1d03      	adds	r3, r0, #4
	list->head = node;
   147e0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   147e2:	b902      	cbnz	r2, 147e6 <bt_pub_key_gen+0x6e>
	list->tail = node;
   147e4:	6073      	str	r3, [r6, #4]
   147e6:	4f26      	ldr	r7, [pc, #152]	; (14880 <bt_pub_key_gen+0x108>)
   147e8:	e8d7 4fef 	ldaex	r4, [r7]
   147ec:	f044 0320 	orr.w	r3, r4, #32
   147f0:	e8c7 3fe2 	stlex	r2, r3, [r7]
   147f4:	2a00      	cmp	r2, #0
   147f6:	d1f7      	bne.n	147e8 <bt_pub_key_gen+0x70>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   147f8:	f014 0420 	ands.w	r4, r4, #32
   147fc:	d001      	beq.n	14802 <bt_pub_key_gen+0x8a>
	return 0;
   147fe:	2500      	movs	r5, #0
   14800:	e7cf      	b.n	147a2 <bt_pub_key_gen+0x2a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14802:	e8d7 3fef 	ldaex	r3, [r7]
   14806:	f023 0310 	bic.w	r3, r3, #16
   1480a:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1480e:	2a00      	cmp	r2, #0
   14810:	d1f7      	bne.n	14802 <bt_pub_key_gen+0x8a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   14812:	4622      	mov	r2, r4
   14814:	4621      	mov	r1, r4
   14816:	f242 0025 	movw	r0, #8229	; 0x2025
   1481a:	f7fe f939 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
   1481e:	4605      	mov	r5, r0
   14820:	2800      	cmp	r0, #0
   14822:	d0ec      	beq.n	147fe <bt_pub_key_gen+0x86>
		LOG_ERR("Sending LE P256 Public Key command failed");
   14824:	4b17      	ldr	r3, [pc, #92]	; (14884 <bt_pub_key_gen+0x10c>)
   14826:	2201      	movs	r2, #1
   14828:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1482c:	4620      	mov	r0, r4
   1482e:	4623      	mov	r3, r4
   14830:	4910      	ldr	r1, [pc, #64]	; (14874 <bt_pub_key_gen+0xfc>)
   14832:	9400      	str	r4, [sp, #0]
   14834:	f013 f952 	bl	27adc <z_log_msg_runtime_create.constprop.0>
   14838:	e8d7 3fef 	ldaex	r3, [r7]
   1483c:	f023 0320 	bic.w	r3, r3, #32
   14840:	e8c7 3fe2 	stlex	r2, r3, [r7]
   14844:	2a00      	cmp	r2, #0
   14846:	d1f7      	bne.n	14838 <bt_pub_key_gen+0xc0>
	return list->head;
   14848:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1484a:	b13c      	cbz	r4, 1485c <bt_pub_key_gen+0xe4>
			if (cb->func) {
   1484c:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14850:	3c04      	subs	r4, #4
			if (cb->func) {
   14852:	b10b      	cbz	r3, 14858 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   14854:	2000      	movs	r0, #0
   14856:	4798      	blx	r3
	return node->next;
   14858:	6864      	ldr	r4, [r4, #4]
   1485a:	e7f6      	b.n	1484a <bt_pub_key_gen+0xd2>
	list->head = NULL;
   1485c:	2300      	movs	r3, #0
	list->tail = NULL;
   1485e:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   14862:	e79e      	b.n	147a2 <bt_pub_key_gen+0x2a>
		return -EINVAL;
   14864:	f06f 0515 	mvn.w	r5, #21
   14868:	e79b      	b.n	147a2 <bt_pub_key_gen+0x2a>
   1486a:	bf00      	nop
   1486c:	20008000 	.word	0x20008000
   14870:	0002fc03 	.word	0x0002fc03
   14874:	0002c084 	.word	0x0002c084
   14878:	200226f0 	.word	0x200226f0
   1487c:	0002fc22 	.word	0x0002fc22
   14880:	200080cc 	.word	0x200080cc
   14884:	0002fc3e 	.word	0x0002fc3e

00014888 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14888:	4b04      	ldr	r3, [pc, #16]	; (1489c <bt_pub_key_get+0x14>)
   1488a:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   1488e:	f013 0f10 	tst.w	r3, #16
}
   14892:	4803      	ldr	r0, [pc, #12]	; (148a0 <bt_pub_key_get+0x18>)
   14894:	bf08      	it	eq
   14896:	2000      	moveq	r0, #0
   14898:	4770      	bx	lr
   1489a:	bf00      	nop
   1489c:	200080cc 	.word	0x200080cc
   148a0:	2002369a 	.word	0x2002369a

000148a4 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   148a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   148a6:	4e24      	ldr	r6, [pc, #144]	; (14938 <bt_dh_key_gen+0x94>)
{
   148a8:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   148aa:	6833      	ldr	r3, [r6, #0]
   148ac:	428b      	cmp	r3, r1
   148ae:	d03c      	beq.n	1492a <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   148b0:	b123      	cbz	r3, 148bc <bt_dh_key_gen+0x18>
		return -EBUSY;
   148b2:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   148b6:	4620      	mov	r0, r4
   148b8:	b004      	add	sp, #16
   148ba:	bd70      	pop	{r4, r5, r6, pc}
   148bc:	4b1f      	ldr	r3, [pc, #124]	; (1493c <bt_dh_key_gen+0x98>)
   148be:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   148c2:	0692      	lsls	r2, r2, #26
   148c4:	d4f5      	bmi.n	148b2 <bt_dh_key_gen+0xe>
   148c6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   148ca:	06db      	lsls	r3, r3, #27
   148cc:	d530      	bpl.n	14930 <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   148ce:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   148d0:	f242 0026 	movw	r0, #8230	; 0x2026
   148d4:	2140      	movs	r1, #64	; 0x40
   148d6:	f7fe f88d 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   148da:	4605      	mov	r5, r0
   148dc:	b310      	cbz	r0, 14924 <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   148de:	2140      	movs	r1, #64	; 0x40
   148e0:	300c      	adds	r0, #12
   148e2:	f005 fdc5 	bl	1a470 <net_buf_simple_add>
   148e6:	4623      	mov	r3, r4
   148e8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   148ec:	f853 1b04 	ldr.w	r1, [r3], #4
   148f0:	4293      	cmp	r3, r2
   148f2:	f840 1b04 	str.w	r1, [r0], #4
   148f6:	d1f9      	bne.n	148ec <bt_dh_key_gen+0x48>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   148f8:	2200      	movs	r2, #0
   148fa:	4629      	mov	r1, r5
   148fc:	f242 0026 	movw	r0, #8230	; 0x2026
   14900:	f7fe f8c6 	bl	12a90 <bt_hci_cmd_send_sync>
	if (err) {
   14904:	4604      	mov	r4, r0
   14906:	2800      	cmp	r0, #0
   14908:	d0d5      	beq.n	148b6 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   1490a:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1490c:	4a0c      	ldr	r2, [pc, #48]	; (14940 <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   1490e:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   14910:	4618      	mov	r0, r3
   14912:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14916:	490b      	ldr	r1, [pc, #44]	; (14944 <bt_dh_key_gen+0xa0>)
   14918:	2202      	movs	r2, #2
   1491a:	9403      	str	r4, [sp, #12]
   1491c:	9300      	str	r3, [sp, #0]
   1491e:	f013 f8dd 	bl	27adc <z_log_msg_runtime_create.constprop.0>
		return err;
   14922:	e7c8      	b.n	148b6 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   14924:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14928:	e7ef      	b.n	1490a <bt_dh_key_gen+0x66>
		return -EALREADY;
   1492a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1492e:	e7c2      	b.n	148b6 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   14930:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   14934:	e7bf      	b.n	148b6 <bt_dh_key_gen+0x12>
   14936:	bf00      	nop
   14938:	200226ec 	.word	0x200226ec
   1493c:	200080cc 	.word	0x200080cc
   14940:	0002fc68 	.word	0x0002fc68
   14944:	0002c084 	.word	0x0002c084

00014948 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   14948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1494a:	4b19      	ldr	r3, [pc, #100]	; (149b0 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1494c:	68c5      	ldr	r5, [r0, #12]
   1494e:	e8d3 2fef 	ldaex	r2, [r3]
   14952:	f022 0220 	bic.w	r2, r2, #32
   14956:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1495a:	2900      	cmp	r1, #0
   1495c:	d1f7      	bne.n	1494e <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1495e:	782a      	ldrb	r2, [r5, #0]
   14960:	b98a      	cbnz	r2, 14986 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   14962:	4914      	ldr	r1, [pc, #80]	; (149b4 <bt_hci_evt_le_pkey_complete+0x6c>)
   14964:	1c6a      	adds	r2, r5, #1
   14966:	f105 0041 	add.w	r0, r5, #65	; 0x41
   1496a:	f852 4b04 	ldr.w	r4, [r2], #4
   1496e:	4282      	cmp	r2, r0
   14970:	f841 4b04 	str.w	r4, [r1], #4
   14974:	d1f9      	bne.n	1496a <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14976:	e8d3 1fef 	ldaex	r1, [r3]
   1497a:	f041 0110 	orr.w	r1, r1, #16
   1497e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14982:	2a00      	cmp	r2, #0
   14984:	d1f7      	bne.n	14976 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   14986:	4e0c      	ldr	r6, [pc, #48]	; (149b8 <bt_hci_evt_le_pkey_complete+0x70>)
   14988:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1498a:	b16c      	cbz	r4, 149a8 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1498c:	4f09      	ldr	r7, [pc, #36]	; (149b4 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1498e:	3c04      	subs	r4, #4
		if (cb->func) {
   14990:	6823      	ldr	r3, [r4, #0]
   14992:	b12b      	cbz	r3, 149a0 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   14994:	782a      	ldrb	r2, [r5, #0]
   14996:	2a00      	cmp	r2, #0
   14998:	bf0c      	ite	eq
   1499a:	4638      	moveq	r0, r7
   1499c:	2000      	movne	r0, #0
   1499e:	4798      	blx	r3
	return node->next;
   149a0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   149a2:	b10c      	cbz	r4, 149a8 <bt_hci_evt_le_pkey_complete+0x60>
   149a4:	3c04      	subs	r4, #4
   149a6:	e7f3      	b.n	14990 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   149a8:	2300      	movs	r3, #0
	list->tail = NULL;
   149aa:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   149ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   149b0:	200080cc 	.word	0x200080cc
   149b4:	2002369a 	.word	0x2002369a
   149b8:	200226f0 	.word	0x200226f0

000149bc <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   149bc:	4905      	ldr	r1, [pc, #20]	; (149d4 <bt_hci_evt_le_dhkey_complete+0x18>)
   149be:	680b      	ldr	r3, [r1, #0]
   149c0:	b133      	cbz	r3, 149d0 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   149c2:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   149c4:	2000      	movs	r0, #0
   149c6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   149c8:	7811      	ldrb	r1, [r2, #0]
   149ca:	b901      	cbnz	r1, 149ce <bt_hci_evt_le_dhkey_complete+0x12>
   149cc:	1c50      	adds	r0, r2, #1
   149ce:	4718      	bx	r3
	}
}
   149d0:	4770      	bx	lr
   149d2:	bf00      	nop
   149d4:	200226ec 	.word	0x200226ec

000149d8 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   149d8:	b570      	push	{r4, r5, r6, lr}
   149da:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   149dc:	4b12      	ldr	r3, [pc, #72]	; (14a28 <notify_connected+0x50>)
   149de:	681d      	ldr	r5, [r3, #0]
   149e0:	b995      	cbnz	r5, 14a08 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   149e2:	4d12      	ldr	r5, [pc, #72]	; (14a2c <notify_connected+0x54>)
   149e4:	4e12      	ldr	r6, [pc, #72]	; (14a30 <notify_connected+0x58>)
   149e6:	42b5      	cmp	r5, r6
   149e8:	d91c      	bls.n	14a24 <notify_connected+0x4c>
   149ea:	4912      	ldr	r1, [pc, #72]	; (14a34 <notify_connected+0x5c>)
   149ec:	f240 535b 	movw	r3, #1371	; 0x55b
   149f0:	4a11      	ldr	r2, [pc, #68]	; (14a38 <notify_connected+0x60>)
   149f2:	4812      	ldr	r0, [pc, #72]	; (14a3c <notify_connected+0x64>)
   149f4:	f011 fc33 	bl	2625e <assert_print>
   149f8:	4811      	ldr	r0, [pc, #68]	; (14a40 <notify_connected+0x68>)
   149fa:	f011 fc30 	bl	2625e <assert_print>
   149fe:	f240 515b 	movw	r1, #1371	; 0x55b
   14a02:	480d      	ldr	r0, [pc, #52]	; (14a38 <notify_connected+0x60>)
   14a04:	f011 fc24 	bl	26250 <assert_post_action>
		if (cb->connected) {
   14a08:	682b      	ldr	r3, [r5, #0]
   14a0a:	b113      	cbz	r3, 14a12 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   14a0c:	4620      	mov	r0, r4
   14a0e:	7b21      	ldrb	r1, [r4, #12]
   14a10:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14a12:	69ad      	ldr	r5, [r5, #24]
   14a14:	e7e4      	b.n	149e0 <notify_connected+0x8>
		if (cb->connected) {
   14a16:	682b      	ldr	r3, [r5, #0]
   14a18:	b113      	cbz	r3, 14a20 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   14a1a:	4620      	mov	r0, r4
   14a1c:	7b21      	ldrb	r1, [r4, #12]
   14a1e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14a20:	351c      	adds	r5, #28
   14a22:	e7e0      	b.n	149e6 <notify_connected+0xe>
   14a24:	d3f7      	bcc.n	14a16 <notify_connected+0x3e>
		}
	}
}
   14a26:	bd70      	pop	{r4, r5, r6, pc}
   14a28:	20022718 	.word	0x20022718
   14a2c:	0002c000 	.word	0x0002c000
   14a30:	0002c01c 	.word	0x0002c01c
   14a34:	0002fd01 	.word	0x0002fd01
   14a38:	0002fcd1 	.word	0x0002fcd1
   14a3c:	0002d095 	.word	0x0002d095
   14a40:	0002e1ea 	.word	0x0002e1ea

00014a44 <tx_notify>:
{
   14a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a48:	4604      	mov	r4, r0
	tx->cb = NULL;
   14a4a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   14a4e:	4f14      	ldr	r7, [pc, #80]	; (14aa0 <tx_notify+0x5c>)
	__asm__ volatile(
   14a50:	f04f 0220 	mov.w	r2, #32
   14a54:	f3ef 8311 	mrs	r3, BASEPRI
   14a58:	f382 8812 	msr	BASEPRI_MAX, r2
   14a5c:	f3bf 8f6f 	isb	sy
	return list->head;
   14a60:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   14a62:	b929      	cbnz	r1, 14a70 <tx_notify+0x2c>
	__asm__ volatile(
   14a64:	f383 8811 	msr	BASEPRI, r3
   14a68:	f3bf 8f6f 	isb	sy
}
   14a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14a70:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   14a72:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14a74:	4281      	cmp	r1, r0
	list->tail = node;
   14a76:	bf08      	it	eq
   14a78:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   14a7a:	6222      	str	r2, [r4, #32]
   14a7c:	f383 8811 	msr	BASEPRI, r3
   14a80:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   14a84:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   14a88:	4638      	mov	r0, r7
	tx->user_data = NULL;
   14a8a:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   14a8e:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   14a92:	f015 ff81 	bl	2a998 <k_queue_append>
		cb(conn, user_data, 0);
   14a96:	2200      	movs	r2, #0
   14a98:	4631      	mov	r1, r6
   14a9a:	4620      	mov	r0, r4
   14a9c:	47a8      	blx	r5
	while (1) {
   14a9e:	e7d7      	b.n	14a50 <tx_notify+0xc>
   14aa0:	20008be8 	.word	0x20008be8

00014aa4 <conn_tx_destroy>:
{
   14aa4:	b570      	push	{r4, r5, r6, lr}
   14aa6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   14aa8:	b949      	cbnz	r1, 14abe <conn_tx_destroy+0x1a>
   14aaa:	490d      	ldr	r1, [pc, #52]	; (14ae0 <conn_tx_destroy+0x3c>)
   14aac:	480d      	ldr	r0, [pc, #52]	; (14ae4 <conn_tx_destroy+0x40>)
   14aae:	2339      	movs	r3, #57	; 0x39
   14ab0:	4a0d      	ldr	r2, [pc, #52]	; (14ae8 <conn_tx_destroy+0x44>)
   14ab2:	f011 fbd4 	bl	2625e <assert_print>
   14ab6:	2139      	movs	r1, #57	; 0x39
   14ab8:	480b      	ldr	r0, [pc, #44]	; (14ae8 <conn_tx_destroy+0x44>)
   14aba:	f011 fbc9 	bl	26250 <assert_post_action>
	tx->cb = NULL;
   14abe:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   14ac0:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   14ac4:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   14ac6:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   14aca:	4808      	ldr	r0, [pc, #32]	; (14aec <conn_tx_destroy+0x48>)
   14acc:	f015 ff64 	bl	2a998 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   14ad0:	4631      	mov	r1, r6
   14ad2:	4620      	mov	r0, r4
   14ad4:	462b      	mov	r3, r5
}
   14ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   14ada:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   14ade:	4718      	bx	r3
   14ae0:	0002fd1c 	.word	0x0002fd1c
   14ae4:	0002d095 	.word	0x0002d095
   14ae8:	0002fcd1 	.word	0x0002fcd1
   14aec:	20008be8 	.word	0x20008be8

00014af0 <send_frag>:
{
   14af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14af4:	4604      	mov	r4, r0
   14af6:	460e      	mov	r6, r1
   14af8:	4617      	mov	r7, r2
   14afa:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   14afc:	698d      	ldr	r5, [r1, #24]
{
   14afe:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
   14b00:	f04f 33ff 	mov.w	r3, #4294967295
   14b04:	f04f 32ff 	mov.w	r2, #4294967295
   14b08:	4849      	ldr	r0, [pc, #292]	; (14c30 <send_frag+0x140>)
   14b0a:	f00c f931 	bl	20d70 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   14b0e:	7b63      	ldrb	r3, [r4, #13]
   14b10:	2b07      	cmp	r3, #7
   14b12:	f040 8081 	bne.w	14c18 <send_frag+0x128>
	__asm__ volatile(
   14b16:	f04f 0320 	mov.w	r3, #32
   14b1a:	f3ef 8211 	mrs	r2, BASEPRI
   14b1e:	f383 8812 	msr	BASEPRI_MAX, r3
   14b22:	f3bf 8f6f 	isb	sy
	if (tx) {
   14b26:	2d00      	cmp	r5, #0
   14b28:	d049      	beq.n	14bbe <send_frag+0xce>
	parent->next = child;
   14b2a:	2300      	movs	r3, #0
   14b2c:	602b      	str	r3, [r5, #0]
	return list->tail;
   14b2e:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   14b30:	2b00      	cmp	r3, #0
   14b32:	d141      	bne.n	14bb8 <send_frag+0xc8>
	list->head = node;
   14b34:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14b38:	f382 8811 	msr	BASEPRI, r2
   14b3c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14b40:	2104      	movs	r1, #4
   14b42:	f106 000c 	add.w	r0, r6, #12
   14b46:	f005 fc37 	bl	1a3b8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14b4a:	8823      	ldrh	r3, [r4, #0]
   14b4c:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   14b50:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   14b54:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14b56:	8a33      	ldrh	r3, [r6, #16]
   14b58:	3b04      	subs	r3, #4
   14b5a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14b5c:	2302      	movs	r3, #2
	return bt_send(buf);
   14b5e:	4630      	mov	r0, r6
   14b60:	7633      	strb	r3, [r6, #24]
   14b62:	f7fe fa9b 	bl	1309c <bt_send>
	if (err) {
   14b66:	2800      	cmp	r0, #0
   14b68:	d060      	beq.n	14c2c <send_frag+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   14b6a:	4b32      	ldr	r3, [pc, #200]	; (14c34 <send_frag+0x144>)
   14b6c:	9003      	str	r0, [sp, #12]
   14b6e:	9302      	str	r3, [sp, #8]
   14b70:	2300      	movs	r3, #0
   14b72:	2201      	movs	r2, #1
   14b74:	4618      	mov	r0, r3
   14b76:	e9cd 3300 	strd	r3, r3, [sp]
   14b7a:	492f      	ldr	r1, [pc, #188]	; (14c38 <send_frag+0x148>)
   14b7c:	f012 ffe3 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   14b80:	f04f 0320 	mov.w	r3, #32
   14b84:	f3ef 8711 	mrs	r7, BASEPRI
   14b88:	f383 8812 	msr	BASEPRI_MAX, r3
   14b8c:	f3bf 8f6f 	isb	sy
		if (tx) {
   14b90:	b315      	cbz	r5, 14bd8 <send_frag+0xe8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   14b92:	4629      	mov	r1, r5
   14b94:	f104 0014 	add.w	r0, r4, #20
   14b98:	f012 ffaf 	bl	27afa <sys_slist_find_and_remove>
	__asm__ volatile(
   14b9c:	f387 8811 	msr	BASEPRI, r7
   14ba0:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   14ba4:	4822      	ldr	r0, [pc, #136]	; (14c30 <send_frag+0x140>)
   14ba6:	f00c f89f 	bl	20ce8 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   14baa:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   14bac:	4629      	mov	r1, r5
   14bae:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   14bb0:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   14bb2:	f7ff ff77 	bl	14aa4 <conn_tx_destroy>
   14bb6:	e028      	b.n	14c0a <send_frag+0x11a>
	parent->next = child;
   14bb8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14bba:	61a5      	str	r5, [r4, #24]
}
   14bbc:	e7bc      	b.n	14b38 <send_frag+0x48>
	return list->tail;
   14bbe:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   14bc0:	b133      	cbz	r3, 14bd0 <send_frag+0xe0>
			pending_no_cb = &tail_tx->pending_no_cb;
   14bc2:	f103 080c 	add.w	r8, r3, #12
   14bc6:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14bc8:	3301      	adds	r3, #1
   14bca:	f8c8 3000 	str.w	r3, [r8]
   14bce:	e7b3      	b.n	14b38 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   14bd0:	69e3      	ldr	r3, [r4, #28]
   14bd2:	f104 081c 	add.w	r8, r4, #28
   14bd6:	e7f7      	b.n	14bc8 <send_frag+0xd8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   14bd8:	f8d8 2000 	ldr.w	r2, [r8]
   14bdc:	b95a      	cbnz	r2, 14bf6 <send_frag+0x106>
   14bde:	4917      	ldr	r1, [pc, #92]	; (14c3c <send_frag+0x14c>)
   14be0:	4817      	ldr	r0, [pc, #92]	; (14c40 <send_frag+0x150>)
   14be2:	f240 2327 	movw	r3, #551	; 0x227
   14be6:	4a17      	ldr	r2, [pc, #92]	; (14c44 <send_frag+0x154>)
   14be8:	f011 fb39 	bl	2625e <assert_print>
   14bec:	f240 2127 	movw	r1, #551	; 0x227
   14bf0:	4814      	ldr	r0, [pc, #80]	; (14c44 <send_frag+0x154>)
   14bf2:	f011 fb2d 	bl	26250 <assert_post_action>
			(*pending_no_cb)--;
   14bf6:	3a01      	subs	r2, #1
   14bf8:	f8c8 2000 	str.w	r2, [r8]
   14bfc:	f387 8811 	msr	BASEPRI, r7
   14c00:	f3bf 8f6f 	isb	sy
   14c04:	480a      	ldr	r0, [pc, #40]	; (14c30 <send_frag+0x140>)
   14c06:	f00c f86f 	bl	20ce8 <z_impl_k_sem_give>
	if (always_consume) {
   14c0a:	f1b9 0f00 	cmp.w	r9, #0
   14c0e:	d109      	bne.n	14c24 <send_frag+0x134>
	return false;
   14c10:	2000      	movs	r0, #0
}
   14c12:	b005      	add	sp, #20
   14c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14c18:	4805      	ldr	r0, [pc, #20]	; (14c30 <send_frag+0x140>)
   14c1a:	f00c f865 	bl	20ce8 <z_impl_k_sem_give>
	if (tx) {
   14c1e:	2d00      	cmp	r5, #0
   14c20:	d1c3      	bne.n	14baa <send_frag+0xba>
   14c22:	e7f2      	b.n	14c0a <send_frag+0x11a>
		net_buf_unref(buf);
   14c24:	4630      	mov	r0, r6
   14c26:	f005 fb01 	bl	1a22c <net_buf_unref>
   14c2a:	e7f1      	b.n	14c10 <send_frag+0x120>
	return true;
   14c2c:	2001      	movs	r0, #1
   14c2e:	e7f0      	b.n	14c12 <send_frag+0x122>
   14c30:	20008100 	.word	0x20008100
   14c34:	0002f500 	.word	0x0002f500
   14c38:	0002c074 	.word	0x0002c074
   14c3c:	0002fd1f 	.word	0x0002fd1f
   14c40:	0002d095 	.word	0x0002d095
   14c44:	0002fcd1 	.word	0x0002fcd1

00014c48 <bt_conn_get_pkts>:
}
   14c48:	4800      	ldr	r0, [pc, #0]	; (14c4c <bt_conn_get_pkts+0x4>)
   14c4a:	4770      	bx	lr
   14c4c:	20008100 	.word	0x20008100

00014c50 <bt_conn_new>:
{
   14c50:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   14c52:	2200      	movs	r2, #0
   14c54:	4604      	mov	r4, r0
   14c56:	428a      	cmp	r2, r1
   14c58:	d102      	bne.n	14c60 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14c5a:	2400      	movs	r4, #0
}
   14c5c:	4620      	mov	r0, r4
   14c5e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14c60:	2001      	movs	r0, #1
   14c62:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   14c66:	e8d3 5fef 	ldaex	r5, [r3]
   14c6a:	2d00      	cmp	r5, #0
   14c6c:	d104      	bne.n	14c78 <bt_conn_new+0x28>
   14c6e:	e8c3 0fec 	stlex	ip, r0, [r3]
   14c72:	f1bc 0f00 	cmp.w	ip, #0
   14c76:	d1f6      	bne.n	14c66 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14c78:	d002      	beq.n	14c80 <bt_conn_new+0x30>
   14c7a:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   14c7c:	4402      	add	r2, r0
   14c7e:	e7ea      	b.n	14c56 <bt_conn_new+0x6>
	if (!conn) {
   14c80:	2c00      	cmp	r4, #0
   14c82:	d0ea      	beq.n	14c5a <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   14c84:	22c4      	movs	r2, #196	; 0xc4
   14c86:	2100      	movs	r1, #0
   14c88:	4620      	mov	r0, r4
   14c8a:	f016 f88b 	bl	2ada4 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14c8e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14c92:	4904      	ldr	r1, [pc, #16]	; (14ca4 <bt_conn_new+0x54>)
   14c94:	f00c fcac 	bl	215f0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14c98:	4903      	ldr	r1, [pc, #12]	; (14ca8 <bt_conn_new+0x58>)
   14c9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14c9e:	f00c facb 	bl	21238 <k_work_init>
	return conn;
   14ca2:	e7db      	b.n	14c5c <bt_conn_new+0xc>
   14ca4:	000156bd 	.word	0x000156bd
   14ca8:	00027b65 	.word	0x00027b65

00014cac <conn_cleanup>:
{
   14cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14cb0:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   14cb2:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   14cb4:	f104 0638 	add.w	r6, r4, #56	; 0x38
   14cb8:	2300      	movs	r3, #0
   14cba:	2200      	movs	r2, #0
   14cbc:	4630      	mov	r0, r6
   14cbe:	f014 fa9f 	bl	29200 <net_buf_get>
   14cc2:	4603      	mov	r3, r0
   14cc4:	b980      	cbnz	r0, 14ce8 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   14cc6:	6963      	ldr	r3, [r4, #20]
   14cc8:	b1cb      	cbz	r3, 14cfe <conn_cleanup+0x52>
   14cca:	4918      	ldr	r1, [pc, #96]	; (14d2c <conn_cleanup+0x80>)
   14ccc:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   14cd0:	4a17      	ldr	r2, [pc, #92]	; (14d30 <conn_cleanup+0x84>)
   14cd2:	4818      	ldr	r0, [pc, #96]	; (14d34 <conn_cleanup+0x88>)
   14cd4:	f011 fac3 	bl	2625e <assert_print>
   14cd8:	4817      	ldr	r0, [pc, #92]	; (14d38 <conn_cleanup+0x8c>)
   14cda:	f011 fac0 	bl	2625e <assert_print>
   14cde:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14ce2:	4813      	ldr	r0, [pc, #76]	; (14d30 <conn_cleanup+0x84>)
   14ce4:	f011 fab4 	bl	26250 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14ce8:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   14cea:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   14cec:	f005 fa9e 	bl	1a22c <net_buf_unref>
		if (tx) {
   14cf0:	2d00      	cmp	r5, #0
   14cf2:	d0e1      	beq.n	14cb8 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   14cf4:	4629      	mov	r1, r5
   14cf6:	4620      	mov	r0, r4
   14cf8:	f7ff fed4 	bl	14aa4 <conn_tx_destroy>
   14cfc:	e7da      	b.n	14cb4 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14cfe:	69e3      	ldr	r3, [r4, #28]
   14d00:	b14b      	cbz	r3, 14d16 <conn_cleanup+0x6a>
   14d02:	490e      	ldr	r1, [pc, #56]	; (14d3c <conn_cleanup+0x90>)
   14d04:	f240 23b5 	movw	r3, #693	; 0x2b5
   14d08:	4a09      	ldr	r2, [pc, #36]	; (14d30 <conn_cleanup+0x84>)
   14d0a:	480a      	ldr	r0, [pc, #40]	; (14d34 <conn_cleanup+0x88>)
   14d0c:	f011 faa7 	bl	2625e <assert_print>
   14d10:	f240 21b5 	movw	r1, #693	; 0x2b5
   14d14:	e7e5      	b.n	14ce2 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   14d16:	4620      	mov	r0, r4
   14d18:	f012 ff27 	bl	27b6a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14d1c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14d20:	2200      	movs	r2, #0
}
   14d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14d26:	2300      	movs	r3, #0
   14d28:	f00c bd7e 	b.w	21828 <k_work_reschedule>
   14d2c:	0002fd32 	.word	0x0002fd32
   14d30:	0002fcd1 	.word	0x0002fcd1
   14d34:	0002d095 	.word	0x0002d095
   14d38:	0002fd58 	.word	0x0002fd58
   14d3c:	0002fd6d 	.word	0x0002fd6d

00014d40 <bt_conn_recv>:
{
   14d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d42:	4616      	mov	r6, r2
   14d44:	b087      	sub	sp, #28
   14d46:	4604      	mov	r4, r0
   14d48:	460d      	mov	r5, r1
	tx_notify(conn);
   14d4a:	f7ff fe7b 	bl	14a44 <tx_notify>
	switch (flags) {
   14d4e:	2e01      	cmp	r6, #1
   14d50:	d02e      	beq.n	14db0 <bt_conn_recv+0x70>
   14d52:	2e02      	cmp	r6, #2
   14d54:	d165      	bne.n	14e22 <bt_conn_recv+0xe2>
		if (conn->rx) {
   14d56:	6923      	ldr	r3, [r4, #16]
   14d58:	b163      	cbz	r3, 14d74 <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   14d5a:	4b3d      	ldr	r3, [pc, #244]	; (14e50 <bt_conn_recv+0x110>)
   14d5c:	2201      	movs	r2, #1
   14d5e:	9302      	str	r3, [sp, #8]
   14d60:	2300      	movs	r3, #0
   14d62:	493c      	ldr	r1, [pc, #240]	; (14e54 <bt_conn_recv+0x114>)
   14d64:	4618      	mov	r0, r3
   14d66:	e9cd 3300 	strd	r3, r3, [sp]
   14d6a:	f012 feec 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   14d6e:	4620      	mov	r0, r4
   14d70:	f012 fefb 	bl	27b6a <bt_conn_reset_rx_state>
		conn->rx = buf;
   14d74:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   14d76:	6921      	ldr	r1, [r4, #16]
   14d78:	8a0a      	ldrh	r2, [r1, #16]
   14d7a:	2a01      	cmp	r2, #1
   14d7c:	d966      	bls.n	14e4c <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   14d7e:	68cb      	ldr	r3, [r1, #12]
   14d80:	881b      	ldrh	r3, [r3, #0]
   14d82:	3304      	adds	r3, #4
   14d84:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   14d86:	429a      	cmp	r2, r3
   14d88:	d360      	bcc.n	14e4c <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   14d8a:	d956      	bls.n	14e3a <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   14d8c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   14d90:	4b31      	ldr	r3, [pc, #196]	; (14e58 <bt_conn_recv+0x118>)
   14d92:	2201      	movs	r2, #1
   14d94:	9302      	str	r3, [sp, #8]
   14d96:	2300      	movs	r3, #0
   14d98:	492e      	ldr	r1, [pc, #184]	; (14e54 <bt_conn_recv+0x114>)
   14d9a:	4618      	mov	r0, r3
   14d9c:	e9cd 3300 	strd	r3, r3, [sp]
   14da0:	f012 fed1 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14da4:	4620      	mov	r0, r4
}
   14da6:	b007      	add	sp, #28
   14da8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   14dac:	f012 bedd 	b.w	27b6a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   14db0:	6923      	ldr	r3, [r4, #16]
   14db2:	b963      	cbnz	r3, 14dce <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   14db4:	4a29      	ldr	r2, [pc, #164]	; (14e5c <bt_conn_recv+0x11c>)
   14db6:	4618      	mov	r0, r3
   14db8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14dbc:	4925      	ldr	r1, [pc, #148]	; (14e54 <bt_conn_recv+0x114>)
   14dbe:	4632      	mov	r2, r6
   14dc0:	9300      	str	r3, [sp, #0]
   14dc2:	f012 fec0 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14dc6:	4620      	mov	r0, r4
   14dc8:	f012 fecf 	bl	27b6a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   14dcc:	e001      	b.n	14dd2 <bt_conn_recv+0x92>
		if (!buf->len) {
   14dce:	8a2f      	ldrh	r7, [r5, #16]
   14dd0:	b92f      	cbnz	r7, 14dde <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   14dd2:	4628      	mov	r0, r5
}
   14dd4:	b007      	add	sp, #28
   14dd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   14dda:	f005 ba27 	b.w	1a22c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14dde:	f103 000c 	add.w	r0, r3, #12
   14de2:	f014 fa22 	bl	2922a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   14de6:	4287      	cmp	r7, r0
   14de8:	d911      	bls.n	14e0e <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   14dea:	2700      	movs	r7, #0
   14dec:	4b1c      	ldr	r3, [pc, #112]	; (14e60 <bt_conn_recv+0x120>)
   14dee:	4632      	mov	r2, r6
   14df0:	4638      	mov	r0, r7
   14df2:	4918      	ldr	r1, [pc, #96]	; (14e54 <bt_conn_recv+0x114>)
   14df4:	9302      	str	r3, [sp, #8]
   14df6:	e9cd 7700 	strd	r7, r7, [sp]
   14dfa:	463b      	mov	r3, r7
   14dfc:	f012 fea3 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   14e00:	463a      	mov	r2, r7
   14e02:	4620      	mov	r0, r4
   14e04:	6921      	ldr	r1, [r4, #16]
   14e06:	f000 fefd 	bl	15c04 <bt_l2cap_recv>
			conn->rx = NULL;
   14e0a:	6127      	str	r7, [r4, #16]
   14e0c:	e7e1      	b.n	14dd2 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14e0e:	6920      	ldr	r0, [r4, #16]
   14e10:	8a2a      	ldrh	r2, [r5, #16]
   14e12:	68e9      	ldr	r1, [r5, #12]
   14e14:	300c      	adds	r0, #12
   14e16:	f014 fa10 	bl	2923a <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14e1a:	4628      	mov	r0, r5
   14e1c:	f005 fa06 	bl	1a22c <net_buf_unref>
		break;
   14e20:	e7a9      	b.n	14d76 <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14e22:	4b10      	ldr	r3, [pc, #64]	; (14e64 <bt_conn_recv+0x124>)
   14e24:	2201      	movs	r2, #1
   14e26:	9302      	str	r3, [sp, #8]
   14e28:	2300      	movs	r3, #0
   14e2a:	490a      	ldr	r1, [pc, #40]	; (14e54 <bt_conn_recv+0x114>)
   14e2c:	4618      	mov	r0, r3
   14e2e:	e9cd 3300 	strd	r3, r3, [sp]
	switch (flags) {
   14e32:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14e34:	f012 fe87 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
   14e38:	e7c5      	b.n	14dc6 <bt_conn_recv+0x86>
	conn->rx = NULL;
   14e3a:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   14e3c:	2201      	movs	r2, #1
   14e3e:	4620      	mov	r0, r4
	conn->rx = NULL;
   14e40:	6123      	str	r3, [r4, #16]
}
   14e42:	b007      	add	sp, #28
   14e44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   14e48:	f000 bedc 	b.w	15c04 <bt_l2cap_recv>
}
   14e4c:	b007      	add	sp, #28
   14e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e50:	0002fd86 	.word	0x0002fd86
   14e54:	0002c074 	.word	0x0002c074
   14e58:	0002fe06 	.word	0x0002fe06
   14e5c:	0002fda3 	.word	0x0002fda3
   14e60:	0002fdc1 	.word	0x0002fdc1
   14e64:	0002fde8 	.word	0x0002fde8

00014e68 <bt_conn_send_cb>:
{
   14e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14e6c:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14e6e:	7b43      	ldrb	r3, [r0, #13]
{
   14e70:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14e72:	2b07      	cmp	r3, #7
{
   14e74:	4688      	mov	r8, r1
   14e76:	4617      	mov	r7, r2
   14e78:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
   14e7a:	d00c      	beq.n	14e96 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   14e7c:	4b28      	ldr	r3, [pc, #160]	; (14f20 <bt_conn_send_cb+0xb8>)
   14e7e:	2201      	movs	r2, #1
   14e80:	9302      	str	r3, [sp, #8]
   14e82:	2300      	movs	r3, #0
   14e84:	4927      	ldr	r1, [pc, #156]	; (14f24 <bt_conn_send_cb+0xbc>)
   14e86:	4618      	mov	r0, r3
   14e88:	e9cd 3300 	strd	r3, r3, [sp]
   14e8c:	f012 fe5b 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   14e90:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14e94:	e01c      	b.n	14ed0 <bt_conn_send_cb+0x68>
	if (cb) {
   14e96:	2a00      	cmp	r2, #0
   14e98:	d03f      	beq.n	14f1a <bt_conn_send_cb+0xb2>
	return z_impl_z_current_get();
   14e9a:	f00d fe4d 	bl	22b38 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14e9e:	4b22      	ldr	r3, [pc, #136]	; (14f28 <bt_conn_send_cb+0xc0>)
   14ea0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14ea2:	4822      	ldr	r0, [pc, #136]	; (14f2c <bt_conn_send_cb+0xc4>)
   14ea4:	bf07      	ittee	eq
   14ea6:	2200      	moveq	r2, #0
   14ea8:	2300      	moveq	r3, #0
   14eaa:	f04f 32ff 	movne.w	r2, #4294967295
   14eae:	f04f 33ff 	movne.w	r3, #4294967295
   14eb2:	f00b feaf 	bl	20c14 <z_impl_k_queue_get>
   14eb6:	4604      	mov	r4, r0
		if (!tx) {
   14eb8:	b968      	cbnz	r0, 14ed6 <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   14eba:	4b1d      	ldr	r3, [pc, #116]	; (14f30 <bt_conn_send_cb+0xc8>)
   14ebc:	9000      	str	r0, [sp, #0]
   14ebe:	e9cd 0301 	strd	r0, r3, [sp, #4]
   14ec2:	2201      	movs	r2, #1
   14ec4:	4603      	mov	r3, r0
   14ec6:	4917      	ldr	r1, [pc, #92]	; (14f24 <bt_conn_send_cb+0xbc>)
   14ec8:	f012 fe3d 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   14ecc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14ed0:	b005      	add	sp, #20
   14ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14ed6:	7b73      	ldrb	r3, [r6, #13]
   14ed8:	2500      	movs	r5, #0
   14eda:	2b07      	cmp	r3, #7
   14edc:	d011      	beq.n	14f02 <bt_conn_send_cb+0x9a>
			LOG_WRN("Disconnected while allocating context");
   14ede:	4b15      	ldr	r3, [pc, #84]	; (14f34 <bt_conn_send_cb+0xcc>)
   14ee0:	4628      	mov	r0, r5
   14ee2:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14ee6:	2202      	movs	r2, #2
   14ee8:	462b      	mov	r3, r5
   14eea:	490e      	ldr	r1, [pc, #56]	; (14f24 <bt_conn_send_cb+0xbc>)
   14eec:	9500      	str	r5, [sp, #0]
   14eee:	f012 fe2a 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
	k_fifo_put(&free_tx, tx);
   14ef2:	4621      	mov	r1, r4
	tx->user_data = NULL;
   14ef4:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   14ef8:	480c      	ldr	r0, [pc, #48]	; (14f2c <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   14efa:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   14efc:	f015 fd4c 	bl	2a998 <k_queue_append>
}
   14f00:	e7c6      	b.n	14e90 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   14f02:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   14f06:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   14f08:	f106 0038 	add.w	r0, r6, #56	; 0x38
   14f0c:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   14f0e:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   14f12:	f005 f965 	bl	1a1e0 <net_buf_put>
	return 0;
   14f16:	2000      	movs	r0, #0
   14f18:	e7da      	b.n	14ed0 <bt_conn_send_cb+0x68>
   14f1a:	4614      	mov	r4, r2
   14f1c:	e7f4      	b.n	14f08 <bt_conn_send_cb+0xa0>
   14f1e:	bf00      	nop
   14f20:	0002fe21 	.word	0x0002fe21
   14f24:	0002c074 	.word	0x0002c074
   14f28:	20009d18 	.word	0x20009d18
   14f2c:	20008be8 	.word	0x20008be8
   14f30:	0002fe30 	.word	0x0002fe30
   14f34:	0002fe4e 	.word	0x0002fe4e

00014f38 <bt_conn_prepare_events>:
{
   14f38:	b570      	push	{r4, r5, r6, lr}
   14f3a:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   14f3c:	4817      	ldr	r0, [pc, #92]	; (14f9c <bt_conn_prepare_events+0x64>)
   14f3e:	f015 fed3 	bl	2ace8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14f42:	2200      	movs	r2, #0
   14f44:	2101      	movs	r1, #1
   14f46:	4620      	mov	r0, r4
   14f48:	4b14      	ldr	r3, [pc, #80]	; (14f9c <bt_conn_prepare_events+0x64>)
   14f4a:	f00e fcfd 	bl	23948 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14f4e:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f52:	4b13      	ldr	r3, [pc, #76]	; (14fa0 <bt_conn_prepare_events+0x68>)
   14f54:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   14f58:	b90a      	cbnz	r2, 14f5e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14f5a:	2001      	movs	r0, #1
}
   14f5c:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14f5e:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   14f62:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   14f66:	b953      	cbnz	r3, 14f7e <bt_conn_prepare_events+0x46>
   14f68:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14f6c:	1d28      	adds	r0, r5, #4
   14f6e:	f012 fddf 	bl	27b30 <atomic_and>
   14f72:	0643      	lsls	r3, r0, #25
   14f74:	d503      	bpl.n	14f7e <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   14f76:	4628      	mov	r0, r5
   14f78:	f7ff fe98 	bl	14cac <conn_cleanup>
		return -ENOTCONN;
   14f7c:	e7ed      	b.n	14f5a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   14f7e:	7b6b      	ldrb	r3, [r5, #13]
   14f80:	2b07      	cmp	r3, #7
   14f82:	d1ea      	bne.n	14f5a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   14f84:	4630      	mov	r0, r6
   14f86:	4b07      	ldr	r3, [pc, #28]	; (14fa4 <bt_conn_prepare_events+0x6c>)
   14f88:	2200      	movs	r2, #0
   14f8a:	2104      	movs	r1, #4
   14f8c:	f00e fcdc 	bl	23948 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14f90:	2301      	movs	r3, #1
			ev_count++;
   14f92:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14f94:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   14f98:	e7e0      	b.n	14f5c <bt_conn_prepare_events+0x24>
   14f9a:	bf00      	nop
   14f9c:	200084b8 	.word	0x200084b8
   14fa0:	2000995c 	.word	0x2000995c
   14fa4:	200098d0 	.word	0x200098d0

00014fa8 <bt_conn_ref>:
{
   14fa8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   14faa:	b180      	cbz	r0, 14fce <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   14fac:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   14fb0:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   14fb4:	b1bb      	cbz	r3, 14fe6 <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   14fb6:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14fb8:	e8d2 4fef 	ldaex	r4, [r2]
   14fbc:	429c      	cmp	r4, r3
   14fbe:	d104      	bne.n	14fca <bt_conn_ref+0x22>
   14fc0:	e8c2 1fec 	stlex	ip, r1, [r2]
   14fc4:	f1bc 0f00 	cmp.w	ip, #0
   14fc8:	d1f6      	bne.n	14fb8 <bt_conn_ref+0x10>
   14fca:	d1f1      	bne.n	14fb0 <bt_conn_ref+0x8>
}
   14fcc:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   14fce:	4907      	ldr	r1, [pc, #28]	; (14fec <bt_conn_ref+0x44>)
   14fd0:	4807      	ldr	r0, [pc, #28]	; (14ff0 <bt_conn_ref+0x48>)
   14fd2:	f240 437c 	movw	r3, #1148	; 0x47c
   14fd6:	4a07      	ldr	r2, [pc, #28]	; (14ff4 <bt_conn_ref+0x4c>)
   14fd8:	f011 f941 	bl	2625e <assert_print>
   14fdc:	f240 417c 	movw	r1, #1148	; 0x47c
   14fe0:	4804      	ldr	r0, [pc, #16]	; (14ff4 <bt_conn_ref+0x4c>)
   14fe2:	f011 f935 	bl	26250 <assert_post_action>
			return NULL;
   14fe6:	4618      	mov	r0, r3
   14fe8:	e7f0      	b.n	14fcc <bt_conn_ref+0x24>
   14fea:	bf00      	nop
   14fec:	0002f572 	.word	0x0002f572
   14ff0:	0002d095 	.word	0x0002d095
   14ff4:	0002fcd1 	.word	0x0002fcd1

00014ff8 <bt_conn_unref>:
{
   14ff8:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   14ffa:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14ffe:	e8d3 2fef 	ldaex	r2, [r3]
   15002:	1e51      	subs	r1, r2, #1
   15004:	e8c3 1fe4 	stlex	r4, r1, [r3]
   15008:	2c00      	cmp	r4, #0
   1500a:	d1f8      	bne.n	14ffe <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   1500c:	2a00      	cmp	r2, #0
   1500e:	dc0e      	bgt.n	1502e <bt_conn_unref+0x36>
   15010:	490d      	ldr	r1, [pc, #52]	; (15048 <bt_conn_unref+0x50>)
   15012:	f44f 6393 	mov.w	r3, #1176	; 0x498
   15016:	4a0d      	ldr	r2, [pc, #52]	; (1504c <bt_conn_unref+0x54>)
   15018:	480d      	ldr	r0, [pc, #52]	; (15050 <bt_conn_unref+0x58>)
   1501a:	f011 f920 	bl	2625e <assert_print>
   1501e:	480d      	ldr	r0, [pc, #52]	; (15054 <bt_conn_unref+0x5c>)
   15020:	f011 f91d 	bl	2625e <assert_print>
   15024:	f44f 6193 	mov.w	r1, #1176	; 0x498
   15028:	4808      	ldr	r0, [pc, #32]	; (1504c <bt_conn_unref+0x54>)
   1502a:	f011 f911 	bl	26250 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1502e:	f240 1201 	movw	r2, #257	; 0x101
   15032:	8841      	ldrh	r1, [r0, #2]
   15034:	4291      	cmp	r1, r2
   15036:	d106      	bne.n	15046 <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15038:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   1503c:	b91b      	cbnz	r3, 15046 <bt_conn_unref+0x4e>
}
   1503e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   15042:	f7ff baa9 	b.w	14598 <bt_le_adv_resume>
}
   15046:	bd10      	pop	{r4, pc}
   15048:	0002fe74 	.word	0x0002fe74
   1504c:	0002fcd1 	.word	0x0002fcd1
   15050:	0002d095 	.word	0x0002d095
   15054:	0002fe7c 	.word	0x0002fe7c

00015058 <bt_conn_lookup_handle>:
{
   15058:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1505a:	2101      	movs	r1, #1
   1505c:	4801      	ldr	r0, [pc, #4]	; (15064 <bt_conn_lookup_handle+0xc>)
   1505e:	f012 bd8d 	b.w	27b7c <conn_lookup_handle>
   15062:	bf00      	nop
   15064:	20009898 	.word	0x20009898

00015068 <bt_conn_set_state>:
{
   15068:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   1506a:	7b46      	ldrb	r6, [r0, #13]
{
   1506c:	4604      	mov	r4, r0
	if (conn->state == state) {
   1506e:	428e      	cmp	r6, r1
{
   15070:	460d      	mov	r5, r1
	if (conn->state == state) {
   15072:	d111      	bne.n	15098 <bt_conn_set_state+0x30>
	switch (state) {
   15074:	2e08      	cmp	r6, #8
   15076:	bf96      	itet	ls
   15078:	4b65      	ldrls	r3, [pc, #404]	; (15210 <bt_conn_set_state+0x1a8>)
	if (conn->state == state) {
   1507a:	4b66      	ldrhi	r3, [pc, #408]	; (15214 <bt_conn_set_state+0x1ac>)
   1507c:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   15080:	9303      	str	r3, [sp, #12]
   15082:	4b65      	ldr	r3, [pc, #404]	; (15218 <bt_conn_set_state+0x1b0>)
		LOG_WRN("no valid (%u) state was set", state);
   15084:	9302      	str	r3, [sp, #8]
   15086:	2300      	movs	r3, #0
   15088:	2202      	movs	r2, #2
   1508a:	4618      	mov	r0, r3
   1508c:	e9cd 3300 	strd	r3, r3, [sp]
   15090:	4962      	ldr	r1, [pc, #392]	; (1521c <bt_conn_set_state+0x1b4>)
   15092:	f012 fd58 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
   15096:	e098      	b.n	151ca <bt_conn_set_state+0x162>
	conn->state = state;
   15098:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1509a:	b926      	cbnz	r6, 150a6 <bt_conn_set_state+0x3e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1509c:	7883      	ldrb	r3, [r0, #2]
   1509e:	2b08      	cmp	r3, #8
   150a0:	d001      	beq.n	150a6 <bt_conn_set_state+0x3e>
			bt_conn_ref(conn);
   150a2:	f7ff ff81 	bl	14fa8 <bt_conn_ref>
	switch (conn->state) {
   150a6:	7b63      	ldrb	r3, [r4, #13]
   150a8:	2b08      	cmp	r3, #8
   150aa:	f200 80ad 	bhi.w	15208 <bt_conn_set_state+0x1a0>
   150ae:	e8df f003 	tbb	[pc, r3]
   150b2:	053a      	.short	0x053a
   150b4:	8c8c8c8c 	.word	0x8c8c8c8c
   150b8:	1c8c      	.short	0x1c8c
   150ba:	8c          	.byte	0x8c
   150bb:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   150bc:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   150be:	4d58      	ldr	r5, [pc, #352]	; (15220 <bt_conn_set_state+0x1b8>)
	__asm__ volatile(
   150c0:	f04f 0220 	mov.w	r2, #32
   150c4:	f3ef 8311 	mrs	r3, BASEPRI
   150c8:	f382 8812 	msr	BASEPRI_MAX, r2
   150cc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   150d0:	69e2      	ldr	r2, [r4, #28]
   150d2:	2a00      	cmp	r2, #0
   150d4:	d073      	beq.n	151be <bt_conn_set_state+0x156>
			conn->pending_no_cb--;
   150d6:	3a01      	subs	r2, #1
   150d8:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   150da:	f383 8811 	msr	BASEPRI, r3
   150de:	f3bf 8f6f 	isb	sy
   150e2:	4628      	mov	r0, r5
   150e4:	f00b fe00 	bl	20ce8 <z_impl_k_sem_give>
}
   150e8:	e7ea      	b.n	150c0 <bt_conn_set_state+0x58>
		if (conn->type == BT_CONN_TYPE_SCO) {
   150ea:	78a3      	ldrb	r3, [r4, #2]
   150ec:	2b04      	cmp	r3, #4
   150ee:	d06c      	beq.n	151ca <bt_conn_set_state+0x162>
	z_impl_k_queue_init(queue);
   150f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   150f4:	f015 fc43 	bl	2a97e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   150f8:	2100      	movs	r1, #0
   150fa:	484a      	ldr	r0, [pc, #296]	; (15224 <bt_conn_set_state+0x1bc>)
   150fc:	f00e fd42 	bl	23b84 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15100:	2300      	movs	r3, #0
	list->tail = NULL;
   15102:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15106:	78e3      	ldrb	r3, [r4, #3]
   15108:	2b01      	cmp	r3, #1
   1510a:	d15e      	bne.n	151ca <bt_conn_set_state+0x162>
			conn->le.conn_param_retry_countdown =
   1510c:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   1510e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   15112:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   15116:	2300      	movs	r3, #0
   15118:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   1511c:	b004      	add	sp, #16
   1511e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   15122:	f00c bb07 	b.w	21734 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15126:	78a3      	ldrb	r3, [r4, #2]
   15128:	2b04      	cmp	r3, #4
   1512a:	d105      	bne.n	15138 <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   1512c:	4620      	mov	r0, r4
}
   1512e:	b004      	add	sp, #16
   15130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   15134:	f7ff bf60 	b.w	14ff8 <bt_conn_unref>
		switch (old_state) {
   15138:	2e08      	cmp	r6, #8
   1513a:	d846      	bhi.n	151ca <bt_conn_set_state+0x162>
   1513c:	a301      	add	r3, pc, #4	; (adr r3, 15144 <bt_conn_set_state+0xdc>)
   1513e:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   15142:	bf00      	nop
   15144:	000151b9 	.word	0x000151b9
   15148:	00015169 	.word	0x00015169
   1514c:	000151ab 	.word	0x000151ab
   15150:	0001512d 	.word	0x0001512d
   15154:	0001512d 	.word	0x0001512d
   15158:	000151ab 	.word	0x000151ab
   1515c:	000151ab 	.word	0x000151ab
   15160:	000151cb 	.word	0x000151cb
   15164:	000151b9 	.word	0x000151b9
			tx_notify(conn);
   15168:	4620      	mov	r0, r4
   1516a:	f7ff fc6b 	bl	14a44 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1516e:	78a3      	ldrb	r3, [r4, #2]
   15170:	2b01      	cmp	r3, #1
   15172:	d10a      	bne.n	1518a <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   15174:	f104 0560 	add.w	r5, r4, #96	; 0x60
   15178:	4628      	mov	r0, r5
   1517a:	f015 fc96 	bl	2aaaa <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1517e:	f010 0f0c 	tst.w	r0, #12
   15182:	d002      	beq.n	1518a <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   15184:	4628      	mov	r0, r5
   15186:	f00c fb55 	bl	21834 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1518a:	3404      	adds	r4, #4
   1518c:	e8d4 3fef 	ldaex	r3, [r4]
   15190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15194:	e8c4 3fe2 	stlex	r2, r3, [r4]
   15198:	2a00      	cmp	r2, #0
   1519a:	d1f7      	bne.n	1518c <bt_conn_set_state+0x124>
   1519c:	2100      	movs	r1, #0
   1519e:	4821      	ldr	r0, [pc, #132]	; (15224 <bt_conn_set_state+0x1bc>)
}
   151a0:	b004      	add	sp, #16
   151a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   151a6:	f00e bced 	b.w	23b84 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   151aa:	7b23      	ldrb	r3, [r4, #12]
   151ac:	2b00      	cmp	r3, #0
   151ae:	d0bd      	beq.n	1512c <bt_conn_set_state+0xc4>
				notify_connected(conn);
   151b0:	4620      	mov	r0, r4
   151b2:	f7ff fc11 	bl	149d8 <notify_connected>
   151b6:	e7b9      	b.n	1512c <bt_conn_set_state+0xc4>
			LOG_WRN("Invalid (%u) old state", state);
   151b8:	4b1b      	ldr	r3, [pc, #108]	; (15228 <bt_conn_set_state+0x1c0>)
   151ba:	9503      	str	r5, [sp, #12]
   151bc:	e762      	b.n	15084 <bt_conn_set_state+0x1c>
	return list->head;
   151be:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   151c0:	b929      	cbnz	r1, 151ce <bt_conn_set_state+0x166>
   151c2:	f383 8811 	msr	BASEPRI, r3
   151c6:	f3bf 8f6f 	isb	sy
}
   151ca:	b004      	add	sp, #16
   151cc:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   151ce:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   151d0:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   151d2:	4281      	cmp	r1, r0
	list->tail = node;
   151d4:	bf08      	it	eq
   151d6:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   151d8:	6162      	str	r2, [r4, #20]
   151da:	f383 8811 	msr	BASEPRI, r3
   151de:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   151e2:	f04f 0220 	mov.w	r2, #32
   151e6:	f3ef 8311 	mrs	r3, BASEPRI
   151ea:	f382 8812 	msr	BASEPRI_MAX, r2
   151ee:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   151f2:	68ca      	ldr	r2, [r1, #12]
   151f4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   151f6:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   151f8:	f383 8811 	msr	BASEPRI, r3
   151fc:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   15200:	4620      	mov	r0, r4
   15202:	f7ff fc4f 	bl	14aa4 <conn_tx_destroy>
   15206:	e76c      	b.n	150e2 <bt_conn_set_state+0x7a>
		LOG_WRN("no valid (%u) state was set", state);
   15208:	4b08      	ldr	r3, [pc, #32]	; (1522c <bt_conn_set_state+0x1c4>)
   1520a:	9503      	str	r5, [sp, #12]
   1520c:	e73a      	b.n	15084 <bt_conn_set_state+0x1c>
   1520e:	bf00      	nop
   15210:	0002c9e4 	.word	0x0002c9e4
   15214:	0002fe9a 	.word	0x0002fe9a
   15218:	0002fea4 	.word	0x0002fea4
   1521c:	0002c074 	.word	0x0002c074
   15220:	20008100 	.word	0x20008100
   15224:	200084b8 	.word	0x200084b8
   15228:	0002feb5 	.word	0x0002feb5
   1522c:	0002fecc 	.word	0x0002fecc

00015230 <bt_conn_index>:
		index = conn - acl_conns;
   15230:	4a0c      	ldr	r2, [pc, #48]	; (15264 <bt_conn_index+0x34>)
{
   15232:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   15234:	490c      	ldr	r1, [pc, #48]	; (15268 <bt_conn_index+0x38>)
   15236:	1a83      	subs	r3, r0, r2
   15238:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1523a:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   1523c:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   15240:	d00e      	beq.n	15260 <bt_conn_index+0x30>
   15242:	490a      	ldr	r1, [pc, #40]	; (1526c <bt_conn_index+0x3c>)
   15244:	f240 43b6 	movw	r3, #1206	; 0x4b6
   15248:	4a09      	ldr	r2, [pc, #36]	; (15270 <bt_conn_index+0x40>)
   1524a:	480a      	ldr	r0, [pc, #40]	; (15274 <bt_conn_index+0x44>)
   1524c:	f011 f807 	bl	2625e <assert_print>
   15250:	4809      	ldr	r0, [pc, #36]	; (15278 <bt_conn_index+0x48>)
   15252:	f011 f804 	bl	2625e <assert_print>
   15256:	f240 41b6 	movw	r1, #1206	; 0x4b6
   1525a:	4805      	ldr	r0, [pc, #20]	; (15270 <bt_conn_index+0x40>)
   1525c:	f010 fff8 	bl	26250 <assert_post_action>
}
   15260:	b2d8      	uxtb	r0, r3
   15262:	bd08      	pop	{r3, pc}
   15264:	20009898 	.word	0x20009898
   15268:	c28f5c29 	.word	0xc28f5c29
   1526c:	0002fee8 	.word	0x0002fee8
   15270:	0002fcd1 	.word	0x0002fcd1
   15274:	0002d095 	.word	0x0002d095
   15278:	0002ffb1 	.word	0x0002ffb1

0001527c <bt_conn_create_pdu_timeout>:
{
   1527c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1527e:	b085      	sub	sp, #20
   15280:	4604      	mov	r4, r0
   15282:	460d      	mov	r5, r1
   15284:	4617      	mov	r7, r2
   15286:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   15288:	f015 fb4a 	bl	2a920 <k_is_in_isr>
   1528c:	b158      	cbz	r0, 152a6 <bt_conn_create_pdu_timeout+0x2a>
   1528e:	4914      	ldr	r1, [pc, #80]	; (152e0 <bt_conn_create_pdu_timeout+0x64>)
   15290:	4814      	ldr	r0, [pc, #80]	; (152e4 <bt_conn_create_pdu_timeout+0x68>)
   15292:	f240 43d2 	movw	r3, #1234	; 0x4d2
   15296:	4a14      	ldr	r2, [pc, #80]	; (152e8 <bt_conn_create_pdu_timeout+0x6c>)
   15298:	f010 ffe1 	bl	2625e <assert_print>
   1529c:	f240 41d2 	movw	r1, #1234	; 0x4d2
   152a0:	4811      	ldr	r0, [pc, #68]	; (152e8 <bt_conn_create_pdu_timeout+0x6c>)
   152a2:	f010 ffd5 	bl	26250 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   152a6:	4911      	ldr	r1, [pc, #68]	; (152ec <bt_conn_create_pdu_timeout+0x70>)
   152a8:	463a      	mov	r2, r7
   152aa:	2c00      	cmp	r4, #0
   152ac:	bf14      	ite	ne
   152ae:	4620      	movne	r0, r4
   152b0:	4608      	moveq	r0, r1
   152b2:	4633      	mov	r3, r6
   152b4:	f013 ff9f 	bl	291f6 <net_buf_alloc_fixed>
	if (!buf) {
   152b8:	4604      	mov	r4, r0
   152ba:	b958      	cbnz	r0, 152d4 <bt_conn_create_pdu_timeout+0x58>
		LOG_WRN("Unable to allocate buffer within timeout");
   152bc:	4b0c      	ldr	r3, [pc, #48]	; (152f0 <bt_conn_create_pdu_timeout+0x74>)
   152be:	2202      	movs	r2, #2
   152c0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   152c4:	490b      	ldr	r1, [pc, #44]	; (152f4 <bt_conn_create_pdu_timeout+0x78>)
   152c6:	4603      	mov	r3, r0
   152c8:	9000      	str	r0, [sp, #0]
   152ca:	f012 fc3c 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
}
   152ce:	4620      	mov	r0, r4
   152d0:	b005      	add	sp, #20
   152d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   152d4:	1d69      	adds	r1, r5, #5
   152d6:	300c      	adds	r0, #12
   152d8:	f004 fe96 	bl	1a008 <net_buf_simple_reserve>
	return buf;
   152dc:	e7f7      	b.n	152ce <bt_conn_create_pdu_timeout+0x52>
   152de:	bf00      	nop
   152e0:	0002ffcb 	.word	0x0002ffcb
   152e4:	0002d095 	.word	0x0002d095
   152e8:	0002fcd1 	.word	0x0002fcd1
   152ec:	20008c38 	.word	0x20008c38
   152f0:	0002ffda 	.word	0x0002ffda
   152f4:	0002c074 	.word	0x0002c074

000152f8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   152f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152fa:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   152fc:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   152fe:	e8d0 3faf 	lda	r3, [r0]
   15302:	059b      	lsls	r3, r3, #22
   15304:	d511      	bpl.n	1532a <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   15306:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1530a:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   1530e:	429a      	cmp	r2, r3
   15310:	d80b      	bhi.n	1532a <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   15312:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   15316:	429a      	cmp	r2, r3
   15318:	d307      	bcc.n	1532a <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1531a:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   1531e:	429a      	cmp	r2, r3
   15320:	d103      	bne.n	1532a <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15322:	f46f 7100 	mvn.w	r1, #512	; 0x200
   15326:	f012 fc03 	bl	27b30 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1532a:	4b18      	ldr	r3, [pc, #96]	; (1538c <notify_le_param_updated+0x94>)
   1532c:	681d      	ldr	r5, [r3, #0]
   1532e:	b995      	cbnz	r5, 15356 <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15330:	4d17      	ldr	r5, [pc, #92]	; (15390 <notify_le_param_updated+0x98>)
   15332:	4f18      	ldr	r7, [pc, #96]	; (15394 <notify_le_param_updated+0x9c>)
   15334:	42bd      	cmp	r5, r7
   15336:	d926      	bls.n	15386 <notify_le_param_updated+0x8e>
   15338:	4917      	ldr	r1, [pc, #92]	; (15398 <notify_le_param_updated+0xa0>)
   1533a:	f240 53a5 	movw	r3, #1445	; 0x5a5
   1533e:	4a17      	ldr	r2, [pc, #92]	; (1539c <notify_le_param_updated+0xa4>)
   15340:	4817      	ldr	r0, [pc, #92]	; (153a0 <notify_le_param_updated+0xa8>)
   15342:	f010 ff8c 	bl	2625e <assert_print>
   15346:	4817      	ldr	r0, [pc, #92]	; (153a4 <notify_le_param_updated+0xac>)
   15348:	f010 ff89 	bl	2625e <assert_print>
   1534c:	f240 51a5 	movw	r1, #1445	; 0x5a5
   15350:	4812      	ldr	r0, [pc, #72]	; (1539c <notify_le_param_updated+0xa4>)
   15352:	f010 ff7d 	bl	26250 <assert_post_action>
		if (cb->le_param_updated) {
   15356:	68ee      	ldr	r6, [r5, #12]
   15358:	b13e      	cbz	r6, 1536a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   1535a:	4620      	mov	r0, r4
   1535c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   15360:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15364:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   15368:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1536a:	69ad      	ldr	r5, [r5, #24]
   1536c:	e7df      	b.n	1532e <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   1536e:	68ee      	ldr	r6, [r5, #12]
   15370:	b13e      	cbz	r6, 15382 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   15372:	4620      	mov	r0, r4
   15374:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   15378:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1537c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   15380:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15382:	351c      	adds	r5, #28
   15384:	e7d6      	b.n	15334 <notify_le_param_updated+0x3c>
   15386:	d3f2      	bcc.n	1536e <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   15388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1538a:	bf00      	nop
   1538c:	20022718 	.word	0x20022718
   15390:	0002c000 	.word	0x0002c000
   15394:	0002c01c 	.word	0x0002c01c
   15398:	0002fd01 	.word	0x0002fd01
   1539c:	0002fcd1 	.word	0x0002fcd1
   153a0:	0002d095 	.word	0x0002d095
   153a4:	0002e1ea 	.word	0x0002e1ea

000153a8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   153a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   153ac:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   153ae:	4608      	mov	r0, r1
{
   153b0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   153b2:	f012 f95d 	bl	27670 <bt_le_conn_params_valid>
   153b6:	4605      	mov	r5, r0
   153b8:	b918      	cbnz	r0, 153c2 <le_param_req+0x1a>
		return false;
   153ba:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   153bc:	4628      	mov	r0, r5
   153be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   153c2:	4b1b      	ldr	r3, [pc, #108]	; (15430 <le_param_req+0x88>)
   153c4:	681e      	ldr	r6, [r3, #0]
   153c6:	b99e      	cbnz	r6, 153f0 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   153c8:	4e1a      	ldr	r6, [pc, #104]	; (15434 <le_param_req+0x8c>)
   153ca:	f8df 806c 	ldr.w	r8, [pc, #108]	; 15438 <le_param_req+0x90>
   153ce:	4546      	cmp	r6, r8
   153d0:	d927      	bls.n	15422 <le_param_req+0x7a>
   153d2:	491a      	ldr	r1, [pc, #104]	; (1543c <le_param_req+0x94>)
   153d4:	f240 53ed 	movw	r3, #1517	; 0x5ed
   153d8:	4a19      	ldr	r2, [pc, #100]	; (15440 <le_param_req+0x98>)
   153da:	481a      	ldr	r0, [pc, #104]	; (15444 <le_param_req+0x9c>)
   153dc:	f010 ff3f 	bl	2625e <assert_print>
   153e0:	4819      	ldr	r0, [pc, #100]	; (15448 <le_param_req+0xa0>)
   153e2:	f010 ff3c 	bl	2625e <assert_print>
   153e6:	f240 51ed 	movw	r1, #1517	; 0x5ed
   153ea:	4815      	ldr	r0, [pc, #84]	; (15440 <le_param_req+0x98>)
   153ec:	f010 ff30 	bl	26250 <assert_post_action>
		if (!cb->le_param_req) {
   153f0:	68b3      	ldr	r3, [r6, #8]
   153f2:	b90b      	cbnz	r3, 153f8 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   153f4:	69b6      	ldr	r6, [r6, #24]
   153f6:	e7e6      	b.n	153c6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   153f8:	4621      	mov	r1, r4
   153fa:	4638      	mov	r0, r7
   153fc:	4798      	blx	r3
   153fe:	2800      	cmp	r0, #0
   15400:	d0db      	beq.n	153ba <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15402:	4620      	mov	r0, r4
   15404:	f012 f934 	bl	27670 <bt_le_conn_params_valid>
   15408:	2800      	cmp	r0, #0
   1540a:	d1f3      	bne.n	153f4 <le_param_req+0x4c>
   1540c:	e7d5      	b.n	153ba <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1540e:	4621      	mov	r1, r4
   15410:	4638      	mov	r0, r7
   15412:	4798      	blx	r3
   15414:	2800      	cmp	r0, #0
   15416:	d0d0      	beq.n	153ba <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15418:	4620      	mov	r0, r4
   1541a:	f012 f929 	bl	27670 <bt_le_conn_params_valid>
   1541e:	b920      	cbnz	r0, 1542a <le_param_req+0x82>
   15420:	e7cb      	b.n	153ba <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15422:	d2cb      	bcs.n	153bc <le_param_req+0x14>
		if (!cb->le_param_req) {
   15424:	68b3      	ldr	r3, [r6, #8]
   15426:	2b00      	cmp	r3, #0
   15428:	d1f1      	bne.n	1540e <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1542a:	361c      	adds	r6, #28
   1542c:	e7cf      	b.n	153ce <le_param_req+0x26>
   1542e:	bf00      	nop
   15430:	20022718 	.word	0x20022718
   15434:	0002c000 	.word	0x0002c000
   15438:	0002c01c 	.word	0x0002c01c
   1543c:	0002fd01 	.word	0x0002fd01
   15440:	0002fcd1 	.word	0x0002fcd1
   15444:	0002d095 	.word	0x0002d095
   15448:	0002e1ea 	.word	0x0002e1ea

0001544c <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1544c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15450:	78c3      	ldrb	r3, [r0, #3]
{
   15452:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15454:	b9db      	cbnz	r3, 1548e <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   15456:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1545a:	4b18      	ldr	r3, [pc, #96]	; (154bc <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1545c:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   15460:	681d      	ldr	r5, [r3, #0]
   15462:	b9bd      	cbnz	r5, 15494 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15464:	4d16      	ldr	r5, [pc, #88]	; (154c0 <bt_conn_identity_resolved+0x74>)
   15466:	4f17      	ldr	r7, [pc, #92]	; (154c4 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15468:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1546c:	42bd      	cmp	r5, r7
   1546e:	d921      	bls.n	154b4 <bt_conn_identity_resolved+0x68>
   15470:	4915      	ldr	r1, [pc, #84]	; (154c8 <bt_conn_identity_resolved+0x7c>)
   15472:	f240 73bc 	movw	r3, #1980	; 0x7bc
   15476:	4a15      	ldr	r2, [pc, #84]	; (154cc <bt_conn_identity_resolved+0x80>)
   15478:	4815      	ldr	r0, [pc, #84]	; (154d0 <bt_conn_identity_resolved+0x84>)
   1547a:	f010 fef0 	bl	2625e <assert_print>
   1547e:	4815      	ldr	r0, [pc, #84]	; (154d4 <bt_conn_identity_resolved+0x88>)
   15480:	f010 feed 	bl	2625e <assert_print>
   15484:	f240 71bc 	movw	r1, #1980	; 0x7bc
   15488:	4810      	ldr	r0, [pc, #64]	; (154cc <bt_conn_identity_resolved+0x80>)
   1548a:	f010 fee1 	bl	26250 <assert_post_action>
		rpa = &conn->le.init_addr;
   1548e:	f100 0697 	add.w	r6, r0, #151	; 0x97
   15492:	e7e2      	b.n	1545a <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   15494:	692b      	ldr	r3, [r5, #16]
   15496:	b11b      	cbz	r3, 154a0 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15498:	463a      	mov	r2, r7
   1549a:	4631      	mov	r1, r6
   1549c:	4620      	mov	r0, r4
   1549e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   154a0:	69ad      	ldr	r5, [r5, #24]
   154a2:	e7de      	b.n	15462 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   154a4:	692b      	ldr	r3, [r5, #16]
   154a6:	b11b      	cbz	r3, 154b0 <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   154a8:	4642      	mov	r2, r8
   154aa:	4631      	mov	r1, r6
   154ac:	4620      	mov	r0, r4
   154ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   154b0:	351c      	adds	r5, #28
   154b2:	e7db      	b.n	1546c <bt_conn_identity_resolved+0x20>
   154b4:	d3f6      	bcc.n	154a4 <bt_conn_identity_resolved+0x58>
		}
	}
}
   154b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   154ba:	bf00      	nop
   154bc:	20022718 	.word	0x20022718
   154c0:	0002c000 	.word	0x0002c000
   154c4:	0002c01c 	.word	0x0002c01c
   154c8:	0002fd01 	.word	0x0002fd01
   154cc:	0002fcd1 	.word	0x0002fcd1
   154d0:	0002d095 	.word	0x0002d095
   154d4:	0002e1ea 	.word	0x0002e1ea

000154d8 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   154d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   154da:	7a43      	ldrb	r3, [r0, #9]
{
   154dc:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   154de:	7283      	strb	r3, [r0, #10]
{
   154e0:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   154e2:	f012 fc4c 	bl	27d7e <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   154e6:	4b14      	ldr	r3, [pc, #80]	; (15538 <bt_conn_security_changed+0x60>)
   154e8:	681d      	ldr	r5, [r3, #0]
   154ea:	b995      	cbnz	r5, 15512 <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   154ec:	4d13      	ldr	r5, [pc, #76]	; (1553c <bt_conn_security_changed+0x64>)
   154ee:	4f14      	ldr	r7, [pc, #80]	; (15540 <bt_conn_security_changed+0x68>)
   154f0:	42bd      	cmp	r5, r7
   154f2:	d91e      	bls.n	15532 <bt_conn_security_changed+0x5a>
   154f4:	4913      	ldr	r1, [pc, #76]	; (15544 <bt_conn_security_changed+0x6c>)
   154f6:	f640 0328 	movw	r3, #2088	; 0x828
   154fa:	4a13      	ldr	r2, [pc, #76]	; (15548 <bt_conn_security_changed+0x70>)
   154fc:	4813      	ldr	r0, [pc, #76]	; (1554c <bt_conn_security_changed+0x74>)
   154fe:	f010 feae 	bl	2625e <assert_print>
   15502:	4813      	ldr	r0, [pc, #76]	; (15550 <bt_conn_security_changed+0x78>)
   15504:	f010 feab 	bl	2625e <assert_print>
   15508:	f640 0128 	movw	r1, #2088	; 0x828
   1550c:	480e      	ldr	r0, [pc, #56]	; (15548 <bt_conn_security_changed+0x70>)
   1550e:	f010 fe9f 	bl	26250 <assert_post_action>
		if (cb->security_changed) {
   15512:	696b      	ldr	r3, [r5, #20]
   15514:	b11b      	cbz	r3, 1551e <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   15516:	4632      	mov	r2, r6
   15518:	4620      	mov	r0, r4
   1551a:	7a61      	ldrb	r1, [r4, #9]
   1551c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1551e:	69ad      	ldr	r5, [r5, #24]
   15520:	e7e3      	b.n	154ea <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   15522:	696b      	ldr	r3, [r5, #20]
   15524:	b11b      	cbz	r3, 1552e <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   15526:	4632      	mov	r2, r6
   15528:	4620      	mov	r0, r4
   1552a:	7a61      	ldrb	r1, [r4, #9]
   1552c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1552e:	351c      	adds	r5, #28
   15530:	e7de      	b.n	154f0 <bt_conn_security_changed+0x18>
   15532:	d3f6      	bcc.n	15522 <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   15534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15536:	bf00      	nop
   15538:	20022718 	.word	0x20022718
   1553c:	0002c000 	.word	0x0002c000
   15540:	0002c01c 	.word	0x0002c01c
   15544:	0002fd01 	.word	0x0002fd01
   15548:	0002fcd1 	.word	0x0002fcd1
   1554c:	0002d095 	.word	0x0002d095
   15550:	0002e1ea 	.word	0x0002e1ea

00015554 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15554:	b538      	push	{r3, r4, r5, lr}
   15556:	4605      	mov	r5, r0
   15558:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1555a:	480b      	ldr	r0, [pc, #44]	; (15588 <bt_conn_add_le+0x34>)
   1555c:	2101      	movs	r1, #1
   1555e:	f7ff fb77 	bl	14c50 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   15562:	b180      	cbz	r0, 15586 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   15564:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15566:	6823      	ldr	r3, [r4, #0]
   15568:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   1556c:	88a3      	ldrh	r3, [r4, #4]
   1556e:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   15572:	79a3      	ldrb	r3, [r4, #6]
   15574:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   15578:	2301      	movs	r3, #1
   1557a:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1557c:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1557e:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   15580:	4b02      	ldr	r3, [pc, #8]	; (1558c <bt_conn_add_le+0x38>)
   15582:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15586:	bd38      	pop	{r3, r4, r5, pc}
   15588:	20009898 	.word	0x20009898
   1558c:	00280018 	.word	0x00280018

00015590 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   15590:	b570      	push	{r4, r5, r6, lr}
   15592:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15594:	480a      	ldr	r0, [pc, #40]	; (155c0 <bt_conn_lookup_addr_le+0x30>)
{
   15596:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15598:	f7ff fd06 	bl	14fa8 <bt_conn_ref>
   1559c:	4604      	mov	r4, r0

		if (!conn) {
   1559e:	b120      	cbz	r0, 155aa <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   155a0:	7883      	ldrb	r3, [r0, #2]
   155a2:	2b01      	cmp	r3, #1
   155a4:	d004      	beq.n	155b0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   155a6:	f7ff fd27 	bl	14ff8 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   155aa:	2400      	movs	r4, #0
}
   155ac:	4620      	mov	r0, r4
   155ae:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   155b0:	4632      	mov	r2, r6
   155b2:	4629      	mov	r1, r5
   155b4:	f012 fb5b 	bl	27c6e <bt_conn_is_peer_addr_le>
   155b8:	2800      	cmp	r0, #0
   155ba:	d1f7      	bne.n	155ac <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   155bc:	4620      	mov	r0, r4
   155be:	e7f2      	b.n	155a6 <bt_conn_lookup_addr_le+0x16>
   155c0:	20009898 	.word	0x20009898

000155c4 <bt_conn_exists_le>:
{
   155c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   155c6:	f7ff ffe3 	bl	15590 <bt_conn_lookup_addr_le>
	if (conn) {
   155ca:	4604      	mov	r4, r0
   155cc:	b1a8      	cbz	r0, 155fa <bt_conn_exists_le+0x36>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   155ce:	7b43      	ldrb	r3, [r0, #13]
   155d0:	490b      	ldr	r1, [pc, #44]	; (15600 <bt_conn_exists_le+0x3c>)
   155d2:	2b08      	cmp	r3, #8
   155d4:	bf96      	itet	ls
   155d6:	4a0b      	ldrls	r2, [pc, #44]	; (15604 <bt_conn_exists_le+0x40>)
   155d8:	4b0b      	ldrhi	r3, [pc, #44]	; (15608 <bt_conn_exists_le+0x44>)
   155da:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   155de:	2202      	movs	r2, #2
   155e0:	9303      	str	r3, [sp, #12]
   155e2:	4b0a      	ldr	r3, [pc, #40]	; (1560c <bt_conn_exists_le+0x48>)
   155e4:	9302      	str	r3, [sp, #8]
   155e6:	2300      	movs	r3, #0
   155e8:	4618      	mov	r0, r3
   155ea:	e9cd 3300 	strd	r3, r3, [sp]
   155ee:	f012 faaa 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   155f2:	4620      	mov	r0, r4
   155f4:	f7ff fd00 	bl	14ff8 <bt_conn_unref>
		return true;
   155f8:	2001      	movs	r0, #1
}
   155fa:	b004      	add	sp, #16
   155fc:	bd10      	pop	{r4, pc}
   155fe:	bf00      	nop
   15600:	0002c074 	.word	0x0002c074
   15604:	0002c9e4 	.word	0x0002c9e4
   15608:	0002fe9a 	.word	0x0002fe9a
   1560c:	00030003 	.word	0x00030003

00015610 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15612:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15614:	480e      	ldr	r0, [pc, #56]	; (15650 <bt_conn_lookup_state_le+0x40>)
{
   15616:	460e      	mov	r6, r1
   15618:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1561a:	f7ff fcc5 	bl	14fa8 <bt_conn_ref>

		if (!conn) {
   1561e:	4604      	mov	r4, r0
   15620:	b120      	cbz	r0, 1562c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15622:	7883      	ldrb	r3, [r0, #2]
   15624:	2b01      	cmp	r3, #1
   15626:	d003      	beq.n	15630 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   15628:	f7ff fce6 	bl	14ff8 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1562c:	2400      	movs	r4, #0
   1562e:	e00d      	b.n	1564c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15630:	b136      	cbz	r6, 15640 <bt_conn_lookup_state_le+0x30>
   15632:	4632      	mov	r2, r6
   15634:	4629      	mov	r1, r5
   15636:	f012 fb1a 	bl	27c6e <bt_conn_is_peer_addr_le>
   1563a:	b908      	cbnz	r0, 15640 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1563c:	4620      	mov	r0, r4
   1563e:	e7f3      	b.n	15628 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15640:	7b63      	ldrb	r3, [r4, #13]
   15642:	42bb      	cmp	r3, r7
   15644:	d1fa      	bne.n	1563c <bt_conn_lookup_state_le+0x2c>
   15646:	7a23      	ldrb	r3, [r4, #8]
   15648:	42ab      	cmp	r3, r5
   1564a:	d1f7      	bne.n	1563c <bt_conn_lookup_state_le+0x2c>
}
   1564c:	4620      	mov	r0, r4
   1564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15650:	20009898 	.word	0x20009898

00015654 <send_conn_le_param_update>:
{
   15654:	b538      	push	{r3, r4, r5, lr}
   15656:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15658:	4608      	mov	r0, r1
{
   1565a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1565c:	f012 f808 	bl	27670 <bt_le_conn_params_valid>
   15660:	b338      	cbz	r0, 156b2 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15662:	4b15      	ldr	r3, [pc, #84]	; (156b8 <send_conn_le_param_update+0x64>)
   15664:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15668:	0799      	lsls	r1, r3, #30
   1566a:	d407      	bmi.n	1567c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1566c:	78e3      	ldrb	r3, [r4, #3]
   1566e:	b173      	cbz	r3, 1568e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   15670:	4629      	mov	r1, r5
   15672:	4620      	mov	r0, r4
}
   15674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15678:	f000 bafc 	b.w	15c74 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1567c:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   15680:	079a      	lsls	r2, r3, #30
   15682:	d5f3      	bpl.n	1566c <send_conn_le_param_update+0x18>
   15684:	1d23      	adds	r3, r4, #4
   15686:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1568a:	055b      	lsls	r3, r3, #21
   1568c:	d4ee      	bmi.n	1566c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1568e:	4629      	mov	r1, r5
   15690:	4620      	mov	r0, r4
   15692:	f012 fb0e 	bl	27cb2 <bt_conn_le_conn_update>
		if (rc == 0) {
   15696:	b958      	cbnz	r0, 156b0 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   15698:	882b      	ldrh	r3, [r5, #0]
   1569a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1569e:	886b      	ldrh	r3, [r5, #2]
   156a0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   156a4:	88ab      	ldrh	r3, [r5, #4]
   156a6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   156aa:	88eb      	ldrh	r3, [r5, #6]
   156ac:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   156b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   156b2:	f06f 0015 	mvn.w	r0, #21
   156b6:	e7fb      	b.n	156b0 <send_conn_le_param_update+0x5c>
   156b8:	20008000 	.word	0x20008000

000156bc <deferred_work>:
{
   156bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   156be:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   156c2:	4604      	mov	r4, r0
   156c4:	b087      	sub	sp, #28
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   156c6:	f1a0 0760 	sub.w	r7, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   156ca:	bb7b      	cbnz	r3, 1572c <deferred_work+0x70>
		bt_l2cap_disconnected(conn);
   156cc:	4638      	mov	r0, r7
   156ce:	f012 fb3e 	bl	27d4e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   156d2:	4b3c      	ldr	r3, [pc, #240]	; (157c4 <deferred_work+0x108>)
   156d4:	681d      	ldr	r5, [r3, #0]
   156d6:	b995      	cbnz	r5, 156fe <deferred_work+0x42>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   156d8:	4d3b      	ldr	r5, [pc, #236]	; (157c8 <deferred_work+0x10c>)
   156da:	4e3c      	ldr	r6, [pc, #240]	; (157cc <deferred_work+0x110>)
   156dc:	42b5      	cmp	r5, r6
   156de:	d91e      	bls.n	1571e <deferred_work+0x62>
   156e0:	493b      	ldr	r1, [pc, #236]	; (157d0 <deferred_work+0x114>)
   156e2:	f240 536c 	movw	r3, #1388	; 0x56c
   156e6:	4a3b      	ldr	r2, [pc, #236]	; (157d4 <deferred_work+0x118>)
   156e8:	483b      	ldr	r0, [pc, #236]	; (157d8 <deferred_work+0x11c>)
   156ea:	f010 fdb8 	bl	2625e <assert_print>
   156ee:	483b      	ldr	r0, [pc, #236]	; (157dc <deferred_work+0x120>)
   156f0:	f010 fdb5 	bl	2625e <assert_print>
   156f4:	f240 516c 	movw	r1, #1388	; 0x56c
   156f8:	4836      	ldr	r0, [pc, #216]	; (157d4 <deferred_work+0x118>)
   156fa:	f010 fda9 	bl	26250 <assert_post_action>
		if (cb->disconnected) {
   156fe:	686b      	ldr	r3, [r5, #4]
   15700:	b11b      	cbz	r3, 1570a <deferred_work+0x4e>
			cb->disconnected(conn, conn->err);
   15702:	4638      	mov	r0, r7
   15704:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   15708:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1570a:	69ad      	ldr	r5, [r5, #24]
   1570c:	e7e3      	b.n	156d6 <deferred_work+0x1a>
		if (cb->disconnected) {
   1570e:	686b      	ldr	r3, [r5, #4]
   15710:	b11b      	cbz	r3, 1571a <deferred_work+0x5e>
			cb->disconnected(conn, conn->err);
   15712:	4638      	mov	r0, r7
   15714:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   15718:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1571a:	351c      	adds	r5, #28
   1571c:	e7de      	b.n	156dc <deferred_work+0x20>
   1571e:	d3f6      	bcc.n	1570e <deferred_work+0x52>
		bt_conn_unref(conn);
   15720:	4638      	mov	r0, r7
}
   15722:	b007      	add	sp, #28
   15724:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   15728:	f7ff bc66 	b.w	14ff8 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   1572c:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   15730:	2b01      	cmp	r3, #1
   15732:	d11f      	bne.n	15774 <deferred_work+0xb8>
	if (atomic_test_and_clear_bit(conn->flags,
   15734:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15738:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1573c:	4628      	mov	r0, r5
   1573e:	f012 f9f7 	bl	27b30 <atomic_and>
   15742:	f410 7600 	ands.w	r6, r0, #512	; 0x200
   15746:	d023      	beq.n	15790 <deferred_work+0xd4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15748:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   1574a:	4638      	mov	r0, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1574c:	9304      	str	r3, [sp, #16]
   1574e:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   15750:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15752:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   15754:	f7ff ff7e 	bl	15654 <send_conn_le_param_update>
		if (!err) {
   15758:	b970      	cbnz	r0, 15778 <deferred_work+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1575a:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1575e:	4628      	mov	r0, r5
   15760:	f012 f9e6 	bl	27b30 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15764:	e8d5 3fef 	ldaex	r3, [r5]
   15768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1576c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   15770:	2a00      	cmp	r2, #0
   15772:	d1f7      	bne.n	15764 <deferred_work+0xa8>
}
   15774:	b007      	add	sp, #28
   15776:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   15778:	4b19      	ldr	r3, [pc, #100]	; (157e0 <deferred_work+0x124>)
   1577a:	9003      	str	r0, [sp, #12]
   1577c:	9302      	str	r3, [sp, #8]
   1577e:	2300      	movs	r3, #0
   15780:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_WRN("Send auto LE param update failed (err %d)",
   15784:	2202      	movs	r2, #2
   15786:	4618      	mov	r0, r3
   15788:	4916      	ldr	r1, [pc, #88]	; (157e4 <deferred_work+0x128>)
   1578a:	f012 f9dc 	bl	27b46 <z_log_msg_runtime_create.constprop.0>
   1578e:	e7e9      	b.n	15764 <deferred_work+0xa8>
		param = BT_LE_CONN_PARAM(
   15790:	4a15      	ldr	r2, [pc, #84]	; (157e8 <deferred_work+0x12c>)
   15792:	ab04      	add	r3, sp, #16
   15794:	6810      	ldr	r0, [r2, #0]
   15796:	6851      	ldr	r1, [r2, #4]
   15798:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   1579a:	4638      	mov	r0, r7
   1579c:	a904      	add	r1, sp, #16
   1579e:	f7ff ff59 	bl	15654 <send_conn_le_param_update>
		if (!err) {
   157a2:	b940      	cbnz	r0, 157b6 <deferred_work+0xfa>
   157a4:	e8d5 3fef 	ldaex	r3, [r5]
   157a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   157ac:	e8c5 3fe2 	stlex	r2, r3, [r5]
   157b0:	2a00      	cmp	r2, #0
   157b2:	d0d7      	beq.n	15764 <deferred_work+0xa8>
   157b4:	e7f6      	b.n	157a4 <deferred_work+0xe8>
			LOG_WRN("Send auto LE param update failed (err %d)",
   157b6:	4b0d      	ldr	r3, [pc, #52]	; (157ec <deferred_work+0x130>)
   157b8:	9003      	str	r0, [sp, #12]
   157ba:	e9cd 6301 	strd	r6, r3, [sp, #4]
   157be:	9600      	str	r6, [sp, #0]
   157c0:	4633      	mov	r3, r6
   157c2:	e7df      	b.n	15784 <deferred_work+0xc8>
   157c4:	20022718 	.word	0x20022718
   157c8:	0002c000 	.word	0x0002c000
   157cc:	0002c01c 	.word	0x0002c01c
   157d0:	0002fd01 	.word	0x0002fd01
   157d4:	0002fcd1 	.word	0x0002fcd1
   157d8:	0002d095 	.word	0x0002d095
   157dc:	0002e1ea 	.word	0x0002e1ea
   157e0:	00030026 	.word	0x00030026
   157e4:	0002c074 	.word	0x0002c074
   157e8:	0002c200 	.word	0x0002c200
   157ec:	0003004b 	.word	0x0003004b

000157f0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   157f0:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   157f2:	4801      	ldr	r0, [pc, #4]	; (157f8 <bt_conn_create_frag_timeout+0x8>)
   157f4:	f7ff bd42 	b.w	1527c <bt_conn_create_pdu_timeout>
   157f8:	20008cd4 	.word	0x20008cd4

000157fc <create_frag>:
{
   157fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15800:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   15802:	f04f 33ff 	mov.w	r3, #4294967295
   15806:	f04f 32ff 	mov.w	r2, #4294967295
   1580a:	2000      	movs	r0, #0
{
   1580c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1580e:	f7ff ffef 	bl	157f0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   15812:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   15814:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15816:	2b07      	cmp	r3, #7
   15818:	f04f 0600 	mov.w	r6, #0
   1581c:	d005      	beq.n	1582a <create_frag+0x2e>
		net_buf_unref(frag);
   1581e:	f004 fd05 	bl	1a22c <net_buf_unref>
		return NULL;
   15822:	4635      	mov	r5, r6
}
   15824:	4628      	mov	r0, r5
   15826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1582a:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   1582c:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   15830:	4e0c      	ldr	r6, [pc, #48]	; (15864 <create_frag+0x68>)
   15832:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15834:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   15838:	f013 fcf7 	bl	2922a <net_buf_simple_tailroom>
   1583c:	4580      	cmp	r8, r0
   1583e:	d20c      	bcs.n	1585a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   15840:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15844:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   15848:	4632      	mov	r2, r6
   1584a:	4638      	mov	r0, r7
   1584c:	f013 fcf5 	bl	2923a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   15850:	4631      	mov	r1, r6
   15852:	4620      	mov	r0, r4
   15854:	f004 fdd0 	bl	1a3f8 <net_buf_simple_pull>
   15858:	e7e4      	b.n	15824 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1585a:	4638      	mov	r0, r7
   1585c:	f013 fce5 	bl	2922a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15860:	b286      	uxth	r6, r0
   15862:	e7ef      	b.n	15844 <create_frag+0x48>
   15864:	20008000 	.word	0x20008000

00015868 <bt_conn_process_tx>:
{
   15868:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1586a:	7b43      	ldrb	r3, [r0, #13]
{
   1586c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1586e:	b95b      	cbnz	r3, 15888 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15870:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15874:	3004      	adds	r0, #4
   15876:	f012 f95b 	bl	27b30 <atomic_and>
   1587a:	0643      	lsls	r3, r0, #25
   1587c:	d504      	bpl.n	15888 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   1587e:	4620      	mov	r0, r4
}
   15880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   15884:	f7ff ba12 	b.w	14cac <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15888:	2200      	movs	r2, #0
   1588a:	2300      	movs	r3, #0
   1588c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15890:	f013 fcb6 	bl	29200 <net_buf_get>
	BT_ASSERT(buf);
   15894:	4605      	mov	r5, r0
   15896:	b960      	cbnz	r0, 158b2 <bt_conn_process_tx+0x4a>
   15898:	f240 331a 	movw	r3, #794	; 0x31a
   1589c:	4a22      	ldr	r2, [pc, #136]	; (15928 <bt_conn_process_tx+0xc0>)
   1589e:	4923      	ldr	r1, [pc, #140]	; (1592c <bt_conn_process_tx+0xc4>)
   158a0:	4823      	ldr	r0, [pc, #140]	; (15930 <bt_conn_process_tx+0xc8>)
   158a2:	f010 fcdc 	bl	2625e <assert_print>
   158a6:	4040      	eors	r0, r0
   158a8:	f380 8811 	msr	BASEPRI, r0
   158ac:	f04f 0003 	mov.w	r0, #3
   158b0:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   158b2:	4e20      	ldr	r6, [pc, #128]	; (15934 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   158b4:	8a2a      	ldrh	r2, [r5, #16]
   158b6:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   158ba:	429a      	cmp	r2, r3
   158bc:	d807      	bhi.n	158ce <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   158be:	2300      	movs	r3, #0
   158c0:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   158c2:	4629      	mov	r1, r5
   158c4:	4620      	mov	r0, r4
   158c6:	f7ff f913 	bl	14af0 <send_frag>
	if (!send_buf(conn, buf)) {
   158ca:	b968      	cbnz	r0, 158e8 <bt_conn_process_tx+0x80>
   158cc:	e005      	b.n	158da <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   158ce:	4629      	mov	r1, r5
   158d0:	4620      	mov	r0, r4
   158d2:	f7ff ff93 	bl	157fc <create_frag>
	if (!frag) {
   158d6:	4601      	mov	r1, r0
   158d8:	b938      	cbnz	r0, 158ea <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   158da:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   158dc:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   158de:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   158e0:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   158e2:	f004 fca3 	bl	1a22c <net_buf_unref>
		if (tx) {
   158e6:	b9ce      	cbnz	r6, 1591c <bt_conn_process_tx+0xb4>
}
   158e8:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   158ea:	2301      	movs	r3, #1
   158ec:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   158ee:	4620      	mov	r0, r4
   158f0:	f7ff f8fe 	bl	14af0 <send_frag>
   158f4:	2800      	cmp	r0, #0
   158f6:	d0f0      	beq.n	158da <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   158f8:	8a2a      	ldrh	r2, [r5, #16]
   158fa:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   158fe:	429a      	cmp	r2, r3
   15900:	d802      	bhi.n	15908 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   15902:	2300      	movs	r3, #0
   15904:	2203      	movs	r2, #3
   15906:	e7dc      	b.n	158c2 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   15908:	4629      	mov	r1, r5
   1590a:	4620      	mov	r0, r4
   1590c:	f7ff ff76 	bl	157fc <create_frag>
		if (!frag) {
   15910:	4601      	mov	r1, r0
   15912:	2800      	cmp	r0, #0
   15914:	d0e1      	beq.n	158da <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15916:	2301      	movs	r3, #1
   15918:	461a      	mov	r2, r3
   1591a:	e7e8      	b.n	158ee <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   1591c:	4631      	mov	r1, r6
   1591e:	4620      	mov	r0, r4
}
   15920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   15924:	f7ff b8be 	b.w	14aa4 <conn_tx_destroy>
   15928:	0002fcd1 	.word	0x0002fcd1
   1592c:	00030d9e 	.word	0x00030d9e
   15930:	0002d095 	.word	0x0002d095
   15934:	20008000 	.word	0x20008000

00015938 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   15938:	4b0b      	ldr	r3, [pc, #44]	; (15968 <bt_conn_auth_cb_register+0x30>)
   1593a:	b158      	cbz	r0, 15954 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   1593c:	681a      	ldr	r2, [r3, #0]
   1593e:	b962      	cbnz	r2, 1595a <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   15940:	6902      	ldr	r2, [r0, #16]
   15942:	b93a      	cbnz	r2, 15954 <bt_conn_auth_cb_register+0x1c>
   15944:	6802      	ldr	r2, [r0, #0]
   15946:	b95a      	cbnz	r2, 15960 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   15948:	6842      	ldr	r2, [r0, #4]
   1594a:	b94a      	cbnz	r2, 15960 <bt_conn_auth_cb_register+0x28>
   1594c:	6882      	ldr	r2, [r0, #8]
   1594e:	b93a      	cbnz	r2, 15960 <bt_conn_auth_cb_register+0x28>
   15950:	6942      	ldr	r2, [r0, #20]
   15952:	b92a      	cbnz	r2, 15960 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   15954:	6018      	str	r0, [r3, #0]
		return 0;
   15956:	2000      	movs	r0, #0
   15958:	4770      	bx	lr
		return -EALREADY;
   1595a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1595e:	4770      	bx	lr
		return -EINVAL;
   15960:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   15964:	4770      	bx	lr
   15966:	bf00      	nop
   15968:	20022724 	.word	0x20022724

0001596c <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   1596c:	b168      	cbz	r0, 1598a <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   1596e:	2300      	movs	r3, #0
   15970:	60c3      	str	r3, [r0, #12]
	return list->tail;
   15972:	4b07      	ldr	r3, [pc, #28]	; (15990 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   15974:	f100 020c 	add.w	r2, r0, #12
   15978:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1597a:	b919      	cbnz	r1, 15984 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   1597c:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   15980:	2000      	movs	r0, #0
   15982:	4770      	bx	lr
	parent->next = child;
   15984:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15986:	605a      	str	r2, [r3, #4]
}
   15988:	e7fa      	b.n	15980 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   1598a:	f06f 0015 	mvn.w	r0, #21
}
   1598e:	4770      	bx	lr
   15990:	2002271c 	.word	0x2002271c

00015994 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   15994:	b910      	cbnz	r0, 1599c <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   15996:	4802      	ldr	r0, [pc, #8]	; (159a0 <bt_conn_lookup_index+0xc>)
   15998:	f7ff bb06 	b.w	14fa8 <bt_conn_ref>
}
   1599c:	2000      	movs	r0, #0
   1599e:	4770      	bx	lr
   159a0:	20009898 	.word	0x20009898

000159a4 <bt_conn_init>:

int bt_conn_init(void)
{
   159a4:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   159a6:	480a      	ldr	r0, [pc, #40]	; (159d0 <bt_conn_init+0x2c>)
   159a8:	f014 ffe9 	bl	2a97e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   159ac:	4909      	ldr	r1, [pc, #36]	; (159d4 <bt_conn_init+0x30>)
   159ae:	4808      	ldr	r0, [pc, #32]	; (159d0 <bt_conn_init+0x2c>)
   159b0:	f014 fff2 	bl	2a998 <k_queue_append>
   159b4:	4908      	ldr	r1, [pc, #32]	; (159d8 <bt_conn_init+0x34>)
   159b6:	4806      	ldr	r0, [pc, #24]	; (159d0 <bt_conn_init+0x2c>)
   159b8:	f014 ffee 	bl	2a998 <k_queue_append>
	}

	bt_att_init();
   159bc:	f001 f8e4 	bl	16b88 <bt_att_init>

	err = bt_smp_init();
   159c0:	f003 ffb4 	bl	1992c <bt_smp_init>
	if (err) {
   159c4:	4604      	mov	r4, r0
   159c6:	b908      	cbnz	r0, 159cc <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   159c8:	f012 fa24 	bl	27e14 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   159cc:	4620      	mov	r0, r4
   159ce:	bd10      	pop	{r4, pc}
   159d0:	20008be8 	.word	0x20008be8
   159d4:	200226f8 	.word	0x200226f8
   159d8:	20022708 	.word	0x20022708

000159dc <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   159dc:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   159de:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   159e0:	4605      	mov	r5, r0
   159e2:	460f      	mov	r7, r1
   159e4:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   159e6:	2104      	movs	r1, #4
   159e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   159ec:	2000      	movs	r0, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   159ee:	b085      	sub	sp, #20
	return bt_conn_create_pdu_timeout(pool,
   159f0:	f7ff fc44 	bl	1527c <bt_conn_create_pdu_timeout>
	if (!buf) {
   159f4:	4604      	mov	r4, r0
   159f6:	b960      	cbnz	r0, 15a12 <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   159f8:	4b0a      	ldr	r3, [pc, #40]	; (15a24 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   159fa:	2201      	movs	r2, #1
   159fc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15a00:	4909      	ldr	r1, [pc, #36]	; (15a28 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   15a02:	4603      	mov	r3, r0
   15a04:	9503      	str	r5, [sp, #12]
   15a06:	9000      	str	r0, [sp, #0]
   15a08:	f012 f97c 	bl	27d04 <z_log_msg_runtime_create.constprop.0>
}
   15a0c:	4620      	mov	r0, r4
   15a0e:	b005      	add	sp, #20
   15a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   15a12:	2104      	movs	r1, #4
   15a14:	300c      	adds	r0, #12
   15a16:	f004 fd2b 	bl	1a470 <net_buf_simple_add>
	hdr->code = code;
   15a1a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   15a1c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   15a1e:	8046      	strh	r6, [r0, #2]
	return buf;
   15a20:	e7f4      	b.n	15a0c <l2cap_create_le_sig_pdu.constprop.0+0x30>
   15a22:	bf00      	nop
   15a24:	000300ee 	.word	0x000300ee
   15a28:	0002c0bc 	.word	0x0002c0bc

00015a2c <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   15a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   15a2e:	4c0b      	ldr	r4, [pc, #44]	; (15a5c <l2cap_accept+0x30>)
   15a30:	2300      	movs	r3, #0
   15a32:	6822      	ldr	r2, [r4, #0]
   15a34:	b92a      	cbnz	r2, 15a42 <l2cap_accept+0x16>
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;

		return 0;
   15a36:	4610      	mov	r0, r2
		l2cap->chan.chan.ops = &ops;
   15a38:	4b09      	ldr	r3, [pc, #36]	; (15a60 <l2cap_accept+0x34>)
   15a3a:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
   15a3c:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   15a3e:	b004      	add	sp, #16
   15a40:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   15a42:	4a08      	ldr	r2, [pc, #32]	; (15a64 <l2cap_accept+0x38>)
   15a44:	9003      	str	r0, [sp, #12]
   15a46:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15a4a:	4618      	mov	r0, r3
   15a4c:	2201      	movs	r2, #1
   15a4e:	4906      	ldr	r1, [pc, #24]	; (15a68 <l2cap_accept+0x3c>)
   15a50:	9300      	str	r3, [sp, #0]
   15a52:	f012 f957 	bl	27d04 <z_log_msg_runtime_create.constprop.0>
   15a56:	f06f 000b 	mvn.w	r0, #11
   15a5a:	e7f0      	b.n	15a3e <l2cap_accept+0x12>
   15a5c:	20022728 	.word	0x20022728
   15a60:	0002ca28 	.word	0x0002ca28
   15a64:	00030116 	.word	0x00030116
   15a68:	0002c0bc 	.word	0x0002c0bc

00015a6c <bt_l2cap_connected>:
{
   15a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15a6e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15a70:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15a72:	4d27      	ldr	r5, [pc, #156]	; (15b10 <bt_l2cap_connected+0xa4>)
   15a74:	4f27      	ldr	r7, [pc, #156]	; (15b14 <bt_l2cap_connected+0xa8>)
   15a76:	42bd      	cmp	r5, r7
   15a78:	d946      	bls.n	15b08 <bt_l2cap_connected+0x9c>
   15a7a:	4927      	ldr	r1, [pc, #156]	; (15b18 <bt_l2cap_connected+0xac>)
   15a7c:	f240 1381 	movw	r3, #385	; 0x181
   15a80:	4a26      	ldr	r2, [pc, #152]	; (15b1c <bt_l2cap_connected+0xb0>)
   15a82:	4827      	ldr	r0, [pc, #156]	; (15b20 <bt_l2cap_connected+0xb4>)
   15a84:	f010 fbeb 	bl	2625e <assert_print>
   15a88:	4826      	ldr	r0, [pc, #152]	; (15b24 <bt_l2cap_connected+0xb8>)
   15a8a:	f010 fbe8 	bl	2625e <assert_print>
   15a8e:	f240 1181 	movw	r1, #385	; 0x181
   15a92:	4822      	ldr	r0, [pc, #136]	; (15b1c <bt_l2cap_connected+0xb0>)
   15a94:	f010 fbdc 	bl	26250 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   15a98:	4620      	mov	r0, r4
   15a9a:	686b      	ldr	r3, [r5, #4]
   15a9c:	a901      	add	r1, sp, #4
   15a9e:	4798      	blx	r3
   15aa0:	2800      	cmp	r0, #0
   15aa2:	db2c      	blt.n	15afe <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   15aa4:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   15aa6:	882a      	ldrh	r2, [r5, #0]
   15aa8:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   15aaa:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   15aac:	68a8      	ldr	r0, [r5, #8]
   15aae:	f103 0210 	add.w	r2, r3, #16
   15ab2:	e8d2 1fef 	ldaex	r1, [r2]
   15ab6:	e8c2 6fec 	stlex	ip, r6, [r2]
   15aba:	f1bc 0f00 	cmp.w	ip, #0
   15abe:	d1f8      	bne.n	15ab2 <bt_l2cap_connected+0x46>
	parent->next = child;
   15ac0:	609e      	str	r6, [r3, #8]
	return list->tail;
   15ac2:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   15ac4:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   15ac8:	b9d9      	cbnz	r1, 15b02 <bt_l2cap_connected+0x96>
	list->head = node;
   15aca:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   15ace:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   15ad0:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15ad2:	9801      	ldr	r0, [sp, #4]
   15ad4:	6843      	ldr	r3, [r0, #4]
   15ad6:	681b      	ldr	r3, [r3, #0]
   15ad8:	b103      	cbz	r3, 15adc <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   15ada:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15adc:	9b01      	ldr	r3, [sp, #4]
   15ade:	3310      	adds	r3, #16
   15ae0:	e8d3 1fef 	ldaex	r1, [r3]
   15ae4:	f041 0101 	orr.w	r1, r1, #1
   15ae8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15aec:	2a00      	cmp	r2, #0
   15aee:	d1f7      	bne.n	15ae0 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   15af0:	9801      	ldr	r0, [sp, #4]
   15af2:	6843      	ldr	r3, [r0, #4]
   15af4:	69db      	ldr	r3, [r3, #28]
   15af6:	b113      	cbz	r3, 15afe <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   15af8:	f100 0110 	add.w	r1, r0, #16
   15afc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15afe:	350c      	adds	r5, #12
   15b00:	e7b9      	b.n	15a76 <bt_l2cap_connected+0xa>
	parent->next = child;
   15b02:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15b04:	65a2      	str	r2, [r4, #88]	; 0x58
}
   15b06:	e7e2      	b.n	15ace <bt_l2cap_connected+0x62>
   15b08:	d3c6      	bcc.n	15a98 <bt_l2cap_connected+0x2c>
}
   15b0a:	b003      	add	sp, #12
   15b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b0e:	bf00      	nop
   15b10:	0002bfdc 	.word	0x0002bfdc
   15b14:	0002c000 	.word	0x0002c000
   15b18:	0003016e 	.word	0x0003016e
   15b1c:	0003013d 	.word	0x0003013d
   15b20:	0002d095 	.word	0x0002d095
   15b24:	0002e1ea 	.word	0x0002e1ea

00015b28 <l2cap_recv>:
{
   15b28:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   15b2a:	8a0b      	ldrh	r3, [r1, #16]
{
   15b2c:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   15b2e:	2b03      	cmp	r3, #3
{
   15b30:	460c      	mov	r4, r1
   15b32:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15b34:	d803      	bhi.n	15b3e <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   15b36:	4b2d      	ldr	r3, [pc, #180]	; (15bec <l2cap_recv+0xc4>)
		LOG_ERR("Too small LE conn param rsp");
   15b38:	9302      	str	r3, [sp, #8]
   15b3a:	2300      	movs	r3, #0
   15b3c:	e01c      	b.n	15b78 <l2cap_recv+0x50>
	return net_buf_simple_pull_mem(&buf->b, len);
   15b3e:	2104      	movs	r1, #4
   15b40:	f104 000c 	add.w	r0, r4, #12
   15b44:	f004 fc76 	bl	1a434 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   15b48:	8a23      	ldrh	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   15b4a:	8842      	ldrh	r2, [r0, #2]
   15b4c:	4605      	mov	r5, r0
	if (buf->len != len) {
   15b4e:	429a      	cmp	r2, r3
   15b50:	d00e      	beq.n	15b70 <l2cap_recv+0x48>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   15b52:	e9cd 3203 	strd	r3, r2, [sp, #12]
   15b56:	4b26      	ldr	r3, [pc, #152]	; (15bf0 <l2cap_recv+0xc8>)
   15b58:	2201      	movs	r2, #1
   15b5a:	9302      	str	r3, [sp, #8]
   15b5c:	2300      	movs	r3, #0
   15b5e:	4925      	ldr	r1, [pc, #148]	; (15bf4 <l2cap_recv+0xcc>)
   15b60:	4618      	mov	r0, r3
   15b62:	e9cd 3300 	strd	r3, r3, [sp]
   15b66:	f012 f8cd 	bl	27d04 <z_log_msg_runtime_create.constprop.0>
}
   15b6a:	2000      	movs	r0, #0
   15b6c:	b006      	add	sp, #24
   15b6e:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   15b70:	7843      	ldrb	r3, [r0, #1]
   15b72:	b94b      	cbnz	r3, 15b88 <l2cap_recv+0x60>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   15b74:	4a20      	ldr	r2, [pc, #128]	; (15bf8 <l2cap_recv+0xd0>)
   15b76:	9202      	str	r2, [sp, #8]
   15b78:	2201      	movs	r2, #1
   15b7a:	4618      	mov	r0, r3
   15b7c:	e9cd 3300 	strd	r3, r3, [sp]
   15b80:	491c      	ldr	r1, [pc, #112]	; (15bf4 <l2cap_recv+0xcc>)
   15b82:	f012 f8bf 	bl	27d04 <z_log_msg_runtime_create.constprop.0>
		return 0;
   15b86:	e7f0      	b.n	15b6a <l2cap_recv+0x42>
	switch (hdr->code) {
   15b88:	7803      	ldrb	r3, [r0, #0]
   15b8a:	2b01      	cmp	r3, #1
   15b8c:	d0ed      	beq.n	15b6a <l2cap_recv+0x42>
   15b8e:	2b13      	cmp	r3, #19
   15b90:	d103      	bne.n	15b9a <l2cap_recv+0x72>
	if (buf->len < sizeof(*rsp)) {
   15b92:	2a01      	cmp	r2, #1
   15b94:	d8e9      	bhi.n	15b6a <l2cap_recv+0x42>
		LOG_ERR("Too small LE conn param rsp");
   15b96:	4b19      	ldr	r3, [pc, #100]	; (15bfc <l2cap_recv+0xd4>)
   15b98:	e7ce      	b.n	15b38 <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15b9a:	2400      	movs	r4, #0
	switch (hdr->code) {
   15b9c:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15b9e:	4b18      	ldr	r3, [pc, #96]	; (15c00 <l2cap_recv+0xd8>)
   15ba0:	2202      	movs	r2, #2
   15ba2:	4620      	mov	r0, r4
   15ba4:	4913      	ldr	r1, [pc, #76]	; (15bf4 <l2cap_recv+0xcc>)
   15ba6:	9302      	str	r3, [sp, #8]
   15ba8:	e9cd 4400 	strd	r4, r4, [sp]
   15bac:	4623      	mov	r3, r4
   15bae:	f012 f8a9 	bl	27d04 <z_log_msg_runtime_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15bb2:	7869      	ldrb	r1, [r5, #1]
   15bb4:	2202      	movs	r2, #2
   15bb6:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   15bb8:	6836      	ldr	r6, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15bba:	f7ff ff0f 	bl	159dc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15bbe:	4605      	mov	r5, r0
   15bc0:	2800      	cmp	r0, #0
   15bc2:	d0d2      	beq.n	15b6a <l2cap_recv+0x42>
	return net_buf_simple_add(&buf->b, len);
   15bc4:	2102      	movs	r1, #2
   15bc6:	300c      	adds	r0, #12
   15bc8:	f004 fc52 	bl	1a470 <net_buf_simple_add>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15bcc:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   15bce:	7004      	strb	r4, [r0, #0]
   15bd0:	7044      	strb	r4, [r0, #1]
   15bd2:	462a      	mov	r2, r5
   15bd4:	2105      	movs	r1, #5
   15bd6:	4630      	mov	r0, r6
   15bd8:	9400      	str	r4, [sp, #0]
   15bda:	f012 f8f0 	bl	27dbe <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   15bde:	2800      	cmp	r0, #0
   15be0:	d0c3      	beq.n	15b6a <l2cap_recv+0x42>
		net_buf_unref(buf);
   15be2:	4628      	mov	r0, r5
   15be4:	f004 fb22 	bl	1a22c <net_buf_unref>
   15be8:	e7bf      	b.n	15b6a <l2cap_recv+0x42>
   15bea:	bf00      	nop
   15bec:	00030195 	.word	0x00030195
   15bf0:	000301b3 	.word	0x000301b3
   15bf4:	0002c0bc 	.word	0x0002c0bc
   15bf8:	000301d4 	.word	0x000301d4
   15bfc:	000301f5 	.word	0x000301f5
   15c00:	00030211 	.word	0x00030211

00015c04 <bt_l2cap_recv>:
{
   15c04:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   15c06:	8a0b      	ldrh	r3, [r1, #16]
{
   15c08:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   15c0a:	2b03      	cmp	r3, #3
{
   15c0c:	460c      	mov	r4, r1
   15c0e:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   15c10:	d80f      	bhi.n	15c32 <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   15c12:	4b15      	ldr	r3, [pc, #84]	; (15c68 <bt_l2cap_recv+0x64>)
   15c14:	2201      	movs	r2, #1
   15c16:	9302      	str	r3, [sp, #8]
   15c18:	2300      	movs	r3, #0
   15c1a:	4914      	ldr	r1, [pc, #80]	; (15c6c <bt_l2cap_recv+0x68>)
   15c1c:	4618      	mov	r0, r3
   15c1e:	e9cd 3300 	strd	r3, r3, [sp]
   15c22:	f012 f86f 	bl	27d04 <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   15c26:	4620      	mov	r0, r4
}
   15c28:	b005      	add	sp, #20
   15c2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   15c2e:	f004 bafd 	b.w	1a22c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   15c32:	2104      	movs	r1, #4
   15c34:	f104 000c 	add.w	r0, r4, #12
   15c38:	f004 fbfc 	bl	1a434 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   15c3c:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   15c3e:	4628      	mov	r0, r5
   15c40:	f012 f8df 	bl	27e02 <bt_l2cap_le_lookup_rx_cid>
   15c44:	4603      	mov	r3, r0
	if (!chan) {
   15c46:	b948      	cbnz	r0, 15c5c <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   15c48:	4a09      	ldr	r2, [pc, #36]	; (15c70 <bt_l2cap_recv+0x6c>)
   15c4a:	9103      	str	r1, [sp, #12]
   15c4c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   15c50:	4906      	ldr	r1, [pc, #24]	; (15c6c <bt_l2cap_recv+0x68>)
   15c52:	2202      	movs	r2, #2
   15c54:	9000      	str	r0, [sp, #0]
   15c56:	f012 f855 	bl	27d04 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   15c5a:	e7e4      	b.n	15c26 <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   15c5c:	6843      	ldr	r3, [r0, #4]
   15c5e:	4621      	mov	r1, r4
   15c60:	695b      	ldr	r3, [r3, #20]
   15c62:	4798      	blx	r3
   15c64:	e7df      	b.n	15c26 <bt_l2cap_recv+0x22>
   15c66:	bf00      	nop
   15c68:	00030239 	.word	0x00030239
   15c6c:	0002c0bc 	.word	0x0002c0bc
   15c70:	00030256 	.word	0x00030256

00015c74 <bt_l2cap_update_conn_param>:
{
   15c74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   15c76:	4b17      	ldr	r3, [pc, #92]	; (15cd4 <bt_l2cap_update_conn_param+0x60>)
{
   15c78:	460e      	mov	r6, r1
	ident++;
   15c7a:	7819      	ldrb	r1, [r3, #0]
{
   15c7c:	4605      	mov	r5, r0
	ident++;
   15c7e:	3101      	adds	r1, #1
   15c80:	b2c9      	uxtb	r1, r1
   15c82:	2901      	cmp	r1, #1
   15c84:	bf38      	it	cc
   15c86:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15c88:	2208      	movs	r2, #8
   15c8a:	2012      	movs	r0, #18
	ident++;
   15c8c:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15c8e:	f7ff fea5 	bl	159dc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15c92:	4604      	mov	r4, r0
   15c94:	b1d0      	cbz	r0, 15ccc <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   15c96:	2108      	movs	r1, #8
   15c98:	300c      	adds	r0, #12
   15c9a:	f004 fbe9 	bl	1a470 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15c9e:	8833      	ldrh	r3, [r6, #0]
   15ca0:	4622      	mov	r2, r4
   15ca2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15ca4:	8873      	ldrh	r3, [r6, #2]
   15ca6:	2105      	movs	r1, #5
   15ca8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15caa:	88b3      	ldrh	r3, [r6, #4]
   15cac:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15cae:	88f3      	ldrh	r3, [r6, #6]
   15cb0:	80c3      	strh	r3, [r0, #6]
   15cb2:	2300      	movs	r3, #0
   15cb4:	4628      	mov	r0, r5
   15cb6:	9300      	str	r3, [sp, #0]
   15cb8:	f012 f881 	bl	27dbe <bt_l2cap_send_cb>
	if (err) {
   15cbc:	4605      	mov	r5, r0
   15cbe:	b110      	cbz	r0, 15cc6 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   15cc0:	4620      	mov	r0, r4
   15cc2:	f004 fab3 	bl	1a22c <net_buf_unref>
}
   15cc6:	4628      	mov	r0, r5
   15cc8:	b002      	add	sp, #8
   15cca:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15ccc:	f06f 050b 	mvn.w	r5, #11
   15cd0:	e7f9      	b.n	15cc6 <bt_l2cap_update_conn_param+0x52>
   15cd2:	bf00      	nop
   15cd4:	200236da 	.word	0x200236da

00015cd8 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   15cd8:	2823      	cmp	r0, #35	; 0x23
   15cda:	d81f      	bhi.n	15d1c <att_op_get_type+0x44>
   15cdc:	281a      	cmp	r0, #26
   15cde:	d804      	bhi.n	15cea <att_op_get_type+0x12>
   15ce0:	1e43      	subs	r3, r0, #1
   15ce2:	2b18      	cmp	r3, #24
   15ce4:	d90e      	bls.n	15d04 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   15ce6:	2006      	movs	r0, #6
   15ce8:	4770      	bx	lr
	switch (op) {
   15cea:	f1a0 031b 	sub.w	r3, r0, #27
   15cee:	2b08      	cmp	r3, #8
   15cf0:	d81e      	bhi.n	15d30 <att_op_get_type+0x58>
   15cf2:	e8df f003 	tbb	[pc, r3]
   15cf6:	1d05      	.short	0x1d05
   15cf8:	191d231b 	.word	0x191d231b
   15cfc:	1d25      	.short	0x1d25
   15cfe:	05          	.byte	0x05
   15cff:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   15d00:	2003      	movs	r0, #3
   15d02:	4770      	bx	lr
   15d04:	2301      	movs	r3, #1
	switch (op) {
   15d06:	4a0f      	ldr	r2, [pc, #60]	; (15d44 <att_op_get_type+0x6c>)
   15d08:	4083      	lsls	r3, r0
   15d0a:	401a      	ands	r2, r3
   15d0c:	b9c2      	cbnz	r2, 15d40 <att_op_get_type+0x68>
   15d0e:	4a0e      	ldr	r2, [pc, #56]	; (15d48 <att_op_get_type+0x70>)
   15d10:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   15d12:	2a00      	cmp	r2, #0
   15d14:	bf14      	ite	ne
   15d16:	2001      	movne	r0, #1
   15d18:	2006      	moveq	r0, #6
   15d1a:	4770      	bx	lr
	switch (op) {
   15d1c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   15d20:	2b52      	cmp	r3, #82	; 0x52
   15d22:	d105      	bne.n	15d30 <att_op_get_type+0x58>
		return ATT_COMMAND;
   15d24:	2000      	movs	r0, #0
}
   15d26:	4770      	bx	lr
		return ATT_REQUEST;
   15d28:	2001      	movs	r0, #1
   15d2a:	4770      	bx	lr
		return ATT_INDICATION;
   15d2c:	2005      	movs	r0, #5
   15d2e:	4770      	bx	lr
		return ATT_COMMAND;
   15d30:	f010 0f40 	tst.w	r0, #64	; 0x40
   15d34:	bf0c      	ite	eq
   15d36:	2006      	moveq	r0, #6
   15d38:	2000      	movne	r0, #0
   15d3a:	4770      	bx	lr
	switch (op) {
   15d3c:	2004      	movs	r0, #4
   15d3e:	4770      	bx	lr
		return ATT_RESPONSE;
   15d40:	2002      	movs	r0, #2
   15d42:	4770      	bx	lr
   15d44:	028aaaaa 	.word	0x028aaaaa
   15d48:	01455554 	.word	0x01455554

00015d4c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15d4c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15d4e:	3804      	subs	r0, #4
   15d50:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15d52:	a901      	add	r1, sp, #4
   15d54:	4802      	ldr	r0, [pc, #8]	; (15d60 <bt_att_released+0x14>)
   15d56:	f00a fb8f 	bl	20478 <k_mem_slab_free>
}
   15d5a:	b003      	add	sp, #12
   15d5c:	f85d fb04 	ldr.w	pc, [sp], #4
   15d60:	20008a28 	.word	0x20008a28

00015d64 <tx_meta_data_free>:
{
   15d64:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   15d66:	4604      	mov	r4, r0
   15d68:	b948      	cbnz	r0, 15d7e <tx_meta_data_free+0x1a>
   15d6a:	490a      	ldr	r1, [pc, #40]	; (15d94 <tx_meta_data_free+0x30>)
   15d6c:	480a      	ldr	r0, [pc, #40]	; (15d98 <tx_meta_data_free+0x34>)
   15d6e:	23a6      	movs	r3, #166	; 0xa6
   15d70:	4a0a      	ldr	r2, [pc, #40]	; (15d9c <tx_meta_data_free+0x38>)
   15d72:	f010 fa74 	bl	2625e <assert_print>
   15d76:	21a6      	movs	r1, #166	; 0xa6
   15d78:	4808      	ldr	r0, [pc, #32]	; (15d9c <tx_meta_data_free+0x38>)
   15d7a:	f010 fa69 	bl	26250 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   15d7e:	2100      	movs	r1, #0
   15d80:	2214      	movs	r2, #20
   15d82:	f015 f80f 	bl	2ada4 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   15d86:	4621      	mov	r1, r4
}
   15d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   15d8c:	4804      	ldr	r0, [pc, #16]	; (15da0 <tx_meta_data_free+0x3c>)
   15d8e:	f014 be03 	b.w	2a998 <k_queue_append>
   15d92:	bf00      	nop
   15d94:	0002fde3 	.word	0x0002fde3
   15d98:	0002d095 	.word	0x0002d095
   15d9c:	0003028b 	.word	0x0003028b
   15da0:	20008bcc 	.word	0x20008bcc

00015da4 <find_type_cb>:
{
   15da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15da8:	f642 0301 	movw	r3, #10241	; 0x2801
   15dac:	2500      	movs	r5, #0
{
   15dae:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   15db0:	f8d2 9000 	ldr.w	r9, [r2]
{
   15db4:	4607      	mov	r7, r0
   15db6:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15db8:	6800      	ldr	r0, [r0, #0]
   15dba:	a90d      	add	r1, sp, #52	; 0x34
	struct bt_conn *conn = chan->chan.chan.conn;
   15dbc:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   15dc0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15dc2:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   15dc6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   15dca:	f011 fb28 	bl	2741e <bt_uuid_cmp>
   15dce:	2800      	cmp	r0, #0
   15dd0:	d067      	beq.n	15ea2 <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   15dd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15dd6:	6838      	ldr	r0, [r7, #0]
   15dd8:	a90d      	add	r1, sp, #52	; 0x34
   15dda:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   15dde:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   15de2:	f011 fb1c 	bl	2741e <bt_uuid_cmp>
   15de6:	b138      	cbz	r0, 15df8 <find_type_cb+0x54>
		if (data->group &&
   15de8:	68a3      	ldr	r3, [r4, #8]
   15dea:	b11b      	cbz	r3, 15df4 <find_type_cb+0x50>
   15dec:	885a      	ldrh	r2, [r3, #2]
   15dee:	42b2      	cmp	r2, r6
   15df0:	d200      	bcs.n	15df4 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   15df2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15df4:	2001      	movs	r0, #1
   15df6:	e009      	b.n	15e0c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   15df8:	6861      	ldr	r1, [r4, #4]
   15dfa:	4608      	mov	r0, r1
   15dfc:	f012 f815 	bl	27e2a <net_buf_frags_len>
   15e00:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   15e04:	1a1b      	subs	r3, r3, r0
   15e06:	2b03      	cmp	r3, #3
   15e08:	d803      	bhi.n	15e12 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   15e0a:	2000      	movs	r0, #0
}
   15e0c:	b013      	add	sp, #76	; 0x4c
   15e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   15e12:	4608      	mov	r0, r1
   15e14:	f004 fa66 	bl	1a2e4 <net_buf_frag_last>
   15e18:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   15e1a:	6860      	ldr	r0, [r4, #4]
   15e1c:	f012 f805 	bl	27e2a <net_buf_frags_len>
   15e20:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   15e24:	f105 0b0c 	add.w	fp, r5, #12
   15e28:	ebaa 0a00 	sub.w	sl, sl, r0
   15e2c:	4658      	mov	r0, fp
   15e2e:	f013 f9fc 	bl	2922a <net_buf_simple_tailroom>
   15e32:	4582      	cmp	sl, r0
   15e34:	d238      	bcs.n	15ea8 <find_type_cb+0x104>
   15e36:	6860      	ldr	r0, [r4, #4]
   15e38:	f011 fff7 	bl	27e2a <net_buf_frags_len>
   15e3c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   15e40:	1a18      	subs	r0, r3, r0
	if (!len) {
   15e42:	b970      	cbnz	r0, 15e62 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   15e44:	6863      	ldr	r3, [r4, #4]
   15e46:	7a98      	ldrb	r0, [r3, #10]
   15e48:	f003 ffb6 	bl	19db8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15e4c:	2200      	movs	r2, #0
   15e4e:	2300      	movs	r3, #0
   15e50:	f013 f9d1 	bl	291f6 <net_buf_alloc_fixed>
		if (!frag) {
   15e54:	4605      	mov	r5, r0
   15e56:	2800      	cmp	r0, #0
   15e58:	d0d7      	beq.n	15e0a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   15e5a:	4601      	mov	r1, r0
   15e5c:	6860      	ldr	r0, [r4, #4]
   15e5e:	f004 fa87 	bl	1a370 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   15e62:	2300      	movs	r3, #0
   15e64:	9300      	str	r3, [sp, #0]
   15e66:	2310      	movs	r3, #16
   15e68:	4639      	mov	r1, r7
   15e6a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   15e6e:	4640      	mov	r0, r8
   15e70:	eb0d 0203 	add.w	r2, sp, r3
   15e74:	47c8      	blx	r9
	if (read < 0) {
   15e76:	1e07      	subs	r7, r0, #0
   15e78:	db13      	blt.n	15ea2 <find_type_cb+0xfe>
	if (read != data->value_len) {
   15e7a:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15e7c:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   15e7e:	42ba      	cmp	r2, r7
   15e80:	d031      	beq.n	15ee6 <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15e82:	4601      	mov	r1, r0
   15e84:	a80d      	add	r0, sp, #52	; 0x34
   15e86:	f011 faf8 	bl	2747a <bt_uuid_create>
   15e8a:	4603      	mov	r3, r0
   15e8c:	b980      	cbnz	r0, 15eb0 <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   15e8e:	7c22      	ldrb	r2, [r4, #16]
   15e90:	9203      	str	r2, [sp, #12]
   15e92:	4a17      	ldr	r2, [pc, #92]	; (15ef0 <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   15e94:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15e98:	4916      	ldr	r1, [pc, #88]	; (15ef4 <find_type_cb+0x150>)
   15e9a:	2202      	movs	r2, #2
   15e9c:	9300      	str	r3, [sp, #0]
   15e9e:	f012 f8b3 	bl	28008 <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   15ea2:	2300      	movs	r3, #0
   15ea4:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   15ea6:	e7a5      	b.n	15df4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   15ea8:	4658      	mov	r0, fp
   15eaa:	f013 f9be 	bl	2922a <net_buf_simple_tailroom>
   15eae:	e7c8      	b.n	15e42 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   15eb0:	b2fa      	uxtb	r2, r7
   15eb2:	a904      	add	r1, sp, #16
   15eb4:	a808      	add	r0, sp, #32
   15eb6:	f011 fae0 	bl	2747a <bt_uuid_create>
   15eba:	4603      	mov	r3, r0
   15ebc:	b910      	cbnz	r0, 15ec4 <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   15ebe:	4a0e      	ldr	r2, [pc, #56]	; (15ef8 <find_type_cb+0x154>)
   15ec0:	9703      	str	r7, [sp, #12]
   15ec2:	e7e7      	b.n	15e94 <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15ec4:	a908      	add	r1, sp, #32
   15ec6:	a80d      	add	r0, sp, #52	; 0x34
   15ec8:	f011 faa9 	bl	2741e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15ecc:	2800      	cmp	r0, #0
   15ece:	d1e8      	bne.n	15ea2 <find_type_cb+0xfe>
	data->err = 0x00;
   15ed0:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   15ed2:	2104      	movs	r1, #4
   15ed4:	7463      	strb	r3, [r4, #17]
   15ed6:	f105 000c 	add.w	r0, r5, #12
   15eda:	f004 fac9 	bl	1a470 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15ede:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15ee0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15ee2:	68a3      	ldr	r3, [r4, #8]
   15ee4:	e785      	b.n	15df2 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   15ee6:	a904      	add	r1, sp, #16
   15ee8:	f014 ff12 	bl	2ad10 <memcmp>
   15eec:	e7ee      	b.n	15ecc <find_type_cb+0x128>
   15eee:	bf00      	nop
   15ef0:	000302ba 	.word	0x000302ba
   15ef4:	0002c06c 	.word	0x0002c06c
   15ef8:	000302d9 	.word	0x000302d9

00015efc <chan_send>:
{
   15efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15f00:	4606      	mov	r6, r0
   15f02:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   15f04:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   15f08:	68cb      	ldr	r3, [r1, #12]
{
   15f0a:	b085      	sub	sp, #20
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15f0c:	2102      	movs	r1, #2
   15f0e:	3098      	adds	r0, #152	; 0x98
   15f10:	f011 ffa5 	bl	27e5e <atomic_test_bit>
   15f14:	2800      	cmp	r0, #0
   15f16:	d053      	beq.n	15fc0 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15f18:	781b      	ldrb	r3, [r3, #0]
   15f1a:	2bd2      	cmp	r3, #210	; 0xd2
   15f1c:	d11a      	bne.n	15f54 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   15f1e:	6833      	ldr	r3, [r6, #0]
   15f20:	4621      	mov	r1, r4
   15f22:	6818      	ldr	r0, [r3, #0]
   15f24:	f013 f848 	bl	28fb8 <bt_smp_sign>
		if (err) {
   15f28:	4605      	mov	r5, r0
   15f2a:	b198      	cbz	r0, 15f54 <chan_send+0x58>
			LOG_ERR("Error signing data");
   15f2c:	4b26      	ldr	r3, [pc, #152]	; (15fc8 <chan_send+0xcc>)
   15f2e:	2201      	movs	r2, #1
   15f30:	9302      	str	r3, [sp, #8]
   15f32:	2300      	movs	r3, #0
   15f34:	4925      	ldr	r1, [pc, #148]	; (15fcc <chan_send+0xd0>)
   15f36:	4618      	mov	r0, r3
   15f38:	e9cd 3300 	strd	r3, r3, [sp]
   15f3c:	f012 f864 	bl	28008 <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   15f40:	69a0      	ldr	r0, [r4, #24]
   15f42:	f7ff ff0f 	bl	15d64 <tx_meta_data_free>
			net_buf_unref(buf);
   15f46:	4620      	mov	r0, r4
   15f48:	f004 f970 	bl	1a22c <net_buf_unref>
}
   15f4c:	4628      	mov	r0, r5
   15f4e:	b005      	add	sp, #20
   15f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15f54:	f104 000c 	add.w	r0, r4, #12
   15f58:	f013 f963 	bl	29222 <net_buf_simple_headroom>
	state->len = buf->len;
   15f5c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   15f60:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15f64:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   15f66:	4607      	mov	r7, r0
   15f68:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   15f6a:	68e3      	ldr	r3, [r4, #12]
   15f6c:	7818      	ldrb	r0, [r3, #0]
   15f6e:	f7ff feb3 	bl	15cd8 <att_op_get_type>
   15f72:	2805      	cmp	r0, #5
   15f74:	4605      	mov	r5, r0
	switch (op_type) {
   15f76:	d813      	bhi.n	15fa0 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15f78:	4b15      	ldr	r3, [pc, #84]	; (15fd0 <chan_send+0xd4>)
   15f7a:	4622      	mov	r2, r4
   15f7c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15f80:	2104      	movs	r1, #4
   15f82:	4630      	mov	r0, r6
   15f84:	f8cd 9000 	str.w	r9, [sp]
   15f88:	f011 ff19 	bl	27dbe <bt_l2cap_send_cb>
	if (err) {
   15f8c:	4605      	mov	r5, r0
   15f8e:	2800      	cmp	r0, #0
   15f90:	d0dc      	beq.n	15f4c <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   15f92:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15f94:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15f98:	fa13 f787 	uxtah	r7, r3, r7
   15f9c:	60e7      	str	r7, [r4, #12]
}
   15f9e:	e7d5      	b.n	15f4c <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   15fa0:	f240 2357 	movw	r3, #599	; 0x257
   15fa4:	4a0b      	ldr	r2, [pc, #44]	; (15fd4 <chan_send+0xd8>)
   15fa6:	490c      	ldr	r1, [pc, #48]	; (15fd8 <chan_send+0xdc>)
   15fa8:	480c      	ldr	r0, [pc, #48]	; (15fdc <chan_send+0xe0>)
   15faa:	f010 f958 	bl	2625e <assert_print>
   15fae:	4629      	mov	r1, r5
   15fb0:	480b      	ldr	r0, [pc, #44]	; (15fe0 <chan_send+0xe4>)
   15fb2:	f010 f954 	bl	2625e <assert_print>
   15fb6:	f240 2157 	movw	r1, #599	; 0x257
   15fba:	4806      	ldr	r0, [pc, #24]	; (15fd4 <chan_send+0xd8>)
   15fbc:	f010 f948 	bl	26250 <assert_post_action>
		return -EINVAL;
   15fc0:	f06f 0515 	mvn.w	r5, #21
   15fc4:	e7c2      	b.n	15f4c <chan_send+0x50>
   15fc6:	bf00      	nop
   15fc8:	000302f8 	.word	0x000302f8
   15fcc:	0002c06c 	.word	0x0002c06c
   15fd0:	0002ca50 	.word	0x0002ca50
   15fd4:	0003028b 	.word	0x0003028b
   15fd8:	0003297c 	.word	0x0003297c
   15fdc:	0002d095 	.word	0x0002d095
   15fe0:	0003030b 	.word	0x0003030b

00015fe4 <bt_att_chan_req_send>:
{
   15fe4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   15fe6:	b958      	cbnz	r0, 16000 <bt_att_chan_req_send+0x1c>
   15fe8:	4919      	ldr	r1, [pc, #100]	; (16050 <bt_att_chan_req_send+0x6c>)
   15fea:	f44f 7346 	mov.w	r3, #792	; 0x318
   15fee:	4a19      	ldr	r2, [pc, #100]	; (16054 <bt_att_chan_req_send+0x70>)
   15ff0:	4819      	ldr	r0, [pc, #100]	; (16058 <bt_att_chan_req_send+0x74>)
   15ff2:	f010 f934 	bl	2625e <assert_print>
   15ff6:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   15ffa:	4816      	ldr	r0, [pc, #88]	; (16054 <bt_att_chan_req_send+0x70>)
   15ffc:	f010 f928 	bl	26250 <assert_post_action>
   16000:	b949      	cbnz	r1, 16016 <bt_att_chan_req_send+0x32>
   16002:	4916      	ldr	r1, [pc, #88]	; (1605c <bt_att_chan_req_send+0x78>)
   16004:	f240 3319 	movw	r3, #793	; 0x319
   16008:	4a12      	ldr	r2, [pc, #72]	; (16054 <bt_att_chan_req_send+0x70>)
   1600a:	4813      	ldr	r0, [pc, #76]	; (16058 <bt_att_chan_req_send+0x74>)
   1600c:	f010 f927 	bl	2625e <assert_print>
   16010:	f240 3119 	movw	r1, #793	; 0x319
   16014:	e7f1      	b.n	15ffa <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   16016:	684a      	ldr	r2, [r1, #4]
   16018:	b94a      	cbnz	r2, 1602e <bt_att_chan_req_send+0x4a>
   1601a:	4911      	ldr	r1, [pc, #68]	; (16060 <bt_att_chan_req_send+0x7c>)
   1601c:	f240 331a 	movw	r3, #794	; 0x31a
   16020:	4a0c      	ldr	r2, [pc, #48]	; (16054 <bt_att_chan_req_send+0x70>)
   16022:	480d      	ldr	r0, [pc, #52]	; (16058 <bt_att_chan_req_send+0x74>)
   16024:	f010 f91b 	bl	2625e <assert_print>
   16028:	f240 311a 	movw	r1, #794	; 0x31a
   1602c:	e7e5      	b.n	15ffa <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   1602e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   16032:	b14b      	cbz	r3, 16048 <bt_att_chan_req_send+0x64>
   16034:	490b      	ldr	r1, [pc, #44]	; (16064 <bt_att_chan_req_send+0x80>)
   16036:	f240 331b 	movw	r3, #795	; 0x31b
   1603a:	4a06      	ldr	r2, [pc, #24]	; (16054 <bt_att_chan_req_send+0x70>)
   1603c:	4806      	ldr	r0, [pc, #24]	; (16058 <bt_att_chan_req_send+0x74>)
   1603e:	f010 f90e 	bl	2625e <assert_print>
   16042:	f240 311b 	movw	r1, #795	; 0x31b
   16046:	e7d8      	b.n	15ffa <bt_att_chan_req_send+0x16>
}
   16048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   1604c:	f011 bfeb 	b.w	28026 <chan_req_send>
   16050:	00030324 	.word	0x00030324
   16054:	0003028b 	.word	0x0003028b
   16058:	0002d095 	.word	0x0002d095
   1605c:	0003033a 	.word	0x0003033a
   16060:	00030329 	.word	0x00030329
   16064:	00030333 	.word	0x00030333

00016068 <att_get>:
{
   16068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1606a:	7b43      	ldrb	r3, [r0, #13]
   1606c:	2b07      	cmp	r3, #7
   1606e:	d00d      	beq.n	1608c <att_get+0x24>
		LOG_WRN("Not connected");
   16070:	4b18      	ldr	r3, [pc, #96]	; (160d4 <att_get+0x6c>)
   16072:	2202      	movs	r2, #2
   16074:	9302      	str	r3, [sp, #8]
   16076:	2300      	movs	r3, #0
   16078:	4618      	mov	r0, r3
   1607a:	e9cd 3300 	strd	r3, r3, [sp]
   1607e:	4916      	ldr	r1, [pc, #88]	; (160d8 <att_get+0x70>)
		LOG_ERR("Unable to find ATT channel");
   16080:	f011 ffc2 	bl	28008 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   16084:	2000      	movs	r0, #0
}
   16086:	b005      	add	sp, #20
   16088:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1608c:	2104      	movs	r1, #4
   1608e:	f011 feb8 	bl	27e02 <bt_l2cap_le_lookup_rx_cid>
   16092:	4603      	mov	r3, r0
	if (!chan) {
   16094:	b930      	cbnz	r0, 160a4 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   16096:	4a11      	ldr	r2, [pc, #68]	; (160dc <att_get+0x74>)
   16098:	490f      	ldr	r1, [pc, #60]	; (160d8 <att_get+0x70>)
   1609a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1609e:	9000      	str	r0, [sp, #0]
   160a0:	2201      	movs	r2, #1
   160a2:	e7ed      	b.n	16080 <att_get+0x18>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   160a4:	2102      	movs	r1, #2
   160a6:	3094      	adds	r0, #148	; 0x94
   160a8:	f011 fed9 	bl	27e5e <atomic_test_bit>
   160ac:	b970      	cbnz	r0, 160cc <att_get+0x64>
   160ae:	490c      	ldr	r1, [pc, #48]	; (160e0 <att_get+0x78>)
   160b0:	f640 332a 	movw	r3, #2858	; 0xb2a
   160b4:	4a0b      	ldr	r2, [pc, #44]	; (160e4 <att_get+0x7c>)
   160b6:	480c      	ldr	r0, [pc, #48]	; (160e8 <att_get+0x80>)
   160b8:	f010 f8d1 	bl	2625e <assert_print>
   160bc:	480b      	ldr	r0, [pc, #44]	; (160ec <att_get+0x84>)
   160be:	f010 f8ce 	bl	2625e <assert_print>
   160c2:	f640 312a 	movw	r1, #2858	; 0xb2a
   160c6:	4807      	ldr	r0, [pc, #28]	; (160e4 <att_get+0x7c>)
   160c8:	f010 f8c2 	bl	26250 <assert_post_action>
	return att_chan->att;
   160cc:	f853 0c04 	ldr.w	r0, [r3, #-4]
   160d0:	e7d9      	b.n	16086 <att_get+0x1e>
   160d2:	bf00      	nop
   160d4:	0003033e 	.word	0x0003033e
   160d8:	0002c06c 	.word	0x0002c06c
   160dc:	0003034c 	.word	0x0003034c
   160e0:	00030367 	.word	0x00030367
   160e4:	0003028b 	.word	0x0003028b
   160e8:	0002d095 	.word	0x0002d095
   160ec:	00030397 	.word	0x00030397

000160f0 <bt_att_connected>:
{
   160f0:	b510      	push	{r4, lr}
   160f2:	4604      	mov	r4, r0
   160f4:	f100 0394 	add.w	r3, r0, #148	; 0x94
   160f8:	e8d3 1fef 	ldaex	r1, [r3]
   160fc:	f041 0104 	orr.w	r1, r1, #4
   16100:	e8c3 1fe2 	stlex	r2, r1, [r3]
   16104:	2a00      	cmp	r2, #0
   16106:	d1f7      	bne.n	160f8 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16108:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   1610a:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1610c:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1610e:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   16110:	f011 fee7 	bl	27ee2 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16114:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   16118:	4903      	ldr	r1, [pc, #12]	; (16128 <bt_att_connected+0x38>)
   1611a:	f00b fa69 	bl	215f0 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1611e:	6820      	ldr	r0, [r4, #0]
}
   16120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   16124:	f001 bf04 	b.w	17f30 <bt_gatt_connected>
   16128:	00016d85 	.word	0x00016d85

0001612c <read_group_cb>:
{
   1612c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16130:	f04f 0800 	mov.w	r8, #0
   16134:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   16138:	4605      	mov	r5, r0
   1613a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1613c:	6800      	ldr	r0, [r0, #0]
   1613e:	a902      	add	r1, sp, #8
{
   16140:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   16142:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16144:	f88d 8008 	strb.w	r8, [sp, #8]
   16148:	f8ad 300a 	strh.w	r3, [sp, #10]
   1614c:	f011 f967 	bl	2741e <bt_uuid_cmp>
   16150:	b1a0      	cbz	r0, 1617c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16152:	f642 0301 	movw	r3, #10241	; 0x2801
   16156:	6828      	ldr	r0, [r5, #0]
   16158:	a903      	add	r1, sp, #12
   1615a:	f88d 800c 	strb.w	r8, [sp, #12]
   1615e:	f8ad 300e 	strh.w	r3, [sp, #14]
   16162:	f011 f95c 	bl	2741e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16166:	b148      	cbz	r0, 1617c <read_group_cb+0x50>
		if (data->group &&
   16168:	6923      	ldr	r3, [r4, #16]
   1616a:	b11b      	cbz	r3, 16174 <read_group_cb+0x48>
   1616c:	885a      	ldrh	r2, [r3, #2]
   1616e:	42b2      	cmp	r2, r6
   16170:	d200      	bcs.n	16174 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16172:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16174:	2001      	movs	r0, #1
}
   16176:	b004      	add	sp, #16
   16178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1617c:	6861      	ldr	r1, [r4, #4]
   1617e:	6828      	ldr	r0, [r5, #0]
   16180:	f011 f94d 	bl	2741e <bt_uuid_cmp>
   16184:	b110      	cbz	r0, 1618c <read_group_cb+0x60>
		data->group = NULL;
   16186:	2300      	movs	r3, #0
   16188:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1618a:	e7f3      	b.n	16174 <read_group_cb+0x48>
	if (data->rsp->len &&
   1618c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1618e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   16190:	781a      	ldrb	r2, [r3, #0]
   16192:	b132      	cbz	r2, 161a2 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16194:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   16196:	8a01      	ldrh	r1, [r0, #16]
   16198:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1619a:	4293      	cmp	r3, r2
   1619c:	da01      	bge.n	161a2 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1619e:	2000      	movs	r0, #0
   161a0:	e7e9      	b.n	16176 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   161a2:	2104      	movs	r1, #4
   161a4:	300c      	adds	r0, #12
   161a6:	f004 f963 	bl	1a470 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   161aa:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   161ac:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   161ae:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   161b0:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   161b2:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   161b4:	4b07      	ldr	r3, [pc, #28]	; (161d4 <read_group_cb+0xa8>)
   161b6:	9401      	str	r4, [sp, #4]
   161b8:	9300      	str	r3, [sp, #0]
   161ba:	4638      	mov	r0, r7
   161bc:	2300      	movs	r3, #0
   161be:	68a2      	ldr	r2, [r4, #8]
   161c0:	f011 ff72 	bl	280a8 <att_chan_read>
	if (read < 0) {
   161c4:	2800      	cmp	r0, #0
   161c6:	dbea      	blt.n	1619e <read_group_cb+0x72>
	if (!data->group) {
   161c8:	6920      	ldr	r0, [r4, #16]
   161ca:	3800      	subs	r0, #0
   161cc:	bf18      	it	ne
   161ce:	2001      	movne	r0, #1
   161d0:	e7d1      	b.n	16176 <read_group_cb+0x4a>
   161d2:	bf00      	nop
   161d4:	00027f49 	.word	0x00027f49

000161d8 <read_type_cb>:
{
   161d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   161dc:	6817      	ldr	r7, [r2, #0]
{
   161de:	4605      	mov	r5, r0
   161e0:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   161e2:	6800      	ldr	r0, [r0, #0]
   161e4:	6851      	ldr	r1, [r2, #4]
{
   161e6:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   161e8:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   161ea:	f011 f918 	bl	2741e <bt_uuid_cmp>
   161ee:	4681      	mov	r9, r0
   161f0:	2800      	cmp	r0, #0
   161f2:	d13c      	bne.n	1626e <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   161f4:	4630      	mov	r0, r6
   161f6:	2295      	movs	r2, #149	; 0x95
   161f8:	4629      	mov	r1, r5
   161fa:	f012 fc1b 	bl	28a34 <bt_gatt_check_perm>
   161fe:	4606      	mov	r6, r0
   16200:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16202:	b140      	cbz	r0, 16216 <read_type_cb+0x3e>
		if (data->rsp->len) {
   16204:	68e3      	ldr	r3, [r4, #12]
   16206:	781b      	ldrb	r3, [r3, #0]
   16208:	b10b      	cbz	r3, 1620e <read_type_cb+0x36>
			data->err = 0x00;
   1620a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1620e:	2000      	movs	r0, #0
}
   16210:	b003      	add	sp, #12
   16212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16216:	68a0      	ldr	r0, [r4, #8]
   16218:	f004 f864 	bl	1a2e4 <net_buf_frag_last>
   1621c:	2102      	movs	r1, #2
   1621e:	300c      	adds	r0, #12
   16220:	f004 f926 	bl	1a470 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16224:	4b13      	ldr	r3, [pc, #76]	; (16274 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16226:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   16228:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1622c:	9300      	str	r3, [sp, #0]
   1622e:	9401      	str	r4, [sp, #4]
   16230:	4633      	mov	r3, r6
   16232:	4629      	mov	r1, r5
   16234:	4638      	mov	r0, r7
   16236:	68a2      	ldr	r2, [r4, #8]
   16238:	f011 ff36 	bl	280a8 <att_chan_read>
	if (read < 0) {
   1623c:	2800      	cmp	r0, #0
   1623e:	da07      	bge.n	16250 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   16240:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   16244:	bf32      	itee	cc
   16246:	200e      	movcc	r0, #14
		return -err;
   16248:	4240      	negcs	r0, r0
   1624a:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1624c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1624e:	e7de      	b.n	1620e <read_type_cb+0x36>
	if (!data->item) {
   16250:	6923      	ldr	r3, [r4, #16]
   16252:	2b00      	cmp	r3, #0
   16254:	d0db      	beq.n	1620e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16256:	68a0      	ldr	r0, [r4, #8]
   16258:	f011 fde7 	bl	27e2a <net_buf_frags_len>
   1625c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1625e:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16260:	68e3      	ldr	r3, [r4, #12]
   16262:	781b      	ldrb	r3, [r3, #0]
   16264:	4298      	cmp	r0, r3
   16266:	bf94      	ite	ls
   16268:	2000      	movls	r0, #0
   1626a:	2001      	movhi	r0, #1
   1626c:	e7d0      	b.n	16210 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1626e:	2001      	movs	r0, #1
   16270:	e7ce      	b.n	16210 <read_type_cb+0x38>
   16272:	bf00      	nop
   16274:	00027e3b 	.word	0x00027e3b

00016278 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   16278:	b5f0      	push	{r4, r5, r6, r7, lr}
   1627a:	b087      	sub	sp, #28
   1627c:	4604      	mov	r4, r0
   1627e:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16280:	2200      	movs	r2, #0
   16282:	2300      	movs	r3, #0
   16284:	4831      	ldr	r0, [pc, #196]	; (1634c <bt_att_accept+0xd4>)
   16286:	a904      	add	r1, sp, #16
   16288:	f00a f88c 	bl	203a4 <k_mem_slab_alloc>
   1628c:	4605      	mov	r5, r0
   1628e:	b178      	cbz	r0, 162b0 <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   16290:	4b2f      	ldr	r3, [pc, #188]	; (16350 <bt_att_accept+0xd8>)
   16292:	2201      	movs	r2, #1
   16294:	9302      	str	r3, [sp, #8]
   16296:	2300      	movs	r3, #0
   16298:	e9cd 3300 	strd	r3, r3, [sp]
   1629c:	9403      	str	r4, [sp, #12]
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1629e:	4618      	mov	r0, r3
   162a0:	492c      	ldr	r1, [pc, #176]	; (16354 <bt_att_accept+0xdc>)
   162a2:	f011 feb1 	bl	28008 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   162a6:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   162aa:	4630      	mov	r0, r6
   162ac:	b007      	add	sp, #28
   162ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   162b0:	f00c fc42 	bl	22b38 <z_impl_z_current_get>
	(void)memset(att, 0, sizeof(*att));
   162b4:	9e04      	ldr	r6, [sp, #16]
	att_handle_rsp_thread = k_current_get();
   162b6:	4b28      	ldr	r3, [pc, #160]	; (16358 <bt_att_accept+0xe0>)
   162b8:	222c      	movs	r2, #44	; 0x2c
   162ba:	6018      	str	r0, [r3, #0]
   162bc:	4629      	mov	r1, r5
   162be:	1d30      	adds	r0, r6, #4
   162c0:	f014 fd70 	bl	2ada4 <memset>
	att->conn = conn;
   162c4:	6034      	str	r4, [r6, #0]
	sys_slist_init(&att->reqs);
   162c6:	9c04      	ldr	r4, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   162c8:	2200      	movs	r2, #0
   162ca:	2300      	movs	r3, #0
	list->tail = NULL;
   162cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
   162d0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   162d4:	4821      	ldr	r0, [pc, #132]	; (1635c <bt_att_accept+0xe4>)
   162d6:	a905      	add	r1, sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   162d8:	9505      	str	r5, [sp, #20]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   162da:	f00a f863 	bl	203a4 <k_mem_slab_alloc>
   162de:	4606      	mov	r6, r0
   162e0:	b140      	cbz	r0, 162f4 <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   162e2:	6823      	ldr	r3, [r4, #0]
   162e4:	2202      	movs	r2, #2
   162e6:	9303      	str	r3, [sp, #12]
   162e8:	4b1d      	ldr	r3, [pc, #116]	; (16360 <bt_att_accept+0xe8>)
   162ea:	9500      	str	r5, [sp, #0]
   162ec:	e9cd 5301 	strd	r5, r3, [sp, #4]
   162f0:	462b      	mov	r3, r5
   162f2:	e7d4      	b.n	1629e <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   162f4:	9b05      	ldr	r3, [sp, #20]
   162f6:	4601      	mov	r1, r0
   162f8:	22f8      	movs	r2, #248	; 0xf8
   162fa:	4618      	mov	r0, r3
   162fc:	f014 fd52 	bl	2ada4 <memset>
	chan->chan.chan.ops = &ops;
   16300:	4a18      	ldr	r2, [pc, #96]	; (16364 <bt_att_accept+0xec>)
   16302:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   16304:	30a0      	adds	r0, #160	; 0xa0
   16306:	f014 fb3a 	bl	2a97e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1630a:	9b05      	ldr	r3, [sp, #20]
   1630c:	3398      	adds	r3, #152	; 0x98
   1630e:	e8d3 2fef 	ldaex	r2, [r3]
   16312:	e8c3 6fe1 	stlex	r1, r6, [r3]
   16316:	2900      	cmp	r1, #0
   16318:	d1f9      	bne.n	1630e <bt_att_accept+0x96>
	chan->att = att;
   1631a:	9b05      	ldr	r3, [sp, #20]
   1631c:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1631e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   16320:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   16322:	b91b      	cbnz	r3, 1632c <bt_att_accept+0xb4>
   16324:	f104 000c 	add.w	r0, r4, #12
   16328:	f014 fb29 	bl	2a97e <z_impl_k_queue_init>
	return list->head;
   1632c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1632e:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
	parent->next = child;
   16332:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   16336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   16338:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1633a:	b902      	cbnz	r2, 1633e <bt_att_accept+0xc6>
	list->tail = node;
   1633c:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   1633e:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   16340:	2b00      	cmp	r3, #0
   16342:	d0b0      	beq.n	162a6 <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   16344:	3304      	adds	r3, #4
   16346:	603b      	str	r3, [r7, #0]
	return 0;
   16348:	e7af      	b.n	162aa <bt_att_accept+0x32>
   1634a:	bf00      	nop
   1634c:	20008a08 	.word	0x20008a08
   16350:	000303b3 	.word	0x000303b3
   16354:	0002c06c 	.word	0x0002c06c
   16358:	200227e4 	.word	0x200227e4
   1635c:	20008a28 	.word	0x20008a28
   16360:	000303d8 	.word	0x000303d8
   16364:	200084c8 	.word	0x200084c8

00016368 <bt_att_chan_create_pdu>:
{
   16368:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1636a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1636c:	3201      	adds	r2, #1
   1636e:	429a      	cmp	r2, r3
{
   16370:	460d      	mov	r5, r1
   16372:	b087      	sub	sp, #28
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16374:	d90f      	bls.n	16396 <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   16376:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1637a:	4b25      	ldr	r3, [pc, #148]	; (16410 <bt_att_chan_create_pdu+0xa8>)
   1637c:	2202      	movs	r2, #2
   1637e:	9302      	str	r3, [sp, #8]
   16380:	2300      	movs	r3, #0
   16382:	4924      	ldr	r1, [pc, #144]	; (16414 <bt_att_chan_create_pdu+0xac>)
   16384:	4618      	mov	r0, r3
   16386:	e9cd 3300 	strd	r3, r3, [sp]
   1638a:	f011 fe3d 	bl	28008 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1638e:	2400      	movs	r4, #0
}
   16390:	4620      	mov	r0, r4
   16392:	b007      	add	sp, #28
   16394:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   16396:	4608      	mov	r0, r1
   16398:	f7ff fc9e 	bl	15cd8 <att_op_get_type>
   1639c:	2802      	cmp	r0, #2
   1639e:	d018      	beq.n	163d2 <bt_att_chan_create_pdu+0x6a>
   163a0:	2804      	cmp	r0, #4
   163a2:	d016      	beq.n	163d2 <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   163a4:	f04f 36ff 	mov.w	r6, #4294967295
   163a8:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   163ac:	2100      	movs	r1, #0
   163ae:	4632      	mov	r2, r6
   163b0:	463b      	mov	r3, r7
   163b2:	4608      	mov	r0, r1
   163b4:	f011 fd00 	bl	27db8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   163b8:	4604      	mov	r4, r0
   163ba:	b970      	cbnz	r0, 163da <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   163bc:	4b16      	ldr	r3, [pc, #88]	; (16418 <bt_att_chan_create_pdu+0xb0>)
   163be:	2201      	movs	r2, #1
   163c0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   163c4:	4913      	ldr	r1, [pc, #76]	; (16414 <bt_att_chan_create_pdu+0xac>)
   163c6:	4603      	mov	r3, r0
   163c8:	9503      	str	r5, [sp, #12]
   163ca:	9000      	str	r0, [sp, #0]
   163cc:	f011 fe1c 	bl	28008 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   163d0:	e7dd      	b.n	1638e <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   163d2:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   163d6:	2700      	movs	r7, #0
   163d8:	e7e8      	b.n	163ac <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   163da:	4810      	ldr	r0, [pc, #64]	; (1641c <bt_att_chan_create_pdu+0xb4>)
   163dc:	463b      	mov	r3, r7
   163de:	4632      	mov	r2, r6
   163e0:	f00a fc18 	bl	20c14 <z_impl_k_queue_get>
   163e4:	4603      	mov	r3, r0
	if (!data) {
   163e6:	b958      	cbnz	r0, 16400 <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   163e8:	4a0d      	ldr	r2, [pc, #52]	; (16420 <bt_att_chan_create_pdu+0xb8>)
   163ea:	9000      	str	r0, [sp, #0]
   163ec:	e9cd 0201 	strd	r0, r2, [sp, #4]
   163f0:	4908      	ldr	r1, [pc, #32]	; (16414 <bt_att_chan_create_pdu+0xac>)
   163f2:	2202      	movs	r2, #2
   163f4:	f011 fe08 	bl	28008 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   163f8:	4620      	mov	r0, r4
   163fa:	f003 ff17 	bl	1a22c <net_buf_unref>
		return NULL;
   163fe:	e7c6      	b.n	1638e <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   16400:	61a0      	str	r0, [r4, #24]
   16402:	2101      	movs	r1, #1
   16404:	f104 000c 	add.w	r0, r4, #12
   16408:	f004 f832 	bl	1a470 <net_buf_simple_add>
	hdr->code = op;
   1640c:	7005      	strb	r5, [r0, #0]
	return buf;
   1640e:	e7bf      	b.n	16390 <bt_att_chan_create_pdu+0x28>
   16410:	000303fd 	.word	0x000303fd
   16414:	0002c06c 	.word	0x0002c06c
   16418:	000300ee 	.word	0x000300ee
   1641c:	20008bcc 	.word	0x20008bcc
   16420:	00030422 	.word	0x00030422

00016424 <bt_att_recv>:
{
   16424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   16428:	8a0b      	ldrh	r3, [r1, #16]
{
   1642a:	4607      	mov	r7, r0
   1642c:	460d      	mov	r5, r1
   1642e:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   16430:	b963      	cbnz	r3, 1644c <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   16432:	4a42      	ldr	r2, [pc, #264]	; (1653c <bt_att_recv+0x118>)
   16434:	9300      	str	r3, [sp, #0]
   16436:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1643a:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   1643c:	4618      	mov	r0, r3
   1643e:	4940      	ldr	r1, [pc, #256]	; (16540 <bt_att_recv+0x11c>)
   16440:	f011 fde2 	bl	28008 <z_log_msg_runtime_create.constprop.0>
}
   16444:	2000      	movs	r0, #0
   16446:	b006      	add	sp, #24
   16448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1644c:	2101      	movs	r1, #1
   1644e:	f105 000c 	add.w	r0, r5, #12
   16452:	f003 ffef 	bl	1a434 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16456:	f857 3c04 	ldr.w	r3, [r7, #-4]
   1645a:	4604      	mov	r4, r0
   1645c:	2b00      	cmp	r3, #0
   1645e:	d0f1      	beq.n	16444 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16460:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   16462:	7802      	ldrb	r2, [r0, #0]
   16464:	4e37      	ldr	r6, [pc, #220]	; (16544 <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16466:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
   1646a:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   1646e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   16472:	4290      	cmp	r0, r2
   16474:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   16478:	d111      	bne.n	1649e <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   1647a:	f891 9002 	ldrb.w	r9, [r1, #2]
   1647e:	f1b9 0f01 	cmp.w	r9, #1
   16482:	d12b      	bne.n	164dc <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16484:	2100      	movs	r1, #0
   16486:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1648a:	f011 feb3 	bl	281f4 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1648e:	b380      	cbz	r0, 164f2 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   16490:	4b2d      	ldr	r3, [pc, #180]	; (16548 <bt_att_recv+0x124>)
   16492:	9302      	str	r3, [sp, #8]
   16494:	2300      	movs	r3, #0
   16496:	2202      	movs	r2, #2
   16498:	e9cd 3300 	strd	r3, r3, [sp]
   1649c:	e7ce      	b.n	1643c <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1649e:	3301      	adds	r3, #1
   164a0:	2b0e      	cmp	r3, #14
   164a2:	d1e2      	bne.n	1646a <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   164a4:	2500      	movs	r5, #0
   164a6:	4b29      	ldr	r3, [pc, #164]	; (1654c <bt_att_recv+0x128>)
   164a8:	4628      	mov	r0, r5
   164aa:	4925      	ldr	r1, [pc, #148]	; (16540 <bt_att_recv+0x11c>)
   164ac:	9203      	str	r2, [sp, #12]
   164ae:	9302      	str	r3, [sp, #8]
   164b0:	2202      	movs	r2, #2
   164b2:	462b      	mov	r3, r5
   164b4:	e9cd 5500 	strd	r5, r5, [sp]
   164b8:	f011 fda6 	bl	28008 <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   164bc:	7821      	ldrb	r1, [r4, #0]
   164be:	4608      	mov	r0, r1
   164c0:	f7ff fc0a 	bl	15cd8 <att_op_get_type>
   164c4:	2800      	cmp	r0, #0
   164c6:	d0bd      	beq.n	16444 <bt_att_recv+0x20>
   164c8:	2805      	cmp	r0, #5
   164ca:	d0bb      	beq.n	16444 <bt_att_recv+0x20>
	if (!req) {
   164cc:	2900      	cmp	r1, #0
   164ce:	d0b9      	beq.n	16444 <bt_att_recv+0x20>
   164d0:	2306      	movs	r3, #6
   164d2:	2200      	movs	r2, #0
   164d4:	4640      	mov	r0, r8
   164d6:	f011 fff1 	bl	284bc <send_err_rsp.part.0>
   164da:	e7b3      	b.n	16444 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   164dc:	f1b9 0f05 	cmp.w	r9, #5
   164e0:	d107      	bne.n	164f2 <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   164e2:	2101      	movs	r1, #1
   164e4:	f107 0094 	add.w	r0, r7, #148	; 0x94
   164e8:	f011 fe84 	bl	281f4 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   164ec:	b108      	cbz	r0, 164f2 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   164ee:	4b18      	ldr	r3, [pc, #96]	; (16550 <bt_att_recv+0x12c>)
   164f0:	e7cf      	b.n	16492 <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   164f2:	4456      	add	r6, sl
   164f4:	8a2b      	ldrh	r3, [r5, #16]
   164f6:	7872      	ldrb	r2, [r6, #1]
   164f8:	429a      	cmp	r2, r3
   164fa:	d911      	bls.n	16520 <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   164fc:	7822      	ldrb	r2, [r4, #0]
   164fe:	4910      	ldr	r1, [pc, #64]	; (16540 <bt_att_recv+0x11c>)
   16500:	e9cd 3203 	strd	r3, r2, [sp, #12]
   16504:	4b13      	ldr	r3, [pc, #76]	; (16554 <bt_att_recv+0x130>)
   16506:	2201      	movs	r2, #1
   16508:	9302      	str	r3, [sp, #8]
   1650a:	2300      	movs	r3, #0
   1650c:	4618      	mov	r0, r3
   1650e:	e9cd 3300 	strd	r3, r3, [sp]
   16512:	f011 fd79 	bl	28008 <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   16516:	f1b9 0f01 	cmp.w	r9, #1
   1651a:	d193      	bne.n	16444 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   1651c:	2304      	movs	r3, #4
   1651e:	e009      	b.n	16534 <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   16520:	6873      	ldr	r3, [r6, #4]
   16522:	4629      	mov	r1, r5
   16524:	4640      	mov	r0, r8
   16526:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16528:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1652c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1652e:	d189      	bne.n	16444 <bt_att_recv+0x20>
   16530:	2800      	cmp	r0, #0
   16532:	d087      	beq.n	16444 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16534:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   16536:	2900      	cmp	r1, #0
   16538:	d084      	beq.n	16444 <bt_att_recv+0x20>
   1653a:	e7ca      	b.n	164d2 <bt_att_recv+0xae>
   1653c:	00030441 	.word	0x00030441
   16540:	0002c06c 	.word	0x0002c06c
   16544:	0002ca68 	.word	0x0002ca68
   16548:	00030476 	.word	0x00030476
   1654c:	0003045c 	.word	0x0003045c
   16550:	00030492 	.word	0x00030492
   16554:	000304b1 	.word	0x000304b1

00016558 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16558:	b5f0      	push	{r4, r5, r6, r7, lr}
   1655a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1655c:	6803      	ldr	r3, [r0, #0]
   1655e:	460d      	mov	r5, r1
   16560:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16562:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16564:	bf18      	it	ne
   16566:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16568:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1656a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1656c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1656e:	f012 fa95 	bl	28a9c <bt_gatt_change_aware>
   16572:	b948      	cbnz	r0, 16588 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16574:	2105      	movs	r1, #5
   16576:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1657a:	f011 fe3b 	bl	281f4 <atomic_test_and_set_bit>
   1657e:	2800      	cmp	r0, #0
   16580:	d048      	beq.n	16614 <att_write_rsp.constprop.0+0xbc>
			return 0;
   16582:	2000      	movs	r0, #0
}
   16584:	b007      	add	sp, #28
   16586:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   16588:	2e00      	cmp	r6, #0
   1658a:	d045      	beq.n	16618 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1658c:	2218      	movs	r2, #24
   1658e:	2100      	movs	r1, #0
   16590:	4668      	mov	r0, sp
   16592:	f014 fc07 	bl	2ada4 <memset>
	if (rsp) {
   16596:	bb67      	cbnz	r7, 165f2 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   16598:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1659a:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   1659c:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1659e:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   165a0:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   165a2:	2300      	movs	r3, #0
   165a4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   165a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   165aa:	4a1c      	ldr	r2, [pc, #112]	; (1661c <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   165ac:	9303      	str	r3, [sp, #12]
	data.len = len;
   165ae:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   165b2:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   165b6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   165ba:	2301      	movs	r3, #1
   165bc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   165c0:	466b      	mov	r3, sp
   165c2:	f011 fc83 	bl	27ecc <bt_gatt_foreach_attr>
	if (data.err) {
   165c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   165ca:	b1e3      	cbz	r3, 16606 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   165cc:	2f00      	cmp	r7, #0
   165ce:	d0d8      	beq.n	16582 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   165d0:	9b01      	ldr	r3, [sp, #4]
   165d2:	6998      	ldr	r0, [r3, #24]
   165d4:	f7ff fbc6 	bl	15d64 <tx_meta_data_free>
			net_buf_unref(data.buf);
   165d8:	9801      	ldr	r0, [sp, #4]
   165da:	f003 fe27 	bl	1a22c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   165de:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   165e2:	2d00      	cmp	r5, #0
   165e4:	d0cd      	beq.n	16582 <att_write_rsp.constprop.0+0x2a>
   165e6:	4632      	mov	r2, r6
   165e8:	4629      	mov	r1, r5
   165ea:	4620      	mov	r0, r4
   165ec:	f011 ff66 	bl	284bc <send_err_rsp.part.0>
   165f0:	e7c7      	b.n	16582 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   165f2:	2200      	movs	r2, #0
   165f4:	4639      	mov	r1, r7
   165f6:	4620      	mov	r0, r4
   165f8:	f7ff feb6 	bl	16368 <bt_att_chan_create_pdu>
   165fc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   165fe:	2800      	cmp	r0, #0
   16600:	d1ca      	bne.n	16598 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   16602:	200e      	movs	r0, #14
   16604:	e7be      	b.n	16584 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   16606:	9901      	ldr	r1, [sp, #4]
   16608:	2900      	cmp	r1, #0
   1660a:	d0ba      	beq.n	16582 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1660c:	4620      	mov	r0, r4
   1660e:	f011 fd3d 	bl	2808c <bt_att_chan_send_rsp>
   16612:	e7b6      	b.n	16582 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16614:	2012      	movs	r0, #18
   16616:	e7b5      	b.n	16584 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16618:	2001      	movs	r0, #1
   1661a:	e7b3      	b.n	16584 <att_write_rsp.constprop.0+0x2c>
   1661c:	00027e6b 	.word	0x00027e6b

00016620 <bt_att_create_pdu>:
{
   16620:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   16622:	460e      	mov	r6, r1
   16624:	4615      	mov	r5, r2
	att = att_get(conn);
   16626:	f7ff fd1f 	bl	16068 <att_get>
	if (!att) {
   1662a:	b1c0      	cbz	r0, 1665e <bt_att_create_pdu+0x3e>
	return list->head;
   1662c:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1662e:	4618      	mov	r0, r3
   16630:	b11b      	cbz	r3, 1663a <bt_att_create_pdu+0x1a>
	return node->next;
   16632:	f850 39f0 	ldr.w	r3, [r0], #-240
   16636:	b103      	cbz	r3, 1663a <bt_att_create_pdu+0x1a>
   16638:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1663a:	1c6c      	adds	r4, r5, #1
   1663c:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1663e:	b118      	cbz	r0, 16648 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16640:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16642:	42a1      	cmp	r1, r4
   16644:	d216      	bcs.n	16674 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16646:	b96b      	cbnz	r3, 16664 <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   16648:	4b0f      	ldr	r3, [pc, #60]	; (16688 <bt_att_create_pdu+0x68>)
   1664a:	2202      	movs	r2, #2
   1664c:	9302      	str	r3, [sp, #8]
   1664e:	2300      	movs	r3, #0
   16650:	490e      	ldr	r1, [pc, #56]	; (1668c <bt_att_create_pdu+0x6c>)
   16652:	4618      	mov	r0, r3
   16654:	e9cd 3300 	strd	r3, r3, [sp]
   16658:	9403      	str	r4, [sp, #12]
   1665a:	f011 fcd5 	bl	28008 <z_log_msg_runtime_create.constprop.0>
}
   1665e:	2000      	movs	r0, #0
   16660:	b004      	add	sp, #16
   16662:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16664:	4618      	mov	r0, r3
   16666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1666a:	b153      	cbz	r3, 16682 <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1666c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1666e:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16670:	428a      	cmp	r2, r1
   16672:	d8f7      	bhi.n	16664 <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   16674:	462a      	mov	r2, r5
   16676:	4631      	mov	r1, r6
}
   16678:	b004      	add	sp, #16
   1667a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1667e:	f7ff be73 	b.w	16368 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16682:	4614      	mov	r4, r2
   16684:	e7dc      	b.n	16640 <bt_att_create_pdu+0x20>
   16686:	bf00      	nop
   16688:	000304d0 	.word	0x000304d0
   1668c:	0002c06c 	.word	0x0002c06c

00016690 <att_read_group_req>:
{
   16690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16694:	8a0e      	ldrh	r6, [r1, #16]
{
   16696:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   16698:	3e04      	subs	r6, #4
   1669a:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1669c:	2e02      	cmp	r6, #2
{
   1669e:	4608      	mov	r0, r1
   166a0:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   166a2:	d001      	beq.n	166a8 <att_read_group_req+0x18>
   166a4:	2e10      	cmp	r6, #16
   166a6:	d16a      	bne.n	1677e <att_read_group_req+0xee>
   166a8:	2104      	movs	r1, #4
   166aa:	300c      	adds	r0, #12
   166ac:	f003 fec2 	bl	1a434 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   166b0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   166b4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   166b6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   166b8:	1d01      	adds	r1, r0, #4
   166ba:	4632      	mov	r2, r6
   166bc:	4640      	mov	r0, r8
   166be:	f010 fedc 	bl	2747a <bt_uuid_create>
   166c2:	2800      	cmp	r0, #0
   166c4:	d05d      	beq.n	16782 <att_read_group_req+0xf2>
	if (!start || !end) {
   166c6:	2d00      	cmp	r5, #0
   166c8:	d03a      	beq.n	16740 <att_read_group_req+0xb0>
   166ca:	2600      	movs	r6, #0
   166cc:	2f00      	cmp	r7, #0
   166ce:	d036      	beq.n	1673e <att_read_group_req+0xae>
	if (start > end) {
   166d0:	42bd      	cmp	r5, r7
   166d2:	d835      	bhi.n	16740 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   166d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   166d8:	4640      	mov	r0, r8
   166da:	a901      	add	r1, sp, #4
   166dc:	f88d 6004 	strb.w	r6, [sp, #4]
   166e0:	f8ad 3006 	strh.w	r3, [sp, #6]
   166e4:	f010 fe9b 	bl	2741e <bt_uuid_cmp>
   166e8:	bb70      	cbnz	r0, 16748 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   166ea:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   166ec:	2214      	movs	r2, #20
   166ee:	2100      	movs	r1, #0
   166f0:	a807      	add	r0, sp, #28
   166f2:	f014 fb57 	bl	2ada4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   166f6:	2201      	movs	r2, #1
   166f8:	2111      	movs	r1, #17
   166fa:	4630      	mov	r0, r6
   166fc:	f7ff ff90 	bl	16620 <bt_att_create_pdu>
   16700:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16702:	2800      	cmp	r0, #0
   16704:	d03d      	beq.n	16782 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   16706:	2101      	movs	r1, #1
   16708:	300c      	adds	r0, #12
	data.uuid = uuid;
   1670a:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1670e:	f003 feaf 	bl	1a470 <net_buf_simple_add>
	data.rsp->len = 0U;
   16712:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16714:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16716:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   16718:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1671a:	4a1b      	ldr	r2, [pc, #108]	; (16788 <att_read_group_req+0xf8>)
	data.group = NULL;
   1671c:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1671e:	4628      	mov	r0, r5
   16720:	ab07      	add	r3, sp, #28
   16722:	f011 fbd3 	bl	27ecc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   16726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16728:	781b      	ldrb	r3, [r3, #0]
   1672a:	bb1b      	cbnz	r3, 16774 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1672c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1672e:	6998      	ldr	r0, [r3, #24]
   16730:	f7ff fb18 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16734:	9809      	ldr	r0, [sp, #36]	; 0x24
   16736:	f003 fd79 	bl	1a22c <net_buf_unref>
	if (!req) {
   1673a:	230a      	movs	r3, #10
   1673c:	e001      	b.n	16742 <att_read_group_req+0xb2>
			*err = 0U;
   1673e:	463d      	mov	r5, r7
	if (!req) {
   16740:	2301      	movs	r3, #1
   16742:	462a      	mov	r2, r5
   16744:	2110      	movs	r1, #16
   16746:	e00e      	b.n	16766 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   16748:	f642 0301 	movw	r3, #10241	; 0x2801
   1674c:	4640      	mov	r0, r8
   1674e:	a907      	add	r1, sp, #28
   16750:	f88d 601c 	strb.w	r6, [sp, #28]
   16754:	f8ad 301e 	strh.w	r3, [sp, #30]
   16758:	f010 fe61 	bl	2741e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1675c:	2800      	cmp	r0, #0
   1675e:	d0c4      	beq.n	166ea <att_read_group_req+0x5a>
	if (!req) {
   16760:	2310      	movs	r3, #16
   16762:	462a      	mov	r2, r5
   16764:	4619      	mov	r1, r3
   16766:	4620      	mov	r0, r4
   16768:	f011 fea8 	bl	284bc <send_err_rsp.part.0>
		return 0;
   1676c:	2000      	movs	r0, #0
}
   1676e:	b00c      	add	sp, #48	; 0x30
   16770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   16774:	4620      	mov	r0, r4
   16776:	9909      	ldr	r1, [sp, #36]	; 0x24
   16778:	f011 fc88 	bl	2808c <bt_att_chan_send_rsp>
	return 0;
   1677c:	e7f6      	b.n	1676c <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1677e:	2004      	movs	r0, #4
   16780:	e7f5      	b.n	1676e <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   16782:	200e      	movs	r0, #14
   16784:	e7f3      	b.n	1676e <att_read_group_req+0xde>
   16786:	bf00      	nop
   16788:	0001612d 	.word	0x0001612d

0001678c <att_read_mult_vl_req>:
{
   1678c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16790:	6846      	ldr	r6, [r0, #4]
{
   16792:	4604      	mov	r4, r0
   16794:	460d      	mov	r5, r1
   16796:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   16798:	2101      	movs	r1, #1
   1679a:	4630      	mov	r0, r6
   1679c:	f012 f97e 	bl	28a9c <bt_gatt_change_aware>
   167a0:	b950      	cbnz	r0, 167b8 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   167a2:	2105      	movs	r1, #5
   167a4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   167a8:	f011 fd24 	bl	281f4 <atomic_test_and_set_bit>
   167ac:	2800      	cmp	r0, #0
   167ae:	d13b      	bne.n	16828 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   167b0:	2012      	movs	r0, #18
}
   167b2:	b005      	add	sp, #20
   167b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   167b8:	2210      	movs	r2, #16
   167ba:	2100      	movs	r1, #0
   167bc:	4668      	mov	r0, sp
   167be:	f014 faf1 	bl	2ada4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   167c2:	2200      	movs	r2, #0
   167c4:	2121      	movs	r1, #33	; 0x21
   167c6:	4630      	mov	r0, r6
   167c8:	f7ff ff2a 	bl	16620 <bt_att_create_pdu>
   167cc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   167ce:	b368      	cbz	r0, 1682c <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   167d0:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   167d4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16830 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   167d8:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   167da:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   167de:	8a2b      	ldrh	r3, [r5, #16]
   167e0:	2b01      	cmp	r3, #1
   167e2:	d804      	bhi.n	167ee <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   167e4:	4620      	mov	r0, r4
   167e6:	9902      	ldr	r1, [sp, #8]
   167e8:	f011 fc50 	bl	2808c <bt_att_chan_send_rsp>
	return 0;
   167ec:	e01c      	b.n	16828 <att_read_mult_vl_req+0x9c>
   167ee:	4638      	mov	r0, r7
   167f0:	f012 fd0f 	bl	29212 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   167f4:	466b      	mov	r3, sp
   167f6:	464a      	mov	r2, r9
   167f8:	4601      	mov	r1, r0
   167fa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   167fc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16800:	f011 fb64 	bl	27ecc <bt_gatt_foreach_attr>
		if (data.err) {
   16804:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16808:	2b00      	cmp	r3, #0
   1680a:	d0e8      	beq.n	167de <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1680c:	9b02      	ldr	r3, [sp, #8]
   1680e:	6998      	ldr	r0, [r3, #24]
   16810:	f7ff faa8 	bl	15d64 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16814:	9802      	ldr	r0, [sp, #8]
   16816:	f003 fd09 	bl	1a22c <net_buf_unref>
	if (!req) {
   1681a:	4632      	mov	r2, r6
   1681c:	2120      	movs	r1, #32
   1681e:	4620      	mov	r0, r4
   16820:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16824:	f011 fe4a 	bl	284bc <send_err_rsp.part.0>
			return 0;
   16828:	2000      	movs	r0, #0
   1682a:	e7c2      	b.n	167b2 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1682c:	200e      	movs	r0, #14
   1682e:	e7c0      	b.n	167b2 <att_read_mult_vl_req+0x26>
   16830:	0002825d 	.word	0x0002825d

00016834 <att_read_mult_req>:
{
   16834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16838:	6846      	ldr	r6, [r0, #4]
{
   1683a:	4604      	mov	r4, r0
   1683c:	460d      	mov	r5, r1
   1683e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   16840:	2101      	movs	r1, #1
   16842:	4630      	mov	r0, r6
   16844:	f012 f92a 	bl	28a9c <bt_gatt_change_aware>
   16848:	b950      	cbnz	r0, 16860 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1684a:	2105      	movs	r1, #5
   1684c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16850:	f011 fcd0 	bl	281f4 <atomic_test_and_set_bit>
   16854:	2800      	cmp	r0, #0
   16856:	d13b      	bne.n	168d0 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16858:	2012      	movs	r0, #18
}
   1685a:	b005      	add	sp, #20
   1685c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   16860:	2210      	movs	r2, #16
   16862:	2100      	movs	r1, #0
   16864:	4668      	mov	r0, sp
   16866:	f014 fa9d 	bl	2ada4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1686a:	2200      	movs	r2, #0
   1686c:	210f      	movs	r1, #15
   1686e:	4630      	mov	r0, r6
   16870:	f7ff fed6 	bl	16620 <bt_att_create_pdu>
   16874:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16876:	b368      	cbz	r0, 168d4 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16878:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1687c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 168d8 <att_read_mult_req+0xa4>
	data.chan = chan;
   16880:	9400      	str	r4, [sp, #0]
   16882:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   16886:	8a2b      	ldrh	r3, [r5, #16]
   16888:	2b01      	cmp	r3, #1
   1688a:	d804      	bhi.n	16896 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1688c:	4620      	mov	r0, r4
   1688e:	9902      	ldr	r1, [sp, #8]
   16890:	f011 fbfc 	bl	2808c <bt_att_chan_send_rsp>
	return 0;
   16894:	e01c      	b.n	168d0 <att_read_mult_req+0x9c>
   16896:	4638      	mov	r0, r7
   16898:	f012 fcbb 	bl	29212 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1689c:	466b      	mov	r3, sp
   1689e:	464a      	mov	r2, r9
   168a0:	4601      	mov	r1, r0
   168a2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   168a4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   168a8:	f011 fb10 	bl	27ecc <bt_gatt_foreach_attr>
		if (data.err) {
   168ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
   168b0:	2b00      	cmp	r3, #0
   168b2:	d0e8      	beq.n	16886 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   168b4:	9b02      	ldr	r3, [sp, #8]
   168b6:	6998      	ldr	r0, [r3, #24]
   168b8:	f7ff fa54 	bl	15d64 <tx_meta_data_free>
			net_buf_unref(data.buf);
   168bc:	9802      	ldr	r0, [sp, #8]
   168be:	f003 fcb5 	bl	1a22c <net_buf_unref>
	if (!req) {
   168c2:	4632      	mov	r2, r6
   168c4:	210e      	movs	r1, #14
   168c6:	4620      	mov	r0, r4
   168c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   168cc:	f011 fdf6 	bl	284bc <send_err_rsp.part.0>
			return 0;
   168d0:	2000      	movs	r0, #0
   168d2:	e7c2      	b.n	1685a <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   168d4:	200e      	movs	r0, #14
   168d6:	e7c0      	b.n	1685a <att_read_mult_req+0x26>
   168d8:	00028217 	.word	0x00028217

000168dc <att_read_rsp>:
{
   168dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   168e0:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   168e4:	4604      	mov	r4, r0
   168e6:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   168e8:	4640      	mov	r0, r8
   168ea:	2101      	movs	r1, #1
{
   168ec:	4617      	mov	r7, r2
   168ee:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   168f0:	f012 f8d4 	bl	28a9c <bt_gatt_change_aware>
   168f4:	b948      	cbnz	r0, 1690a <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   168f6:	2105      	movs	r1, #5
   168f8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   168fc:	f011 fc7a 	bl	281f4 <atomic_test_and_set_bit>
   16900:	bb78      	cbnz	r0, 16962 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16902:	2012      	movs	r0, #18
}
   16904:	b004      	add	sp, #16
   16906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1690a:	b38d      	cbz	r5, 16970 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1690c:	2210      	movs	r2, #16
   1690e:	2100      	movs	r1, #0
   16910:	4668      	mov	r0, sp
   16912:	f014 fa47 	bl	2ada4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   16916:	2200      	movs	r2, #0
   16918:	4639      	mov	r1, r7
   1691a:	4640      	mov	r0, r8
   1691c:	f7ff fe80 	bl	16620 <bt_att_create_pdu>
   16920:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16922:	b338      	cbz	r0, 16974 <att_read_rsp+0x98>
	data.offset = offset;
   16924:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16928:	4629      	mov	r1, r5
	data.offset = offset;
   1692a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1692e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16930:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16932:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16936:	4a10      	ldr	r2, [pc, #64]	; (16978 <att_read_rsp+0x9c>)
   16938:	466b      	mov	r3, sp
	data.chan = chan;
   1693a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1693c:	f011 fac6 	bl	27ecc <bt_gatt_foreach_attr>
	if (data.err) {
   16940:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16944:	b17b      	cbz	r3, 16966 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16946:	9b02      	ldr	r3, [sp, #8]
   16948:	6998      	ldr	r0, [r3, #24]
   1694a:	f7ff fa0b 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1694e:	9802      	ldr	r0, [sp, #8]
   16950:	f003 fc6c 	bl	1a22c <net_buf_unref>
	if (!req) {
   16954:	462a      	mov	r2, r5
   16956:	4631      	mov	r1, r6
   16958:	4620      	mov	r0, r4
   1695a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1695e:	f011 fdad 	bl	284bc <send_err_rsp.part.0>
			return 0;
   16962:	2000      	movs	r0, #0
   16964:	e7ce      	b.n	16904 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   16966:	4620      	mov	r0, r4
   16968:	9902      	ldr	r1, [sp, #8]
   1696a:	f011 fb8f 	bl	2808c <bt_att_chan_send_rsp>
	return 0;
   1696e:	e7f8      	b.n	16962 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   16970:	2001      	movs	r0, #1
   16972:	e7c7      	b.n	16904 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   16974:	200e      	movs	r0, #14
   16976:	e7c5      	b.n	16904 <att_read_rsp+0x28>
   16978:	00028217 	.word	0x00028217

0001697c <att_read_type_req>:
{
   1697c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16980:	8a0d      	ldrh	r5, [r1, #16]
{
   16982:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   16984:	3d04      	subs	r5, #4
   16986:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   16988:	2d02      	cmp	r5, #2
{
   1698a:	4608      	mov	r0, r1
   1698c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1698e:	d001      	beq.n	16994 <att_read_type_req+0x18>
   16990:	2d10      	cmp	r5, #16
   16992:	d150      	bne.n	16a36 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   16994:	2104      	movs	r1, #4
   16996:	300c      	adds	r0, #12
   16998:	f003 fd4c 	bl	1a434 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1699c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   169a0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   169a2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   169a4:	1d01      	adds	r1, r0, #4
   169a6:	462a      	mov	r2, r5
   169a8:	4640      	mov	r0, r8
   169aa:	f010 fd66 	bl	2747a <bt_uuid_create>
   169ae:	b188      	cbz	r0, 169d4 <att_read_type_req+0x58>
	if (!start || !end) {
   169b0:	b19e      	cbz	r6, 169da <att_read_type_req+0x5e>
   169b2:	b18f      	cbz	r7, 169d8 <att_read_type_req+0x5c>
	if (start > end) {
   169b4:	42be      	cmp	r6, r7
   169b6:	d810      	bhi.n	169da <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   169b8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   169ba:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   169bc:	2100      	movs	r1, #0
   169be:	eb0d 0002 	add.w	r0, sp, r2
   169c2:	f014 f9ef 	bl	2ada4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   169c6:	2201      	movs	r2, #1
   169c8:	2109      	movs	r1, #9
   169ca:	4628      	mov	r0, r5
   169cc:	f7ff fe28 	bl	16620 <bt_att_create_pdu>
   169d0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   169d2:	b960      	cbnz	r0, 169ee <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   169d4:	200e      	movs	r0, #14
   169d6:	e007      	b.n	169e8 <att_read_type_req+0x6c>
			*err = 0U;
   169d8:	463e      	mov	r6, r7
	if (!req) {
   169da:	2301      	movs	r3, #1
   169dc:	4632      	mov	r2, r6
   169de:	2108      	movs	r1, #8
   169e0:	4620      	mov	r0, r4
   169e2:	f011 fd6b 	bl	284bc <send_err_rsp.part.0>
		return 0;
   169e6:	2000      	movs	r0, #0
}
   169e8:	b00c      	add	sp, #48	; 0x30
   169ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   169ee:	2101      	movs	r1, #1
   169f0:	300c      	adds	r0, #12
	data.uuid = uuid;
   169f2:	e9cd 4806 	strd	r4, r8, [sp, #24]
   169f6:	f003 fd3b 	bl	1a470 <net_buf_simple_add>
	data.rsp->len = 0U;
   169fa:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   169fc:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   169fe:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16a00:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16a02:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16a04:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16a08:	4630      	mov	r0, r6
   16a0a:	ab06      	add	r3, sp, #24
   16a0c:	4a0b      	ldr	r2, [pc, #44]	; (16a3c <att_read_type_req+0xc0>)
   16a0e:	f011 fa5d 	bl	27ecc <bt_gatt_foreach_attr>
	if (data.err) {
   16a12:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16a16:	b14b      	cbz	r3, 16a2c <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16a18:	9b08      	ldr	r3, [sp, #32]
   16a1a:	6998      	ldr	r0, [r3, #24]
   16a1c:	f7ff f9a2 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16a20:	9808      	ldr	r0, [sp, #32]
   16a22:	f003 fc03 	bl	1a22c <net_buf_unref>
	if (!req) {
   16a26:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16a2a:	e7d7      	b.n	169dc <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   16a2c:	4620      	mov	r0, r4
   16a2e:	9908      	ldr	r1, [sp, #32]
   16a30:	f011 fb2c 	bl	2808c <bt_att_chan_send_rsp>
	return 0;
   16a34:	e7d7      	b.n	169e6 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   16a36:	2004      	movs	r0, #4
   16a38:	e7d6      	b.n	169e8 <att_read_type_req+0x6c>
   16a3a:	bf00      	nop
   16a3c:	000161d9 	.word	0x000161d9

00016a40 <att_find_type_req>:
{
   16a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a44:	460f      	mov	r7, r1
   16a46:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   16a48:	2106      	movs	r1, #6
   16a4a:	b086      	sub	sp, #24
   16a4c:	f107 000c 	add.w	r0, r7, #12
   16a50:	f003 fcf0 	bl	1a434 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16a54:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16a56:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   16a5a:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   16a5c:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   16a60:	b1c5      	cbz	r5, 16a94 <att_find_type_req+0x54>
   16a62:	2300      	movs	r3, #0
   16a64:	f1b8 0f00 	cmp.w	r8, #0
   16a68:	d013      	beq.n	16a92 <att_find_type_req+0x52>
	if (start > end) {
   16a6a:	4545      	cmp	r5, r8
   16a6c:	d812      	bhi.n	16a94 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16a6e:	f88d 3000 	strb.w	r3, [sp]
   16a72:	f88d 3004 	strb.w	r3, [sp, #4]
   16a76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16a7a:	4668      	mov	r0, sp
   16a7c:	a901      	add	r1, sp, #4
   16a7e:	f8ad 2002 	strh.w	r2, [sp, #2]
   16a82:	f8ad 3006 	strh.w	r3, [sp, #6]
   16a86:	f010 fcca 	bl	2741e <bt_uuid_cmp>
   16a8a:	4606      	mov	r6, r0
   16a8c:	b160      	cbz	r0, 16aa8 <att_find_type_req+0x68>
	if (!req) {
   16a8e:	230a      	movs	r3, #10
   16a90:	e001      	b.n	16a96 <att_find_type_req+0x56>
			*err = 0U;
   16a92:	4645      	mov	r5, r8
	if (!req) {
   16a94:	2301      	movs	r3, #1
   16a96:	462a      	mov	r2, r5
   16a98:	2106      	movs	r1, #6
   16a9a:	4620      	mov	r0, r4
   16a9c:	f011 fd0e 	bl	284bc <send_err_rsp.part.0>
		return 0;
   16aa0:	2000      	movs	r0, #0
}
   16aa2:	b006      	add	sp, #24
   16aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   16aa8:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16aac:	4601      	mov	r1, r0
   16aae:	2214      	movs	r2, #20
   16ab0:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16ab2:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   16ab4:	f014 f976 	bl	2ada4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   16ab8:	4632      	mov	r2, r6
   16aba:	2107      	movs	r1, #7
   16abc:	4650      	mov	r0, sl
   16abe:	f7ff fdaf 	bl	16620 <bt_att_create_pdu>
   16ac2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16ac4:	b1f8      	cbz	r0, 16b06 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16ac6:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16ac8:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16aca:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16ace:	4628      	mov	r0, r5
   16ad0:	ab01      	add	r3, sp, #4
   16ad2:	4a0e      	ldr	r2, [pc, #56]	; (16b0c <att_find_type_req+0xcc>)
	data.value = value;
   16ad4:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   16ad8:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   16ada:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16ade:	f011 f9f5 	bl	27ecc <bt_gatt_foreach_attr>
	if (data.err) {
   16ae2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16ae6:	b14b      	cbz	r3, 16afc <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16ae8:	9b02      	ldr	r3, [sp, #8]
   16aea:	6998      	ldr	r0, [r3, #24]
   16aec:	f7ff f93a 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16af0:	9802      	ldr	r0, [sp, #8]
   16af2:	f003 fb9b 	bl	1a22c <net_buf_unref>
	if (!req) {
   16af6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16afa:	e7cc      	b.n	16a96 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   16afc:	4620      	mov	r0, r4
   16afe:	9902      	ldr	r1, [sp, #8]
   16b00:	f011 fac4 	bl	2808c <bt_att_chan_send_rsp>
	return 0;
   16b04:	e7cc      	b.n	16aa0 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   16b06:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16b08:	e7cb      	b.n	16aa2 <att_find_type_req+0x62>
   16b0a:	bf00      	nop
   16b0c:	00015da5 	.word	0x00015da5

00016b10 <att_find_info_req>:
{
   16b10:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16b12:	68cb      	ldr	r3, [r1, #12]
{
   16b14:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   16b16:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16b18:	885e      	ldrh	r6, [r3, #2]
{
   16b1a:	b085      	sub	sp, #20
	if (!start || !end) {
   16b1c:	b195      	cbz	r5, 16b44 <att_find_info_req+0x34>
   16b1e:	b186      	cbz	r6, 16b42 <att_find_info_req+0x32>
	if (start > end) {
   16b20:	42ae      	cmp	r6, r5
   16b22:	d30f      	bcc.n	16b44 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16b24:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   16b26:	2210      	movs	r2, #16
   16b28:	2100      	movs	r1, #0
   16b2a:	4668      	mov	r0, sp
   16b2c:	f014 f93a 	bl	2ada4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16b30:	2200      	movs	r2, #0
   16b32:	2105      	movs	r1, #5
   16b34:	4638      	mov	r0, r7
   16b36:	f7ff fd73 	bl	16620 <bt_att_create_pdu>
   16b3a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16b3c:	b958      	cbnz	r0, 16b56 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16b3e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16b40:	e007      	b.n	16b52 <att_find_info_req+0x42>
			*err = 0U;
   16b42:	4635      	mov	r5, r6
	if (!req) {
   16b44:	2301      	movs	r3, #1
   16b46:	462a      	mov	r2, r5
   16b48:	2104      	movs	r1, #4
   16b4a:	4620      	mov	r0, r4
   16b4c:	f011 fcb6 	bl	284bc <send_err_rsp.part.0>
		return 0;
   16b50:	2000      	movs	r0, #0
}
   16b52:	b005      	add	sp, #20
   16b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16b56:	466b      	mov	r3, sp
   16b58:	4631      	mov	r1, r6
   16b5a:	4628      	mov	r0, r5
   16b5c:	4a09      	ldr	r2, [pc, #36]	; (16b84 <att_find_info_req+0x74>)
	data.chan = chan;
   16b5e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16b60:	f011 f9b4 	bl	27ecc <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16b64:	9b02      	ldr	r3, [sp, #8]
   16b66:	b943      	cbnz	r3, 16b7a <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16b68:	9b01      	ldr	r3, [sp, #4]
   16b6a:	6998      	ldr	r0, [r3, #24]
   16b6c:	f7ff f8fa 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16b70:	9801      	ldr	r0, [sp, #4]
   16b72:	f003 fb5b 	bl	1a22c <net_buf_unref>
	if (!req) {
   16b76:	230a      	movs	r3, #10
   16b78:	e7e5      	b.n	16b46 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   16b7a:	4620      	mov	r0, r4
   16b7c:	9901      	ldr	r1, [sp, #4]
   16b7e:	f011 fa85 	bl	2808c <bt_att_chan_send_rsp>
	return 0;
   16b82:	e7e5      	b.n	16b50 <att_find_info_req+0x40>
   16b84:	00027f69 	.word	0x00027f69

00016b88 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   16b88:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   16b8a:	4c09      	ldr	r4, [pc, #36]	; (16bb0 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16b8c:	4d09      	ldr	r5, [pc, #36]	; (16bb4 <bt_att_init+0x2c>)
   16b8e:	4620      	mov	r0, r4
   16b90:	f013 fef5 	bl	2a97e <z_impl_k_queue_init>
   16b94:	4629      	mov	r1, r5
   16b96:	4620      	mov	r0, r4
   16b98:	f013 fefe 	bl	2a998 <k_queue_append>
   16b9c:	4620      	mov	r0, r4
   16b9e:	f105 0114 	add.w	r1, r5, #20
   16ba2:	f013 fef9 	bl	2a998 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   16ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   16baa:	f000 bb9f 	b.w	172ec <bt_gatt_init>
   16bae:	bf00      	nop
   16bb0:	20008bcc 	.word	0x20008bcc
   16bb4:	200227bc 	.word	0x200227bc

00016bb8 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   16bb8:	2300      	movs	r3, #0
{
   16bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16bbc:	4605      	mov	r5, r0
   16bbe:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   16bc0:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   16bc2:	f00b ffb9 	bl	22b38 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   16bc6:	4b0c      	ldr	r3, [pc, #48]	; (16bf8 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16bc8:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   16bca:	681b      	ldr	r3, [r3, #0]
   16bcc:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   16bce:	bf04      	itt	eq
   16bd0:	2500      	moveq	r5, #0
   16bd2:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16bd4:	462a      	mov	r2, r5
   16bd6:	4623      	mov	r3, r4
   16bd8:	4808      	ldr	r0, [pc, #32]	; (16bfc <bt_att_req_alloc+0x44>)
   16bda:	f009 fbe3 	bl	203a4 <k_mem_slab_alloc>
   16bde:	4601      	mov	r1, r0
   16be0:	b940      	cbnz	r0, 16bf4 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16be2:	9b01      	ldr	r3, [sp, #4]
   16be4:	221c      	movs	r2, #28
   16be6:	4618      	mov	r0, r3
   16be8:	f014 f8dc 	bl	2ada4 <memset>
   16bec:	4603      	mov	r3, r0

	return req;
}
   16bee:	4618      	mov	r0, r3
   16bf0:	b003      	add	sp, #12
   16bf2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16bf4:	2300      	movs	r3, #0
   16bf6:	e7fa      	b.n	16bee <bt_att_req_alloc+0x36>
   16bf8:	200227e4 	.word	0x200227e4
   16bfc:	20008a48 	.word	0x20008a48

00016c00 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16c00:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   16c02:	6883      	ldr	r3, [r0, #8]
{
   16c04:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   16c06:	b14b      	cbz	r3, 16c1c <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   16c08:	6998      	ldr	r0, [r3, #24]
   16c0a:	f7ff f8ab 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(req->buf);
   16c0e:	9b01      	ldr	r3, [sp, #4]
   16c10:	6898      	ldr	r0, [r3, #8]
   16c12:	f003 fb0b 	bl	1a22c <net_buf_unref>
		req->buf = NULL;
   16c16:	2200      	movs	r2, #0
   16c18:	9b01      	ldr	r3, [sp, #4]
   16c1a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16c1c:	4803      	ldr	r0, [pc, #12]	; (16c2c <bt_att_req_free+0x2c>)
   16c1e:	a901      	add	r1, sp, #4
   16c20:	f009 fc2a 	bl	20478 <k_mem_slab_free>
}
   16c24:	b003      	add	sp, #12
   16c26:	f85d fb04 	ldr.w	pc, [sp], #4
   16c2a:	bf00      	nop
   16c2c:	20008a48 	.word	0x20008a48

00016c30 <att_handle_rsp>:
{
   16c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   16c34:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   16c36:	30c0      	adds	r0, #192	; 0xc0
{
   16c38:	461d      	mov	r5, r3
   16c3a:	460e      	mov	r6, r1
   16c3c:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   16c3e:	f00a fdf9 	bl	21834 <k_work_cancel_delayable>
	if (!chan->req) {
   16c42:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   16c46:	b97b      	cbnz	r3, 16c68 <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   16c48:	4a19      	ldr	r2, [pc, #100]	; (16cb0 <att_handle_rsp+0x80>)
   16c4a:	4618      	mov	r0, r3
   16c4c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   16c50:	4918      	ldr	r1, [pc, #96]	; (16cb4 <att_handle_rsp+0x84>)
   16c52:	2202      	movs	r2, #2
   16c54:	9300      	str	r3, [sp, #0]
   16c56:	f011 f9d7 	bl	28008 <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   16c5a:	6820      	ldr	r0, [r4, #0]
   16c5c:	f011 fb66 	bl	2832c <att_req_send_process>
}
   16c60:	2000      	movs	r0, #0
   16c62:	b004      	add	sp, #16
   16c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   16c68:	4a13      	ldr	r2, [pc, #76]	; (16cb8 <att_handle_rsp+0x88>)
   16c6a:	f04f 0800 	mov.w	r8, #0
   16c6e:	4293      	cmp	r3, r2
   16c70:	d102      	bne.n	16c78 <att_handle_rsp+0x48>
		chan->req = NULL;
   16c72:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   16c76:	e7f0      	b.n	16c5a <att_handle_rsp+0x2a>
	func = chan->req->func;
   16c78:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   16c7c:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   16c80:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16c84:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   16c88:	f7ff ffba 	bl	16c00 <bt_att_req_free>
	att_req_send_process(chan->att);
   16c8c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   16c8e:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   16c92:	f011 fb4b 	bl	2832c <att_req_send_process>
	if (func) {
   16c96:	f1b9 0f00 	cmp.w	r9, #0
   16c9a:	d0e1      	beq.n	16c60 <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   16c9c:	6820      	ldr	r0, [r4, #0]
   16c9e:	f8cd a000 	str.w	sl, [sp]
   16ca2:	463b      	mov	r3, r7
   16ca4:	4632      	mov	r2, r6
   16ca6:	4629      	mov	r1, r5
   16ca8:	6800      	ldr	r0, [r0, #0]
   16caa:	47c8      	blx	r9
   16cac:	e7d8      	b.n	16c60 <att_handle_rsp+0x30>
   16cae:	bf00      	nop
   16cb0:	000304eb 	.word	0x000304eb
   16cb4:	0002c06c 	.word	0x0002c06c
   16cb8:	200227e8 	.word	0x200227e8

00016cbc <bt_att_disconnected>:
{
   16cbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   16cc0:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   16cc4:	4604      	mov	r4, r0
	if (!att_chan->att) {
   16cc6:	2e00      	cmp	r6, #0
   16cc8:	d056      	beq.n	16d78 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   16cca:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   16cce:	f106 0028 	add.w	r0, r6, #40	; 0x28
   16cd2:	f011 fa74 	bl	281be <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   16cd6:	1f27      	subs	r7, r4, #4
   16cd8:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   16cdc:	2200      	movs	r2, #0
   16cde:	2300      	movs	r3, #0
   16ce0:	4640      	mov	r0, r8
   16ce2:	f012 fa8d 	bl	29200 <net_buf_get>
   16ce6:	4605      	mov	r5, r0
   16ce8:	bb28      	cbnz	r0, 16d36 <bt_att_disconnected+0x7a>
	if (chan->req) {
   16cea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16cee:	b12b      	cbz	r3, 16cfc <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16cf0:	4602      	mov	r2, r0
   16cf2:	4601      	mov	r1, r0
   16cf4:	230e      	movs	r3, #14
   16cf6:	4638      	mov	r0, r7
   16cf8:	f7ff ff9a 	bl	16c30 <att_handle_rsp>
	chan->att = NULL;
   16cfc:	2300      	movs	r3, #0
   16cfe:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   16d02:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   16d04:	2b00      	cmp	r3, #0
   16d06:	d137      	bne.n	16d78 <bt_att_disconnected+0xbc>
	att_reset(att);
   16d08:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16d0a:	9803      	ldr	r0, [sp, #12]
   16d0c:	2200      	movs	r2, #0
   16d0e:	2300      	movs	r3, #0
   16d10:	300c      	adds	r0, #12
   16d12:	f012 fa75 	bl	29200 <net_buf_get>
   16d16:	4605      	mov	r5, r0
   16d18:	b9a0      	cbnz	r0, 16d44 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   16d1a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16d1c:	6845      	ldr	r5, [r0, #4]
   16d1e:	b9c5      	cbnz	r5, 16d52 <bt_att_disconnected+0x96>
	att->conn = NULL;
   16d20:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   16d22:	a903      	add	r1, sp, #12
   16d24:	4816      	ldr	r0, [pc, #88]	; (16d80 <bt_att_disconnected+0xc4>)
   16d26:	f009 fba7 	bl	20478 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   16d2a:	6820      	ldr	r0, [r4, #0]
}
   16d2c:	b004      	add	sp, #16
   16d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   16d32:	f001 b94d 	b.w	17fd0 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16d36:	69a8      	ldr	r0, [r5, #24]
   16d38:	f7ff f814 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(buf);
   16d3c:	4628      	mov	r0, r5
   16d3e:	f003 fa75 	bl	1a22c <net_buf_unref>
   16d42:	e7cb      	b.n	16cdc <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16d44:	69a8      	ldr	r0, [r5, #24]
   16d46:	f7ff f80d 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(buf);
   16d4a:	4628      	mov	r0, r5
   16d4c:	f003 fa6e 	bl	1a22c <net_buf_unref>
   16d50:	e7db      	b.n	16d0a <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16d52:	6882      	ldr	r2, [r0, #8]
	return node->next;
   16d54:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16d56:	4295      	cmp	r5, r2
	list->head = node;
   16d58:	6043      	str	r3, [r0, #4]
	list->tail = node;
   16d5a:	bf08      	it	eq
   16d5c:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   16d5e:	686e      	ldr	r6, [r5, #4]
   16d60:	b136      	cbz	r6, 16d70 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16d62:	69ab      	ldr	r3, [r5, #24]
   16d64:	210e      	movs	r1, #14
   16d66:	9300      	str	r3, [sp, #0]
   16d68:	2300      	movs	r3, #0
   16d6a:	6800      	ldr	r0, [r0, #0]
   16d6c:	461a      	mov	r2, r3
   16d6e:	47b0      	blx	r6
		bt_att_req_free(req);
   16d70:	4628      	mov	r0, r5
   16d72:	f7ff ff45 	bl	16c00 <bt_att_req_free>
   16d76:	e7d0      	b.n	16d1a <bt_att_disconnected+0x5e>
}
   16d78:	b004      	add	sp, #16
   16d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d7e:	bf00      	nop
   16d80:	20008a08 	.word	0x20008a08

00016d84 <att_timeout>:
{
   16d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   16d86:	4b09      	ldr	r3, [pc, #36]	; (16dac <att_timeout+0x28>)
{
   16d88:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   16d8a:	9302      	str	r3, [sp, #8]
   16d8c:	2300      	movs	r3, #0
   16d8e:	2201      	movs	r2, #1
   16d90:	4618      	mov	r0, r3
   16d92:	e9cd 3300 	strd	r3, r3, [sp]
   16d96:	4906      	ldr	r1, [pc, #24]	; (16db0 <att_timeout+0x2c>)
   16d98:	f011 f936 	bl	28008 <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   16d9c:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   16da0:	b004      	add	sp, #16
   16da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   16da6:	f7ff bf89 	b.w	16cbc <bt_att_disconnected>
   16daa:	bf00      	nop
   16dac:	00030502 	.word	0x00030502
   16db0:	0002c06c 	.word	0x0002c06c

00016db4 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   16db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16db6:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   16db8:	b958      	cbnz	r0, 16dd2 <bt_att_send+0x1e>
   16dba:	4929      	ldr	r1, [pc, #164]	; (16e60 <bt_att_send+0xac>)
   16dbc:	f640 63a4 	movw	r3, #3748	; 0xea4
   16dc0:	4a28      	ldr	r2, [pc, #160]	; (16e64 <bt_att_send+0xb0>)
   16dc2:	4829      	ldr	r0, [pc, #164]	; (16e68 <bt_att_send+0xb4>)
   16dc4:	f00f fa4b 	bl	2625e <assert_print>
   16dc8:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   16dcc:	4825      	ldr	r0, [pc, #148]	; (16e64 <bt_att_send+0xb0>)
   16dce:	f00f fa3f 	bl	26250 <assert_post_action>
   16dd2:	b949      	cbnz	r1, 16de8 <bt_att_send+0x34>
   16dd4:	4925      	ldr	r1, [pc, #148]	; (16e6c <bt_att_send+0xb8>)
   16dd6:	f640 63a5 	movw	r3, #3749	; 0xea5
   16dda:	4a22      	ldr	r2, [pc, #136]	; (16e64 <bt_att_send+0xb0>)
   16ddc:	4822      	ldr	r0, [pc, #136]	; (16e68 <bt_att_send+0xb4>)
   16dde:	f00f fa3e 	bl	2625e <assert_print>
   16de2:	f640 61a5 	movw	r1, #3749	; 0xea5
   16de6:	e7f1      	b.n	16dcc <bt_att_send+0x18>

	att = att_get(conn);
   16de8:	f7ff f93e 	bl	16068 <att_get>
	if (!att) {
   16dec:	4605      	mov	r5, r0
   16dee:	b940      	cbnz	r0, 16e02 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16df0:	69a0      	ldr	r0, [r4, #24]
   16df2:	f7fe ffb7 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(buf);
   16df6:	4620      	mov	r0, r4
   16df8:	f003 fa18 	bl	1a22c <net_buf_unref>
		return -ENOTCONN;
   16dfc:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   16e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   16e02:	f100 060c 	add.w	r6, r0, #12
   16e06:	4621      	mov	r1, r4
   16e08:	4630      	mov	r0, r6
   16e0a:	f003 f9e9 	bl	1a1e0 <net_buf_put>
	return list->head;
   16e0e:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e10:	b14d      	cbz	r5, 16e26 <bt_att_send+0x72>
	return node->next;
   16e12:	f855 49f0 	ldr.w	r4, [r5], #-240
   16e16:	b104      	cbz	r4, 16e1a <bt_att_send+0x66>
   16e18:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   16e1a:	4631      	mov	r1, r6
   16e1c:	4628      	mov	r0, r5
   16e1e:	f011 f91c 	bl	2805a <process_queue>
		if (!err) {
   16e22:	4603      	mov	r3, r0
   16e24:	b980      	cbnz	r0, 16e48 <bt_att_send+0x94>
	return 0;
   16e26:	2000      	movs	r0, #0
   16e28:	e7ea      	b.n	16e00 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   16e2a:	2103      	movs	r1, #3
   16e2c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16e30:	f011 f815 	bl	27e5e <atomic_test_bit>
   16e34:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   16e36:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16e3a:	f011 f810 	bl	27e5e <atomic_test_bit>
		if (err == -ENOENT && prev &&
   16e3e:	4287      	cmp	r7, r0
   16e40:	f06f 0301 	mvn.w	r3, #1
   16e44:	d107      	bne.n	16e56 <bt_att_send+0xa2>
   16e46:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e48:	2c00      	cmp	r4, #0
   16e4a:	d0ec      	beq.n	16e26 <bt_att_send+0x72>
   16e4c:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   16e50:	b922      	cbnz	r2, 16e5c <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   16e52:	3302      	adds	r3, #2
   16e54:	d0e9      	beq.n	16e2a <bt_att_send+0x76>
{
   16e56:	4625      	mov	r5, r4
   16e58:	4614      	mov	r4, r2
   16e5a:	e7de      	b.n	16e1a <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e5c:	3af0      	subs	r2, #240	; 0xf0
   16e5e:	e7f8      	b.n	16e52 <bt_att_send+0x9e>
   16e60:	0002f572 	.word	0x0002f572
   16e64:	0003028b 	.word	0x0003028b
   16e68:	0002d095 	.word	0x0002d095
   16e6c:	00030d9e 	.word	0x00030d9e

00016e70 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   16e70:	b510      	push	{r4, lr}
   16e72:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   16e74:	b958      	cbnz	r0, 16e8e <bt_att_req_send+0x1e>
   16e76:	4915      	ldr	r1, [pc, #84]	; (16ecc <bt_att_req_send+0x5c>)
   16e78:	f640 63ba 	movw	r3, #3770	; 0xeba
   16e7c:	4a14      	ldr	r2, [pc, #80]	; (16ed0 <bt_att_req_send+0x60>)
   16e7e:	4815      	ldr	r0, [pc, #84]	; (16ed4 <bt_att_req_send+0x64>)
   16e80:	f00f f9ed 	bl	2625e <assert_print>
   16e84:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   16e88:	4811      	ldr	r0, [pc, #68]	; (16ed0 <bt_att_req_send+0x60>)
   16e8a:	f00f f9e1 	bl	26250 <assert_post_action>
   16e8e:	b949      	cbnz	r1, 16ea4 <bt_att_req_send+0x34>
   16e90:	4911      	ldr	r1, [pc, #68]	; (16ed8 <bt_att_req_send+0x68>)
   16e92:	f640 63bb 	movw	r3, #3771	; 0xebb
   16e96:	4a0e      	ldr	r2, [pc, #56]	; (16ed0 <bt_att_req_send+0x60>)
   16e98:	480e      	ldr	r0, [pc, #56]	; (16ed4 <bt_att_req_send+0x64>)
   16e9a:	f00f f9e0 	bl	2625e <assert_print>
   16e9e:	f640 61bb 	movw	r1, #3771	; 0xebb
   16ea2:	e7f1      	b.n	16e88 <bt_att_req_send+0x18>

	att = att_get(conn);
   16ea4:	f7ff f8e0 	bl	16068 <att_get>
	if (!att) {
   16ea8:	b160      	cbz	r0, 16ec4 <bt_att_req_send+0x54>
	parent->next = child;
   16eaa:	2300      	movs	r3, #0
   16eac:	6023      	str	r3, [r4, #0]
	return list->tail;
   16eae:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   16eb0:	b92b      	cbnz	r3, 16ebe <bt_att_req_send+0x4e>
	list->head = node;
   16eb2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   16eb6:	f011 fa39 	bl	2832c <att_req_send_process>

	return 0;
   16eba:	2000      	movs	r0, #0
}
   16ebc:	bd10      	pop	{r4, pc}
	parent->next = child;
   16ebe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16ec0:	6084      	str	r4, [r0, #8]
}
   16ec2:	e7f8      	b.n	16eb6 <bt_att_req_send+0x46>
		return -ENOTCONN;
   16ec4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16ec8:	e7f8      	b.n	16ebc <bt_att_req_send+0x4c>
   16eca:	bf00      	nop
   16ecc:	0002f572 	.word	0x0002f572
   16ed0:	0003028b 	.word	0x0003028b
   16ed4:	0002d095 	.word	0x0002d095
   16ed8:	0003033a 	.word	0x0003033a

00016edc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16edc:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16ede:	4606      	mov	r6, r0
   16ee0:	4d13      	ldr	r5, [pc, #76]	; (16f30 <find_cf_cfg+0x54>)
   16ee2:	b140      	cbz	r0, 16ef6 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16ee4:	462a      	mov	r2, r5
   16ee6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16eea:	1e6c      	subs	r4, r5, #1
   16eec:	f010 febf 	bl	27c6e <bt_conn_is_peer_addr_le>
   16ef0:	b198      	cbz	r0, 16f1a <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16ef2:	4620      	mov	r0, r4
   16ef4:	e00c      	b.n	16f10 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16ef6:	4628      	mov	r0, r5
   16ef8:	490e      	ldr	r1, [pc, #56]	; (16f34 <find_cf_cfg+0x58>)
   16efa:	f011 fc57 	bl	287ac <bt_addr_le_eq>
   16efe:	b940      	cbnz	r0, 16f12 <find_cf_cfg+0x36>
   16f00:	490c      	ldr	r1, [pc, #48]	; (16f34 <find_cf_cfg+0x58>)
   16f02:	f105 0010 	add.w	r0, r5, #16
   16f06:	f011 fc51 	bl	287ac <bt_addr_le_eq>
   16f0a:	b120      	cbz	r0, 16f16 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16f0c:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   16f10:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16f12:	1e68      	subs	r0, r5, #1
   16f14:	e7fc      	b.n	16f10 <find_cf_cfg+0x34>
	return NULL;
   16f16:	2000      	movs	r0, #0
   16f18:	e7fa      	b.n	16f10 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16f1a:	4630      	mov	r0, r6
   16f1c:	7c21      	ldrb	r1, [r4, #16]
   16f1e:	f104 0211 	add.w	r2, r4, #17
   16f22:	f010 fea4 	bl	27c6e <bt_conn_is_peer_addr_le>
   16f26:	2800      	cmp	r0, #0
   16f28:	d0f5      	beq.n	16f16 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16f2a:	f104 0010 	add.w	r0, r4, #16
   16f2e:	e7ef      	b.n	16f10 <find_cf_cfg+0x34>
   16f30:	2002281d 	.word	0x2002281d
   16f34:	0002f096 	.word	0x0002f096

00016f38 <find_sc_cfg>:
{
   16f38:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   16f3a:	4c0e      	ldr	r4, [pc, #56]	; (16f74 <find_sc_cfg+0x3c>)
{
   16f3c:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   16f3e:	7823      	ldrb	r3, [r4, #0]
{
   16f40:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   16f42:	4283      	cmp	r3, r0
   16f44:	d00c      	beq.n	16f60 <find_sc_cfg+0x28>
   16f46:	7b23      	ldrb	r3, [r4, #12]
   16f48:	42ab      	cmp	r3, r5
   16f4a:	d110      	bne.n	16f6e <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16f4c:	4631      	mov	r1, r6
   16f4e:	480a      	ldr	r0, [pc, #40]	; (16f78 <find_sc_cfg+0x40>)
   16f50:	f011 fc2c 	bl	287ac <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16f54:	b158      	cbz	r0, 16f6e <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16f56:	2301      	movs	r3, #1
			return &sc_cfg[i];
   16f58:	220c      	movs	r2, #12
   16f5a:	fb02 4003 	mla	r0, r2, r3, r4
   16f5e:	e007      	b.n	16f70 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16f60:	1c60      	adds	r0, r4, #1
   16f62:	f011 fc23 	bl	287ac <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16f66:	2800      	cmp	r0, #0
   16f68:	d0ed      	beq.n	16f46 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16f6a:	2300      	movs	r3, #0
   16f6c:	e7f4      	b.n	16f58 <find_sc_cfg+0x20>
	return NULL;
   16f6e:	2000      	movs	r0, #0
}
   16f70:	bd70      	pop	{r4, r5, r6, pc}
   16f72:	bf00      	nop
   16f74:	20022c28 	.word	0x20022c28
   16f78:	20022c35 	.word	0x20022c35

00016f7c <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   16f7c:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   16f7e:	1c4a      	adds	r2, r1, #1
{
   16f80:	460c      	mov	r4, r1
		if (conn) {
   16f82:	4605      	mov	r5, r0
   16f84:	b968      	cbnz	r0, 16fa2 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16f86:	4610      	mov	r0, r2
   16f88:	490d      	ldr	r1, [pc, #52]	; (16fc0 <find_ccc_cfg+0x44>)
   16f8a:	f011 fc0f 	bl	287ac <bt_addr_le_eq>
   16f8e:	b930      	cbnz	r0, 16f9e <find_ccc_cfg+0x22>
   16f90:	490b      	ldr	r1, [pc, #44]	; (16fc0 <find_ccc_cfg+0x44>)
   16f92:	f104 000b 	add.w	r0, r4, #11
   16f96:	f011 fc09 	bl	287ac <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   16f9a:	b170      	cbz	r0, 16fba <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   16f9c:	340a      	adds	r4, #10
   16f9e:	4620      	mov	r0, r4
   16fa0:	e00c      	b.n	16fbc <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   16fa2:	7809      	ldrb	r1, [r1, #0]
   16fa4:	f010 fe63 	bl	27c6e <bt_conn_is_peer_addr_le>
   16fa8:	2800      	cmp	r0, #0
   16faa:	d1f8      	bne.n	16f9e <find_ccc_cfg+0x22>
   16fac:	4628      	mov	r0, r5
   16fae:	7aa1      	ldrb	r1, [r4, #10]
   16fb0:	f104 020b 	add.w	r2, r4, #11
   16fb4:	f010 fe5b 	bl	27c6e <bt_conn_is_peer_addr_le>
   16fb8:	e7ef      	b.n	16f9a <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   16fba:	2000      	movs	r0, #0
}
   16fbc:	bd38      	pop	{r3, r4, r5, pc}
   16fbe:	bf00      	nop
   16fc0:	0002f096 	.word	0x0002f096

00016fc4 <read_ppcp>:
{
   16fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16fc6:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16fc8:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   16fcc:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16fce:	4a06      	ldr	r2, [pc, #24]	; (16fe8 <read_ppcp+0x24>)
   16fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   16fd4:	2308      	movs	r3, #8
   16fd6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   16fda:	9300      	str	r3, [sp, #0]
   16fdc:	446b      	add	r3, sp
   16fde:	f011 fbf9 	bl	287d4 <bt_gatt_attr_read.constprop.0>
}
   16fe2:	b005      	add	sp, #20
   16fe4:	f85d fb04 	ldr.w	pc, [sp], #4
   16fe8:	00280018 	.word	0x00280018

00016fec <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   16fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16ff0:	b085      	sub	sp, #20
   16ff2:	461e      	mov	r6, r3
   16ff4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   16ff8:	4681      	mov	r9, r0
   16ffa:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   16ffc:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   17000:	2b00      	cmp	r3, #0
   17002:	d14a      	bne.n	1709a <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   17004:	1e73      	subs	r3, r6, #1
   17006:	2b01      	cmp	r3, #1
   17008:	d84a      	bhi.n	170a0 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1700a:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1700c:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1700e:	7815      	ldrb	r5, [r2, #0]
   17010:	bf18      	it	ne
   17012:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   17014:	f7ff ffb2 	bl	16f7c <find_ccc_cfg>
	if (!cfg) {
   17018:	4604      	mov	r4, r0
   1701a:	b9e8      	cbnz	r0, 17058 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1701c:	b91d      	cbnz	r5, 17026 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1701e:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   17020:	b005      	add	sp, #20
   17022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   17026:	4641      	mov	r1, r8
   17028:	f7ff ffa8 	bl	16f7c <find_ccc_cfg>
		if (!cfg) {
   1702c:	4604      	mov	r4, r0
   1702e:	b958      	cbnz	r0, 17048 <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   17030:	4b1d      	ldr	r3, [pc, #116]	; (170a8 <bt_gatt_attr_write_ccc+0xbc>)
   17032:	9000      	str	r0, [sp, #0]
   17034:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17038:	2202      	movs	r2, #2
   1703a:	4603      	mov	r3, r0
   1703c:	491b      	ldr	r1, [pc, #108]	; (170ac <bt_gatt_attr_write_ccc+0xc0>)
   1703e:	f011 fc51 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17042:	f06f 0010 	mvn.w	r0, #16
   17046:	e7eb      	b.n	17020 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17048:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1704c:	3001      	adds	r0, #1
   1704e:	f011 fbb5 	bl	287bc <bt_addr_le_copy>
		cfg->id = conn->id;
   17052:	f899 3008 	ldrb.w	r3, [r9, #8]
   17056:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   17058:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1705c:	b98b      	cbnz	r3, 17082 <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   1705e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   17060:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   17064:	42ab      	cmp	r3, r5
   17066:	d003      	beq.n	17070 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   17068:	4641      	mov	r1, r8
   1706a:	4638      	mov	r0, r7
   1706c:	f011 fb26 	bl	286bc <gatt_ccc_changed>
	if (!value) {
   17070:	2d00      	cmp	r5, #0
   17072:	d1d4      	bne.n	1701e <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17074:	490e      	ldr	r1, [pc, #56]	; (170b0 <bt_gatt_attr_write_ccc+0xc4>)
   17076:	1c60      	adds	r0, r4, #1
   17078:	f011 fba0 	bl	287bc <bt_addr_le_copy>
	cfg->id = 0U;
   1707c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1707e:	8125      	strh	r5, [r4, #8]
}
   17080:	e7cd      	b.n	1701e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   17082:	462a      	mov	r2, r5
   17084:	4639      	mov	r1, r7
   17086:	4648      	mov	r0, r9
   17088:	4798      	blx	r3
		if (write < 0) {
   1708a:	2800      	cmp	r0, #0
   1708c:	dbc8      	blt.n	17020 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1708e:	3801      	subs	r0, #1
   17090:	2801      	cmp	r0, #1
   17092:	d9e4      	bls.n	1705e <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   17094:	f06f 000d 	mvn.w	r0, #13
   17098:	e7c2      	b.n	17020 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1709a:	f06f 0006 	mvn.w	r0, #6
   1709e:	e7bf      	b.n	17020 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   170a0:	f06f 000c 	mvn.w	r0, #12
   170a4:	e7bc      	b.n	17020 <bt_gatt_attr_write_ccc+0x34>
   170a6:	bf00      	nop
   170a8:	00030515 	.word	0x00030515
   170ac:	0002c08c 	.word	0x0002c08c
   170b0:	0002f096 	.word	0x0002f096

000170b4 <clear_cf_cfg>:
{
   170b4:	4602      	mov	r2, r0
   170b6:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   170b8:	4907      	ldr	r1, [pc, #28]	; (170d8 <clear_cf_cfg+0x24>)
   170ba:	3001      	adds	r0, #1
   170bc:	f011 fb7e 	bl	287bc <bt_addr_le_copy>
   170c0:	2300      	movs	r3, #0
   170c2:	320c      	adds	r2, #12
   170c4:	f802 3c04 	strb.w	r3, [r2, #-4]
   170c8:	e8d2 1fef 	ldaex	r1, [r2]
   170cc:	e8c2 3fe0 	stlex	r0, r3, [r2]
   170d0:	2800      	cmp	r0, #0
   170d2:	d1f9      	bne.n	170c8 <clear_cf_cfg+0x14>
}
   170d4:	bd08      	pop	{r3, pc}
   170d6:	bf00      	nop
   170d8:	0002f096 	.word	0x0002f096

000170dc <sc_save>:
{
   170dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   170e0:	4680      	mov	r8, r0
   170e2:	460f      	mov	r7, r1
   170e4:	4616      	mov	r6, r2
   170e6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   170e8:	f7ff ff26 	bl	16f38 <find_sc_cfg>
	if (!cfg) {
   170ec:	4604      	mov	r4, r0
   170ee:	b9a8      	cbnz	r0, 1711c <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   170f0:	4911      	ldr	r1, [pc, #68]	; (17138 <sc_save+0x5c>)
   170f2:	f7ff ff21 	bl	16f38 <find_sc_cfg>
		if (!cfg) {
   170f6:	4604      	mov	r4, r0
   170f8:	b958      	cbnz	r0, 17112 <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   170fa:	4b10      	ldr	r3, [pc, #64]	; (1713c <sc_save+0x60>)
   170fc:	2201      	movs	r2, #1
   170fe:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17102:	490f      	ldr	r1, [pc, #60]	; (17140 <sc_save+0x64>)
   17104:	4603      	mov	r3, r0
   17106:	9000      	str	r0, [sp, #0]
   17108:	f011 fbec 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
}
   1710c:	b004      	add	sp, #16
   1710e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   17112:	4639      	mov	r1, r7
		cfg->id = id;
   17114:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   17118:	f011 fb50 	bl	287bc <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1711c:	8922      	ldrh	r2, [r4, #8]
   1711e:	8963      	ldrh	r3, [r4, #10]
   17120:	b91a      	cbnz	r2, 1712a <sc_save+0x4e>
   17122:	b92b      	cbnz	r3, 17130 <sc_save+0x54>
		cfg->data.start = start;
   17124:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   17126:	8165      	strh	r5, [r4, #10]
   17128:	e7f0      	b.n	1710c <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   1712a:	42b2      	cmp	r2, r6
		*start = new_start;
   1712c:	bf88      	it	hi
   1712e:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   17130:	42ab      	cmp	r3, r5
   17132:	d2eb      	bcs.n	1710c <sc_save+0x30>
   17134:	e7f7      	b.n	17126 <sc_save+0x4a>
   17136:	bf00      	nop
   17138:	0002f096 	.word	0x0002f096
   1713c:	0003052f 	.word	0x0003052f
   17140:	0002c08c 	.word	0x0002c08c

00017144 <cf_write>:
{
   17144:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17148:	461f      	mov	r7, r3
   1714a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1714e:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   17150:	2b01      	cmp	r3, #1
{
   17152:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   17154:	d83b      	bhi.n	171ce <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   17156:	443b      	add	r3, r7
   17158:	2b01      	cmp	r3, #1
   1715a:	463d      	mov	r5, r7
   1715c:	dc3a      	bgt.n	171d4 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1715e:	f7ff febd 	bl	16edc <find_cf_cfg>
	if (!cfg) {
   17162:	4604      	mov	r4, r0
   17164:	b990      	cbnz	r0, 1718c <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   17166:	f7ff feb9 	bl	16edc <find_cf_cfg>
	if (!cfg) {
   1716a:	4604      	mov	r4, r0
   1716c:	b970      	cbnz	r0, 1718c <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   1716e:	4b1c      	ldr	r3, [pc, #112]	; (171e0 <cf_write+0x9c>)
   17170:	2202      	movs	r2, #2
   17172:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17176:	491b      	ldr	r1, [pc, #108]	; (171e4 <cf_write+0xa0>)
   17178:	4603      	mov	r3, r0
   1717a:	9000      	str	r0, [sp, #0]
   1717c:	f011 fbb2 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17180:	f06f 0510 	mvn.w	r5, #16
}
   17184:	4628      	mov	r0, r5
   17186:	b004      	add	sp, #16
   17188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1718c:	b197      	cbz	r7, 171b4 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   1718e:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17190:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   17192:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17196:	fa21 f003 	lsr.w	r0, r1, r3
   1719a:	07c7      	lsls	r7, r0, #31
   1719c:	d503      	bpl.n	171a6 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1719e:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   171a2:	07c0      	lsls	r0, r0, #31
   171a4:	d519      	bpl.n	171da <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   171a6:	3301      	adds	r3, #1
   171a8:	2b03      	cmp	r3, #3
   171aa:	d1f4      	bne.n	17196 <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   171ac:	f002 0207 	and.w	r2, r2, #7
   171b0:	4311      	orrs	r1, r2
   171b2:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   171b4:	f106 0190 	add.w	r1, r6, #144	; 0x90
   171b8:	1c60      	adds	r0, r4, #1
   171ba:	f011 faff 	bl	287bc <bt_addr_le_copy>
	cfg->id = conn->id;
   171be:	4620      	mov	r0, r4
   171c0:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   171c2:	2100      	movs	r1, #0
	cfg->id = conn->id;
   171c4:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   171c8:	f011 fbbc 	bl	28944 <atomic_set_bit>
	return len;
   171cc:	e7da      	b.n	17184 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   171ce:	f06f 0506 	mvn.w	r5, #6
   171d2:	e7d7      	b.n	17184 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   171d4:	f06f 050c 	mvn.w	r5, #12
   171d8:	e7d4      	b.n	17184 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   171da:	f06f 0512 	mvn.w	r5, #18
   171de:	e7d1      	b.n	17184 <cf_write+0x40>
   171e0:	0003054e 	.word	0x0003054e
   171e4:	0002c08c 	.word	0x0002c08c

000171e8 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   171e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   171ec:	4b28      	ldr	r3, [pc, #160]	; (17290 <disconnected_cb+0xa8>)
{
   171ee:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   171f0:	6882      	ldr	r2, [r0, #8]
{
   171f2:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   171f4:	429a      	cmp	r2, r3
   171f6:	d12b      	bne.n	17250 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   171f8:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   171fa:	8aab      	ldrh	r3, [r5, #20]
   171fc:	b343      	cbz	r3, 17250 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   171fe:	f04f 0800 	mov.w	r8, #0
   17202:	1c6c      	adds	r4, r5, #1
   17204:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   17208:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1720c:	b19b      	cbz	r3, 17236 <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1720e:	4622      	mov	r2, r4
   17210:	4630      	mov	r0, r6
   17212:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   17216:	f010 fd2a 	bl	27c6e <bt_conn_is_peer_addr_le>
   1721a:	b9e0      	cbnz	r0, 17256 <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1721c:	4621      	mov	r1, r4
   1721e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   17222:	f7fe f9b5 	bl	15590 <bt_conn_lookup_addr_le>
			if (tmp) {
   17226:	b130      	cbz	r0, 17236 <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   17228:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   1722a:	2b07      	cmp	r3, #7
   1722c:	bf08      	it	eq
   1722e:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   17232:	f7fd fee1 	bl	14ff8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17236:	340a      	adds	r4, #10
   17238:	454c      	cmp	r4, r9
   1723a:	d1e5      	bne.n	17208 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1723c:	f1b8 0f00 	cmp.w	r8, #0
   17240:	d106      	bne.n	17250 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   17242:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   17244:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   17248:	b113      	cbz	r3, 17250 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   1724a:	4641      	mov	r1, r8
   1724c:	4638      	mov	r0, r7
   1724e:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   17250:	2001      	movs	r0, #1
   17252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17256:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   1725a:	4651      	mov	r1, sl
   1725c:	7a30      	ldrb	r0, [r6, #8]
   1725e:	f010 fa2b 	bl	276b8 <bt_addr_le_is_bonded>
   17262:	b978      	cbnz	r0, 17284 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   17264:	4b0b      	ldr	r3, [pc, #44]	; (17294 <disconnected_cb+0xac>)
   17266:	429d      	cmp	r5, r3
   17268:	d102      	bne.n	17270 <disconnected_cb+0x88>
					sc_clear(conn);
   1726a:	4630      	mov	r0, r6
   1726c:	f011 fb49 	bl	28902 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17270:	4620      	mov	r0, r4
   17272:	4909      	ldr	r1, [pc, #36]	; (17298 <disconnected_cb+0xb0>)
   17274:	f011 faa2 	bl	287bc <bt_addr_le_copy>
	cfg->id = 0U;
   17278:	2300      	movs	r3, #0
   1727a:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   1727e:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   17282:	e7d8      	b.n	17236 <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17284:	4651      	mov	r1, sl
   17286:	4620      	mov	r0, r4
   17288:	f011 fa98 	bl	287bc <bt_addr_le_copy>
   1728c:	e7d3      	b.n	17236 <disconnected_cb+0x4e>
   1728e:	bf00      	nop
   17290:	00016fed 	.word	0x00016fed
   17294:	20008508 	.word	0x20008508
   17298:	0002f096 	.word	0x0002f096

0001729c <sc_indicate_rsp>:
{
   1729c:	b510      	push	{r4, lr}
   1729e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   172a0:	4811      	ldr	r0, [pc, #68]	; (172e8 <sc_indicate_rsp+0x4c>)
   172a2:	e8d0 3fef 	ldaex	r3, [r0]
   172a6:	f023 0302 	bic.w	r3, r3, #2
   172aa:	e8c0 3fe2 	stlex	r2, r3, [r0]
   172ae:	2a00      	cmp	r2, #0
   172b0:	d1f7      	bne.n	172a2 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   172b2:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   172b6:	07da      	lsls	r2, r3, #31
   172b8:	d504      	bpl.n	172c4 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   172ba:	2200      	movs	r2, #0
   172bc:	2300      	movs	r3, #0
   172be:	3830      	subs	r0, #48	; 0x30
   172c0:	f00a fab2 	bl	21828 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   172c4:	4620      	mov	r0, r4
   172c6:	f011 f9cc 	bl	28662 <bt_att_fixed_chan_only>
   172ca:	b160      	cbz	r0, 172e6 <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   172cc:	4620      	mov	r0, r4
   172ce:	f7ff fe05 	bl	16edc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   172d2:	b140      	cbz	r0, 172e6 <sc_indicate_rsp+0x4a>
   172d4:	7a03      	ldrb	r3, [r0, #8]
   172d6:	07db      	lsls	r3, r3, #31
   172d8:	d505      	bpl.n	172e6 <sc_indicate_rsp+0x4a>
}
   172da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   172de:	2100      	movs	r1, #0
   172e0:	300c      	adds	r0, #12
   172e2:	f011 bb2f 	b.w	28944 <atomic_set_bit>
}
   172e6:	bd10      	pop	{r4, pc}
   172e8:	20009a18 	.word	0x20009a18

000172ec <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   172ec:	2201      	movs	r2, #1
{
   172ee:	b510      	push	{r4, lr}
   172f0:	4b24      	ldr	r3, [pc, #144]	; (17384 <bt_gatt_init+0x98>)
   172f2:	e8d3 1fef 	ldaex	r1, [r3]
   172f6:	2900      	cmp	r1, #0
   172f8:	d103      	bne.n	17302 <bt_gatt_init+0x16>
   172fa:	e8c3 2fe0 	stlex	r0, r2, [r3]
   172fe:	2800      	cmp	r0, #0
   17300:	d1f7      	bne.n	172f2 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   17302:	d13e      	bne.n	17382 <bt_gatt_init+0x96>
   17304:	4b20      	ldr	r3, [pc, #128]	; (17388 <bt_gatt_init+0x9c>)
   17306:	e8d3 1fef 	ldaex	r1, [r3]
   1730a:	2900      	cmp	r1, #0
   1730c:	d103      	bne.n	17316 <bt_gatt_init+0x2a>
   1730e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17312:	2800      	cmp	r0, #0
   17314:	d1f7      	bne.n	17306 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   17316:	d120      	bne.n	1735a <bt_gatt_init+0x6e>
   17318:	2000      	movs	r0, #0
   1731a:	491c      	ldr	r1, [pc, #112]	; (1738c <bt_gatt_init+0xa0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1731c:	4a1c      	ldr	r2, [pc, #112]	; (17390 <bt_gatt_init+0xa4>)
   1731e:	880b      	ldrh	r3, [r1, #0]
   17320:	4c1c      	ldr	r4, [pc, #112]	; (17394 <bt_gatt_init+0xa8>)
   17322:	42a2      	cmp	r2, r4
   17324:	d916      	bls.n	17354 <bt_gatt_init+0x68>
   17326:	b100      	cbz	r0, 1732a <bt_gatt_init+0x3e>
   17328:	800b      	strh	r3, [r1, #0]
   1732a:	491b      	ldr	r1, [pc, #108]	; (17398 <bt_gatt_init+0xac>)
   1732c:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   17330:	4a1a      	ldr	r2, [pc, #104]	; (1739c <bt_gatt_init+0xb0>)
   17332:	481b      	ldr	r0, [pc, #108]	; (173a0 <bt_gatt_init+0xb4>)
   17334:	f00e ff93 	bl	2625e <assert_print>
   17338:	481a      	ldr	r0, [pc, #104]	; (173a4 <bt_gatt_init+0xb8>)
   1733a:	f00e ff90 	bl	2625e <assert_print>
   1733e:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   17342:	4816      	ldr	r0, [pc, #88]	; (1739c <bt_gatt_init+0xb0>)
   17344:	f00e ff84 	bl	26250 <assert_post_action>
		last_static_handle += svc->attr_count;
   17348:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1734a:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   1734c:	4403      	add	r3, r0
   1734e:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17350:	2001      	movs	r0, #1
   17352:	e7e6      	b.n	17322 <bt_gatt_init+0x36>
   17354:	d3f8      	bcc.n	17348 <bt_gatt_init+0x5c>
   17356:	b100      	cbz	r0, 1735a <bt_gatt_init+0x6e>
   17358:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1735a:	2200      	movs	r2, #0
   1735c:	4b12      	ldr	r3, [pc, #72]	; (173a8 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1735e:	4913      	ldr	r1, [pc, #76]	; (173ac <bt_gatt_init+0xc0>)
   17360:	4813      	ldr	r0, [pc, #76]	; (173b0 <bt_gatt_init+0xc4>)
	list->tail = NULL;
   17362:	e9c3 2200 	strd	r2, r2, [r3]
   17366:	f00a f943 	bl	215f0 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1736a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1736e:	2300      	movs	r3, #0
   17370:	480f      	ldr	r0, [pc, #60]	; (173b0 <bt_gatt_init+0xc4>)
   17372:	f7fa fea3 	bl	120bc <bt_long_wq_schedule>
}
   17376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1737a:	490e      	ldr	r1, [pc, #56]	; (173b4 <bt_gatt_init+0xc8>)
   1737c:	480e      	ldr	r0, [pc, #56]	; (173b8 <bt_gatt_init+0xcc>)
   1737e:	f00a b937 	b.w	215f0 <k_work_init_delayable>
}
   17382:	bd10      	pop	{r4, pc}
   17384:	20022840 	.word	0x20022840
   17388:	2002283c 	.word	0x2002283c
   1738c:	20022c40 	.word	0x20022c40
   17390:	0002c01c 	.word	0x0002c01c
   17394:	0002c034 	.word	0x0002c034
   17398:	000305b1 	.word	0x000305b1
   1739c:	0003057a 	.word	0x0003057a
   173a0:	0002d095 	.word	0x0002d095
   173a4:	0002e1ea 	.word	0x0002e1ea
   173a8:	20022844 	.word	0x20022844
   173ac:	00028a31 	.word	0x00028a31
   173b0:	20009970 	.word	0x20009970
   173b4:	00017a35 	.word	0x00017a35
   173b8:	200099e8 	.word	0x200099e8

000173bc <bt_gatt_attr_get_handle>:
	if (!attr) {
   173bc:	4603      	mov	r3, r0
{
   173be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   173c2:	b398      	cbz	r0, 1742c <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   173c4:	8a00      	ldrh	r0, [r0, #16]
   173c6:	bb88      	cbnz	r0, 1742c <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   173c8:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   173ca:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   173ce:	4919      	ldr	r1, [pc, #100]	; (17434 <bt_gatt_attr_get_handle+0x78>)
   173d0:	f8df e064 	ldr.w	lr, [pc, #100]	; 17438 <bt_gatt_attr_get_handle+0x7c>
   173d4:	4571      	cmp	r1, lr
   173d6:	d928      	bls.n	1742a <bt_gatt_attr_get_handle+0x6e>
   173d8:	4918      	ldr	r1, [pc, #96]	; (1743c <bt_gatt_attr_get_handle+0x80>)
   173da:	f240 635d 	movw	r3, #1629	; 0x65d
   173de:	4a18      	ldr	r2, [pc, #96]	; (17440 <bt_gatt_attr_get_handle+0x84>)
   173e0:	4818      	ldr	r0, [pc, #96]	; (17444 <bt_gatt_attr_get_handle+0x88>)
   173e2:	f00e ff3c 	bl	2625e <assert_print>
   173e6:	4818      	ldr	r0, [pc, #96]	; (17448 <bt_gatt_attr_get_handle+0x8c>)
   173e8:	f00e ff39 	bl	2625e <assert_print>
   173ec:	f240 615d 	movw	r1, #1629	; 0x65d
   173f0:	4813      	ldr	r0, [pc, #76]	; (17440 <bt_gatt_attr_get_handle+0x84>)
   173f2:	f00e ff2d 	bl	26250 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   173f6:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   173fa:	42bb      	cmp	r3, r7
   173fc:	d304      	bcc.n	17408 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   173fe:	fb0c 7206 	mla	r2, ip, r6, r7
   17402:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17404:	4293      	cmp	r3, r2
   17406:	d90e      	bls.n	17426 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   17408:	4434      	add	r4, r6
   1740a:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1740c:	4614      	mov	r4, r2
   1740e:	3108      	adds	r1, #8
   17410:	e7e0      	b.n	173d4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   17412:	fb0c 7805 	mla	r8, ip, r5, r7
   17416:	4543      	cmp	r3, r8
   17418:	d00a      	beq.n	17430 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1741a:	3501      	adds	r5, #1
   1741c:	1962      	adds	r2, r4, r5
   1741e:	42b5      	cmp	r5, r6
   17420:	b292      	uxth	r2, r2
   17422:	d1f6      	bne.n	17412 <bt_gatt_attr_get_handle+0x56>
   17424:	e7f2      	b.n	1740c <bt_gatt_attr_get_handle+0x50>
   17426:	2500      	movs	r5, #0
   17428:	e7f8      	b.n	1741c <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1742a:	d3e4      	bcc.n	173f6 <bt_gatt_attr_get_handle+0x3a>
}
   1742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17430:	4610      	mov	r0, r2
   17432:	e7fb      	b.n	1742c <bt_gatt_attr_get_handle+0x70>
   17434:	0002c01c 	.word	0x0002c01c
   17438:	0002c034 	.word	0x0002c034
   1743c:	000305aa 	.word	0x000305aa
   17440:	0003057a 	.word	0x0003057a
   17444:	0002d095 	.word	0x0002d095
   17448:	0002e1ea 	.word	0x0002e1ea

0001744c <bt_gatt_foreach_attr_type>:
{
   1744c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17450:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   17452:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   17456:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1745a:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   1745c:	2d00      	cmp	r5, #0
   1745e:	bf08      	it	eq
   17460:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   17462:	4b2b      	ldr	r3, [pc, #172]	; (17510 <bt_gatt_foreach_attr_type+0xc4>)
{
   17464:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   17466:	881b      	ldrh	r3, [r3, #0]
{
   17468:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   1746a:	4283      	cmp	r3, r0
   1746c:	d232      	bcs.n	174d4 <bt_gatt_foreach_attr_type+0x88>
}
   1746e:	b003      	add	sp, #12
   17470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17474:	4640      	mov	r0, r8
   17476:	5889      	ldr	r1, [r1, r2]
   17478:	9301      	str	r3, [sp, #4]
   1747a:	f00f ffd0 	bl	2741e <bt_uuid_cmp>
   1747e:	9b01      	ldr	r3, [sp, #4]
   17480:	b190      	cbz	r0, 174a8 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17482:	3401      	adds	r4, #1
   17484:	f10a 0a01 	add.w	sl, sl, #1
   17488:	b2a4      	uxth	r4, r4
   1748a:	6873      	ldr	r3, [r6, #4]
   1748c:	4553      	cmp	r3, sl
   1748e:	d92c      	bls.n	174ea <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   17490:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17492:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   17494:	429c      	cmp	r4, r3
   17496:	d8ea      	bhi.n	1746e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   17498:	42bc      	cmp	r4, r7
   1749a:	d3f2      	bcc.n	17482 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1749c:	fb0b f20a 	mul.w	r2, fp, sl
   174a0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   174a2:	f1b8 0f00 	cmp.w	r8, #0
   174a6:	d1e5      	bne.n	17474 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   174a8:	f1b9 0f00 	cmp.w	r9, #0
   174ac:	d10b      	bne.n	174c6 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   174ae:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   174b0:	4618      	mov	r0, r3
	*num_matches -= 1;
   174b2:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   174b4:	4621      	mov	r1, r4
   174b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   174b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   174ba:	4798      	blx	r3
	if (!*num_matches) {
   174bc:	2d00      	cmp	r5, #0
   174be:	d0d6      	beq.n	1746e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   174c0:	2800      	cmp	r0, #0
   174c2:	d1de      	bne.n	17482 <bt_gatt_foreach_attr_type+0x36>
   174c4:	e7d3      	b.n	1746e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   174c6:	68da      	ldr	r2, [r3, #12]
   174c8:	4591      	cmp	r9, r2
   174ca:	d1da      	bne.n	17482 <bt_gatt_foreach_attr_type+0x36>
   174cc:	e7ef      	b.n	174ae <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   174ce:	f04f 0a00 	mov.w	sl, #0
   174d2:	e7da      	b.n	1748a <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   174d4:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   174d6:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   174da:	4e0e      	ldr	r6, [pc, #56]	; (17514 <bt_gatt_foreach_attr_type+0xc8>)
   174dc:	e006      	b.n	174ec <bt_gatt_foreach_attr_type+0xa0>
   174de:	d2c6      	bcs.n	1746e <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   174e0:	6873      	ldr	r3, [r6, #4]
   174e2:	4423      	add	r3, r4
   174e4:	42bb      	cmp	r3, r7
   174e6:	d2f2      	bcs.n	174ce <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   174e8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   174ea:	3608      	adds	r6, #8
   174ec:	4b0a      	ldr	r3, [pc, #40]	; (17518 <bt_gatt_foreach_attr_type+0xcc>)
   174ee:	429e      	cmp	r6, r3
   174f0:	d9f5      	bls.n	174de <bt_gatt_foreach_attr_type+0x92>
   174f2:	490a      	ldr	r1, [pc, #40]	; (1751c <bt_gatt_foreach_attr_type+0xd0>)
   174f4:	f240 7321 	movw	r3, #1825	; 0x721
   174f8:	4a09      	ldr	r2, [pc, #36]	; (17520 <bt_gatt_foreach_attr_type+0xd4>)
   174fa:	480a      	ldr	r0, [pc, #40]	; (17524 <bt_gatt_foreach_attr_type+0xd8>)
   174fc:	f00e feaf 	bl	2625e <assert_print>
   17500:	4809      	ldr	r0, [pc, #36]	; (17528 <bt_gatt_foreach_attr_type+0xdc>)
   17502:	f00e feac 	bl	2625e <assert_print>
   17506:	f240 7121 	movw	r1, #1825	; 0x721
   1750a:	4805      	ldr	r0, [pc, #20]	; (17520 <bt_gatt_foreach_attr_type+0xd4>)
   1750c:	f00e fea0 	bl	26250 <assert_post_action>
   17510:	20022c40 	.word	0x20022c40
   17514:	0002c01c 	.word	0x0002c01c
   17518:	0002c034 	.word	0x0002c034
   1751c:	000305aa 	.word	0x000305aa
   17520:	0003057a 	.word	0x0003057a
   17524:	0002d095 	.word	0x0002d095
   17528:	0002e1ea 	.word	0x0002e1ea

0001752c <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   1752c:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   1752e:	b510      	push	{r4, lr}
   17530:	b0cc      	sub	sp, #304	; 0x130
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17532:	aa20      	add	r2, sp, #128	; 0x80
   17534:	a904      	add	r1, sp, #16
   17536:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   17538:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1753c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17540:	f00f fbd0 	bl	26ce4 <tc_cmac_setup>
   17544:	4603      	mov	r3, r0
   17546:	b948      	cbnz	r0, 1755c <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   17548:	4a17      	ldr	r2, [pc, #92]	; (175a8 <db_hash_gen.constprop.0+0x7c>)
		LOG_ERR("Unable to calculate hash");
   1754a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1754e:	4917      	ldr	r1, [pc, #92]	; (175ac <db_hash_gen.constprop.0+0x80>)
   17550:	2201      	movs	r2, #1
   17552:	9300      	str	r3, [sp, #0]
   17554:	f011 f9c6 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
}
   17558:	b04c      	add	sp, #304	; 0x130
   1755a:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1755c:	ab08      	add	r3, sp, #32
   1755e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17562:	2001      	movs	r0, #1
   17564:	4a12      	ldr	r2, [pc, #72]	; (175b0 <db_hash_gen.constprop.0+0x84>)
   17566:	f011 fa58 	bl	28a1a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1756a:	4812      	ldr	r0, [pc, #72]	; (175b4 <db_hash_gen.constprop.0+0x88>)
   1756c:	a908      	add	r1, sp, #32
   1756e:	f00f fc4e 	bl	26e0e <tc_cmac_final>
   17572:	4603      	mov	r3, r0
   17574:	b908      	cbnz	r0, 1757a <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   17576:	4a10      	ldr	r2, [pc, #64]	; (175b8 <db_hash_gen.constprop.0+0x8c>)
   17578:	e7e7      	b.n	1754a <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1757a:	2208      	movs	r2, #8
   1757c:	4b0d      	ldr	r3, [pc, #52]	; (175b4 <db_hash_gen.constprop.0+0x88>)
   1757e:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   17582:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17584:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   17588:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1758a:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1758e:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   17590:	d1f7      	bne.n	17582 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17592:	4b0a      	ldr	r3, [pc, #40]	; (175bc <db_hash_gen.constprop.0+0x90>)
   17594:	e8d3 1fef 	ldaex	r1, [r3]
   17598:	f041 0104 	orr.w	r1, r1, #4
   1759c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   175a0:	2a00      	cmp	r2, #0
   175a2:	d0d9      	beq.n	17558 <db_hash_gen.constprop.0+0x2c>
   175a4:	e7f6      	b.n	17594 <db_hash_gen.constprop.0+0x68>
   175a6:	bf00      	nop
   175a8:	000305d9 	.word	0x000305d9
   175ac:	0002c08c 	.word	0x0002c08c
   175b0:	00028707 	.word	0x00028707
   175b4:	20009960 	.word	0x20009960
   175b8:	000305f2 	.word	0x000305f2
   175bc:	20009a18 	.word	0x20009a18

000175c0 <db_hash_read>:
{
   175c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   175c4:	4914      	ldr	r1, [pc, #80]	; (17618 <db_hash_read+0x58>)
{
   175c6:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   175c8:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   175cc:	4614      	mov	r4, r2
   175ce:	461d      	mov	r5, r3
   175d0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   175d4:	f00a f988 	bl	218e8 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   175d8:	4b10      	ldr	r3, [pc, #64]	; (1761c <db_hash_read+0x5c>)
   175da:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   175de:	0759      	lsls	r1, r3, #29
   175e0:	d401      	bmi.n	175e6 <db_hash_read+0x26>
		db_hash_gen(true);
   175e2:	f7ff ffa3 	bl	1752c <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   175e6:	4630      	mov	r0, r6
   175e8:	f7ff fc78 	bl	16edc <find_cf_cfg>
	if (cfg &&
   175ec:	b150      	cbz	r0, 17604 <db_hash_read+0x44>
   175ee:	7a03      	ldrb	r3, [r0, #8]
   175f0:	07da      	lsls	r2, r3, #31
   175f2:	d507      	bpl.n	17604 <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   175f4:	300c      	adds	r0, #12
   175f6:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   175fa:	07db      	lsls	r3, r3, #31
   175fc:	d402      	bmi.n	17604 <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   175fe:	2101      	movs	r1, #1
   17600:	f011 f9a0 	bl	28944 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17604:	2310      	movs	r3, #16
   17606:	463a      	mov	r2, r7
   17608:	9306      	str	r3, [sp, #24]
   1760a:	4629      	mov	r1, r5
   1760c:	4620      	mov	r0, r4
}
   1760e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17612:	4b03      	ldr	r3, [pc, #12]	; (17620 <db_hash_read+0x60>)
   17614:	f011 b8de 	b.w	287d4 <bt_gatt_attr_read.constprop.0>
   17618:	200099a0 	.word	0x200099a0
   1761c:	20009a18 	.word	0x20009a18
   17620:	20009960 	.word	0x20009960

00017624 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   17624:	2300      	movs	r3, #0
{
   17626:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   17628:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1762a:	f7ff fec7 	bl	173bc <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1762e:	1c41      	adds	r1, r0, #1
   17630:	b289      	uxth	r1, r1
   17632:	4608      	mov	r0, r1
   17634:	4a03      	ldr	r2, [pc, #12]	; (17644 <bt_gatt_attr_next+0x20>)
   17636:	ab01      	add	r3, sp, #4
   17638:	f011 f9ef 	bl	28a1a <bt_gatt_foreach_attr>
}
   1763c:	9801      	ldr	r0, [sp, #4]
   1763e:	b003      	add	sp, #12
   17640:	f85d fb04 	ldr.w	pc, [sp], #4
   17644:	000286b7 	.word	0x000286b7

00017648 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   17648:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1764c:	460c      	mov	r4, r1
   1764e:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   17650:	4605      	mov	r5, r0
   17652:	b970      	cbnz	r0, 17672 <bt_gatt_is_subscribed+0x2a>
   17654:	4960      	ldr	r1, [pc, #384]	; (177d8 <bt_gatt_is_subscribed+0x190>)
   17656:	f640 434d 	movw	r3, #3149	; 0xc4d
   1765a:	4a60      	ldr	r2, [pc, #384]	; (177dc <bt_gatt_is_subscribed+0x194>)
   1765c:	4860      	ldr	r0, [pc, #384]	; (177e0 <bt_gatt_is_subscribed+0x198>)
   1765e:	f00e fdfe 	bl	2625e <assert_print>
   17662:	4860      	ldr	r0, [pc, #384]	; (177e4 <bt_gatt_is_subscribed+0x19c>)
   17664:	f00e fdfb 	bl	2625e <assert_print>
   17668:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   1766c:	485b      	ldr	r0, [pc, #364]	; (177dc <bt_gatt_is_subscribed+0x194>)
   1766e:	f00e fdef 	bl	26250 <assert_post_action>
   17672:	b961      	cbnz	r1, 1768e <bt_gatt_is_subscribed+0x46>
   17674:	495c      	ldr	r1, [pc, #368]	; (177e8 <bt_gatt_is_subscribed+0x1a0>)
   17676:	f640 434e 	movw	r3, #3150	; 0xc4e
   1767a:	4a58      	ldr	r2, [pc, #352]	; (177dc <bt_gatt_is_subscribed+0x194>)
   1767c:	4858      	ldr	r0, [pc, #352]	; (177e0 <bt_gatt_is_subscribed+0x198>)
   1767e:	f00e fdee 	bl	2625e <assert_print>
   17682:	4858      	ldr	r0, [pc, #352]	; (177e4 <bt_gatt_is_subscribed+0x19c>)
   17684:	f00e fdeb 	bl	2625e <assert_print>
   17688:	f640 414e 	movw	r1, #3150	; 0xc4e
   1768c:	e7ee      	b.n	1766c <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   1768e:	7b43      	ldrb	r3, [r0, #13]
   17690:	2b07      	cmp	r3, #7
   17692:	d110      	bne.n	176b6 <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   17694:	2300      	movs	r3, #0
   17696:	f88d 300c 	strb.w	r3, [sp, #12]
   1769a:	f642 0303 	movw	r3, #10243	; 0x2803
   1769e:	6820      	ldr	r0, [r4, #0]
   176a0:	a903      	add	r1, sp, #12
   176a2:	f8ad 300e 	strh.w	r3, [sp, #14]
   176a6:	f00f feba 	bl	2741e <bt_uuid_cmp>
   176aa:	b9d0      	cbnz	r0, 176e2 <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   176ac:	68e3      	ldr	r3, [r4, #12]
   176ae:	799b      	ldrb	r3, [r3, #6]
   176b0:	f013 0f30 	tst.w	r3, #48	; 0x30
   176b4:	d103      	bne.n	176be <bt_gatt_is_subscribed+0x76>
		return false;
   176b6:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   176b8:	b004      	add	sp, #16
   176ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   176be:	4620      	mov	r0, r4
   176c0:	f7ff ffb0 	bl	17624 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   176c4:	4604      	mov	r4, r0
   176c6:	b960      	cbnz	r0, 176e2 <bt_gatt_is_subscribed+0x9a>
   176c8:	4947      	ldr	r1, [pc, #284]	; (177e8 <bt_gatt_is_subscribed+0x1a0>)
   176ca:	f640 435f 	movw	r3, #3167	; 0xc5f
   176ce:	4a43      	ldr	r2, [pc, #268]	; (177dc <bt_gatt_is_subscribed+0x194>)
   176d0:	4843      	ldr	r0, [pc, #268]	; (177e0 <bt_gatt_is_subscribed+0x198>)
   176d2:	f00e fdc4 	bl	2625e <assert_print>
   176d6:	4845      	ldr	r0, [pc, #276]	; (177ec <bt_gatt_is_subscribed+0x1a4>)
   176d8:	f00e fdc1 	bl	2625e <assert_print>
   176dc:	f640 415f 	movw	r1, #3167	; 0xc5f
   176e0:	e7c4      	b.n	1766c <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   176e2:	2300      	movs	r3, #0
   176e4:	6820      	ldr	r0, [r4, #0]
   176e6:	f88d 300c 	strb.w	r3, [sp, #12]
   176ea:	f642 1302 	movw	r3, #10498	; 0x2902
   176ee:	a903      	add	r1, sp, #12
   176f0:	f8ad 300e 	strh.w	r3, [sp, #14]
   176f4:	f00f fe93 	bl	2741e <bt_uuid_cmp>
   176f8:	b188      	cbz	r0, 1771e <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   176fa:	4620      	mov	r0, r4
   176fc:	f7ff ff92 	bl	17624 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17700:	4604      	mov	r4, r0
   17702:	b960      	cbnz	r0, 1771e <bt_gatt_is_subscribed+0xd6>
   17704:	4938      	ldr	r1, [pc, #224]	; (177e8 <bt_gatt_is_subscribed+0x1a0>)
   17706:	f640 4365 	movw	r3, #3173	; 0xc65
   1770a:	4a34      	ldr	r2, [pc, #208]	; (177dc <bt_gatt_is_subscribed+0x194>)
   1770c:	4834      	ldr	r0, [pc, #208]	; (177e0 <bt_gatt_is_subscribed+0x198>)
   1770e:	f00e fda6 	bl	2625e <assert_print>
   17712:	4836      	ldr	r0, [pc, #216]	; (177ec <bt_gatt_is_subscribed+0x1a4>)
   17714:	f00e fda3 	bl	2625e <assert_print>
   17718:	f640 4165 	movw	r1, #3173	; 0xc65
   1771c:	e7a6      	b.n	1766c <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1771e:	2700      	movs	r7, #0
   17720:	f642 1802 	movw	r8, #10498	; 0x2902
   17724:	6820      	ldr	r0, [r4, #0]
   17726:	4669      	mov	r1, sp
   17728:	f88d 7000 	strb.w	r7, [sp]
   1772c:	f8ad 8002 	strh.w	r8, [sp, #2]
   17730:	f00f fe75 	bl	2741e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17734:	bb20      	cbnz	r0, 17780 <bt_gatt_is_subscribed+0x138>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17736:	2300      	movs	r3, #0
   17738:	6820      	ldr	r0, [r4, #0]
   1773a:	f88d 300c 	strb.w	r3, [sp, #12]
   1773e:	f642 1302 	movw	r3, #10498	; 0x2902
   17742:	a903      	add	r1, sp, #12
   17744:	f8ad 300e 	strh.w	r3, [sp, #14]
   17748:	f00f fe69 	bl	2741e <bt_uuid_cmp>
   1774c:	2800      	cmp	r0, #0
   1774e:	d1b2      	bne.n	176b6 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   17750:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   17752:	4628      	mov	r0, r5
   17754:	4622      	mov	r2, r4
   17756:	f812 1b01 	ldrb.w	r1, [r2], #1
   1775a:	f010 fa88 	bl	27c6e <bt_conn_is_peer_addr_le>
   1775e:	b110      	cbz	r0, 17766 <bt_gatt_is_subscribed+0x11e>
   17760:	8923      	ldrh	r3, [r4, #8]
   17762:	421e      	tst	r6, r3
   17764:	d10a      	bne.n	1777c <bt_gatt_is_subscribed+0x134>
   17766:	4628      	mov	r0, r5
   17768:	7aa1      	ldrb	r1, [r4, #10]
   1776a:	f104 020b 	add.w	r2, r4, #11
   1776e:	f010 fa7e 	bl	27c6e <bt_conn_is_peer_addr_le>
   17772:	2800      	cmp	r0, #0
   17774:	d09f      	beq.n	176b6 <bt_gatt_is_subscribed+0x6e>
   17776:	8a63      	ldrh	r3, [r4, #18]
   17778:	421e      	tst	r6, r3
   1777a:	d09c      	beq.n	176b6 <bt_gatt_is_subscribed+0x6e>
			return true;
   1777c:	2001      	movs	r0, #1
   1777e:	e79b      	b.n	176b8 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17780:	f642 0303 	movw	r3, #10243	; 0x2803
   17784:	6820      	ldr	r0, [r4, #0]
   17786:	a901      	add	r1, sp, #4
   17788:	f88d 7004 	strb.w	r7, [sp, #4]
   1778c:	f8ad 3006 	strh.w	r3, [sp, #6]
   17790:	f00f fe45 	bl	2741e <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17794:	2800      	cmp	r0, #0
   17796:	d0ce      	beq.n	17736 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17798:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1779c:	6820      	ldr	r0, [r4, #0]
   1779e:	a902      	add	r1, sp, #8
   177a0:	f88d 7008 	strb.w	r7, [sp, #8]
   177a4:	f8ad 300a 	strh.w	r3, [sp, #10]
   177a8:	f00f fe39 	bl	2741e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   177ac:	2800      	cmp	r0, #0
   177ae:	d0c2      	beq.n	17736 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   177b0:	f642 0301 	movw	r3, #10241	; 0x2801
   177b4:	6820      	ldr	r0, [r4, #0]
   177b6:	a903      	add	r1, sp, #12
   177b8:	f88d 700c 	strb.w	r7, [sp, #12]
   177bc:	f8ad 300e 	strh.w	r3, [sp, #14]
   177c0:	f00f fe2d 	bl	2741e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   177c4:	2800      	cmp	r0, #0
   177c6:	d0b6      	beq.n	17736 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   177c8:	4620      	mov	r0, r4
   177ca:	f7ff ff2b 	bl	17624 <bt_gatt_attr_next>
		if (!attr) {
   177ce:	4604      	mov	r4, r0
   177d0:	2800      	cmp	r0, #0
   177d2:	d1a7      	bne.n	17724 <bt_gatt_is_subscribed+0xdc>
   177d4:	e76f      	b.n	176b6 <bt_gatt_is_subscribed+0x6e>
   177d6:	bf00      	nop
   177d8:	0002f572 	.word	0x0002f572
   177dc:	0003057a 	.word	0x0003057a
   177e0:	0002d095 	.word	0x0002d095
   177e4:	0003060b 	.word	0x0003060b
   177e8:	00030620 	.word	0x00030620
   177ec:	00030625 	.word	0x00030625

000177f0 <gatt_indicate>:
{
   177f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   177f4:	4615      	mov	r5, r2
   177f6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   177f8:	2294      	movs	r2, #148	; 0x94
   177fa:	6869      	ldr	r1, [r5, #4]
{
   177fc:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   177fe:	f011 f919 	bl	28a34 <bt_gatt_check_perm>
   17802:	4680      	mov	r8, r0
   17804:	b178      	cbz	r0, 17826 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   17806:	4b35      	ldr	r3, [pc, #212]	; (178dc <gatt_indicate+0xec>)
   17808:	2202      	movs	r2, #2
   1780a:	9302      	str	r3, [sp, #8]
   1780c:	2300      	movs	r3, #0
   1780e:	4934      	ldr	r1, [pc, #208]	; (178e0 <gatt_indicate+0xf0>)
   17810:	4618      	mov	r0, r3
   17812:	e9cd 3300 	strd	r3, r3, [sp]
   17816:	f011 f865 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   1781a:	f04f 35ff 	mov.w	r5, #4294967295
}
   1781e:	4628      	mov	r0, r5
   17820:	b004      	add	sp, #16
   17822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   17826:	2202      	movs	r2, #2
   17828:	4638      	mov	r0, r7
   1782a:	6869      	ldr	r1, [r5, #4]
   1782c:	f7ff ff0c 	bl	17648 <bt_gatt_is_subscribed>
   17830:	4603      	mov	r3, r0
   17832:	b950      	cbnz	r0, 1784a <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   17834:	4a2b      	ldr	r2, [pc, #172]	; (178e4 <gatt_indicate+0xf4>)
   17836:	492a      	ldr	r1, [pc, #168]	; (178e0 <gatt_indicate+0xf0>)
   17838:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1783c:	9000      	str	r0, [sp, #0]
   1783e:	2202      	movs	r2, #2
   17840:	f011 f850 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   17844:	f06f 0515 	mvn.w	r5, #21
   17848:	e7e9      	b.n	1781e <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1784a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1784e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17850:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17852:	f7ff f9b1 	bl	16bb8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   17856:	3602      	adds	r6, #2
	if (!req) {
   17858:	4604      	mov	r4, r0
   1785a:	b1c8      	cbz	r0, 17890 <gatt_indicate+0xa0>
	req->att_op = op;
   1785c:	211d      	movs	r1, #29
	req->func = func;
   1785e:	4b22      	ldr	r3, [pc, #136]	; (178e8 <gatt_indicate+0xf8>)
	req->len = len;
   17860:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17862:	4632      	mov	r2, r6
	req->att_op = op;
   17864:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   17866:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1786a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1786c:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1786e:	4638      	mov	r0, r7
   17870:	f7fe fed6 	bl	16620 <bt_att_create_pdu>
	if (!buf) {
   17874:	4606      	mov	r6, r0
   17876:	b970      	cbnz	r0, 17896 <gatt_indicate+0xa6>
		LOG_WRN("No buffer available to send indication");
   17878:	4b1c      	ldr	r3, [pc, #112]	; (178ec <gatt_indicate+0xfc>)
   1787a:	9000      	str	r0, [sp, #0]
   1787c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17880:	2202      	movs	r2, #2
   17882:	4603      	mov	r3, r0
   17884:	4916      	ldr	r1, [pc, #88]	; (178e0 <gatt_indicate+0xf0>)
   17886:	f011 f82d 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   1788a:	4620      	mov	r0, r4
   1788c:	f7ff f9b8 	bl	16c00 <bt_att_req_free>
		return -ENOMEM;
   17890:	f06f 050b 	mvn.w	r5, #11
   17894:	e7c3      	b.n	1781e <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   17896:	2301      	movs	r3, #1
   17898:	4642      	mov	r2, r8
   1789a:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1789c:	f106 0a0c 	add.w	sl, r6, #12
   178a0:	f010 ff02 	bl	286a8 <bt_att_set_tx_meta_data>
   178a4:	2102      	movs	r1, #2
   178a6:	4650      	mov	r0, sl
   178a8:	f002 fde2 	bl	1a470 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   178ac:	4680      	mov	r8, r0
   178ae:	f828 9b02 	strh.w	r9, [r8], #2
   178b2:	8aa9      	ldrh	r1, [r5, #20]
   178b4:	4650      	mov	r0, sl
   178b6:	f002 fddb 	bl	1a470 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   178ba:	8aaa      	ldrh	r2, [r5, #20]
   178bc:	6929      	ldr	r1, [r5, #16]
   178be:	4640      	mov	r0, r8
   178c0:	f013 fa36 	bl	2ad30 <memcpy>
	err = bt_att_req_send(conn, req);
   178c4:	4621      	mov	r1, r4
   178c6:	4638      	mov	r0, r7
	req->buf = buf;
   178c8:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   178ca:	f7ff fad1 	bl	16e70 <bt_att_req_send>
	if (err) {
   178ce:	4605      	mov	r5, r0
   178d0:	2800      	cmp	r0, #0
   178d2:	d0a4      	beq.n	1781e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   178d4:	4620      	mov	r0, r4
   178d6:	f7ff f993 	bl	16c00 <bt_att_req_free>
   178da:	e7a0      	b.n	1781e <gatt_indicate+0x2e>
   178dc:	0003063b 	.word	0x0003063b
   178e0:	0002c08c 	.word	0x0002c08c
   178e4:	00030651 	.word	0x00030651
   178e8:	000286d9 	.word	0x000286d9
   178ec:	0003067c 	.word	0x0003067c

000178f0 <bt_gatt_indicate>:
{
   178f0:	b530      	push	{r4, r5, lr}
   178f2:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   178f4:	460c      	mov	r4, r1
{
   178f6:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   178f8:	b971      	cbnz	r1, 17918 <bt_gatt_indicate+0x28>
   178fa:	4946      	ldr	r1, [pc, #280]	; (17a14 <bt_gatt_indicate+0x124>)
   178fc:	f640 330d 	movw	r3, #2829	; 0xb0d
   17900:	4a45      	ldr	r2, [pc, #276]	; (17a18 <bt_gatt_indicate+0x128>)
   17902:	4846      	ldr	r0, [pc, #280]	; (17a1c <bt_gatt_indicate+0x12c>)
   17904:	f00e fcab 	bl	2625e <assert_print>
   17908:	4845      	ldr	r0, [pc, #276]	; (17a20 <bt_gatt_indicate+0x130>)
   1790a:	f00e fca8 	bl	2625e <assert_print>
   1790e:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   17912:	4841      	ldr	r0, [pc, #260]	; (17a18 <bt_gatt_indicate+0x128>)
   17914:	f00e fc9c 	bl	26250 <assert_post_action>
   17918:	684b      	ldr	r3, [r1, #4]
   1791a:	b973      	cbnz	r3, 1793a <bt_gatt_indicate+0x4a>
   1791c:	680b      	ldr	r3, [r1, #0]
   1791e:	b963      	cbnz	r3, 1793a <bt_gatt_indicate+0x4a>
   17920:	4940      	ldr	r1, [pc, #256]	; (17a24 <bt_gatt_indicate+0x134>)
   17922:	f640 330e 	movw	r3, #2830	; 0xb0e
   17926:	4a3c      	ldr	r2, [pc, #240]	; (17a18 <bt_gatt_indicate+0x128>)
   17928:	483c      	ldr	r0, [pc, #240]	; (17a1c <bt_gatt_indicate+0x12c>)
   1792a:	f00e fc98 	bl	2625e <assert_print>
   1792e:	483c      	ldr	r0, [pc, #240]	; (17a20 <bt_gatt_indicate+0x130>)
   17930:	f00e fc95 	bl	2625e <assert_print>
   17934:	f640 310e 	movw	r1, #2830	; 0xb0e
   17938:	e7eb      	b.n	17912 <bt_gatt_indicate+0x22>
   1793a:	4b3b      	ldr	r3, [pc, #236]	; (17a28 <bt_gatt_indicate+0x138>)
   1793c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17940:	075a      	lsls	r2, r3, #29
   17942:	d561      	bpl.n	17a08 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17944:	b115      	cbz	r5, 1794c <bt_gatt_indicate+0x5c>
   17946:	7b6b      	ldrb	r3, [r5, #13]
   17948:	2b07      	cmp	r3, #7
   1794a:	d160      	bne.n	17a0e <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   1794c:	6860      	ldr	r0, [r4, #4]
   1794e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17950:	f7ff fd34 	bl	173bc <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17954:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17956:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1795a:	b33a      	cbz	r2, 179ac <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1795c:	a905      	add	r1, sp, #20
   1795e:	9102      	str	r1, [sp, #8]
   17960:	4932      	ldr	r1, [pc, #200]	; (17a2c <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   17962:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17964:	9101      	str	r1, [sp, #4]
   17966:	2101      	movs	r1, #1
   17968:	9100      	str	r1, [sp, #0]
   1796a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1796e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17970:	f7ff fd6c 	bl	1744c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17974:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17976:	b91b      	cbnz	r3, 17980 <bt_gatt_indicate+0x90>
			return -ENOENT;
   17978:	f06f 0001 	mvn.w	r0, #1
}
   1797c:	b00b      	add	sp, #44	; 0x2c
   1797e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17980:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17982:	9b05      	ldr	r3, [sp, #20]
   17984:	a904      	add	r1, sp, #16
   17986:	6818      	ldr	r0, [r3, #0]
   17988:	2300      	movs	r3, #0
   1798a:	f88d 3010 	strb.w	r3, [sp, #16]
   1798e:	f642 0303 	movw	r3, #10243	; 0x2803
   17992:	f8ad 3012 	strh.w	r3, [sp, #18]
   17996:	f00f fd42 	bl	2741e <bt_uuid_cmp>
   1799a:	b970      	cbnz	r0, 179ba <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1799c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1799e:	68c3      	ldr	r3, [r0, #12]
   179a0:	799b      	ldrb	r3, [r3, #6]
   179a2:	069b      	lsls	r3, r3, #26
   179a4:	d405      	bmi.n	179b2 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   179a6:	f06f 0015 	mvn.w	r0, #21
   179aa:	e7e7      	b.n	1797c <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   179ac:	2800      	cmp	r0, #0
   179ae:	d1e8      	bne.n	17982 <bt_gatt_indicate+0x92>
   179b0:	e7e2      	b.n	17978 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   179b2:	f010 ffeb 	bl	2898c <bt_gatt_attr_value_handle>
   179b6:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   179ba:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   179be:	b13d      	cbz	r5, 179d0 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   179c0:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   179c2:	4601      	mov	r1, r0
   179c4:	4622      	mov	r2, r4
   179c6:	4628      	mov	r0, r5
		params->_ref = 1;
   179c8:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   179ca:	f7ff ff11 	bl	177f0 <gatt_indicate>
   179ce:	e7d5      	b.n	1797c <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   179d0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   179d4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   179d6:	2302      	movs	r3, #2
   179d8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   179dc:	f642 1302 	movw	r3, #10498	; 0x2902
   179e0:	f8ad 3012 	strh.w	r3, [sp, #18]
   179e4:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   179e6:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   179e8:	9302      	str	r3, [sp, #8]
   179ea:	4b11      	ldr	r3, [pc, #68]	; (17a30 <bt_gatt_indicate+0x140>)
   179ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   179f0:	9301      	str	r3, [sp, #4]
   179f2:	2301      	movs	r3, #1
   179f4:	aa04      	add	r2, sp, #16
   179f6:	9300      	str	r3, [sp, #0]
   179f8:	462b      	mov	r3, r5
	data.ind_params = params;
   179fa:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   179fc:	f88d 5010 	strb.w	r5, [sp, #16]
   17a00:	f7ff fd24 	bl	1744c <bt_gatt_foreach_attr_type>
	return data.err;
   17a04:	9807      	ldr	r0, [sp, #28]
   17a06:	e7b9      	b.n	1797c <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   17a08:	f06f 000a 	mvn.w	r0, #10
   17a0c:	e7b6      	b.n	1797c <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   17a0e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17a12:	e7b3      	b.n	1797c <bt_gatt_indicate+0x8c>
   17a14:	000306a3 	.word	0x000306a3
   17a18:	0003057a 	.word	0x0003057a
   17a1c:	0002d095 	.word	0x0002d095
   17a20:	000306aa 	.word	0x000306aa
   17a24:	000306c0 	.word	0x000306c0
   17a28:	200080cc 	.word	0x200080cc
   17a2c:	000286ff 	.word	0x000286ff
   17a30:	00017df9 	.word	0x00017df9

00017a34 <sc_process>:
{
   17a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17a36:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   17a38:	f1a0 0120 	sub.w	r1, r0, #32
   17a3c:	f100 0430 	add.w	r4, r0, #48	; 0x30
   17a40:	e8d4 2faf 	lda	r2, [r4]
   17a44:	f3c2 0040 	ubfx	r0, r2, #1, #1
   17a48:	0792      	lsls	r2, r2, #30
   17a4a:	d50e      	bpl.n	17a6a <sc_process+0x36>
   17a4c:	4919      	ldr	r1, [pc, #100]	; (17ab4 <sc_process+0x80>)
   17a4e:	f240 439a 	movw	r3, #1178	; 0x49a
   17a52:	4a19      	ldr	r2, [pc, #100]	; (17ab8 <sc_process+0x84>)
   17a54:	4819      	ldr	r0, [pc, #100]	; (17abc <sc_process+0x88>)
   17a56:	f00e fc02 	bl	2625e <assert_print>
   17a5a:	4819      	ldr	r0, [pc, #100]	; (17ac0 <sc_process+0x8c>)
   17a5c:	f00e fbff 	bl	2625e <assert_print>
   17a60:	f240 419a 	movw	r1, #1178	; 0x49a
   17a64:	4814      	ldr	r0, [pc, #80]	; (17ab8 <sc_process+0x84>)
   17a66:	f00e fbf3 	bl	26250 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17a6a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   17a6e:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17a70:	e8d4 2fef 	ldaex	r2, [r4]
   17a74:	f022 0201 	bic.w	r2, r2, #1
   17a78:	e8c4 2fe5 	stlex	r5, r2, [r4]
   17a7c:	2d00      	cmp	r5, #0
   17a7e:	d1f7      	bne.n	17a70 <sc_process+0x3c>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17a80:	4a10      	ldr	r2, [pc, #64]	; (17ac4 <sc_process+0x90>)
	sc->start = 0U;
   17a82:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17a86:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   17a8a:	4a0f      	ldr	r2, [pc, #60]	; (17ac8 <sc_process+0x94>)
	sc->end = 0U;
   17a8c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   17a90:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   17a94:	aa01      	add	r2, sp, #4
   17a96:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   17a9a:	2204      	movs	r2, #4
   17a9c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17aa0:	f7ff ff26 	bl	178f0 <bt_gatt_indicate>
   17aa4:	b918      	cbnz	r0, 17aae <sc_process+0x7a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   17aa6:	2101      	movs	r1, #1
   17aa8:	4620      	mov	r0, r4
   17aaa:	f010 ff4b 	bl	28944 <atomic_set_bit>
}
   17aae:	b003      	add	sp, #12
   17ab0:	bd30      	pop	{r4, r5, pc}
   17ab2:	bf00      	nop
   17ab4:	000306dd 	.word	0x000306dd
   17ab8:	0003057a 	.word	0x0003057a
   17abc:	0002d095 	.word	0x0002d095
   17ac0:	0003070e 	.word	0x0003070e
   17ac4:	0002cb00 	.word	0x0002cb00
   17ac8:	0001729d 	.word	0x0001729d

00017acc <update_ccc>:
{
   17acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ad0:	4b3e      	ldr	r3, [pc, #248]	; (17bcc <update_ccc+0x100>)
{
   17ad2:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   17ad4:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ad6:	6882      	ldr	r2, [r0, #8]
{
   17ad8:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ada:	429a      	cmp	r2, r3
{
   17adc:	b086      	sub	sp, #24
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ade:	d170      	bne.n	17bc2 <update_ccc+0xf6>
	ccc = attr->user_data;
   17ae0:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17ae4:	f108 0601 	add.w	r6, r8, #1
   17ae8:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   17aec:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   17af0:	b1d3      	cbz	r3, 17b28 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17af2:	4632      	mov	r2, r6
   17af4:	4620      	mov	r0, r4
   17af6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   17afa:	f010 f8b8 	bl	27c6e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17afe:	b198      	cbz	r0, 17b28 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17b00:	f44f 7295 	mov.w	r2, #298	; 0x12a
   17b04:	4629      	mov	r1, r5
   17b06:	4620      	mov	r0, r4
   17b08:	f010 ff94 	bl	28a34 <bt_gatt_check_perm>
		if (err) {
   17b0c:	b308      	cbz	r0, 17b52 <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17b0e:	2803      	cmp	r0, #3
   17b10:	d10e      	bne.n	17b30 <update_ccc+0x64>
				LOG_WRN("CCC %p not writable", attr);
   17b12:	4b2f      	ldr	r3, [pc, #188]	; (17bd0 <update_ccc+0x104>)
   17b14:	2202      	movs	r2, #2
   17b16:	9302      	str	r3, [sp, #8]
   17b18:	2300      	movs	r3, #0
   17b1a:	492e      	ldr	r1, [pc, #184]	; (17bd4 <update_ccc+0x108>)
   17b1c:	4618      	mov	r0, r3
   17b1e:	e9cd 3300 	strd	r3, r3, [sp]
   17b22:	9503      	str	r5, [sp, #12]
   17b24:	f010 fede 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17b28:	360a      	adds	r6, #10
   17b2a:	454e      	cmp	r6, r9
   17b2c:	d1de      	bne.n	17aec <update_ccc+0x20>
   17b2e:	e048      	b.n	17bc2 <update_ccc+0xf6>
			sec = BT_SECURITY_L2;
   17b30:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   17b32:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   17b34:	bf0c      	ite	eq
   17b36:	f04f 0a03 	moveq.w	sl, #3
   17b3a:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   17b3e:	f010 f894 	bl	27c6a <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   17b42:	4582      	cmp	sl, r0
   17b44:	d905      	bls.n	17b52 <update_ccc+0x86>
				if (data->sec < sec) {
   17b46:	793b      	ldrb	r3, [r7, #4]
   17b48:	4553      	cmp	r3, sl
   17b4a:	d2ed      	bcs.n	17b28 <update_ccc+0x5c>
					data->sec = sec;
   17b4c:	f887 a004 	strb.w	sl, [r7, #4]
   17b50:	e7ea      	b.n	17b28 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   17b52:	4641      	mov	r1, r8
   17b54:	4628      	mov	r0, r5
   17b56:	f010 fdb1 	bl	286bc <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17b5a:	4b1f      	ldr	r3, [pc, #124]	; (17bd8 <update_ccc+0x10c>)
   17b5c:	4598      	cmp	r8, r3
   17b5e:	d130      	bne.n	17bc2 <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17b60:	7a20      	ldrb	r0, [r4, #8]
   17b62:	f104 0190 	add.w	r1, r4, #144	; 0x90
   17b66:	f7ff f9e7 	bl	16f38 <find_sc_cfg>
	if (!cfg) {
   17b6a:	b350      	cbz	r0, 17bc2 <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
   17b6c:	8902      	ldrh	r2, [r0, #8]
   17b6e:	8943      	ldrh	r3, [r0, #10]
   17b70:	ea52 0103 	orrs.w	r1, r2, r3
   17b74:	d025      	beq.n	17bc2 <update_ccc+0xf6>
	index = bt_conn_index(conn);
   17b76:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17b78:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   17b7c:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   17b80:	f7fd fb56 	bl	15230 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17b84:	2318      	movs	r3, #24
   17b86:	4915      	ldr	r1, [pc, #84]	; (17bdc <update_ccc+0x110>)
   17b88:	4a15      	ldr	r2, [pc, #84]	; (17be0 <update_ccc+0x114>)
   17b8a:	fb03 1300 	mla	r3, r3, r0, r1
   17b8e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17b90:	4a14      	ldr	r2, [pc, #80]	; (17be4 <update_ccc+0x118>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17b92:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   17b94:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17b96:	aa05      	add	r2, sp, #20
   17b98:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17b9a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17b9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17ba0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   17ba4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17ba6:	4620      	mov	r0, r4
   17ba8:	f7ff fea2 	bl	178f0 <bt_gatt_indicate>
   17bac:	b148      	cbz	r0, 17bc2 <update_ccc+0xf6>
		LOG_ERR("SC restore indication failed");
   17bae:	4b0e      	ldr	r3, [pc, #56]	; (17be8 <update_ccc+0x11c>)
   17bb0:	2201      	movs	r2, #1
   17bb2:	9302      	str	r3, [sp, #8]
   17bb4:	2300      	movs	r3, #0
   17bb6:	4907      	ldr	r1, [pc, #28]	; (17bd4 <update_ccc+0x108>)
   17bb8:	4618      	mov	r0, r3
   17bba:	e9cd 3300 	strd	r3, r3, [sp]
   17bbe:	f010 fe91 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
}
   17bc2:	2001      	movs	r0, #1
   17bc4:	b006      	add	sp, #24
   17bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17bca:	bf00      	nop
   17bcc:	00016fed 	.word	0x00016fed
   17bd0:	00030729 	.word	0x00030729
   17bd4:	0002c08c 	.word	0x0002c08c
   17bd8:	20008508 	.word	0x20008508
   17bdc:	20022804 	.word	0x20022804
   17be0:	0002cb00 	.word	0x0002cb00
   17be4:	00028959 	.word	0x00028959
   17be8:	0003073d 	.word	0x0003073d

00017bec <gatt_notify>:
{
   17bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17bf0:	4614      	mov	r4, r2
   17bf2:	4688      	mov	r8, r1
   17bf4:	b085      	sub	sp, #20
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17bf6:	2294      	movs	r2, #148	; 0x94
   17bf8:	6861      	ldr	r1, [r4, #4]
{
   17bfa:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17bfc:	f010 ff1a 	bl	28a34 <bt_gatt_check_perm>
   17c00:	b170      	cbz	r0, 17c20 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   17c02:	4b2a      	ldr	r3, [pc, #168]	; (17cac <gatt_notify+0xc0>)
   17c04:	2202      	movs	r2, #2
   17c06:	9302      	str	r3, [sp, #8]
   17c08:	2300      	movs	r3, #0
   17c0a:	4929      	ldr	r1, [pc, #164]	; (17cb0 <gatt_notify+0xc4>)
   17c0c:	4618      	mov	r0, r3
   17c0e:	e9cd 3300 	strd	r3, r3, [sp]
   17c12:	f010 fe67 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   17c16:	f04f 30ff 	mov.w	r0, #4294967295
}
   17c1a:	b005      	add	sp, #20
   17c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   17c20:	2201      	movs	r2, #1
   17c22:	4630      	mov	r0, r6
   17c24:	6861      	ldr	r1, [r4, #4]
   17c26:	f7ff fd0f 	bl	17648 <bt_gatt_is_subscribed>
   17c2a:	4603      	mov	r3, r0
   17c2c:	b950      	cbnz	r0, 17c44 <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   17c2e:	4a21      	ldr	r2, [pc, #132]	; (17cb4 <gatt_notify+0xc8>)
   17c30:	9000      	str	r0, [sp, #0]
   17c32:	e9cd 0201 	strd	r0, r2, [sp, #4]
   17c36:	491e      	ldr	r1, [pc, #120]	; (17cb0 <gatt_notify+0xc4>)
   17c38:	2202      	movs	r2, #2
   17c3a:	f010 fe53 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   17c3e:	f06f 0015 	mvn.w	r0, #21
   17c42:	e7ea      	b.n	17c1a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   17c44:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   17c46:	211b      	movs	r1, #27
   17c48:	4630      	mov	r0, r6
   17c4a:	3202      	adds	r2, #2
   17c4c:	f7fe fce8 	bl	16620 <bt_att_create_pdu>
	if (!buf) {
   17c50:	4605      	mov	r5, r0
   17c52:	b958      	cbnz	r0, 17c6c <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   17c54:	4b18      	ldr	r3, [pc, #96]	; (17cb8 <gatt_notify+0xcc>)
   17c56:	9000      	str	r0, [sp, #0]
   17c58:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17c5c:	2202      	movs	r2, #2
   17c5e:	4603      	mov	r3, r0
   17c60:	4913      	ldr	r1, [pc, #76]	; (17cb0 <gatt_notify+0xc4>)
   17c62:	f010 fe3f 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   17c66:	f06f 000b 	mvn.w	r0, #11
   17c6a:	e7d6      	b.n	17c1a <gatt_notify+0x2e>
   17c6c:	f100 090c 	add.w	r9, r0, #12
   17c70:	2102      	movs	r1, #2
   17c72:	4648      	mov	r0, r9
   17c74:	f002 fbfc 	bl	1a470 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   17c78:	4607      	mov	r7, r0
   17c7a:	f827 8b02 	strh.w	r8, [r7], #2
   17c7e:	89a1      	ldrh	r1, [r4, #12]
   17c80:	4648      	mov	r0, r9
   17c82:	f002 fbf5 	bl	1a470 <net_buf_simple_add>
   17c86:	89a2      	ldrh	r2, [r4, #12]
   17c88:	68a1      	ldr	r1, [r4, #8]
   17c8a:	4638      	mov	r0, r7
   17c8c:	f013 f850 	bl	2ad30 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   17c90:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   17c94:	4628      	mov	r0, r5
   17c96:	2301      	movs	r3, #1
   17c98:	f010 fd06 	bl	286a8 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   17c9c:	4629      	mov	r1, r5
   17c9e:	4630      	mov	r0, r6
}
   17ca0:	b005      	add	sp, #20
   17ca2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   17ca6:	f7ff b885 	b.w	16db4 <bt_att_send>
   17caa:	bf00      	nop
   17cac:	0003063b 	.word	0x0003063b
   17cb0:	0002c08c 	.word	0x0002c08c
   17cb4:	00030651 	.word	0x00030651
   17cb8:	0003075a 	.word	0x0003075a

00017cbc <bt_gatt_notify_cb>:
{
   17cbc:	b530      	push	{r4, r5, lr}
   17cbe:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   17cc0:	460c      	mov	r4, r1
{
   17cc2:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   17cc4:	b971      	cbnz	r1, 17ce4 <bt_gatt_notify_cb+0x28>
   17cc6:	4944      	ldr	r1, [pc, #272]	; (17dd8 <bt_gatt_notify_cb+0x11c>)
   17cc8:	f640 232d 	movw	r3, #2605	; 0xa2d
   17ccc:	4a43      	ldr	r2, [pc, #268]	; (17ddc <bt_gatt_notify_cb+0x120>)
   17cce:	4844      	ldr	r0, [pc, #272]	; (17de0 <bt_gatt_notify_cb+0x124>)
   17cd0:	f00e fac5 	bl	2625e <assert_print>
   17cd4:	4843      	ldr	r0, [pc, #268]	; (17de4 <bt_gatt_notify_cb+0x128>)
   17cd6:	f00e fac2 	bl	2625e <assert_print>
   17cda:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   17cde:	483f      	ldr	r0, [pc, #252]	; (17ddc <bt_gatt_notify_cb+0x120>)
   17ce0:	f00e fab6 	bl	26250 <assert_post_action>
   17ce4:	684b      	ldr	r3, [r1, #4]
   17ce6:	b973      	cbnz	r3, 17d06 <bt_gatt_notify_cb+0x4a>
   17ce8:	680b      	ldr	r3, [r1, #0]
   17cea:	b963      	cbnz	r3, 17d06 <bt_gatt_notify_cb+0x4a>
   17cec:	493e      	ldr	r1, [pc, #248]	; (17de8 <bt_gatt_notify_cb+0x12c>)
   17cee:	f640 232e 	movw	r3, #2606	; 0xa2e
   17cf2:	4a3a      	ldr	r2, [pc, #232]	; (17ddc <bt_gatt_notify_cb+0x120>)
   17cf4:	483a      	ldr	r0, [pc, #232]	; (17de0 <bt_gatt_notify_cb+0x124>)
   17cf6:	f00e fab2 	bl	2625e <assert_print>
   17cfa:	483a      	ldr	r0, [pc, #232]	; (17de4 <bt_gatt_notify_cb+0x128>)
   17cfc:	f00e faaf 	bl	2625e <assert_print>
   17d00:	f640 212e 	movw	r1, #2606	; 0xa2e
   17d04:	e7eb      	b.n	17cde <bt_gatt_notify_cb+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d06:	4b39      	ldr	r3, [pc, #228]	; (17dec <bt_gatt_notify_cb+0x130>)
   17d08:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17d0c:	075a      	lsls	r2, r3, #29
   17d0e:	d55d      	bpl.n	17dcc <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17d10:	b115      	cbz	r5, 17d18 <bt_gatt_notify_cb+0x5c>
   17d12:	7b6b      	ldrb	r3, [r5, #13]
   17d14:	2b07      	cmp	r3, #7
   17d16:	d15c      	bne.n	17dd2 <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   17d18:	6860      	ldr	r0, [r4, #4]
   17d1a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17d1c:	f7ff fb4e 	bl	173bc <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17d20:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17d22:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17d26:	b33a      	cbz	r2, 17d78 <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17d28:	a905      	add	r1, sp, #20
   17d2a:	9102      	str	r1, [sp, #8]
   17d2c:	4930      	ldr	r1, [pc, #192]	; (17df0 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   17d2e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17d30:	9101      	str	r1, [sp, #4]
   17d32:	2101      	movs	r1, #1
   17d34:	9100      	str	r1, [sp, #0]
   17d36:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17d3a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17d3c:	f7ff fb86 	bl	1744c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17d40:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17d42:	b91b      	cbnz	r3, 17d4c <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   17d44:	f06f 0001 	mvn.w	r0, #1
}
   17d48:	b00b      	add	sp, #44	; 0x2c
   17d4a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17d4c:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17d4e:	9b05      	ldr	r3, [sp, #20]
   17d50:	a904      	add	r1, sp, #16
   17d52:	6818      	ldr	r0, [r3, #0]
   17d54:	2300      	movs	r3, #0
   17d56:	f88d 3010 	strb.w	r3, [sp, #16]
   17d5a:	f642 0303 	movw	r3, #10243	; 0x2803
   17d5e:	f8ad 3012 	strh.w	r3, [sp, #18]
   17d62:	f00f fb5c 	bl	2741e <bt_uuid_cmp>
   17d66:	b970      	cbnz	r0, 17d86 <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17d68:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   17d6a:	68c3      	ldr	r3, [r0, #12]
   17d6c:	799b      	ldrb	r3, [r3, #6]
   17d6e:	06db      	lsls	r3, r3, #27
   17d70:	d405      	bmi.n	17d7e <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   17d72:	f06f 0015 	mvn.w	r0, #21
   17d76:	e7e7      	b.n	17d48 <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   17d78:	2800      	cmp	r0, #0
   17d7a:	d1e8      	bne.n	17d4e <bt_gatt_notify_cb+0x92>
   17d7c:	e7e2      	b.n	17d44 <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17d7e:	f010 fe05 	bl	2898c <bt_gatt_attr_value_handle>
   17d82:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   17d86:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17d8a:	b12d      	cbz	r5, 17d98 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   17d8c:	4601      	mov	r1, r0
   17d8e:	4622      	mov	r2, r4
   17d90:	4628      	mov	r0, r5
   17d92:	f7ff ff2b 	bl	17bec <gatt_notify>
   17d96:	e7d7      	b.n	17d48 <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   17d98:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17d9c:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   17da0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   17da2:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17da4:	f8ad 2012 	strh.w	r2, [sp, #18]
   17da8:	aa05      	add	r2, sp, #20
   17daa:	9202      	str	r2, [sp, #8]
   17dac:	4a11      	ldr	r2, [pc, #68]	; (17df4 <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   17dae:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17db2:	e9cd 3200 	strd	r3, r2, [sp]
   17db6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17dba:	462b      	mov	r3, r5
   17dbc:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   17dbe:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17dc0:	f88d 5010 	strb.w	r5, [sp, #16]
   17dc4:	f7ff fb42 	bl	1744c <bt_gatt_foreach_attr_type>
	return data.err;
   17dc8:	9807      	ldr	r0, [sp, #28]
   17dca:	e7bd      	b.n	17d48 <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   17dcc:	f06f 000a 	mvn.w	r0, #10
   17dd0:	e7ba      	b.n	17d48 <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   17dd2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17dd6:	e7b7      	b.n	17d48 <bt_gatt_notify_cb+0x8c>
   17dd8:	000306a3 	.word	0x000306a3
   17ddc:	0003057a 	.word	0x0003057a
   17de0:	0002d095 	.word	0x0002d095
   17de4:	000306aa 	.word	0x000306aa
   17de8:	000306c0 	.word	0x000306c0
   17dec:	200080cc 	.word	0x200080cc
   17df0:	000286ff 	.word	0x000286ff
   17df4:	00017df9 	.word	0x00017df9

00017df8 <notify_cb>:
{
   17df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17dfc:	4b46      	ldr	r3, [pc, #280]	; (17f18 <notify_cb+0x120>)
{
   17dfe:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17e00:	6882      	ldr	r2, [r0, #8]
{
   17e02:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17e04:	429a      	cmp	r2, r3
{
   17e06:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
   17e08:	d136      	bne.n	17e78 <notify_cb+0x80>
	ccc = attr->user_data;
   17e0a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17e0e:	4b43      	ldr	r3, [pc, #268]	; (17f1c <notify_cb+0x124>)
   17e10:	459a      	cmp	sl, r3
   17e12:	d119      	bne.n	17e48 <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17e14:	2600      	movs	r6, #0
   17e16:	4c42      	ldr	r4, [pc, #264]	; (17f20 <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17e18:	4f42      	ldr	r7, [pc, #264]	; (17f24 <notify_cb+0x12c>)
   17e1a:	4639      	mov	r1, r7
   17e1c:	4620      	mov	r0, r4
   17e1e:	f010 fcc5 	bl	287ac <bt_addr_le_eq>
   17e22:	b978      	cbnz	r0, 17e44 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   17e24:	2207      	movs	r2, #7
   17e26:	4621      	mov	r1, r4
   17e28:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   17e2c:	f7fd fbf0 	bl	15610 <bt_conn_lookup_state_le>
			if (!conn) {
   17e30:	bb38      	cbnz	r0, 17e82 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   17e32:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   17e34:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   17e36:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   17e38:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   17e3c:	8853      	ldrh	r3, [r2, #2]
   17e3e:	8812      	ldrh	r2, [r2, #0]
   17e40:	f7ff f94c 	bl	170dc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17e44:	340c      	adds	r4, #12
   17e46:	b1d6      	cbz	r6, 17e7e <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17e48:	f10a 0601 	add.w	r6, sl, #1
   17e4c:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   17e50:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   17e54:	89ab      	ldrh	r3, [r5, #12]
   17e56:	429a      	cmp	r2, r3
   17e58:	d10b      	bne.n	17e72 <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17e5a:	4631      	mov	r1, r6
   17e5c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   17e60:	f7fd fb96 	bl	15590 <bt_conn_lookup_addr_le>
		if (!conn) {
   17e64:	4604      	mov	r4, r0
   17e66:	b120      	cbz	r0, 17e72 <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   17e68:	7b43      	ldrb	r3, [r0, #13]
   17e6a:	2b07      	cmp	r3, #7
   17e6c:	d00c      	beq.n	17e88 <notify_cb+0x90>
			bt_conn_unref(conn);
   17e6e:	f7fd f8c3 	bl	14ff8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17e72:	360a      	adds	r6, #10
   17e74:	45b3      	cmp	fp, r6
   17e76:	d1eb      	bne.n	17e50 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   17e78:	f04f 0901 	mov.w	r9, #1
   17e7c:	e048      	b.n	17f10 <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17e7e:	2601      	movs	r6, #1
   17e80:	e7cb      	b.n	17e1a <notify_cb+0x22>
			bt_conn_unref(conn);
   17e82:	f7fd f8b9 	bl	14ff8 <bt_conn_unref>
   17e86:	e7dd      	b.n	17e44 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   17e88:	f8da 3020 	ldr.w	r3, [sl, #32]
   17e8c:	b123      	cbz	r3, 17e98 <notify_cb+0xa0>
   17e8e:	4641      	mov	r1, r8
   17e90:	4798      	blx	r3
   17e92:	b908      	cbnz	r0, 17e98 <notify_cb+0xa0>
			bt_conn_unref(conn);
   17e94:	4620      	mov	r0, r4
   17e96:	e7ea      	b.n	17e6e <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17e98:	2294      	movs	r2, #148	; 0x94
   17e9a:	4641      	mov	r1, r8
   17e9c:	4620      	mov	r0, r4
   17e9e:	f010 fdc9 	bl	28a34 <bt_gatt_check_perm>
   17ea2:	4681      	mov	r9, r0
   17ea4:	b150      	cbz	r0, 17ebc <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   17ea6:	4b20      	ldr	r3, [pc, #128]	; (17f28 <notify_cb+0x130>)
   17ea8:	2202      	movs	r2, #2
   17eaa:	9302      	str	r3, [sp, #8]
   17eac:	2300      	movs	r3, #0
   17eae:	491f      	ldr	r1, [pc, #124]	; (17f2c <notify_cb+0x134>)
   17eb0:	4618      	mov	r0, r3
   17eb2:	e9cd 3300 	strd	r3, r3, [sp]
   17eb6:	f010 fd15 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
			bt_conn_unref(conn);
   17eba:	e7eb      	b.n	17e94 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   17ebc:	89ab      	ldrh	r3, [r5, #12]
   17ebe:	2b02      	cmp	r3, #2
   17ec0:	d115      	bne.n	17eee <notify_cb+0xf6>
   17ec2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   17ec6:	079a      	lsls	r2, r3, #30
   17ec8:	d405      	bmi.n	17ed6 <notify_cb+0xde>
		bt_conn_unref(conn);
   17eca:	4620      	mov	r0, r4
   17ecc:	f7fd f894 	bl	14ff8 <bt_conn_unref>
		data->err = 0;
   17ed0:	2300      	movs	r3, #0
   17ed2:	60ab      	str	r3, [r5, #8]
   17ed4:	e7cd      	b.n	17e72 <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   17ed6:	4620      	mov	r0, r4
   17ed8:	692a      	ldr	r2, [r5, #16]
   17eda:	88a9      	ldrh	r1, [r5, #4]
   17edc:	f7ff fc88 	bl	177f0 <gatt_indicate>
			if (err == 0) {
   17ee0:	4607      	mov	r7, r0
   17ee2:	b980      	cbnz	r0, 17f06 <notify_cb+0x10e>
				data->ind_params->_ref++;
   17ee4:	692a      	ldr	r2, [r5, #16]
   17ee6:	7d93      	ldrb	r3, [r2, #22]
   17ee8:	3301      	adds	r3, #1
   17eea:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17eec:	e7ed      	b.n	17eca <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   17eee:	2b01      	cmp	r3, #1
   17ef0:	d1eb      	bne.n	17eca <notify_cb+0xd2>
   17ef2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   17ef6:	07db      	lsls	r3, r3, #31
   17ef8:	d5e7      	bpl.n	17eca <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17efa:	4620      	mov	r0, r4
   17efc:	692a      	ldr	r2, [r5, #16]
   17efe:	88a9      	ldrh	r1, [r5, #4]
   17f00:	f7ff fe74 	bl	17bec <gatt_notify>
   17f04:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   17f06:	4620      	mov	r0, r4
   17f08:	f7fd f876 	bl	14ff8 <bt_conn_unref>
		if (err < 0) {
   17f0c:	2f00      	cmp	r7, #0
   17f0e:	dadf      	bge.n	17ed0 <notify_cb+0xd8>
}
   17f10:	4648      	mov	r0, r9
   17f12:	b005      	add	sp, #20
   17f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f18:	00016fed 	.word	0x00016fed
   17f1c:	20008508 	.word	0x20008508
   17f20:	20022c29 	.word	0x20022c29
   17f24:	0002f096 	.word	0x0002f096
   17f28:	0003063b 	.word	0x0003063b
   17f2c:	0002c08c 	.word	0x0002c08c

00017f30 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   17f30:	b510      	push	{r4, lr}
   17f32:	b086      	sub	sp, #24
   17f34:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   17f36:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   17f38:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17f3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17f3e:	4a0f      	ldr	r2, [pc, #60]	; (17f7c <bt_gatt_connected+0x4c>)
   17f40:	ab04      	add	r3, sp, #16
	data.sec = BT_SECURITY_L1;
   17f42:	f88d 0014 	strb.w	r0, [sp, #20]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17f46:	f010 fd68 	bl	28a1a <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   17f4a:	4620      	mov	r0, r4
   17f4c:	f00f fe8d 	bl	27c6a <bt_conn_get_security>
   17f50:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   17f54:	4288      	cmp	r0, r1
   17f56:	d20e      	bcs.n	17f76 <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
   17f58:	4620      	mov	r0, r4
   17f5a:	f00f fe5a 	bl	27c12 <bt_conn_set_security>

		if (err) {
   17f5e:	b150      	cbz	r0, 17f76 <bt_gatt_connected+0x46>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   17f60:	4b07      	ldr	r3, [pc, #28]	; (17f80 <bt_gatt_connected+0x50>)
   17f62:	9003      	str	r0, [sp, #12]
   17f64:	9302      	str	r3, [sp, #8]
   17f66:	2300      	movs	r3, #0
   17f68:	2202      	movs	r2, #2
   17f6a:	4618      	mov	r0, r3
   17f6c:	e9cd 3300 	strd	r3, r3, [sp]
   17f70:	4904      	ldr	r1, [pc, #16]	; (17f84 <bt_gatt_connected+0x54>)
   17f72:	f010 fcb7 	bl	288e4 <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   17f76:	b006      	add	sp, #24
   17f78:	bd10      	pop	{r4, pc}
   17f7a:	bf00      	nop
   17f7c:	00017acd 	.word	0x00017acd
   17f80:	00030783 	.word	0x00030783
   17f84:	0002c08c 	.word	0x0002c08c

00017f88 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   17f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f8a:	4605      	mov	r5, r0
   17f8c:	460e      	mov	r6, r1
   17f8e:	4617      	mov	r7, r2
	return list->head;
   17f90:	4b06      	ldr	r3, [pc, #24]	; (17fac <bt_gatt_att_max_mtu_changed+0x24>)
   17f92:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17f94:	b14c      	cbz	r4, 17faa <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   17f96:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17f9a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   17f9c:	b11b      	cbz	r3, 17fa6 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   17f9e:	463a      	mov	r2, r7
   17fa0:	4631      	mov	r1, r6
   17fa2:	4628      	mov	r0, r5
   17fa4:	4798      	blx	r3
	return node->next;
   17fa6:	6864      	ldr	r4, [r4, #4]
   17fa8:	e7f4      	b.n	17f94 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   17faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17fac:	20022844 	.word	0x20022844

00017fb0 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   17fb0:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   17fb2:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   17fb4:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17fb6:	466b      	mov	r3, sp
   17fb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17fbc:	4a03      	ldr	r2, [pc, #12]	; (17fcc <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   17fbe:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17fc2:	f010 fd2a 	bl	28a1a <bt_gatt_foreach_attr>
}
   17fc6:	b003      	add	sp, #12
   17fc8:	f85d fb04 	ldr.w	pc, [sp], #4
   17fcc:	00017acd 	.word	0x00017acd

00017fd0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17fd0:	b570      	push	{r4, r5, r6, lr}
   17fd2:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17fd4:	4603      	mov	r3, r0
   17fd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17fda:	2001      	movs	r0, #1
   17fdc:	4a0d      	ldr	r2, [pc, #52]	; (18014 <bt_gatt_disconnected+0x44>)
   17fde:	f010 fd1c 	bl	28a1a <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   17fe2:	4620      	mov	r0, r4
   17fe4:	f7fe ff7a 	bl	16edc <find_cf_cfg>
	if (!cfg) {
   17fe8:	4605      	mov	r5, r0
   17fea:	b188      	cbz	r0, 18010 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17fec:	f104 0690 	add.w	r6, r4, #144	; 0x90
   17ff0:	4631      	mov	r1, r6
   17ff2:	7a20      	ldrb	r0, [r4, #8]
   17ff4:	f00f fb60 	bl	276b8 <bt_addr_le_is_bonded>
   17ff8:	b920      	cbnz	r0, 18004 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   17ffa:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   17ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   18000:	f7ff b858 	b.w	170b4 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18004:	4631      	mov	r1, r6
   18006:	1c68      	adds	r0, r5, #1
}
   18008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1800c:	f010 bbd6 	b.w	287bc <bt_addr_le_copy>
}
   18010:	bd70      	pop	{r4, r5, r6, pc}
   18012:	bf00      	nop
   18014:	000171e9 	.word	0x000171e9

00018018 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   18018:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1801a:	4b05      	ldr	r3, [pc, #20]	; (18030 <smp_find+0x18>)
{
   1801c:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1801e:	4618      	mov	r0, r3
   18020:	f010 fd7a 	bl	28b18 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   18024:	3b04      	subs	r3, #4
   18026:	2800      	cmp	r0, #0
}
   18028:	bf14      	ite	ne
   1802a:	4618      	movne	r0, r3
   1802c:	2000      	moveq	r0, #0
   1802e:	bd08      	pop	{r3, pc}
   18030:	20009a24 	.word	0x20009a24

00018034 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   18034:	4b08      	ldr	r3, [pc, #32]	; (18058 <latch_auth_cb+0x24>)
   18036:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1803a:	681a      	ldr	r2, [r3, #0]
   1803c:	4b07      	ldr	r3, [pc, #28]	; (1805c <latch_auth_cb+0x28>)
   1803e:	e8d0 1fef 	ldaex	r1, [r0]
   18042:	4299      	cmp	r1, r3
   18044:	d104      	bne.n	18050 <latch_auth_cb+0x1c>
   18046:	e8c0 2fec 	stlex	ip, r2, [r0]
   1804a:	f1bc 0f00 	cmp.w	ip, #0
   1804e:	d1f6      	bne.n	1803e <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18050:	e8d0 0faf 	lda	r0, [r0]
}
   18054:	4770      	bx	lr
   18056:	bf00      	nop
   18058:	20022724 	.word	0x20022724
   1805c:	20009a20 	.word	0x20009a20

00018060 <get_io_capa>:
{
   18060:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18062:	f7ff ffe7 	bl	18034 <latch_auth_cb>
	if (!smp_auth_cb) {
   18066:	4603      	mov	r3, r0
   18068:	b1c8      	cbz	r0, 1809e <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1806a:	e9d0 1200 	ldrd	r1, r2, [r0]
   1806e:	b921      	cbnz	r1, 1807a <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   18070:	2a00      	cmp	r2, #0
   18072:	bf0c      	ite	eq
   18074:	2003      	moveq	r0, #3
   18076:	2002      	movne	r0, #2
   18078:	e010      	b.n	1809c <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1807a:	b132      	cbz	r2, 1808a <get_io_capa+0x2a>
   1807c:	6883      	ldr	r3, [r0, #8]
   1807e:	b913      	cbnz	r3, 18086 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   18080:	4b09      	ldr	r3, [pc, #36]	; (180a8 <get_io_capa+0x48>)
   18082:	781b      	ldrb	r3, [r3, #0]
   18084:	b933      	cbnz	r3, 18094 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   18086:	2004      	movs	r0, #4
   18088:	e008      	b.n	1809c <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1808a:	4907      	ldr	r1, [pc, #28]	; (180a8 <get_io_capa+0x48>)
   1808c:	7808      	ldrb	r0, [r1, #0]
   1808e:	b128      	cbz	r0, 1809c <get_io_capa+0x3c>
   18090:	689b      	ldr	r3, [r3, #8]
   18092:	b933      	cbnz	r3, 180a2 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   18094:	3a00      	subs	r2, #0
   18096:	bf18      	it	ne
   18098:	2201      	movne	r2, #1
   1809a:	0050      	lsls	r0, r2, #1
}
   1809c:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1809e:	2003      	movs	r0, #3
   180a0:	e7fc      	b.n	1809c <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   180a2:	2001      	movs	r0, #1
   180a4:	e7fa      	b.n	1809c <get_io_capa+0x3c>
   180a6:	bf00      	nop
   180a8:	200236db 	.word	0x200236db

000180ac <get_auth>:
{
   180ac:	b510      	push	{r4, lr}
	if (sc_supported) {
   180ae:	4b0c      	ldr	r3, [pc, #48]	; (180e0 <get_auth+0x34>)
   180b0:	781b      	ldrb	r3, [r3, #0]
   180b2:	b17b      	cbz	r3, 180d4 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   180b4:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   180b8:	f7ff ffd2 	bl	18060 <get_io_capa>
	if (bondable) {
   180bc:	4b09      	ldr	r3, [pc, #36]	; (180e4 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   180be:	2803      	cmp	r0, #3
	if (bondable) {
   180c0:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   180c2:	bf0c      	ite	eq
   180c4:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   180c8:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   180cc:	b12b      	cbz	r3, 180da <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   180ce:	f044 0001 	orr.w	r0, r4, #1
}
   180d2:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   180d4:	f001 0407 	and.w	r4, r1, #7
   180d8:	e7ee      	b.n	180b8 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   180da:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   180de:	e7f8      	b.n	180d2 <get_auth+0x26>
   180e0:	200236db 	.word	0x200236db
   180e4:	200089e6 	.word	0x200089e6

000180e8 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   180e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   180ea:	4b0d      	ldr	r3, [pc, #52]	; (18120 <bt_smp_accept+0x38>)
{
   180ec:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   180ee:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   180f2:	b930      	cbnz	r0, 18102 <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.chan.ops = &ops;
   180f4:	4a0b      	ldr	r2, [pc, #44]	; (18124 <bt_smp_accept+0x3c>)

		*chan = &smp->chan.chan;
   180f6:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   180f8:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   180fa:	600b      	str	r3, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   180fc:	b005      	add	sp, #20
   180fe:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_ERR("No available SMP context for conn %p", conn);
   18102:	4b09      	ldr	r3, [pc, #36]	; (18128 <bt_smp_accept+0x40>)
   18104:	9203      	str	r2, [sp, #12]
   18106:	9302      	str	r3, [sp, #8]
   18108:	2300      	movs	r3, #0
   1810a:	2201      	movs	r2, #1
   1810c:	4618      	mov	r0, r3
   1810e:	e9cd 3300 	strd	r3, r3, [sp]
   18112:	4906      	ldr	r1, [pc, #24]	; (1812c <bt_smp_accept+0x44>)
   18114:	f010 fd58 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
   18118:	f06f 000b 	mvn.w	r0, #11
   1811c:	e7ee      	b.n	180fc <bt_smp_accept+0x14>
   1811e:	bf00      	nop
   18120:	20009a20 	.word	0x20009a20
   18124:	0002cc04 	.word	0x0002cc04
   18128:	000307be 	.word	0x000307be
   1812c:	0002c0d4 	.word	0x0002c0d4

00018130 <smp_chan_get>:
{
   18130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   18132:	2106      	movs	r1, #6
   18134:	f00f fe65 	bl	27e02 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18138:	4604      	mov	r4, r0
   1813a:	b958      	cbnz	r0, 18154 <smp_chan_get+0x24>
		LOG_ERR("Unable to find SMP channel");
   1813c:	4b07      	ldr	r3, [pc, #28]	; (1815c <smp_chan_get+0x2c>)
   1813e:	2201      	movs	r2, #1
   18140:	e9cd 0301 	strd	r0, r3, [sp, #4]
   18144:	4906      	ldr	r1, [pc, #24]	; (18160 <smp_chan_get+0x30>)
   18146:	4603      	mov	r3, r0
   18148:	9000      	str	r0, [sp, #0]
   1814a:	f010 fd3d 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
}
   1814e:	4620      	mov	r0, r4
   18150:	b004      	add	sp, #16
   18152:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   18154:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   18158:	e7f9      	b.n	1814e <smp_chan_get+0x1e>
   1815a:	bf00      	nop
   1815c:	000307e3 	.word	0x000307e3
   18160:	0002c0d4 	.word	0x0002c0d4

00018164 <smp_init>:
{
   18164:	b538      	push	{r3, r4, r5, lr}
   18166:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   18168:	22ec      	movs	r2, #236	; 0xec
   1816a:	2100      	movs	r1, #0
   1816c:	f012 fe1a 	bl	2ada4 <memset>
	if (bt_rand(smp->prnd, 16)) {
   18170:	2110      	movs	r1, #16
   18172:	f105 0027 	add.w	r0, r5, #39	; 0x27
   18176:	f7fc fad5 	bl	14724 <bt_rand>
   1817a:	4604      	mov	r4, r0
   1817c:	b948      	cbnz	r0, 18192 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1817e:	2105      	movs	r1, #5
   18180:	4628      	mov	r0, r5
   18182:	f010 fd30 	bl	28be6 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   18186:	f7fc fb7f 	bl	14888 <bt_pub_key_get>
   1818a:	4b03      	ldr	r3, [pc, #12]	; (18198 <smp_init+0x34>)
   1818c:	6018      	str	r0, [r3, #0]
}
   1818e:	4620      	mov	r0, r4
   18190:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   18192:	2408      	movs	r4, #8
   18194:	e7fb      	b.n	1818e <smp_init+0x2a>
   18196:	bf00      	nop
   18198:	2002284c 	.word	0x2002284c

0001819c <smp_dhkey_generate>:
{
   1819c:	b530      	push	{r4, r5, lr}
   1819e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   181a0:	1d05      	adds	r5, r0, #4
   181a2:	2108      	movs	r1, #8
   181a4:	4628      	mov	r0, r5
{
   181a6:	b085      	sub	sp, #20
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   181a8:	f010 fd1d 	bl	28be6 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   181ac:	490b      	ldr	r1, [pc, #44]	; (181dc <smp_dhkey_generate+0x40>)
   181ae:	f104 0057 	add.w	r0, r4, #87	; 0x57
   181b2:	f7fc fb77 	bl	148a4 <bt_dh_key_gen>
	if (err) {
   181b6:	b170      	cbz	r0, 181d6 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   181b8:	2108      	movs	r1, #8
   181ba:	4628      	mov	r0, r5
   181bc:	f010 fcd3 	bl	28b66 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   181c0:	4b07      	ldr	r3, [pc, #28]	; (181e0 <smp_dhkey_generate+0x44>)
   181c2:	2201      	movs	r2, #1
   181c4:	9302      	str	r3, [sp, #8]
   181c6:	2300      	movs	r3, #0
   181c8:	4906      	ldr	r1, [pc, #24]	; (181e4 <smp_dhkey_generate+0x48>)
   181ca:	4618      	mov	r0, r3
   181cc:	e9cd 3300 	strd	r3, r3, [sp]
   181d0:	f010 fcfa 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   181d4:	2008      	movs	r0, #8
}
   181d6:	b005      	add	sp, #20
   181d8:	bd30      	pop	{r4, r5, pc}
   181da:	bf00      	nop
   181dc:	00028fbf 	.word	0x00028fbf
   181e0:	000307fe 	.word	0x000307fe
   181e4:	0002c0d4 	.word	0x0002c0d4

000181e8 <smp_ident_info>:
{
   181e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   181ea:	460b      	mov	r3, r1
   181ec:	4606      	mov	r6, r0
   181ee:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   181f0:	210d      	movs	r1, #13
   181f2:	3004      	adds	r0, #4
   181f4:	f010 fc90 	bl	28b18 <atomic_test_bit>
   181f8:	b330      	cbz	r0, 18248 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   181fa:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   181fc:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   18200:	2002      	movs	r0, #2
   18202:	f103 0790 	add.w	r7, r3, #144	; 0x90
   18206:	463a      	mov	r2, r7
   18208:	7a19      	ldrb	r1, [r3, #8]
   1820a:	f001 fcbf 	bl	19b8c <bt_keys_get_type>
		if (!keys) {
   1820e:	4604      	mov	r4, r0
   18210:	b980      	cbnz	r0, 18234 <smp_ident_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18212:	4638      	mov	r0, r7
   18214:	f7f9 fef8 	bl	12008 <bt_addr_le_str>
   18218:	4b0e      	ldr	r3, [pc, #56]	; (18254 <smp_ident_info+0x6c>)
   1821a:	9003      	str	r0, [sp, #12]
   1821c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   18220:	4620      	mov	r0, r4
   18222:	4623      	mov	r3, r4
   18224:	2201      	movs	r2, #1
   18226:	490c      	ldr	r1, [pc, #48]	; (18258 <smp_ident_info+0x70>)
   18228:	9400      	str	r4, [sp, #0]
   1822a:	f010 fccd 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1822e:	2008      	movs	r0, #8
}
   18230:	b005      	add	sp, #20
   18232:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18234:	462b      	mov	r3, r5
   18236:	342a      	adds	r4, #42	; 0x2a
   18238:	f105 0210 	add.w	r2, r5, #16
   1823c:	f853 1b04 	ldr.w	r1, [r3], #4
   18240:	4293      	cmp	r3, r2
   18242:	f844 1b04 	str.w	r1, [r4], #4
   18246:	d1f9      	bne.n	1823c <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   18248:	4630      	mov	r0, r6
   1824a:	2109      	movs	r1, #9
   1824c:	f010 fccb 	bl	28be6 <atomic_set_bit>
	return 0;
   18250:	2000      	movs	r0, #0
   18252:	e7ed      	b.n	18230 <smp_ident_info+0x48>
   18254:	00030817 	.word	0x00030817
   18258:	0002c0d4 	.word	0x0002c0d4

0001825c <smp_encrypt_info>:
{
   1825c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1825e:	460b      	mov	r3, r1
   18260:	4606      	mov	r6, r0
   18262:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18264:	210d      	movs	r1, #13
   18266:	3004      	adds	r0, #4
   18268:	f010 fc56 	bl	28b18 <atomic_test_bit>
   1826c:	b330      	cbz	r0, 182bc <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1826e:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18270:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   18274:	2004      	movs	r0, #4
   18276:	f103 0790 	add.w	r7, r3, #144	; 0x90
   1827a:	463a      	mov	r2, r7
   1827c:	7a19      	ldrb	r1, [r3, #8]
   1827e:	f001 fc85 	bl	19b8c <bt_keys_get_type>
		if (!keys) {
   18282:	4604      	mov	r4, r0
   18284:	b980      	cbnz	r0, 182a8 <smp_encrypt_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18286:	4638      	mov	r0, r7
   18288:	f7f9 febe 	bl	12008 <bt_addr_le_str>
   1828c:	4b0e      	ldr	r3, [pc, #56]	; (182c8 <smp_encrypt_info+0x6c>)
   1828e:	9003      	str	r0, [sp, #12]
   18290:	e9cd 4301 	strd	r4, r3, [sp, #4]
   18294:	4620      	mov	r0, r4
   18296:	4623      	mov	r3, r4
   18298:	2201      	movs	r2, #1
   1829a:	490c      	ldr	r1, [pc, #48]	; (182cc <smp_encrypt_info+0x70>)
   1829c:	9400      	str	r4, [sp, #0]
   1829e:	f010 fc93 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   182a2:	2008      	movs	r0, #8
}
   182a4:	b005      	add	sp, #20
   182a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   182a8:	462b      	mov	r3, r5
   182aa:	341a      	adds	r4, #26
   182ac:	f105 0210 	add.w	r2, r5, #16
   182b0:	f853 1b04 	ldr.w	r1, [r3], #4
   182b4:	4293      	cmp	r3, r2
   182b6:	f844 1b04 	str.w	r1, [r4], #4
   182ba:	d1f9      	bne.n	182b0 <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   182bc:	4630      	mov	r0, r6
   182be:	2107      	movs	r1, #7
   182c0:	f010 fc91 	bl	28be6 <atomic_set_bit>
	return 0;
   182c4:	2000      	movs	r0, #0
   182c6:	e7ed      	b.n	182a4 <smp_encrypt_info+0x48>
   182c8:	00030817 	.word	0x00030817
   182cc:	0002c0d4 	.word	0x0002c0d4

000182d0 <smp_send_pairing_confirm>:
{
   182d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (smp->method) {
   182d2:	7a04      	ldrb	r4, [r0, #8]
{
   182d4:	4605      	mov	r5, r0
	switch (smp->method) {
   182d6:	2c02      	cmp	r4, #2
   182d8:	d823      	bhi.n	18322 <smp_send_pairing_confirm+0x52>
   182da:	b144      	cbz	r4, 182ee <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   182dc:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   182e0:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   182e4:	40dc      	lsrs	r4, r3
   182e6:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   182ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   182ee:	2103      	movs	r1, #3
   182f0:	4628      	mov	r0, r5
   182f2:	f010 fc88 	bl	28c06 <smp_create_pdu.constprop.0>
	if (!buf) {
   182f6:	4606      	mov	r6, r0
   182f8:	b308      	cbz	r0, 1833e <smp_send_pairing_confirm+0x6e>
   182fa:	2110      	movs	r1, #16
   182fc:	300c      	adds	r0, #12
   182fe:	f002 f8b7 	bl	1a470 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   18302:	9000      	str	r0, [sp, #0]
   18304:	4816      	ldr	r0, [pc, #88]	; (18360 <smp_send_pairing_confirm+0x90>)
   18306:	4623      	mov	r3, r4
   18308:	6800      	ldr	r0, [r0, #0]
   1830a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1830e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   18312:	f010 fefa 	bl	2910a <bt_crypto_f4>
   18316:	4604      	mov	r4, r0
   18318:	b1b0      	cbz	r0, 18348 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
   1831a:	4630      	mov	r0, r6
   1831c:	f001 ff86 	bl	1a22c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   18320:	e00d      	b.n	1833e <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   18322:	2c03      	cmp	r4, #3
   18324:	f04f 0300 	mov.w	r3, #0
   18328:	d00c      	beq.n	18344 <smp_send_pairing_confirm+0x74>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1832a:	4a0e      	ldr	r2, [pc, #56]	; (18364 <smp_send_pairing_confirm+0x94>)
   1832c:	4618      	mov	r0, r3
   1832e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   18332:	490d      	ldr	r1, [pc, #52]	; (18368 <smp_send_pairing_confirm+0x98>)
   18334:	2201      	movs	r2, #1
	switch (smp->method) {
   18336:	9403      	str	r4, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18338:	9300      	str	r3, [sp, #0]
   1833a:	f010 fc45 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1833e:	2008      	movs	r0, #8
}
   18340:	b004      	add	sp, #16
   18342:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   18344:	461c      	mov	r4, r3
   18346:	e7d2      	b.n	182ee <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   18348:	4602      	mov	r2, r0
   1834a:	4631      	mov	r1, r6
   1834c:	4628      	mov	r0, r5
   1834e:	f010 fc1e 	bl	28b8e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   18352:	1d28      	adds	r0, r5, #4
   18354:	4621      	mov	r1, r4
   18356:	f010 fc06 	bl	28b66 <atomic_clear_bit>
	return 0;
   1835a:	4620      	mov	r0, r4
   1835c:	e7f0      	b.n	18340 <smp_send_pairing_confirm+0x70>
   1835e:	bf00      	nop
   18360:	2002284c 	.word	0x2002284c
   18364:	00030831 	.word	0x00030831
   18368:	0002c0d4 	.word	0x0002c0d4

0001836c <smp_public_key_periph>:
{
   1836c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1836e:	4604      	mov	r4, r0
   18370:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18372:	f7ff fe5f 	bl	18034 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18376:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18378:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1837a:	210e      	movs	r1, #14
   1837c:	4628      	mov	r0, r5
   1837e:	f010 fbcb 	bl	28b18 <atomic_test_bit>
   18382:	b990      	cbnz	r0, 183aa <smp_public_key_periph+0x3e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   18384:	4b51      	ldr	r3, [pc, #324]	; (184cc <smp_public_key_periph+0x160>)
   18386:	2220      	movs	r2, #32
   18388:	6819      	ldr	r1, [r3, #0]
   1838a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1838e:	f012 fcbf 	bl	2ad10 <memcmp>
   18392:	4603      	mov	r3, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18394:	b948      	cbnz	r0, 183aa <smp_public_key_periph+0x3e>
		LOG_WRN("Remote public key rejected");
   18396:	4a4e      	ldr	r2, [pc, #312]	; (184d0 <smp_public_key_periph+0x164>)
   18398:	494e      	ldr	r1, [pc, #312]	; (184d4 <smp_public_key_periph+0x168>)
   1839a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1839e:	9000      	str	r0, [sp, #0]
   183a0:	2202      	movs	r2, #2
   183a2:	f010 fc11 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   183a6:	2008      	movs	r0, #8
   183a8:	e034      	b.n	18414 <smp_public_key_periph+0xa8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   183aa:	210c      	movs	r1, #12
   183ac:	4620      	mov	r0, r4
   183ae:	f010 fc2a 	bl	28c06 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   183b2:	4607      	mov	r7, r0
   183b4:	2800      	cmp	r0, #0
   183b6:	d0f6      	beq.n	183a6 <smp_public_key_periph+0x3a>
   183b8:	2140      	movs	r1, #64	; 0x40
   183ba:	300c      	adds	r0, #12
   183bc:	f002 f858 	bl	1a470 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   183c0:	4b42      	ldr	r3, [pc, #264]	; (184cc <smp_public_key_periph+0x160>)
   183c2:	4602      	mov	r2, r0
   183c4:	681b      	ldr	r3, [r3, #0]
   183c6:	4601      	mov	r1, r0
   183c8:	f103 0020 	add.w	r0, r3, #32
   183cc:	f853 cb04 	ldr.w	ip, [r3], #4
   183d0:	4283      	cmp	r3, r0
   183d2:	f841 cb04 	str.w	ip, [r1], #4
   183d6:	d1f9      	bne.n	183cc <smp_public_key_periph+0x60>
   183d8:	3220      	adds	r2, #32
   183da:	f103 0120 	add.w	r1, r3, #32
   183de:	f853 0b04 	ldr.w	r0, [r3], #4
   183e2:	428b      	cmp	r3, r1
   183e4:	f842 0b04 	str.w	r0, [r2], #4
   183e8:	d1f9      	bne.n	183de <smp_public_key_periph+0x72>
	smp_send(smp, req_buf, NULL, NULL);
   183ea:	2200      	movs	r2, #0
   183ec:	4639      	mov	r1, r7
   183ee:	4620      	mov	r0, r4
   183f0:	f010 fbcd 	bl	28b8e <smp_send.constprop.0>
	switch (smp->method) {
   183f4:	7a23      	ldrb	r3, [r4, #8]
   183f6:	2b05      	cmp	r3, #5
   183f8:	d85a      	bhi.n	184b0 <smp_public_key_periph+0x144>
   183fa:	e8df f003 	tbb	[pc, r3]
   183fe:	3903      	.short	0x3903
   18400:	5659030d 	.word	0x5659030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18404:	2104      	movs	r1, #4
   18406:	4620      	mov	r0, r4
   18408:	f010 fbed 	bl	28be6 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1840c:	f7ff ff60 	bl	182d0 <smp_send_pairing_confirm>
		if (err) {
   18410:	2800      	cmp	r0, #0
   18412:	d03c      	beq.n	1848e <smp_public_key_periph+0x122>
}
   18414:	b005      	add	sp, #20
   18416:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18418:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1841a:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1841e:	f7ff fe09 	bl	18034 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18422:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18424:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18426:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1842a:	f7fc f97b 	bl	14724 <bt_rand>
   1842e:	2800      	cmp	r0, #0
   18430:	d1b9      	bne.n	183a6 <smp_public_key_periph+0x3a>
		smp->passkey %= 1000000;
   18432:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18436:	4a28      	ldr	r2, [pc, #160]	; (184d8 <smp_public_key_periph+0x16c>)
	smp->passkey_round = 0U;
   18438:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   1843c:	fbb3 f1f2 	udiv	r1, r3, r2
   18440:	fb02 3311 	mls	r3, r2, r1, r3
   18444:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   18448:	b156      	cbz	r6, 18460 <smp_public_key_periph+0xf4>
   1844a:	6833      	ldr	r3, [r6, #0]
   1844c:	b143      	cbz	r3, 18460 <smp_public_key_periph+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1844e:	210b      	movs	r1, #11
   18450:	4628      	mov	r0, r5
   18452:	f010 fbc8 	bl	28be6 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   18456:	4638      	mov	r0, r7
   18458:	6833      	ldr	r3, [r6, #0]
   1845a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1845e:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18460:	2103      	movs	r1, #3
   18462:	4620      	mov	r0, r4
   18464:	f010 fbbf 	bl	28be6 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18468:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1846a:	f010 fbbc 	bl	28be6 <atomic_set_bit>
		break;
   1846e:	e00e      	b.n	1848e <smp_public_key_periph+0x122>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18470:	4620      	mov	r0, r4
   18472:	2103      	movs	r1, #3
   18474:	f010 fbb7 	bl	28be6 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18478:	210e      	movs	r1, #14
   1847a:	f010 fbb4 	bl	28be6 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1847e:	4628      	mov	r0, r5
   18480:	210a      	movs	r1, #10
   18482:	f010 fbb0 	bl	28be6 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   18486:	6873      	ldr	r3, [r6, #4]
   18488:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1848c:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1848e:	4628      	mov	r0, r5
   18490:	2107      	movs	r1, #7
   18492:	f010 fba8 	bl	28be6 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   18496:	2008      	movs	r0, #8
   18498:	f7ff fdbe 	bl	18018 <smp_find>
   1849c:	b9a0      	cbnz	r0, 184c8 <smp_public_key_periph+0x15c>
		return smp_dhkey_generate(smp);
   1849e:	4620      	mov	r0, r4
}
   184a0:	b005      	add	sp, #20
   184a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   184a6:	f7ff be79 	b.w	1819c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   184aa:	2104      	movs	r1, #4
   184ac:	4620      	mov	r0, r4
   184ae:	e7dc      	b.n	1846a <smp_public_key_periph+0xfe>
	switch (smp->method) {
   184b0:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   184b2:	4b0a      	ldr	r3, [pc, #40]	; (184dc <smp_public_key_periph+0x170>)
   184b4:	2201      	movs	r2, #1
   184b6:	9302      	str	r3, [sp, #8]
   184b8:	2300      	movs	r3, #0
   184ba:	4906      	ldr	r1, [pc, #24]	; (184d4 <smp_public_key_periph+0x168>)
   184bc:	4618      	mov	r0, r3
   184be:	e9cd 3300 	strd	r3, r3, [sp]
   184c2:	f010 fb81 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   184c6:	e76e      	b.n	183a6 <smp_public_key_periph+0x3a>
	return 0;
   184c8:	2000      	movs	r0, #0
   184ca:	e7a3      	b.n	18414 <smp_public_key_periph+0xa8>
   184cc:	2002284c 	.word	0x2002284c
   184d0:	0003084d 	.word	0x0003084d
   184d4:	0002c0d4 	.word	0x0002c0d4
   184d8:	000f4240 	.word	0x000f4240
   184dc:	00030831 	.word	0x00030831

000184e0 <smp_public_key>:
{
   184e0:	b530      	push	{r4, r5, lr}
   184e2:	4604      	mov	r4, r0
   184e4:	460d      	mov	r5, r1
   184e6:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   184e8:	f7ff fda4 	bl	18034 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   184ec:	f104 0057 	add.w	r0, r4, #87	; 0x57
   184f0:	4602      	mov	r2, r0
   184f2:	68eb      	ldr	r3, [r5, #12]
   184f4:	f103 0120 	add.w	r1, r3, #32
   184f8:	f853 5b04 	ldr.w	r5, [r3], #4
   184fc:	428b      	cmp	r3, r1
   184fe:	f842 5b04 	str.w	r5, [r2], #4
   18502:	d1f9      	bne.n	184f8 <smp_public_key+0x18>
   18504:	f104 0277 	add.w	r2, r4, #119	; 0x77
   18508:	f103 0120 	add.w	r1, r3, #32
   1850c:	f853 5b04 	ldr.w	r5, [r3], #4
   18510:	428b      	cmp	r3, r1
   18512:	f842 5b04 	str.w	r5, [r2], #4
   18516:	d1f9      	bne.n	1850c <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   18518:	f7fc f922 	bl	14760 <bt_pub_key_is_debug>
   1851c:	b940      	cbnz	r0, 18530 <smp_public_key+0x50>
	if (!sc_public_key) {
   1851e:	4b1c      	ldr	r3, [pc, #112]	; (18590 <smp_public_key+0xb0>)
   18520:	681d      	ldr	r5, [r3, #0]
   18522:	bb75      	cbnz	r5, 18582 <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   18524:	1d20      	adds	r0, r4, #4
   18526:	2106      	movs	r1, #6
   18528:	f010 fb5d 	bl	28be6 <atomic_set_bit>
	return 0;
   1852c:	4628      	mov	r0, r5
		return 0;
   1852e:	e026      	b.n	1857e <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   18530:	4b18      	ldr	r3, [pc, #96]	; (18594 <smp_public_key+0xb4>)
   18532:	2203      	movs	r2, #3
   18534:	9302      	str	r3, [sp, #8]
   18536:	2300      	movs	r3, #0
   18538:	4917      	ldr	r1, [pc, #92]	; (18598 <smp_public_key+0xb8>)
   1853a:	4618      	mov	r0, r3
   1853c:	e9cd 3300 	strd	r3, r3, [sp]
   18540:	f010 fb42 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   18544:	210e      	movs	r1, #14
   18546:	1d20      	adds	r0, r4, #4
   18548:	f010 fb4d 	bl	28be6 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1854c:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   18550:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18554:	b933      	cbnz	r3, 18564 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18556:	7a28      	ldrb	r0, [r5, #8]
   18558:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1855c:	f001 f9fc 	bl	19958 <bt_keys_get_addr>
   18560:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   18564:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18568:	2b00      	cmp	r3, #0
   1856a:	d0d8      	beq.n	1851e <smp_public_key+0x3e>
   1856c:	89da      	ldrh	r2, [r3, #14]
   1856e:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18572:	2a00      	cmp	r2, #0
   18574:	d0d3      	beq.n	1851e <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   18576:	7b5b      	ldrb	r3, [r3, #13]
   18578:	079b      	lsls	r3, r3, #30
   1857a:	d4d0      	bmi.n	1851e <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1857c:	2003      	movs	r0, #3
}
   1857e:	b005      	add	sp, #20
   18580:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   18582:	4620      	mov	r0, r4
}
   18584:	b005      	add	sp, #20
   18586:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   1858a:	f7ff beef 	b.w	1836c <smp_public_key_periph>
   1858e:	bf00      	nop
   18590:	2002284c 	.word	0x2002284c
   18594:	00030868 	.word	0x00030868
   18598:	0002c0d4 	.word	0x0002c0d4

0001859c <smp_pairing_req>:
{
   1859c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185a0:	460d      	mov	r5, r1
   185a2:	b086      	sub	sp, #24
   185a4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   185a6:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   185aa:	f7ff fd43 	bl	18034 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   185ae:	f8d5 800c 	ldr.w	r8, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   185b2:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   185b4:	f898 3003 	ldrb.w	r3, [r8, #3]
   185b8:	3b07      	subs	r3, #7
   185ba:	2b09      	cmp	r3, #9
   185bc:	d903      	bls.n	185c6 <smp_pairing_req+0x2a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   185be:	2006      	movs	r0, #6
}
   185c0:	b006      	add	sp, #24
   185c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   185c6:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   185ca:	b15b      	cbz	r3, 185e4 <smp_pairing_req+0x48>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   185cc:	1d25      	adds	r5, r4, #4
   185ce:	210f      	movs	r1, #15
   185d0:	4628      	mov	r0, r5
   185d2:	f010 faa1 	bl	28b18 <atomic_test_bit>
   185d6:	b980      	cbnz	r0, 185fa <smp_pairing_req+0x5e>
		int ret = smp_init(smp);
   185d8:	4620      	mov	r0, r4
   185da:	f7ff fdc3 	bl	18164 <smp_init>
		if (ret) {
   185de:	b160      	cbz	r0, 185fa <smp_pairing_req+0x5e>
			return ret;
   185e0:	b2c0      	uxtb	r0, r0
   185e2:	e7ed      	b.n	185c0 <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   185e4:	7a30      	ldrb	r0, [r6, #8]
   185e6:	f106 0190 	add.w	r1, r6, #144	; 0x90
   185ea:	f001 f9b5 	bl	19958 <bt_keys_get_addr>
   185ee:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   185f2:	2800      	cmp	r0, #0
   185f4:	d1ea      	bne.n	185cc <smp_pairing_req+0x30>
			return BT_SMP_ERR_UNSPECIFIED;
   185f6:	2008      	movs	r0, #8
   185f8:	e7e2      	b.n	185c0 <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   185fa:	2301      	movs	r3, #1
   185fc:	7263      	strb	r3, [r4, #9]
   185fe:	f8d8 3000 	ldr.w	r3, [r8]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18602:	4620      	mov	r0, r4
   18604:	f8c4 300a 	str.w	r3, [r4, #10]
   18608:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1860c:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1860e:	2302      	movs	r3, #2
   18610:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18612:	f898 1002 	ldrb.w	r1, [r8, #2]
   18616:	f7ff fd49 	bl	180ac <get_auth>
   1861a:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1861c:	4620      	mov	r0, r4
   1861e:	f7ff fd1f 	bl	18060 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18622:	4ba9      	ldr	r3, [pc, #676]	; (188c8 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   18624:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18626:	781b      	ldrb	r3, [r3, #0]
   18628:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1862a:	2310      	movs	r3, #16
   1862c:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1862e:	f898 3004 	ldrb.w	r3, [r8, #4]
   18632:	f003 0303 	and.w	r3, r3, #3
   18636:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   18638:	f898 3005 	ldrb.w	r3, [r8, #5]
   1863c:	f003 0301 	and.w	r3, r3, #1
   18640:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   18642:	7ce3      	ldrb	r3, [r4, #19]
   18644:	071b      	lsls	r3, r3, #28
   18646:	d50d      	bpl.n	18664 <smp_pairing_req+0xc8>
   18648:	f898 3002 	ldrb.w	r3, [r8, #2]
   1864c:	0718      	lsls	r0, r3, #28
   1864e:	d509      	bpl.n	18664 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   18650:	2105      	movs	r1, #5
   18652:	4628      	mov	r0, r5
   18654:	f010 fac7 	bl	28be6 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   18658:	7d63      	ldrb	r3, [r4, #21]
   1865a:	f003 0302 	and.w	r3, r3, #2
   1865e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   18660:	2300      	movs	r3, #0
   18662:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   18664:	7ce3      	ldrb	r3, [r4, #19]
   18666:	0699      	lsls	r1, r3, #26
   18668:	d507      	bpl.n	1867a <smp_pairing_req+0xde>
   1866a:	f898 3002 	ldrb.w	r3, [r8, #2]
   1866e:	069a      	lsls	r2, r3, #26
   18670:	d503      	bpl.n	1867a <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   18672:	2114      	movs	r1, #20
   18674:	4628      	mov	r0, r5
   18676:	f010 fab6 	bl	28be6 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1867a:	7da3      	ldrb	r3, [r4, #22]
   1867c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   18680:	7d63      	ldrb	r3, [r4, #21]
   18682:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   18686:	7ce3      	ldrb	r3, [r4, #19]
   18688:	07db      	lsls	r3, r3, #31
   1868a:	d507      	bpl.n	1869c <smp_pairing_req+0x100>
   1868c:	f898 3002 	ldrb.w	r3, [r8, #2]
   18690:	07d8      	lsls	r0, r3, #31
   18692:	d503      	bpl.n	1869c <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   18694:	210d      	movs	r1, #13
   18696:	4628      	mov	r0, r5
   18698:	f010 faa5 	bl	28be6 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1869c:	2103      	movs	r1, #3
   1869e:	4628      	mov	r0, r5
   186a0:	f010 faa1 	bl	28be6 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   186a4:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   186a6:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   186aa:	f010 fa35 	bl	28b18 <atomic_test_bit>
   186ae:	bb40      	cbnz	r0, 18702 <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   186b0:	f1b8 0f04 	cmp.w	r8, #4
   186b4:	d845      	bhi.n	18742 <smp_pairing_req+0x1a6>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   186b6:	7ae3      	ldrb	r3, [r4, #11]
   186b8:	7ca2      	ldrb	r2, [r4, #18]
   186ba:	4013      	ands	r3, r2
   186bc:	07d9      	lsls	r1, r3, #31
   186be:	d43e      	bmi.n	1873e <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   186c0:	7b21      	ldrb	r1, [r4, #12]
   186c2:	7ce3      	ldrb	r3, [r4, #19]
   186c4:	4319      	orrs	r1, r3
   186c6:	f011 0104 	ands.w	r1, r1, #4
   186ca:	d011      	beq.n	186f0 <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   186cc:	4620      	mov	r0, r4
   186ce:	f7ff fcc7 	bl	18060 <get_io_capa>
   186d2:	4b7e      	ldr	r3, [pc, #504]	; (188cc <smp_pairing_req+0x330>)
   186d4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   186d8:	4498      	add	r8, r3
   186da:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   186de:	2904      	cmp	r1, #4
   186e0:	d106      	bne.n	186f0 <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   186e2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   186e6:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   186e8:	2b00      	cmp	r3, #0
   186ea:	bf14      	ite	ne
   186ec:	2101      	movne	r1, #1
   186ee:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   186f0:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   186f2:	4620      	mov	r0, r4
   186f4:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   186f8:	f010 fa14 	bl	28b24 <update_keys_check>
   186fc:	bb18      	cbnz	r0, 18746 <smp_pairing_req+0x1aa>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   186fe:	2003      	movs	r0, #3
   18700:	e75e      	b.n	185c0 <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   18702:	7b23      	ldrb	r3, [r4, #12]
   18704:	7ce0      	ldrb	r0, [r4, #19]
   18706:	ea03 0200 	and.w	r2, r3, r0
   1870a:	0712      	lsls	r2, r2, #28
   1870c:	d506      	bpl.n	1871c <smp_pairing_req+0x180>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1870e:	7ae2      	ldrb	r2, [r4, #11]
   18710:	f894 c012 	ldrb.w	ip, [r4, #18]
   18714:	ea42 020c 	orr.w	r2, r2, ip
   18718:	07d2      	lsls	r2, r2, #31
   1871a:	d4e9      	bmi.n	186f0 <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1871c:	f1b8 0f04 	cmp.w	r8, #4
   18720:	d80f      	bhi.n	18742 <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   18722:	ea43 0100 	orr.w	r1, r3, r0
   18726:	f011 0104 	ands.w	r1, r1, #4
   1872a:	d0e1      	beq.n	186f0 <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1872c:	4620      	mov	r0, r4
   1872e:	f7ff fc97 	bl	18060 <get_io_capa>
   18732:	4b67      	ldr	r3, [pc, #412]	; (188d0 <smp_pairing_req+0x334>)
   18734:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   18738:	4443      	add	r3, r8
   1873a:	5c19      	ldrb	r1, [r3, r0]
   1873c:	e7d8      	b.n	186f0 <smp_pairing_req+0x154>
		return LEGACY_OOB;
   1873e:	2106      	movs	r1, #6
   18740:	e7d6      	b.n	186f0 <smp_pairing_req+0x154>
		return JUST_WORKS;
   18742:	2100      	movs	r1, #0
   18744:	e7d4      	b.n	186f0 <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   18746:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1874a:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1874c:	2b03      	cmp	r3, #3
   1874e:	d03c      	beq.n	187ca <smp_pairing_req+0x22e>
   18750:	d82a      	bhi.n	187a8 <smp_pairing_req+0x20c>
   18752:	3b01      	subs	r3, #1
   18754:	2b01      	cmp	r3, #1
   18756:	f63f af4e 	bhi.w	185f6 <smp_pairing_req+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1875a:	2105      	movs	r1, #5
   1875c:	4628      	mov	r0, r5
   1875e:	f010 f9db 	bl	28b18 <atomic_test_bit>
   18762:	2800      	cmp	r0, #0
   18764:	f040 80be 	bne.w	188e4 <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18768:	4620      	mov	r0, r4
   1876a:	f7ff fc63 	bl	18034 <latch_auth_cb>
   1876e:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18770:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   18772:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18776:	f7ff fc5d 	bl	18034 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1877a:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1877e:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   18780:	f898 0008 	ldrb.w	r0, [r8, #8]
   18784:	f001 f9c6 	bl	19b14 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   18788:	7a23      	ldrb	r3, [r4, #8]
   1878a:	b310      	cbz	r0, 187d2 <smp_pairing_req+0x236>
   1878c:	7b42      	ldrb	r2, [r0, #13]
   1878e:	07d2      	lsls	r2, r2, #31
   18790:	d51f      	bpl.n	187d2 <smp_pairing_req+0x236>
   18792:	b9f3      	cbnz	r3, 187d2 <smp_pairing_req+0x236>
		LOG_ERR("JustWorks failed, authenticated keys present");
   18794:	4a4f      	ldr	r2, [pc, #316]	; (188d4 <smp_pairing_req+0x338>)
   18796:	4618      	mov	r0, r3
   18798:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1879c:	494e      	ldr	r1, [pc, #312]	; (188d8 <smp_pairing_req+0x33c>)
   1879e:	2201      	movs	r2, #1
   187a0:	9300      	str	r3, [sp, #0]
   187a2:	f010 fa11 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   187a6:	e726      	b.n	185f6 <smp_pairing_req+0x5a>
	switch (sec) {
   187a8:	2b04      	cmp	r3, #4
   187aa:	f47f af24 	bne.w	185f6 <smp_pairing_req+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
   187ae:	7d23      	ldrb	r3, [r4, #20]
   187b0:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   187b2:	4293      	cmp	r3, r2
   187b4:	bf28      	it	cs
   187b6:	4613      	movcs	r3, r2
   187b8:	2b10      	cmp	r3, #16
   187ba:	f47f af00 	bne.w	185be <smp_pairing_req+0x22>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   187be:	2105      	movs	r1, #5
   187c0:	4628      	mov	r0, r5
   187c2:	f010 f9a9 	bl	28b18 <atomic_test_bit>
   187c6:	2800      	cmp	r0, #0
   187c8:	d099      	beq.n	186fe <smp_pairing_req+0x162>
		if (smp->method == JUST_WORKS) {
   187ca:	7a23      	ldrb	r3, [r4, #8]
   187cc:	2b00      	cmp	r3, #0
   187ce:	d1c4      	bne.n	1875a <smp_pairing_req+0x1be>
   187d0:	e795      	b.n	186fe <smp_pairing_req+0x162>
	switch (smp->method) {
   187d2:	2b06      	cmp	r3, #6
   187d4:	d85d      	bhi.n	18892 <smp_pairing_req+0x2f6>
   187d6:	e8df f003 	tbb	[pc, r3]
   187da:	5418      	.short	0x5418
   187dc:	5c5c5c2d 	.word	0x5c5c5c2d
   187e0:	04          	.byte	0x04
   187e1:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   187e2:	2e00      	cmp	r6, #0
   187e4:	d061      	beq.n	188aa <smp_pairing_req+0x30e>
   187e6:	68f3      	ldr	r3, [r6, #12]
   187e8:	2b00      	cmp	r3, #0
   187ea:	d05e      	beq.n	188aa <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   187ec:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   187ee:	210a      	movs	r1, #10
   187f0:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   187f2:	f8ad 3014 	strh.w	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   187f6:	f010 f9f6 	bl	28be6 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   187fa:	68f3      	ldr	r3, [r6, #12]
   187fc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18800:	a905      	add	r1, sp, #20
   18802:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   18804:	7a23      	ldrb	r3, [r4, #8]
   18806:	2b00      	cmp	r3, #0
   18808:	d151      	bne.n	188ae <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1880a:	210f      	movs	r1, #15
   1880c:	4628      	mov	r0, r5
   1880e:	f010 f983 	bl	28b18 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   18812:	2800      	cmp	r0, #0
   18814:	d14b      	bne.n	188ae <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   18816:	2f00      	cmp	r7, #0
   18818:	d049      	beq.n	188ae <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1881a:	697b      	ldr	r3, [r7, #20]
   1881c:	2b00      	cmp	r3, #0
   1881e:	d046      	beq.n	188ae <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18820:	4628      	mov	r0, r5
   18822:	210a      	movs	r1, #10
   18824:	f010 f9df 	bl	28be6 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   18828:	697b      	ldr	r3, [r7, #20]
   1882a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1882e:	4798      	blx	r3
		return 0;
   18830:	2000      	movs	r0, #0
   18832:	e6c5      	b.n	185c0 <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   18834:	2104      	movs	r1, #4
   18836:	a805      	add	r0, sp, #20
   18838:	f7fb ff74 	bl	14724 <bt_rand>
   1883c:	2800      	cmp	r0, #0
   1883e:	f47f aeda 	bne.w	185f6 <smp_pairing_req+0x5a>
			passkey %= 1000000;
   18842:	9b05      	ldr	r3, [sp, #20]
   18844:	4a25      	ldr	r2, [pc, #148]	; (188dc <smp_pairing_req+0x340>)
   18846:	fbb3 f1f2 	udiv	r1, r3, r2
   1884a:	fb02 3311 	mls	r3, r2, r1, r3
   1884e:	9305      	str	r3, [sp, #20]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   18850:	b14e      	cbz	r6, 18866 <smp_pairing_req+0x2ca>
   18852:	6833      	ldr	r3, [r6, #0]
   18854:	b13b      	cbz	r3, 18866 <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18856:	210b      	movs	r1, #11
   18858:	4628      	mov	r0, r5
   1885a:	f010 f9c4 	bl	28be6 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1885e:	4640      	mov	r0, r8
   18860:	6833      	ldr	r3, [r6, #0]
   18862:	9905      	ldr	r1, [sp, #20]
   18864:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   18866:	9b05      	ldr	r3, [sp, #20]
	dst[1] = val >> 8;
   18868:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1886c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   18870:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   18872:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   18876:	0a1b      	lsrs	r3, r3, #8
   18878:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1887c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   18880:	e7c0      	b.n	18804 <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18882:	4628      	mov	r0, r5
   18884:	210a      	movs	r1, #10
   18886:	f010 f9ae 	bl	28be6 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1888a:	4640      	mov	r0, r8
   1888c:	6873      	ldr	r3, [r6, #4]
   1888e:	4798      	blx	r3
	if (ret) {
   18890:	e7b8      	b.n	18804 <smp_pairing_req+0x268>
	switch (smp->method) {
   18892:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18894:	4b12      	ldr	r3, [pc, #72]	; (188e0 <smp_pairing_req+0x344>)
   18896:	2201      	movs	r2, #1
   18898:	9302      	str	r3, [sp, #8]
   1889a:	2300      	movs	r3, #0
   1889c:	490e      	ldr	r1, [pc, #56]	; (188d8 <smp_pairing_req+0x33c>)
   1889e:	4618      	mov	r0, r3
   188a0:	e9cd 3300 	strd	r3, r3, [sp]
   188a4:	f010 f990 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   188a8:	e6a5      	b.n	185f6 <smp_pairing_req+0x5a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   188aa:	2002      	movs	r0, #2
   188ac:	e688      	b.n	185c0 <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   188ae:	2103      	movs	r1, #3
   188b0:	4620      	mov	r0, r4
   188b2:	f010 f998 	bl	28be6 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   188b6:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   188b8:	f010 f995 	bl	28be6 <atomic_set_bit>
}
   188bc:	b006      	add	sp, #24
   188be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   188c2:	f010 b9bf 	b.w	28c44 <send_pairing_rsp>
   188c6:	bf00      	nop
   188c8:	200236dc 	.word	0x200236dc
   188cc:	00030c09 	.word	0x00030c09
   188d0:	00030bf0 	.word	0x00030bf0
   188d4:	00030889 	.word	0x00030889
   188d8:	0002c0d4 	.word	0x0002c0d4
   188dc:	000f4240 	.word	0x000f4240
   188e0:	00030831 	.word	0x00030831
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   188e4:	7a23      	ldrb	r3, [r4, #8]
   188e6:	b973      	cbnz	r3, 18906 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   188e8:	210f      	movs	r1, #15
   188ea:	4628      	mov	r0, r5
   188ec:	f010 f914 	bl	28b18 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   188f0:	b948      	cbnz	r0, 18906 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   188f2:	b147      	cbz	r7, 18906 <smp_pairing_req+0x36a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   188f4:	697b      	ldr	r3, [r7, #20]
   188f6:	b133      	cbz	r3, 18906 <smp_pairing_req+0x36a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   188f8:	4628      	mov	r0, r5
   188fa:	210a      	movs	r1, #10
   188fc:	f010 f973 	bl	28be6 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   18900:	4630      	mov	r0, r6
   18902:	697b      	ldr	r3, [r7, #20]
   18904:	e793      	b.n	1882e <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   18906:	210c      	movs	r1, #12
   18908:	4620      	mov	r0, r4
   1890a:	e7d5      	b.n	188b8 <smp_pairing_req+0x31c>

0001890c <compute_and_check_and_send_periph_dhcheck>:
{
   1890c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18910:	4604      	mov	r4, r0
   18912:	b090      	sub	sp, #64	; 0x40
	(void)memset(r, 0, sizeof(r));
   18914:	ad0c      	add	r5, sp, #48	; 0x30
   18916:	2210      	movs	r2, #16
   18918:	2100      	movs	r1, #0
   1891a:	4628      	mov	r0, r5
   1891c:	f012 fa42 	bl	2ada4 <memset>
	switch (smp->method) {
   18920:	7a23      	ldrb	r3, [r4, #8]
   18922:	2b05      	cmp	r3, #5
   18924:	d83a      	bhi.n	1899c <compute_and_check_and_send_periph_dhcheck+0x90>
   18926:	e8df f003 	tbb	[pc, r3]
   1892a:	0306      	.short	0x0306
   1892c:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   18930:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18934:	930c      	str	r3, [sp, #48]	; 0x30
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   18936:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1893a:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1893e:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   18942:	e9cd 7201 	strd	r7, r2, [sp, #4]
   18946:	f104 0837 	add.w	r8, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1894a:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1894e:	f104 0927 	add.w	r9, r4, #39	; 0x27
   18952:	9200      	str	r2, [sp, #0]
   18954:	4641      	mov	r1, r8
   18956:	464a      	mov	r2, r9
   18958:	3397      	adds	r3, #151	; 0x97
   1895a:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1895e:	f001 f987 	bl	19c70 <bt_crypto_f5>
   18962:	4682      	mov	sl, r0
   18964:	b348      	cbz	r0, 189ba <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   18966:	4b4e      	ldr	r3, [pc, #312]	; (18aa0 <compute_and_check_and_send_periph_dhcheck+0x194>)
   18968:	9302      	str	r3, [sp, #8]
   1896a:	2300      	movs	r3, #0
   1896c:	e9cd 3300 	strd	r3, r3, [sp]
   18970:	2201      	movs	r2, #1
   18972:	4618      	mov	r0, r3
   18974:	494b      	ldr	r1, [pc, #300]	; (18aa4 <compute_and_check_and_send_periph_dhcheck+0x198>)
   18976:	f010 f927 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1897a:	e01a      	b.n	189b2 <compute_and_check_and_send_periph_dhcheck+0xa6>
		if (smp->oobd_remote) {
   1897c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   18980:	2b00      	cmp	r3, #0
   18982:	d0d8      	beq.n	18936 <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   18984:	462e      	mov	r6, r5
   18986:	f103 0710 	add.w	r7, r3, #16
   1898a:	4632      	mov	r2, r6
   1898c:	6818      	ldr	r0, [r3, #0]
   1898e:	6859      	ldr	r1, [r3, #4]
   18990:	3308      	adds	r3, #8
   18992:	c203      	stmia	r2!, {r0, r1}
   18994:	42bb      	cmp	r3, r7
   18996:	4616      	mov	r6, r2
   18998:	d1f7      	bne.n	1898a <compute_and_check_and_send_periph_dhcheck+0x7e>
   1899a:	e7cc      	b.n	18936 <compute_and_check_and_send_periph_dhcheck+0x2a>
	switch (smp->method) {
   1899c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1899e:	4b42      	ldr	r3, [pc, #264]	; (18aa8 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   189a0:	2201      	movs	r2, #1
   189a2:	9302      	str	r3, [sp, #8]
   189a4:	2300      	movs	r3, #0
   189a6:	493f      	ldr	r1, [pc, #252]	; (18aa4 <compute_and_check_and_send_periph_dhcheck+0x198>)
   189a8:	4618      	mov	r0, r3
   189aa:	e9cd 3300 	strd	r3, r3, [sp]
   189ae:	f010 f90b 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   189b2:	2008      	movs	r0, #8
}
   189b4:	b010      	add	sp, #64	; 0x40
   189b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   189ba:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   189be:	ae08      	add	r6, sp, #32
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   189c0:	f103 0297 	add.w	r2, r3, #151	; 0x97
   189c4:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   189c6:	9301      	str	r3, [sp, #4]
   189c8:	f104 0311 	add.w	r3, r4, #17
   189cc:	9202      	str	r2, [sp, #8]
   189ce:	9300      	str	r3, [sp, #0]
   189d0:	4642      	mov	r2, r8
   189d2:	462b      	mov	r3, r5
   189d4:	4649      	mov	r1, r9
   189d6:	4638      	mov	r0, r7
   189d8:	9603      	str	r6, [sp, #12]
   189da:	f010 fbbb 	bl	29154 <bt_crypto_f6>
   189de:	b130      	cbz	r0, 189ee <compute_and_check_and_send_periph_dhcheck+0xe2>
		LOG_ERR("Calculate local DHKey check failed");
   189e0:	4b32      	ldr	r3, [pc, #200]	; (18aac <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   189e2:	f8cd a000 	str.w	sl, [sp]
   189e6:	e9cd a301 	strd	sl, r3, [sp, #4]
   189ea:	4653      	mov	r3, sl
   189ec:	e7c0      	b.n	18970 <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   189ee:	7a23      	ldrb	r3, [r4, #8]
   189f0:	2b05      	cmp	r3, #5
   189f2:	d10e      	bne.n	18a12 <compute_and_check_and_send_periph_dhcheck+0x106>
		if (smp->oobd_local) {
   189f4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   189f8:	b311      	cbz	r1, 18a40 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   189fa:	460b      	mov	r3, r1
   189fc:	46ac      	mov	ip, r5
   189fe:	f101 0e10 	add.w	lr, r1, #16
   18a02:	4662      	mov	r2, ip
   18a04:	6818      	ldr	r0, [r3, #0]
   18a06:	6859      	ldr	r1, [r3, #4]
   18a08:	3308      	adds	r3, #8
   18a0a:	c203      	stmia	r2!, {r0, r1}
   18a0c:	4573      	cmp	r3, lr
   18a0e:	4694      	mov	ip, r2
   18a10:	d1f7      	bne.n	18a02 <compute_and_check_and_send_periph_dhcheck+0xf6>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   18a12:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   18a16:	f10d 0a10 	add.w	sl, sp, #16
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   18a1a:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   18a1e:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   18a20:	9301      	str	r3, [sp, #4]
   18a22:	f104 030a 	add.w	r3, r4, #10
   18a26:	9202      	str	r2, [sp, #8]
   18a28:	9300      	str	r3, [sp, #0]
   18a2a:	464a      	mov	r2, r9
   18a2c:	462b      	mov	r3, r5
   18a2e:	4641      	mov	r1, r8
   18a30:	4638      	mov	r0, r7
   18a32:	f8cd a00c 	str.w	sl, [sp, #12]
   18a36:	f010 fb8d 	bl	29154 <bt_crypto_f6>
   18a3a:	b130      	cbz	r0, 18a4a <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   18a3c:	4b1c      	ldr	r3, [pc, #112]	; (18ab0 <compute_and_check_and_send_periph_dhcheck+0x1a4>)
   18a3e:	e793      	b.n	18968 <compute_and_check_and_send_periph_dhcheck+0x5c>
			memset(r, 0, sizeof(r));
   18a40:	2210      	movs	r2, #16
   18a42:	4628      	mov	r0, r5
   18a44:	f012 f9ae 	bl	2ada4 <memset>
   18a48:	e7e3      	b.n	18a12 <compute_and_check_and_send_periph_dhcheck+0x106>
	if (memcmp(smp->e, re, 16)) {
   18a4a:	2210      	movs	r2, #16
   18a4c:	4651      	mov	r1, sl
   18a4e:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   18a52:	f012 f95d 	bl	2ad10 <memcmp>
   18a56:	bb00      	cbnz	r0, 18a9a <compute_and_check_and_send_periph_dhcheck+0x18e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   18a58:	210d      	movs	r1, #13
   18a5a:	4620      	mov	r0, r4
   18a5c:	f010 f8d3 	bl	28c06 <smp_create_pdu.constprop.0>
	if (!buf) {
   18a60:	4607      	mov	r7, r0
   18a62:	2800      	cmp	r0, #0
   18a64:	d0a5      	beq.n	189b2 <compute_and_check_and_send_periph_dhcheck+0xa6>
   18a66:	2110      	movs	r1, #16
   18a68:	300c      	adds	r0, #12
   18a6a:	f001 fd01 	bl	1a470 <net_buf_simple_add>
   18a6e:	4632      	mov	r2, r6
   18a70:	4603      	mov	r3, r0
   18a72:	4616      	mov	r6, r2
   18a74:	ce03      	ldmia	r6!, {r0, r1}
   18a76:	42ae      	cmp	r6, r5
   18a78:	6018      	str	r0, [r3, #0]
   18a7a:	6059      	str	r1, [r3, #4]
   18a7c:	4632      	mov	r2, r6
   18a7e:	f103 0308 	add.w	r3, r3, #8
   18a82:	d1f6      	bne.n	18a72 <compute_and_check_and_send_periph_dhcheck+0x166>
	smp_send(smp, buf, NULL, NULL);
   18a84:	2200      	movs	r2, #0
   18a86:	4639      	mov	r1, r7
   18a88:	4620      	mov	r0, r4
   18a8a:	f010 f880 	bl	28b8e <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   18a8e:	1d20      	adds	r0, r4, #4
   18a90:	2101      	movs	r1, #1
   18a92:	f010 f8a8 	bl	28be6 <atomic_set_bit>
	return 0;
   18a96:	2000      	movs	r0, #0
   18a98:	e78c      	b.n	189b4 <compute_and_check_and_send_periph_dhcheck+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   18a9a:	200b      	movs	r0, #11
   18a9c:	e78a      	b.n	189b4 <compute_and_check_and_send_periph_dhcheck+0xa8>
   18a9e:	bf00      	nop
   18aa0:	000308b6 	.word	0x000308b6
   18aa4:	0002c0d4 	.word	0x0002c0d4
   18aa8:	00030831 	.word	0x00030831
   18aac:	000308cb 	.word	0x000308cb
   18ab0:	000308ee 	.word	0x000308ee

00018ab4 <bt_smp_connected>:
{
   18ab4:	b538      	push	{r3, r4, r5, lr}
   18ab6:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   18ab8:	4908      	ldr	r1, [pc, #32]	; (18adc <bt_smp_connected+0x28>)
   18aba:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   18abe:	3094      	adds	r0, #148	; 0x94
   18ac0:	f008 fd96 	bl	215f0 <k_work_init_delayable>
	smp_reset(smp);
   18ac4:	4628      	mov	r0, r5
   18ac6:	f010 f937 	bl	28d38 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18aca:	4b05      	ldr	r3, [pc, #20]	; (18ae0 <bt_smp_connected+0x2c>)
   18acc:	34c4      	adds	r4, #196	; 0xc4
   18ace:	e8d4 2fef 	ldaex	r2, [r4]
   18ad2:	e8c4 3fe1 	stlex	r1, r3, [r4]
   18ad6:	2900      	cmp	r1, #0
   18ad8:	d1f9      	bne.n	18ace <bt_smp_connected+0x1a>
}
   18ada:	bd38      	pop	{r3, r4, r5, pc}
   18adc:	00019761 	.word	0x00019761
   18ae0:	20009a20 	.word	0x20009a20

00018ae4 <smp_pairing_confirm>:
{
   18ae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   18ae6:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   18ae8:	68cd      	ldr	r5, [r1, #12]
{
   18aea:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   18aec:	210b      	movs	r1, #11
   18aee:	4630      	mov	r0, r6
   18af0:	f010 f839 	bl	28b66 <atomic_clear_bit>
   18af4:	462b      	mov	r3, r5
   18af6:	f104 0217 	add.w	r2, r4, #23
   18afa:	f105 0110 	add.w	r1, r5, #16
   18afe:	f853 0b04 	ldr.w	r0, [r3], #4
   18b02:	428b      	cmp	r3, r1
   18b04:	f842 0b04 	str.w	r0, [r2], #4
   18b08:	d1f9      	bne.n	18afe <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18b0a:	2105      	movs	r1, #5
   18b0c:	4630      	mov	r0, r6
   18b0e:	f010 f803 	bl	28b18 <atomic_test_bit>
   18b12:	b928      	cbnz	r0, 18b20 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   18b14:	4620      	mov	r0, r4
}
   18b16:	b004      	add	sp, #16
   18b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   18b1c:	f010 b982 	b.w	28e24 <legacy_pairing_confirm>
	switch (smp->method) {
   18b20:	7a23      	ldrb	r3, [r4, #8]
   18b22:	2b01      	cmp	r3, #1
   18b24:	d00a      	beq.n	18b3c <smp_pairing_confirm+0x58>
   18b26:	2b02      	cmp	r3, #2
   18b28:	d115      	bne.n	18b56 <smp_pairing_confirm+0x72>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18b2a:	2104      	movs	r1, #4
   18b2c:	4620      	mov	r0, r4
   18b2e:	f010 f85a 	bl	28be6 <atomic_set_bit>
}
   18b32:	b004      	add	sp, #16
   18b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   18b38:	f7ff bbca 	b.w	182d0 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   18b3c:	210a      	movs	r1, #10
   18b3e:	4630      	mov	r0, r6
   18b40:	f00f ffea 	bl	28b18 <atomic_test_bit>
   18b44:	2800      	cmp	r0, #0
   18b46:	d0f0      	beq.n	18b2a <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   18b48:	4630      	mov	r0, r6
   18b4a:	2100      	movs	r1, #0
   18b4c:	f010 f84b 	bl	28be6 <atomic_set_bit>
			return 0;
   18b50:	2000      	movs	r0, #0
}
   18b52:	b004      	add	sp, #16
   18b54:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   18b56:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18b58:	4b05      	ldr	r3, [pc, #20]	; (18b70 <smp_pairing_confirm+0x8c>)
   18b5a:	2201      	movs	r2, #1
   18b5c:	9302      	str	r3, [sp, #8]
   18b5e:	2300      	movs	r3, #0
   18b60:	4904      	ldr	r1, [pc, #16]	; (18b74 <smp_pairing_confirm+0x90>)
   18b62:	4618      	mov	r0, r3
   18b64:	e9cd 3300 	strd	r3, r3, [sp]
   18b68:	f010 f82e 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18b6c:	2008      	movs	r0, #8
   18b6e:	e7f0      	b.n	18b52 <smp_pairing_confirm+0x6e>
   18b70:	00030831 	.word	0x00030831
   18b74:	0002c0d4 	.word	0x0002c0d4

00018b78 <smp_pairing_random>:
{
   18b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18b7c:	4604      	mov	r4, r0
   18b7e:	b089      	sub	sp, #36	; 0x24
   18b80:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18b82:	f7ff fa57 	bl	18034 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   18b86:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18b8a:	4605      	mov	r5, r0
   18b8c:	464a      	mov	r2, r9
   18b8e:	68f3      	ldr	r3, [r6, #12]
   18b90:	f103 0110 	add.w	r1, r3, #16
   18b94:	f853 0b04 	ldr.w	r0, [r3], #4
   18b98:	428b      	cmp	r3, r1
   18b9a:	f842 0b04 	str.w	r0, [r2], #4
   18b9e:	d1f9      	bne.n	18b94 <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18ba0:	1d27      	adds	r7, r4, #4
   18ba2:	2105      	movs	r1, #5
   18ba4:	4638      	mov	r0, r7
   18ba6:	f00f ffb7 	bl	28b18 <atomic_test_bit>
   18baa:	2800      	cmp	r0, #0
   18bac:	d14f      	bne.n	18c4e <smp_pairing_random+0xd6>
	struct bt_conn *conn = smp->chan.chan.conn;
   18bae:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18bb2:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   18bb6:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18bba:	ad04      	add	r5, sp, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   18bbc:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18bbe:	9201      	str	r2, [sp, #4]
   18bc0:	9300      	str	r3, [sp, #0]
   18bc2:	4649      	mov	r1, r9
   18bc4:	4630      	mov	r0, r6
   18bc6:	9502      	str	r5, [sp, #8]
   18bc8:	f104 0310 	add.w	r3, r4, #16
   18bcc:	f104 0209 	add.w	r2, r4, #9
   18bd0:	f010 f8cd 	bl	28d6e <smp_c1>
	if (err) {
   18bd4:	bb20      	cbnz	r0, 18c20 <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   18bd6:	2210      	movs	r2, #16
   18bd8:	4629      	mov	r1, r5
   18bda:	f104 0017 	add.w	r0, r4, #23
   18bde:	f012 f897 	bl	2ad10 <memcmp>
   18be2:	4680      	mov	r8, r0
   18be4:	2800      	cmp	r0, #0
   18be6:	d177      	bne.n	18cd8 <smp_pairing_random+0x160>
	memcpy(out, r2, 8);
   18be8:	462b      	mov	r3, r5
   18bea:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   18bee:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   18bf2:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   18bf4:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   18bf6:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   18bfa:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   18bfe:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   18c00:	4629      	mov	r1, r5
   18c02:	4630      	mov	r0, r6
   18c04:	f00e ff3e 	bl	27a84 <bt_encrypt_le>
		if (err) {
   18c08:	b170      	cbz	r0, 18c28 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   18c0a:	4b62      	ldr	r3, [pc, #392]	; (18d94 <smp_pairing_random+0x21c>)
   18c0c:	f8cd 8000 	str.w	r8, [sp]
   18c10:	e9cd 8301 	strd	r8, r3, [sp, #4]
   18c14:	4643      	mov	r3, r8
		LOG_ERR("Calculate confirm failed");
   18c16:	2201      	movs	r2, #1
   18c18:	4618      	mov	r0, r3
   18c1a:	495f      	ldr	r1, [pc, #380]	; (18d98 <smp_pairing_random+0x220>)
   18c1c:	f00f ffd4 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18c20:	2008      	movs	r0, #8
}
   18c22:	b009      	add	sp, #36	; 0x24
   18c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18c28:	4633      	mov	r3, r6
   18c2a:	ae08      	add	r6, sp, #32
   18c2c:	462a      	mov	r2, r5
   18c2e:	ca03      	ldmia	r2!, {r0, r1}
   18c30:	42b2      	cmp	r2, r6
   18c32:	6018      	str	r0, [r3, #0]
   18c34:	6059      	str	r1, [r3, #4]
   18c36:	4615      	mov	r5, r2
   18c38:	f103 0308 	add.w	r3, r3, #8
   18c3c:	d1f6      	bne.n	18c2c <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   18c3e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18c40:	4638      	mov	r0, r7
   18c42:	f00f ffd0 	bl	28be6 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   18c46:	4620      	mov	r0, r4
   18c48:	f010 f816 	bl	28c78 <smp_send_pairing_random>
   18c4c:	e7e9      	b.n	18c22 <smp_pairing_random+0xaa>
	switch (smp->method) {
   18c4e:	7a23      	ldrb	r3, [r4, #8]
   18c50:	2b05      	cmp	r3, #5
   18c52:	f200 8091 	bhi.w	18d78 <smp_pairing_random+0x200>
   18c56:	e8df f003 	tbb	[pc, r3]
   18c5a:	1f19      	.short	0x1f19
   18c5c:	658f031f 	.word	0x658f031f
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   18c60:	ab04      	add	r3, sp, #16
   18c62:	494e      	ldr	r1, [pc, #312]	; (18d9c <smp_pairing_random+0x224>)
   18c64:	9300      	str	r3, [sp, #0]
   18c66:	464a      	mov	r2, r9
   18c68:	6809      	ldr	r1, [r1, #0]
   18c6a:	f104 0327 	add.w	r3, r4, #39	; 0x27
   18c6e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18c72:	f001 f865 	bl	19d40 <bt_crypto_g2>
   18c76:	2800      	cmp	r0, #0
   18c78:	d1d2      	bne.n	18c20 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18c7a:	210a      	movs	r1, #10
   18c7c:	4638      	mov	r0, r7
   18c7e:	f00f ffb2 	bl	28be6 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   18c82:	68ab      	ldr	r3, [r5, #8]
   18c84:	9904      	ldr	r1, [sp, #16]
   18c86:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18c8a:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   18c8c:	210d      	movs	r1, #13
   18c8e:	4620      	mov	r0, r4
   18c90:	f00f ffa9 	bl	28be6 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18c94:	2110      	movs	r1, #16
   18c96:	e7d3      	b.n	18c40 <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18c98:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   18c9c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18ca0:	493e      	ldr	r1, [pc, #248]	; (18d9c <smp_pairing_random+0x224>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18ca2:	40d3      	lsrs	r3, r2
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18ca4:	ad04      	add	r5, sp, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18ca6:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18caa:	9500      	str	r5, [sp, #0]
   18cac:	464a      	mov	r2, r9
   18cae:	6809      	ldr	r1, [r1, #0]
   18cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18cb4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18cb8:	f010 fa27 	bl	2910a <bt_crypto_f4>
   18cbc:	b128      	cbz	r0, 18cca <smp_pairing_random+0x152>
		LOG_ERR("Calculate confirm failed");
   18cbe:	4b38      	ldr	r3, [pc, #224]	; (18da0 <smp_pairing_random+0x228>)
   18cc0:	9302      	str	r3, [sp, #8]
   18cc2:	2300      	movs	r3, #0
   18cc4:	e9cd 3300 	strd	r3, r3, [sp]
   18cc8:	e7a5      	b.n	18c16 <smp_pairing_random+0x9e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   18cca:	2210      	movs	r2, #16
   18ccc:	4629      	mov	r1, r5
   18cce:	f104 0017 	add.w	r0, r4, #23
   18cd2:	f012 f81d 	bl	2ad10 <memcmp>
   18cd6:	b108      	cbz	r0, 18cdc <smp_pairing_random+0x164>
		return BT_SMP_ERR_CONFIRM_FAILED;
   18cd8:	2004      	movs	r0, #4
   18cda:	e7a2      	b.n	18c22 <smp_pairing_random+0xaa>
		atomic_set_bit(smp->allowed_cmds,
   18cdc:	2103      	movs	r1, #3
   18cde:	4620      	mov	r0, r4
   18ce0:	f00f ff81 	bl	28be6 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   18ce4:	f00f ffc8 	bl	28c78 <smp_send_pairing_random>
		if (err) {
   18ce8:	2800      	cmp	r0, #0
   18cea:	d19a      	bne.n	18c22 <smp_pairing_random+0xaa>
		smp->passkey_round++;
   18cec:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   18cf0:	3301      	adds	r3, #1
   18cf2:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   18cf4:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   18cf6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   18cfa:	d109      	bne.n	18d10 <smp_pairing_random+0x198>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   18cfc:	210d      	movs	r1, #13
   18cfe:	4620      	mov	r0, r4
   18d00:	f00f ff71 	bl	28be6 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18d04:	2110      	movs	r1, #16
   18d06:	4638      	mov	r0, r7
   18d08:	f00f ff6d 	bl	28be6 <atomic_set_bit>
			return 0;
   18d0c:	2000      	movs	r0, #0
   18d0e:	e788      	b.n	18c22 <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   18d10:	2110      	movs	r1, #16
   18d12:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18d16:	f7fb fd05 	bl	14724 <bt_rand>
   18d1a:	3800      	subs	r0, #0
   18d1c:	bf18      	it	ne
   18d1e:	2001      	movne	r0, #1
   18d20:	00c0      	lsls	r0, r0, #3
   18d22:	e77e      	b.n	18c22 <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   18d24:	2110      	movs	r1, #16
   18d26:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18d2a:	f7fb fcfb 	bl	14724 <bt_rand>
   18d2e:	2800      	cmp	r0, #0
   18d30:	f47f af76 	bne.w	18c20 <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   18d34:	b365      	cbz	r5, 18d90 <smp_pairing_random+0x218>
   18d36:	68eb      	ldr	r3, [r5, #12]
   18d38:	b353      	cbz	r3, 18d90 <smp_pairing_random+0x218>
			struct bt_conn_oob_info info = {
   18d3a:	4b1a      	ldr	r3, [pc, #104]	; (18da4 <smp_pairing_random+0x22c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18d3c:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   18d3e:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18d40:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   18d42:	f8ad 3010 	strh.w	r3, [sp, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18d46:	7ca3      	ldrb	r3, [r4, #18]
   18d48:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18d4c:	d412      	bmi.n	18d74 <smp_pairing_random+0x1fc>
   18d4e:	2b00      	cmp	r3, #0
   18d50:	bf14      	ite	ne
   18d52:	2301      	movne	r3, #1
   18d54:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   18d56:	f88d 3011 	strb.w	r3, [sp, #17]
			smp->oobd_local = NULL;
   18d5a:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   18d5c:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   18d5e:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   18d62:	210c      	movs	r1, #12
   18d64:	f00f ff3f 	bl	28be6 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   18d68:	68eb      	ldr	r3, [r5, #12]
   18d6a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18d6e:	a904      	add	r1, sp, #16
   18d70:	4798      	blx	r3
			return 0;
   18d72:	e7cb      	b.n	18d0c <smp_pairing_random+0x194>
		if (rsp_oob_present) {
   18d74:	005b      	lsls	r3, r3, #1
   18d76:	e7ee      	b.n	18d56 <smp_pairing_random+0x1de>
	switch (smp->method) {
   18d78:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18d7a:	4b0b      	ldr	r3, [pc, #44]	; (18da8 <smp_pairing_random+0x230>)
   18d7c:	2201      	movs	r2, #1
   18d7e:	9302      	str	r3, [sp, #8]
   18d80:	2300      	movs	r3, #0
   18d82:	4905      	ldr	r1, [pc, #20]	; (18d98 <smp_pairing_random+0x220>)
   18d84:	4618      	mov	r0, r3
   18d86:	e9cd 3300 	strd	r3, r3, [sp]
   18d8a:	f00f ff1d 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18d8e:	e747      	b.n	18c20 <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18d90:	2002      	movs	r0, #2
   18d92:	e746      	b.n	18c22 <smp_pairing_random+0xaa>
   18d94:	00030912 	.word	0x00030912
   18d98:	0002c0d4 	.word	0x0002c0d4
   18d9c:	2002284c 	.word	0x2002284c
   18da0:	00030927 	.word	0x00030927
   18da4:	0002c226 	.word	0x0002c226
   18da8:	00030831 	.word	0x00030831

00018dac <bt_smp_start_security>:
{
   18dac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   18db0:	78c6      	ldrb	r6, [r0, #3]
{
   18db2:	4604      	mov	r4, r0
	switch (conn->role) {
   18db4:	2e01      	cmp	r6, #1
   18db6:	d005      	beq.n	18dc4 <bt_smp_start_security+0x18>
		return -EINVAL;
   18db8:	f06f 0415 	mvn.w	r4, #21
}
   18dbc:	4620      	mov	r0, r4
   18dbe:	b003      	add	sp, #12
   18dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   18dc4:	f7ff f9b4 	bl	18130 <smp_chan_get>
	if (!smp) {
   18dc8:	4605      	mov	r5, r0
   18dca:	2800      	cmp	r0, #0
   18dcc:	f000 80ac 	beq.w	18f28 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18dd0:	1d07      	adds	r7, r0, #4
   18dd2:	2104      	movs	r1, #4
   18dd4:	4638      	mov	r0, r7
   18dd6:	f00f fe9f 	bl	28b18 <atomic_test_bit>
   18dda:	2800      	cmp	r0, #0
   18ddc:	f040 80a7 	bne.w	18f2e <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18de0:	2103      	movs	r1, #3
   18de2:	4638      	mov	r0, r7
   18de4:	f00f fe98 	bl	28b18 <atomic_test_bit>
   18de8:	b110      	cbz	r0, 18df0 <bt_smp_start_security+0x44>
		return -EBUSY;
   18dea:	f06f 040f 	mvn.w	r4, #15
   18dee:	e7e5      	b.n	18dbc <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   18df0:	4631      	mov	r1, r6
   18df2:	4638      	mov	r0, r7
   18df4:	f00f fe90 	bl	28b18 <atomic_test_bit>
   18df8:	2800      	cmp	r0, #0
   18dfa:	d1f6      	bne.n	18dea <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18dfc:	4628      	mov	r0, r5
   18dfe:	f7ff f919 	bl	18034 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   18e02:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18e06:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   18e08:	7a9b      	ldrb	r3, [r3, #10]
   18e0a:	2b03      	cmp	r3, #3
   18e0c:	d042      	beq.n	18e94 <bt_smp_start_security+0xe8>
   18e0e:	d832      	bhi.n	18e76 <bt_smp_start_security+0xca>
   18e10:	3b01      	subs	r3, #1
   18e12:	2b01      	cmp	r3, #1
   18e14:	d948      	bls.n	18ea8 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   18e16:	210b      	movs	r1, #11
   18e18:	1d20      	adds	r0, r4, #4
   18e1a:	f00f fe7d 	bl	28b18 <atomic_test_bit>
   18e1e:	2800      	cmp	r0, #0
   18e20:	d1ca      	bne.n	18db8 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   18e22:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   18e26:	b983      	cbnz	r3, 18e4a <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   18e28:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   18e2c:	4632      	mov	r2, r6
   18e2e:	2020      	movs	r0, #32
   18e30:	7a21      	ldrb	r1, [r4, #8]
   18e32:	f000 fde9 	bl	19a08 <bt_keys_find>
   18e36:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   18e3a:	b930      	cbnz	r0, 18e4a <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   18e3c:	4632      	mov	r2, r6
   18e3e:	2004      	movs	r0, #4
   18e40:	7a21      	ldrb	r1, [r4, #8]
   18e42:	f000 fde1 	bl	19a08 <bt_keys_find>
   18e46:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   18e4a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   18e4e:	2b00      	cmp	r3, #0
   18e50:	d0b2      	beq.n	18db8 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   18e52:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   18e54:	f012 0f24 	tst.w	r2, #36	; 0x24
   18e58:	d0ae      	beq.n	18db8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   18e5a:	7aa1      	ldrb	r1, [r4, #10]
   18e5c:	2902      	cmp	r1, #2
   18e5e:	d923      	bls.n	18ea8 <bt_smp_start_security+0xfc>
   18e60:	7b58      	ldrb	r0, [r3, #13]
   18e62:	07c0      	lsls	r0, r0, #31
   18e64:	d5a8      	bpl.n	18db8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   18e66:	2903      	cmp	r1, #3
   18e68:	d01e      	beq.n	18ea8 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   18e6a:	0692      	lsls	r2, r2, #26
   18e6c:	d5a4      	bpl.n	18db8 <bt_smp_start_security+0xc>
   18e6e:	7b1b      	ldrb	r3, [r3, #12]
   18e70:	2b10      	cmp	r3, #16
   18e72:	d1a1      	bne.n	18db8 <bt_smp_start_security+0xc>
   18e74:	e018      	b.n	18ea8 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   18e76:	2b04      	cmp	r3, #4
   18e78:	d1cd      	bne.n	18e16 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   18e7a:	4628      	mov	r0, r5
   18e7c:	f7ff f8f0 	bl	18060 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   18e80:	2803      	cmp	r0, #3
   18e82:	d104      	bne.n	18e8e <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   18e84:	2e00      	cmp	r6, #0
   18e86:	d0c6      	beq.n	18e16 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   18e88:	68f3      	ldr	r3, [r6, #12]
   18e8a:	2b00      	cmp	r3, #0
   18e8c:	d0c3      	beq.n	18e16 <bt_smp_start_security+0x6a>
   18e8e:	4b29      	ldr	r3, [pc, #164]	; (18f34 <bt_smp_start_security+0x188>)
   18e90:	781b      	ldrb	r3, [r3, #0]
   18e92:	e007      	b.n	18ea4 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   18e94:	4628      	mov	r0, r5
   18e96:	f7ff f8e3 	bl	18060 <get_io_capa>
   18e9a:	2803      	cmp	r0, #3
   18e9c:	d104      	bne.n	18ea8 <bt_smp_start_security+0xfc>
   18e9e:	2e00      	cmp	r6, #0
   18ea0:	d0b9      	beq.n	18e16 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   18ea2:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   18ea4:	2b00      	cmp	r3, #0
   18ea6:	d0b6      	beq.n	18e16 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   18ea8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   18eac:	b13b      	cbz	r3, 18ebe <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   18eae:	4628      	mov	r0, r5
   18eb0:	f7ff f958 	bl	18164 <smp_init>
   18eb4:	4680      	mov	r8, r0
   18eb6:	b170      	cbz	r0, 18ed6 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   18eb8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18ebc:	e77e      	b.n	18dbc <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18ebe:	7a20      	ldrb	r0, [r4, #8]
   18ec0:	f104 0190 	add.w	r1, r4, #144	; 0x90
   18ec4:	f000 fd48 	bl	19958 <bt_keys_get_addr>
   18ec8:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   18ecc:	2800      	cmp	r0, #0
   18ece:	d1ee      	bne.n	18eae <bt_smp_start_security+0x102>
			return -ENOMEM;
   18ed0:	f06f 040b 	mvn.w	r4, #11
   18ed4:	e772      	b.n	18dbc <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   18ed6:	210b      	movs	r1, #11
   18ed8:	4628      	mov	r0, r5
   18eda:	f00f fe94 	bl	28c06 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   18ede:	4606      	mov	r6, r0
   18ee0:	2800      	cmp	r0, #0
   18ee2:	d0e9      	beq.n	18eb8 <bt_smp_start_security+0x10c>
   18ee4:	2101      	movs	r1, #1
   18ee6:	300c      	adds	r0, #12
   18ee8:	f001 fac2 	bl	1a470 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   18eec:	2109      	movs	r1, #9
   18eee:	4681      	mov	r9, r0
   18ef0:	4628      	mov	r0, r5
   18ef2:	f7ff f8db 	bl	180ac <get_auth>
   18ef6:	4643      	mov	r3, r8
   18ef8:	f889 0000 	strb.w	r0, [r9]
   18efc:	4632      	mov	r2, r6
   18efe:	4620      	mov	r0, r4
   18f00:	2106      	movs	r1, #6
   18f02:	f8cd 8000 	str.w	r8, [sp]
   18f06:	f00e ff5a 	bl	27dbe <bt_l2cap_send_cb>
	if (err) {
   18f0a:	4604      	mov	r4, r0
   18f0c:	b118      	cbz	r0, 18f16 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   18f0e:	4630      	mov	r0, r6
   18f10:	f001 f98c 	bl	1a22c <net_buf_unref>
		return err;
   18f14:	e752      	b.n	18dbc <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   18f16:	4638      	mov	r0, r7
   18f18:	210f      	movs	r1, #15
   18f1a:	f00f fe64 	bl	28be6 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   18f1e:	2101      	movs	r1, #1
   18f20:	4628      	mov	r0, r5
   18f22:	f00f fe60 	bl	28be6 <atomic_set_bit>
	return 0;
   18f26:	e749      	b.n	18dbc <bt_smp_start_security+0x10>
		return -ENOTCONN;
   18f28:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   18f2c:	e746      	b.n	18dbc <bt_smp_start_security+0x10>
		return -EIO;
   18f2e:	f06f 0404 	mvn.w	r4, #4
   18f32:	e743      	b.n	18dbc <bt_smp_start_security+0x10>
   18f34:	200236db 	.word	0x200236db

00018f38 <smp_pairing_complete>:
{
   18f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f3a:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18f3c:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   18f40:	1d04      	adds	r4, r0, #4
	if (!status) {
   18f42:	bb39      	cbnz	r1, 18f94 <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   18f44:	210d      	movs	r1, #13
   18f46:	4620      	mov	r0, r4
   18f48:	f00f fde6 	bl	28b18 <atomic_test_bit>
	return list->head;
   18f4c:	4b36      	ldr	r3, [pc, #216]	; (19028 <smp_pairing_complete+0xf0>)
   18f4e:	4607      	mov	r7, r0
   18f50:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   18f52:	b19b      	cbz	r3, 18f7c <smp_pairing_complete+0x44>
	return node->next;
   18f54:	681c      	ldr	r4, [r3, #0]
   18f56:	b104      	cbz	r4, 18f5a <smp_pairing_complete+0x22>
   18f58:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   18f5a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   18f5e:	b113      	cbz	r3, 18f66 <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   18f60:	4639      	mov	r1, r7
   18f62:	4628      	mov	r0, r5
   18f64:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   18f66:	b14c      	cbz	r4, 18f7c <smp_pairing_complete+0x44>
   18f68:	4623      	mov	r3, r4
   18f6a:	68e4      	ldr	r4, [r4, #12]
   18f6c:	681b      	ldr	r3, [r3, #0]
   18f6e:	b11c      	cbz	r4, 18f78 <smp_pairing_complete+0x40>
   18f70:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   18f72:	2b00      	cmp	r3, #0
   18f74:	d1f4      	bne.n	18f60 <smp_pairing_complete+0x28>
   18f76:	e7f7      	b.n	18f68 <smp_pairing_complete+0x30>
   18f78:	2b00      	cmp	r3, #0
   18f7a:	d1f1      	bne.n	18f60 <smp_pairing_complete+0x28>
	smp_reset(smp);
   18f7c:	4630      	mov	r0, r6
   18f7e:	f00f fedb 	bl	28d38 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   18f82:	7a6a      	ldrb	r2, [r5, #9]
   18f84:	7aab      	ldrb	r3, [r5, #10]
   18f86:	429a      	cmp	r2, r3
   18f88:	d04d      	beq.n	19026 <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   18f8a:	4628      	mov	r0, r5
}
   18f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   18f90:	f7ff bf0c 	b.w	18dac <bt_smp_start_security>
	switch (smp_err) {
   18f94:	3901      	subs	r1, #1
   18f96:	b2c9      	uxtb	r1, r1
   18f98:	290e      	cmp	r1, #14
   18f9a:	bf96      	itet	ls
   18f9c:	4b23      	ldrls	r3, [pc, #140]	; (1902c <smp_pairing_complete+0xf4>)
	if (!status) {
   18f9e:	2709      	movhi	r7, #9
   18fa0:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   18fa2:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18fa6:	b143      	cbz	r3, 18fba <smp_pairing_complete+0x82>
   18fa8:	7b1b      	ldrb	r3, [r3, #12]
   18faa:	bb33      	cbnz	r3, 18ffa <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   18fac:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   18fb0:	f000 fe10 	bl	19bd4 <bt_keys_clear>
			conn->le.keys = NULL;
   18fb4:	2300      	movs	r3, #0
   18fb6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   18fba:	2102      	movs	r1, #2
   18fbc:	4620      	mov	r0, r4
   18fbe:	f00f fdab 	bl	28b18 <atomic_test_bit>
   18fc2:	b948      	cbnz	r0, 18fd8 <smp_pairing_complete+0xa0>
	switch (err) {
   18fc4:	2f07      	cmp	r7, #7
   18fc6:	bf94      	ite	ls
   18fc8:	4b19      	ldrls	r3, [pc, #100]	; (19030 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   18fca:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   18fcc:	463a      	mov	r2, r7
   18fce:	4628      	mov	r0, r5
   18fd0:	bf98      	it	ls
   18fd2:	5dd9      	ldrbls	r1, [r3, r7]
   18fd4:	f7fc fa80 	bl	154d8 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18fd8:	2103      	movs	r1, #3
   18fda:	4620      	mov	r0, r4
   18fdc:	f00f fd9c 	bl	28b18 <atomic_test_bit>
   18fe0:	2800      	cmp	r0, #0
   18fe2:	d0cb      	beq.n	18f7c <smp_pairing_complete+0x44>
	return list->head;
   18fe4:	4b10      	ldr	r3, [pc, #64]	; (19028 <smp_pairing_complete+0xf0>)
   18fe6:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   18fe8:	2b00      	cmp	r3, #0
   18fea:	d0c7      	beq.n	18f7c <smp_pairing_complete+0x44>
	return node->next;
   18fec:	681c      	ldr	r4, [r3, #0]
   18fee:	b104      	cbz	r4, 18ff2 <smp_pairing_complete+0xba>
   18ff0:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   18ff2:	f853 3c08 	ldr.w	r3, [r3, #-8]
   18ff6:	b94b      	cbnz	r3, 1900c <smp_pairing_complete+0xd4>
   18ff8:	e00b      	b.n	19012 <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   18ffa:	2102      	movs	r1, #2
   18ffc:	4620      	mov	r0, r4
   18ffe:	f00f fd8b 	bl	28b18 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   19002:	2800      	cmp	r0, #0
   19004:	d1d2      	bne.n	18fac <smp_pairing_complete+0x74>
   19006:	e7d8      	b.n	18fba <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19008:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1900a:	b123      	cbz	r3, 19016 <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   1900c:	4639      	mov	r1, r7
   1900e:	4628      	mov	r0, r5
   19010:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19012:	2c00      	cmp	r4, #0
   19014:	d0b2      	beq.n	18f7c <smp_pairing_complete+0x44>
   19016:	4623      	mov	r3, r4
   19018:	68e4      	ldr	r4, [r4, #12]
   1901a:	685b      	ldr	r3, [r3, #4]
   1901c:	2c00      	cmp	r4, #0
   1901e:	d1f3      	bne.n	19008 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   19020:	2b00      	cmp	r3, #0
   19022:	d1f3      	bne.n	1900c <smp_pairing_complete+0xd4>
   19024:	e7aa      	b.n	18f7c <smp_pairing_complete+0x44>
}
   19026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19028:	2002271c 	.word	0x2002271c
   1902c:	00030be1 	.word	0x00030be1
   19030:	00030bd0 	.word	0x00030bd0

00019034 <smp_error>:
{
   19034:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   19036:	1d03      	adds	r3, r0, #4
{
   19038:	4606      	mov	r6, r0
   1903a:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1903c:	4618      	mov	r0, r3
   1903e:	2102      	movs	r1, #2
{
   19040:	b085      	sub	sp, #20
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   19042:	f00f fd69 	bl	28b18 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   19046:	4604      	mov	r4, r0
   19048:	b120      	cbz	r0, 19054 <smp_error+0x20>
   1904a:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1904e:	fab4 f484 	clz	r4, r4
   19052:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19054:	2103      	movs	r1, #3
   19056:	4618      	mov	r0, r3
   19058:	f00f fd5e 	bl	28b18 <atomic_test_bit>
   1905c:	b1b0      	cbz	r0, 1908c <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   1905e:	4639      	mov	r1, r7
   19060:	4630      	mov	r0, r6
   19062:	f7ff ff69 	bl	18f38 <smp_pairing_complete>
	if (remote_already_completed) {
   19066:	b1f4      	cbz	r4, 190a6 <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   19068:	4b1d      	ldr	r3, [pc, #116]	; (190e0 <smp_error+0xac>)
   1906a:	491e      	ldr	r1, [pc, #120]	; (190e4 <smp_error+0xb0>)
   1906c:	9302      	str	r3, [sp, #8]
   1906e:	2300      	movs	r3, #0
   19070:	2202      	movs	r2, #2
   19072:	4618      	mov	r0, r3
   19074:	e9cd 3300 	strd	r3, r3, [sp]
   19078:	f00f fda6 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1907c:	2105      	movs	r1, #5
   1907e:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19082:	f00e fda6 	bl	27bd2 <bt_conn_disconnect>
		return 0;
   19086:	2000      	movs	r0, #0
}
   19088:	b005      	add	sp, #20
   1908a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1908c:	2101      	movs	r1, #1
   1908e:	4618      	mov	r0, r3
   19090:	f00f fd42 	bl	28b18 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19094:	2800      	cmp	r0, #0
   19096:	d1e2      	bne.n	1905e <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19098:	210f      	movs	r1, #15
   1909a:	4618      	mov	r0, r3
   1909c:	f00f fd3c 	bl	28b18 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   190a0:	2800      	cmp	r0, #0
   190a2:	d1dc      	bne.n	1905e <smp_error+0x2a>
   190a4:	e7df      	b.n	19066 <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   190a6:	2105      	movs	r1, #5
   190a8:	4630      	mov	r0, r6
   190aa:	f00f fdac 	bl	28c06 <smp_create_pdu.constprop.0>
	if (!buf) {
   190ae:	4605      	mov	r5, r0
   190b0:	b190      	cbz	r0, 190d8 <smp_error+0xa4>
   190b2:	2101      	movs	r1, #1
   190b4:	300c      	adds	r0, #12
   190b6:	f001 f9db 	bl	1a470 <net_buf_simple_add>
	rsp->reason = reason;
   190ba:	7007      	strb	r7, [r0, #0]
   190bc:	9400      	str	r4, [sp, #0]
   190be:	4623      	mov	r3, r4
   190c0:	462a      	mov	r2, r5
   190c2:	2106      	movs	r1, #6
   190c4:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   190c8:	f00e fe79 	bl	27dbe <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   190cc:	2800      	cmp	r0, #0
   190ce:	d0da      	beq.n	19086 <smp_error+0x52>
		net_buf_unref(buf);
   190d0:	4628      	mov	r0, r5
   190d2:	f001 f8ab 	bl	1a22c <net_buf_unref>
   190d6:	e7d6      	b.n	19086 <smp_error+0x52>
		return -ENOBUFS;
   190d8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   190dc:	e7d4      	b.n	19088 <smp_error+0x54>
   190de:	bf00      	nop
   190e0:	00030940 	.word	0x00030940
   190e4:	0002c0d4 	.word	0x0002c0d4

000190e8 <bt_smp_recv>:
{
   190e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   190ec:	8a0b      	ldrh	r3, [r1, #16]
{
   190ee:	4604      	mov	r4, r0
   190f0:	460e      	mov	r6, r1
   190f2:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   190f4:	b963      	cbnz	r3, 19110 <bt_smp_recv+0x28>
		LOG_ERR("Too small SMP PDU received");
   190f6:	4a3c      	ldr	r2, [pc, #240]	; (191e8 <bt_smp_recv+0x100>)
   190f8:	4618      	mov	r0, r3
   190fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
   190fe:	493b      	ldr	r1, [pc, #236]	; (191ec <bt_smp_recv+0x104>)
   19100:	2201      	movs	r2, #1
   19102:	9300      	str	r3, [sp, #0]
   19104:	f00f fd60 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
}
   19108:	2000      	movs	r0, #0
   1910a:	b006      	add	sp, #24
   1910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19110:	2101      	movs	r1, #1
   19112:	f106 000c 	add.w	r0, r6, #12
   19116:	f001 f98d 	bl	1a434 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1911a:	2104      	movs	r1, #4
   1911c:	4607      	mov	r7, r0
   1911e:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   19122:	f00f fcf9 	bl	28b18 <atomic_test_bit>
   19126:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1912a:	7839      	ldrb	r1, [r7, #0]
   1912c:	4604      	mov	r4, r0
   1912e:	b158      	cbz	r0, 19148 <bt_smp_recv+0x60>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   19130:	4b2f      	ldr	r3, [pc, #188]	; (191f0 <bt_smp_recv+0x108>)
   19132:	2202      	movs	r2, #2
   19134:	9302      	str	r3, [sp, #8]
   19136:	2300      	movs	r3, #0
   19138:	4618      	mov	r0, r3
   1913a:	e9cd 3300 	strd	r3, r3, [sp]
   1913e:	9103      	str	r1, [sp, #12]
   19140:	492a      	ldr	r1, [pc, #168]	; (191ec <bt_smp_recv+0x104>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   19142:	f00f fd41 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return 0;
   19146:	e7df      	b.n	19108 <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   19148:	290e      	cmp	r1, #14
   1914a:	d908      	bls.n	1915e <bt_smp_recv+0x76>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1914c:	4b29      	ldr	r3, [pc, #164]	; (191f4 <bt_smp_recv+0x10c>)
   1914e:	9103      	str	r1, [sp, #12]
   19150:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19154:	2202      	movs	r2, #2
   19156:	4603      	mov	r3, r0
   19158:	4924      	ldr	r1, [pc, #144]	; (191ec <bt_smp_recv+0x104>)
   1915a:	9000      	str	r0, [sp, #0]
   1915c:	e7f1      	b.n	19142 <bt_smp_recv+0x5a>
	if (!handlers[hdr->code].func) {
   1915e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 191f8 <bt_smp_recv+0x110>
   19162:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   19166:	b96b      	cbnz	r3, 19184 <bt_smp_recv+0x9c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   19168:	4a24      	ldr	r2, [pc, #144]	; (191fc <bt_smp_recv+0x114>)
   1916a:	9103      	str	r1, [sp, #12]
   1916c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   19170:	491e      	ldr	r1, [pc, #120]	; (191ec <bt_smp_recv+0x104>)
   19172:	2202      	movs	r2, #2
   19174:	9300      	str	r3, [sp, #0]
   19176:	f00f fd27 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1917a:	2107      	movs	r1, #7
		smp_error(smp, err);
   1917c:	4628      	mov	r0, r5
   1917e:	f7ff ff59 	bl	19034 <smp_error>
   19182:	e7c1      	b.n	19108 <bt_smp_recv+0x20>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   19184:	4628      	mov	r0, r5
   19186:	f00f fdc5 	bl	28d14 <atomic_test_and_clear_bit>
   1918a:	783a      	ldrb	r2, [r7, #0]
   1918c:	4603      	mov	r3, r0
   1918e:	b968      	cbnz	r0, 191ac <bt_smp_recv+0xc4>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   19190:	9203      	str	r2, [sp, #12]
   19192:	4a1b      	ldr	r2, [pc, #108]	; (19200 <bt_smp_recv+0x118>)
   19194:	4915      	ldr	r1, [pc, #84]	; (191ec <bt_smp_recv+0x104>)
   19196:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1919a:	9000      	str	r0, [sp, #0]
   1919c:	2202      	movs	r2, #2
   1919e:	f00f fd13 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   191a2:	783b      	ldrb	r3, [r7, #0]
   191a4:	2b05      	cmp	r3, #5
   191a6:	d0af      	beq.n	19108 <bt_smp_recv+0x20>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   191a8:	2108      	movs	r1, #8
   191aa:	e7e7      	b.n	1917c <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   191ac:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   191b0:	8a33      	ldrh	r3, [r6, #16]
   191b2:	7909      	ldrb	r1, [r1, #4]
   191b4:	4299      	cmp	r1, r3
   191b6:	d00d      	beq.n	191d4 <bt_smp_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   191b8:	e9cd 3203 	strd	r3, r2, [sp, #12]
   191bc:	4b11      	ldr	r3, [pc, #68]	; (19204 <bt_smp_recv+0x11c>)
   191be:	490b      	ldr	r1, [pc, #44]	; (191ec <bt_smp_recv+0x104>)
   191c0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   191c4:	2201      	movs	r2, #1
   191c6:	4623      	mov	r3, r4
   191c8:	4620      	mov	r0, r4
   191ca:	9400      	str	r4, [sp, #0]
   191cc:	f00f fcfc 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   191d0:	210a      	movs	r1, #10
   191d2:	e7d3      	b.n	1917c <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   191d4:	4631      	mov	r1, r6
   191d6:	4628      	mov	r0, r5
   191d8:	f858 3032 	ldr.w	r3, [r8, r2, lsl #3]
   191dc:	4798      	blx	r3
	if (err) {
   191de:	4601      	mov	r1, r0
   191e0:	2800      	cmp	r0, #0
   191e2:	d091      	beq.n	19108 <bt_smp_recv+0x20>
   191e4:	e7ca      	b.n	1917c <bt_smp_recv+0x94>
   191e6:	bf00      	nop
   191e8:	00030998 	.word	0x00030998
   191ec:	0002c0d4 	.word	0x0002c0d4
   191f0:	000309b3 	.word	0x000309b3
   191f4:	000309e4 	.word	0x000309e4
   191f8:	0002cc2c 	.word	0x0002cc2c
   191fc:	00030a06 	.word	0x00030a06
   19200:	00030a20 	.word	0x00030a20
   19204:	000304b1 	.word	0x000304b1

00019208 <bt_smp_pkey_ready>:
{
   19208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sc_public_key = pkey;
   1920a:	4a10      	ldr	r2, [pc, #64]	; (1924c <bt_smp_pkey_ready+0x44>)
{
   1920c:	4603      	mov	r3, r0
	sc_public_key = pkey;
   1920e:	6010      	str	r0, [r2, #0]
	if (!pkey) {
   19210:	b948      	cbnz	r0, 19226 <bt_smp_pkey_ready+0x1e>
		LOG_WRN("Public key not available");
   19212:	4a0f      	ldr	r2, [pc, #60]	; (19250 <bt_smp_pkey_ready+0x48>)
   19214:	490f      	ldr	r1, [pc, #60]	; (19254 <bt_smp_pkey_ready+0x4c>)
   19216:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1921a:	9000      	str	r0, [sp, #0]
   1921c:	2202      	movs	r2, #2
   1921e:	f00f fcd3 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
}
   19222:	b004      	add	sp, #16
   19224:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   19226:	480c      	ldr	r0, [pc, #48]	; (19258 <bt_smp_pkey_ready+0x50>)
   19228:	f007 fd5e 	bl	20ce8 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1922c:	4b0b      	ldr	r3, [pc, #44]	; (1925c <bt_smp_pkey_ready+0x54>)
		err = smp_public_key_periph(smp);
   1922e:	1f1c      	subs	r4, r3, #4
   19230:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   19234:	065b      	lsls	r3, r3, #25
   19236:	d5f4      	bpl.n	19222 <bt_smp_pkey_ready+0x1a>
		err = smp_public_key_periph(smp);
   19238:	4620      	mov	r0, r4
   1923a:	f7ff f897 	bl	1836c <smp_public_key_periph>
		if (err) {
   1923e:	4601      	mov	r1, r0
   19240:	2800      	cmp	r0, #0
   19242:	d0ee      	beq.n	19222 <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   19244:	4620      	mov	r0, r4
   19246:	f7ff fef5 	bl	19034 <smp_error>
   1924a:	e7ea      	b.n	19222 <bt_smp_pkey_ready+0x1a>
   1924c:	2002284c 	.word	0x2002284c
   19250:	00030a3b 	.word	0x00030a3b
   19254:	0002c0d4 	.word	0x0002c0d4
   19258:	20008b48 	.word	0x20008b48
   1925c:	20009a24 	.word	0x20009a24

00019260 <smp_ident_addr_info>:
{
   19260:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19264:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   19268:	68cf      	ldr	r7, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1926a:	f023 0302 	bic.w	r3, r3, #2
   1926e:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   19272:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19276:	783b      	ldrb	r3, [r7, #0]
{
   19278:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1927a:	f106 0890 	add.w	r8, r6, #144	; 0x90
   1927e:	b32b      	cbz	r3, 192cc <smp_ident_addr_info+0x6c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   19280:	79bb      	ldrb	r3, [r7, #6]
   19282:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19286:	2bc0      	cmp	r3, #192	; 0xc0
   19288:	d020      	beq.n	192cc <smp_ident_addr_info+0x6c>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1928a:	4638      	mov	r0, r7
   1928c:	f7f8 febc 	bl	12008 <bt_addr_le_str>
   19290:	2400      	movs	r4, #0
   19292:	4b5d      	ldr	r3, [pc, #372]	; (19408 <smp_ident_addr_info+0x1a8>)
   19294:	2201      	movs	r2, #1
   19296:	495d      	ldr	r1, [pc, #372]	; (1940c <smp_ident_addr_info+0x1ac>)
   19298:	9003      	str	r0, [sp, #12]
   1929a:	9302      	str	r3, [sp, #8]
   1929c:	4620      	mov	r0, r4
   1929e:	4623      	mov	r3, r4
   192a0:	e9cd 4400 	strd	r4, r4, [sp]
   192a4:	f00f fc90 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   192a8:	4640      	mov	r0, r8
   192aa:	f7f8 fead 	bl	12008 <bt_addr_le_str>
   192ae:	4b58      	ldr	r3, [pc, #352]	; (19410 <smp_ident_addr_info+0x1b0>)
   192b0:	9003      	str	r0, [sp, #12]
   192b2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   192b6:	4620      	mov	r0, r4
   192b8:	4623      	mov	r3, r4
   192ba:	2201      	movs	r2, #1
   192bc:	4953      	ldr	r1, [pc, #332]	; (1940c <smp_ident_addr_info+0x1ac>)
   192be:	9400      	str	r4, [sp, #0]
   192c0:	f00f fc82 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   192c4:	200a      	movs	r0, #10
}
   192c6:	b004      	add	sp, #16
   192c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   192cc:	2207      	movs	r2, #7
   192ce:	4639      	mov	r1, r7
   192d0:	4640      	mov	r0, r8
   192d2:	f011 fd1d 	bl	2ad10 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   192d6:	b168      	cbz	r0, 192f4 <smp_ident_addr_info+0x94>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   192d8:	4639      	mov	r1, r7
   192da:	7a30      	ldrb	r0, [r6, #8]
   192dc:	f000 fc1a 	bl	19b14 <bt_keys_find_addr>
		if (keys) {
   192e0:	4605      	mov	r5, r0
   192e2:	b138      	cbz	r0, 192f4 <smp_ident_addr_info+0x94>
			if (!update_keys_check(smp, keys)) {
   192e4:	4601      	mov	r1, r0
   192e6:	4620      	mov	r0, r4
   192e8:	f00f fc1c 	bl	28b24 <update_keys_check>
   192ec:	b1e8      	cbz	r0, 1932a <smp_ident_addr_info+0xca>
			bt_keys_clear(keys);
   192ee:	4628      	mov	r0, r5
   192f0:	f000 fc70 	bl	19bd4 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   192f4:	210d      	movs	r1, #13
   192f6:	1d20      	adds	r0, r4, #4
   192f8:	f00f fc0e 	bl	28b18 <atomic_test_bit>
   192fc:	2800      	cmp	r0, #0
   192fe:	d071      	beq.n	193e4 <smp_ident_addr_info+0x184>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   19300:	4642      	mov	r2, r8
   19302:	2002      	movs	r0, #2
   19304:	7a31      	ldrb	r1, [r6, #8]
   19306:	f000 fc41 	bl	19b8c <bt_keys_get_type>
		if (!keys) {
   1930a:	4605      	mov	r5, r0
   1930c:	b978      	cbnz	r0, 1932e <smp_ident_addr_info+0xce>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1930e:	4640      	mov	r0, r8
   19310:	f7f8 fe7a 	bl	12008 <bt_addr_le_str>
   19314:	4b3f      	ldr	r3, [pc, #252]	; (19414 <smp_ident_addr_info+0x1b4>)
   19316:	9003      	str	r0, [sp, #12]
   19318:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1931c:	2201      	movs	r2, #1
   1931e:	462b      	mov	r3, r5
   19320:	4628      	mov	r0, r5
   19322:	493a      	ldr	r1, [pc, #232]	; (1940c <smp_ident_addr_info+0x1ac>)
   19324:	9500      	str	r5, [sp, #0]
   19326:	f00f fc4f 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   1932a:	2008      	movs	r0, #8
   1932c:	e7cb      	b.n	192c6 <smp_ident_addr_info+0x66>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1932e:	78f3      	ldrb	r3, [r6, #3]
   19330:	bba3      	cbnz	r3, 1939c <smp_ident_addr_info+0x13c>
			dst = &conn->le.resp_addr;
   19332:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19336:	781a      	ldrb	r2, [r3, #0]
   19338:	2a01      	cmp	r2, #1
   1933a:	d11e      	bne.n	1937a <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
   1933c:	799a      	ldrb	r2, [r3, #6]
   1933e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19342:	2a40      	cmp	r2, #64	; 0x40
   19344:	d119      	bne.n	1937a <smp_ident_addr_info+0x11a>
   19346:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1934a:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   1934e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   19352:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19354:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   19358:	b17b      	cbz	r3, 1937a <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1935a:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   1935e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19362:	2bc0      	cmp	r3, #192	; 0xc0
   19364:	d009      	beq.n	1937a <smp_ident_addr_info+0x11a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   19366:	4639      	mov	r1, r7
   19368:	1c68      	adds	r0, r5, #1
   1936a:	f00f fc07 	bl	28b7c <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1936e:	4640      	mov	r0, r8
   19370:	f00f fc04 	bl	28b7c <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   19374:	4630      	mov	r0, r6
   19376:	f7fc f869 	bl	1544c <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1937a:	f894 60e9 	ldrb.w	r6, [r4, #233]	; 0xe9
   1937e:	f016 0602 	ands.w	r6, r6, #2
   19382:	d00e      	beq.n	193a2 <smp_ident_addr_info+0x142>
   19384:	4924      	ldr	r1, [pc, #144]	; (19418 <smp_ident_addr_info+0x1b8>)
   19386:	f640 6363 	movw	r3, #3683	; 0xe63
   1938a:	4a24      	ldr	r2, [pc, #144]	; (1941c <smp_ident_addr_info+0x1bc>)
   1938c:	4824      	ldr	r0, [pc, #144]	; (19420 <smp_ident_addr_info+0x1c0>)
   1938e:	f00c ff66 	bl	2625e <assert_print>
   19392:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19396:	4821      	ldr	r0, [pc, #132]	; (1941c <smp_ident_addr_info+0x1bc>)
   19398:	f00c ff5a 	bl	26250 <assert_post_action>
			dst = &conn->le.init_addr;
   1939c:	f106 0397 	add.w	r3, r6, #151	; 0x97
   193a0:	e7c9      	b.n	19336 <smp_ident_addr_info+0xd6>
	conflict = bt_id_find_conflict(new_bond);
   193a2:	4628      	mov	r0, r5
   193a4:	f7fa fafe 	bl	139a4 <bt_id_find_conflict>
	if (conflict) {
   193a8:	b158      	cbz	r0, 193c2 <smp_ident_addr_info+0x162>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   193aa:	4b1e      	ldr	r3, [pc, #120]	; (19424 <smp_ident_addr_info+0x1c4>)
   193ac:	4630      	mov	r0, r6
   193ae:	e9cd 6301 	strd	r6, r3, [sp, #4]
   193b2:	2202      	movs	r2, #2
   193b4:	4633      	mov	r3, r6
   193b6:	4915      	ldr	r1, [pc, #84]	; (1940c <smp_ident_addr_info+0x1ac>)
   193b8:	9600      	str	r6, [sp, #0]
   193ba:	f00f fc05 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   193be:	2003      	movs	r0, #3
   193c0:	e781      	b.n	192c6 <smp_ident_addr_info+0x66>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   193c2:	4628      	mov	r0, r5
   193c4:	f7fa faee 	bl	139a4 <bt_id_find_conflict>
   193c8:	b148      	cbz	r0, 193de <smp_ident_addr_info+0x17e>
   193ca:	4917      	ldr	r1, [pc, #92]	; (19428 <smp_ident_addr_info+0x1c8>)
   193cc:	f640 637f 	movw	r3, #3711	; 0xe7f
   193d0:	4a12      	ldr	r2, [pc, #72]	; (1941c <smp_ident_addr_info+0x1bc>)
   193d2:	4813      	ldr	r0, [pc, #76]	; (19420 <smp_ident_addr_info+0x1c0>)
   193d4:	f00c ff43 	bl	2625e <assert_print>
   193d8:	f640 617f 	movw	r1, #3711	; 0xe7f
   193dc:	e7db      	b.n	19396 <smp_ident_addr_info+0x136>
	bt_id_add(new_bond);
   193de:	4628      	mov	r0, r5
   193e0:	f7fa faf0 	bl	139c4 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   193e4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   193e8:	075b      	lsls	r3, r3, #29
   193ea:	d503      	bpl.n	193f4 <smp_ident_addr_info+0x194>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   193ec:	210a      	movs	r1, #10
   193ee:	4620      	mov	r0, r4
   193f0:	f00f fbf9 	bl	28be6 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   193f4:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   193f8:	b109      	cbz	r1, 193fe <smp_ident_addr_info+0x19e>
	return 0;
   193fa:	2000      	movs	r0, #0
   193fc:	e763      	b.n	192c6 <smp_ident_addr_info+0x66>
		smp_pairing_complete(smp, 0);
   193fe:	4620      	mov	r0, r4
   19400:	f7ff fd9a 	bl	18f38 <smp_pairing_complete>
   19404:	e7f9      	b.n	193fa <smp_ident_addr_info+0x19a>
   19406:	bf00      	nop
   19408:	00030a54 	.word	0x00030a54
   1940c:	0002c0d4 	.word	0x0002c0d4
   19410:	00030b3b 	.word	0x00030b3b
   19414:	00030817 	.word	0x00030817
   19418:	00030a97 	.word	0x00030a97
   1941c:	00030a68 	.word	0x00030a68
   19420:	0002d095 	.word	0x0002d095
   19424:	00030ab2 	.word	0x00030ab2
   19428:	00030aed 	.word	0x00030aed

0001942c <smp_central_ident>:
{
   1942c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1942e:	460b      	mov	r3, r1
   19430:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19432:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   19436:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19438:	210d      	movs	r1, #13
   1943a:	3004      	adds	r0, #4
   1943c:	f00f fb6c 	bl	28b18 <atomic_test_bit>
   19440:	b318      	cbz	r0, 1948a <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19442:	f105 0790 	add.w	r7, r5, #144	; 0x90
   19446:	7a29      	ldrb	r1, [r5, #8]
   19448:	463a      	mov	r2, r7
   1944a:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   1944c:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1944e:	f000 fb9d 	bl	19b8c <bt_keys_get_type>
		if (!keys) {
   19452:	4605      	mov	r5, r0
   19454:	b980      	cbnz	r0, 19478 <smp_central_ident+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19456:	4638      	mov	r0, r7
   19458:	f7f8 fdd6 	bl	12008 <bt_addr_le_str>
   1945c:	4b17      	ldr	r3, [pc, #92]	; (194bc <smp_central_ident+0x90>)
   1945e:	9003      	str	r0, [sp, #12]
   19460:	e9cd 5301 	strd	r5, r3, [sp, #4]
   19464:	4628      	mov	r0, r5
   19466:	462b      	mov	r3, r5
   19468:	2201      	movs	r2, #1
   1946a:	4915      	ldr	r1, [pc, #84]	; (194c0 <smp_central_ident+0x94>)
   1946c:	9500      	str	r5, [sp, #0]
   1946e:	f00f fbab 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   19472:	2008      	movs	r0, #8
}
   19474:	b005      	add	sp, #20
   19476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19478:	4632      	mov	r2, r6
   1947a:	f832 3b02 	ldrh.w	r3, [r2], #2
   1947e:	8303      	strh	r3, [r0, #24]
   19480:	f8d6 3002 	ldr.w	r3, [r6, #2]
   19484:	6103      	str	r3, [r0, #16]
   19486:	6853      	ldr	r3, [r2, #4]
   19488:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1948a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1948e:	f023 0201 	bic.w	r2, r3, #1
   19492:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19496:	079a      	lsls	r2, r3, #30
   19498:	d508      	bpl.n	194ac <smp_central_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1949a:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1949c:	4620      	mov	r0, r4
   1949e:	f00f fba2 	bl	28be6 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   194a2:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   194a6:	b129      	cbz	r1, 194b4 <smp_central_ident+0x88>
	return 0;
   194a8:	2000      	movs	r0, #0
   194aa:	e7e3      	b.n	19474 <smp_central_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   194ac:	075b      	lsls	r3, r3, #29
   194ae:	d5f8      	bpl.n	194a2 <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   194b0:	210a      	movs	r1, #10
   194b2:	e7f3      	b.n	1949c <smp_central_ident+0x70>
		smp_pairing_complete(smp, 0);
   194b4:	4620      	mov	r0, r4
   194b6:	f7ff fd3f 	bl	18f38 <smp_pairing_complete>
   194ba:	e7f5      	b.n	194a8 <smp_central_ident+0x7c>
   194bc:	00030817 	.word	0x00030817
   194c0:	0002c0d4 	.word	0x0002c0d4

000194c4 <smp_pairing_failed>:
{
   194c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   194c8:	460e      	mov	r6, r1
   194ca:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   194cc:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   194d0:	f7fe fdb0 	bl	18034 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   194d4:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   194d6:	4914      	ldr	r1, [pc, #80]	; (19528 <smp_pairing_failed+0x64>)
   194d8:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   194da:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   194dc:	9303      	str	r3, [sp, #12]
   194de:	4b13      	ldr	r3, [pc, #76]	; (1952c <smp_pairing_failed+0x68>)
   194e0:	2201      	movs	r2, #1
   194e2:	9302      	str	r3, [sp, #8]
   194e4:	2300      	movs	r3, #0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   194e6:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   194e8:	4618      	mov	r0, r3
   194ea:	e9cd 3300 	strd	r3, r3, [sp]
   194ee:	f00f fb6b 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   194f2:	210a      	movs	r1, #10
   194f4:	4638      	mov	r0, r7
   194f6:	f00f fc0d 	bl	28d14 <atomic_test_and_clear_bit>
   194fa:	b140      	cbz	r0, 1950e <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   194fc:	b975      	cbnz	r5, 1951c <smp_pairing_failed+0x58>
	smp_pairing_complete(smp, req->reason);
   194fe:	4620      	mov	r0, r4
   19500:	7831      	ldrb	r1, [r6, #0]
   19502:	f7ff fd19 	bl	18f38 <smp_pairing_complete>
}
   19506:	2000      	movs	r0, #0
   19508:	b004      	add	sp, #16
   1950a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1950e:	210b      	movs	r1, #11
   19510:	4638      	mov	r0, r7
   19512:	f00f fbff 	bl	28d14 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19516:	2800      	cmp	r0, #0
   19518:	d1f0      	bne.n	194fc <smp_pairing_failed+0x38>
   1951a:	e7f0      	b.n	194fe <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1951c:	692b      	ldr	r3, [r5, #16]
   1951e:	2b00      	cmp	r3, #0
   19520:	d0ed      	beq.n	194fe <smp_pairing_failed+0x3a>
			smp_auth_cb->cancel(conn);
   19522:	4640      	mov	r0, r8
   19524:	4798      	blx	r3
   19526:	e7ea      	b.n	194fe <smp_pairing_failed+0x3a>
   19528:	0002c0d4 	.word	0x0002c0d4
   1952c:	00030b0c 	.word	0x00030b0c

00019530 <bt_smp_encrypt_change>:
{
   19530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   19534:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19536:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1953a:	4604      	mov	r4, r0
   1953c:	460f      	mov	r7, r1
   1953e:	b08c      	sub	sp, #48	; 0x30
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19540:	2101      	movs	r1, #1
   19542:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   19544:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19548:	f00f fbe4 	bl	28d14 <atomic_test_and_clear_bit>
   1954c:	2800      	cmp	r0, #0
   1954e:	d068      	beq.n	19622 <bt_smp_encrypt_change+0xf2>
	if (hci_status) {
   19550:	b1e7      	cbz	r7, 1958c <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19552:	2103      	movs	r1, #3
   19554:	4630      	mov	r0, r6
   19556:	f00f fadf 	bl	28b18 <atomic_test_bit>
   1955a:	2800      	cmp	r0, #0
   1955c:	d061      	beq.n	19622 <bt_smp_encrypt_change+0xf2>
			uint8_t smp_err = smp_err_get(
   1955e:	4638      	mov	r0, r7
   19560:	f7f9 fcee 	bl	12f40 <bt_security_err_get>
	switch (auth_err) {
   19564:	3801      	subs	r0, #1
   19566:	b2c0      	uxtb	r0, r0
   19568:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   1956a:	bf8c      	ite	hi
   1956c:	2400      	movhi	r4, #0
   1956e:	4b75      	ldrls	r3, [pc, #468]	; (19744 <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19570:	f04f 0102 	mov.w	r1, #2
   19574:	bf98      	it	ls
   19576:	5c1c      	ldrbls	r4, [r3, r0]
   19578:	4630      	mov	r0, r6
   1957a:	f00f fb34 	bl	28be6 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1957e:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   19580:	4628      	mov	r0, r5
}
   19582:	b00c      	add	sp, #48	; 0x30
   19584:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   19588:	f7ff bcd6 	b.w	18f38 <smp_pairing_complete>
	if (!conn->encrypt) {
   1958c:	f898 300b 	ldrb.w	r3, [r8, #11]
   19590:	2b00      	cmp	r3, #0
   19592:	d046      	beq.n	19622 <bt_smp_encrypt_change+0xf2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19594:	2103      	movs	r1, #3
   19596:	4630      	mov	r0, r6
   19598:	f00f fabe 	bl	28b18 <atomic_test_bit>
   1959c:	b928      	cbnz	r0, 195aa <bt_smp_encrypt_change+0x7a>
		smp_reset(smp);
   1959e:	4628      	mov	r0, r5
}
   195a0:	b00c      	add	sp, #48	; 0x30
   195a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   195a6:	f00f bbc7 	b.w	28d38 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   195aa:	2105      	movs	r1, #5
   195ac:	4630      	mov	r0, r6
   195ae:	f00f fab3 	bl	28b18 <atomic_test_bit>
   195b2:	b1b8      	cbz	r0, 195e4 <bt_smp_encrypt_change+0xb4>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   195b4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   195b8:	071b      	lsls	r3, r3, #28
   195ba:	d507      	bpl.n	195cc <bt_smp_encrypt_change+0x9c>
   195bc:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   195c0:	071f      	lsls	r7, r3, #28
   195c2:	d503      	bpl.n	195cc <bt_smp_encrypt_change+0x9c>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   195c4:	2111      	movs	r1, #17
   195c6:	4630      	mov	r0, r6
   195c8:	f00f fb0d 	bl	28be6 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   195cc:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   195d0:	f023 0308 	bic.w	r3, r3, #8
   195d4:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   195d8:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   195dc:	f023 0308 	bic.w	r3, r3, #8
   195e0:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   195e4:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   195e8:	07d8      	lsls	r0, r3, #31
   195ea:	d51d      	bpl.n	19628 <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   195ec:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   195ee:	4628      	mov	r0, r5
   195f0:	f00f faf9 	bl	28be6 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   195f4:	2102      	movs	r1, #2
   195f6:	4630      	mov	r0, r6
   195f8:	f00f faf5 	bl	28be6 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   195fc:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   195fe:	f8d3 70c0 	ldr.w	r7, [r3, #192]	; 0xc0
   19602:	b9cf      	cbnz	r7, 19638 <bt_smp_encrypt_change+0x108>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   19604:	f103 0090 	add.w	r0, r3, #144	; 0x90
   19608:	f7f8 fcfe 	bl	12008 <bt_addr_le_str>
   1960c:	4b4e      	ldr	r3, [pc, #312]	; (19748 <bt_smp_encrypt_change+0x218>)
   1960e:	9003      	str	r0, [sp, #12]
   19610:	e9cd 7301 	strd	r7, r3, [sp, #4]
   19614:	2201      	movs	r2, #1
   19616:	463b      	mov	r3, r7
   19618:	4638      	mov	r0, r7
   1961a:	494c      	ldr	r1, [pc, #304]	; (1974c <bt_smp_encrypt_change+0x21c>)
   1961c:	9700      	str	r7, [sp, #0]
   1961e:	f00f fad3 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
}
   19622:	b00c      	add	sp, #48	; 0x30
   19624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19628:	0799      	lsls	r1, r3, #30
   1962a:	d501      	bpl.n	19630 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1962c:	2108      	movs	r1, #8
   1962e:	e7de      	b.n	195ee <bt_smp_encrypt_change+0xbe>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19630:	075a      	lsls	r2, r3, #29
   19632:	d5df      	bpl.n	195f4 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19634:	210a      	movs	r1, #10
   19636:	e7da      	b.n	195ee <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19638:	2105      	movs	r1, #5
   1963a:	f00f fa6d 	bl	28b18 <atomic_test_bit>
   1963e:	4607      	mov	r7, r0
   19640:	b9b0      	cbnz	r0, 19670 <bt_smp_encrypt_change+0x140>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   19642:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19646:	07db      	lsls	r3, r3, #31
   19648:	d512      	bpl.n	19670 <bt_smp_encrypt_change+0x140>
	struct bt_keys *keys = conn->le.keys;
   1964a:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1964c:	211a      	movs	r1, #26
   1964e:	a805      	add	r0, sp, #20
	struct bt_keys *keys = conn->le.keys;
   19650:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   19654:	f7fb f866 	bl	14724 <bt_rand>
   19658:	4681      	mov	r9, r0
   1965a:	b170      	cbz	r0, 1967a <bt_smp_encrypt_change+0x14a>
			LOG_ERR("Unable to get random bytes");
   1965c:	4b3c      	ldr	r3, [pc, #240]	; (19750 <bt_smp_encrypt_change+0x220>)
   1965e:	2201      	movs	r2, #1
   19660:	e9cd 7301 	strd	r7, r3, [sp, #4]
   19664:	4638      	mov	r0, r7
   19666:	463b      	mov	r3, r7
   19668:	4938      	ldr	r1, [pc, #224]	; (1974c <bt_smp_encrypt_change+0x21c>)
   1966a:	9700      	str	r7, [sp, #0]
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1966c:	f00f faac 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   19670:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   19674:	2900      	cmp	r1, #0
   19676:	d1d4      	bne.n	19622 <bt_smp_encrypt_change+0xf2>
   19678:	e782      	b.n	19580 <bt_smp_encrypt_change+0x50>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1967a:	2106      	movs	r1, #6
   1967c:	4628      	mov	r0, r5
   1967e:	f00f fac2 	bl	28c06 <smp_create_pdu.constprop.0>
		if (!buf) {
   19682:	4607      	mov	r7, r0
   19684:	b938      	cbnz	r0, 19696 <bt_smp_encrypt_change+0x166>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   19686:	4b33      	ldr	r3, [pc, #204]	; (19754 <bt_smp_encrypt_change+0x224>)
   19688:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1968c:	2201      	movs	r2, #1
   1968e:	463b      	mov	r3, r7
   19690:	492e      	ldr	r1, [pc, #184]	; (1974c <bt_smp_encrypt_change+0x21c>)
   19692:	9700      	str	r7, [sp, #0]
   19694:	e7ea      	b.n	1966c <bt_smp_encrypt_change+0x13c>
	return net_buf_simple_add(&buf->b, len);
   19696:	2110      	movs	r1, #16
   19698:	300c      	adds	r0, #12
   1969a:	f000 fee9 	bl	1a470 <net_buf_simple_add>
   1969e:	f898 200c 	ldrb.w	r2, [r8, #12]
   196a2:	a905      	add	r1, sp, #20
   196a4:	4682      	mov	sl, r0
   196a6:	f011 fb43 	bl	2ad30 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   196aa:	f898 000c 	ldrb.w	r0, [r8, #12]
   196ae:	280f      	cmp	r0, #15
   196b0:	d805      	bhi.n	196be <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   196b2:	f1c0 0210 	rsb	r2, r0, #16
   196b6:	4649      	mov	r1, r9
   196b8:	4450      	add	r0, sl
   196ba:	f011 fb73 	bl	2ada4 <memset>
		smp_send(smp, buf, NULL, NULL);
   196be:	4639      	mov	r1, r7
   196c0:	2200      	movs	r2, #0
   196c2:	4628      	mov	r0, r5
   196c4:	f00f fa63 	bl	28b8e <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   196c8:	2107      	movs	r1, #7
   196ca:	4628      	mov	r0, r5
   196cc:	f00f fa9b 	bl	28c06 <smp_create_pdu.constprop.0>
		if (!buf) {
   196d0:	4607      	mov	r7, r0
   196d2:	b908      	cbnz	r0, 196d8 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   196d4:	4b20      	ldr	r3, [pc, #128]	; (19758 <bt_smp_encrypt_change+0x228>)
   196d6:	e7d7      	b.n	19688 <bt_smp_encrypt_change+0x158>
   196d8:	210a      	movs	r1, #10
   196da:	300c      	adds	r0, #12
   196dc:	f000 fec8 	bl	1a470 <net_buf_simple_add>
   196e0:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   196e2:	aa09      	add	r2, sp, #36	; 0x24
   196e4:	ca03      	ldmia	r2!, {r0, r1}
   196e6:	f8c3 0002 	str.w	r0, [r3, #2]
   196ea:	f8c3 1006 	str.w	r1, [r3, #6]
   196ee:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		smp_send(smp, buf, smp_ident_sent, NULL);
   196f2:	4639      	mov	r1, r7
   196f4:	4628      	mov	r0, r5
   196f6:	801a      	strh	r2, [r3, #0]
   196f8:	4a18      	ldr	r2, [pc, #96]	; (1975c <bt_smp_encrypt_change+0x22c>)
   196fa:	f00f fa48 	bl	28b8e <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   196fe:	4630      	mov	r0, r6
   19700:	210d      	movs	r1, #13
   19702:	f00f fa09 	bl	28b18 <atomic_test_bit>
   19706:	ae09      	add	r6, sp, #36	; 0x24
   19708:	2800      	cmp	r0, #0
   1970a:	d0b1      	beq.n	19670 <bt_smp_encrypt_change+0x140>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1970c:	2101      	movs	r1, #1
   1970e:	4640      	mov	r0, r8
   19710:	f000 fa24 	bl	19b5c <bt_keys_add_type>
   19714:	f108 074a 	add.w	r7, r8, #74	; 0x4a
   19718:	ab05      	add	r3, sp, #20
   1971a:	461a      	mov	r2, r3
   1971c:	ca03      	ldmia	r2!, {r0, r1}
   1971e:	42b2      	cmp	r2, r6
   19720:	6038      	str	r0, [r7, #0]
   19722:	6079      	str	r1, [r7, #4]
   19724:	4613      	mov	r3, r2
   19726:	f107 0708 	add.w	r7, r7, #8
   1972a:	d1f6      	bne.n	1971a <bt_smp_encrypt_change+0x1ea>
   1972c:	4633      	mov	r3, r6
   1972e:	cb03      	ldmia	r3!, {r0, r1}
   19730:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   19734:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   19738:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   1973c:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   19740:	e796      	b.n	19670 <bt_smp_encrypt_change+0x140>
   19742:	bf00      	nop
   19744:	00030bd8 	.word	0x00030bd8
   19748:	00030b2e 	.word	0x00030b2e
   1974c:	0002c0d4 	.word	0x0002c0d4
   19750:	00030b43 	.word	0x00030b43
   19754:	00030b5e 	.word	0x00030b5e
   19758:	00030b85 	.word	0x00030b85
   1975c:	0001979d 	.word	0x0001979d

00019760 <smp_timeout>:
{
   19760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("SMP Timeout");
   19762:	4b0c      	ldr	r3, [pc, #48]	; (19794 <smp_timeout+0x34>)
{
   19764:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   19766:	9302      	str	r3, [sp, #8]
   19768:	2300      	movs	r3, #0
   1976a:	2201      	movs	r2, #1
   1976c:	4618      	mov	r0, r3
   1976e:	e9cd 3300 	strd	r3, r3, [sp]
   19772:	4909      	ldr	r1, [pc, #36]	; (19798 <smp_timeout+0x38>)
   19774:	f00f fa28 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   19778:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1977c:	2108      	movs	r1, #8
   1977e:	f7ff fbdb 	bl	18f38 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   19782:	2104      	movs	r1, #4
   19784:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   19788:	b004      	add	sp, #16
   1978a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1978e:	f00f ba2a 	b.w	28be6 <atomic_set_bit>
   19792:	bf00      	nop
   19794:	00030bad 	.word	0x00030bad
   19798:	0002c0d4 	.word	0x0002c0d4

0001979c <smp_ident_sent>:
{
   1979c:	b508      	push	{r3, lr}
	if (!err) {
   1979e:	bb1a      	cbnz	r2, 197e8 <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   197a0:	7883      	ldrb	r3, [r0, #2]
   197a2:	2b01      	cmp	r3, #1
   197a4:	d120      	bne.n	197e8 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   197a6:	2106      	movs	r1, #6
   197a8:	f00e fb22 	bl	27df0 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   197ac:	b970      	cbnz	r0, 197cc <smp_ident_sent+0x30>
   197ae:	490f      	ldr	r1, [pc, #60]	; (197ec <smp_ident_sent+0x50>)
   197b0:	f240 2365 	movw	r3, #613	; 0x265
   197b4:	4a0e      	ldr	r2, [pc, #56]	; (197f0 <smp_ident_sent+0x54>)
   197b6:	480f      	ldr	r0, [pc, #60]	; (197f4 <smp_ident_sent+0x58>)
   197b8:	f00c fd51 	bl	2625e <assert_print>
   197bc:	480e      	ldr	r0, [pc, #56]	; (197f8 <smp_ident_sent+0x5c>)
   197be:	f00c fd4e 	bl	2625e <assert_print>
   197c2:	f240 2165 	movw	r1, #613	; 0x265
   197c6:	480a      	ldr	r0, [pc, #40]	; (197f0 <smp_ident_sent+0x54>)
   197c8:	f00c fd42 	bl	26250 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   197cc:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   197d0:	f023 0301 	bic.w	r3, r3, #1
   197d4:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   197d8:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   197dc:	b921      	cbnz	r1, 197e8 <smp_ident_sent+0x4c>
}
   197de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   197e2:	38ec      	subs	r0, #236	; 0xec
   197e4:	f7ff bba8 	b.w	18f38 <smp_pairing_complete>
}
   197e8:	bd08      	pop	{r3, pc}
   197ea:	bf00      	nop
   197ec:	00030324 	.word	0x00030324
   197f0:	00030a68 	.word	0x00030a68
   197f4:	0002d095 	.word	0x0002d095
   197f8:	00030bb9 	.word	0x00030bb9

000197fc <bt_smp_update_keys>:
{
   197fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19800:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   19802:	f7fe fc95 	bl	18130 <smp_chan_get>
	if (!smp) {
   19806:	4605      	mov	r5, r0
   19808:	2800      	cmp	r0, #0
   1980a:	d074      	beq.n	198f6 <bt_smp_update_keys+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1980c:	1d07      	adds	r7, r0, #4
   1980e:	2103      	movs	r1, #3
   19810:	4638      	mov	r0, r7
   19812:	f00f f981 	bl	28b18 <atomic_test_bit>
   19816:	2800      	cmp	r0, #0
   19818:	d06d      	beq.n	198f6 <bt_smp_update_keys+0xfa>
	if (conn->le.keys) {
   1981a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1981e:	b108      	cbz	r0, 19824 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   19820:	f000 f9d8 	bl	19bd4 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19824:	f104 0890 	add.w	r8, r4, #144	; 0x90
   19828:	4641      	mov	r1, r8
   1982a:	7a20      	ldrb	r0, [r4, #8]
   1982c:	f000 f894 	bl	19958 <bt_keys_get_addr>
   19830:	4606      	mov	r6, r0
   19832:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   19836:	b9a0      	cbnz	r0, 19862 <bt_smp_update_keys+0x66>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19838:	4640      	mov	r0, r8
   1983a:	f7f8 fbe5 	bl	12008 <bt_addr_le_str>
   1983e:	4b39      	ldr	r3, [pc, #228]	; (19924 <bt_smp_update_keys+0x128>)
   19840:	9003      	str	r0, [sp, #12]
   19842:	e9cd 6301 	strd	r6, r3, [sp, #4]
   19846:	4630      	mov	r0, r6
   19848:	4633      	mov	r3, r6
   1984a:	2201      	movs	r2, #1
   1984c:	4936      	ldr	r1, [pc, #216]	; (19928 <bt_smp_update_keys+0x12c>)
   1984e:	9600      	str	r6, [sp, #0]
   19850:	f00f f9ba 	bl	28bc8 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19854:	2108      	movs	r1, #8
   19856:	4628      	mov	r0, r5
}
   19858:	b004      	add	sp, #16
   1985a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1985e:	f7ff bbe9 	b.w	19034 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   19862:	210e      	movs	r1, #14
   19864:	4638      	mov	r0, r7
   19866:	f00f f957 	bl	28b18 <atomic_test_bit>
   1986a:	b128      	cbz	r0, 19878 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1986c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   19870:	7b53      	ldrb	r3, [r2, #13]
   19872:	f043 0302 	orr.w	r3, r3, #2
   19876:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   19878:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1987a:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   1987e:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   19880:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   19882:	d83b      	bhi.n	198fc <bt_smp_update_keys+0x100>
   19884:	2a00      	cmp	r2, #0
   19886:	d040      	beq.n	1990a <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   19888:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1988c:	7b53      	ldrb	r3, [r2, #13]
   1988e:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   19892:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   19894:	7d2b      	ldrb	r3, [r5, #20]
   19896:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   19898:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   1989c:	428b      	cmp	r3, r1
   1989e:	bf28      	it	cs
   198a0:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   198a2:	4638      	mov	r0, r7
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   198a4:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   198a6:	2105      	movs	r1, #5
   198a8:	f00f f936 	bl	28b18 <atomic_test_bit>
   198ac:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   198b0:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   198b2:	b398      	cbz	r0, 1991c <bt_smp_update_keys+0x120>
		conn->le.keys->flags |= BT_KEYS_SC;
   198b4:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   198b8:	210d      	movs	r1, #13
   198ba:	4638      	mov	r0, r7
		conn->le.keys->flags |= BT_KEYS_SC;
   198bc:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   198be:	f00f f92b 	bl	28b18 <atomic_test_bit>
   198c2:	b1c0      	cbz	r0, 198f6 <bt_smp_update_keys+0xfa>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   198c4:	2120      	movs	r1, #32
   198c6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   198ca:	f000 f947 	bl	19b5c <bt_keys_add_type>
   198ce:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   198d2:	f105 0247 	add.w	r2, r5, #71	; 0x47
   198d6:	331a      	adds	r3, #26
   198d8:	3557      	adds	r5, #87	; 0x57
   198da:	f852 1b04 	ldr.w	r1, [r2], #4
   198de:	42aa      	cmp	r2, r5
   198e0:	f843 1b04 	str.w	r1, [r3], #4
   198e4:	d1f9      	bne.n	198da <bt_smp_update_keys+0xde>
__ssp_bos_icheck3(memset, void *, int)
   198e6:	2300      	movs	r3, #0
   198e8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   198ec:	6113      	str	r3, [r2, #16]
   198ee:	6153      	str	r3, [r2, #20]
   198f0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   198f4:	8313      	strh	r3, [r2, #24]
}
   198f6:	b004      	add	sp, #16
   198f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   198fc:	3a05      	subs	r2, #5
   198fe:	2a01      	cmp	r2, #1
   19900:	d803      	bhi.n	1990a <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   19902:	f043 0320 	orr.w	r3, r3, #32
   19906:	734b      	strb	r3, [r1, #13]
   19908:	e7be      	b.n	19888 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1990a:	f023 0320 	bic.w	r3, r3, #32
   1990e:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   19910:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   19914:	7b53      	ldrb	r3, [r2, #13]
   19916:	f023 0301 	bic.w	r3, r3, #1
   1991a:	e7ba      	b.n	19892 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1991c:	f022 0210 	bic.w	r2, r2, #16
   19920:	735a      	strb	r2, [r3, #13]
   19922:	e7e8      	b.n	198f6 <bt_smp_update_keys+0xfa>
   19924:	00030817 	.word	0x00030817
   19928:	0002c0d4 	.word	0x0002c0d4

0001992c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1992c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1992e:	4b07      	ldr	r3, [pc, #28]	; (1994c <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   19930:	4807      	ldr	r0, [pc, #28]	; (19950 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   19932:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   19936:	f003 0306 	and.w	r3, r3, #6
   1993a:	1f9a      	subs	r2, r3, #6
   1993c:	4253      	negs	r3, r2
   1993e:	4153      	adcs	r3, r2
   19940:	4a04      	ldr	r2, [pc, #16]	; (19954 <bt_smp_init+0x28>)
   19942:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   19944:	f7fa ff18 	bl	14778 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   19948:	2000      	movs	r0, #0
   1994a:	bd08      	pop	{r3, pc}
   1994c:	20008000 	.word	0x20008000
   19950:	20008544 	.word	0x20008544
   19954:	200236db 	.word	0x200236db

00019958 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   19958:	b570      	push	{r4, r5, r6, lr}
   1995a:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	__ASSERT_NO_MSG(addr != NULL);
   1995c:	460d      	mov	r5, r1
   1995e:	b959      	cbnz	r1, 19978 <bt_keys_get_addr+0x20>
   19960:	4913      	ldr	r1, [pc, #76]	; (199b0 <bt_keys_get_addr+0x58>)
   19962:	4814      	ldr	r0, [pc, #80]	; (199b4 <bt_keys_get_addr+0x5c>)
   19964:	2359      	movs	r3, #89	; 0x59
   19966:	4a14      	ldr	r2, [pc, #80]	; (199b8 <bt_keys_get_addr+0x60>)
   19968:	f00c fc79 	bl	2625e <assert_print>
   1996c:	2159      	movs	r1, #89	; 0x59
   1996e:	4812      	ldr	r0, [pc, #72]	; (199b8 <bt_keys_get_addr+0x60>)
   19970:	f00c fc6e 	bl	26250 <assert_post_action>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   19974:	2000      	movs	r0, #0
   19976:	e019      	b.n	199ac <bt_keys_get_addr+0x54>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   19978:	4c10      	ldr	r4, [pc, #64]	; (199bc <bt_keys_get_addr+0x64>)
   1997a:	f814 3b01 	ldrb.w	r3, [r4], #1
   1997e:	4283      	cmp	r3, r0
   19980:	d104      	bne.n	1998c <bt_keys_get_addr+0x34>
	return memcmp(a, b, sizeof(*a));
   19982:	2207      	movs	r2, #7
   19984:	4620      	mov	r0, r4
   19986:	f011 f9c3 	bl	2ad10 <memcmp>
   1998a:	b170      	cbz	r0, 199aa <bt_keys_get_addr+0x52>
   1998c:	2207      	movs	r2, #7
   1998e:	490c      	ldr	r1, [pc, #48]	; (199c0 <bt_keys_get_addr+0x68>)
   19990:	480c      	ldr	r0, [pc, #48]	; (199c4 <bt_keys_get_addr+0x6c>)
   19992:	f011 f9bd 	bl	2ad10 <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   19996:	2800      	cmp	r0, #0
   19998:	d1ec      	bne.n	19974 <bt_keys_get_addr+0x1c>
		keys->id = id;
   1999a:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1999e:	682b      	ldr	r3, [r5, #0]
   199a0:	6023      	str	r3, [r4, #0]
   199a2:	88ab      	ldrh	r3, [r5, #4]
   199a4:	80a3      	strh	r3, [r4, #4]
   199a6:	79ab      	ldrb	r3, [r5, #6]
   199a8:	71a3      	strb	r3, [r4, #6]
		keys = &key_pool[i];
   199aa:	4804      	ldr	r0, [pc, #16]	; (199bc <bt_keys_get_addr+0x64>)
}
   199ac:	bd70      	pop	{r4, r5, r6, pc}
   199ae:	bf00      	nop
   199b0:	00030c59 	.word	0x00030c59
   199b4:	0002d095 	.word	0x0002d095
   199b8:	00030c29 	.word	0x00030c29
   199bc:	20022850 	.word	0x20022850
   199c0:	0002f096 	.word	0x0002f096
   199c4:	20022851 	.word	0x20022851

000199c8 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   199c8:	460b      	mov	r3, r1
   199ca:	b510      	push	{r4, lr}
   199cc:	4611      	mov	r1, r2
   199ce:	4604      	mov	r4, r0
	int i;

	__ASSERT_NO_MSG(func != NULL);
   199d0:	b963      	cbnz	r3, 199ec <bt_keys_foreach_type+0x24>
   199d2:	4909      	ldr	r1, [pc, #36]	; (199f8 <bt_keys_foreach_type+0x30>)
   199d4:	4809      	ldr	r0, [pc, #36]	; (199fc <bt_keys_foreach_type+0x34>)
   199d6:	23b3      	movs	r3, #179	; 0xb3
   199d8:	4a09      	ldr	r2, [pc, #36]	; (19a00 <bt_keys_foreach_type+0x38>)
   199da:	f00c fc40 	bl	2625e <assert_print>
   199de:	21b3      	movs	r1, #179	; 0xb3
   199e0:	4807      	ldr	r0, [pc, #28]	; (19a00 <bt_keys_foreach_type+0x38>)
   199e2:	f00c fc35 	bl	26250 <assert_post_action>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   199e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   199ea:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   199ec:	4805      	ldr	r0, [pc, #20]	; (19a04 <bt_keys_foreach_type+0x3c>)
   199ee:	89c2      	ldrh	r2, [r0, #14]
   199f0:	4222      	tst	r2, r4
   199f2:	d1f8      	bne.n	199e6 <bt_keys_foreach_type+0x1e>
}
   199f4:	bd10      	pop	{r4, pc}
   199f6:	bf00      	nop
   199f8:	00030c6d 	.word	0x00030c6d
   199fc:	0002d095 	.word	0x0002d095
   19a00:	00030c29 	.word	0x00030c29
   19a04:	20022850 	.word	0x20022850

00019a08 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   19a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a0a:	4605      	mov	r5, r0
   19a0c:	460e      	mov	r6, r1
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   19a0e:	4614      	mov	r4, r2
   19a10:	b9aa      	cbnz	r2, 19a3e <bt_keys_find+0x36>
   19a12:	490f      	ldr	r1, [pc, #60]	; (19a50 <bt_keys_find+0x48>)
   19a14:	480f      	ldr	r0, [pc, #60]	; (19a54 <bt_keys_find+0x4c>)
   19a16:	23c0      	movs	r3, #192	; 0xc0
   19a18:	4a0f      	ldr	r2, [pc, #60]	; (19a58 <bt_keys_find+0x50>)
   19a1a:	f00c fc20 	bl	2625e <assert_print>
   19a1e:	21c0      	movs	r1, #192	; 0xc0
   19a20:	480d      	ldr	r0, [pc, #52]	; (19a58 <bt_keys_find+0x50>)
   19a22:	f00c fc15 	bl	26250 <assert_post_action>

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   19a26:	b18a      	cbz	r2, 19a4c <bt_keys_find+0x44>
   19a28:	42b1      	cmp	r1, r6
   19a2a:	d10f      	bne.n	19a4c <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   19a2c:	2207      	movs	r2, #7
   19a2e:	4621      	mov	r1, r4
   19a30:	480a      	ldr	r0, [pc, #40]	; (19a5c <bt_keys_find+0x54>)
   19a32:	f011 f96d 	bl	2ad10 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19a36:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   19a38:	b918      	cbnz	r0, 19a42 <bt_keys_find+0x3a>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
   19a3a:	4809      	ldr	r0, [pc, #36]	; (19a60 <bt_keys_find+0x58>)
   19a3c:	e007      	b.n	19a4e <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19a3e:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   19a40:	4f07      	ldr	r7, [pc, #28]	; (19a60 <bt_keys_find+0x58>)
   19a42:	89fa      	ldrh	r2, [r7, #14]
   19a44:	7839      	ldrb	r1, [r7, #0]
   19a46:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19a48:	2b00      	cmp	r3, #0
   19a4a:	d0ec      	beq.n	19a26 <bt_keys_find+0x1e>
		}
	}

	return NULL;
   19a4c:	2000      	movs	r0, #0
}
   19a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a50:	00030c59 	.word	0x00030c59
   19a54:	0002d095 	.word	0x0002d095
   19a58:	00030c29 	.word	0x00030c29
   19a5c:	20022851 	.word	0x20022851
   19a60:	20022850 	.word	0x20022850

00019a64 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   19a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a66:	4606      	mov	r6, r0
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   19a68:	460c      	mov	r4, r1
   19a6a:	b949      	cbnz	r1, 19a80 <bt_keys_find_irk+0x1c>
   19a6c:	4923      	ldr	r1, [pc, #140]	; (19afc <bt_keys_find_irk+0x98>)
   19a6e:	4824      	ldr	r0, [pc, #144]	; (19b00 <bt_keys_find_irk+0x9c>)
   19a70:	23e9      	movs	r3, #233	; 0xe9
   19a72:	4a24      	ldr	r2, [pc, #144]	; (19b04 <bt_keys_find_irk+0xa0>)
   19a74:	f00c fbf3 	bl	2625e <assert_print>
   19a78:	21e9      	movs	r1, #233	; 0xe9
   19a7a:	4822      	ldr	r0, [pc, #136]	; (19b04 <bt_keys_find_irk+0xa0>)
   19a7c:	f00c fbe8 	bl	26250 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19a80:	780b      	ldrb	r3, [r1, #0]
   19a82:	2b01      	cmp	r3, #1
   19a84:	d001      	beq.n	19a8a <bt_keys_find_irk+0x26>

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   19a86:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   19a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   19a8a:	798b      	ldrb	r3, [r1, #6]
   19a8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19a90:	2b40      	cmp	r3, #64	; 0x40
   19a92:	d1f8      	bne.n	19a86 <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19a94:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19a96:	4d1c      	ldr	r5, [pc, #112]	; (19b08 <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   19a98:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   19a9c:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   19a9e:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19aa0:	f002 0202 	and.w	r2, r2, #2
   19aa4:	b1db      	cbz	r3, 19ade <bt_keys_find_irk+0x7a>
   19aa6:	2300      	movs	r3, #0
   19aa8:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   19aaa:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19aac:	f002 0202 	and.w	r2, r2, #2
   19ab0:	2b00      	cmp	r3, #0
   19ab2:	d1e8      	bne.n	19a86 <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19ab4:	2a00      	cmp	r2, #0
   19ab6:	d0e6      	beq.n	19a86 <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   19ab8:	42b1      	cmp	r1, r6
   19aba:	d1e4      	bne.n	19a86 <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   19abc:	1c67      	adds	r7, r4, #1
   19abe:	4639      	mov	r1, r7
   19ac0:	4812      	ldr	r0, [pc, #72]	; (19b0c <bt_keys_find_irk+0xa8>)
   19ac2:	f00d fc83 	bl	273cc <bt_rpa_irk_matches>
   19ac6:	2301      	movs	r3, #1
   19ac8:	2800      	cmp	r0, #0
   19aca:	d0ed      	beq.n	19aa8 <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   19acc:	f8d4 3001 	ldr.w	r3, [r4, #1]
   19ad0:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   19ad4:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   19ad8:	4b0d      	ldr	r3, [pc, #52]	; (19b10 <bt_keys_find_irk+0xac>)
   19ada:	809a      	strh	r2, [r3, #4]
}
   19adc:	e00b      	b.n	19af6 <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19ade:	2a00      	cmp	r2, #0
   19ae0:	d0e2      	beq.n	19aa8 <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   19ae2:	42b0      	cmp	r0, r6
   19ae4:	d1e0      	bne.n	19aa8 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   19ae6:	2206      	movs	r2, #6
   19ae8:	4639      	mov	r1, r7
   19aea:	1c60      	adds	r0, r4, #1
   19aec:	f011 f910 	bl	2ad10 <memcmp>
   19af0:	2301      	movs	r3, #1
   19af2:	2800      	cmp	r0, #0
   19af4:	d1d2      	bne.n	19a9c <bt_keys_find_irk+0x38>
			return &key_pool[i];
   19af6:	4804      	ldr	r0, [pc, #16]	; (19b08 <bt_keys_find_irk+0xa4>)
   19af8:	e7c6      	b.n	19a88 <bt_keys_find_irk+0x24>
   19afa:	bf00      	nop
   19afc:	00030c59 	.word	0x00030c59
   19b00:	0002d095 	.word	0x0002d095
   19b04:	00030c29 	.word	0x00030c29
   19b08:	20022850 	.word	0x20022850
   19b0c:	2002287a 	.word	0x2002287a
   19b10:	2002288a 	.word	0x2002288a

00019b14 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   19b14:	b510      	push	{r4, lr}
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   19b16:	b959      	cbnz	r1, 19b30 <bt_keys_find_addr+0x1c>
   19b18:	490c      	ldr	r1, [pc, #48]	; (19b4c <bt_keys_find_addr+0x38>)
   19b1a:	480d      	ldr	r0, [pc, #52]	; (19b50 <bt_keys_find_addr+0x3c>)
   19b1c:	f44f 738d 	mov.w	r3, #282	; 0x11a
   19b20:	4a0c      	ldr	r2, [pc, #48]	; (19b54 <bt_keys_find_addr+0x40>)
   19b22:	f00c fb9c 	bl	2625e <assert_print>
   19b26:	f44f 718d 	mov.w	r1, #282	; 0x11a
   19b2a:	480a      	ldr	r0, [pc, #40]	; (19b54 <bt_keys_find_addr+0x40>)
   19b2c:	f00c fb90 	bl	26250 <assert_post_action>

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   19b30:	4c09      	ldr	r4, [pc, #36]	; (19b58 <bt_keys_find_addr+0x44>)
   19b32:	7823      	ldrb	r3, [r4, #0]
   19b34:	4283      	cmp	r3, r0
   19b36:	d104      	bne.n	19b42 <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   19b38:	2207      	movs	r2, #7
   19b3a:	1c60      	adds	r0, r4, #1
   19b3c:	f011 f8e8 	bl	2ad10 <memcmp>
   19b40:	b108      	cbz	r0, 19b46 <bt_keys_find_addr+0x32>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   19b42:	2000      	movs	r0, #0
}
   19b44:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   19b46:	4620      	mov	r0, r4
   19b48:	e7fc      	b.n	19b44 <bt_keys_find_addr+0x30>
   19b4a:	bf00      	nop
   19b4c:	00030c59 	.word	0x00030c59
   19b50:	0002d095 	.word	0x0002d095
   19b54:	00030c29 	.word	0x00030c29
   19b58:	20022850 	.word	0x20022850

00019b5c <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
   19b5c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   19b5e:	b958      	cbnz	r0, 19b78 <bt_keys_add_type+0x1c>
   19b60:	4907      	ldr	r1, [pc, #28]	; (19b80 <bt_keys_add_type+0x24>)
   19b62:	4808      	ldr	r0, [pc, #32]	; (19b84 <bt_keys_add_type+0x28>)
   19b64:	f44f 7395 	mov.w	r3, #298	; 0x12a
   19b68:	4a07      	ldr	r2, [pc, #28]	; (19b88 <bt_keys_add_type+0x2c>)
   19b6a:	f00c fb78 	bl	2625e <assert_print>
   19b6e:	f44f 7195 	mov.w	r1, #298	; 0x12a
   19b72:	4805      	ldr	r0, [pc, #20]	; (19b88 <bt_keys_add_type+0x2c>)
   19b74:	f00c fb6c 	bl	26250 <assert_post_action>

	keys->keys |= type;
   19b78:	89c3      	ldrh	r3, [r0, #14]
   19b7a:	4319      	orrs	r1, r3
   19b7c:	81c1      	strh	r1, [r0, #14]
}
   19b7e:	bd08      	pop	{r3, pc}
   19b80:	00030c81 	.word	0x00030c81
   19b84:	0002d095 	.word	0x0002d095
   19b88:	00030c29 	.word	0x00030c29

00019b8c <bt_keys_get_type>:
{
   19b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19b8e:	4606      	mov	r6, r0
   19b90:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   19b92:	4615      	mov	r5, r2
   19b94:	b94a      	cbnz	r2, 19baa <bt_keys_get_type+0x1e>
   19b96:	490c      	ldr	r1, [pc, #48]	; (19bc8 <bt_keys_get_type+0x3c>)
   19b98:	480c      	ldr	r0, [pc, #48]	; (19bcc <bt_keys_get_type+0x40>)
   19b9a:	23d2      	movs	r3, #210	; 0xd2
   19b9c:	4a0c      	ldr	r2, [pc, #48]	; (19bd0 <bt_keys_get_type+0x44>)
   19b9e:	f00c fb5e 	bl	2625e <assert_print>
   19ba2:	21d2      	movs	r1, #210	; 0xd2
   19ba4:	480a      	ldr	r0, [pc, #40]	; (19bd0 <bt_keys_get_type+0x44>)
   19ba6:	f00c fb53 	bl	26250 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   19baa:	f7ff ff2d 	bl	19a08 <bt_keys_find>
	if (keys) {
   19bae:	4604      	mov	r4, r0
   19bb0:	b940      	cbnz	r0, 19bc4 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   19bb2:	4629      	mov	r1, r5
   19bb4:	4638      	mov	r0, r7
   19bb6:	f7ff fecf 	bl	19958 <bt_keys_get_addr>
	if (!keys) {
   19bba:	4604      	mov	r4, r0
   19bbc:	b110      	cbz	r0, 19bc4 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   19bbe:	4631      	mov	r1, r6
   19bc0:	f7ff ffcc 	bl	19b5c <bt_keys_add_type>
}
   19bc4:	4620      	mov	r0, r4
   19bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19bc8:	00030c59 	.word	0x00030c59
   19bcc:	0002d095 	.word	0x0002d095
   19bd0:	00030c29 	.word	0x00030c29

00019bd4 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   19bd4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   19bd6:	4604      	mov	r4, r0
   19bd8:	b958      	cbnz	r0, 19bf2 <bt_keys_clear+0x1e>
   19bda:	490c      	ldr	r1, [pc, #48]	; (19c0c <bt_keys_clear+0x38>)
   19bdc:	480c      	ldr	r0, [pc, #48]	; (19c10 <bt_keys_clear+0x3c>)
   19bde:	f240 1331 	movw	r3, #305	; 0x131
   19be2:	4a0c      	ldr	r2, [pc, #48]	; (19c14 <bt_keys_clear+0x40>)
   19be4:	f00c fb3b 	bl	2625e <assert_print>
   19be8:	f240 1131 	movw	r1, #305	; 0x131
   19bec:	4809      	ldr	r0, [pc, #36]	; (19c14 <bt_keys_clear+0x40>)
   19bee:	f00c fb2f 	bl	26250 <assert_post_action>

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   19bf2:	7a03      	ldrb	r3, [r0, #8]
   19bf4:	075b      	lsls	r3, r3, #29
   19bf6:	d501      	bpl.n	19bfc <bt_keys_clear+0x28>
		bt_id_del(keys);
   19bf8:	f7f9 ffb0 	bl	13b5c <bt_id_del>
   19bfc:	4620      	mov	r0, r4
		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   19bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19c02:	225c      	movs	r2, #92	; 0x5c
   19c04:	2100      	movs	r1, #0
   19c06:	f011 b8cd 	b.w	2ada4 <memset>
   19c0a:	bf00      	nop
   19c0c:	00030c81 	.word	0x00030c81
   19c10:	0002d095 	.word	0x0002d095
   19c14:	00030c29 	.word	0x00030c29

00019c18 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19c18:	4288      	cmp	r0, r1
{
   19c1a:	b510      	push	{r4, lr}
   19c1c:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19c20:	d911      	bls.n	19c46 <sys_memcpy_swap+0x2e>
   19c22:	188c      	adds	r4, r1, r2
   19c24:	42a0      	cmp	r0, r4
   19c26:	d211      	bcs.n	19c4c <sys_memcpy_swap+0x34>
   19c28:	490d      	ldr	r1, [pc, #52]	; (19c60 <sys_memcpy_swap+0x48>)
   19c2a:	f240 2315 	movw	r3, #533	; 0x215
   19c2e:	4a0d      	ldr	r2, [pc, #52]	; (19c64 <sys_memcpy_swap+0x4c>)
   19c30:	480d      	ldr	r0, [pc, #52]	; (19c68 <sys_memcpy_swap+0x50>)
   19c32:	f00c fb14 	bl	2625e <assert_print>
   19c36:	480d      	ldr	r0, [pc, #52]	; (19c6c <sys_memcpy_swap+0x54>)
   19c38:	f00c fb11 	bl	2625e <assert_print>
   19c3c:	f240 2115 	movw	r1, #533	; 0x215
   19c40:	4808      	ldr	r0, [pc, #32]	; (19c64 <sys_memcpy_swap+0x4c>)
   19c42:	f00c fb05 	bl	26250 <assert_post_action>
   19c46:	d0ef      	beq.n	19c28 <sys_memcpy_swap+0x10>
   19c48:	4299      	cmp	r1, r3
   19c4a:	e7ec      	b.n	19c26 <sys_memcpy_swap+0xe>
	psrc += length - 1;
   19c4c:	3a01      	subs	r2, #1
   19c4e:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   19c50:	f811 2901 	ldrb.w	r2, [r1], #-1
   19c54:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   19c58:	4283      	cmp	r3, r0
   19c5a:	d1f9      	bne.n	19c50 <sys_memcpy_swap+0x38>
}
   19c5c:	bd10      	pop	{r4, pc}
   19c5e:	bf00      	nop
   19c60:	0002fb51 	.word	0x0002fb51
   19c64:	0002fb1f 	.word	0x0002fb1f
   19c68:	0002d095 	.word	0x0002d095
   19c6c:	0002fba8 	.word	0x0002fba8

00019c70 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   19c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c74:	b09a      	sub	sp, #104	; 0x68
   19c76:	4616      	mov	r6, r2
   19c78:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   19c7c:	aa0c      	add	r2, sp, #48	; 0x30
{
   19c7e:	4684      	mov	ip, r0
   19c80:	468a      	mov	sl, r1
   19c82:	4690      	mov	r8, r2
   19c84:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   19c86:	4b2c      	ldr	r3, [pc, #176]	; (19d38 <bt_crypto_f5+0xc8>)
   19c88:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   19c8c:	4614      	mov	r4, r2
   19c8e:	6818      	ldr	r0, [r3, #0]
   19c90:	6859      	ldr	r1, [r3, #4]
   19c92:	3308      	adds	r3, #8
   19c94:	c403      	stmia	r4!, {r0, r1}
   19c96:	4573      	cmp	r3, lr
   19c98:	4622      	mov	r2, r4
   19c9a:	d1f7      	bne.n	19c8c <bt_crypto_f5+0x1c>
   19c9c:	6818      	ldr	r0, [r3, #0]
   19c9e:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   19ca0:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   19ca2:	6020      	str	r0, [r4, #0]
   19ca4:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   19ca6:	2220      	movs	r2, #32
   19ca8:	a804      	add	r0, sp, #16
   19caa:	f7ff ffb5 	bl	19c18 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   19cae:	466b      	mov	r3, sp
   19cb0:	2220      	movs	r2, #32
   19cb2:	4822      	ldr	r0, [pc, #136]	; (19d3c <bt_crypto_f5+0xcc>)
   19cb4:	a904      	add	r1, sp, #16
   19cb6:	f00f fa0a 	bl	290ce <bt_crypto_aes_cmac>
	if (err) {
   19cba:	4604      	mov	r4, r0
   19cbc:	bbc0      	cbnz	r0, 19d30 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   19cbe:	2210      	movs	r2, #16
   19cc0:	4651      	mov	r1, sl
   19cc2:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   19cc6:	f7ff ffa7 	bl	19c18 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   19cca:	2210      	movs	r2, #16
   19ccc:	4631      	mov	r1, r6
   19cce:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   19cd2:	f7ff ffa1 	bl	19c18 <sys_memcpy_swap>
	m[37] = a1->type;
   19cd6:	4629      	mov	r1, r5
   19cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   19cdc:	2206      	movs	r2, #6
   19cde:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   19ce2:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   19ce6:	f7ff ff97 	bl	19c18 <sys_memcpy_swap>
	m[44] = a2->type;
   19cea:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   19cec:	2206      	movs	r2, #6
	m[44] = a2->type;
   19cee:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   19cf2:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   19cf6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   19cfa:	f7ff ff8d 	bl	19c18 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   19cfe:	464b      	mov	r3, r9
   19d00:	2235      	movs	r2, #53	; 0x35
   19d02:	4641      	mov	r1, r8
   19d04:	4668      	mov	r0, sp
   19d06:	f00f f9e2 	bl	290ce <bt_crypto_aes_cmac>
	if (err) {
   19d0a:	4604      	mov	r4, r0
   19d0c:	b980      	cbnz	r0, 19d30 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   19d0e:	4648      	mov	r0, r9
   19d10:	f00f f9cf 	bl	290b2 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   19d14:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   19d16:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   19d18:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   19d1c:	4641      	mov	r1, r8
   19d1e:	463b      	mov	r3, r7
   19d20:	4668      	mov	r0, sp
   19d22:	f00f f9d4 	bl	290ce <bt_crypto_aes_cmac>
	if (err) {
   19d26:	4604      	mov	r4, r0
   19d28:	b910      	cbnz	r0, 19d30 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   19d2a:	4638      	mov	r0, r7
   19d2c:	f00f f9c1 	bl	290b2 <sys_mem_swap.constprop.0>

	return 0;
}
   19d30:	4620      	mov	r0, r4
   19d32:	b01a      	add	sp, #104	; 0x68
   19d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19d38:	0002c228 	.word	0x0002c228
   19d3c:	00030c9d 	.word	0x00030c9d

00019d40 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   19d40:	b570      	push	{r4, r5, r6, lr}
   19d42:	460e      	mov	r6, r1
   19d44:	461d      	mov	r5, r3
   19d46:	4614      	mov	r4, r2
   19d48:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   19d4a:	4601      	mov	r1, r0
   19d4c:	2220      	movs	r2, #32
   19d4e:	a804      	add	r0, sp, #16
   19d50:	f7ff ff62 	bl	19c18 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   19d54:	2220      	movs	r2, #32
   19d56:	4631      	mov	r1, r6
   19d58:	a80c      	add	r0, sp, #48	; 0x30
   19d5a:	f7ff ff5d 	bl	19c18 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   19d5e:	2210      	movs	r2, #16
   19d60:	4629      	mov	r1, r5
   19d62:	a814      	add	r0, sp, #80	; 0x50
   19d64:	f7ff ff58 	bl	19c18 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   19d68:	2210      	movs	r2, #16
   19d6a:	4621      	mov	r1, r4
   19d6c:	4668      	mov	r0, sp
   19d6e:	f7ff ff53 	bl	19c18 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   19d72:	466b      	mov	r3, sp
   19d74:	2250      	movs	r2, #80	; 0x50
   19d76:	4618      	mov	r0, r3
   19d78:	a904      	add	r1, sp, #16
   19d7a:	f00f f9a8 	bl	290ce <bt_crypto_aes_cmac>
	if (err) {
   19d7e:	b940      	cbnz	r0, 19d92 <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   19d80:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   19d82:	4a05      	ldr	r2, [pc, #20]	; (19d98 <bt_crypto_g2+0x58>)
   19d84:	ba1b      	rev	r3, r3
   19d86:	fbb3 f1f2 	udiv	r1, r3, r2
   19d8a:	fb02 3311 	mls	r3, r2, r1, r3
   19d8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   19d90:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   19d92:	b018      	add	sp, #96	; 0x60
   19d94:	bd70      	pop	{r4, r5, r6, pc}
   19d96:	bf00      	nop
   19d98:	000f4240 	.word	0x000f4240

00019d9c <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   19d9c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   19d9e:	4804      	ldr	r0, [pc, #16]	; (19db0 <fs_init+0x14>)
   19da0:	f010 fdda 	bl	2a958 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   19da4:	4b03      	ldr	r3, [pc, #12]	; (19db4 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   19da6:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   19da8:	e9c3 3300 	strd	r3, r3, [r3]
   19dac:	bd08      	pop	{r3, pc}
   19dae:	bf00      	nop
   19db0:	200228ac 	.word	0x200228ac
   19db4:	200228c0 	.word	0x200228c0

00019db8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19db8:	2234      	movs	r2, #52	; 0x34
   19dba:	4b02      	ldr	r3, [pc, #8]	; (19dc4 <net_buf_pool_get+0xc>)
   19dbc:	fb02 3000 	mla	r0, r2, r0, r3
   19dc0:	4770      	bx	lr
   19dc2:	bf00      	nop
   19dc4:	20008c04 	.word	0x20008c04

00019dc8 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19dc8:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19dca:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19dcc:	4b06      	ldr	r3, [pc, #24]	; (19de8 <net_buf_id+0x20>)
   19dce:	fb01 3302 	mla	r3, r1, r2, r3
   19dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19dd8:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19dda:	331b      	adds	r3, #27
   19ddc:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   19de0:	fbb0 f0f3 	udiv	r0, r0, r3
   19de4:	4770      	bx	lr
   19de6:	bf00      	nop
   19de8:	20008c04 	.word	0x20008c04

00019dec <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19dec:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19dee:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19df0:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19df2:	4b09      	ldr	r3, [pc, #36]	; (19e18 <fixed_data_alloc+0x2c>)
   19df4:	fb04 3302 	mla	r3, r4, r2, r3
   19df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   19dfa:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19dfc:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19dfe:	681a      	ldr	r2, [r3, #0]
   19e00:	4294      	cmp	r4, r2
   19e02:	bf94      	ite	ls
   19e04:	600c      	strls	r4, [r1, #0]
   19e06:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19e08:	e9d3 5400 	ldrd	r5, r4, [r3]
   19e0c:	f7ff ffdc 	bl	19dc8 <net_buf_id>
}
   19e10:	fb05 4000 	mla	r0, r5, r0, r4
   19e14:	bd38      	pop	{r3, r4, r5, pc}
   19e16:	bf00      	nop
   19e18:	20008c04 	.word	0x20008c04

00019e1c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e20:	b085      	sub	sp, #20
   19e22:	9103      	str	r1, [sp, #12]
   19e24:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19e26:	4619      	mov	r1, r3
   19e28:	4610      	mov	r0, r2
{
   19e2a:	4692      	mov	sl, r2
   19e2c:	4699      	mov	r9, r3
   19e2e:	4690      	mov	r8, r2
   19e30:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19e32:	f010 fe75 	bl	2ab20 <sys_clock_timeout_end_calc>
   19e36:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   19e3a:	b945      	cbnz	r5, 19e4e <net_buf_alloc_len+0x32>
   19e3c:	4966      	ldr	r1, [pc, #408]	; (19fd8 <net_buf_alloc_len+0x1bc>)
   19e3e:	23f4      	movs	r3, #244	; 0xf4
   19e40:	4a66      	ldr	r2, [pc, #408]	; (19fdc <net_buf_alloc_len+0x1c0>)
   19e42:	4867      	ldr	r0, [pc, #412]	; (19fe0 <net_buf_alloc_len+0x1c4>)
   19e44:	f00c fa0b 	bl	2625e <assert_print>
   19e48:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   19e4a:	4864      	ldr	r0, [pc, #400]	; (19fdc <net_buf_alloc_len+0x1c0>)
   19e4c:	e019      	b.n	19e82 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   19e4e:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   19e52:	f04f 0320 	mov.w	r3, #32
   19e56:	f3ef 8b11 	mrs	fp, BASEPRI
   19e5a:	f383 8812 	msr	BASEPRI_MAX, r3
   19e5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e62:	4630      	mov	r0, r6
   19e64:	f006 fc88 	bl	20778 <z_spin_lock_valid>
   19e68:	b968      	cbnz	r0, 19e86 <net_buf_alloc_len+0x6a>
   19e6a:	2394      	movs	r3, #148	; 0x94
   19e6c:	4a5d      	ldr	r2, [pc, #372]	; (19fe4 <net_buf_alloc_len+0x1c8>)
   19e6e:	495e      	ldr	r1, [pc, #376]	; (19fe8 <net_buf_alloc_len+0x1cc>)
   19e70:	485b      	ldr	r0, [pc, #364]	; (19fe0 <net_buf_alloc_len+0x1c4>)
   19e72:	f00c f9f4 	bl	2625e <assert_print>
   19e76:	4631      	mov	r1, r6
   19e78:	485c      	ldr	r0, [pc, #368]	; (19fec <net_buf_alloc_len+0x1d0>)
   19e7a:	f00c f9f0 	bl	2625e <assert_print>
   19e7e:	2194      	movs	r1, #148	; 0x94
   19e80:	4858      	ldr	r0, [pc, #352]	; (19fe4 <net_buf_alloc_len+0x1c8>)
   19e82:	f00c f9e5 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   19e86:	4630      	mov	r0, r6
   19e88:	f006 fc92 	bl	207b0 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   19e8c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   19e8e:	2b00      	cmp	r3, #0
   19e90:	d070      	beq.n	19f74 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   19e92:	8c2a      	ldrh	r2, [r5, #32]
   19e94:	429a      	cmp	r2, r3
   19e96:	d94d      	bls.n	19f34 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   19e98:	2200      	movs	r2, #0
   19e9a:	2300      	movs	r3, #0
   19e9c:	4628      	mov	r0, r5
   19e9e:	f006 feb9 	bl	20c14 <z_impl_k_queue_get>
			if (buf) {
   19ea2:	4604      	mov	r4, r0
   19ea4:	2800      	cmp	r0, #0
   19ea6:	d045      	beq.n	19f34 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ea8:	4630      	mov	r0, r6
   19eaa:	f006 fc73 	bl	20794 <z_spin_unlock_valid>
   19eae:	b958      	cbnz	r0, 19ec8 <net_buf_alloc_len+0xac>
   19eb0:	23c2      	movs	r3, #194	; 0xc2
   19eb2:	4a4c      	ldr	r2, [pc, #304]	; (19fe4 <net_buf_alloc_len+0x1c8>)
   19eb4:	494e      	ldr	r1, [pc, #312]	; (19ff0 <net_buf_alloc_len+0x1d4>)
   19eb6:	484a      	ldr	r0, [pc, #296]	; (19fe0 <net_buf_alloc_len+0x1c4>)
   19eb8:	f00c f9d1 	bl	2625e <assert_print>
   19ebc:	4631      	mov	r1, r6
   19ebe:	484d      	ldr	r0, [pc, #308]	; (19ff4 <net_buf_alloc_len+0x1d8>)
   19ec0:	f00c f9cd 	bl	2625e <assert_print>
   19ec4:	21c2      	movs	r1, #194	; 0xc2
   19ec6:	e7db      	b.n	19e80 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   19ec8:	f38b 8811 	msr	BASEPRI, fp
   19ecc:	f3bf 8f6f 	isb	sy
	if (size) {
   19ed0:	9d03      	ldr	r5, [sp, #12]
   19ed2:	2d00      	cmp	r5, #0
   19ed4:	d074      	beq.n	19fc0 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19ed6:	ea59 030a 	orrs.w	r3, r9, sl
   19eda:	d012      	beq.n	19f02 <net_buf_alloc_len+0xe6>
   19edc:	f1b9 3fff 	cmp.w	r9, #4294967295
   19ee0:	bf08      	it	eq
   19ee2:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   19ee6:	d00c      	beq.n	19f02 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   19ee8:	f009 fa14 	bl	23314 <sys_clock_tick_get>
   19eec:	9b01      	ldr	r3, [sp, #4]
   19eee:	ebb3 0800 	subs.w	r8, r3, r0
   19ef2:	9b02      	ldr	r3, [sp, #8]
   19ef4:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   19ef8:	2f00      	cmp	r7, #0
   19efa:	bfbc      	itt	lt
   19efc:	f04f 0800 	movlt.w	r8, #0
   19f00:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   19f02:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19f06:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19f08:	4e3b      	ldr	r6, [pc, #236]	; (19ff8 <net_buf_alloc_len+0x1dc>)
   19f0a:	4642      	mov	r2, r8
   19f0c:	fb09 6303 	mla	r3, r9, r3, r6
   19f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19f12:	4620      	mov	r0, r4
   19f14:	681b      	ldr	r3, [r3, #0]
   19f16:	a903      	add	r1, sp, #12
   19f18:	f8d3 a000 	ldr.w	sl, [r3]
   19f1c:	463b      	mov	r3, r7
   19f1e:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   19f20:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   19f22:	2800      	cmp	r0, #0
   19f24:	d13c      	bne.n	19fa0 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   19f26:	7aa0      	ldrb	r0, [r4, #10]
   19f28:	4621      	mov	r1, r4
   19f2a:	fb00 6009 	mla	r0, r0, r9, r6
   19f2e:	f010 fd3e 	bl	2a9ae <k_queue_prepend>
}
   19f32:	e030      	b.n	19f96 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   19f34:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   19f36:	4630      	mov	r0, r6
   19f38:	1e63      	subs	r3, r4, #1
   19f3a:	846b      	strh	r3, [r5, #34]	; 0x22
   19f3c:	f006 fc2a 	bl	20794 <z_spin_unlock_valid>
   19f40:	2800      	cmp	r0, #0
   19f42:	d0b5      	beq.n	19eb0 <net_buf_alloc_len+0x94>
   19f44:	f38b 8811 	msr	BASEPRI, fp
   19f48:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19f4c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19f50:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19f52:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19f54:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   19f56:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19f58:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   19f5c:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   19f60:	4b25      	ldr	r3, [pc, #148]	; (19ff8 <net_buf_alloc_len+0x1dc>)
   19f62:	4a26      	ldr	r2, [pc, #152]	; (19ffc <net_buf_alloc_len+0x1e0>)
   19f64:	1aeb      	subs	r3, r5, r3
   19f66:	109b      	asrs	r3, r3, #2
   19f68:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   19f6a:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   19f6c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   19f70:	72e3      	strb	r3, [r4, #11]
		goto success;
   19f72:	e7ad      	b.n	19ed0 <net_buf_alloc_len+0xb4>
   19f74:	4630      	mov	r0, r6
   19f76:	f006 fc0d 	bl	20794 <z_spin_unlock_valid>
   19f7a:	2800      	cmp	r0, #0
   19f7c:	d098      	beq.n	19eb0 <net_buf_alloc_len+0x94>
   19f7e:	f38b 8811 	msr	BASEPRI, fp
   19f82:	f3bf 8f6f 	isb	sy
   19f86:	4652      	mov	r2, sl
   19f88:	464b      	mov	r3, r9
   19f8a:	4628      	mov	r0, r5
   19f8c:	f006 fe42 	bl	20c14 <z_impl_k_queue_get>
	if (!buf) {
   19f90:	4604      	mov	r4, r0
   19f92:	2800      	cmp	r0, #0
   19f94:	d19c      	bne.n	19ed0 <net_buf_alloc_len+0xb4>
		return NULL;
   19f96:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   19f98:	4620      	mov	r0, r4
   19f9a:	b005      	add	sp, #20
   19f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   19fa0:	9b03      	ldr	r3, [sp, #12]
   19fa2:	429d      	cmp	r5, r3
   19fa4:	d90d      	bls.n	19fc2 <net_buf_alloc_len+0x1a6>
   19fa6:	4916      	ldr	r1, [pc, #88]	; (1a000 <net_buf_alloc_len+0x1e4>)
   19fa8:	f240 1355 	movw	r3, #341	; 0x155
   19fac:	4a0b      	ldr	r2, [pc, #44]	; (19fdc <net_buf_alloc_len+0x1c0>)
   19fae:	480c      	ldr	r0, [pc, #48]	; (19fe0 <net_buf_alloc_len+0x1c4>)
   19fb0:	f00c f955 	bl	2625e <assert_print>
   19fb4:	4813      	ldr	r0, [pc, #76]	; (1a004 <net_buf_alloc_len+0x1e8>)
   19fb6:	f00c f952 	bl	2625e <assert_print>
   19fba:	f240 1155 	movw	r1, #341	; 0x155
   19fbe:	e744      	b.n	19e4a <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   19fc0:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   19fc2:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19fc4:	2201      	movs	r2, #1
	buf->frags = NULL;
   19fc6:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   19fc8:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   19fca:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   19fcc:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   19fce:	6963      	ldr	r3, [r4, #20]
   19fd0:	8262      	strh	r2, [r4, #18]
   19fd2:	60e3      	str	r3, [r4, #12]
}
   19fd4:	e7e0      	b.n	19f98 <net_buf_alloc_len+0x17c>
   19fd6:	bf00      	nop
   19fd8:	00030d09 	.word	0x00030d09
   19fdc:	00030cba 	.word	0x00030cba
   19fe0:	0002d095 	.word	0x0002d095
   19fe4:	0002df19 	.word	0x0002df19
   19fe8:	0002df72 	.word	0x0002df72
   19fec:	0002df87 	.word	0x0002df87
   19ff0:	0002df46 	.word	0x0002df46
   19ff4:	0002df5d 	.word	0x0002df5d
   19ff8:	20008c04 	.word	0x20008c04
   19ffc:	c4ec4ec5 	.word	0xc4ec4ec5
   1a000:	00030d0e 	.word	0x00030d0e
   1a004:	00030d1f 	.word	0x00030d1f

0001a008 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1a008:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1a00a:	b958      	cbnz	r0, 1a024 <net_buf_simple_reserve+0x1c>
   1a00c:	490d      	ldr	r1, [pc, #52]	; (1a044 <net_buf_simple_reserve+0x3c>)
   1a00e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1a012:	4a0d      	ldr	r2, [pc, #52]	; (1a048 <net_buf_simple_reserve+0x40>)
   1a014:	480d      	ldr	r0, [pc, #52]	; (1a04c <net_buf_simple_reserve+0x44>)
   1a016:	f00c f922 	bl	2625e <assert_print>
   1a01a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1a01e:	480a      	ldr	r0, [pc, #40]	; (1a048 <net_buf_simple_reserve+0x40>)
   1a020:	f00c f916 	bl	26250 <assert_post_action>
   1a024:	8883      	ldrh	r3, [r0, #4]
   1a026:	b14b      	cbz	r3, 1a03c <net_buf_simple_reserve+0x34>
   1a028:	4909      	ldr	r1, [pc, #36]	; (1a050 <net_buf_simple_reserve+0x48>)
   1a02a:	f240 13b9 	movw	r3, #441	; 0x1b9
   1a02e:	4a06      	ldr	r2, [pc, #24]	; (1a048 <net_buf_simple_reserve+0x40>)
   1a030:	4806      	ldr	r0, [pc, #24]	; (1a04c <net_buf_simple_reserve+0x44>)
   1a032:	f00c f914 	bl	2625e <assert_print>
   1a036:	f240 11b9 	movw	r1, #441	; 0x1b9
   1a03a:	e7f0      	b.n	1a01e <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1a03c:	6883      	ldr	r3, [r0, #8]
   1a03e:	440b      	add	r3, r1
   1a040:	6003      	str	r3, [r0, #0]
}
   1a042:	bd08      	pop	{r3, pc}
   1a044:	00030d9e 	.word	0x00030d9e
   1a048:	00030cba 	.word	0x00030cba
   1a04c:	0002d095 	.word	0x0002d095
   1a050:	00030d22 	.word	0x00030d22

0001a054 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1a054:	b570      	push	{r4, r5, r6, lr}
   1a056:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1a058:	4605      	mov	r5, r0
   1a05a:	b958      	cbnz	r0, 1a074 <net_buf_slist_put+0x20>
   1a05c:	4928      	ldr	r1, [pc, #160]	; (1a100 <net_buf_slist_put+0xac>)
   1a05e:	f240 13c5 	movw	r3, #453	; 0x1c5
   1a062:	4a28      	ldr	r2, [pc, #160]	; (1a104 <net_buf_slist_put+0xb0>)
   1a064:	4828      	ldr	r0, [pc, #160]	; (1a108 <net_buf_slist_put+0xb4>)
   1a066:	f00c f8fa 	bl	2625e <assert_print>
   1a06a:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1a06e:	4825      	ldr	r0, [pc, #148]	; (1a104 <net_buf_slist_put+0xb0>)
   1a070:	f00c f8ee 	bl	26250 <assert_post_action>
   1a074:	b949      	cbnz	r1, 1a08a <net_buf_slist_put+0x36>
   1a076:	4925      	ldr	r1, [pc, #148]	; (1a10c <net_buf_slist_put+0xb8>)
   1a078:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   1a07c:	4a21      	ldr	r2, [pc, #132]	; (1a104 <net_buf_slist_put+0xb0>)
   1a07e:	4822      	ldr	r0, [pc, #136]	; (1a108 <net_buf_slist_put+0xb4>)
   1a080:	f00c f8ed 	bl	2625e <assert_print>
   1a084:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1a088:	e7f1      	b.n	1a06e <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1a08a:	f04f 0320 	mov.w	r3, #32
   1a08e:	f3ef 8611 	mrs	r6, BASEPRI
   1a092:	f383 8812 	msr	BASEPRI_MAX, r3
   1a096:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a09a:	481d      	ldr	r0, [pc, #116]	; (1a110 <net_buf_slist_put+0xbc>)
   1a09c:	f006 fb6c 	bl	20778 <z_spin_lock_valid>
   1a0a0:	b960      	cbnz	r0, 1a0bc <net_buf_slist_put+0x68>
   1a0a2:	2394      	movs	r3, #148	; 0x94
   1a0a4:	4a1b      	ldr	r2, [pc, #108]	; (1a114 <net_buf_slist_put+0xc0>)
   1a0a6:	491c      	ldr	r1, [pc, #112]	; (1a118 <net_buf_slist_put+0xc4>)
   1a0a8:	4817      	ldr	r0, [pc, #92]	; (1a108 <net_buf_slist_put+0xb4>)
   1a0aa:	f00c f8d8 	bl	2625e <assert_print>
   1a0ae:	4918      	ldr	r1, [pc, #96]	; (1a110 <net_buf_slist_put+0xbc>)
   1a0b0:	481a      	ldr	r0, [pc, #104]	; (1a11c <net_buf_slist_put+0xc8>)
   1a0b2:	f00c f8d4 	bl	2625e <assert_print>
   1a0b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0b8:	4816      	ldr	r0, [pc, #88]	; (1a114 <net_buf_slist_put+0xc0>)
   1a0ba:	e7d9      	b.n	1a070 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1a0bc:	4814      	ldr	r0, [pc, #80]	; (1a110 <net_buf_slist_put+0xbc>)
   1a0be:	f006 fb77 	bl	207b0 <z_spin_lock_set_owner>
	parent->next = child;
   1a0c2:	2300      	movs	r3, #0
   1a0c4:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a0c6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1a0c8:	b98b      	cbnz	r3, 1a0ee <net_buf_slist_put+0x9a>
	list->head = node;
   1a0ca:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a0ce:	4810      	ldr	r0, [pc, #64]	; (1a110 <net_buf_slist_put+0xbc>)
   1a0d0:	f006 fb60 	bl	20794 <z_spin_unlock_valid>
   1a0d4:	b970      	cbnz	r0, 1a0f4 <net_buf_slist_put+0xa0>
   1a0d6:	23c2      	movs	r3, #194	; 0xc2
   1a0d8:	4a0e      	ldr	r2, [pc, #56]	; (1a114 <net_buf_slist_put+0xc0>)
   1a0da:	4911      	ldr	r1, [pc, #68]	; (1a120 <net_buf_slist_put+0xcc>)
   1a0dc:	480a      	ldr	r0, [pc, #40]	; (1a108 <net_buf_slist_put+0xb4>)
   1a0de:	f00c f8be 	bl	2625e <assert_print>
   1a0e2:	490b      	ldr	r1, [pc, #44]	; (1a110 <net_buf_slist_put+0xbc>)
   1a0e4:	480f      	ldr	r0, [pc, #60]	; (1a124 <net_buf_slist_put+0xd0>)
   1a0e6:	f00c f8ba 	bl	2625e <assert_print>
   1a0ea:	21c2      	movs	r1, #194	; 0xc2
   1a0ec:	e7e4      	b.n	1a0b8 <net_buf_slist_put+0x64>
	parent->next = child;
   1a0ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a0f0:	606c      	str	r4, [r5, #4]
}
   1a0f2:	e7ec      	b.n	1a0ce <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1a0f4:	f386 8811 	msr	BASEPRI, r6
   1a0f8:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1a0fc:	bd70      	pop	{r4, r5, r6, pc}
   1a0fe:	bf00      	nop
   1a100:	0002f8bd 	.word	0x0002f8bd
   1a104:	00030cba 	.word	0x00030cba
   1a108:	0002d095 	.word	0x0002d095
   1a10c:	00030d9e 	.word	0x00030d9e
   1a110:	200228c8 	.word	0x200228c8
   1a114:	0002df19 	.word	0x0002df19
   1a118:	0002df72 	.word	0x0002df72
   1a11c:	0002df87 	.word	0x0002df87
   1a120:	0002df46 	.word	0x0002df46
   1a124:	0002df5d 	.word	0x0002df5d

0001a128 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1a128:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1a12a:	4604      	mov	r4, r0
   1a12c:	b958      	cbnz	r0, 1a146 <net_buf_slist_get+0x1e>
   1a12e:	4923      	ldr	r1, [pc, #140]	; (1a1bc <net_buf_slist_get+0x94>)
   1a130:	4823      	ldr	r0, [pc, #140]	; (1a1c0 <net_buf_slist_get+0x98>)
   1a132:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1a136:	4a23      	ldr	r2, [pc, #140]	; (1a1c4 <net_buf_slist_get+0x9c>)
   1a138:	f00c f891 	bl	2625e <assert_print>
   1a13c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1a140:	4820      	ldr	r0, [pc, #128]	; (1a1c4 <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a142:	f00c f885 	bl	26250 <assert_post_action>
	__asm__ volatile(
   1a146:	f04f 0320 	mov.w	r3, #32
   1a14a:	f3ef 8611 	mrs	r6, BASEPRI
   1a14e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a152:	f3bf 8f6f 	isb	sy
   1a156:	481c      	ldr	r0, [pc, #112]	; (1a1c8 <net_buf_slist_get+0xa0>)
   1a158:	f006 fb0e 	bl	20778 <z_spin_lock_valid>
   1a15c:	b960      	cbnz	r0, 1a178 <net_buf_slist_get+0x50>
   1a15e:	2394      	movs	r3, #148	; 0x94
   1a160:	4a1a      	ldr	r2, [pc, #104]	; (1a1cc <net_buf_slist_get+0xa4>)
   1a162:	491b      	ldr	r1, [pc, #108]	; (1a1d0 <net_buf_slist_get+0xa8>)
   1a164:	4816      	ldr	r0, [pc, #88]	; (1a1c0 <net_buf_slist_get+0x98>)
   1a166:	f00c f87a 	bl	2625e <assert_print>
   1a16a:	4917      	ldr	r1, [pc, #92]	; (1a1c8 <net_buf_slist_get+0xa0>)
   1a16c:	4819      	ldr	r0, [pc, #100]	; (1a1d4 <net_buf_slist_get+0xac>)
   1a16e:	f00c f876 	bl	2625e <assert_print>
   1a172:	2194      	movs	r1, #148	; 0x94
   1a174:	4815      	ldr	r0, [pc, #84]	; (1a1cc <net_buf_slist_get+0xa4>)
   1a176:	e7e4      	b.n	1a142 <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1a178:	4813      	ldr	r0, [pc, #76]	; (1a1c8 <net_buf_slist_get+0xa0>)
   1a17a:	f006 fb19 	bl	207b0 <z_spin_lock_set_owner>
	return list->head;
   1a17e:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1a180:	b12d      	cbz	r5, 1a18e <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a182:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1a184:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a186:	4295      	cmp	r5, r2
	list->head = node;
   1a188:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1a18a:	bf08      	it	eq
   1a18c:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a18e:	480e      	ldr	r0, [pc, #56]	; (1a1c8 <net_buf_slist_get+0xa0>)
   1a190:	f006 fb00 	bl	20794 <z_spin_unlock_valid>
   1a194:	b958      	cbnz	r0, 1a1ae <net_buf_slist_get+0x86>
   1a196:	23c2      	movs	r3, #194	; 0xc2
   1a198:	4a0c      	ldr	r2, [pc, #48]	; (1a1cc <net_buf_slist_get+0xa4>)
   1a19a:	490f      	ldr	r1, [pc, #60]	; (1a1d8 <net_buf_slist_get+0xb0>)
   1a19c:	4808      	ldr	r0, [pc, #32]	; (1a1c0 <net_buf_slist_get+0x98>)
   1a19e:	f00c f85e 	bl	2625e <assert_print>
   1a1a2:	4909      	ldr	r1, [pc, #36]	; (1a1c8 <net_buf_slist_get+0xa0>)
   1a1a4:	480d      	ldr	r0, [pc, #52]	; (1a1dc <net_buf_slist_get+0xb4>)
   1a1a6:	f00c f85a 	bl	2625e <assert_print>
   1a1aa:	21c2      	movs	r1, #194	; 0xc2
   1a1ac:	e7e2      	b.n	1a174 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1a1ae:	f386 8811 	msr	BASEPRI, r6
   1a1b2:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1a1b6:	4628      	mov	r0, r5
   1a1b8:	bd70      	pop	{r4, r5, r6, pc}
   1a1ba:	bf00      	nop
   1a1bc:	0002f8bd 	.word	0x0002f8bd
   1a1c0:	0002d095 	.word	0x0002d095
   1a1c4:	00030cba 	.word	0x00030cba
   1a1c8:	200228c8 	.word	0x200228c8
   1a1cc:	0002df19 	.word	0x0002df19
   1a1d0:	0002df72 	.word	0x0002df72
   1a1d4:	0002df87 	.word	0x0002df87
   1a1d8:	0002df46 	.word	0x0002df46
   1a1dc:	0002df5d 	.word	0x0002df5d

0001a1e0 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1a1e0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1a1e2:	b958      	cbnz	r0, 1a1fc <net_buf_put+0x1c>
   1a1e4:	490d      	ldr	r1, [pc, #52]	; (1a21c <net_buf_put+0x3c>)
   1a1e6:	f240 13df 	movw	r3, #479	; 0x1df
   1a1ea:	4a0d      	ldr	r2, [pc, #52]	; (1a220 <net_buf_put+0x40>)
   1a1ec:	480d      	ldr	r0, [pc, #52]	; (1a224 <net_buf_put+0x44>)
   1a1ee:	f00c f836 	bl	2625e <assert_print>
   1a1f2:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1a1f6:	480a      	ldr	r0, [pc, #40]	; (1a220 <net_buf_put+0x40>)
   1a1f8:	f00c f82a 	bl	26250 <assert_post_action>
   1a1fc:	b949      	cbnz	r1, 1a212 <net_buf_put+0x32>
   1a1fe:	490a      	ldr	r1, [pc, #40]	; (1a228 <net_buf_put+0x48>)
   1a200:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1a204:	4a06      	ldr	r2, [pc, #24]	; (1a220 <net_buf_put+0x40>)
   1a206:	4807      	ldr	r0, [pc, #28]	; (1a224 <net_buf_put+0x44>)
   1a208:	f00c f829 	bl	2625e <assert_print>
   1a20c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1a210:	e7f1      	b.n	1a1f6 <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1a212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1a216:	f010 bbbf 	b.w	2a998 <k_queue_append>
   1a21a:	bf00      	nop
   1a21c:	00030d31 	.word	0x00030d31
   1a220:	00030cba 	.word	0x00030cba
   1a224:	0002d095 	.word	0x0002d095
   1a228:	00030d9e 	.word	0x00030d9e

0001a22c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1a230:	4605      	mov	r5, r0
   1a232:	b328      	cbz	r0, 1a280 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1a234:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1a236:	f04f 0834 	mov.w	r8, #52	; 0x34
   1a23a:	4e1a      	ldr	r6, [pc, #104]	; (1a2a4 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   1a23c:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1a23e:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1a240:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1a242:	3b01      	subs	r3, #1
   1a244:	b2db      	uxtb	r3, r3
   1a246:	7223      	strb	r3, [r4, #8]
   1a248:	b9c3      	cbnz	r3, 1a27c <net_buf_unref+0x50>
		if (buf->__buf) {
   1a24a:	6961      	ldr	r1, [r4, #20]
   1a24c:	b159      	cbz	r1, 1a266 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1a24e:	7a63      	ldrb	r3, [r4, #9]
   1a250:	07db      	lsls	r3, r3, #31
   1a252:	d407      	bmi.n	1a264 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a254:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1a256:	4620      	mov	r0, r4
   1a258:	fb08 6303 	mla	r3, r8, r3, r6
   1a25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a25e:	681b      	ldr	r3, [r3, #0]
   1a260:	689b      	ldr	r3, [r3, #8]
   1a262:	4798      	blx	r3
			buf->__buf = NULL;
   1a264:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1a266:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1a268:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1a26a:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1a26e:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1a270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a272:	b18b      	cbz	r3, 1a298 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1a274:	4620      	mov	r0, r4
   1a276:	4798      	blx	r3
	while (buf) {
   1a278:	2d00      	cmp	r5, #0
   1a27a:	d1df      	bne.n	1a23c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1a280:	4909      	ldr	r1, [pc, #36]	; (1a2a8 <net_buf_unref+0x7c>)
   1a282:	480a      	ldr	r0, [pc, #40]	; (1a2ac <net_buf_unref+0x80>)
   1a284:	f240 13eb 	movw	r3, #491	; 0x1eb
   1a288:	4a09      	ldr	r2, [pc, #36]	; (1a2b0 <net_buf_unref+0x84>)
   1a28a:	f00b ffe8 	bl	2625e <assert_print>
   1a28e:	f240 11eb 	movw	r1, #491	; 0x1eb
   1a292:	4807      	ldr	r0, [pc, #28]	; (1a2b0 <net_buf_unref+0x84>)
   1a294:	f00b ffdc 	bl	26250 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1a298:	4621      	mov	r1, r4
   1a29a:	fb00 6008 	mla	r0, r0, r8, r6
   1a29e:	f010 fb86 	bl	2a9ae <k_queue_prepend>
}
   1a2a2:	e7e9      	b.n	1a278 <net_buf_unref+0x4c>
   1a2a4:	20008c04 	.word	0x20008c04
   1a2a8:	00030d9e 	.word	0x00030d9e
   1a2ac:	0002d095 	.word	0x0002d095
   1a2b0:	00030cba 	.word	0x00030cba

0001a2b4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1a2b4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1a2b6:	b958      	cbnz	r0, 1a2d0 <net_buf_ref+0x1c>
   1a2b8:	4907      	ldr	r1, [pc, #28]	; (1a2d8 <net_buf_ref+0x24>)
   1a2ba:	4808      	ldr	r0, [pc, #32]	; (1a2dc <net_buf_ref+0x28>)
   1a2bc:	f240 231a 	movw	r3, #538	; 0x21a
   1a2c0:	4a07      	ldr	r2, [pc, #28]	; (1a2e0 <net_buf_ref+0x2c>)
   1a2c2:	f00b ffcc 	bl	2625e <assert_print>
   1a2c6:	f240 211a 	movw	r1, #538	; 0x21a
   1a2ca:	4805      	ldr	r0, [pc, #20]	; (1a2e0 <net_buf_ref+0x2c>)
   1a2cc:	f00b ffc0 	bl	26250 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1a2d0:	7a02      	ldrb	r2, [r0, #8]
   1a2d2:	3201      	adds	r2, #1
   1a2d4:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1a2d6:	bd08      	pop	{r3, pc}
   1a2d8:	00030d9e 	.word	0x00030d9e
   1a2dc:	0002d095 	.word	0x0002d095
   1a2e0:	00030cba 	.word	0x00030cba

0001a2e4 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1a2e4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1a2e6:	4603      	mov	r3, r0
   1a2e8:	b958      	cbnz	r0, 1a302 <net_buf_frag_last+0x1e>
   1a2ea:	4908      	ldr	r1, [pc, #32]	; (1a30c <net_buf_frag_last+0x28>)
   1a2ec:	4808      	ldr	r0, [pc, #32]	; (1a310 <net_buf_frag_last+0x2c>)
   1a2ee:	f240 2357 	movw	r3, #599	; 0x257
   1a2f2:	4a08      	ldr	r2, [pc, #32]	; (1a314 <net_buf_frag_last+0x30>)
   1a2f4:	f00b ffb3 	bl	2625e <assert_print>
   1a2f8:	f240 2157 	movw	r1, #599	; 0x257
   1a2fc:	4805      	ldr	r0, [pc, #20]	; (1a314 <net_buf_frag_last+0x30>)
   1a2fe:	f00b ffa7 	bl	26250 <assert_post_action>

	while (buf->frags) {
   1a302:	4618      	mov	r0, r3
   1a304:	685b      	ldr	r3, [r3, #4]
   1a306:	2b00      	cmp	r3, #0
   1a308:	d1fb      	bne.n	1a302 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1a30a:	bd08      	pop	{r3, pc}
   1a30c:	00030d9e 	.word	0x00030d9e
   1a310:	0002d095 	.word	0x0002d095
   1a314:	00030cba 	.word	0x00030cba

0001a318 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1a318:	b570      	push	{r4, r5, r6, lr}
   1a31a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1a31c:	4604      	mov	r4, r0
   1a31e:	b958      	cbnz	r0, 1a338 <net_buf_frag_insert+0x20>
   1a320:	490f      	ldr	r1, [pc, #60]	; (1a360 <net_buf_frag_insert+0x48>)
   1a322:	f240 2362 	movw	r3, #610	; 0x262
   1a326:	4a0f      	ldr	r2, [pc, #60]	; (1a364 <net_buf_frag_insert+0x4c>)
   1a328:	480f      	ldr	r0, [pc, #60]	; (1a368 <net_buf_frag_insert+0x50>)
   1a32a:	f00b ff98 	bl	2625e <assert_print>
   1a32e:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1a332:	480c      	ldr	r0, [pc, #48]	; (1a364 <net_buf_frag_insert+0x4c>)
   1a334:	f00b ff8c 	bl	26250 <assert_post_action>
   1a338:	b949      	cbnz	r1, 1a34e <net_buf_frag_insert+0x36>
   1a33a:	490c      	ldr	r1, [pc, #48]	; (1a36c <net_buf_frag_insert+0x54>)
   1a33c:	f240 2363 	movw	r3, #611	; 0x263
   1a340:	4a08      	ldr	r2, [pc, #32]	; (1a364 <net_buf_frag_insert+0x4c>)
   1a342:	4809      	ldr	r0, [pc, #36]	; (1a368 <net_buf_frag_insert+0x50>)
   1a344:	f00b ff8b 	bl	2625e <assert_print>
   1a348:	f240 2163 	movw	r1, #611	; 0x263
   1a34c:	e7f1      	b.n	1a332 <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1a34e:	6846      	ldr	r6, [r0, #4]
   1a350:	b11e      	cbz	r6, 1a35a <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1a352:	4608      	mov	r0, r1
   1a354:	f7ff ffc6 	bl	1a2e4 <net_buf_frag_last>
   1a358:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1a35a:	6065      	str	r5, [r4, #4]
}
   1a35c:	bd70      	pop	{r4, r5, r6, pc}
   1a35e:	bf00      	nop
   1a360:	00030d36 	.word	0x00030d36
   1a364:	00030cba 	.word	0x00030cba
   1a368:	0002d095 	.word	0x0002d095
   1a36c:	00030d3d 	.word	0x00030d3d

0001a370 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1a370:	b538      	push	{r3, r4, r5, lr}
   1a372:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1a374:	460c      	mov	r4, r1
   1a376:	b959      	cbnz	r1, 1a390 <net_buf_frag_add+0x20>
   1a378:	490c      	ldr	r1, [pc, #48]	; (1a3ac <net_buf_frag_add+0x3c>)
   1a37a:	480d      	ldr	r0, [pc, #52]	; (1a3b0 <net_buf_frag_add+0x40>)
   1a37c:	f240 236e 	movw	r3, #622	; 0x26e
   1a380:	4a0c      	ldr	r2, [pc, #48]	; (1a3b4 <net_buf_frag_add+0x44>)
   1a382:	f00b ff6c 	bl	2625e <assert_print>
   1a386:	f240 216e 	movw	r1, #622	; 0x26e
   1a38a:	480a      	ldr	r0, [pc, #40]	; (1a3b4 <net_buf_frag_add+0x44>)
   1a38c:	f00b ff60 	bl	26250 <assert_post_action>

	if (!head) {
   1a390:	b920      	cbnz	r0, 1a39c <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1a392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1a396:	4608      	mov	r0, r1
   1a398:	f7ff bf8c 	b.w	1a2b4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1a39c:	f7ff ffa2 	bl	1a2e4 <net_buf_frag_last>
   1a3a0:	4621      	mov	r1, r4
   1a3a2:	f7ff ffb9 	bl	1a318 <net_buf_frag_insert>
}
   1a3a6:	4628      	mov	r0, r5
   1a3a8:	bd38      	pop	{r3, r4, r5, pc}
   1a3aa:	bf00      	nop
   1a3ac:	00030d3d 	.word	0x00030d3d
   1a3b0:	0002d095 	.word	0x0002d095
   1a3b4:	00030cba 	.word	0x00030cba

0001a3b8 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1a3b8:	b508      	push	{r3, lr}
   1a3ba:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1a3bc:	6800      	ldr	r0, [r0, #0]
   1a3be:	689a      	ldr	r2, [r3, #8]
   1a3c0:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1a3c2:	4291      	cmp	r1, r2
   1a3c4:	d90b      	bls.n	1a3de <net_buf_simple_push+0x26>
   1a3c6:	4909      	ldr	r1, [pc, #36]	; (1a3ec <net_buf_simple_push+0x34>)
   1a3c8:	4809      	ldr	r0, [pc, #36]	; (1a3f0 <net_buf_simple_push+0x38>)
   1a3ca:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1a3ce:	4a09      	ldr	r2, [pc, #36]	; (1a3f4 <net_buf_simple_push+0x3c>)
   1a3d0:	f00b ff45 	bl	2625e <assert_print>
   1a3d4:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1a3d8:	4806      	ldr	r0, [pc, #24]	; (1a3f4 <net_buf_simple_push+0x3c>)
   1a3da:	f00b ff39 	bl	26250 <assert_post_action>
	buf->len += len;
   1a3de:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1a3e0:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1a3e2:	4411      	add	r1, r2
	buf->data -= len;
   1a3e4:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1a3e6:	8099      	strh	r1, [r3, #4]
}
   1a3e8:	bd08      	pop	{r3, pc}
   1a3ea:	bf00      	nop
   1a3ec:	00030d52 	.word	0x00030d52
   1a3f0:	0002d095 	.word	0x0002d095
   1a3f4:	00030cba 	.word	0x00030cba

0001a3f8 <net_buf_simple_pull>:
{
   1a3f8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1a3fa:	8882      	ldrh	r2, [r0, #4]
{
   1a3fc:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1a3fe:	428a      	cmp	r2, r1
   1a400:	d20b      	bcs.n	1a41a <net_buf_simple_pull+0x22>
   1a402:	4909      	ldr	r1, [pc, #36]	; (1a428 <net_buf_simple_pull+0x30>)
   1a404:	4809      	ldr	r0, [pc, #36]	; (1a42c <net_buf_simple_pull+0x34>)
   1a406:	f240 4352 	movw	r3, #1106	; 0x452
   1a40a:	4a09      	ldr	r2, [pc, #36]	; (1a430 <net_buf_simple_pull+0x38>)
   1a40c:	f00b ff27 	bl	2625e <assert_print>
   1a410:	f240 4152 	movw	r1, #1106	; 0x452
   1a414:	4806      	ldr	r0, [pc, #24]	; (1a430 <net_buf_simple_pull+0x38>)
   1a416:	f00b ff1b 	bl	26250 <assert_post_action>
	buf->len -= len;
   1a41a:	1a52      	subs	r2, r2, r1
   1a41c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1a41e:	6800      	ldr	r0, [r0, #0]
   1a420:	4408      	add	r0, r1
   1a422:	6018      	str	r0, [r3, #0]
}
   1a424:	bd08      	pop	{r3, pc}
   1a426:	bf00      	nop
   1a428:	00030d42 	.word	0x00030d42
   1a42c:	0002d095 	.word	0x0002d095
   1a430:	00030cba 	.word	0x00030cba

0001a434 <net_buf_simple_pull_mem>:
{
   1a434:	b508      	push	{r3, lr}
   1a436:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1a438:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1a43a:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1a43c:	428a      	cmp	r2, r1
   1a43e:	d20b      	bcs.n	1a458 <net_buf_simple_pull_mem+0x24>
   1a440:	4908      	ldr	r1, [pc, #32]	; (1a464 <net_buf_simple_pull_mem+0x30>)
   1a442:	4809      	ldr	r0, [pc, #36]	; (1a468 <net_buf_simple_pull_mem+0x34>)
   1a444:	f240 435e 	movw	r3, #1118	; 0x45e
   1a448:	4a08      	ldr	r2, [pc, #32]	; (1a46c <net_buf_simple_pull_mem+0x38>)
   1a44a:	f00b ff08 	bl	2625e <assert_print>
   1a44e:	f240 415e 	movw	r1, #1118	; 0x45e
   1a452:	4806      	ldr	r0, [pc, #24]	; (1a46c <net_buf_simple_pull_mem+0x38>)
   1a454:	f00b fefc 	bl	26250 <assert_post_action>
	buf->len -= len;
   1a458:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1a45a:	4401      	add	r1, r0
	buf->len -= len;
   1a45c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1a45e:	6019      	str	r1, [r3, #0]
}
   1a460:	bd08      	pop	{r3, pc}
   1a462:	bf00      	nop
   1a464:	00030d42 	.word	0x00030d42
   1a468:	0002d095 	.word	0x0002d095
   1a46c:	00030cba 	.word	0x00030cba

0001a470 <net_buf_simple_add>:
{
   1a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1a472:	8885      	ldrh	r5, [r0, #4]
   1a474:	6803      	ldr	r3, [r0, #0]
   1a476:	460e      	mov	r6, r1
   1a478:	4604      	mov	r4, r0
   1a47a:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1a47c:	f00e fed5 	bl	2922a <net_buf_simple_tailroom>
   1a480:	42b0      	cmp	r0, r6
   1a482:	d20b      	bcs.n	1a49c <net_buf_simple_add+0x2c>
   1a484:	4907      	ldr	r1, [pc, #28]	; (1a4a4 <net_buf_simple_add+0x34>)
   1a486:	4808      	ldr	r0, [pc, #32]	; (1a4a8 <net_buf_simple_add+0x38>)
   1a488:	f240 3303 	movw	r3, #771	; 0x303
   1a48c:	4a07      	ldr	r2, [pc, #28]	; (1a4ac <net_buf_simple_add+0x3c>)
   1a48e:	f00b fee6 	bl	2625e <assert_print>
   1a492:	f240 3103 	movw	r1, #771	; 0x303
   1a496:	4805      	ldr	r0, [pc, #20]	; (1a4ac <net_buf_simple_add+0x3c>)
   1a498:	f00b feda 	bl	26250 <assert_post_action>
	buf->len += len;
   1a49c:	4435      	add	r5, r6
   1a49e:	80a5      	strh	r5, [r4, #4]
}
   1a4a0:	4638      	mov	r0, r7
   1a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a4a4:	00030d76 	.word	0x00030d76
   1a4a8:	0002d095 	.word	0x0002d095
   1a4ac:	00030cba 	.word	0x00030cba

0001a4b0 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1a4b0:	b508      	push	{r3, lr}
   1a4b2:	4804      	ldr	r0, [pc, #16]	; (1a4c4 <xoshiro128_initialize+0x14>)
   1a4b4:	f010 f9f7 	bl	2a8a6 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1a4b8:	2800      	cmp	r0, #0
}
   1a4ba:	bf0c      	ite	eq
   1a4bc:	f06f 0012 	mvneq.w	r0, #18
   1a4c0:	2000      	movne	r0, #0
   1a4c2:	bd08      	pop	{r3, pc}
   1a4c4:	0002bb04 	.word	0x0002bb04

0001a4c8 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   1a4c8:	2813      	cmp	r0, #19
   1a4ca:	d80e      	bhi.n	1a4ea <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   1a4cc:	4a08      	ldr	r2, [pc, #32]	; (1a4f0 <adc_gain_invert+0x28>)
   1a4ce:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1a4d2:	b153      	cbz	r3, 1a4ea <adc_gain_invert+0x22>
   1a4d4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   1a4d8:	7852      	ldrb	r2, [r2, #1]
   1a4da:	b132      	cbz	r2, 1a4ea <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   1a4dc:	6808      	ldr	r0, [r1, #0]
   1a4de:	4343      	muls	r3, r0
   1a4e0:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   1a4e4:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   1a4e6:	600b      	str	r3, [r1, #0]
			rv = 0;
   1a4e8:	4770      	bx	lr
	int rv = -EINVAL;
   1a4ea:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1a4ee:	4770      	bx	lr
   1a4f0:	00030da2 	.word	0x00030da2

0001a4f4 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1a4f4:	2201      	movs	r2, #1
   1a4f6:	4b05      	ldr	r3, [pc, #20]	; (1a50c <adc_context_start_sampling+0x18>)
   1a4f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1a4fc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1a500:	b109      	cbz	r1, 1a506 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a502:	60da      	str	r2, [r3, #12]
}
   1a504:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a506:	601a      	str	r2, [r3, #0]
   1a508:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1a50a:	4770      	bx	lr
   1a50c:	4000e000 	.word	0x4000e000

0001a510 <adc_nrfx_channel_setup>:
{
   1a510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1a512:	790d      	ldrb	r5, [r1, #4]
   1a514:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
   1a518:	2c07      	cmp	r4, #7
   1a51a:	d825      	bhi.n	1a568 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
   1a51c:	780a      	ldrb	r2, [r1, #0]
   1a51e:	2a0b      	cmp	r2, #11
   1a520:	d818      	bhi.n	1a554 <adc_nrfx_channel_setup+0x44>
   1a522:	e8df f002 	tbb	[pc, r2]
   1a526:	0707      	.short	0x0707
   1a528:	06170707 	.word	0x06170707
   1a52c:	13111717 	.word	0x13111717
   1a530:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
   1a532:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
   1a534:	784b      	ldrb	r3, [r1, #1]
   1a536:	2b03      	cmp	r3, #3
   1a538:	d01a      	beq.n	1a570 <adc_nrfx_channel_setup+0x60>
   1a53a:	2b04      	cmp	r3, #4
   1a53c:	f04f 0300 	mov.w	r3, #0
   1a540:	d017      	beq.n	1a572 <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
   1a542:	4a30      	ldr	r2, [pc, #192]	; (1a604 <adc_nrfx_channel_setup+0xf4>)
   1a544:	9202      	str	r2, [sp, #8]
   1a546:	e008      	b.n	1a55a <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
   1a548:	2205      	movs	r2, #5
		break;
   1a54a:	e7f3      	b.n	1a534 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   1a54c:	2206      	movs	r2, #6
		break;
   1a54e:	e7f1      	b.n	1a534 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   1a550:	2207      	movs	r2, #7
		break;
   1a552:	e7ef      	b.n	1a534 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   1a554:	4b2c      	ldr	r3, [pc, #176]	; (1a608 <adc_nrfx_channel_setup+0xf8>)
   1a556:	9302      	str	r3, [sp, #8]
   1a558:	2300      	movs	r3, #0
   1a55a:	2201      	movs	r2, #1
   1a55c:	4618      	mov	r0, r3
   1a55e:	e9cd 3300 	strd	r3, r3, [sp]
   1a562:	492a      	ldr	r1, [pc, #168]	; (1a60c <adc_nrfx_channel_setup+0xfc>)
   1a564:	f00e fe7c 	bl	29260 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a568:	f06f 0015 	mvn.w	r0, #21
}
   1a56c:	b004      	add	sp, #16
   1a56e:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   1a570:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
   1a572:	f244 060a 	movw	r6, #16394	; 0x400a
   1a576:	8848      	ldrh	r0, [r1, #2]
   1a578:	42b0      	cmp	r0, r6
   1a57a:	d03d      	beq.n	1a5f8 <adc_nrfx_channel_setup+0xe8>
   1a57c:	d80a      	bhi.n	1a594 <adc_nrfx_channel_setup+0x84>
   1a57e:	f244 0603 	movw	r6, #16387	; 0x4003
   1a582:	42b0      	cmp	r0, r6
   1a584:	d014      	beq.n	1a5b0 <adc_nrfx_channel_setup+0xa0>
   1a586:	f244 0605 	movw	r6, #16389	; 0x4005
   1a58a:	42b0      	cmp	r0, r6
   1a58c:	d032      	beq.n	1a5f4 <adc_nrfx_channel_setup+0xe4>
   1a58e:	b398      	cbz	r0, 1a5f8 <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1a590:	4b1f      	ldr	r3, [pc, #124]	; (1a610 <adc_nrfx_channel_setup+0x100>)
   1a592:	e7e0      	b.n	1a556 <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
   1a594:	f244 0614 	movw	r6, #16404	; 0x4014
   1a598:	42b0      	cmp	r0, r6
   1a59a:	d02f      	beq.n	1a5fc <adc_nrfx_channel_setup+0xec>
   1a59c:	f244 0628 	movw	r6, #16424	; 0x4028
   1a5a0:	42b0      	cmp	r0, r6
   1a5a2:	d02d      	beq.n	1a600 <adc_nrfx_channel_setup+0xf0>
   1a5a4:	f244 060f 	movw	r6, #16399	; 0x400f
   1a5a8:	42b0      	cmp	r0, r6
   1a5aa:	d1f1      	bne.n	1a590 <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1a5ac:	2003      	movs	r0, #3
   1a5ae:	e000      	b.n	1a5b2 <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
   1a5b0:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1a5b2:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1a5b6:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1a5b8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
   1a5bc:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1a5c0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].PSELP = pselp;
   1a5c4:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   1a5c6:	0123      	lsls	r3, r4, #4
   1a5c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a5cc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1a5d0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1a5d4:	0123      	lsls	r3, r4, #4
   1a5d6:	798a      	ldrb	r2, [r1, #6]
   1a5d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a5dc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1a5e0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1a5e4:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1a5e8:	4b0a      	ldr	r3, [pc, #40]	; (1a614 <adc_nrfx_channel_setup+0x104>)
   1a5ea:	794a      	ldrb	r2, [r1, #5]
   1a5ec:	4423      	add	r3, r4
   1a5ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1a5f2:	e7bb      	b.n	1a56c <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
   1a5f4:	2001      	movs	r0, #1
   1a5f6:	e7dc      	b.n	1a5b2 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1a5f8:	2002      	movs	r0, #2
   1a5fa:	e7da      	b.n	1a5b2 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1a5fc:	2004      	movs	r0, #4
   1a5fe:	e7d8      	b.n	1a5b2 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1a600:	2005      	movs	r0, #5
   1a602:	e7d6      	b.n	1a5b2 <adc_nrfx_channel_setup+0xa2>
   1a604:	00030de9 	.word	0x00030de9
   1a608:	00030dca 	.word	0x00030dca
   1a60c:	0002c05c 	.word	0x0002c05c
   1a610:	00030e0d 	.word	0x00030e0d
   1a614:	20008168 	.word	0x20008168

0001a618 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   1a618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a61a:	460c      	mov	r4, r1
   1a61c:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
   1a61e:	f04f 33ff 	mov.w	r3, #4294967295
   1a622:	f04f 32ff 	mov.w	r2, #4294967295
   1a626:	486d      	ldr	r0, [pc, #436]	; (1a7dc <adc_nrfx_read+0x1c4>)
   1a628:	f006 fba2 	bl	20d70 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1a62c:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   1a62e:	1e73      	subs	r3, r6, #1
   1a630:	2bfe      	cmp	r3, #254	; 0xfe
   1a632:	f04f 0300 	mov.w	r3, #0
   1a636:	d909      	bls.n	1a64c <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
   1a638:	4a69      	ldr	r2, [pc, #420]	; (1a7e0 <adc_nrfx_read+0x1c8>)
   1a63a:	9202      	str	r2, [sp, #8]
		LOG_ERR(
   1a63c:	2201      	movs	r2, #1
   1a63e:	4618      	mov	r0, r3
   1a640:	e9cd 3300 	strd	r3, r3, [sp]
   1a644:	4967      	ldr	r1, [pc, #412]	; (1a7e4 <adc_nrfx_read+0x1cc>)
   1a646:	f00e fe0b 	bl	29260 <z_log_msg_runtime_create.constprop.0>
	if (error) {
   1a64a:	e014      	b.n	1a676 <adc_nrfx_read+0x5e>
   1a64c:	461a      	mov	r2, r3
	active_channels = 0U;
   1a64e:	4618      	mov	r0, r3
    p_reg->CH[channel].PSELP = pselp;
   1a650:	4d65      	ldr	r5, [pc, #404]	; (1a7e8 <adc_nrfx_read+0x1d0>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1a652:	4f66      	ldr	r7, [pc, #408]	; (1a7ec <adc_nrfx_read+0x1d4>)
		if (selected_channels & BIT(channel_id)) {
   1a654:	fa26 f302 	lsr.w	r3, r6, r2
   1a658:	f013 0301 	ands.w	r3, r3, #1
   1a65c:	d039      	beq.n	1a6d2 <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1a65e:	5cbb      	ldrb	r3, [r7, r2]
   1a660:	b98b      	cbnz	r3, 1a686 <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
   1a662:	9203      	str	r2, [sp, #12]
   1a664:	4a62      	ldr	r2, [pc, #392]	; (1a7f0 <adc_nrfx_read+0x1d8>)
   1a666:	9202      	str	r2, [sp, #8]
   1a668:	e9cd 3300 	strd	r3, r3, [sp]
   1a66c:	2201      	movs	r2, #1
   1a66e:	4618      	mov	r0, r3
   1a670:	495c      	ldr	r1, [pc, #368]	; (1a7e4 <adc_nrfx_read+0x1cc>)
   1a672:	f00e fdf5 	bl	29260 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a676:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1a67a:	4858      	ldr	r0, [pc, #352]	; (1a7dc <adc_nrfx_read+0x1c4>)
   1a67c:	f006 fb34 	bl	20ce8 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1a680:	4620      	mov	r0, r4
   1a682:	b007      	add	sp, #28
   1a684:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1a686:	f894 c011 	ldrb.w	ip, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1a68a:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
   1a68e:	f1bc 0c00 	subs.w	ip, ip, #0
   1a692:	bf18      	it	ne
   1a694:	f04f 0c01 	movne.w	ip, #1
   1a698:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
			++active_channels;
   1a69c:	3001      	adds	r0, #1
   1a69e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   1a6a2:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   1a6a6:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1a6aa:	f102 0151 	add.w	r1, r2, #81	; 0x51
   1a6ae:	0109      	lsls	r1, r1, #4
   1a6b0:	506b      	str	r3, [r5, r1]
   1a6b2:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
   1a6b4:	3201      	adds	r2, #1
   1a6b6:	2a08      	cmp	r2, #8
   1a6b8:	d1cc      	bne.n	1a654 <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
   1a6ba:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   1a6bc:	2300      	movs	r3, #0
   1a6be:	f1a2 0108 	sub.w	r1, r2, #8
   1a6c2:	2906      	cmp	r1, #6
   1a6c4:	d818      	bhi.n	1a6f8 <adc_nrfx_read+0xe0>
   1a6c6:	e8df f001 	tbb	[pc, r1]
   1a6ca:	171e      	.short	0x171e
   1a6cc:	17091720 	.word	0x17091720
   1a6d0:	15          	.byte	0x15
   1a6d1:	00          	.byte	0x00
   1a6d2:	f102 0151 	add.w	r1, r2, #81	; 0x51
   1a6d6:	0109      	lsls	r1, r1, #4
   1a6d8:	506b      	str	r3, [r5, r1]
}
   1a6da:	e7eb      	b.n	1a6b4 <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1a6dc:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1a6de:	4a42      	ldr	r2, [pc, #264]	; (1a7e8 <adc_nrfx_read+0x1d0>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1a6e0:	2801      	cmp	r0, #1
   1a6e2:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1a6e6:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1a6e8:	d911      	bls.n	1a70e <adc_nrfx_read+0xf6>
   1a6ea:	b193      	cbz	r3, 1a712 <adc_nrfx_read+0xfa>
		LOG_ERR(
   1a6ec:	4b41      	ldr	r3, [pc, #260]	; (1a7f4 <adc_nrfx_read+0x1dc>)
   1a6ee:	9302      	str	r3, [sp, #8]
   1a6f0:	2300      	movs	r3, #0
   1a6f2:	e7a3      	b.n	1a63c <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1a6f4:	2303      	movs	r3, #3
		break;
   1a6f6:	e7f2      	b.n	1a6de <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   1a6f8:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
   1a6fa:	4a3f      	ldr	r2, [pc, #252]	; (1a7f8 <adc_nrfx_read+0x1e0>)
   1a6fc:	9300      	str	r3, [sp, #0]
   1a6fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a702:	2300      	movs	r3, #0
   1a704:	e7b2      	b.n	1a66c <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1a706:	2300      	movs	r3, #0
   1a708:	e7e9      	b.n	1a6de <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   1a70a:	2301      	movs	r3, #1
   1a70c:	e7e7      	b.n	1a6de <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
   1a70e:	2b08      	cmp	r3, #8
   1a710:	d816      	bhi.n	1a740 <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
   1a712:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   1a716:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1a718:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
   1a71a:	b9b2      	cbnz	r2, 1a74a <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
   1a71c:	68e2      	ldr	r2, [r4, #12]
   1a71e:	429a      	cmp	r2, r3
   1a720:	d217      	bcs.n	1a752 <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1a722:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1a726:	4b35      	ldr	r3, [pc, #212]	; (1a7fc <adc_nrfx_read+0x1e4>)
   1a728:	2201      	movs	r2, #1
   1a72a:	9302      	str	r3, [sp, #8]
   1a72c:	2300      	movs	r3, #0
   1a72e:	492d      	ldr	r1, [pc, #180]	; (1a7e4 <adc_nrfx_read+0x1cc>)
   1a730:	4618      	mov	r0, r3
   1a732:	e9cd 3300 	strd	r3, r3, [sp]
   1a736:	f00e fd93 	bl	29260 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1a73a:	f06f 040b 	mvn.w	r4, #11
   1a73e:	e79c      	b.n	1a67a <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
   1a740:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
   1a742:	4b2f      	ldr	r3, [pc, #188]	; (1a800 <adc_nrfx_read+0x1e8>)
   1a744:	9302      	str	r3, [sp, #8]
   1a746:	2300      	movs	r3, #0
   1a748:	e78e      	b.n	1a668 <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1a74a:	8992      	ldrh	r2, [r2, #12]
   1a74c:	fb02 3303 	mla	r3, r2, r3, r3
   1a750:	e7e4      	b.n	1a71c <adc_nrfx_read+0x104>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1a752:	4626      	mov	r6, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1a754:	68a2      	ldr	r2, [r4, #8]
   1a756:	4b24      	ldr	r3, [pc, #144]	; (1a7e8 <adc_nrfx_read+0x1d0>)
   1a758:	4f2a      	ldr	r7, [pc, #168]	; (1a804 <adc_nrfx_read+0x1ec>)
   1a75a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
   1a75e:	f107 0574 	add.w	r5, r7, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   1a762:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   1a766:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1a768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1a76a:	6833      	ldr	r3, [r6, #0]
   1a76c:	463e      	mov	r6, r7
   1a76e:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
   1a770:	2500      	movs	r5, #0
   1a772:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
   1a774:	6823      	ldr	r3, [r4, #0]
   1a776:	b36b      	cbz	r3, 1a7d4 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
   1a778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1a77a:	f107 0488 	add.w	r4, r7, #136	; 0x88
   1a77e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1a782:	677c      	str	r4, [r7, #116]	; 0x74
		ctx->sampling_index = 0U;
   1a784:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   1a788:	b320      	cbz	r0, 1a7d4 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a78a:	e8d6 3fef 	ldaex	r3, [r6]
   1a78e:	e8c6 5fe2 	stlex	r2, r5, [r6]
   1a792:	2a00      	cmp	r2, #0
   1a794:	d1f9      	bne.n	1a78a <adc_nrfx_read+0x172>
   1a796:	491c      	ldr	r1, [pc, #112]	; (1a808 <adc_nrfx_read+0x1f0>)
   1a798:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1a79c:	460e      	mov	r6, r1
   1a79e:	4629      	mov	r1, r5
   1a7a0:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   1a7a4:	2300      	movs	r3, #0
   1a7a6:	fbe4 6100 	umlal	r6, r1, r4, r0
   1a7aa:	4a18      	ldr	r2, [pc, #96]	; (1a80c <adc_nrfx_read+0x1f4>)
   1a7ac:	4630      	mov	r0, r6
   1a7ae:	f7ee fb9f 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1a7b2:	2200      	movs	r2, #0
   1a7b4:	e9cd 0100 	strd	r0, r1, [sp]
   1a7b8:	2300      	movs	r3, #0
   1a7ba:	f107 0008 	add.w	r0, r7, #8
   1a7be:	f008 fea5 	bl	2350c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   1a7c2:	f04f 32ff 	mov.w	r2, #4294967295
   1a7c6:	f04f 33ff 	mov.w	r3, #4294967295
   1a7ca:	4811      	ldr	r0, [pc, #68]	; (1a810 <adc_nrfx_read+0x1f8>)
   1a7cc:	f006 fad0 	bl	20d70 <z_impl_k_sem_take>
	return ctx->status;
   1a7d0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
	return error;
   1a7d2:	e752      	b.n	1a67a <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1a7d4:	480b      	ldr	r0, [pc, #44]	; (1a804 <adc_nrfx_read+0x1ec>)
   1a7d6:	f7ff fe8d 	bl	1a4f4 <adc_context_start_sampling>
   1a7da:	e7f2      	b.n	1a7c2 <adc_nrfx_read+0x1aa>
   1a7dc:	200081a8 	.word	0x200081a8
   1a7e0:	00030e38 	.word	0x00030e38
   1a7e4:	0002c05c 	.word	0x0002c05c
   1a7e8:	4000e000 	.word	0x4000e000
   1a7ec:	20008208 	.word	0x20008208
   1a7f0:	00030e56 	.word	0x00030e56
   1a7f4:	00030e95 	.word	0x00030e95
   1a7f8:	00030e70 	.word	0x00030e70
   1a7fc:	00030eea 	.word	0x00030eea
   1a800:	00030ec7 	.word	0x00030ec7
   1a804:	20008168 	.word	0x20008168
   1a808:	000f423f 	.word	0x000f423f
   1a80c:	000f4240 	.word	0x000f4240
   1a810:	200081c0 	.word	0x200081c0

0001a814 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1a814:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a816:	2400      	movs	r4, #0
   1a818:	4b0d      	ldr	r3, [pc, #52]	; (1a850 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1a81a:	200e      	movs	r0, #14
   1a81c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1a820:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1a824:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1a828:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1a82c:	2212      	movs	r2, #18
   1a82e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1a832:	f7f6 fbd1 	bl	10fd8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1a836:	4622      	mov	r2, r4
   1a838:	2101      	movs	r1, #1
   1a83a:	200e      	movs	r0, #14
   1a83c:	f7f6 fbfc 	bl	11038 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1a840:	4804      	ldr	r0, [pc, #16]	; (1a854 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1a842:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a844:	b913      	cbnz	r3, 1a84c <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1a846:	3040      	adds	r0, #64	; 0x40
   1a848:	f006 fa4e 	bl	20ce8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1a84c:	2000      	movs	r0, #0
   1a84e:	bd10      	pop	{r4, pc}
   1a850:	4000e000 	.word	0x4000e000
   1a854:	20008168 	.word	0x20008168

0001a858 <saadc_irq_handler>:
{
   1a858:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a85a:	4b2d      	ldr	r3, [pc, #180]	; (1a910 <saadc_irq_handler+0xb8>)
   1a85c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1a860:	2a00      	cmp	r2, #0
   1a862:	d048      	beq.n	1a8f6 <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a864:	2200      	movs	r2, #0
   1a866:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1a86a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a86e:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1a870:	4c28      	ldr	r4, [pc, #160]	; (1a914 <saadc_irq_handler+0xbc>)
   1a872:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1a874:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a878:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1a87a:	4625      	mov	r5, r4
   1a87c:	b3b3      	cbz	r3, 1a8ec <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   1a87e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   1a882:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   1a886:	b133      	cbz	r3, 1a896 <saadc_irq_handler+0x3e>
			action = callback(dev,
   1a888:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1a88c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1a88e:	2801      	cmp	r0, #1
   1a890:	d014      	beq.n	1a8bc <saadc_irq_handler+0x64>
   1a892:	2802      	cmp	r0, #2
   1a894:	d024      	beq.n	1a8e0 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1a896:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   1a89a:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1a89e:	429a      	cmp	r2, r3
   1a8a0:	d91e      	bls.n	1a8e0 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1a8a2:	3301      	adds	r3, #1
   1a8a4:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1a8a8:	4b19      	ldr	r3, [pc, #100]	; (1a910 <saadc_irq_handler+0xb8>)
   1a8aa:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1a8ae:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1a8b2:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1a8b4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1a8b8:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1a8bc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1a8c0:	b923      	cbnz	r3, 1a8cc <saadc_irq_handler+0x74>
}
   1a8c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1a8c6:	4813      	ldr	r0, [pc, #76]	; (1a914 <saadc_irq_handler+0xbc>)
   1a8c8:	f7ff be14 	b.w	1a4f4 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a8cc:	e8d5 3fef 	ldaex	r3, [r5]
   1a8d0:	1e5a      	subs	r2, r3, #1
   1a8d2:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1a8d6:	2900      	cmp	r1, #0
   1a8d8:	d1f8      	bne.n	1a8cc <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1a8da:	2b01      	cmp	r3, #1
   1a8dc:	dcf1      	bgt.n	1a8c2 <saadc_irq_handler+0x6a>
   1a8de:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1a8e0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1a8e4:	b113      	cbz	r3, 1a8ec <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   1a8e6:	480c      	ldr	r0, [pc, #48]	; (1a918 <saadc_irq_handler+0xc0>)
   1a8e8:	f010 f948 	bl	2ab7c <z_impl_k_timer_stop>
   1a8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1a8f0:	480a      	ldr	r0, [pc, #40]	; (1a91c <saadc_irq_handler+0xc4>)
   1a8f2:	f006 b9f9 	b.w	20ce8 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a8f6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1a8fa:	2900      	cmp	r1, #0
   1a8fc:	d0ef      	beq.n	1a8de <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a8fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1a902:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a906:	2201      	movs	r2, #1
   1a908:	609a      	str	r2, [r3, #8]
   1a90a:	601a      	str	r2, [r3, #0]
   1a90c:	605a      	str	r2, [r3, #4]
}
   1a90e:	e7e6      	b.n	1a8de <saadc_irq_handler+0x86>
   1a910:	4000e000 	.word	0x4000e000
   1a914:	20008168 	.word	0x20008168
   1a918:	20008170 	.word	0x20008170
   1a91c:	200081c0 	.word	0x200081c0

0001a920 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1a920:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1a922:	2340      	movs	r3, #64	; 0x40
{
   1a924:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1a926:	490a      	ldr	r1, [pc, #40]	; (1a950 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1a928:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1a92a:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1a92c:	1149      	asrs	r1, r1, #5
{
   1a92e:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1a930:	4623      	mov	r3, r4
   1a932:	4a08      	ldr	r2, [pc, #32]	; (1a954 <onoff_start+0x34>)
   1a934:	4808      	ldr	r0, [pc, #32]	; (1a958 <onoff_start+0x38>)
   1a936:	f00e fcc9 	bl	292cc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1a93a:	1e01      	subs	r1, r0, #0
   1a93c:	da05      	bge.n	1a94a <onoff_start+0x2a>
		notify(mgr, err);
   1a93e:	4628      	mov	r0, r5
   1a940:	4623      	mov	r3, r4
	}
}
   1a942:	b003      	add	sp, #12
   1a944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1a948:	4718      	bx	r3
}
   1a94a:	b003      	add	sp, #12
   1a94c:	bd30      	pop	{r4, r5, pc}
   1a94e:	bf00      	nop
   1a950:	200228e0 	.word	0x200228e0
   1a954:	0002933b 	.word	0x0002933b
   1a958:	0002baa4 	.word	0x0002baa4

0001a95c <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a95c:	b2c9      	uxtb	r1, r1
   1a95e:	2903      	cmp	r1, #3
{
   1a960:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a962:	d909      	bls.n	1a978 <get_status+0x1c>
   1a964:	4909      	ldr	r1, [pc, #36]	; (1a98c <get_status+0x30>)
   1a966:	480a      	ldr	r0, [pc, #40]	; (1a990 <get_status+0x34>)
   1a968:	237a      	movs	r3, #122	; 0x7a
   1a96a:	4a0a      	ldr	r2, [pc, #40]	; (1a994 <get_status+0x38>)
   1a96c:	f00b fc77 	bl	2625e <assert_print>
   1a970:	217a      	movs	r1, #122	; 0x7a
   1a972:	4808      	ldr	r0, [pc, #32]	; (1a994 <get_status+0x38>)
   1a974:	f00b fc6c 	bl	26250 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1a978:	220c      	movs	r2, #12
   1a97a:	6903      	ldr	r3, [r0, #16]
   1a97c:	fb01 3302 	mla	r3, r1, r2, r3
   1a980:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   1a984:	f000 0007 	and.w	r0, r0, #7
   1a988:	bd08      	pop	{r3, pc}
   1a98a:	bf00      	nop
   1a98c:	00030f64 	.word	0x00030f64
   1a990:	0002d095 	.word	0x0002d095
   1a994:	00030f27 	.word	0x00030f27

0001a998 <stop>:
{
   1a998:	b570      	push	{r4, r5, r6, lr}
   1a99a:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a99c:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   1a99e:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a9a0:	d90b      	bls.n	1a9ba <stop+0x22>
   1a9a2:	491a      	ldr	r1, [pc, #104]	; (1aa0c <stop+0x74>)
   1a9a4:	481a      	ldr	r0, [pc, #104]	; (1aa10 <stop+0x78>)
   1a9a6:	f240 135d 	movw	r3, #349	; 0x15d
   1a9aa:	4a1a      	ldr	r2, [pc, #104]	; (1aa14 <stop+0x7c>)
   1a9ac:	f00b fc57 	bl	2625e <assert_print>
   1a9b0:	f240 115d 	movw	r1, #349	; 0x15d
   1a9b4:	4817      	ldr	r0, [pc, #92]	; (1aa14 <stop+0x7c>)
   1a9b6:	f00b fc4b 	bl	26250 <assert_post_action>
	__asm__ volatile(
   1a9ba:	f04f 0420 	mov.w	r4, #32
   1a9be:	f3ef 8511 	mrs	r5, BASEPRI
   1a9c2:	f384 8812 	msr	BASEPRI_MAX, r4
   1a9c6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a9ca:	260c      	movs	r6, #12
   1a9cc:	fb06 3401 	mla	r4, r6, r1, r3
   1a9d0:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1a9d4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1a9d8:	d008      	beq.n	1a9ec <stop+0x54>
   1a9da:	42a2      	cmp	r2, r4
   1a9dc:	d006      	beq.n	1a9ec <stop+0x54>
	__asm__ volatile(
   1a9de:	f385 8811 	msr	BASEPRI, r5
   1a9e2:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1a9e6:	f04f 30ff 	mov.w	r0, #4294967295
}
   1a9ea:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1a9ec:	2201      	movs	r2, #1
   1a9ee:	4371      	muls	r1, r6
   1a9f0:	440b      	add	r3, r1
   1a9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1a9f6:	f385 8811 	msr	BASEPRI, r5
   1a9fa:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1a9fe:	6843      	ldr	r3, [r0, #4]
   1aa00:	440b      	add	r3, r1
   1aa02:	685b      	ldr	r3, [r3, #4]
   1aa04:	4798      	blx	r3
	return 0;
   1aa06:	2000      	movs	r0, #0
   1aa08:	e7ef      	b.n	1a9ea <stop+0x52>
   1aa0a:	bf00      	nop
   1aa0c:	00030f64 	.word	0x00030f64
   1aa10:	0002d095 	.word	0x0002d095
   1aa14:	00030f27 	.word	0x00030f27

0001aa18 <onoff_stop>:
{
   1aa18:	b570      	push	{r4, r5, r6, lr}
   1aa1a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1aa1c:	4906      	ldr	r1, [pc, #24]	; (1aa38 <onoff_stop+0x20>)
{
   1aa1e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1aa20:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1aa22:	1149      	asrs	r1, r1, #5
   1aa24:	2240      	movs	r2, #64	; 0x40
   1aa26:	4805      	ldr	r0, [pc, #20]	; (1aa3c <onoff_stop+0x24>)
   1aa28:	f7ff ffb6 	bl	1a998 <stop>
	notify(mgr, res);
   1aa2c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1aa2e:	4601      	mov	r1, r0
	notify(mgr, res);
   1aa30:	4620      	mov	r0, r4
}
   1aa32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1aa36:	4718      	bx	r3
   1aa38:	200228e0 	.word	0x200228e0
   1aa3c:	0002baa4 	.word	0x0002baa4

0001aa40 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1aa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1aa44:	2200      	movs	r2, #0
   1aa46:	2101      	movs	r1, #1
{
   1aa48:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1aa4a:	2005      	movs	r0, #5
   1aa4c:	f7f6 faf4 	bl	11038 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1aa50:	4811      	ldr	r0, [pc, #68]	; (1aa98 <clk_init+0x58>)
   1aa52:	f002 ff81 	bl	1d958 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1aa56:	4b11      	ldr	r3, [pc, #68]	; (1aa9c <clk_init+0x5c>)
   1aa58:	4298      	cmp	r0, r3
   1aa5a:	d119      	bne.n	1aa90 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1aa5c:	f002 ffa0 	bl	1d9a0 <nrfx_clock_enable>
   1aa60:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1aa62:	f04f 080c 	mov.w	r8, #12
   1aa66:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1aa68:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1aaa0 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   1aa6c:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1aa6e:	4649      	mov	r1, r9
   1aa70:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   1aa74:	f00b fbae 	bl	261d4 <onoff_manager_init>
		if (err < 0) {
   1aa78:	2800      	cmp	r0, #0
   1aa7a:	db07      	blt.n	1aa8c <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1aa7c:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1aa80:	3401      	adds	r4, #1
   1aa82:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1aa84:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1aa88:	d1f0      	bne.n	1aa6c <clk_init+0x2c>
	}

	return 0;
   1aa8a:	2000      	movs	r0, #0
}
   1aa8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1aa90:	f06f 0004 	mvn.w	r0, #4
   1aa94:	e7fa      	b.n	1aa8c <clk_init+0x4c>
   1aa96:	bf00      	nop
   1aa98:	0001aadd 	.word	0x0001aadd
   1aa9c:	0bad0000 	.word	0x0bad0000
   1aaa0:	0002ccbc 	.word	0x0002ccbc

0001aaa4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1aaa4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1aaa6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1aaa8:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1aaaa:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1aaac:	434b      	muls	r3, r1
   1aaae:	4809      	ldr	r0, [pc, #36]	; (1aad4 <clkstarted_handle.constprop.0+0x30>)
   1aab0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1aab2:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   1aab4:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1aab8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1aaba:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1aabe:	f00e fbf2 	bl	292a6 <set_on_state>
	if (callback) {
   1aac2:	b12d      	cbz	r5, 1aad0 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1aac4:	4632      	mov	r2, r6
   1aac6:	462b      	mov	r3, r5
}
   1aac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1aacc:	4802      	ldr	r0, [pc, #8]	; (1aad8 <clkstarted_handle.constprop.0+0x34>)
   1aace:	4718      	bx	r3
}
   1aad0:	bd70      	pop	{r4, r5, r6, pc}
   1aad2:	bf00      	nop
   1aad4:	200228e0 	.word	0x200228e0
   1aad8:	0002baa4 	.word	0x0002baa4

0001aadc <clock_event_handler>:
{
   1aadc:	b508      	push	{r3, lr}
	switch (event) {
   1aade:	2805      	cmp	r0, #5
   1aae0:	d820      	bhi.n	1ab24 <clock_event_handler+0x48>
   1aae2:	e8df f000 	tbb	[pc, r0]
   1aae6:	1103      	.short	0x1103
   1aae8:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1aaec:	4b13      	ldr	r3, [pc, #76]	; (1ab3c <clock_event_handler+0x60>)
   1aaee:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   1aaf2:	f010 0007 	ands.w	r0, r0, #7
   1aaf6:	d11f      	bne.n	1ab38 <clock_event_handler+0x5c>
}
   1aaf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1aafc:	f7ff bfd2 	b.w	1aaa4 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1ab00:	2002      	movs	r0, #2
   1ab02:	e7f9      	b.n	1aaf8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   1ab04:	2003      	movs	r0, #3
   1ab06:	e7f7      	b.n	1aaf8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ab08:	2001      	movs	r0, #1
   1ab0a:	e7f5      	b.n	1aaf8 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   1ab0c:	490c      	ldr	r1, [pc, #48]	; (1ab40 <clock_event_handler+0x64>)
   1ab0e:	f240 236e 	movw	r3, #622	; 0x26e
   1ab12:	4a0c      	ldr	r2, [pc, #48]	; (1ab44 <clock_event_handler+0x68>)
   1ab14:	480c      	ldr	r0, [pc, #48]	; (1ab48 <clock_event_handler+0x6c>)
   1ab16:	f00b fba2 	bl	2625e <assert_print>
   1ab1a:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1ab1e:	4809      	ldr	r0, [pc, #36]	; (1ab44 <clock_event_handler+0x68>)
   1ab20:	f00b fb96 	bl	26250 <assert_post_action>
   1ab24:	4906      	ldr	r1, [pc, #24]	; (1ab40 <clock_event_handler+0x64>)
   1ab26:	f240 2372 	movw	r3, #626	; 0x272
   1ab2a:	4a06      	ldr	r2, [pc, #24]	; (1ab44 <clock_event_handler+0x68>)
   1ab2c:	4806      	ldr	r0, [pc, #24]	; (1ab48 <clock_event_handler+0x6c>)
   1ab2e:	f00b fb96 	bl	2625e <assert_print>
   1ab32:	f240 2172 	movw	r1, #626	; 0x272
   1ab36:	e7f2      	b.n	1ab1e <clock_event_handler+0x42>
}
   1ab38:	bd08      	pop	{r3, pc}
   1ab3a:	bf00      	nop
   1ab3c:	200228e0 	.word	0x200228e0
   1ab40:	0003297c 	.word	0x0003297c
   1ab44:	00030f27 	.word	0x00030f27
   1ab48:	0002d095 	.word	0x0002d095

0001ab4c <generic_hfclk_start>:
{
   1ab4c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1ab4e:	f04f 0320 	mov.w	r3, #32
   1ab52:	f3ef 8111 	mrs	r1, BASEPRI
   1ab56:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab5a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1ab5e:	4a11      	ldr	r2, [pc, #68]	; (1aba4 <generic_hfclk_start+0x58>)
   1ab60:	6813      	ldr	r3, [r2, #0]
   1ab62:	f043 0002 	orr.w	r0, r3, #2
   1ab66:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1ab68:	07da      	lsls	r2, r3, #31
   1ab6a:	d408      	bmi.n	1ab7e <generic_hfclk_start+0x32>
	__asm__ volatile(
   1ab6c:	f381 8811 	msr	BASEPRI, r1
   1ab70:	f3bf 8f6f 	isb	sy
}
   1ab74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1ab78:	2001      	movs	r0, #1
   1ab7a:	f002 bf3b 	b.w	1d9f4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ab7e:	4b0a      	ldr	r3, [pc, #40]	; (1aba8 <generic_hfclk_start+0x5c>)
   1ab80:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ab84:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1ab88:	07d3      	lsls	r3, r2, #31
   1ab8a:	d5ef      	bpl.n	1ab6c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1ab8c:	4807      	ldr	r0, [pc, #28]	; (1abac <generic_hfclk_start+0x60>)
   1ab8e:	f00e fb8a 	bl	292a6 <set_on_state>
   1ab92:	f381 8811 	msr	BASEPRI, r1
   1ab96:	f3bf 8f6f 	isb	sy
}
   1ab9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1ab9e:	2000      	movs	r0, #0
   1aba0:	f7ff bf80 	b.w	1aaa4 <clkstarted_handle.constprop.0>
   1aba4:	20022990 	.word	0x20022990
   1aba8:	40005000 	.word	0x40005000
   1abac:	20022968 	.word	0x20022968

0001abb0 <api_blocking_start>:
{
   1abb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1abb2:	2200      	movs	r2, #0
   1abb4:	2301      	movs	r3, #1
   1abb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1abba:	ab04      	add	r3, sp, #16
   1abbc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1abc0:	4a09      	ldr	r2, [pc, #36]	; (1abe8 <api_blocking_start+0x38>)
   1abc2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1abc4:	f8cd d000 	str.w	sp, [sp]
   1abc8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1abcc:	f00e fbae 	bl	2932c <api_start>
	if (err < 0) {
   1abd0:	2800      	cmp	r0, #0
   1abd2:	db05      	blt.n	1abe0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1abd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1abd8:	2300      	movs	r3, #0
   1abda:	4668      	mov	r0, sp
   1abdc:	f006 f8c8 	bl	20d70 <z_impl_k_sem_take>
}
   1abe0:	b007      	add	sp, #28
   1abe2:	f85d fb04 	ldr.w	pc, [sp], #4
   1abe6:	bf00      	nop
   1abe8:	0002936b 	.word	0x0002936b

0001abec <generic_hfclk_stop>:
{
   1abec:	b510      	push	{r4, lr}
	__asm__ volatile(
   1abee:	f04f 0320 	mov.w	r3, #32
   1abf2:	f3ef 8411 	mrs	r4, BASEPRI
   1abf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1abfa:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1abfe:	4a07      	ldr	r2, [pc, #28]	; (1ac1c <generic_hfclk_stop+0x30>)
   1ac00:	6813      	ldr	r3, [r2, #0]
   1ac02:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1ac06:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1ac08:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1ac0a:	d402      	bmi.n	1ac12 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1ac0c:	2001      	movs	r0, #1
   1ac0e:	f002 ff6f 	bl	1daf0 <nrfx_clock_stop>
	__asm__ volatile(
   1ac12:	f384 8811 	msr	BASEPRI, r4
   1ac16:	f3bf 8f6f 	isb	sy
}
   1ac1a:	bd10      	pop	{r4, pc}
   1ac1c:	20022990 	.word	0x20022990

0001ac20 <z_nrf_clock_control_lf_on>:
{
   1ac20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ac24:	2201      	movs	r2, #1
   1ac26:	4606      	mov	r6, r0
   1ac28:	4941      	ldr	r1, [pc, #260]	; (1ad30 <z_nrf_clock_control_lf_on+0x110>)
   1ac2a:	e8d1 3fef 	ldaex	r3, [r1]
   1ac2e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1ac32:	2800      	cmp	r0, #0
   1ac34:	d1f9      	bne.n	1ac2a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1ac36:	b9a3      	cbnz	r3, 1ac62 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1ac38:	493e      	ldr	r1, [pc, #248]	; (1ad34 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1ac3a:	483f      	ldr	r0, [pc, #252]	; (1ad38 <z_nrf_clock_control_lf_on+0x118>)
   1ac3c:	604b      	str	r3, [r1, #4]
   1ac3e:	60cb      	str	r3, [r1, #12]
   1ac40:	608a      	str	r2, [r1, #8]
   1ac42:	f7f3 fae3 	bl	e20c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1ac46:	2800      	cmp	r0, #0
   1ac48:	da0b      	bge.n	1ac62 <z_nrf_clock_control_lf_on+0x42>
   1ac4a:	493c      	ldr	r1, [pc, #240]	; (1ad3c <z_nrf_clock_control_lf_on+0x11c>)
   1ac4c:	f44f 730c 	mov.w	r3, #560	; 0x230
   1ac50:	4a3b      	ldr	r2, [pc, #236]	; (1ad40 <z_nrf_clock_control_lf_on+0x120>)
   1ac52:	483c      	ldr	r0, [pc, #240]	; (1ad44 <z_nrf_clock_control_lf_on+0x124>)
   1ac54:	f00b fb03 	bl	2625e <assert_print>
   1ac58:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1ac5c:	4838      	ldr	r0, [pc, #224]	; (1ad40 <z_nrf_clock_control_lf_on+0x120>)
   1ac5e:	f00b faf7 	bl	26250 <assert_post_action>
	switch (start_mode) {
   1ac62:	b35e      	cbz	r6, 1acbc <z_nrf_clock_control_lf_on+0x9c>
   1ac64:	1e73      	subs	r3, r6, #1
   1ac66:	2b01      	cmp	r3, #1
   1ac68:	d858      	bhi.n	1ad1c <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1ac6a:	2e01      	cmp	r6, #1
   1ac6c:	d106      	bne.n	1ac7c <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1ac6e:	4b36      	ldr	r3, [pc, #216]	; (1ad48 <z_nrf_clock_control_lf_on+0x128>)
   1ac70:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1ac74:	f003 0303 	and.w	r3, r3, #3
   1ac78:	2b02      	cmp	r3, #2
   1ac7a:	d01f      	beq.n	1acbc <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ac7c:	f00f fe50 	bl	2a920 <k_is_in_isr>
   1ac80:	4605      	mov	r5, r0
   1ac82:	b9e8      	cbnz	r0, 1acc0 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   1ac84:	4b31      	ldr	r3, [pc, #196]	; (1ad4c <z_nrf_clock_control_lf_on+0x12c>)
   1ac86:	781b      	ldrb	r3, [r3, #0]
   1ac88:	b1d3      	cbz	r3, 1acc0 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1ac8a:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1ac8c:	4607      	mov	r7, r0
   1ac8e:	4b2e      	ldr	r3, [pc, #184]	; (1ad48 <z_nrf_clock_control_lf_on+0x128>)
   1ac90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ac94:	4c2c      	ldr	r4, [pc, #176]	; (1ad48 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ac96:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1ad50 <z_nrf_clock_control_lf_on+0x130>
   1ac9a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ac9e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1aca2:	03d2      	lsls	r2, r2, #15
   1aca4:	d516      	bpl.n	1acd4 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1aca6:	f003 0303 	and.w	r3, r3, #3
   1acaa:	2b02      	cmp	r3, #2
   1acac:	d001      	beq.n	1acb2 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1acae:	2e01      	cmp	r6, #1
   1acb0:	d110      	bne.n	1acd4 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1acb2:	b375      	cbz	r5, 1ad12 <z_nrf_clock_control_lf_on+0xf2>
   1acb4:	f387 8811 	msr	BASEPRI, r7
   1acb8:	f3bf 8f6f 	isb	sy
}
   1acbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1acc0:	f04f 0320 	mov.w	r3, #32
   1acc4:	f3ef 8711 	mrs	r7, BASEPRI
   1acc8:	f383 8812 	msr	BASEPRI_MAX, r3
   1accc:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1acd0:	2501      	movs	r5, #1
   1acd2:	e7df      	b.n	1ac94 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1acd4:	b1c5      	cbz	r5, 1ad08 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1acd6:	4638      	mov	r0, r7
   1acd8:	f7f6 f924 	bl	10f24 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1acdc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1ace0:	b2db      	uxtb	r3, r3
   1ace2:	2b01      	cmp	r3, #1
   1ace4:	d1d9      	bne.n	1ac9a <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ace6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1acea:	2a00      	cmp	r2, #0
   1acec:	d0d5      	beq.n	1ac9a <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1acee:	2200      	movs	r2, #0
   1acf0:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1acf4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1acf8:	2202      	movs	r2, #2
   1acfa:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1acfe:	2220      	movs	r2, #32
   1ad00:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ad04:	60a3      	str	r3, [r4, #8]
}
   1ad06:	e7c8      	b.n	1ac9a <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   1ad08:	2100      	movs	r1, #0
   1ad0a:	2021      	movs	r0, #33	; 0x21
   1ad0c:	f007 fee0 	bl	22ad0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ad10:	e7e4      	b.n	1acdc <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1ad12:	2202      	movs	r2, #2
   1ad14:	4b0c      	ldr	r3, [pc, #48]	; (1ad48 <z_nrf_clock_control_lf_on+0x128>)
   1ad16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1ad1a:	e7cf      	b.n	1acbc <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1ad1c:	490d      	ldr	r1, [pc, #52]	; (1ad54 <z_nrf_clock_control_lf_on+0x134>)
   1ad1e:	f240 2342 	movw	r3, #578	; 0x242
   1ad22:	4a07      	ldr	r2, [pc, #28]	; (1ad40 <z_nrf_clock_control_lf_on+0x120>)
   1ad24:	4807      	ldr	r0, [pc, #28]	; (1ad44 <z_nrf_clock_control_lf_on+0x124>)
   1ad26:	f00b fa9a 	bl	2625e <assert_print>
   1ad2a:	f240 2142 	movw	r1, #578	; 0x242
   1ad2e:	e795      	b.n	1ac5c <z_nrf_clock_control_lf_on+0x3c>
   1ad30:	200228dc 	.word	0x200228dc
   1ad34:	200228cc 	.word	0x200228cc
   1ad38:	20022900 	.word	0x20022900
   1ad3c:	0002e34f 	.word	0x0002e34f
   1ad40:	00030f27 	.word	0x00030f27
   1ad44:	0002d095 	.word	0x0002d095
   1ad48:	40005000 	.word	0x40005000
   1ad4c:	20023b0a 	.word	0x20023b0a
   1ad50:	e000e100 	.word	0xe000e100
   1ad54:	0003297c 	.word	0x0003297c

0001ad58 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1ad58:	b508      	push	{r3, lr}
   1ad5a:	4807      	ldr	r0, [pc, #28]	; (1ad78 <uart_console_init+0x20>)
   1ad5c:	f00f fda3 	bl	2a8a6 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1ad60:	b138      	cbz	r0, 1ad72 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1ad62:	4806      	ldr	r0, [pc, #24]	; (1ad7c <uart_console_init+0x24>)
   1ad64:	f7f7 f866 	bl	11e34 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1ad68:	4804      	ldr	r0, [pc, #16]	; (1ad7c <uart_console_init+0x24>)
   1ad6a:	f7f2 fecd 	bl	db08 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1ad6e:	2000      	movs	r0, #0
}
   1ad70:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1ad72:	f06f 0012 	mvn.w	r0, #18
   1ad76:	e7fb      	b.n	1ad70 <uart_console_init+0x18>
   1ad78:	0002bb34 	.word	0x0002bb34
   1ad7c:	0001ad81 	.word	0x0001ad81

0001ad80 <console_out>:
	if ('\n' == c) {
   1ad80:	280a      	cmp	r0, #10
{
   1ad82:	b538      	push	{r3, r4, r5, lr}
   1ad84:	4604      	mov	r4, r0
   1ad86:	4d07      	ldr	r5, [pc, #28]	; (1ada4 <console_out+0x24>)
	if ('\n' == c) {
   1ad88:	d104      	bne.n	1ad94 <console_out+0x14>
	api->poll_out(dev, out_char);
   1ad8a:	68ab      	ldr	r3, [r5, #8]
   1ad8c:	210d      	movs	r1, #13
   1ad8e:	4628      	mov	r0, r5
   1ad90:	69db      	ldr	r3, [r3, #28]
   1ad92:	4798      	blx	r3
   1ad94:	68ab      	ldr	r3, [r5, #8]
   1ad96:	4803      	ldr	r0, [pc, #12]	; (1ada4 <console_out+0x24>)
   1ad98:	69db      	ldr	r3, [r3, #28]
   1ad9a:	b2e1      	uxtb	r1, r4
   1ad9c:	4798      	blx	r3
}
   1ad9e:	4620      	mov	r0, r4
   1ada0:	bd38      	pop	{r3, r4, r5, pc}
   1ada2:	bf00      	nop
   1ada4:	0002bb34 	.word	0x0002bb34

0001ada8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1ada8:	b510      	push	{r4, lr}
	return port->data;
   1adaa:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1adac:	b961      	cbnz	r1, 1adc8 <gpio_nrfx_manage_callback+0x20>
   1adae:	4920      	ldr	r1, [pc, #128]	; (1ae30 <gpio_nrfx_manage_callback+0x88>)
   1adb0:	232a      	movs	r3, #42	; 0x2a
   1adb2:	4a20      	ldr	r2, [pc, #128]	; (1ae34 <gpio_nrfx_manage_callback+0x8c>)
   1adb4:	4820      	ldr	r0, [pc, #128]	; (1ae38 <gpio_nrfx_manage_callback+0x90>)
   1adb6:	f00b fa52 	bl	2625e <assert_print>
   1adba:	4820      	ldr	r0, [pc, #128]	; (1ae3c <gpio_nrfx_manage_callback+0x94>)
   1adbc:	f00b fa4f 	bl	2625e <assert_print>
   1adc0:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1adc2:	481c      	ldr	r0, [pc, #112]	; (1ae34 <gpio_nrfx_manage_callback+0x8c>)
   1adc4:	f00b fa44 	bl	26250 <assert_post_action>
   1adc8:	6848      	ldr	r0, [r1, #4]
   1adca:	b950      	cbnz	r0, 1ade2 <gpio_nrfx_manage_callback+0x3a>
   1adcc:	491c      	ldr	r1, [pc, #112]	; (1ae40 <gpio_nrfx_manage_callback+0x98>)
   1adce:	232b      	movs	r3, #43	; 0x2b
   1add0:	4a18      	ldr	r2, [pc, #96]	; (1ae34 <gpio_nrfx_manage_callback+0x8c>)
   1add2:	4819      	ldr	r0, [pc, #100]	; (1ae38 <gpio_nrfx_manage_callback+0x90>)
   1add4:	f00b fa43 	bl	2625e <assert_print>
   1add8:	481a      	ldr	r0, [pc, #104]	; (1ae44 <gpio_nrfx_manage_callback+0x9c>)
   1adda:	f00b fa40 	bl	2625e <assert_print>
   1adde:	212b      	movs	r1, #43	; 0x2b
   1ade0:	e7ef      	b.n	1adc2 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1ade2:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1ade4:	b1f8      	cbz	r0, 1ae26 <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ade6:	4288      	cmp	r0, r1
   1ade8:	d119      	bne.n	1ae1e <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1adea:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1adec:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1adee:	42a1      	cmp	r1, r4
	list->head = node;
   1adf0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1adf2:	d100      	bne.n	1adf6 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1adf4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1adf6:	2000      	movs	r0, #0
   1adf8:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1adfa:	b12a      	cbz	r2, 1ae08 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1adfc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1adfe:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ae00:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ae02:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ae04:	b902      	cbnz	r2, 1ae08 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1ae06:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1ae08:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ae0a:	e010      	b.n	1ae2e <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ae0c:	4281      	cmp	r1, r0
   1ae0e:	d106      	bne.n	1ae1e <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1ae10:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1ae12:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ae14:	6898      	ldr	r0, [r3, #8]
   1ae16:	4281      	cmp	r1, r0
   1ae18:	d1ed      	bne.n	1adf6 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1ae1a:	609c      	str	r4, [r3, #8]
}
   1ae1c:	e7eb      	b.n	1adf6 <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1ae1e:	4604      	mov	r4, r0
   1ae20:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ae22:	2800      	cmp	r0, #0
   1ae24:	d1f2      	bne.n	1ae0c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1ae26:	2a00      	cmp	r2, #0
   1ae28:	d1e8      	bne.n	1adfc <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1ae2a:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1ae2e:	bd10      	pop	{r4, pc}
   1ae30:	0002d7d4 	.word	0x0002d7d4
   1ae34:	00030fc2 	.word	0x00030fc2
   1ae38:	0002d095 	.word	0x0002d095
   1ae3c:	00030ffe 	.word	0x00030ffe
   1ae40:	0003100d 	.word	0x0003100d
   1ae44:	0003101f 	.word	0x0003101f

0001ae48 <gpio_nrfx_pin_interrupt_configure>:
{
   1ae48:	b530      	push	{r4, r5, lr}
	return port->config;
   1ae4a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ae4c:	f001 041f 	and.w	r4, r1, #31
   1ae50:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1ae52:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1ae56:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ae58:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1ae5c:	d105      	bne.n	1ae6a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1ae5e:	4620      	mov	r0, r4
   1ae60:	f003 f990 	bl	1e184 <nrfx_gpiote_trigger_disable>
		return 0;
   1ae64:	2000      	movs	r0, #0
}
   1ae66:	b005      	add	sp, #20
   1ae68:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ae6a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1ae6c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ae70:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1ae74:	d114      	bne.n	1aea0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1ae76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ae7a:	bf0c      	ite	eq
   1ae7c:	2304      	moveq	r3, #4
   1ae7e:	2305      	movne	r3, #5
   1ae80:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ae84:	2300      	movs	r3, #0
   1ae86:	4620      	mov	r0, r4
   1ae88:	4619      	mov	r1, r3
   1ae8a:	aa02      	add	r2, sp, #8
   1ae8c:	f002 ff84 	bl	1dd98 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1ae90:	4b2a      	ldr	r3, [pc, #168]	; (1af3c <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1ae92:	4298      	cmp	r0, r3
   1ae94:	d14f      	bne.n	1af36 <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1ae96:	2101      	movs	r1, #1
   1ae98:	4620      	mov	r0, r4
   1ae9a:	f003 f909 	bl	1e0b0 <nrfx_gpiote_trigger_enable>
	return 0;
   1ae9e:	e7e1      	b.n	1ae64 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1aea0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1aea4:	d024      	beq.n	1aef0 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1aea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1aeaa:	bf14      	ite	ne
   1aeac:	2301      	movne	r3, #1
   1aeae:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1aeb0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1aeb4:	6883      	ldr	r3, [r0, #8]
   1aeb6:	40cb      	lsrs	r3, r1
   1aeb8:	07d8      	lsls	r0, r3, #31
   1aeba:	d4e3      	bmi.n	1ae84 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1aebc:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1aec0:	d1e0      	bne.n	1ae84 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1aec2:	0962      	lsrs	r2, r4, #5
   1aec4:	f004 031f 	and.w	r3, r4, #31
   1aec8:	d014      	beq.n	1aef4 <gpio_nrfx_pin_interrupt_configure+0xac>
   1aeca:	2a01      	cmp	r2, #1
   1aecc:	d104      	bne.n	1aed8 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1aece:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aed2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1aed4:	07d1      	lsls	r1, r2, #31
   1aed6:	d414      	bmi.n	1af02 <gpio_nrfx_pin_interrupt_configure+0xba>
   1aed8:	4919      	ldr	r1, [pc, #100]	; (1af40 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1aeda:	481a      	ldr	r0, [pc, #104]	; (1af44 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1aedc:	f240 2347 	movw	r3, #583	; 0x247
   1aee0:	4a19      	ldr	r2, [pc, #100]	; (1af48 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1aee2:	f00b f9bc 	bl	2625e <assert_print>
   1aee6:	f240 2147 	movw	r1, #583	; 0x247
   1aeea:	4817      	ldr	r0, [pc, #92]	; (1af48 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1aeec:	f00b f9b0 	bl	26250 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1aef0:	2303      	movs	r3, #3
   1aef2:	e7dd      	b.n	1aeb0 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1aef4:	f04f 32ff 	mov.w	r2, #4294967295
   1aef8:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1aefa:	07d2      	lsls	r2, r2, #31
   1aefc:	d5ec      	bpl.n	1aed8 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1aefe:	4a13      	ldr	r2, [pc, #76]	; (1af4c <gpio_nrfx_pin_interrupt_configure+0x104>)
   1af00:	e000      	b.n	1af04 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1af02:	4a13      	ldr	r2, [pc, #76]	; (1af50 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1af04:	3380      	adds	r3, #128	; 0x80
   1af06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1af0a:	07db      	lsls	r3, r3, #31
   1af0c:	d4ba      	bmi.n	1ae84 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1af0e:	f10d 0507 	add.w	r5, sp, #7
   1af12:	4629      	mov	r1, r5
   1af14:	4620      	mov	r0, r4
   1af16:	f003 f865 	bl	1dfe4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1af1a:	4b0e      	ldr	r3, [pc, #56]	; (1af54 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1af1c:	4298      	cmp	r0, r3
   1af1e:	d001      	beq.n	1af24 <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   1af20:	9503      	str	r5, [sp, #12]
   1af22:	e7af      	b.n	1ae84 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1af24:	4628      	mov	r0, r5
   1af26:	f003 f8bd 	bl	1e0a4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1af2a:	4b04      	ldr	r3, [pc, #16]	; (1af3c <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1af2c:	4298      	cmp	r0, r3
   1af2e:	d0f7      	beq.n	1af20 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1af30:	f06f 000b 	mvn.w	r0, #11
   1af34:	e797      	b.n	1ae66 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1af36:	f06f 0015 	mvn.w	r0, #21
   1af3a:	e794      	b.n	1ae66 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1af3c:	0bad0000 	.word	0x0bad0000
   1af40:	00031069 	.word	0x00031069
   1af44:	0002d095 	.word	0x0002d095
   1af48:	00031036 	.word	0x00031036
   1af4c:	40842500 	.word	0x40842500
   1af50:	40842800 	.word	0x40842800
   1af54:	0bad0004 	.word	0x0bad0004

0001af58 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1af58:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1af5a:	f003 f893 	bl	1e084 <nrfx_gpiote_is_init>
   1af5e:	4604      	mov	r4, r0
   1af60:	b968      	cbnz	r0, 1af7e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1af62:	f003 f867 	bl	1e034 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1af66:	4b08      	ldr	r3, [pc, #32]	; (1af88 <gpio_nrfx_init+0x30>)
   1af68:	4298      	cmp	r0, r3
   1af6a:	d10a      	bne.n	1af82 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1af6c:	4621      	mov	r1, r4
   1af6e:	4807      	ldr	r0, [pc, #28]	; (1af8c <gpio_nrfx_init+0x34>)
   1af70:	f003 f832 	bl	1dfd8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1af74:	4622      	mov	r2, r4
   1af76:	2105      	movs	r1, #5
   1af78:	202f      	movs	r0, #47	; 0x2f
   1af7a:	f7f6 f85d 	bl	11038 <z_arm_irq_priority_set>
		return 0;
   1af7e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1af80:	bd10      	pop	{r4, pc}
		return -EIO;
   1af82:	f06f 0004 	mvn.w	r0, #4
   1af86:	e7fb      	b.n	1af80 <gpio_nrfx_init+0x28>
   1af88:	0bad0000 	.word	0x0bad0000
   1af8c:	0001af91 	.word	0x0001af91

0001af90 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1af90:	0942      	lsrs	r2, r0, #5
{
   1af92:	4603      	mov	r3, r0
   1af94:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1af96:	d002      	beq.n	1af9e <nrfx_gpio_handler+0xe>
   1af98:	2a01      	cmp	r2, #1
   1af9a:	d01e      	beq.n	1afda <nrfx_gpio_handler+0x4a>
}
   1af9c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1af9e:	4e14      	ldr	r6, [pc, #80]	; (1aff0 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1afa0:	6932      	ldr	r2, [r6, #16]
   1afa2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1afa4:	2900      	cmp	r1, #0
   1afa6:	d0f9      	beq.n	1af9c <nrfx_gpio_handler+0xc>
   1afa8:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1afaa:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   1afae:	680c      	ldr	r4, [r1, #0]
   1afb0:	409d      	lsls	r5, r3
   1afb2:	2900      	cmp	r1, #0
   1afb4:	d0f2      	beq.n	1af9c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1afb6:	688a      	ldr	r2, [r1, #8]
   1afb8:	402a      	ands	r2, r5
   1afba:	d012      	beq.n	1afe2 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1afbc:	684b      	ldr	r3, [r1, #4]
   1afbe:	b973      	cbnz	r3, 1afde <nrfx_gpio_handler+0x4e>
   1afc0:	490c      	ldr	r1, [pc, #48]	; (1aff4 <nrfx_gpio_handler+0x64>)
   1afc2:	234d      	movs	r3, #77	; 0x4d
   1afc4:	4a0c      	ldr	r2, [pc, #48]	; (1aff8 <nrfx_gpio_handler+0x68>)
   1afc6:	480d      	ldr	r0, [pc, #52]	; (1affc <nrfx_gpio_handler+0x6c>)
   1afc8:	f00b f949 	bl	2625e <assert_print>
   1afcc:	480c      	ldr	r0, [pc, #48]	; (1b000 <nrfx_gpio_handler+0x70>)
   1afce:	f00b f946 	bl	2625e <assert_print>
   1afd2:	214d      	movs	r1, #77	; 0x4d
   1afd4:	4808      	ldr	r0, [pc, #32]	; (1aff8 <nrfx_gpio_handler+0x68>)
   1afd6:	f00b f93b 	bl	26250 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1afda:	4e0a      	ldr	r6, [pc, #40]	; (1b004 <nrfx_gpio_handler+0x74>)
   1afdc:	e7e0      	b.n	1afa0 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1afde:	4630      	mov	r0, r6
   1afe0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1afe2:	b11c      	cbz	r4, 1afec <nrfx_gpio_handler+0x5c>
   1afe4:	6823      	ldr	r3, [r4, #0]
   1afe6:	4621      	mov	r1, r4
   1afe8:	461c      	mov	r4, r3
   1afea:	e7e2      	b.n	1afb2 <nrfx_gpio_handler+0x22>
   1afec:	4623      	mov	r3, r4
   1afee:	e7fa      	b.n	1afe6 <nrfx_gpio_handler+0x56>
   1aff0:	0002bad4 	.word	0x0002bad4
   1aff4:	00031d98 	.word	0x00031d98
   1aff8:	00030fc2 	.word	0x00030fc2
   1affc:	0002d095 	.word	0x0002d095
   1b000:	0003101f 	.word	0x0003101f
   1b004:	0002babc 	.word	0x0002babc

0001b008 <gpio_nrfx_pin_configure>:
{
   1b008:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1b00c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b010:	f001 051f 	and.w	r5, r1, #31
   1b014:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1b018:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b01a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1b01e:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b020:	4628      	mov	r0, r5
   1b022:	f10d 0103 	add.w	r1, sp, #3
   1b026:	f002 ffdd 	bl	1dfe4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b02a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b02e:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b030:	d115      	bne.n	1b05e <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1b032:	4628      	mov	r0, r5
   1b034:	f003 f8d0 	bl	1e1d8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1b038:	4b48      	ldr	r3, [pc, #288]	; (1b15c <gpio_nrfx_pin_configure+0x154>)
   1b03a:	429e      	cmp	r6, r3
   1b03c:	d170      	bne.n	1b120 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1b03e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b042:	f003 f829 	bl	1e098 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1b046:	42b0      	cmp	r0, r6
   1b048:	d06a      	beq.n	1b120 <gpio_nrfx_pin_configure+0x118>
   1b04a:	4945      	ldr	r1, [pc, #276]	; (1b160 <gpio_nrfx_pin_configure+0x158>)
   1b04c:	236a      	movs	r3, #106	; 0x6a
   1b04e:	4a45      	ldr	r2, [pc, #276]	; (1b164 <gpio_nrfx_pin_configure+0x15c>)
   1b050:	4845      	ldr	r0, [pc, #276]	; (1b168 <gpio_nrfx_pin_configure+0x160>)
   1b052:	f00b f904 	bl	2625e <assert_print>
   1b056:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1b058:	4842      	ldr	r0, [pc, #264]	; (1b164 <gpio_nrfx_pin_configure+0x15c>)
   1b05a:	f00b f8f9 	bl	26250 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b05e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b060:	4628      	mov	r0, r5
   1b062:	4619      	mov	r1, r3
   1b064:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b066:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b06a:	f002 fe95 	bl	1dd98 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b06e:	4b3b      	ldr	r3, [pc, #236]	; (1b15c <gpio_nrfx_pin_configure+0x154>)
   1b070:	4298      	cmp	r0, r3
   1b072:	d004      	beq.n	1b07e <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1b074:	f06f 0015 	mvn.w	r0, #21
}
   1b078:	b004      	add	sp, #16
   1b07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1b07e:	4286      	cmp	r6, r0
   1b080:	d10d      	bne.n	1b09e <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1b082:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b086:	f003 f807 	bl	1e098 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1b08a:	42b0      	cmp	r0, r6
   1b08c:	d007      	beq.n	1b09e <gpio_nrfx_pin_configure+0x96>
   1b08e:	4934      	ldr	r1, [pc, #208]	; (1b160 <gpio_nrfx_pin_configure+0x158>)
   1b090:	237c      	movs	r3, #124	; 0x7c
   1b092:	4a34      	ldr	r2, [pc, #208]	; (1b164 <gpio_nrfx_pin_configure+0x15c>)
   1b094:	4834      	ldr	r0, [pc, #208]	; (1b168 <gpio_nrfx_pin_configure+0x160>)
   1b096:	f00b f8e2 	bl	2625e <assert_print>
   1b09a:	217c      	movs	r1, #124	; 0x7c
   1b09c:	e7dc      	b.n	1b058 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1b09e:	03a6      	lsls	r6, r4, #14
   1b0a0:	d54c      	bpl.n	1b13c <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b0a2:	f240 3306 	movw	r3, #774	; 0x306
   1b0a6:	4023      	ands	r3, r4
   1b0a8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1b0ac:	d019      	beq.n	1b0e2 <gpio_nrfx_pin_configure+0xda>
   1b0ae:	d80c      	bhi.n	1b0ca <gpio_nrfx_pin_configure+0xc2>
   1b0b0:	2b06      	cmp	r3, #6
   1b0b2:	d017      	beq.n	1b0e4 <gpio_nrfx_pin_configure+0xdc>
   1b0b4:	d804      	bhi.n	1b0c0 <gpio_nrfx_pin_configure+0xb8>
   1b0b6:	b1ab      	cbz	r3, 1b0e4 <gpio_nrfx_pin_configure+0xdc>
   1b0b8:	2b02      	cmp	r3, #2
   1b0ba:	d1db      	bne.n	1b074 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1b0bc:	2304      	movs	r3, #4
   1b0be:	e011      	b.n	1b0e4 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b0c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1b0c4:	d1d6      	bne.n	1b074 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1b0c6:	2301      	movs	r3, #1
   1b0c8:	e00c      	b.n	1b0e4 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b0ca:	f240 2202 	movw	r2, #514	; 0x202
   1b0ce:	4293      	cmp	r3, r2
   1b0d0:	d028      	beq.n	1b124 <gpio_nrfx_pin_configure+0x11c>
   1b0d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1b0d6:	d027      	beq.n	1b128 <gpio_nrfx_pin_configure+0x120>
   1b0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1b0dc:	d1ca      	bne.n	1b074 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1b0de:	2302      	movs	r3, #2
   1b0e0:	e000      	b.n	1b0e4 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1b0e2:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1b0e4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1b0e8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1b0ec:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1b0f0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1b0f2:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1b0f6:	bf4c      	ite	mi
   1b0f8:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1b0fa:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b0fe:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1b100:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b104:	d512      	bpl.n	1b12c <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1b106:	2301      	movs	r3, #1
   1b108:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1b10c:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1b10e:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1b110:	2200      	movs	r2, #0
   1b112:	4628      	mov	r0, r5
   1b114:	a901      	add	r1, sp, #4
   1b116:	f002 fee7 	bl	1dee8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b11a:	4b10      	ldr	r3, [pc, #64]	; (1b15c <gpio_nrfx_pin_configure+0x154>)
   1b11c:	4298      	cmp	r0, r3
   1b11e:	d1a9      	bne.n	1b074 <gpio_nrfx_pin_configure+0x6c>
   1b120:	2000      	movs	r0, #0
   1b122:	e7a9      	b.n	1b078 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1b124:	2305      	movs	r3, #5
   1b126:	e7dd      	b.n	1b0e4 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b128:	2303      	movs	r3, #3
   1b12a:	e7db      	b.n	1b0e4 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1b12c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1b12e:	bf41      	itttt	mi
   1b130:	2301      	movmi	r3, #1
   1b132:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1b136:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1b138:	60d3      	strmi	r3, [r2, #12]
}
   1b13a:	e7e9      	b.n	1b110 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1b13c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b13e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1b142:	bf4c      	ite	mi
   1b144:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1b146:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b14a:	461a      	mov	r2, r3
   1b14c:	4628      	mov	r0, r5
   1b14e:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1b150:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b154:	f002 fe20 	bl	1dd98 <nrfx_gpiote_input_configure>
   1b158:	e7df      	b.n	1b11a <gpio_nrfx_pin_configure+0x112>
   1b15a:	bf00      	nop
   1b15c:	0bad0000 	.word	0x0bad0000
   1b160:	0002e0b8 	.word	0x0002e0b8
   1b164:	0003108c 	.word	0x0003108c
   1b168:	0002d095 	.word	0x0002d095

0001b16c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1b16c:	4603      	mov	r3, r0
   1b16e:	b510      	push	{r4, lr}
   1b170:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b172:	7919      	ldrb	r1, [r3, #4]
   1b174:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1b176:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b178:	fa03 f101 	lsl.w	r1, r3, r1
   1b17c:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1b17e:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b180:	681b      	ldr	r3, [r3, #0]
   1b182:	4219      	tst	r1, r3
   1b184:	d10e      	bne.n	1b1a4 <gpio_pin_set_dt.isra.0+0x38>
   1b186:	490e      	ldr	r1, [pc, #56]	; (1b1c0 <gpio_pin_set_dt.isra.0+0x54>)
   1b188:	f240 533d 	movw	r3, #1341	; 0x53d
   1b18c:	4a0d      	ldr	r2, [pc, #52]	; (1b1c4 <gpio_pin_set_dt.isra.0+0x58>)
   1b18e:	480e      	ldr	r0, [pc, #56]	; (1b1c8 <gpio_pin_set_dt.isra.0+0x5c>)
   1b190:	f00b f865 	bl	2625e <assert_print>
   1b194:	480d      	ldr	r0, [pc, #52]	; (1b1cc <gpio_pin_set_dt.isra.0+0x60>)
   1b196:	f00b f862 	bl	2625e <assert_print>
   1b19a:	f240 513d 	movw	r1, #1341	; 0x53d
   1b19e:	4809      	ldr	r0, [pc, #36]	; (1b1c4 <gpio_pin_set_dt.isra.0+0x58>)
   1b1a0:	f00b f856 	bl	26250 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1b1a4:	6823      	ldr	r3, [r4, #0]
   1b1a6:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1b1a8:	bf18      	it	ne
   1b1aa:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1b1ae:	b122      	cbz	r2, 1b1ba <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   1b1b0:	6883      	ldr	r3, [r0, #8]
   1b1b2:	68db      	ldr	r3, [r3, #12]
}
   1b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1b1b8:	4718      	bx	r3
   1b1ba:	6883      	ldr	r3, [r0, #8]
   1b1bc:	691b      	ldr	r3, [r3, #16]
   1b1be:	e7f9      	b.n	1b1b4 <gpio_pin_set_dt.isra.0+0x48>
   1b1c0:	0002d057 	.word	0x0002d057
   1b1c4:	0002d026 	.word	0x0002d026
   1b1c8:	0002d095 	.word	0x0002d095
   1b1cc:	0002d0b2 	.word	0x0002d0b2

0001b1d0 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1b1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   1b1d4:	6844      	ldr	r4, [r0, #4]
{
   1b1d6:	b088      	sub	sp, #32
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1b1d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   1b1da:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1b1dc:	2100      	movs	r1, #0
   1b1de:	4630      	mov	r0, r6
   1b1e0:	aa07      	add	r2, sp, #28
   1b1e2:	f00e fc54 	bl	29a8e <pinctrl_lookup_state>
	if (ret < 0) {
   1b1e6:	2800      	cmp	r0, #0
   1b1e8:	db2a      	blt.n	1b240 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1b1ea:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1b1ec:	6832      	ldr	r2, [r6, #0]
   1b1ee:	7919      	ldrb	r1, [r3, #4]
   1b1f0:	6818      	ldr	r0, [r3, #0]
   1b1f2:	f00e fc5f 	bl	29ab4 <pinctrl_configure_pins>
	if (err < 0) {
   1b1f6:	2800      	cmp	r0, #0
   1b1f8:	db22      	blt.n	1b240 <spi_nrfx_init+0x70>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b1fa:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1b1fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1fe:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1b200:	68ac      	ldr	r4, [r5, #8]
   1b202:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1b206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1b20a:	429c      	cmp	r4, r3
   1b20c:	d304      	bcc.n	1b218 <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1b20e:	4628      	mov	r0, r5
   1b210:	f00e f91f 	bl	29452 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1b214:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1b216:	e013      	b.n	1b240 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   1b218:	6820      	ldr	r0, [r4, #0]
   1b21a:	f00f fb44 	bl	2a8a6 <z_device_is_ready>
   1b21e:	4603      	mov	r3, r0
   1b220:	b988      	cbnz	r0, 1b246 <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1b222:	7922      	ldrb	r2, [r4, #4]
   1b224:	4932      	ldr	r1, [pc, #200]	; (1b2f0 <spi_nrfx_init+0x120>)
   1b226:	9204      	str	r2, [sp, #16]
   1b228:	6822      	ldr	r2, [r4, #0]
   1b22a:	6812      	ldr	r2, [r2, #0]
   1b22c:	9000      	str	r0, [sp, #0]
   1b22e:	9203      	str	r2, [sp, #12]
   1b230:	4a30      	ldr	r2, [pc, #192]	; (1b2f4 <spi_nrfx_init+0x124>)
   1b232:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1b236:	2201      	movs	r2, #1
   1b238:	f00e f8d9 	bl	293ee <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   1b23c:	f06f 0012 	mvn.w	r0, #18
#endif
}
   1b240:	b008      	add	sp, #32
   1b242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   1b246:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1b248:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1b24a:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1b24c:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1b250:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1b252:	f8d0 e010 	ldr.w	lr, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1b256:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1b25a:	d10e      	bne.n	1b27a <spi_nrfx_init+0xaa>
   1b25c:	4926      	ldr	r1, [pc, #152]	; (1b2f8 <spi_nrfx_init+0x128>)
   1b25e:	f240 23b7 	movw	r3, #695	; 0x2b7
   1b262:	4a26      	ldr	r2, [pc, #152]	; (1b2fc <spi_nrfx_init+0x12c>)
   1b264:	4826      	ldr	r0, [pc, #152]	; (1b300 <spi_nrfx_init+0x130>)
   1b266:	f00a fffa 	bl	2625e <assert_print>
   1b26a:	4826      	ldr	r0, [pc, #152]	; (1b304 <spi_nrfx_init+0x134>)
   1b26c:	f00a fff7 	bl	2625e <assert_print>
   1b270:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1b274:	4821      	ldr	r0, [pc, #132]	; (1b2fc <spi_nrfx_init+0x12c>)
   1b276:	f00a ffeb 	bl	26250 <assert_post_action>
   1b27a:	f003 0206 	and.w	r2, r3, #6
   1b27e:	2a04      	cmp	r2, #4
   1b280:	d109      	bne.n	1b296 <spi_nrfx_init+0xc6>
   1b282:	4921      	ldr	r1, [pc, #132]	; (1b308 <spi_nrfx_init+0x138>)
   1b284:	f240 23bf 	movw	r3, #703	; 0x2bf
   1b288:	4a1c      	ldr	r2, [pc, #112]	; (1b2fc <spi_nrfx_init+0x12c>)
   1b28a:	481d      	ldr	r0, [pc, #116]	; (1b300 <spi_nrfx_init+0x130>)
   1b28c:	f00a ffe7 	bl	2625e <assert_print>
   1b290:	f240 21bf 	movw	r1, #703	; 0x2bf
   1b294:	e7ee      	b.n	1b274 <spi_nrfx_init+0xa4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b296:	683f      	ldr	r7, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1b298:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b29a:	fa06 fc01 	lsl.w	ip, r6, r1
	return gpio_pin_configure(spec->port,
   1b29e:	bf54      	ite	pl
   1b2a0:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1b2a4:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b2a8:	ea1c 0f07 	tst.w	ip, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1b2ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b2b0:	d10c      	bne.n	1b2cc <spi_nrfx_init+0xfc>
   1b2b2:	4916      	ldr	r1, [pc, #88]	; (1b30c <spi_nrfx_init+0x13c>)
   1b2b4:	f240 23d2 	movw	r3, #722	; 0x2d2
   1b2b8:	4a10      	ldr	r2, [pc, #64]	; (1b2fc <spi_nrfx_init+0x12c>)
   1b2ba:	4811      	ldr	r0, [pc, #68]	; (1b300 <spi_nrfx_init+0x130>)
   1b2bc:	f00a ffcf 	bl	2625e <assert_print>
   1b2c0:	4813      	ldr	r0, [pc, #76]	; (1b310 <spi_nrfx_init+0x140>)
   1b2c2:	f00a ffcc 	bl	2625e <assert_print>
   1b2c6:	f240 21d2 	movw	r1, #722	; 0x2d2
   1b2ca:	e7d3      	b.n	1b274 <spi_nrfx_init+0xa4>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b2cc:	f8de 7000 	ldr.w	r7, [lr]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1b2d0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b2d2:	bf4c      	ite	mi
   1b2d4:	ea4c 0707 	orrmi.w	r7, ip, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1b2d8:	ea27 070c 	bicpl.w	r7, r7, ip
   1b2dc:	f8ce 7000 	str.w	r7, [lr]
	return api->pin_configure(port, pin, flags);
   1b2e0:	f8d8 3000 	ldr.w	r3, [r8]
   1b2e4:	4798      	blx	r3
		if (ret < 0) {
   1b2e6:	2800      	cmp	r0, #0
   1b2e8:	dbaa      	blt.n	1b240 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1b2ea:	3408      	adds	r4, #8
   1b2ec:	e789      	b.n	1b202 <spi_nrfx_init+0x32>
   1b2ee:	bf00      	nop
   1b2f0:	0002c174 	.word	0x0002c174
   1b2f4:	000310d0 	.word	0x000310d0
   1b2f8:	0002d378 	.word	0x0002d378
   1b2fc:	0002d026 	.word	0x0002d026
   1b300:	0002d095 	.word	0x0002d095
   1b304:	0002d3b1 	.word	0x0002d3b1
   1b308:	0002d475 	.word	0x0002d475
   1b30c:	0002d057 	.word	0x0002d057
   1b310:	0002d0b2 	.word	0x0002d0b2

0001b314 <transfer_next_chunk>:
{
   1b314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1b316:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1b318:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1b31a:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1b31c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1b31e:	b98d      	cbnz	r5, 1b344 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1b320:	2b00      	cmp	r3, #0
   1b322:	d137      	bne.n	1b394 <transfer_next_chunk+0x80>
	int error = 0;
   1b324:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1b326:	2200      	movs	r2, #0
   1b328:	4620      	mov	r0, r4
   1b32a:	4611      	mov	r1, r2
   1b32c:	f00e f86f 	bl	2940e <_spi_context_cs_control>
	ctx->sync_status = status;
   1b330:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1b332:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b336:	f005 fcd7 	bl	20ce8 <z_impl_k_sem_give>
	dev_data->busy = false;
   1b33a:	2300      	movs	r3, #0
   1b33c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1b340:	b004      	add	sp, #16
   1b342:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1b344:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1b346:	bb0b      	cbnz	r3, 1b38c <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1b348:	bb39      	cbnz	r1, 1b39a <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1b34a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b34e:	42aa      	cmp	r2, r5
   1b350:	bf28      	it	cs
   1b352:	462a      	movcs	r2, r5
   1b354:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1b356:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1b358:	9100      	str	r1, [sp, #0]
   1b35a:	b11b      	cbz	r3, 1b364 <transfer_next_chunk+0x50>
   1b35c:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1b35e:	2b00      	cmp	r3, #0
   1b360:	bf18      	it	ne
   1b362:	4613      	movne	r3, r2
   1b364:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1b366:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1b368:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1b36a:	b11b      	cbz	r3, 1b374 <transfer_next_chunk+0x60>
   1b36c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1b36e:	2b00      	cmp	r3, #0
   1b370:	bf18      	it	ne
   1b372:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1b374:	2200      	movs	r2, #0
   1b376:	4669      	mov	r1, sp
   1b378:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1b37a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1b37c:	f003 fed0 	bl	1f120 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1b380:	4b0d      	ldr	r3, [pc, #52]	; (1b3b8 <transfer_next_chunk+0xa4>)
   1b382:	4298      	cmp	r0, r3
   1b384:	d0dc      	beq.n	1b340 <transfer_next_chunk+0x2c>
			error = -EIO;
   1b386:	f06f 0504 	mvn.w	r5, #4
   1b38a:	e7cc      	b.n	1b326 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1b38c:	429d      	cmp	r5, r3
   1b38e:	bf28      	it	cs
   1b390:	461d      	movcs	r5, r3
   1b392:	e7d9      	b.n	1b348 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1b394:	461d      	mov	r5, r3
   1b396:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1b398:	e7d7      	b.n	1b34a <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1b39a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1b39e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1b3a2:	d0d2      	beq.n	1b34a <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1b3a4:	2d08      	cmp	r5, #8
   1b3a6:	bf28      	it	cs
   1b3a8:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b3aa:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1b3ac:	462a      	mov	r2, r5
   1b3ae:	f00f fcbf 	bl	2ad30 <memcpy>
			tx_buf = dev_data->buffer;
   1b3b2:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1b3b4:	e7c9      	b.n	1b34a <transfer_next_chunk+0x36>
   1b3b6:	bf00      	nop
   1b3b8:	0bad0000 	.word	0x0bad0000

0001b3bc <event_handler>:
{
   1b3bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1b3be:	7803      	ldrb	r3, [r0, #0]
{
   1b3c0:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1b3c2:	2b00      	cmp	r3, #0
   1b3c4:	d154      	bne.n	1b470 <event_handler+0xb4>
	if (!ctx->tx_len) {
   1b3c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1b3c8:	6e89      	ldr	r1, [r1, #104]	; 0x68
   1b3ca:	b152      	cbz	r2, 1b3e2 <event_handler+0x26>
	if (len > ctx->tx_len) {
   1b3cc:	4291      	cmp	r1, r2
   1b3ce:	d91d      	bls.n	1b40c <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   1b3d0:	4a28      	ldr	r2, [pc, #160]	; (1b474 <event_handler+0xb8>)
   1b3d2:	4618      	mov	r0, r3
   1b3d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b3d8:	4927      	ldr	r1, [pc, #156]	; (1b478 <event_handler+0xbc>)
   1b3da:	2201      	movs	r2, #1
   1b3dc:	9300      	str	r3, [sp, #0]
   1b3de:	f00e f806 	bl	293ee <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   1b3e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1b3e4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1b3e6:	b15b      	cbz	r3, 1b400 <event_handler+0x44>
	if (len > ctx->rx_len) {
   1b3e8:	429a      	cmp	r2, r3
   1b3ea:	d928      	bls.n	1b43e <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   1b3ec:	4b21      	ldr	r3, [pc, #132]	; (1b474 <event_handler+0xb8>)
   1b3ee:	2201      	movs	r2, #1
   1b3f0:	9302      	str	r3, [sp, #8]
   1b3f2:	2300      	movs	r3, #0
   1b3f4:	4920      	ldr	r1, [pc, #128]	; (1b478 <event_handler+0xbc>)
   1b3f6:	4618      	mov	r0, r3
   1b3f8:	e9cd 3300 	strd	r3, r3, [sp]
   1b3fc:	f00d fff7 	bl	293ee <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1b400:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1b402:	b004      	add	sp, #16
   1b404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1b408:	f7ff bf84 	b.w	1b314 <transfer_next_chunk>
	ctx->tx_len -= len;
   1b40c:	1a52      	subs	r2, r2, r1
   1b40e:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   1b410:	b97a      	cbnz	r2, 1b432 <event_handler+0x76>
		++ctx->current_tx;
   1b412:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1b414:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   1b418:	3308      	adds	r3, #8
   1b41a:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   1b41c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1b41e:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   1b422:	3b01      	subs	r3, #1
   1b424:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1b426:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1b42a:	f00d ffcd 	bl	293c8 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1b42e:	6560      	str	r0, [r4, #84]	; 0x54
   1b430:	e7d7      	b.n	1b3e2 <event_handler+0x26>
	} else if (ctx->tx_buf) {
   1b432:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1b434:	2b00      	cmp	r3, #0
   1b436:	d0d4      	beq.n	1b3e2 <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   1b438:	440b      	add	r3, r1
   1b43a:	6563      	str	r3, [r4, #84]	; 0x54
   1b43c:	e7d1      	b.n	1b3e2 <event_handler+0x26>
	ctx->rx_len -= len;
   1b43e:	1a9b      	subs	r3, r3, r2
   1b440:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1b442:	b97b      	cbnz	r3, 1b464 <event_handler+0xa8>
		++ctx->current_rx;
   1b444:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1b446:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1b44a:	3308      	adds	r3, #8
   1b44c:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1b44e:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1b450:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1b454:	3b01      	subs	r3, #1
   1b456:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1b458:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1b45c:	f00d ffb4 	bl	293c8 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1b460:	65e0      	str	r0, [r4, #92]	; 0x5c
   1b462:	e7cd      	b.n	1b400 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   1b464:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1b466:	2b00      	cmp	r3, #0
   1b468:	d0ca      	beq.n	1b400 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   1b46a:	4413      	add	r3, r2
   1b46c:	65e3      	str	r3, [r4, #92]	; 0x5c
   1b46e:	e7c7      	b.n	1b400 <event_handler+0x44>
}
   1b470:	b004      	add	sp, #16
   1b472:	bd10      	pop	{r4, pc}
   1b474:	000310f4 	.word	0x000310f4
   1b478:	0002c174 	.word	0x0002c174

0001b47c <spi_nrfx_transceive>:
{
   1b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b480:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1b482:	888b      	ldrh	r3, [r1, #4]
   1b484:	460f      	mov	r7, r1
   1b486:	0499      	lsls	r1, r3, #18
   1b488:	4680      	mov	r8, r0
   1b48a:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   1b48c:	6904      	ldr	r4, [r0, #16]
{
   1b48e:	b08f      	sub	sp, #60	; 0x3c
   1b490:	d435      	bmi.n	1b4fe <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1b492:	f04f 32ff 	mov.w	r2, #4294967295
   1b496:	f04f 33ff 	mov.w	r3, #4294967295
   1b49a:	f104 0010 	add.w	r0, r4, #16
   1b49e:	f005 fc67 	bl	20d70 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1b4a2:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1b4a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1b4a8:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1b4ac:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1b4ae:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1b4b0:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   1b4b4:	9306      	str	r3, [sp, #24]
   1b4b6:	b123      	cbz	r3, 1b4c2 <spi_nrfx_transceive+0x46>
   1b4b8:	f8da 3000 	ldr.w	r3, [sl]
   1b4bc:	429f      	cmp	r7, r3
   1b4be:	f000 80da 	beq.w	1b676 <spi_nrfx_transceive+0x1fa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1b4c2:	88be      	ldrh	r6, [r7, #4]
   1b4c4:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   1b4c8:	d020      	beq.n	1b50c <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   1b4ca:	4ba1      	ldr	r3, [pc, #644]	; (1b750 <spi_nrfx_transceive+0x2d4>)
   1b4cc:	2201      	movs	r2, #1
   1b4ce:	9302      	str	r3, [sp, #8]
   1b4d0:	2300      	movs	r3, #0
   1b4d2:	49a0      	ldr	r1, [pc, #640]	; (1b754 <spi_nrfx_transceive+0x2d8>)
   1b4d4:	4618      	mov	r0, r3
   1b4d6:	e9cd 3300 	strd	r3, r3, [sp]
   1b4da:	f00d ff88 	bl	293ee <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1b4de:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1b4e2:	6823      	ldr	r3, [r4, #0]
   1b4e4:	889b      	ldrh	r3, [r3, #4]
   1b4e6:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1b4ea:	d104      	bne.n	1b4f6 <spi_nrfx_transceive+0x7a>
		ctx->owner = NULL;
   1b4ec:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1b4ee:	f104 0010 	add.w	r0, r4, #16
   1b4f2:	f005 fbf9 	bl	20ce8 <z_impl_k_sem_give>
}
   1b4f6:	4628      	mov	r0, r5
   1b4f8:	b00f      	add	sp, #60	; 0x3c
   1b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1b4fe:	69a3      	ldr	r3, [r4, #24]
   1b500:	2b00      	cmp	r3, #0
   1b502:	d1c6      	bne.n	1b492 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1b504:	6863      	ldr	r3, [r4, #4]
   1b506:	429f      	cmp	r7, r3
   1b508:	d1c3      	bne.n	1b492 <spi_nrfx_transceive+0x16>
   1b50a:	e7cb      	b.n	1b4a4 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1b50c:	f016 0201 	ands.w	r2, r6, #1
   1b510:	d00e      	beq.n	1b530 <spi_nrfx_transceive+0xb4>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1b512:	f8d8 2000 	ldr.w	r2, [r8]
   1b516:	4618      	mov	r0, r3
   1b518:	9203      	str	r2, [sp, #12]
   1b51a:	4a8f      	ldr	r2, [pc, #572]	; (1b758 <spi_nrfx_transceive+0x2dc>)
   1b51c:	498d      	ldr	r1, [pc, #564]	; (1b754 <spi_nrfx_transceive+0x2d8>)
   1b51e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b522:	9300      	str	r3, [sp, #0]
   1b524:	2201      	movs	r2, #1
   1b526:	f00d ff62 	bl	293ee <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1b52a:	f06f 0515 	mvn.w	r5, #21
   1b52e:	e7d8      	b.n	1b4e2 <spi_nrfx_transceive+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1b530:	f016 0308 	ands.w	r3, r6, #8
   1b534:	d00a      	beq.n	1b54c <spi_nrfx_transceive+0xd0>
		LOG_ERR("Loopback mode is not supported");
   1b536:	4b89      	ldr	r3, [pc, #548]	; (1b75c <spi_nrfx_transceive+0x2e0>)
   1b538:	9200      	str	r2, [sp, #0]
   1b53a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b53e:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1b540:	2201      	movs	r2, #1
   1b542:	4618      	mov	r0, r3
   1b544:	4983      	ldr	r1, [pc, #524]	; (1b754 <spi_nrfx_transceive+0x2d8>)
   1b546:	f00d ff52 	bl	293ee <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   1b54a:	e7ee      	b.n	1b52a <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1b54c:	f3c6 1245 	ubfx	r2, r6, #5, #6
   1b550:	2a08      	cmp	r2, #8
   1b552:	d004      	beq.n	1b55e <spi_nrfx_transceive+0xe2>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1b554:	4a82      	ldr	r2, [pc, #520]	; (1b760 <spi_nrfx_transceive+0x2e4>)
   1b556:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b55a:	9300      	str	r3, [sp, #0]
   1b55c:	e7f0      	b.n	1b540 <spi_nrfx_transceive+0xc4>
	if (spi_cfg->frequency < 125000) {
   1b55e:	683a      	ldr	r2, [r7, #0]
   1b560:	9207      	str	r2, [sp, #28]
   1b562:	9907      	ldr	r1, [sp, #28]
   1b564:	4a7f      	ldr	r2, [pc, #508]	; (1b764 <spi_nrfx_transceive+0x2e8>)
   1b566:	4291      	cmp	r1, r2
   1b568:	d801      	bhi.n	1b56e <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1b56a:	4a7f      	ldr	r2, [pc, #508]	; (1b768 <spi_nrfx_transceive+0x2ec>)
   1b56c:	e7f3      	b.n	1b556 <spi_nrfx_transceive+0xda>
	if (max_freq > 16000000 &&
   1b56e:	4b7f      	ldr	r3, [pc, #508]	; (1b76c <spi_nrfx_transceive+0x2f0>)
   1b570:	429d      	cmp	r5, r3
   1b572:	d906      	bls.n	1b582 <spi_nrfx_transceive+0x106>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1b574:	4a7e      	ldr	r2, [pc, #504]	; (1b770 <spi_nrfx_transceive+0x2f4>)
   1b576:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1b57a:	f012 0f03 	tst.w	r2, #3
   1b57e:	bf18      	it	ne
   1b580:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1b582:	9b05      	ldr	r3, [sp, #20]
   1b584:	f10d 0c20 	add.w	ip, sp, #32
   1b588:	f103 0e0c 	add.w	lr, r3, #12
   1b58c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1b590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1b594:	9b07      	ldr	r3, [sp, #28]
	config = dev_config->def_config;
   1b596:	e89e 0003 	ldmia.w	lr, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1b59a:	42ab      	cmp	r3, r5
   1b59c:	bf28      	it	cs
   1b59e:	462b      	movcs	r3, r5
   1b5a0:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1b5a2:	4b74      	ldr	r3, [pc, #464]	; (1b774 <spi_nrfx_transceive+0x2f8>)
	config = dev_config->def_config;
   1b5a4:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   1b5a8:	429d      	cmp	r5, r3
   1b5aa:	d946      	bls.n	1b63a <spi_nrfx_transceive+0x1be>
	} else if (frequency < 500000) {
   1b5ac:	4b72      	ldr	r3, [pc, #456]	; (1b778 <spi_nrfx_transceive+0x2fc>)
   1b5ae:	429d      	cmp	r5, r3
   1b5b0:	d946      	bls.n	1b640 <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 1000000) {
   1b5b2:	4b72      	ldr	r3, [pc, #456]	; (1b77c <spi_nrfx_transceive+0x300>)
   1b5b4:	429d      	cmp	r5, r3
   1b5b6:	d946      	bls.n	1b646 <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 2000000) {
   1b5b8:	4b71      	ldr	r3, [pc, #452]	; (1b780 <spi_nrfx_transceive+0x304>)
   1b5ba:	429d      	cmp	r5, r3
   1b5bc:	d946      	bls.n	1b64c <spi_nrfx_transceive+0x1d0>
	} else if (frequency < 4000000) {
   1b5be:	4b71      	ldr	r3, [pc, #452]	; (1b784 <spi_nrfx_transceive+0x308>)
   1b5c0:	429d      	cmp	r5, r3
   1b5c2:	d946      	bls.n	1b652 <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 8000000) {
   1b5c4:	4b70      	ldr	r3, [pc, #448]	; (1b788 <spi_nrfx_transceive+0x30c>)
   1b5c6:	429d      	cmp	r5, r3
   1b5c8:	d346      	bcc.n	1b658 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 16000000) {
   1b5ca:	4b68      	ldr	r3, [pc, #416]	; (1b76c <spi_nrfx_transceive+0x2f0>)
   1b5cc:	429d      	cmp	r5, r3
   1b5ce:	d346      	bcc.n	1b65e <spi_nrfx_transceive+0x1e2>
		return NRF_SPIM_FREQ_16M;
   1b5d0:	4b6e      	ldr	r3, [pc, #440]	; (1b78c <spi_nrfx_transceive+0x310>)
   1b5d2:	429d      	cmp	r5, r3
   1b5d4:	bf2c      	ite	cs
   1b5d6:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1b5da:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1b5de:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1b5e0:	950a      	str	r5, [sp, #40]	; 0x28
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1b5e2:	f006 0304 	and.w	r3, r6, #4
   1b5e6:	d53d      	bpl.n	1b664 <spi_nrfx_transceive+0x1e8>
			return NRF_SPIM_MODE_2;
   1b5e8:	2b00      	cmp	r3, #0
   1b5ea:	bf14      	ite	ne
   1b5ec:	2303      	movne	r3, #3
   1b5ee:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1b5f0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (dev_data->initialized) {
   1b5f4:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   1b5f6:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1b5fa:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	if (dev_data->initialized) {
   1b5fe:	b12b      	cbz	r3, 1b60c <spi_nrfx_transceive+0x190>
		nrfx_spim_uninit(&dev_config->spim);
   1b600:	9805      	ldr	r0, [sp, #20]
   1b602:	f003 fd23 	bl	1f04c <nrfx_spim_uninit>
		dev_data->initialized = false;
   1b606:	2300      	movs	r3, #0
   1b608:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1b60c:	4653      	mov	r3, sl
   1b60e:	4a60      	ldr	r2, [pc, #384]	; (1b790 <spi_nrfx_transceive+0x314>)
   1b610:	9805      	ldr	r0, [sp, #20]
   1b612:	a908      	add	r1, sp, #32
   1b614:	f003 fbe8 	bl	1ede8 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1b618:	4b5e      	ldr	r3, [pc, #376]	; (1b794 <spi_nrfx_transceive+0x318>)
   1b61a:	4298      	cmp	r0, r3
   1b61c:	d026      	beq.n	1b66c <spi_nrfx_transceive+0x1f0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1b61e:	4b5e      	ldr	r3, [pc, #376]	; (1b798 <spi_nrfx_transceive+0x31c>)
   1b620:	9003      	str	r0, [sp, #12]
   1b622:	9302      	str	r3, [sp, #8]
   1b624:	2300      	movs	r3, #0
   1b626:	2201      	movs	r2, #1
   1b628:	4618      	mov	r0, r3
   1b62a:	e9cd 3300 	strd	r3, r3, [sp]
   1b62e:	4949      	ldr	r1, [pc, #292]	; (1b754 <spi_nrfx_transceive+0x2d8>)
   1b630:	f00d fedd 	bl	293ee <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1b634:	f06f 0504 	mvn.w	r5, #4
   1b638:	e753      	b.n	1b4e2 <spi_nrfx_transceive+0x66>
		return NRF_SPIM_FREQ_125K;
   1b63a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1b63e:	e7ce      	b.n	1b5de <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_250K;
   1b640:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1b644:	e7cb      	b.n	1b5de <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_500K;
   1b646:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1b64a:	e7c8      	b.n	1b5de <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_1M;
   1b64c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1b650:	e7c5      	b.n	1b5de <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_2M;
   1b652:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1b656:	e7c2      	b.n	1b5de <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_4M;
   1b658:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1b65c:	e7bf      	b.n	1b5de <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_8M;
   1b65e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1b662:	e7bc      	b.n	1b5de <spi_nrfx_transceive+0x162>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1b664:	3b00      	subs	r3, #0
   1b666:	bf18      	it	ne
   1b668:	2301      	movne	r3, #1
   1b66a:	e7c1      	b.n	1b5f0 <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
   1b66c:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1b66e:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   1b672:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   1b676:	2301      	movs	r3, #1
   1b678:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1b67c:	f1b9 0f00 	cmp.w	r9, #0
   1b680:	d154      	bne.n	1b72c <spi_nrfx_transceive+0x2b0>
   1b682:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1b686:	2300      	movs	r3, #0
   1b688:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1b68a:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1b68e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1b692:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1b696:	f00d fe97 	bl	293c8 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1b69a:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1b69c:	f1bb 0f00 	cmp.w	fp, #0
   1b6a0:	d14c      	bne.n	1b73c <spi_nrfx_transceive+0x2c0>
   1b6a2:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1b6a6:	2300      	movs	r3, #0
   1b6a8:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1b6aa:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1b6ae:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1b6b2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1b6b6:	f00d fe87 	bl	293c8 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1b6ba:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1b6bc:	2101      	movs	r1, #1
   1b6be:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1b6c0:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1b6c2:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1b6c4:	4620      	mov	r0, r4
   1b6c6:	f00d fea2 	bl	2940e <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1b6ca:	4640      	mov	r0, r8
   1b6cc:	f7ff fe22 	bl	1b314 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1b6d0:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1b6d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1b6d4:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1b6d6:	429d      	cmp	r5, r3
   1b6d8:	bf38      	it	cc
   1b6da:	461d      	movcc	r5, r3
   1b6dc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1b6e0:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1b6e2:	f857 3b28 	ldr.w	r3, [r7], #40
   1b6e6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1b6ea:	681b      	ldr	r3, [r3, #0]
   1b6ec:	4631      	mov	r1, r6
   1b6ee:	fbb5 f5f3 	udiv	r5, r5, r3
   1b6f2:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1b6f6:	35c8      	adds	r5, #200	; 0xc8
   1b6f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b6fc:	2300      	movs	r3, #0
   1b6fe:	fbe5 010c 	umlal	r0, r1, r5, ip
   1b702:	f7ed fbf5 	bl	8ef0 <__aeabi_uldivmod>
   1b706:	4602      	mov	r2, r0
   1b708:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b70a:	4638      	mov	r0, r7
   1b70c:	f005 fb30 	bl	20d70 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1b710:	b1e0      	cbz	r0, 1b74c <spi_nrfx_transceive+0x2d0>
		LOG_ERR("Timeout waiting for transfer complete");
   1b712:	4b22      	ldr	r3, [pc, #136]	; (1b79c <spi_nrfx_transceive+0x320>)
   1b714:	2201      	movs	r2, #1
   1b716:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1b71a:	4630      	mov	r0, r6
   1b71c:	4633      	mov	r3, r6
   1b71e:	490d      	ldr	r1, [pc, #52]	; (1b754 <spi_nrfx_transceive+0x2d8>)
   1b720:	9600      	str	r6, [sp, #0]
   1b722:	f00d fe64 	bl	293ee <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   1b726:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1b72a:	e6da      	b.n	1b4e2 <spi_nrfx_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1b72c:	f8d9 3000 	ldr.w	r3, [r9]
   1b730:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1b732:	2b00      	cmp	r3, #0
   1b734:	d0a7      	beq.n	1b686 <spi_nrfx_transceive+0x20a>
   1b736:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b73a:	e7a5      	b.n	1b688 <spi_nrfx_transceive+0x20c>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1b73c:	f8db 3000 	ldr.w	r3, [fp]
   1b740:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1b742:	2b00      	cmp	r3, #0
   1b744:	d0af      	beq.n	1b6a6 <spi_nrfx_transceive+0x22a>
   1b746:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b74a:	e7ad      	b.n	1b6a8 <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
   1b74c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1b74e:	e6c8      	b.n	1b4e2 <spi_nrfx_transceive+0x66>
   1b750:	00031112 	.word	0x00031112
   1b754:	0002c174 	.word	0x0002c174
   1b758:	0003112c 	.word	0x0003112c
   1b75c:	0003114e 	.word	0x0003114e
   1b760:	0003116d 	.word	0x0003116d
   1b764:	0001e847 	.word	0x0001e847
   1b768:	0003119c 	.word	0x0003119c
   1b76c:	00f42400 	.word	0x00f42400
   1b770:	40005000 	.word	0x40005000
   1b774:	0003d08f 	.word	0x0003d08f
   1b778:	0007a11f 	.word	0x0007a11f
   1b77c:	000f423f 	.word	0x000f423f
   1b780:	001e847f 	.word	0x001e847f
   1b784:	003d08ff 	.word	0x003d08ff
   1b788:	007a1200 	.word	0x007a1200
   1b78c:	01e84800 	.word	0x01e84800
   1b790:	0001b3bd 	.word	0x0001b3bd
   1b794:	0bad0000 	.word	0x0bad0000
   1b798:	000311cd 	.word	0x000311cd
   1b79c:	000311f4 	.word	0x000311f4

0001b7a0 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1b7a0:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1b7a4:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1b7a8:	280a      	cmp	r0, #10
   1b7aa:	bf9a      	itte	ls
   1b7ac:	4b02      	ldrls	r3, [pc, #8]	; (1b7b8 <qspi_get_zephyr_ret_code+0x18>)
   1b7ae:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1b7b2:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1b7b6:	4770      	bx	lr
   1b7b8:	0002d010 	.word	0x0002d010

0001b7bc <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1b7bc:	4b02      	ldr	r3, [pc, #8]	; (1b7c8 <qspi_nor_pages_layout+0xc>)
   1b7be:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1b7c0:	2301      	movs	r3, #1
   1b7c2:	6013      	str	r3, [r2, #0]
}
   1b7c4:	4770      	bx	lr
   1b7c6:	bf00      	nop
   1b7c8:	0002ce20 	.word	0x0002ce20

0001b7cc <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1b7cc:	4800      	ldr	r0, [pc, #0]	; (1b7d0 <qspi_flash_get_parameters+0x4>)
   1b7ce:	4770      	bx	lr
   1b7d0:	0002cdb4 	.word	0x0002cdb4

0001b7d4 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1b7d4:	4b05      	ldr	r3, [pc, #20]	; (1b7ec <qspi_wait_for_completion.isra.0+0x18>)
   1b7d6:	4299      	cmp	r1, r3
   1b7d8:	d106      	bne.n	1b7e8 <qspi_wait_for_completion.isra.0+0x14>
   1b7da:	f04f 32ff 	mov.w	r2, #4294967295
   1b7de:	f04f 33ff 	mov.w	r3, #4294967295
   1b7e2:	3030      	adds	r0, #48	; 0x30
   1b7e4:	f005 bac4 	b.w	20d70 <z_impl_k_sem_take>
}
   1b7e8:	4770      	bx	lr
   1b7ea:	bf00      	nop
   1b7ec:	0bad0000 	.word	0x0bad0000

0001b7f0 <qspi_device_init>:
{
   1b7f0:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1b7f2:	6905      	ldr	r5, [r0, #16]
{
   1b7f4:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1b7f6:	4e0f      	ldr	r6, [pc, #60]	; (1b834 <qspi_device_init+0x44>)
	qspi_lock(dev);
   1b7f8:	4628      	mov	r0, r5
   1b7fa:	f00d fe63 	bl	294c4 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1b7fe:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1b802:	f00d fe48 	bl	29496 <k_sem_give>
	if (!qspi_initialized) {
   1b806:	7833      	ldrb	r3, [r6, #0]
   1b808:	b98b      	cbnz	r3, 1b82e <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1b80a:	462a      	mov	r2, r5
   1b80c:	490a      	ldr	r1, [pc, #40]	; (1b838 <qspi_device_init+0x48>)
   1b80e:	6860      	ldr	r0, [r4, #4]
   1b810:	f003 f86a 	bl	1e8e8 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1b814:	f7ff ffc4 	bl	1b7a0 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1b818:	fab0 f380 	clz	r3, r0
   1b81c:	4605      	mov	r5, r0
   1b81e:	095b      	lsrs	r3, r3, #5
   1b820:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1b822:	6920      	ldr	r0, [r4, #16]
   1b824:	3018      	adds	r0, #24
   1b826:	f00d fe36 	bl	29496 <k_sem_give>
}
   1b82a:	4628      	mov	r0, r5
   1b82c:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1b82e:	2500      	movs	r5, #0
   1b830:	e7f7      	b.n	1b822 <qspi_device_init+0x32>
   1b832:	bf00      	nop
   1b834:	200236e5 	.word	0x200236e5
   1b838:	0002949b 	.word	0x0002949b

0001b83c <qspi_send_cmd>:
{
   1b83c:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
   1b83e:	684c      	ldr	r4, [r1, #4]
{
   1b840:	4605      	mov	r5, r0
   1b842:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
   1b844:	b1ec      	cbz	r4, 1b882 <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
   1b846:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1b84a:	6888      	ldr	r0, [r1, #8]
   1b84c:	b1d8      	cbz	r0, 1b886 <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
   1b84e:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1b852:	b1c8      	cbz	r0, 1b888 <qspi_send_cmd+0x4c>
   1b854:	b1c3      	cbz	r3, 1b888 <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
   1b856:	4283      	cmp	r3, r0
   1b858:	d10f      	bne.n	1b87a <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
   1b85a:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1b85c:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1b85e:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1b860:	d915      	bls.n	1b88e <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1b862:	e9cd 1303 	strd	r1, r3, [sp, #12]
   1b866:	4b1a      	ldr	r3, [pc, #104]	; (1b8d0 <qspi_send_cmd+0x94>)
   1b868:	2202      	movs	r2, #2
   1b86a:	9302      	str	r3, [sp, #8]
   1b86c:	2300      	movs	r3, #0
   1b86e:	4919      	ldr	r1, [pc, #100]	; (1b8d4 <qspi_send_cmd+0x98>)
   1b870:	4618      	mov	r0, r3
   1b872:	e9cd 3300 	strd	r3, r3, [sp]
   1b876:	f00d fe16 	bl	294a6 <z_log_msg_runtime_create.constprop.0>
}
   1b87a:	f06f 0015 	mvn.w	r0, #21
   1b87e:	b008      	add	sp, #32
   1b880:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
   1b882:	4623      	mov	r3, r4
   1b884:	e7e1      	b.n	1b84a <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   1b886:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1b888:	3301      	adds	r3, #1
   1b88a:	4403      	add	r3, r0
   1b88c:	e7e6      	b.n	1b85c <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1b88e:	f88d 3019 	strb.w	r3, [sp, #25]
   1b892:	f240 1301 	movw	r3, #257	; 0x101
   1b896:	f8ad 301a 	strh.w	r3, [sp, #26]
   1b89a:	2300      	movs	r3, #0
	qspi_lock(dev);
   1b89c:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1b89e:	f88d 301c 	strb.w	r3, [sp, #28]
   1b8a2:	f88d 1018 	strb.w	r1, [sp, #24]
   1b8a6:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
   1b8aa:	f00d fe0b 	bl	294c4 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1b8ae:	4621      	mov	r1, r4
   1b8b0:	4632      	mov	r2, r6
   1b8b2:	a806      	add	r0, sp, #24
   1b8b4:	f003 f90a 	bl	1eacc <nrfx_qspi_cinstr_xfer>
   1b8b8:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1b8ba:	6928      	ldr	r0, [r5, #16]
   1b8bc:	3018      	adds	r0, #24
   1b8be:	f00d fdea 	bl	29496 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1b8c2:	4620      	mov	r0, r4
}
   1b8c4:	b008      	add	sp, #32
   1b8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
   1b8ca:	f7ff bf69 	b.w	1b7a0 <qspi_get_zephyr_ret_code>
   1b8ce:	bf00      	nop
   1b8d0:	00031231 	.word	0x00031231
   1b8d4:	0002c164 	.word	0x0002c164

0001b8d8 <qspi_device_uninit>:
{
   1b8d8:	b538      	push	{r3, r4, r5, lr}
   1b8da:	4604      	mov	r4, r0
	qspi_lock(dev);
   1b8dc:	6900      	ldr	r0, [r0, #16]
   1b8de:	f00d fdf1 	bl	294c4 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1b8e2:	6925      	ldr	r5, [r4, #16]
   1b8e4:	2200      	movs	r2, #0
   1b8e6:	2300      	movs	r3, #0
   1b8e8:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1b8ec:	f005 fa40 	bl	20d70 <z_impl_k_sem_take>
	if (last) {
   1b8f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1b8f2:	b94b      	cbnz	r3, 1b908 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1b8f4:	4d0a      	ldr	r5, [pc, #40]	; (1b920 <qspi_device_uninit+0x48>)
   1b8f6:	f003 f94b 	bl	1eb90 <nrfx_qspi_mem_busy_check>
   1b8fa:	42a8      	cmp	r0, r5
   1b8fc:	d10a      	bne.n	1b914 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1b8fe:	f003 f969 	bl	1ebd4 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1b902:	2200      	movs	r2, #0
   1b904:	4b07      	ldr	r3, [pc, #28]	; (1b924 <qspi_device_uninit+0x4c>)
   1b906:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1b908:	6920      	ldr	r0, [r4, #16]
}
   1b90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1b90e:	3018      	adds	r0, #24
   1b910:	f00d bdc1 	b.w	29496 <k_sem_give>
	return z_impl_k_sleep(timeout);
   1b914:	2100      	movs	r1, #0
   1b916:	f240 6067 	movw	r0, #1639	; 0x667
   1b91a:	f007 f8d9 	bl	22ad0 <z_impl_k_sleep>
   1b91e:	e7ea      	b.n	1b8f6 <qspi_device_uninit+0x1e>
   1b920:	0bad0000 	.word	0x0bad0000
   1b924:	200236e5 	.word	0x200236e5

0001b928 <qspi_nor_read>:
{
   1b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b92c:	4681      	mov	r9, r0
   1b92e:	460e      	mov	r6, r1
   1b930:	461c      	mov	r4, r3
	if (!dest) {
   1b932:	4690      	mov	r8, r2
{
   1b934:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
   1b936:	b1aa      	cbz	r2, 1b964 <qspi_nor_read+0x3c>
	if (!size) {
   1b938:	2b00      	cmp	r3, #0
   1b93a:	f000 809f 	beq.w	1ba7c <qspi_nor_read+0x154>
	if (addr < 0 ||
   1b93e:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1b940:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1b942:	db03      	blt.n	1b94c <qspi_nor_read+0x24>
   1b944:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1b946:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1b948:	4293      	cmp	r3, r2
   1b94a:	d911      	bls.n	1b970 <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
   1b94c:	4b4c      	ldr	r3, [pc, #304]	; (1ba80 <qspi_nor_read+0x158>)
   1b94e:	2201      	movs	r2, #1
   1b950:	9302      	str	r3, [sp, #8]
   1b952:	2300      	movs	r3, #0
   1b954:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1b958:	4618      	mov	r0, r3
   1b95a:	e9cd 3300 	strd	r3, r3, [sp]
   1b95e:	4949      	ldr	r1, [pc, #292]	; (1ba84 <qspi_nor_read+0x15c>)
   1b960:	f00d fda1 	bl	294a6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1b964:	f06f 0515 	mvn.w	r5, #21
}
   1b968:	4628      	mov	r0, r5
   1b96a:	b00b      	add	sp, #44	; 0x2c
   1b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1b970:	f7ff ff3e 	bl	1b7f0 <qspi_device_init>
	if (rc != 0) {
   1b974:	4605      	mov	r5, r0
   1b976:	2800      	cmp	r0, #0
   1b978:	d17c      	bne.n	1ba74 <qspi_nor_read+0x14c>
	qspi_lock(dev);
   1b97a:	4275      	negs	r5, r6
   1b97c:	f005 0503 	and.w	r5, r5, #3
   1b980:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1b984:	f00d fd9e 	bl	294c4 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1b988:	42a5      	cmp	r5, r4
   1b98a:	bf28      	it	cs
   1b98c:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1b98e:	f1d8 0300 	rsbs	r3, r8, #0
   1b992:	f003 0303 	and.w	r3, r3, #3
   1b996:	f008 0703 	and.w	r7, r8, #3
   1b99a:	bf58      	it	pl
   1b99c:	425f      	negpl	r7, r3
   1b99e:	427f      	negs	r7, r7
   1b9a0:	f007 0703 	and.w	r7, r7, #3
   1b9a4:	42a7      	cmp	r7, r4
   1b9a6:	bf28      	it	cs
   1b9a8:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1b9aa:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1b9ac:	1be4      	subs	r4, r4, r7
   1b9ae:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1b9b2:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   1b9b6:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1b9b8:	bfc8      	it	gt
   1b9ba:	46a2      	movgt	sl, r4
   1b9bc:	f003 0b03 	and.w	fp, r3, #3
   1b9c0:	bfc8      	it	gt
   1b9c2:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   1b9c6:	f1ba 0f00 	cmp.w	sl, #0
   1b9ca:	d019      	beq.n	1ba00 <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1b9cc:	eb08 0307 	add.w	r3, r8, r7
   1b9d0:	1972      	adds	r2, r6, r5
   1b9d2:	4651      	mov	r1, sl
   1b9d4:	4618      	mov	r0, r3
   1b9d6:	9307      	str	r3, [sp, #28]
   1b9d8:	f00e fa2f 	bl	29e3a <nrfx_qspi_read>
   1b9dc:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1b9de:	4601      	mov	r1, r0
   1b9e0:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1b9e4:	f7ff fef6 	bl	1b7d4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1b9e8:	4a27      	ldr	r2, [pc, #156]	; (1ba88 <qspi_nor_read+0x160>)
   1b9ea:	4294      	cmp	r4, r2
   1b9ec:	d139      	bne.n	1ba62 <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
   1b9ee:	42bd      	cmp	r5, r7
   1b9f0:	d006      	beq.n	1ba00 <qspi_nor_read+0xd8>
__ssp_bos_icheck3(memmove, void *, const void *)
   1b9f2:	9b07      	ldr	r3, [sp, #28]
   1b9f4:	4652      	mov	r2, sl
   1b9f6:	4619      	mov	r1, r3
   1b9f8:	eb08 0005 	add.w	r0, r8, r5
   1b9fc:	f00f f9b8 	bl	2ad70 <memmove>
	if (flash_prefix != 0) {
   1ba00:	b1ad      	cbz	r5, 1ba2e <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
   1ba02:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1ba06:	2104      	movs	r1, #4
   1ba08:	1bf2      	subs	r2, r6, r7
   1ba0a:	a808      	add	r0, sp, #32
   1ba0c:	f00e fa15 	bl	29e3a <nrfx_qspi_read>
   1ba10:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ba12:	4601      	mov	r1, r0
   1ba14:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ba18:	f7ff fedc 	bl	1b7d4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1ba1c:	4b1a      	ldr	r3, [pc, #104]	; (1ba88 <qspi_nor_read+0x160>)
   1ba1e:	429c      	cmp	r4, r3
   1ba20:	d11f      	bne.n	1ba62 <qspi_nor_read+0x13a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ba22:	ab08      	add	r3, sp, #32
   1ba24:	462a      	mov	r2, r5
   1ba26:	4640      	mov	r0, r8
   1ba28:	19d9      	adds	r1, r3, r7
   1ba2a:	f00f f981 	bl	2ad30 <memcpy>
	if (flash_suffix != 0) {
   1ba2e:	f1bb 0f00 	cmp.w	fp, #0
   1ba32:	d015      	beq.n	1ba60 <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
   1ba34:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1ba36:	2108      	movs	r1, #8
   1ba38:	4452      	add	r2, sl
   1ba3a:	a808      	add	r0, sp, #32
   1ba3c:	f00e f9fd 	bl	29e3a <nrfx_qspi_read>
   1ba40:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ba42:	4601      	mov	r1, r0
   1ba44:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ba48:	f7ff fec4 	bl	1b7d4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1ba4c:	4b0e      	ldr	r3, [pc, #56]	; (1ba88 <qspi_nor_read+0x160>)
   1ba4e:	429c      	cmp	r4, r3
   1ba50:	d107      	bne.n	1ba62 <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1ba52:	eb0a 0005 	add.w	r0, sl, r5
   1ba56:	465a      	mov	r2, fp
   1ba58:	a908      	add	r1, sp, #32
   1ba5a:	4440      	add	r0, r8
   1ba5c:	f00f f968 	bl	2ad30 <memcpy>
	return res;
   1ba60:	4c09      	ldr	r4, [pc, #36]	; (1ba88 <qspi_nor_read+0x160>)
	k_sem_give(&dev_data->sem);
   1ba62:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ba66:	3018      	adds	r0, #24
   1ba68:	f00d fd15 	bl	29496 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1ba6c:	4620      	mov	r0, r4
   1ba6e:	f7ff fe97 	bl	1b7a0 <qspi_get_zephyr_ret_code>
   1ba72:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1ba74:	4648      	mov	r0, r9
   1ba76:	f7ff ff2f 	bl	1b8d8 <qspi_device_uninit>
	return rc;
   1ba7a:	e775      	b.n	1b968 <qspi_nor_read+0x40>
		return 0;
   1ba7c:	461d      	mov	r5, r3
   1ba7e:	e773      	b.n	1b968 <qspi_nor_read+0x40>
   1ba80:	00031254 	.word	0x00031254
   1ba84:	0002c164 	.word	0x0002c164
   1ba88:	0bad0000 	.word	0x0bad0000

0001ba8c <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1ba8c:	2202      	movs	r2, #2
{
   1ba8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba92:	4b64      	ldr	r3, [pc, #400]	; (1bc24 <qspi_nor_init+0x198>)
   1ba94:	b090      	sub	sp, #64	; 0x40
   1ba96:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1ba9a:	6843      	ldr	r3, [r0, #4]
{
   1ba9c:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1ba9e:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1baa0:	2100      	movs	r1, #0
   1baa2:	4630      	mov	r0, r6
   1baa4:	aa0d      	add	r2, sp, #52	; 0x34
   1baa6:	f00d fff2 	bl	29a8e <pinctrl_lookup_state>
	if (ret < 0) {
   1baaa:	1e04      	subs	r4, r0, #0
   1baac:	db35      	blt.n	1bb1a <qspi_nor_init+0x8e>
	return pinctrl_apply_state_direct(config, state);
   1baae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1bab0:	6832      	ldr	r2, [r6, #0]
   1bab2:	7919      	ldrb	r1, [r3, #4]
   1bab4:	6818      	ldr	r0, [r3, #0]
   1bab6:	f00d fffd 	bl	29ab4 <pinctrl_configure_pins>
	if (ret < 0) {
   1baba:	1e04      	subs	r4, r0, #0
   1babc:	db2d      	blt.n	1bb1a <qspi_nor_init+0x8e>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1babe:	2200      	movs	r2, #0
   1bac0:	2101      	movs	r1, #1
   1bac2:	202b      	movs	r0, #43	; 0x2b
   1bac4:	f7f5 fab8 	bl	11038 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1bac8:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1baca:	692a      	ldr	r2, [r5, #16]
   1bacc:	4630      	mov	r0, r6
   1bace:	4956      	ldr	r1, [pc, #344]	; (1bc28 <qspi_nor_init+0x19c>)
   1bad0:	f002 ff0a 	bl	1e8e8 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1bad4:	f7ff fe64 	bl	1b7a0 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1bad8:	1e04      	subs	r4, r0, #0
   1bada:	db1e      	blt.n	1bb1a <qspi_nor_init+0x8e>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1badc:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1bade:	3b02      	subs	r3, #2
   1bae0:	2b01      	cmp	r3, #1
   1bae2:	d91e      	bls.n	1bb22 <qspi_nor_init+0x96>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1bae4:	f896 800a 	ldrb.w	r8, [r6, #10]
   1bae8:	f1a8 0803 	sub.w	r8, r8, #3
   1baec:	f1b8 0f01 	cmp.w	r8, #1
   1baf0:	bf8c      	ite	hi
   1baf2:	f04f 0800 	movhi.w	r8, #0
   1baf6:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1bafa:	4628      	mov	r0, r5
   1bafc:	f00d fd04 	bl	29508 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1bb00:	1e04      	subs	r4, r0, #0
   1bb02:	da11      	bge.n	1bb28 <qspi_nor_init+0x9c>
			LOG_ERR("RDSR failed: %d", ret);
   1bb04:	4b49      	ldr	r3, [pc, #292]	; (1bc2c <qspi_nor_init+0x1a0>)
   1bb06:	2201      	movs	r2, #1
   1bb08:	9302      	str	r3, [sp, #8]
   1bb0a:	2300      	movs	r3, #0
   1bb0c:	4948      	ldr	r1, [pc, #288]	; (1bc30 <qspi_nor_init+0x1a4>)
   1bb0e:	4618      	mov	r0, r3
   1bb10:	e9cd 3300 	strd	r3, r3, [sp]
   1bb14:	9403      	str	r4, [sp, #12]
   1bb16:	f00d fcc6 	bl	294a6 <z_log_msg_runtime_create.constprop.0>
}
   1bb1a:	4620      	mov	r0, r4
   1bb1c:	b010      	add	sp, #64	; 0x40
   1bb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1bb22:	f04f 0801 	mov.w	r8, #1
   1bb26:	e7e8      	b.n	1bafa <qspi_nor_init+0x6e>
		uint8_t sr = (uint8_t)ret;
   1bb28:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1bb2a:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1bb2e:	45a0      	cmp	r8, r4
   1bb30:	ae0a      	add	r6, sp, #40	; 0x28
   1bb32:	af0b      	add	r7, sp, #44	; 0x2c
   1bb34:	d02f      	beq.n	1bb96 <qspi_nor_init+0x10a>
	uint8_t sr_array[2] = {0};
   1bb36:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1bb38:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1bb3c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
   1bb40:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
   1bb44:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1bb46:	4628      	mov	r0, r5
   1bb48:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
   1bb4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
   1bb4e:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
   1bb50:	930f      	str	r3, [sp, #60]	; 0x3c
   1bb52:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   1bb56:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
   1bb58:	f7ff fe70 	bl	1b83c <qspi_send_cmd>
	if (ret == 0) {
   1bb5c:	1e04      	subs	r4, r0, #0
   1bb5e:	d013      	beq.n	1bb88 <qspi_nor_init+0xfc>
		if (ret < 0) {
   1bb60:	dadb      	bge.n	1bb1a <qspi_nor_init+0x8e>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1bb62:	4a34      	ldr	r2, [pc, #208]	; (1bc34 <qspi_nor_init+0x1a8>)
   1bb64:	4b34      	ldr	r3, [pc, #208]	; (1bc38 <qspi_nor_init+0x1ac>)
   1bb66:	4932      	ldr	r1, [pc, #200]	; (1bc30 <qspi_nor_init+0x1a4>)
   1bb68:	f1b8 0f00 	cmp.w	r8, #0
   1bb6c:	bf18      	it	ne
   1bb6e:	4613      	movne	r3, r2
   1bb70:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1bb74:	4b31      	ldr	r3, [pc, #196]	; (1bc3c <qspi_nor_init+0x1b0>)
   1bb76:	2201      	movs	r2, #1
   1bb78:	9302      	str	r3, [sp, #8]
   1bb7a:	2300      	movs	r3, #0
   1bb7c:	4618      	mov	r0, r3
   1bb7e:	e9cd 3300 	strd	r3, r3, [sp]
   1bb82:	f00d fc90 	bl	294a6 <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
   1bb86:	e7c8      	b.n	1bb1a <qspi_nor_init+0x8e>
		ret = qspi_rdsr(dev, 1);
   1bb88:	4628      	mov	r0, r5
   1bb8a:	f00d fcbd 	bl	29508 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1bb8e:	1e04      	subs	r4, r0, #0
   1bb90:	dbe7      	blt.n	1bb62 <qspi_nor_init+0xd6>
   1bb92:	07e3      	lsls	r3, r4, #31
   1bb94:	d4f8      	bmi.n	1bb88 <qspi_nor_init+0xfc>
	qspi_device_uninit(dev);
   1bb96:	4628      	mov	r0, r5
   1bb98:	f7ff fe9e 	bl	1b8d8 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1bb9c:	2403      	movs	r4, #3
   1bb9e:	2300      	movs	r3, #0
   1bba0:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   1bba4:	930e      	str	r3, [sp, #56]	; 0x38
   1bba6:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1bba8:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1bbaa:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
   1bbac:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1bbb0:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
   1bbb2:	f7ff fe1d 	bl	1b7f0 <qspi_device_init>
	if (ret == 0) {
   1bbb6:	4602      	mov	r2, r0
   1bbb8:	b128      	cbz	r0, 1bbc6 <qspi_nor_init+0x13a>
	qspi_device_uninit(dev);
   1bbba:	4628      	mov	r0, r5
   1bbbc:	f7ff fe8c 	bl	1b8d8 <qspi_device_uninit>
		return -ENODEV;
   1bbc0:	f06f 0412 	mvn.w	r4, #18
   1bbc4:	e7a9      	b.n	1bb1a <qspi_nor_init+0x8e>
		ret = qspi_send_cmd(dev, &cmd, false);
   1bbc6:	4628      	mov	r0, r5
   1bbc8:	a90d      	add	r1, sp, #52	; 0x34
   1bbca:	f7ff fe37 	bl	1b83c <qspi_send_cmd>
   1bbce:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
   1bbd0:	4628      	mov	r0, r5
   1bbd2:	f7ff fe81 	bl	1b8d8 <qspi_device_uninit>
	if (ret != 0) {
   1bbd6:	2f00      	cmp	r7, #0
   1bbd8:	d1f2      	bne.n	1bbc0 <qspi_nor_init+0x134>
	const struct qspi_nor_config *qnc = dev->config;
   1bbda:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1bbdc:	4622      	mov	r2, r4
   1bbde:	4631      	mov	r1, r6
   1bbe0:	f105 001c 	add.w	r0, r5, #28
   1bbe4:	f00f f894 	bl	2ad10 <memcmp>
   1bbe8:	4604      	mov	r4, r0
   1bbea:	2800      	cmp	r0, #0
   1bbec:	d095      	beq.n	1bb1a <qspi_nor_init+0x8e>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1bbee:	7fab      	ldrb	r3, [r5, #30]
   1bbf0:	2201      	movs	r2, #1
   1bbf2:	9308      	str	r3, [sp, #32]
   1bbf4:	7f6b      	ldrb	r3, [r5, #29]
   1bbf6:	4638      	mov	r0, r7
   1bbf8:	9307      	str	r3, [sp, #28]
   1bbfa:	7f2b      	ldrb	r3, [r5, #28]
   1bbfc:	490c      	ldr	r1, [pc, #48]	; (1bc30 <qspi_nor_init+0x1a4>)
   1bbfe:	9306      	str	r3, [sp, #24]
   1bc00:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1bc04:	9700      	str	r7, [sp, #0]
   1bc06:	9305      	str	r3, [sp, #20]
   1bc08:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   1bc0c:	9304      	str	r3, [sp, #16]
   1bc0e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1bc12:	9303      	str	r3, [sp, #12]
   1bc14:	4b0a      	ldr	r3, [pc, #40]	; (1bc40 <qspi_nor_init+0x1b4>)
   1bc16:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1bc1a:	463b      	mov	r3, r7
   1bc1c:	f00d fc43 	bl	294a6 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1bc20:	e7ce      	b.n	1bbc0 <qspi_nor_init+0x134>
   1bc22:	bf00      	nop
   1bc24:	40005000 	.word	0x40005000
   1bc28:	0002949b 	.word	0x0002949b
   1bc2c:	000312a3 	.word	0x000312a3
   1bc30:	0002c164 	.word	0x0002c164
   1bc34:	0002fee4 	.word	0x0002fee4
   1bc38:	0003129d 	.word	0x0003129d
   1bc3c:	000312b3 	.word	0x000312b3
   1bc40:	000312c4 	.word	0x000312c4

0001bc44 <qspi_nor_erase>:
{
   1bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1bc48:	2900      	cmp	r1, #0
{
   1bc4a:	4606      	mov	r6, r0
   1bc4c:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1bc4e:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1bc52:	b087      	sub	sp, #28
	if (addr < 0 ||
   1bc54:	db05      	blt.n	1bc62 <qspi_nor_erase+0x1e>
   1bc56:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
   1bc5a:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
   1bc5c:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
   1bc5e:	4688      	mov	r8, r1
	if (addr < 0 ||
   1bc60:	d911      	bls.n	1bc86 <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
   1bc62:	4b46      	ldr	r3, [pc, #280]	; (1bd7c <qspi_nor_erase+0x138>)
   1bc64:	e9cd 1503 	strd	r1, r5, [sp, #12]
   1bc68:	9302      	str	r3, [sp, #8]
   1bc6a:	2300      	movs	r3, #0
   1bc6c:	2201      	movs	r2, #1
   1bc6e:	4618      	mov	r0, r3
   1bc70:	e9cd 3300 	strd	r3, r3, [sp]
   1bc74:	4942      	ldr	r1, [pc, #264]	; (1bd80 <qspi_nor_erase+0x13c>)
   1bc76:	f00d fc16 	bl	294a6 <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1bc7a:	f06f 0415 	mvn.w	r4, #21
}
   1bc7e:	4620      	mov	r0, r4
   1bc80:	b007      	add	sp, #28
   1bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1bc86:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1bc8a:	2d00      	cmp	r5, #0
   1bc8c:	d0f5      	beq.n	1bc7a <qspi_nor_erase+0x36>
   1bc8e:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1bc92:	4313      	orrs	r3, r2
   1bc94:	d1f1      	bne.n	1bc7a <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
   1bc96:	f7ff fdab 	bl	1b7f0 <qspi_device_init>
	if (rv != 0) {
   1bc9a:	4604      	mov	r4, r0
   1bc9c:	bb68      	cbnz	r0, 1bcfa <qspi_nor_erase+0xb6>
	qspi_trans_lock(dev);
   1bc9e:	6930      	ldr	r0, [r6, #16]
   1bca0:	f00d fc17 	bl	294d2 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1bca4:	4621      	mov	r1, r4
   1bca6:	4630      	mov	r0, r6
   1bca8:	f00d fc19 	bl	294de <qspi_nor_write_protection_set>
	if (rv != 0) {
   1bcac:	4604      	mov	r4, r0
   1bcae:	bb08      	cbnz	r0, 1bcf4 <qspi_nor_erase+0xb0>
	qspi_lock(dev);
   1bcb0:	6930      	ldr	r0, [r6, #16]
   1bcb2:	f00d fc07 	bl	294c4 <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
   1bcb6:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1bd84 <qspi_nor_erase+0x140>
		if (size == params->size) {
   1bcba:	f8da 3018 	ldr.w	r3, [sl, #24]
   1bcbe:	42ab      	cmp	r3, r5
   1bcc0:	d11f      	bne.n	1bd02 <qspi_nor_erase+0xbe>
			res = nrfx_qspi_chip_erase();
   1bcc2:	f00e f8bd 	bl	29e40 <nrfx_qspi_chip_erase>
   1bcc6:	46a9      	mov	r9, r5
   1bcc8:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   1bcca:	4639      	mov	r1, r7
   1bccc:	6930      	ldr	r0, [r6, #16]
   1bcce:	f7ff fd81 	bl	1b7d4 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1bcd2:	455f      	cmp	r7, fp
   1bcd4:	d141      	bne.n	1bd5a <qspi_nor_erase+0x116>
	while (size > 0) {
   1bcd6:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
   1bcda:	44c8      	add	r8, r9
	while (size > 0) {
   1bcdc:	d1ed      	bne.n	1bcba <qspi_nor_erase+0x76>
	k_sem_give(&dev_data->sem);
   1bcde:	6930      	ldr	r0, [r6, #16]
   1bce0:	3018      	adds	r0, #24
   1bce2:	f00d fbd8 	bl	29496 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1bce6:	2101      	movs	r1, #1
   1bce8:	4630      	mov	r0, r6
   1bcea:	f00d fbf8 	bl	294de <qspi_nor_write_protection_set>
   1bcee:	2c00      	cmp	r4, #0
   1bcf0:	bf08      	it	eq
   1bcf2:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1bcf4:	6930      	ldr	r0, [r6, #16]
   1bcf6:	f00d fbce 	bl	29496 <k_sem_give>
	qspi_device_uninit(dev);
   1bcfa:	4630      	mov	r0, r6
   1bcfc:	f7ff fdec 	bl	1b8d8 <qspi_device_uninit>
	return rv;
   1bd00:	e7bd      	b.n	1bc7e <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1bd02:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1bd06:	d30a      	bcc.n	1bd1e <qspi_nor_erase+0xda>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1bd08:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1bd0c:	b953      	cbnz	r3, 1bd24 <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1bd0e:	4641      	mov	r1, r8
   1bd10:	2001      	movs	r0, #1
   1bd12:	f002 ffc1 	bl	1ec98 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1bd16:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1bd1a:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   1bd1c:	e7d5      	b.n	1bcca <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1bd1e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1bd22:	d309      	bcc.n	1bd38 <qspi_nor_erase+0xf4>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1bd24:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1bd28:	b930      	cbnz	r0, 1bd38 <qspi_nor_erase+0xf4>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1bd2a:	4641      	mov	r1, r8
   1bd2c:	f002 ffb4 	bl	1ec98 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1bd30:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1bd34:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   1bd36:	e7c8      	b.n	1bcca <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1bd38:	4b13      	ldr	r3, [pc, #76]	; (1bd88 <qspi_nor_erase+0x144>)
   1bd3a:	2201      	movs	r2, #1
   1bd3c:	9302      	str	r3, [sp, #8]
   1bd3e:	2300      	movs	r3, #0
   1bd40:	490f      	ldr	r1, [pc, #60]	; (1bd80 <qspi_nor_erase+0x13c>)
   1bd42:	4618      	mov	r0, r3
   1bd44:	e9cd 3300 	strd	r3, r3, [sp]
   1bd48:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1bd4c:	f00d fbab 	bl	294a6 <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
   1bd50:	490e      	ldr	r1, [pc, #56]	; (1bd8c <qspi_nor_erase+0x148>)
   1bd52:	6930      	ldr	r0, [r6, #16]
   1bd54:	f7ff fd3e 	bl	1b7d4 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1bd58:	4f0c      	ldr	r7, [pc, #48]	; (1bd8c <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1bd5a:	4b0d      	ldr	r3, [pc, #52]	; (1bd90 <qspi_nor_erase+0x14c>)
   1bd5c:	2201      	movs	r2, #1
   1bd5e:	9302      	str	r3, [sp, #8]
   1bd60:	2300      	movs	r3, #0
   1bd62:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1bd66:	4618      	mov	r0, r3
   1bd68:	e9cd 3300 	strd	r3, r3, [sp]
   1bd6c:	4904      	ldr	r1, [pc, #16]	; (1bd80 <qspi_nor_erase+0x13c>)
   1bd6e:	f00d fb9a 	bl	294a6 <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
   1bd72:	4638      	mov	r0, r7
   1bd74:	f7ff fd14 	bl	1b7a0 <qspi_get_zephyr_ret_code>
   1bd78:	4604      	mov	r4, r0
			break;
   1bd7a:	e7b0      	b.n	1bcde <qspi_nor_erase+0x9a>
   1bd7c:	000312f6 	.word	0x000312f6
   1bd80:	0002c164 	.word	0x0002c164
   1bd84:	0bad0000 	.word	0x0bad0000
   1bd88:	00031340 	.word	0x00031340
   1bd8c:	0bad0004 	.word	0x0bad0004
   1bd90:	0003135e 	.word	0x0003135e

0001bd94 <qspi_nor_write>:
{
   1bd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bd98:	4605      	mov	r5, r0
   1bd9a:	460f      	mov	r7, r1
   1bd9c:	461e      	mov	r6, r3
	if (!src) {
   1bd9e:	4690      	mov	r8, r2
{
   1bda0:	b088      	sub	sp, #32
	if (!src) {
   1bda2:	b1ca      	cbz	r2, 1bdd8 <qspi_nor_write+0x44>
	if ((size == 0)
   1bda4:	b1c3      	cbz	r3, 1bdd8 <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1bda6:	2b04      	cmp	r3, #4
   1bda8:	d901      	bls.n	1bdae <qspi_nor_write+0x1a>
   1bdaa:	079a      	lsls	r2, r3, #30
   1bdac:	d114      	bne.n	1bdd8 <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
   1bdae:	07bb      	lsls	r3, r7, #30
   1bdb0:	d112      	bne.n	1bdd8 <qspi_nor_write+0x44>
	if (addr < 0 ||
   1bdb2:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   1bdb4:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1bdb6:	db03      	blt.n	1bdc0 <qspi_nor_write+0x2c>
   1bdb8:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1bdba:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   1bdbc:	4293      	cmp	r3, r2
   1bdbe:	d911      	bls.n	1bde4 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   1bdc0:	4b40      	ldr	r3, [pc, #256]	; (1bec4 <qspi_nor_write+0x130>)
   1bdc2:	2201      	movs	r2, #1
   1bdc4:	9302      	str	r3, [sp, #8]
   1bdc6:	2300      	movs	r3, #0
   1bdc8:	e9cd 7603 	strd	r7, r6, [sp, #12]
   1bdcc:	4618      	mov	r0, r3
   1bdce:	e9cd 3300 	strd	r3, r3, [sp]
   1bdd2:	493d      	ldr	r1, [pc, #244]	; (1bec8 <qspi_nor_write+0x134>)
   1bdd4:	f00d fb67 	bl	294a6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1bdd8:	f06f 0415 	mvn.w	r4, #21
}
   1bddc:	4620      	mov	r0, r4
   1bdde:	b008      	add	sp, #32
   1bde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   1bde4:	4628      	mov	r0, r5
   1bde6:	f7ff fd03 	bl	1b7f0 <qspi_device_init>
	if (rc != 0) {
   1bdea:	4604      	mov	r4, r0
   1bdec:	2800      	cmp	r0, #0
   1bdee:	d160      	bne.n	1beb2 <qspi_nor_write+0x11e>
	qspi_trans_lock(dev);
   1bdf0:	6928      	ldr	r0, [r5, #16]
   1bdf2:	f00d fb6e 	bl	294d2 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1bdf6:	4621      	mov	r1, r4
   1bdf8:	4628      	mov	r0, r5
   1bdfa:	f00d fb70 	bl	294de <qspi_nor_write_protection_set>
   1bdfe:	4604      	mov	r4, r0
	qspi_lock(dev);
   1be00:	6928      	ldr	r0, [r5, #16]
   1be02:	f00d fb5f 	bl	294c4 <qspi_lock.isra.0>
	if (!res) {
   1be06:	2c00      	cmp	r4, #0
   1be08:	d140      	bne.n	1be8c <qspi_nor_write+0xf8>
		if (size < 4U) {
   1be0a:	2e03      	cmp	r6, #3
   1be0c:	d81c      	bhi.n	1be48 <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1be0e:	463a      	mov	r2, r7
   1be10:	2104      	movs	r1, #4
   1be12:	a807      	add	r0, sp, #28
   1be14:	f00e f811 	bl	29e3a <nrfx_qspi_read>
   1be18:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1be1a:	4601      	mov	r1, r0
   1be1c:	6928      	ldr	r0, [r5, #16]
   1be1e:	f7ff fcd9 	bl	1b7d4 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1be22:	4b2a      	ldr	r3, [pc, #168]	; (1becc <qspi_nor_write+0x138>)
   1be24:	429c      	cmp	r4, r3
   1be26:	d131      	bne.n	1be8c <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
   1be28:	4632      	mov	r2, r6
   1be2a:	4641      	mov	r1, r8
   1be2c:	a807      	add	r0, sp, #28
   1be2e:	f00e ff7f 	bl	2ad30 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1be32:	463a      	mov	r2, r7
   1be34:	2104      	movs	r1, #4
   1be36:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
   1be38:	f00d fffc 	bl	29e34 <nrfx_qspi_write>
   1be3c:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1be3e:	4601      	mov	r1, r0
   1be40:	6928      	ldr	r0, [r5, #16]
   1be42:	f7ff fcc7 	bl	1b7d4 <qspi_wait_for_completion.isra.0>
   1be46:	e021      	b.n	1be8c <qspi_nor_write+0xf8>
   1be48:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1be4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1be50:	d033      	beq.n	1beba <qspi_nor_write+0x126>
			if (res == NRFX_SUCCESS) {
   1be52:	f8df a078 	ldr.w	sl, [pc, #120]	; 1becc <qspi_nor_write+0x138>
			size_t len = MIN(slen, sizeof(buf));
   1be56:	2e04      	cmp	r6, #4
   1be58:	46b1      	mov	r9, r6
   1be5a:	bf28      	it	cs
   1be5c:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   1be60:	4641      	mov	r1, r8
   1be62:	464a      	mov	r2, r9
   1be64:	a807      	add	r0, sp, #28
   1be66:	f00e ff63 	bl	2ad30 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1be6a:	463a      	mov	r2, r7
   1be6c:	2104      	movs	r1, #4
   1be6e:	a807      	add	r0, sp, #28
   1be70:	f00d ffe0 	bl	29e34 <nrfx_qspi_write>
   1be74:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1be76:	4601      	mov	r1, r0
   1be78:	6928      	ldr	r0, [r5, #16]
   1be7a:	f7ff fcab 	bl	1b7d4 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1be7e:	4554      	cmp	r4, sl
   1be80:	d104      	bne.n	1be8c <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1be82:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   1be86:	44c8      	add	r8, r9
				addr += len;
   1be88:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1be8a:	d1e4      	bne.n	1be56 <qspi_nor_write+0xc2>
	k_sem_give(&dev_data->sem);
   1be8c:	6928      	ldr	r0, [r5, #16]
   1be8e:	3018      	adds	r0, #24
   1be90:	f00d fb01 	bl	29496 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1be94:	2101      	movs	r1, #1
   1be96:	4628      	mov	r0, r5
   1be98:	f00d fb21 	bl	294de <qspi_nor_write_protection_set>
   1be9c:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1be9e:	6928      	ldr	r0, [r5, #16]
   1bea0:	f00d faf9 	bl	29496 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1bea4:	2c00      	cmp	r4, #0
   1bea6:	bf14      	ite	ne
   1bea8:	4620      	movne	r0, r4
   1beaa:	4630      	moveq	r0, r6
   1beac:	f7ff fc78 	bl	1b7a0 <qspi_get_zephyr_ret_code>
   1beb0:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1beb2:	4628      	mov	r0, r5
   1beb4:	f7ff fd10 	bl	1b8d8 <qspi_device_uninit>
	return rc;
   1beb8:	e790      	b.n	1bddc <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
   1beba:	463a      	mov	r2, r7
   1bebc:	4631      	mov	r1, r6
   1bebe:	4640      	mov	r0, r8
   1bec0:	e7ba      	b.n	1be38 <qspi_nor_write+0xa4>
   1bec2:	bf00      	nop
   1bec4:	0003137c 	.word	0x0003137c
   1bec8:	0002c164 	.word	0x0002c164
   1becc:	0bad0000 	.word	0x0bad0000

0001bed0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1bed0:	4b02      	ldr	r3, [pc, #8]	; (1bedc <flash_nrf_pages_layout+0xc>)
   1bed2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1bed4:	2301      	movs	r3, #1
   1bed6:	6013      	str	r3, [r2, #0]
}
   1bed8:	4770      	bx	lr
   1beda:	bf00      	nop
   1bedc:	200229ac 	.word	0x200229ac

0001bee0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1bee0:	4800      	ldr	r0, [pc, #0]	; (1bee4 <flash_nrf_get_parameters+0x4>)
   1bee2:	4770      	bx	lr
   1bee4:	0002ce3c 	.word	0x0002ce3c

0001bee8 <flash_nrf_read>:
{
   1bee8:	b570      	push	{r4, r5, r6, lr}
   1beea:	460c      	mov	r4, r1
   1beec:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1beee:	4619      	mov	r1, r3
   1bef0:	4620      	mov	r0, r4
{
   1bef2:	461d      	mov	r5, r3
   1bef4:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1bef6:	f00d fb22 	bl	2953e <is_regular_addr_valid>
   1befa:	4603      	mov	r3, r0
   1befc:	b968      	cbnz	r0, 1bf1a <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1befe:	4a0f      	ldr	r2, [pc, #60]	; (1bf3c <flash_nrf_read+0x54>)
   1bf00:	9000      	str	r0, [sp, #0]
   1bf02:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1bf06:	e9cd 4503 	strd	r4, r5, [sp, #12]
   1bf0a:	2201      	movs	r2, #1
   1bf0c:	490c      	ldr	r1, [pc, #48]	; (1bf40 <flash_nrf_read+0x58>)
   1bf0e:	f00d fb27 	bl	29560 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1bf12:	f06f 0015 	mvn.w	r0, #21
}
   1bf16:	b006      	add	sp, #24
   1bf18:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1bf1a:	b165      	cbz	r5, 1bf36 <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   1bf1c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1bf20:	462a      	mov	r2, r5
   1bf22:	4621      	mov	r1, r4
   1bf24:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   1bf26:	da04      	bge.n	1bf32 <flash_nrf_read+0x4a>
}
   1bf28:	b006      	add	sp, #24
   1bf2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   1bf2e:	f00a b9e1 	b.w	262f4 <soc_secure_mem_read>
   1bf32:	f00e fefd 	bl	2ad30 <memcpy>
		return 0;
   1bf36:	2000      	movs	r0, #0
   1bf38:	e7ed      	b.n	1bf16 <flash_nrf_read+0x2e>
   1bf3a:	bf00      	nop
   1bf3c:	000313dc 	.word	0x000313dc
   1bf40:	0002c0fc 	.word	0x0002c0fc

0001bf44 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1bf44:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1bf46:	2201      	movs	r2, #1
   1bf48:	4806      	ldr	r0, [pc, #24]	; (1bf64 <nrf_flash_init+0x20>)
   1bf4a:	4611      	mov	r1, r2
   1bf4c:	f00e fd39 	bl	2a9c2 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1bf50:	f00d ff6a 	bl	29e28 <nrfx_nvmc_flash_page_count_get>
   1bf54:	4c04      	ldr	r4, [pc, #16]	; (1bf68 <nrf_flash_init+0x24>)
   1bf56:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1bf58:	f00d ff63 	bl	29e22 <nrfx_nvmc_flash_page_size_get>
   1bf5c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1bf5e:	2000      	movs	r0, #0
   1bf60:	bd10      	pop	{r4, pc}
   1bf62:	bf00      	nop
   1bf64:	200229b4 	.word	0x200229b4
   1bf68:	200229ac 	.word	0x200229ac

0001bf6c <flash_nrf_erase>:
{
   1bf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf6e:	b087      	sub	sp, #28
   1bf70:	460e      	mov	r6, r1
   1bf72:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1bf74:	f00d ff55 	bl	29e22 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1bf78:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1bf7a:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1bf7c:	4630      	mov	r0, r6
   1bf7e:	f00d fade 	bl	2953e <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1bf82:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   1bf84:	4603      	mov	r3, r0
   1bf86:	b388      	cbz	r0, 1bfec <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1bf88:	fbb6 f3f5 	udiv	r3, r6, r5
   1bf8c:	fb05 6313 	mls	r3, r5, r3, r6
   1bf90:	b923      	cbnz	r3, 1bf9c <flash_nrf_erase+0x30>
   1bf92:	fbb4 f3f5 	udiv	r3, r4, r5
   1bf96:	fb05 4313 	mls	r3, r5, r3, r4
   1bf9a:	b173      	cbz	r3, 1bfba <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1bf9c:	4b18      	ldr	r3, [pc, #96]	; (1c000 <flash_nrf_erase+0x94>)
   1bf9e:	2201      	movs	r2, #1
   1bfa0:	9302      	str	r3, [sp, #8]
   1bfa2:	2300      	movs	r3, #0
   1bfa4:	4618      	mov	r0, r3
   1bfa6:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1bfaa:	e9cd 3300 	strd	r3, r3, [sp]
   1bfae:	4915      	ldr	r1, [pc, #84]	; (1c004 <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1bfb0:	f00d fad6 	bl	29560 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1bfb4:	f06f 0015 	mvn.w	r0, #21
   1bfb8:	e002      	b.n	1bfc0 <flash_nrf_erase+0x54>
		if (!n_pages) {
   1bfba:	42a5      	cmp	r5, r4
   1bfbc:	d902      	bls.n	1bfc4 <flash_nrf_erase+0x58>
			return 0;
   1bfbe:	2000      	movs	r0, #0
}
   1bfc0:	b007      	add	sp, #28
   1bfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   1bfc4:	f04f 32ff 	mov.w	r2, #4294967295
   1bfc8:	f04f 33ff 	mov.w	r3, #4294967295
   1bfcc:	480e      	ldr	r0, [pc, #56]	; (1c008 <flash_nrf_erase+0x9c>)
   1bfce:	f004 fecf 	bl	20d70 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1bfd2:	f00d ff26 	bl	29e22 <nrfx_nvmc_flash_page_size_get>
   1bfd6:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1bfd8:	4638      	mov	r0, r7
   1bfda:	f002 fad5 	bl	1e588 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1bfde:	1b64      	subs	r4, r4, r5
   1bfe0:	442f      	add	r7, r5
   1bfe2:	d1f9      	bne.n	1bfd8 <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
   1bfe4:	4808      	ldr	r0, [pc, #32]	; (1c008 <flash_nrf_erase+0x9c>)
   1bfe6:	f004 fe7f 	bl	20ce8 <z_impl_k_sem_give>
}
   1bfea:	e7e8      	b.n	1bfbe <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1bfec:	4a07      	ldr	r2, [pc, #28]	; (1c00c <flash_nrf_erase+0xa0>)
   1bfee:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1bff2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1bff6:	4903      	ldr	r1, [pc, #12]	; (1c004 <flash_nrf_erase+0x98>)
   1bff8:	2201      	movs	r2, #1
   1bffa:	9000      	str	r0, [sp, #0]
   1bffc:	e7d8      	b.n	1bfb0 <flash_nrf_erase+0x44>
   1bffe:	bf00      	nop
   1c000:	000313f9 	.word	0x000313f9
   1c004:	0002c0fc 	.word	0x0002c0fc
   1c008:	200229b4 	.word	0x200229b4
   1c00c:	000313dc 	.word	0x000313dc

0001c010 <flash_nrf_write>:
{
   1c010:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c012:	460e      	mov	r6, r1
   1c014:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1c016:	4619      	mov	r1, r3
   1c018:	4630      	mov	r0, r6
{
   1c01a:	461c      	mov	r4, r3
   1c01c:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   1c01e:	f00d fa8e 	bl	2953e <is_regular_addr_valid>
   1c022:	4603      	mov	r3, r0
   1c024:	b968      	cbnz	r0, 1c042 <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c026:	4a1d      	ldr	r2, [pc, #116]	; (1c09c <flash_nrf_write+0x8c>)
   1c028:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1c02c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1c030:	2201      	movs	r2, #1
   1c032:	491b      	ldr	r1, [pc, #108]	; (1c0a0 <flash_nrf_write+0x90>)
   1c034:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c036:	f00d fa93 	bl	29560 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1c03a:	f06f 0015 	mvn.w	r0, #21
}
   1c03e:	b007      	add	sp, #28
   1c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1c042:	ea46 0504 	orr.w	r5, r6, r4
   1c046:	f015 0503 	ands.w	r5, r5, #3
   1c04a:	d00a      	beq.n	1c062 <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c04c:	4b15      	ldr	r3, [pc, #84]	; (1c0a4 <flash_nrf_write+0x94>)
   1c04e:	2201      	movs	r2, #1
   1c050:	9302      	str	r3, [sp, #8]
   1c052:	2300      	movs	r3, #0
   1c054:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1c058:	4618      	mov	r0, r3
   1c05a:	e9cd 3300 	strd	r3, r3, [sp]
   1c05e:	4910      	ldr	r1, [pc, #64]	; (1c0a0 <flash_nrf_write+0x90>)
   1c060:	e7e9      	b.n	1c036 <flash_nrf_write+0x26>
	if (!len) {
   1c062:	b1a4      	cbz	r4, 1c08e <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   1c064:	f04f 32ff 	mov.w	r2, #4294967295
   1c068:	f04f 33ff 	mov.w	r3, #4294967295
   1c06c:	480e      	ldr	r0, [pc, #56]	; (1c0a8 <flash_nrf_write+0x98>)
   1c06e:	f004 fe7f 	bl	20d70 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1c072:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1c076:	42a5      	cmp	r5, r4
   1c078:	eb05 0006 	add.w	r0, r5, r6
   1c07c:	d109      	bne.n	1c092 <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c07e:	4a0b      	ldr	r2, [pc, #44]	; (1c0ac <flash_nrf_write+0x9c>)
   1c080:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c084:	07db      	lsls	r3, r3, #31
   1c086:	d5fb      	bpl.n	1c080 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   1c088:	4807      	ldr	r0, [pc, #28]	; (1c0a8 <flash_nrf_write+0x98>)
   1c08a:	f004 fe2d 	bl	20ce8 <z_impl_k_sem_give>
	return ret;
   1c08e:	2000      	movs	r0, #0
   1c090:	e7d5      	b.n	1c03e <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1c092:	5979      	ldr	r1, [r7, r5]
   1c094:	f002 faaa 	bl	1e5ec <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1c098:	3504      	adds	r5, #4
}
   1c09a:	e7ec      	b.n	1c076 <flash_nrf_write+0x66>
   1c09c:	000313dc 	.word	0x000313dc
   1c0a0:	0002c0fc 	.word	0x0002c0fc
   1c0a4:	00031418 	.word	0x00031418
   1c0a8:	200229b4 	.word	0x200229b4
   1c0ac:	40039000 	.word	0x40039000

0001c0b0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1c0b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1c0b2:	ab0b      	add	r3, sp, #44	; 0x2c
   1c0b4:	9305      	str	r3, [sp, #20]
   1c0b6:	9303      	str	r3, [sp, #12]
   1c0b8:	4b05      	ldr	r3, [pc, #20]	; (1c0d0 <z_log_msg_runtime_create.constprop.0+0x20>)
   1c0ba:	2201      	movs	r2, #1
   1c0bc:	9302      	str	r3, [sp, #8]
   1c0be:	2300      	movs	r3, #0
   1c0c0:	4618      	mov	r0, r3
   1c0c2:	e9cd 3300 	strd	r3, r3, [sp]
   1c0c6:	f7f3 f8a9 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   1c0ca:	b007      	add	sp, #28
   1c0cc:	f85d fb04 	ldr.w	pc, [sp], #4
   1c0d0:	00031457 	.word	0x00031457

0001c0d4 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1c0d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c0d6:	461d      	mov	r5, r3
	return config->uarte_regs;
   1c0d8:	6843      	ldr	r3, [r0, #4]
{
   1c0da:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1c0dc:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1c0de:	f8d3 c000 	ldr.w	ip, [r3]
   1c0e2:	f04f 0320 	mov.w	r3, #32
   1c0e6:	f3ef 8711 	mrs	r7, BASEPRI
   1c0ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0ee:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1c0f2:	68e3      	ldr	r3, [r4, #12]
   1c0f4:	68d8      	ldr	r0, [r3, #12]
   1c0f6:	b138      	cbz	r0, 1c108 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1c0f8:	f387 8811 	msr	BASEPRI, r7
   1c0fc:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1c100:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1c104:	b003      	add	sp, #12
   1c106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1c108:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1c10a:	68e3      	ldr	r3, [r4, #12]
   1c10c:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c10e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1c112:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1c116:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1c11a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1c11e:	68e3      	ldr	r3, [r4, #12]
   1c120:	d111      	bne.n	1c146 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1c122:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1c124:	68e3      	ldr	r3, [r4, #12]
   1c126:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1c128:	4621      	mov	r1, r4
   1c12a:	4630      	mov	r0, r6
   1c12c:	f00d fbd3 	bl	298d6 <start_tx_locked>
   1c130:	f387 8811 	msr	BASEPRI, r7
   1c134:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1c138:	7ae3      	ldrb	r3, [r4, #11]
   1c13a:	2b01      	cmp	r3, #1
   1c13c:	d101      	bne.n	1c142 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1c13e:	1c6b      	adds	r3, r5, #1
   1c140:	d106      	bne.n	1c150 <uarte_nrfx_tx+0x7c>
	return 0;
   1c142:	2000      	movs	r0, #0
   1c144:	e7de      	b.n	1c104 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1c146:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1c148:	4620      	mov	r0, r4
   1c14a:	f00d fb3d 	bl	297c8 <setup_tx_cache>
   1c14e:	e7eb      	b.n	1c128 <uarte_nrfx_tx+0x54>
   1c150:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1c154:	2100      	movs	r1, #0
   1c156:	480a      	ldr	r0, [pc, #40]	; (1c180 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1c158:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1c15c:	2300      	movs	r3, #0
   1c15e:	fbc5 0106 	smlal	r0, r1, r5, r6
   1c162:	4a08      	ldr	r2, [pc, #32]	; (1c184 <uarte_nrfx_tx+0xb0>)
   1c164:	f7ec fec4 	bl	8ef0 <__aeabi_uldivmod>
   1c168:	68e4      	ldr	r4, [r4, #12]
   1c16a:	4602      	mov	r2, r0
   1c16c:	460b      	mov	r3, r1
   1c16e:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1c170:	2000      	movs	r0, #0
   1c172:	2100      	movs	r1, #0
   1c174:	e9cd 0100 	strd	r0, r1, [sp]
   1c178:	4620      	mov	r0, r4
   1c17a:	f007 f9c7 	bl	2350c <z_impl_k_timer_start>
   1c17e:	e7e0      	b.n	1c142 <uarte_nrfx_tx+0x6e>
   1c180:	000f423f 	.word	0x000f423f
   1c184:	000f4240 	.word	0x000f4240

0001c188 <uarte_nrfx_configure>:
{
   1c188:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1c18a:	794b      	ldrb	r3, [r1, #5]
   1c18c:	2b01      	cmp	r3, #1
   1c18e:	d029      	beq.n	1c1e4 <uarte_nrfx_configure+0x5c>
   1c190:	2b03      	cmp	r3, #3
   1c192:	d124      	bne.n	1c1de <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1c194:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c196:	798b      	ldrb	r3, [r1, #6]
   1c198:	2b03      	cmp	r3, #3
   1c19a:	d120      	bne.n	1c1de <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1c19c:	79ce      	ldrb	r6, [r1, #7]
   1c19e:	b10e      	cbz	r6, 1c1a4 <uarte_nrfx_configure+0x1c>
   1c1a0:	2e01      	cmp	r6, #1
   1c1a2:	d11c      	bne.n	1c1de <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1c1a4:	790a      	ldrb	r2, [r1, #4]
   1c1a6:	2a01      	cmp	r2, #1
   1c1a8:	d01e      	beq.n	1c1e8 <uarte_nrfx_configure+0x60>
   1c1aa:	2a02      	cmp	r2, #2
   1c1ac:	d020      	beq.n	1c1f0 <uarte_nrfx_configure+0x68>
   1c1ae:	b9b2      	cbnz	r2, 1c1de <uarte_nrfx_configure+0x56>
   1c1b0:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c1b2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1c1b4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1c1b6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1c1ba:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1c1be:	d06e      	beq.n	1c29e <uarte_nrfx_configure+0x116>
   1c1c0:	d833      	bhi.n	1c22a <uarte_nrfx_configure+0xa2>
   1c1c2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c1c6:	d06d      	beq.n	1c2a4 <uarte_nrfx_configure+0x11c>
   1c1c8:	d81c      	bhi.n	1c204 <uarte_nrfx_configure+0x7c>
   1c1ca:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c1ce:	d06b      	beq.n	1c2a8 <uarte_nrfx_configure+0x120>
   1c1d0:	d810      	bhi.n	1c1f4 <uarte_nrfx_configure+0x6c>
   1c1d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c1d6:	d06a      	beq.n	1c2ae <uarte_nrfx_configure+0x126>
   1c1d8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c1dc:	d06a      	beq.n	1c2b4 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1c1de:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c1e2:	e05b      	b.n	1c29c <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1c1e4:	2700      	movs	r7, #0
   1c1e6:	e7d6      	b.n	1c196 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1c1e8:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1c1ec:	220e      	movs	r2, #14
   1c1ee:	e7e0      	b.n	1c1b2 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1c1f0:	2400      	movs	r4, #0
   1c1f2:	e7fb      	b.n	1c1ec <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1c1f4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c1f8:	d05f      	beq.n	1c2ba <uarte_nrfx_configure+0x132>
   1c1fa:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c1fe:	d1ee      	bne.n	1c1de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1c200:	4b38      	ldr	r3, [pc, #224]	; (1c2e4 <uarte_nrfx_configure+0x15c>)
   1c202:	e03c      	b.n	1c27e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c204:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c208:	d05a      	beq.n	1c2c0 <uarte_nrfx_configure+0x138>
   1c20a:	d807      	bhi.n	1c21c <uarte_nrfx_configure+0x94>
   1c20c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c210:	d058      	beq.n	1c2c4 <uarte_nrfx_configure+0x13c>
   1c212:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c216:	d1e2      	bne.n	1c1de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1c218:	4b33      	ldr	r3, [pc, #204]	; (1c2e8 <uarte_nrfx_configure+0x160>)
   1c21a:	e030      	b.n	1c27e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c21c:	f647 2512 	movw	r5, #31250	; 0x7a12
   1c220:	42ab      	cmp	r3, r5
   1c222:	d1dc      	bne.n	1c1de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1c224:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c228:	e029      	b.n	1c27e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c22a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c22e:	d04b      	beq.n	1c2c8 <uarte_nrfx_configure+0x140>
   1c230:	d813      	bhi.n	1c25a <uarte_nrfx_configure+0xd2>
   1c232:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c236:	d04a      	beq.n	1c2ce <uarte_nrfx_configure+0x146>
   1c238:	d809      	bhi.n	1c24e <uarte_nrfx_configure+0xc6>
   1c23a:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1c23e:	42ab      	cmp	r3, r5
   1c240:	d047      	beq.n	1c2d2 <uarte_nrfx_configure+0x14a>
   1c242:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c246:	d1ca      	bne.n	1c1de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1c248:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1c24c:	e017      	b.n	1c27e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c24e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c252:	d1c4      	bne.n	1c1de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1c254:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1c258:	e011      	b.n	1c27e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c25a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c25e:	d03b      	beq.n	1c2d8 <uarte_nrfx_configure+0x150>
   1c260:	d808      	bhi.n	1c274 <uarte_nrfx_configure+0xec>
   1c262:	4d22      	ldr	r5, [pc, #136]	; (1c2ec <uarte_nrfx_configure+0x164>)
   1c264:	42ab      	cmp	r3, r5
   1c266:	d03a      	beq.n	1c2de <uarte_nrfx_configure+0x156>
   1c268:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c26c:	d1b7      	bne.n	1c1de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1c26e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1c272:	e004      	b.n	1c27e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c274:	4d1e      	ldr	r5, [pc, #120]	; (1c2f0 <uarte_nrfx_configure+0x168>)
   1c276:	42ab      	cmp	r3, r5
   1c278:	d1b1      	bne.n	1c1de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1c27a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1c27e:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c280:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1c284:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1c286:	433a      	orrs	r2, r7
   1c288:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1c28a:	4334      	orrs	r4, r6
   1c28c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c28e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1c292:	1d2b      	adds	r3, r5, #4
   1c294:	c903      	ldmia	r1, {r0, r1}
   1c296:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1c29a:	2000      	movs	r0, #0
}
   1c29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1c29e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1c2a2:	e7ec      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1c2a4:	4b13      	ldr	r3, [pc, #76]	; (1c2f4 <uarte_nrfx_configure+0x16c>)
   1c2a6:	e7ea      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1c2a8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c2ac:	e7e7      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1c2ae:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c2b2:	e7e4      	b.n	1c27e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c2b4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c2b8:	e7e1      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1c2ba:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c2be:	e7de      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1c2c0:	4b0d      	ldr	r3, [pc, #52]	; (1c2f8 <uarte_nrfx_configure+0x170>)
   1c2c2:	e7dc      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1c2c4:	4b0d      	ldr	r3, [pc, #52]	; (1c2fc <uarte_nrfx_configure+0x174>)
   1c2c6:	e7da      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1c2c8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1c2cc:	e7d7      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1c2ce:	4b0c      	ldr	r3, [pc, #48]	; (1c300 <uarte_nrfx_configure+0x178>)
   1c2d0:	e7d5      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1c2d2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c2d6:	e7d2      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1c2d8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c2dc:	e7cf      	b.n	1c27e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1c2de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c2e2:	e7cc      	b.n	1c27e <uarte_nrfx_configure+0xf6>
   1c2e4:	0013b000 	.word	0x0013b000
   1c2e8:	004ea000 	.word	0x004ea000
   1c2ec:	0003d090 	.word	0x0003d090
   1c2f0:	000f4240 	.word	0x000f4240
   1c2f4:	00275000 	.word	0x00275000
   1c2f8:	0075c000 	.word	0x0075c000
   1c2fc:	003af000 	.word	0x003af000
   1c300:	013a9000 	.word	0x013a9000

0001c304 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1c304:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1c306:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1c30a:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1c30e:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1c310:	f8d9 5000 	ldr.w	r5, [r9]
static int uarte_instance_init(const struct device *dev,
   1c314:	b087      	sub	sp, #28
   1c316:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1c31a:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1c31c:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1c320:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1c322:	aa05      	add	r2, sp, #20
   1c324:	4640      	mov	r0, r8
   1c326:	f00d fbb2 	bl	29a8e <pinctrl_lookup_state>
	if (ret < 0) {
   1c32a:	1e04      	subs	r4, r0, #0
   1c32c:	db25      	blt.n	1c37a <uarte_instance_init.constprop.0+0x76>
	return pinctrl_apply_state_direct(config, state);
   1c32e:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c330:	f8d8 2000 	ldr.w	r2, [r8]
   1c334:	7919      	ldrb	r1, [r3, #4]
   1c336:	6818      	ldr	r0, [r3, #0]
   1c338:	f00d fbbc 	bl	29ab4 <pinctrl_configure_pins>
	if (err < 0) {
   1c33c:	1e04      	subs	r4, r0, #0
   1c33e:	db1c      	blt.n	1c37a <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1c340:	4638      	mov	r0, r7
   1c342:	1d31      	adds	r1, r6, #4
   1c344:	f7ff ff20 	bl	1c188 <uarte_nrfx_configure>
	if (err) {
   1c348:	4604      	mov	r4, r0
   1c34a:	b9b0      	cbnz	r0, 1c37a <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1c34c:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1c350:	0799      	lsls	r1, r3, #30
   1c352:	d532      	bpl.n	1c3ba <uarte_instance_init.constprop.0+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1c354:	f106 001c 	add.w	r0, r6, #28
   1c358:	f001 fc3c 	bl	1dbd4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1c35c:	4b4f      	ldr	r3, [pc, #316]	; (1c49c <uarte_instance_init.constprop.0+0x198>)
   1c35e:	4298      	cmp	r0, r3
   1c360:	d00f      	beq.n	1c382 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
   1c362:	4b4f      	ldr	r3, [pc, #316]	; (1c4a0 <uarte_instance_init.constprop.0+0x19c>)
   1c364:	4620      	mov	r0, r4
   1c366:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1c36a:	9400      	str	r4, [sp, #0]
   1c36c:	4623      	mov	r3, r4
   1c36e:	2201      	movs	r2, #1
   1c370:	494c      	ldr	r1, [pc, #304]	; (1c4a4 <uarte_instance_init.constprop.0+0x1a0>)
   1c372:	f7ff fe9d 	bl	1c0b0 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1c376:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1c37a:	4620      	mov	r0, r4
   1c37c:	b007      	add	sp, #28
   1c37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c382:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1c384:	f115 0f0c 	cmn.w	r5, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1c388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c38c:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1c390:	d10b      	bne.n	1c3aa <uarte_instance_init.constprop.0+0xa6>
   1c392:	4945      	ldr	r1, [pc, #276]	; (1c4a8 <uarte_instance_init.constprop.0+0x1a4>)
   1c394:	4845      	ldr	r0, [pc, #276]	; (1c4ac <uarte_instance_init.constprop.0+0x1a8>)
   1c396:	f240 234e 	movw	r3, #590	; 0x24e
   1c39a:	4a45      	ldr	r2, [pc, #276]	; (1c4b0 <uarte_instance_init.constprop.0+0x1ac>)
   1c39c:	f009 ff5f 	bl	2625e <assert_print>
   1c3a0:	f240 214e 	movw	r1, #590	; 0x24e
   1c3a4:	4842      	ldr	r0, [pc, #264]	; (1c4b0 <uarte_instance_init.constprop.0+0x1ac>)
   1c3a6:	f009 ff53 	bl	26250 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1c3aa:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1c3ae:	2301      	movs	r3, #1
   1c3b0:	7f32      	ldrb	r2, [r6, #28]
   1c3b2:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1c3b4:	4a3f      	ldr	r2, [pc, #252]	; (1c4b4 <uarte_instance_init.constprop.0+0x1b0>)
   1c3b6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1c3ba:	68f3      	ldr	r3, [r6, #12]
   1c3bc:	2b00      	cmp	r3, #0
   1c3be:	d059      	beq.n	1c474 <uarte_instance_init.constprop.0+0x170>
    p_reg->INTENSET = mask;
   1c3c0:	2204      	movs	r2, #4
	return config->uarte_regs;
   1c3c2:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c3c4:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1c3c8:	681b      	ldr	r3, [r3, #0]
   1c3ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1c3ce:	2201      	movs	r2, #1
   1c3d0:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1c3d4:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1c3d8:	4937      	ldr	r1, [pc, #220]	; (1c4b8 <uarte_instance_init.constprop.0+0x1b4>)
   1c3da:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c3de:	2108      	movs	r1, #8
   1c3e0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c3e4:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1c3e8:	b1a1      	cbz	r1, 1c414 <uarte_instance_init.constprop.0+0x110>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c3ea:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c3ec:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1c3f0:	b91a      	cbnz	r2, 1c3fa <uarte_instance_init.constprop.0+0xf6>
   1c3f2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1c3f6:	2a00      	cmp	r2, #0
   1c3f8:	d0f8      	beq.n	1c3ec <uarte_instance_init.constprop.0+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c3fa:	2200      	movs	r2, #0
   1c3fc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1c400:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1c404:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1c408:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1c40c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1c410:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1c414:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1c418:	2200      	movs	r2, #0
   1c41a:	4928      	ldr	r1, [pc, #160]	; (1c4bc <uarte_instance_init.constprop.0+0x1b8>)
   1c41c:	3080      	adds	r0, #128	; 0x80
   1c41e:	f00e fba1 	bl	2ab64 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1c422:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1c426:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1c42a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1c42e:	2200      	movs	r2, #0
   1c430:	4923      	ldr	r1, [pc, #140]	; (1c4c0 <uarte_instance_init.constprop.0+0x1bc>)
   1c432:	3020      	adds	r0, #32
   1c434:	f00e fb96 	bl	2ab64 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1c438:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1c43c:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1c440:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c444:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1c446:	bf5c      	itt	pl
   1c448:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1c44c:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c450:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c454:	06db      	lsls	r3, r3, #27
   1c456:	bf44      	itt	mi
   1c458:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1c45c:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c460:	6973      	ldr	r3, [r6, #20]
   1c462:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c466:	2300      	movs	r3, #0
   1c468:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c46c:	2301      	movs	r3, #1
   1c46e:	60ab      	str	r3, [r5, #8]
   1c470:	60eb      	str	r3, [r5, #12]
	return 0;
   1c472:	e782      	b.n	1c37a <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c474:	2308      	movs	r3, #8
   1c476:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1c47a:	f899 3008 	ldrb.w	r3, [r9, #8]
   1c47e:	2b00      	cmp	r3, #0
   1c480:	d1de      	bne.n	1c440 <uarte_instance_init.constprop.0+0x13c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c482:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1c486:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c48a:	69b3      	ldr	r3, [r6, #24]
   1c48c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1c490:	2301      	movs	r3, #1
   1c492:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c496:	602b      	str	r3, [r5, #0]
}
   1c498:	e7d2      	b.n	1c440 <uarte_instance_init.constprop.0+0x13c>
   1c49a:	bf00      	nop
   1c49c:	0bad0000 	.word	0x0bad0000
   1c4a0:	00031457 	.word	0x00031457
   1c4a4:	0002c184 	.word	0x0002c184
   1c4a8:	0002e079 	.word	0x0002e079
   1c4ac:	0002d095 	.word	0x0002d095
   1c4b0:	0002e041 	.word	0x0002e041
   1c4b4:	40017000 	.word	0x40017000
   1c4b8:	000a0210 	.word	0x000a0210
   1c4bc:	00029949 	.word	0x00029949
   1c4c0:	00029a19 	.word	0x00029a19

0001c4c4 <uarte_nrfx_poll_out>:
{
   1c4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4c8:	4604      	mov	r4, r0
   1c4ca:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1c4cc:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c4ce:	f00e fa27 	bl	2a920 <k_is_in_isr>
   1c4d2:	b9b0      	cbnz	r0, 1c502 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1c4d4:	4b2a      	ldr	r3, [pc, #168]	; (1c580 <uarte_nrfx_poll_out+0xbc>)
   1c4d6:	781b      	ldrb	r3, [r3, #0]
   1c4d8:	b19b      	cbz	r3, 1c502 <uarte_nrfx_poll_out+0x3e>
{
   1c4da:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1c4dc:	6860      	ldr	r0, [r4, #4]
   1c4de:	f00d f9ea 	bl	298b6 <is_tx_ready.isra.0>
   1c4e2:	2800      	cmp	r0, #0
   1c4e4:	d138      	bne.n	1c558 <uarte_nrfx_poll_out+0x94>
   1c4e6:	2001      	movs	r0, #1
   1c4e8:	f00d fc1e 	bl	29d28 <nrfx_busy_wait>
   1c4ec:	3f01      	subs	r7, #1
   1c4ee:	d1f5      	bne.n	1c4dc <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1c4f0:	2100      	movs	r1, #0
   1c4f2:	2021      	movs	r0, #33	; 0x21
   1c4f4:	f006 faec 	bl	22ad0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c4f8:	e7ef      	b.n	1c4da <uarte_nrfx_poll_out+0x16>
   1c4fa:	f381 8811 	msr	BASEPRI, r1
   1c4fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c502:	f04f 0320 	mov.w	r3, #32
   1c506:	f3ef 8111 	mrs	r1, BASEPRI
   1c50a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c50e:	f3bf 8f6f 	isb	sy
   1c512:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1c516:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1c518:	4640      	mov	r0, r8
   1c51a:	f00d f9cc 	bl	298b6 <is_tx_ready.isra.0>
   1c51e:	2800      	cmp	r0, #0
   1c520:	d0eb      	beq.n	1c4fa <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1c522:	68eb      	ldr	r3, [r5, #12]
   1c524:	b15b      	cbz	r3, 1c53e <uarte_nrfx_poll_out+0x7a>
   1c526:	68da      	ldr	r2, [r3, #12]
   1c528:	b14a      	cbz	r2, 1c53e <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1c52a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1c52e:	2a00      	cmp	r2, #0
   1c530:	da05      	bge.n	1c53e <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1c532:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1c536:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1c53a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1c53e:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1c540:	2201      	movs	r2, #1
	*data->char_out = c;
   1c542:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1c544:	4620      	mov	r0, r4
   1c546:	6969      	ldr	r1, [r5, #20]
   1c548:	f00d f85e 	bl	29608 <tx_start>
	__asm__ volatile(
   1c54c:	f387 8811 	msr	BASEPRI, r7
   1c550:	f3bf 8f6f 	isb	sy
}
   1c554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c558:	f04f 0320 	mov.w	r3, #32
   1c55c:	f3ef 8111 	mrs	r1, BASEPRI
   1c560:	f383 8812 	msr	BASEPRI_MAX, r3
   1c564:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1c568:	6860      	ldr	r0, [r4, #4]
   1c56a:	460f      	mov	r7, r1
   1c56c:	f00d f9a3 	bl	298b6 <is_tx_ready.isra.0>
   1c570:	2800      	cmp	r0, #0
   1c572:	d1e4      	bne.n	1c53e <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1c574:	f381 8811 	msr	BASEPRI, r1
   1c578:	f3bf 8f6f 	isb	sy
}
   1c57c:	e7b8      	b.n	1c4f0 <uarte_nrfx_poll_out+0x2c>
   1c57e:	bf00      	nop
   1c580:	20023b0a 	.word	0x20023b0a

0001c584 <uarte_nrfx_rx_enable>:
{
   1c584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1c588:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1c58c:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1c58e:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1c592:	4605      	mov	r5, r0
   1c594:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1c596:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1c598:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1c59c:	b172      	cbz	r2, 1c5bc <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1c59e:	4944      	ldr	r1, [pc, #272]	; (1c6b0 <uarte_nrfx_rx_enable+0x12c>)
   1c5a0:	f240 337d 	movw	r3, #893	; 0x37d
   1c5a4:	4a43      	ldr	r2, [pc, #268]	; (1c6b4 <uarte_nrfx_rx_enable+0x130>)
   1c5a6:	4844      	ldr	r0, [pc, #272]	; (1c6b8 <uarte_nrfx_rx_enable+0x134>)
   1c5a8:	f009 fe59 	bl	2625e <assert_print>
   1c5ac:	4843      	ldr	r0, [pc, #268]	; (1c6bc <uarte_nrfx_rx_enable+0x138>)
   1c5ae:	f009 fe56 	bl	2625e <assert_print>
   1c5b2:	f240 317d 	movw	r1, #893	; 0x37d
   1c5b6:	483f      	ldr	r0, [pc, #252]	; (1c6b4 <uarte_nrfx_rx_enable+0x130>)
   1c5b8:	f009 fe4a 	bl	26250 <assert_post_action>
	if (data->async->rx_enabled) {
   1c5bc:	68e2      	ldr	r2, [r4, #12]
   1c5be:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1c5c2:	2900      	cmp	r1, #0
   1c5c4:	d170      	bne.n	1c6a8 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1c5c6:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1c5ca:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1c5cc:	bfca      	itet	gt
   1c5ce:	2205      	movgt	r2, #5
   1c5d0:	235c      	movle	r3, #92	; 0x5c
   1c5d2:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1c5d6:	68e2      	ldr	r2, [r4, #12]
   1c5d8:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1c5da:	68e3      	ldr	r3, [r4, #12]
   1c5dc:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1c5e0:	68e3      	ldr	r3, [r4, #12]
   1c5e2:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1c5e4:	2300      	movs	r3, #0
   1c5e6:	68e2      	ldr	r2, [r4, #12]
   1c5e8:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1c5ea:	68e2      	ldr	r2, [r4, #12]
   1c5ec:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1c5ee:	68e2      	ldr	r2, [r4, #12]
   1c5f0:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c5f2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c5f6:	06da      	lsls	r2, r3, #27
   1c5f8:	d523      	bpl.n	1c642 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1c5fa:	68e1      	ldr	r1, [r4, #12]
   1c5fc:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1c600:	b1fe      	cbz	r6, 1c642 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1c602:	42be      	cmp	r6, r7
   1c604:	bf28      	it	cs
   1c606:	463e      	movcs	r6, r7
   1c608:	4640      	mov	r0, r8
   1c60a:	4632      	mov	r2, r6
   1c60c:	31c4      	adds	r1, #196	; 0xc4
   1c60e:	f00e fb8f 	bl	2ad30 <memcpy>
			if (!len) {
   1c612:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1c614:	44b0      	add	r8, r6
			if (!len) {
   1c616:	d114      	bne.n	1c642 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1c618:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1c61a:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1c61c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1c620:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1c622:	1b9b      	subs	r3, r3, r6
   1c624:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1c628:	f00d f81d 	bl	29666 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1c62c:	68e1      	ldr	r1, [r4, #12]
   1c62e:	4628      	mov	r0, r5
   1c630:	3158      	adds	r1, #88	; 0x58
   1c632:	f00d f831 	bl	29698 <rx_buf_release>
				notify_rx_disable(dev);
   1c636:	4628      	mov	r0, r5
   1c638:	f00d f846 	bl	296c8 <notify_rx_disable>
	return 0;
   1c63c:	2000      	movs	r0, #0
}
   1c63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c642:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c644:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1c648:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c64c:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1c650:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1c654:	2201      	movs	r2, #1
   1c656:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1c65a:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1c65e:	68e3      	ldr	r3, [r4, #12]
   1c660:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c664:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c668:	06db      	lsls	r3, r3, #27
   1c66a:	d519      	bpl.n	1c6a0 <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1c66c:	f04f 0320 	mov.w	r3, #32
   1c670:	f3ef 8111 	mrs	r1, BASEPRI
   1c674:	f383 8812 	msr	BASEPRI_MAX, r3
   1c678:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1c67c:	692b      	ldr	r3, [r5, #16]
   1c67e:	68db      	ldr	r3, [r3, #12]
   1c680:	b12b      	cbz	r3, 1c68e <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1c682:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1c686:	f042 0202 	orr.w	r2, r2, #2
   1c68a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c68e:	2208      	movs	r2, #8
	return config->uarte_regs;
   1c690:	686b      	ldr	r3, [r5, #4]
   1c692:	681b      	ldr	r3, [r3, #0]
   1c694:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1c698:	f381 8811 	msr	BASEPRI, r1
   1c69c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c6a0:	2301      	movs	r3, #1
   1c6a2:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1c6a6:	e7c9      	b.n	1c63c <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1c6a8:	f06f 000f 	mvn.w	r0, #15
   1c6ac:	e7c7      	b.n	1c63e <uarte_nrfx_rx_enable+0xba>
   1c6ae:	bf00      	nop
   1c6b0:	0003297c 	.word	0x0003297c
   1c6b4:	00031476 	.word	0x00031476
   1c6b8:	0002d095 	.word	0x0002d095
   1c6bc:	000314aa 	.word	0x000314aa

0001c6c0 <uarte_nrfx_isr_async>:
{
   1c6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1c6c4:	6843      	ldr	r3, [r0, #4]
{
   1c6c6:	4604      	mov	r4, r0
	return config->uarte_regs;
   1c6c8:	681d      	ldr	r5, [r3, #0]
{
   1c6ca:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c6cc:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1c6d0:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1c6d2:	b169      	cbz	r1, 1c6f0 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c6d4:	2200      	movs	r2, #0
   1c6d6:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1c6da:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1c6de:	68da      	ldr	r2, [r3, #12]
   1c6e0:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1c6e4:	3301      	adds	r3, #1
   1c6e6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1c6ea:	b008      	add	sp, #32
   1c6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c6f0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1c6f4:	b323      	cbz	r3, 1c740 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c6f6:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1c6fa:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1c6fe:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1c700:	2214      	movs	r2, #20
	return config->uarte_regs;
   1c702:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1c704:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c706:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c70a:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1c70e:	f00e fb49 	bl	2ada4 <memset>
   1c712:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1c714:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1c716:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1c71a:	f100 8103 	bmi.w	1c924 <uarte_nrfx_isr_async+0x264>
   1c71e:	07b3      	lsls	r3, r6, #30
   1c720:	f100 8102 	bmi.w	1c928 <uarte_nrfx_isr_async+0x268>
   1c724:	0777      	lsls	r7, r6, #29
   1c726:	f100 8101 	bmi.w	1c92c <uarte_nrfx_isr_async+0x26c>
   1c72a:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1c72e:	4620      	mov	r0, r4
   1c730:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1c732:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1c736:	f00c ff8f 	bl	29658 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1c73a:	4620      	mov	r0, r4
   1c73c:	f00d f822 	bl	29784 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c740:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1c744:	b38b      	cbz	r3, 1c7aa <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1c746:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1c74a:	06d8      	lsls	r0, r3, #27
   1c74c:	d52d      	bpl.n	1c7aa <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c74e:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1c752:	2201      	movs	r2, #1
   1c754:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1c758:	6926      	ldr	r6, [r4, #16]
   1c75a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1c75e:	6863      	ldr	r3, [r4, #4]
   1c760:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1c762:	68f3      	ldr	r3, [r6, #12]
   1c764:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1c768:	68f0      	ldr	r0, [r6, #12]
   1c76a:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1c76c:	f00e fa06 	bl	2ab7c <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1c770:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1c772:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1c776:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1c77a:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1c77e:	68f2      	ldr	r2, [r6, #12]
   1c780:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1c782:	1a1b      	subs	r3, r3, r0
   1c784:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1c786:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1c788:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1c78c:	4408      	add	r0, r1
	if (rx_len > 0) {
   1c78e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1c790:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1c792:	dd02      	ble.n	1c79a <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1c794:	4620      	mov	r0, r4
   1c796:	f00c ff66 	bl	29666 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1c79a:	68f1      	ldr	r1, [r6, #12]
   1c79c:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1c7a0:	2b00      	cmp	r3, #0
   1c7a2:	f040 80c5 	bne.w	1c930 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1c7a6:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c7aa:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1c7ae:	b383      	cbz	r3, 1c812 <uarte_nrfx_isr_async+0x152>
   1c7b0:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1c7b4:	bb6e      	cbnz	r6, 1c812 <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1c7b6:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c7b8:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1c7bc:	4631      	mov	r1, r6
   1c7be:	a803      	add	r0, sp, #12
   1c7c0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1c7c4:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1c7c6:	f00e faed 	bl	2ada4 <memset>
   1c7ca:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1c7cc:	a903      	add	r1, sp, #12
   1c7ce:	4620      	mov	r0, r4
	struct uart_event evt = {
   1c7d0:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1c7d4:	f00c ff40 	bl	29658 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1c7d8:	68fb      	ldr	r3, [r7, #12]
   1c7da:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1c7dc:	1c51      	adds	r1, r2, #1
   1c7de:	d018      	beq.n	1c812 <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1c7e0:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1c7e2:	68ff      	ldr	r7, [r7, #12]
   1c7e4:	498e      	ldr	r1, [pc, #568]	; (1ca20 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1c7e6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1c7e8:	468e      	mov	lr, r1
   1c7ea:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1c7ee:	4631      	mov	r1, r6
   1c7f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1c7f4:	fbcc e100 	smlal	lr, r1, ip, r0
   1c7f8:	2300      	movs	r3, #0
   1c7fa:	4670      	mov	r0, lr
   1c7fc:	4a89      	ldr	r2, [pc, #548]	; (1ca24 <uarte_nrfx_isr_async+0x364>)
   1c7fe:	f7ec fb77 	bl	8ef0 <__aeabi_uldivmod>
   1c802:	4602      	mov	r2, r0
   1c804:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1c806:	e9cd 0100 	strd	r0, r1, [sp]
   1c80a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1c80e:	f006 fe7d 	bl	2350c <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c812:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1c816:	b333      	cbz	r3, 1c866 <uarte_nrfx_isr_async+0x1a6>
   1c818:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1c81c:	bb1e      	cbnz	r6, 1c866 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c81e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1c822:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1c824:	4620      	mov	r0, r4
   1c826:	68f9      	ldr	r1, [r7, #12]
   1c828:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1c82c:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1c82e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1c832:	f00c ff31 	bl	29698 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1c836:	68f9      	ldr	r1, [r7, #12]
   1c838:	4620      	mov	r0, r4
   1c83a:	3164      	adds	r1, #100	; 0x64
   1c83c:	f00c ff2c 	bl	29698 <rx_buf_release>
	if (data->async->rx_enabled) {
   1c840:	68fb      	ldr	r3, [r7, #12]
   1c842:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1c846:	2a00      	cmp	r2, #0
   1c848:	f000 80a3 	beq.w	1c992 <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1c84c:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c850:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c854:	06d8      	lsls	r0, r3, #27
   1c856:	d503      	bpl.n	1c860 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1c858:	2102      	movs	r1, #2
   1c85a:	4620      	mov	r0, r4
   1c85c:	f00d f801 	bl	29862 <async_uart_release>
	notify_rx_disable(dev);
   1c860:	4620      	mov	r0, r4
   1c862:	f00c ff31 	bl	296c8 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c866:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1c86a:	b1db      	cbz	r3, 1c8a4 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1c86c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1c870:	05d9      	lsls	r1, r3, #23
   1c872:	d517      	bpl.n	1c8a4 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1c874:	6863      	ldr	r3, [r4, #4]
   1c876:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1c878:	f04f 0120 	mov.w	r1, #32
   1c87c:	f3ef 8211 	mrs	r2, BASEPRI
   1c880:	f381 8812 	msr	BASEPRI_MAX, r1
   1c884:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c888:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c88c:	b131      	cbz	r1, 1c89c <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c88e:	2100      	movs	r1, #0
   1c890:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1c894:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c898:	2101      	movs	r1, #1
   1c89a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1c89c:	f382 8811 	msr	BASEPRI, r2
   1c8a0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c8a4:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1c8a8:	2b00      	cmp	r3, #0
   1c8aa:	f43f af1e 	beq.w	1c6ea <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1c8ae:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1c8b2:	025a      	lsls	r2, r3, #9
   1c8b4:	f57f af19 	bpl.w	1c6ea <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1c8b8:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c8ba:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c8bc:	e9d3 7300 	ldrd	r7, r3, [r3]
   1c8c0:	06db      	lsls	r3, r3, #27
   1c8c2:	d46b      	bmi.n	1c99c <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1c8c4:	68eb      	ldr	r3, [r5, #12]
   1c8c6:	689b      	ldr	r3, [r3, #8]
   1c8c8:	2b00      	cmp	r3, #0
   1c8ca:	f43f af0e 	beq.w	1c6ea <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1c8ce:	f04f 0320 	mov.w	r3, #32
   1c8d2:	f3ef 8211 	mrs	r2, BASEPRI
   1c8d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c8da:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1c8de:	68eb      	ldr	r3, [r5, #12]
   1c8e0:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1c8e4:	2900      	cmp	r1, #0
   1c8e6:	bfac      	ite	ge
   1c8e8:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1c8ec:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1c8f0:	f382 8811 	msr	BASEPRI, r2
   1c8f4:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1c8f8:	68eb      	ldr	r3, [r5, #12]
   1c8fa:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1c8fe:	2a00      	cmp	r2, #0
   1c900:	d059      	beq.n	1c9b6 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1c902:	f04f 0320 	mov.w	r3, #32
   1c906:	f3ef 8611 	mrs	r6, BASEPRI
   1c90a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c90e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1c912:	4629      	mov	r1, r5
   1c914:	4620      	mov	r0, r4
   1c916:	f00c ffde 	bl	298d6 <start_tx_locked>
	__asm__ volatile(
   1c91a:	f386 8811 	msr	BASEPRI, r6
   1c91e:	f3bf 8f6f 	isb	sy
				return;
   1c922:	e6e2      	b.n	1c6ea <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1c924:	2601      	movs	r6, #1
   1c926:	e702      	b.n	1c72e <uarte_nrfx_isr_async+0x6e>
   1c928:	2602      	movs	r6, #2
   1c92a:	e700      	b.n	1c72e <uarte_nrfx_isr_async+0x6e>
   1c92c:	2604      	movs	r6, #4
   1c92e:	e6fe      	b.n	1c72e <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1c930:	4620      	mov	r0, r4
   1c932:	3158      	adds	r1, #88	; 0x58
   1c934:	f00c feb0 	bl	29698 <rx_buf_release>
	__asm__ volatile(
   1c938:	f04f 0320 	mov.w	r3, #32
   1c93c:	f3ef 8111 	mrs	r1, BASEPRI
   1c940:	f383 8812 	msr	BASEPRI_MAX, r3
   1c944:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1c948:	68f3      	ldr	r3, [r6, #12]
   1c94a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1c94c:	b1f2      	cbz	r2, 1c98c <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1c94e:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1c950:	68f3      	ldr	r3, [r6, #12]
   1c952:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1c954:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1c956:	2300      	movs	r3, #0
   1c958:	68f2      	ldr	r2, [r6, #12]
   1c95a:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1c95c:	68f2      	ldr	r2, [r6, #12]
   1c95e:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1c960:	68f2      	ldr	r2, [r6, #12]
   1c962:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c964:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1c968:	b90b      	cbnz	r3, 1c96e <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c96a:	2301      	movs	r3, #1
   1c96c:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1c96e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1c972:	f023 0320 	bic.w	r3, r3, #32
   1c976:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1c97a:	f381 8811 	msr	BASEPRI, r1
   1c97e:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1c982:	2200      	movs	r2, #0
   1c984:	68f3      	ldr	r3, [r6, #12]
   1c986:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1c98a:	e70e      	b.n	1c7aa <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c98c:	2301      	movs	r3, #1
   1c98e:	607b      	str	r3, [r7, #4]
}
   1c990:	e7f3      	b.n	1c97a <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1c992:	4611      	mov	r1, r2
   1c994:	6860      	ldr	r0, [r4, #4]
   1c996:	f00c ff2f 	bl	297f8 <rx_flush.isra.0>
   1c99a:	e759      	b.n	1c850 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1c99c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1c9a0:	2101      	movs	r1, #1
   1c9a2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1c9a6:	4620      	mov	r0, r4
   1c9a8:	f00c ff5b 	bl	29862 <async_uart_release>
		if (!data->async->tx_size) {
   1c9ac:	68eb      	ldr	r3, [r5, #12]
   1c9ae:	68db      	ldr	r3, [r3, #12]
   1c9b0:	2b00      	cmp	r3, #0
   1c9b2:	d187      	bne.n	1c8c4 <uarte_nrfx_isr_async+0x204>
   1c9b4:	e699      	b.n	1c6ea <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1c9b6:	6899      	ldr	r1, [r3, #8]
   1c9b8:	691a      	ldr	r2, [r3, #16]
   1c9ba:	4291      	cmp	r1, r2
   1c9bc:	d00c      	beq.n	1c9d8 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1c9be:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1c9c0:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1c9c2:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1c9c4:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1c9c6:	d128      	bne.n	1ca1a <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1c9c8:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1c9ca:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1c9cc:	f00c fefc 	bl	297c8 <setup_tx_cache>
   1c9d0:	2800      	cmp	r0, #0
   1c9d2:	d196      	bne.n	1c902 <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1c9d4:	68eb      	ldr	r3, [r5, #12]
   1c9d6:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1c9d8:	68e8      	ldr	r0, [r5, #12]
   1c9da:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1c9dc:	f00e f8ce 	bl	2ab7c <z_impl_k_timer_stop>
	struct uart_event evt = {
   1c9e0:	2214      	movs	r2, #20
   1c9e2:	2100      	movs	r1, #0
   1c9e4:	a803      	add	r0, sp, #12
   1c9e6:	f00e f9dd 	bl	2ada4 <memset>
		.data.tx.buf = data->async->tx_buf,
   1c9ea:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1c9ec:	4620      	mov	r0, r4
	struct uart_event evt = {
   1c9ee:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1c9f0:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1c9f2:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1c9f6:	68db      	ldr	r3, [r3, #12]
   1c9f8:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1c9fa:	bf1c      	itt	ne
   1c9fc:	2301      	movne	r3, #1
   1c9fe:	f88d 300c 	strbne.w	r3, [sp, #12]
   1ca02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ca06:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1ca0a:	2300      	movs	r3, #0
   1ca0c:	68ea      	ldr	r2, [r5, #12]
   1ca0e:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1ca10:	68ea      	ldr	r2, [r5, #12]
   1ca12:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1ca14:	f00c fe20 	bl	29658 <user_callback>
   1ca18:	e667      	b.n	1c6ea <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1ca1a:	4616      	mov	r6, r2
   1ca1c:	e7dc      	b.n	1c9d8 <uarte_nrfx_isr_async+0x318>
   1ca1e:	bf00      	nop
   1ca20:	000f423f 	.word	0x000f423f
   1ca24:	000f4240 	.word	0x000f4240

0001ca28 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1ca28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1ca2a:	7e01      	ldrb	r1, [r0, #24]
   1ca2c:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1ca2e:	2902      	cmp	r1, #2
   1ca30:	d014      	beq.n	1ca5c <bt_rpmsg_send+0x34>
   1ca32:	2904      	cmp	r1, #4
   1ca34:	d011      	beq.n	1ca5a <bt_rpmsg_send+0x32>
   1ca36:	b1f9      	cbz	r1, 1ca78 <bt_rpmsg_send+0x50>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1ca38:	4b10      	ldr	r3, [pc, #64]	; (1ca7c <bt_rpmsg_send+0x54>)
	switch (bt_buf_get_type(buf)) {
   1ca3a:	9103      	str	r1, [sp, #12]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1ca3c:	9302      	str	r3, [sp, #8]
   1ca3e:	2300      	movs	r3, #0
   1ca40:	2201      	movs	r2, #1
   1ca42:	4618      	mov	r0, r3
   1ca44:	e9cd 3300 	strd	r3, r3, [sp]
   1ca48:	490d      	ldr	r1, [pc, #52]	; (1ca80 <bt_rpmsg_send+0x58>)
   1ca4a:	f00c ffe9 	bl	29a20 <z_log_msg_runtime_create.constprop.0>
	}

done:
	net_buf_unref(buf);
   1ca4e:	4620      	mov	r0, r4
   1ca50:	f7fd fbec 	bl	1a22c <net_buf_unref>
	return 0;
}
   1ca54:	2000      	movs	r0, #0
   1ca56:	b004      	add	sp, #16
   1ca58:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   1ca5a:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1ca5c:	f104 000c 	add.w	r0, r4, #12
   1ca60:	f00c fbd0 	bl	29204 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1ca64:	8a22      	ldrh	r2, [r4, #16]
   1ca66:	68e1      	ldr	r1, [r4, #12]
   1ca68:	4806      	ldr	r0, [pc, #24]	; (1ca84 <bt_rpmsg_send+0x5c>)
   1ca6a:	f7f3 fb77 	bl	1015c <ipc_service_send>
	if (err < 0) {
   1ca6e:	2800      	cmp	r0, #0
   1ca70:	daed      	bge.n	1ca4e <bt_rpmsg_send+0x26>
		LOG_ERR("Failed to send (err %d)", err);
   1ca72:	4b05      	ldr	r3, [pc, #20]	; (1ca88 <bt_rpmsg_send+0x60>)
   1ca74:	9003      	str	r0, [sp, #12]
   1ca76:	e7e1      	b.n	1ca3c <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   1ca78:	2101      	movs	r1, #1
   1ca7a:	e7ef      	b.n	1ca5c <bt_rpmsg_send+0x34>
   1ca7c:	000314e6 	.word	0x000314e6
   1ca80:	0002c09c 	.word	0x0002c09c
   1ca84:	200229cc 	.word	0x200229cc
   1ca88:	000314f6 	.word	0x000314f6

0001ca8c <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1ca8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1ca8e:	4809      	ldr	r0, [pc, #36]	; (1cab4 <bt_rpmsg_init+0x28>)
   1ca90:	f7f6 fdde 	bl	13650 <bt_hci_driver_register>
	if (err < 0) {
   1ca94:	1e04      	subs	r4, r0, #0
   1ca96:	da0a      	bge.n	1caae <bt_rpmsg_init+0x22>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1ca98:	4b07      	ldr	r3, [pc, #28]	; (1cab8 <bt_rpmsg_init+0x2c>)
   1ca9a:	2201      	movs	r2, #1
   1ca9c:	9302      	str	r3, [sp, #8]
   1ca9e:	2300      	movs	r3, #0
   1caa0:	4906      	ldr	r1, [pc, #24]	; (1cabc <bt_rpmsg_init+0x30>)
   1caa2:	4618      	mov	r0, r3
   1caa4:	e9cd 3300 	strd	r3, r3, [sp]
   1caa8:	9403      	str	r4, [sp, #12]
   1caaa:	f00c ffb9 	bl	29a20 <z_log_msg_runtime_create.constprop.0>
	}

	return err;
}
   1caae:	4620      	mov	r0, r4
   1cab0:	b004      	add	sp, #16
   1cab2:	bd10      	pop	{r4, pc}
   1cab4:	0002cee0 	.word	0x0002cee0
   1cab8:	0003150e 	.word	0x0003150e
   1cabc:	0002c09c 	.word	0x0002c09c

0001cac0 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1cac0:	4801      	ldr	r0, [pc, #4]	; (1cac8 <hci_ept_bound+0x8>)
   1cac2:	f004 b911 	b.w	20ce8 <z_impl_k_sem_give>
   1cac6:	bf00      	nop
   1cac8:	20008b18 	.word	0x20008b18

0001cacc <bt_rpmsg_open>:
{
   1cacc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1cace:	4816      	ldr	r0, [pc, #88]	; (1cb28 <bt_rpmsg_open+0x5c>)
   1cad0:	f7f3 fae6 	bl	100a0 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1cad4:	4604      	mov	r4, r0
   1cad6:	b180      	cbz	r0, 1cafa <bt_rpmsg_open+0x2e>
   1cad8:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1cadc:	d00d      	beq.n	1cafa <bt_rpmsg_open+0x2e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1cade:	4b13      	ldr	r3, [pc, #76]	; (1cb2c <bt_rpmsg_open+0x60>)
   1cae0:	9003      	str	r0, [sp, #12]
		LOG_ERR("Endpoint binding failed with %d", err);
   1cae2:	9302      	str	r3, [sp, #8]
   1cae4:	2300      	movs	r3, #0
   1cae6:	2201      	movs	r2, #1
   1cae8:	4618      	mov	r0, r3
   1caea:	e9cd 3300 	strd	r3, r3, [sp]
   1caee:	4910      	ldr	r1, [pc, #64]	; (1cb30 <bt_rpmsg_open+0x64>)
   1caf0:	f00c ff96 	bl	29a20 <z_log_msg_runtime_create.constprop.0>
}
   1caf4:	4620      	mov	r0, r4
   1caf6:	b004      	add	sp, #16
   1caf8:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1cafa:	4a0e      	ldr	r2, [pc, #56]	; (1cb34 <bt_rpmsg_open+0x68>)
   1cafc:	490e      	ldr	r1, [pc, #56]	; (1cb38 <bt_rpmsg_open+0x6c>)
   1cafe:	480a      	ldr	r0, [pc, #40]	; (1cb28 <bt_rpmsg_open+0x5c>)
   1cb00:	f7f3 fafa 	bl	100f8 <ipc_service_register_endpoint>
	if (err) {
   1cb04:	4604      	mov	r4, r0
   1cb06:	b110      	cbz	r0, 1cb0e <bt_rpmsg_open+0x42>
		LOG_ERR("Registering endpoint failed with %d", err);
   1cb08:	4b0c      	ldr	r3, [pc, #48]	; (1cb3c <bt_rpmsg_open+0x70>)
   1cb0a:	9003      	str	r0, [sp, #12]
   1cb0c:	e7e9      	b.n	1cae2 <bt_rpmsg_open+0x16>
	return z_impl_k_sem_take(sem, timeout);
   1cb0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1cb12:	2300      	movs	r3, #0
   1cb14:	480a      	ldr	r0, [pc, #40]	; (1cb40 <bt_rpmsg_open+0x74>)
   1cb16:	f004 f92b 	bl	20d70 <z_impl_k_sem_take>
	if (err) {
   1cb1a:	4604      	mov	r4, r0
   1cb1c:	2800      	cmp	r0, #0
   1cb1e:	d0e9      	beq.n	1caf4 <bt_rpmsg_open+0x28>
		LOG_ERR("Endpoint binding failed with %d", err);
   1cb20:	4b08      	ldr	r3, [pc, #32]	; (1cb44 <bt_rpmsg_open+0x78>)
   1cb22:	9003      	str	r0, [sp, #12]
   1cb24:	e7dd      	b.n	1cae2 <bt_rpmsg_open+0x16>
   1cb26:	bf00      	nop
   1cb28:	0002bb4c 	.word	0x0002bb4c
   1cb2c:	00031538 	.word	0x00031538
   1cb30:	0002c09c 	.word	0x0002c09c
   1cb34:	20008664 	.word	0x20008664
   1cb38:	200229cc 	.word	0x200229cc
   1cb3c:	00031568 	.word	0x00031568
   1cb40:	20008b18 	.word	0x20008b18
   1cb44:	0003158c 	.word	0x0003158c

0001cb48 <hci_ept_recv>:
{
   1cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb4c:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   1cb4e:	7800      	ldrb	r0, [r0, #0]
{
   1cb50:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   1cb52:	2804      	cmp	r0, #4
{
   1cb54:	b089      	sub	sp, #36	; 0x24
	remaining -= sizeof(pkt_indicator);
   1cb56:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1cb5a:	d009      	beq.n	1cb70 <hci_ept_recv+0x28>
   1cb5c:	2805      	cmp	r0, #5
   1cb5e:	f000 8099 	beq.w	1cc94 <hci_ept_recv+0x14c>
   1cb62:	2802      	cmp	r0, #2
   1cb64:	f040 80bd 	bne.w	1cce2 <hci_ept_recv+0x19a>
	if (remaining < sizeof(hdr)) {
   1cb68:	2b03      	cmp	r3, #3
   1cb6a:	d867      	bhi.n	1cc3c <hci_ept_recv+0xf4>
		LOG_ERR("Not enough data for ACL header");
   1cb6c:	4b63      	ldr	r3, [pc, #396]	; (1ccfc <hci_ept_recv+0x1b4>)
   1cb6e:	e002      	b.n	1cb76 <hci_ept_recv+0x2e>
	if (remaining < sizeof(hdr)) {
   1cb70:	2b01      	cmp	r3, #1
   1cb72:	d80c      	bhi.n	1cb8e <hci_ept_recv+0x46>
		LOG_ERR("Not enough data for event header");
   1cb74:	4b62      	ldr	r3, [pc, #392]	; (1cd00 <hci_ept_recv+0x1b8>)
		LOG_ERR("Event payload length is not correct");
   1cb76:	9302      	str	r3, [sp, #8]
   1cb78:	2300      	movs	r3, #0
   1cb7a:	2201      	movs	r2, #1
   1cb7c:	4618      	mov	r0, r3
   1cb7e:	e9cd 3300 	strd	r3, r3, [sp]
   1cb82:	4960      	ldr	r1, [pc, #384]	; (1cd04 <hci_ept_recv+0x1bc>)
   1cb84:	f00c ff4c 	bl	29a20 <z_log_msg_runtime_create.constprop.0>
}
   1cb88:	b009      	add	sp, #36	; 0x24
   1cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1cb8e:	7873      	ldrb	r3, [r6, #1]
   1cb90:	2b3e      	cmp	r3, #62	; 0x3e
   1cb92:	d136      	bne.n	1cc02 <hci_ept_recv+0xba>
		switch (subevt_type) {
   1cb94:	78f7      	ldrb	r7, [r6, #3]
   1cb96:	1ebb      	subs	r3, r7, #2
   1cb98:	425f      	negs	r7, r3
   1cb9a:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1cb9c:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1cba0:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   1cba2:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1cba6:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (remaining != hdr.len) {
   1cbaa:	d12f      	bne.n	1cc0c <hci_ept_recv+0xc4>
   1cbac:	b35f      	cbz	r7, 1cc06 <hci_ept_recv+0xbe>
   1cbae:	f04f 0800 	mov.w	r8, #0
   1cbb2:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1cbb6:	f8df b150 	ldr.w	fp, [pc, #336]	; 1cd08 <hci_ept_recv+0x1c0>
   1cbba:	f8df a148 	ldr.w	sl, [pc, #328]	; 1cd04 <hci_ept_recv+0x1bc>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1cbbe:	4642      	mov	r2, r8
   1cbc0:	464b      	mov	r3, r9
   1cbc2:	4639      	mov	r1, r7
   1cbc4:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1cbc8:	f7f5 fb08 	bl	121dc <bt_buf_get_evt>
		if (!buf) {
   1cbcc:	4604      	mov	r4, r0
   1cbce:	b1f8      	cbz	r0, 1cc10 <hci_ept_recv+0xc8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1cbd0:	f100 070c 	add.w	r7, r0, #12
   1cbd4:	2202      	movs	r2, #2
   1cbd6:	a907      	add	r1, sp, #28
   1cbd8:	4638      	mov	r0, r7
   1cbda:	f00c fb2e 	bl	2923a <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1cbde:	4638      	mov	r0, r7
   1cbe0:	f00c fb23 	bl	2922a <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1cbe4:	4285      	cmp	r5, r0
   1cbe6:	d91e      	bls.n	1cc26 <hci_ept_recv+0xde>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1cbe8:	4b48      	ldr	r3, [pc, #288]	; (1cd0c <hci_ept_recv+0x1c4>)
   1cbea:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1cbee:	9302      	str	r3, [sp, #8]
   1cbf0:	2300      	movs	r3, #0
   1cbf2:	2201      	movs	r2, #1
   1cbf4:	4618      	mov	r0, r3
   1cbf6:	e9cd 3300 	strd	r3, r3, [sp]
   1cbfa:	4942      	ldr	r1, [pc, #264]	; (1cd04 <hci_ept_recv+0x1bc>)
   1cbfc:	f00c ff10 	bl	29a20 <z_log_msg_runtime_create.constprop.0>
   1cc00:	e03c      	b.n	1cc7c <hci_ept_recv+0x134>
			return false;
   1cc02:	2700      	movs	r7, #0
   1cc04:	e7ca      	b.n	1cb9c <hci_ept_recv+0x54>
   1cc06:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1cc0a:	e7d2      	b.n	1cbb2 <hci_ept_recv+0x6a>
		LOG_ERR("Event payload length is not correct");
   1cc0c:	4b40      	ldr	r3, [pc, #256]	; (1cd10 <hci_ept_recv+0x1c8>)
   1cc0e:	e7b2      	b.n	1cb76 <hci_ept_recv+0x2e>
			if (discardable) {
   1cc10:	2f00      	cmp	r7, #0
   1cc12:	d1b9      	bne.n	1cb88 <hci_ept_recv+0x40>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1cc14:	463b      	mov	r3, r7
   1cc16:	2202      	movs	r2, #2
   1cc18:	4651      	mov	r1, sl
   1cc1a:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1cc1e:	9700      	str	r7, [sp, #0]
   1cc20:	f00c fefe 	bl	29a20 <z_log_msg_runtime_create.constprop.0>
	} while (!buf);
   1cc24:	e7cb      	b.n	1cbbe <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1cc26:	462a      	mov	r2, r5
   1cc28:	1cf1      	adds	r1, r6, #3
   1cc2a:	4638      	mov	r0, r7
   1cc2c:	f00c fb05 	bl	2923a <net_buf_simple_add_mem>
		bt_recv(buf);
   1cc30:	4620      	mov	r0, r4
}
   1cc32:	b009      	add	sp, #36	; 0x24
   1cc34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_recv(buf);
   1cc38:	f7f6 bcda 	b.w	135f0 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1cc3c:	2200      	movs	r2, #0
   1cc3e:	2300      	movs	r3, #0
   1cc40:	2003      	movs	r0, #3
   1cc42:	f7f5 fa7d 	bl	12140 <bt_buf_get_rx>
	if (buf) {
   1cc46:	4604      	mov	r4, r0
   1cc48:	b1e0      	cbz	r0, 1cc84 <hci_ept_recv+0x13c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1cc4a:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1cc4e:	f100 070c 	add.w	r7, r0, #12
   1cc52:	2204      	movs	r2, #4
   1cc54:	4638      	mov	r0, r7
   1cc56:	a907      	add	r1, sp, #28
   1cc58:	9307      	str	r3, [sp, #28]
   1cc5a:	f00c faee 	bl	2923a <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1cc5e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1cc62:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1cc64:	429d      	cmp	r5, r3
   1cc66:	d034      	beq.n	1ccd2 <hci_ept_recv+0x18a>
		LOG_ERR("ACL payload length is not correct");
   1cc68:	4b2a      	ldr	r3, [pc, #168]	; (1cd14 <hci_ept_recv+0x1cc>)
		LOG_ERR("ISO payload length is not correct");
   1cc6a:	9302      	str	r3, [sp, #8]
   1cc6c:	2300      	movs	r3, #0
   1cc6e:	2201      	movs	r2, #1
   1cc70:	4618      	mov	r0, r3
   1cc72:	e9cd 3300 	strd	r3, r3, [sp]
   1cc76:	4923      	ldr	r1, [pc, #140]	; (1cd04 <hci_ept_recv+0x1bc>)
   1cc78:	f00c fed2 	bl	29a20 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1cc7c:	4620      	mov	r0, r4
   1cc7e:	f7fd fad5 	bl	1a22c <net_buf_unref>
	if (buf) {
   1cc82:	e781      	b.n	1cb88 <hci_ept_recv+0x40>
		LOG_ERR("No available ACL buffers!");
   1cc84:	4b24      	ldr	r3, [pc, #144]	; (1cd18 <hci_ept_recv+0x1d0>)
		LOG_ERR("No available ISO buffers!");
   1cc86:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1cc8a:	2201      	movs	r2, #1
   1cc8c:	4623      	mov	r3, r4
   1cc8e:	491d      	ldr	r1, [pc, #116]	; (1cd04 <hci_ept_recv+0x1bc>)
   1cc90:	9400      	str	r4, [sp, #0]
   1cc92:	e777      	b.n	1cb84 <hci_ept_recv+0x3c>
	if (remaining < sizeof(hdr)) {
   1cc94:	2b03      	cmp	r3, #3
   1cc96:	d801      	bhi.n	1cc9c <hci_ept_recv+0x154>
		LOG_ERR("Not enough data for ISO header");
   1cc98:	4b20      	ldr	r3, [pc, #128]	; (1cd1c <hci_ept_recv+0x1d4>)
   1cc9a:	e76c      	b.n	1cb76 <hci_ept_recv+0x2e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1cc9c:	2200      	movs	r2, #0
   1cc9e:	2300      	movs	r3, #0
   1cca0:	f7f5 fa4e 	bl	12140 <bt_buf_get_rx>
	if (buf) {
   1cca4:	4604      	mov	r4, r0
   1cca6:	b190      	cbz	r0, 1ccce <hci_ept_recv+0x186>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1cca8:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1ccac:	f100 070c 	add.w	r7, r0, #12
   1ccb0:	2204      	movs	r2, #4
   1ccb2:	4638      	mov	r0, r7
   1ccb4:	a907      	add	r1, sp, #28
   1ccb6:	9307      	str	r3, [sp, #28]
   1ccb8:	f00c fabf 	bl	2923a <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1ccbc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1ccc0:	3d05      	subs	r5, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1ccc2:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1ccc6:	429d      	cmp	r5, r3
   1ccc8:	d003      	beq.n	1ccd2 <hci_ept_recv+0x18a>
		LOG_ERR("ISO payload length is not correct");
   1ccca:	4b15      	ldr	r3, [pc, #84]	; (1cd20 <hci_ept_recv+0x1d8>)
   1cccc:	e7cd      	b.n	1cc6a <hci_ept_recv+0x122>
		LOG_ERR("No available ISO buffers!");
   1ccce:	4b15      	ldr	r3, [pc, #84]	; (1cd24 <hci_ept_recv+0x1dc>)
   1ccd0:	e7d9      	b.n	1cc86 <hci_ept_recv+0x13e>
	return net_buf_simple_tailroom(&buf->b);
   1ccd2:	4638      	mov	r0, r7
   1ccd4:	f00c faa9 	bl	2922a <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1ccd8:	4285      	cmp	r5, r0
   1ccda:	d885      	bhi.n	1cbe8 <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ccdc:	462a      	mov	r2, r5
   1ccde:	1d71      	adds	r1, r6, #5
   1cce0:	e7a3      	b.n	1cc2a <hci_ept_recv+0xe2>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1cce2:	4b11      	ldr	r3, [pc, #68]	; (1cd28 <hci_ept_recv+0x1e0>)
	switch (pkt_indicator) {
   1cce4:	9003      	str	r0, [sp, #12]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1cce6:	9302      	str	r3, [sp, #8]
   1cce8:	2300      	movs	r3, #0
   1ccea:	2201      	movs	r2, #1
   1ccec:	4618      	mov	r0, r3
   1ccee:	e9cd 3300 	strd	r3, r3, [sp]
   1ccf2:	4904      	ldr	r1, [pc, #16]	; (1cd04 <hci_ept_recv+0x1bc>)
   1ccf4:	f00c fe94 	bl	29a20 <z_log_msg_runtime_create.constprop.0>
   1ccf8:	e746      	b.n	1cb88 <hci_ept_recv+0x40>
   1ccfa:	bf00      	nop
   1ccfc:	00031649 	.word	0x00031649
   1cd00:	000315ac 	.word	0x000315ac
   1cd04:	0002c09c 	.word	0x0002c09c
   1cd08:	000315f1 	.word	0x000315f1
   1cd0c:	00031626 	.word	0x00031626
   1cd10:	000315cd 	.word	0x000315cd
   1cd14:	00031682 	.word	0x00031682
   1cd18:	00031668 	.word	0x00031668
   1cd1c:	000316a4 	.word	0x000316a4
   1cd20:	000316dd 	.word	0x000316dd
   1cd24:	000316c3 	.word	0x000316c3
   1cd28:	000316ff 	.word	0x000316ff

0001cd2c <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1cd2c:	2301      	movs	r3, #1
   1cd2e:	4083      	lsls	r3, r0
{
   1cd30:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1cd32:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cd34:	4a0b      	ldr	r2, [pc, #44]	; (1cd64 <compare_int_lock+0x38>)
   1cd36:	e8d2 1fef 	ldaex	r1, [r2]
   1cd3a:	ea01 0504 	and.w	r5, r1, r4
   1cd3e:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1cd42:	2e00      	cmp	r6, #0
   1cd44:	d1f7      	bne.n	1cd36 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cd46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1cd4a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1cd4c:	4806      	ldr	r0, [pc, #24]	; (1cd68 <compare_int_lock+0x3c>)
   1cd4e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1cd52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1cd56:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1cd5a:	420b      	tst	r3, r1
}
   1cd5c:	bf14      	ite	ne
   1cd5e:	2001      	movne	r0, #1
   1cd60:	2000      	moveq	r0, #0
   1cd62:	bd70      	pop	{r4, r5, r6, pc}
   1cd64:	200229dc 	.word	0x200229dc
   1cd68:	40015000 	.word	0x40015000

0001cd6c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1cd6e:	491b      	ldr	r1, [pc, #108]	; (1cddc <sys_clock_timeout_handler+0x70>)
{
   1cd70:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1cd72:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1cd76:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1cd78:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1cd7c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1cd80:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1cd82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1cd86:	d30f      	bcc.n	1cda8 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1cd88:	f006 fa24 	bl	231d4 <sys_clock_announce>
    return p_reg->CC[ch];
   1cd8c:	00a3      	lsls	r3, r4, #2
   1cd8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cd92:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1cd96:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1cd9a:	4295      	cmp	r5, r2
   1cd9c:	d11d      	bne.n	1cdda <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1cd9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1cda2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1cda6:	e012      	b.n	1cdce <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1cda8:	4b0d      	ldr	r3, [pc, #52]	; (1cde0 <sys_clock_timeout_handler+0x74>)
   1cdaa:	681b      	ldr	r3, [r3, #0]
   1cdac:	0a1a      	lsrs	r2, r3, #8
   1cdae:	061b      	lsls	r3, r3, #24
   1cdb0:	195e      	adds	r6, r3, r5
   1cdb2:	4b0c      	ldr	r3, [pc, #48]	; (1cde4 <sys_clock_timeout_handler+0x78>)
   1cdb4:	f142 0700 	adc.w	r7, r2, #0
   1cdb8:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1cdbc:	f006 fa0a 	bl	231d4 <sys_clock_announce>
    return p_reg->CC[ch];
   1cdc0:	4a09      	ldr	r2, [pc, #36]	; (1cde8 <sys_clock_timeout_handler+0x7c>)
   1cdc2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1cdc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1cdca:	429d      	cmp	r5, r3
   1cdcc:	d105      	bne.n	1cdda <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cdce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1cdd2:	4a05      	ldr	r2, [pc, #20]	; (1cde8 <sys_clock_timeout_handler+0x7c>)
   1cdd4:	40a3      	lsls	r3, r4
   1cdd6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1cdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cddc:	20009bf8 	.word	0x20009bf8
   1cde0:	200229e0 	.word	0x200229e0
   1cde4:	20009c00 	.word	0x20009c00
   1cde8:	40015000 	.word	0x40015000

0001cdec <compare_int_unlock>:
	if (key) {
   1cdec:	b1d9      	cbz	r1, 1ce26 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1cdee:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cdf0:	4a0d      	ldr	r2, [pc, #52]	; (1ce28 <compare_int_unlock+0x3c>)
   1cdf2:	4083      	lsls	r3, r0
   1cdf4:	e8d2 cfef 	ldaex	ip, [r2]
   1cdf8:	ea4c 0c03 	orr.w	ip, ip, r3
   1cdfc:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1ce00:	2900      	cmp	r1, #0
   1ce02:	d1f7      	bne.n	1cdf4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ce04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1ce08:	4a08      	ldr	r2, [pc, #32]	; (1ce2c <compare_int_unlock+0x40>)
   1ce0a:	4083      	lsls	r3, r0
   1ce0c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ce10:	4b07      	ldr	r3, [pc, #28]	; (1ce30 <compare_int_unlock+0x44>)
   1ce12:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1ce16:	40c3      	lsrs	r3, r0
   1ce18:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ce1a:	bf42      	ittt	mi
   1ce1c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1ce20:	4b04      	ldrmi	r3, [pc, #16]	; (1ce34 <compare_int_unlock+0x48>)
   1ce22:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1ce26:	4770      	bx	lr
   1ce28:	200229dc 	.word	0x200229dc
   1ce2c:	40015000 	.word	0x40015000
   1ce30:	200229d4 	.word	0x200229d4
   1ce34:	e000e100 	.word	0xe000e100

0001ce38 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1ce38:	2801      	cmp	r0, #1
{
   1ce3a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1ce3c:	d909      	bls.n	1ce52 <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1ce3e:	4907      	ldr	r1, [pc, #28]	; (1ce5c <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1ce40:	4807      	ldr	r0, [pc, #28]	; (1ce60 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1ce42:	237c      	movs	r3, #124	; 0x7c
   1ce44:	4a07      	ldr	r2, [pc, #28]	; (1ce64 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1ce46:	f009 fa0a 	bl	2625e <assert_print>
   1ce4a:	217c      	movs	r1, #124	; 0x7c
   1ce4c:	4805      	ldr	r0, [pc, #20]	; (1ce64 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1ce4e:	f009 f9ff 	bl	26250 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1ce52:	0083      	lsls	r3, r0, #2
}
   1ce54:	4804      	ldr	r0, [pc, #16]	; (1ce68 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1ce56:	4418      	add	r0, r3
   1ce58:	bd08      	pop	{r3, pc}
   1ce5a:	bf00      	nop
   1ce5c:	0003177a 	.word	0x0003177a
   1ce60:	0002d095 	.word	0x0002d095
   1ce64:	00031749 	.word	0x00031749
   1ce68:	40015140 	.word	0x40015140

0001ce6c <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1ce6c:	2801      	cmp	r0, #1
{
   1ce6e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1ce70:	d909      	bls.n	1ce86 <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1ce72:	4907      	ldr	r1, [pc, #28]	; (1ce90 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1ce74:	4807      	ldr	r0, [pc, #28]	; (1ce94 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1ce76:	2383      	movs	r3, #131	; 0x83
   1ce78:	4a07      	ldr	r2, [pc, #28]	; (1ce98 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1ce7a:	f009 f9f0 	bl	2625e <assert_print>
   1ce7e:	2183      	movs	r1, #131	; 0x83
   1ce80:	4805      	ldr	r0, [pc, #20]	; (1ce98 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1ce82:	f009 f9e5 	bl	26250 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1ce86:	2800      	cmp	r0, #0
}
   1ce88:	4804      	ldr	r0, [pc, #16]	; (1ce9c <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1ce8a:	bf08      	it	eq
   1ce8c:	2000      	moveq	r0, #0
   1ce8e:	bd08      	pop	{r3, pc}
   1ce90:	0003177a 	.word	0x0003177a
   1ce94:	0002d095 	.word	0x0002d095
   1ce98:	00031749 	.word	0x00031749
   1ce9c:	40015044 	.word	0x40015044

0001cea0 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1cea0:	2801      	cmp	r0, #1
{
   1cea2:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1cea4:	d909      	bls.n	1ceba <z_nrf_rtc_timer_compare_read+0x1a>
   1cea6:	4908      	ldr	r1, [pc, #32]	; (1cec8 <z_nrf_rtc_timer_compare_read+0x28>)
   1cea8:	4808      	ldr	r0, [pc, #32]	; (1cecc <z_nrf_rtc_timer_compare_read+0x2c>)
   1ceaa:	23b9      	movs	r3, #185	; 0xb9
   1ceac:	4a08      	ldr	r2, [pc, #32]	; (1ced0 <z_nrf_rtc_timer_compare_read+0x30>)
   1ceae:	f009 f9d6 	bl	2625e <assert_print>
   1ceb2:	21b9      	movs	r1, #185	; 0xb9
   1ceb4:	4806      	ldr	r0, [pc, #24]	; (1ced0 <z_nrf_rtc_timer_compare_read+0x30>)
   1ceb6:	f009 f9cb 	bl	26250 <assert_post_action>
    return p_reg->CC[ch];
   1ceba:	4b06      	ldr	r3, [pc, #24]	; (1ced4 <z_nrf_rtc_timer_compare_read+0x34>)
   1cebc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1cec0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1cec4:	bd08      	pop	{r3, pc}
   1cec6:	bf00      	nop
   1cec8:	0003177a 	.word	0x0003177a
   1cecc:	0002d095 	.word	0x0002d095
   1ced0:	00031749 	.word	0x00031749
   1ced4:	40015000 	.word	0x40015000

0001ced8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1ced8:	4b0d      	ldr	r3, [pc, #52]	; (1cf10 <z_nrf_rtc_timer_read+0x38>)
   1ceda:	6818      	ldr	r0, [r3, #0]
   1cedc:	0a01      	lsrs	r1, r0, #8
   1cede:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1cee0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1cee4:	4b0b      	ldr	r3, [pc, #44]	; (1cf14 <z_nrf_rtc_timer_read+0x3c>)
   1cee6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1ceea:	1818      	adds	r0, r3, r0
   1ceec:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1cef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1cef4:	d20a      	bcs.n	1cf0c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1cef6:	4b08      	ldr	r3, [pc, #32]	; (1cf18 <z_nrf_rtc_timer_read+0x40>)
   1cef8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cefc:	4290      	cmp	r0, r2
   1cefe:	eb71 0303 	sbcs.w	r3, r1, r3
   1cf02:	d203      	bcs.n	1cf0c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1cf04:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1cf08:	f141 0100 	adc.w	r1, r1, #0
}
   1cf0c:	4770      	bx	lr
   1cf0e:	bf00      	nop
   1cf10:	200229e0 	.word	0x200229e0
   1cf14:	40015000 	.word	0x40015000
   1cf18:	20009c00 	.word	0x20009c00

0001cf1c <compare_set>:
{
   1cf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf20:	b085      	sub	sp, #20
   1cf22:	4614      	mov	r4, r2
   1cf24:	461d      	mov	r5, r3
   1cf26:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1cf28:	f7ff ff00 	bl	1cd2c <compare_int_lock>
   1cf2c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1cf2e:	f7ff ffd3 	bl	1ced8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1cf32:	42a0      	cmp	r0, r4
   1cf34:	eb71 0305 	sbcs.w	r3, r1, r5
   1cf38:	f080 8086 	bcs.w	1d048 <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1cf3c:	4b49      	ldr	r3, [pc, #292]	; (1d064 <compare_set+0x148>)
   1cf3e:	1a20      	subs	r0, r4, r0
   1cf40:	eb65 0101 	sbc.w	r1, r5, r1
   1cf44:	4298      	cmp	r0, r3
   1cf46:	f171 0100 	sbcs.w	r1, r1, #0
   1cf4a:	f080 8088 	bcs.w	1d05e <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1cf4e:	4b46      	ldr	r3, [pc, #280]	; (1d068 <compare_set+0x14c>)
   1cf50:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1cf54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1cf58:	429d      	cmp	r5, r3
   1cf5a:	bf08      	it	eq
   1cf5c:	4294      	cmpeq	r4, r2
   1cf5e:	d05e      	beq.n	1d01e <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cf60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1cf64:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1cf68:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1cf6a:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1cf6e:	f06f 0101 	mvn.w	r1, #1
   1cf72:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1cf76:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1cf7a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1cf7e:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cf82:	40bb      	lsls	r3, r7
   1cf84:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cf88:	fa1f f888 	uxth.w	r8, r8
   1cf8c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1cf90:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1cf92:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1cf96:	4b35      	ldr	r3, [pc, #212]	; (1d06c <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cf98:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1cf9c:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1cfa0:	eba0 000a 	sub.w	r0, r0, sl
   1cfa4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1cfa8:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1cfac:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1cfae:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1cfb2:	d107      	bne.n	1cfc4 <compare_set+0xa8>
   1cfb4:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1cfb6:	2013      	movs	r0, #19
   1cfb8:	f00d fdae 	bl	2ab18 <z_impl_k_busy_wait>
   1cfbc:	f06f 0101 	mvn.w	r1, #1
   1cfc0:	4b2a      	ldr	r3, [pc, #168]	; (1d06c <compare_set+0x150>)
   1cfc2:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1cfc4:	eba1 000a 	sub.w	r0, r1, sl
   1cfc8:	4430      	add	r0, r6
   1cfca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1cfce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cfd2:	f04f 0000 	mov.w	r0, #0
   1cfd6:	f8c8 0000 	str.w	r0, [r8]
   1cfda:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1cfde:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1cfe0:	bf88      	it	hi
   1cfe2:	eb0a 060b 	addhi.w	r6, sl, fp
   1cfe6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1cfea:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1cfee:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1cff2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1cff6:	bf88      	it	hi
   1cff8:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1cffc:	4582      	cmp	sl, r0
   1cffe:	d006      	beq.n	1d00e <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1d000:	1a08      	subs	r0, r1, r0
   1d002:	4430      	add	r0, r6
   1d004:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1d008:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d00c:	d81a      	bhi.n	1d044 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1d00e:	1ab6      	subs	r6, r6, r2
   1d010:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1d014:	1936      	adds	r6, r6, r4
   1d016:	f145 0300 	adc.w	r3, r5, #0
   1d01a:	4634      	mov	r4, r6
   1d01c:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1d01e:	4912      	ldr	r1, [pc, #72]	; (1d068 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1d020:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1d022:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1d026:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1d02a:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1d02c:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1d02e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1d030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d032:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1d034:	4638      	mov	r0, r7
   1d036:	9901      	ldr	r1, [sp, #4]
   1d038:	f7ff fed8 	bl	1cdec <compare_int_unlock>
}
   1d03c:	4620      	mov	r0, r4
   1d03e:	b005      	add	sp, #20
   1d040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d044:	4630      	mov	r0, r6
   1d046:	e7a9      	b.n	1cf9c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1d048:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d04a:	4a09      	ldr	r2, [pc, #36]	; (1d070 <compare_set+0x154>)
   1d04c:	40bb      	lsls	r3, r7
   1d04e:	e8d2 0fef 	ldaex	r0, [r2]
   1d052:	4318      	orrs	r0, r3
   1d054:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1d058:	2900      	cmp	r1, #0
   1d05a:	d0e0      	beq.n	1d01e <compare_set+0x102>
   1d05c:	e7f7      	b.n	1d04e <compare_set+0x132>
			return -EINVAL;
   1d05e:	f06f 0415 	mvn.w	r4, #21
   1d062:	e7e7      	b.n	1d034 <compare_set+0x118>
   1d064:	01000001 	.word	0x01000001
   1d068:	20009bd8 	.word	0x20009bd8
   1d06c:	40015000 	.word	0x40015000
   1d070:	200229d4 	.word	0x200229d4

0001d074 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1d074:	2801      	cmp	r0, #1
{
   1d076:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1d078:	d00b      	beq.n	1d092 <z_nrf_rtc_timer_set+0x1e>
   1d07a:	4908      	ldr	r1, [pc, #32]	; (1d09c <z_nrf_rtc_timer_set+0x28>)
   1d07c:	4808      	ldr	r0, [pc, #32]	; (1d0a0 <z_nrf_rtc_timer_set+0x2c>)
   1d07e:	f240 1353 	movw	r3, #339	; 0x153
   1d082:	4a08      	ldr	r2, [pc, #32]	; (1d0a4 <z_nrf_rtc_timer_set+0x30>)
   1d084:	f009 f8eb 	bl	2625e <assert_print>
   1d088:	f240 1153 	movw	r1, #339	; 0x153
   1d08c:	4805      	ldr	r0, [pc, #20]	; (1d0a4 <z_nrf_rtc_timer_set+0x30>)
   1d08e:	f009 f8df 	bl	26250 <assert_post_action>
}
   1d092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1d096:	f7ff bf41 	b.w	1cf1c <compare_set>
   1d09a:	bf00      	nop
   1d09c:	00031796 	.word	0x00031796
   1d0a0:	0002d095 	.word	0x0002d095
   1d0a4:	00031749 	.word	0x00031749

0001d0a8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1d0a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1d0aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1d0ae:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d0b0:	f04f 30ff 	mov.w	r0, #4294967295
   1d0b4:	f04f 31ff 	mov.w	r1, #4294967295
   1d0b8:	4c19      	ldr	r4, [pc, #100]	; (1d120 <sys_clock_driver_init+0x78>)
   1d0ba:	4b1a      	ldr	r3, [pc, #104]	; (1d124 <sys_clock_driver_init+0x7c>)
   1d0bc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1d0c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d0c4:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1d0c8:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1d0cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1d0d0:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d0d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d0d6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1d0da:	4b13      	ldr	r3, [pc, #76]	; (1d128 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d0dc:	2101      	movs	r1, #1
   1d0de:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1d0e2:	2015      	movs	r0, #21
   1d0e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1d0e8:	462a      	mov	r2, r5
   1d0ea:	f7f3 ffa5 	bl	11038 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d0ee:	2015      	movs	r0, #21
   1d0f0:	f7f3 ff72 	bl	10fd8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d0f4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1d0f6:	2203      	movs	r2, #3
   1d0f8:	60a3      	str	r3, [r4, #8]
   1d0fa:	6023      	str	r3, [r4, #0]
   1d0fc:	4b0b      	ldr	r3, [pc, #44]	; (1d12c <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d0fe:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1d100:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1d102:	4b0b      	ldr	r3, [pc, #44]	; (1d130 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d104:	4a0b      	ldr	r2, [pc, #44]	; (1d134 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1d106:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d108:	4b0b      	ldr	r3, [pc, #44]	; (1d138 <sys_clock_driver_init+0x90>)
   1d10a:	9501      	str	r5, [sp, #4]
   1d10c:	9300      	str	r3, [sp, #0]
   1d10e:	2300      	movs	r3, #0
   1d110:	f7ff ff04 	bl	1cf1c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1d114:	4630      	mov	r0, r6
   1d116:	f7fd fd83 	bl	1ac20 <z_nrf_clock_control_lf_on>

	return 0;
}
   1d11a:	4628      	mov	r0, r5
   1d11c:	b002      	add	sp, #8
   1d11e:	bd70      	pop	{r4, r5, r6, pc}
   1d120:	40015000 	.word	0x40015000
   1d124:	20009bd8 	.word	0x20009bd8
   1d128:	e000e100 	.word	0xe000e100
   1d12c:	200229dc 	.word	0x200229dc
   1d130:	200229d8 	.word	0x200229d8
   1d134:	007fffff 	.word	0x007fffff
   1d138:	0001cd6d 	.word	0x0001cd6d

0001d13c <rtc_nrf_isr>:
{
   1d13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1d140:	4b3f      	ldr	r3, [pc, #252]	; (1d240 <rtc_nrf_isr+0x104>)
   1d142:	b085      	sub	sp, #20
   1d144:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1d148:	0792      	lsls	r2, r2, #30
   1d14a:	d50b      	bpl.n	1d164 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d14c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1d150:	b142      	cbz	r2, 1d164 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d152:	2200      	movs	r2, #0
   1d154:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1d158:	4a3a      	ldr	r2, [pc, #232]	; (1d244 <rtc_nrf_isr+0x108>)
   1d15a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1d15e:	6813      	ldr	r3, [r2, #0]
   1d160:	3301      	adds	r3, #1
   1d162:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1d164:	4d38      	ldr	r5, [pc, #224]	; (1d248 <rtc_nrf_isr+0x10c>)
   1d166:	2400      	movs	r4, #0
   1d168:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1d16a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1d16e:	4e34      	ldr	r6, [pc, #208]	; (1d240 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1d170:	f04f 0320 	mov.w	r3, #32
   1d174:	f3ef 8211 	mrs	r2, BASEPRI
   1d178:	f383 8812 	msr	BASEPRI_MAX, r3
   1d17c:	f3bf 8f6f 	isb	sy
   1d180:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1d184:	fa0b f904 	lsl.w	r9, fp, r4
   1d188:	ea19 0f03 	tst.w	r9, r3
   1d18c:	d10a      	bne.n	1d1a4 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1d18e:	f382 8811 	msr	BASEPRI, r2
   1d192:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1d196:	3510      	adds	r5, #16
   1d198:	b114      	cbz	r4, 1d1a0 <rtc_nrf_isr+0x64>
}
   1d19a:	b005      	add	sp, #20
   1d19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1d1a0:	2401      	movs	r4, #1
   1d1a2:	e7e5      	b.n	1d170 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1d1a4:	2301      	movs	r3, #1
   1d1a6:	40a3      	lsls	r3, r4
   1d1a8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d1aa:	4928      	ldr	r1, [pc, #160]	; (1d24c <rtc_nrf_isr+0x110>)
   1d1ac:	e8d1 0fef 	ldaex	r0, [r1]
   1d1b0:	ea00 0c03 	and.w	ip, r0, r3
   1d1b4:	e8c1 cfee 	stlex	lr, ip, [r1]
   1d1b8:	f1be 0f00 	cmp.w	lr, #0
   1d1bc:	d1f6      	bne.n	1d1ac <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d1be:	4b24      	ldr	r3, [pc, #144]	; (1d250 <rtc_nrf_isr+0x114>)
   1d1c0:	00a1      	lsls	r1, r4, #2
   1d1c2:	b918      	cbnz	r0, 1d1cc <rtc_nrf_isr+0x90>
   1d1c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1d1c8:	2800      	cmp	r0, #0
   1d1ca:	d0e0      	beq.n	1d18e <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d1cc:	f04f 0a00 	mov.w	sl, #0
   1d1d0:	f841 a003 	str.w	sl, [r1, r3]
   1d1d4:	58cb      	ldr	r3, [r1, r3]
   1d1d6:	f382 8811 	msr	BASEPRI, r2
   1d1da:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1d1de:	f7ff fe7b 	bl	1ced8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1d1e2:	f04f 0320 	mov.w	r3, #32
   1d1e6:	f3ef 8c11 	mrs	ip, BASEPRI
   1d1ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1ee:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1d1f2:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1d1f6:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1d1fa:	4290      	cmp	r0, r2
   1d1fc:	4199      	sbcs	r1, r3
   1d1fe:	d204      	bcs.n	1d20a <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1d200:	f38c 8811 	msr	BASEPRI, ip
   1d204:	f3bf 8f6f 	isb	sy
		if (handler) {
   1d208:	e7c5      	b.n	1d196 <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1d20a:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d20e:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1d212:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d214:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1d218:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d21c:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1d220:	4907      	ldr	r1, [pc, #28]	; (1d240 <rtc_nrf_isr+0x104>)
   1d222:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1d226:	f38c 8811 	msr	BASEPRI, ip
   1d22a:	f3bf 8f6f 	isb	sy
		if (handler) {
   1d22e:	f1b8 0f00 	cmp.w	r8, #0
   1d232:	d0b0      	beq.n	1d196 <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1d234:	9903      	ldr	r1, [sp, #12]
   1d236:	4620      	mov	r0, r4
   1d238:	9100      	str	r1, [sp, #0]
   1d23a:	47c0      	blx	r8
   1d23c:	e7ab      	b.n	1d196 <rtc_nrf_isr+0x5a>
   1d23e:	bf00      	nop
   1d240:	40015000 	.word	0x40015000
   1d244:	200229e0 	.word	0x200229e0
   1d248:	20009bd8 	.word	0x20009bd8
   1d24c:	200229d4 	.word	0x200229d4
   1d250:	40015140 	.word	0x40015140

0001d254 <z_nrf_rtc_timer_chan_alloc>:
{
   1d254:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1d256:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1d258:	4b0c      	ldr	r3, [pc, #48]	; (1d28c <z_nrf_rtc_timer_chan_alloc+0x38>)
   1d25a:	6818      	ldr	r0, [r3, #0]
   1d25c:	b190      	cbz	r0, 1d284 <z_nrf_rtc_timer_chan_alloc+0x30>
   1d25e:	fab0 f080 	clz	r0, r0
   1d262:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1d266:	fa04 f100 	lsl.w	r1, r4, r0
   1d26a:	43c9      	mvns	r1, r1
   1d26c:	e8d3 2fef 	ldaex	r2, [r3]
   1d270:	ea02 0501 	and.w	r5, r2, r1
   1d274:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1d278:	2e00      	cmp	r6, #0
   1d27a:	d1f7      	bne.n	1d26c <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1d27c:	40c2      	lsrs	r2, r0
   1d27e:	07d2      	lsls	r2, r2, #31
   1d280:	d5eb      	bpl.n	1d25a <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1d282:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1d284:	f06f 000b 	mvn.w	r0, #11
   1d288:	e7fb      	b.n	1d282 <z_nrf_rtc_timer_chan_alloc+0x2e>
   1d28a:	bf00      	nop
   1d28c:	200229d8 	.word	0x200229d8

0001d290 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1d290:	2801      	cmp	r0, #1
{
   1d292:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1d294:	d00b      	beq.n	1d2ae <z_nrf_rtc_timer_chan_free+0x1e>
   1d296:	490b      	ldr	r1, [pc, #44]	; (1d2c4 <z_nrf_rtc_timer_chan_free+0x34>)
   1d298:	480b      	ldr	r0, [pc, #44]	; (1d2c8 <z_nrf_rtc_timer_chan_free+0x38>)
   1d29a:	f240 2321 	movw	r3, #545	; 0x221
   1d29e:	4a0b      	ldr	r2, [pc, #44]	; (1d2cc <z_nrf_rtc_timer_chan_free+0x3c>)
   1d2a0:	f008 ffdd 	bl	2625e <assert_print>
   1d2a4:	f240 2121 	movw	r1, #545	; 0x221
   1d2a8:	4808      	ldr	r0, [pc, #32]	; (1d2cc <z_nrf_rtc_timer_chan_free+0x3c>)
   1d2aa:	f008 ffd1 	bl	26250 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d2ae:	4b08      	ldr	r3, [pc, #32]	; (1d2d0 <z_nrf_rtc_timer_chan_free+0x40>)
   1d2b0:	e8d3 1fef 	ldaex	r1, [r3]
   1d2b4:	f041 0102 	orr.w	r1, r1, #2
   1d2b8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1d2bc:	2a00      	cmp	r2, #0
   1d2be:	d1f7      	bne.n	1d2b0 <z_nrf_rtc_timer_chan_free+0x20>
}
   1d2c0:	bd08      	pop	{r3, pc}
   1d2c2:	bf00      	nop
   1d2c4:	00031796 	.word	0x00031796
   1d2c8:	0002d095 	.word	0x0002d095
   1d2cc:	00031749 	.word	0x00031749
   1d2d0:	200229d8 	.word	0x200229d8

0001d2d4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d2d4:	1c43      	adds	r3, r0, #1
{
   1d2d6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d2d8:	d020      	beq.n	1d31c <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d2da:	2801      	cmp	r0, #1
   1d2dc:	dd20      	ble.n	1d320 <sys_clock_set_timeout+0x4c>
   1d2de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d2e2:	da1f      	bge.n	1d324 <sys_clock_set_timeout+0x50>
   1d2e4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1d2e6:	f7ff fdf7 	bl	1ced8 <z_nrf_rtc_timer_read>
   1d2ea:	4b0f      	ldr	r3, [pc, #60]	; (1d328 <sys_clock_set_timeout+0x54>)
   1d2ec:	e9d3 1300 	ldrd	r1, r3, [r3]
   1d2f0:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1d2f2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1d2f6:	bf28      	it	cs
   1d2f8:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1d2fa:	480c      	ldr	r0, [pc, #48]	; (1d32c <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1d2fc:	3201      	adds	r2, #1
   1d2fe:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1d300:	4282      	cmp	r2, r0
   1d302:	bf28      	it	cs
   1d304:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1d306:	2000      	movs	r0, #0
   1d308:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1d30a:	4909      	ldr	r1, [pc, #36]	; (1d330 <sys_clock_set_timeout+0x5c>)
   1d30c:	9001      	str	r0, [sp, #4]
   1d30e:	9100      	str	r1, [sp, #0]
   1d310:	f143 0300 	adc.w	r3, r3, #0
   1d314:	f7ff fe02 	bl	1cf1c <compare_set>
}
   1d318:	b002      	add	sp, #8
   1d31a:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d31c:	4803      	ldr	r0, [pc, #12]	; (1d32c <sys_clock_set_timeout+0x58>)
   1d31e:	e7e1      	b.n	1d2e4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d320:	2400      	movs	r4, #0
   1d322:	e7e0      	b.n	1d2e6 <sys_clock_set_timeout+0x12>
   1d324:	4c01      	ldr	r4, [pc, #4]	; (1d32c <sys_clock_set_timeout+0x58>)
   1d326:	e7de      	b.n	1d2e6 <sys_clock_set_timeout+0x12>
   1d328:	20009bf8 	.word	0x20009bf8
   1d32c:	007fffff 	.word	0x007fffff
   1d330:	0001cd6d 	.word	0x0001cd6d

0001d334 <sys_clock_elapsed>:
{
   1d334:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1d336:	f7ff fdcf 	bl	1ced8 <z_nrf_rtc_timer_read>
   1d33a:	4b02      	ldr	r3, [pc, #8]	; (1d344 <sys_clock_elapsed+0x10>)
   1d33c:	681b      	ldr	r3, [r3, #0]
}
   1d33e:	1ac0      	subs	r0, r0, r3
   1d340:	bd08      	pop	{r3, pc}
   1d342:	bf00      	nop
   1d344:	20009bf8 	.word	0x20009bf8

0001d348 <nrf_gpio_pin_port_decode>:
{
   1d348:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d34a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1d34c:	095a      	lsrs	r2, r3, #5
   1d34e:	d00d      	beq.n	1d36c <nrf_gpio_pin_port_decode+0x24>
   1d350:	2a01      	cmp	r2, #1
   1d352:	d013      	beq.n	1d37c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d354:	490e      	ldr	r1, [pc, #56]	; (1d390 <nrf_gpio_pin_port_decode+0x48>)
   1d356:	480f      	ldr	r0, [pc, #60]	; (1d394 <nrf_gpio_pin_port_decode+0x4c>)
   1d358:	f240 2347 	movw	r3, #583	; 0x247
   1d35c:	4a0e      	ldr	r2, [pc, #56]	; (1d398 <nrf_gpio_pin_port_decode+0x50>)
   1d35e:	f008 ff7e 	bl	2625e <assert_print>
   1d362:	f240 2147 	movw	r1, #583	; 0x247
   1d366:	480c      	ldr	r0, [pc, #48]	; (1d398 <nrf_gpio_pin_port_decode+0x50>)
   1d368:	f008 ff72 	bl	26250 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1d36c:	f04f 32ff 	mov.w	r2, #4294967295
   1d370:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d374:	07d9      	lsls	r1, r3, #31
   1d376:	d5ed      	bpl.n	1d354 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1d378:	4808      	ldr	r0, [pc, #32]	; (1d39c <nrf_gpio_pin_port_decode+0x54>)
   1d37a:	e008      	b.n	1d38e <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1d37c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1d380:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d384:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d386:	07d2      	lsls	r2, r2, #31
   1d388:	d5e4      	bpl.n	1d354 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1d38a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1d38c:	4804      	ldr	r0, [pc, #16]	; (1d3a0 <nrf_gpio_pin_port_decode+0x58>)
}
   1d38e:	bd08      	pop	{r3, pc}
   1d390:	00031069 	.word	0x00031069
   1d394:	0002d095 	.word	0x0002d095
   1d398:	00031036 	.word	0x00031036
   1d39c:	40842500 	.word	0x40842500
   1d3a0:	40842800 	.word	0x40842800

0001d3a4 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1d3a4:	b510      	push	{r4, lr}
   1d3a6:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1d3a8:	6902      	ldr	r2, [r0, #16]
{
   1d3aa:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
   1d3ac:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1d3b0:	4924      	ldr	r1, [pc, #144]	; (1d444 <mbox_nrf_init+0xa0>)
   1d3b2:	2000      	movs	r0, #0
   1d3b4:	f001 f812 	bl	1e3dc <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d3b8:	2200      	movs	r2, #0
   1d3ba:	2101      	movs	r1, #1
   1d3bc:	202a      	movs	r0, #42	; 0x2a
   1d3be:	f7f3 fe3b 	bl	11038 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1d3c2:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1d3c4:	2284      	movs	r2, #132	; 0x84
   1d3c6:	2100      	movs	r1, #0
   1d3c8:	a805      	add	r0, sp, #20
   1d3ca:	f00d fceb 	bl	2ada4 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1d3ce:	6863      	ldr	r3, [r4, #4]
   1d3d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1d3d4:	d309      	bcc.n	1d3ea <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1d3d6:	4b1c      	ldr	r3, [pc, #112]	; (1d448 <mbox_nrf_init+0xa4>)
   1d3d8:	2202      	movs	r2, #2
   1d3da:	9302      	str	r3, [sp, #8]
   1d3dc:	2300      	movs	r3, #0
   1d3de:	491b      	ldr	r1, [pc, #108]	; (1d44c <mbox_nrf_init+0xa8>)
   1d3e0:	4618      	mov	r0, r3
   1d3e2:	e9cd 3300 	strd	r3, r3, [sp]
   1d3e6:	f00c fc29 	bl	29c3c <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1d3ea:	6823      	ldr	r3, [r4, #0]
   1d3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1d3f0:	d309      	bcc.n	1d406 <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1d3f2:	4b17      	ldr	r3, [pc, #92]	; (1d450 <mbox_nrf_init+0xac>)
   1d3f4:	2202      	movs	r2, #2
   1d3f6:	9302      	str	r3, [sp, #8]
   1d3f8:	2300      	movs	r3, #0
   1d3fa:	4914      	ldr	r1, [pc, #80]	; (1d44c <mbox_nrf_init+0xa8>)
   1d3fc:	4618      	mov	r0, r3
   1d3fe:	e9cd 3300 	strd	r3, r3, [sp]
   1d402:	f00c fc1b 	bl	29c3c <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
   1d406:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1d408:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1d40a:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1d40c:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
   1d40e:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1d410:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1d412:	40d9      	lsrs	r1, r3
   1d414:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1d416:	bf44      	itt	mi
   1d418:	fa00 f103 	lslmi.w	r1, r0, r3
   1d41c:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1d420:	6821      	ldr	r1, [r4, #0]
   1d422:	40d9      	lsrs	r1, r3
   1d424:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1d426:	bf48      	it	mi
   1d428:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1d42c:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1d430:	bf48      	it	mi
   1d432:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1d434:	2b10      	cmp	r3, #16
   1d436:	d1ea      	bne.n	1d40e <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
   1d438:	a805      	add	r0, sp, #20
   1d43a:	f000 ffe7 	bl	1e40c <nrfx_ipc_config_load>

	return 0;
}
   1d43e:	2000      	movs	r0, #0
   1d440:	b026      	add	sp, #152	; 0x98
   1d442:	bd10      	pop	{r4, pc}
   1d444:	0001d4a5 	.word	0x0001d4a5
   1d448:	000317b1 	.word	0x000317b1
   1d44c:	0002c12c 	.word	0x0002c12c
   1d450:	000317dd 	.word	0x000317dd

0001d454 <mbox_nrf_send>:
{
   1d454:	b530      	push	{r4, r5, lr}
   1d456:	4605      	mov	r5, r0
   1d458:	460c      	mov	r4, r1
   1d45a:	b085      	sub	sp, #20
	if (msg) {
   1d45c:	b14a      	cbz	r2, 1d472 <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
   1d45e:	4b0f      	ldr	r3, [pc, #60]	; (1d49c <mbox_nrf_send+0x48>)
   1d460:	2202      	movs	r2, #2
   1d462:	9302      	str	r3, [sp, #8]
   1d464:	2300      	movs	r3, #0
   1d466:	490e      	ldr	r1, [pc, #56]	; (1d4a0 <mbox_nrf_send+0x4c>)
   1d468:	4618      	mov	r0, r3
   1d46a:	e9cd 3300 	strd	r3, r3, [sp]
   1d46e:	f00c fbe5 	bl	29c3c <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1d472:	2c0f      	cmp	r4, #15
   1d474:	d80f      	bhi.n	1d496 <mbox_nrf_send+0x42>
   1d476:	686b      	ldr	r3, [r5, #4]
   1d478:	685b      	ldr	r3, [r3, #4]
   1d47a:	40e3      	lsrs	r3, r4
   1d47c:	07db      	lsls	r3, r3, #31
   1d47e:	d50a      	bpl.n	1d496 <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d480:	2301      	movs	r3, #1
	return 0;
   1d482:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1d484:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d486:	b2e4      	uxtb	r4, r4
   1d488:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1d48c:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1d490:	6023      	str	r3, [r4, #0]
}
   1d492:	b005      	add	sp, #20
   1d494:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1d496:	f06f 0015 	mvn.w	r0, #21
   1d49a:	e7fa      	b.n	1d492 <mbox_nrf_send+0x3e>
   1d49c:	00031809 	.word	0x00031809
   1d4a0:	0002c12c 	.word	0x0002c12c

0001d4a4 <mbox_dispatcher>:
{
   1d4a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1d4a6:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1d4aa:	280f      	cmp	r0, #15
{
   1d4ac:	4604      	mov	r4, r0
   1d4ae:	460d      	mov	r5, r1
   1d4b0:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1d4b2:	d803      	bhi.n	1d4bc <mbox_dispatcher+0x18>
   1d4b4:	681b      	ldr	r3, [r3, #0]
   1d4b6:	40c3      	lsrs	r3, r0
   1d4b8:	07db      	lsls	r3, r3, #31
   1d4ba:	d409      	bmi.n	1d4d0 <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
   1d4bc:	4b14      	ldr	r3, [pc, #80]	; (1d510 <mbox_dispatcher+0x6c>)
   1d4be:	2202      	movs	r2, #2
   1d4c0:	9302      	str	r3, [sp, #8]
   1d4c2:	2300      	movs	r3, #0
   1d4c4:	4913      	ldr	r1, [pc, #76]	; (1d514 <mbox_dispatcher+0x70>)
   1d4c6:	4618      	mov	r0, r3
   1d4c8:	e9cd 3300 	strd	r3, r3, [sp]
   1d4cc:	f00c fbb6 	bl	29c3c <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
   1d4d0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d4d4:	40e3      	lsrs	r3, r4
   1d4d6:	f013 0301 	ands.w	r3, r3, #1
   1d4da:	d108      	bne.n	1d4ee <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
   1d4dc:	4a0e      	ldr	r2, [pc, #56]	; (1d518 <mbox_dispatcher+0x74>)
   1d4de:	4618      	mov	r0, r3
   1d4e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d4e4:	490b      	ldr	r1, [pc, #44]	; (1d514 <mbox_dispatcher+0x70>)
   1d4e6:	2202      	movs	r2, #2
   1d4e8:	9300      	str	r3, [sp, #0]
   1d4ea:	f00c fba7 	bl	29c3c <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
   1d4ee:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1d4f2:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1d4f6:	b145      	cbz	r5, 1d50a <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1d4f8:	2300      	movs	r3, #0
   1d4fa:	4621      	mov	r1, r4
   1d4fc:	4630      	mov	r0, r6
   1d4fe:	46ac      	mov	ip, r5
   1d500:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1d502:	b004      	add	sp, #16
   1d504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1d508:	4760      	bx	ip
}
   1d50a:	b004      	add	sp, #16
   1d50c:	bd70      	pop	{r4, r5, r6, pc}
   1d50e:	bf00      	nop
   1d510:	00031824 	.word	0x00031824
   1d514:	0002c12c 	.word	0x0002c12c
   1d518:	00031840 	.word	0x00031840

0001d51c <mbox_nrf_set_enabled>:
{
   1d51c:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1d51e:	290f      	cmp	r1, #15
{
   1d520:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1d522:	6905      	ldr	r5, [r0, #16]
{
   1d524:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1d526:	d841      	bhi.n	1d5ac <mbox_nrf_set_enabled+0x90>
   1d528:	6843      	ldr	r3, [r0, #4]
   1d52a:	681b      	ldr	r3, [r3, #0]
   1d52c:	40cb      	lsrs	r3, r1
   1d52e:	07db      	lsls	r3, r3, #31
   1d530:	d53c      	bpl.n	1d5ac <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1d532:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d536:	40cb      	lsrs	r3, r1
   1d538:	f003 0301 	and.w	r3, r3, #1
   1d53c:	b91a      	cbnz	r2, 1d546 <mbox_nrf_set_enabled+0x2a>
   1d53e:	bb0b      	cbnz	r3, 1d584 <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
   1d540:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1d544:	e030      	b.n	1d5a8 <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1d546:	2b00      	cmp	r3, #0
   1d548:	d1fa      	bne.n	1d540 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1d54a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1d54e:	b943      	cbnz	r3, 1d562 <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   1d550:	4a18      	ldr	r2, [pc, #96]	; (1d5b4 <mbox_nrf_set_enabled+0x98>)
   1d552:	4618      	mov	r0, r3
   1d554:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d558:	4917      	ldr	r1, [pc, #92]	; (1d5b8 <mbox_nrf_set_enabled+0x9c>)
   1d55a:	2202      	movs	r2, #2
   1d55c:	9300      	str	r3, [sp, #0]
   1d55e:	f00c fb6d 	bl	29c3c <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
   1d562:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d566:	b913      	cbnz	r3, 1d56e <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
   1d568:	202a      	movs	r0, #42	; 0x2a
   1d56a:	f7f3 fd35 	bl	10fd8 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1d56e:	2201      	movs	r2, #1
   1d570:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d574:	40a2      	lsls	r2, r4
   1d576:	4313      	orrs	r3, r2
   1d578:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1d57c:	b2e0      	uxtb	r0, r4
   1d57e:	f000 ff87 	bl	1e490 <nrfx_ipc_receive_event_enable>
   1d582:	e00a      	b.n	1d59a <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
   1d584:	b2c8      	uxtb	r0, r1
   1d586:	f000 ffa1 	bl	1e4cc <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1d58a:	2201      	movs	r2, #1
   1d58c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d590:	40a2      	lsls	r2, r4
   1d592:	ea23 0302 	bic.w	r3, r3, r2
   1d596:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1d59a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d59e:	b913      	cbnz	r3, 1d5a6 <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
   1d5a0:	202a      	movs	r0, #42	; 0x2a
   1d5a2:	f7f3 fd27 	bl	10ff4 <arch_irq_disable>
	return 0;
   1d5a6:	2000      	movs	r0, #0
}
   1d5a8:	b005      	add	sp, #20
   1d5aa:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1d5ac:	f06f 0015 	mvn.w	r0, #21
   1d5b0:	e7fa      	b.n	1d5a8 <mbox_nrf_set_enabled+0x8c>
   1d5b2:	bf00      	nop
   1d5b4:	0003185d 	.word	0x0003185d
   1d5b8:	0002c12c 	.word	0x0002c12c

0001d5bc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1d5bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1d5be:	ab0b      	add	r3, sp, #44	; 0x2c
   1d5c0:	9305      	str	r3, [sp, #20]
   1d5c2:	9303      	str	r3, [sp, #12]
   1d5c4:	4b05      	ldr	r3, [pc, #20]	; (1d5dc <z_log_msg_runtime_create.constprop.0+0x20>)
   1d5c6:	2201      	movs	r2, #1
   1d5c8:	9302      	str	r3, [sp, #8]
   1d5ca:	2300      	movs	r3, #0
   1d5cc:	4618      	mov	r0, r3
   1d5ce:	e9cd 3300 	strd	r3, r3, [sp]
   1d5d2:	f7f1 fe23 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   1d5d6:	b007      	add	sp, #28
   1d5d8:	f85d fb04 	ldr.w	pc, [sp], #4
   1d5dc:	000318ba 	.word	0x000318ba

0001d5e0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1d5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1d5e2:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1d5e4:	f7f1 fd68 	bl	f0b8 <z_impl_log_panic>
   1d5e8:	4b06      	ldr	r3, [pc, #24]	; (1d604 <k_sys_fatal_error_handler+0x24>)
   1d5ea:	4620      	mov	r0, r4
   1d5ec:	9302      	str	r3, [sp, #8]
   1d5ee:	2201      	movs	r2, #1
   1d5f0:	4623      	mov	r3, r4
   1d5f2:	e9cd 4400 	strd	r4, r4, [sp]
   1d5f6:	4904      	ldr	r1, [pc, #16]	; (1d608 <k_sys_fatal_error_handler+0x28>)
   1d5f8:	f7ff ffe0 	bl	1d5bc <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   1d5fc:	4620      	mov	r0, r4
   1d5fe:	f7f4 f98b 	bl	11918 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1d602:	bf00      	nop
   1d604:	000318ba 	.word	0x000318ba
   1d608:	0002c0f4 	.word	0x0002c0f4

0001d60c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1d60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d610:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1d612:	4b15      	ldr	r3, [pc, #84]	; (1d668 <tfm_ns_interface_dispatch+0x5c>)
   1d614:	4604      	mov	r4, r0
   1d616:	f893 8000 	ldrb.w	r8, [r3]
   1d61a:	460d      	mov	r5, r1
   1d61c:	4616      	mov	r6, r2
   1d61e:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1d620:	f1b8 0f00 	cmp.w	r8, #0
   1d624:	d115      	bne.n	1d652 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1d626:	4668      	mov	r0, sp
   1d628:	f009 fe7a 	bl	27320 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1d62c:	463a      	mov	r2, r7
   1d62e:	4631      	mov	r1, r6
   1d630:	4628      	mov	r0, r5
   1d632:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1d634:	47a0      	blx	r4
   1d636:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1d638:	4668      	mov	r0, sp
   1d63a:	f009 fe72 	bl	27322 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1d63e:	f1b8 0f00 	cmp.w	r8, #0
   1d642:	d002      	beq.n	1d64a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1d644:	4809      	ldr	r0, [pc, #36]	; (1d66c <tfm_ns_interface_dispatch+0x60>)
   1d646:	f003 f9bd 	bl	209c4 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1d64a:	4620      	mov	r0, r4
   1d64c:	b022      	add	sp, #136	; 0x88
   1d64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1d652:	f04f 32ff 	mov.w	r2, #4294967295
   1d656:	f04f 33ff 	mov.w	r3, #4294967295
   1d65a:	4804      	ldr	r0, [pc, #16]	; (1d66c <tfm_ns_interface_dispatch+0x60>)
   1d65c:	f003 f8e2 	bl	20824 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1d660:	2800      	cmp	r0, #0
   1d662:	d0e0      	beq.n	1d626 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1d664:	241f      	movs	r4, #31
   1d666:	e7f0      	b.n	1d64a <tfm_ns_interface_dispatch+0x3e>
   1d668:	20023b0a 	.word	0x20023b0a
   1d66c:	20008abc 	.word	0x20008abc

0001d670 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1d670:	b530      	push	{r4, r5, lr}
   1d672:	b095      	sub	sp, #84	; 0x54
   1d674:	4605      	mov	r5, r0
   1d676:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1d678:	2230      	movs	r2, #48	; 0x30
   1d67a:	2100      	movs	r1, #0
   1d67c:	a808      	add	r0, sp, #32
   1d67e:	f00d fb91 	bl	2ada4 <memset>
   1d682:	233f      	movs	r3, #63	; 0x3f
   1d684:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1d686:	ab07      	add	r3, sp, #28
   1d688:	9303      	str	r3, [sp, #12]
   1d68a:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1d68c:	9406      	str	r4, [sp, #24]
   1d68e:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1d692:	b154      	cbz	r4, 1d6aa <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1d694:	2301      	movs	r3, #1
   1d696:	aa05      	add	r2, sp, #20
   1d698:	9200      	str	r2, [sp, #0]
   1d69a:	2100      	movs	r1, #0
   1d69c:	4804      	ldr	r0, [pc, #16]	; (1d6b0 <psa_generate_random+0x40>)
   1d69e:	9301      	str	r3, [sp, #4]
   1d6a0:	aa03      	add	r2, sp, #12
   1d6a2:	f000 f807 	bl	1d6b4 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1d6a6:	b015      	add	sp, #84	; 0x54
   1d6a8:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1d6aa:	4620      	mov	r0, r4
   1d6ac:	e7fb      	b.n	1d6a6 <psa_generate_random+0x36>
   1d6ae:	bf00      	nop
   1d6b0:	40000100 	.word	0x40000100

0001d6b4 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1d6b4:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1d6b6:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1d6ba:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1d6be:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1d6c0:	d20d      	bcs.n	1d6de <psa_call+0x2a>
        (type < INT16_MIN) ||
   1d6c2:	ea43 0504 	orr.w	r5, r3, r4
   1d6c6:	2dff      	cmp	r5, #255	; 0xff
   1d6c8:	d809      	bhi.n	1d6de <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1d6ca:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1d6ce:	4613      	mov	r3, r2
   1d6d0:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1d6d4:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1d6d6:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1d6d8:	4803      	ldr	r0, [pc, #12]	; (1d6e8 <psa_call+0x34>)
   1d6da:	f7ff bf97 	b.w	1d60c <tfm_ns_interface_dispatch>
}
   1d6de:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1d6e2:	bc30      	pop	{r4, r5}
   1d6e4:	4770      	bx	lr
   1d6e6:	bf00      	nop
   1d6e8:	00007c21 	.word	0x00007c21

0001d6ec <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1d6ec:	2300      	movs	r3, #0
{
   1d6ee:	b507      	push	{r0, r1, r2, lr}
   1d6f0:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1d6f2:	9300      	str	r3, [sp, #0]
   1d6f4:	4601      	mov	r1, r0
   1d6f6:	4803      	ldr	r0, [pc, #12]	; (1d704 <psa_connect+0x18>)
   1d6f8:	f7ff ff88 	bl	1d60c <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1d6fc:	b003      	add	sp, #12
   1d6fe:	f85d fb04 	ldr.w	pc, [sp], #4
   1d702:	bf00      	nop
   1d704:	00007c19 	.word	0x00007c19

0001d708 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1d708:	2300      	movs	r3, #0
{
   1d70a:	b507      	push	{r0, r1, r2, lr}
   1d70c:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1d70e:	461a      	mov	r2, r3
   1d710:	9300      	str	r3, [sp, #0]
   1d712:	4803      	ldr	r0, [pc, #12]	; (1d720 <psa_close+0x18>)
   1d714:	f7ff ff7a 	bl	1d60c <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1d718:	b003      	add	sp, #12
   1d71a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d71e:	bf00      	nop
   1d720:	00007c11 	.word	0x00007c11

0001d724 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1d724:	4b04      	ldr	r3, [pc, #16]	; (1d738 <SystemCoreClockUpdate+0x14>)
   1d726:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1d72a:	4b04      	ldr	r3, [pc, #16]	; (1d73c <SystemCoreClockUpdate+0x18>)
   1d72c:	f002 0203 	and.w	r2, r2, #3
   1d730:	40d3      	lsrs	r3, r2
   1d732:	4a03      	ldr	r2, [pc, #12]	; (1d740 <SystemCoreClockUpdate+0x1c>)
   1d734:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1d736:	4770      	bx	lr
   1d738:	40005000 	.word	0x40005000
   1d73c:	07a12000 	.word	0x07a12000
   1d740:	20008684 	.word	0x20008684

0001d744 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1d744:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1d746:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1d748:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1d74a:	fab2 f382 	clz	r3, r2
   1d74e:	f1c3 031f 	rsb	r3, r3, #31
   1d752:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1d754:	fa05 f403 	lsl.w	r4, r5, r3
   1d758:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d75c:	e8d0 6fef 	ldaex	r6, [r0]
   1d760:	4296      	cmp	r6, r2
   1d762:	d104      	bne.n	1d76e <nrfx_flag32_alloc+0x2a>
   1d764:	e8c0 4fec 	stlex	ip, r4, [r0]
   1d768:	f1bc 0f00 	cmp.w	ip, #0
   1d76c:	d1f6      	bne.n	1d75c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1d76e:	d1eb      	bne.n	1d748 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1d770:	4801      	ldr	r0, [pc, #4]	; (1d778 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1d772:	700b      	strb	r3, [r1, #0]
}
   1d774:	bd70      	pop	{r4, r5, r6, pc}
   1d776:	bf00      	nop
   1d778:	0bad0000 	.word	0x0bad0000

0001d77c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1d77c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1d77e:	6803      	ldr	r3, [r0, #0]
   1d780:	40cb      	lsrs	r3, r1
   1d782:	07db      	lsls	r3, r3, #31
   1d784:	d410      	bmi.n	1d7a8 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1d786:	2301      	movs	r3, #1
   1d788:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1d78a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1d78c:	ea43 0102 	orr.w	r1, r3, r2
   1d790:	e8d0 4fef 	ldaex	r4, [r0]
   1d794:	4294      	cmp	r4, r2
   1d796:	d104      	bne.n	1d7a2 <nrfx_flag32_free+0x26>
   1d798:	e8c0 1fec 	stlex	ip, r1, [r0]
   1d79c:	f1bc 0f00 	cmp.w	ip, #0
   1d7a0:	d1f6      	bne.n	1d790 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1d7a2:	d1f2      	bne.n	1d78a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1d7a4:	4801      	ldr	r0, [pc, #4]	; (1d7ac <nrfx_flag32_free+0x30>)
}
   1d7a6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d7a8:	4801      	ldr	r0, [pc, #4]	; (1d7b0 <nrfx_flag32_free+0x34>)
   1d7aa:	e7fc      	b.n	1d7a6 <nrfx_flag32_free+0x2a>
   1d7ac:	0bad0000 	.word	0x0bad0000
   1d7b0:	0bad0004 	.word	0x0bad0004

0001d7b4 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1d7b4:	2200      	movs	r2, #0
{
   1d7b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d7b8:	4b62      	ldr	r3, [pc, #392]	; (1d944 <clock_stop+0x190>)
    switch (domain)
   1d7ba:	2803      	cmp	r0, #3
   1d7bc:	d838      	bhi.n	1d830 <clock_stop+0x7c>
   1d7be:	e8df f000 	tbb	[pc, r0]
   1d7c2:	0d02      	.short	0x0d02
   1d7c4:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1d7c6:	2102      	movs	r1, #2
   1d7c8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d7cc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1d7d0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d7d4:	2201      	movs	r2, #1
   1d7d6:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1d7d8:	2400      	movs	r4, #0
   1d7da:	e009      	b.n	1d7f0 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1d7dc:	2101      	movs	r1, #1
   1d7de:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d7e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d7e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1d7ea:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d7ee:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1d7f0:	2301      	movs	r3, #1
   1d7f2:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1d7f6:	2803      	cmp	r0, #3
   1d7f8:	f200 8093 	bhi.w	1d922 <clock_stop+0x16e>
   1d7fc:	e8df f000 	tbb	[pc, r0]
   1d800:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1d804:	f44f 7100 	mov.w	r1, #512	; 0x200
   1d808:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d80c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1d810:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d814:	2201      	movs	r2, #1
   1d816:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1d818:	e7de      	b.n	1d7d8 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1d81a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d81e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d822:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1d826:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d82a:	2201      	movs	r2, #1
   1d82c:	61da      	str	r2, [r3, #28]
   1d82e:	e7d3      	b.n	1d7d8 <clock_stop+0x24>
            NRFX_ASSERT(0);
   1d830:	4945      	ldr	r1, [pc, #276]	; (1d948 <clock_stop+0x194>)
   1d832:	4846      	ldr	r0, [pc, #280]	; (1d94c <clock_stop+0x198>)
   1d834:	23d8      	movs	r3, #216	; 0xd8
   1d836:	4a46      	ldr	r2, [pc, #280]	; (1d950 <clock_stop+0x19c>)
   1d838:	f008 fd11 	bl	2625e <assert_print>
   1d83c:	21d8      	movs	r1, #216	; 0xd8
   1d83e:	4844      	ldr	r0, [pc, #272]	; (1d950 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1d840:	f008 fd06 	bl	26250 <assert_post_action>
    switch (domain)
   1d844:	f242 7510 	movw	r5, #10000	; 0x2710
   1d848:	4e3e      	ldr	r6, [pc, #248]	; (1d944 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1d84a:	b194      	cbz	r4, 1d872 <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d84c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1d850:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1d854:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d856:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1d85a:	03d9      	lsls	r1, r3, #15
   1d85c:	d507      	bpl.n	1d86e <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1d85e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d862:	2801      	cmp	r0, #1
   1d864:	d103      	bne.n	1d86e <clock_stop+0xba>
   1d866:	f00c fa5f 	bl	29d28 <nrfx_busy_wait>
   1d86a:	3d01      	subs	r5, #1
   1d86c:	d1ed      	bne.n	1d84a <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1d86e:	b002      	add	sp, #8
   1d870:	bd70      	pop	{r4, r5, r6, pc}
   1d872:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1d876:	03da      	lsls	r2, r3, #15
   1d878:	d5f9      	bpl.n	1d86e <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1d87a:	2001      	movs	r0, #1
   1d87c:	f00c fa54 	bl	29d28 <nrfx_busy_wait>
   1d880:	3d01      	subs	r5, #1
   1d882:	d1f6      	bne.n	1d872 <clock_stop+0xbe>
   1d884:	e7f3      	b.n	1d86e <clock_stop+0xba>
    switch (domain)
   1d886:	f242 7510 	movw	r5, #10000	; 0x2710
   1d88a:	4e2e      	ldr	r6, [pc, #184]	; (1d944 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1d88c:	b18c      	cbz	r4, 1d8b2 <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d88e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1d892:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1d896:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d898:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1d89c:	03db      	lsls	r3, r3, #15
   1d89e:	d5e6      	bpl.n	1d86e <clock_stop+0xba>
   1d8a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d8a4:	2801      	cmp	r0, #1
   1d8a6:	d1e2      	bne.n	1d86e <clock_stop+0xba>
   1d8a8:	f00c fa3e 	bl	29d28 <nrfx_busy_wait>
   1d8ac:	3d01      	subs	r5, #1
   1d8ae:	d1ed      	bne.n	1d88c <clock_stop+0xd8>
   1d8b0:	e7dd      	b.n	1d86e <clock_stop+0xba>
   1d8b2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1d8b6:	03d8      	lsls	r0, r3, #15
   1d8b8:	d5d9      	bpl.n	1d86e <clock_stop+0xba>
   1d8ba:	2001      	movs	r0, #1
   1d8bc:	f00c fa34 	bl	29d28 <nrfx_busy_wait>
   1d8c0:	3d01      	subs	r5, #1
   1d8c2:	d1f6      	bne.n	1d8b2 <clock_stop+0xfe>
   1d8c4:	e7d3      	b.n	1d86e <clock_stop+0xba>
    switch (domain)
   1d8c6:	f242 7510 	movw	r5, #10000	; 0x2710
   1d8ca:	4e1e      	ldr	r6, [pc, #120]	; (1d944 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1d8cc:	b18c      	cbz	r4, 1d8f2 <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1d8ce:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1d8d2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1d8d6:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1d8d8:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1d8dc:	03d9      	lsls	r1, r3, #15
   1d8de:	d5c6      	bpl.n	1d86e <clock_stop+0xba>
   1d8e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d8e4:	2801      	cmp	r0, #1
   1d8e6:	d1c2      	bne.n	1d86e <clock_stop+0xba>
   1d8e8:	f00c fa1e 	bl	29d28 <nrfx_busy_wait>
   1d8ec:	3d01      	subs	r5, #1
   1d8ee:	d1ed      	bne.n	1d8cc <clock_stop+0x118>
   1d8f0:	e7bd      	b.n	1d86e <clock_stop+0xba>
   1d8f2:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1d8f6:	03da      	lsls	r2, r3, #15
   1d8f8:	d5b9      	bpl.n	1d86e <clock_stop+0xba>
   1d8fa:	2001      	movs	r0, #1
   1d8fc:	f00c fa14 	bl	29d28 <nrfx_busy_wait>
   1d900:	3d01      	subs	r5, #1
   1d902:	d1f6      	bne.n	1d8f2 <clock_stop+0x13e>
   1d904:	e7b3      	b.n	1d86e <clock_stop+0xba>
    switch (domain)
   1d906:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1d90a:	4e0e      	ldr	r6, [pc, #56]	; (1d944 <clock_stop+0x190>)
   1d90c:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1d910:	03db      	lsls	r3, r3, #15
   1d912:	d5ac      	bpl.n	1d86e <clock_stop+0xba>
   1d914:	b984      	cbnz	r4, 1d938 <clock_stop+0x184>
   1d916:	2001      	movs	r0, #1
   1d918:	f00c fa06 	bl	29d28 <nrfx_busy_wait>
   1d91c:	3d01      	subs	r5, #1
   1d91e:	d1f5      	bne.n	1d90c <clock_stop+0x158>
   1d920:	e7a5      	b.n	1d86e <clock_stop+0xba>
            NRFX_ASSERT(0);
   1d922:	4909      	ldr	r1, [pc, #36]	; (1d948 <clock_stop+0x194>)
   1d924:	4809      	ldr	r0, [pc, #36]	; (1d94c <clock_stop+0x198>)
   1d926:	f240 3347 	movw	r3, #839	; 0x347
   1d92a:	4a0a      	ldr	r2, [pc, #40]	; (1d954 <clock_stop+0x1a0>)
   1d92c:	f008 fc97 	bl	2625e <assert_print>
   1d930:	f240 3147 	movw	r1, #839	; 0x347
   1d934:	4807      	ldr	r0, [pc, #28]	; (1d954 <clock_stop+0x1a0>)
   1d936:	e783      	b.n	1d840 <clock_stop+0x8c>
   1d938:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d93c:	2801      	cmp	r0, #1
   1d93e:	d0eb      	beq.n	1d918 <clock_stop+0x164>
   1d940:	e795      	b.n	1d86e <clock_stop+0xba>
   1d942:	bf00      	nop
   1d944:	40005000 	.word	0x40005000
   1d948:	0003297c 	.word	0x0003297c
   1d94c:	0002d095 	.word	0x0002d095
   1d950:	000318d7 	.word	0x000318d7
   1d954:	00031914 	.word	0x00031914

0001d958 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1d958:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1d95a:	b958      	cbnz	r0, 1d974 <nrfx_clock_init+0x1c>
   1d95c:	490a      	ldr	r1, [pc, #40]	; (1d988 <nrfx_clock_init+0x30>)
   1d95e:	480b      	ldr	r0, [pc, #44]	; (1d98c <nrfx_clock_init+0x34>)
   1d960:	f240 1315 	movw	r3, #277	; 0x115
   1d964:	4a0a      	ldr	r2, [pc, #40]	; (1d990 <nrfx_clock_init+0x38>)
   1d966:	f008 fc7a 	bl	2625e <assert_print>
   1d96a:	f240 1115 	movw	r1, #277	; 0x115
   1d96e:	4808      	ldr	r0, [pc, #32]	; (1d990 <nrfx_clock_init+0x38>)
   1d970:	f008 fc6e 	bl	26250 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1d974:	4b07      	ldr	r3, [pc, #28]	; (1d994 <nrfx_clock_init+0x3c>)
   1d976:	791a      	ldrb	r2, [r3, #4]
   1d978:	b922      	cbnz	r2, 1d984 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1d97a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1d97c:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1d97e:	4806      	ldr	r0, [pc, #24]	; (1d998 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1d980:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1d982:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1d984:	4805      	ldr	r0, [pc, #20]	; (1d99c <nrfx_clock_init+0x44>)
    return err_code;
   1d986:	e7fc      	b.n	1d982 <nrfx_clock_init+0x2a>
   1d988:	00031948 	.word	0x00031948
   1d98c:	0002d095 	.word	0x0002d095
   1d990:	000318d7 	.word	0x000318d7
   1d994:	20022a6c 	.word	0x20022a6c
   1d998:	0bad0000 	.word	0x0bad0000
   1d99c:	0bad000c 	.word	0x0bad000c

0001d9a0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1d9a0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1d9a2:	4b0f      	ldr	r3, [pc, #60]	; (1d9e0 <nrfx_clock_enable+0x40>)
   1d9a4:	791b      	ldrb	r3, [r3, #4]
   1d9a6:	b95b      	cbnz	r3, 1d9c0 <nrfx_clock_enable+0x20>
   1d9a8:	490e      	ldr	r1, [pc, #56]	; (1d9e4 <nrfx_clock_enable+0x44>)
   1d9aa:	480f      	ldr	r0, [pc, #60]	; (1d9e8 <nrfx_clock_enable+0x48>)
   1d9ac:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1d9b0:	4a0e      	ldr	r2, [pc, #56]	; (1d9ec <nrfx_clock_enable+0x4c>)
   1d9b2:	f008 fc54 	bl	2625e <assert_print>
   1d9b6:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1d9ba:	480c      	ldr	r0, [pc, #48]	; (1d9ec <nrfx_clock_enable+0x4c>)
   1d9bc:	f008 fc48 	bl	26250 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1d9c0:	2005      	movs	r0, #5
   1d9c2:	f7f3 fb2b 	bl	1101c <arch_irq_is_enabled>
   1d9c6:	b910      	cbnz	r0, 1d9ce <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1d9c8:	2005      	movs	r0, #5
   1d9ca:	f7f3 fb05 	bl	10fd8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d9ce:	2201      	movs	r2, #1
   1d9d0:	4b07      	ldr	r3, [pc, #28]	; (1d9f0 <nrfx_clock_enable+0x50>)
   1d9d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1d9d6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1d9da:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1d9de:	bd08      	pop	{r3, pc}
   1d9e0:	20022a6c 	.word	0x20022a6c
   1d9e4:	00031956 	.word	0x00031956
   1d9e8:	0002d095 	.word	0x0002d095
   1d9ec:	000318d7 	.word	0x000318d7
   1d9f0:	40005000 	.word	0x40005000

0001d9f4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1d9f4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1d9f6:	4b38      	ldr	r3, [pc, #224]	; (1dad8 <nrfx_clock_start+0xe4>)
   1d9f8:	791b      	ldrb	r3, [r3, #4]
   1d9fa:	b95b      	cbnz	r3, 1da14 <nrfx_clock_start+0x20>
   1d9fc:	4937      	ldr	r1, [pc, #220]	; (1dadc <nrfx_clock_start+0xe8>)
   1d9fe:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1da02:	4a37      	ldr	r2, [pc, #220]	; (1dae0 <nrfx_clock_start+0xec>)
   1da04:	4837      	ldr	r0, [pc, #220]	; (1dae4 <nrfx_clock_start+0xf0>)
   1da06:	f008 fc2a 	bl	2625e <assert_print>
   1da0a:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1da0e:	4834      	ldr	r0, [pc, #208]	; (1dae0 <nrfx_clock_start+0xec>)
   1da10:	f008 fc1e 	bl	26250 <assert_post_action>
    switch (domain)
   1da14:	4b34      	ldr	r3, [pc, #208]	; (1dae8 <nrfx_clock_start+0xf4>)
   1da16:	2803      	cmp	r0, #3
   1da18:	d853      	bhi.n	1dac2 <nrfx_clock_start+0xce>
   1da1a:	e8df f000 	tbb	[pc, r0]
   1da1e:	3002      	.short	0x3002
   1da20:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1da22:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1da26:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1da2a:	03c9      	lsls	r1, r1, #15
   1da2c:	d511      	bpl.n	1da52 <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1da2e:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1da32:	2b02      	cmp	r3, #2
   1da34:	d11c      	bne.n	1da70 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1da36:	4a2c      	ldr	r2, [pc, #176]	; (1dae8 <nrfx_clock_start+0xf4>)
   1da38:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1da3c:	2300      	movs	r3, #0
   1da3e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1da42:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1da46:	2302      	movs	r3, #2
   1da48:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1da4c:	2301      	movs	r3, #1
   1da4e:	6093      	str	r3, [r2, #8]
}
   1da50:	e00d      	b.n	1da6e <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1da52:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1da56:	07d2      	lsls	r2, r2, #31
   1da58:	d50f      	bpl.n	1da7a <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1da5a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1da5e:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1da62:	3a01      	subs	r2, #1
   1da64:	2a01      	cmp	r2, #1
   1da66:	d805      	bhi.n	1da74 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1da68:	2202      	movs	r2, #2
   1da6a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1da6e:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1da70:	2b01      	cmp	r3, #1
   1da72:	d002      	beq.n	1da7a <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1da74:	2000      	movs	r0, #0
   1da76:	f7ff fe9d 	bl	1d7b4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1da7a:	2301      	movs	r3, #1
   1da7c:	e7db      	b.n	1da36 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1da7e:	2200      	movs	r2, #0
   1da80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1da84:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1da88:	2201      	movs	r2, #1
   1da8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1da8e:	601a      	str	r2, [r3, #0]
}
   1da90:	e7ed      	b.n	1da6e <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1da92:	2200      	movs	r2, #0
   1da94:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1da98:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1da9c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1daa0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1daa4:	2201      	movs	r2, #1
   1daa6:	621a      	str	r2, [r3, #32]
}
   1daa8:	e7e1      	b.n	1da6e <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1daaa:	2200      	movs	r2, #0
   1daac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1dab0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1dab4:	f44f 7280 	mov.w	r2, #256	; 0x100
   1dab8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dabc:	2201      	movs	r2, #1
   1dabe:	619a      	str	r2, [r3, #24]
}
   1dac0:	e7d5      	b.n	1da6e <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1dac2:	490a      	ldr	r1, [pc, #40]	; (1daec <nrfx_clock_start+0xf8>)
   1dac4:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1dac8:	4a05      	ldr	r2, [pc, #20]	; (1dae0 <nrfx_clock_start+0xec>)
   1daca:	4806      	ldr	r0, [pc, #24]	; (1dae4 <nrfx_clock_start+0xf0>)
   1dacc:	f008 fbc7 	bl	2625e <assert_print>
   1dad0:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1dad4:	e79b      	b.n	1da0e <nrfx_clock_start+0x1a>
   1dad6:	bf00      	nop
   1dad8:	20022a6c 	.word	0x20022a6c
   1dadc:	00031956 	.word	0x00031956
   1dae0:	000318d7 	.word	0x000318d7
   1dae4:	0002d095 	.word	0x0002d095
   1dae8:	40005000 	.word	0x40005000
   1daec:	0003297c 	.word	0x0003297c

0001daf0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1daf0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1daf2:	4b09      	ldr	r3, [pc, #36]	; (1db18 <nrfx_clock_stop+0x28>)
   1daf4:	791b      	ldrb	r3, [r3, #4]
   1daf6:	b95b      	cbnz	r3, 1db10 <nrfx_clock_stop+0x20>
   1daf8:	4908      	ldr	r1, [pc, #32]	; (1db1c <nrfx_clock_stop+0x2c>)
   1dafa:	4809      	ldr	r0, [pc, #36]	; (1db20 <nrfx_clock_stop+0x30>)
   1dafc:	f240 13ad 	movw	r3, #429	; 0x1ad
   1db00:	4a08      	ldr	r2, [pc, #32]	; (1db24 <nrfx_clock_stop+0x34>)
   1db02:	f008 fbac 	bl	2625e <assert_print>
   1db06:	f240 11ad 	movw	r1, #429	; 0x1ad
   1db0a:	4806      	ldr	r0, [pc, #24]	; (1db24 <nrfx_clock_stop+0x34>)
   1db0c:	f008 fba0 	bl	26250 <assert_post_action>
    clock_stop(domain);
}
   1db10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1db14:	f7ff be4e 	b.w	1d7b4 <clock_stop>
   1db18:	20022a6c 	.word	0x20022a6c
   1db1c:	00031956 	.word	0x00031956
   1db20:	0002d095 	.word	0x0002d095
   1db24:	000318d7 	.word	0x000318d7

0001db28 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1db28:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1db2a:	4b28      	ldr	r3, [pc, #160]	; (1dbcc <nrfx_power_clock_irq_handler+0xa4>)
   1db2c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1db30:	b152      	cbz	r2, 1db48 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db32:	2000      	movs	r0, #0
   1db34:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1db38:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1db3c:	2201      	movs	r2, #1
   1db3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1db42:	4b23      	ldr	r3, [pc, #140]	; (1dbd0 <nrfx_power_clock_irq_handler+0xa8>)
   1db44:	681b      	ldr	r3, [r3, #0]
   1db46:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1db48:	4b20      	ldr	r3, [pc, #128]	; (1dbcc <nrfx_power_clock_irq_handler+0xa4>)
   1db4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1db4e:	b18a      	cbz	r2, 1db74 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db50:	2200      	movs	r2, #0
   1db52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1db56:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1db5a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1db5e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1db62:	f002 0203 	and.w	r2, r2, #3
   1db66:	2a01      	cmp	r2, #1
   1db68:	f04f 0102 	mov.w	r1, #2
   1db6c:	d126      	bne.n	1dbbc <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1db6e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1db72:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1db74:	4b15      	ldr	r3, [pc, #84]	; (1dbcc <nrfx_power_clock_irq_handler+0xa4>)
   1db76:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1db7a:	b162      	cbz	r2, 1db96 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db7c:	2200      	movs	r2, #0
   1db7e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1db82:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1db86:	f44f 7280 	mov.w	r2, #256	; 0x100
   1db8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1db8e:	4b10      	ldr	r3, [pc, #64]	; (1dbd0 <nrfx_power_clock_irq_handler+0xa8>)
   1db90:	2004      	movs	r0, #4
   1db92:	681b      	ldr	r3, [r3, #0]
   1db94:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1db96:	4b0d      	ldr	r3, [pc, #52]	; (1dbcc <nrfx_power_clock_irq_handler+0xa4>)
   1db98:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1db9c:	b1aa      	cbz	r2, 1dbca <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db9e:	2200      	movs	r2, #0
   1dba0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1dba4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1dba8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1dbac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1dbb0:	4b07      	ldr	r3, [pc, #28]	; (1dbd0 <nrfx_power_clock_irq_handler+0xa8>)
   1dbb2:	2005      	movs	r0, #5
    }
#endif
}
   1dbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1dbb8:	681b      	ldr	r3, [r3, #0]
   1dbba:	4718      	bx	r3
   1dbbc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1dbc0:	4b03      	ldr	r3, [pc, #12]	; (1dbd0 <nrfx_power_clock_irq_handler+0xa8>)
   1dbc2:	2001      	movs	r0, #1
   1dbc4:	681b      	ldr	r3, [r3, #0]
   1dbc6:	4798      	blx	r3
   1dbc8:	e7d4      	b.n	1db74 <nrfx_power_clock_irq_handler+0x4c>
}
   1dbca:	bd10      	pop	{r4, pc}
   1dbcc:	40005000 	.word	0x40005000
   1dbd0:	20022a6c 	.word	0x20022a6c

0001dbd4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1dbd4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1dbd6:	4801      	ldr	r0, [pc, #4]	; (1dbdc <nrfx_dppi_channel_alloc+0x8>)
   1dbd8:	f7ff bdb4 	b.w	1d744 <nrfx_flag32_alloc>
   1dbdc:	20008688 	.word	0x20008688

0001dbe0 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1dbe0:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1dbe2:	4a04      	ldr	r2, [pc, #16]	; (1dbf4 <nrfx_dppi_channel_free+0x14>)
   1dbe4:	4083      	lsls	r3, r0
{
   1dbe6:	4601      	mov	r1, r0
   1dbe8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1dbec:	4802      	ldr	r0, [pc, #8]	; (1dbf8 <nrfx_dppi_channel_free+0x18>)
   1dbee:	f7ff bdc5 	b.w	1d77c <nrfx_flag32_free>
   1dbf2:	bf00      	nop
   1dbf4:	40017000 	.word	0x40017000
   1dbf8:	20008688 	.word	0x20008688

0001dbfc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1dbfc:	4b03      	ldr	r3, [pc, #12]	; (1dc0c <pin_in_use_by_te+0x10>)
   1dbfe:	3008      	adds	r0, #8
   1dc00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1dc04:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1dc08:	4770      	bx	lr
   1dc0a:	bf00      	nop
   1dc0c:	2000868c 	.word	0x2000868c

0001dc10 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1dc10:	4b04      	ldr	r3, [pc, #16]	; (1dc24 <pin_has_trigger+0x14>)
   1dc12:	3008      	adds	r0, #8
   1dc14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1dc18:	f010 001c 	ands.w	r0, r0, #28
   1dc1c:	bf18      	it	ne
   1dc1e:	2001      	movne	r0, #1
   1dc20:	4770      	bx	lr
   1dc22:	bf00      	nop
   1dc24:	2000868c 	.word	0x2000868c

0001dc28 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1dc28:	4b03      	ldr	r3, [pc, #12]	; (1dc38 <pin_is_output+0x10>)
   1dc2a:	3008      	adds	r0, #8
   1dc2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1dc30:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1dc34:	4770      	bx	lr
   1dc36:	bf00      	nop
   1dc38:	2000868c 	.word	0x2000868c

0001dc3c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1dc3c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1dc3e:	4c0d      	ldr	r4, [pc, #52]	; (1dc74 <call_handler+0x38>)
   1dc40:	f100 0308 	add.w	r3, r0, #8
   1dc44:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1dc48:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1dc4a:	05da      	lsls	r2, r3, #23
{
   1dc4c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1dc4e:	d507      	bpl.n	1dc60 <call_handler+0x24>
   1dc50:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1dc54:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1dc58:	6852      	ldr	r2, [r2, #4]
   1dc5a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1dc5e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1dc60:	68a3      	ldr	r3, [r4, #8]
   1dc62:	b12b      	cbz	r3, 1dc70 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1dc64:	4631      	mov	r1, r6
   1dc66:	4628      	mov	r0, r5
   1dc68:	68e2      	ldr	r2, [r4, #12]
    }
}
   1dc6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1dc6e:	4718      	bx	r3
}
   1dc70:	bd70      	pop	{r4, r5, r6, pc}
   1dc72:	bf00      	nop
   1dc74:	2000868c 	.word	0x2000868c

0001dc78 <release_handler>:
{
   1dc78:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1dc7a:	4a18      	ldr	r2, [pc, #96]	; (1dcdc <release_handler+0x64>)
   1dc7c:	3008      	adds	r0, #8
   1dc7e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1dc82:	05d9      	lsls	r1, r3, #23
   1dc84:	d51d      	bpl.n	1dcc2 <release_handler+0x4a>
   1dc86:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1dc8a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1dc8e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1dc92:	2000      	movs	r0, #0
   1dc94:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1dc98:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1dc9c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1dca0:	d003      	beq.n	1dcaa <release_handler+0x32>
   1dca2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1dca6:	4299      	cmp	r1, r3
   1dca8:	d00b      	beq.n	1dcc2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1dcaa:	3001      	adds	r0, #1
   1dcac:	2830      	cmp	r0, #48	; 0x30
   1dcae:	d1f3      	bne.n	1dc98 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1dcb0:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1dcb2:	480b      	ldr	r0, [pc, #44]	; (1dce0 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1dcb4:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1dcb8:	f7ff fd60 	bl	1d77c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1dcbc:	4b09      	ldr	r3, [pc, #36]	; (1dce4 <release_handler+0x6c>)
   1dcbe:	4298      	cmp	r0, r3
   1dcc0:	d100      	bne.n	1dcc4 <release_handler+0x4c>
}
   1dcc2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1dcc4:	4908      	ldr	r1, [pc, #32]	; (1dce8 <release_handler+0x70>)
   1dcc6:	4809      	ldr	r0, [pc, #36]	; (1dcec <release_handler+0x74>)
   1dcc8:	f44f 7399 	mov.w	r3, #306	; 0x132
   1dccc:	4a08      	ldr	r2, [pc, #32]	; (1dcf0 <release_handler+0x78>)
   1dcce:	f008 fac6 	bl	2625e <assert_print>
   1dcd2:	f44f 7199 	mov.w	r1, #306	; 0x132
   1dcd6:	4806      	ldr	r0, [pc, #24]	; (1dcf0 <release_handler+0x78>)
   1dcd8:	f008 faba 	bl	26250 <assert_post_action>
   1dcdc:	2000868c 	.word	0x2000868c
   1dce0:	20008700 	.word	0x20008700
   1dce4:	0bad0000 	.word	0x0bad0000
   1dce8:	0002e0b8 	.word	0x0002e0b8
   1dcec:	0002d095 	.word	0x0002d095
   1dcf0:	00031989 	.word	0x00031989

0001dcf4 <pin_handler_trigger_uninit>:
{
   1dcf4:	b538      	push	{r3, r4, r5, lr}
   1dcf6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1dcf8:	f7ff ff80 	bl	1dbfc <pin_in_use_by_te>
   1dcfc:	4c0b      	ldr	r4, [pc, #44]	; (1dd2c <pin_handler_trigger_uninit+0x38>)
   1dcfe:	f102 0508 	add.w	r5, r2, #8
   1dd02:	b160      	cbz	r0, 1dd1e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1dd04:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1dd06:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1dd0a:	0b5b      	lsrs	r3, r3, #13
   1dd0c:	009b      	lsls	r3, r3, #2
   1dd0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1dd12:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1dd16:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1dd1a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1dd1e:	4610      	mov	r0, r2
   1dd20:	f7ff ffaa 	bl	1dc78 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1dd24:	2300      	movs	r3, #0
   1dd26:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1dd2a:	bd38      	pop	{r3, r4, r5, pc}
   1dd2c:	2000868c 	.word	0x2000868c

0001dd30 <nrf_gpio_pin_port_decode>:
{
   1dd30:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dd32:	6802      	ldr	r2, [r0, #0]
{
   1dd34:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dd36:	4610      	mov	r0, r2
   1dd38:	f00b fff8 	bl	29d2c <nrf_gpio_pin_present_check>
   1dd3c:	b958      	cbnz	r0, 1dd56 <nrf_gpio_pin_port_decode+0x26>
   1dd3e:	4910      	ldr	r1, [pc, #64]	; (1dd80 <nrf_gpio_pin_port_decode+0x50>)
   1dd40:	f240 2347 	movw	r3, #583	; 0x247
   1dd44:	4a0f      	ldr	r2, [pc, #60]	; (1dd84 <nrf_gpio_pin_port_decode+0x54>)
   1dd46:	4810      	ldr	r0, [pc, #64]	; (1dd88 <nrf_gpio_pin_port_decode+0x58>)
   1dd48:	f008 fa89 	bl	2625e <assert_print>
   1dd4c:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1dd50:	480c      	ldr	r0, [pc, #48]	; (1dd84 <nrf_gpio_pin_port_decode+0x54>)
   1dd52:	f008 fa7d 	bl	26250 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1dd56:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dd5a:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1dd5c:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dd5e:	d00b      	beq.n	1dd78 <nrf_gpio_pin_port_decode+0x48>
   1dd60:	2a01      	cmp	r2, #1
   1dd62:	d00b      	beq.n	1dd7c <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1dd64:	4909      	ldr	r1, [pc, #36]	; (1dd8c <nrf_gpio_pin_port_decode+0x5c>)
   1dd66:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1dd6a:	4a06      	ldr	r2, [pc, #24]	; (1dd84 <nrf_gpio_pin_port_decode+0x54>)
   1dd6c:	4806      	ldr	r0, [pc, #24]	; (1dd88 <nrf_gpio_pin_port_decode+0x58>)
   1dd6e:	f008 fa76 	bl	2625e <assert_print>
   1dd72:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1dd76:	e7eb      	b.n	1dd50 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1dd78:	4805      	ldr	r0, [pc, #20]	; (1dd90 <nrf_gpio_pin_port_decode+0x60>)
}
   1dd7a:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dd7c:	4805      	ldr	r0, [pc, #20]	; (1dd94 <nrf_gpio_pin_port_decode+0x64>)
   1dd7e:	e7fc      	b.n	1dd7a <nrf_gpio_pin_port_decode+0x4a>
   1dd80:	00031069 	.word	0x00031069
   1dd84:	00031036 	.word	0x00031036
   1dd88:	0002d095 	.word	0x0002d095
   1dd8c:	0003297c 	.word	0x0003297c
   1dd90:	40842500 	.word	0x40842500
   1dd94:	40842800 	.word	0x40842800

0001dd98 <nrfx_gpiote_input_configure>:
{
   1dd98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd9a:	4604      	mov	r4, r0
   1dd9c:	4617      	mov	r7, r2
   1dd9e:	461d      	mov	r5, r3
   1dda0:	b085      	sub	sp, #20
    if (p_input_config)
   1dda2:	b1d9      	cbz	r1, 1dddc <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1dda4:	f00b ffd3 	bl	29d4e <pin_is_task_output>
   1dda8:	bb00      	cbnz	r0, 1ddec <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1ddaa:	460b      	mov	r3, r1
   1ddac:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1ddb0:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1ddb4:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1ddb8:	f10d 020f 	add.w	r2, sp, #15
   1ddbc:	f10d 010e 	add.w	r1, sp, #14
   1ddc0:	4620      	mov	r0, r4
   1ddc2:	f00b ffcf 	bl	29d64 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1ddc6:	4a44      	ldr	r2, [pc, #272]	; (1ded8 <nrfx_gpiote_input_configure+0x140>)
   1ddc8:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1ddcc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1ddd0:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1ddd4:	f043 0301 	orr.w	r3, r3, #1
   1ddd8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1dddc:	b36f      	cbz	r7, 1de3a <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1ddde:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1dde0:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1dde2:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1dde4:	f7ff ff20 	bl	1dc28 <pin_is_output>
   1dde8:	b110      	cbz	r0, 1ddf0 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1ddea:	b1da      	cbz	r2, 1de24 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1ddec:	483b      	ldr	r0, [pc, #236]	; (1dedc <nrfx_gpiote_input_configure+0x144>)
   1ddee:	e026      	b.n	1de3e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1ddf0:	4839      	ldr	r0, [pc, #228]	; (1ded8 <nrfx_gpiote_input_configure+0x140>)
   1ddf2:	f104 0c08 	add.w	ip, r4, #8
   1ddf6:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1ddfa:	f021 0120 	bic.w	r1, r1, #32
   1ddfe:	04c9      	lsls	r1, r1, #19
   1de00:	0cc9      	lsrs	r1, r1, #19
   1de02:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1de06:	b16a      	cbz	r2, 1de24 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1de08:	2e03      	cmp	r6, #3
   1de0a:	d8ef      	bhi.n	1ddec <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1de0c:	687b      	ldr	r3, [r7, #4]
   1de0e:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1de10:	00ba      	lsls	r2, r7, #2
   1de12:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1de16:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1de1a:	b996      	cbnz	r6, 1de42 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1de1c:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1de20:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1de24:	4a2c      	ldr	r2, [pc, #176]	; (1ded8 <nrfx_gpiote_input_configure+0x140>)
   1de26:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1de2a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1de2e:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1de32:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1de36:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1de3a:	bb15      	cbnz	r5, 1de82 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1de3c:	4828      	ldr	r0, [pc, #160]	; (1dee0 <nrfx_gpiote_input_configure+0x148>)
}
   1de3e:	b005      	add	sp, #20
   1de40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1de42:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1de46:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1de4a:	f023 0303 	bic.w	r3, r3, #3
   1de4e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1de52:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1de56:	f041 0120 	orr.w	r1, r1, #32
   1de5a:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1de5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1de62:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1de66:	0223      	lsls	r3, r4, #8
   1de68:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1de6c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1de70:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1de74:	ea43 030e 	orr.w	r3, r3, lr
   1de78:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1de7c:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1de80:	e7d0      	b.n	1de24 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1de82:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1de84:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1de88:	f7ff fef6 	bl	1dc78 <release_handler>
    if (!handler)
   1de8c:	2e00      	cmp	r6, #0
   1de8e:	d0d5      	beq.n	1de3c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1de90:	4d11      	ldr	r5, [pc, #68]	; (1ded8 <nrfx_gpiote_input_configure+0x140>)
   1de92:	e9d5 2300 	ldrd	r2, r3, [r5]
   1de96:	4296      	cmp	r6, r2
   1de98:	d101      	bne.n	1de9e <nrfx_gpiote_input_configure+0x106>
   1de9a:	429f      	cmp	r7, r3
   1de9c:	d019      	beq.n	1ded2 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1de9e:	4811      	ldr	r0, [pc, #68]	; (1dee4 <nrfx_gpiote_input_configure+0x14c>)
   1dea0:	f10d 010f 	add.w	r1, sp, #15
   1dea4:	f7ff fc4e 	bl	1d744 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1dea8:	4b0d      	ldr	r3, [pc, #52]	; (1dee0 <nrfx_gpiote_input_configure+0x148>)
   1deaa:	4298      	cmp	r0, r3
   1deac:	d1c7      	bne.n	1de3e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1deae:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1deb2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1deb6:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1deba:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1debc:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1dec0:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1dec4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1dec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1decc:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1ded0:	e7b4      	b.n	1de3c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ded2:	2200      	movs	r2, #0
   1ded4:	e7ed      	b.n	1deb2 <nrfx_gpiote_input_configure+0x11a>
   1ded6:	bf00      	nop
   1ded8:	2000868c 	.word	0x2000868c
   1dedc:	0bad0004 	.word	0x0bad0004
   1dee0:	0bad0000 	.word	0x0bad0000
   1dee4:	20008700 	.word	0x20008700

0001dee8 <nrfx_gpiote_output_configure>:
{
   1dee8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1deea:	4604      	mov	r4, r0
   1deec:	4615      	mov	r5, r2
   1deee:	b085      	sub	sp, #20
    if (p_config)
   1def0:	b321      	cbz	r1, 1df3c <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1def2:	f7ff fe99 	bl	1dc28 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1def6:	b920      	cbnz	r0, 1df02 <nrfx_gpiote_output_configure+0x1a>
   1def8:	4620      	mov	r0, r4
   1defa:	f7ff fe7f 	bl	1dbfc <pin_in_use_by_te>
   1defe:	2800      	cmp	r0, #0
   1df00:	d161      	bne.n	1dfc6 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1df02:	4620      	mov	r0, r4
   1df04:	f7ff fe84 	bl	1dc10 <pin_has_trigger>
   1df08:	b110      	cbz	r0, 1df10 <nrfx_gpiote_output_configure+0x28>
   1df0a:	784b      	ldrb	r3, [r1, #1]
   1df0c:	2b01      	cmp	r3, #1
   1df0e:	d05a      	beq.n	1dfc6 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1df10:	2301      	movs	r3, #1
   1df12:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1df16:	2300      	movs	r3, #0
   1df18:	1c4a      	adds	r2, r1, #1
   1df1a:	e9cd 1300 	strd	r1, r3, [sp]
   1df1e:	4620      	mov	r0, r4
   1df20:	1c8b      	adds	r3, r1, #2
   1df22:	f10d 010f 	add.w	r1, sp, #15
   1df26:	f00b ff1d 	bl	29d64 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1df2a:	4a28      	ldr	r2, [pc, #160]	; (1dfcc <nrfx_gpiote_output_configure+0xe4>)
   1df2c:	f104 0108 	add.w	r1, r4, #8
   1df30:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1df34:	f043 0303 	orr.w	r3, r3, #3
   1df38:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1df3c:	b915      	cbnz	r5, 1df44 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1df3e:	4824      	ldr	r0, [pc, #144]	; (1dfd0 <nrfx_gpiote_output_configure+0xe8>)
}
   1df40:	b005      	add	sp, #20
   1df42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1df44:	4620      	mov	r0, r4
   1df46:	f7ff fe6f 	bl	1dc28 <pin_is_output>
        if (pin_is_input(pin))
   1df4a:	2800      	cmp	r0, #0
   1df4c:	d03b      	beq.n	1dfc6 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1df4e:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1df52:	2300      	movs	r3, #0
   1df54:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1df56:	4e1d      	ldr	r6, [pc, #116]	; (1dfcc <nrfx_gpiote_output_configure+0xe4>)
   1df58:	f104 0708 	add.w	r7, r4, #8
   1df5c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1df60:	0089      	lsls	r1, r1, #2
   1df62:	f020 0020 	bic.w	r0, r0, #32
   1df66:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1df6a:	04c0      	lsls	r0, r0, #19
   1df6c:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1df70:	0cc0      	lsrs	r0, r0, #19
   1df72:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1df76:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1df7a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1df7e:	786a      	ldrb	r2, [r5, #1]
   1df80:	2a00      	cmp	r2, #0
   1df82:	d0dc      	beq.n	1df3e <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1df84:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1df88:	78ad      	ldrb	r5, [r5, #2]
   1df8a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1df8e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1df92:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1df96:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1df9a:	0223      	lsls	r3, r4, #8
   1df9c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1dfa0:	0412      	lsls	r2, r2, #16
   1dfa2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dfa6:	ea43 030e 	orr.w	r3, r3, lr
   1dfaa:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1dfac:	052a      	lsls	r2, r5, #20
   1dfae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1dfb2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dfb6:	4313      	orrs	r3, r2
   1dfb8:	f040 0020 	orr.w	r0, r0, #32
   1dfbc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1dfc0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1dfc4:	e7bb      	b.n	1df3e <nrfx_gpiote_output_configure+0x56>
{
   1dfc6:	4803      	ldr	r0, [pc, #12]	; (1dfd4 <nrfx_gpiote_output_configure+0xec>)
   1dfc8:	e7ba      	b.n	1df40 <nrfx_gpiote_output_configure+0x58>
   1dfca:	bf00      	nop
   1dfcc:	2000868c 	.word	0x2000868c
   1dfd0:	0bad0000 	.word	0x0bad0000
   1dfd4:	0bad0004 	.word	0x0bad0004

0001dfd8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1dfd8:	4b01      	ldr	r3, [pc, #4]	; (1dfe0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1dfda:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1dfde:	4770      	bx	lr
   1dfe0:	2000868c 	.word	0x2000868c

0001dfe4 <nrfx_gpiote_channel_get>:
{
   1dfe4:	4602      	mov	r2, r0
   1dfe6:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1dfe8:	b959      	cbnz	r1, 1e002 <nrfx_gpiote_channel_get+0x1e>
   1dfea:	490c      	ldr	r1, [pc, #48]	; (1e01c <nrfx_gpiote_channel_get+0x38>)
   1dfec:	480c      	ldr	r0, [pc, #48]	; (1e020 <nrfx_gpiote_channel_get+0x3c>)
   1dfee:	f240 2335 	movw	r3, #565	; 0x235
   1dff2:	4a0c      	ldr	r2, [pc, #48]	; (1e024 <nrfx_gpiote_channel_get+0x40>)
   1dff4:	f008 f933 	bl	2625e <assert_print>
   1dff8:	f240 2135 	movw	r1, #565	; 0x235
   1dffc:	4809      	ldr	r0, [pc, #36]	; (1e024 <nrfx_gpiote_channel_get+0x40>)
   1dffe:	f008 f927 	bl	26250 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1e002:	f7ff fdfb 	bl	1dbfc <pin_in_use_by_te>
   1e006:	b138      	cbz	r0, 1e018 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e008:	4b07      	ldr	r3, [pc, #28]	; (1e028 <nrfx_gpiote_channel_get+0x44>)
   1e00a:	3208      	adds	r2, #8
   1e00c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1e010:	4806      	ldr	r0, [pc, #24]	; (1e02c <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e012:	0b5b      	lsrs	r3, r3, #13
   1e014:	700b      	strb	r3, [r1, #0]
}
   1e016:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e018:	4805      	ldr	r0, [pc, #20]	; (1e030 <nrfx_gpiote_channel_get+0x4c>)
   1e01a:	e7fc      	b.n	1e016 <nrfx_gpiote_channel_get+0x32>
   1e01c:	000319c7 	.word	0x000319c7
   1e020:	0002d095 	.word	0x0002d095
   1e024:	00031989 	.word	0x00031989
   1e028:	2000868c 	.word	0x2000868c
   1e02c:	0bad0000 	.word	0x0bad0000
   1e030:	0bad0004 	.word	0x0bad0004

0001e034 <nrfx_gpiote_init>:
{
   1e034:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e036:	4c0f      	ldr	r4, [pc, #60]	; (1e074 <nrfx_gpiote_init+0x40>)
   1e038:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1e03c:	b9bd      	cbnz	r5, 1e06e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1e03e:	2260      	movs	r2, #96	; 0x60
   1e040:	4629      	mov	r1, r5
   1e042:	f104 0010 	add.w	r0, r4, #16
   1e046:	f00c fead 	bl	2ada4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1e04a:	202f      	movs	r0, #47	; 0x2f
   1e04c:	f7f2 ffc4 	bl	10fd8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e050:	4b09      	ldr	r3, [pc, #36]	; (1e078 <nrfx_gpiote_init+0x44>)
    return err_code;
   1e052:	480a      	ldr	r0, [pc, #40]	; (1e07c <nrfx_gpiote_init+0x48>)
   1e054:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1e058:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1e05c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1e060:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1e064:	2301      	movs	r3, #1
   1e066:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1e06a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1e06c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1e06e:	4804      	ldr	r0, [pc, #16]	; (1e080 <nrfx_gpiote_init+0x4c>)
   1e070:	e7fc      	b.n	1e06c <nrfx_gpiote_init+0x38>
   1e072:	bf00      	nop
   1e074:	2000868c 	.word	0x2000868c
   1e078:	4002f000 	.word	0x4002f000
   1e07c:	0bad0000 	.word	0x0bad0000
   1e080:	0bad0005 	.word	0x0bad0005

0001e084 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1e084:	4b03      	ldr	r3, [pc, #12]	; (1e094 <nrfx_gpiote_is_init+0x10>)
   1e086:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1e08a:	3800      	subs	r0, #0
   1e08c:	bf18      	it	ne
   1e08e:	2001      	movne	r0, #1
   1e090:	4770      	bx	lr
   1e092:	bf00      	nop
   1e094:	2000868c 	.word	0x2000868c

0001e098 <nrfx_gpiote_channel_free>:
{
   1e098:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1e09a:	4801      	ldr	r0, [pc, #4]	; (1e0a0 <nrfx_gpiote_channel_free+0x8>)
   1e09c:	f7ff bb6e 	b.w	1d77c <nrfx_flag32_free>
   1e0a0:	200086fc 	.word	0x200086fc

0001e0a4 <nrfx_gpiote_channel_alloc>:
{
   1e0a4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1e0a6:	4801      	ldr	r0, [pc, #4]	; (1e0ac <nrfx_gpiote_channel_alloc+0x8>)
   1e0a8:	f7ff bb4c 	b.w	1d744 <nrfx_flag32_alloc>
   1e0ac:	200086fc 	.word	0x200086fc

0001e0b0 <nrfx_gpiote_trigger_enable>:
{
   1e0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e0b2:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1e0b4:	f7ff fdac 	bl	1dc10 <pin_has_trigger>
   1e0b8:	b958      	cbnz	r0, 1e0d2 <nrfx_gpiote_trigger_enable+0x22>
   1e0ba:	492b      	ldr	r1, [pc, #172]	; (1e168 <nrfx_gpiote_trigger_enable+0xb8>)
   1e0bc:	f240 33df 	movw	r3, #991	; 0x3df
   1e0c0:	4a2a      	ldr	r2, [pc, #168]	; (1e16c <nrfx_gpiote_trigger_enable+0xbc>)
   1e0c2:	482b      	ldr	r0, [pc, #172]	; (1e170 <nrfx_gpiote_trigger_enable+0xc0>)
   1e0c4:	f008 f8cb 	bl	2625e <assert_print>
   1e0c8:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1e0cc:	4827      	ldr	r0, [pc, #156]	; (1e16c <nrfx_gpiote_trigger_enable+0xbc>)
   1e0ce:	f008 f8bf 	bl	26250 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e0d2:	4620      	mov	r0, r4
   1e0d4:	f7ff fd92 	bl	1dbfc <pin_in_use_by_te>
   1e0d8:	4a26      	ldr	r2, [pc, #152]	; (1e174 <nrfx_gpiote_trigger_enable+0xc4>)
   1e0da:	f104 0508 	add.w	r5, r4, #8
   1e0de:	b1e0      	cbz	r0, 1e11a <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1e0e0:	4620      	mov	r0, r4
   1e0e2:	f7ff fda1 	bl	1dc28 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e0e6:	b9c0      	cbnz	r0, 1e11a <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e0e8:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1e0ec:	4c22      	ldr	r4, [pc, #136]	; (1e178 <nrfx_gpiote_trigger_enable+0xc8>)
   1e0ee:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1e0f0:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e0f2:	50e0      	str	r0, [r4, r3]
   1e0f4:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1e0f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e0fa:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1e0fe:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1e102:	f040 0001 	orr.w	r0, r0, #1
   1e106:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1e10a:	b121      	cbz	r1, 1e116 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1e10c:	2301      	movs	r3, #1
   1e10e:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1e110:	4a1a      	ldr	r2, [pc, #104]	; (1e17c <nrfx_gpiote_trigger_enable+0xcc>)
   1e112:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e116:	b003      	add	sp, #12
   1e118:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1e11a:	b949      	cbnz	r1, 1e130 <nrfx_gpiote_trigger_enable+0x80>
   1e11c:	4918      	ldr	r1, [pc, #96]	; (1e180 <nrfx_gpiote_trigger_enable+0xd0>)
   1e11e:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1e122:	4a12      	ldr	r2, [pc, #72]	; (1e16c <nrfx_gpiote_trigger_enable+0xbc>)
   1e124:	4812      	ldr	r0, [pc, #72]	; (1e170 <nrfx_gpiote_trigger_enable+0xc0>)
   1e126:	f008 f89a 	bl	2625e <assert_print>
   1e12a:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1e12e:	e7cd      	b.n	1e0cc <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e130:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1e134:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1e138:	2b04      	cmp	r3, #4
   1e13a:	d011      	beq.n	1e160 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1e13c:	2b05      	cmp	r3, #5
   1e13e:	d011      	beq.n	1e164 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e140:	a801      	add	r0, sp, #4
   1e142:	9401      	str	r4, [sp, #4]
   1e144:	f7ff fdf4 	bl	1dd30 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1e148:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1e14a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1e14c:	40d9      	lsrs	r1, r3
   1e14e:	f001 0101 	and.w	r1, r1, #1
   1e152:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1e154:	4620      	mov	r0, r4
}
   1e156:	b003      	add	sp, #12
   1e158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1e15c:	f00b be4f 	b.w	29dfe <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1e160:	2103      	movs	r1, #3
   1e162:	e7f7      	b.n	1e154 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1e164:	2102      	movs	r1, #2
   1e166:	e7f5      	b.n	1e154 <nrfx_gpiote_trigger_enable+0xa4>
   1e168:	000319d1 	.word	0x000319d1
   1e16c:	00031989 	.word	0x00031989
   1e170:	0002d095 	.word	0x0002d095
   1e174:	2000868c 	.word	0x2000868c
   1e178:	4002f100 	.word	0x4002f100
   1e17c:	4002f000 	.word	0x4002f000
   1e180:	000319e6 	.word	0x000319e6

0001e184 <nrfx_gpiote_trigger_disable>:
{
   1e184:	b508      	push	{r3, lr}
   1e186:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e188:	f7ff fd38 	bl	1dbfc <pin_in_use_by_te>
   1e18c:	b1c8      	cbz	r0, 1e1c2 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1e18e:	4610      	mov	r0, r2
   1e190:	f7ff fd4a 	bl	1dc28 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e194:	b9a8      	cbnz	r0, 1e1c2 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e196:	4b0e      	ldr	r3, [pc, #56]	; (1e1d0 <nrfx_gpiote_trigger_disable+0x4c>)
   1e198:	3208      	adds	r2, #8
   1e19a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1e19e:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e1a0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1e1a2:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1e1a4:	490b      	ldr	r1, [pc, #44]	; (1e1d4 <nrfx_gpiote_trigger_disable+0x50>)
   1e1a6:	009b      	lsls	r3, r3, #2
   1e1a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e1ac:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1e1b0:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1e1b4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1e1b8:	f022 0203 	bic.w	r2, r2, #3
   1e1bc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1e1c0:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1e1c2:	2100      	movs	r1, #0
}
   1e1c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1e1c8:	4610      	mov	r0, r2
   1e1ca:	f00b be18 	b.w	29dfe <nrf_gpio_cfg_sense_set>
   1e1ce:	bf00      	nop
   1e1d0:	2000868c 	.word	0x2000868c
   1e1d4:	4002f000 	.word	0x4002f000

0001e1d8 <nrfx_gpiote_pin_uninit>:
{
   1e1d8:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1e1da:	4b10      	ldr	r3, [pc, #64]	; (1e21c <nrfx_gpiote_pin_uninit+0x44>)
   1e1dc:	f100 0208 	add.w	r2, r0, #8
   1e1e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1e1e4:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1e1e6:	07db      	lsls	r3, r3, #31
   1e1e8:	d516      	bpl.n	1e218 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1e1ea:	f7ff ffcb 	bl	1e184 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1e1ee:	4620      	mov	r0, r4
   1e1f0:	f7ff fd80 	bl	1dcf4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e1f4:	a801      	add	r0, sp, #4
   1e1f6:	9401      	str	r4, [sp, #4]
   1e1f8:	f7ff fd9a 	bl	1dd30 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1e1fc:	9b01      	ldr	r3, [sp, #4]
   1e1fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1e202:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1e206:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1e20a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1e20e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1e212:	4803      	ldr	r0, [pc, #12]	; (1e220 <nrfx_gpiote_pin_uninit+0x48>)
}
   1e214:	b002      	add	sp, #8
   1e216:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e218:	4802      	ldr	r0, [pc, #8]	; (1e224 <nrfx_gpiote_pin_uninit+0x4c>)
   1e21a:	e7fb      	b.n	1e214 <nrfx_gpiote_pin_uninit+0x3c>
   1e21c:	2000868c 	.word	0x2000868c
   1e220:	0bad0000 	.word	0x0bad0000
   1e224:	0bad0004 	.word	0x0bad0004

0001e228 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1e22c:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1e22e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e230:	4634      	mov	r4, r6
{
   1e232:	4b64      	ldr	r3, [pc, #400]	; (1e3c4 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1e234:	4864      	ldr	r0, [pc, #400]	; (1e3c8 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1e236:	4965      	ldr	r1, [pc, #404]	; (1e3cc <nrfx_gpiote_irq_handler+0x1a4>)
{
   1e238:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e23a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1e23c:	b135      	cbz	r5, 1e24c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1e23e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1e242:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e244:	bf1e      	ittt	ne
   1e246:	601c      	strne	r4, [r3, #0]
   1e248:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1e24a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1e24c:	3304      	adds	r3, #4
   1e24e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1e250:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1e254:	d1f1      	bne.n	1e23a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e256:	f8df a170 	ldr.w	sl, [pc, #368]	; 1e3c8 <nrfx_gpiote_irq_handler+0x1a0>
   1e25a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1e25e:	2b00      	cmp	r3, #0
   1e260:	f000 8093 	beq.w	1e38a <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1e264:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1e3d0 <nrfx_gpiote_irq_handler+0x1a8>
   1e268:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1e26c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1e26e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1e272:	4b58      	ldr	r3, [pc, #352]	; (1e3d4 <nrfx_gpiote_irq_handler+0x1ac>)
   1e274:	6a1a      	ldr	r2, [r3, #32]
   1e276:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1e278:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1e27a:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1e27e:	f10d 0b10 	add.w	fp, sp, #16
   1e282:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1e286:	9300      	str	r3, [sp, #0]
   1e288:	e04a      	b.n	1e320 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1e28a:	fa94 f4a4 	rbit	r4, r4
   1e28e:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1e292:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e294:	4a50      	ldr	r2, [pc, #320]	; (1e3d8 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1e296:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e298:	f104 0308 	add.w	r3, r4, #8
   1e29c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1e2a0:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1e2a2:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1e2a4:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1e2a8:	fa03 f101 	lsl.w	r1, r3, r1
   1e2ac:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1e2b0:	08ba      	lsrs	r2, r7, #2
   1e2b2:	ea23 0301 	bic.w	r3, r3, r1
   1e2b6:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2ba:	a803      	add	r0, sp, #12
   1e2bc:	9201      	str	r2, [sp, #4]
   1e2be:	9403      	str	r4, [sp, #12]
   1e2c0:	f7ff fd36 	bl	1dd30 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e2c4:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1e2c6:	9a01      	ldr	r2, [sp, #4]
   1e2c8:	3380      	adds	r3, #128	; 0x80
   1e2ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e2ce:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1e2d2:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e2d4:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1e2d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1e2da:	d52b      	bpl.n	1e334 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1e2dc:	4639      	mov	r1, r7
   1e2de:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e2e0:	b2dd      	uxtb	r5, r3
   1e2e2:	f7ff fcab 	bl	1dc3c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2e6:	a803      	add	r0, sp, #12
   1e2e8:	9403      	str	r4, [sp, #12]
   1e2ea:	f7ff fd21 	bl	1dd30 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e2ee:	9b03      	ldr	r3, [sp, #12]
   1e2f0:	3380      	adds	r3, #128	; 0x80
   1e2f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1e2f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1e2fa:	429d      	cmp	r5, r3
   1e2fc:	d107      	bne.n	1e30e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1e2fe:	2100      	movs	r1, #0
   1e300:	4620      	mov	r0, r4
   1e302:	f00b fd7c 	bl	29dfe <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1e306:	4629      	mov	r1, r5
   1e308:	4620      	mov	r0, r4
   1e30a:	f00b fd78 	bl	29dfe <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e30e:	a803      	add	r0, sp, #12
   1e310:	9403      	str	r4, [sp, #12]
   1e312:	f7ff fd0d 	bl	1dd30 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1e316:	2201      	movs	r2, #1
   1e318:	9b03      	ldr	r3, [sp, #12]
   1e31a:	fa02 f303 	lsl.w	r3, r2, r3
   1e31e:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1e320:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1e324:	2c00      	cmp	r4, #0
   1e326:	d1b0      	bne.n	1e28a <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1e328:	f1b9 0f00 	cmp.w	r9, #0
   1e32c:	d11d      	bne.n	1e36a <nrfx_gpiote_irq_handler+0x142>
   1e32e:	f04f 0901 	mov.w	r9, #1
   1e332:	e7a6      	b.n	1e282 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1e334:	2b02      	cmp	r3, #2
   1e336:	d10c      	bne.n	1e352 <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1e338:	2103      	movs	r1, #3
   1e33a:	4620      	mov	r0, r4
   1e33c:	f00b fd5f 	bl	29dfe <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1e340:	f005 0305 	and.w	r3, r5, #5
   1e344:	2b01      	cmp	r3, #1
   1e346:	d1e2      	bne.n	1e30e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1e348:	4639      	mov	r1, r7
   1e34a:	4620      	mov	r0, r4
   1e34c:	f7ff fc76 	bl	1dc3c <call_handler>
   1e350:	e7dd      	b.n	1e30e <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1e352:	2102      	movs	r1, #2
   1e354:	4620      	mov	r0, r4
   1e356:	9301      	str	r3, [sp, #4]
   1e358:	f00b fd51 	bl	29dfe <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1e35c:	2d03      	cmp	r5, #3
   1e35e:	d0f3      	beq.n	1e348 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1e360:	9b01      	ldr	r3, [sp, #4]
   1e362:	2b03      	cmp	r3, #3
   1e364:	d1d3      	bne.n	1e30e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1e366:	2d02      	cmp	r5, #2
   1e368:	e7ed      	b.n	1e346 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e36a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1e36e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1e372:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1e376:	4917      	ldr	r1, [pc, #92]	; (1e3d4 <nrfx_gpiote_irq_handler+0x1ac>)
   1e378:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1e37a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1e37e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1e380:	4313      	orrs	r3, r2
   1e382:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1e384:	620a      	str	r2, [r1, #32]
   1e386:	f47f af78 	bne.w	1e27a <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1e38a:	2401      	movs	r4, #1
    while (mask)
   1e38c:	b916      	cbnz	r6, 1e394 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1e38e:	b007      	add	sp, #28
   1e390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1e394:	fa96 f3a6 	rbit	r3, r6
   1e398:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1e39c:	fa04 f203 	lsl.w	r2, r4, r3
   1e3a0:	009b      	lsls	r3, r3, #2
   1e3a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e3a6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e3aa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1e3ae:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1e3b2:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1e3b6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1e3ba:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1e3be:	f7ff fc3d 	bl	1dc3c <call_handler>
   1e3c2:	e7e3      	b.n	1e38c <nrfx_gpiote_irq_handler+0x164>
   1e3c4:	4002f100 	.word	0x4002f100
   1e3c8:	4002f000 	.word	0x4002f000
   1e3cc:	4002f120 	.word	0x4002f120
   1e3d0:	40842500 	.word	0x40842500
   1e3d4:	40842800 	.word	0x40842800
   1e3d8:	2000868c 	.word	0x2000868c

0001e3dc <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1e3dc:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e3de:	4c08      	ldr	r4, [pc, #32]	; (1e400 <nrfx_ipc_init+0x24>)
{
   1e3e0:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e3e2:	7923      	ldrb	r3, [r4, #4]
{
   1e3e4:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e3e6:	b943      	cbnz	r3, 1e3fa <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1e3e8:	202a      	movs	r0, #42	; 0x2a
   1e3ea:	f7f2 fdf5 	bl	10fd8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1e3ee:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1e3f0:	4804      	ldr	r0, [pc, #16]	; (1e404 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1e3f2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1e3f4:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1e3f6:	60a5      	str	r5, [r4, #8]
}
   1e3f8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1e3fa:	4803      	ldr	r0, [pc, #12]	; (1e408 <nrfx_ipc_init+0x2c>)
   1e3fc:	e7fc      	b.n	1e3f8 <nrfx_ipc_init+0x1c>
   1e3fe:	bf00      	nop
   1e400:	20022a74 	.word	0x20022a74
   1e404:	0bad0000 	.word	0x0bad0000
   1e408:	0bad000c 	.word	0x0bad000c

0001e40c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1e40c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1e40e:	b948      	cbnz	r0, 1e424 <nrfx_ipc_config_load+0x18>
   1e410:	4919      	ldr	r1, [pc, #100]	; (1e478 <nrfx_ipc_config_load+0x6c>)
   1e412:	2345      	movs	r3, #69	; 0x45
   1e414:	4a19      	ldr	r2, [pc, #100]	; (1e47c <nrfx_ipc_config_load+0x70>)
   1e416:	481a      	ldr	r0, [pc, #104]	; (1e480 <nrfx_ipc_config_load+0x74>)
   1e418:	f007 ff21 	bl	2625e <assert_print>
   1e41c:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1e41e:	4817      	ldr	r0, [pc, #92]	; (1e47c <nrfx_ipc_config_load+0x70>)
   1e420:	f007 ff16 	bl	26250 <assert_post_action>
   1e424:	4b17      	ldr	r3, [pc, #92]	; (1e484 <nrfx_ipc_config_load+0x78>)
   1e426:	791b      	ldrb	r3, [r3, #4]
   1e428:	2b01      	cmp	r3, #1
   1e42a:	d007      	beq.n	1e43c <nrfx_ipc_config_load+0x30>
   1e42c:	4916      	ldr	r1, [pc, #88]	; (1e488 <nrfx_ipc_config_load+0x7c>)
   1e42e:	2346      	movs	r3, #70	; 0x46
   1e430:	4a12      	ldr	r2, [pc, #72]	; (1e47c <nrfx_ipc_config_load+0x70>)
   1e432:	4813      	ldr	r0, [pc, #76]	; (1e480 <nrfx_ipc_config_load+0x74>)
   1e434:	f007 ff13 	bl	2625e <assert_print>
   1e438:	2146      	movs	r1, #70	; 0x46
   1e43a:	e7f0      	b.n	1e41e <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1e43c:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1e43e:	4a13      	ldr	r2, [pc, #76]	; (1e48c <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1e440:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1e444:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1e448:	3301      	adds	r3, #1
   1e44a:	2b10      	cmp	r3, #16
   1e44c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1e450:	d1f6      	bne.n	1e440 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1e452:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1e454:	4a0d      	ldr	r2, [pc, #52]	; (1e48c <nrfx_ipc_config_load+0x80>)
   1e456:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1e45a:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1e45e:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1e462:	3301      	adds	r3, #1
   1e464:	2b10      	cmp	r3, #16
   1e466:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1e46a:	d1f6      	bne.n	1e45a <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1e46c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1e470:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e474:	bd38      	pop	{r3, r4, r5, pc}
   1e476:	bf00      	nop
   1e478:	00031a38 	.word	0x00031a38
   1e47c:	000319fd 	.word	0x000319fd
   1e480:	0002d095 	.word	0x0002d095
   1e484:	20022a74 	.word	0x20022a74
   1e488:	00031a41 	.word	0x00031a41
   1e48c:	4002a000 	.word	0x4002a000

0001e490 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1e490:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1e492:	4b09      	ldr	r3, [pc, #36]	; (1e4b8 <nrfx_ipc_receive_event_enable+0x28>)
   1e494:	791b      	ldrb	r3, [r3, #4]
   1e496:	2b01      	cmp	r3, #1
   1e498:	d009      	beq.n	1e4ae <nrfx_ipc_receive_event_enable+0x1e>
   1e49a:	4908      	ldr	r1, [pc, #32]	; (1e4bc <nrfx_ipc_receive_event_enable+0x2c>)
   1e49c:	4808      	ldr	r0, [pc, #32]	; (1e4c0 <nrfx_ipc_receive_event_enable+0x30>)
   1e49e:	236b      	movs	r3, #107	; 0x6b
   1e4a0:	4a08      	ldr	r2, [pc, #32]	; (1e4c4 <nrfx_ipc_receive_event_enable+0x34>)
   1e4a2:	f007 fedc 	bl	2625e <assert_print>
   1e4a6:	216b      	movs	r1, #107	; 0x6b
   1e4a8:	4806      	ldr	r0, [pc, #24]	; (1e4c4 <nrfx_ipc_receive_event_enable+0x34>)
   1e4aa:	f007 fed1 	bl	26250 <assert_post_action>
   1e4ae:	4a06      	ldr	r2, [pc, #24]	; (1e4c8 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1e4b0:	4083      	lsls	r3, r0
   1e4b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e4b6:	bd08      	pop	{r3, pc}
   1e4b8:	20022a74 	.word	0x20022a74
   1e4bc:	00031a41 	.word	0x00031a41
   1e4c0:	0002d095 	.word	0x0002d095
   1e4c4:	000319fd 	.word	0x000319fd
   1e4c8:	4002a000 	.word	0x4002a000

0001e4cc <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1e4cc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1e4ce:	4b09      	ldr	r3, [pc, #36]	; (1e4f4 <nrfx_ipc_receive_event_disable+0x28>)
   1e4d0:	791b      	ldrb	r3, [r3, #4]
   1e4d2:	2b01      	cmp	r3, #1
   1e4d4:	d009      	beq.n	1e4ea <nrfx_ipc_receive_event_disable+0x1e>
   1e4d6:	4908      	ldr	r1, [pc, #32]	; (1e4f8 <nrfx_ipc_receive_event_disable+0x2c>)
   1e4d8:	4808      	ldr	r0, [pc, #32]	; (1e4fc <nrfx_ipc_receive_event_disable+0x30>)
   1e4da:	2371      	movs	r3, #113	; 0x71
   1e4dc:	4a08      	ldr	r2, [pc, #32]	; (1e500 <nrfx_ipc_receive_event_disable+0x34>)
   1e4de:	f007 febe 	bl	2625e <assert_print>
   1e4e2:	2171      	movs	r1, #113	; 0x71
   1e4e4:	4806      	ldr	r0, [pc, #24]	; (1e500 <nrfx_ipc_receive_event_disable+0x34>)
   1e4e6:	f007 feb3 	bl	26250 <assert_post_action>
    p_reg->INTENCLR = mask;
   1e4ea:	4a06      	ldr	r2, [pc, #24]	; (1e504 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1e4ec:	4083      	lsls	r3, r0
   1e4ee:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1e4f2:	bd08      	pop	{r3, pc}
   1e4f4:	20022a74 	.word	0x20022a74
   1e4f8:	00031a41 	.word	0x00031a41
   1e4fc:	0002d095 	.word	0x0002d095
   1e500:	000319fd 	.word	0x000319fd
   1e504:	4002a000 	.word	0x4002a000

0001e508 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1e50a:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e50c:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1e50e:	4b12      	ldr	r3, [pc, #72]	; (1e558 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1e510:	4d12      	ldr	r5, [pc, #72]	; (1e55c <nrfx_ipc_irq_handler+0x54>)
   1e512:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1e516:	b904      	cbnz	r4, 1e51a <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1e518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1e51a:	fa94 f0a4 	rbit	r0, r4
   1e51e:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1e522:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1e526:	280f      	cmp	r0, #15
   1e528:	ea24 0403 	bic.w	r4, r4, r3
   1e52c:	dd0b      	ble.n	1e546 <nrfx_ipc_irq_handler+0x3e>
   1e52e:	490c      	ldr	r1, [pc, #48]	; (1e560 <nrfx_ipc_irq_handler+0x58>)
   1e530:	480c      	ldr	r0, [pc, #48]	; (1e564 <nrfx_ipc_irq_handler+0x5c>)
   1e532:	f240 13e7 	movw	r3, #487	; 0x1e7
   1e536:	4a0c      	ldr	r2, [pc, #48]	; (1e568 <nrfx_ipc_irq_handler+0x60>)
   1e538:	f007 fe91 	bl	2625e <assert_print>
   1e53c:	f240 11e7 	movw	r1, #487	; 0x1e7
   1e540:	4809      	ldr	r0, [pc, #36]	; (1e568 <nrfx_ipc_irq_handler+0x60>)
   1e542:	f007 fe85 	bl	26250 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e546:	4b09      	ldr	r3, [pc, #36]	; (1e56c <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1e548:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e54a:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1e54c:	682b      	ldr	r3, [r5, #0]
   1e54e:	2b00      	cmp	r3, #0
   1e550:	d0e1      	beq.n	1e516 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1e552:	68a9      	ldr	r1, [r5, #8]
   1e554:	4798      	blx	r3
   1e556:	e7de      	b.n	1e516 <nrfx_ipc_irq_handler+0xe>
   1e558:	4002a000 	.word	0x4002a000
   1e55c:	20022a74 	.word	0x20022a74
   1e560:	0002e036 	.word	0x0002e036
   1e564:	0002d095 	.word	0x0002d095
   1e568:	0002e004 	.word	0x0002e004
   1e56c:	4002a100 	.word	0x4002a100

0001e570 <nvmc_word_write>:
   1e570:	4a04      	ldr	r2, [pc, #16]	; (1e584 <nvmc_word_write+0x14>)
   1e572:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1e576:	07db      	lsls	r3, r3, #31
   1e578:	d5fb      	bpl.n	1e572 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1e57a:	6001      	str	r1, [r0, #0]
   1e57c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1e580:	4770      	bx	lr
   1e582:	bf00      	nop
   1e584:	40039000 	.word	0x40039000

0001e588 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1e588:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1e58c:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1e58e:	d30b      	bcc.n	1e5a8 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1e590:	4910      	ldr	r1, [pc, #64]	; (1e5d4 <nrfx_nvmc_page_erase+0x4c>)
   1e592:	4811      	ldr	r0, [pc, #68]	; (1e5d8 <nrfx_nvmc_page_erase+0x50>)
   1e594:	f44f 7383 	mov.w	r3, #262	; 0x106
   1e598:	4a10      	ldr	r2, [pc, #64]	; (1e5dc <nrfx_nvmc_page_erase+0x54>)
   1e59a:	f007 fe60 	bl	2625e <assert_print>
   1e59e:	f44f 7183 	mov.w	r1, #262	; 0x106
   1e5a2:	480e      	ldr	r0, [pc, #56]	; (1e5dc <nrfx_nvmc_page_erase+0x54>)
   1e5a4:	f007 fe54 	bl	26250 <assert_post_action>
    return !(addr % flash_page_size_get());
   1e5a8:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1e5ac:	b97b      	cbnz	r3, 1e5ce <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1e5ae:	2202      	movs	r2, #2
   1e5b0:	4b0b      	ldr	r3, [pc, #44]	; (1e5e0 <nrfx_nvmc_page_erase+0x58>)
   1e5b2:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1e5b6:	f04f 32ff 	mov.w	r2, #4294967295
   1e5ba:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e5bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1e5c0:	07d2      	lsls	r2, r2, #31
   1e5c2:	d5fb      	bpl.n	1e5bc <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1e5c4:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1e5c6:	4807      	ldr	r0, [pc, #28]	; (1e5e4 <nrfx_nvmc_page_erase+0x5c>)
   1e5c8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1e5cc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1e5ce:	4806      	ldr	r0, [pc, #24]	; (1e5e8 <nrfx_nvmc_page_erase+0x60>)
   1e5d0:	e7fc      	b.n	1e5cc <nrfx_nvmc_page_erase+0x44>
   1e5d2:	bf00      	nop
   1e5d4:	00031aca 	.word	0x00031aca
   1e5d8:	0002d095 	.word	0x0002d095
   1e5dc:	00031a6e 	.word	0x00031a6e
   1e5e0:	40039000 	.word	0x40039000
   1e5e4:	0bad0000 	.word	0x0bad0000
   1e5e8:	0bad000a 	.word	0x0bad000a

0001e5ec <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1e5ec:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1e5f0:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1e5f2:	d30b      	bcc.n	1e60c <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1e5f4:	4910      	ldr	r1, [pc, #64]	; (1e638 <nrfx_nvmc_word_write+0x4c>)
   1e5f6:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1e5fa:	4a10      	ldr	r2, [pc, #64]	; (1e63c <nrfx_nvmc_word_write+0x50>)
   1e5fc:	4810      	ldr	r0, [pc, #64]	; (1e640 <nrfx_nvmc_word_write+0x54>)
   1e5fe:	f007 fe2e 	bl	2625e <assert_print>
   1e602:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1e606:	480d      	ldr	r0, [pc, #52]	; (1e63c <nrfx_nvmc_word_write+0x50>)
   1e608:	f007 fe22 	bl	26250 <assert_post_action>
   1e60c:	f010 0403 	ands.w	r4, r0, #3
   1e610:	d009      	beq.n	1e626 <nrfx_nvmc_word_write+0x3a>
   1e612:	490c      	ldr	r1, [pc, #48]	; (1e644 <nrfx_nvmc_word_write+0x58>)
   1e614:	f240 1395 	movw	r3, #405	; 0x195
   1e618:	4a08      	ldr	r2, [pc, #32]	; (1e63c <nrfx_nvmc_word_write+0x50>)
   1e61a:	4809      	ldr	r0, [pc, #36]	; (1e640 <nrfx_nvmc_word_write+0x54>)
   1e61c:	f007 fe1f 	bl	2625e <assert_print>
   1e620:	f240 1195 	movw	r1, #405	; 0x195
   1e624:	e7ef      	b.n	1e606 <nrfx_nvmc_word_write+0x1a>
   1e626:	2301      	movs	r3, #1
   1e628:	4d07      	ldr	r5, [pc, #28]	; (1e648 <nrfx_nvmc_word_write+0x5c>)
   1e62a:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1e62e:	f7ff ff9f 	bl	1e570 <nvmc_word_write>
   1e632:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1e636:	bd38      	pop	{r3, r4, r5, pc}
   1e638:	00031ae4 	.word	0x00031ae4
   1e63c:	00031a6e 	.word	0x00031a6e
   1e640:	0002d095 	.word	0x0002d095
   1e644:	00031afe 	.word	0x00031afe
   1e648:	40039000 	.word	0x40039000

0001e64c <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1e64c:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1e64e:	4d43      	ldr	r5, [pc, #268]	; (1e75c <qspi_xfer+0x110>)
   1e650:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1e654:	b94c      	cbnz	r4, 1e66a <qspi_xfer+0x1e>
   1e656:	4942      	ldr	r1, [pc, #264]	; (1e760 <qspi_xfer+0x114>)
   1e658:	2368      	movs	r3, #104	; 0x68
   1e65a:	4a42      	ldr	r2, [pc, #264]	; (1e764 <qspi_xfer+0x118>)
   1e65c:	4842      	ldr	r0, [pc, #264]	; (1e768 <qspi_xfer+0x11c>)
   1e65e:	f007 fdfe 	bl	2625e <assert_print>
   1e662:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1e664:	483f      	ldr	r0, [pc, #252]	; (1e764 <qspi_xfer+0x118>)
   1e666:	f007 fdf3 	bl	26250 <assert_post_action>
   1e66a:	b938      	cbnz	r0, 1e67c <qspi_xfer+0x30>
   1e66c:	493f      	ldr	r1, [pc, #252]	; (1e76c <qspi_xfer+0x120>)
   1e66e:	2369      	movs	r3, #105	; 0x69
   1e670:	4a3c      	ldr	r2, [pc, #240]	; (1e764 <qspi_xfer+0x118>)
   1e672:	483d      	ldr	r0, [pc, #244]	; (1e768 <qspi_xfer+0x11c>)
   1e674:	f007 fdf3 	bl	2625e <assert_print>
   1e678:	2169      	movs	r1, #105	; 0x69
   1e67a:	e7f3      	b.n	1e664 <qspi_xfer+0x18>
   1e67c:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1e680:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1e684:	d165      	bne.n	1e752 <qspi_xfer+0x106>
   1e686:	0786      	lsls	r6, r0, #30
   1e688:	d163      	bne.n	1e752 <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1e68a:	2c01      	cmp	r4, #1
   1e68c:	d001      	beq.n	1e692 <qspi_xfer+0x46>
   1e68e:	429c      	cmp	r4, r3
   1e690:	d161      	bne.n	1e756 <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1e692:	682c      	ldr	r4, [r5, #0]
   1e694:	bb04      	cbnz	r4, 1e6d8 <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1e696:	2b02      	cmp	r3, #2
   1e698:	4b35      	ldr	r3, [pc, #212]	; (1e770 <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1e69a:	bf0b      	itete	eq
   1e69c:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1e6a0:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1e6a4:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1e6a8:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1e6ac:	bf0b      	itete	eq
   1e6ae:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1e6b2:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1e6b6:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1e6b8:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6ba:	2100      	movs	r1, #0
   1e6bc:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e6c0:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1e6c4:	2201      	movs	r2, #1
   1e6c6:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1e6ca:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e6cc:	4a28      	ldr	r2, [pc, #160]	; (1e770 <qspi_xfer+0x124>)
   1e6ce:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1e6d2:	2b00      	cmp	r3, #0
   1e6d4:	d0fb      	beq.n	1e6ce <qspi_xfer+0x82>
   1e6d6:	e00d      	b.n	1e6f4 <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1e6d8:	68ae      	ldr	r6, [r5, #8]
   1e6da:	4c25      	ldr	r4, [pc, #148]	; (1e770 <qspi_xfer+0x124>)
   1e6dc:	b166      	cbz	r6, 1e6f8 <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1e6de:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1e6e0:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1e6e2:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1e6e4:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1e6e6:	d12d      	bne.n	1e744 <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1e6e8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1e6ec:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1e6f0:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1e6f4:	481f      	ldr	r0, [pc, #124]	; (1e774 <qspi_xfer+0x128>)
}
   1e6f6:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1e6f8:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1e6fa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1e6fe:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1e700:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1e702:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1e704:	bf0c      	ite	eq
   1e706:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1e70a:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e70e:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1e712:	bf0b      	itete	eq
   1e714:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1e718:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1e71c:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1e720:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1e724:	bf08      	it	eq
   1e726:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e728:	4911      	ldr	r1, [pc, #68]	; (1e770 <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1e72a:	bf18      	it	ne
   1e72c:	2304      	movne	r3, #4
   1e72e:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e732:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e734:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e738:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1e73c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e740:	601a      	str	r2, [r3, #0]
}
   1e742:	e7d7      	b.n	1e6f4 <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1e744:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1e748:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1e74c:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1e750:	e7d0      	b.n	1e6f4 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1e752:	4809      	ldr	r0, [pc, #36]	; (1e778 <qspi_xfer+0x12c>)
   1e754:	e7cf      	b.n	1e6f6 <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1e756:	4809      	ldr	r0, [pc, #36]	; (1e77c <qspi_xfer+0x130>)
   1e758:	e7cd      	b.n	1e6f6 <qspi_xfer+0xaa>
   1e75a:	bf00      	nop
   1e75c:	20022a80 	.word	0x20022a80
   1e760:	00031b63 	.word	0x00031b63
   1e764:	00031b27 	.word	0x00031b27
   1e768:	0002d095 	.word	0x0002d095
   1e76c:	00031b8f 	.word	0x00031b8f
   1e770:	4002b000 	.word	0x4002b000
   1e774:	0bad0000 	.word	0x0bad0000
   1e778:	0bad000a 	.word	0x0bad000a
   1e77c:	0bad000b 	.word	0x0bad000b

0001e780 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1e780:	b538      	push	{r3, r4, r5, lr}
   1e782:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e784:	4d06      	ldr	r5, [pc, #24]	; (1e7a0 <qspi_ready_wait+0x20>)
   1e786:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1e78a:	b933      	cbnz	r3, 1e79a <qspi_ready_wait+0x1a>
   1e78c:	200a      	movs	r0, #10
   1e78e:	f00b facb 	bl	29d28 <nrfx_busy_wait>
   1e792:	3c01      	subs	r4, #1
   1e794:	d1f7      	bne.n	1e786 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1e796:	4803      	ldr	r0, [pc, #12]	; (1e7a4 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1e798:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1e79a:	4803      	ldr	r0, [pc, #12]	; (1e7a8 <qspi_ready_wait+0x28>)
   1e79c:	e7fc      	b.n	1e798 <qspi_ready_wait+0x18>
   1e79e:	bf00      	nop
   1e7a0:	4002b000 	.word	0x4002b000
   1e7a4:	0bad0007 	.word	0x0bad0007
   1e7a8:	0bad0000 	.word	0x0bad0000

0001e7ac <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1e7ac:	4b08      	ldr	r3, [pc, #32]	; (1e7d0 <qspi_event_xfer_handle.constprop.0+0x24>)
   1e7ae:	689a      	ldr	r2, [r3, #8]
   1e7b0:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1e7b2:	691a      	ldr	r2, [r3, #16]
   1e7b4:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1e7b6:	699a      	ldr	r2, [r3, #24]
   1e7b8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1e7ba:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1e7bc:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1e7be:	b132      	cbz	r2, 1e7ce <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1e7c0:	695a      	ldr	r2, [r3, #20]
   1e7c2:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1e7c4:	69da      	ldr	r2, [r3, #28]
   1e7c6:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1e7c8:	2200      	movs	r2, #0
   1e7ca:	60da      	str	r2, [r3, #12]
   1e7cc:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1e7ce:	4770      	bx	lr
   1e7d0:	20022a80 	.word	0x20022a80

0001e7d4 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1e7d4:	b508      	push	{r3, lr}
    switch (port)
   1e7d6:	0943      	lsrs	r3, r0, #5
   1e7d8:	d00d      	beq.n	1e7f6 <nrf_gpio_cfg.constprop.0+0x22>
   1e7da:	2b01      	cmp	r3, #1
   1e7dc:	d01e      	beq.n	1e81c <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e7de:	4914      	ldr	r1, [pc, #80]	; (1e830 <nrf_gpio_cfg.constprop.0+0x5c>)
   1e7e0:	4814      	ldr	r0, [pc, #80]	; (1e834 <nrf_gpio_cfg.constprop.0+0x60>)
   1e7e2:	f240 2347 	movw	r3, #583	; 0x247
   1e7e6:	4a14      	ldr	r2, [pc, #80]	; (1e838 <nrf_gpio_cfg.constprop.0+0x64>)
   1e7e8:	f007 fd39 	bl	2625e <assert_print>
   1e7ec:	f240 2147 	movw	r1, #583	; 0x247
   1e7f0:	4811      	ldr	r0, [pc, #68]	; (1e838 <nrf_gpio_cfg.constprop.0+0x64>)
   1e7f2:	f007 fd2d 	bl	26250 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1e7f6:	f04f 33ff 	mov.w	r3, #4294967295
   1e7fa:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e7fc:	07da      	lsls	r2, r3, #31
   1e7fe:	d5ee      	bpl.n	1e7de <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1e800:	4a0e      	ldr	r2, [pc, #56]	; (1e83c <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1e802:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1e806:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1e80a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1e80e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1e812:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1e816:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1e81a:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1e81c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1e820:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e824:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e826:	07db      	lsls	r3, r3, #31
   1e828:	d5d9      	bpl.n	1e7de <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1e82a:	4a05      	ldr	r2, [pc, #20]	; (1e840 <nrf_gpio_cfg.constprop.0+0x6c>)
   1e82c:	e7e9      	b.n	1e802 <nrf_gpio_cfg.constprop.0+0x2e>
   1e82e:	bf00      	nop
   1e830:	00031069 	.word	0x00031069
   1e834:	0002d095 	.word	0x0002d095
   1e838:	00031036 	.word	0x00031036
   1e83c:	40842500 	.word	0x40842500
   1e840:	40842800 	.word	0x40842800

0001e844 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1e844:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1e846:	4b0e      	ldr	r3, [pc, #56]	; (1e880 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1e848:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1e84a:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1e84e:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1e852:	2807      	cmp	r0, #7
   1e854:	d813      	bhi.n	1e87e <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1e856:	e8df f000 	tbb	[pc, r0]
   1e85a:	0f11      	.short	0x0f11
   1e85c:	080a0b0d 	.word	0x080a0b0d
   1e860:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1e862:	0e10      	lsrs	r0, r2, #24
   1e864:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1e866:	0c10      	lsrs	r0, r2, #16
   1e868:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1e86a:	0a10      	lsrs	r0, r2, #8
   1e86c:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1e86e:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1e870:	0e1a      	lsrs	r2, r3, #24
   1e872:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1e874:	0c1a      	lsrs	r2, r3, #16
   1e876:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1e878:	0a1a      	lsrs	r2, r3, #8
   1e87a:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1e87c:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1e87e:	bd10      	pop	{r4, pc}
   1e880:	4002b000 	.word	0x4002b000

0001e884 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1e884:	3802      	subs	r0, #2
   1e886:	2807      	cmp	r0, #7
   1e888:	d81f      	bhi.n	1e8ca <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1e88a:	e8df f000 	tbb	[pc, r0]
   1e88e:	2729      	.short	0x2729
   1e890:	21231125 	.word	0x21231125
   1e894:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1e896:	79cb      	ldrb	r3, [r1, #7]
   1e898:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1e89a:	798a      	ldrb	r2, [r1, #6]
   1e89c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1e8a0:	794a      	ldrb	r2, [r1, #5]
   1e8a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1e8a6:	790a      	ldrb	r2, [r1, #4]
   1e8a8:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1e8aa:	4a0e      	ldr	r2, [pc, #56]	; (1e8e4 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1e8ac:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1e8b0:	78cb      	ldrb	r3, [r1, #3]
   1e8b2:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1e8b4:	788a      	ldrb	r2, [r1, #2]
   1e8b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1e8ba:	784a      	ldrb	r2, [r1, #1]
   1e8bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1e8c0:	780a      	ldrb	r2, [r1, #0]
   1e8c2:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1e8c4:	4a07      	ldr	r2, [pc, #28]	; (1e8e4 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1e8c6:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1e8ca:	4770      	bx	lr
    switch (length)
   1e8cc:	2300      	movs	r3, #0
   1e8ce:	e7e4      	b.n	1e89a <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1e8d0:	2300      	movs	r3, #0
   1e8d2:	e7e5      	b.n	1e8a0 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1e8d4:	2300      	movs	r3, #0
   1e8d6:	e7e6      	b.n	1e8a6 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1e8d8:	2300      	movs	r3, #0
   1e8da:	e7eb      	b.n	1e8b4 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1e8dc:	2300      	movs	r3, #0
   1e8de:	e7ec      	b.n	1e8ba <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1e8e0:	2300      	movs	r3, #0
   1e8e2:	e7ed      	b.n	1e8c0 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1e8e4:	4002b000 	.word	0x4002b000

0001e8e8 <nrfx_qspi_init>:
{
   1e8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8ea:	460d      	mov	r5, r1
   1e8ec:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1e8ee:	4604      	mov	r4, r0
   1e8f0:	b958      	cbnz	r0, 1e90a <nrfx_qspi_init+0x22>
   1e8f2:	496e      	ldr	r1, [pc, #440]	; (1eaac <nrfx_qspi_init+0x1c4>)
   1e8f4:	486e      	ldr	r0, [pc, #440]	; (1eab0 <nrfx_qspi_init+0x1c8>)
   1e8f6:	f44f 7388 	mov.w	r3, #272	; 0x110
   1e8fa:	4a6e      	ldr	r2, [pc, #440]	; (1eab4 <nrfx_qspi_init+0x1cc>)
   1e8fc:	f007 fcaf 	bl	2625e <assert_print>
   1e900:	f44f 7188 	mov.w	r1, #272	; 0x110
   1e904:	486b      	ldr	r0, [pc, #428]	; (1eab4 <nrfx_qspi_init+0x1cc>)
   1e906:	f007 fca3 	bl	26250 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1e90a:	4f6b      	ldr	r7, [pc, #428]	; (1eab8 <nrfx_qspi_init+0x1d0>)
   1e90c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1e910:	2b00      	cmp	r3, #0
   1e912:	f040 80c6 	bne.w	1eaa2 <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1e916:	7cc2      	ldrb	r2, [r0, #19]
   1e918:	b112      	cbz	r2, 1e920 <nrfx_qspi_init+0x38>
   1e91a:	7d03      	ldrb	r3, [r0, #20]
   1e91c:	2b00      	cmp	r3, #0
   1e91e:	d170      	bne.n	1ea02 <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1e920:	7920      	ldrb	r0, [r4, #4]
   1e922:	28ff      	cmp	r0, #255	; 0xff
   1e924:	f000 80bf 	beq.w	1eaa6 <nrfx_qspi_init+0x1be>
   1e928:	7963      	ldrb	r3, [r4, #5]
   1e92a:	2bff      	cmp	r3, #255	; 0xff
   1e92c:	f000 80bb 	beq.w	1eaa6 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1e930:	79a3      	ldrb	r3, [r4, #6]
   1e932:	2bff      	cmp	r3, #255	; 0xff
   1e934:	f000 80b7 	beq.w	1eaa6 <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1e938:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1e93a:	29ff      	cmp	r1, #255	; 0xff
   1e93c:	f000 80b3 	beq.w	1eaa6 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1e940:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1e942:	f8df c178 	ldr.w	ip, [pc, #376]	; 1eabc <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1e946:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1e94a:	4563      	cmp	r3, ip
   1e94c:	f040 80ab 	bne.w	1eaa6 <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1e950:	290e      	cmp	r1, #14
   1e952:	f040 80a8 	bne.w	1eaa6 <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1e956:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1e958:	2bff      	cmp	r3, #255	; 0xff
   1e95a:	d002      	beq.n	1e962 <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1e95c:	2b0f      	cmp	r3, #15
   1e95e:	f040 80a2 	bne.w	1eaa6 <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1e962:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1e964:	2bff      	cmp	r3, #255	; 0xff
   1e966:	d002      	beq.n	1e96e <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1e968:	2b10      	cmp	r3, #16
   1e96a:	f040 809c 	bne.w	1eaa6 <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1e96e:	b9d2      	cbnz	r2, 1e9a6 <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1e970:	2103      	movs	r1, #3
   1e972:	f7ff ff2f 	bl	1e7d4 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1e976:	2103      	movs	r1, #3
   1e978:	7960      	ldrb	r0, [r4, #5]
   1e97a:	f7ff ff2b 	bl	1e7d4 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1e97e:	2103      	movs	r1, #3
   1e980:	79a0      	ldrb	r0, [r4, #6]
   1e982:	f7ff ff27 	bl	1e7d4 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1e986:	79e0      	ldrb	r0, [r4, #7]
   1e988:	2103      	movs	r1, #3
   1e98a:	f7ff ff23 	bl	1e7d4 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1e98e:	7a20      	ldrb	r0, [r4, #8]
   1e990:	28ff      	cmp	r0, #255	; 0xff
   1e992:	d002      	beq.n	1e99a <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1e994:	2103      	movs	r1, #3
   1e996:	f7ff ff1d 	bl	1e7d4 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1e99a:	7a60      	ldrb	r0, [r4, #9]
   1e99c:	28ff      	cmp	r0, #255	; 0xff
   1e99e:	d002      	beq.n	1e9a6 <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1e9a0:	2103      	movs	r1, #3
   1e9a2:	f7ff ff17 	bl	1e7d4 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1e9a6:	7d23      	ldrb	r3, [r4, #20]
   1e9a8:	bb5b      	cbnz	r3, 1ea02 <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1e9aa:	7923      	ldrb	r3, [r4, #4]
   1e9ac:	2bff      	cmp	r3, #255	; 0xff
   1e9ae:	bf14      	ite	ne
   1e9b0:	461a      	movne	r2, r3
   1e9b2:	f04f 32ff 	moveq.w	r2, #4294967295
   1e9b6:	4b42      	ldr	r3, [pc, #264]	; (1eac0 <nrfx_qspi_init+0x1d8>)
   1e9b8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1e9bc:	7962      	ldrb	r2, [r4, #5]
   1e9be:	2aff      	cmp	r2, #255	; 0xff
   1e9c0:	bf08      	it	eq
   1e9c2:	f04f 32ff 	moveq.w	r2, #4294967295
   1e9c6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1e9ca:	79a2      	ldrb	r2, [r4, #6]
   1e9cc:	2aff      	cmp	r2, #255	; 0xff
   1e9ce:	bf08      	it	eq
   1e9d0:	f04f 32ff 	moveq.w	r2, #4294967295
   1e9d4:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1e9d8:	79e2      	ldrb	r2, [r4, #7]
   1e9da:	2aff      	cmp	r2, #255	; 0xff
   1e9dc:	bf08      	it	eq
   1e9de:	f04f 32ff 	moveq.w	r2, #4294967295
   1e9e2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1e9e6:	7a22      	ldrb	r2, [r4, #8]
   1e9e8:	2aff      	cmp	r2, #255	; 0xff
   1e9ea:	bf08      	it	eq
   1e9ec:	f04f 32ff 	moveq.w	r2, #4294967295
   1e9f0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1e9f4:	7a62      	ldrb	r2, [r4, #9]
   1e9f6:	2aff      	cmp	r2, #255	; 0xff
   1e9f8:	bf08      	it	eq
   1e9fa:	f04f 32ff 	moveq.w	r2, #4294967295
   1e9fe:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1ea02:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1ea04:	4a2e      	ldr	r2, [pc, #184]	; (1eac0 <nrfx_qspi_init+0x1d8>)
   1ea06:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1ea0a:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1ea0c:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1ea0e:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1ea10:	019b      	lsls	r3, r3, #6
   1ea12:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1ea16:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1ea18:	7b61      	ldrb	r1, [r4, #13]
   1ea1a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1ea1e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1ea22:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1ea24:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1ea28:	bbb1      	cbnz	r1, 1ea98 <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1ea2a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1ea2e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1ea32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1ea36:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1ea3a:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1ea3e:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1ea40:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1ea44:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1ea48:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1ea4a:	7be1      	ldrb	r1, [r4, #15]
   1ea4c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1ea50:	7c21      	ldrb	r1, [r4, #16]
   1ea52:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1ea56:	7c61      	ldrb	r1, [r4, #17]
   1ea58:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1ea5c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ea60:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1ea62:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ea66:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1ea6a:	2301      	movs	r3, #1
   1ea6c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1ea70:	b115      	cbz	r5, 1ea78 <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1ea72:	202b      	movs	r0, #43	; 0x2b
   1ea74:	f7f2 fab0 	bl	10fd8 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1ea78:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ea7a:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1ea7c:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1ea80:	4b0f      	ldr	r3, [pc, #60]	; (1eac0 <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ea82:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1ea86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ea8a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea8e:	601a      	str	r2, [r3, #0]
}
   1ea90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1ea94:	f7ff be74 	b.w	1e780 <qspi_ready_wait>
        regval &= ~(1 << 17);
   1ea98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1ea9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1eaa0:	e7c5      	b.n	1ea2e <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1eaa2:	4808      	ldr	r0, [pc, #32]	; (1eac4 <nrfx_qspi_init+0x1dc>)
}
   1eaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1eaa6:	4808      	ldr	r0, [pc, #32]	; (1eac8 <nrfx_qspi_init+0x1e0>)
   1eaa8:	e7fc      	b.n	1eaa4 <nrfx_qspi_init+0x1bc>
   1eaaa:	bf00      	nop
   1eaac:	00031a38 	.word	0x00031a38
   1eab0:	0002d095 	.word	0x0002d095
   1eab4:	00031b27 	.word	0x00031b27
   1eab8:	20022a80 	.word	0x20022a80
   1eabc:	000d1211 	.word	0x000d1211
   1eac0:	4002b000 	.word	0x4002b000
   1eac4:	0bad0005 	.word	0x0bad0005
   1eac8:	0bad0004 	.word	0x0bad0004

0001eacc <nrfx_qspi_cinstr_xfer>:
{
   1eacc:	b570      	push	{r4, r5, r6, lr}
   1eace:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ead0:	4a26      	ldr	r2, [pc, #152]	; (1eb6c <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1ead2:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ead4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1ead8:	b95a      	cbnz	r2, 1eaf2 <nrfx_qspi_cinstr_xfer+0x26>
   1eada:	4925      	ldr	r1, [pc, #148]	; (1eb70 <nrfx_qspi_cinstr_xfer+0xa4>)
   1eadc:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1eae0:	4a24      	ldr	r2, [pc, #144]	; (1eb74 <nrfx_qspi_cinstr_xfer+0xa8>)
   1eae2:	4825      	ldr	r0, [pc, #148]	; (1eb78 <nrfx_qspi_cinstr_xfer+0xac>)
   1eae4:	f007 fbbb 	bl	2625e <assert_print>
   1eae8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1eaec:	4821      	ldr	r0, [pc, #132]	; (1eb74 <nrfx_qspi_cinstr_xfer+0xa8>)
   1eaee:	f007 fbaf 	bl	26250 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1eaf2:	2a01      	cmp	r2, #1
   1eaf4:	d137      	bne.n	1eb66 <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eaf6:	2200      	movs	r2, #0
   1eaf8:	4e20      	ldr	r6, [pc, #128]	; (1eb7c <nrfx_qspi_cinstr_xfer+0xb0>)
   1eafa:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1eafe:	b111      	cbz	r1, 1eb06 <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1eb00:	7840      	ldrb	r0, [r0, #1]
   1eb02:	f7ff febf 	bl	1e884 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1eb06:	2301      	movs	r3, #1
   1eb08:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1eb0c:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1eb0e:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1eb10:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1eb12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1eb16:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1eb18:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1eb1a:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1eb1c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1eb20:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1eb22:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1eb26:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1eb28:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1eb2c:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1eb30:	f7ff fe26 	bl	1e780 <qspi_ready_wait>
   1eb34:	4b12      	ldr	r3, [pc, #72]	; (1eb80 <nrfx_qspi_cinstr_xfer+0xb4>)
   1eb36:	4298      	cmp	r0, r3
   1eb38:	d10b      	bne.n	1eb52 <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1eb3a:	792b      	ldrb	r3, [r5, #4]
   1eb3c:	b993      	cbnz	r3, 1eb64 <nrfx_qspi_cinstr_xfer+0x98>
   1eb3e:	4911      	ldr	r1, [pc, #68]	; (1eb84 <nrfx_qspi_cinstr_xfer+0xb8>)
   1eb40:	f240 136b 	movw	r3, #363	; 0x16b
   1eb44:	4a0b      	ldr	r2, [pc, #44]	; (1eb74 <nrfx_qspi_cinstr_xfer+0xa8>)
   1eb46:	480c      	ldr	r0, [pc, #48]	; (1eb78 <nrfx_qspi_cinstr_xfer+0xac>)
   1eb48:	f007 fb89 	bl	2625e <assert_print>
   1eb4c:	f240 116b 	movw	r1, #363	; 0x16b
   1eb50:	e7cc      	b.n	1eaec <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eb52:	2300      	movs	r3, #0
   1eb54:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   1eb58:	b11c      	cbz	r4, 1eb62 <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   1eb5a:	4621      	mov	r1, r4
   1eb5c:	7868      	ldrb	r0, [r5, #1]
   1eb5e:	f7ff fe71 	bl	1e844 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   1eb62:	4809      	ldr	r0, [pc, #36]	; (1eb88 <nrfx_qspi_cinstr_xfer+0xbc>)
}
   1eb64:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   1eb66:	4809      	ldr	r0, [pc, #36]	; (1eb8c <nrfx_qspi_cinstr_xfer+0xc0>)
   1eb68:	e7fc      	b.n	1eb64 <nrfx_qspi_cinstr_xfer+0x98>
   1eb6a:	bf00      	nop
   1eb6c:	20022a80 	.word	0x20022a80
   1eb70:	00031b63 	.word	0x00031b63
   1eb74:	00031b27 	.word	0x00031b27
   1eb78:	0002d095 	.word	0x0002d095
   1eb7c:	4002b000 	.word	0x4002b000
   1eb80:	0bad0007 	.word	0x0bad0007
   1eb84:	00031ba7 	.word	0x00031ba7
   1eb88:	0bad0000 	.word	0x0bad0000
   1eb8c:	0bad000b 	.word	0x0bad000b

0001eb90 <nrfx_qspi_mem_busy_check>:
{
   1eb90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   1eb92:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   1eb94:	4a0c      	ldr	r2, [pc, #48]	; (1ebc8 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1eb96:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   1eb98:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1eb9a:	f10d 0207 	add.w	r2, sp, #7
   1eb9e:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   1eba0:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   1eba4:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1eba8:	f7ff ff90 	bl	1eacc <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   1ebac:	4b07      	ldr	r3, [pc, #28]	; (1ebcc <nrfx_qspi_mem_busy_check+0x3c>)
   1ebae:	4298      	cmp	r0, r3
   1ebb0:	d106      	bne.n	1ebc0 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   1ebb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   1ebb6:	f013 0f01 	tst.w	r3, #1
   1ebba:	4b05      	ldr	r3, [pc, #20]	; (1ebd0 <nrfx_qspi_mem_busy_check+0x40>)
   1ebbc:	bf18      	it	ne
   1ebbe:	4618      	movne	r0, r3
}
   1ebc0:	b005      	add	sp, #20
   1ebc2:	f85d fb04 	ldr.w	pc, [sp], #4
   1ebc6:	bf00      	nop
   1ebc8:	01000205 	.word	0x01000205
   1ebcc:	0bad0000 	.word	0x0bad0000
   1ebd0:	0bad000b 	.word	0x0bad000b

0001ebd4 <nrfx_qspi_uninit>:
{
   1ebd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ebd8:	4e29      	ldr	r6, [pc, #164]	; (1ec80 <nrfx_qspi_uninit+0xac>)
   1ebda:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1ebde:	b95b      	cbnz	r3, 1ebf8 <nrfx_qspi_uninit+0x24>
   1ebe0:	4928      	ldr	r1, [pc, #160]	; (1ec84 <nrfx_qspi_uninit+0xb0>)
   1ebe2:	4829      	ldr	r0, [pc, #164]	; (1ec88 <nrfx_qspi_uninit+0xb4>)
   1ebe4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   1ebe8:	4a28      	ldr	r2, [pc, #160]	; (1ec8c <nrfx_qspi_uninit+0xb8>)
   1ebea:	f007 fb38 	bl	2625e <assert_print>
   1ebee:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1ebf2:	4826      	ldr	r0, [pc, #152]	; (1ec8c <nrfx_qspi_uninit+0xb8>)
   1ebf4:	f007 fb2c 	bl	26250 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   1ebf8:	202b      	movs	r0, #43	; 0x2b
   1ebfa:	f7f2 f9fb 	bl	10ff4 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   1ebfe:	4b24      	ldr	r3, [pc, #144]	; (1ec90 <nrfx_qspi_uninit+0xbc>)
   1ec00:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   1ec04:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   1ec08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   1ec0c:	bf04      	itt	eq
   1ec0e:	4a21      	ldreq	r2, [pc, #132]	; (1ec94 <nrfx_qspi_uninit+0xc0>)
   1ec10:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   1ec14:	2201      	movs	r2, #1
   1ec16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec1a:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   1ec1c:	2200      	movs	r2, #0
   1ec1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   1ec26:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   1ec2a:	bb22      	cbnz	r2, 1ec76 <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   1ec2c:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   1ec30:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   1ec34:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   1ec36:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   1ec3a:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   1ec3e:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   1ec42:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   1ec46:	f00b f8f2 	bl	29e2e <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   1ec4a:	fa5f f089 	uxtb.w	r0, r9
   1ec4e:	f00b f8ee 	bl	29e2e <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   1ec52:	fa5f f088 	uxtb.w	r0, r8
   1ec56:	f00b f8ea 	bl	29e2e <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   1ec5a:	b2f8      	uxtb	r0, r7
   1ec5c:	f00b f8e7 	bl	29e2e <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1ec60:	b2e8      	uxtb	r0, r5
   1ec62:	28ff      	cmp	r0, #255	; 0xff
   1ec64:	b2e4      	uxtb	r4, r4
   1ec66:	d001      	beq.n	1ec6c <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   1ec68:	f00b f8e1 	bl	29e2e <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1ec6c:	2cff      	cmp	r4, #255	; 0xff
   1ec6e:	d002      	beq.n	1ec76 <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   1ec70:	4620      	mov	r0, r4
   1ec72:	f00b f8dc 	bl	29e2e <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   1ec76:	2300      	movs	r3, #0
   1ec78:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   1ec7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ec80:	20022a80 	.word	0x20022a80
   1ec84:	00031b63 	.word	0x00031b63
   1ec88:	0002d095 	.word	0x0002d095
   1ec8c:	00031b27 	.word	0x00031b27
   1ec90:	4002b000 	.word	0x4002b000
   1ec94:	00030100 	.word	0x00030100

0001ec98 <nrfx_qspi_erase>:
{
   1ec98:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ec9a:	4a1a      	ldr	r2, [pc, #104]	; (1ed04 <nrfx_qspi_erase+0x6c>)
   1ec9c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1eca0:	b95b      	cbnz	r3, 1ecba <nrfx_qspi_erase+0x22>
   1eca2:	4919      	ldr	r1, [pc, #100]	; (1ed08 <nrfx_qspi_erase+0x70>)
   1eca4:	4819      	ldr	r0, [pc, #100]	; (1ed0c <nrfx_qspi_erase+0x74>)
   1eca6:	f44f 730a 	mov.w	r3, #552	; 0x228
   1ecaa:	4a19      	ldr	r2, [pc, #100]	; (1ed10 <nrfx_qspi_erase+0x78>)
   1ecac:	f007 fad7 	bl	2625e <assert_print>
   1ecb0:	f44f 710a 	mov.w	r1, #552	; 0x228
   1ecb4:	4816      	ldr	r0, [pc, #88]	; (1ed10 <nrfx_qspi_erase+0x78>)
   1ecb6:	f007 facb 	bl	26250 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   1ecba:	078c      	lsls	r4, r1, #30
   1ecbc:	d11e      	bne.n	1ecfc <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   1ecbe:	6814      	ldr	r4, [r2, #0]
   1ecc0:	b10c      	cbz	r4, 1ecc6 <nrfx_qspi_erase+0x2e>
   1ecc2:	2b01      	cmp	r3, #1
   1ecc4:	d11c      	bne.n	1ed00 <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   1ecc6:	2304      	movs	r3, #4
   1ecc8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   1eccc:	4b11      	ldr	r3, [pc, #68]	; (1ed14 <nrfx_qspi_erase+0x7c>)
   1ecce:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecd2:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   1ecd4:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecd8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecdc:	2101      	movs	r1, #1
   1ecde:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   1ece0:	6810      	ldr	r0, [r2, #0]
   1ece2:	b940      	cbnz	r0, 1ecf6 <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ece4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1ece8:	2900      	cmp	r1, #0
   1ecea:	d0fb      	beq.n	1ece4 <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ecec:	2301      	movs	r3, #1
   1ecee:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   1ecf2:	4809      	ldr	r0, [pc, #36]	; (1ed18 <nrfx_qspi_erase+0x80>)
}
   1ecf4:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   1ecf6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   1ecfa:	e7fa      	b.n	1ecf2 <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   1ecfc:	4807      	ldr	r0, [pc, #28]	; (1ed1c <nrfx_qspi_erase+0x84>)
   1ecfe:	e7f9      	b.n	1ecf4 <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   1ed00:	4807      	ldr	r0, [pc, #28]	; (1ed20 <nrfx_qspi_erase+0x88>)
   1ed02:	e7f7      	b.n	1ecf4 <nrfx_qspi_erase+0x5c>
   1ed04:	20022a80 	.word	0x20022a80
   1ed08:	00031b63 	.word	0x00031b63
   1ed0c:	0002d095 	.word	0x0002d095
   1ed10:	00031b27 	.word	0x00031b27
   1ed14:	4002b000 	.word	0x4002b000
   1ed18:	0bad0000 	.word	0x0bad0000
   1ed1c:	0bad000a 	.word	0x0bad000a
   1ed20:	0bad000b 	.word	0x0bad000b

0001ed24 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   1ed24:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ed26:	4b17      	ldr	r3, [pc, #92]	; (1ed84 <nrfx_qspi_irq_handler+0x60>)
   1ed28:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1ed2c:	b1e2      	cbz	r2, 1ed68 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ed2e:	2200      	movs	r2, #0
    switch (m_cb.state)
   1ed30:	4c15      	ldr	r4, [pc, #84]	; (1ed88 <nrfx_qspi_irq_handler+0x64>)
   1ed32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ed36:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1ed3a:	2a03      	cmp	r2, #3
   1ed3c:	d015      	beq.n	1ed6a <nrfx_qspi_irq_handler+0x46>
   1ed3e:	2a04      	cmp	r2, #4
   1ed40:	d015      	beq.n	1ed6e <nrfx_qspi_irq_handler+0x4a>
   1ed42:	2a02      	cmp	r2, #2
   1ed44:	d104      	bne.n	1ed50 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   1ed46:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1ed48:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   1ed4c:	f7ff fd2e 	bl	1e7ac <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   1ed50:	68a3      	ldr	r3, [r4, #8]
   1ed52:	b913      	cbnz	r3, 1ed5a <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ed54:	2301      	movs	r3, #1
   1ed56:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   1ed5a:	e9d4 3100 	ldrd	r3, r1, [r4]
   1ed5e:	2000      	movs	r0, #0
   1ed60:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   1ed62:	2300      	movs	r3, #0
   1ed64:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   1ed68:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1ed6a:	2302      	movs	r3, #2
   1ed6c:	e7ec      	b.n	1ed48 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   1ed6e:	2203      	movs	r2, #3
   1ed70:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   1ed74:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   1ed78:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   1ed7a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1ed7e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1ed82:	e7e5      	b.n	1ed50 <nrfx_qspi_irq_handler+0x2c>
   1ed84:	4002b000 	.word	0x4002b000
   1ed88:	20022a80 	.word	0x20022a80

0001ed8c <nrf_gpio_pin_port_decode>:
{
   1ed8c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ed8e:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1ed90:	095a      	lsrs	r2, r3, #5
   1ed92:	d00d      	beq.n	1edb0 <nrf_gpio_pin_port_decode+0x24>
   1ed94:	2a01      	cmp	r2, #1
   1ed96:	d013      	beq.n	1edc0 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ed98:	490e      	ldr	r1, [pc, #56]	; (1edd4 <nrf_gpio_pin_port_decode+0x48>)
   1ed9a:	480f      	ldr	r0, [pc, #60]	; (1edd8 <nrf_gpio_pin_port_decode+0x4c>)
   1ed9c:	f240 2347 	movw	r3, #583	; 0x247
   1eda0:	4a0e      	ldr	r2, [pc, #56]	; (1eddc <nrf_gpio_pin_port_decode+0x50>)
   1eda2:	f007 fa5c 	bl	2625e <assert_print>
   1eda6:	f240 2147 	movw	r1, #583	; 0x247
   1edaa:	480c      	ldr	r0, [pc, #48]	; (1eddc <nrf_gpio_pin_port_decode+0x50>)
   1edac:	f007 fa50 	bl	26250 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1edb0:	f04f 32ff 	mov.w	r2, #4294967295
   1edb4:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1edb8:	07d9      	lsls	r1, r3, #31
   1edba:	d5ed      	bpl.n	1ed98 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1edbc:	4808      	ldr	r0, [pc, #32]	; (1ede0 <nrf_gpio_pin_port_decode+0x54>)
   1edbe:	e008      	b.n	1edd2 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1edc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1edc4:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1edc8:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1edca:	07d2      	lsls	r2, r2, #31
   1edcc:	d5e4      	bpl.n	1ed98 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1edce:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1edd0:	4804      	ldr	r0, [pc, #16]	; (1ede4 <nrf_gpio_pin_port_decode+0x58>)
}
   1edd2:	bd08      	pop	{r3, pc}
   1edd4:	00031069 	.word	0x00031069
   1edd8:	0002d095 	.word	0x0002d095
   1eddc:	00031036 	.word	0x00031036
   1ede0:	40842500 	.word	0x40842500
   1ede4:	40842800 	.word	0x40842800

0001ede8 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   1ede8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1edec:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   1edee:	460c      	mov	r4, r1
   1edf0:	b959      	cbnz	r1, 1ee0a <nrfx_spim_init+0x22>
   1edf2:	498d      	ldr	r1, [pc, #564]	; (1f028 <nrfx_spim_init+0x240>)
   1edf4:	488d      	ldr	r0, [pc, #564]	; (1f02c <nrfx_spim_init+0x244>)
   1edf6:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   1edfa:	4a8d      	ldr	r2, [pc, #564]	; (1f030 <nrfx_spim_init+0x248>)
   1edfc:	f007 fa2f 	bl	2625e <assert_print>
   1ee00:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1ee04:	488a      	ldr	r0, [pc, #552]	; (1f030 <nrfx_spim_init+0x248>)
   1ee06:	f007 fa23 	bl	26250 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ee0a:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ee0c:	4d89      	ldr	r5, [pc, #548]	; (1f034 <nrfx_spim_init+0x24c>)
   1ee0e:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   1ee12:	7f09      	ldrb	r1, [r1, #28]
   1ee14:	2900      	cmp	r1, #0
   1ee16:	f040 8100 	bne.w	1f01a <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   1ee1a:	2f00      	cmp	r7, #0
   1ee1c:	f040 80ff 	bne.w	1f01e <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1ee20:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1ee24:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   1ee26:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1ee28:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1ee2c:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1ee2e:	d027      	beq.n	1ee80 <nrfx_spim_init+0x98>
   1ee30:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   1ee34:	d124      	bne.n	1ee80 <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1ee36:	b119      	cbz	r1, 1ee40 <nrfx_spim_init+0x58>
   1ee38:	7d20      	ldrb	r0, [r4, #20]
   1ee3a:	2800      	cmp	r0, #0
   1ee3c:	f040 80d5 	bne.w	1efea <nrfx_spim_init+0x202>
   1ee40:	487d      	ldr	r0, [pc, #500]	; (1f038 <nrfx_spim_init+0x250>)
   1ee42:	4581      	cmp	r9, r0
   1ee44:	d11c      	bne.n	1ee80 <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1ee46:	7820      	ldrb	r0, [r4, #0]
   1ee48:	28ff      	cmp	r0, #255	; 0xff
   1ee4a:	d002      	beq.n	1ee52 <nrfx_spim_init+0x6a>
   1ee4c:	2808      	cmp	r0, #8
   1ee4e:	f040 80e8 	bne.w	1f022 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1ee52:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1ee54:	28ff      	cmp	r0, #255	; 0xff
   1ee56:	d002      	beq.n	1ee5e <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1ee58:	280b      	cmp	r0, #11
   1ee5a:	f040 80e2 	bne.w	1f022 <nrfx_spim_init+0x23a>
   1ee5e:	2eff      	cmp	r6, #255	; 0xff
   1ee60:	d002      	beq.n	1ee68 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1ee62:	2e0c      	cmp	r6, #12
   1ee64:	f040 80dd 	bne.w	1f022 <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1ee68:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1ee6a:	28ff      	cmp	r0, #255	; 0xff
   1ee6c:	d002      	beq.n	1ee74 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1ee6e:	2809      	cmp	r0, #9
   1ee70:	f040 80d7 	bne.w	1f022 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1ee74:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1ee76:	28ff      	cmp	r0, #255	; 0xff
   1ee78:	d002      	beq.n	1ee80 <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1ee7a:	280a      	cmp	r0, #10
   1ee7c:	f040 80d1 	bne.w	1f022 <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1ee80:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ee84:	7fab      	ldrb	r3, [r5, #30]
   1ee86:	f361 0300 	bfi	r3, r1, #0, #1
   1ee8a:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   1ee8c:	7922      	ldrb	r2, [r4, #4]
   1ee8e:	b2db      	uxtb	r3, r3
   1ee90:	f362 0341 	bfi	r3, r2, #1, #1
   1ee94:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   1ee96:	7c62      	ldrb	r2, [r4, #17]
   1ee98:	b2db      	uxtb	r3, r3
   1ee9a:	f362 0382 	bfi	r3, r2, #2, #1
   1ee9e:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1eea0:	78e3      	ldrb	r3, [r4, #3]
   1eea2:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   1eea4:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1eea6:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   1eeaa:	2b00      	cmp	r3, #0
   1eeac:	d142      	bne.n	1ef34 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   1eeae:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   1eeb0:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1eeb2:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   1eeb6:	7b23      	ldrb	r3, [r4, #12]
   1eeb8:	bf08      	it	eq
   1eeba:	2703      	moveq	r7, #3
   1eebc:	2b01      	cmp	r3, #1
   1eebe:	f200 8096 	bhi.w	1efee <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   1eec2:	f00a ffc1 	bl	29e48 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1eec6:	2300      	movs	r3, #0
   1eec8:	9700      	str	r7, [sp, #0]
   1eeca:	7820      	ldrb	r0, [r4, #0]
   1eecc:	461a      	mov	r2, r3
   1eece:	2101      	movs	r1, #1
   1eed0:	f00a ffe2 	bl	29e98 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1eed4:	7860      	ldrb	r0, [r4, #1]
   1eed6:	28ff      	cmp	r0, #255	; 0xff
   1eed8:	d008      	beq.n	1eeec <nrfx_spim_init+0x104>
   1eeda:	f00a ffb5 	bl	29e48 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1eede:	2201      	movs	r2, #1
   1eee0:	9700      	str	r7, [sp, #0]
   1eee2:	2300      	movs	r3, #0
   1eee4:	4611      	mov	r1, r2
   1eee6:	7860      	ldrb	r0, [r4, #1]
   1eee8:	f00a ffd6 	bl	29e98 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1eeec:	78a0      	ldrb	r0, [r4, #2]
   1eeee:	28ff      	cmp	r0, #255	; 0xff
   1eef0:	d005      	beq.n	1eefe <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   1eef2:	2200      	movs	r2, #0
   1eef4:	9700      	str	r7, [sp, #0]
   1eef6:	4611      	mov	r1, r2
   1eef8:	7ba3      	ldrb	r3, [r4, #14]
   1eefa:	f00a ffcd 	bl	29e98 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1eefe:	78e0      	ldrb	r0, [r4, #3]
   1ef00:	28ff      	cmp	r0, #255	; 0xff
   1ef02:	d00b      	beq.n	1ef1c <nrfx_spim_init+0x134>
    if (value == 0)
   1ef04:	7923      	ldrb	r3, [r4, #4]
   1ef06:	2b00      	cmp	r3, #0
   1ef08:	d074      	beq.n	1eff4 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   1ef0a:	f00a ff9d 	bl	29e48 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   1ef0e:	2201      	movs	r2, #1
   1ef10:	9700      	str	r7, [sp, #0]
   1ef12:	2300      	movs	r3, #0
   1ef14:	4611      	mov	r1, r2
   1ef16:	78e0      	ldrb	r0, [r4, #3]
   1ef18:	f00a ffbe 	bl	29e98 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1ef1c:	7be0      	ldrb	r0, [r4, #15]
   1ef1e:	28ff      	cmp	r0, #255	; 0xff
   1ef20:	d008      	beq.n	1ef34 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   1ef22:	f00a ff9d 	bl	29e60 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1ef26:	2201      	movs	r2, #1
   1ef28:	9700      	str	r7, [sp, #0]
   1ef2a:	2300      	movs	r3, #0
   1ef2c:	4611      	mov	r1, r2
   1ef2e:	7be0      	ldrb	r0, [r4, #15]
   1ef30:	f00a ffb2 	bl	29e98 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1ef34:	7d23      	ldrb	r3, [r4, #20]
   1ef36:	bb6b      	cbnz	r3, 1ef94 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1ef38:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1ef3a:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1ef3c:	2bff      	cmp	r3, #255	; 0xff
   1ef3e:	bf18      	it	ne
   1ef40:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1ef42:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1ef44:	bf08      	it	eq
   1ef46:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1ef4a:	2bff      	cmp	r3, #255	; 0xff
   1ef4c:	bf08      	it	eq
   1ef4e:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1ef52:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1ef56:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1ef5a:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1ef5e:	f898 3004 	ldrb.w	r3, [r8, #4]
   1ef62:	b9bb      	cbnz	r3, 1ef94 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   1ef64:	78e3      	ldrb	r3, [r4, #3]
   1ef66:	2bff      	cmp	r3, #255	; 0xff
   1ef68:	d047      	beq.n	1effa <nrfx_spim_init+0x212>
   1ef6a:	7c62      	ldrb	r2, [r4, #17]
   1ef6c:	2a00      	cmp	r2, #0
   1ef6e:	d044      	beq.n	1effa <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   1ef70:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1ef72:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   1ef74:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1ef78:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1ef7c:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1ef80:	f898 3004 	ldrb.w	r3, [r8, #4]
   1ef84:	b933      	cbnz	r3, 1ef94 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1ef86:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   1ef88:	2bff      	cmp	r3, #255	; 0xff
   1ef8a:	bf08      	it	eq
   1ef8c:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1ef90:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1ef94:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1ef96:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1ef9a:	68a3      	ldr	r3, [r4, #8]
   1ef9c:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1efa0:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1efa2:	7b22      	ldrb	r2, [r4, #12]
   1efa4:	3b00      	subs	r3, #0
   1efa6:	bf18      	it	ne
   1efa8:	2301      	movne	r3, #1
    switch (spi_mode)
   1efaa:	2a02      	cmp	r2, #2
   1efac:	d02f      	beq.n	1f00e <nrfx_spim_init+0x226>
   1efae:	2a03      	cmp	r2, #3
   1efb0:	d030      	beq.n	1f014 <nrfx_spim_init+0x22c>
   1efb2:	2a01      	cmp	r2, #1
   1efb4:	d101      	bne.n	1efba <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1efb6:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1efba:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1efbe:	79a3      	ldrb	r3, [r4, #6]
   1efc0:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1efc4:	2307      	movs	r3, #7
   1efc6:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1efca:	682b      	ldr	r3, [r5, #0]
   1efcc:	b12b      	cbz	r3, 1efda <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1efce:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1efd2:	f340 3007 	sbfx	r0, r0, #12, #8
   1efd6:	f7f1 ffff 	bl	10fd8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1efda:	2300      	movs	r3, #0
   1efdc:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1efde:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1efe0:	4816      	ldr	r0, [pc, #88]	; (1f03c <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1efe2:	772b      	strb	r3, [r5, #28]
}
   1efe4:	b003      	add	sp, #12
   1efe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1efea:	4601      	mov	r1, r0
   1efec:	e748      	b.n	1ee80 <nrfx_spim_init+0x98>
   1efee:	f00a ff37 	bl	29e60 <nrf_gpio_pin_set>
   1eff2:	e768      	b.n	1eec6 <nrfx_spim_init+0xde>
   1eff4:	f00a ff34 	bl	29e60 <nrf_gpio_pin_set>
   1eff8:	e789      	b.n	1ef0e <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   1effa:	f04f 33ff 	mov.w	r3, #4294967295
   1effe:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1f002:	2300      	movs	r3, #0
   1f004:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1f008:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   1f00c:	e7b8      	b.n	1ef80 <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f00e:	f043 0304 	orr.w	r3, r3, #4
        break;
   1f012:	e7d2      	b.n	1efba <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f014:	f043 0306 	orr.w	r3, r3, #6
        break;
   1f018:	e7cf      	b.n	1efba <nrfx_spim_init+0x1d2>
        return err_code;
   1f01a:	4809      	ldr	r0, [pc, #36]	; (1f040 <nrfx_spim_init+0x258>)
   1f01c:	e7e2      	b.n	1efe4 <nrfx_spim_init+0x1fc>
        return err_code;
   1f01e:	4809      	ldr	r0, [pc, #36]	; (1f044 <nrfx_spim_init+0x25c>)
   1f020:	e7e0      	b.n	1efe4 <nrfx_spim_init+0x1fc>
            return err_code;
   1f022:	4809      	ldr	r0, [pc, #36]	; (1f048 <nrfx_spim_init+0x260>)
   1f024:	e7de      	b.n	1efe4 <nrfx_spim_init+0x1fc>
   1f026:	bf00      	nop
   1f028:	00031a38 	.word	0x00031a38
   1f02c:	0002d095 	.word	0x0002d095
   1f030:	00031bb9 	.word	0x00031bb9
   1f034:	20022ab4 	.word	0x20022ab4
   1f038:	4000a000 	.word	0x4000a000
   1f03c:	0bad0000 	.word	0x0bad0000
   1f040:	0bad0005 	.word	0x0bad0005
   1f044:	0bad0003 	.word	0x0bad0003
   1f048:	0bad0004 	.word	0x0bad0004

0001f04c <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   1f04c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f050:	4d2e      	ldr	r5, [pc, #184]	; (1f10c <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f052:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   1f056:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f058:	ea4f 1648 	mov.w	r6, r8, lsl #5
   1f05c:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   1f060:	f898 301c 	ldrb.w	r3, [r8, #28]
   1f064:	b95b      	cbnz	r3, 1f07e <nrfx_spim_uninit+0x32>
   1f066:	492a      	ldr	r1, [pc, #168]	; (1f110 <nrfx_spim_uninit+0xc4>)
   1f068:	482a      	ldr	r0, [pc, #168]	; (1f114 <nrfx_spim_uninit+0xc8>)
   1f06a:	f240 230f 	movw	r3, #527	; 0x20f
   1f06e:	4a2a      	ldr	r2, [pc, #168]	; (1f118 <nrfx_spim_uninit+0xcc>)
   1f070:	f007 f8f5 	bl	2625e <assert_print>
   1f074:	f240 210f 	movw	r1, #527	; 0x20f
   1f078:	4827      	ldr	r0, [pc, #156]	; (1f118 <nrfx_spim_uninit+0xcc>)
   1f07a:	f007 f8e9 	bl	26250 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1f07e:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1f080:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   1f082:	b1cb      	cbz	r3, 1f0b8 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1f084:	f344 3007 	sbfx	r0, r4, #12, #8
   1f088:	f7f1 ffb4 	bl	10ff4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1f08c:	4b23      	ldr	r3, [pc, #140]	; (1f11c <nrfx_spim_uninit+0xd0>)
   1f08e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1f092:	f898 301d 	ldrb.w	r3, [r8, #29]
   1f096:	b17b      	cbz	r3, 1f0b8 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f098:	2301      	movs	r3, #1
   1f09a:	f04f 0864 	mov.w	r8, #100	; 0x64
   1f09e:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f0a0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1f0a4:	b92b      	cbnz	r3, 1f0b2 <nrfx_spim_uninit+0x66>
   1f0a6:	2001      	movs	r0, #1
   1f0a8:	f00a fe3e 	bl	29d28 <nrfx_busy_wait>
   1f0ac:	f1b8 0801 	subs.w	r8, r8, #1
   1f0b0:	d1f6      	bne.n	1f0a0 <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   1f0b2:	2200      	movs	r2, #0
   1f0b4:	19ab      	adds	r3, r5, r6
   1f0b6:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1f0b8:	2300      	movs	r3, #0
   1f0ba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1f0be:	19ab      	adds	r3, r5, r6
   1f0c0:	7f9b      	ldrb	r3, [r3, #30]
   1f0c2:	07db      	lsls	r3, r3, #31
   1f0c4:	d41b      	bmi.n	1f0fe <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   1f0c6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1f0ca:	f00a ff04 	bl	29ed6 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1f0ce:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1f0d2:	f00a ff00 	bl	29ed6 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1f0d6:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1f0da:	f00a fefc 	bl	29ed6 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1f0de:	793b      	ldrb	r3, [r7, #4]
   1f0e0:	b91b      	cbnz	r3, 1f0ea <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   1f0e2:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   1f0e6:	f00a fef6 	bl	29ed6 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1f0ea:	19ab      	adds	r3, r5, r6
   1f0ec:	7fd8      	ldrb	r0, [r3, #31]
   1f0ee:	28ff      	cmp	r0, #255	; 0xff
   1f0f0:	d005      	beq.n	1f0fe <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   1f0f2:	2300      	movs	r3, #0
   1f0f4:	2201      	movs	r2, #1
   1f0f6:	4619      	mov	r1, r3
   1f0f8:	9300      	str	r3, [sp, #0]
   1f0fa:	f00a fecd 	bl	29e98 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1f0fe:	2300      	movs	r3, #0
   1f100:	4435      	add	r5, r6
   1f102:	772b      	strb	r3, [r5, #28]
}
   1f104:	b002      	add	sp, #8
   1f106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f10a:	bf00      	nop
   1f10c:	20022ab4 	.word	0x20022ab4
   1f110:	00031bf5 	.word	0x00031bf5
   1f114:	0002d095 	.word	0x0002d095
   1f118:	00031bb9 	.word	0x00031bb9
   1f11c:	00080152 	.word	0x00080152

0001f120 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1f120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f124:	4e60      	ldr	r6, [pc, #384]	; (1f2a8 <nrfx_spim_xfer+0x188>)
   1f126:	7903      	ldrb	r3, [r0, #4]
{
   1f128:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f12a:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f12e:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   1f132:	4607      	mov	r7, r0
   1f134:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f136:	b95a      	cbnz	r2, 1f150 <nrfx_spim_xfer+0x30>
   1f138:	495c      	ldr	r1, [pc, #368]	; (1f2ac <nrfx_spim_xfer+0x18c>)
   1f13a:	f240 23de 	movw	r3, #734	; 0x2de
   1f13e:	4a5c      	ldr	r2, [pc, #368]	; (1f2b0 <nrfx_spim_xfer+0x190>)
   1f140:	485c      	ldr	r0, [pc, #368]	; (1f2b4 <nrfx_spim_xfer+0x194>)
   1f142:	f007 f88c 	bl	2625e <assert_print>
   1f146:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   1f14a:	4859      	ldr	r0, [pc, #356]	; (1f2b0 <nrfx_spim_xfer+0x190>)
   1f14c:	f007 f880 	bl	26250 <assert_post_action>
   1f150:	680a      	ldr	r2, [r1, #0]
   1f152:	b95a      	cbnz	r2, 1f16c <nrfx_spim_xfer+0x4c>
   1f154:	684a      	ldr	r2, [r1, #4]
   1f156:	b14a      	cbz	r2, 1f16c <nrfx_spim_xfer+0x4c>
   1f158:	4957      	ldr	r1, [pc, #348]	; (1f2b8 <nrfx_spim_xfer+0x198>)
   1f15a:	f240 23df 	movw	r3, #735	; 0x2df
   1f15e:	4a54      	ldr	r2, [pc, #336]	; (1f2b0 <nrfx_spim_xfer+0x190>)
   1f160:	4854      	ldr	r0, [pc, #336]	; (1f2b4 <nrfx_spim_xfer+0x194>)
   1f162:	f007 f87c 	bl	2625e <assert_print>
   1f166:	f240 21df 	movw	r1, #735	; 0x2df
   1f16a:	e7ee      	b.n	1f14a <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   1f16c:	68a2      	ldr	r2, [r4, #8]
   1f16e:	b96a      	cbnz	r2, 1f18c <nrfx_spim_xfer+0x6c>
   1f170:	68e2      	ldr	r2, [r4, #12]
   1f172:	2a00      	cmp	r2, #0
   1f174:	f000 8094 	beq.w	1f2a0 <nrfx_spim_xfer+0x180>
   1f178:	4950      	ldr	r1, [pc, #320]	; (1f2bc <nrfx_spim_xfer+0x19c>)
   1f17a:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   1f17e:	4a4c      	ldr	r2, [pc, #304]	; (1f2b0 <nrfx_spim_xfer+0x190>)
   1f180:	484c      	ldr	r0, [pc, #304]	; (1f2b4 <nrfx_spim_xfer+0x194>)
   1f182:	f007 f86c 	bl	2625e <assert_print>
   1f186:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   1f18a:	e7de      	b.n	1f14a <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1f18c:	b93b      	cbnz	r3, 1f19e <nrfx_spim_xfer+0x7e>
   1f18e:	68e3      	ldr	r3, [r4, #12]
   1f190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1f194:	d203      	bcs.n	1f19e <nrfx_spim_xfer+0x7e>
   1f196:	6863      	ldr	r3, [r4, #4]
   1f198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1f19c:	d309      	bcc.n	1f1b2 <nrfx_spim_xfer+0x92>
   1f19e:	4948      	ldr	r1, [pc, #288]	; (1f2c0 <nrfx_spim_xfer+0x1a0>)
   1f1a0:	f240 23e1 	movw	r3, #737	; 0x2e1
   1f1a4:	4a42      	ldr	r2, [pc, #264]	; (1f2b0 <nrfx_spim_xfer+0x190>)
   1f1a6:	4843      	ldr	r0, [pc, #268]	; (1f2b4 <nrfx_spim_xfer+0x194>)
   1f1a8:	f007 f859 	bl	2625e <assert_print>
   1f1ac:	f240 21e1 	movw	r1, #737	; 0x2e1
   1f1b0:	e7cb      	b.n	1f14a <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   1f1b2:	f015 0908 	ands.w	r9, r5, #8
   1f1b6:	d00f      	beq.n	1f1d8 <nrfx_spim_xfer+0xb8>
   1f1b8:	7fb3      	ldrb	r3, [r6, #30]
   1f1ba:	075b      	lsls	r3, r3, #29
   1f1bc:	d40c      	bmi.n	1f1d8 <nrfx_spim_xfer+0xb8>
   1f1be:	7ff3      	ldrb	r3, [r6, #31]
   1f1c0:	2bff      	cmp	r3, #255	; 0xff
   1f1c2:	d009      	beq.n	1f1d8 <nrfx_spim_xfer+0xb8>
   1f1c4:	493f      	ldr	r1, [pc, #252]	; (1f2c4 <nrfx_spim_xfer+0x1a4>)
   1f1c6:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   1f1ca:	4a39      	ldr	r2, [pc, #228]	; (1f2b0 <nrfx_spim_xfer+0x190>)
   1f1cc:	4839      	ldr	r0, [pc, #228]	; (1f2b4 <nrfx_spim_xfer+0x194>)
   1f1ce:	f007 f846 	bl	2625e <assert_print>
   1f1d2:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   1f1d6:	e7b8      	b.n	1f14a <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1f1d8:	7f73      	ldrb	r3, [r6, #29]
   1f1da:	2b00      	cmp	r3, #0
   1f1dc:	d15e      	bne.n	1f29c <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1f1de:	6833      	ldr	r3, [r6, #0]
   1f1e0:	b123      	cbz	r3, 1f1ec <nrfx_spim_xfer+0xcc>
   1f1e2:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1f1e6:	bf04      	itt	eq
   1f1e8:	2301      	moveq	r3, #1
   1f1ea:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1f1ec:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1f2c8 <nrfx_spim_xfer+0x1a8>
   1f1f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f1f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   1f1f8:	2101      	movs	r1, #1
   1f1fa:	4640      	mov	r0, r8
   1f1fc:	f00a fe3c 	bl	29e78 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1f200:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1f202:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1f204:	b121      	cbz	r1, 1f210 <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1f206:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   1f20a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1f20e:	d106      	bne.n	1f21e <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1f210:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1f212:	b14a      	cbz	r2, 1f228 <nrfx_spim_xfer+0x108>
   1f214:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1f218:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1f21c:	d004      	beq.n	1f228 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   1f21e:	2300      	movs	r3, #0
        return err_code;
   1f220:	482a      	ldr	r0, [pc, #168]	; (1f2cc <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   1f222:	7773      	strb	r3, [r6, #29]
}
   1f224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1f228:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f22a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f22e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1f232:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   1f236:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1f23a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f23e:	2200      	movs	r2, #0
   1f240:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1f244:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1f248:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1f24c:	bf18      	it	ne
   1f24e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1f250:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1f254:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1f258:	bf18      	it	ne
   1f25a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1f25c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   1f260:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1f262:	f1b9 0f00 	cmp.w	r9, #0
   1f266:	d006      	beq.n	1f276 <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   1f268:	b96a      	cbnz	r2, 1f286 <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   1f26a:	2100      	movs	r1, #0
   1f26c:	4640      	mov	r0, r8
   1f26e:	f00a fe03 	bl	29e78 <set_ss_pin_state>
    return err_code;
   1f272:	4817      	ldr	r0, [pc, #92]	; (1f2d0 <nrfx_spim_xfer+0x1b0>)
   1f274:	e7d6      	b.n	1f224 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f276:	2101      	movs	r1, #1
   1f278:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   1f27a:	b922      	cbnz	r2, 1f286 <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f27c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1f280:	2a00      	cmp	r2, #0
   1f282:	d0fb      	beq.n	1f27c <nrfx_spim_xfer+0x15c>
   1f284:	e7f1      	b.n	1f26a <nrfx_spim_xfer+0x14a>
    if (!enable)
   1f286:	f015 0f04 	tst.w	r5, #4
   1f28a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f28e:	d002      	beq.n	1f296 <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   1f290:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f294:	e7ed      	b.n	1f272 <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   1f296:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f29a:	e7ea      	b.n	1f272 <nrfx_spim_xfer+0x152>
        return err_code;
   1f29c:	480d      	ldr	r0, [pc, #52]	; (1f2d4 <nrfx_spim_xfer+0x1b4>)
   1f29e:	e7c1      	b.n	1f224 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1f2a0:	2b00      	cmp	r3, #0
   1f2a2:	f43f af78 	beq.w	1f196 <nrfx_spim_xfer+0x76>
   1f2a6:	e77a      	b.n	1f19e <nrfx_spim_xfer+0x7e>
   1f2a8:	20022ab4 	.word	0x20022ab4
   1f2ac:	00031bf5 	.word	0x00031bf5
   1f2b0:	00031bb9 	.word	0x00031bb9
   1f2b4:	0002d095 	.word	0x0002d095
   1f2b8:	00031c21 	.word	0x00031c21
   1f2bc:	00031c68 	.word	0x00031c68
   1f2c0:	00031caf 	.word	0x00031caf
   1f2c4:	00031d53 	.word	0x00031d53
   1f2c8:	20022ac0 	.word	0x20022ac0
   1f2cc:	0bad000a 	.word	0x0bad000a
   1f2d0:	0bad0000 	.word	0x0bad0000
   1f2d4:	0bad000b 	.word	0x0bad000b

0001f2d8 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   1f2d8:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f2da:	4b13      	ldr	r3, [pc, #76]	; (1f328 <nrfx_spim_4_irq_handler+0x50>)
   1f2dc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1f2e0:	b302      	cbz	r2, 1f324 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f2e2:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   1f2e4:	4c11      	ldr	r4, [pc, #68]	; (1f32c <nrfx_spim_4_irq_handler+0x54>)
   1f2e6:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   1f2ea:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1f2ee:	6823      	ldr	r3, [r4, #0]
   1f2f0:	b95b      	cbnz	r3, 1f30a <nrfx_spim_4_irq_handler+0x32>
   1f2f2:	490f      	ldr	r1, [pc, #60]	; (1f330 <nrfx_spim_4_irq_handler+0x58>)
   1f2f4:	480f      	ldr	r0, [pc, #60]	; (1f334 <nrfx_spim_4_irq_handler+0x5c>)
   1f2f6:	f240 333b 	movw	r3, #827	; 0x33b
   1f2fa:	4a0f      	ldr	r2, [pc, #60]	; (1f338 <nrfx_spim_4_irq_handler+0x60>)
   1f2fc:	f006 ffaf 	bl	2625e <assert_print>
   1f300:	f240 313b 	movw	r1, #827	; 0x33b
   1f304:	480c      	ldr	r0, [pc, #48]	; (1f338 <nrfx_spim_4_irq_handler+0x60>)
   1f306:	f006 ffa3 	bl	26250 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   1f30a:	4629      	mov	r1, r5
   1f30c:	4620      	mov	r0, r4
   1f30e:	f00a fdb3 	bl	29e78 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f312:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   1f316:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1f318:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f31a:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   1f31e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f322:	4718      	bx	r3
}
   1f324:	bd70      	pop	{r4, r5, r6, pc}
   1f326:	bf00      	nop
   1f328:	4000a000 	.word	0x4000a000
   1f32c:	20022ab4 	.word	0x20022ab4
   1f330:	00031d96 	.word	0x00031d96
   1f334:	0002d095 	.word	0x0002d095
   1f338:	00031bb9 	.word	0x00031bb9

0001f33c <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   1f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f340:	460e      	mov	r6, r1
   1f342:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1f344:	4d0c      	ldr	r5, [pc, #48]	; (1f378 <metal_generic_dev_open+0x3c>)
   1f346:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1f34a:	42ac      	cmp	r4, r5
   1f34c:	d103      	bne.n	1f356 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1f34e:	f06f 0012 	mvn.w	r0, #18
   1f352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1f356:	4631      	mov	r1, r6
   1f358:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   1f35c:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1f360:	f7ea f849 	bl	93f6 <strcmp>
   1f364:	b930      	cbnz	r0, 1f374 <metal_generic_dev_open+0x38>
			*device = dev;
   1f366:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   1f36a:	4640      	mov	r0, r8
}
   1f36c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1f370:	f00a beb6 	b.w	2a0e0 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1f374:	6824      	ldr	r4, [r4, #0]
   1f376:	e7e8      	b.n	1f34a <metal_generic_dev_open+0xe>
   1f378:	20022ad4 	.word	0x20022ad4

0001f37c <metal_bus_unregister>:
{
   1f37c:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1f37e:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1f382:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1f384:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   1f386:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1f38a:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1f38c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   1f390:	6843      	ldr	r3, [r0, #4]
{
   1f392:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   1f394:	b103      	cbz	r3, 1f398 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   1f396:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   1f398:	4b05      	ldr	r3, [pc, #20]	; (1f3b0 <metal_bus_unregister+0x34>)
   1f39a:	781a      	ldrb	r2, [r3, #0]
   1f39c:	2a06      	cmp	r2, #6
   1f39e:	d905      	bls.n	1f3ac <metal_bus_unregister+0x30>
   1f3a0:	685b      	ldr	r3, [r3, #4]
   1f3a2:	b11b      	cbz	r3, 1f3ac <metal_bus_unregister+0x30>
   1f3a4:	2007      	movs	r0, #7
   1f3a6:	6822      	ldr	r2, [r4, #0]
   1f3a8:	4902      	ldr	r1, [pc, #8]	; (1f3b4 <metal_bus_unregister+0x38>)
   1f3aa:	4798      	blx	r3
}
   1f3ac:	2000      	movs	r0, #0
   1f3ae:	bd10      	pop	{r4, pc}
   1f3b0:	20022ad4 	.word	0x20022ad4
   1f3b4:	00031db9 	.word	0x00031db9

0001f3b8 <metal_bus_find>:
{
   1f3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3bc:	4607      	mov	r7, r0
   1f3be:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1f3c0:	4e0b      	ldr	r6, [pc, #44]	; (1f3f0 <metal_bus_find+0x38>)
   1f3c2:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1f3c6:	42b4      	cmp	r4, r6
   1f3c8:	d102      	bne.n	1f3d0 <metal_bus_find+0x18>
	return -ENOENT;
   1f3ca:	f06f 0001 	mvn.w	r0, #1
   1f3ce:	e00a      	b.n	1f3e6 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1f3d0:	4639      	mov	r1, r7
   1f3d2:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1f3d6:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1f3da:	f7ea f80c 	bl	93f6 <strcmp>
   1f3de:	b920      	cbnz	r0, 1f3ea <metal_bus_find+0x32>
   1f3e0:	b11d      	cbz	r5, 1f3ea <metal_bus_find+0x32>
			*result = bus;
   1f3e2:	f8c5 8000 	str.w	r8, [r5]
}
   1f3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1f3ea:	6824      	ldr	r4, [r4, #0]
   1f3ec:	e7eb      	b.n	1f3c6 <metal_bus_find+0xe>
   1f3ee:	bf00      	nop
   1f3f0:	20022ad4 	.word	0x20022ad4

0001f3f4 <metal_bus_register>:
{
   1f3f4:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1f3f6:	4604      	mov	r4, r0
   1f3f8:	b910      	cbnz	r0, 1f400 <metal_bus_register+0xc>
		return -EINVAL;
   1f3fa:	f06f 0015 	mvn.w	r0, #21
}
   1f3fe:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   1f400:	6800      	ldr	r0, [r0, #0]
   1f402:	2800      	cmp	r0, #0
   1f404:	d0f9      	beq.n	1f3fa <metal_bus_register+0x6>
   1f406:	f7ea f800 	bl	940a <strlen>
   1f40a:	2800      	cmp	r0, #0
   1f40c:	d0f5      	beq.n	1f3fa <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1f40e:	2100      	movs	r1, #0
   1f410:	6820      	ldr	r0, [r4, #0]
   1f412:	f7ff ffd1 	bl	1f3b8 <metal_bus_find>
   1f416:	b1c8      	cbz	r0, 1f44c <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   1f418:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   1f41c:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   1f420:	4b0c      	ldr	r3, [pc, #48]	; (1f454 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1f422:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1f426:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   1f428:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   1f42c:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1f42e:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1f430:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1f432:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1f434:	781a      	ldrb	r2, [r3, #0]
   1f436:	2a06      	cmp	r2, #6
   1f438:	d901      	bls.n	1f43e <metal_bus_register+0x4a>
   1f43a:	685b      	ldr	r3, [r3, #4]
   1f43c:	b90b      	cbnz	r3, 1f442 <metal_bus_register+0x4e>
	return 0;
   1f43e:	2000      	movs	r0, #0
   1f440:	e7dd      	b.n	1f3fe <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1f442:	2007      	movs	r0, #7
   1f444:	6822      	ldr	r2, [r4, #0]
   1f446:	4904      	ldr	r1, [pc, #16]	; (1f458 <metal_bus_register+0x64>)
   1f448:	4798      	blx	r3
   1f44a:	e7f8      	b.n	1f43e <metal_bus_register+0x4a>
		return -EEXIST;
   1f44c:	f06f 0010 	mvn.w	r0, #16
   1f450:	e7d5      	b.n	1f3fe <metal_bus_register+0xa>
   1f452:	bf00      	nop
   1f454:	20022ad4 	.word	0x20022ad4
   1f458:	00031dbb 	.word	0x00031dbb

0001f45c <metal_device_close>:
	metal_assert(device && device->bus);
   1f45c:	4601      	mov	r1, r0
{
   1f45e:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   1f460:	b108      	cbz	r0, 1f466 <metal_device_close+0xa>
   1f462:	6840      	ldr	r0, [r0, #4]
   1f464:	b948      	cbnz	r0, 1f47a <metal_device_close+0x1e>
   1f466:	4908      	ldr	r1, [pc, #32]	; (1f488 <metal_device_close+0x2c>)
   1f468:	4808      	ldr	r0, [pc, #32]	; (1f48c <metal_device_close+0x30>)
   1f46a:	2351      	movs	r3, #81	; 0x51
   1f46c:	4a08      	ldr	r2, [pc, #32]	; (1f490 <metal_device_close+0x34>)
   1f46e:	f006 fef6 	bl	2625e <assert_print>
   1f472:	2151      	movs	r1, #81	; 0x51
   1f474:	4806      	ldr	r0, [pc, #24]	; (1f490 <metal_device_close+0x34>)
   1f476:	f006 feeb 	bl	26250 <assert_post_action>
	if (device->bus->ops.dev_close)
   1f47a:	68c3      	ldr	r3, [r0, #12]
   1f47c:	b113      	cbz	r3, 1f484 <metal_device_close+0x28>
}
   1f47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   1f482:	4718      	bx	r3
}
   1f484:	bd10      	pop	{r4, pc}
   1f486:	bf00      	nop
   1f488:	00031e05 	.word	0x00031e05
   1f48c:	0002d095 	.word	0x0002d095
   1f490:	00031dce 	.word	0x00031dce

0001f494 <metal_register_generic_device>:
{
   1f494:	b510      	push	{r4, lr}
   1f496:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1f498:	6800      	ldr	r0, [r0, #0]
   1f49a:	b910      	cbnz	r0, 1f4a2 <metal_register_generic_device+0xe>
		return -EINVAL;
   1f49c:	f06f 0015 	mvn.w	r0, #21
}
   1f4a0:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   1f4a2:	f7e9 ffb2 	bl	940a <strlen>
   1f4a6:	2800      	cmp	r0, #0
   1f4a8:	d0f8      	beq.n	1f49c <metal_register_generic_device+0x8>
   1f4aa:	68a3      	ldr	r3, [r4, #8]
   1f4ac:	2b01      	cmp	r3, #1
   1f4ae:	d8f5      	bhi.n	1f49c <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   1f4b0:	4b06      	ldr	r3, [pc, #24]	; (1f4cc <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1f4b2:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1f4b6:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1f4b8:	4b05      	ldr	r3, [pc, #20]	; (1f4d0 <metal_register_generic_device+0x3c>)
   1f4ba:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   1f4bc:	f103 0018 	add.w	r0, r3, #24
   1f4c0:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   1f4c2:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   1f4c4:	61d9      	str	r1, [r3, #28]
	return 0;
   1f4c6:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1f4c8:	6011      	str	r1, [r2, #0]
}
   1f4ca:	e7e9      	b.n	1f4a0 <metal_register_generic_device+0xc>
   1f4cc:	20008708 	.word	0x20008708
   1f4d0:	20022ad4 	.word	0x20022ad4

0001f4d4 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1f4d4:	4b0e      	ldr	r3, [pc, #56]	; (1f510 <metal_init+0x3c>)
{
   1f4d6:	b510      	push	{r4, lr}
   1f4d8:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   1f4da:	2220      	movs	r2, #32
   1f4dc:	2100      	movs	r1, #0
   1f4de:	4618      	mov	r0, r3
   1f4e0:	f00b fc60 	bl	2ada4 <memset>

	_metal.common.log_handler   = params->log_handler;
   1f4e4:	6822      	ldr	r2, [r4, #0]
   1f4e6:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   1f4e8:	4602      	mov	r2, r0
   1f4ea:	7921      	ldrb	r1, [r4, #4]
   1f4ec:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   1f4f0:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   1f4f4:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   1f4f8:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   1f4fc:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   1f500:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1f504:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   1f506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   1f50a:	f000 b80f 	b.w	1f52c <metal_sys_init>
   1f50e:	bf00      	nop
   1f510:	20022ad4 	.word	0x20022ad4

0001f514 <metal_finish>:

void metal_finish(void)
{
   1f514:	b508      	push	{r3, lr}
	metal_sys_finish();
   1f516:	f000 f811 	bl	1f53c <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   1f51a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   1f51e:	2220      	movs	r2, #32
   1f520:	2100      	movs	r1, #0
   1f522:	4801      	ldr	r0, [pc, #4]	; (1f528 <metal_finish+0x14>)
   1f524:	f00b bc3e 	b.w	2ada4 <memset>
   1f528:	20022ad4 	.word	0x20022ad4

0001f52c <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   1f52c:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1f52e:	4802      	ldr	r0, [pc, #8]	; (1f538 <metal_sys_init+0xc>)
   1f530:	f7ff ff60 	bl	1f3f4 <metal_bus_register>
	return 0;
}
   1f534:	2000      	movs	r0, #0
   1f536:	bd08      	pop	{r3, pc}
   1f538:	20008708 	.word	0x20008708

0001f53c <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   1f53c:	4801      	ldr	r0, [pc, #4]	; (1f544 <metal_sys_finish+0x8>)
   1f53e:	f7ff bf1d 	b.w	1f37c <metal_bus_unregister>
   1f542:	bf00      	nop
   1f544:	20008708 	.word	0x20008708

0001f548 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1f548:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1f54a:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   1f54c:	2b06      	cmp	r3, #6
{
   1f54e:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   1f550:	bf88      	it	hi
   1f552:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   1f554:	4b09      	ldr	r3, [pc, #36]	; (1f57c <metal_zephyr_log_handler+0x34>)
{
   1f556:	ac05      	add	r4, sp, #20
   1f558:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   1f55c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1f560:	4807      	ldr	r0, [pc, #28]	; (1f580 <metal_zephyr_log_handler+0x38>)
   1f562:	f006 fcba 	bl	25eda <printk>

	va_start(args, format);
	vprintk(format, args);
   1f566:	4621      	mov	r1, r4
   1f568:	4628      	mov	r0, r5
	va_start(args, format);
   1f56a:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   1f56c:	f7ee fad2 	bl	db14 <vprintk>
	va_end(args);
}
   1f570:	b002      	add	sp, #8
   1f572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1f576:	b003      	add	sp, #12
   1f578:	4770      	bx	lr
   1f57a:	bf00      	nop
   1f57c:	0002cf1c 	.word	0x0002cf1c
   1f580:	0002d292 	.word	0x0002d292

0001f584 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   1f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f588:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   1f58a:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1f58c:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   1f58e:	4293      	cmp	r3, r2
{
   1f590:	4617      	mov	r7, r2
   1f592:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   1f594:	d341      	bcc.n	1f61a <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1f596:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   1f598:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   1f59c:	42bd      	cmp	r5, r7
   1f59e:	d103      	bne.n	1f5a8 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1f5a0:	2000      	movs	r0, #0
}
   1f5a2:	b007      	add	sp, #28
   1f5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1f5a8:	fb0b f805 	mul.w	r8, fp, r5
   1f5ac:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1f5b0:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   1f5b2:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1f5b6:	1d23      	adds	r3, r4, #4
   1f5b8:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1f5ba:	b9ca      	cbnz	r2, 1f5f0 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   1f5bc:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1f5be:	6861      	ldr	r1, [r4, #4]
   1f5c0:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   1f5c2:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1f5c6:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   1f5c8:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1f5ca:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   1f5ce:	1e5c      	subs	r4, r3, #1
   1f5d0:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   1f5d4:	425b      	negs	r3, r3
   1f5d6:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   1f5da:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   1f5dc:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   1f5e0:	6884      	ldr	r4, [r0, #8]
   1f5e2:	3306      	adds	r3, #6
   1f5e4:	42a1      	cmp	r1, r4
   1f5e6:	bf28      	it	cs
   1f5e8:	f04f 31ff 	movcs.w	r1, #4294967295
   1f5ec:	f00a fd44 	bl	2a078 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1f5f0:	f859 3008 	ldr.w	r3, [r9, r8]
   1f5f4:	4630      	mov	r0, r6
   1f5f6:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   1f5f8:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1f5fa:	b2a9      	uxth	r1, r5
   1f5fc:	6a1b      	ldr	r3, [r3, #32]
   1f5fe:	9301      	str	r3, [sp, #4]
   1f600:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f602:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1f606:	9300      	str	r3, [sp, #0]
   1f608:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   1f60c:	9b05      	ldr	r3, [sp, #20]
   1f60e:	f00a fdac 	bl	2a16a <virtqueue_create>
		if (ret)
   1f612:	2800      	cmp	r0, #0
   1f614:	d1c5      	bne.n	1f5a2 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1f616:	3501      	adds	r5, #1
   1f618:	e7c0      	b.n	1f59c <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1f61a:	4801      	ldr	r0, [pc, #4]	; (1f620 <virtio_create_virtqueues+0x9c>)
   1f61c:	e7c1      	b.n	1f5a2 <virtio_create_virtqueues+0x1e>
   1f61e:	bf00      	nop
   1f620:	fffff440 	.word	0xfffff440

0001f624 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   1f624:	b510      	push	{r4, lr}
	if (vq) {
   1f626:	4604      	mov	r4, r0
   1f628:	b190      	cbz	r0, 1f650 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   1f62a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1f62c:	8943      	ldrh	r3, [r0, #10]
   1f62e:	429a      	cmp	r2, r3
   1f630:	d009      	beq.n	1f646 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   1f632:	4b08      	ldr	r3, [pc, #32]	; (1f654 <virtqueue_free+0x30>)
   1f634:	781a      	ldrb	r2, [r3, #0]
   1f636:	2a03      	cmp	r2, #3
   1f638:	d905      	bls.n	1f646 <virtqueue_free+0x22>
   1f63a:	685b      	ldr	r3, [r3, #4]
   1f63c:	b11b      	cbz	r3, 1f646 <virtqueue_free+0x22>
   1f63e:	6842      	ldr	r2, [r0, #4]
   1f640:	4905      	ldr	r1, [pc, #20]	; (1f658 <virtqueue_free+0x34>)
   1f642:	2004      	movs	r0, #4
   1f644:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1f646:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   1f648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f64c:	f00b bb51 	b.w	2acf2 <k_free>
   1f650:	bd10      	pop	{r4, pc}
   1f652:	bf00      	nop
   1f654:	20022ad4 	.word	0x20022ad4
   1f658:	00031eb3 	.word	0x00031eb3

0001f65c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   1f65c:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   1f65e:	8944      	ldrh	r4, [r0, #10]
   1f660:	428c      	cmp	r4, r1
   1f662:	d912      	bls.n	1f68a <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   1f664:	6a03      	ldr	r3, [r0, #32]
   1f666:	3c01      	subs	r4, #1
   1f668:	885d      	ldrh	r5, [r3, #2]
   1f66a:	402c      	ands	r4, r5
   1f66c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   1f670:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   1f672:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1f674:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1f678:	6a02      	ldr	r2, [r0, #32]
   1f67a:	8853      	ldrh	r3, [r2, #2]
   1f67c:	3301      	adds	r3, #1
   1f67e:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1f680:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1f682:	3301      	adds	r3, #1
   1f684:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1f686:	2000      	movs	r0, #0
}
   1f688:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1f68a:	4801      	ldr	r0, [pc, #4]	; (1f690 <virtqueue_add_consumed_buffer+0x34>)
   1f68c:	e7fc      	b.n	1f688 <virtqueue_add_consumed_buffer+0x2c>
   1f68e:	bf00      	nop
   1f690:	fffff441 	.word	0xfffff441

0001f694 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   1f694:	b470      	push	{r4, r5, r6}
   1f696:	9e03      	ldr	r6, [sp, #12]
   1f698:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1f69a:	b158      	cbz	r0, 1f6b4 <rpmsg_send_offchannel_raw+0x20>
   1f69c:	6a00      	ldr	r0, [r0, #32]
   1f69e:	b148      	cbz	r0, 1f6b4 <rpmsg_send_offchannel_raw+0x20>
   1f6a0:	b143      	cbz	r3, 1f6b4 <rpmsg_send_offchannel_raw+0x20>
   1f6a2:	3401      	adds	r4, #1
   1f6a4:	d006      	beq.n	1f6b4 <rpmsg_send_offchannel_raw+0x20>
   1f6a6:	2e00      	cmp	r6, #0
   1f6a8:	db04      	blt.n	1f6b4 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   1f6aa:	6f84      	ldr	r4, [r0, #120]	; 0x78
   1f6ac:	b114      	cbz	r4, 1f6b4 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1f6ae:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   1f6b0:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1f6b2:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1f6b4:	4801      	ldr	r0, [pc, #4]	; (1f6bc <rpmsg_send_offchannel_raw+0x28>)
}
   1f6b6:	bc70      	pop	{r4, r5, r6}
   1f6b8:	4770      	bx	lr
   1f6ba:	bf00      	nop
   1f6bc:	fffff82d 	.word	0xfffff82d

0001f6c0 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   1f6c0:	b470      	push	{r4, r5, r6}
   1f6c2:	9e03      	ldr	r6, [sp, #12]
   1f6c4:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1f6c6:	b160      	cbz	r0, 1f6e2 <rpmsg_send_offchannel_nocopy+0x22>
   1f6c8:	6a00      	ldr	r0, [r0, #32]
   1f6ca:	b150      	cbz	r0, 1f6e2 <rpmsg_send_offchannel_nocopy+0x22>
   1f6cc:	b14b      	cbz	r3, 1f6e2 <rpmsg_send_offchannel_nocopy+0x22>
   1f6ce:	3401      	adds	r4, #1
   1f6d0:	d007      	beq.n	1f6e2 <rpmsg_send_offchannel_nocopy+0x22>
   1f6d2:	2e00      	cmp	r6, #0
   1f6d4:	db05      	blt.n	1f6e2 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   1f6d6:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   1f6da:	b114      	cbz	r4, 1f6e2 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1f6dc:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   1f6de:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1f6e0:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1f6e2:	4801      	ldr	r0, [pc, #4]	; (1f6e8 <rpmsg_send_offchannel_nocopy+0x28>)
}
   1f6e4:	bc70      	pop	{r4, r5, r6}
   1f6e6:	4770      	bx	lr
   1f6e8:	fffff82d 	.word	0xfffff82d

0001f6ec <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   1f6ec:	b570      	push	{r4, r5, r6, lr}
   1f6ee:	460c      	mov	r4, r1
   1f6f0:	4611      	mov	r1, r2
   1f6f2:	4605      	mov	r5, r0
   1f6f4:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1f6f6:	4b0c      	ldr	r3, [pc, #48]	; (1f728 <rpmsg_register_endpoint+0x3c>)
   1f6f8:	2220      	movs	r2, #32
   1f6fa:	2900      	cmp	r1, #0
   1f6fc:	bf08      	it	eq
   1f6fe:	4619      	moveq	r1, r3
   1f700:	4620      	mov	r0, r4
   1f702:	f00b fc9e 	bl	2b042 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   1f706:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   1f708:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   1f70a:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   1f70c:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   1f70e:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   1f710:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1f712:	9b06      	ldr	r3, [sp, #24]
   1f714:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   1f716:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1f718:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   1f71c:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   1f720:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1f722:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1f724:	6013      	str	r3, [r2, #0]
}
   1f726:	bd70      	pop	{r4, r5, r6, pc}
   1f728:	00030d21 	.word	0x00030d21

0001f72c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1f72c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1f730:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   1f734:	460d      	mov	r5, r1
   1f736:	4692      	mov	sl, r2
   1f738:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   1f73a:	4606      	mov	r6, r0
   1f73c:	2800      	cmp	r0, #0
   1f73e:	d06c      	beq.n	1f81a <rpmsg_create_ept+0xee>
   1f740:	2900      	cmp	r1, #0
   1f742:	d06a      	beq.n	1f81a <rpmsg_create_ept+0xee>
   1f744:	f1b9 0f00 	cmp.w	r9, #0
   1f748:	d067      	beq.n	1f81a <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1f74a:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1f74e:	4640      	mov	r0, r8
   1f750:	f00a fe74 	bl	2a43c <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   1f754:	1c78      	adds	r0, r7, #1
   1f756:	d140      	bne.n	1f7da <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1f758:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1f75a:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1f75e:	f014 0401 	ands.w	r4, r4, #1
   1f762:	d00b      	beq.n	1f77c <rpmsg_create_ept+0x50>
	for (bit = start;
   1f764:	2400      	movs	r4, #0
	     bit++)
   1f766:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1f768:	2c80      	cmp	r4, #128	; 0x80
   1f76a:	d054      	beq.n	1f816 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1f76c:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1f76e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1f772:	f004 011f 	and.w	r1, r4, #31
   1f776:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1f778:	07d1      	lsls	r1, r2, #31
   1f77a:	d4f4      	bmi.n	1f766 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1f77c:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1f77e:	0960      	lsrs	r0, r4, #5
   1f780:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1f784:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1f788:	f004 041f 	and.w	r4, r4, #31
   1f78c:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1f78e:	430a      	orrs	r2, r1
   1f790:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   1f794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f796:	4652      	mov	r2, sl
   1f798:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1f79c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f79e:	4631      	mov	r1, r6
   1f7a0:	9300      	str	r3, [sp, #0]
   1f7a2:	4628      	mov	r0, r5
   1f7a4:	463b      	mov	r3, r7
   1f7a6:	f7ff ffa1 	bl	1f6ec <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1f7aa:	4640      	mov	r0, r8
   1f7ac:	f001 fa9c 	bl	20ce8 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   1f7b0:	7834      	ldrb	r4, [r6, #0]
   1f7b2:	b174      	cbz	r4, 1f7d2 <rpmsg_create_ept+0xa6>
   1f7b4:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   1f7b8:	b15c      	cbz	r4, 1f7d2 <rpmsg_create_ept+0xa6>
   1f7ba:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1f7bc:	3301      	adds	r3, #1
   1f7be:	d12e      	bne.n	1f81e <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1f7c0:	2100      	movs	r1, #0
   1f7c2:	4630      	mov	r0, r6
   1f7c4:	f00a fe69 	bl	2a49a <rpmsg_send_ns_message>

	if (status)
   1f7c8:	4604      	mov	r4, r0
   1f7ca:	b110      	cbz	r0, 1f7d2 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   1f7cc:	4630      	mov	r0, r6
   1f7ce:	f00a fe3b 	bl	2a448 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1f7d2:	4620      	mov	r0, r4
   1f7d4:	b004      	add	sp, #16
   1f7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   1f7da:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   1f7de:	d3d9      	bcc.n	1f794 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1f7e0:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1f7e4:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1f7e6:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   1f7ea:	d80f      	bhi.n	1f80c <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1f7ec:	0958      	lsrs	r0, r3, #5
   1f7ee:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1f7f2:	f003 031f 	and.w	r3, r3, #31
   1f7f6:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   1f7fa:	07d2      	lsls	r2, r2, #31
   1f7fc:	d40b      	bmi.n	1f816 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1f7fe:	2201      	movs	r2, #1
   1f800:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1f804:	4323      	orrs	r3, r4
   1f806:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   1f80a:	e7c3      	b.n	1f794 <rpmsg_create_ept+0x68>
   1f80c:	4c05      	ldr	r4, [pc, #20]	; (1f824 <rpmsg_create_ept+0xf8>)
   1f80e:	4640      	mov	r0, r8
   1f810:	f001 fa6a 	bl	20ce8 <z_impl_k_sem_give>
}
   1f814:	e7dd      	b.n	1f7d2 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   1f816:	4c04      	ldr	r4, [pc, #16]	; (1f828 <rpmsg_create_ept+0xfc>)
   1f818:	e7f9      	b.n	1f80e <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   1f81a:	4c02      	ldr	r4, [pc, #8]	; (1f824 <rpmsg_create_ept+0xf8>)
   1f81c:	e7d9      	b.n	1f7d2 <rpmsg_create_ept+0xa6>
   1f81e:	2400      	movs	r4, #0
   1f820:	e7d7      	b.n	1f7d2 <rpmsg_create_ept+0xa6>
   1f822:	bf00      	nop
   1f824:	fffff82d 	.word	0xfffff82d
   1f828:	fffff829 	.word	0xfffff829

0001f82c <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   1f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   1f830:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   1f834:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   1f838:	2300      	movs	r3, #0
{
   1f83a:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1f83c:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1f83e:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1f842:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1f844:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1f848:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1f84a:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   1f84c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   1f850:	f8ad 501c 	strh.w	r5, [sp, #28]
   1f854:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1f856:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1f858:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1f85c:	42b1      	cmp	r1, r6
   1f85e:	bf28      	it	cs
   1f860:	f04f 31ff 	movcs.w	r1, #4294967295
   1f864:	eb0d 0203 	add.w	r2, sp, r3
   1f868:	f00a fbcc 	bl	2a004 <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1f86c:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   1f86e:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1f870:	d00b      	beq.n	1f88a <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   1f872:	4924      	ldr	r1, [pc, #144]	; (1f904 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   1f874:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1f878:	4a23      	ldr	r2, [pc, #140]	; (1f908 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1f87a:	4824      	ldr	r0, [pc, #144]	; (1f90c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1f87c:	f006 fcef 	bl	2625e <assert_print>
   1f880:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1f884:	4820      	ldr	r0, [pc, #128]	; (1f908 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1f886:	f006 fce3 	bl	26250 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   1f88a:	f104 0658 	add.w	r6, r4, #88	; 0x58
   1f88e:	4630      	mov	r0, r6
   1f890:	f00a fe93 	bl	2a5ba <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   1f894:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1f898:	699b      	ldr	r3, [r3, #24]
   1f89a:	b9d3      	cbnz	r3, 1f8d2 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   1f89c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1f8a0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1f8a4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1f8a8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1f8aa:	b9cb      	cbnz	r3, 1f8e0 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   1f8ac:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1f8b0:	f8cd 8000 	str.w	r8, [sp]
   1f8b4:	2201      	movs	r2, #1
   1f8b6:	a902      	add	r1, sp, #8
   1f8b8:	f00a fc84 	bl	2a1c4 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1f8bc:	b1b0      	cbz	r0, 1f8ec <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   1f8be:	4914      	ldr	r1, [pc, #80]	; (1f910 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   1f8c0:	f240 13b9 	movw	r3, #441	; 0x1b9
   1f8c4:	4a10      	ldr	r2, [pc, #64]	; (1f908 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1f8c6:	4811      	ldr	r0, [pc, #68]	; (1f90c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1f8c8:	f006 fcc9 	bl	2625e <assert_print>
   1f8cc:	f240 11b9 	movw	r1, #441	; 0x1b9
   1f8d0:	e7d8      	b.n	1f884 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1f8d2:	4639      	mov	r1, r7
   1f8d4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1f8d8:	f00a fd0a 	bl	2a2f0 <virtqueue_get_buffer_length>
   1f8dc:	4602      	mov	r2, r0
   1f8de:	e7df      	b.n	1f8a0 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   1f8e0:	2b01      	cmp	r3, #1
   1f8e2:	d103      	bne.n	1f8ec <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1f8e4:	4639      	mov	r1, r7
   1f8e6:	f7ff feb9 	bl	1f65c <virtqueue_add_consumed_buffer>
   1f8ea:	e7e7      	b.n	1f8bc <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   1f8ec:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1f8f0:	f00a fd55 	bl	2a39e <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   1f8f4:	4630      	mov	r0, r6
   1f8f6:	f00a fe5e 	bl	2a5b6 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   1f8fa:	4628      	mov	r0, r5
   1f8fc:	b008      	add	sp, #32
   1f8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f902:	bf00      	nop
   1f904:	00031f18 	.word	0x00031f18
   1f908:	00031ed5 	.word	0x00031ed5
   1f90c:	0002d095 	.word	0x0002d095
   1f910:	00031f31 	.word	0x00031f31

0001f914 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   1f914:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1f918:	6803      	ldr	r3, [r0, #0]
   1f91a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   1f91c:	f107 0658 	add.w	r6, r7, #88	; 0x58
   1f920:	4630      	mov	r0, r6
   1f922:	f00a fe4a 	bl	2a5ba <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1f926:	4638      	mov	r0, r7
   1f928:	f10d 020a 	add.w	r2, sp, #10
   1f92c:	a903      	add	r1, sp, #12
   1f92e:	f00a feb7 	bl	2a6a0 <rpmsg_virtio_get_rx_buffer>
   1f932:	4604      	mov	r4, r0
   1f934:	4630      	mov	r0, r6
   1f936:	f00a fe3e 	bl	2a5b6 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   1f93a:	2c00      	cmp	r4, #0
   1f93c:	d04f      	beq.n	1f9de <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   1f93e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1f942:	4630      	mov	r0, r6
   1f944:	60a3      	str	r3, [r4, #8]
   1f946:	f00a fe38 	bl	2a5ba <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1f94a:	f04f 33ff 	mov.w	r3, #4294967295
   1f94e:	2100      	movs	r1, #0
   1f950:	4638      	mov	r0, r7
   1f952:	6862      	ldr	r2, [r4, #4]
   1f954:	f00a fdd5 	bl	2a502 <rpmsg_get_endpoint>
   1f958:	4605      	mov	r5, r0
   1f95a:	4630      	mov	r0, r6
   1f95c:	f00a fe2b 	bl	2a5b6 <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   1f960:	b1ed      	cbz	r5, 1f99e <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1f962:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1f964:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1f966:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1f968:	bf08      	it	eq
   1f96a:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1f96c:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   1f96e:	bf08      	it	eq
   1f970:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1f972:	6823      	ldr	r3, [r4, #0]
   1f974:	89a2      	ldrh	r2, [r4, #12]
   1f976:	9100      	str	r1, [sp, #0]
   1f978:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1f97c:	f104 0110 	add.w	r1, r4, #16
   1f980:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   1f982:	2800      	cmp	r0, #0
   1f984:	da0b      	bge.n	1f99e <rpmsg_virtio_rx_callback+0x8a>
   1f986:	4917      	ldr	r1, [pc, #92]	; (1f9e4 <rpmsg_virtio_rx_callback+0xd0>)
   1f988:	4817      	ldr	r0, [pc, #92]	; (1f9e8 <rpmsg_virtio_rx_callback+0xd4>)
   1f98a:	f240 2343 	movw	r3, #579	; 0x243
   1f98e:	4a17      	ldr	r2, [pc, #92]	; (1f9ec <rpmsg_virtio_rx_callback+0xd8>)
   1f990:	f006 fc65 	bl	2625e <assert_print>
   1f994:	f240 2143 	movw	r1, #579	; 0x243
   1f998:	4814      	ldr	r0, [pc, #80]	; (1f9ec <rpmsg_virtio_rx_callback+0xd8>)
   1f99a:	f006 fc59 	bl	26250 <assert_post_action>
   1f99e:	4630      	mov	r0, r6
   1f9a0:	f00a fe0b 	bl	2a5ba <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1f9a4:	68a3      	ldr	r3, [r4, #8]
   1f9a6:	2b00      	cmp	r3, #0
   1f9a8:	db06      	blt.n	1f9b8 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1f9aa:	4621      	mov	r1, r4
   1f9ac:	4638      	mov	r0, r7
   1f9ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1f9b2:	9a03      	ldr	r2, [sp, #12]
   1f9b4:	f00a fe8b 	bl	2a6ce <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1f9b8:	4638      	mov	r0, r7
   1f9ba:	f10d 020a 	add.w	r2, sp, #10
   1f9be:	a903      	add	r1, sp, #12
   1f9c0:	f00a fe6e 	bl	2a6a0 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1f9c4:	4604      	mov	r4, r0
   1f9c6:	b118      	cbz	r0, 1f9d0 <rpmsg_virtio_rx_callback+0xbc>
   1f9c8:	4630      	mov	r0, r6
   1f9ca:	f00a fdf4 	bl	2a5b6 <k_sem_give>
	while (rp_hdr) {
   1f9ce:	e7b6      	b.n	1f93e <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   1f9d0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1f9d4:	f00a fce3 	bl	2a39e <virtqueue_kick>
   1f9d8:	4630      	mov	r0, r6
   1f9da:	f00a fdec 	bl	2a5b6 <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   1f9de:	b004      	add	sp, #16
   1f9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f9e4:	00031f3d 	.word	0x00031f3d
   1f9e8:	0002d095 	.word	0x0002d095
   1f9ec:	00031ed5 	.word	0x00031ed5

0001f9f0 <rpmsg_virtio_send_offchannel_raw>:
{
   1f9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f9f4:	b085      	sub	sp, #20
   1f9f6:	460f      	mov	r7, r1
   1f9f8:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1f9fa:	a903      	add	r1, sp, #12
   1f9fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   1f9fe:	4606      	mov	r6, r0
   1fa00:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1fa02:	f00a feaf 	bl	2a764 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   1fa06:	4604      	mov	r4, r0
   1fa08:	b350      	cbz	r0, 1fa60 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   1fa0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1fa0c:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   1fa0e:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   1fa12:	429d      	cmp	r5, r3
   1fa14:	bfa8      	it	ge
   1fa16:	461d      	movge	r5, r3
   1fa18:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1fa1a:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1fa1e:	1a61      	subs	r1, r4, r1
   1fa20:	4561      	cmp	r1, ip
   1fa22:	bf28      	it	cs
   1fa24:	f04f 31ff 	movcs.w	r1, #4294967295
   1fa28:	462b      	mov	r3, r5
   1fa2a:	464a      	mov	r2, r9
   1fa2c:	f00a faea 	bl	2a004 <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   1fa30:	4285      	cmp	r5, r0
   1fa32:	d00b      	beq.n	1fa4c <rpmsg_virtio_send_offchannel_raw+0x5c>
   1fa34:	490b      	ldr	r1, [pc, #44]	; (1fa64 <rpmsg_virtio_send_offchannel_raw+0x74>)
   1fa36:	480c      	ldr	r0, [pc, #48]	; (1fa68 <rpmsg_virtio_send_offchannel_raw+0x78>)
   1fa38:	f240 2303 	movw	r3, #515	; 0x203
   1fa3c:	4a0b      	ldr	r2, [pc, #44]	; (1fa6c <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1fa3e:	f006 fc0e 	bl	2625e <assert_print>
   1fa42:	f240 2103 	movw	r1, #515	; 0x203
   1fa46:	4809      	ldr	r0, [pc, #36]	; (1fa6c <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1fa48:	f006 fc02 	bl	26250 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   1fa4c:	4623      	mov	r3, r4
   1fa4e:	4642      	mov	r2, r8
   1fa50:	4639      	mov	r1, r7
   1fa52:	4630      	mov	r0, r6
   1fa54:	9500      	str	r5, [sp, #0]
   1fa56:	f7ff fee9 	bl	1f82c <rpmsg_virtio_send_offchannel_nocopy>
}
   1fa5a:	b005      	add	sp, #20
   1fa5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   1fa60:	4803      	ldr	r0, [pc, #12]	; (1fa70 <rpmsg_virtio_send_offchannel_raw+0x80>)
   1fa62:	e7fa      	b.n	1fa5a <rpmsg_virtio_send_offchannel_raw+0x6a>
   1fa64:	00031f49 	.word	0x00031f49
   1fa68:	0002d095 	.word	0x0002d095
   1fa6c:	00031ed5 	.word	0x00031ed5
   1fa70:	fffff82e 	.word	0xfffff82e

0001fa74 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   1fa74:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   1fa76:	4604      	mov	r4, r0
   1fa78:	b1e0      	cbz	r0, 1fab4 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   1fa7a:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1fa7e:	4628      	mov	r0, r5
   1fa80:	f00a fd9b 	bl	2a5ba <__metal_mutex_acquire>
   1fa84:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1fa88:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1fa8a:	b953      	cbnz	r3, 1faa2 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   1fa8c:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   1fa90:	3c10      	subs	r4, #16
	if (length <= 0) {
   1fa92:	2c00      	cmp	r4, #0
   1fa94:	dc00      	bgt.n	1fa98 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   1fa96:	4c08      	ldr	r4, [pc, #32]	; (1fab8 <rpmsg_virtio_get_buffer_size+0x44>)
   1fa98:	4628      	mov	r0, r5
   1fa9a:	f00a fd8c 	bl	2a5b6 <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   1fa9e:	4620      	mov	r0, r4
   1faa0:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   1faa2:	2b01      	cmp	r3, #1
   1faa4:	d1f7      	bne.n	1fa96 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1faa6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1faaa:	f00a fcaf 	bl	2a40c <virtqueue_get_desc_size>
   1faae:	f1a0 0410 	sub.w	r4, r0, #16
   1fab2:	e7ee      	b.n	1fa92 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   1fab4:	4c01      	ldr	r4, [pc, #4]	; (1fabc <rpmsg_virtio_get_buffer_size+0x48>)
   1fab6:	e7f2      	b.n	1fa9e <rpmsg_virtio_get_buffer_size+0x2a>
   1fab8:	fffff82e 	.word	0xfffff82e
   1fabc:	fffff82d 	.word	0xfffff82d

0001fac0 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   1fac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fac4:	b08a      	sub	sp, #40	; 0x28
   1fac6:	460d      	mov	r5, r1
   1fac8:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   1facc:	4690      	mov	r8, r2
   1face:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   1fad0:	4604      	mov	r4, r0
   1fad2:	b920      	cbnz	r0, 1fade <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   1fad4:	4f81      	ldr	r7, [pc, #516]	; (1fcdc <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   1fad6:	4638      	mov	r0, r7
   1fad8:	b00a      	add	sp, #40	; 0x28
   1fada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   1fade:	2900      	cmp	r1, #0
   1fae0:	d0f8      	beq.n	1fad4 <rpmsg_init_vdev_with_config+0x14>
   1fae2:	2b00      	cmp	r3, #0
   1fae4:	d0f6      	beq.n	1fad4 <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   1fae6:	2294      	movs	r2, #148	; 0x94
   1fae8:	2100      	movs	r1, #0
   1faea:	f00b f95b 	bl	2ada4 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1faee:	2201      	movs	r2, #1
   1faf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1faf4:	4611      	mov	r1, r2
   1faf6:	f00a ff64 	bl	2a9c2 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1fafa:	4b79      	ldr	r3, [pc, #484]	; (1fce0 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   1fafc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   1fb00:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1fb04:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1fb06:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   1fb08:	4b76      	ldr	r3, [pc, #472]	; (1fce4 <rpmsg_init_vdev_with_config+0x224>)
   1fb0a:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   1fb0c:	4b76      	ldr	r3, [pc, #472]	; (1fce8 <rpmsg_init_vdev_with_config+0x228>)
   1fb0e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   1fb12:	4b76      	ldr	r3, [pc, #472]	; (1fcec <rpmsg_init_vdev_with_config+0x22c>)
   1fb14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   1fb18:	4b75      	ldr	r3, [pc, #468]	; (1fcf0 <rpmsg_init_vdev_with_config+0x230>)
   1fb1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   1fb1e:	4b75      	ldr	r3, [pc, #468]	; (1fcf4 <rpmsg_init_vdev_with_config+0x234>)
   1fb20:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1fb24:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1fb28:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   1fb2c:	f1b8 0f00 	cmp.w	r8, #0
   1fb30:	d16e      	bne.n	1fc10 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   1fb32:	2f00      	cmp	r7, #0
   1fb34:	d0ce      	beq.n	1fad4 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   1fb36:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   1fb3a:	f104 0394 	add.w	r3, r4, #148	; 0x94
   1fb3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1fb42:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1fb46:	6a03      	ldr	r3, [r0, #32]
   1fb48:	689b      	ldr	r3, [r3, #8]
   1fb4a:	4798      	blx	r3
   1fb4c:	2300      	movs	r3, #0
   1fb4e:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1fb50:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1fb54:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1fb56:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   1fb5a:	f1b8 0f00 	cmp.w	r8, #0
   1fb5e:	d16d      	bne.n	1fc3c <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   1fb60:	7a3b      	ldrb	r3, [r7, #8]
   1fb62:	2b00      	cmp	r3, #0
   1fb64:	d068      	beq.n	1fc38 <rpmsg_init_vdev_with_config+0x178>
   1fb66:	f109 030c 	add.w	r3, r9, #12
   1fb6a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   1fb6e:	f1b9 0f00 	cmp.w	r9, #0
   1fb72:	d0af      	beq.n	1fad4 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   1fb74:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1fb78:	2a00      	cmp	r2, #0
   1fb7a:	f000 80ad 	beq.w	1fcd8 <rpmsg_init_vdev_with_config+0x218>
   1fb7e:	689b      	ldr	r3, [r3, #8]
   1fb80:	2b00      	cmp	r3, #0
   1fb82:	f000 80a9 	beq.w	1fcd8 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   1fb86:	4b5c      	ldr	r3, [pc, #368]	; (1fcf8 <rpmsg_init_vdev_with_config+0x238>)
   1fb88:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   1fb8a:	4b5c      	ldr	r3, [pc, #368]	; (1fcfc <rpmsg_init_vdev_with_config+0x23c>)
   1fb8c:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   1fb8e:	4b5c      	ldr	r3, [pc, #368]	; (1fd00 <rpmsg_init_vdev_with_config+0x240>)
   1fb90:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   1fb92:	4b5c      	ldr	r3, [pc, #368]	; (1fd04 <rpmsg_init_vdev_with_config+0x244>)
   1fb94:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1fb96:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fb98:	681b      	ldr	r3, [r3, #0]
   1fb9a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   1fb9e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fba0:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   1fba2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   1fba6:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   1fbaa:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   1fbae:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   1fbb0:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   1fbb4:	9300      	str	r3, [sp, #0]
   1fbb6:	2202      	movs	r2, #2
   1fbb8:	2100      	movs	r1, #0
   1fbba:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1fbbe:	ab04      	add	r3, sp, #16
   1fbc0:	f7ff fce0 	bl	1f584 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   1fbc4:	4607      	mov	r7, r0
   1fbc6:	2800      	cmp	r0, #0
   1fbc8:	d185      	bne.n	1fad6 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   1fbca:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1fbce:	f00a fbb8 	bl	2a342 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   1fbd2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fbd4:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   1fbd6:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   1fbd8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fbda:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   1fbdc:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   1fbde:	f1b8 0f00 	cmp.w	r8, #0
   1fbe2:	d161      	bne.n	1fca8 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1fbe4:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   1fbe6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1fbea:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1fbec:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1fbf0:	895b      	ldrh	r3, [r3, #10]
   1fbf2:	4553      	cmp	r3, sl
   1fbf4:	d834      	bhi.n	1fc60 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   1fbf6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1fbfa:	e9c4 4400 	strd	r4, r4, [r4]
   1fbfe:	2b00      	cmp	r3, #0
   1fc00:	d159      	bne.n	1fcb6 <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   1fc02:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1fc06:	2104      	movs	r1, #4
   1fc08:	6a03      	ldr	r3, [r0, #32]
   1fc0a:	685b      	ldr	r3, [r3, #4]
   1fc0c:	4798      	blx	r3
}
   1fc0e:	e762      	b.n	1fad6 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   1fc10:	f1b8 0f01 	cmp.w	r8, #1
   1fc14:	d195      	bne.n	1fb42 <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   1fc16:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1fc1a:	6a03      	ldr	r3, [r0, #32]
   1fc1c:	681b      	ldr	r3, [r3, #0]
   1fc1e:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1fc20:	0642      	lsls	r2, r0, #25
   1fc22:	d506      	bpl.n	1fc32 <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   1fc24:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1fc28:	2100      	movs	r1, #0
   1fc2a:	6a03      	ldr	r3, [r0, #32]
   1fc2c:	685b      	ldr	r3, [r3, #4]
   1fc2e:	4798      	blx	r3
}
   1fc30:	e7f1      	b.n	1fc16 <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1fc32:	0743      	lsls	r3, r0, #29
   1fc34:	d5ef      	bpl.n	1fc16 <rpmsg_init_vdev_with_config+0x156>
   1fc36:	e784      	b.n	1fb42 <rpmsg_init_vdev_with_config+0x82>
   1fc38:	464b      	mov	r3, r9
   1fc3a:	e796      	b.n	1fb6a <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   1fc3c:	f1b8 0f01 	cmp.w	r8, #1
   1fc40:	d1b1      	bne.n	1fba6 <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   1fc42:	4b2e      	ldr	r3, [pc, #184]	; (1fcfc <rpmsg_init_vdev_with_config+0x23c>)
   1fc44:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   1fc46:	4b2c      	ldr	r3, [pc, #176]	; (1fcf8 <rpmsg_init_vdev_with_config+0x238>)
   1fc48:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   1fc4a:	4b2e      	ldr	r3, [pc, #184]	; (1fd04 <rpmsg_init_vdev_with_config+0x244>)
   1fc4c:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   1fc4e:	4b2c      	ldr	r3, [pc, #176]	; (1fd00 <rpmsg_init_vdev_with_config+0x240>)
   1fc50:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1fc52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fc54:	699b      	ldr	r3, [r3, #24]
   1fc56:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   1fc5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fc5c:	681b      	ldr	r3, [r3, #0]
   1fc5e:	e7a0      	b.n	1fba2 <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1fc60:	4648      	mov	r0, r9
   1fc62:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   1fc66:	f00a fd6e 	bl	2a746 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   1fc6a:	4605      	mov	r5, r0
   1fc6c:	b1c8      	cbz	r0, 1fca2 <rpmsg_init_vdev_with_config+0x1e2>
   1fc6e:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1fc70:	9008      	str	r0, [sp, #32]
   1fc72:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1fc74:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1fc76:	2200      	movs	r2, #0
   1fc78:	4281      	cmp	r1, r0
   1fc7a:	bf28      	it	cs
   1fc7c:	f04f 31ff 	movcs.w	r1, #4294967295
   1fc80:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1fc84:	4630      	mov	r0, r6
   1fc86:	f00a f9f7 	bl	2a078 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1fc8a:	9500      	str	r5, [sp, #0]
   1fc8c:	2301      	movs	r3, #1
   1fc8e:	2200      	movs	r2, #0
   1fc90:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1fc94:	a908      	add	r1, sp, #32
   1fc96:	f00a fa95 	bl	2a1c4 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1fc9a:	b918      	cbnz	r0, 1fca4 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1fc9c:	f10a 0a01 	add.w	sl, sl, #1
   1fca0:	e7a4      	b.n	1fbec <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   1fca2:	4819      	ldr	r0, [pc, #100]	; (1fd08 <rpmsg_init_vdev_with_config+0x248>)
   1fca4:	4607      	mov	r7, r0
   1fca6:	e716      	b.n	1fad6 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   1fca8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1fcac:	e9c4 4400 	strd	r4, r4, [r4]
   1fcb0:	2b00      	cmp	r3, #0
   1fcb2:	f43f af10 	beq.w	1fad6 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   1fcb6:	2300      	movs	r3, #0
   1fcb8:	9302      	str	r3, [sp, #8]
   1fcba:	4b14      	ldr	r3, [pc, #80]	; (1fd0c <rpmsg_init_vdev_with_config+0x24c>)
   1fcbc:	4620      	mov	r0, r4
   1fcbe:	9301      	str	r3, [sp, #4]
   1fcc0:	2335      	movs	r3, #53	; 0x35
   1fcc2:	4a13      	ldr	r2, [pc, #76]	; (1fd10 <rpmsg_init_vdev_with_config+0x250>)
   1fcc4:	9300      	str	r3, [sp, #0]
   1fcc6:	f104 0108 	add.w	r1, r4, #8
   1fcca:	f7ff fd0f 	bl	1f6ec <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   1fcce:	f1b8 0f00 	cmp.w	r8, #0
   1fcd2:	f47f af00 	bne.w	1fad6 <rpmsg_init_vdev_with_config+0x16>
   1fcd6:	e794      	b.n	1fc02 <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   1fcd8:	4f0b      	ldr	r7, [pc, #44]	; (1fd08 <rpmsg_init_vdev_with_config+0x248>)
   1fcda:	e6fc      	b.n	1fad6 <rpmsg_init_vdev_with_config+0x16>
   1fcdc:	fffff82d 	.word	0xfffff82d
   1fce0:	0001f9f1 	.word	0x0001f9f1
   1fce4:	0002a5a7 	.word	0x0002a5a7
   1fce8:	0002a707 	.word	0x0002a707
   1fcec:	0002a765 	.word	0x0002a765
   1fcf0:	0001f82d 	.word	0x0001f82d
   1fcf4:	0002a5c7 	.word	0x0002a5c7
   1fcf8:	00031f57 	.word	0x00031f57
   1fcfc:	00031f5d 	.word	0x00031f5d
   1fd00:	0001f915 	.word	0x0001f915
   1fd04:	0002a5b5 	.word	0x0002a5b5
   1fd08:	fffff82e 	.word	0xfffff82e
   1fd0c:	0002a609 	.word	0x0002a609
   1fd10:	00031f63 	.word	0x00031f63

0001fd14 <rpmsg_init_vdev>:
{
   1fd14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd16:	4605      	mov	r5, r0
   1fd18:	460e      	mov	r6, r1
   1fd1a:	4617      	mov	r7, r2
   1fd1c:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1fd1e:	4a07      	ldr	r2, [pc, #28]	; (1fd3c <rpmsg_init_vdev+0x28>)
   1fd20:	ac03      	add	r4, sp, #12
   1fd22:	ca07      	ldmia	r2, {r0, r1, r2}
   1fd24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   1fd28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1fd2a:	4631      	mov	r1, r6
   1fd2c:	9200      	str	r2, [sp, #0]
   1fd2e:	4628      	mov	r0, r5
   1fd30:	463a      	mov	r2, r7
   1fd32:	9401      	str	r4, [sp, #4]
   1fd34:	f7ff fec4 	bl	1fac0 <rpmsg_init_vdev_with_config>
}
   1fd38:	b007      	add	sp, #28
   1fd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fd3c:	0002c1f4 	.word	0x0002c1f4

0001fd40 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fd40:	2203      	movs	r2, #3
   1fd42:	4b11      	ldr	r3, [pc, #68]	; (1fd88 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1fd44:	4911      	ldr	r1, [pc, #68]	; (1fd8c <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fd46:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1fd48:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1fd4a:	4a11      	ldr	r2, [pc, #68]	; (1fd90 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1fd4c:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1fd4e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1fd50:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fd54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   1fd56:	2200      	movs	r2, #0
   1fd58:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1fd5a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1fd5c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1fd5e:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1fd60:	490c      	ldr	r1, [pc, #48]	; (1fd94 <_DoInit+0x54>)
   1fd62:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1fd64:	2110      	movs	r1, #16
   1fd66:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1fd68:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1fd6a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1fd6c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1fd6e:	4a0a      	ldr	r2, [pc, #40]	; (1fd98 <_DoInit+0x58>)
   1fd70:	6812      	ldr	r2, [r2, #0]
   1fd72:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1fd76:	4a09      	ldr	r2, [pc, #36]	; (1fd9c <_DoInit+0x5c>)
   1fd78:	6810      	ldr	r0, [r2, #0]
   1fd7a:	8892      	ldrh	r2, [r2, #4]
   1fd7c:	6018      	str	r0, [r3, #0]
   1fd7e:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1fd80:	2220      	movs	r2, #32
   1fd82:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1fd84:	4770      	bx	lr
   1fd86:	bf00      	nop
   1fd88:	20022af4 	.word	0x20022af4
   1fd8c:	00031f66 	.word	0x00031f66
   1fd90:	2002370a 	.word	0x2002370a
   1fd94:	200236fa 	.word	0x200236fa
   1fd98:	00031f6f 	.word	0x00031f6f
   1fd9c:	00031f73 	.word	0x00031f73

0001fda0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fda0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1fda4:	f04f 0b18 	mov.w	fp, #24
   1fda8:	4f20      	ldr	r7, [pc, #128]	; (1fe2c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fdaa:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1fdac:	fb0b 7200 	mla	r2, fp, r0, r7
   1fdb0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1fdb2:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fdb4:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1fdb6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fdb8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1fdba:	d831      	bhi.n	1fe20 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1fdbc:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1fdc0:	ebaa 0905 	sub.w	r9, sl, r5
   1fdc4:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1fdc8:	4294      	cmp	r4, r2
   1fdca:	d811      	bhi.n	1fdf0 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1fdcc:	2318      	movs	r3, #24
   1fdce:	fb06 3303 	mla	r3, r6, r3, r3
   1fdd2:	443b      	add	r3, r7
   1fdd4:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fdd6:	4622      	mov	r2, r4
   1fdd8:	4641      	mov	r1, r8
   1fdda:	4428      	add	r0, r5
   1fddc:	f00a ffa8 	bl	2ad30 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1fde0:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1fde2:	2318      	movs	r3, #24
      return 1;
   1fde4:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1fde6:	fb03 7306 	mla	r3, r3, r6, r7
   1fdea:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1fdec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1fdf0:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1fdf2:	429c      	cmp	r4, r3
   1fdf4:	d818      	bhi.n	1fe28 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1fdf6:	fb00 bb0b 	mla	fp, r0, fp, fp
   1fdfa:	44bb      	add	fp, r7
   1fdfc:	f8db 0004 	ldr.w	r0, [fp, #4]
   1fe00:	464a      	mov	r2, r9
   1fe02:	4428      	add	r0, r5
   1fe04:	442c      	add	r4, r5
   1fe06:	f00a ff93 	bl	2ad30 <memcpy>
      if (NumBytes) {
   1fe0a:	ebb4 040a 	subs.w	r4, r4, sl
   1fe0e:	d0e8      	beq.n	1fde2 <SEGGER_RTT_WriteSkipNoLock+0x42>
   1fe10:	4622      	mov	r2, r4
   1fe12:	f8db 0004 	ldr.w	r0, [fp, #4]
   1fe16:	eb08 0109 	add.w	r1, r8, r9
   1fe1a:	f00a ff89 	bl	2ad30 <memcpy>
      return 1;
   1fe1e:	e7e0      	b.n	1fde2 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1fe20:	3b01      	subs	r3, #1
   1fe22:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1fe24:	42a3      	cmp	r3, r4
   1fe26:	d2d1      	bcs.n	1fdcc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1fe28:	2000      	movs	r0, #0
   1fe2a:	e7df      	b.n	1fdec <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1fe2c:	20022af4 	.word	0x20022af4

0001fe30 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1fe30:	2218      	movs	r2, #24
   1fe32:	4b03      	ldr	r3, [pc, #12]	; (1fe40 <SEGGER_RTT_HasDataUp+0x10>)
   1fe34:	fb02 3300 	mla	r3, r2, r0, r3
   1fe38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1fe3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1fe3c:	1a80      	subs	r0, r0, r2
   1fe3e:	4770      	bx	lr
   1fe40:	20022af4 	.word	0x20022af4

0001fe44 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1fe44:	4b01      	ldr	r3, [pc, #4]	; (1fe4c <z_impl_z_errno+0x8>)
   1fe46:	6898      	ldr	r0, [r3, #8]
}
   1fe48:	3064      	adds	r0, #100	; 0x64
   1fe4a:	4770      	bx	lr
   1fe4c:	20022b9c 	.word	0x20022b9c

0001fe50 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1fe50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe54:	4605      	mov	r5, r0
   1fe56:	b086      	sub	sp, #24
   1fe58:	460f      	mov	r7, r1
	__asm__ volatile(
   1fe5a:	f04f 0320 	mov.w	r3, #32
   1fe5e:	f3ef 8811 	mrs	r8, BASEPRI
   1fe62:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe66:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1fe6a:	f002 fe65 	bl	22b38 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1fe6e:	2400      	movs	r4, #0
   1fe70:	2d04      	cmp	r5, #4
   1fe72:	bf96      	itet	ls
   1fe74:	4b28      	ldrls	r3, [pc, #160]	; (1ff18 <z_fatal_error+0xc8>)
   1fe76:	4b29      	ldrhi	r3, [pc, #164]	; (1ff1c <z_fatal_error+0xcc>)
   1fe78:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1fe7c:	4606      	mov	r6, r0
   1fe7e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1fe82:	4b27      	ldr	r3, [pc, #156]	; (1ff20 <z_fatal_error+0xd0>)
   1fe84:	2201      	movs	r2, #1
   1fe86:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1fe8a:	4620      	mov	r0, r4
   1fe8c:	4623      	mov	r3, r4
   1fe8e:	4925      	ldr	r1, [pc, #148]	; (1ff24 <z_fatal_error+0xd4>)
   1fe90:	9503      	str	r5, [sp, #12]
   1fe92:	9400      	str	r4, [sp, #0]
   1fe94:	f00a fd12 	bl	2a8bc <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1fe98:	b16f      	cbz	r7, 1feb6 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1fe9a:	69fb      	ldr	r3, [r7, #28]
   1fe9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1fea0:	b14b      	cbz	r3, 1feb6 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   1fea2:	4b21      	ldr	r3, [pc, #132]	; (1ff28 <z_fatal_error+0xd8>)
   1fea4:	2201      	movs	r2, #1
   1fea6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1feaa:	4620      	mov	r0, r4
   1feac:	4623      	mov	r3, r4
   1feae:	491d      	ldr	r1, [pc, #116]	; (1ff24 <z_fatal_error+0xd4>)
   1feb0:	9400      	str	r4, [sp, #0]
   1feb2:	f00a fd03 	bl	2a8bc <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1feb6:	b12e      	cbz	r6, 1fec4 <z_fatal_error+0x74>
   1feb8:	4630      	mov	r0, r6
   1feba:	f00a fd3a 	bl	2a932 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1febe:	b108      	cbz	r0, 1fec4 <z_fatal_error+0x74>
   1fec0:	7803      	ldrb	r3, [r0, #0]
   1fec2:	b903      	cbnz	r3, 1fec6 <z_fatal_error+0x76>
		thread_name = "unknown";
   1fec4:	4819      	ldr	r0, [pc, #100]	; (1ff2c <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1fec6:	4b1a      	ldr	r3, [pc, #104]	; (1ff30 <z_fatal_error+0xe0>)
   1fec8:	2201      	movs	r2, #1
   1feca:	9302      	str	r3, [sp, #8]
   1fecc:	2300      	movs	r3, #0
   1fece:	e9cd 6003 	strd	r6, r0, [sp, #12]
   1fed2:	e9cd 3300 	strd	r3, r3, [sp]
   1fed6:	4618      	mov	r0, r3
   1fed8:	4912      	ldr	r1, [pc, #72]	; (1ff24 <z_fatal_error+0xd4>)
   1feda:	f00a fcef 	bl	2a8bc <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1fede:	4639      	mov	r1, r7
   1fee0:	4628      	mov	r0, r5
   1fee2:	f7fd fb7d 	bl	1d5e0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1fee6:	2d04      	cmp	r5, #4
   1fee8:	d10c      	bne.n	1ff04 <z_fatal_error+0xb4>
   1feea:	4912      	ldr	r1, [pc, #72]	; (1ff34 <z_fatal_error+0xe4>)
   1feec:	2393      	movs	r3, #147	; 0x93
   1feee:	4a12      	ldr	r2, [pc, #72]	; (1ff38 <z_fatal_error+0xe8>)
   1fef0:	4812      	ldr	r0, [pc, #72]	; (1ff3c <z_fatal_error+0xec>)
   1fef2:	f006 f9b4 	bl	2625e <assert_print>
   1fef6:	4812      	ldr	r0, [pc, #72]	; (1ff40 <z_fatal_error+0xf0>)
   1fef8:	f006 f9b1 	bl	2625e <assert_print>
   1fefc:	2193      	movs	r1, #147	; 0x93
   1fefe:	480e      	ldr	r0, [pc, #56]	; (1ff38 <z_fatal_error+0xe8>)
   1ff00:	f006 f9a6 	bl	26250 <assert_post_action>
	__asm__ volatile(
   1ff04:	f388 8811 	msr	BASEPRI, r8
   1ff08:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1ff0c:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1ff0e:	b006      	add	sp, #24
   1ff10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ff14:	f7f1 bd4a 	b.w	119ac <z_impl_k_thread_abort>
   1ff18:	0002cf40 	.word	0x0002cf40
   1ff1c:	00031f7a 	.word	0x00031f7a
   1ff20:	00031f90 	.word	0x00031f90
   1ff24:	0002c14c 	.word	0x0002c14c
   1ff28:	00031fb8 	.word	0x00031fb8
   1ff2c:	00031f88 	.word	0x00031f88
   1ff30:	00031fd9 	.word	0x00031fd9
   1ff34:	00032013 	.word	0x00032013
   1ff38:	00031ff1 	.word	0x00031ff1
   1ff3c:	0002d095 	.word	0x0002d095
   1ff40:	00032030 	.word	0x00032030

0001ff44 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ff44:	4b0f      	ldr	r3, [pc, #60]	; (1ff84 <z_sys_init_run_level+0x40>)
{
   1ff46:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ff48:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ff4c:	3001      	adds	r0, #1
   1ff4e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1ff52:	42a6      	cmp	r6, r4
   1ff54:	d800      	bhi.n	1ff58 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1ff56:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1ff58:	e9d4 3500 	ldrd	r3, r5, [r4]
   1ff5c:	4628      	mov	r0, r5
   1ff5e:	4798      	blx	r3
		if (dev != NULL) {
   1ff60:	b16d      	cbz	r5, 1ff7e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1ff62:	b138      	cbz	r0, 1ff74 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1ff64:	2800      	cmp	r0, #0
   1ff66:	bfb8      	it	lt
   1ff68:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   1ff6a:	28ff      	cmp	r0, #255	; 0xff
   1ff6c:	bfa8      	it	ge
   1ff6e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1ff70:	68eb      	ldr	r3, [r5, #12]
   1ff72:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1ff74:	68ea      	ldr	r2, [r5, #12]
   1ff76:	7853      	ldrb	r3, [r2, #1]
   1ff78:	f043 0301 	orr.w	r3, r3, #1
   1ff7c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ff7e:	3408      	adds	r4, #8
   1ff80:	e7e7      	b.n	1ff52 <z_sys_init_run_level+0xe>
   1ff82:	bf00      	nop
   1ff84:	0002cf54 	.word	0x0002cf54

0001ff88 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1ff88:	2201      	movs	r2, #1
{
   1ff8a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1ff8c:	4b09      	ldr	r3, [pc, #36]	; (1ffb4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1ff8e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1ff90:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1ff92:	f7ff ffd7 	bl	1ff44 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1ff96:	f003 fed7 	bl	23d48 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1ff9a:	2004      	movs	r0, #4
   1ff9c:	f7ff ffd2 	bl	1ff44 <z_sys_init_run_level>

	z_init_static_threads();
   1ffa0:	f000 fb66 	bl	20670 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1ffa4:	f7ec fc80 	bl	c8a8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ffa8:	4a03      	ldr	r2, [pc, #12]	; (1ffb8 <bg_thread_main+0x30>)
   1ffaa:	7b13      	ldrb	r3, [r2, #12]
   1ffac:	f023 0301 	bic.w	r3, r3, #1
   1ffb0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ffb2:	bd08      	pop	{r3, pc}
   1ffb4:	20023b0a 	.word	0x20023b0a
   1ffb8:	20009c90 	.word	0x20009c90

0001ffbc <z_bss_zero>:
{
   1ffbc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1ffbe:	4803      	ldr	r0, [pc, #12]	; (1ffcc <z_bss_zero+0x10>)
   1ffc0:	4a03      	ldr	r2, [pc, #12]	; (1ffd0 <z_bss_zero+0x14>)
   1ffc2:	2100      	movs	r1, #0
   1ffc4:	1a12      	subs	r2, r2, r0
   1ffc6:	f00a fc89 	bl	2a8dc <z_early_memset>
}
   1ffca:	bd08      	pop	{r3, pc}
   1ffcc:	20008d70 	.word	0x20008d70
   1ffd0:	20023b0c 	.word	0x20023b0c

0001ffd4 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   1ffd4:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1ffd6:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1ffd8:	4e13      	ldr	r6, [pc, #76]	; (20028 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   1ffda:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   1ffdc:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1ffe0:	2300      	movs	r3, #0
{
   1ffe2:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1ffe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ffe8:	220f      	movs	r2, #15
   1ffea:	9301      	str	r3, [sp, #4]
   1ffec:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fff0:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   1fff2:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fff6:	4d0d      	ldr	r5, [pc, #52]	; (2002c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   1fff8:	490d      	ldr	r1, [pc, #52]	; (20030 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fffa:	fb03 5500 	mla	r5, r3, r0, r5
{
   1fffe:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   20000:	fb02 1100 	mla	r1, r2, r0, r1
   20004:	4b0b      	ldr	r3, [pc, #44]	; (20034 <z_init_cpu+0x60>)
   20006:	4630      	mov	r0, r6
   20008:	9500      	str	r5, [sp, #0]
   2000a:	f000 fa97 	bl	2053c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2000e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   20010:	752c      	strb	r4, [r5, #20]
   20012:	f023 0304 	bic.w	r3, r3, #4
   20016:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   20018:	4b07      	ldr	r3, [pc, #28]	; (20038 <z_init_cpu+0x64>)
   2001a:	3401      	adds	r4, #1
   2001c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   20020:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   20022:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   20024:	b006      	add	sp, #24
   20026:	bd70      	pop	{r4, r5, r6, pc}
   20028:	20009c08 	.word	0x20009c08
   2002c:	20022b9c 	.word	0x20022b9c
   20030:	20034830 	.word	0x20034830
   20034:	000207c1 	.word	0x000207c1
   20038:	20034030 	.word	0x20034030

0002003c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2003c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2003e:	2000      	movs	r0, #0
{
   20040:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   20042:	f7ff ff7f 	bl	1ff44 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   20046:	4b2f      	ldr	r3, [pc, #188]	; (20104 <z_cstart+0xc8>)
	uint32_t msp =
   20048:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2004c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   20050:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20054:	2400      	movs	r4, #0
   20056:	23e0      	movs	r3, #224	; 0xe0
   20058:	4d2b      	ldr	r5, [pc, #172]	; (20108 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   2005a:	4e2c      	ldr	r6, [pc, #176]	; (2010c <z_cstart+0xd0>)
   2005c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20060:	77ec      	strb	r4, [r5, #31]
   20062:	762c      	strb	r4, [r5, #24]
   20064:	766c      	strb	r4, [r5, #25]
   20066:	76ac      	strb	r4, [r5, #26]
   20068:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2006c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2006e:	4f28      	ldr	r7, [pc, #160]	; (20110 <z_cstart+0xd4>)
   20070:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20074:	626b      	str	r3, [r5, #36]	; 0x24
   20076:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2007a:	f7f1 fbfb 	bl	11874 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2007e:	f7f0 ff3d 	bl	10efc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20082:	f04f 33ff 	mov.w	r3, #4294967295
   20086:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20088:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2008a:	f7f1 fe5d 	bl	11d48 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2008e:	f7f1 fca3 	bl	119d8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   20092:	f7ef f801 	bl	f098 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20096:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2009a:	ad06      	add	r5, sp, #24
   2009c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   2009e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   200a2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   200a6:	f003 fe31 	bl	23d0c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   200aa:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   200ac:	f00a fbfa 	bl	2a8a4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   200b0:	2001      	movs	r0, #1
   200b2:	f7ff ff47 	bl	1ff44 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   200b6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   200b8:	4d16      	ldr	r5, [pc, #88]	; (20114 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   200ba:	f7ff ff43 	bl	1ff44 <z_sys_init_run_level>
	z_sched_init();
   200be:	f002 fbc1 	bl	22844 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   200c2:	4b15      	ldr	r3, [pc, #84]	; (20118 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   200c4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   200c6:	9305      	str	r3, [sp, #20]
   200c8:	2301      	movs	r3, #1
   200ca:	4914      	ldr	r1, [pc, #80]	; (2011c <z_cstart+0xe0>)
   200cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   200d0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   200d4:	4628      	mov	r0, r5
   200d6:	463b      	mov	r3, r7
   200d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   200dc:	9400      	str	r4, [sp, #0]
   200de:	f000 fa2d 	bl	2053c <z_setup_new_thread>
   200e2:	4606      	mov	r6, r0
   200e4:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   200e6:	4628      	mov	r0, r5
   200e8:	f022 0204 	bic.w	r2, r2, #4
   200ec:	736a      	strb	r2, [r5, #13]
   200ee:	f001 fd81 	bl	21bf4 <z_ready_thread>
	z_init_cpu(0);
   200f2:	4620      	mov	r0, r4
   200f4:	f7ff ff6e 	bl	1ffd4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   200f8:	463a      	mov	r2, r7
   200fa:	4631      	mov	r1, r6
   200fc:	4628      	mov	r0, r5
   200fe:	f7f1 f867 	bl	111d0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20102:	bf00      	nop
   20104:	20034030 	.word	0x20034030
   20108:	e000ed00 	.word	0xe000ed00
   2010c:	20022b9c 	.word	0x20022b9c
   20110:	0001ff89 	.word	0x0001ff89
   20114:	20009c90 	.word	0x20009c90
   20118:	000320af 	.word	0x000320af
   2011c:	20034970 	.word	0x20034970

00020120 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   20120:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20122:	4c0d      	ldr	r4, [pc, #52]	; (20158 <statics_init+0x38>)
   20124:	4d0d      	ldr	r5, [pc, #52]	; (2015c <statics_init+0x3c>)
   20126:	42ac      	cmp	r4, r5
   20128:	d913      	bls.n	20152 <statics_init+0x32>
   2012a:	490d      	ldr	r1, [pc, #52]	; (20160 <statics_init+0x40>)
   2012c:	2318      	movs	r3, #24
   2012e:	4a0d      	ldr	r2, [pc, #52]	; (20164 <statics_init+0x44>)
   20130:	480d      	ldr	r0, [pc, #52]	; (20168 <statics_init+0x48>)
   20132:	f006 f894 	bl	2625e <assert_print>
   20136:	480d      	ldr	r0, [pc, #52]	; (2016c <statics_init+0x4c>)
   20138:	f006 f891 	bl	2625e <assert_print>
   2013c:	2118      	movs	r1, #24
   2013e:	4809      	ldr	r0, [pc, #36]	; (20164 <statics_init+0x44>)
   20140:	f006 f886 	bl	26250 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20144:	4620      	mov	r0, r4
   20146:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2014a:	f00a fbcb 	bl	2a8e4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2014e:	3418      	adds	r4, #24
   20150:	e7e9      	b.n	20126 <statics_init+0x6>
   20152:	d3f7      	bcc.n	20144 <statics_init+0x24>
		}
	}
	return 0;
}
   20154:	2000      	movs	r0, #0
   20156:	bd38      	pop	{r3, r4, r5, pc}
   20158:	20008a68 	.word	0x20008a68
   2015c:	20008a80 	.word	0x20008a80
   20160:	000320d9 	.word	0x000320d9
   20164:	000320b7 	.word	0x000320b7
   20168:	0002d095 	.word	0x0002d095
   2016c:	0002e1ea 	.word	0x0002e1ea

00020170 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20174:	b085      	sub	sp, #20
   20176:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   2017a:	4680      	mov	r8, r0
   2017c:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2017e:	4648      	mov	r0, r9
   20180:	4659      	mov	r1, fp
{
   20182:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20184:	f00a fccc 	bl	2ab20 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   20188:	f1bb 3fff 	cmp.w	fp, #4294967295
   2018c:	bf08      	it	eq
   2018e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20192:	4606      	mov	r6, r0
   20194:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   20196:	bf04      	itt	eq
   20198:	f04f 36ff 	moveq.w	r6, #4294967295
   2019c:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   201a0:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   201a4:	f04f 0320 	mov.w	r3, #32
   201a8:	f3ef 8511 	mrs	r5, BASEPRI
   201ac:	f383 8812 	msr	BASEPRI_MAX, r3
   201b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   201b4:	4620      	mov	r0, r4
   201b6:	f000 fadf 	bl	20778 <z_spin_lock_valid>
   201ba:	b960      	cbnz	r0, 201d6 <k_heap_aligned_alloc+0x66>
   201bc:	2394      	movs	r3, #148	; 0x94
   201be:	4a33      	ldr	r2, [pc, #204]	; (2028c <k_heap_aligned_alloc+0x11c>)
   201c0:	4933      	ldr	r1, [pc, #204]	; (20290 <k_heap_aligned_alloc+0x120>)
   201c2:	4834      	ldr	r0, [pc, #208]	; (20294 <k_heap_aligned_alloc+0x124>)
   201c4:	f006 f84b 	bl	2625e <assert_print>
   201c8:	4621      	mov	r1, r4
   201ca:	4833      	ldr	r0, [pc, #204]	; (20298 <k_heap_aligned_alloc+0x128>)
   201cc:	f006 f847 	bl	2625e <assert_print>
   201d0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   201d2:	482e      	ldr	r0, [pc, #184]	; (2028c <k_heap_aligned_alloc+0x11c>)
   201d4:	e031      	b.n	2023a <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   201d6:	4620      	mov	r0, r4
   201d8:	f000 faea 	bl	207b0 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   201dc:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   201e0:	b113      	cbz	r3, 201e8 <k_heap_aligned_alloc+0x78>
   201e2:	ea5b 0909 	orrs.w	r9, fp, r9
   201e6:	d11d      	bne.n	20224 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   201e8:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   201ec:	4652      	mov	r2, sl
   201ee:	4640      	mov	r0, r8
   201f0:	9903      	ldr	r1, [sp, #12]
   201f2:	f7ed fcf9 	bl	dbe8 <sys_heap_aligned_alloc>
   201f6:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   201f8:	f003 f88c 	bl	23314 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   201fc:	f1b9 0f00 	cmp.w	r9, #0
   20200:	d01d      	beq.n	2023e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20202:	4620      	mov	r0, r4
   20204:	f000 fac6 	bl	20794 <z_spin_unlock_valid>
   20208:	2800      	cmp	r0, #0
   2020a:	d137      	bne.n	2027c <k_heap_aligned_alloc+0x10c>
   2020c:	23c2      	movs	r3, #194	; 0xc2
   2020e:	4a1f      	ldr	r2, [pc, #124]	; (2028c <k_heap_aligned_alloc+0x11c>)
   20210:	4922      	ldr	r1, [pc, #136]	; (2029c <k_heap_aligned_alloc+0x12c>)
   20212:	4820      	ldr	r0, [pc, #128]	; (20294 <k_heap_aligned_alloc+0x124>)
   20214:	f006 f823 	bl	2625e <assert_print>
   20218:	4621      	mov	r1, r4
   2021a:	4821      	ldr	r0, [pc, #132]	; (202a0 <k_heap_aligned_alloc+0x130>)
   2021c:	f006 f81f 	bl	2625e <assert_print>
   20220:	21c2      	movs	r1, #194	; 0xc2
   20222:	e7d6      	b.n	201d2 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20224:	491f      	ldr	r1, [pc, #124]	; (202a4 <k_heap_aligned_alloc+0x134>)
   20226:	234c      	movs	r3, #76	; 0x4c
   20228:	4a1f      	ldr	r2, [pc, #124]	; (202a8 <k_heap_aligned_alloc+0x138>)
   2022a:	481a      	ldr	r0, [pc, #104]	; (20294 <k_heap_aligned_alloc+0x124>)
   2022c:	f006 f817 	bl	2625e <assert_print>
   20230:	481e      	ldr	r0, [pc, #120]	; (202ac <k_heap_aligned_alloc+0x13c>)
   20232:	f006 f814 	bl	2625e <assert_print>
   20236:	214c      	movs	r1, #76	; 0x4c
   20238:	481b      	ldr	r0, [pc, #108]	; (202a8 <k_heap_aligned_alloc+0x138>)
   2023a:	f006 f809 	bl	26250 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   2023e:	1a30      	subs	r0, r6, r0
   20240:	eb67 0101 	sbc.w	r1, r7, r1
   20244:	2801      	cmp	r0, #1
   20246:	f171 0300 	sbcs.w	r3, r1, #0
   2024a:	dbda      	blt.n	20202 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2024c:	e9cd 0100 	strd	r0, r1, [sp]
   20250:	465a      	mov	r2, fp
   20252:	4629      	mov	r1, r5
   20254:	4620      	mov	r0, r4
   20256:	f002 f827 	bl	222a8 <z_pend_curr>
   2025a:	f04f 0320 	mov.w	r3, #32
   2025e:	f3ef 8511 	mrs	r5, BASEPRI
   20262:	f383 8812 	msr	BASEPRI_MAX, r3
   20266:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2026a:	4620      	mov	r0, r4
   2026c:	f000 fa84 	bl	20778 <z_spin_lock_valid>
   20270:	2800      	cmp	r0, #0
   20272:	d0a3      	beq.n	201bc <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   20274:	4620      	mov	r0, r4
   20276:	f000 fa9b 	bl	207b0 <z_spin_lock_set_owner>
	return k;
   2027a:	e7b7      	b.n	201ec <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   2027c:	f385 8811 	msr	BASEPRI, r5
   20280:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   20284:	4648      	mov	r0, r9
   20286:	b005      	add	sp, #20
   20288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2028c:	0002df19 	.word	0x0002df19
   20290:	0002df72 	.word	0x0002df72
   20294:	0002d095 	.word	0x0002d095
   20298:	0002df87 	.word	0x0002df87
   2029c:	0002df46 	.word	0x0002df46
   202a0:	0002df5d 	.word	0x0002df5d
   202a4:	000320ef 	.word	0x000320ef
   202a8:	000320b7 	.word	0x000320b7
   202ac:	00030d1f 	.word	0x00030d1f

000202b0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   202b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202b2:	4605      	mov	r5, r0
   202b4:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   202b6:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   202ba:	f04f 0320 	mov.w	r3, #32
   202be:	f3ef 8711 	mrs	r7, BASEPRI
   202c2:	f383 8812 	msr	BASEPRI_MAX, r3
   202c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   202ca:	4620      	mov	r0, r4
   202cc:	f000 fa54 	bl	20778 <z_spin_lock_valid>
   202d0:	b968      	cbnz	r0, 202ee <k_heap_free+0x3e>
   202d2:	2394      	movs	r3, #148	; 0x94
   202d4:	4a19      	ldr	r2, [pc, #100]	; (2033c <k_heap_free+0x8c>)
   202d6:	491a      	ldr	r1, [pc, #104]	; (20340 <k_heap_free+0x90>)
   202d8:	481a      	ldr	r0, [pc, #104]	; (20344 <k_heap_free+0x94>)
   202da:	f005 ffc0 	bl	2625e <assert_print>
   202de:	4621      	mov	r1, r4
   202e0:	4819      	ldr	r0, [pc, #100]	; (20348 <k_heap_free+0x98>)
   202e2:	f005 ffbc 	bl	2625e <assert_print>
   202e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   202e8:	4814      	ldr	r0, [pc, #80]	; (2033c <k_heap_free+0x8c>)
   202ea:	f005 ffb1 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   202ee:	4620      	mov	r0, r4
   202f0:	f000 fa5e 	bl	207b0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   202f4:	4628      	mov	r0, r5
   202f6:	4631      	mov	r1, r6
   202f8:	f7ed fc30 	bl	db5c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   202fc:	f105 000c 	add.w	r0, r5, #12
   20300:	f00a fbf4 	bl	2aaec <z_unpend_all>
   20304:	b128      	cbz	r0, 20312 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   20306:	4639      	mov	r1, r7
   20308:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2030a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   2030e:	f001 bcfd 	b.w	21d0c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20312:	4620      	mov	r0, r4
   20314:	f000 fa3e 	bl	20794 <z_spin_unlock_valid>
   20318:	b958      	cbnz	r0, 20332 <k_heap_free+0x82>
   2031a:	23c2      	movs	r3, #194	; 0xc2
   2031c:	4a07      	ldr	r2, [pc, #28]	; (2033c <k_heap_free+0x8c>)
   2031e:	490b      	ldr	r1, [pc, #44]	; (2034c <k_heap_free+0x9c>)
   20320:	4808      	ldr	r0, [pc, #32]	; (20344 <k_heap_free+0x94>)
   20322:	f005 ff9c 	bl	2625e <assert_print>
   20326:	4621      	mov	r1, r4
   20328:	4809      	ldr	r0, [pc, #36]	; (20350 <k_heap_free+0xa0>)
   2032a:	f005 ff98 	bl	2625e <assert_print>
   2032e:	21c2      	movs	r1, #194	; 0xc2
   20330:	e7da      	b.n	202e8 <k_heap_free+0x38>
	__asm__ volatile(
   20332:	f387 8811 	msr	BASEPRI, r7
   20336:	f3bf 8f6f 	isb	sy
}
   2033a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2033c:	0002df19 	.word	0x0002df19
   20340:	0002df72 	.word	0x0002df72
   20344:	0002d095 	.word	0x0002d095
   20348:	0002df87 	.word	0x0002df87
   2034c:	0002df46 	.word	0x0002df46
   20350:	0002df5d 	.word	0x0002df5d

00020354 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   20354:	2000      	movs	r0, #0
{
   20356:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20358:	4c0c      	ldr	r4, [pc, #48]	; (2038c <init_mem_slab_module+0x38>)
   2035a:	4d0d      	ldr	r5, [pc, #52]	; (20390 <init_mem_slab_module+0x3c>)
   2035c:	42ac      	cmp	r4, r5
   2035e:	d913      	bls.n	20388 <init_mem_slab_module+0x34>
   20360:	490c      	ldr	r1, [pc, #48]	; (20394 <init_mem_slab_module+0x40>)
   20362:	233d      	movs	r3, #61	; 0x3d
   20364:	4a0c      	ldr	r2, [pc, #48]	; (20398 <init_mem_slab_module+0x44>)
   20366:	480d      	ldr	r0, [pc, #52]	; (2039c <init_mem_slab_module+0x48>)
   20368:	f005 ff79 	bl	2625e <assert_print>
   2036c:	480c      	ldr	r0, [pc, #48]	; (203a0 <init_mem_slab_module+0x4c>)
   2036e:	f005 ff76 	bl	2625e <assert_print>
   20372:	213d      	movs	r1, #61	; 0x3d
   20374:	4808      	ldr	r0, [pc, #32]	; (20398 <init_mem_slab_module+0x44>)
   20376:	f005 ff6b 	bl	26250 <assert_post_action>
		rc = create_free_list(slab);
   2037a:	4620      	mov	r0, r4
   2037c:	f00a faba 	bl	2a8f4 <create_free_list>
		if (rc < 0) {
   20380:	2800      	cmp	r0, #0
   20382:	db02      	blt.n	2038a <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20384:	3420      	adds	r4, #32
   20386:	e7e9      	b.n	2035c <init_mem_slab_module+0x8>
   20388:	d3f7      	bcc.n	2037a <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   2038a:	bd38      	pop	{r3, r4, r5, pc}
   2038c:	20008a08 	.word	0x20008a08
   20390:	20008a68 	.word	0x20008a68
   20394:	0003215a 	.word	0x0003215a
   20398:	00032135 	.word	0x00032135
   2039c:	0002d095 	.word	0x0002d095
   203a0:	0002e1ea 	.word	0x0002e1ea

000203a4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   203a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   203a8:	4604      	mov	r4, r0
   203aa:	460e      	mov	r6, r1
   203ac:	4690      	mov	r8, r2
   203ae:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   203b0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   203b4:	f04f 0320 	mov.w	r3, #32
   203b8:	f3ef 8911 	mrs	r9, BASEPRI
   203bc:	f383 8812 	msr	BASEPRI_MAX, r3
   203c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   203c4:	4628      	mov	r0, r5
   203c6:	f000 f9d7 	bl	20778 <z_spin_lock_valid>
   203ca:	b968      	cbnz	r0, 203e8 <k_mem_slab_alloc+0x44>
   203cc:	2394      	movs	r3, #148	; 0x94
   203ce:	4a23      	ldr	r2, [pc, #140]	; (2045c <k_mem_slab_alloc+0xb8>)
   203d0:	4923      	ldr	r1, [pc, #140]	; (20460 <k_mem_slab_alloc+0xbc>)
   203d2:	4824      	ldr	r0, [pc, #144]	; (20464 <k_mem_slab_alloc+0xc0>)
   203d4:	f005 ff43 	bl	2625e <assert_print>
   203d8:	4629      	mov	r1, r5
   203da:	4823      	ldr	r0, [pc, #140]	; (20468 <k_mem_slab_alloc+0xc4>)
   203dc:	f005 ff3f 	bl	2625e <assert_print>
   203e0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   203e2:	481e      	ldr	r0, [pc, #120]	; (2045c <k_mem_slab_alloc+0xb8>)
   203e4:	f005 ff34 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   203e8:	4628      	mov	r0, r5
   203ea:	f000 f9e1 	bl	207b0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   203ee:	69a3      	ldr	r3, [r4, #24]
   203f0:	b1b3      	cbz	r3, 20420 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   203f2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   203f4:	681b      	ldr	r3, [r3, #0]
   203f6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   203f8:	69e3      	ldr	r3, [r4, #28]
   203fa:	3301      	adds	r3, #1
   203fc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   203fe:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20400:	4628      	mov	r0, r5
   20402:	f000 f9c7 	bl	20794 <z_spin_unlock_valid>
   20406:	bb18      	cbnz	r0, 20450 <k_mem_slab_alloc+0xac>
   20408:	23c2      	movs	r3, #194	; 0xc2
   2040a:	4a14      	ldr	r2, [pc, #80]	; (2045c <k_mem_slab_alloc+0xb8>)
   2040c:	4917      	ldr	r1, [pc, #92]	; (2046c <k_mem_slab_alloc+0xc8>)
   2040e:	4815      	ldr	r0, [pc, #84]	; (20464 <k_mem_slab_alloc+0xc0>)
   20410:	f005 ff25 	bl	2625e <assert_print>
   20414:	4629      	mov	r1, r5
   20416:	4816      	ldr	r0, [pc, #88]	; (20470 <k_mem_slab_alloc+0xcc>)
   20418:	f005 ff21 	bl	2625e <assert_print>
   2041c:	21c2      	movs	r1, #194	; 0xc2
   2041e:	e7e0      	b.n	203e2 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   20420:	ea58 0207 	orrs.w	r2, r8, r7
   20424:	d103      	bne.n	2042e <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   20426:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   2042a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   2042c:	e7e8      	b.n	20400 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2042e:	4622      	mov	r2, r4
   20430:	4649      	mov	r1, r9
   20432:	4628      	mov	r0, r5
   20434:	e9cd 8700 	strd	r8, r7, [sp]
   20438:	f001 ff36 	bl	222a8 <z_pend_curr>
		if (result == 0) {
   2043c:	4604      	mov	r4, r0
   2043e:	b918      	cbnz	r0, 20448 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   20440:	4b0c      	ldr	r3, [pc, #48]	; (20474 <k_mem_slab_alloc+0xd0>)
   20442:	689b      	ldr	r3, [r3, #8]
   20444:	695b      	ldr	r3, [r3, #20]
   20446:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   20448:	4620      	mov	r0, r4
   2044a:	b003      	add	sp, #12
   2044c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   20450:	f389 8811 	msr	BASEPRI, r9
   20454:	f3bf 8f6f 	isb	sy
	return result;
   20458:	e7f6      	b.n	20448 <k_mem_slab_alloc+0xa4>
   2045a:	bf00      	nop
   2045c:	0002df19 	.word	0x0002df19
   20460:	0002df72 	.word	0x0002df72
   20464:	0002d095 	.word	0x0002d095
   20468:	0002df87 	.word	0x0002df87
   2046c:	0002df46 	.word	0x0002df46
   20470:	0002df5d 	.word	0x0002df5d
   20474:	20022b9c 	.word	0x20022b9c

00020478 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2047c:	4604      	mov	r4, r0
   2047e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20480:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20484:	f04f 0320 	mov.w	r3, #32
   20488:	f3ef 8711 	mrs	r7, BASEPRI
   2048c:	f383 8812 	msr	BASEPRI_MAX, r3
   20490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20494:	4628      	mov	r0, r5
   20496:	f000 f96f 	bl	20778 <z_spin_lock_valid>
   2049a:	b968      	cbnz	r0, 204b8 <k_mem_slab_free+0x40>
   2049c:	2394      	movs	r3, #148	; 0x94
   2049e:	4a21      	ldr	r2, [pc, #132]	; (20524 <k_mem_slab_free+0xac>)
   204a0:	4921      	ldr	r1, [pc, #132]	; (20528 <k_mem_slab_free+0xb0>)
   204a2:	4822      	ldr	r0, [pc, #136]	; (2052c <k_mem_slab_free+0xb4>)
   204a4:	f005 fedb 	bl	2625e <assert_print>
   204a8:	4629      	mov	r1, r5
   204aa:	4821      	ldr	r0, [pc, #132]	; (20530 <k_mem_slab_free+0xb8>)
   204ac:	f005 fed7 	bl	2625e <assert_print>
   204b0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204b2:	481c      	ldr	r0, [pc, #112]	; (20524 <k_mem_slab_free+0xac>)
   204b4:	f005 fecc 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   204b8:	4628      	mov	r0, r5
   204ba:	f000 f979 	bl	207b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   204be:	f8d4 8018 	ldr.w	r8, [r4, #24]
   204c2:	f1b8 0f00 	cmp.w	r8, #0
   204c6:	d10f      	bne.n	204e8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   204c8:	4620      	mov	r0, r4
   204ca:	f002 f96b 	bl	227a4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   204ce:	b158      	cbz	r0, 204e8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   204d0:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   204d2:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   204d6:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   204d8:	f001 fb8c 	bl	21bf4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   204dc:	4639      	mov	r1, r7
   204de:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   204e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   204e4:	f001 bc12 	b.w	21d0c <z_reschedule>
	**(char ***) mem = slab->free_list;
   204e8:	6833      	ldr	r3, [r6, #0]
   204ea:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204ec:	4628      	mov	r0, r5
   204ee:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   204f0:	6833      	ldr	r3, [r6, #0]
   204f2:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   204f4:	69e3      	ldr	r3, [r4, #28]
   204f6:	3b01      	subs	r3, #1
   204f8:	61e3      	str	r3, [r4, #28]
   204fa:	f000 f94b 	bl	20794 <z_spin_unlock_valid>
   204fe:	b958      	cbnz	r0, 20518 <k_mem_slab_free+0xa0>
   20500:	23c2      	movs	r3, #194	; 0xc2
   20502:	4a08      	ldr	r2, [pc, #32]	; (20524 <k_mem_slab_free+0xac>)
   20504:	490b      	ldr	r1, [pc, #44]	; (20534 <k_mem_slab_free+0xbc>)
   20506:	4809      	ldr	r0, [pc, #36]	; (2052c <k_mem_slab_free+0xb4>)
   20508:	f005 fea9 	bl	2625e <assert_print>
   2050c:	4629      	mov	r1, r5
   2050e:	480a      	ldr	r0, [pc, #40]	; (20538 <k_mem_slab_free+0xc0>)
   20510:	f005 fea5 	bl	2625e <assert_print>
   20514:	21c2      	movs	r1, #194	; 0xc2
   20516:	e7cc      	b.n	204b2 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   20518:	f387 8811 	msr	BASEPRI, r7
   2051c:	f3bf 8f6f 	isb	sy
}
   20520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20524:	0002df19 	.word	0x0002df19
   20528:	0002df72 	.word	0x0002df72
   2052c:	0002d095 	.word	0x0002d095
   20530:	0002df87 	.word	0x0002df87
   20534:	0002df46 	.word	0x0002df46
   20538:	0002df5d 	.word	0x0002df5d

0002053c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2053c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2053e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   20540:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   20542:	2e0f      	cmp	r6, #15
   20544:	d12a      	bne.n	2059c <z_setup_new_thread+0x60>
   20546:	4821      	ldr	r0, [pc, #132]	; (205cc <z_setup_new_thread+0x90>)
   20548:	4283      	cmp	r3, r0
   2054a:	d12b      	bne.n	205a4 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2054c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20550:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   20554:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   20556:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   20558:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2055a:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2055c:	3207      	adds	r2, #7
   2055e:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   20562:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   20566:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   20568:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2056a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   2056c:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2056e:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   20572:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   20574:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   20576:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20578:	9202      	str	r2, [sp, #8]
   2057a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2057c:	4620      	mov	r0, r4
   2057e:	9201      	str	r2, [sp, #4]
   20580:	9a08      	ldr	r2, [sp, #32]
   20582:	9200      	str	r2, [sp, #0]
   20584:	4632      	mov	r2, r6
   20586:	f7f0 fe03 	bl	11190 <arch_new_thread>
	if (!_current) {
   2058a:	4b11      	ldr	r3, [pc, #68]	; (205d0 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   2058c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2058e:	689b      	ldr	r3, [r3, #8]
   20590:	b103      	cbz	r3, 20594 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   20592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   20594:	4630      	mov	r0, r6
   20596:	6763      	str	r3, [r4, #116]	; 0x74
   20598:	b004      	add	sp, #16
   2059a:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2059c:	f106 0010 	add.w	r0, r6, #16
   205a0:	281e      	cmp	r0, #30
   205a2:	d9d3      	bls.n	2054c <z_setup_new_thread+0x10>
   205a4:	f44f 7306 	mov.w	r3, #536	; 0x218
   205a8:	4a0a      	ldr	r2, [pc, #40]	; (205d4 <z_setup_new_thread+0x98>)
   205aa:	490b      	ldr	r1, [pc, #44]	; (205d8 <z_setup_new_thread+0x9c>)
   205ac:	480b      	ldr	r0, [pc, #44]	; (205dc <z_setup_new_thread+0xa0>)
   205ae:	f005 fe56 	bl	2625e <assert_print>
   205b2:	4631      	mov	r1, r6
   205b4:	480a      	ldr	r0, [pc, #40]	; (205e0 <z_setup_new_thread+0xa4>)
   205b6:	f06f 030f 	mvn.w	r3, #15
   205ba:	220e      	movs	r2, #14
   205bc:	f005 fe4f 	bl	2625e <assert_print>
   205c0:	f44f 7106 	mov.w	r1, #536	; 0x218
   205c4:	4803      	ldr	r0, [pc, #12]	; (205d4 <z_setup_new_thread+0x98>)
   205c6:	f005 fe43 	bl	26250 <assert_post_action>
   205ca:	bf00      	nop
   205cc:	000207c1 	.word	0x000207c1
   205d0:	20022b9c 	.word	0x20022b9c
   205d4:	00032177 	.word	0x00032177
   205d8:	0003219a 	.word	0x0003219a
   205dc:	0002d095 	.word	0x0002d095
   205e0:	0003221a 	.word	0x0003221a

000205e4 <z_impl_k_thread_create>:
{
   205e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   205e6:	b087      	sub	sp, #28
   205e8:	4604      	mov	r4, r0
   205ea:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   205ee:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   205f2:	b175      	cbz	r5, 20612 <z_impl_k_thread_create+0x2e>
   205f4:	4919      	ldr	r1, [pc, #100]	; (2065c <z_impl_k_thread_create+0x78>)
   205f6:	f240 2387 	movw	r3, #647	; 0x287
   205fa:	4a19      	ldr	r2, [pc, #100]	; (20660 <z_impl_k_thread_create+0x7c>)
   205fc:	4819      	ldr	r0, [pc, #100]	; (20664 <z_impl_k_thread_create+0x80>)
   205fe:	f005 fe2e 	bl	2625e <assert_print>
   20602:	4819      	ldr	r0, [pc, #100]	; (20668 <z_impl_k_thread_create+0x84>)
   20604:	f005 fe2b 	bl	2625e <assert_print>
   20608:	f240 2187 	movw	r1, #647	; 0x287
   2060c:	4814      	ldr	r0, [pc, #80]	; (20660 <z_impl_k_thread_create+0x7c>)
   2060e:	f005 fe1f 	bl	26250 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20612:	9505      	str	r5, [sp, #20]
   20614:	9d10      	ldr	r5, [sp, #64]	; 0x40
   20616:	9504      	str	r5, [sp, #16]
   20618:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2061a:	9503      	str	r5, [sp, #12]
   2061c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2061e:	9502      	str	r5, [sp, #8]
   20620:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   20622:	9501      	str	r5, [sp, #4]
   20624:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   20626:	9500      	str	r5, [sp, #0]
   20628:	f7ff ff88 	bl	2053c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2062c:	f1b6 3fff 	cmp.w	r6, #4294967295
   20630:	bf08      	it	eq
   20632:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   20636:	d005      	beq.n	20644 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20638:	ea56 0307 	orrs.w	r3, r6, r7
   2063c:	d105      	bne.n	2064a <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   2063e:	4620      	mov	r0, r4
   20640:	f001 fba6 	bl	21d90 <z_sched_start>
}
   20644:	4620      	mov	r0, r4
   20646:	b007      	add	sp, #28
   20648:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2064a:	463a      	mov	r2, r7
   2064c:	4633      	mov	r3, r6
   2064e:	4907      	ldr	r1, [pc, #28]	; (2066c <z_impl_k_thread_create+0x88>)
   20650:	f104 0018 	add.w	r0, r4, #24
   20654:	f002 fc16 	bl	22e84 <z_add_timeout>
   20658:	e7f4      	b.n	20644 <z_impl_k_thread_create+0x60>
   2065a:	bf00      	nop
   2065c:	0003224b 	.word	0x0003224b
   20660:	00032177 	.word	0x00032177
   20664:	0002d095 	.word	0x0002d095
   20668:	0003225d 	.word	0x0003225d
   2066c:	0002265d 	.word	0x0002265d

00020670 <z_init_static_threads>:
{
   20670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20674:	4c39      	ldr	r4, [pc, #228]	; (2075c <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   20676:	4d3a      	ldr	r5, [pc, #232]	; (20760 <z_init_static_threads+0xf0>)
{
   20678:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   2067a:	42ac      	cmp	r4, r5
   2067c:	4626      	mov	r6, r4
   2067e:	d92a      	bls.n	206d6 <z_init_static_threads+0x66>
   20680:	4938      	ldr	r1, [pc, #224]	; (20764 <z_init_static_threads+0xf4>)
   20682:	f240 23ee 	movw	r3, #750	; 0x2ee
   20686:	4a38      	ldr	r2, [pc, #224]	; (20768 <z_init_static_threads+0xf8>)
   20688:	4838      	ldr	r0, [pc, #224]	; (2076c <z_init_static_threads+0xfc>)
   2068a:	f005 fde8 	bl	2625e <assert_print>
   2068e:	4838      	ldr	r0, [pc, #224]	; (20770 <z_init_static_threads+0x100>)
   20690:	f005 fde5 	bl	2625e <assert_print>
   20694:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   20698:	4833      	ldr	r0, [pc, #204]	; (20768 <z_init_static_threads+0xf8>)
   2069a:	f005 fdd9 	bl	26250 <assert_post_action>
		z_setup_new_thread(
   2069e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   206a2:	9305      	str	r3, [sp, #20]
   206a4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   206a8:	9304      	str	r3, [sp, #16]
   206aa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   206ae:	9303      	str	r3, [sp, #12]
   206b0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   206b4:	9302      	str	r3, [sp, #8]
   206b6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   206ba:	9301      	str	r3, [sp, #4]
   206bc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   206c0:	9300      	str	r3, [sp, #0]
   206c2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   206c6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   206ca:	f7ff ff37 	bl	2053c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   206ce:	f854 3c30 	ldr.w	r3, [r4, #-48]
   206d2:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   206d4:	e7d1      	b.n	2067a <z_init_static_threads+0xa>
   206d6:	42ae      	cmp	r6, r5
   206d8:	f104 0430 	add.w	r4, r4, #48	; 0x30
   206dc:	d3df      	bcc.n	2069e <z_init_static_threads+0x2e>
	k_sched_lock();
   206de:	f001 fba9 	bl	21e34 <k_sched_lock>
   206e2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   206e6:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   206ea:	4c1c      	ldr	r4, [pc, #112]	; (2075c <z_init_static_threads+0xec>)
   206ec:	f8df 9084 	ldr.w	r9, [pc, #132]	; 20774 <z_init_static_threads+0x104>
   206f0:	42ac      	cmp	r4, r5
   206f2:	d92c      	bls.n	2074e <z_init_static_threads+0xde>
   206f4:	491b      	ldr	r1, [pc, #108]	; (20764 <z_init_static_threads+0xf4>)
   206f6:	f240 330d 	movw	r3, #781	; 0x30d
   206fa:	4a1b      	ldr	r2, [pc, #108]	; (20768 <z_init_static_threads+0xf8>)
   206fc:	481b      	ldr	r0, [pc, #108]	; (2076c <z_init_static_threads+0xfc>)
   206fe:	f005 fdae 	bl	2625e <assert_print>
   20702:	481b      	ldr	r0, [pc, #108]	; (20770 <z_init_static_threads+0x100>)
   20704:	f005 fdab 	bl	2625e <assert_print>
   20708:	f240 310d 	movw	r1, #781	; 0x30d
   2070c:	e7c4      	b.n	20698 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2070e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20710:	1c5a      	adds	r2, r3, #1
   20712:	d00d      	beq.n	20730 <z_init_static_threads+0xc0>
   20714:	2100      	movs	r1, #0
   20716:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   20718:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2071c:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20720:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   20724:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20728:	d104      	bne.n	20734 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   2072a:	4640      	mov	r0, r8
   2072c:	f001 fb30 	bl	21d90 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   20730:	3430      	adds	r4, #48	; 0x30
   20732:	e7dd      	b.n	206f0 <z_init_static_threads+0x80>
   20734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20738:	2300      	movs	r3, #0
   2073a:	f7e8 fbd9 	bl	8ef0 <__aeabi_uldivmod>
   2073e:	4602      	mov	r2, r0
   20740:	460b      	mov	r3, r1
   20742:	f108 0018 	add.w	r0, r8, #24
   20746:	4649      	mov	r1, r9
   20748:	f002 fb9c 	bl	22e84 <z_add_timeout>
   2074c:	e7f0      	b.n	20730 <z_init_static_threads+0xc0>
   2074e:	d3de      	bcc.n	2070e <z_init_static_threads+0x9e>
}
   20750:	b007      	add	sp, #28
   20752:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   20756:	f001 bbd9 	b.w	21f0c <k_sched_unlock>
   2075a:	bf00      	nop
   2075c:	0002be04 	.word	0x0002be04
   20760:	0002bf84 	.word	0x0002bf84
   20764:	00032282 	.word	0x00032282
   20768:	00032177 	.word	0x00032177
   2076c:	0002d095 	.word	0x0002d095
   20770:	0002e1ea 	.word	0x0002e1ea
   20774:	0002265d 	.word	0x0002265d

00020778 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   20778:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2077a:	b138      	cbz	r0, 2078c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2077c:	4b04      	ldr	r3, [pc, #16]	; (20790 <z_spin_lock_valid+0x18>)
   2077e:	f000 0003 	and.w	r0, r0, #3
   20782:	7d1b      	ldrb	r3, [r3, #20]
   20784:	1ac0      	subs	r0, r0, r3
   20786:	bf18      	it	ne
   20788:	2001      	movne	r0, #1
   2078a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2078c:	2001      	movs	r0, #1
}
   2078e:	4770      	bx	lr
   20790:	20022b9c 	.word	0x20022b9c

00020794 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20794:	4a05      	ldr	r2, [pc, #20]	; (207ac <z_spin_unlock_valid+0x18>)
{
   20796:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20798:	7d11      	ldrb	r1, [r2, #20]
   2079a:	6892      	ldr	r2, [r2, #8]
   2079c:	430a      	orrs	r2, r1
   2079e:	6801      	ldr	r1, [r0, #0]
   207a0:	2000      	movs	r0, #0
   207a2:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   207a4:	bf04      	itt	eq
   207a6:	6018      	streq	r0, [r3, #0]
	return true;
   207a8:	2001      	moveq	r0, #1
}
   207aa:	4770      	bx	lr
   207ac:	20022b9c 	.word	0x20022b9c

000207b0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   207b0:	4b02      	ldr	r3, [pc, #8]	; (207bc <z_spin_lock_set_owner+0xc>)
   207b2:	7d1a      	ldrb	r2, [r3, #20]
   207b4:	689b      	ldr	r3, [r3, #8]
   207b6:	4313      	orrs	r3, r2
   207b8:	6003      	str	r3, [r0, #0]
}
   207ba:	4770      	bx	lr
   207bc:	20022b9c 	.word	0x20022b9c

000207c0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   207c0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   207c2:	4c13      	ldr	r4, [pc, #76]	; (20810 <idle+0x50>)
   207c4:	68a3      	ldr	r3, [r4, #8]
   207c6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   207ca:	2b00      	cmp	r3, #0
   207cc:	db10      	blt.n	207f0 <idle+0x30>
   207ce:	4d11      	ldr	r5, [pc, #68]	; (20814 <idle+0x54>)
	__asm__ volatile(
   207d0:	f04f 0220 	mov.w	r2, #32
   207d4:	f3ef 8311 	mrs	r3, BASEPRI
   207d8:	f382 8812 	msr	BASEPRI_MAX, r2
   207dc:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   207e0:	f002 fc62 	bl	230a8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   207e4:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   207e6:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   207e8:	b963      	cbnz	r3, 20804 <idle+0x44>
	arch_cpu_idle();
   207ea:	f7f0 fb8d 	bl	10f08 <arch_cpu_idle>
}
   207ee:	e7ef      	b.n	207d0 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   207f0:	4909      	ldr	r1, [pc, #36]	; (20818 <idle+0x58>)
   207f2:	480a      	ldr	r0, [pc, #40]	; (2081c <idle+0x5c>)
   207f4:	2327      	movs	r3, #39	; 0x27
   207f6:	4a0a      	ldr	r2, [pc, #40]	; (20820 <idle+0x60>)
   207f8:	f005 fd31 	bl	2625e <assert_print>
   207fc:	2127      	movs	r1, #39	; 0x27
   207fe:	4808      	ldr	r0, [pc, #32]	; (20820 <idle+0x60>)
   20800:	f005 fd26 	bl	26250 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20804:	f7f0 f8b8 	bl	10978 <pm_system_suspend>
   20808:	2800      	cmp	r0, #0
   2080a:	d1e1      	bne.n	207d0 <idle+0x10>
   2080c:	e7ed      	b.n	207ea <idle+0x2a>
   2080e:	bf00      	nop
   20810:	20022b9c 	.word	0x20022b9c
   20814:	20023b0a 	.word	0x20023b0a
   20818:	000322d0 	.word	0x000322d0
   2081c:	0002d095 	.word	0x0002d095
   20820:	000322af 	.word	0x000322af

00020824 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20828:	4604      	mov	r4, r0
   2082a:	4617      	mov	r7, r2
   2082c:	461e      	mov	r6, r3
   2082e:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20832:	b165      	cbz	r5, 2084e <z_impl_k_mutex_lock+0x2a>
   20834:	4958      	ldr	r1, [pc, #352]	; (20998 <z_impl_k_mutex_lock+0x174>)
   20836:	2365      	movs	r3, #101	; 0x65
   20838:	4a58      	ldr	r2, [pc, #352]	; (2099c <z_impl_k_mutex_lock+0x178>)
   2083a:	4859      	ldr	r0, [pc, #356]	; (209a0 <z_impl_k_mutex_lock+0x17c>)
   2083c:	f005 fd0f 	bl	2625e <assert_print>
   20840:	4858      	ldr	r0, [pc, #352]	; (209a4 <z_impl_k_mutex_lock+0x180>)
   20842:	f005 fd0c 	bl	2625e <assert_print>
   20846:	2165      	movs	r1, #101	; 0x65
   20848:	4854      	ldr	r0, [pc, #336]	; (2099c <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2084a:	f005 fd01 	bl	26250 <assert_post_action>
   2084e:	f04f 0320 	mov.w	r3, #32
   20852:	f3ef 8811 	mrs	r8, BASEPRI
   20856:	f383 8812 	msr	BASEPRI_MAX, r3
   2085a:	f3bf 8f6f 	isb	sy
   2085e:	4852      	ldr	r0, [pc, #328]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   20860:	f7ff ff8a 	bl	20778 <z_spin_lock_valid>
   20864:	b960      	cbnz	r0, 20880 <z_impl_k_mutex_lock+0x5c>
   20866:	2394      	movs	r3, #148	; 0x94
   20868:	4a50      	ldr	r2, [pc, #320]	; (209ac <z_impl_k_mutex_lock+0x188>)
   2086a:	4951      	ldr	r1, [pc, #324]	; (209b0 <z_impl_k_mutex_lock+0x18c>)
   2086c:	484c      	ldr	r0, [pc, #304]	; (209a0 <z_impl_k_mutex_lock+0x17c>)
   2086e:	f005 fcf6 	bl	2625e <assert_print>
   20872:	494d      	ldr	r1, [pc, #308]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   20874:	484f      	ldr	r0, [pc, #316]	; (209b4 <z_impl_k_mutex_lock+0x190>)
   20876:	f005 fcf2 	bl	2625e <assert_print>
   2087a:	2194      	movs	r1, #148	; 0x94
   2087c:	484b      	ldr	r0, [pc, #300]	; (209ac <z_impl_k_mutex_lock+0x188>)
   2087e:	e7e4      	b.n	2084a <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   20880:	4849      	ldr	r0, [pc, #292]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   20882:	f7ff ff95 	bl	207b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20886:	68e3      	ldr	r3, [r4, #12]
   20888:	4a4b      	ldr	r2, [pc, #300]	; (209b8 <z_impl_k_mutex_lock+0x194>)
   2088a:	b19b      	cbz	r3, 208b4 <z_impl_k_mutex_lock+0x90>
   2088c:	68a0      	ldr	r0, [r4, #8]
   2088e:	6891      	ldr	r1, [r2, #8]
   20890:	4288      	cmp	r0, r1
   20892:	d027      	beq.n	208e4 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   20894:	ea57 0306 	orrs.w	r3, r7, r6
   20898:	d12c      	bne.n	208f4 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2089a:	4843      	ldr	r0, [pc, #268]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   2089c:	f7ff ff7a 	bl	20794 <z_spin_unlock_valid>
   208a0:	b1a0      	cbz	r0, 208cc <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   208a2:	f388 8811 	msr	BASEPRI, r8
   208a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   208aa:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   208ae:	b002      	add	sp, #8
   208b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   208b4:	6891      	ldr	r1, [r2, #8]
   208b6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   208ba:	3301      	adds	r3, #1
   208bc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   208be:	6893      	ldr	r3, [r2, #8]
   208c0:	4839      	ldr	r0, [pc, #228]	; (209a8 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   208c2:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   208c4:	60a3      	str	r3, [r4, #8]
   208c6:	f7ff ff65 	bl	20794 <z_spin_unlock_valid>
   208ca:	b968      	cbnz	r0, 208e8 <z_impl_k_mutex_lock+0xc4>
   208cc:	23c2      	movs	r3, #194	; 0xc2
   208ce:	4a37      	ldr	r2, [pc, #220]	; (209ac <z_impl_k_mutex_lock+0x188>)
   208d0:	493a      	ldr	r1, [pc, #232]	; (209bc <z_impl_k_mutex_lock+0x198>)
   208d2:	4833      	ldr	r0, [pc, #204]	; (209a0 <z_impl_k_mutex_lock+0x17c>)
   208d4:	f005 fcc3 	bl	2625e <assert_print>
   208d8:	4933      	ldr	r1, [pc, #204]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   208da:	4839      	ldr	r0, [pc, #228]	; (209c0 <z_impl_k_mutex_lock+0x19c>)
   208dc:	f005 fcbf 	bl	2625e <assert_print>
   208e0:	21c2      	movs	r1, #194	; 0xc2
   208e2:	e7cb      	b.n	2087c <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   208e4:	6921      	ldr	r1, [r4, #16]
   208e6:	e7e8      	b.n	208ba <z_impl_k_mutex_lock+0x96>
   208e8:	f388 8811 	msr	BASEPRI, r8
   208ec:	f3bf 8f6f 	isb	sy
		return 0;
   208f0:	2000      	movs	r0, #0
   208f2:	e7dc      	b.n	208ae <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   208f4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   208f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   208fc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   20900:	4299      	cmp	r1, r3
   20902:	bfa8      	it	ge
   20904:	4619      	movge	r1, r3
   20906:	4291      	cmp	r1, r2
   20908:	bfb8      	it	lt
   2090a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2090c:	428b      	cmp	r3, r1
   2090e:	dd02      	ble.n	20916 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   20910:	f00a f81a 	bl	2a948 <adjust_owner_prio.isra.0>
   20914:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20916:	4622      	mov	r2, r4
   20918:	4641      	mov	r1, r8
   2091a:	e9cd 7600 	strd	r7, r6, [sp]
   2091e:	4822      	ldr	r0, [pc, #136]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   20920:	f001 fcc2 	bl	222a8 <z_pend_curr>
	if (got_mutex == 0) {
   20924:	2800      	cmp	r0, #0
   20926:	d0e3      	beq.n	208f0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   20928:	f04f 0320 	mov.w	r3, #32
   2092c:	f3ef 8611 	mrs	r6, BASEPRI
   20930:	f383 8812 	msr	BASEPRI_MAX, r3
   20934:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20938:	481b      	ldr	r0, [pc, #108]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   2093a:	f7ff ff1d 	bl	20778 <z_spin_lock_valid>
   2093e:	2800      	cmp	r0, #0
   20940:	d091      	beq.n	20866 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   20942:	4819      	ldr	r0, [pc, #100]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   20944:	f7ff ff34 	bl	207b0 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   20948:	68a0      	ldr	r0, [r4, #8]
   2094a:	b1c0      	cbz	r0, 2097e <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2094c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2094e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20950:	429c      	cmp	r4, r3
   20952:	d00a      	beq.n	2096a <z_impl_k_mutex_lock+0x146>
   20954:	b14b      	cbz	r3, 2096a <z_impl_k_mutex_lock+0x146>
   20956:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2095a:	4299      	cmp	r1, r3
   2095c:	bfa8      	it	ge
   2095e:	4619      	movge	r1, r3
   20960:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   20964:	4299      	cmp	r1, r3
   20966:	bfb8      	it	lt
   20968:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2096a:	f009 ffed 	bl	2a948 <adjust_owner_prio.isra.0>
   2096e:	b130      	cbz	r0, 2097e <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   20970:	4631      	mov	r1, r6
   20972:	480d      	ldr	r0, [pc, #52]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   20974:	f001 f9ca 	bl	21d0c <z_reschedule>
	return -EAGAIN;
   20978:	f06f 000a 	mvn.w	r0, #10
   2097c:	e797      	b.n	208ae <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   2097e:	2d00      	cmp	r5, #0
   20980:	d1f6      	bne.n	20970 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20982:	4809      	ldr	r0, [pc, #36]	; (209a8 <z_impl_k_mutex_lock+0x184>)
   20984:	f7ff ff06 	bl	20794 <z_spin_unlock_valid>
   20988:	2800      	cmp	r0, #0
   2098a:	d09f      	beq.n	208cc <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   2098c:	f386 8811 	msr	BASEPRI, r6
   20990:	f3bf 8f6f 	isb	sy
   20994:	e7f0      	b.n	20978 <z_impl_k_mutex_lock+0x154>
   20996:	bf00      	nop
   20998:	0003224b 	.word	0x0003224b
   2099c:	000322f8 	.word	0x000322f8
   209a0:	0002d095 	.word	0x0002d095
   209a4:	0003231a 	.word	0x0003231a
   209a8:	20022bc4 	.word	0x20022bc4
   209ac:	0002df19 	.word	0x0002df19
   209b0:	0002df72 	.word	0x0002df72
   209b4:	0002df87 	.word	0x0002df87
   209b8:	20022b9c 	.word	0x20022b9c
   209bc:	0002df46 	.word	0x0002df46
   209c0:	0002df5d 	.word	0x0002df5d

000209c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   209c4:	b570      	push	{r4, r5, r6, lr}
   209c6:	4604      	mov	r4, r0
   209c8:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   209cc:	b166      	cbz	r6, 209e8 <z_impl_k_mutex_unlock+0x24>
   209ce:	4938      	ldr	r1, [pc, #224]	; (20ab0 <z_impl_k_mutex_unlock+0xec>)
   209d0:	23cd      	movs	r3, #205	; 0xcd
   209d2:	4a38      	ldr	r2, [pc, #224]	; (20ab4 <z_impl_k_mutex_unlock+0xf0>)
   209d4:	4838      	ldr	r0, [pc, #224]	; (20ab8 <z_impl_k_mutex_unlock+0xf4>)
   209d6:	f005 fc42 	bl	2625e <assert_print>
   209da:	4838      	ldr	r0, [pc, #224]	; (20abc <z_impl_k_mutex_unlock+0xf8>)
   209dc:	f005 fc3f 	bl	2625e <assert_print>
   209e0:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   209e2:	4834      	ldr	r0, [pc, #208]	; (20ab4 <z_impl_k_mutex_unlock+0xf0>)
   209e4:	f005 fc34 	bl	26250 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   209e8:	6883      	ldr	r3, [r0, #8]
   209ea:	2b00      	cmp	r3, #0
   209ec:	d059      	beq.n	20aa2 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   209ee:	4a34      	ldr	r2, [pc, #208]	; (20ac0 <z_impl_k_mutex_unlock+0xfc>)
   209f0:	6892      	ldr	r2, [r2, #8]
   209f2:	4293      	cmp	r3, r2
   209f4:	d158      	bne.n	20aa8 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   209f6:	68c3      	ldr	r3, [r0, #12]
   209f8:	b93b      	cbnz	r3, 20a0a <z_impl_k_mutex_unlock+0x46>
   209fa:	4932      	ldr	r1, [pc, #200]	; (20ac4 <z_impl_k_mutex_unlock+0x100>)
   209fc:	23e5      	movs	r3, #229	; 0xe5
   209fe:	4a2d      	ldr	r2, [pc, #180]	; (20ab4 <z_impl_k_mutex_unlock+0xf0>)
   20a00:	482d      	ldr	r0, [pc, #180]	; (20ab8 <z_impl_k_mutex_unlock+0xf4>)
   20a02:	f005 fc2c 	bl	2625e <assert_print>
   20a06:	21e5      	movs	r1, #229	; 0xe5
   20a08:	e7eb      	b.n	209e2 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   20a0a:	2b01      	cmp	r3, #1
   20a0c:	d003      	beq.n	20a16 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   20a0e:	3b01      	subs	r3, #1
   20a10:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   20a12:	2000      	movs	r0, #0
}
   20a14:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   20a16:	f04f 0320 	mov.w	r3, #32
   20a1a:	f3ef 8511 	mrs	r5, BASEPRI
   20a1e:	f383 8812 	msr	BASEPRI_MAX, r3
   20a22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a26:	4828      	ldr	r0, [pc, #160]	; (20ac8 <z_impl_k_mutex_unlock+0x104>)
   20a28:	f7ff fea6 	bl	20778 <z_spin_lock_valid>
   20a2c:	b960      	cbnz	r0, 20a48 <z_impl_k_mutex_unlock+0x84>
   20a2e:	2394      	movs	r3, #148	; 0x94
   20a30:	4a26      	ldr	r2, [pc, #152]	; (20acc <z_impl_k_mutex_unlock+0x108>)
   20a32:	4927      	ldr	r1, [pc, #156]	; (20ad0 <z_impl_k_mutex_unlock+0x10c>)
   20a34:	4820      	ldr	r0, [pc, #128]	; (20ab8 <z_impl_k_mutex_unlock+0xf4>)
   20a36:	f005 fc12 	bl	2625e <assert_print>
   20a3a:	4923      	ldr	r1, [pc, #140]	; (20ac8 <z_impl_k_mutex_unlock+0x104>)
   20a3c:	4825      	ldr	r0, [pc, #148]	; (20ad4 <z_impl_k_mutex_unlock+0x110>)
   20a3e:	f005 fc0e 	bl	2625e <assert_print>
   20a42:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a44:	4821      	ldr	r0, [pc, #132]	; (20acc <z_impl_k_mutex_unlock+0x108>)
   20a46:	e7cd      	b.n	209e4 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   20a48:	481f      	ldr	r0, [pc, #124]	; (20ac8 <z_impl_k_mutex_unlock+0x104>)
   20a4a:	f7ff feb1 	bl	207b0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20a4e:	6921      	ldr	r1, [r4, #16]
   20a50:	68a0      	ldr	r0, [r4, #8]
   20a52:	f009 ff79 	bl	2a948 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20a56:	4620      	mov	r0, r4
   20a58:	f001 fea4 	bl	227a4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   20a5c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20a5e:	b150      	cbz	r0, 20a76 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   20a60:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20a64:	6122      	str	r2, [r4, #16]
   20a66:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   20a68:	f001 f8c4 	bl	21bf4 <z_ready_thread>
		z_reschedule(&lock, key);
   20a6c:	4629      	mov	r1, r5
   20a6e:	4816      	ldr	r0, [pc, #88]	; (20ac8 <z_impl_k_mutex_unlock+0x104>)
   20a70:	f001 f94c 	bl	21d0c <z_reschedule>
   20a74:	e7cd      	b.n	20a12 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   20a76:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a78:	4813      	ldr	r0, [pc, #76]	; (20ac8 <z_impl_k_mutex_unlock+0x104>)
   20a7a:	f7ff fe8b 	bl	20794 <z_spin_unlock_valid>
   20a7e:	b958      	cbnz	r0, 20a98 <z_impl_k_mutex_unlock+0xd4>
   20a80:	23c2      	movs	r3, #194	; 0xc2
   20a82:	4a12      	ldr	r2, [pc, #72]	; (20acc <z_impl_k_mutex_unlock+0x108>)
   20a84:	4914      	ldr	r1, [pc, #80]	; (20ad8 <z_impl_k_mutex_unlock+0x114>)
   20a86:	480c      	ldr	r0, [pc, #48]	; (20ab8 <z_impl_k_mutex_unlock+0xf4>)
   20a88:	f005 fbe9 	bl	2625e <assert_print>
   20a8c:	490e      	ldr	r1, [pc, #56]	; (20ac8 <z_impl_k_mutex_unlock+0x104>)
   20a8e:	4813      	ldr	r0, [pc, #76]	; (20adc <z_impl_k_mutex_unlock+0x118>)
   20a90:	f005 fbe5 	bl	2625e <assert_print>
   20a94:	21c2      	movs	r1, #194	; 0xc2
   20a96:	e7d5      	b.n	20a44 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   20a98:	f385 8811 	msr	BASEPRI, r5
   20a9c:	f3bf 8f6f 	isb	sy
   20aa0:	e7b7      	b.n	20a12 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   20aa2:	f06f 0015 	mvn.w	r0, #21
   20aa6:	e7b5      	b.n	20a14 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   20aa8:	f04f 30ff 	mov.w	r0, #4294967295
   20aac:	e7b2      	b.n	20a14 <z_impl_k_mutex_unlock+0x50>
   20aae:	bf00      	nop
   20ab0:	0003224b 	.word	0x0003224b
   20ab4:	000322f8 	.word	0x000322f8
   20ab8:	0002d095 	.word	0x0002d095
   20abc:	0003231a 	.word	0x0003231a
   20ac0:	20022b9c 	.word	0x20022b9c
   20ac4:	0003233f 	.word	0x0003233f
   20ac8:	20022bc4 	.word	0x20022bc4
   20acc:	0002df19 	.word	0x0002df19
   20ad0:	0002df72 	.word	0x0002df72
   20ad4:	0002df87 	.word	0x0002df87
   20ad8:	0002df46 	.word	0x0002df46
   20adc:	0002df5d 	.word	0x0002df5d

00020ae0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   20ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ae4:	4604      	mov	r4, r0
   20ae6:	460e      	mov	r6, r1
   20ae8:	4690      	mov	r8, r2
   20aea:	4699      	mov	r9, r3
   20aec:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20af0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20af4:	f04f 0320 	mov.w	r3, #32
   20af8:	f3ef 8711 	mrs	r7, BASEPRI
   20afc:	f383 8812 	msr	BASEPRI_MAX, r3
   20b00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b04:	4628      	mov	r0, r5
   20b06:	f7ff fe37 	bl	20778 <z_spin_lock_valid>
   20b0a:	b968      	cbnz	r0, 20b28 <queue_insert+0x48>
   20b0c:	2394      	movs	r3, #148	; 0x94
   20b0e:	4a3b      	ldr	r2, [pc, #236]	; (20bfc <queue_insert+0x11c>)
   20b10:	493b      	ldr	r1, [pc, #236]	; (20c00 <queue_insert+0x120>)
   20b12:	483c      	ldr	r0, [pc, #240]	; (20c04 <queue_insert+0x124>)
   20b14:	f005 fba3 	bl	2625e <assert_print>
   20b18:	4629      	mov	r1, r5
   20b1a:	483b      	ldr	r0, [pc, #236]	; (20c08 <queue_insert+0x128>)
   20b1c:	f005 fb9f 	bl	2625e <assert_print>
   20b20:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b22:	4836      	ldr	r0, [pc, #216]	; (20bfc <queue_insert+0x11c>)
   20b24:	f005 fb94 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   20b28:	4628      	mov	r0, r5
   20b2a:	f7ff fe41 	bl	207b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   20b2e:	f1ba 0f00 	cmp.w	sl, #0
   20b32:	d000      	beq.n	20b36 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   20b34:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20b36:	f104 000c 	add.w	r0, r4, #12
   20b3a:	f001 fe33 	bl	227a4 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   20b3e:	b158      	cbz	r0, 20b58 <queue_insert+0x78>
   20b40:	2300      	movs	r3, #0
   20b42:	f8c0 8014 	str.w	r8, [r0, #20]
   20b46:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   20b48:	f001 f854 	bl	21bf4 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20b4c:	4628      	mov	r0, r5
   20b4e:	4639      	mov	r1, r7
   20b50:	f001 f8dc 	bl	21d0c <z_reschedule>
		return 0;
   20b54:	2000      	movs	r0, #0
   20b56:	e01c      	b.n	20b92 <queue_insert+0xb2>
	if (alloc) {
   20b58:	f1b9 0f00 	cmp.w	r9, #0
   20b5c:	d02b      	beq.n	20bb6 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   20b5e:	2108      	movs	r1, #8
   20b60:	f003 f8da 	bl	23d18 <z_thread_aligned_alloc>
		if (anode == NULL) {
   20b64:	b9b8      	cbnz	r0, 20b96 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b66:	4628      	mov	r0, r5
   20b68:	f7ff fe14 	bl	20794 <z_spin_unlock_valid>
   20b6c:	b958      	cbnz	r0, 20b86 <queue_insert+0xa6>
   20b6e:	23c2      	movs	r3, #194	; 0xc2
   20b70:	4a22      	ldr	r2, [pc, #136]	; (20bfc <queue_insert+0x11c>)
   20b72:	4926      	ldr	r1, [pc, #152]	; (20c0c <queue_insert+0x12c>)
   20b74:	4823      	ldr	r0, [pc, #140]	; (20c04 <queue_insert+0x124>)
   20b76:	f005 fb72 	bl	2625e <assert_print>
   20b7a:	4629      	mov	r1, r5
   20b7c:	4824      	ldr	r0, [pc, #144]	; (20c10 <queue_insert+0x130>)
   20b7e:	f005 fb6e 	bl	2625e <assert_print>
   20b82:	21c2      	movs	r1, #194	; 0xc2
   20b84:	e7cd      	b.n	20b22 <queue_insert+0x42>
	__asm__ volatile(
   20b86:	f387 8811 	msr	BASEPRI, r7
   20b8a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20b8e:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   20b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   20b96:	2201      	movs	r2, #1
		anode->data = data;
   20b98:	f8c0 8004 	str.w	r8, [r0, #4]
   20b9c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20b9e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20ba0:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20ba4:	b95e      	cbnz	r6, 20bbe <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20ba6:	6822      	ldr	r2, [r4, #0]
   20ba8:	430a      	orrs	r2, r1
   20baa:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20bac:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   20bae:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20bb0:	b96a      	cbnz	r2, 20bce <queue_insert+0xee>
	list->tail = node;
   20bb2:	6060      	str	r0, [r4, #4]
}
   20bb4:	e00b      	b.n	20bce <queue_insert+0xee>
}
   20bb6:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   20bb8:	f8c8 9000 	str.w	r9, [r8]
}
   20bbc:	e7ef      	b.n	20b9e <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20bbe:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20bc0:	2a03      	cmp	r2, #3
   20bc2:	d810      	bhi.n	20be6 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20bc4:	6001      	str	r1, [r0, #0]
	return list->tail;
   20bc6:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   20bc8:	b939      	cbnz	r1, 20bda <queue_insert+0xfa>
	list->head = node;
   20bca:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20bce:	2104      	movs	r1, #4
   20bd0:	f104 0014 	add.w	r0, r4, #20
   20bd4:	f00a f87a 	bl	2accc <z_handle_obj_poll_events>
   20bd8:	e7b8      	b.n	20b4c <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20bda:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20bdc:	f002 0203 	and.w	r2, r2, #3
   20be0:	4302      	orrs	r2, r0
   20be2:	600a      	str	r2, [r1, #0]
   20be4:	e7e5      	b.n	20bb2 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20be6:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   20bea:	430a      	orrs	r2, r1
   20bec:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20bee:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20bf0:	f002 0203 	and.w	r2, r2, #3
   20bf4:	ea40 0302 	orr.w	r3, r0, r2
   20bf8:	6033      	str	r3, [r6, #0]
}
   20bfa:	e7e8      	b.n	20bce <queue_insert+0xee>
   20bfc:	0002df19 	.word	0x0002df19
   20c00:	0002df72 	.word	0x0002df72
   20c04:	0002d095 	.word	0x0002d095
   20c08:	0002df87 	.word	0x0002df87
   20c0c:	0002df46 	.word	0x0002df46
   20c10:	0002df5d 	.word	0x0002df5d

00020c14 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20c18:	4606      	mov	r6, r0
   20c1a:	4691      	mov	r9, r2
   20c1c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20c1e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20c22:	f04f 0320 	mov.w	r3, #32
   20c26:	f3ef 8811 	mrs	r8, BASEPRI
   20c2a:	f383 8812 	msr	BASEPRI_MAX, r3
   20c2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c32:	4628      	mov	r0, r5
   20c34:	f7ff fda0 	bl	20778 <z_spin_lock_valid>
   20c38:	b968      	cbnz	r0, 20c56 <z_impl_k_queue_get+0x42>
   20c3a:	2394      	movs	r3, #148	; 0x94
   20c3c:	4a23      	ldr	r2, [pc, #140]	; (20ccc <z_impl_k_queue_get+0xb8>)
   20c3e:	4924      	ldr	r1, [pc, #144]	; (20cd0 <z_impl_k_queue_get+0xbc>)
   20c40:	4824      	ldr	r0, [pc, #144]	; (20cd4 <z_impl_k_queue_get+0xc0>)
   20c42:	f005 fb0c 	bl	2625e <assert_print>
   20c46:	4629      	mov	r1, r5
   20c48:	4823      	ldr	r0, [pc, #140]	; (20cd8 <z_impl_k_queue_get+0xc4>)
   20c4a:	f005 fb08 	bl	2625e <assert_print>
   20c4e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c50:	481e      	ldr	r0, [pc, #120]	; (20ccc <z_impl_k_queue_get+0xb8>)
   20c52:	f005 fafd 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   20c56:	4628      	mov	r0, r5
   20c58:	f7ff fdaa 	bl	207b0 <z_spin_lock_set_owner>
	return list->head;
   20c5c:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20c5e:	b1ec      	cbz	r4, 20c9c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20c60:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20c62:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20c64:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20c68:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20c6a:	4620      	mov	r0, r4
   20c6c:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   20c70:	6033      	str	r3, [r6, #0]
	list->tail = node;
   20c72:	bf08      	it	eq
   20c74:	6073      	streq	r3, [r6, #4]
   20c76:	f009 fe76 	bl	2a966 <z_queue_node_peek>
   20c7a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c7c:	4628      	mov	r0, r5
   20c7e:	f7ff fd89 	bl	20794 <z_spin_unlock_valid>
   20c82:	b9d8      	cbnz	r0, 20cbc <z_impl_k_queue_get+0xa8>
   20c84:	23c2      	movs	r3, #194	; 0xc2
   20c86:	4a11      	ldr	r2, [pc, #68]	; (20ccc <z_impl_k_queue_get+0xb8>)
   20c88:	4914      	ldr	r1, [pc, #80]	; (20cdc <z_impl_k_queue_get+0xc8>)
   20c8a:	4812      	ldr	r0, [pc, #72]	; (20cd4 <z_impl_k_queue_get+0xc0>)
   20c8c:	f005 fae7 	bl	2625e <assert_print>
   20c90:	4629      	mov	r1, r5
   20c92:	4813      	ldr	r0, [pc, #76]	; (20ce0 <z_impl_k_queue_get+0xcc>)
   20c94:	f005 fae3 	bl	2625e <assert_print>
   20c98:	21c2      	movs	r1, #194	; 0xc2
   20c9a:	e7d9      	b.n	20c50 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20c9c:	ea59 0307 	orrs.w	r3, r9, r7
   20ca0:	d0ec      	beq.n	20c7c <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20ca2:	4641      	mov	r1, r8
   20ca4:	4628      	mov	r0, r5
   20ca6:	e9cd 9700 	strd	r9, r7, [sp]
   20caa:	f106 020c 	add.w	r2, r6, #12
   20cae:	f001 fafb 	bl	222a8 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   20cb2:	b938      	cbnz	r0, 20cc4 <z_impl_k_queue_get+0xb0>
   20cb4:	4b0b      	ldr	r3, [pc, #44]	; (20ce4 <z_impl_k_queue_get+0xd0>)
   20cb6:	689b      	ldr	r3, [r3, #8]
   20cb8:	695c      	ldr	r4, [r3, #20]
   20cba:	e003      	b.n	20cc4 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   20cbc:	f388 8811 	msr	BASEPRI, r8
   20cc0:	f3bf 8f6f 	isb	sy
}
   20cc4:	4620      	mov	r0, r4
   20cc6:	b003      	add	sp, #12
   20cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20ccc:	0002df19 	.word	0x0002df19
   20cd0:	0002df72 	.word	0x0002df72
   20cd4:	0002d095 	.word	0x0002d095
   20cd8:	0002df87 	.word	0x0002df87
   20cdc:	0002df46 	.word	0x0002df46
   20ce0:	0002df5d 	.word	0x0002df5d
   20ce4:	20022b9c 	.word	0x20022b9c

00020ce8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20ce8:	b538      	push	{r3, r4, r5, lr}
   20cea:	4604      	mov	r4, r0
	__asm__ volatile(
   20cec:	f04f 0320 	mov.w	r3, #32
   20cf0:	f3ef 8511 	mrs	r5, BASEPRI
   20cf4:	f383 8812 	msr	BASEPRI_MAX, r3
   20cf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cfc:	4817      	ldr	r0, [pc, #92]	; (20d5c <z_impl_k_sem_give+0x74>)
   20cfe:	f7ff fd3b 	bl	20778 <z_spin_lock_valid>
   20d02:	b968      	cbnz	r0, 20d20 <z_impl_k_sem_give+0x38>
   20d04:	2394      	movs	r3, #148	; 0x94
   20d06:	4a16      	ldr	r2, [pc, #88]	; (20d60 <z_impl_k_sem_give+0x78>)
   20d08:	4916      	ldr	r1, [pc, #88]	; (20d64 <z_impl_k_sem_give+0x7c>)
   20d0a:	4817      	ldr	r0, [pc, #92]	; (20d68 <z_impl_k_sem_give+0x80>)
   20d0c:	f005 faa7 	bl	2625e <assert_print>
   20d10:	4912      	ldr	r1, [pc, #72]	; (20d5c <z_impl_k_sem_give+0x74>)
   20d12:	4816      	ldr	r0, [pc, #88]	; (20d6c <z_impl_k_sem_give+0x84>)
   20d14:	f005 faa3 	bl	2625e <assert_print>
   20d18:	2194      	movs	r1, #148	; 0x94
   20d1a:	4811      	ldr	r0, [pc, #68]	; (20d60 <z_impl_k_sem_give+0x78>)
   20d1c:	f005 fa98 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   20d20:	480e      	ldr	r0, [pc, #56]	; (20d5c <z_impl_k_sem_give+0x74>)
   20d22:	f7ff fd45 	bl	207b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   20d26:	4620      	mov	r0, r4
   20d28:	f001 fd3c 	bl	227a4 <z_unpend_first_thread>

	if (thread != NULL) {
   20d2c:	b148      	cbz	r0, 20d42 <z_impl_k_sem_give+0x5a>
   20d2e:	2200      	movs	r2, #0
   20d30:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20d32:	f000 ff5f 	bl	21bf4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20d36:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   20d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20d3c:	4807      	ldr	r0, [pc, #28]	; (20d5c <z_impl_k_sem_give+0x74>)
   20d3e:	f000 bfe5 	b.w	21d0c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20d42:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20d46:	429a      	cmp	r2, r3
   20d48:	bf18      	it	ne
   20d4a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20d4c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20d4e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20d50:	f104 0010 	add.w	r0, r4, #16
   20d54:	f009 ffba 	bl	2accc <z_handle_obj_poll_events>
}
   20d58:	e7ed      	b.n	20d36 <z_impl_k_sem_give+0x4e>
   20d5a:	bf00      	nop
   20d5c:	20022bc8 	.word	0x20022bc8
   20d60:	0002df19 	.word	0x0002df19
   20d64:	0002df72 	.word	0x0002df72
   20d68:	0002d095 	.word	0x0002d095
   20d6c:	0002df87 	.word	0x0002df87

00020d70 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20d72:	4604      	mov	r4, r0
   20d74:	4616      	mov	r6, r2
   20d76:	461d      	mov	r5, r3
   20d78:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   20d7c:	b17b      	cbz	r3, 20d9e <z_impl_k_sem_take+0x2e>
   20d7e:	ea52 0305 	orrs.w	r3, r2, r5
   20d82:	d00c      	beq.n	20d9e <z_impl_k_sem_take+0x2e>
   20d84:	492d      	ldr	r1, [pc, #180]	; (20e3c <z_impl_k_sem_take+0xcc>)
   20d86:	2379      	movs	r3, #121	; 0x79
   20d88:	4a2d      	ldr	r2, [pc, #180]	; (20e40 <z_impl_k_sem_take+0xd0>)
   20d8a:	482e      	ldr	r0, [pc, #184]	; (20e44 <z_impl_k_sem_take+0xd4>)
   20d8c:	f005 fa67 	bl	2625e <assert_print>
   20d90:	482d      	ldr	r0, [pc, #180]	; (20e48 <z_impl_k_sem_take+0xd8>)
   20d92:	f005 fa64 	bl	2625e <assert_print>
   20d96:	2179      	movs	r1, #121	; 0x79
   20d98:	4829      	ldr	r0, [pc, #164]	; (20e40 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d9a:	f005 fa59 	bl	26250 <assert_post_action>
   20d9e:	f04f 0320 	mov.w	r3, #32
   20da2:	f3ef 8711 	mrs	r7, BASEPRI
   20da6:	f383 8812 	msr	BASEPRI_MAX, r3
   20daa:	f3bf 8f6f 	isb	sy
   20dae:	4827      	ldr	r0, [pc, #156]	; (20e4c <z_impl_k_sem_take+0xdc>)
   20db0:	f7ff fce2 	bl	20778 <z_spin_lock_valid>
   20db4:	b960      	cbnz	r0, 20dd0 <z_impl_k_sem_take+0x60>
   20db6:	2394      	movs	r3, #148	; 0x94
   20db8:	4a25      	ldr	r2, [pc, #148]	; (20e50 <z_impl_k_sem_take+0xe0>)
   20dba:	4926      	ldr	r1, [pc, #152]	; (20e54 <z_impl_k_sem_take+0xe4>)
   20dbc:	4821      	ldr	r0, [pc, #132]	; (20e44 <z_impl_k_sem_take+0xd4>)
   20dbe:	f005 fa4e 	bl	2625e <assert_print>
   20dc2:	4922      	ldr	r1, [pc, #136]	; (20e4c <z_impl_k_sem_take+0xdc>)
   20dc4:	4824      	ldr	r0, [pc, #144]	; (20e58 <z_impl_k_sem_take+0xe8>)
   20dc6:	f005 fa4a 	bl	2625e <assert_print>
   20dca:	2194      	movs	r1, #148	; 0x94
   20dcc:	4820      	ldr	r0, [pc, #128]	; (20e50 <z_impl_k_sem_take+0xe0>)
   20dce:	e7e4      	b.n	20d9a <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   20dd0:	481e      	ldr	r0, [pc, #120]	; (20e4c <z_impl_k_sem_take+0xdc>)
   20dd2:	f7ff fced 	bl	207b0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   20dd6:	68a3      	ldr	r3, [r4, #8]
   20dd8:	b1c3      	cbz	r3, 20e0c <z_impl_k_sem_take+0x9c>
		sem->count--;
   20dda:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ddc:	481b      	ldr	r0, [pc, #108]	; (20e4c <z_impl_k_sem_take+0xdc>)
   20dde:	60a3      	str	r3, [r4, #8]
   20de0:	f7ff fcd8 	bl	20794 <z_spin_unlock_valid>
   20de4:	b958      	cbnz	r0, 20dfe <z_impl_k_sem_take+0x8e>
   20de6:	23c2      	movs	r3, #194	; 0xc2
   20de8:	4a19      	ldr	r2, [pc, #100]	; (20e50 <z_impl_k_sem_take+0xe0>)
   20dea:	491c      	ldr	r1, [pc, #112]	; (20e5c <z_impl_k_sem_take+0xec>)
   20dec:	4815      	ldr	r0, [pc, #84]	; (20e44 <z_impl_k_sem_take+0xd4>)
   20dee:	f005 fa36 	bl	2625e <assert_print>
   20df2:	4916      	ldr	r1, [pc, #88]	; (20e4c <z_impl_k_sem_take+0xdc>)
   20df4:	481a      	ldr	r0, [pc, #104]	; (20e60 <z_impl_k_sem_take+0xf0>)
   20df6:	f005 fa32 	bl	2625e <assert_print>
   20dfa:	21c2      	movs	r1, #194	; 0xc2
   20dfc:	e7e6      	b.n	20dcc <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   20dfe:	f387 8811 	msr	BASEPRI, r7
   20e02:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   20e06:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   20e08:	b003      	add	sp, #12
   20e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20e0c:	ea56 0305 	orrs.w	r3, r6, r5
   20e10:	d10b      	bne.n	20e2a <z_impl_k_sem_take+0xba>
   20e12:	480e      	ldr	r0, [pc, #56]	; (20e4c <z_impl_k_sem_take+0xdc>)
   20e14:	f7ff fcbe 	bl	20794 <z_spin_unlock_valid>
   20e18:	2800      	cmp	r0, #0
   20e1a:	d0e4      	beq.n	20de6 <z_impl_k_sem_take+0x76>
   20e1c:	f387 8811 	msr	BASEPRI, r7
   20e20:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20e24:	f06f 000f 	mvn.w	r0, #15
   20e28:	e7ee      	b.n	20e08 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20e2a:	4622      	mov	r2, r4
   20e2c:	4639      	mov	r1, r7
   20e2e:	e9cd 6500 	strd	r6, r5, [sp]
   20e32:	4806      	ldr	r0, [pc, #24]	; (20e4c <z_impl_k_sem_take+0xdc>)
   20e34:	f001 fa38 	bl	222a8 <z_pend_curr>
	return ret;
   20e38:	e7e6      	b.n	20e08 <z_impl_k_sem_take+0x98>
   20e3a:	bf00      	nop
   20e3c:	00032376 	.word	0x00032376
   20e40:	00032356 	.word	0x00032356
   20e44:	0002d095 	.word	0x0002d095
   20e48:	00030d1f 	.word	0x00030d1f
   20e4c:	20022bc8 	.word	0x20022bc8
   20e50:	0002df19 	.word	0x0002df19
   20e54:	0002df72 	.word	0x0002df72
   20e58:	0002df87 	.word	0x0002df87
   20e5c:	0002df46 	.word	0x0002df46
   20e60:	0002df5d 	.word	0x0002df5d

00020e64 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   20e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   20e66:	2400      	movs	r4, #0
   20e68:	4b08      	ldr	r3, [pc, #32]	; (20e8c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   20e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	struct k_work_queue_config cfg = {
   20e6e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   20e70:	ab02      	add	r3, sp, #8
   20e72:	9300      	str	r3, [sp, #0]
   20e74:	4906      	ldr	r1, [pc, #24]	; (20e90 <k_sys_work_q_init+0x2c>)
   20e76:	f04f 33ff 	mov.w	r3, #4294967295
   20e7a:	4806      	ldr	r0, [pc, #24]	; (20e94 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   20e7c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   20e80:	f000 fac0 	bl	21404 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   20e84:	4620      	mov	r0, r4
   20e86:	b004      	add	sp, #16
   20e88:	bd10      	pop	{r4, pc}
   20e8a:	bf00      	nop
   20e8c:	000323c4 	.word	0x000323c4
   20e90:	20034d70 	.word	0x20034d70
   20e94:	20009d18 	.word	0x20009d18

00020e98 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   20e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e9c:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e9e:	4e6e      	ldr	r6, [pc, #440]	; (21058 <work_queue_main+0x1c0>)
	return list->head;
   20ea0:	4f6e      	ldr	r7, [pc, #440]	; (2105c <work_queue_main+0x1c4>)
   20ea2:	b085      	sub	sp, #20
	__asm__ volatile(
   20ea4:	f04f 0320 	mov.w	r3, #32
   20ea8:	f3ef 8811 	mrs	r8, BASEPRI
   20eac:	f383 8812 	msr	BASEPRI_MAX, r3
   20eb0:	f3bf 8f6f 	isb	sy
   20eb4:	4630      	mov	r0, r6
   20eb6:	f7ff fc5f 	bl	20778 <z_spin_lock_valid>
   20eba:	b968      	cbnz	r0, 20ed8 <work_queue_main+0x40>
   20ebc:	2394      	movs	r3, #148	; 0x94
   20ebe:	4a68      	ldr	r2, [pc, #416]	; (21060 <work_queue_main+0x1c8>)
   20ec0:	4968      	ldr	r1, [pc, #416]	; (21064 <work_queue_main+0x1cc>)
   20ec2:	4869      	ldr	r0, [pc, #420]	; (21068 <work_queue_main+0x1d0>)
   20ec4:	f005 f9cb 	bl	2625e <assert_print>
   20ec8:	4963      	ldr	r1, [pc, #396]	; (21058 <work_queue_main+0x1c0>)
   20eca:	4868      	ldr	r0, [pc, #416]	; (2106c <work_queue_main+0x1d4>)
   20ecc:	f005 f9c7 	bl	2625e <assert_print>
   20ed0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ed2:	4863      	ldr	r0, [pc, #396]	; (21060 <work_queue_main+0x1c8>)
   20ed4:	f005 f9bc 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ed8:	4630      	mov	r0, r6
   20eda:	f7ff fc69 	bl	207b0 <z_spin_lock_set_owner>
   20ede:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   20ee2:	b9ad      	cbnz	r5, 20f10 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   20ee4:	2102      	movs	r1, #2
   20ee6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   20eea:	f009 fd7a 	bl	2a9e2 <flag_test_and_clear>
   20eee:	2800      	cmp	r0, #0
   20ef0:	d135      	bne.n	20f5e <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   20ef2:	2300      	movs	r3, #0
   20ef4:	f04f 32ff 	mov.w	r2, #4294967295
   20ef8:	9302      	str	r3, [sp, #8]
   20efa:	f04f 33ff 	mov.w	r3, #4294967295
   20efe:	4641      	mov	r1, r8
   20f00:	e9cd 2300 	strd	r2, r3, [sp]
   20f04:	4630      	mov	r0, r6
   20f06:	f104 0290 	add.w	r2, r4, #144	; 0x90
   20f0a:	f001 ff41 	bl	22d90 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   20f0e:	e7c9      	b.n	20ea4 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20f10:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   20f14:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20f16:	4295      	cmp	r5, r2
	list->tail = node;
   20f18:	bf08      	it	eq
   20f1a:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   20f1e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   20f22:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f26:	4630      	mov	r0, r6
   20f28:	f043 0302 	orr.w	r3, r3, #2
   20f2c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   20f30:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   20f32:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   20f36:	f023 0304 	bic.w	r3, r3, #4
   20f3a:	f043 0301 	orr.w	r3, r3, #1
   20f3e:	60eb      	str	r3, [r5, #12]
   20f40:	f7ff fc28 	bl	20794 <z_spin_unlock_valid>
   20f44:	b9a8      	cbnz	r0, 20f72 <work_queue_main+0xda>
   20f46:	23c2      	movs	r3, #194	; 0xc2
   20f48:	4a45      	ldr	r2, [pc, #276]	; (21060 <work_queue_main+0x1c8>)
   20f4a:	4949      	ldr	r1, [pc, #292]	; (21070 <work_queue_main+0x1d8>)
   20f4c:	4846      	ldr	r0, [pc, #280]	; (21068 <work_queue_main+0x1d0>)
   20f4e:	f005 f986 	bl	2625e <assert_print>
   20f52:	4941      	ldr	r1, [pc, #260]	; (21058 <work_queue_main+0x1c0>)
   20f54:	4847      	ldr	r0, [pc, #284]	; (21074 <work_queue_main+0x1dc>)
   20f56:	f005 f982 	bl	2625e <assert_print>
   20f5a:	21c2      	movs	r1, #194	; 0xc2
   20f5c:	e7b9      	b.n	20ed2 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   20f5e:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   20f62:	2200      	movs	r2, #0
   20f64:	2101      	movs	r1, #1
   20f66:	4628      	mov	r0, r5
   20f68:	f001 feb4 	bl	22cd4 <z_sched_wake>
   20f6c:	2800      	cmp	r0, #0
   20f6e:	d1f8      	bne.n	20f62 <work_queue_main+0xca>
   20f70:	e7bf      	b.n	20ef2 <work_queue_main+0x5a>
	__asm__ volatile(
   20f72:	f388 8811 	msr	BASEPRI, r8
   20f76:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   20f7a:	f1b9 0f00 	cmp.w	r9, #0
   20f7e:	d10a      	bne.n	20f96 <work_queue_main+0xfe>
   20f80:	493d      	ldr	r1, [pc, #244]	; (21078 <work_queue_main+0x1e0>)
   20f82:	4839      	ldr	r0, [pc, #228]	; (21068 <work_queue_main+0x1d0>)
   20f84:	f240 239b 	movw	r3, #667	; 0x29b
   20f88:	4a3c      	ldr	r2, [pc, #240]	; (2107c <work_queue_main+0x1e4>)
   20f8a:	f005 f968 	bl	2625e <assert_print>
   20f8e:	f240 219b 	movw	r1, #667	; 0x29b
   20f92:	483a      	ldr	r0, [pc, #232]	; (2107c <work_queue_main+0x1e4>)
   20f94:	e79e      	b.n	20ed4 <work_queue_main+0x3c>
		handler(work);
   20f96:	4628      	mov	r0, r5
   20f98:	47c8      	blx	r9
	__asm__ volatile(
   20f9a:	f04f 0320 	mov.w	r3, #32
   20f9e:	f3ef 8a11 	mrs	sl, BASEPRI
   20fa2:	f383 8812 	msr	BASEPRI_MAX, r3
   20fa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20faa:	4630      	mov	r0, r6
   20fac:	f7ff fbe4 	bl	20778 <z_spin_lock_valid>
   20fb0:	2800      	cmp	r0, #0
   20fb2:	d083      	beq.n	20ebc <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   20fb4:	4630      	mov	r0, r6
   20fb6:	f7ff fbfb 	bl	207b0 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   20fba:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20fbc:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   20fbe:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20fc2:	d417      	bmi.n	20ff4 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   20fc4:	60ea      	str	r2, [r5, #12]
   20fc6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20fca:	4630      	mov	r0, r6
   20fcc:	f023 0302 	bic.w	r3, r3, #2
   20fd0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   20fd4:	f3c3 2500 	ubfx	r5, r3, #8, #1
   20fd8:	f7ff fbdc 	bl	20794 <z_spin_unlock_valid>
   20fdc:	2800      	cmp	r0, #0
   20fde:	d0b2      	beq.n	20f46 <work_queue_main+0xae>
	__asm__ volatile(
   20fe0:	f38a 8811 	msr	BASEPRI, sl
   20fe4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   20fe8:	2d00      	cmp	r5, #0
   20fea:	f47f af5b 	bne.w	20ea4 <work_queue_main+0xc>
	z_impl_k_yield();
   20fee:	f001 fc35 	bl	2285c <z_impl_k_yield>
}
   20ff2:	e757      	b.n	20ea4 <work_queue_main+0xc>
	return list->head;
   20ff4:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   20ff6:	f023 0303 	bic.w	r3, r3, #3
   20ffa:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20ffc:	2800      	cmp	r0, #0
   20ffe:	d0e2      	beq.n	20fc6 <work_queue_main+0x12e>
	return node->next;
   21000:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   21004:	46c3      	mov	fp, r8
	return node->next;
   21006:	f8d0 9000 	ldr.w	r9, [r0]
   2100a:	2800      	cmp	r0, #0
   2100c:	d0db      	beq.n	20fc6 <work_queue_main+0x12e>
		if (wc->work == work) {
   2100e:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   21010:	4602      	mov	r2, r0
		if (wc->work == work) {
   21012:	429d      	cmp	r5, r3
   21014:	d10d      	bne.n	21032 <work_queue_main+0x19a>
   21016:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21018:	f1b8 0f00 	cmp.w	r8, #0
   2101c:	d112      	bne.n	21044 <work_queue_main+0x1ac>
   2101e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   21020:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   21022:	4283      	cmp	r3, r0
   21024:	d100      	bne.n	21028 <work_queue_main+0x190>
	list->tail = node;
   21026:	607a      	str	r2, [r7, #4]
	parent->next = child;
   21028:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   2102c:	f7ff fe5c 	bl	20ce8 <z_impl_k_sem_give>
}
   21030:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21032:	f1b9 0f00 	cmp.w	r9, #0
   21036:	d00d      	beq.n	21054 <work_queue_main+0x1bc>
	return node->next;
   21038:	f8d9 3000 	ldr.w	r3, [r9]
   2103c:	4648      	mov	r0, r9
   2103e:	4690      	mov	r8, r2
   21040:	4699      	mov	r9, r3
   21042:	e7e2      	b.n	2100a <work_queue_main+0x172>
	parent->next = child;
   21044:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   21048:	687b      	ldr	r3, [r7, #4]
   2104a:	4283      	cmp	r3, r0
	list->tail = node;
   2104c:	bf08      	it	eq
   2104e:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   21052:	e7e9      	b.n	21028 <work_queue_main+0x190>
   21054:	464b      	mov	r3, r9
   21056:	e7f1      	b.n	2103c <work_queue_main+0x1a4>
   21058:	20022bd4 	.word	0x20022bd4
   2105c:	20022bcc 	.word	0x20022bcc
   21060:	0002df19 	.word	0x0002df19
   21064:	0002df72 	.word	0x0002df72
   21068:	0002d095 	.word	0x0002d095
   2106c:	0002df87 	.word	0x0002df87
   21070:	0002df46 	.word	0x0002df46
   21074:	0002df5d 	.word	0x0002df5d
   21078:	000323ee 	.word	0x000323ee
   2107c:	000323cd 	.word	0x000323cd

00021080 <cancel_sync_locked>:
{
   21080:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21082:	68c3      	ldr	r3, [r0, #12]
{
   21084:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   21086:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2108a:	079b      	lsls	r3, r3, #30
{
   2108c:	460c      	mov	r4, r1
	if (ret) {
   2108e:	d50d      	bpl.n	210ac <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21090:	2201      	movs	r2, #1
   21092:	2100      	movs	r1, #0
   21094:	f104 0008 	add.w	r0, r4, #8
   21098:	f009 fc93 	bl	2a9c2 <z_impl_k_sem_init>
	parent->next = child;
   2109c:	2300      	movs	r3, #0
   2109e:	6023      	str	r3, [r4, #0]
	return list->tail;
   210a0:	4b05      	ldr	r3, [pc, #20]	; (210b8 <cancel_sync_locked+0x38>)
	canceler->work = work;
   210a2:	6065      	str	r5, [r4, #4]
   210a4:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   210a6:	b91a      	cbnz	r2, 210b0 <cancel_sync_locked+0x30>
	list->head = node;
   210a8:	e9c3 4400 	strd	r4, r4, [r3]
}
   210ac:	4630      	mov	r0, r6
   210ae:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   210b0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   210b2:	605c      	str	r4, [r3, #4]
}
   210b4:	e7fa      	b.n	210ac <cancel_sync_locked+0x2c>
   210b6:	bf00      	nop
   210b8:	20022bcc 	.word	0x20022bcc

000210bc <submit_to_queue_locked>:
{
   210bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   210be:	68c3      	ldr	r3, [r0, #12]
{
   210c0:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   210c2:	079a      	lsls	r2, r3, #30
{
   210c4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   210c6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   210ca:	d439      	bmi.n	21140 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   210cc:	075b      	lsls	r3, r3, #29
   210ce:	d425      	bmi.n	2111c <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   210d0:	680b      	ldr	r3, [r1, #0]
   210d2:	b90b      	cbnz	r3, 210d8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   210d4:	6883      	ldr	r3, [r0, #8]
   210d6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   210d8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   210da:	07dd      	lsls	r5, r3, #31
   210dc:	d521      	bpl.n	21122 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   210de:	68a3      	ldr	r3, [r4, #8]
   210e0:	b95b      	cbnz	r3, 210fa <submit_to_queue_locked+0x3e>
   210e2:	4928      	ldr	r1, [pc, #160]	; (21184 <submit_to_queue_locked+0xc8>)
   210e4:	4828      	ldr	r0, [pc, #160]	; (21188 <submit_to_queue_locked+0xcc>)
   210e6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   210ea:	4a28      	ldr	r2, [pc, #160]	; (2118c <submit_to_queue_locked+0xd0>)
   210ec:	f005 f8b7 	bl	2625e <assert_print>
   210f0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   210f4:	4825      	ldr	r0, [pc, #148]	; (2118c <submit_to_queue_locked+0xd0>)
   210f6:	f005 f8ab 	bl	26250 <assert_post_action>
			ret = 2;
   210fa:	2602      	movs	r6, #2
			*queuep = work->queue;
   210fc:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   210fe:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   21100:	2d00      	cmp	r5, #0
   21102:	d03c      	beq.n	2117e <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21104:	4b22      	ldr	r3, [pc, #136]	; (21190 <submit_to_queue_locked+0xd4>)
   21106:	689b      	ldr	r3, [r3, #8]
   21108:	42ab      	cmp	r3, r5
   2110a:	d00c      	beq.n	21126 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   2110c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21110:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21112:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21116:	d416      	bmi.n	21146 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   21118:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2111c:	2300      	movs	r3, #0
   2111e:	603b      	str	r3, [r7, #0]
	return ret;
   21120:	e027      	b.n	21172 <submit_to_queue_locked+0xb6>
		ret = 1;
   21122:	2601      	movs	r6, #1
   21124:	e7eb      	b.n	210fe <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21126:	f009 fbfb 	bl	2a920 <k_is_in_isr>
   2112a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   2112e:	2800      	cmp	r0, #0
   21130:	d1ee      	bne.n	21110 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21132:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21134:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21138:	d5ee      	bpl.n	21118 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   2113a:	b152      	cbz	r2, 21152 <submit_to_queue_locked+0x96>
   2113c:	075b      	lsls	r3, r3, #29
   2113e:	d408      	bmi.n	21152 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   21140:	f06f 060f 	mvn.w	r6, #15
   21144:	e7ea      	b.n	2111c <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   21146:	2a00      	cmp	r2, #0
   21148:	d1fa      	bne.n	21140 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   2114a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   2114e:	2b00      	cmp	r3, #0
   21150:	d1f6      	bne.n	21140 <submit_to_queue_locked+0x84>
	parent->next = child;
   21152:	2300      	movs	r3, #0
   21154:	6023      	str	r3, [r4, #0]
	return list->tail;
   21156:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   2115a:	b963      	cbnz	r3, 21176 <submit_to_queue_locked+0xba>
	list->head = node;
   2115c:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   21160:	4628      	mov	r0, r5
   21162:	f009 fc57 	bl	2aa14 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   21166:	68e3      	ldr	r3, [r4, #12]
   21168:	f043 0304 	orr.w	r3, r3, #4
   2116c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2116e:	683b      	ldr	r3, [r7, #0]
   21170:	60a3      	str	r3, [r4, #8]
}
   21172:	4630      	mov	r0, r6
   21174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   21176:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21178:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   2117c:	e7f0      	b.n	21160 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   2117e:	f06f 0615 	mvn.w	r6, #21
   21182:	e7cb      	b.n	2111c <submit_to_queue_locked+0x60>
   21184:	00032405 	.word	0x00032405
   21188:	0002d095 	.word	0x0002d095
   2118c:	000323cd 	.word	0x000323cd
   21190:	20022b9c 	.word	0x20022b9c

00021194 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   21194:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21196:	4604      	mov	r4, r0
	__asm__ volatile(
   21198:	f04f 0320 	mov.w	r3, #32
   2119c:	f3ef 8511 	mrs	r5, BASEPRI
   211a0:	f383 8812 	msr	BASEPRI_MAX, r3
   211a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   211a8:	481c      	ldr	r0, [pc, #112]	; (2121c <work_timeout+0x88>)
   211aa:	f7ff fae5 	bl	20778 <z_spin_lock_valid>
   211ae:	b968      	cbnz	r0, 211cc <work_timeout+0x38>
   211b0:	2394      	movs	r3, #148	; 0x94
   211b2:	4a1b      	ldr	r2, [pc, #108]	; (21220 <work_timeout+0x8c>)
   211b4:	491b      	ldr	r1, [pc, #108]	; (21224 <work_timeout+0x90>)
   211b6:	481c      	ldr	r0, [pc, #112]	; (21228 <work_timeout+0x94>)
   211b8:	f005 f851 	bl	2625e <assert_print>
   211bc:	4917      	ldr	r1, [pc, #92]	; (2121c <work_timeout+0x88>)
   211be:	481b      	ldr	r0, [pc, #108]	; (2122c <work_timeout+0x98>)
   211c0:	f005 f84d 	bl	2625e <assert_print>
   211c4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211c6:	4816      	ldr	r0, [pc, #88]	; (21220 <work_timeout+0x8c>)
   211c8:	f005 f842 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   211cc:	4813      	ldr	r0, [pc, #76]	; (2121c <work_timeout+0x88>)
   211ce:	f7ff faef 	bl	207b0 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   211d2:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   211d4:	2103      	movs	r1, #3
   211d6:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   211d8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   211da:	f1a4 0610 	sub.w	r6, r4, #16
   211de:	f009 fc00 	bl	2a9e2 <flag_test_and_clear>
   211e2:	b128      	cbz	r0, 211f0 <work_timeout+0x5c>
		queue = dw->queue;
   211e4:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   211e6:	4630      	mov	r0, r6
   211e8:	a901      	add	r1, sp, #4
		queue = dw->queue;
   211ea:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   211ec:	f7ff ff66 	bl	210bc <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211f0:	480a      	ldr	r0, [pc, #40]	; (2121c <work_timeout+0x88>)
   211f2:	f7ff facf 	bl	20794 <z_spin_unlock_valid>
   211f6:	b958      	cbnz	r0, 21210 <work_timeout+0x7c>
   211f8:	23c2      	movs	r3, #194	; 0xc2
   211fa:	4a09      	ldr	r2, [pc, #36]	; (21220 <work_timeout+0x8c>)
   211fc:	490c      	ldr	r1, [pc, #48]	; (21230 <work_timeout+0x9c>)
   211fe:	480a      	ldr	r0, [pc, #40]	; (21228 <work_timeout+0x94>)
   21200:	f005 f82d 	bl	2625e <assert_print>
   21204:	4905      	ldr	r1, [pc, #20]	; (2121c <work_timeout+0x88>)
   21206:	480b      	ldr	r0, [pc, #44]	; (21234 <work_timeout+0xa0>)
   21208:	f005 f829 	bl	2625e <assert_print>
   2120c:	21c2      	movs	r1, #194	; 0xc2
   2120e:	e7da      	b.n	211c6 <work_timeout+0x32>
	__asm__ volatile(
   21210:	f385 8811 	msr	BASEPRI, r5
   21214:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   21218:	b002      	add	sp, #8
   2121a:	bd70      	pop	{r4, r5, r6, pc}
   2121c:	20022bd4 	.word	0x20022bd4
   21220:	0002df19 	.word	0x0002df19
   21224:	0002df72 	.word	0x0002df72
   21228:	0002d095 	.word	0x0002d095
   2122c:	0002df87 	.word	0x0002df87
   21230:	0002df46 	.word	0x0002df46
   21234:	0002df5d 	.word	0x0002df5d

00021238 <k_work_init>:
{
   21238:	b538      	push	{r3, r4, r5, lr}
   2123a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   2123c:	4604      	mov	r4, r0
   2123e:	b948      	cbnz	r0, 21254 <k_work_init+0x1c>
   21240:	490c      	ldr	r1, [pc, #48]	; (21274 <k_work_init+0x3c>)
   21242:	2389      	movs	r3, #137	; 0x89
   21244:	4a0c      	ldr	r2, [pc, #48]	; (21278 <k_work_init+0x40>)
   21246:	480d      	ldr	r0, [pc, #52]	; (2127c <k_work_init+0x44>)
   21248:	f005 f809 	bl	2625e <assert_print>
   2124c:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   2124e:	480a      	ldr	r0, [pc, #40]	; (21278 <k_work_init+0x40>)
   21250:	f004 fffe 	bl	26250 <assert_post_action>
   21254:	b939      	cbnz	r1, 21266 <k_work_init+0x2e>
   21256:	490a      	ldr	r1, [pc, #40]	; (21280 <k_work_init+0x48>)
   21258:	238a      	movs	r3, #138	; 0x8a
   2125a:	4a07      	ldr	r2, [pc, #28]	; (21278 <k_work_init+0x40>)
   2125c:	4807      	ldr	r0, [pc, #28]	; (2127c <k_work_init+0x44>)
   2125e:	f004 fffe 	bl	2625e <assert_print>
   21262:	218a      	movs	r1, #138	; 0x8a
   21264:	e7f3      	b.n	2124e <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   21266:	2210      	movs	r2, #16
   21268:	2100      	movs	r1, #0
   2126a:	f009 fd9b 	bl	2ada4 <memset>
   2126e:	6065      	str	r5, [r4, #4]
}
   21270:	bd38      	pop	{r3, r4, r5, pc}
   21272:	bf00      	nop
   21274:	000324a4 	.word	0x000324a4
   21278:	000323cd 	.word	0x000323cd
   2127c:	0002d095 	.word	0x0002d095
   21280:	000323ee 	.word	0x000323ee

00021284 <k_work_busy_get>:
{
   21284:	b538      	push	{r3, r4, r5, lr}
   21286:	4604      	mov	r4, r0
	__asm__ volatile(
   21288:	f04f 0320 	mov.w	r3, #32
   2128c:	f3ef 8511 	mrs	r5, BASEPRI
   21290:	f383 8812 	msr	BASEPRI_MAX, r3
   21294:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21298:	4816      	ldr	r0, [pc, #88]	; (212f4 <k_work_busy_get+0x70>)
   2129a:	f7ff fa6d 	bl	20778 <z_spin_lock_valid>
   2129e:	b968      	cbnz	r0, 212bc <k_work_busy_get+0x38>
   212a0:	2394      	movs	r3, #148	; 0x94
   212a2:	4a15      	ldr	r2, [pc, #84]	; (212f8 <k_work_busy_get+0x74>)
   212a4:	4915      	ldr	r1, [pc, #84]	; (212fc <k_work_busy_get+0x78>)
   212a6:	4816      	ldr	r0, [pc, #88]	; (21300 <k_work_busy_get+0x7c>)
   212a8:	f004 ffd9 	bl	2625e <assert_print>
   212ac:	4911      	ldr	r1, [pc, #68]	; (212f4 <k_work_busy_get+0x70>)
   212ae:	4815      	ldr	r0, [pc, #84]	; (21304 <k_work_busy_get+0x80>)
   212b0:	f004 ffd5 	bl	2625e <assert_print>
   212b4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212b6:	4810      	ldr	r0, [pc, #64]	; (212f8 <k_work_busy_get+0x74>)
   212b8:	f004 ffca 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   212bc:	480d      	ldr	r0, [pc, #52]	; (212f4 <k_work_busy_get+0x70>)
   212be:	f7ff fa77 	bl	207b0 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   212c2:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212c4:	480b      	ldr	r0, [pc, #44]	; (212f4 <k_work_busy_get+0x70>)
   212c6:	f004 040f 	and.w	r4, r4, #15
   212ca:	f7ff fa63 	bl	20794 <z_spin_unlock_valid>
   212ce:	b958      	cbnz	r0, 212e8 <k_work_busy_get+0x64>
   212d0:	23c2      	movs	r3, #194	; 0xc2
   212d2:	4a09      	ldr	r2, [pc, #36]	; (212f8 <k_work_busy_get+0x74>)
   212d4:	490c      	ldr	r1, [pc, #48]	; (21308 <k_work_busy_get+0x84>)
   212d6:	480a      	ldr	r0, [pc, #40]	; (21300 <k_work_busy_get+0x7c>)
   212d8:	f004 ffc1 	bl	2625e <assert_print>
   212dc:	4905      	ldr	r1, [pc, #20]	; (212f4 <k_work_busy_get+0x70>)
   212de:	480b      	ldr	r0, [pc, #44]	; (2130c <k_work_busy_get+0x88>)
   212e0:	f004 ffbd 	bl	2625e <assert_print>
   212e4:	21c2      	movs	r1, #194	; 0xc2
   212e6:	e7e6      	b.n	212b6 <k_work_busy_get+0x32>
	__asm__ volatile(
   212e8:	f385 8811 	msr	BASEPRI, r5
   212ec:	f3bf 8f6f 	isb	sy
}
   212f0:	4620      	mov	r0, r4
   212f2:	bd38      	pop	{r3, r4, r5, pc}
   212f4:	20022bd4 	.word	0x20022bd4
   212f8:	0002df19 	.word	0x0002df19
   212fc:	0002df72 	.word	0x0002df72
   21300:	0002d095 	.word	0x0002d095
   21304:	0002df87 	.word	0x0002df87
   21308:	0002df46 	.word	0x0002df46
   2130c:	0002df5d 	.word	0x0002df5d

00021310 <z_work_submit_to_queue>:
{
   21310:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   21312:	460c      	mov	r4, r1
{
   21314:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   21316:	b959      	cbnz	r1, 21330 <z_work_submit_to_queue+0x20>
   21318:	4921      	ldr	r1, [pc, #132]	; (213a0 <z_work_submit_to_queue+0x90>)
   2131a:	4822      	ldr	r0, [pc, #136]	; (213a4 <z_work_submit_to_queue+0x94>)
   2131c:	f44f 73ba 	mov.w	r3, #372	; 0x174
   21320:	4a21      	ldr	r2, [pc, #132]	; (213a8 <z_work_submit_to_queue+0x98>)
   21322:	f004 ff9c 	bl	2625e <assert_print>
   21326:	f44f 71ba 	mov.w	r1, #372	; 0x174
   2132a:	481f      	ldr	r0, [pc, #124]	; (213a8 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2132c:	f004 ff90 	bl	26250 <assert_post_action>
	__asm__ volatile(
   21330:	f04f 0320 	mov.w	r3, #32
   21334:	f3ef 8511 	mrs	r5, BASEPRI
   21338:	f383 8812 	msr	BASEPRI_MAX, r3
   2133c:	f3bf 8f6f 	isb	sy
   21340:	481a      	ldr	r0, [pc, #104]	; (213ac <z_work_submit_to_queue+0x9c>)
   21342:	f7ff fa19 	bl	20778 <z_spin_lock_valid>
   21346:	b960      	cbnz	r0, 21362 <z_work_submit_to_queue+0x52>
   21348:	2394      	movs	r3, #148	; 0x94
   2134a:	4a19      	ldr	r2, [pc, #100]	; (213b0 <z_work_submit_to_queue+0xa0>)
   2134c:	4919      	ldr	r1, [pc, #100]	; (213b4 <z_work_submit_to_queue+0xa4>)
   2134e:	4815      	ldr	r0, [pc, #84]	; (213a4 <z_work_submit_to_queue+0x94>)
   21350:	f004 ff85 	bl	2625e <assert_print>
   21354:	4915      	ldr	r1, [pc, #84]	; (213ac <z_work_submit_to_queue+0x9c>)
   21356:	4818      	ldr	r0, [pc, #96]	; (213b8 <z_work_submit_to_queue+0xa8>)
   21358:	f004 ff81 	bl	2625e <assert_print>
   2135c:	2194      	movs	r1, #148	; 0x94
   2135e:	4814      	ldr	r0, [pc, #80]	; (213b0 <z_work_submit_to_queue+0xa0>)
   21360:	e7e4      	b.n	2132c <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   21362:	4812      	ldr	r0, [pc, #72]	; (213ac <z_work_submit_to_queue+0x9c>)
   21364:	f7ff fa24 	bl	207b0 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   21368:	4620      	mov	r0, r4
   2136a:	a901      	add	r1, sp, #4
   2136c:	f7ff fea6 	bl	210bc <submit_to_queue_locked>
   21370:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21372:	480e      	ldr	r0, [pc, #56]	; (213ac <z_work_submit_to_queue+0x9c>)
   21374:	f7ff fa0e 	bl	20794 <z_spin_unlock_valid>
   21378:	b958      	cbnz	r0, 21392 <z_work_submit_to_queue+0x82>
   2137a:	23c2      	movs	r3, #194	; 0xc2
   2137c:	4a0c      	ldr	r2, [pc, #48]	; (213b0 <z_work_submit_to_queue+0xa0>)
   2137e:	490f      	ldr	r1, [pc, #60]	; (213bc <z_work_submit_to_queue+0xac>)
   21380:	4808      	ldr	r0, [pc, #32]	; (213a4 <z_work_submit_to_queue+0x94>)
   21382:	f004 ff6c 	bl	2625e <assert_print>
   21386:	4909      	ldr	r1, [pc, #36]	; (213ac <z_work_submit_to_queue+0x9c>)
   21388:	480d      	ldr	r0, [pc, #52]	; (213c0 <z_work_submit_to_queue+0xb0>)
   2138a:	f004 ff68 	bl	2625e <assert_print>
   2138e:	21c2      	movs	r1, #194	; 0xc2
   21390:	e7e5      	b.n	2135e <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   21392:	f385 8811 	msr	BASEPRI, r5
   21396:	f3bf 8f6f 	isb	sy
}
   2139a:	4620      	mov	r0, r4
   2139c:	b003      	add	sp, #12
   2139e:	bd30      	pop	{r4, r5, pc}
   213a0:	000324a4 	.word	0x000324a4
   213a4:	0002d095 	.word	0x0002d095
   213a8:	000323cd 	.word	0x000323cd
   213ac:	20022bd4 	.word	0x20022bd4
   213b0:	0002df19 	.word	0x0002df19
   213b4:	0002df72 	.word	0x0002df72
   213b8:	0002df87 	.word	0x0002df87
   213bc:	0002df46 	.word	0x0002df46
   213c0:	0002df5d 	.word	0x0002df5d

000213c4 <k_work_submit>:
{
   213c4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   213c6:	4801      	ldr	r0, [pc, #4]	; (213cc <k_work_submit+0x8>)
   213c8:	f009 bb5e 	b.w	2aa88 <k_work_submit_to_queue>
   213cc:	20009d18 	.word	0x20009d18

000213d0 <k_work_queue_init>:
{
   213d0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   213d2:	b958      	cbnz	r0, 213ec <k_work_queue_init+0x1c>
   213d4:	4908      	ldr	r1, [pc, #32]	; (213f8 <k_work_queue_init+0x28>)
   213d6:	4809      	ldr	r0, [pc, #36]	; (213fc <k_work_queue_init+0x2c>)
   213d8:	f240 23b9 	movw	r3, #697	; 0x2b9
   213dc:	4a08      	ldr	r2, [pc, #32]	; (21400 <k_work_queue_init+0x30>)
   213de:	f004 ff3e 	bl	2625e <assert_print>
   213e2:	f240 21b9 	movw	r1, #697	; 0x2b9
   213e6:	4806      	ldr	r0, [pc, #24]	; (21400 <k_work_queue_init+0x30>)
   213e8:	f004 ff32 	bl	26250 <assert_post_action>
	*queue = (struct k_work_q) {
   213ec:	22a8      	movs	r2, #168	; 0xa8
   213ee:	2100      	movs	r1, #0
   213f0:	f009 fcd8 	bl	2ada4 <memset>
}
   213f4:	bd08      	pop	{r3, pc}
   213f6:	bf00      	nop
   213f8:	0003240b 	.word	0x0003240b
   213fc:	0002d095 	.word	0x0002d095
   21400:	000323cd 	.word	0x000323cd

00021404 <k_work_queue_start>:
{
   21404:	b5f0      	push	{r4, r5, r6, r7, lr}
   21406:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   21408:	4604      	mov	r4, r0
{
   2140a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   2140c:	b958      	cbnz	r0, 21426 <k_work_queue_start+0x22>
   2140e:	492b      	ldr	r1, [pc, #172]	; (214bc <k_work_queue_start+0xb8>)
   21410:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   21414:	4a2a      	ldr	r2, [pc, #168]	; (214c0 <k_work_queue_start+0xbc>)
   21416:	482b      	ldr	r0, [pc, #172]	; (214c4 <k_work_queue_start+0xc0>)
   21418:	f004 ff21 	bl	2625e <assert_print>
   2141c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   21420:	4827      	ldr	r0, [pc, #156]	; (214c0 <k_work_queue_start+0xbc>)
   21422:	f004 ff15 	bl	26250 <assert_post_action>
   21426:	b949      	cbnz	r1, 2143c <k_work_queue_start+0x38>
   21428:	4927      	ldr	r1, [pc, #156]	; (214c8 <k_work_queue_start+0xc4>)
   2142a:	f240 23c9 	movw	r3, #713	; 0x2c9
   2142e:	4a24      	ldr	r2, [pc, #144]	; (214c0 <k_work_queue_start+0xbc>)
   21430:	4824      	ldr	r0, [pc, #144]	; (214c4 <k_work_queue_start+0xc0>)
   21432:	f004 ff14 	bl	2625e <assert_print>
   21436:	f240 21c9 	movw	r1, #713	; 0x2c9
   2143a:	e7f1      	b.n	21420 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   2143c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   21440:	f010 0001 	ands.w	r0, r0, #1
   21444:	d009      	beq.n	2145a <k_work_queue_start+0x56>
   21446:	4921      	ldr	r1, [pc, #132]	; (214cc <k_work_queue_start+0xc8>)
   21448:	f240 23ca 	movw	r3, #714	; 0x2ca
   2144c:	4a1c      	ldr	r2, [pc, #112]	; (214c0 <k_work_queue_start+0xbc>)
   2144e:	481d      	ldr	r0, [pc, #116]	; (214c4 <k_work_queue_start+0xc0>)
   21450:	f004 ff05 	bl	2625e <assert_print>
   21454:	f240 21ca 	movw	r1, #714	; 0x2ca
   21458:	e7e2      	b.n	21420 <k_work_queue_start+0x1c>
	list->tail = NULL;
   2145a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   2145e:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   21462:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   21466:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2146a:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   2146e:	b31d      	cbz	r5, 214b8 <k_work_queue_start+0xb4>
   21470:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   21472:	2800      	cmp	r0, #0
   21474:	f240 1001 	movw	r0, #257	; 0x101
   21478:	bf08      	it	eq
   2147a:	2001      	moveq	r0, #1
	*flagp = flags;
   2147c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21480:	2000      	movs	r0, #0
   21482:	f04f 36ff 	mov.w	r6, #4294967295
   21486:	f04f 37ff 	mov.w	r7, #4294967295
   2148a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2148e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   21492:	e9cd 6706 	strd	r6, r7, [sp, #24]
   21496:	4620      	mov	r0, r4
   21498:	4b0d      	ldr	r3, [pc, #52]	; (214d0 <k_work_queue_start+0xcc>)
   2149a:	9400      	str	r4, [sp, #0]
   2149c:	f7ff f8a2 	bl	205e4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   214a0:	b125      	cbz	r5, 214ac <k_work_queue_start+0xa8>
   214a2:	6829      	ldr	r1, [r5, #0]
   214a4:	b111      	cbz	r1, 214ac <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   214a6:	4620      	mov	r0, r4
   214a8:	f009 fa40 	bl	2a92c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   214ac:	4620      	mov	r0, r4
}
   214ae:	b009      	add	sp, #36	; 0x24
   214b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   214b4:	f009 ba3f 	b.w	2a936 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   214b8:	2001      	movs	r0, #1
   214ba:	e7df      	b.n	2147c <k_work_queue_start+0x78>
   214bc:	00032463 	.word	0x00032463
   214c0:	000323cd 	.word	0x000323cd
   214c4:	0002d095 	.word	0x0002d095
   214c8:	00032469 	.word	0x00032469
   214cc:	0003246f 	.word	0x0003246f
   214d0:	00020e99 	.word	0x00020e99

000214d4 <k_work_queue_drain>:
{
   214d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   214d6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   214d8:	4604      	mov	r4, r0
   214da:	b958      	cbnz	r0, 214f4 <k_work_queue_drain+0x20>
   214dc:	493a      	ldr	r1, [pc, #232]	; (215c8 <k_work_queue_drain+0xf4>)
   214de:	f240 23ed 	movw	r3, #749	; 0x2ed
   214e2:	4a3a      	ldr	r2, [pc, #232]	; (215cc <k_work_queue_drain+0xf8>)
   214e4:	483a      	ldr	r0, [pc, #232]	; (215d0 <k_work_queue_drain+0xfc>)
   214e6:	f004 feba 	bl	2625e <assert_print>
   214ea:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   214ee:	4837      	ldr	r0, [pc, #220]	; (215cc <k_work_queue_drain+0xf8>)
   214f0:	f004 feae 	bl	26250 <assert_post_action>
   214f4:	f009 fa14 	bl	2a920 <k_is_in_isr>
   214f8:	b148      	cbz	r0, 2150e <k_work_queue_drain+0x3a>
   214fa:	4936      	ldr	r1, [pc, #216]	; (215d4 <k_work_queue_drain+0x100>)
   214fc:	f240 23ee 	movw	r3, #750	; 0x2ee
   21500:	4a32      	ldr	r2, [pc, #200]	; (215cc <k_work_queue_drain+0xf8>)
   21502:	4833      	ldr	r0, [pc, #204]	; (215d0 <k_work_queue_drain+0xfc>)
   21504:	f004 feab 	bl	2625e <assert_print>
   21508:	f240 21ee 	movw	r1, #750	; 0x2ee
   2150c:	e7ef      	b.n	214ee <k_work_queue_drain+0x1a>
	__asm__ volatile(
   2150e:	f04f 0320 	mov.w	r3, #32
   21512:	f3ef 8611 	mrs	r6, BASEPRI
   21516:	f383 8812 	msr	BASEPRI_MAX, r3
   2151a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2151e:	482e      	ldr	r0, [pc, #184]	; (215d8 <k_work_queue_drain+0x104>)
   21520:	f7ff f92a 	bl	20778 <z_spin_lock_valid>
   21524:	b960      	cbnz	r0, 21540 <k_work_queue_drain+0x6c>
   21526:	2394      	movs	r3, #148	; 0x94
   21528:	4a2c      	ldr	r2, [pc, #176]	; (215dc <k_work_queue_drain+0x108>)
   2152a:	492d      	ldr	r1, [pc, #180]	; (215e0 <k_work_queue_drain+0x10c>)
   2152c:	4828      	ldr	r0, [pc, #160]	; (215d0 <k_work_queue_drain+0xfc>)
   2152e:	f004 fe96 	bl	2625e <assert_print>
   21532:	4929      	ldr	r1, [pc, #164]	; (215d8 <k_work_queue_drain+0x104>)
   21534:	482b      	ldr	r0, [pc, #172]	; (215e4 <k_work_queue_drain+0x110>)
   21536:	f004 fe92 	bl	2625e <assert_print>
   2153a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2153c:	4827      	ldr	r0, [pc, #156]	; (215dc <k_work_queue_drain+0x108>)
   2153e:	e7d7      	b.n	214f0 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   21540:	4825      	ldr	r0, [pc, #148]	; (215d8 <k_work_queue_drain+0x104>)
   21542:	f7ff f935 	bl	207b0 <z_spin_lock_set_owner>
	return *flagp;
   21546:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   2154a:	f013 0f06 	tst.w	r3, #6
   2154e:	d11d      	bne.n	2158c <k_work_queue_drain+0xb8>
	    || plug
   21550:	b1b5      	cbz	r5, 21580 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   21552:	f043 030c 	orr.w	r3, r3, #12
   21556:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   2155a:	4620      	mov	r0, r4
   2155c:	f009 fa5a 	bl	2aa14 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   21560:	2300      	movs	r3, #0
   21562:	f04f 32ff 	mov.w	r2, #4294967295
   21566:	9302      	str	r3, [sp, #8]
   21568:	f04f 33ff 	mov.w	r3, #4294967295
   2156c:	4631      	mov	r1, r6
   2156e:	e9cd 2300 	strd	r2, r3, [sp]
   21572:	4819      	ldr	r0, [pc, #100]	; (215d8 <k_work_queue_drain+0x104>)
   21574:	f104 0298 	add.w	r2, r4, #152	; 0x98
   21578:	f001 fc0a 	bl	22d90 <z_sched_wait>
}
   2157c:	b004      	add	sp, #16
   2157e:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   21580:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   21584:	b14d      	cbz	r5, 2159a <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   21586:	f043 0304 	orr.w	r3, r3, #4
   2158a:	e7e4      	b.n	21556 <k_work_queue_drain+0x82>
   2158c:	f043 0204 	orr.w	r2, r3, #4
   21590:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   21594:	2d00      	cmp	r5, #0
   21596:	d0e0      	beq.n	2155a <k_work_queue_drain+0x86>
   21598:	e7db      	b.n	21552 <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2159a:	480f      	ldr	r0, [pc, #60]	; (215d8 <k_work_queue_drain+0x104>)
   2159c:	f7ff f8fa 	bl	20794 <z_spin_unlock_valid>
   215a0:	b958      	cbnz	r0, 215ba <k_work_queue_drain+0xe6>
   215a2:	23c2      	movs	r3, #194	; 0xc2
   215a4:	4a0d      	ldr	r2, [pc, #52]	; (215dc <k_work_queue_drain+0x108>)
   215a6:	4910      	ldr	r1, [pc, #64]	; (215e8 <k_work_queue_drain+0x114>)
   215a8:	4809      	ldr	r0, [pc, #36]	; (215d0 <k_work_queue_drain+0xfc>)
   215aa:	f004 fe58 	bl	2625e <assert_print>
   215ae:	490a      	ldr	r1, [pc, #40]	; (215d8 <k_work_queue_drain+0x104>)
   215b0:	480e      	ldr	r0, [pc, #56]	; (215ec <k_work_queue_drain+0x118>)
   215b2:	f004 fe54 	bl	2625e <assert_print>
   215b6:	21c2      	movs	r1, #194	; 0xc2
   215b8:	e7c0      	b.n	2153c <k_work_queue_drain+0x68>
	__asm__ volatile(
   215ba:	f386 8811 	msr	BASEPRI, r6
   215be:	f3bf 8f6f 	isb	sy
	int ret = 0;
   215c2:	4628      	mov	r0, r5
	return ret;
   215c4:	e7da      	b.n	2157c <k_work_queue_drain+0xa8>
   215c6:	bf00      	nop
   215c8:	00032463 	.word	0x00032463
   215cc:	000323cd 	.word	0x000323cd
   215d0:	0002d095 	.word	0x0002d095
   215d4:	0002ffcb 	.word	0x0002ffcb
   215d8:	20022bd4 	.word	0x20022bd4
   215dc:	0002df19 	.word	0x0002df19
   215e0:	0002df72 	.word	0x0002df72
   215e4:	0002df87 	.word	0x0002df87
   215e8:	0002df46 	.word	0x0002df46
   215ec:	0002df5d 	.word	0x0002df5d

000215f0 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   215f0:	b538      	push	{r3, r4, r5, lr}
   215f2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   215f4:	4604      	mov	r4, r0
   215f6:	b958      	cbnz	r0, 21610 <k_work_init_delayable+0x20>
   215f8:	490f      	ldr	r1, [pc, #60]	; (21638 <k_work_init_delayable+0x48>)
   215fa:	f44f 7350 	mov.w	r3, #832	; 0x340
   215fe:	4a0f      	ldr	r2, [pc, #60]	; (2163c <k_work_init_delayable+0x4c>)
   21600:	480f      	ldr	r0, [pc, #60]	; (21640 <k_work_init_delayable+0x50>)
   21602:	f004 fe2c 	bl	2625e <assert_print>
   21606:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   2160a:	480c      	ldr	r0, [pc, #48]	; (2163c <k_work_init_delayable+0x4c>)
   2160c:	f004 fe20 	bl	26250 <assert_post_action>
   21610:	b949      	cbnz	r1, 21626 <k_work_init_delayable+0x36>
   21612:	490c      	ldr	r1, [pc, #48]	; (21644 <k_work_init_delayable+0x54>)
   21614:	f240 3341 	movw	r3, #833	; 0x341
   21618:	4a08      	ldr	r2, [pc, #32]	; (2163c <k_work_init_delayable+0x4c>)
   2161a:	4809      	ldr	r0, [pc, #36]	; (21640 <k_work_init_delayable+0x50>)
   2161c:	f004 fe1f 	bl	2625e <assert_print>
   21620:	f240 3141 	movw	r1, #833	; 0x341
   21624:	e7f1      	b.n	2160a <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   21626:	2230      	movs	r2, #48	; 0x30
   21628:	2100      	movs	r1, #0
   2162a:	f009 fbbb 	bl	2ada4 <memset>
   2162e:	f44f 7380 	mov.w	r3, #256	; 0x100
   21632:	6065      	str	r5, [r4, #4]
   21634:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   21636:	bd38      	pop	{r3, r4, r5, pc}
   21638:	000324a3 	.word	0x000324a3
   2163c:	000323cd 	.word	0x000323cd
   21640:	0002d095 	.word	0x0002d095
   21644:	000323ee 	.word	0x000323ee

00021648 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   21648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2164a:	4616      	mov	r6, r2
   2164c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2164e:	460c      	mov	r4, r1
{
   21650:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   21652:	b959      	cbnz	r1, 2166c <k_work_schedule_for_queue+0x24>
   21654:	492d      	ldr	r1, [pc, #180]	; (2170c <k_work_schedule_for_queue+0xc4>)
   21656:	482e      	ldr	r0, [pc, #184]	; (21710 <k_work_schedule_for_queue+0xc8>)
   21658:	f240 33b7 	movw	r3, #951	; 0x3b7
   2165c:	4a2d      	ldr	r2, [pc, #180]	; (21714 <k_work_schedule_for_queue+0xcc>)
   2165e:	f004 fdfe 	bl	2625e <assert_print>
   21662:	f240 31b7 	movw	r1, #951	; 0x3b7
   21666:	482b      	ldr	r0, [pc, #172]	; (21714 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21668:	f004 fdf2 	bl	26250 <assert_post_action>
	__asm__ volatile(
   2166c:	f04f 0320 	mov.w	r3, #32
   21670:	f3ef 8711 	mrs	r7, BASEPRI
   21674:	f383 8812 	msr	BASEPRI_MAX, r3
   21678:	f3bf 8f6f 	isb	sy
   2167c:	4826      	ldr	r0, [pc, #152]	; (21718 <k_work_schedule_for_queue+0xd0>)
   2167e:	f7ff f87b 	bl	20778 <z_spin_lock_valid>
   21682:	b960      	cbnz	r0, 2169e <k_work_schedule_for_queue+0x56>
   21684:	2394      	movs	r3, #148	; 0x94
   21686:	4a25      	ldr	r2, [pc, #148]	; (2171c <k_work_schedule_for_queue+0xd4>)
   21688:	4925      	ldr	r1, [pc, #148]	; (21720 <k_work_schedule_for_queue+0xd8>)
   2168a:	4821      	ldr	r0, [pc, #132]	; (21710 <k_work_schedule_for_queue+0xc8>)
   2168c:	f004 fde7 	bl	2625e <assert_print>
   21690:	4921      	ldr	r1, [pc, #132]	; (21718 <k_work_schedule_for_queue+0xd0>)
   21692:	4824      	ldr	r0, [pc, #144]	; (21724 <k_work_schedule_for_queue+0xdc>)
   21694:	f004 fde3 	bl	2625e <assert_print>
   21698:	2194      	movs	r1, #148	; 0x94
   2169a:	4820      	ldr	r0, [pc, #128]	; (2171c <k_work_schedule_for_queue+0xd4>)
   2169c:	e7e4      	b.n	21668 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   2169e:	481e      	ldr	r0, [pc, #120]	; (21718 <k_work_schedule_for_queue+0xd0>)
   216a0:	f7ff f886 	bl	207b0 <z_spin_lock_set_owner>
	return *flagp;
   216a4:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   216a6:	f013 0f0e 	tst.w	r3, #14
   216aa:	d125      	bne.n	216f8 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   216ac:	ea55 0206 	orrs.w	r2, r5, r6
   216b0:	d114      	bne.n	216dc <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   216b2:	4620      	mov	r0, r4
   216b4:	a901      	add	r1, sp, #4
   216b6:	f7ff fd01 	bl	210bc <submit_to_queue_locked>
   216ba:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216bc:	4816      	ldr	r0, [pc, #88]	; (21718 <k_work_schedule_for_queue+0xd0>)
   216be:	f7ff f869 	bl	20794 <z_spin_unlock_valid>
   216c2:	b9d8      	cbnz	r0, 216fc <k_work_schedule_for_queue+0xb4>
   216c4:	23c2      	movs	r3, #194	; 0xc2
   216c6:	4a15      	ldr	r2, [pc, #84]	; (2171c <k_work_schedule_for_queue+0xd4>)
   216c8:	4917      	ldr	r1, [pc, #92]	; (21728 <k_work_schedule_for_queue+0xe0>)
   216ca:	4811      	ldr	r0, [pc, #68]	; (21710 <k_work_schedule_for_queue+0xc8>)
   216cc:	f004 fdc7 	bl	2625e <assert_print>
   216d0:	4911      	ldr	r1, [pc, #68]	; (21718 <k_work_schedule_for_queue+0xd0>)
   216d2:	4816      	ldr	r0, [pc, #88]	; (2172c <k_work_schedule_for_queue+0xe4>)
   216d4:	f004 fdc3 	bl	2625e <assert_print>
   216d8:	21c2      	movs	r1, #194	; 0xc2
   216da:	e7de      	b.n	2169a <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   216dc:	f043 0308 	orr.w	r3, r3, #8
   216e0:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   216e2:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   216e4:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   216e8:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   216ea:	4632      	mov	r2, r6
   216ec:	462b      	mov	r3, r5
   216ee:	4910      	ldr	r1, [pc, #64]	; (21730 <k_work_schedule_for_queue+0xe8>)
   216f0:	f001 fbc8 	bl	22e84 <z_add_timeout>
	return ret;
   216f4:	2401      	movs	r4, #1
   216f6:	e7e1      	b.n	216bc <k_work_schedule_for_queue+0x74>
	int ret = 0;
   216f8:	2400      	movs	r4, #0
   216fa:	e7df      	b.n	216bc <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   216fc:	f387 8811 	msr	BASEPRI, r7
   21700:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21704:	4620      	mov	r0, r4
   21706:	b003      	add	sp, #12
   21708:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2170a:	bf00      	nop
   2170c:	000324a3 	.word	0x000324a3
   21710:	0002d095 	.word	0x0002d095
   21714:	000323cd 	.word	0x000323cd
   21718:	20022bd4 	.word	0x20022bd4
   2171c:	0002df19 	.word	0x0002df19
   21720:	0002df72 	.word	0x0002df72
   21724:	0002df87 	.word	0x0002df87
   21728:	0002df46 	.word	0x0002df46
   2172c:	0002df5d 	.word	0x0002df5d
   21730:	00021195 	.word	0x00021195

00021734 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   21734:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   21736:	4801      	ldr	r0, [pc, #4]	; (2173c <k_work_schedule+0x8>)
   21738:	f7ff bf86 	b.w	21648 <k_work_schedule_for_queue>
   2173c:	20009d18 	.word	0x20009d18

00021740 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   21740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21742:	4616      	mov	r6, r2
   21744:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   21746:	460c      	mov	r4, r1
{
   21748:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2174a:	b959      	cbnz	r1, 21764 <k_work_reschedule_for_queue+0x24>
   2174c:	492c      	ldr	r1, [pc, #176]	; (21800 <k_work_reschedule_for_queue+0xc0>)
   2174e:	482d      	ldr	r0, [pc, #180]	; (21804 <k_work_reschedule_for_queue+0xc4>)
   21750:	f240 33db 	movw	r3, #987	; 0x3db
   21754:	4a2c      	ldr	r2, [pc, #176]	; (21808 <k_work_reschedule_for_queue+0xc8>)
   21756:	f004 fd82 	bl	2625e <assert_print>
   2175a:	f240 31db 	movw	r1, #987	; 0x3db
   2175e:	482a      	ldr	r0, [pc, #168]	; (21808 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21760:	f004 fd76 	bl	26250 <assert_post_action>
	__asm__ volatile(
   21764:	f04f 0320 	mov.w	r3, #32
   21768:	f3ef 8711 	mrs	r7, BASEPRI
   2176c:	f383 8812 	msr	BASEPRI_MAX, r3
   21770:	f3bf 8f6f 	isb	sy
   21774:	4825      	ldr	r0, [pc, #148]	; (2180c <k_work_reschedule_for_queue+0xcc>)
   21776:	f7fe ffff 	bl	20778 <z_spin_lock_valid>
   2177a:	b960      	cbnz	r0, 21796 <k_work_reschedule_for_queue+0x56>
   2177c:	2394      	movs	r3, #148	; 0x94
   2177e:	4a24      	ldr	r2, [pc, #144]	; (21810 <k_work_reschedule_for_queue+0xd0>)
   21780:	4924      	ldr	r1, [pc, #144]	; (21814 <k_work_reschedule_for_queue+0xd4>)
   21782:	4820      	ldr	r0, [pc, #128]	; (21804 <k_work_reschedule_for_queue+0xc4>)
   21784:	f004 fd6b 	bl	2625e <assert_print>
   21788:	4920      	ldr	r1, [pc, #128]	; (2180c <k_work_reschedule_for_queue+0xcc>)
   2178a:	4823      	ldr	r0, [pc, #140]	; (21818 <k_work_reschedule_for_queue+0xd8>)
   2178c:	f004 fd67 	bl	2625e <assert_print>
   21790:	2194      	movs	r1, #148	; 0x94
   21792:	481f      	ldr	r0, [pc, #124]	; (21810 <k_work_reschedule_for_queue+0xd0>)
   21794:	e7e4      	b.n	21760 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   21796:	481d      	ldr	r0, [pc, #116]	; (2180c <k_work_reschedule_for_queue+0xcc>)
   21798:	f7ff f80a 	bl	207b0 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2179c:	4620      	mov	r0, r4
   2179e:	f009 f92b 	bl	2a9f8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   217a2:	ea55 0306 	orrs.w	r3, r5, r6
   217a6:	d114      	bne.n	217d2 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   217a8:	4620      	mov	r0, r4
   217aa:	a901      	add	r1, sp, #4
   217ac:	f7ff fc86 	bl	210bc <submit_to_queue_locked>
   217b0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217b2:	4816      	ldr	r0, [pc, #88]	; (2180c <k_work_reschedule_for_queue+0xcc>)
   217b4:	f7fe ffee 	bl	20794 <z_spin_unlock_valid>
   217b8:	b9d0      	cbnz	r0, 217f0 <k_work_reschedule_for_queue+0xb0>
   217ba:	23c2      	movs	r3, #194	; 0xc2
   217bc:	4a14      	ldr	r2, [pc, #80]	; (21810 <k_work_reschedule_for_queue+0xd0>)
   217be:	4917      	ldr	r1, [pc, #92]	; (2181c <k_work_reschedule_for_queue+0xdc>)
   217c0:	4810      	ldr	r0, [pc, #64]	; (21804 <k_work_reschedule_for_queue+0xc4>)
   217c2:	f004 fd4c 	bl	2625e <assert_print>
   217c6:	4911      	ldr	r1, [pc, #68]	; (2180c <k_work_reschedule_for_queue+0xcc>)
   217c8:	4815      	ldr	r0, [pc, #84]	; (21820 <k_work_reschedule_for_queue+0xe0>)
   217ca:	f004 fd48 	bl	2625e <assert_print>
   217ce:	21c2      	movs	r1, #194	; 0xc2
   217d0:	e7df      	b.n	21792 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   217d2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   217d4:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   217d8:	f043 0308 	orr.w	r3, r3, #8
   217dc:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   217de:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   217e0:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   217e2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   217e4:	490f      	ldr	r1, [pc, #60]	; (21824 <k_work_reschedule_for_queue+0xe4>)
   217e6:	462b      	mov	r3, r5
   217e8:	f001 fb4c 	bl	22e84 <z_add_timeout>
	return ret;
   217ec:	2401      	movs	r4, #1
   217ee:	e7e0      	b.n	217b2 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   217f0:	f387 8811 	msr	BASEPRI, r7
   217f4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   217f8:	4620      	mov	r0, r4
   217fa:	b003      	add	sp, #12
   217fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217fe:	bf00      	nop
   21800:	000324a3 	.word	0x000324a3
   21804:	0002d095 	.word	0x0002d095
   21808:	000323cd 	.word	0x000323cd
   2180c:	20022bd4 	.word	0x20022bd4
   21810:	0002df19 	.word	0x0002df19
   21814:	0002df72 	.word	0x0002df72
   21818:	0002df87 	.word	0x0002df87
   2181c:	0002df46 	.word	0x0002df46
   21820:	0002df5d 	.word	0x0002df5d
   21824:	00021195 	.word	0x00021195

00021828 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21828:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2182a:	4801      	ldr	r0, [pc, #4]	; (21830 <k_work_reschedule+0x8>)
   2182c:	f7ff bf88 	b.w	21740 <k_work_reschedule_for_queue>
   21830:	20009d18 	.word	0x20009d18

00021834 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   21834:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   21836:	4604      	mov	r4, r0
   21838:	b958      	cbnz	r0, 21852 <k_work_cancel_delayable+0x1e>
   2183a:	4922      	ldr	r1, [pc, #136]	; (218c4 <k_work_cancel_delayable+0x90>)
   2183c:	4822      	ldr	r0, [pc, #136]	; (218c8 <k_work_cancel_delayable+0x94>)
   2183e:	f240 33fd 	movw	r3, #1021	; 0x3fd
   21842:	4a22      	ldr	r2, [pc, #136]	; (218cc <k_work_cancel_delayable+0x98>)
   21844:	f004 fd0b 	bl	2625e <assert_print>
   21848:	f240 31fd 	movw	r1, #1021	; 0x3fd
   2184c:	481f      	ldr	r0, [pc, #124]	; (218cc <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2184e:	f004 fcff 	bl	26250 <assert_post_action>
	__asm__ volatile(
   21852:	f04f 0320 	mov.w	r3, #32
   21856:	f3ef 8511 	mrs	r5, BASEPRI
   2185a:	f383 8812 	msr	BASEPRI_MAX, r3
   2185e:	f3bf 8f6f 	isb	sy
   21862:	481b      	ldr	r0, [pc, #108]	; (218d0 <k_work_cancel_delayable+0x9c>)
   21864:	f7fe ff88 	bl	20778 <z_spin_lock_valid>
   21868:	b960      	cbnz	r0, 21884 <k_work_cancel_delayable+0x50>
   2186a:	2394      	movs	r3, #148	; 0x94
   2186c:	4a19      	ldr	r2, [pc, #100]	; (218d4 <k_work_cancel_delayable+0xa0>)
   2186e:	491a      	ldr	r1, [pc, #104]	; (218d8 <k_work_cancel_delayable+0xa4>)
   21870:	4815      	ldr	r0, [pc, #84]	; (218c8 <k_work_cancel_delayable+0x94>)
   21872:	f004 fcf4 	bl	2625e <assert_print>
   21876:	4916      	ldr	r1, [pc, #88]	; (218d0 <k_work_cancel_delayable+0x9c>)
   21878:	4818      	ldr	r0, [pc, #96]	; (218dc <k_work_cancel_delayable+0xa8>)
   2187a:	f004 fcf0 	bl	2625e <assert_print>
   2187e:	2194      	movs	r1, #148	; 0x94
   21880:	4814      	ldr	r0, [pc, #80]	; (218d4 <k_work_cancel_delayable+0xa0>)
   21882:	e7e4      	b.n	2184e <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   21884:	4812      	ldr	r0, [pc, #72]	; (218d0 <k_work_cancel_delayable+0x9c>)
   21886:	f7fe ff93 	bl	207b0 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2188a:	4620      	mov	r0, r4
   2188c:	f009 f8b4 	bl	2a9f8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21890:	4620      	mov	r0, r4
   21892:	f009 f8c6 	bl	2aa22 <cancel_async_locked>
   21896:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21898:	480d      	ldr	r0, [pc, #52]	; (218d0 <k_work_cancel_delayable+0x9c>)
   2189a:	f7fe ff7b 	bl	20794 <z_spin_unlock_valid>
   2189e:	b958      	cbnz	r0, 218b8 <k_work_cancel_delayable+0x84>
   218a0:	23c2      	movs	r3, #194	; 0xc2
   218a2:	4a0c      	ldr	r2, [pc, #48]	; (218d4 <k_work_cancel_delayable+0xa0>)
   218a4:	490e      	ldr	r1, [pc, #56]	; (218e0 <k_work_cancel_delayable+0xac>)
   218a6:	4808      	ldr	r0, [pc, #32]	; (218c8 <k_work_cancel_delayable+0x94>)
   218a8:	f004 fcd9 	bl	2625e <assert_print>
   218ac:	4908      	ldr	r1, [pc, #32]	; (218d0 <k_work_cancel_delayable+0x9c>)
   218ae:	480d      	ldr	r0, [pc, #52]	; (218e4 <k_work_cancel_delayable+0xb0>)
   218b0:	f004 fcd5 	bl	2625e <assert_print>
   218b4:	21c2      	movs	r1, #194	; 0xc2
   218b6:	e7e3      	b.n	21880 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   218b8:	f385 8811 	msr	BASEPRI, r5
   218bc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   218c0:	4620      	mov	r0, r4
   218c2:	bd38      	pop	{r3, r4, r5, pc}
   218c4:	000324a3 	.word	0x000324a3
   218c8:	0002d095 	.word	0x0002d095
   218cc:	000323cd 	.word	0x000323cd
   218d0:	20022bd4 	.word	0x20022bd4
   218d4:	0002df19 	.word	0x0002df19
   218d8:	0002df72 	.word	0x0002df72
   218dc:	0002df87 	.word	0x0002df87
   218e0:	0002df46 	.word	0x0002df46
   218e4:	0002df5d 	.word	0x0002df5d

000218e8 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   218e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   218ec:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   218ee:	4605      	mov	r5, r0
   218f0:	b958      	cbnz	r0, 2190a <k_work_cancel_delayable_sync+0x22>
   218f2:	493a      	ldr	r1, [pc, #232]	; (219dc <k_work_cancel_delayable_sync+0xf4>)
   218f4:	f240 430e 	movw	r3, #1038	; 0x40e
   218f8:	4a39      	ldr	r2, [pc, #228]	; (219e0 <k_work_cancel_delayable_sync+0xf8>)
   218fa:	483a      	ldr	r0, [pc, #232]	; (219e4 <k_work_cancel_delayable_sync+0xfc>)
   218fc:	f004 fcaf 	bl	2625e <assert_print>
   21900:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   21904:	4836      	ldr	r0, [pc, #216]	; (219e0 <k_work_cancel_delayable_sync+0xf8>)
   21906:	f004 fca3 	bl	26250 <assert_post_action>
   2190a:	b949      	cbnz	r1, 21920 <k_work_cancel_delayable_sync+0x38>
   2190c:	4936      	ldr	r1, [pc, #216]	; (219e8 <k_work_cancel_delayable_sync+0x100>)
   2190e:	f240 430f 	movw	r3, #1039	; 0x40f
   21912:	4a33      	ldr	r2, [pc, #204]	; (219e0 <k_work_cancel_delayable_sync+0xf8>)
   21914:	4833      	ldr	r0, [pc, #204]	; (219e4 <k_work_cancel_delayable_sync+0xfc>)
   21916:	f004 fca2 	bl	2625e <assert_print>
   2191a:	f240 410f 	movw	r1, #1039	; 0x40f
   2191e:	e7f1      	b.n	21904 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   21920:	f008 fffe 	bl	2a920 <k_is_in_isr>
   21924:	4604      	mov	r4, r0
   21926:	b148      	cbz	r0, 2193c <k_work_cancel_delayable_sync+0x54>
   21928:	4930      	ldr	r1, [pc, #192]	; (219ec <k_work_cancel_delayable_sync+0x104>)
   2192a:	f44f 6382 	mov.w	r3, #1040	; 0x410
   2192e:	4a2c      	ldr	r2, [pc, #176]	; (219e0 <k_work_cancel_delayable_sync+0xf8>)
   21930:	482c      	ldr	r0, [pc, #176]	; (219e4 <k_work_cancel_delayable_sync+0xfc>)
   21932:	f004 fc94 	bl	2625e <assert_print>
   21936:	f44f 6182 	mov.w	r1, #1040	; 0x410
   2193a:	e7e3      	b.n	21904 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   2193c:	f04f 0320 	mov.w	r3, #32
   21940:	f3ef 8811 	mrs	r8, BASEPRI
   21944:	f383 8812 	msr	BASEPRI_MAX, r3
   21948:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2194c:	4828      	ldr	r0, [pc, #160]	; (219f0 <k_work_cancel_delayable_sync+0x108>)
   2194e:	f7fe ff13 	bl	20778 <z_spin_lock_valid>
   21952:	b960      	cbnz	r0, 2196e <k_work_cancel_delayable_sync+0x86>
   21954:	2394      	movs	r3, #148	; 0x94
   21956:	4a27      	ldr	r2, [pc, #156]	; (219f4 <k_work_cancel_delayable_sync+0x10c>)
   21958:	4927      	ldr	r1, [pc, #156]	; (219f8 <k_work_cancel_delayable_sync+0x110>)
   2195a:	4822      	ldr	r0, [pc, #136]	; (219e4 <k_work_cancel_delayable_sync+0xfc>)
   2195c:	f004 fc7f 	bl	2625e <assert_print>
   21960:	4923      	ldr	r1, [pc, #140]	; (219f0 <k_work_cancel_delayable_sync+0x108>)
   21962:	4826      	ldr	r0, [pc, #152]	; (219fc <k_work_cancel_delayable_sync+0x114>)
   21964:	f004 fc7b 	bl	2625e <assert_print>
   21968:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2196a:	4822      	ldr	r0, [pc, #136]	; (219f4 <k_work_cancel_delayable_sync+0x10c>)
   2196c:	e7cb      	b.n	21906 <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   2196e:	4820      	ldr	r0, [pc, #128]	; (219f0 <k_work_cancel_delayable_sync+0x108>)
   21970:	f7fe ff1e 	bl	207b0 <z_spin_lock_set_owner>
	return *flagp;
   21974:	68eb      	ldr	r3, [r5, #12]
   21976:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2197a:	2b00      	cmp	r3, #0
   2197c:	bf14      	ite	ne
   2197e:	2701      	movne	r7, #1
   21980:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   21982:	d00a      	beq.n	2199a <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   21984:	4628      	mov	r0, r5
   21986:	f009 f837 	bl	2a9f8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2198a:	4628      	mov	r0, r5
   2198c:	f009 f849 	bl	2aa22 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   21990:	4631      	mov	r1, r6
   21992:	4628      	mov	r0, r5
   21994:	f7ff fb74 	bl	21080 <cancel_sync_locked>
   21998:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2199a:	4815      	ldr	r0, [pc, #84]	; (219f0 <k_work_cancel_delayable_sync+0x108>)
   2199c:	f7fe fefa 	bl	20794 <z_spin_unlock_valid>
   219a0:	b958      	cbnz	r0, 219ba <k_work_cancel_delayable_sync+0xd2>
   219a2:	23c2      	movs	r3, #194	; 0xc2
   219a4:	4a13      	ldr	r2, [pc, #76]	; (219f4 <k_work_cancel_delayable_sync+0x10c>)
   219a6:	4916      	ldr	r1, [pc, #88]	; (21a00 <k_work_cancel_delayable_sync+0x118>)
   219a8:	480e      	ldr	r0, [pc, #56]	; (219e4 <k_work_cancel_delayable_sync+0xfc>)
   219aa:	f004 fc58 	bl	2625e <assert_print>
   219ae:	4910      	ldr	r1, [pc, #64]	; (219f0 <k_work_cancel_delayable_sync+0x108>)
   219b0:	4814      	ldr	r0, [pc, #80]	; (21a04 <k_work_cancel_delayable_sync+0x11c>)
   219b2:	f004 fc54 	bl	2625e <assert_print>
   219b6:	21c2      	movs	r1, #194	; 0xc2
   219b8:	e7d7      	b.n	2196a <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   219ba:	f388 8811 	msr	BASEPRI, r8
   219be:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   219c2:	b13c      	cbz	r4, 219d4 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   219c4:	f04f 32ff 	mov.w	r2, #4294967295
   219c8:	f04f 33ff 	mov.w	r3, #4294967295
   219cc:	f106 0008 	add.w	r0, r6, #8
   219d0:	f7ff f9ce 	bl	20d70 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   219d4:	4638      	mov	r0, r7
   219d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   219da:	bf00      	nop
   219dc:	000324a3 	.word	0x000324a3
   219e0:	000323cd 	.word	0x000323cd
   219e4:	0002d095 	.word	0x0002d095
   219e8:	0003244f 	.word	0x0003244f
   219ec:	0002ffcb 	.word	0x0002ffcb
   219f0:	20022bd4 	.word	0x20022bd4
   219f4:	0002df19 	.word	0x0002df19
   219f8:	0002df72 	.word	0x0002df72
   219fc:	0002df87 	.word	0x0002df87
   21a00:	0002df46 	.word	0x0002df46
   21a04:	0002df5d 	.word	0x0002df5d

00021a08 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   21a08:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   21a0a:	4d07      	ldr	r5, [pc, #28]	; (21a28 <z_reset_time_slice+0x20>)
   21a0c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   21a0e:	b154      	cbz	r4, 21a26 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   21a10:	f7fb fc90 	bl	1d334 <sys_clock_elapsed>
   21a14:	4b05      	ldr	r3, [pc, #20]	; (21a2c <z_reset_time_slice+0x24>)
   21a16:	4404      	add	r4, r0
   21a18:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   21a1a:	6828      	ldr	r0, [r5, #0]
   21a1c:	2100      	movs	r1, #0
	}
}
   21a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   21a22:	f001 bb87 	b.w	23134 <z_set_timeout_expiry>
}
   21a26:	bd38      	pop	{r3, r4, r5, pc}
   21a28:	20022be0 	.word	0x20022be0
   21a2c:	20022b9c 	.word	0x20022b9c

00021a30 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   21a30:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   21a32:	4d14      	ldr	r5, [pc, #80]	; (21a84 <update_cache+0x54>)
   21a34:	462b      	mov	r3, r5
   21a36:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a3a:	429c      	cmp	r4, r3
   21a3c:	d000      	beq.n	21a40 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21a3e:	b904      	cbnz	r4, 21a42 <update_cache+0x12>
   21a40:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   21a42:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   21a44:	b9a8      	cbnz	r0, 21a72 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   21a46:	b963      	cbnz	r3, 21a62 <update_cache+0x32>
   21a48:	490f      	ldr	r1, [pc, #60]	; (21a88 <update_cache+0x58>)
   21a4a:	2389      	movs	r3, #137	; 0x89
   21a4c:	4a0f      	ldr	r2, [pc, #60]	; (21a8c <update_cache+0x5c>)
   21a4e:	4810      	ldr	r0, [pc, #64]	; (21a90 <update_cache+0x60>)
   21a50:	f004 fc05 	bl	2625e <assert_print>
   21a54:	480f      	ldr	r0, [pc, #60]	; (21a94 <update_cache+0x64>)
   21a56:	f004 fc02 	bl	2625e <assert_print>
   21a5a:	2189      	movs	r1, #137	; 0x89
   21a5c:	480b      	ldr	r0, [pc, #44]	; (21a8c <update_cache+0x5c>)
   21a5e:	f004 fbf7 	bl	26250 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   21a62:	7b5a      	ldrb	r2, [r3, #13]
   21a64:	06d2      	lsls	r2, r2, #27
   21a66:	d104      	bne.n	21a72 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21a68:	69a2      	ldr	r2, [r4, #24]
   21a6a:	b912      	cbnz	r2, 21a72 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   21a6c:	89da      	ldrh	r2, [r3, #14]
   21a6e:	2a7f      	cmp	r2, #127	; 0x7f
   21a70:	d805      	bhi.n	21a7e <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   21a72:	429c      	cmp	r4, r3
   21a74:	d002      	beq.n	21a7c <update_cache+0x4c>
			z_reset_time_slice(thread);
   21a76:	4620      	mov	r0, r4
   21a78:	f7ff ffc6 	bl	21a08 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   21a7c:	4623      	mov	r3, r4
   21a7e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   21a80:	bd38      	pop	{r3, r4, r5, pc}
   21a82:	bf00      	nop
   21a84:	20022b9c 	.word	0x20022b9c
   21a88:	000324da 	.word	0x000324da
   21a8c:	000324b8 	.word	0x000324b8
   21a90:	0002d095 	.word	0x0002d095
   21a94:	00030d1f 	.word	0x00030d1f

00021a98 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   21a98:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21a9a:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21a9e:	7b42      	ldrb	r2, [r0, #13]
   21aa0:	2b00      	cmp	r3, #0
   21aa2:	db38      	blt.n	21b16 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21aa4:	06d3      	lsls	r3, r2, #27
   21aa6:	d136      	bne.n	21b16 <ready_thread+0x7e>
	return node->next != NULL;
   21aa8:	6983      	ldr	r3, [r0, #24]
   21aaa:	2b00      	cmp	r3, #0
   21aac:	d133      	bne.n	21b16 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   21aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21ab2:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21ab4:	4a18      	ldr	r2, [pc, #96]	; (21b18 <ready_thread+0x80>)
   21ab6:	4290      	cmp	r0, r2
   21ab8:	d109      	bne.n	21ace <ready_thread+0x36>
   21aba:	4918      	ldr	r1, [pc, #96]	; (21b1c <ready_thread+0x84>)
   21abc:	4818      	ldr	r0, [pc, #96]	; (21b20 <ready_thread+0x88>)
   21abe:	23ba      	movs	r3, #186	; 0xba
   21ac0:	4a18      	ldr	r2, [pc, #96]	; (21b24 <ready_thread+0x8c>)
   21ac2:	f004 fbcc 	bl	2625e <assert_print>
   21ac6:	21ba      	movs	r1, #186	; 0xba
   21ac8:	4816      	ldr	r0, [pc, #88]	; (21b24 <ready_thread+0x8c>)
   21aca:	f004 fbc1 	bl	26250 <assert_post_action>
	return list->head == list;
   21ace:	4916      	ldr	r1, [pc, #88]	; (21b28 <ready_thread+0x90>)
   21ad0:	460a      	mov	r2, r1
   21ad2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21ad6:	4294      	cmp	r4, r2
   21ad8:	bf18      	it	ne
   21ada:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   21adc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21ade:	b923      	cbnz	r3, 21aea <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   21ae0:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   21ae4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   21ae6:	6248      	str	r0, [r1, #36]	; 0x24
}
   21ae8:	e00c      	b.n	21b04 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   21aea:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21aee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   21af2:	42b5      	cmp	r5, r6
   21af4:	d00b      	beq.n	21b0e <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21af6:	42ae      	cmp	r6, r5
   21af8:	dd09      	ble.n	21b0e <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   21afa:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   21afc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   21b00:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   21b02:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   21b04:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   21b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   21b0a:	f7ff bf91 	b.w	21a30 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21b0e:	42a3      	cmp	r3, r4
   21b10:	d0e6      	beq.n	21ae0 <ready_thread+0x48>
   21b12:	681b      	ldr	r3, [r3, #0]
   21b14:	e7e3      	b.n	21ade <ready_thread+0x46>
}
   21b16:	bd70      	pop	{r4, r5, r6, pc}
   21b18:	20009c08 	.word	0x20009c08
   21b1c:	00032501 	.word	0x00032501
   21b20:	0002d095 	.word	0x0002d095
   21b24:	000324b8 	.word	0x000324b8
   21b28:	20022b9c 	.word	0x20022b9c

00021b2c <k_sched_time_slice_set>:
{
   21b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b2e:	4604      	mov	r4, r0
   21b30:	460d      	mov	r5, r1
	__asm__ volatile(
   21b32:	f04f 0320 	mov.w	r3, #32
   21b36:	f3ef 8711 	mrs	r7, BASEPRI
   21b3a:	f383 8812 	msr	BASEPRI_MAX, r3
   21b3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b42:	4822      	ldr	r0, [pc, #136]	; (21bcc <k_sched_time_slice_set+0xa0>)
   21b44:	f7fe fe18 	bl	20778 <z_spin_lock_valid>
   21b48:	b968      	cbnz	r0, 21b66 <k_sched_time_slice_set+0x3a>
   21b4a:	2394      	movs	r3, #148	; 0x94
   21b4c:	4a20      	ldr	r2, [pc, #128]	; (21bd0 <k_sched_time_slice_set+0xa4>)
   21b4e:	4921      	ldr	r1, [pc, #132]	; (21bd4 <k_sched_time_slice_set+0xa8>)
   21b50:	4821      	ldr	r0, [pc, #132]	; (21bd8 <k_sched_time_slice_set+0xac>)
   21b52:	f004 fb84 	bl	2625e <assert_print>
   21b56:	491d      	ldr	r1, [pc, #116]	; (21bcc <k_sched_time_slice_set+0xa0>)
   21b58:	4820      	ldr	r0, [pc, #128]	; (21bdc <k_sched_time_slice_set+0xb0>)
   21b5a:	f004 fb80 	bl	2625e <assert_print>
   21b5e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b60:	481b      	ldr	r0, [pc, #108]	; (21bd0 <k_sched_time_slice_set+0xa4>)
   21b62:	f004 fb75 	bl	26250 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   21b66:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   21b68:	4818      	ldr	r0, [pc, #96]	; (21bcc <k_sched_time_slice_set+0xa0>)
   21b6a:	f7fe fe21 	bl	207b0 <z_spin_lock_set_owner>
   21b6e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   21b72:	f240 30e7 	movw	r0, #999	; 0x3e7
   21b76:	4631      	mov	r1, r6
   21b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21b7c:	2300      	movs	r3, #0
   21b7e:	fbe4 010c 	umlal	r0, r1, r4, ip
   21b82:	f7e7 f9b5 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   21b86:	42b4      	cmp	r4, r6
   21b88:	dd02      	ble.n	21b90 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   21b8a:	2802      	cmp	r0, #2
   21b8c:	bfb8      	it	lt
   21b8e:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   21b90:	4a13      	ldr	r2, [pc, #76]	; (21be0 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   21b92:	4b14      	ldr	r3, [pc, #80]	; (21be4 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   21b94:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   21b96:	4a14      	ldr	r2, [pc, #80]	; (21be8 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   21b98:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   21b9a:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   21b9c:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   21b9e:	f7ff ff33 	bl	21a08 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ba2:	480a      	ldr	r0, [pc, #40]	; (21bcc <k_sched_time_slice_set+0xa0>)
   21ba4:	f7fe fdf6 	bl	20794 <z_spin_unlock_valid>
   21ba8:	b958      	cbnz	r0, 21bc2 <k_sched_time_slice_set+0x96>
   21baa:	23c2      	movs	r3, #194	; 0xc2
   21bac:	4a08      	ldr	r2, [pc, #32]	; (21bd0 <k_sched_time_slice_set+0xa4>)
   21bae:	490f      	ldr	r1, [pc, #60]	; (21bec <k_sched_time_slice_set+0xc0>)
   21bb0:	4809      	ldr	r0, [pc, #36]	; (21bd8 <k_sched_time_slice_set+0xac>)
   21bb2:	f004 fb54 	bl	2625e <assert_print>
   21bb6:	4905      	ldr	r1, [pc, #20]	; (21bcc <k_sched_time_slice_set+0xa0>)
   21bb8:	480d      	ldr	r0, [pc, #52]	; (21bf0 <k_sched_time_slice_set+0xc4>)
   21bba:	f004 fb50 	bl	2625e <assert_print>
   21bbe:	21c2      	movs	r1, #194	; 0xc2
   21bc0:	e7ce      	b.n	21b60 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   21bc2:	f387 8811 	msr	BASEPRI, r7
   21bc6:	f3bf 8f6f 	isb	sy
}
   21bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21bcc:	20022be4 	.word	0x20022be4
   21bd0:	0002df19 	.word	0x0002df19
   21bd4:	0002df72 	.word	0x0002df72
   21bd8:	0002d095 	.word	0x0002d095
   21bdc:	0002df87 	.word	0x0002df87
   21be0:	20022be0 	.word	0x20022be0
   21be4:	20022b9c 	.word	0x20022b9c
   21be8:	20022bdc 	.word	0x20022bdc
   21bec:	0002df46 	.word	0x0002df46
   21bf0:	0002df5d 	.word	0x0002df5d

00021bf4 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   21bf4:	b538      	push	{r3, r4, r5, lr}
   21bf6:	4604      	mov	r4, r0
	__asm__ volatile(
   21bf8:	f04f 0320 	mov.w	r3, #32
   21bfc:	f3ef 8511 	mrs	r5, BASEPRI
   21c00:	f383 8812 	msr	BASEPRI_MAX, r3
   21c04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c08:	4816      	ldr	r0, [pc, #88]	; (21c64 <z_ready_thread+0x70>)
   21c0a:	f7fe fdb5 	bl	20778 <z_spin_lock_valid>
   21c0e:	b968      	cbnz	r0, 21c2c <z_ready_thread+0x38>
   21c10:	2394      	movs	r3, #148	; 0x94
   21c12:	4a15      	ldr	r2, [pc, #84]	; (21c68 <z_ready_thread+0x74>)
   21c14:	4915      	ldr	r1, [pc, #84]	; (21c6c <z_ready_thread+0x78>)
   21c16:	4816      	ldr	r0, [pc, #88]	; (21c70 <z_ready_thread+0x7c>)
   21c18:	f004 fb21 	bl	2625e <assert_print>
   21c1c:	4911      	ldr	r1, [pc, #68]	; (21c64 <z_ready_thread+0x70>)
   21c1e:	4815      	ldr	r0, [pc, #84]	; (21c74 <z_ready_thread+0x80>)
   21c20:	f004 fb1d 	bl	2625e <assert_print>
   21c24:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c26:	4810      	ldr	r0, [pc, #64]	; (21c68 <z_ready_thread+0x74>)
   21c28:	f004 fb12 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   21c2c:	480d      	ldr	r0, [pc, #52]	; (21c64 <z_ready_thread+0x70>)
   21c2e:	f7fe fdbf 	bl	207b0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   21c32:	4620      	mov	r0, r4
   21c34:	f7ff ff30 	bl	21a98 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c38:	480a      	ldr	r0, [pc, #40]	; (21c64 <z_ready_thread+0x70>)
   21c3a:	f7fe fdab 	bl	20794 <z_spin_unlock_valid>
   21c3e:	b958      	cbnz	r0, 21c58 <z_ready_thread+0x64>
   21c40:	23c2      	movs	r3, #194	; 0xc2
   21c42:	4a09      	ldr	r2, [pc, #36]	; (21c68 <z_ready_thread+0x74>)
   21c44:	490c      	ldr	r1, [pc, #48]	; (21c78 <z_ready_thread+0x84>)
   21c46:	480a      	ldr	r0, [pc, #40]	; (21c70 <z_ready_thread+0x7c>)
   21c48:	f004 fb09 	bl	2625e <assert_print>
   21c4c:	4905      	ldr	r1, [pc, #20]	; (21c64 <z_ready_thread+0x70>)
   21c4e:	480b      	ldr	r0, [pc, #44]	; (21c7c <z_ready_thread+0x88>)
   21c50:	f004 fb05 	bl	2625e <assert_print>
   21c54:	21c2      	movs	r1, #194	; 0xc2
   21c56:	e7e6      	b.n	21c26 <z_ready_thread+0x32>
	__asm__ volatile(
   21c58:	f385 8811 	msr	BASEPRI, r5
   21c5c:	f3bf 8f6f 	isb	sy
		}
	}
}
   21c60:	bd38      	pop	{r3, r4, r5, pc}
   21c62:	bf00      	nop
   21c64:	20022be4 	.word	0x20022be4
   21c68:	0002df19 	.word	0x0002df19
   21c6c:	0002df72 	.word	0x0002df72
   21c70:	0002d095 	.word	0x0002d095
   21c74:	0002df87 	.word	0x0002df87
   21c78:	0002df46 	.word	0x0002df46
   21c7c:	0002df5d 	.word	0x0002df5d

00021c80 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   21c80:	b538      	push	{r3, r4, r5, lr}
   21c82:	4604      	mov	r4, r0
	__asm__ volatile(
   21c84:	f04f 0320 	mov.w	r3, #32
   21c88:	f3ef 8511 	mrs	r5, BASEPRI
   21c8c:	f383 8812 	msr	BASEPRI_MAX, r3
   21c90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c94:	4816      	ldr	r0, [pc, #88]	; (21cf0 <z_unpend_thread_no_timeout+0x70>)
   21c96:	f7fe fd6f 	bl	20778 <z_spin_lock_valid>
   21c9a:	b968      	cbnz	r0, 21cb8 <z_unpend_thread_no_timeout+0x38>
   21c9c:	2394      	movs	r3, #148	; 0x94
   21c9e:	4a15      	ldr	r2, [pc, #84]	; (21cf4 <z_unpend_thread_no_timeout+0x74>)
   21ca0:	4915      	ldr	r1, [pc, #84]	; (21cf8 <z_unpend_thread_no_timeout+0x78>)
   21ca2:	4816      	ldr	r0, [pc, #88]	; (21cfc <z_unpend_thread_no_timeout+0x7c>)
   21ca4:	f004 fadb 	bl	2625e <assert_print>
   21ca8:	4911      	ldr	r1, [pc, #68]	; (21cf0 <z_unpend_thread_no_timeout+0x70>)
   21caa:	4815      	ldr	r0, [pc, #84]	; (21d00 <z_unpend_thread_no_timeout+0x80>)
   21cac:	f004 fad7 	bl	2625e <assert_print>
   21cb0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cb2:	4810      	ldr	r0, [pc, #64]	; (21cf4 <z_unpend_thread_no_timeout+0x74>)
   21cb4:	f004 facc 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   21cb8:	480d      	ldr	r0, [pc, #52]	; (21cf0 <z_unpend_thread_no_timeout+0x70>)
   21cba:	f7fe fd79 	bl	207b0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   21cbe:	4620      	mov	r0, r4
   21cc0:	f000 fc62 	bl	22588 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cc4:	480a      	ldr	r0, [pc, #40]	; (21cf0 <z_unpend_thread_no_timeout+0x70>)
   21cc6:	f7fe fd65 	bl	20794 <z_spin_unlock_valid>
   21cca:	b958      	cbnz	r0, 21ce4 <z_unpend_thread_no_timeout+0x64>
   21ccc:	23c2      	movs	r3, #194	; 0xc2
   21cce:	4a09      	ldr	r2, [pc, #36]	; (21cf4 <z_unpend_thread_no_timeout+0x74>)
   21cd0:	490c      	ldr	r1, [pc, #48]	; (21d04 <z_unpend_thread_no_timeout+0x84>)
   21cd2:	480a      	ldr	r0, [pc, #40]	; (21cfc <z_unpend_thread_no_timeout+0x7c>)
   21cd4:	f004 fac3 	bl	2625e <assert_print>
   21cd8:	4905      	ldr	r1, [pc, #20]	; (21cf0 <z_unpend_thread_no_timeout+0x70>)
   21cda:	480b      	ldr	r0, [pc, #44]	; (21d08 <z_unpend_thread_no_timeout+0x88>)
   21cdc:	f004 fabf 	bl	2625e <assert_print>
   21ce0:	21c2      	movs	r1, #194	; 0xc2
   21ce2:	e7e6      	b.n	21cb2 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   21ce4:	f385 8811 	msr	BASEPRI, r5
   21ce8:	f3bf 8f6f 	isb	sy
	}
}
   21cec:	bd38      	pop	{r3, r4, r5, pc}
   21cee:	bf00      	nop
   21cf0:	20022be4 	.word	0x20022be4
   21cf4:	0002df19 	.word	0x0002df19
   21cf8:	0002df72 	.word	0x0002df72
   21cfc:	0002d095 	.word	0x0002d095
   21d00:	0002df87 	.word	0x0002df87
   21d04:	0002df46 	.word	0x0002df46
   21d08:	0002df5d 	.word	0x0002df5d

00021d0c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   21d0c:	b570      	push	{r4, r5, r6, lr}
   21d0e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21d10:	460d      	mov	r5, r1
   21d12:	b9e9      	cbnz	r1, 21d50 <z_reschedule+0x44>
   21d14:	f3ef 8605 	mrs	r6, IPSR
   21d18:	b9d6      	cbnz	r6, 21d50 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   21d1a:	4b18      	ldr	r3, [pc, #96]	; (21d7c <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   21d1c:	69da      	ldr	r2, [r3, #28]
   21d1e:	689b      	ldr	r3, [r3, #8]
   21d20:	429a      	cmp	r2, r3
   21d22:	d015      	beq.n	21d50 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d24:	f7fe fd36 	bl	20794 <z_spin_unlock_valid>
   21d28:	b968      	cbnz	r0, 21d46 <z_reschedule+0x3a>
   21d2a:	23e1      	movs	r3, #225	; 0xe1
   21d2c:	4a14      	ldr	r2, [pc, #80]	; (21d80 <z_reschedule+0x74>)
   21d2e:	4915      	ldr	r1, [pc, #84]	; (21d84 <z_reschedule+0x78>)
   21d30:	4815      	ldr	r0, [pc, #84]	; (21d88 <z_reschedule+0x7c>)
   21d32:	f004 fa94 	bl	2625e <assert_print>
   21d36:	4621      	mov	r1, r4
   21d38:	4814      	ldr	r0, [pc, #80]	; (21d8c <z_reschedule+0x80>)
   21d3a:	f004 fa90 	bl	2625e <assert_print>
   21d3e:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d40:	480f      	ldr	r0, [pc, #60]	; (21d80 <z_reschedule+0x74>)
   21d42:	f004 fa85 	bl	26250 <assert_post_action>
	ret = arch_swap(key);
   21d46:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21d4c:	f7ef b9c6 	b.w	110dc <arch_swap>
   21d50:	4620      	mov	r0, r4
   21d52:	f7fe fd1f 	bl	20794 <z_spin_unlock_valid>
   21d56:	b958      	cbnz	r0, 21d70 <z_reschedule+0x64>
   21d58:	23c2      	movs	r3, #194	; 0xc2
   21d5a:	4a09      	ldr	r2, [pc, #36]	; (21d80 <z_reschedule+0x74>)
   21d5c:	4909      	ldr	r1, [pc, #36]	; (21d84 <z_reschedule+0x78>)
   21d5e:	480a      	ldr	r0, [pc, #40]	; (21d88 <z_reschedule+0x7c>)
   21d60:	f004 fa7d 	bl	2625e <assert_print>
   21d64:	4621      	mov	r1, r4
   21d66:	4809      	ldr	r0, [pc, #36]	; (21d8c <z_reschedule+0x80>)
   21d68:	f004 fa79 	bl	2625e <assert_print>
   21d6c:	21c2      	movs	r1, #194	; 0xc2
   21d6e:	e7e7      	b.n	21d40 <z_reschedule+0x34>
   21d70:	f385 8811 	msr	BASEPRI, r5
   21d74:	f3bf 8f6f 	isb	sy
   21d78:	bd70      	pop	{r4, r5, r6, pc}
   21d7a:	bf00      	nop
   21d7c:	20022b9c 	.word	0x20022b9c
   21d80:	0002df19 	.word	0x0002df19
   21d84:	0002df46 	.word	0x0002df46
   21d88:	0002d095 	.word	0x0002d095
   21d8c:	0002df5d 	.word	0x0002df5d

00021d90 <z_sched_start>:
{
   21d90:	b538      	push	{r3, r4, r5, lr}
   21d92:	4604      	mov	r4, r0
	__asm__ volatile(
   21d94:	f04f 0320 	mov.w	r3, #32
   21d98:	f3ef 8511 	mrs	r5, BASEPRI
   21d9c:	f383 8812 	msr	BASEPRI_MAX, r3
   21da0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21da4:	481c      	ldr	r0, [pc, #112]	; (21e18 <z_sched_start+0x88>)
   21da6:	f7fe fce7 	bl	20778 <z_spin_lock_valid>
   21daa:	b968      	cbnz	r0, 21dc8 <z_sched_start+0x38>
   21dac:	2394      	movs	r3, #148	; 0x94
   21dae:	4a1b      	ldr	r2, [pc, #108]	; (21e1c <z_sched_start+0x8c>)
   21db0:	491b      	ldr	r1, [pc, #108]	; (21e20 <z_sched_start+0x90>)
   21db2:	481c      	ldr	r0, [pc, #112]	; (21e24 <z_sched_start+0x94>)
   21db4:	f004 fa53 	bl	2625e <assert_print>
   21db8:	4917      	ldr	r1, [pc, #92]	; (21e18 <z_sched_start+0x88>)
   21dba:	481b      	ldr	r0, [pc, #108]	; (21e28 <z_sched_start+0x98>)
   21dbc:	f004 fa4f 	bl	2625e <assert_print>
   21dc0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dc2:	4816      	ldr	r0, [pc, #88]	; (21e1c <z_sched_start+0x8c>)
   21dc4:	f004 fa44 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   21dc8:	4813      	ldr	r0, [pc, #76]	; (21e18 <z_sched_start+0x88>)
   21dca:	f7fe fcf1 	bl	207b0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21dce:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   21dd0:	075a      	lsls	r2, r3, #29
   21dd2:	d414      	bmi.n	21dfe <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dd4:	4810      	ldr	r0, [pc, #64]	; (21e18 <z_sched_start+0x88>)
   21dd6:	f7fe fcdd 	bl	20794 <z_spin_unlock_valid>
   21dda:	b958      	cbnz	r0, 21df4 <z_sched_start+0x64>
   21ddc:	23c2      	movs	r3, #194	; 0xc2
   21dde:	4a0f      	ldr	r2, [pc, #60]	; (21e1c <z_sched_start+0x8c>)
   21de0:	4912      	ldr	r1, [pc, #72]	; (21e2c <z_sched_start+0x9c>)
   21de2:	4810      	ldr	r0, [pc, #64]	; (21e24 <z_sched_start+0x94>)
   21de4:	f004 fa3b 	bl	2625e <assert_print>
   21de8:	490b      	ldr	r1, [pc, #44]	; (21e18 <z_sched_start+0x88>)
   21dea:	4811      	ldr	r0, [pc, #68]	; (21e30 <z_sched_start+0xa0>)
   21dec:	f004 fa37 	bl	2625e <assert_print>
   21df0:	21c2      	movs	r1, #194	; 0xc2
   21df2:	e7e6      	b.n	21dc2 <z_sched_start+0x32>
	__asm__ volatile(
   21df4:	f385 8811 	msr	BASEPRI, r5
   21df8:	f3bf 8f6f 	isb	sy
}
   21dfc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21dfe:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   21e02:	4620      	mov	r0, r4
   21e04:	7363      	strb	r3, [r4, #13]
   21e06:	f7ff fe47 	bl	21a98 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21e0a:	4629      	mov	r1, r5
}
   21e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   21e10:	4801      	ldr	r0, [pc, #4]	; (21e18 <z_sched_start+0x88>)
   21e12:	f7ff bf7b 	b.w	21d0c <z_reschedule>
   21e16:	bf00      	nop
   21e18:	20022be4 	.word	0x20022be4
   21e1c:	0002df19 	.word	0x0002df19
   21e20:	0002df72 	.word	0x0002df72
   21e24:	0002d095 	.word	0x0002d095
   21e28:	0002df87 	.word	0x0002df87
   21e2c:	0002df46 	.word	0x0002df46
   21e30:	0002df5d 	.word	0x0002df5d

00021e34 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   21e34:	b510      	push	{r4, lr}
	__asm__ volatile(
   21e36:	f04f 0320 	mov.w	r3, #32
   21e3a:	f3ef 8411 	mrs	r4, BASEPRI
   21e3e:	f383 8812 	msr	BASEPRI_MAX, r3
   21e42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e46:	4825      	ldr	r0, [pc, #148]	; (21edc <k_sched_lock+0xa8>)
   21e48:	f7fe fc96 	bl	20778 <z_spin_lock_valid>
   21e4c:	b960      	cbnz	r0, 21e68 <k_sched_lock+0x34>
   21e4e:	2394      	movs	r3, #148	; 0x94
   21e50:	4a23      	ldr	r2, [pc, #140]	; (21ee0 <k_sched_lock+0xac>)
   21e52:	4924      	ldr	r1, [pc, #144]	; (21ee4 <k_sched_lock+0xb0>)
   21e54:	4824      	ldr	r0, [pc, #144]	; (21ee8 <k_sched_lock+0xb4>)
   21e56:	f004 fa02 	bl	2625e <assert_print>
   21e5a:	4920      	ldr	r1, [pc, #128]	; (21edc <k_sched_lock+0xa8>)
   21e5c:	4823      	ldr	r0, [pc, #140]	; (21eec <k_sched_lock+0xb8>)
   21e5e:	f004 f9fe 	bl	2625e <assert_print>
   21e62:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e64:	481e      	ldr	r0, [pc, #120]	; (21ee0 <k_sched_lock+0xac>)
   21e66:	e010      	b.n	21e8a <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   21e68:	481c      	ldr	r0, [pc, #112]	; (21edc <k_sched_lock+0xa8>)
   21e6a:	f7fe fca1 	bl	207b0 <z_spin_lock_set_owner>
   21e6e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21e72:	b163      	cbz	r3, 21e8e <k_sched_lock+0x5a>
   21e74:	491e      	ldr	r1, [pc, #120]	; (21ef0 <k_sched_lock+0xbc>)
   21e76:	23fd      	movs	r3, #253	; 0xfd
   21e78:	4a1e      	ldr	r2, [pc, #120]	; (21ef4 <k_sched_lock+0xc0>)
   21e7a:	481b      	ldr	r0, [pc, #108]	; (21ee8 <k_sched_lock+0xb4>)
   21e7c:	f004 f9ef 	bl	2625e <assert_print>
   21e80:	481d      	ldr	r0, [pc, #116]	; (21ef8 <k_sched_lock+0xc4>)
   21e82:	f004 f9ec 	bl	2625e <assert_print>
   21e86:	21fd      	movs	r1, #253	; 0xfd
   21e88:	481a      	ldr	r0, [pc, #104]	; (21ef4 <k_sched_lock+0xc0>)
   21e8a:	f004 f9e1 	bl	26250 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   21e8e:	4b1b      	ldr	r3, [pc, #108]	; (21efc <k_sched_lock+0xc8>)
   21e90:	689a      	ldr	r2, [r3, #8]
   21e92:	7bd3      	ldrb	r3, [r2, #15]
   21e94:	2b01      	cmp	r3, #1
   21e96:	d10a      	bne.n	21eae <k_sched_lock+0x7a>
   21e98:	4919      	ldr	r1, [pc, #100]	; (21f00 <k_sched_lock+0xcc>)
   21e9a:	23fe      	movs	r3, #254	; 0xfe
   21e9c:	4a15      	ldr	r2, [pc, #84]	; (21ef4 <k_sched_lock+0xc0>)
   21e9e:	4812      	ldr	r0, [pc, #72]	; (21ee8 <k_sched_lock+0xb4>)
   21ea0:	f004 f9dd 	bl	2625e <assert_print>
   21ea4:	4814      	ldr	r0, [pc, #80]	; (21ef8 <k_sched_lock+0xc4>)
   21ea6:	f004 f9da 	bl	2625e <assert_print>
   21eaa:	21fe      	movs	r1, #254	; 0xfe
   21eac:	e7ec      	b.n	21e88 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   21eae:	3b01      	subs	r3, #1
   21eb0:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21eb2:	480a      	ldr	r0, [pc, #40]	; (21edc <k_sched_lock+0xa8>)
   21eb4:	f7fe fc6e 	bl	20794 <z_spin_unlock_valid>
   21eb8:	b958      	cbnz	r0, 21ed2 <k_sched_lock+0x9e>
   21eba:	23c2      	movs	r3, #194	; 0xc2
   21ebc:	4a08      	ldr	r2, [pc, #32]	; (21ee0 <k_sched_lock+0xac>)
   21ebe:	4911      	ldr	r1, [pc, #68]	; (21f04 <k_sched_lock+0xd0>)
   21ec0:	4809      	ldr	r0, [pc, #36]	; (21ee8 <k_sched_lock+0xb4>)
   21ec2:	f004 f9cc 	bl	2625e <assert_print>
   21ec6:	4905      	ldr	r1, [pc, #20]	; (21edc <k_sched_lock+0xa8>)
   21ec8:	480f      	ldr	r0, [pc, #60]	; (21f08 <k_sched_lock+0xd4>)
   21eca:	f004 f9c8 	bl	2625e <assert_print>
   21ece:	21c2      	movs	r1, #194	; 0xc2
   21ed0:	e7c8      	b.n	21e64 <k_sched_lock+0x30>
	__asm__ volatile(
   21ed2:	f384 8811 	msr	BASEPRI, r4
   21ed6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21eda:	bd10      	pop	{r4, pc}
   21edc:	20022be4 	.word	0x20022be4
   21ee0:	0002df19 	.word	0x0002df19
   21ee4:	0002df72 	.word	0x0002df72
   21ee8:	0002d095 	.word	0x0002d095
   21eec:	0002df87 	.word	0x0002df87
   21ef0:	0003224b 	.word	0x0003224b
   21ef4:	00032522 	.word	0x00032522
   21ef8:	00030d1f 	.word	0x00030d1f
   21efc:	20022b9c 	.word	0x20022b9c
   21f00:	0003254d 	.word	0x0003254d
   21f04:	0002df46 	.word	0x0002df46
   21f08:	0002df5d 	.word	0x0002df5d

00021f0c <k_sched_unlock>:

void k_sched_unlock(void)
{
   21f0c:	b510      	push	{r4, lr}
	__asm__ volatile(
   21f0e:	f04f 0320 	mov.w	r3, #32
   21f12:	f3ef 8411 	mrs	r4, BASEPRI
   21f16:	f383 8812 	msr	BASEPRI_MAX, r3
   21f1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f1e:	4829      	ldr	r0, [pc, #164]	; (21fc4 <k_sched_unlock+0xb8>)
   21f20:	f7fe fc2a 	bl	20778 <z_spin_lock_valid>
   21f24:	b960      	cbnz	r0, 21f40 <k_sched_unlock+0x34>
   21f26:	2394      	movs	r3, #148	; 0x94
   21f28:	4a27      	ldr	r2, [pc, #156]	; (21fc8 <k_sched_unlock+0xbc>)
   21f2a:	4928      	ldr	r1, [pc, #160]	; (21fcc <k_sched_unlock+0xc0>)
   21f2c:	4828      	ldr	r0, [pc, #160]	; (21fd0 <k_sched_unlock+0xc4>)
   21f2e:	f004 f996 	bl	2625e <assert_print>
   21f32:	4924      	ldr	r1, [pc, #144]	; (21fc4 <k_sched_unlock+0xb8>)
   21f34:	4827      	ldr	r0, [pc, #156]	; (21fd4 <k_sched_unlock+0xc8>)
   21f36:	f004 f992 	bl	2625e <assert_print>
   21f3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f3c:	4822      	ldr	r0, [pc, #136]	; (21fc8 <k_sched_unlock+0xbc>)
   21f3e:	e013      	b.n	21f68 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   21f40:	4820      	ldr	r0, [pc, #128]	; (21fc4 <k_sched_unlock+0xb8>)
   21f42:	f7fe fc35 	bl	207b0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   21f46:	4b24      	ldr	r3, [pc, #144]	; (21fd8 <k_sched_unlock+0xcc>)
   21f48:	689a      	ldr	r2, [r3, #8]
   21f4a:	7bd3      	ldrb	r3, [r2, #15]
   21f4c:	b973      	cbnz	r3, 21f6c <k_sched_unlock+0x60>
   21f4e:	4923      	ldr	r1, [pc, #140]	; (21fdc <k_sched_unlock+0xd0>)
   21f50:	f240 33e7 	movw	r3, #999	; 0x3e7
   21f54:	4a22      	ldr	r2, [pc, #136]	; (21fe0 <k_sched_unlock+0xd4>)
   21f56:	481e      	ldr	r0, [pc, #120]	; (21fd0 <k_sched_unlock+0xc4>)
   21f58:	f004 f981 	bl	2625e <assert_print>
   21f5c:	4821      	ldr	r0, [pc, #132]	; (21fe4 <k_sched_unlock+0xd8>)
   21f5e:	f004 f97e 	bl	2625e <assert_print>
   21f62:	f240 31e7 	movw	r1, #999	; 0x3e7
   21f66:	481e      	ldr	r0, [pc, #120]	; (21fe0 <k_sched_unlock+0xd4>)
   21f68:	f004 f972 	bl	26250 <assert_post_action>
   21f6c:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   21f70:	b160      	cbz	r0, 21f8c <k_sched_unlock+0x80>
   21f72:	491d      	ldr	r1, [pc, #116]	; (21fe8 <k_sched_unlock+0xdc>)
   21f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21f78:	4a19      	ldr	r2, [pc, #100]	; (21fe0 <k_sched_unlock+0xd4>)
   21f7a:	4815      	ldr	r0, [pc, #84]	; (21fd0 <k_sched_unlock+0xc4>)
   21f7c:	f004 f96f 	bl	2625e <assert_print>
   21f80:	4818      	ldr	r0, [pc, #96]	; (21fe4 <k_sched_unlock+0xd8>)
   21f82:	f004 f96c 	bl	2625e <assert_print>
   21f86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   21f8a:	e7ec      	b.n	21f66 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   21f8c:	3301      	adds	r3, #1
   21f8e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   21f90:	f7ff fd4e 	bl	21a30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f94:	480b      	ldr	r0, [pc, #44]	; (21fc4 <k_sched_unlock+0xb8>)
   21f96:	f7fe fbfd 	bl	20794 <z_spin_unlock_valid>
   21f9a:	b958      	cbnz	r0, 21fb4 <k_sched_unlock+0xa8>
   21f9c:	23c2      	movs	r3, #194	; 0xc2
   21f9e:	4a0a      	ldr	r2, [pc, #40]	; (21fc8 <k_sched_unlock+0xbc>)
   21fa0:	4912      	ldr	r1, [pc, #72]	; (21fec <k_sched_unlock+0xe0>)
   21fa2:	480b      	ldr	r0, [pc, #44]	; (21fd0 <k_sched_unlock+0xc4>)
   21fa4:	f004 f95b 	bl	2625e <assert_print>
   21fa8:	4906      	ldr	r1, [pc, #24]	; (21fc4 <k_sched_unlock+0xb8>)
   21faa:	4811      	ldr	r0, [pc, #68]	; (21ff0 <k_sched_unlock+0xe4>)
   21fac:	f004 f957 	bl	2625e <assert_print>
   21fb0:	21c2      	movs	r1, #194	; 0xc2
   21fb2:	e7c3      	b.n	21f3c <k_sched_unlock+0x30>
	__asm__ volatile(
   21fb4:	f384 8811 	msr	BASEPRI, r4
   21fb8:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   21fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   21fc0:	f008 bd8a 	b.w	2aad8 <z_reschedule_unlocked>
   21fc4:	20022be4 	.word	0x20022be4
   21fc8:	0002df19 	.word	0x0002df19
   21fcc:	0002df72 	.word	0x0002df72
   21fd0:	0002d095 	.word	0x0002d095
   21fd4:	0002df87 	.word	0x0002df87
   21fd8:	20022b9c 	.word	0x20022b9c
   21fdc:	0003257e 	.word	0x0003257e
   21fe0:	000324b8 	.word	0x000324b8
   21fe4:	00030d1f 	.word	0x00030d1f
   21fe8:	0003224b 	.word	0x0003224b
   21fec:	0002df46 	.word	0x0002df46
   21ff0:	0002df5d 	.word	0x0002df5d

00021ff4 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   21ff4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21ff6:	4b0b      	ldr	r3, [pc, #44]	; (22024 <z_priq_dumb_remove+0x30>)
   21ff8:	4299      	cmp	r1, r3
   21ffa:	d10b      	bne.n	22014 <z_priq_dumb_remove+0x20>
   21ffc:	490a      	ldr	r1, [pc, #40]	; (22028 <z_priq_dumb_remove+0x34>)
   21ffe:	480b      	ldr	r0, [pc, #44]	; (2202c <z_priq_dumb_remove+0x38>)
   22000:	f240 4373 	movw	r3, #1139	; 0x473
   22004:	4a0a      	ldr	r2, [pc, #40]	; (22030 <z_priq_dumb_remove+0x3c>)
   22006:	f004 f92a 	bl	2625e <assert_print>
   2200a:	f240 4173 	movw	r1, #1139	; 0x473
   2200e:	4808      	ldr	r0, [pc, #32]	; (22030 <z_priq_dumb_remove+0x3c>)
   22010:	f004 f91e 	bl	26250 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   22014:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   22018:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2201a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2201c:	2300      	movs	r3, #0
	node->prev = NULL;
   2201e:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   22022:	bd08      	pop	{r3, pc}
   22024:	20009c08 	.word	0x20009c08
   22028:	00032501 	.word	0x00032501
   2202c:	0002d095 	.word	0x0002d095
   22030:	000324b8 	.word	0x000324b8

00022034 <move_thread_to_end_of_prio_q>:
{
   22034:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   22036:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2203a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2203c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2203e:	7b43      	ldrb	r3, [r0, #13]
   22040:	da06      	bge.n	22050 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   22046:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22048:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2204a:	481d      	ldr	r0, [pc, #116]	; (220c0 <move_thread_to_end_of_prio_q+0x8c>)
   2204c:	f7ff ffd2 	bl	21ff4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22050:	7b63      	ldrb	r3, [r4, #13]
   22052:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22056:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22058:	4b1a      	ldr	r3, [pc, #104]	; (220c4 <move_thread_to_end_of_prio_q+0x90>)
   2205a:	429c      	cmp	r4, r3
   2205c:	d109      	bne.n	22072 <move_thread_to_end_of_prio_q+0x3e>
   2205e:	491a      	ldr	r1, [pc, #104]	; (220c8 <move_thread_to_end_of_prio_q+0x94>)
   22060:	481a      	ldr	r0, [pc, #104]	; (220cc <move_thread_to_end_of_prio_q+0x98>)
   22062:	23ba      	movs	r3, #186	; 0xba
   22064:	4a1a      	ldr	r2, [pc, #104]	; (220d0 <move_thread_to_end_of_prio_q+0x9c>)
   22066:	f004 f8fa 	bl	2625e <assert_print>
   2206a:	21ba      	movs	r1, #186	; 0xba
   2206c:	4818      	ldr	r0, [pc, #96]	; (220d0 <move_thread_to_end_of_prio_q+0x9c>)
   2206e:	f004 f8ef 	bl	26250 <assert_post_action>
	return list->head == list;
   22072:	4a18      	ldr	r2, [pc, #96]	; (220d4 <move_thread_to_end_of_prio_q+0xa0>)
   22074:	4611      	mov	r1, r2
   22076:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   2207a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2207c:	428b      	cmp	r3, r1
   2207e:	bf08      	it	eq
   22080:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22082:	b923      	cbnz	r3, 2208e <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   22084:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   22088:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2208a:	6254      	str	r4, [r2, #36]	; 0x24
}
   2208c:	e00c      	b.n	220a8 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   2208e:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22092:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   22096:	42b5      	cmp	r5, r6
   22098:	d00e      	beq.n	220b8 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2209a:	42ae      	cmp	r6, r5
   2209c:	dd0c      	ble.n	220b8 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   2209e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   220a0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   220a4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   220a6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   220a8:	6890      	ldr	r0, [r2, #8]
   220aa:	1b03      	subs	r3, r0, r4
   220ac:	4258      	negs	r0, r3
   220ae:	4158      	adcs	r0, r3
}
   220b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   220b4:	f7ff bcbc 	b.w	21a30 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   220b8:	4298      	cmp	r0, r3
   220ba:	d0e3      	beq.n	22084 <move_thread_to_end_of_prio_q+0x50>
   220bc:	681b      	ldr	r3, [r3, #0]
   220be:	e7e0      	b.n	22082 <move_thread_to_end_of_prio_q+0x4e>
   220c0:	20022bbc 	.word	0x20022bbc
   220c4:	20009c08 	.word	0x20009c08
   220c8:	00032501 	.word	0x00032501
   220cc:	0002d095 	.word	0x0002d095
   220d0:	000324b8 	.word	0x000324b8
   220d4:	20022b9c 	.word	0x20022b9c

000220d8 <z_time_slice>:
{
   220d8:	b570      	push	{r4, r5, r6, lr}
   220da:	4605      	mov	r5, r0
	__asm__ volatile(
   220dc:	f04f 0320 	mov.w	r3, #32
   220e0:	f3ef 8611 	mrs	r6, BASEPRI
   220e4:	f383 8812 	msr	BASEPRI_MAX, r3
   220e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   220ec:	4829      	ldr	r0, [pc, #164]	; (22194 <z_time_slice+0xbc>)
   220ee:	f7fe fb43 	bl	20778 <z_spin_lock_valid>
   220f2:	b968      	cbnz	r0, 22110 <z_time_slice+0x38>
   220f4:	2394      	movs	r3, #148	; 0x94
   220f6:	4a28      	ldr	r2, [pc, #160]	; (22198 <z_time_slice+0xc0>)
   220f8:	4928      	ldr	r1, [pc, #160]	; (2219c <z_time_slice+0xc4>)
   220fa:	4829      	ldr	r0, [pc, #164]	; (221a0 <z_time_slice+0xc8>)
   220fc:	f004 f8af 	bl	2625e <assert_print>
   22100:	4924      	ldr	r1, [pc, #144]	; (22194 <z_time_slice+0xbc>)
   22102:	4828      	ldr	r0, [pc, #160]	; (221a4 <z_time_slice+0xcc>)
   22104:	f004 f8ab 	bl	2625e <assert_print>
   22108:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2210a:	4823      	ldr	r0, [pc, #140]	; (22198 <z_time_slice+0xc0>)
   2210c:	f004 f8a0 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   22110:	4820      	ldr	r0, [pc, #128]	; (22194 <z_time_slice+0xbc>)
   22112:	f7fe fb4d 	bl	207b0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   22116:	4b24      	ldr	r3, [pc, #144]	; (221a8 <z_time_slice+0xd0>)
   22118:	4a24      	ldr	r2, [pc, #144]	; (221ac <z_time_slice+0xd4>)
   2211a:	689c      	ldr	r4, [r3, #8]
   2211c:	6811      	ldr	r1, [r2, #0]
   2211e:	428c      	cmp	r4, r1
   22120:	d112      	bne.n	22148 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   22122:	4620      	mov	r0, r4
   22124:	f7ff fc70 	bl	21a08 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22128:	481a      	ldr	r0, [pc, #104]	; (22194 <z_time_slice+0xbc>)
   2212a:	f7fe fb33 	bl	20794 <z_spin_unlock_valid>
   2212e:	bb58      	cbnz	r0, 22188 <z_time_slice+0xb0>
   22130:	23c2      	movs	r3, #194	; 0xc2
   22132:	4a19      	ldr	r2, [pc, #100]	; (22198 <z_time_slice+0xc0>)
   22134:	491e      	ldr	r1, [pc, #120]	; (221b0 <z_time_slice+0xd8>)
   22136:	481a      	ldr	r0, [pc, #104]	; (221a0 <z_time_slice+0xc8>)
   22138:	f004 f891 	bl	2625e <assert_print>
   2213c:	4915      	ldr	r1, [pc, #84]	; (22194 <z_time_slice+0xbc>)
   2213e:	481d      	ldr	r0, [pc, #116]	; (221b4 <z_time_slice+0xdc>)
   22140:	f004 f88d 	bl	2625e <assert_print>
   22144:	21c2      	movs	r1, #194	; 0xc2
   22146:	e7e0      	b.n	2210a <z_time_slice+0x32>
	pending_current = NULL;
   22148:	2100      	movs	r1, #0
   2214a:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   2214c:	4a1a      	ldr	r2, [pc, #104]	; (221b8 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   2214e:	6812      	ldr	r2, [r2, #0]
   22150:	b1c2      	cbz	r2, 22184 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   22152:	89e2      	ldrh	r2, [r4, #14]
   22154:	2a7f      	cmp	r2, #127	; 0x7f
   22156:	d815      	bhi.n	22184 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   22158:	7b62      	ldrb	r2, [r4, #13]
   2215a:	06d2      	lsls	r2, r2, #27
   2215c:	d112      	bne.n	22184 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2215e:	4a17      	ldr	r2, [pc, #92]	; (221bc <z_time_slice+0xe4>)
   22160:	f994 100e 	ldrsb.w	r1, [r4, #14]
   22164:	6812      	ldr	r2, [r2, #0]
   22166:	4291      	cmp	r1, r2
   22168:	db0c      	blt.n	22184 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   2216a:	4a15      	ldr	r2, [pc, #84]	; (221c0 <z_time_slice+0xe8>)
   2216c:	4294      	cmp	r4, r2
   2216e:	d009      	beq.n	22184 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   22170:	691a      	ldr	r2, [r3, #16]
   22172:	42aa      	cmp	r2, r5
   22174:	dc03      	bgt.n	2217e <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   22176:	4620      	mov	r0, r4
   22178:	f7ff ff5c 	bl	22034 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   2217c:	e7d1      	b.n	22122 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   2217e:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   22180:	611a      	str	r2, [r3, #16]
   22182:	e7d1      	b.n	22128 <z_time_slice+0x50>
   22184:	2200      	movs	r2, #0
   22186:	e7fb      	b.n	22180 <z_time_slice+0xa8>
	__asm__ volatile(
   22188:	f386 8811 	msr	BASEPRI, r6
   2218c:	f3bf 8f6f 	isb	sy
}
   22190:	bd70      	pop	{r4, r5, r6, pc}
   22192:	bf00      	nop
   22194:	20022be4 	.word	0x20022be4
   22198:	0002df19 	.word	0x0002df19
   2219c:	0002df72 	.word	0x0002df72
   221a0:	0002d095 	.word	0x0002d095
   221a4:	0002df87 	.word	0x0002df87
   221a8:	20022b9c 	.word	0x20022b9c
   221ac:	20022bd8 	.word	0x20022bd8
   221b0:	0002df46 	.word	0x0002df46
   221b4:	0002df5d 	.word	0x0002df5d
   221b8:	20022be0 	.word	0x20022be0
   221bc:	20022bdc 	.word	0x20022bdc
   221c0:	20009c08 	.word	0x20009c08

000221c4 <unready_thread>:
{
   221c4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   221c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   221ca:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   221cc:	2a00      	cmp	r2, #0
   221ce:	7b43      	ldrb	r3, [r0, #13]
   221d0:	da06      	bge.n	221e0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   221d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   221d6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   221d8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   221da:	4806      	ldr	r0, [pc, #24]	; (221f4 <unready_thread+0x30>)
   221dc:	f7ff ff0a 	bl	21ff4 <z_priq_dumb_remove>
	update_cache(thread == _current);
   221e0:	4b05      	ldr	r3, [pc, #20]	; (221f8 <unready_thread+0x34>)
   221e2:	6898      	ldr	r0, [r3, #8]
   221e4:	1b03      	subs	r3, r0, r4
   221e6:	4258      	negs	r0, r3
   221e8:	4158      	adcs	r0, r3
}
   221ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   221ee:	f7ff bc1f 	b.w	21a30 <update_cache>
   221f2:	bf00      	nop
   221f4:	20022bbc 	.word	0x20022bbc
   221f8:	20022b9c 	.word	0x20022b9c

000221fc <add_to_waitq_locked>:
{
   221fc:	b538      	push	{r3, r4, r5, lr}
   221fe:	4604      	mov	r4, r0
   22200:	460d      	mov	r5, r1
	unready_thread(thread);
   22202:	f7ff ffdf 	bl	221c4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22206:	7b63      	ldrb	r3, [r4, #13]
   22208:	f043 0302 	orr.w	r3, r3, #2
   2220c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2220e:	b34d      	cbz	r5, 22264 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22210:	4b15      	ldr	r3, [pc, #84]	; (22268 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   22212:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22214:	429c      	cmp	r4, r3
   22216:	d109      	bne.n	2222c <add_to_waitq_locked+0x30>
   22218:	4914      	ldr	r1, [pc, #80]	; (2226c <add_to_waitq_locked+0x70>)
   2221a:	4815      	ldr	r0, [pc, #84]	; (22270 <add_to_waitq_locked+0x74>)
   2221c:	23ba      	movs	r3, #186	; 0xba
   2221e:	4a15      	ldr	r2, [pc, #84]	; (22274 <add_to_waitq_locked+0x78>)
   22220:	f004 f81d 	bl	2625e <assert_print>
   22224:	21ba      	movs	r1, #186	; 0xba
   22226:	4813      	ldr	r0, [pc, #76]	; (22274 <add_to_waitq_locked+0x78>)
   22228:	f004 f812 	bl	26250 <assert_post_action>
	return list->head == list;
   2222c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2222e:	429d      	cmp	r5, r3
   22230:	d109      	bne.n	22246 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   22232:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22234:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22238:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2223a:	606c      	str	r4, [r5, #4]
}
   2223c:	e012      	b.n	22264 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   2223e:	686a      	ldr	r2, [r5, #4]
   22240:	4293      	cmp	r3, r2
   22242:	d0f6      	beq.n	22232 <add_to_waitq_locked+0x36>
   22244:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22246:	2b00      	cmp	r3, #0
   22248:	d0f3      	beq.n	22232 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   2224a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2224e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   22252:	428a      	cmp	r2, r1
   22254:	d0f3      	beq.n	2223e <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22256:	4291      	cmp	r1, r2
   22258:	ddf1      	ble.n	2223e <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   2225a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2225c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22260:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22262:	605c      	str	r4, [r3, #4]
}
   22264:	bd38      	pop	{r3, r4, r5, pc}
   22266:	bf00      	nop
   22268:	20009c08 	.word	0x20009c08
   2226c:	00032501 	.word	0x00032501
   22270:	0002d095 	.word	0x0002d095
   22274:	000324b8 	.word	0x000324b8

00022278 <pend_locked>:
{
   22278:	b570      	push	{r4, r5, r6, lr}
   2227a:	4615      	mov	r5, r2
   2227c:	461c      	mov	r4, r3
   2227e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   22280:	f7ff ffbc 	bl	221fc <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22284:	f1b4 3fff 	cmp.w	r4, #4294967295
   22288:	bf08      	it	eq
   2228a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2228e:	d008      	beq.n	222a2 <pend_locked+0x2a>
   22290:	462a      	mov	r2, r5
   22292:	4623      	mov	r3, r4
   22294:	f106 0018 	add.w	r0, r6, #24
   22298:	4902      	ldr	r1, [pc, #8]	; (222a4 <pend_locked+0x2c>)
}
   2229a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2229e:	f000 bdf1 	b.w	22e84 <z_add_timeout>
   222a2:	bd70      	pop	{r4, r5, r6, pc}
   222a4:	0002265d 	.word	0x0002265d

000222a8 <z_pend_curr>:
{
   222a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   222ac:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   222b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 22368 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   222b4:	4c2d      	ldr	r4, [pc, #180]	; (2236c <z_pend_curr+0xc4>)
{
   222b6:	4617      	mov	r7, r2
	pending_current = _current;
   222b8:	4b2d      	ldr	r3, [pc, #180]	; (22370 <z_pend_curr+0xc8>)
   222ba:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   222be:	42a0      	cmp	r0, r4
{
   222c0:	4605      	mov	r5, r0
   222c2:	460e      	mov	r6, r1
	pending_current = _current;
   222c4:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   222c6:	d10b      	bne.n	222e0 <z_pend_curr+0x38>
   222c8:	492a      	ldr	r1, [pc, #168]	; (22374 <z_pend_curr+0xcc>)
   222ca:	482b      	ldr	r0, [pc, #172]	; (22378 <z_pend_curr+0xd0>)
   222cc:	f240 334e 	movw	r3, #846	; 0x34e
   222d0:	4a2a      	ldr	r2, [pc, #168]	; (2237c <z_pend_curr+0xd4>)
   222d2:	f003 ffc4 	bl	2625e <assert_print>
   222d6:	f240 314e 	movw	r1, #846	; 0x34e
   222da:	4828      	ldr	r0, [pc, #160]	; (2237c <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   222dc:	f003 ffb8 	bl	26250 <assert_post_action>
	__asm__ volatile(
   222e0:	f04f 0220 	mov.w	r2, #32
   222e4:	f3ef 8311 	mrs	r3, BASEPRI
   222e8:	f382 8812 	msr	BASEPRI_MAX, r2
   222ec:	f3bf 8f6f 	isb	sy
   222f0:	4620      	mov	r0, r4
   222f2:	f7fe fa41 	bl	20778 <z_spin_lock_valid>
   222f6:	b960      	cbnz	r0, 22312 <z_pend_curr+0x6a>
   222f8:	2394      	movs	r3, #148	; 0x94
   222fa:	4a21      	ldr	r2, [pc, #132]	; (22380 <z_pend_curr+0xd8>)
   222fc:	4921      	ldr	r1, [pc, #132]	; (22384 <z_pend_curr+0xdc>)
   222fe:	481e      	ldr	r0, [pc, #120]	; (22378 <z_pend_curr+0xd0>)
   22300:	f003 ffad 	bl	2625e <assert_print>
   22304:	4621      	mov	r1, r4
   22306:	4820      	ldr	r0, [pc, #128]	; (22388 <z_pend_curr+0xe0>)
   22308:	f003 ffa9 	bl	2625e <assert_print>
   2230c:	2194      	movs	r1, #148	; 0x94
   2230e:	481c      	ldr	r0, [pc, #112]	; (22380 <z_pend_curr+0xd8>)
   22310:	e7e4      	b.n	222dc <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   22312:	4620      	mov	r0, r4
   22314:	f7fe fa4c 	bl	207b0 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   22318:	f8da 0008 	ldr.w	r0, [sl, #8]
   2231c:	4642      	mov	r2, r8
   2231e:	464b      	mov	r3, r9
   22320:	4639      	mov	r1, r7
   22322:	f7ff ffa9 	bl	22278 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22326:	4628      	mov	r0, r5
   22328:	f7fe fa34 	bl	20794 <z_spin_unlock_valid>
   2232c:	b958      	cbnz	r0, 22346 <z_pend_curr+0x9e>
   2232e:	4917      	ldr	r1, [pc, #92]	; (2238c <z_pend_curr+0xe4>)
   22330:	23e1      	movs	r3, #225	; 0xe1
   22332:	4a13      	ldr	r2, [pc, #76]	; (22380 <z_pend_curr+0xd8>)
   22334:	4810      	ldr	r0, [pc, #64]	; (22378 <z_pend_curr+0xd0>)
   22336:	f003 ff92 	bl	2625e <assert_print>
   2233a:	4629      	mov	r1, r5
   2233c:	4814      	ldr	r0, [pc, #80]	; (22390 <z_pend_curr+0xe8>)
   2233e:	f003 ff8e 	bl	2625e <assert_print>
   22342:	21e1      	movs	r1, #225	; 0xe1
   22344:	e7e3      	b.n	2230e <z_pend_curr+0x66>
   22346:	4620      	mov	r0, r4
   22348:	f7fe fa24 	bl	20794 <z_spin_unlock_valid>
   2234c:	b938      	cbnz	r0, 2235e <z_pend_curr+0xb6>
   2234e:	490f      	ldr	r1, [pc, #60]	; (2238c <z_pend_curr+0xe4>)
   22350:	23e1      	movs	r3, #225	; 0xe1
   22352:	4a0b      	ldr	r2, [pc, #44]	; (22380 <z_pend_curr+0xd8>)
   22354:	4808      	ldr	r0, [pc, #32]	; (22378 <z_pend_curr+0xd0>)
   22356:	f003 ff82 	bl	2625e <assert_print>
   2235a:	4621      	mov	r1, r4
   2235c:	e7ee      	b.n	2233c <z_pend_curr+0x94>
   2235e:	4630      	mov	r0, r6
}
   22360:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22364:	f7ee beba 	b.w	110dc <arch_swap>
   22368:	20022b9c 	.word	0x20022b9c
   2236c:	20022be4 	.word	0x20022be4
   22370:	20022bd8 	.word	0x20022bd8
   22374:	000325af 	.word	0x000325af
   22378:	0002d095 	.word	0x0002d095
   2237c:	000324b8 	.word	0x000324b8
   22380:	0002df19 	.word	0x0002df19
   22384:	0002df72 	.word	0x0002df72
   22388:	0002df87 	.word	0x0002df87
   2238c:	0002df46 	.word	0x0002df46
   22390:	0002df5d 	.word	0x0002df5d

00022394 <z_set_prio>:
{
   22394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22398:	4604      	mov	r4, r0
   2239a:	460e      	mov	r6, r1
   2239c:	f04f 0320 	mov.w	r3, #32
   223a0:	f3ef 8911 	mrs	r9, BASEPRI
   223a4:	f383 8812 	msr	BASEPRI_MAX, r3
   223a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223ac:	4837      	ldr	r0, [pc, #220]	; (2248c <z_set_prio+0xf8>)
   223ae:	f7fe f9e3 	bl	20778 <z_spin_lock_valid>
   223b2:	4607      	mov	r7, r0
   223b4:	b960      	cbnz	r0, 223d0 <z_set_prio+0x3c>
   223b6:	2394      	movs	r3, #148	; 0x94
   223b8:	4a35      	ldr	r2, [pc, #212]	; (22490 <z_set_prio+0xfc>)
   223ba:	4936      	ldr	r1, [pc, #216]	; (22494 <z_set_prio+0x100>)
   223bc:	4836      	ldr	r0, [pc, #216]	; (22498 <z_set_prio+0x104>)
   223be:	f003 ff4e 	bl	2625e <assert_print>
   223c2:	4932      	ldr	r1, [pc, #200]	; (2248c <z_set_prio+0xf8>)
   223c4:	4835      	ldr	r0, [pc, #212]	; (2249c <z_set_prio+0x108>)
   223c6:	f003 ff4a 	bl	2625e <assert_print>
   223ca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223cc:	4830      	ldr	r0, [pc, #192]	; (22490 <z_set_prio+0xfc>)
   223ce:	e021      	b.n	22414 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   223d0:	482e      	ldr	r0, [pc, #184]	; (2248c <z_set_prio+0xf8>)
   223d2:	f7fe f9ed 	bl	207b0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   223d6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   223d8:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   223da:	06da      	lsls	r2, r3, #27
   223dc:	d11c      	bne.n	22418 <z_set_prio+0x84>
	return node->next != NULL;
   223de:	69a5      	ldr	r5, [r4, #24]
   223e0:	b9d5      	cbnz	r5, 22418 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   223e2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 224a0 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   223e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   223ea:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   223ec:	4621      	mov	r1, r4
   223ee:	4640      	mov	r0, r8
   223f0:	f7ff fe00 	bl	21ff4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   223f4:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   223f6:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   223f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   223fc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   223fe:	4b29      	ldr	r3, [pc, #164]	; (224a4 <z_set_prio+0x110>)
   22400:	429c      	cmp	r4, r3
   22402:	d11b      	bne.n	2243c <z_set_prio+0xa8>
   22404:	4928      	ldr	r1, [pc, #160]	; (224a8 <z_set_prio+0x114>)
   22406:	4824      	ldr	r0, [pc, #144]	; (22498 <z_set_prio+0x104>)
   22408:	23ba      	movs	r3, #186	; 0xba
   2240a:	4a28      	ldr	r2, [pc, #160]	; (224ac <z_set_prio+0x118>)
   2240c:	f003 ff27 	bl	2625e <assert_print>
   22410:	21ba      	movs	r1, #186	; 0xba
   22412:	4826      	ldr	r0, [pc, #152]	; (224ac <z_set_prio+0x118>)
   22414:	f003 ff1c 	bl	26250 <assert_post_action>
   22418:	2700      	movs	r7, #0
			thread->base.prio = prio;
   2241a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2241c:	481b      	ldr	r0, [pc, #108]	; (2248c <z_set_prio+0xf8>)
   2241e:	f7fe f9b9 	bl	20794 <z_spin_unlock_valid>
   22422:	bb58      	cbnz	r0, 2247c <z_set_prio+0xe8>
   22424:	23c2      	movs	r3, #194	; 0xc2
   22426:	4a1a      	ldr	r2, [pc, #104]	; (22490 <z_set_prio+0xfc>)
   22428:	4921      	ldr	r1, [pc, #132]	; (224b0 <z_set_prio+0x11c>)
   2242a:	481b      	ldr	r0, [pc, #108]	; (22498 <z_set_prio+0x104>)
   2242c:	f003 ff17 	bl	2625e <assert_print>
   22430:	4916      	ldr	r1, [pc, #88]	; (2248c <z_set_prio+0xf8>)
   22432:	4820      	ldr	r0, [pc, #128]	; (224b4 <z_set_prio+0x120>)
   22434:	f003 ff13 	bl	2625e <assert_print>
   22438:	21c2      	movs	r1, #194	; 0xc2
   2243a:	e7c7      	b.n	223cc <z_set_prio+0x38>
	return list->head == list;
   2243c:	4643      	mov	r3, r8
   2243e:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22442:	4542      	cmp	r2, r8
   22444:	bf18      	it	ne
   22446:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   22448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2244a:	b925      	cbnz	r5, 22456 <z_set_prio+0xc2>
	node->prev = tail;
   2244c:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   22450:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22452:	625c      	str	r4, [r3, #36]	; 0x24
}
   22454:	e00a      	b.n	2246c <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   22456:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   2245a:	428e      	cmp	r6, r1
   2245c:	d00a      	beq.n	22474 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2245e:	42b1      	cmp	r1, r6
   22460:	dd08      	ble.n	22474 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   22462:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   22464:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   22468:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2246a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   2246c:	2001      	movs	r0, #1
   2246e:	f7ff fadf 	bl	21a30 <update_cache>
   22472:	e7d3      	b.n	2241c <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   22474:	42aa      	cmp	r2, r5
   22476:	d0e9      	beq.n	2244c <z_set_prio+0xb8>
   22478:	682d      	ldr	r5, [r5, #0]
   2247a:	e7e6      	b.n	2244a <z_set_prio+0xb6>
	__asm__ volatile(
   2247c:	f389 8811 	msr	BASEPRI, r9
   22480:	f3bf 8f6f 	isb	sy
}
   22484:	4638      	mov	r0, r7
   22486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2248a:	bf00      	nop
   2248c:	20022be4 	.word	0x20022be4
   22490:	0002df19 	.word	0x0002df19
   22494:	0002df72 	.word	0x0002df72
   22498:	0002d095 	.word	0x0002d095
   2249c:	0002df87 	.word	0x0002df87
   224a0:	20022bbc 	.word	0x20022bbc
   224a4:	20009c08 	.word	0x20009c08
   224a8:	00032501 	.word	0x00032501
   224ac:	000324b8 	.word	0x000324b8
   224b0:	0002df46 	.word	0x0002df46
   224b4:	0002df5d 	.word	0x0002df5d

000224b8 <z_impl_k_thread_suspend>:
{
   224b8:	b570      	push	{r4, r5, r6, lr}
   224ba:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   224bc:	3018      	adds	r0, #24
   224be:	f000 fda7 	bl	23010 <z_abort_timeout>
	__asm__ volatile(
   224c2:	f04f 0320 	mov.w	r3, #32
   224c6:	f3ef 8611 	mrs	r6, BASEPRI
   224ca:	f383 8812 	msr	BASEPRI_MAX, r3
   224ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   224d2:	4824      	ldr	r0, [pc, #144]	; (22564 <z_impl_k_thread_suspend+0xac>)
   224d4:	f7fe f950 	bl	20778 <z_spin_lock_valid>
   224d8:	b968      	cbnz	r0, 224f6 <z_impl_k_thread_suspend+0x3e>
   224da:	2394      	movs	r3, #148	; 0x94
   224dc:	4a22      	ldr	r2, [pc, #136]	; (22568 <z_impl_k_thread_suspend+0xb0>)
   224de:	4923      	ldr	r1, [pc, #140]	; (2256c <z_impl_k_thread_suspend+0xb4>)
   224e0:	4823      	ldr	r0, [pc, #140]	; (22570 <z_impl_k_thread_suspend+0xb8>)
   224e2:	f003 febc 	bl	2625e <assert_print>
   224e6:	491f      	ldr	r1, [pc, #124]	; (22564 <z_impl_k_thread_suspend+0xac>)
   224e8:	4822      	ldr	r0, [pc, #136]	; (22574 <z_impl_k_thread_suspend+0xbc>)
   224ea:	f003 feb8 	bl	2625e <assert_print>
   224ee:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224f0:	481d      	ldr	r0, [pc, #116]	; (22568 <z_impl_k_thread_suspend+0xb0>)
   224f2:	f003 fead 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   224f6:	481b      	ldr	r0, [pc, #108]	; (22564 <z_impl_k_thread_suspend+0xac>)
   224f8:	f7fe f95a 	bl	207b0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   224fc:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   22500:	7b63      	ldrb	r3, [r4, #13]
   22502:	2a00      	cmp	r2, #0
   22504:	da06      	bge.n	22514 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2250a:	4621      	mov	r1, r4
   2250c:	481a      	ldr	r0, [pc, #104]	; (22578 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2250e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22510:	f7ff fd70 	bl	21ff4 <z_priq_dumb_remove>
		update_cache(thread == _current);
   22514:	4d19      	ldr	r5, [pc, #100]	; (2257c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22516:	7b63      	ldrb	r3, [r4, #13]
   22518:	68a8      	ldr	r0, [r5, #8]
   2251a:	f043 0310 	orr.w	r3, r3, #16
   2251e:	7363      	strb	r3, [r4, #13]
   22520:	1b03      	subs	r3, r0, r4
   22522:	4258      	negs	r0, r3
   22524:	4158      	adcs	r0, r3
   22526:	f7ff fa83 	bl	21a30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2252a:	480e      	ldr	r0, [pc, #56]	; (22564 <z_impl_k_thread_suspend+0xac>)
   2252c:	f7fe f932 	bl	20794 <z_spin_unlock_valid>
   22530:	b958      	cbnz	r0, 2254a <z_impl_k_thread_suspend+0x92>
   22532:	23c2      	movs	r3, #194	; 0xc2
   22534:	4a0c      	ldr	r2, [pc, #48]	; (22568 <z_impl_k_thread_suspend+0xb0>)
   22536:	4912      	ldr	r1, [pc, #72]	; (22580 <z_impl_k_thread_suspend+0xc8>)
   22538:	480d      	ldr	r0, [pc, #52]	; (22570 <z_impl_k_thread_suspend+0xb8>)
   2253a:	f003 fe90 	bl	2625e <assert_print>
   2253e:	4909      	ldr	r1, [pc, #36]	; (22564 <z_impl_k_thread_suspend+0xac>)
   22540:	4810      	ldr	r0, [pc, #64]	; (22584 <z_impl_k_thread_suspend+0xcc>)
   22542:	f003 fe8c 	bl	2625e <assert_print>
   22546:	21c2      	movs	r1, #194	; 0xc2
   22548:	e7d2      	b.n	224f0 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   2254a:	f386 8811 	msr	BASEPRI, r6
   2254e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   22552:	68ab      	ldr	r3, [r5, #8]
   22554:	42a3      	cmp	r3, r4
   22556:	d103      	bne.n	22560 <z_impl_k_thread_suspend+0xa8>
}
   22558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2255c:	f008 babc 	b.w	2aad8 <z_reschedule_unlocked>
}
   22560:	bd70      	pop	{r4, r5, r6, pc}
   22562:	bf00      	nop
   22564:	20022be4 	.word	0x20022be4
   22568:	0002df19 	.word	0x0002df19
   2256c:	0002df72 	.word	0x0002df72
   22570:	0002d095 	.word	0x0002d095
   22574:	0002df87 	.word	0x0002df87
   22578:	20022bbc 	.word	0x20022bbc
   2257c:	20022b9c 	.word	0x20022b9c
   22580:	0002df46 	.word	0x0002df46
   22584:	0002df5d 	.word	0x0002df5d

00022588 <unpend_thread_no_timeout>:
{
   22588:	b510      	push	{r4, lr}
   2258a:	4604      	mov	r4, r0
   2258c:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   2258e:	b958      	cbnz	r0, 225a8 <unpend_thread_no_timeout+0x20>
   22590:	490a      	ldr	r1, [pc, #40]	; (225bc <unpend_thread_no_timeout+0x34>)
   22592:	480b      	ldr	r0, [pc, #44]	; (225c0 <unpend_thread_no_timeout+0x38>)
   22594:	f240 23d6 	movw	r3, #726	; 0x2d6
   22598:	4a0a      	ldr	r2, [pc, #40]	; (225c4 <unpend_thread_no_timeout+0x3c>)
   2259a:	f003 fe60 	bl	2625e <assert_print>
   2259e:	f240 21d6 	movw	r1, #726	; 0x2d6
   225a2:	4808      	ldr	r0, [pc, #32]	; (225c4 <unpend_thread_no_timeout+0x3c>)
   225a4:	f003 fe54 	bl	26250 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   225a8:	4621      	mov	r1, r4
   225aa:	f7ff fd23 	bl	21ff4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   225ae:	7b63      	ldrb	r3, [r4, #13]
   225b0:	f023 0302 	bic.w	r3, r3, #2
   225b4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   225b6:	2300      	movs	r3, #0
   225b8:	60a3      	str	r3, [r4, #8]
}
   225ba:	bd10      	pop	{r4, pc}
   225bc:	000325e6 	.word	0x000325e6
   225c0:	0002d095 	.word	0x0002d095
   225c4:	000324b8 	.word	0x000324b8

000225c8 <z_unpend_thread>:
{
   225c8:	b538      	push	{r3, r4, r5, lr}
   225ca:	4604      	mov	r4, r0
	__asm__ volatile(
   225cc:	f04f 0320 	mov.w	r3, #32
   225d0:	f3ef 8511 	mrs	r5, BASEPRI
   225d4:	f383 8812 	msr	BASEPRI_MAX, r3
   225d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225dc:	4818      	ldr	r0, [pc, #96]	; (22640 <z_unpend_thread+0x78>)
   225de:	f7fe f8cb 	bl	20778 <z_spin_lock_valid>
   225e2:	b968      	cbnz	r0, 22600 <z_unpend_thread+0x38>
   225e4:	2394      	movs	r3, #148	; 0x94
   225e6:	4a17      	ldr	r2, [pc, #92]	; (22644 <z_unpend_thread+0x7c>)
   225e8:	4917      	ldr	r1, [pc, #92]	; (22648 <z_unpend_thread+0x80>)
   225ea:	4818      	ldr	r0, [pc, #96]	; (2264c <z_unpend_thread+0x84>)
   225ec:	f003 fe37 	bl	2625e <assert_print>
   225f0:	4913      	ldr	r1, [pc, #76]	; (22640 <z_unpend_thread+0x78>)
   225f2:	4817      	ldr	r0, [pc, #92]	; (22650 <z_unpend_thread+0x88>)
   225f4:	f003 fe33 	bl	2625e <assert_print>
   225f8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225fa:	4812      	ldr	r0, [pc, #72]	; (22644 <z_unpend_thread+0x7c>)
   225fc:	f003 fe28 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   22600:	480f      	ldr	r0, [pc, #60]	; (22640 <z_unpend_thread+0x78>)
   22602:	f7fe f8d5 	bl	207b0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   22606:	4620      	mov	r0, r4
   22608:	f7ff ffbe 	bl	22588 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2260c:	480c      	ldr	r0, [pc, #48]	; (22640 <z_unpend_thread+0x78>)
   2260e:	f7fe f8c1 	bl	20794 <z_spin_unlock_valid>
   22612:	b958      	cbnz	r0, 2262c <z_unpend_thread+0x64>
   22614:	23c2      	movs	r3, #194	; 0xc2
   22616:	4a0b      	ldr	r2, [pc, #44]	; (22644 <z_unpend_thread+0x7c>)
   22618:	490e      	ldr	r1, [pc, #56]	; (22654 <z_unpend_thread+0x8c>)
   2261a:	480c      	ldr	r0, [pc, #48]	; (2264c <z_unpend_thread+0x84>)
   2261c:	f003 fe1f 	bl	2625e <assert_print>
   22620:	4907      	ldr	r1, [pc, #28]	; (22640 <z_unpend_thread+0x78>)
   22622:	480d      	ldr	r0, [pc, #52]	; (22658 <z_unpend_thread+0x90>)
   22624:	f003 fe1b 	bl	2625e <assert_print>
   22628:	21c2      	movs	r1, #194	; 0xc2
   2262a:	e7e6      	b.n	225fa <z_unpend_thread+0x32>
	__asm__ volatile(
   2262c:	f385 8811 	msr	BASEPRI, r5
   22630:	f3bf 8f6f 	isb	sy
   22634:	f104 0018 	add.w	r0, r4, #24
}
   22638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2263c:	f000 bce8 	b.w	23010 <z_abort_timeout>
   22640:	20022be4 	.word	0x20022be4
   22644:	0002df19 	.word	0x0002df19
   22648:	0002df72 	.word	0x0002df72
   2264c:	0002d095 	.word	0x0002d095
   22650:	0002df87 	.word	0x0002df87
   22654:	0002df46 	.word	0x0002df46
   22658:	0002df5d 	.word	0x0002df5d

0002265c <z_thread_timeout>:
{
   2265c:	b570      	push	{r4, r5, r6, lr}
   2265e:	4604      	mov	r4, r0
	__asm__ volatile(
   22660:	f04f 0320 	mov.w	r3, #32
   22664:	f3ef 8611 	mrs	r6, BASEPRI
   22668:	f383 8812 	msr	BASEPRI_MAX, r3
   2266c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22670:	481f      	ldr	r0, [pc, #124]	; (226f0 <z_thread_timeout+0x94>)
   22672:	f7fe f881 	bl	20778 <z_spin_lock_valid>
   22676:	b968      	cbnz	r0, 22694 <z_thread_timeout+0x38>
   22678:	2394      	movs	r3, #148	; 0x94
   2267a:	4a1e      	ldr	r2, [pc, #120]	; (226f4 <z_thread_timeout+0x98>)
   2267c:	491e      	ldr	r1, [pc, #120]	; (226f8 <z_thread_timeout+0x9c>)
   2267e:	481f      	ldr	r0, [pc, #124]	; (226fc <z_thread_timeout+0xa0>)
   22680:	f003 fded 	bl	2625e <assert_print>
   22684:	491a      	ldr	r1, [pc, #104]	; (226f0 <z_thread_timeout+0x94>)
   22686:	481e      	ldr	r0, [pc, #120]	; (22700 <z_thread_timeout+0xa4>)
   22688:	f003 fde9 	bl	2625e <assert_print>
   2268c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2268e:	4819      	ldr	r0, [pc, #100]	; (226f4 <z_thread_timeout+0x98>)
   22690:	f003 fdde 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   22694:	4816      	ldr	r0, [pc, #88]	; (226f0 <z_thread_timeout+0x94>)
   22696:	f7fe f88b 	bl	207b0 <z_spin_lock_set_owner>
		if (!killed) {
   2269a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2269e:	f013 0f28 	tst.w	r3, #40	; 0x28
   226a2:	d110      	bne.n	226c6 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   226a4:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   226a8:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   226ac:	b113      	cbz	r3, 226b4 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   226ae:	4628      	mov	r0, r5
   226b0:	f7ff ff6a 	bl	22588 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   226b4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   226b8:	4628      	mov	r0, r5
   226ba:	f023 0314 	bic.w	r3, r3, #20
   226be:	f804 3c0b 	strb.w	r3, [r4, #-11]
   226c2:	f7ff f9e9 	bl	21a98 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226c6:	480a      	ldr	r0, [pc, #40]	; (226f0 <z_thread_timeout+0x94>)
   226c8:	f7fe f864 	bl	20794 <z_spin_unlock_valid>
   226cc:	b958      	cbnz	r0, 226e6 <z_thread_timeout+0x8a>
   226ce:	23c2      	movs	r3, #194	; 0xc2
   226d0:	4a08      	ldr	r2, [pc, #32]	; (226f4 <z_thread_timeout+0x98>)
   226d2:	490c      	ldr	r1, [pc, #48]	; (22704 <z_thread_timeout+0xa8>)
   226d4:	4809      	ldr	r0, [pc, #36]	; (226fc <z_thread_timeout+0xa0>)
   226d6:	f003 fdc2 	bl	2625e <assert_print>
   226da:	4905      	ldr	r1, [pc, #20]	; (226f0 <z_thread_timeout+0x94>)
   226dc:	480a      	ldr	r0, [pc, #40]	; (22708 <z_thread_timeout+0xac>)
   226de:	f003 fdbe 	bl	2625e <assert_print>
   226e2:	21c2      	movs	r1, #194	; 0xc2
   226e4:	e7d3      	b.n	2268e <z_thread_timeout+0x32>
	__asm__ volatile(
   226e6:	f386 8811 	msr	BASEPRI, r6
   226ea:	f3bf 8f6f 	isb	sy
}
   226ee:	bd70      	pop	{r4, r5, r6, pc}
   226f0:	20022be4 	.word	0x20022be4
   226f4:	0002df19 	.word	0x0002df19
   226f8:	0002df72 	.word	0x0002df72
   226fc:	0002d095 	.word	0x0002d095
   22700:	0002df87 	.word	0x0002df87
   22704:	0002df46 	.word	0x0002df46
   22708:	0002df5d 	.word	0x0002df5d

0002270c <z_unpend1_no_timeout>:
{
   2270c:	b570      	push	{r4, r5, r6, lr}
   2270e:	4605      	mov	r5, r0
	__asm__ volatile(
   22710:	f04f 0320 	mov.w	r3, #32
   22714:	f3ef 8611 	mrs	r6, BASEPRI
   22718:	f383 8812 	msr	BASEPRI_MAX, r3
   2271c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22720:	4819      	ldr	r0, [pc, #100]	; (22788 <z_unpend1_no_timeout+0x7c>)
   22722:	f7fe f829 	bl	20778 <z_spin_lock_valid>
   22726:	b968      	cbnz	r0, 22744 <z_unpend1_no_timeout+0x38>
   22728:	2394      	movs	r3, #148	; 0x94
   2272a:	4a18      	ldr	r2, [pc, #96]	; (2278c <z_unpend1_no_timeout+0x80>)
   2272c:	4918      	ldr	r1, [pc, #96]	; (22790 <z_unpend1_no_timeout+0x84>)
   2272e:	4819      	ldr	r0, [pc, #100]	; (22794 <z_unpend1_no_timeout+0x88>)
   22730:	f003 fd95 	bl	2625e <assert_print>
   22734:	4914      	ldr	r1, [pc, #80]	; (22788 <z_unpend1_no_timeout+0x7c>)
   22736:	4818      	ldr	r0, [pc, #96]	; (22798 <z_unpend1_no_timeout+0x8c>)
   22738:	f003 fd91 	bl	2625e <assert_print>
   2273c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2273e:	4813      	ldr	r0, [pc, #76]	; (2278c <z_unpend1_no_timeout+0x80>)
   22740:	f003 fd86 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   22744:	4810      	ldr	r0, [pc, #64]	; (22788 <z_unpend1_no_timeout+0x7c>)
   22746:	f7fe f833 	bl	207b0 <z_spin_lock_set_owner>
	return list->head == list;
   2274a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2274c:	42a5      	cmp	r5, r4
   2274e:	d013      	beq.n	22778 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   22750:	b114      	cbz	r4, 22758 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   22752:	4620      	mov	r0, r4
   22754:	f7ff ff18 	bl	22588 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22758:	480b      	ldr	r0, [pc, #44]	; (22788 <z_unpend1_no_timeout+0x7c>)
   2275a:	f7fe f81b 	bl	20794 <z_spin_unlock_valid>
   2275e:	b968      	cbnz	r0, 2277c <z_unpend1_no_timeout+0x70>
   22760:	23c2      	movs	r3, #194	; 0xc2
   22762:	4a0a      	ldr	r2, [pc, #40]	; (2278c <z_unpend1_no_timeout+0x80>)
   22764:	490d      	ldr	r1, [pc, #52]	; (2279c <z_unpend1_no_timeout+0x90>)
   22766:	480b      	ldr	r0, [pc, #44]	; (22794 <z_unpend1_no_timeout+0x88>)
   22768:	f003 fd79 	bl	2625e <assert_print>
   2276c:	4906      	ldr	r1, [pc, #24]	; (22788 <z_unpend1_no_timeout+0x7c>)
   2276e:	480c      	ldr	r0, [pc, #48]	; (227a0 <z_unpend1_no_timeout+0x94>)
   22770:	f003 fd75 	bl	2625e <assert_print>
   22774:	21c2      	movs	r1, #194	; 0xc2
   22776:	e7e2      	b.n	2273e <z_unpend1_no_timeout+0x32>
   22778:	2400      	movs	r4, #0
   2277a:	e7ed      	b.n	22758 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   2277c:	f386 8811 	msr	BASEPRI, r6
   22780:	f3bf 8f6f 	isb	sy
}
   22784:	4620      	mov	r0, r4
   22786:	bd70      	pop	{r4, r5, r6, pc}
   22788:	20022be4 	.word	0x20022be4
   2278c:	0002df19 	.word	0x0002df19
   22790:	0002df72 	.word	0x0002df72
   22794:	0002d095 	.word	0x0002d095
   22798:	0002df87 	.word	0x0002df87
   2279c:	0002df46 	.word	0x0002df46
   227a0:	0002df5d 	.word	0x0002df5d

000227a4 <z_unpend_first_thread>:
{
   227a4:	b570      	push	{r4, r5, r6, lr}
   227a6:	4605      	mov	r5, r0
	__asm__ volatile(
   227a8:	f04f 0320 	mov.w	r3, #32
   227ac:	f3ef 8611 	mrs	r6, BASEPRI
   227b0:	f383 8812 	msr	BASEPRI_MAX, r3
   227b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227b8:	481b      	ldr	r0, [pc, #108]	; (22828 <z_unpend_first_thread+0x84>)
   227ba:	f7fd ffdd 	bl	20778 <z_spin_lock_valid>
   227be:	b968      	cbnz	r0, 227dc <z_unpend_first_thread+0x38>
   227c0:	2394      	movs	r3, #148	; 0x94
   227c2:	4a1a      	ldr	r2, [pc, #104]	; (2282c <z_unpend_first_thread+0x88>)
   227c4:	491a      	ldr	r1, [pc, #104]	; (22830 <z_unpend_first_thread+0x8c>)
   227c6:	481b      	ldr	r0, [pc, #108]	; (22834 <z_unpend_first_thread+0x90>)
   227c8:	f003 fd49 	bl	2625e <assert_print>
   227cc:	4916      	ldr	r1, [pc, #88]	; (22828 <z_unpend_first_thread+0x84>)
   227ce:	481a      	ldr	r0, [pc, #104]	; (22838 <z_unpend_first_thread+0x94>)
   227d0:	f003 fd45 	bl	2625e <assert_print>
   227d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227d6:	4815      	ldr	r0, [pc, #84]	; (2282c <z_unpend_first_thread+0x88>)
   227d8:	f003 fd3a 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   227dc:	4812      	ldr	r0, [pc, #72]	; (22828 <z_unpend_first_thread+0x84>)
   227de:	f7fd ffe7 	bl	207b0 <z_spin_lock_set_owner>
	return list->head == list;
   227e2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   227e4:	42a5      	cmp	r5, r4
   227e6:	d017      	beq.n	22818 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   227e8:	b134      	cbz	r4, 227f8 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   227ea:	4620      	mov	r0, r4
   227ec:	f7ff fecc 	bl	22588 <unpend_thread_no_timeout>
   227f0:	f104 0018 	add.w	r0, r4, #24
   227f4:	f000 fc0c 	bl	23010 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227f8:	480b      	ldr	r0, [pc, #44]	; (22828 <z_unpend_first_thread+0x84>)
   227fa:	f7fd ffcb 	bl	20794 <z_spin_unlock_valid>
   227fe:	b968      	cbnz	r0, 2281c <z_unpend_first_thread+0x78>
   22800:	23c2      	movs	r3, #194	; 0xc2
   22802:	4a0a      	ldr	r2, [pc, #40]	; (2282c <z_unpend_first_thread+0x88>)
   22804:	490d      	ldr	r1, [pc, #52]	; (2283c <z_unpend_first_thread+0x98>)
   22806:	480b      	ldr	r0, [pc, #44]	; (22834 <z_unpend_first_thread+0x90>)
   22808:	f003 fd29 	bl	2625e <assert_print>
   2280c:	4906      	ldr	r1, [pc, #24]	; (22828 <z_unpend_first_thread+0x84>)
   2280e:	480c      	ldr	r0, [pc, #48]	; (22840 <z_unpend_first_thread+0x9c>)
   22810:	f003 fd25 	bl	2625e <assert_print>
   22814:	21c2      	movs	r1, #194	; 0xc2
   22816:	e7de      	b.n	227d6 <z_unpend_first_thread+0x32>
   22818:	2400      	movs	r4, #0
   2281a:	e7ed      	b.n	227f8 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   2281c:	f386 8811 	msr	BASEPRI, r6
   22820:	f3bf 8f6f 	isb	sy
}
   22824:	4620      	mov	r0, r4
   22826:	bd70      	pop	{r4, r5, r6, pc}
   22828:	20022be4 	.word	0x20022be4
   2282c:	0002df19 	.word	0x0002df19
   22830:	0002df72 	.word	0x0002df72
   22834:	0002d095 	.word	0x0002d095
   22838:	0002df87 	.word	0x0002df87
   2283c:	0002df46 	.word	0x0002df46
   22840:	0002df5d 	.word	0x0002df5d

00022844 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   22844:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   22846:	4b04      	ldr	r3, [pc, #16]	; (22858 <z_sched_init+0x14>)
   22848:	4608      	mov	r0, r1
   2284a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2284e:	e9c3 2208 	strd	r2, r2, [r3, #32]
   22852:	f7ff b96b 	b.w	21b2c <k_sched_time_slice_set>
   22856:	bf00      	nop
   22858:	20022b9c 	.word	0x20022b9c

0002285c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2285e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   22862:	b16b      	cbz	r3, 22880 <z_impl_k_yield+0x24>
   22864:	493c      	ldr	r1, [pc, #240]	; (22958 <z_impl_k_yield+0xfc>)
   22866:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   2286a:	4a3c      	ldr	r2, [pc, #240]	; (2295c <z_impl_k_yield+0x100>)
   2286c:	483c      	ldr	r0, [pc, #240]	; (22960 <z_impl_k_yield+0x104>)
   2286e:	f003 fcf6 	bl	2625e <assert_print>
   22872:	483c      	ldr	r0, [pc, #240]	; (22964 <z_impl_k_yield+0x108>)
   22874:	f003 fcf3 	bl	2625e <assert_print>
   22878:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2287c:	4837      	ldr	r0, [pc, #220]	; (2295c <z_impl_k_yield+0x100>)
   2287e:	e017      	b.n	228b0 <z_impl_k_yield+0x54>
	__asm__ volatile(
   22880:	f04f 0320 	mov.w	r3, #32
   22884:	f3ef 8611 	mrs	r6, BASEPRI
   22888:	f383 8812 	msr	BASEPRI_MAX, r3
   2288c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22890:	4835      	ldr	r0, [pc, #212]	; (22968 <z_impl_k_yield+0x10c>)
   22892:	f7fd ff71 	bl	20778 <z_spin_lock_valid>
   22896:	b968      	cbnz	r0, 228b4 <z_impl_k_yield+0x58>
   22898:	2394      	movs	r3, #148	; 0x94
   2289a:	4a34      	ldr	r2, [pc, #208]	; (2296c <z_impl_k_yield+0x110>)
   2289c:	4934      	ldr	r1, [pc, #208]	; (22970 <z_impl_k_yield+0x114>)
   2289e:	4830      	ldr	r0, [pc, #192]	; (22960 <z_impl_k_yield+0x104>)
   228a0:	f003 fcdd 	bl	2625e <assert_print>
   228a4:	4930      	ldr	r1, [pc, #192]	; (22968 <z_impl_k_yield+0x10c>)
   228a6:	4833      	ldr	r0, [pc, #204]	; (22974 <z_impl_k_yield+0x118>)
   228a8:	f003 fcd9 	bl	2625e <assert_print>
   228ac:	2194      	movs	r1, #148	; 0x94
   228ae:	482f      	ldr	r0, [pc, #188]	; (2296c <z_impl_k_yield+0x110>)
   228b0:	f003 fcce 	bl	26250 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   228b4:	4c30      	ldr	r4, [pc, #192]	; (22978 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   228b6:	482c      	ldr	r0, [pc, #176]	; (22968 <z_impl_k_yield+0x10c>)
   228b8:	f7fd ff7a 	bl	207b0 <z_spin_lock_set_owner>
   228bc:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   228be:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   228c2:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   228c4:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   228c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   228ca:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   228cc:	f7ff fb92 	bl	21ff4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   228d0:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   228d2:	7b5a      	ldrb	r2, [r3, #13]
   228d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   228d8:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   228da:	4a28      	ldr	r2, [pc, #160]	; (2297c <z_impl_k_yield+0x120>)
   228dc:	4293      	cmp	r3, r2
   228de:	d107      	bne.n	228f0 <z_impl_k_yield+0x94>
   228e0:	4927      	ldr	r1, [pc, #156]	; (22980 <z_impl_k_yield+0x124>)
   228e2:	23ba      	movs	r3, #186	; 0xba
   228e4:	4a1d      	ldr	r2, [pc, #116]	; (2295c <z_impl_k_yield+0x100>)
   228e6:	481e      	ldr	r0, [pc, #120]	; (22960 <z_impl_k_yield+0x104>)
   228e8:	f003 fcb9 	bl	2625e <assert_print>
   228ec:	21ba      	movs	r1, #186	; 0xba
   228ee:	e7c5      	b.n	2287c <z_impl_k_yield+0x20>
	return list->head == list;
   228f0:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   228f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   228f4:	42aa      	cmp	r2, r5
   228f6:	bf08      	it	eq
   228f8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   228fa:	b922      	cbnz	r2, 22906 <z_impl_k_yield+0xaa>
	node->prev = tail;
   228fc:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   22900:	600b      	str	r3, [r1, #0]
	list->tail = node;
   22902:	6263      	str	r3, [r4, #36]	; 0x24
}
   22904:	e00c      	b.n	22920 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   22906:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2290a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2290e:	42b8      	cmp	r0, r7
   22910:	d019      	beq.n	22946 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22912:	4287      	cmp	r7, r0
   22914:	dd17      	ble.n	22946 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   22916:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22918:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2291c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2291e:	6053      	str	r3, [r2, #4]
	update_cache(1);
   22920:	2001      	movs	r0, #1
   22922:	f7ff f885 	bl	21a30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22926:	4810      	ldr	r0, [pc, #64]	; (22968 <z_impl_k_yield+0x10c>)
   22928:	f7fd ff34 	bl	20794 <z_spin_unlock_valid>
   2292c:	b978      	cbnz	r0, 2294e <z_impl_k_yield+0xf2>
   2292e:	23e1      	movs	r3, #225	; 0xe1
   22930:	4a0e      	ldr	r2, [pc, #56]	; (2296c <z_impl_k_yield+0x110>)
   22932:	4914      	ldr	r1, [pc, #80]	; (22984 <z_impl_k_yield+0x128>)
   22934:	480a      	ldr	r0, [pc, #40]	; (22960 <z_impl_k_yield+0x104>)
   22936:	f003 fc92 	bl	2625e <assert_print>
   2293a:	490b      	ldr	r1, [pc, #44]	; (22968 <z_impl_k_yield+0x10c>)
   2293c:	4812      	ldr	r0, [pc, #72]	; (22988 <z_impl_k_yield+0x12c>)
   2293e:	f003 fc8e 	bl	2625e <assert_print>
   22942:	21e1      	movs	r1, #225	; 0xe1
   22944:	e7b3      	b.n	228ae <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   22946:	428a      	cmp	r2, r1
   22948:	d0d8      	beq.n	228fc <z_impl_k_yield+0xa0>
   2294a:	6812      	ldr	r2, [r2, #0]
   2294c:	e7d5      	b.n	228fa <z_impl_k_yield+0x9e>
   2294e:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   22950:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22954:	f7ee bbc2 	b.w	110dc <arch_swap>
   22958:	0003224b 	.word	0x0003224b
   2295c:	000324b8 	.word	0x000324b8
   22960:	0002d095 	.word	0x0002d095
   22964:	00030d1f 	.word	0x00030d1f
   22968:	20022be4 	.word	0x20022be4
   2296c:	0002df19 	.word	0x0002df19
   22970:	0002df72 	.word	0x0002df72
   22974:	0002df87 	.word	0x0002df87
   22978:	20022b9c 	.word	0x20022b9c
   2297c:	20009c08 	.word	0x20009c08
   22980:	00032501 	.word	0x00032501
   22984:	0002df46 	.word	0x0002df46
   22988:	0002df5d 	.word	0x0002df5d

0002298c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   2298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22990:	4605      	mov	r5, r0
   22992:	460e      	mov	r6, r1
   22994:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   22998:	b16b      	cbz	r3, 229b6 <z_tick_sleep+0x2a>
   2299a:	493f      	ldr	r1, [pc, #252]	; (22a98 <z_tick_sleep+0x10c>)
   2299c:	f240 538c 	movw	r3, #1420	; 0x58c
   229a0:	4a3e      	ldr	r2, [pc, #248]	; (22a9c <z_tick_sleep+0x110>)
   229a2:	483f      	ldr	r0, [pc, #252]	; (22aa0 <z_tick_sleep+0x114>)
   229a4:	f003 fc5b 	bl	2625e <assert_print>
   229a8:	483e      	ldr	r0, [pc, #248]	; (22aa4 <z_tick_sleep+0x118>)
   229aa:	f003 fc58 	bl	2625e <assert_print>
   229ae:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   229b2:	483a      	ldr	r0, [pc, #232]	; (22a9c <z_tick_sleep+0x110>)
   229b4:	e025      	b.n	22a02 <z_tick_sleep+0x76>
	if (ticks == 0) {
   229b6:	ea50 0301 	orrs.w	r3, r0, r1
   229ba:	d103      	bne.n	229c4 <z_tick_sleep+0x38>
	z_impl_k_yield();
   229bc:	f7ff ff4e 	bl	2285c <z_impl_k_yield>
		return 0;
   229c0:	2000      	movs	r0, #0
   229c2:	e066      	b.n	22a92 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   229c4:	1c82      	adds	r2, r0, #2
   229c6:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   229ca:	db1c      	blt.n	22a06 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   229cc:	f008 f89e 	bl	2ab0c <sys_clock_tick_get_32>
   229d0:	1944      	adds	r4, r0, r5
   229d2:	f04f 0320 	mov.w	r3, #32
   229d6:	f3ef 8811 	mrs	r8, BASEPRI
   229da:	f383 8812 	msr	BASEPRI_MAX, r3
   229de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   229e2:	4831      	ldr	r0, [pc, #196]	; (22aa8 <z_tick_sleep+0x11c>)
   229e4:	f7fd fec8 	bl	20778 <z_spin_lock_valid>
   229e8:	b988      	cbnz	r0, 22a0e <z_tick_sleep+0x82>
   229ea:	2394      	movs	r3, #148	; 0x94
   229ec:	4a2f      	ldr	r2, [pc, #188]	; (22aac <z_tick_sleep+0x120>)
   229ee:	4930      	ldr	r1, [pc, #192]	; (22ab0 <z_tick_sleep+0x124>)
   229f0:	482b      	ldr	r0, [pc, #172]	; (22aa0 <z_tick_sleep+0x114>)
   229f2:	f003 fc34 	bl	2625e <assert_print>
   229f6:	492c      	ldr	r1, [pc, #176]	; (22aa8 <z_tick_sleep+0x11c>)
   229f8:	482e      	ldr	r0, [pc, #184]	; (22ab4 <z_tick_sleep+0x128>)
   229fa:	f003 fc30 	bl	2625e <assert_print>
   229fe:	2194      	movs	r1, #148	; 0x94
   22a00:	482a      	ldr	r0, [pc, #168]	; (22aac <z_tick_sleep+0x120>)
   22a02:	f003 fc25 	bl	26250 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   22a06:	f06f 0401 	mvn.w	r4, #1
   22a0a:	1a24      	subs	r4, r4, r0
   22a0c:	e7e1      	b.n	229d2 <z_tick_sleep+0x46>
	pending_current = _current;
   22a0e:	4f2a      	ldr	r7, [pc, #168]	; (22ab8 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   22a10:	4825      	ldr	r0, [pc, #148]	; (22aa8 <z_tick_sleep+0x11c>)
   22a12:	f7fd fecd 	bl	207b0 <z_spin_lock_set_owner>
   22a16:	68b8      	ldr	r0, [r7, #8]
   22a18:	4b28      	ldr	r3, [pc, #160]	; (22abc <z_tick_sleep+0x130>)
   22a1a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22a1c:	f7ff fbd2 	bl	221c4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   22a20:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22a22:	462a      	mov	r2, r5
   22a24:	4633      	mov	r3, r6
   22a26:	3018      	adds	r0, #24
   22a28:	4925      	ldr	r1, [pc, #148]	; (22ac0 <z_tick_sleep+0x134>)
   22a2a:	f000 fa2b 	bl	22e84 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22a2e:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a30:	481d      	ldr	r0, [pc, #116]	; (22aa8 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22a32:	7b53      	ldrb	r3, [r2, #13]
   22a34:	f043 0310 	orr.w	r3, r3, #16
   22a38:	7353      	strb	r3, [r2, #13]
   22a3a:	f7fd feab 	bl	20794 <z_spin_unlock_valid>
   22a3e:	b958      	cbnz	r0, 22a58 <z_tick_sleep+0xcc>
   22a40:	23e1      	movs	r3, #225	; 0xe1
   22a42:	4a1a      	ldr	r2, [pc, #104]	; (22aac <z_tick_sleep+0x120>)
   22a44:	491f      	ldr	r1, [pc, #124]	; (22ac4 <z_tick_sleep+0x138>)
   22a46:	4816      	ldr	r0, [pc, #88]	; (22aa0 <z_tick_sleep+0x114>)
   22a48:	f003 fc09 	bl	2625e <assert_print>
   22a4c:	4916      	ldr	r1, [pc, #88]	; (22aa8 <z_tick_sleep+0x11c>)
   22a4e:	481e      	ldr	r0, [pc, #120]	; (22ac8 <z_tick_sleep+0x13c>)
   22a50:	f003 fc05 	bl	2625e <assert_print>
   22a54:	21e1      	movs	r1, #225	; 0xe1
   22a56:	e7d3      	b.n	22a00 <z_tick_sleep+0x74>
   22a58:	4640      	mov	r0, r8
   22a5a:	f7ee fb3f 	bl	110dc <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   22a5e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   22a60:	7b5b      	ldrb	r3, [r3, #13]
   22a62:	06db      	lsls	r3, r3, #27
   22a64:	d50c      	bpl.n	22a80 <z_tick_sleep+0xf4>
   22a66:	4919      	ldr	r1, [pc, #100]	; (22acc <z_tick_sleep+0x140>)
   22a68:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   22a6c:	4a0b      	ldr	r2, [pc, #44]	; (22a9c <z_tick_sleep+0x110>)
   22a6e:	480c      	ldr	r0, [pc, #48]	; (22aa0 <z_tick_sleep+0x114>)
   22a70:	f003 fbf5 	bl	2625e <assert_print>
   22a74:	480b      	ldr	r0, [pc, #44]	; (22aa4 <z_tick_sleep+0x118>)
   22a76:	f003 fbf2 	bl	2625e <assert_print>
   22a7a:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   22a7e:	e798      	b.n	229b2 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   22a80:	f008 f844 	bl	2ab0c <sys_clock_tick_get_32>
   22a84:	1a20      	subs	r0, r4, r0
   22a86:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   22a8a:	2801      	cmp	r0, #1
   22a8c:	f173 0300 	sbcs.w	r3, r3, #0
   22a90:	db96      	blt.n	229c0 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   22a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22a96:	bf00      	nop
   22a98:	0003224b 	.word	0x0003224b
   22a9c:	000324b8 	.word	0x000324b8
   22aa0:	0002d095 	.word	0x0002d095
   22aa4:	00030d1f 	.word	0x00030d1f
   22aa8:	20022be4 	.word	0x20022be4
   22aac:	0002df19 	.word	0x0002df19
   22ab0:	0002df72 	.word	0x0002df72
   22ab4:	0002df87 	.word	0x0002df87
   22ab8:	20022b9c 	.word	0x20022b9c
   22abc:	20022bd8 	.word	0x20022bd8
   22ac0:	0002265d 	.word	0x0002265d
   22ac4:	0002df46 	.word	0x0002df46
   22ac8:	0002df5d 	.word	0x0002df5d
   22acc:	000325fd 	.word	0x000325fd

00022ad0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   22ad0:	b508      	push	{r3, lr}
   22ad2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   22ad6:	b173      	cbz	r3, 22af6 <z_impl_k_sleep+0x26>
   22ad8:	4912      	ldr	r1, [pc, #72]	; (22b24 <z_impl_k_sleep+0x54>)
   22ada:	f240 53b7 	movw	r3, #1463	; 0x5b7
   22ade:	4a12      	ldr	r2, [pc, #72]	; (22b28 <z_impl_k_sleep+0x58>)
   22ae0:	4812      	ldr	r0, [pc, #72]	; (22b2c <z_impl_k_sleep+0x5c>)
   22ae2:	f003 fbbc 	bl	2625e <assert_print>
   22ae6:	4812      	ldr	r0, [pc, #72]	; (22b30 <z_impl_k_sleep+0x60>)
   22ae8:	f003 fbb9 	bl	2625e <assert_print>
   22aec:	f240 51b7 	movw	r1, #1463	; 0x5b7
   22af0:	480d      	ldr	r0, [pc, #52]	; (22b28 <z_impl_k_sleep+0x58>)
   22af2:	f003 fbad 	bl	26250 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22af6:	f1b1 3fff 	cmp.w	r1, #4294967295
   22afa:	bf08      	it	eq
   22afc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   22b00:	d106      	bne.n	22b10 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   22b02:	4b0c      	ldr	r3, [pc, #48]	; (22b34 <z_impl_k_sleep+0x64>)
   22b04:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   22b06:	f7ff fcd7 	bl	224b8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   22b0a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   22b0e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   22b10:	f7ff ff3c 	bl	2298c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   22b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22b18:	fb80 0303 	smull	r0, r3, r0, r3
   22b1c:	0bc0      	lsrs	r0, r0, #15
   22b1e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   22b22:	e7f4      	b.n	22b0e <z_impl_k_sleep+0x3e>
   22b24:	0003224b 	.word	0x0003224b
   22b28:	000324b8 	.word	0x000324b8
   22b2c:	0002d095 	.word	0x0002d095
   22b30:	00030d1f 	.word	0x00030d1f
   22b34:	20022b9c 	.word	0x20022b9c

00022b38 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22b38:	4b01      	ldr	r3, [pc, #4]	; (22b40 <z_impl_z_current_get+0x8>)
   22b3a:	6898      	ldr	r0, [r3, #8]
   22b3c:	4770      	bx	lr
   22b3e:	bf00      	nop
   22b40:	20022b9c 	.word	0x20022b9c

00022b44 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b48:	4604      	mov	r4, r0
   22b4a:	f04f 0320 	mov.w	r3, #32
   22b4e:	f3ef 8611 	mrs	r6, BASEPRI
   22b52:	f383 8812 	msr	BASEPRI_MAX, r3
   22b56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b5a:	4851      	ldr	r0, [pc, #324]	; (22ca0 <z_thread_abort+0x15c>)
   22b5c:	f7fd fe0c 	bl	20778 <z_spin_lock_valid>
   22b60:	b968      	cbnz	r0, 22b7e <z_thread_abort+0x3a>
   22b62:	2394      	movs	r3, #148	; 0x94
   22b64:	4a4f      	ldr	r2, [pc, #316]	; (22ca4 <z_thread_abort+0x160>)
   22b66:	4950      	ldr	r1, [pc, #320]	; (22ca8 <z_thread_abort+0x164>)
   22b68:	4850      	ldr	r0, [pc, #320]	; (22cac <z_thread_abort+0x168>)
   22b6a:	f003 fb78 	bl	2625e <assert_print>
   22b6e:	494c      	ldr	r1, [pc, #304]	; (22ca0 <z_thread_abort+0x15c>)
   22b70:	484f      	ldr	r0, [pc, #316]	; (22cb0 <z_thread_abort+0x16c>)
   22b72:	f003 fb74 	bl	2625e <assert_print>
   22b76:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b78:	484a      	ldr	r0, [pc, #296]	; (22ca4 <z_thread_abort+0x160>)
   22b7a:	f003 fb69 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   22b7e:	4848      	ldr	r0, [pc, #288]	; (22ca0 <z_thread_abort+0x15c>)
   22b80:	f7fd fe16 	bl	207b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   22b84:	7b23      	ldrb	r3, [r4, #12]
   22b86:	07d9      	lsls	r1, r3, #31
   22b88:	d522      	bpl.n	22bd0 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b8a:	4845      	ldr	r0, [pc, #276]	; (22ca0 <z_thread_abort+0x15c>)
   22b8c:	f7fd fe02 	bl	20794 <z_spin_unlock_valid>
   22b90:	b958      	cbnz	r0, 22baa <z_thread_abort+0x66>
   22b92:	23c2      	movs	r3, #194	; 0xc2
   22b94:	4a43      	ldr	r2, [pc, #268]	; (22ca4 <z_thread_abort+0x160>)
   22b96:	4947      	ldr	r1, [pc, #284]	; (22cb4 <z_thread_abort+0x170>)
   22b98:	4844      	ldr	r0, [pc, #272]	; (22cac <z_thread_abort+0x168>)
   22b9a:	f003 fb60 	bl	2625e <assert_print>
   22b9e:	4940      	ldr	r1, [pc, #256]	; (22ca0 <z_thread_abort+0x15c>)
   22ba0:	4845      	ldr	r0, [pc, #276]	; (22cb8 <z_thread_abort+0x174>)
   22ba2:	f003 fb5c 	bl	2625e <assert_print>
   22ba6:	21c2      	movs	r1, #194	; 0xc2
   22ba8:	e7e6      	b.n	22b78 <z_thread_abort+0x34>
	__asm__ volatile(
   22baa:	f386 8811 	msr	BASEPRI, r6
   22bae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   22bb2:	f240 63c3 	movw	r3, #1731	; 0x6c3
   22bb6:	4a41      	ldr	r2, [pc, #260]	; (22cbc <z_thread_abort+0x178>)
   22bb8:	4941      	ldr	r1, [pc, #260]	; (22cc0 <z_thread_abort+0x17c>)
   22bba:	483c      	ldr	r0, [pc, #240]	; (22cac <z_thread_abort+0x168>)
   22bbc:	f003 fb4f 	bl	2625e <assert_print>
   22bc0:	4621      	mov	r1, r4
   22bc2:	4840      	ldr	r0, [pc, #256]	; (22cc4 <z_thread_abort+0x180>)
   22bc4:	f003 fb4b 	bl	2625e <assert_print>
   22bc8:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   22bcc:	483b      	ldr	r0, [pc, #236]	; (22cbc <z_thread_abort+0x178>)
   22bce:	e7d4      	b.n	22b7a <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22bd0:	7b63      	ldrb	r3, [r4, #13]
   22bd2:	071a      	lsls	r2, r3, #28
   22bd4:	d50a      	bpl.n	22bec <z_thread_abort+0xa8>
   22bd6:	4832      	ldr	r0, [pc, #200]	; (22ca0 <z_thread_abort+0x15c>)
   22bd8:	f7fd fddc 	bl	20794 <z_spin_unlock_valid>
   22bdc:	2800      	cmp	r0, #0
   22bde:	d0d8      	beq.n	22b92 <z_thread_abort+0x4e>
   22be0:	f386 8811 	msr	BASEPRI, r6
   22be4:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22bec:	f023 0220 	bic.w	r2, r3, #32
   22bf0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   22bf4:	09d2      	lsrs	r2, r2, #7
   22bf6:	d12c      	bne.n	22c52 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22bf8:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   22bfa:	68a3      	ldr	r3, [r4, #8]
   22bfc:	b113      	cbz	r3, 22c04 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   22bfe:	4620      	mov	r0, r4
   22c00:	f7ff fcc2 	bl	22588 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   22c04:	f104 0018 	add.w	r0, r4, #24
   22c08:	f000 fa02 	bl	23010 <z_abort_timeout>
   22c0c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   22c10:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   22c14:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22c16:	42bd      	cmp	r5, r7
   22c18:	d000      	beq.n	22c1c <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22c1a:	bb25      	cbnz	r5, 22c66 <z_thread_abort+0x122>
		update_cache(1);
   22c1c:	2001      	movs	r0, #1
   22c1e:	f7fe ff07 	bl	21a30 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   22c22:	4b29      	ldr	r3, [pc, #164]	; (22cc8 <z_thread_abort+0x184>)
   22c24:	689b      	ldr	r3, [r3, #8]
   22c26:	42a3      	cmp	r3, r4
   22c28:	d1d5      	bne.n	22bd6 <z_thread_abort+0x92>
   22c2a:	f3ef 8305 	mrs	r3, IPSR
   22c2e:	2b00      	cmp	r3, #0
   22c30:	d1d1      	bne.n	22bd6 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c32:	481b      	ldr	r0, [pc, #108]	; (22ca0 <z_thread_abort+0x15c>)
   22c34:	f7fd fdae 	bl	20794 <z_spin_unlock_valid>
   22c38:	bb10      	cbnz	r0, 22c80 <z_thread_abort+0x13c>
   22c3a:	23e1      	movs	r3, #225	; 0xe1
   22c3c:	4a19      	ldr	r2, [pc, #100]	; (22ca4 <z_thread_abort+0x160>)
   22c3e:	491d      	ldr	r1, [pc, #116]	; (22cb4 <z_thread_abort+0x170>)
   22c40:	481a      	ldr	r0, [pc, #104]	; (22cac <z_thread_abort+0x168>)
   22c42:	f003 fb0c 	bl	2625e <assert_print>
   22c46:	4916      	ldr	r1, [pc, #88]	; (22ca0 <z_thread_abort+0x15c>)
   22c48:	481b      	ldr	r0, [pc, #108]	; (22cb8 <z_thread_abort+0x174>)
   22c4a:	f003 fb08 	bl	2625e <assert_print>
   22c4e:	21e1      	movs	r1, #225	; 0xe1
   22c50:	e792      	b.n	22b78 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22c52:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22c56:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   22c5a:	4621      	mov	r1, r4
   22c5c:	481b      	ldr	r0, [pc, #108]	; (22ccc <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22c5e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22c60:	f7ff f9c8 	bl	21ff4 <z_priq_dumb_remove>
}
   22c64:	e7c9      	b.n	22bfa <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   22c66:	4628      	mov	r0, r5
   22c68:	f7ff fc8e 	bl	22588 <unpend_thread_no_timeout>
   22c6c:	f105 0018 	add.w	r0, r5, #24
   22c70:	f000 f9ce 	bl	23010 <z_abort_timeout>
		ready_thread(thread);
   22c74:	4628      	mov	r0, r5
   22c76:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   22c7a:	f7fe ff0d 	bl	21a98 <ready_thread>
   22c7e:	e7c9      	b.n	22c14 <z_thread_abort+0xd0>
   22c80:	4630      	mov	r0, r6
   22c82:	f7ee fa2b 	bl	110dc <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   22c86:	490e      	ldr	r1, [pc, #56]	; (22cc0 <z_thread_abort+0x17c>)
   22c88:	f240 63f2 	movw	r3, #1778	; 0x6f2
   22c8c:	4a0b      	ldr	r2, [pc, #44]	; (22cbc <z_thread_abort+0x178>)
   22c8e:	4807      	ldr	r0, [pc, #28]	; (22cac <z_thread_abort+0x168>)
   22c90:	f003 fae5 	bl	2625e <assert_print>
   22c94:	480e      	ldr	r0, [pc, #56]	; (22cd0 <z_thread_abort+0x18c>)
   22c96:	f003 fae2 	bl	2625e <assert_print>
   22c9a:	f240 61f2 	movw	r1, #1778	; 0x6f2
   22c9e:	e795      	b.n	22bcc <z_thread_abort+0x88>
   22ca0:	20022be4 	.word	0x20022be4
   22ca4:	0002df19 	.word	0x0002df19
   22ca8:	0002df72 	.word	0x0002df72
   22cac:	0002d095 	.word	0x0002d095
   22cb0:	0002df87 	.word	0x0002df87
   22cb4:	0002df46 	.word	0x0002df46
   22cb8:	0002df5d 	.word	0x0002df5d
   22cbc:	000324b8 	.word	0x000324b8
   22cc0:	0003297c 	.word	0x0003297c
   22cc4:	0003263d 	.word	0x0003263d
   22cc8:	20022b9c 	.word	0x20022b9c
   22ccc:	20022bbc 	.word	0x20022bbc
   22cd0:	0003265c 	.word	0x0003265c

00022cd4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   22cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22cd8:	4606      	mov	r6, r0
   22cda:	4688      	mov	r8, r1
   22cdc:	4617      	mov	r7, r2
	__asm__ volatile(
   22cde:	f04f 0320 	mov.w	r3, #32
   22ce2:	f3ef 8911 	mrs	r9, BASEPRI
   22ce6:	f383 8812 	msr	BASEPRI_MAX, r3
   22cea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cee:	4821      	ldr	r0, [pc, #132]	; (22d74 <z_sched_wake+0xa0>)
   22cf0:	f7fd fd42 	bl	20778 <z_spin_lock_valid>
   22cf4:	4605      	mov	r5, r0
   22cf6:	b968      	cbnz	r0, 22d14 <z_sched_wake+0x40>
   22cf8:	2394      	movs	r3, #148	; 0x94
   22cfa:	4a1f      	ldr	r2, [pc, #124]	; (22d78 <z_sched_wake+0xa4>)
   22cfc:	491f      	ldr	r1, [pc, #124]	; (22d7c <z_sched_wake+0xa8>)
   22cfe:	4820      	ldr	r0, [pc, #128]	; (22d80 <z_sched_wake+0xac>)
   22d00:	f003 faad 	bl	2625e <assert_print>
   22d04:	491b      	ldr	r1, [pc, #108]	; (22d74 <z_sched_wake+0xa0>)
   22d06:	481f      	ldr	r0, [pc, #124]	; (22d84 <z_sched_wake+0xb0>)
   22d08:	f003 faa9 	bl	2625e <assert_print>
   22d0c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d0e:	481a      	ldr	r0, [pc, #104]	; (22d78 <z_sched_wake+0xa4>)
   22d10:	f003 fa9e 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d14:	4817      	ldr	r0, [pc, #92]	; (22d74 <z_sched_wake+0xa0>)
   22d16:	f7fd fd4b 	bl	207b0 <z_spin_lock_set_owner>
	return list->head == list;
   22d1a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d1c:	42a6      	cmp	r6, r4
   22d1e:	d01d      	beq.n	22d5c <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   22d20:	b1f4      	cbz	r4, 22d60 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   22d22:	4620      	mov	r0, r4
   22d24:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   22d28:	6167      	str	r7, [r4, #20]
   22d2a:	f7ff fc2d 	bl	22588 <unpend_thread_no_timeout>
   22d2e:	f104 0018 	add.w	r0, r4, #24
   22d32:	f000 f96d 	bl	23010 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   22d36:	4620      	mov	r0, r4
   22d38:	f7fe feae 	bl	21a98 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d3c:	480d      	ldr	r0, [pc, #52]	; (22d74 <z_sched_wake+0xa0>)
   22d3e:	f7fd fd29 	bl	20794 <z_spin_unlock_valid>
   22d42:	b978      	cbnz	r0, 22d64 <z_sched_wake+0x90>
   22d44:	23c2      	movs	r3, #194	; 0xc2
   22d46:	4a0c      	ldr	r2, [pc, #48]	; (22d78 <z_sched_wake+0xa4>)
   22d48:	490f      	ldr	r1, [pc, #60]	; (22d88 <z_sched_wake+0xb4>)
   22d4a:	480d      	ldr	r0, [pc, #52]	; (22d80 <z_sched_wake+0xac>)
   22d4c:	f003 fa87 	bl	2625e <assert_print>
   22d50:	4908      	ldr	r1, [pc, #32]	; (22d74 <z_sched_wake+0xa0>)
   22d52:	480e      	ldr	r0, [pc, #56]	; (22d8c <z_sched_wake+0xb8>)
   22d54:	f003 fa83 	bl	2625e <assert_print>
   22d58:	21c2      	movs	r1, #194	; 0xc2
   22d5a:	e7d8      	b.n	22d0e <z_sched_wake+0x3a>
	bool ret = false;
   22d5c:	2500      	movs	r5, #0
   22d5e:	e7ed      	b.n	22d3c <z_sched_wake+0x68>
   22d60:	4625      	mov	r5, r4
   22d62:	e7eb      	b.n	22d3c <z_sched_wake+0x68>
	__asm__ volatile(
   22d64:	f389 8811 	msr	BASEPRI, r9
   22d68:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   22d6c:	4628      	mov	r0, r5
   22d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22d72:	bf00      	nop
   22d74:	20022be4 	.word	0x20022be4
   22d78:	0002df19 	.word	0x0002df19
   22d7c:	0002df72 	.word	0x0002df72
   22d80:	0002d095 	.word	0x0002d095
   22d84:	0002df87 	.word	0x0002df87
   22d88:	0002df46 	.word	0x0002df46
   22d8c:	0002df5d 	.word	0x0002df5d

00022d90 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22d90:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22d92:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22d96:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22d98:	e9cd 6700 	strd	r6, r7, [sp]
   22d9c:	f7ff fa84 	bl	222a8 <z_pend_curr>

	if (data != NULL) {
   22da0:	b11c      	cbz	r4, 22daa <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22da2:	4b03      	ldr	r3, [pc, #12]	; (22db0 <z_sched_wait+0x20>)
   22da4:	689b      	ldr	r3, [r3, #8]
   22da6:	695b      	ldr	r3, [r3, #20]
   22da8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   22daa:	b002      	add	sp, #8
   22dac:	bdd0      	pop	{r4, r6, r7, pc}
   22dae:	bf00      	nop
   22db0:	20022b9c 	.word	0x20022b9c

00022db4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22db4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   22db6:	4806      	ldr	r0, [pc, #24]	; (22dd0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22db8:	4a06      	ldr	r2, [pc, #24]	; (22dd4 <z_data_copy+0x20>)
   22dba:	4907      	ldr	r1, [pc, #28]	; (22dd8 <z_data_copy+0x24>)
   22dbc:	1a12      	subs	r2, r2, r0
   22dbe:	f007 fd8f 	bl	2a8e0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22dc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   22dc6:	4a05      	ldr	r2, [pc, #20]	; (22ddc <z_data_copy+0x28>)
   22dc8:	4905      	ldr	r1, [pc, #20]	; (22de0 <z_data_copy+0x2c>)
   22dca:	4806      	ldr	r0, [pc, #24]	; (22de4 <z_data_copy+0x30>)
   22dcc:	f007 bd88 	b.w	2a8e0 <z_early_memcpy>
   22dd0:	20008000 	.word	0x20008000
   22dd4:	20008d70 	.word	0x20008d70
   22dd8:	00032d70 	.word	0x00032d70
   22ddc:	00000000 	.word	0x00000000
   22de0:	00032d70 	.word	0x00032d70
   22de4:	20008000 	.word	0x20008000

00022de8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22de8:	4b03      	ldr	r3, [pc, #12]	; (22df8 <elapsed+0x10>)
   22dea:	681b      	ldr	r3, [r3, #0]
   22dec:	b90b      	cbnz	r3, 22df2 <elapsed+0xa>
   22dee:	f7fa baa1 	b.w	1d334 <sys_clock_elapsed>
}
   22df2:	2000      	movs	r0, #0
   22df4:	4770      	bx	lr
   22df6:	bf00      	nop
   22df8:	20022be8 	.word	0x20022be8

00022dfc <next_timeout>:

static int32_t next_timeout(void)
{
   22dfc:	b510      	push	{r4, lr}
	return list->head == list;
   22dfe:	4b11      	ldr	r3, [pc, #68]	; (22e44 <next_timeout+0x48>)
   22e00:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e02:	429c      	cmp	r4, r3
   22e04:	d10a      	bne.n	22e1c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22e06:	f7ff ffef 	bl	22de8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   22e0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22e0e:	4b0e      	ldr	r3, [pc, #56]	; (22e48 <next_timeout+0x4c>)
   22e10:	691b      	ldr	r3, [r3, #16]
   22e12:	b113      	cbz	r3, 22e1a <next_timeout+0x1e>
   22e14:	4298      	cmp	r0, r3
   22e16:	bfa8      	it	ge
   22e18:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22e1a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   22e1c:	f7ff ffe4 	bl	22de8 <elapsed>
	if ((to == NULL) ||
   22e20:	2c00      	cmp	r4, #0
   22e22:	d0f2      	beq.n	22e0a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22e24:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22e28:	1a1b      	subs	r3, r3, r0
   22e2a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   22e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22e32:	f172 0100 	sbcs.w	r1, r2, #0
   22e36:	dae8      	bge.n	22e0a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   22e38:	2a00      	cmp	r2, #0
   22e3a:	bfac      	ite	ge
   22e3c:	4618      	movge	r0, r3
   22e3e:	2000      	movlt	r0, #0
   22e40:	e7e5      	b.n	22e0e <next_timeout+0x12>
   22e42:	bf00      	nop
   22e44:	20008734 	.word	0x20008734
   22e48:	20022b9c 	.word	0x20022b9c

00022e4c <remove_timeout>:
{
   22e4c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22e4e:	b170      	cbz	r0, 22e6e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   22e50:	4b0b      	ldr	r3, [pc, #44]	; (22e80 <remove_timeout+0x34>)
   22e52:	685b      	ldr	r3, [r3, #4]
   22e54:	4298      	cmp	r0, r3
   22e56:	d00a      	beq.n	22e6e <remove_timeout+0x22>
   22e58:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   22e5a:	b143      	cbz	r3, 22e6e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   22e5c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22e60:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22e64:	1912      	adds	r2, r2, r4
   22e66:	eb41 0105 	adc.w	r1, r1, r5
   22e6a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   22e6e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22e72:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22e74:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22e76:	2300      	movs	r3, #0
	node->prev = NULL;
   22e78:	e9c0 3300 	strd	r3, r3, [r0]
}
   22e7c:	bd30      	pop	{r4, r5, pc}
   22e7e:	bf00      	nop
   22e80:	20008734 	.word	0x20008734

00022e84 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22e84:	f1b3 3fff 	cmp.w	r3, #4294967295
   22e88:	bf08      	it	eq
   22e8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22e92:	4604      	mov	r4, r0
   22e94:	4692      	mov	sl, r2
   22e96:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22e98:	f000 809e 	beq.w	22fd8 <z_add_timeout+0x154>
	return node->next != NULL;
   22e9c:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   22e9e:	b166      	cbz	r6, 22eba <z_add_timeout+0x36>
   22ea0:	494e      	ldr	r1, [pc, #312]	; (22fdc <z_add_timeout+0x158>)
   22ea2:	2363      	movs	r3, #99	; 0x63
   22ea4:	4a4e      	ldr	r2, [pc, #312]	; (22fe0 <z_add_timeout+0x15c>)
   22ea6:	484f      	ldr	r0, [pc, #316]	; (22fe4 <z_add_timeout+0x160>)
   22ea8:	f003 f9d9 	bl	2625e <assert_print>
   22eac:	484e      	ldr	r0, [pc, #312]	; (22fe8 <z_add_timeout+0x164>)
   22eae:	f003 f9d6 	bl	2625e <assert_print>
   22eb2:	2163      	movs	r1, #99	; 0x63
   22eb4:	484a      	ldr	r0, [pc, #296]	; (22fe0 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22eb6:	f003 f9cb 	bl	26250 <assert_post_action>
	to->fn = fn;
   22eba:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   22ebc:	f04f 0320 	mov.w	r3, #32
   22ec0:	f3ef 8711 	mrs	r7, BASEPRI
   22ec4:	f383 8812 	msr	BASEPRI_MAX, r3
   22ec8:	f3bf 8f6f 	isb	sy
   22ecc:	4847      	ldr	r0, [pc, #284]	; (22fec <z_add_timeout+0x168>)
   22ece:	f7fd fc53 	bl	20778 <z_spin_lock_valid>
   22ed2:	b960      	cbnz	r0, 22eee <z_add_timeout+0x6a>
   22ed4:	2394      	movs	r3, #148	; 0x94
   22ed6:	4a46      	ldr	r2, [pc, #280]	; (22ff0 <z_add_timeout+0x16c>)
   22ed8:	4946      	ldr	r1, [pc, #280]	; (22ff4 <z_add_timeout+0x170>)
   22eda:	4842      	ldr	r0, [pc, #264]	; (22fe4 <z_add_timeout+0x160>)
   22edc:	f003 f9bf 	bl	2625e <assert_print>
   22ee0:	4942      	ldr	r1, [pc, #264]	; (22fec <z_add_timeout+0x168>)
   22ee2:	4845      	ldr	r0, [pc, #276]	; (22ff8 <z_add_timeout+0x174>)
   22ee4:	f003 f9bb 	bl	2625e <assert_print>
   22ee8:	2194      	movs	r1, #148	; 0x94
   22eea:	4841      	ldr	r0, [pc, #260]	; (22ff0 <z_add_timeout+0x16c>)
   22eec:	e7e3      	b.n	22eb6 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   22eee:	483f      	ldr	r0, [pc, #252]	; (22fec <z_add_timeout+0x168>)
   22ef0:	f7fd fc5e 	bl	207b0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22ef4:	f1ba 3fff 	cmp.w	sl, #4294967295
   22ef8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   22efc:	da23      	bge.n	22f46 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   22efe:	f06f 0301 	mvn.w	r3, #1
   22f02:	493e      	ldr	r1, [pc, #248]	; (22ffc <z_add_timeout+0x178>)
   22f04:	e9d1 2000 	ldrd	r2, r0, [r1]
   22f08:	1a9b      	subs	r3, r3, r2
   22f0a:	f04f 32ff 	mov.w	r2, #4294967295
   22f0e:	eb62 0000 	sbc.w	r0, r2, r0
   22f12:	ebb3 030a 	subs.w	r3, r3, sl
   22f16:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   22f1a:	2b01      	cmp	r3, #1
   22f1c:	f170 0200 	sbcs.w	r2, r0, #0
   22f20:	da01      	bge.n	22f26 <z_add_timeout+0xa2>
   22f22:	2301      	movs	r3, #1
   22f24:	4630      	mov	r0, r6
   22f26:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   22f2a:	4b35      	ldr	r3, [pc, #212]	; (23000 <z_add_timeout+0x17c>)
   22f2c:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   22f2e:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f32:	429a      	cmp	r2, r3
   22f34:	bf18      	it	ne
   22f36:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   22f38:	b986      	cbnz	r6, 22f5c <z_add_timeout+0xd8>
	node->prev = tail;
   22f3a:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   22f3e:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   22f42:	605c      	str	r4, [r3, #4]
}
   22f44:	e01c      	b.n	22f80 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   22f46:	f7ff ff4f 	bl	22de8 <elapsed>
   22f4a:	f11a 0801 	adds.w	r8, sl, #1
   22f4e:	f145 0500 	adc.w	r5, r5, #0
   22f52:	eb18 0300 	adds.w	r3, r8, r0
   22f56:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   22f5a:	e7e4      	b.n	22f26 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   22f5c:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   22f60:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   22f64:	428a      	cmp	r2, r1
   22f66:	eb70 0e05 	sbcs.w	lr, r0, r5
   22f6a:	da28      	bge.n	22fbe <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   22f6c:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   22f6e:	6872      	ldr	r2, [r6, #4]
   22f70:	eb65 0500 	sbc.w	r5, r5, r0
   22f74:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   22f78:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   22f7c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22f7e:	6074      	str	r4, [r6, #4]
	return list->head == list;
   22f80:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f82:	429a      	cmp	r2, r3
   22f84:	d00b      	beq.n	22f9e <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22f86:	4294      	cmp	r4, r2
   22f88:	d109      	bne.n	22f9e <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   22f8a:	f7ff ff37 	bl	22dfc <next_timeout>

			if (next_time == 0 ||
   22f8e:	b118      	cbz	r0, 22f98 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   22f90:	4b1c      	ldr	r3, [pc, #112]	; (23004 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   22f92:	691b      	ldr	r3, [r3, #16]
   22f94:	4283      	cmp	r3, r0
   22f96:	d002      	beq.n	22f9e <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   22f98:	2100      	movs	r1, #0
   22f9a:	f7fa f99b 	bl	1d2d4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22f9e:	4813      	ldr	r0, [pc, #76]	; (22fec <z_add_timeout+0x168>)
   22fa0:	f7fd fbf8 	bl	20794 <z_spin_unlock_valid>
   22fa4:	b9a0      	cbnz	r0, 22fd0 <z_add_timeout+0x14c>
   22fa6:	23c2      	movs	r3, #194	; 0xc2
   22fa8:	4a11      	ldr	r2, [pc, #68]	; (22ff0 <z_add_timeout+0x16c>)
   22faa:	4917      	ldr	r1, [pc, #92]	; (23008 <z_add_timeout+0x184>)
   22fac:	480d      	ldr	r0, [pc, #52]	; (22fe4 <z_add_timeout+0x160>)
   22fae:	f003 f956 	bl	2625e <assert_print>
   22fb2:	490e      	ldr	r1, [pc, #56]	; (22fec <z_add_timeout+0x168>)
   22fb4:	4815      	ldr	r0, [pc, #84]	; (2300c <z_add_timeout+0x188>)
   22fb6:	f003 f952 	bl	2625e <assert_print>
   22fba:	21c2      	movs	r1, #194	; 0xc2
   22fbc:	e795      	b.n	22eea <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   22fbe:	1a52      	subs	r2, r2, r1
   22fc0:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   22fc4:	4566      	cmp	r6, ip
   22fc6:	e9c4 2004 	strd	r2, r0, [r4, #16]
   22fca:	d0b6      	beq.n	22f3a <z_add_timeout+0xb6>
   22fcc:	6836      	ldr	r6, [r6, #0]
   22fce:	e7b3      	b.n	22f38 <z_add_timeout+0xb4>
	__asm__ volatile(
   22fd0:	f387 8811 	msr	BASEPRI, r7
   22fd4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22fdc:	000326a2 	.word	0x000326a2
   22fe0:	0003267e 	.word	0x0003267e
   22fe4:	0002d095 	.word	0x0002d095
   22fe8:	00030d1f 	.word	0x00030d1f
   22fec:	20022bec 	.word	0x20022bec
   22ff0:	0002df19 	.word	0x0002df19
   22ff4:	0002df72 	.word	0x0002df72
   22ff8:	0002df87 	.word	0x0002df87
   22ffc:	20009dc0 	.word	0x20009dc0
   23000:	20008734 	.word	0x20008734
   23004:	20022b9c 	.word	0x20022b9c
   23008:	0002df46 	.word	0x0002df46
   2300c:	0002df5d 	.word	0x0002df5d

00023010 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   23010:	b538      	push	{r3, r4, r5, lr}
   23012:	4604      	mov	r4, r0
	__asm__ volatile(
   23014:	f04f 0320 	mov.w	r3, #32
   23018:	f3ef 8511 	mrs	r5, BASEPRI
   2301c:	f383 8812 	msr	BASEPRI_MAX, r3
   23020:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23024:	4819      	ldr	r0, [pc, #100]	; (2308c <z_abort_timeout+0x7c>)
   23026:	f7fd fba7 	bl	20778 <z_spin_lock_valid>
   2302a:	b968      	cbnz	r0, 23048 <z_abort_timeout+0x38>
   2302c:	2394      	movs	r3, #148	; 0x94
   2302e:	4a18      	ldr	r2, [pc, #96]	; (23090 <z_abort_timeout+0x80>)
   23030:	4918      	ldr	r1, [pc, #96]	; (23094 <z_abort_timeout+0x84>)
   23032:	4819      	ldr	r0, [pc, #100]	; (23098 <z_abort_timeout+0x88>)
   23034:	f003 f913 	bl	2625e <assert_print>
   23038:	4914      	ldr	r1, [pc, #80]	; (2308c <z_abort_timeout+0x7c>)
   2303a:	4818      	ldr	r0, [pc, #96]	; (2309c <z_abort_timeout+0x8c>)
   2303c:	f003 f90f 	bl	2625e <assert_print>
   23040:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23042:	4813      	ldr	r0, [pc, #76]	; (23090 <z_abort_timeout+0x80>)
   23044:	f003 f904 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   23048:	4810      	ldr	r0, [pc, #64]	; (2308c <z_abort_timeout+0x7c>)
   2304a:	f7fd fbb1 	bl	207b0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2304e:	6823      	ldr	r3, [r4, #0]
   23050:	b19b      	cbz	r3, 2307a <z_abort_timeout+0x6a>
			remove_timeout(to);
   23052:	4620      	mov	r0, r4
   23054:	f7ff fefa 	bl	22e4c <remove_timeout>
			ret = 0;
   23058:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2305a:	480c      	ldr	r0, [pc, #48]	; (2308c <z_abort_timeout+0x7c>)
   2305c:	f7fd fb9a 	bl	20794 <z_spin_unlock_valid>
   23060:	b970      	cbnz	r0, 23080 <z_abort_timeout+0x70>
   23062:	23c2      	movs	r3, #194	; 0xc2
   23064:	4a0a      	ldr	r2, [pc, #40]	; (23090 <z_abort_timeout+0x80>)
   23066:	490e      	ldr	r1, [pc, #56]	; (230a0 <z_abort_timeout+0x90>)
   23068:	480b      	ldr	r0, [pc, #44]	; (23098 <z_abort_timeout+0x88>)
   2306a:	f003 f8f8 	bl	2625e <assert_print>
   2306e:	4907      	ldr	r1, [pc, #28]	; (2308c <z_abort_timeout+0x7c>)
   23070:	480c      	ldr	r0, [pc, #48]	; (230a4 <z_abort_timeout+0x94>)
   23072:	f003 f8f4 	bl	2625e <assert_print>
   23076:	21c2      	movs	r1, #194	; 0xc2
   23078:	e7e3      	b.n	23042 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   2307a:	f06f 0415 	mvn.w	r4, #21
   2307e:	e7ec      	b.n	2305a <z_abort_timeout+0x4a>
	__asm__ volatile(
   23080:	f385 8811 	msr	BASEPRI, r5
   23084:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   23088:	4620      	mov	r0, r4
   2308a:	bd38      	pop	{r3, r4, r5, pc}
   2308c:	20022bec 	.word	0x20022bec
   23090:	0002df19 	.word	0x0002df19
   23094:	0002df72 	.word	0x0002df72
   23098:	0002d095 	.word	0x0002d095
   2309c:	0002df87 	.word	0x0002df87
   230a0:	0002df46 	.word	0x0002df46
   230a4:	0002df5d 	.word	0x0002df5d

000230a8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   230a8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   230aa:	f04f 0320 	mov.w	r3, #32
   230ae:	f3ef 8511 	mrs	r5, BASEPRI
   230b2:	f383 8812 	msr	BASEPRI_MAX, r3
   230b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230ba:	4817      	ldr	r0, [pc, #92]	; (23118 <z_get_next_timeout_expiry+0x70>)
   230bc:	f7fd fb5c 	bl	20778 <z_spin_lock_valid>
   230c0:	b968      	cbnz	r0, 230de <z_get_next_timeout_expiry+0x36>
   230c2:	2394      	movs	r3, #148	; 0x94
   230c4:	4a15      	ldr	r2, [pc, #84]	; (2311c <z_get_next_timeout_expiry+0x74>)
   230c6:	4916      	ldr	r1, [pc, #88]	; (23120 <z_get_next_timeout_expiry+0x78>)
   230c8:	4816      	ldr	r0, [pc, #88]	; (23124 <z_get_next_timeout_expiry+0x7c>)
   230ca:	f003 f8c8 	bl	2625e <assert_print>
   230ce:	4912      	ldr	r1, [pc, #72]	; (23118 <z_get_next_timeout_expiry+0x70>)
   230d0:	4815      	ldr	r0, [pc, #84]	; (23128 <z_get_next_timeout_expiry+0x80>)
   230d2:	f003 f8c4 	bl	2625e <assert_print>
   230d6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230d8:	4810      	ldr	r0, [pc, #64]	; (2311c <z_get_next_timeout_expiry+0x74>)
   230da:	f003 f8b9 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   230de:	480e      	ldr	r0, [pc, #56]	; (23118 <z_get_next_timeout_expiry+0x70>)
   230e0:	f7fd fb66 	bl	207b0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   230e4:	f7ff fe8a 	bl	22dfc <next_timeout>
   230e8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230ea:	480b      	ldr	r0, [pc, #44]	; (23118 <z_get_next_timeout_expiry+0x70>)
   230ec:	f7fd fb52 	bl	20794 <z_spin_unlock_valid>
   230f0:	b958      	cbnz	r0, 2310a <z_get_next_timeout_expiry+0x62>
   230f2:	23c2      	movs	r3, #194	; 0xc2
   230f4:	4a09      	ldr	r2, [pc, #36]	; (2311c <z_get_next_timeout_expiry+0x74>)
   230f6:	490d      	ldr	r1, [pc, #52]	; (2312c <z_get_next_timeout_expiry+0x84>)
   230f8:	480a      	ldr	r0, [pc, #40]	; (23124 <z_get_next_timeout_expiry+0x7c>)
   230fa:	f003 f8b0 	bl	2625e <assert_print>
   230fe:	4906      	ldr	r1, [pc, #24]	; (23118 <z_get_next_timeout_expiry+0x70>)
   23100:	480b      	ldr	r0, [pc, #44]	; (23130 <z_get_next_timeout_expiry+0x88>)
   23102:	f003 f8ac 	bl	2625e <assert_print>
   23106:	21c2      	movs	r1, #194	; 0xc2
   23108:	e7e6      	b.n	230d8 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   2310a:	f385 8811 	msr	BASEPRI, r5
   2310e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   23112:	4620      	mov	r0, r4
   23114:	bd38      	pop	{r3, r4, r5, pc}
   23116:	bf00      	nop
   23118:	20022bec 	.word	0x20022bec
   2311c:	0002df19 	.word	0x0002df19
   23120:	0002df72 	.word	0x0002df72
   23124:	0002d095 	.word	0x0002d095
   23128:	0002df87 	.word	0x0002df87
   2312c:	0002df46 	.word	0x0002df46
   23130:	0002df5d 	.word	0x0002df5d

00023134 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   23134:	b570      	push	{r4, r5, r6, lr}
   23136:	4604      	mov	r4, r0
   23138:	460d      	mov	r5, r1
	__asm__ volatile(
   2313a:	f04f 0320 	mov.w	r3, #32
   2313e:	f3ef 8611 	mrs	r6, BASEPRI
   23142:	f383 8812 	msr	BASEPRI_MAX, r3
   23146:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2314a:	481b      	ldr	r0, [pc, #108]	; (231b8 <z_set_timeout_expiry+0x84>)
   2314c:	f7fd fb14 	bl	20778 <z_spin_lock_valid>
   23150:	b968      	cbnz	r0, 2316e <z_set_timeout_expiry+0x3a>
   23152:	2394      	movs	r3, #148	; 0x94
   23154:	4a19      	ldr	r2, [pc, #100]	; (231bc <z_set_timeout_expiry+0x88>)
   23156:	491a      	ldr	r1, [pc, #104]	; (231c0 <z_set_timeout_expiry+0x8c>)
   23158:	481a      	ldr	r0, [pc, #104]	; (231c4 <z_set_timeout_expiry+0x90>)
   2315a:	f003 f880 	bl	2625e <assert_print>
   2315e:	4916      	ldr	r1, [pc, #88]	; (231b8 <z_set_timeout_expiry+0x84>)
   23160:	4819      	ldr	r0, [pc, #100]	; (231c8 <z_set_timeout_expiry+0x94>)
   23162:	f003 f87c 	bl	2625e <assert_print>
   23166:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23168:	4814      	ldr	r0, [pc, #80]	; (231bc <z_set_timeout_expiry+0x88>)
   2316a:	f003 f871 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   2316e:	4812      	ldr	r0, [pc, #72]	; (231b8 <z_set_timeout_expiry+0x84>)
   23170:	f7fd fb1e 	bl	207b0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   23174:	f7ff fe42 	bl	22dfc <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   23178:	2801      	cmp	r0, #1
   2317a:	dd07      	ble.n	2318c <z_set_timeout_expiry+0x58>
   2317c:	42a0      	cmp	r0, r4
   2317e:	db05      	blt.n	2318c <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   23180:	42a0      	cmp	r0, r4
   23182:	4629      	mov	r1, r5
   23184:	bfa8      	it	ge
   23186:	4620      	movge	r0, r4
   23188:	f7fa f8a4 	bl	1d2d4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2318c:	480a      	ldr	r0, [pc, #40]	; (231b8 <z_set_timeout_expiry+0x84>)
   2318e:	f7fd fb01 	bl	20794 <z_spin_unlock_valid>
   23192:	b958      	cbnz	r0, 231ac <z_set_timeout_expiry+0x78>
   23194:	23c2      	movs	r3, #194	; 0xc2
   23196:	4a09      	ldr	r2, [pc, #36]	; (231bc <z_set_timeout_expiry+0x88>)
   23198:	490c      	ldr	r1, [pc, #48]	; (231cc <z_set_timeout_expiry+0x98>)
   2319a:	480a      	ldr	r0, [pc, #40]	; (231c4 <z_set_timeout_expiry+0x90>)
   2319c:	f003 f85f 	bl	2625e <assert_print>
   231a0:	4905      	ldr	r1, [pc, #20]	; (231b8 <z_set_timeout_expiry+0x84>)
   231a2:	480b      	ldr	r0, [pc, #44]	; (231d0 <z_set_timeout_expiry+0x9c>)
   231a4:	f003 f85b 	bl	2625e <assert_print>
   231a8:	21c2      	movs	r1, #194	; 0xc2
   231aa:	e7dd      	b.n	23168 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   231ac:	f386 8811 	msr	BASEPRI, r6
   231b0:	f3bf 8f6f 	isb	sy
		}
	}
}
   231b4:	bd70      	pop	{r4, r5, r6, pc}
   231b6:	bf00      	nop
   231b8:	20022bec 	.word	0x20022bec
   231bc:	0002df19 	.word	0x0002df19
   231c0:	0002df72 	.word	0x0002df72
   231c4:	0002d095 	.word	0x0002d095
   231c8:	0002df87 	.word	0x0002df87
   231cc:	0002df46 	.word	0x0002df46
   231d0:	0002df5d 	.word	0x0002df5d

000231d4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   231d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   231d8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   231da:	f7fe ff7d 	bl	220d8 <z_time_slice>
	__asm__ volatile(
   231de:	f04f 0320 	mov.w	r3, #32
   231e2:	f3ef 8711 	mrs	r7, BASEPRI
   231e6:	f383 8812 	msr	BASEPRI_MAX, r3
   231ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   231ee:	483f      	ldr	r0, [pc, #252]	; (232ec <sys_clock_announce+0x118>)
   231f0:	f7fd fac2 	bl	20778 <z_spin_lock_valid>
   231f4:	b968      	cbnz	r0, 23212 <sys_clock_announce+0x3e>
   231f6:	2394      	movs	r3, #148	; 0x94
   231f8:	4a3d      	ldr	r2, [pc, #244]	; (232f0 <sys_clock_announce+0x11c>)
   231fa:	493e      	ldr	r1, [pc, #248]	; (232f4 <sys_clock_announce+0x120>)
   231fc:	483e      	ldr	r0, [pc, #248]	; (232f8 <sys_clock_announce+0x124>)
   231fe:	f003 f82e 	bl	2625e <assert_print>
   23202:	493a      	ldr	r1, [pc, #232]	; (232ec <sys_clock_announce+0x118>)
   23204:	483d      	ldr	r0, [pc, #244]	; (232fc <sys_clock_announce+0x128>)
   23206:	f003 f82a 	bl	2625e <assert_print>
   2320a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2320c:	4838      	ldr	r0, [pc, #224]	; (232f0 <sys_clock_announce+0x11c>)
   2320e:	f003 f81f 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   23212:	4836      	ldr	r0, [pc, #216]	; (232ec <sys_clock_announce+0x118>)
   23214:	f7fd facc 	bl	207b0 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   23218:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 23300 <sys_clock_announce+0x12c>
	return list->head == list;
   2321c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 23304 <sys_clock_announce+0x130>
   23220:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   23224:	4a38      	ldr	r2, [pc, #224]	; (23308 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23226:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   23228:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   2322c:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   23230:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23234:	d00b      	beq.n	2324e <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   23236:	b155      	cbz	r5, 2324e <sys_clock_announce+0x7a>
   23238:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   2323c:	42b4      	cmp	r4, r6
   2323e:	eb71 0e00 	sbcs.w	lr, r1, r0
   23242:	da1c      	bge.n	2327e <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   23244:	1b36      	subs	r6, r6, r4
   23246:	eb60 0001 	sbc.w	r0, r0, r1
   2324a:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   2324e:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   23250:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   23254:	eb4c 0101 	adc.w	r1, ip, r1
   23258:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   2325c:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   23260:	f7ff fdcc 	bl	22dfc <next_timeout>
   23264:	4621      	mov	r1, r4
   23266:	f7fa f835 	bl	1d2d4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2326a:	4820      	ldr	r0, [pc, #128]	; (232ec <sys_clock_announce+0x118>)
   2326c:	f7fd fa92 	bl	20794 <z_spin_unlock_valid>
   23270:	b1a8      	cbz	r0, 2329e <sys_clock_announce+0xca>
	__asm__ volatile(
   23272:	f387 8811 	msr	BASEPRI, r7
   23276:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2327a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2327e:	18f3      	adds	r3, r6, r3
   23280:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   23284:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   23288:	2200      	movs	r2, #0
   2328a:	2300      	movs	r3, #0
		remove_timeout(t);
   2328c:	4628      	mov	r0, r5
		t->dticks = 0;
   2328e:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   23292:	f7ff fddb 	bl	22e4c <remove_timeout>
   23296:	4815      	ldr	r0, [pc, #84]	; (232ec <sys_clock_announce+0x118>)
   23298:	f7fd fa7c 	bl	20794 <z_spin_unlock_valid>
   2329c:	b958      	cbnz	r0, 232b6 <sys_clock_announce+0xe2>
   2329e:	23c2      	movs	r3, #194	; 0xc2
   232a0:	4a13      	ldr	r2, [pc, #76]	; (232f0 <sys_clock_announce+0x11c>)
   232a2:	491a      	ldr	r1, [pc, #104]	; (2330c <sys_clock_announce+0x138>)
   232a4:	4814      	ldr	r0, [pc, #80]	; (232f8 <sys_clock_announce+0x124>)
   232a6:	f002 ffda 	bl	2625e <assert_print>
   232aa:	4910      	ldr	r1, [pc, #64]	; (232ec <sys_clock_announce+0x118>)
   232ac:	4818      	ldr	r0, [pc, #96]	; (23310 <sys_clock_announce+0x13c>)
   232ae:	f002 ffd6 	bl	2625e <assert_print>
   232b2:	21c2      	movs	r1, #194	; 0xc2
   232b4:	e7aa      	b.n	2320c <sys_clock_announce+0x38>
   232b6:	f387 8811 	msr	BASEPRI, r7
   232ba:	f3bf 8f6f 	isb	sy
		t->fn(t);
   232be:	4628      	mov	r0, r5
   232c0:	68ab      	ldr	r3, [r5, #8]
   232c2:	4798      	blx	r3
	__asm__ volatile(
   232c4:	f04f 0320 	mov.w	r3, #32
   232c8:	f3ef 8711 	mrs	r7, BASEPRI
   232cc:	f383 8812 	msr	BASEPRI_MAX, r3
   232d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   232d4:	4805      	ldr	r0, [pc, #20]	; (232ec <sys_clock_announce+0x118>)
   232d6:	f7fd fa4f 	bl	20778 <z_spin_lock_valid>
   232da:	2800      	cmp	r0, #0
   232dc:	d08b      	beq.n	231f6 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   232de:	4803      	ldr	r0, [pc, #12]	; (232ec <sys_clock_announce+0x118>)
   232e0:	f7fd fa66 	bl	207b0 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   232e4:	f8d8 4000 	ldr.w	r4, [r8]
   232e8:	1ba4      	subs	r4, r4, r6
   232ea:	e799      	b.n	23220 <sys_clock_announce+0x4c>
   232ec:	20022bec 	.word	0x20022bec
   232f0:	0002df19 	.word	0x0002df19
   232f4:	0002df72 	.word	0x0002df72
   232f8:	0002d095 	.word	0x0002d095
   232fc:	0002df87 	.word	0x0002df87
   23300:	20022be8 	.word	0x20022be8
   23304:	20008734 	.word	0x20008734
   23308:	20009dc0 	.word	0x20009dc0
   2330c:	0002df46 	.word	0x0002df46
   23310:	0002df5d 	.word	0x0002df5d

00023314 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   23314:	b570      	push	{r4, r5, r6, lr}
   23316:	f04f 0320 	mov.w	r3, #32
   2331a:	f3ef 8611 	mrs	r6, BASEPRI
   2331e:	f383 8812 	msr	BASEPRI_MAX, r3
   23322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23326:	481a      	ldr	r0, [pc, #104]	; (23390 <sys_clock_tick_get+0x7c>)
   23328:	f7fd fa26 	bl	20778 <z_spin_lock_valid>
   2332c:	b968      	cbnz	r0, 2334a <sys_clock_tick_get+0x36>
   2332e:	2394      	movs	r3, #148	; 0x94
   23330:	4a18      	ldr	r2, [pc, #96]	; (23394 <sys_clock_tick_get+0x80>)
   23332:	4919      	ldr	r1, [pc, #100]	; (23398 <sys_clock_tick_get+0x84>)
   23334:	4819      	ldr	r0, [pc, #100]	; (2339c <sys_clock_tick_get+0x88>)
   23336:	f002 ff92 	bl	2625e <assert_print>
   2333a:	4915      	ldr	r1, [pc, #84]	; (23390 <sys_clock_tick_get+0x7c>)
   2333c:	4818      	ldr	r0, [pc, #96]	; (233a0 <sys_clock_tick_get+0x8c>)
   2333e:	f002 ff8e 	bl	2625e <assert_print>
   23342:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23344:	4813      	ldr	r0, [pc, #76]	; (23394 <sys_clock_tick_get+0x80>)
   23346:	f002 ff83 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   2334a:	4811      	ldr	r0, [pc, #68]	; (23390 <sys_clock_tick_get+0x7c>)
   2334c:	f7fd fa30 	bl	207b0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   23350:	f7ff fd4a 	bl	22de8 <elapsed>
   23354:	4a13      	ldr	r2, [pc, #76]	; (233a4 <sys_clock_tick_get+0x90>)
   23356:	e9d2 4500 	ldrd	r4, r5, [r2]
   2335a:	1904      	adds	r4, r0, r4
   2335c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23360:	480b      	ldr	r0, [pc, #44]	; (23390 <sys_clock_tick_get+0x7c>)
   23362:	f7fd fa17 	bl	20794 <z_spin_unlock_valid>
   23366:	b958      	cbnz	r0, 23380 <sys_clock_tick_get+0x6c>
   23368:	23c2      	movs	r3, #194	; 0xc2
   2336a:	4a0a      	ldr	r2, [pc, #40]	; (23394 <sys_clock_tick_get+0x80>)
   2336c:	490e      	ldr	r1, [pc, #56]	; (233a8 <sys_clock_tick_get+0x94>)
   2336e:	480b      	ldr	r0, [pc, #44]	; (2339c <sys_clock_tick_get+0x88>)
   23370:	f002 ff75 	bl	2625e <assert_print>
   23374:	4906      	ldr	r1, [pc, #24]	; (23390 <sys_clock_tick_get+0x7c>)
   23376:	480d      	ldr	r0, [pc, #52]	; (233ac <sys_clock_tick_get+0x98>)
   23378:	f002 ff71 	bl	2625e <assert_print>
   2337c:	21c2      	movs	r1, #194	; 0xc2
   2337e:	e7e1      	b.n	23344 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   23380:	f386 8811 	msr	BASEPRI, r6
   23384:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   23388:	4620      	mov	r0, r4
   2338a:	4629      	mov	r1, r5
   2338c:	bd70      	pop	{r4, r5, r6, pc}
   2338e:	bf00      	nop
   23390:	20022bec 	.word	0x20022bec
   23394:	0002df19 	.word	0x0002df19
   23398:	0002df72 	.word	0x0002df72
   2339c:	0002d095 	.word	0x0002d095
   233a0:	0002df87 	.word	0x0002df87
   233a4:	20009dc0 	.word	0x20009dc0
   233a8:	0002df46 	.word	0x0002df46
   233ac:	0002df5d 	.word	0x0002df5d

000233b0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   233b0:	b570      	push	{r4, r5, r6, lr}
   233b2:	4604      	mov	r4, r0
	__asm__ volatile(
   233b4:	f04f 0320 	mov.w	r3, #32
   233b8:	f3ef 8511 	mrs	r5, BASEPRI
   233bc:	f383 8812 	msr	BASEPRI_MAX, r3
   233c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   233c4:	4849      	ldr	r0, [pc, #292]	; (234ec <z_timer_expiration_handler+0x13c>)
   233c6:	f7fd f9d7 	bl	20778 <z_spin_lock_valid>
   233ca:	b968      	cbnz	r0, 233e8 <z_timer_expiration_handler+0x38>
   233cc:	2394      	movs	r3, #148	; 0x94
   233ce:	4a48      	ldr	r2, [pc, #288]	; (234f0 <z_timer_expiration_handler+0x140>)
   233d0:	4948      	ldr	r1, [pc, #288]	; (234f4 <z_timer_expiration_handler+0x144>)
   233d2:	4849      	ldr	r0, [pc, #292]	; (234f8 <z_timer_expiration_handler+0x148>)
   233d4:	f002 ff43 	bl	2625e <assert_print>
   233d8:	4944      	ldr	r1, [pc, #272]	; (234ec <z_timer_expiration_handler+0x13c>)
   233da:	4848      	ldr	r0, [pc, #288]	; (234fc <z_timer_expiration_handler+0x14c>)
   233dc:	f002 ff3f 	bl	2625e <assert_print>
   233e0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233e2:	4843      	ldr	r0, [pc, #268]	; (234f0 <z_timer_expiration_handler+0x140>)
   233e4:	f002 ff34 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   233e8:	4840      	ldr	r0, [pc, #256]	; (234ec <z_timer_expiration_handler+0x13c>)
   233ea:	f7fd f9e1 	bl	207b0 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   233ee:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   233f2:	3301      	adds	r3, #1
   233f4:	f142 0200 	adc.w	r2, r2, #0
   233f8:	2b02      	cmp	r3, #2
   233fa:	f172 0200 	sbcs.w	r2, r2, #0
   233fe:	d322      	bcc.n	23446 <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   23400:	f007 fb88 	bl	2ab14 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   23404:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   23408:	3001      	adds	r0, #1
   2340a:	f141 0100 	adc.w	r1, r1, #0
   2340e:	18c0      	adds	r0, r0, r3
   23410:	eb41 0102 	adc.w	r1, r1, r2
   23414:	2801      	cmp	r0, #1
   23416:	f171 0100 	sbcs.w	r1, r1, #0
   2341a:	db29      	blt.n	23470 <z_timer_expiration_handler+0xc0>
   2341c:	f007 fb7a 	bl	2ab14 <z_impl_k_uptime_ticks>
   23420:	3001      	adds	r0, #1
   23422:	f141 0300 	adc.w	r3, r1, #0
   23426:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   2342a:	1880      	adds	r0, r0, r2
   2342c:	f06f 0201 	mvn.w	r2, #1
   23430:	eb43 0301 	adc.w	r3, r3, r1
   23434:	f04f 31ff 	mov.w	r1, #4294967295
   23438:	1a12      	subs	r2, r2, r0
   2343a:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2343e:	4620      	mov	r0, r4
   23440:	492f      	ldr	r1, [pc, #188]	; (23500 <z_timer_expiration_handler+0x150>)
   23442:	f7ff fd1f 	bl	22e84 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   23446:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23448:	3301      	adds	r3, #1
   2344a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2344c:	6a23      	ldr	r3, [r4, #32]
   2344e:	b35b      	cbz	r3, 234a8 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23450:	4826      	ldr	r0, [pc, #152]	; (234ec <z_timer_expiration_handler+0x13c>)
   23452:	f7fd f99f 	bl	20794 <z_spin_unlock_valid>
   23456:	b980      	cbnz	r0, 2347a <z_timer_expiration_handler+0xca>
   23458:	23c2      	movs	r3, #194	; 0xc2
   2345a:	4a25      	ldr	r2, [pc, #148]	; (234f0 <z_timer_expiration_handler+0x140>)
   2345c:	4929      	ldr	r1, [pc, #164]	; (23504 <z_timer_expiration_handler+0x154>)
   2345e:	4826      	ldr	r0, [pc, #152]	; (234f8 <z_timer_expiration_handler+0x148>)
   23460:	f002 fefd 	bl	2625e <assert_print>
   23464:	4921      	ldr	r1, [pc, #132]	; (234ec <z_timer_expiration_handler+0x13c>)
   23466:	4828      	ldr	r0, [pc, #160]	; (23508 <z_timer_expiration_handler+0x158>)
   23468:	f002 fef9 	bl	2625e <assert_print>
   2346c:	21c2      	movs	r1, #194	; 0xc2
   2346e:	e7b8      	b.n	233e2 <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   23470:	f06f 0201 	mvn.w	r2, #1
   23474:	f04f 33ff 	mov.w	r3, #4294967295
   23478:	e7e1      	b.n	2343e <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   2347a:	f385 8811 	msr	BASEPRI, r5
   2347e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   23482:	4620      	mov	r0, r4
   23484:	6a23      	ldr	r3, [r4, #32]
   23486:	4798      	blx	r3
	__asm__ volatile(
   23488:	f04f 0320 	mov.w	r3, #32
   2348c:	f3ef 8511 	mrs	r5, BASEPRI
   23490:	f383 8812 	msr	BASEPRI_MAX, r3
   23494:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23498:	4814      	ldr	r0, [pc, #80]	; (234ec <z_timer_expiration_handler+0x13c>)
   2349a:	f7fd f96d 	bl	20778 <z_spin_lock_valid>
   2349e:	2800      	cmp	r0, #0
   234a0:	d094      	beq.n	233cc <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   234a2:	4812      	ldr	r0, [pc, #72]	; (234ec <z_timer_expiration_handler+0x13c>)
   234a4:	f7fd f984 	bl	207b0 <z_spin_lock_set_owner>
	return list->head == list;
   234a8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   234ac:	42a6      	cmp	r6, r4
   234ae:	d000      	beq.n	234b2 <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   234b0:	b94e      	cbnz	r6, 234c6 <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   234b2:	480e      	ldr	r0, [pc, #56]	; (234ec <z_timer_expiration_handler+0x13c>)
   234b4:	f7fd f96e 	bl	20794 <z_spin_unlock_valid>
   234b8:	2800      	cmp	r0, #0
   234ba:	d0cd      	beq.n	23458 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   234bc:	f385 8811 	msr	BASEPRI, r5
   234c0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   234c4:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   234c6:	4630      	mov	r0, r6
   234c8:	f7fe fbda 	bl	21c80 <z_unpend_thread_no_timeout>
   234cc:	2300      	movs	r3, #0
   234ce:	4807      	ldr	r0, [pc, #28]	; (234ec <z_timer_expiration_handler+0x13c>)
   234d0:	67f3      	str	r3, [r6, #124]	; 0x7c
   234d2:	f7fd f95f 	bl	20794 <z_spin_unlock_valid>
   234d6:	2800      	cmp	r0, #0
   234d8:	d0be      	beq.n	23458 <z_timer_expiration_handler+0xa8>
   234da:	f385 8811 	msr	BASEPRI, r5
   234de:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   234e2:	4630      	mov	r0, r6
}
   234e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   234e8:	f7fe bb84 	b.w	21bf4 <z_ready_thread>
   234ec:	20022bf0 	.word	0x20022bf0
   234f0:	0002df19 	.word	0x0002df19
   234f4:	0002df72 	.word	0x0002df72
   234f8:	0002d095 	.word	0x0002d095
   234fc:	0002df87 	.word	0x0002df87
   23500:	000233b1 	.word	0x000233b1
   23504:	0002df46 	.word	0x0002df46
   23508:	0002df5d 	.word	0x0002df5d

0002350c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2350c:	f1b3 3fff 	cmp.w	r3, #4294967295
   23510:	bf08      	it	eq
   23512:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   23516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2351a:	4619      	mov	r1, r3
   2351c:	4605      	mov	r5, r0
   2351e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   23522:	4614      	mov	r4, r2
   23524:	4691      	mov	r9, r2
   23526:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   23528:	d037      	beq.n	2359a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2352a:	f1b0 3fff 	cmp.w	r0, #4294967295
   2352e:	bf08      	it	eq
   23530:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23534:	4637      	mov	r7, r6
   23536:	4682      	mov	sl, r0
   23538:	d011      	beq.n	2355e <z_impl_k_timer_start+0x52>
   2353a:	ea50 0306 	orrs.w	r3, r0, r6
   2353e:	d00e      	beq.n	2355e <z_impl_k_timer_start+0x52>
   23540:	1c72      	adds	r2, r6, #1
   23542:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   23546:	db0a      	blt.n	2355e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   23548:	2e02      	cmp	r6, #2
   2354a:	4684      	mov	ip, r0
   2354c:	f170 0000 	sbcs.w	r0, r0, #0
   23550:	bfbc      	itt	lt
   23552:	2702      	movlt	r7, #2
   23554:	f04f 0c00 	movlt.w	ip, #0
   23558:	3f01      	subs	r7, #1
   2355a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2355e:	1c63      	adds	r3, r4, #1
   23560:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   23564:	db0a      	blt.n	2357c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   23566:	2c01      	cmp	r4, #1
   23568:	f171 0300 	sbcs.w	r3, r1, #0
   2356c:	4622      	mov	r2, r4
   2356e:	bfbc      	itt	lt
   23570:	2201      	movlt	r2, #1
   23572:	2100      	movlt	r1, #0
   23574:	f112 39ff 	adds.w	r9, r2, #4294967295
   23578:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   2357c:	4628      	mov	r0, r5
   2357e:	f7ff fd47 	bl	23010 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   23582:	2300      	movs	r3, #0
	timer->period = period;
   23584:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   23588:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2358a:	464a      	mov	r2, r9
   2358c:	4643      	mov	r3, r8
   2358e:	4628      	mov	r0, r5
		     duration);
}
   23590:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23594:	4902      	ldr	r1, [pc, #8]	; (235a0 <z_impl_k_timer_start+0x94>)
   23596:	f7ff bc75 	b.w	22e84 <z_add_timeout>
}
   2359a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2359e:	bf00      	nop
   235a0:	000233b1 	.word	0x000233b1

000235a4 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   235a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   235a8:	2600      	movs	r6, #0
{
   235aa:	4688      	mov	r8, r1
   235ac:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   235ae:	4604      	mov	r4, r0
	int events_registered = 0;
   235b0:	4637      	mov	r7, r6
	event->poller = NULL;
   235b2:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   235b4:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 23774 <register_events+0x1d0>
{
   235b8:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   235ba:	4546      	cmp	r6, r8
   235bc:	db03      	blt.n	235c6 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   235be:	4638      	mov	r0, r7
   235c0:	b003      	add	sp, #12
   235c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   235c6:	f04f 0320 	mov.w	r3, #32
   235ca:	f3ef 8b11 	mrs	fp, BASEPRI
   235ce:	f383 8812 	msr	BASEPRI_MAX, r3
   235d2:	f3bf 8f6f 	isb	sy
   235d6:	4648      	mov	r0, r9
   235d8:	f7fd f8ce 	bl	20778 <z_spin_lock_valid>
   235dc:	b960      	cbnz	r0, 235f8 <register_events+0x54>
   235de:	2394      	movs	r3, #148	; 0x94
   235e0:	4a65      	ldr	r2, [pc, #404]	; (23778 <register_events+0x1d4>)
   235e2:	4966      	ldr	r1, [pc, #408]	; (2377c <register_events+0x1d8>)
   235e4:	4866      	ldr	r0, [pc, #408]	; (23780 <register_events+0x1dc>)
   235e6:	f002 fe3a 	bl	2625e <assert_print>
   235ea:	4962      	ldr	r1, [pc, #392]	; (23774 <register_events+0x1d0>)
   235ec:	4865      	ldr	r0, [pc, #404]	; (23784 <register_events+0x1e0>)
   235ee:	f002 fe36 	bl	2625e <assert_print>
   235f2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   235f4:	4860      	ldr	r0, [pc, #384]	; (23778 <register_events+0x1d4>)
   235f6:	e060      	b.n	236ba <register_events+0x116>
	z_spin_lock_set_owner(l);
   235f8:	4648      	mov	r0, r9
   235fa:	f7fd f8d9 	bl	207b0 <z_spin_lock_set_owner>
	switch (event->type) {
   235fe:	7b63      	ldrb	r3, [r4, #13]
   23600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23604:	2b08      	cmp	r3, #8
   23606:	d84a      	bhi.n	2369e <register_events+0xfa>
   23608:	e8df f003 	tbb	[pc, r3]
   2360c:	49053d2b 	.word	0x49053d2b
   23610:	49494927 	.word	0x49494927
   23614:	43          	.byte	0x43
   23615:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   23616:	6923      	ldr	r3, [r4, #16]
   23618:	689b      	ldr	r3, [r3, #8]
   2361a:	b313      	cbz	r3, 23662 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2361c:	2302      	movs	r3, #2
	event->state |= state;
   2361e:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   23620:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   23624:	f3c2 3186 	ubfx	r1, r2, #14, #7
   23628:	430b      	orrs	r3, r1
   2362a:	f363 3294 	bfi	r2, r3, #14, #7
   2362e:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   23630:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23634:	4648      	mov	r0, r9
   23636:	f7fd f8ad 	bl	20794 <z_spin_unlock_valid>
   2363a:	3414      	adds	r4, #20
   2363c:	2800      	cmp	r0, #0
   2363e:	f040 8092 	bne.w	23766 <register_events+0x1c2>
   23642:	23c2      	movs	r3, #194	; 0xc2
   23644:	4a4c      	ldr	r2, [pc, #304]	; (23778 <register_events+0x1d4>)
   23646:	4950      	ldr	r1, [pc, #320]	; (23788 <register_events+0x1e4>)
   23648:	484d      	ldr	r0, [pc, #308]	; (23780 <register_events+0x1dc>)
   2364a:	f002 fe08 	bl	2625e <assert_print>
   2364e:	4949      	ldr	r1, [pc, #292]	; (23774 <register_events+0x1d0>)
   23650:	484e      	ldr	r0, [pc, #312]	; (2378c <register_events+0x1e8>)
   23652:	f002 fe04 	bl	2625e <assert_print>
   23656:	21c2      	movs	r1, #194	; 0xc2
   23658:	e7cc      	b.n	235f4 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   2365a:	6923      	ldr	r3, [r4, #16]
   2365c:	681b      	ldr	r3, [r3, #0]
   2365e:	2b00      	cmp	r3, #0
   23660:	d12d      	bne.n	236be <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   23662:	9b01      	ldr	r3, [sp, #4]
   23664:	2b00      	cmp	r3, #0
   23666:	d1e5      	bne.n	23634 <register_events+0x90>
   23668:	782b      	ldrb	r3, [r5, #0]
   2366a:	2b00      	cmp	r3, #0
   2366c:	d0e2      	beq.n	23634 <register_events+0x90>
	switch (event->type) {
   2366e:	7b63      	ldrb	r3, [r4, #13]
   23670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23674:	2b08      	cmp	r3, #8
   23676:	d86b      	bhi.n	23750 <register_events+0x1ac>
   23678:	e8df f003 	tbb	[pc, r3]
   2367c:	6a234935 	.word	0x6a234935
   23680:	6a6a6a38 	.word	0x6a6a6a38
   23684:	59          	.byte	0x59
   23685:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   23686:	6923      	ldr	r3, [r4, #16]
   23688:	689b      	ldr	r3, [r3, #8]
   2368a:	2b00      	cmp	r3, #0
   2368c:	d0e9      	beq.n	23662 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   2368e:	2301      	movs	r3, #1
   23690:	e7c5      	b.n	2361e <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   23692:	6923      	ldr	r3, [r4, #16]
   23694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23696:	2b00      	cmp	r3, #0
   23698:	d0e3      	beq.n	23662 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2369a:	2310      	movs	r3, #16
   2369c:	e7bf      	b.n	2361e <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2369e:	2363      	movs	r3, #99	; 0x63
   236a0:	4a3b      	ldr	r2, [pc, #236]	; (23790 <register_events+0x1ec>)
   236a2:	493c      	ldr	r1, [pc, #240]	; (23794 <register_events+0x1f0>)
   236a4:	4836      	ldr	r0, [pc, #216]	; (23780 <register_events+0x1dc>)
   236a6:	f002 fdda 	bl	2625e <assert_print>
   236aa:	7b61      	ldrb	r1, [r4, #13]
   236ac:	483a      	ldr	r0, [pc, #232]	; (23798 <register_events+0x1f4>)
   236ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   236b2:	f002 fdd4 	bl	2625e <assert_print>
   236b6:	2163      	movs	r1, #99	; 0x63
   236b8:	4835      	ldr	r0, [pc, #212]	; (23790 <register_events+0x1ec>)
   236ba:	f002 fdc9 	bl	26250 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   236be:	2304      	movs	r3, #4
   236c0:	e7ad      	b.n	2361e <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   236c2:	6920      	ldr	r0, [r4, #16]
   236c4:	b950      	cbnz	r0, 236dc <register_events+0x138>
   236c6:	4935      	ldr	r1, [pc, #212]	; (2379c <register_events+0x1f8>)
   236c8:	238d      	movs	r3, #141	; 0x8d
   236ca:	4a31      	ldr	r2, [pc, #196]	; (23790 <register_events+0x1ec>)
   236cc:	482c      	ldr	r0, [pc, #176]	; (23780 <register_events+0x1dc>)
   236ce:	f002 fdc6 	bl	2625e <assert_print>
   236d2:	4833      	ldr	r0, [pc, #204]	; (237a0 <register_events+0x1fc>)
   236d4:	f002 fdc3 	bl	2625e <assert_print>
   236d8:	218d      	movs	r1, #141	; 0x8d
   236da:	e7ed      	b.n	236b8 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   236dc:	462a      	mov	r2, r5
   236de:	4621      	mov	r1, r4
   236e0:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   236e2:	f007 fa68 	bl	2abb6 <add_event>
	event->poller = poller;
   236e6:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   236e8:	3701      	adds	r7, #1
   236ea:	e7a3      	b.n	23634 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   236ec:	6920      	ldr	r0, [r4, #16]
   236ee:	b950      	cbnz	r0, 23706 <register_events+0x162>
   236f0:	492c      	ldr	r1, [pc, #176]	; (237a4 <register_events+0x200>)
   236f2:	2391      	movs	r3, #145	; 0x91
   236f4:	4a26      	ldr	r2, [pc, #152]	; (23790 <register_events+0x1ec>)
   236f6:	4822      	ldr	r0, [pc, #136]	; (23780 <register_events+0x1dc>)
   236f8:	f002 fdb1 	bl	2625e <assert_print>
   236fc:	482a      	ldr	r0, [pc, #168]	; (237a8 <register_events+0x204>)
   236fe:	f002 fdae 	bl	2625e <assert_print>
   23702:	2191      	movs	r1, #145	; 0x91
   23704:	e7d8      	b.n	236b8 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   23706:	462a      	mov	r2, r5
   23708:	4621      	mov	r1, r4
   2370a:	3014      	adds	r0, #20
   2370c:	e7e9      	b.n	236e2 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2370e:	6920      	ldr	r0, [r4, #16]
   23710:	b950      	cbnz	r0, 23728 <register_events+0x184>
   23712:	4926      	ldr	r1, [pc, #152]	; (237ac <register_events+0x208>)
   23714:	2395      	movs	r3, #149	; 0x95
   23716:	4a1e      	ldr	r2, [pc, #120]	; (23790 <register_events+0x1ec>)
   23718:	4819      	ldr	r0, [pc, #100]	; (23780 <register_events+0x1dc>)
   2371a:	f002 fda0 	bl	2625e <assert_print>
   2371e:	4824      	ldr	r0, [pc, #144]	; (237b0 <register_events+0x20c>)
   23720:	f002 fd9d 	bl	2625e <assert_print>
   23724:	2195      	movs	r1, #149	; 0x95
   23726:	e7c7      	b.n	236b8 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   23728:	462a      	mov	r2, r5
   2372a:	4621      	mov	r1, r4
   2372c:	e7d9      	b.n	236e2 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2372e:	6920      	ldr	r0, [r4, #16]
   23730:	b950      	cbnz	r0, 23748 <register_events+0x1a4>
   23732:	4920      	ldr	r1, [pc, #128]	; (237b4 <register_events+0x210>)
   23734:	2399      	movs	r3, #153	; 0x99
   23736:	4a16      	ldr	r2, [pc, #88]	; (23790 <register_events+0x1ec>)
   23738:	4811      	ldr	r0, [pc, #68]	; (23780 <register_events+0x1dc>)
   2373a:	f002 fd90 	bl	2625e <assert_print>
   2373e:	481e      	ldr	r0, [pc, #120]	; (237b8 <register_events+0x214>)
   23740:	f002 fd8d 	bl	2625e <assert_print>
   23744:	2199      	movs	r1, #153	; 0x99
   23746:	e7b7      	b.n	236b8 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   23748:	462a      	mov	r2, r5
   2374a:	4621      	mov	r1, r4
   2374c:	3028      	adds	r0, #40	; 0x28
   2374e:	e7c8      	b.n	236e2 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   23750:	4910      	ldr	r1, [pc, #64]	; (23794 <register_events+0x1f0>)
   23752:	23a6      	movs	r3, #166	; 0xa6
   23754:	4a0e      	ldr	r2, [pc, #56]	; (23790 <register_events+0x1ec>)
   23756:	480a      	ldr	r0, [pc, #40]	; (23780 <register_events+0x1dc>)
   23758:	f002 fd81 	bl	2625e <assert_print>
   2375c:	4817      	ldr	r0, [pc, #92]	; (237bc <register_events+0x218>)
   2375e:	f002 fd7e 	bl	2625e <assert_print>
   23762:	21a6      	movs	r1, #166	; 0xa6
   23764:	e7a8      	b.n	236b8 <register_events+0x114>
	__asm__ volatile(
   23766:	f38b 8811 	msr	BASEPRI, fp
   2376a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2376e:	3601      	adds	r6, #1
   23770:	e723      	b.n	235ba <register_events+0x16>
   23772:	bf00      	nop
   23774:	20022bf4 	.word	0x20022bf4
   23778:	0002df19 	.word	0x0002df19
   2377c:	0002df72 	.word	0x0002df72
   23780:	0002d095 	.word	0x0002d095
   23784:	0002df87 	.word	0x0002df87
   23788:	0002df46 	.word	0x0002df46
   2378c:	0002df5d 	.word	0x0002df5d
   23790:	000326c2 	.word	0x000326c2
   23794:	0003297c 	.word	0x0003297c
   23798:	000326e3 	.word	0x000326e3
   2379c:	00032700 	.word	0x00032700
   237a0:	0003271a 	.word	0x0003271a
   237a4:	0003272f 	.word	0x0003272f
   237a8:	0003274b 	.word	0x0003274b
   237ac:	0003275c 	.word	0x0003275c
   237b0:	00032779 	.word	0x00032779
   237b4:	00032790 	.word	0x00032790
   237b8:	000327ab 	.word	0x000327ab
   237bc:	000327c4 	.word	0x000327c4

000237c0 <clear_event_registrations>:
{
   237c0:	2314      	movs	r3, #20
   237c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   237c6:	4615      	mov	r5, r2
	while (num_events--) {
   237c8:	460c      	mov	r4, r1
	event->poller = NULL;
   237ca:	2600      	movs	r6, #0
   237cc:	fb03 0001 	mla	r0, r3, r1, r0
   237d0:	4f4b      	ldr	r7, [pc, #300]	; (23900 <clear_event_registrations+0x140>)
	while (num_events--) {
   237d2:	b90c      	cbnz	r4, 237d8 <clear_event_registrations+0x18>
}
   237d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   237d8:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   237dc:	f1a0 0814 	sub.w	r8, r0, #20
   237e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   237e4:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   237e8:	2b08      	cmp	r3, #8
   237ea:	d842      	bhi.n	23872 <clear_event_registrations+0xb2>
   237ec:	e8df f003 	tbb	[pc, r3]
   237f0:	41052555 	.word	0x41052555
   237f4:	41414116 	.word	0x41414116
   237f8:	33          	.byte	0x33
   237f9:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   237fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
   237fe:	2b00      	cmp	r3, #0
   23800:	d142      	bne.n	23888 <clear_event_registrations+0xc8>
   23802:	4940      	ldr	r1, [pc, #256]	; (23904 <clear_event_registrations+0x144>)
   23804:	23b6      	movs	r3, #182	; 0xb6
   23806:	4a40      	ldr	r2, [pc, #256]	; (23908 <clear_event_registrations+0x148>)
   23808:	4840      	ldr	r0, [pc, #256]	; (2390c <clear_event_registrations+0x14c>)
   2380a:	f002 fd28 	bl	2625e <assert_print>
   2380e:	4840      	ldr	r0, [pc, #256]	; (23910 <clear_event_registrations+0x150>)
   23810:	f002 fd25 	bl	2625e <assert_print>
   23814:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   23816:	483c      	ldr	r0, [pc, #240]	; (23908 <clear_event_registrations+0x148>)
   23818:	f002 fd1a 	bl	26250 <assert_post_action>
   2381c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   23820:	2b00      	cmp	r3, #0
   23822:	d131      	bne.n	23888 <clear_event_registrations+0xc8>
   23824:	493b      	ldr	r1, [pc, #236]	; (23914 <clear_event_registrations+0x154>)
   23826:	23ba      	movs	r3, #186	; 0xba
   23828:	4a37      	ldr	r2, [pc, #220]	; (23908 <clear_event_registrations+0x148>)
   2382a:	4838      	ldr	r0, [pc, #224]	; (2390c <clear_event_registrations+0x14c>)
   2382c:	f002 fd17 	bl	2625e <assert_print>
   23830:	4839      	ldr	r0, [pc, #228]	; (23918 <clear_event_registrations+0x158>)
   23832:	f002 fd14 	bl	2625e <assert_print>
   23836:	21ba      	movs	r1, #186	; 0xba
   23838:	e7ed      	b.n	23816 <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2383a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2383e:	bb1b      	cbnz	r3, 23888 <clear_event_registrations+0xc8>
   23840:	4936      	ldr	r1, [pc, #216]	; (2391c <clear_event_registrations+0x15c>)
   23842:	23be      	movs	r3, #190	; 0xbe
   23844:	4a30      	ldr	r2, [pc, #192]	; (23908 <clear_event_registrations+0x148>)
   23846:	4831      	ldr	r0, [pc, #196]	; (2390c <clear_event_registrations+0x14c>)
   23848:	f002 fd09 	bl	2625e <assert_print>
   2384c:	4834      	ldr	r0, [pc, #208]	; (23920 <clear_event_registrations+0x160>)
   2384e:	f002 fd06 	bl	2625e <assert_print>
   23852:	21be      	movs	r1, #190	; 0xbe
   23854:	e7df      	b.n	23816 <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   23856:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2385a:	b9ab      	cbnz	r3, 23888 <clear_event_registrations+0xc8>
   2385c:	4931      	ldr	r1, [pc, #196]	; (23924 <clear_event_registrations+0x164>)
   2385e:	23c2      	movs	r3, #194	; 0xc2
   23860:	4a29      	ldr	r2, [pc, #164]	; (23908 <clear_event_registrations+0x148>)
   23862:	482a      	ldr	r0, [pc, #168]	; (2390c <clear_event_registrations+0x14c>)
   23864:	f002 fcfb 	bl	2625e <assert_print>
   23868:	482f      	ldr	r0, [pc, #188]	; (23928 <clear_event_registrations+0x168>)
   2386a:	f002 fcf8 	bl	2625e <assert_print>
   2386e:	21c2      	movs	r1, #194	; 0xc2
   23870:	e7d1      	b.n	23816 <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   23872:	492e      	ldr	r1, [pc, #184]	; (2392c <clear_event_registrations+0x16c>)
   23874:	23cf      	movs	r3, #207	; 0xcf
   23876:	4a24      	ldr	r2, [pc, #144]	; (23908 <clear_event_registrations+0x148>)
   23878:	4824      	ldr	r0, [pc, #144]	; (2390c <clear_event_registrations+0x14c>)
   2387a:	f002 fcf0 	bl	2625e <assert_print>
   2387e:	482c      	ldr	r0, [pc, #176]	; (23930 <clear_event_registrations+0x170>)
   23880:	f002 fced 	bl	2625e <assert_print>
   23884:	21cf      	movs	r1, #207	; 0xcf
   23886:	e7c6      	b.n	23816 <clear_event_registrations+0x56>
	return node->next != NULL;
   23888:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2388c:	b12b      	cbz	r3, 2389a <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   2388e:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   23892:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23894:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   23896:	e940 6605 	strd	r6, r6, [r0, #-20]
   2389a:	4638      	mov	r0, r7
   2389c:	f7fc ff7a 	bl	20794 <z_spin_unlock_valid>
   238a0:	b960      	cbnz	r0, 238bc <clear_event_registrations+0xfc>
   238a2:	23c2      	movs	r3, #194	; 0xc2
   238a4:	4a23      	ldr	r2, [pc, #140]	; (23934 <clear_event_registrations+0x174>)
   238a6:	4924      	ldr	r1, [pc, #144]	; (23938 <clear_event_registrations+0x178>)
   238a8:	4818      	ldr	r0, [pc, #96]	; (2390c <clear_event_registrations+0x14c>)
   238aa:	f002 fcd8 	bl	2625e <assert_print>
   238ae:	4914      	ldr	r1, [pc, #80]	; (23900 <clear_event_registrations+0x140>)
   238b0:	4822      	ldr	r0, [pc, #136]	; (2393c <clear_event_registrations+0x17c>)
   238b2:	f002 fcd4 	bl	2625e <assert_print>
   238b6:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   238b8:	481e      	ldr	r0, [pc, #120]	; (23934 <clear_event_registrations+0x174>)
   238ba:	e7ad      	b.n	23818 <clear_event_registrations+0x58>
   238bc:	f385 8811 	msr	BASEPRI, r5
   238c0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   238c4:	f04f 0320 	mov.w	r3, #32
   238c8:	f3ef 8511 	mrs	r5, BASEPRI
   238cc:	f383 8812 	msr	BASEPRI_MAX, r3
   238d0:	f3bf 8f6f 	isb	sy
   238d4:	4638      	mov	r0, r7
   238d6:	f7fc ff4f 	bl	20778 <z_spin_lock_valid>
   238da:	3c01      	subs	r4, #1
   238dc:	b958      	cbnz	r0, 238f6 <clear_event_registrations+0x136>
   238de:	2394      	movs	r3, #148	; 0x94
   238e0:	4a14      	ldr	r2, [pc, #80]	; (23934 <clear_event_registrations+0x174>)
   238e2:	4917      	ldr	r1, [pc, #92]	; (23940 <clear_event_registrations+0x180>)
   238e4:	4809      	ldr	r0, [pc, #36]	; (2390c <clear_event_registrations+0x14c>)
   238e6:	f002 fcba 	bl	2625e <assert_print>
   238ea:	4905      	ldr	r1, [pc, #20]	; (23900 <clear_event_registrations+0x140>)
   238ec:	4815      	ldr	r0, [pc, #84]	; (23944 <clear_event_registrations+0x184>)
   238ee:	f002 fcb6 	bl	2625e <assert_print>
   238f2:	2194      	movs	r1, #148	; 0x94
   238f4:	e7e0      	b.n	238b8 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   238f6:	4638      	mov	r0, r7
   238f8:	f7fc ff5a 	bl	207b0 <z_spin_lock_set_owner>
	return k;
   238fc:	4640      	mov	r0, r8
   238fe:	e768      	b.n	237d2 <clear_event_registrations+0x12>
   23900:	20022bf4 	.word	0x20022bf4
   23904:	00032700 	.word	0x00032700
   23908:	000326c2 	.word	0x000326c2
   2390c:	0002d095 	.word	0x0002d095
   23910:	0003271a 	.word	0x0003271a
   23914:	0003272f 	.word	0x0003272f
   23918:	0003274b 	.word	0x0003274b
   2391c:	0003275c 	.word	0x0003275c
   23920:	00032779 	.word	0x00032779
   23924:	00032790 	.word	0x00032790
   23928:	000327ab 	.word	0x000327ab
   2392c:	0003297c 	.word	0x0003297c
   23930:	000327c4 	.word	0x000327c4
   23934:	0002df19 	.word	0x0002df19
   23938:	0002df46 	.word	0x0002df46
   2393c:	0002df5d 	.word	0x0002df5d
   23940:	0002df72 	.word	0x0002df72
   23944:	0002df87 	.word	0x0002df87

00023948 <k_poll_event_init>:
{
   23948:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2394a:	b162      	cbz	r2, 23966 <k_poll_event_init+0x1e>
   2394c:	4917      	ldr	r1, [pc, #92]	; (239ac <k_poll_event_init+0x64>)
   2394e:	232d      	movs	r3, #45	; 0x2d
   23950:	4a17      	ldr	r2, [pc, #92]	; (239b0 <k_poll_event_init+0x68>)
   23952:	4818      	ldr	r0, [pc, #96]	; (239b4 <k_poll_event_init+0x6c>)
   23954:	f002 fc83 	bl	2625e <assert_print>
   23958:	4817      	ldr	r0, [pc, #92]	; (239b8 <k_poll_event_init+0x70>)
   2395a:	f002 fc80 	bl	2625e <assert_print>
   2395e:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   23960:	4813      	ldr	r0, [pc, #76]	; (239b0 <k_poll_event_init+0x68>)
   23962:	f002 fc75 	bl	26250 <assert_post_action>
   23966:	293f      	cmp	r1, #63	; 0x3f
   23968:	d90a      	bls.n	23980 <k_poll_event_init+0x38>
   2396a:	4914      	ldr	r1, [pc, #80]	; (239bc <k_poll_event_init+0x74>)
   2396c:	232f      	movs	r3, #47	; 0x2f
   2396e:	4a10      	ldr	r2, [pc, #64]	; (239b0 <k_poll_event_init+0x68>)
   23970:	4810      	ldr	r0, [pc, #64]	; (239b4 <k_poll_event_init+0x6c>)
   23972:	f002 fc74 	bl	2625e <assert_print>
   23976:	4812      	ldr	r0, [pc, #72]	; (239c0 <k_poll_event_init+0x78>)
   23978:	f002 fc71 	bl	2625e <assert_print>
   2397c:	212f      	movs	r1, #47	; 0x2f
   2397e:	e7ef      	b.n	23960 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   23980:	b953      	cbnz	r3, 23998 <k_poll_event_init+0x50>
   23982:	4910      	ldr	r1, [pc, #64]	; (239c4 <k_poll_event_init+0x7c>)
   23984:	2330      	movs	r3, #48	; 0x30
   23986:	4a0a      	ldr	r2, [pc, #40]	; (239b0 <k_poll_event_init+0x68>)
   23988:	480a      	ldr	r0, [pc, #40]	; (239b4 <k_poll_event_init+0x6c>)
   2398a:	f002 fc68 	bl	2625e <assert_print>
   2398e:	480e      	ldr	r0, [pc, #56]	; (239c8 <k_poll_event_init+0x80>)
   23990:	f002 fc65 	bl	2625e <assert_print>
   23994:	2130      	movs	r1, #48	; 0x30
   23996:	e7e3      	b.n	23960 <k_poll_event_init+0x18>
	event->poller = NULL;
   23998:	6082      	str	r2, [r0, #8]
	event->type = type;
   2399a:	0209      	lsls	r1, r1, #8
   2399c:	7b02      	ldrb	r2, [r0, #12]
   2399e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   239a2:	4311      	orrs	r1, r2
	event->obj = obj;
   239a4:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   239a8:	bd08      	pop	{r3, pc}
   239aa:	bf00      	nop
   239ac:	000327da 	.word	0x000327da
   239b0:	000326c2 	.word	0x000326c2
   239b4:	0002d095 	.word	0x0002d095
   239b8:	000327fa 	.word	0x000327fa
   239bc:	00032820 	.word	0x00032820
   239c0:	00032844 	.word	0x00032844
   239c4:	00032854 	.word	0x00032854
   239c8:	00032867 	.word	0x00032867

000239cc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   239cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239d0:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   239d2:	4b5c      	ldr	r3, [pc, #368]	; (23b44 <z_impl_k_poll+0x178>)
{
   239d4:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   239d6:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   239da:	2301      	movs	r3, #1
{
   239dc:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   239de:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   239e2:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   239e6:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   239ea:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   239ee:	f1bb 0f00 	cmp.w	fp, #0
   239f2:	d00e      	beq.n	23a12 <z_impl_k_poll+0x46>
   239f4:	4954      	ldr	r1, [pc, #336]	; (23b48 <z_impl_k_poll+0x17c>)
   239f6:	f240 132d 	movw	r3, #301	; 0x12d
   239fa:	4a54      	ldr	r2, [pc, #336]	; (23b4c <z_impl_k_poll+0x180>)
   239fc:	4854      	ldr	r0, [pc, #336]	; (23b50 <z_impl_k_poll+0x184>)
   239fe:	f002 fc2e 	bl	2625e <assert_print>
   23a02:	4854      	ldr	r0, [pc, #336]	; (23b54 <z_impl_k_poll+0x188>)
   23a04:	f002 fc2b 	bl	2625e <assert_print>
   23a08:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   23a0c:	484f      	ldr	r0, [pc, #316]	; (23b4c <z_impl_k_poll+0x180>)
   23a0e:	f002 fc1f 	bl	26250 <assert_post_action>
   23a12:	b960      	cbnz	r0, 23a2e <z_impl_k_poll+0x62>
   23a14:	4950      	ldr	r1, [pc, #320]	; (23b58 <z_impl_k_poll+0x18c>)
   23a16:	f44f 7397 	mov.w	r3, #302	; 0x12e
   23a1a:	4a4c      	ldr	r2, [pc, #304]	; (23b4c <z_impl_k_poll+0x180>)
   23a1c:	484c      	ldr	r0, [pc, #304]	; (23b50 <z_impl_k_poll+0x184>)
   23a1e:	f002 fc1e 	bl	2625e <assert_print>
   23a22:	484e      	ldr	r0, [pc, #312]	; (23b5c <z_impl_k_poll+0x190>)
   23a24:	f002 fc1b 	bl	2625e <assert_print>
   23a28:	f44f 7197 	mov.w	r1, #302	; 0x12e
   23a2c:	e7ee      	b.n	23a0c <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   23a2e:	2900      	cmp	r1, #0
   23a30:	da0c      	bge.n	23a4c <z_impl_k_poll+0x80>
   23a32:	494b      	ldr	r1, [pc, #300]	; (23b60 <z_impl_k_poll+0x194>)
   23a34:	f240 132f 	movw	r3, #303	; 0x12f
   23a38:	4a44      	ldr	r2, [pc, #272]	; (23b4c <z_impl_k_poll+0x180>)
   23a3a:	4845      	ldr	r0, [pc, #276]	; (23b50 <z_impl_k_poll+0x184>)
   23a3c:	f002 fc0f 	bl	2625e <assert_print>
   23a40:	4848      	ldr	r0, [pc, #288]	; (23b64 <z_impl_k_poll+0x198>)
   23a42:	f002 fc0c 	bl	2625e <assert_print>
   23a46:	f240 112f 	movw	r1, #303	; 0x12f
   23a4a:	e7df      	b.n	23a0c <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   23a4c:	ea57 0306 	orrs.w	r3, r7, r6
   23a50:	bf0c      	ite	eq
   23a52:	2301      	moveq	r3, #1
   23a54:	2300      	movne	r3, #0
   23a56:	f7ff fda5 	bl	235a4 <register_events>
   23a5a:	4681      	mov	r9, r0
   23a5c:	f04f 0320 	mov.w	r3, #32
   23a60:	f3ef 8a11 	mrs	sl, BASEPRI
   23a64:	f383 8812 	msr	BASEPRI_MAX, r3
   23a68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a6c:	483e      	ldr	r0, [pc, #248]	; (23b68 <z_impl_k_poll+0x19c>)
   23a6e:	f7fc fe83 	bl	20778 <z_spin_lock_valid>
   23a72:	b960      	cbnz	r0, 23a8e <z_impl_k_poll+0xc2>
   23a74:	2394      	movs	r3, #148	; 0x94
   23a76:	4a3d      	ldr	r2, [pc, #244]	; (23b6c <z_impl_k_poll+0x1a0>)
   23a78:	493d      	ldr	r1, [pc, #244]	; (23b70 <z_impl_k_poll+0x1a4>)
   23a7a:	4835      	ldr	r0, [pc, #212]	; (23b50 <z_impl_k_poll+0x184>)
   23a7c:	f002 fbef 	bl	2625e <assert_print>
   23a80:	4939      	ldr	r1, [pc, #228]	; (23b68 <z_impl_k_poll+0x19c>)
   23a82:	483c      	ldr	r0, [pc, #240]	; (23b74 <z_impl_k_poll+0x1a8>)
   23a84:	f002 fbeb 	bl	2625e <assert_print>
   23a88:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a8a:	4838      	ldr	r0, [pc, #224]	; (23b6c <z_impl_k_poll+0x1a0>)
   23a8c:	e7bf      	b.n	23a0e <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   23a8e:	4836      	ldr	r0, [pc, #216]	; (23b68 <z_impl_k_poll+0x19c>)
   23a90:	f7fc fe8e 	bl	207b0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23a94:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   23a98:	b9e4      	cbnz	r4, 23ad4 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   23a9a:	4628      	mov	r0, r5
   23a9c:	4652      	mov	r2, sl
   23a9e:	4649      	mov	r1, r9
   23aa0:	f7ff fe8e 	bl	237c0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23aa4:	4830      	ldr	r0, [pc, #192]	; (23b68 <z_impl_k_poll+0x19c>)
   23aa6:	f7fc fe75 	bl	20794 <z_spin_unlock_valid>
   23aaa:	b958      	cbnz	r0, 23ac4 <z_impl_k_poll+0xf8>
   23aac:	23c2      	movs	r3, #194	; 0xc2
   23aae:	4a2f      	ldr	r2, [pc, #188]	; (23b6c <z_impl_k_poll+0x1a0>)
   23ab0:	4931      	ldr	r1, [pc, #196]	; (23b78 <z_impl_k_poll+0x1ac>)
   23ab2:	4827      	ldr	r0, [pc, #156]	; (23b50 <z_impl_k_poll+0x184>)
   23ab4:	f002 fbd3 	bl	2625e <assert_print>
   23ab8:	492b      	ldr	r1, [pc, #172]	; (23b68 <z_impl_k_poll+0x19c>)
   23aba:	4830      	ldr	r0, [pc, #192]	; (23b7c <z_impl_k_poll+0x1b0>)
   23abc:	f002 fbcf 	bl	2625e <assert_print>
   23ac0:	21c2      	movs	r1, #194	; 0xc2
   23ac2:	e7e2      	b.n	23a8a <z_impl_k_poll+0xbe>
	__asm__ volatile(
   23ac4:	f38a 8811 	msr	BASEPRI, sl
   23ac8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23acc:	4620      	mov	r0, r4
   23ace:	b003      	add	sp, #12
   23ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23ad4:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   23ad8:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23adc:	d10b      	bne.n	23af6 <z_impl_k_poll+0x12a>
   23ade:	4822      	ldr	r0, [pc, #136]	; (23b68 <z_impl_k_poll+0x19c>)
   23ae0:	f7fc fe58 	bl	20794 <z_spin_unlock_valid>
   23ae4:	2800      	cmp	r0, #0
   23ae6:	d0e1      	beq.n	23aac <z_impl_k_poll+0xe0>
   23ae8:	f38a 8811 	msr	BASEPRI, sl
   23aec:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23af0:	f06f 040a 	mvn.w	r4, #10
   23af4:	e7ea      	b.n	23acc <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23af6:	4651      	mov	r1, sl
   23af8:	e9cd 7600 	strd	r7, r6, [sp]
   23afc:	4a20      	ldr	r2, [pc, #128]	; (23b80 <z_impl_k_poll+0x1b4>)
   23afe:	481a      	ldr	r0, [pc, #104]	; (23b68 <z_impl_k_poll+0x19c>)
   23b00:	f7fe fbd2 	bl	222a8 <z_pend_curr>
   23b04:	4604      	mov	r4, r0
	__asm__ volatile(
   23b06:	f04f 0320 	mov.w	r3, #32
   23b0a:	f3ef 8611 	mrs	r6, BASEPRI
   23b0e:	f383 8812 	msr	BASEPRI_MAX, r3
   23b12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b16:	4814      	ldr	r0, [pc, #80]	; (23b68 <z_impl_k_poll+0x19c>)
   23b18:	f7fc fe2e 	bl	20778 <z_spin_lock_valid>
   23b1c:	2800      	cmp	r0, #0
   23b1e:	d0a9      	beq.n	23a74 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   23b20:	4811      	ldr	r0, [pc, #68]	; (23b68 <z_impl_k_poll+0x19c>)
   23b22:	f7fc fe45 	bl	207b0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   23b26:	4628      	mov	r0, r5
   23b28:	4632      	mov	r2, r6
   23b2a:	4649      	mov	r1, r9
   23b2c:	f7ff fe48 	bl	237c0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b30:	480d      	ldr	r0, [pc, #52]	; (23b68 <z_impl_k_poll+0x19c>)
   23b32:	f7fc fe2f 	bl	20794 <z_spin_unlock_valid>
   23b36:	2800      	cmp	r0, #0
   23b38:	d0b8      	beq.n	23aac <z_impl_k_poll+0xe0>
	__asm__ volatile(
   23b3a:	f386 8811 	msr	BASEPRI, r6
   23b3e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   23b42:	e7c3      	b.n	23acc <z_impl_k_poll+0x100>
   23b44:	20022b9c 	.word	0x20022b9c
   23b48:	0003224b 	.word	0x0003224b
   23b4c:	000326c2 	.word	0x000326c2
   23b50:	0002d095 	.word	0x0002d095
   23b54:	00030d1f 	.word	0x00030d1f
   23b58:	00032881 	.word	0x00032881
   23b5c:	00032897 	.word	0x00032897
   23b60:	000328a6 	.word	0x000328a6
   23b64:	000328b6 	.word	0x000328b6
   23b68:	20022bf4 	.word	0x20022bf4
   23b6c:	0002df19 	.word	0x0002df19
   23b70:	0002df72 	.word	0x0002df72
   23b74:	0002df87 	.word	0x0002df87
   23b78:	0002df46 	.word	0x0002df46
   23b7c:	0002df5d 	.word	0x0002df5d
   23b80:	2000873c 	.word	0x2000873c

00023b84 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   23b84:	b570      	push	{r4, r5, r6, lr}
   23b86:	4604      	mov	r4, r0
   23b88:	460d      	mov	r5, r1
	__asm__ volatile(
   23b8a:	f04f 0320 	mov.w	r3, #32
   23b8e:	f3ef 8611 	mrs	r6, BASEPRI
   23b92:	f383 8812 	msr	BASEPRI_MAX, r3
   23b96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b9a:	4820      	ldr	r0, [pc, #128]	; (23c1c <z_impl_k_poll_signal_raise+0x98>)
   23b9c:	f7fc fdec 	bl	20778 <z_spin_lock_valid>
   23ba0:	b968      	cbnz	r0, 23bbe <z_impl_k_poll_signal_raise+0x3a>
   23ba2:	2394      	movs	r3, #148	; 0x94
   23ba4:	4a1e      	ldr	r2, [pc, #120]	; (23c20 <z_impl_k_poll_signal_raise+0x9c>)
   23ba6:	491f      	ldr	r1, [pc, #124]	; (23c24 <z_impl_k_poll_signal_raise+0xa0>)
   23ba8:	481f      	ldr	r0, [pc, #124]	; (23c28 <z_impl_k_poll_signal_raise+0xa4>)
   23baa:	f002 fb58 	bl	2625e <assert_print>
   23bae:	491b      	ldr	r1, [pc, #108]	; (23c1c <z_impl_k_poll_signal_raise+0x98>)
   23bb0:	481e      	ldr	r0, [pc, #120]	; (23c2c <z_impl_k_poll_signal_raise+0xa8>)
   23bb2:	f002 fb54 	bl	2625e <assert_print>
   23bb6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23bb8:	4819      	ldr	r0, [pc, #100]	; (23c20 <z_impl_k_poll_signal_raise+0x9c>)
   23bba:	f002 fb49 	bl	26250 <assert_post_action>
	z_spin_lock_set_owner(l);
   23bbe:	4817      	ldr	r0, [pc, #92]	; (23c1c <z_impl_k_poll_signal_raise+0x98>)
   23bc0:	f7fc fdf6 	bl	207b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   23bc4:	2101      	movs	r1, #1
	return list->head == list;
   23bc6:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   23bc8:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23bca:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   23bcc:	60a1      	str	r1, [r4, #8]
   23bce:	d10f      	bne.n	23bf0 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23bd0:	4812      	ldr	r0, [pc, #72]	; (23c1c <z_impl_k_poll_signal_raise+0x98>)
   23bd2:	f7fc fddf 	bl	20794 <z_spin_unlock_valid>
   23bd6:	b9d8      	cbnz	r0, 23c10 <z_impl_k_poll_signal_raise+0x8c>
   23bd8:	23c2      	movs	r3, #194	; 0xc2
   23bda:	4a11      	ldr	r2, [pc, #68]	; (23c20 <z_impl_k_poll_signal_raise+0x9c>)
   23bdc:	4914      	ldr	r1, [pc, #80]	; (23c30 <z_impl_k_poll_signal_raise+0xac>)
   23bde:	4812      	ldr	r0, [pc, #72]	; (23c28 <z_impl_k_poll_signal_raise+0xa4>)
   23be0:	f002 fb3d 	bl	2625e <assert_print>
   23be4:	490d      	ldr	r1, [pc, #52]	; (23c1c <z_impl_k_poll_signal_raise+0x98>)
   23be6:	4813      	ldr	r0, [pc, #76]	; (23c34 <z_impl_k_poll_signal_raise+0xb0>)
   23be8:	f002 fb39 	bl	2625e <assert_print>
   23bec:	21c2      	movs	r1, #194	; 0xc2
   23bee:	e7e3      	b.n	23bb8 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   23bf0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23bf4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23bf6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23bf8:	2300      	movs	r3, #0
	node->prev = NULL;
   23bfa:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23bfe:	f007 f80b 	bl	2ac18 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   23c02:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23c04:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   23c06:	4805      	ldr	r0, [pc, #20]	; (23c1c <z_impl_k_poll_signal_raise+0x98>)
   23c08:	f7fe f880 	bl	21d0c <z_reschedule>
	return rc;
}
   23c0c:	4620      	mov	r0, r4
   23c0e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   23c10:	f386 8811 	msr	BASEPRI, r6
   23c14:	f3bf 8f6f 	isb	sy
		return 0;
   23c18:	2400      	movs	r4, #0
   23c1a:	e7f7      	b.n	23c0c <z_impl_k_poll_signal_raise+0x88>
   23c1c:	20022bf4 	.word	0x20022bf4
   23c20:	0002df19 	.word	0x0002df19
   23c24:	0002df72 	.word	0x0002df72
   23c28:	0002d095 	.word	0x0002d095
   23c2c:	0002df87 	.word	0x0002df87
   23c30:	0002df46 	.word	0x0002df46
   23c34:	0002df5d 	.word	0x0002df5d

00023c38 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   23c38:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   23c3a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   23c3e:	4606      	mov	r6, r0
   23c40:	460d      	mov	r5, r1
   23c42:	d220      	bcs.n	23c86 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   23c44:	f04f 0800 	mov.w	r8, #0
   23c48:	f04f 0900 	mov.w	r9, #0
   23c4c:	f041 0104 	orr.w	r1, r1, #4
   23c50:	e9cd 8900 	strd	r8, r9, [sp]
   23c54:	f7fc fa8c 	bl	20170 <k_heap_aligned_alloc>
	if (mem == NULL) {
   23c58:	4604      	mov	r4, r0
   23c5a:	b1a0      	cbz	r0, 23c86 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   23c5c:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   23c60:	b195      	cbz	r5, 23c88 <z_heap_aligned_alloc+0x50>
   23c62:	1e6b      	subs	r3, r5, #1
   23c64:	421c      	tst	r4, r3
   23c66:	d00f      	beq.n	23c88 <z_heap_aligned_alloc+0x50>
   23c68:	2325      	movs	r3, #37	; 0x25
   23c6a:	4a09      	ldr	r2, [pc, #36]	; (23c90 <z_heap_aligned_alloc+0x58>)
   23c6c:	4909      	ldr	r1, [pc, #36]	; (23c94 <z_heap_aligned_alloc+0x5c>)
   23c6e:	480a      	ldr	r0, [pc, #40]	; (23c98 <z_heap_aligned_alloc+0x60>)
   23c70:	f002 faf5 	bl	2625e <assert_print>
   23c74:	4621      	mov	r1, r4
   23c76:	4809      	ldr	r0, [pc, #36]	; (23c9c <z_heap_aligned_alloc+0x64>)
   23c78:	462a      	mov	r2, r5
   23c7a:	f002 faf0 	bl	2625e <assert_print>
   23c7e:	2125      	movs	r1, #37	; 0x25
   23c80:	4803      	ldr	r0, [pc, #12]	; (23c90 <z_heap_aligned_alloc+0x58>)
   23c82:	f002 fae5 	bl	26250 <assert_post_action>
		return NULL;
   23c86:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   23c88:	4620      	mov	r0, r4
   23c8a:	b002      	add	sp, #8
   23c8c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   23c90:	000328c3 	.word	0x000328c3
   23c94:	000328e7 	.word	0x000328e7
   23c98:	0002d095 	.word	0x0002d095
   23c9c:	00032919 	.word	0x00032919

00023ca0 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   23ca0:	2803      	cmp	r0, #3
{
   23ca2:	460a      	mov	r2, r1
   23ca4:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   23ca6:	d901      	bls.n	23cac <k_aligned_alloc+0xc>
   23ca8:	0783      	lsls	r3, r0, #30
   23caa:	d00c      	beq.n	23cc6 <k_aligned_alloc+0x26>
   23cac:	4910      	ldr	r1, [pc, #64]	; (23cf0 <k_aligned_alloc+0x50>)
   23cae:	2342      	movs	r3, #66	; 0x42
   23cb0:	4a10      	ldr	r2, [pc, #64]	; (23cf4 <k_aligned_alloc+0x54>)
   23cb2:	4811      	ldr	r0, [pc, #68]	; (23cf8 <k_aligned_alloc+0x58>)
   23cb4:	f002 fad3 	bl	2625e <assert_print>
   23cb8:	4810      	ldr	r0, [pc, #64]	; (23cfc <k_aligned_alloc+0x5c>)
   23cba:	f002 fad0 	bl	2625e <assert_print>
   23cbe:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   23cc0:	480c      	ldr	r0, [pc, #48]	; (23cf4 <k_aligned_alloc+0x54>)
   23cc2:	f002 fac5 	bl	26250 <assert_post_action>
   23cc6:	1e43      	subs	r3, r0, #1
   23cc8:	4203      	tst	r3, r0
   23cca:	d00a      	beq.n	23ce2 <k_aligned_alloc+0x42>
   23ccc:	490c      	ldr	r1, [pc, #48]	; (23d00 <k_aligned_alloc+0x60>)
   23cce:	2346      	movs	r3, #70	; 0x46
   23cd0:	4a08      	ldr	r2, [pc, #32]	; (23cf4 <k_aligned_alloc+0x54>)
   23cd2:	4809      	ldr	r0, [pc, #36]	; (23cf8 <k_aligned_alloc+0x58>)
   23cd4:	f002 fac3 	bl	2625e <assert_print>
   23cd8:	480a      	ldr	r0, [pc, #40]	; (23d04 <k_aligned_alloc+0x64>)
   23cda:	f002 fac0 	bl	2625e <assert_print>
   23cde:	2146      	movs	r1, #70	; 0x46
   23ce0:	e7ee      	b.n	23cc0 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   23ce2:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   23ce4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   23ce8:	4807      	ldr	r0, [pc, #28]	; (23d08 <k_aligned_alloc+0x68>)
   23cea:	f7ff bfa5 	b.w	23c38 <z_heap_aligned_alloc>
   23cee:	bf00      	nop
   23cf0:	00032941 	.word	0x00032941
   23cf4:	000328c3 	.word	0x000328c3
   23cf8:	0002d095 	.word	0x0002d095
   23cfc:	0003297e 	.word	0x0003297e
   23d00:	0002dd83 	.word	0x0002dd83
   23d04:	0002dd9e 	.word	0x0002dd9e
   23d08:	20008a68 	.word	0x20008a68

00023d0c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   23d0c:	4b01      	ldr	r3, [pc, #4]	; (23d14 <k_thread_system_pool_assign+0x8>)
   23d0e:	6743      	str	r3, [r0, #116]	; 0x74
}
   23d10:	4770      	bx	lr
   23d12:	bf00      	nop
   23d14:	20008a68 	.word	0x20008a68

00023d18 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   23d18:	b538      	push	{r3, r4, r5, lr}
   23d1a:	4604      	mov	r4, r0
   23d1c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   23d1e:	f006 fdff 	bl	2a920 <k_is_in_isr>
   23d22:	b920      	cbnz	r0, 23d2e <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   23d24:	4b06      	ldr	r3, [pc, #24]	; (23d40 <z_thread_aligned_alloc+0x28>)
   23d26:	689b      	ldr	r3, [r3, #8]
   23d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   23d2a:	b90b      	cbnz	r3, 23d30 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   23d2c:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   23d2e:	4b05      	ldr	r3, [pc, #20]	; (23d44 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   23d30:	462a      	mov	r2, r5
   23d32:	4621      	mov	r1, r4
   23d34:	4618      	mov	r0, r3
}
   23d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   23d3a:	f7ff bf7d 	b.w	23c38 <z_heap_aligned_alloc>
   23d3e:	bf00      	nop
   23d40:	20022b9c 	.word	0x20022b9c
   23d44:	20008a68 	.word	0x20008a68

00023d48 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   23d48:	4801      	ldr	r0, [pc, #4]	; (23d50 <boot_banner+0x8>)
   23d4a:	f002 b8c6 	b.w	25eda <printk>
   23d4e:	bf00      	nop
   23d50:	000329ab 	.word	0x000329ab

00023d54 <log>:
   23d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d56:	4604      	mov	r4, r0
   23d58:	460d      	mov	r5, r1
   23d5a:	f7e5 fe35 	bl	99c8 <__ieee754_log>
   23d5e:	4b17      	ldr	r3, [pc, #92]	; (23dbc <log+0x68>)
   23d60:	4606      	mov	r6, r0
   23d62:	460f      	mov	r7, r1
   23d64:	f993 3000 	ldrsb.w	r3, [r3]
   23d68:	3301      	adds	r3, #1
   23d6a:	d01a      	beq.n	23da2 <log+0x4e>
   23d6c:	4622      	mov	r2, r4
   23d6e:	462b      	mov	r3, r5
   23d70:	4620      	mov	r0, r4
   23d72:	4629      	mov	r1, r5
   23d74:	f7e5 f99c 	bl	90b0 <__aeabi_dcmpun>
   23d78:	b998      	cbnz	r0, 23da2 <log+0x4e>
   23d7a:	2200      	movs	r2, #0
   23d7c:	2300      	movs	r3, #0
   23d7e:	4620      	mov	r0, r4
   23d80:	4629      	mov	r1, r5
   23d82:	f7e5 f96b 	bl	905c <__aeabi_dcmpgt>
   23d86:	b960      	cbnz	r0, 23da2 <log+0x4e>
   23d88:	2200      	movs	r2, #0
   23d8a:	2300      	movs	r3, #0
   23d8c:	4620      	mov	r0, r4
   23d8e:	4629      	mov	r1, r5
   23d90:	f7e5 f93c 	bl	900c <__aeabi_dcmpeq>
   23d94:	b140      	cbz	r0, 23da8 <log+0x54>
   23d96:	f003 fb17 	bl	273c8 <__errno>
   23d9a:	2600      	movs	r6, #0
   23d9c:	2322      	movs	r3, #34	; 0x22
   23d9e:	4f08      	ldr	r7, [pc, #32]	; (23dc0 <log+0x6c>)
   23da0:	6003      	str	r3, [r0, #0]
   23da2:	4630      	mov	r0, r6
   23da4:	4639      	mov	r1, r7
   23da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23da8:	f003 fb0e 	bl	273c8 <__errno>
   23dac:	2321      	movs	r3, #33	; 0x21
   23dae:	6003      	str	r3, [r0, #0]
   23db0:	4804      	ldr	r0, [pc, #16]	; (23dc4 <log+0x70>)
   23db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23db6:	f000 b807 	b.w	23dc8 <nan>
   23dba:	bf00      	nop
   23dbc:	200089e7 	.word	0x200089e7
   23dc0:	fff00000 	.word	0xfff00000
   23dc4:	00030d21 	.word	0x00030d21

00023dc8 <nan>:
   23dc8:	2000      	movs	r0, #0
   23dca:	4901      	ldr	r1, [pc, #4]	; (23dd0 <nan+0x8>)
   23dcc:	4770      	bx	lr
   23dce:	bf00      	nop
   23dd0:	7ff80000 	.word	0x7ff80000

00023dd4 <malloc>:
   23dd4:	4b02      	ldr	r3, [pc, #8]	; (23de0 <malloc+0xc>)
   23dd6:	4601      	mov	r1, r0
   23dd8:	6818      	ldr	r0, [r3, #0]
   23dda:	f000 b84d 	b.w	23e78 <_malloc_r>
   23dde:	bf00      	nop
   23de0:	20008744 	.word	0x20008744

00023de4 <_free_r>:
   23de4:	b538      	push	{r3, r4, r5, lr}
   23de6:	4605      	mov	r5, r0
   23de8:	2900      	cmp	r1, #0
   23dea:	d041      	beq.n	23e70 <_free_r+0x8c>
   23dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
   23df0:	1f0c      	subs	r4, r1, #4
   23df2:	2b00      	cmp	r3, #0
   23df4:	bfb8      	it	lt
   23df6:	18e4      	addlt	r4, r4, r3
   23df8:	f000 ff88 	bl	24d0c <__malloc_lock>
   23dfc:	4a1d      	ldr	r2, [pc, #116]	; (23e74 <_free_r+0x90>)
   23dfe:	6813      	ldr	r3, [r2, #0]
   23e00:	b933      	cbnz	r3, 23e10 <_free_r+0x2c>
   23e02:	6063      	str	r3, [r4, #4]
   23e04:	6014      	str	r4, [r2, #0]
   23e06:	4628      	mov	r0, r5
   23e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23e0c:	f000 bf84 	b.w	24d18 <__malloc_unlock>
   23e10:	42a3      	cmp	r3, r4
   23e12:	d908      	bls.n	23e26 <_free_r+0x42>
   23e14:	6820      	ldr	r0, [r4, #0]
   23e16:	1821      	adds	r1, r4, r0
   23e18:	428b      	cmp	r3, r1
   23e1a:	bf01      	itttt	eq
   23e1c:	6819      	ldreq	r1, [r3, #0]
   23e1e:	685b      	ldreq	r3, [r3, #4]
   23e20:	1809      	addeq	r1, r1, r0
   23e22:	6021      	streq	r1, [r4, #0]
   23e24:	e7ed      	b.n	23e02 <_free_r+0x1e>
   23e26:	461a      	mov	r2, r3
   23e28:	685b      	ldr	r3, [r3, #4]
   23e2a:	b10b      	cbz	r3, 23e30 <_free_r+0x4c>
   23e2c:	42a3      	cmp	r3, r4
   23e2e:	d9fa      	bls.n	23e26 <_free_r+0x42>
   23e30:	6811      	ldr	r1, [r2, #0]
   23e32:	1850      	adds	r0, r2, r1
   23e34:	42a0      	cmp	r0, r4
   23e36:	d10b      	bne.n	23e50 <_free_r+0x6c>
   23e38:	6820      	ldr	r0, [r4, #0]
   23e3a:	4401      	add	r1, r0
   23e3c:	1850      	adds	r0, r2, r1
   23e3e:	6011      	str	r1, [r2, #0]
   23e40:	4283      	cmp	r3, r0
   23e42:	d1e0      	bne.n	23e06 <_free_r+0x22>
   23e44:	6818      	ldr	r0, [r3, #0]
   23e46:	685b      	ldr	r3, [r3, #4]
   23e48:	4408      	add	r0, r1
   23e4a:	6053      	str	r3, [r2, #4]
   23e4c:	6010      	str	r0, [r2, #0]
   23e4e:	e7da      	b.n	23e06 <_free_r+0x22>
   23e50:	d902      	bls.n	23e58 <_free_r+0x74>
   23e52:	230c      	movs	r3, #12
   23e54:	602b      	str	r3, [r5, #0]
   23e56:	e7d6      	b.n	23e06 <_free_r+0x22>
   23e58:	6820      	ldr	r0, [r4, #0]
   23e5a:	1821      	adds	r1, r4, r0
   23e5c:	428b      	cmp	r3, r1
   23e5e:	bf02      	ittt	eq
   23e60:	6819      	ldreq	r1, [r3, #0]
   23e62:	685b      	ldreq	r3, [r3, #4]
   23e64:	1809      	addeq	r1, r1, r0
   23e66:	6063      	str	r3, [r4, #4]
   23e68:	bf08      	it	eq
   23e6a:	6021      	streq	r1, [r4, #0]
   23e6c:	6054      	str	r4, [r2, #4]
   23e6e:	e7ca      	b.n	23e06 <_free_r+0x22>
   23e70:	bd38      	pop	{r3, r4, r5, pc}
   23e72:	bf00      	nop
   23e74:	20022bfc 	.word	0x20022bfc

00023e78 <_malloc_r>:
   23e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23e7a:	1ccd      	adds	r5, r1, #3
   23e7c:	4606      	mov	r6, r0
   23e7e:	f025 0503 	bic.w	r5, r5, #3
   23e82:	3508      	adds	r5, #8
   23e84:	2d0c      	cmp	r5, #12
   23e86:	bf38      	it	cc
   23e88:	250c      	movcc	r5, #12
   23e8a:	2d00      	cmp	r5, #0
   23e8c:	db01      	blt.n	23e92 <_malloc_r+0x1a>
   23e8e:	42a9      	cmp	r1, r5
   23e90:	d903      	bls.n	23e9a <_malloc_r+0x22>
   23e92:	230c      	movs	r3, #12
   23e94:	6033      	str	r3, [r6, #0]
   23e96:	2000      	movs	r0, #0
   23e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23e9a:	f000 ff37 	bl	24d0c <__malloc_lock>
   23e9e:	4921      	ldr	r1, [pc, #132]	; (23f24 <_malloc_r+0xac>)
   23ea0:	680a      	ldr	r2, [r1, #0]
   23ea2:	4614      	mov	r4, r2
   23ea4:	b99c      	cbnz	r4, 23ece <_malloc_r+0x56>
   23ea6:	4f20      	ldr	r7, [pc, #128]	; (23f28 <_malloc_r+0xb0>)
   23ea8:	683b      	ldr	r3, [r7, #0]
   23eaa:	b923      	cbnz	r3, 23eb6 <_malloc_r+0x3e>
   23eac:	4621      	mov	r1, r4
   23eae:	4630      	mov	r0, r6
   23eb0:	f000 fbb8 	bl	24624 <_sbrk_r>
   23eb4:	6038      	str	r0, [r7, #0]
   23eb6:	4629      	mov	r1, r5
   23eb8:	4630      	mov	r0, r6
   23eba:	f000 fbb3 	bl	24624 <_sbrk_r>
   23ebe:	1c43      	adds	r3, r0, #1
   23ec0:	d123      	bne.n	23f0a <_malloc_r+0x92>
   23ec2:	230c      	movs	r3, #12
   23ec4:	4630      	mov	r0, r6
   23ec6:	6033      	str	r3, [r6, #0]
   23ec8:	f000 ff26 	bl	24d18 <__malloc_unlock>
   23ecc:	e7e3      	b.n	23e96 <_malloc_r+0x1e>
   23ece:	6823      	ldr	r3, [r4, #0]
   23ed0:	1b5b      	subs	r3, r3, r5
   23ed2:	d417      	bmi.n	23f04 <_malloc_r+0x8c>
   23ed4:	2b0b      	cmp	r3, #11
   23ed6:	d903      	bls.n	23ee0 <_malloc_r+0x68>
   23ed8:	6023      	str	r3, [r4, #0]
   23eda:	441c      	add	r4, r3
   23edc:	6025      	str	r5, [r4, #0]
   23ede:	e004      	b.n	23eea <_malloc_r+0x72>
   23ee0:	6863      	ldr	r3, [r4, #4]
   23ee2:	42a2      	cmp	r2, r4
   23ee4:	bf0c      	ite	eq
   23ee6:	600b      	streq	r3, [r1, #0]
   23ee8:	6053      	strne	r3, [r2, #4]
   23eea:	4630      	mov	r0, r6
   23eec:	f000 ff14 	bl	24d18 <__malloc_unlock>
   23ef0:	f104 000b 	add.w	r0, r4, #11
   23ef4:	1d23      	adds	r3, r4, #4
   23ef6:	f020 0007 	bic.w	r0, r0, #7
   23efa:	1ac2      	subs	r2, r0, r3
   23efc:	bf1c      	itt	ne
   23efe:	1a1b      	subne	r3, r3, r0
   23f00:	50a3      	strne	r3, [r4, r2]
   23f02:	e7c9      	b.n	23e98 <_malloc_r+0x20>
   23f04:	4622      	mov	r2, r4
   23f06:	6864      	ldr	r4, [r4, #4]
   23f08:	e7cc      	b.n	23ea4 <_malloc_r+0x2c>
   23f0a:	1cc4      	adds	r4, r0, #3
   23f0c:	f024 0403 	bic.w	r4, r4, #3
   23f10:	42a0      	cmp	r0, r4
   23f12:	d0e3      	beq.n	23edc <_malloc_r+0x64>
   23f14:	1a21      	subs	r1, r4, r0
   23f16:	4630      	mov	r0, r6
   23f18:	f000 fb84 	bl	24624 <_sbrk_r>
   23f1c:	3001      	adds	r0, #1
   23f1e:	d1dd      	bne.n	23edc <_malloc_r+0x64>
   23f20:	e7cf      	b.n	23ec2 <_malloc_r+0x4a>
   23f22:	bf00      	nop
   23f24:	20022bfc 	.word	0x20022bfc
   23f28:	20022bf8 	.word	0x20022bf8

00023f2c <_printf_float>:
   23f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f30:	b091      	sub	sp, #68	; 0x44
   23f32:	460c      	mov	r4, r1
   23f34:	4616      	mov	r6, r2
   23f36:	461f      	mov	r7, r3
   23f38:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   23f3c:	4605      	mov	r5, r0
   23f3e:	f000 fee1 	bl	24d04 <_localeconv_r>
   23f42:	6803      	ldr	r3, [r0, #0]
   23f44:	4618      	mov	r0, r3
   23f46:	9308      	str	r3, [sp, #32]
   23f48:	f7e5 fa5f 	bl	940a <strlen>
   23f4c:	2300      	movs	r3, #0
   23f4e:	9009      	str	r0, [sp, #36]	; 0x24
   23f50:	930e      	str	r3, [sp, #56]	; 0x38
   23f52:	f8d8 3000 	ldr.w	r3, [r8]
   23f56:	f894 a018 	ldrb.w	sl, [r4, #24]
   23f5a:	3307      	adds	r3, #7
   23f5c:	f8d4 b000 	ldr.w	fp, [r4]
   23f60:	f023 0307 	bic.w	r3, r3, #7
   23f64:	f103 0208 	add.w	r2, r3, #8
   23f68:	f8c8 2000 	str.w	r2, [r8]
   23f6c:	f04f 32ff 	mov.w	r2, #4294967295
   23f70:	e9d3 8900 	ldrd	r8, r9, [r3]
   23f74:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   23f78:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   23f7c:	930b      	str	r3, [sp, #44]	; 0x2c
   23f7e:	4b9d      	ldr	r3, [pc, #628]	; (241f4 <_printf_float+0x2c8>)
   23f80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   23f84:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   23f88:	f7e5 f892 	bl	90b0 <__aeabi_dcmpun>
   23f8c:	bb70      	cbnz	r0, 23fec <_printf_float+0xc0>
   23f8e:	f04f 32ff 	mov.w	r2, #4294967295
   23f92:	4b98      	ldr	r3, [pc, #608]	; (241f4 <_printf_float+0x2c8>)
   23f94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   23f98:	f7e5 f84c 	bl	9034 <__aeabi_dcmple>
   23f9c:	bb30      	cbnz	r0, 23fec <_printf_float+0xc0>
   23f9e:	2200      	movs	r2, #0
   23fa0:	2300      	movs	r3, #0
   23fa2:	4640      	mov	r0, r8
   23fa4:	4649      	mov	r1, r9
   23fa6:	f7e5 f83b 	bl	9020 <__aeabi_dcmplt>
   23faa:	b110      	cbz	r0, 23fb2 <_printf_float+0x86>
   23fac:	232d      	movs	r3, #45	; 0x2d
   23fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23fb2:	4a91      	ldr	r2, [pc, #580]	; (241f8 <_printf_float+0x2cc>)
   23fb4:	4b91      	ldr	r3, [pc, #580]	; (241fc <_printf_float+0x2d0>)
   23fb6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   23fba:	bf94      	ite	ls
   23fbc:	4690      	movls	r8, r2
   23fbe:	4698      	movhi	r8, r3
   23fc0:	2303      	movs	r3, #3
   23fc2:	f04f 0900 	mov.w	r9, #0
   23fc6:	6123      	str	r3, [r4, #16]
   23fc8:	f02b 0304 	bic.w	r3, fp, #4
   23fcc:	6023      	str	r3, [r4, #0]
   23fce:	4633      	mov	r3, r6
   23fd0:	aa0f      	add	r2, sp, #60	; 0x3c
   23fd2:	4621      	mov	r1, r4
   23fd4:	4628      	mov	r0, r5
   23fd6:	9700      	str	r7, [sp, #0]
   23fd8:	f006 ff9a 	bl	2af10 <_printf_common>
   23fdc:	3001      	adds	r0, #1
   23fde:	f040 8099 	bne.w	24114 <_printf_float+0x1e8>
   23fe2:	f04f 30ff 	mov.w	r0, #4294967295
   23fe6:	b011      	add	sp, #68	; 0x44
   23fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fec:	4642      	mov	r2, r8
   23fee:	464b      	mov	r3, r9
   23ff0:	4640      	mov	r0, r8
   23ff2:	4649      	mov	r1, r9
   23ff4:	f7e5 f85c 	bl	90b0 <__aeabi_dcmpun>
   23ff8:	b140      	cbz	r0, 2400c <_printf_float+0xe0>
   23ffa:	464b      	mov	r3, r9
   23ffc:	4a80      	ldr	r2, [pc, #512]	; (24200 <_printf_float+0x2d4>)
   23ffe:	2b00      	cmp	r3, #0
   24000:	bfbc      	itt	lt
   24002:	232d      	movlt	r3, #45	; 0x2d
   24004:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   24008:	4b7e      	ldr	r3, [pc, #504]	; (24204 <_printf_float+0x2d8>)
   2400a:	e7d4      	b.n	23fb6 <_printf_float+0x8a>
   2400c:	6863      	ldr	r3, [r4, #4]
   2400e:	1c5a      	adds	r2, r3, #1
   24010:	d129      	bne.n	24066 <_printf_float+0x13a>
   24012:	2306      	movs	r3, #6
   24014:	6063      	str	r3, [r4, #4]
   24016:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2401a:	2200      	movs	r2, #0
   2401c:	4628      	mov	r0, r5
   2401e:	6023      	str	r3, [r4, #0]
   24020:	9206      	str	r2, [sp, #24]
   24022:	aa0e      	add	r2, sp, #56	; 0x38
   24024:	e9cd a204 	strd	sl, r2, [sp, #16]
   24028:	aa0d      	add	r2, sp, #52	; 0x34
   2402a:	9203      	str	r2, [sp, #12]
   2402c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   24030:	e9cd 3201 	strd	r3, r2, [sp, #4]
   24034:	6863      	ldr	r3, [r4, #4]
   24036:	4642      	mov	r2, r8
   24038:	9300      	str	r3, [sp, #0]
   2403a:	464b      	mov	r3, r9
   2403c:	f006 fec8 	bl	2add0 <__cvt>
   24040:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   24044:	4680      	mov	r8, r0
   24046:	990d      	ldr	r1, [sp, #52]	; 0x34
   24048:	d115      	bne.n	24076 <_printf_float+0x14a>
   2404a:	1ccb      	adds	r3, r1, #3
   2404c:	db3b      	blt.n	240c6 <_printf_float+0x19a>
   2404e:	6863      	ldr	r3, [r4, #4]
   24050:	4299      	cmp	r1, r3
   24052:	dc38      	bgt.n	240c6 <_printf_float+0x19a>
   24054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24056:	4299      	cmp	r1, r3
   24058:	db55      	blt.n	24106 <_printf_float+0x1da>
   2405a:	6823      	ldr	r3, [r4, #0]
   2405c:	6121      	str	r1, [r4, #16]
   2405e:	07d8      	lsls	r0, r3, #31
   24060:	d545      	bpl.n	240ee <_printf_float+0x1c2>
   24062:	1c4b      	adds	r3, r1, #1
   24064:	e042      	b.n	240ec <_printf_float+0x1c0>
   24066:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   2406a:	2a47      	cmp	r2, #71	; 0x47
   2406c:	d1d3      	bne.n	24016 <_printf_float+0xea>
   2406e:	2b00      	cmp	r3, #0
   24070:	d1d1      	bne.n	24016 <_printf_float+0xea>
   24072:	2301      	movs	r3, #1
   24074:	e7ce      	b.n	24014 <_printf_float+0xe8>
   24076:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2407a:	d107      	bne.n	2408c <_printf_float+0x160>
   2407c:	1cc8      	adds	r0, r1, #3
   2407e:	db25      	blt.n	240cc <_printf_float+0x1a0>
   24080:	6863      	ldr	r3, [r4, #4]
   24082:	428b      	cmp	r3, r1
   24084:	db22      	blt.n	240cc <_printf_float+0x1a0>
   24086:	f04f 0a67 	mov.w	sl, #103	; 0x67
   2408a:	e7e3      	b.n	24054 <_printf_float+0x128>
   2408c:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   24090:	d81f      	bhi.n	240d2 <_printf_float+0x1a6>
   24092:	3901      	subs	r1, #1
   24094:	4652      	mov	r2, sl
   24096:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2409a:	910d      	str	r1, [sp, #52]	; 0x34
   2409c:	f006 feff 	bl	2ae9e <__exponent>
   240a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   240a2:	4681      	mov	r9, r0
   240a4:	1813      	adds	r3, r2, r0
   240a6:	2a01      	cmp	r2, #1
   240a8:	6123      	str	r3, [r4, #16]
   240aa:	dc02      	bgt.n	240b2 <_printf_float+0x186>
   240ac:	6822      	ldr	r2, [r4, #0]
   240ae:	07d2      	lsls	r2, r2, #31
   240b0:	d501      	bpl.n	240b6 <_printf_float+0x18a>
   240b2:	3301      	adds	r3, #1
   240b4:	6123      	str	r3, [r4, #16]
   240b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   240ba:	2b00      	cmp	r3, #0
   240bc:	d087      	beq.n	23fce <_printf_float+0xa2>
   240be:	232d      	movs	r3, #45	; 0x2d
   240c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   240c4:	e783      	b.n	23fce <_printf_float+0xa2>
   240c6:	f04f 0a65 	mov.w	sl, #101	; 0x65
   240ca:	e7e2      	b.n	24092 <_printf_float+0x166>
   240cc:	f04f 0a45 	mov.w	sl, #69	; 0x45
   240d0:	e7df      	b.n	24092 <_printf_float+0x166>
   240d2:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   240d6:	d1bd      	bne.n	24054 <_printf_float+0x128>
   240d8:	2900      	cmp	r1, #0
   240da:	6863      	ldr	r3, [r4, #4]
   240dc:	dd0b      	ble.n	240f6 <_printf_float+0x1ca>
   240de:	6121      	str	r1, [r4, #16]
   240e0:	b913      	cbnz	r3, 240e8 <_printf_float+0x1bc>
   240e2:	6822      	ldr	r2, [r4, #0]
   240e4:	07d0      	lsls	r0, r2, #31
   240e6:	d502      	bpl.n	240ee <_printf_float+0x1c2>
   240e8:	3301      	adds	r3, #1
   240ea:	440b      	add	r3, r1
   240ec:	6123      	str	r3, [r4, #16]
   240ee:	f04f 0900 	mov.w	r9, #0
   240f2:	65a1      	str	r1, [r4, #88]	; 0x58
   240f4:	e7df      	b.n	240b6 <_printf_float+0x18a>
   240f6:	b913      	cbnz	r3, 240fe <_printf_float+0x1d2>
   240f8:	6822      	ldr	r2, [r4, #0]
   240fa:	07d2      	lsls	r2, r2, #31
   240fc:	d501      	bpl.n	24102 <_printf_float+0x1d6>
   240fe:	3302      	adds	r3, #2
   24100:	e7f4      	b.n	240ec <_printf_float+0x1c0>
   24102:	2301      	movs	r3, #1
   24104:	e7f2      	b.n	240ec <_printf_float+0x1c0>
   24106:	2900      	cmp	r1, #0
   24108:	bfd4      	ite	le
   2410a:	f1c1 0202 	rsble	r2, r1, #2
   2410e:	2201      	movgt	r2, #1
   24110:	4413      	add	r3, r2
   24112:	e7eb      	b.n	240ec <_printf_float+0x1c0>
   24114:	6823      	ldr	r3, [r4, #0]
   24116:	055a      	lsls	r2, r3, #21
   24118:	d407      	bmi.n	2412a <_printf_float+0x1fe>
   2411a:	6923      	ldr	r3, [r4, #16]
   2411c:	4642      	mov	r2, r8
   2411e:	4631      	mov	r1, r6
   24120:	4628      	mov	r0, r5
   24122:	47b8      	blx	r7
   24124:	3001      	adds	r0, #1
   24126:	d12b      	bne.n	24180 <_printf_float+0x254>
   24128:	e75b      	b.n	23fe2 <_printf_float+0xb6>
   2412a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2412e:	f240 80dc 	bls.w	242ea <_printf_float+0x3be>
   24132:	2200      	movs	r2, #0
   24134:	2300      	movs	r3, #0
   24136:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2413a:	f7e4 ff67 	bl	900c <__aeabi_dcmpeq>
   2413e:	2800      	cmp	r0, #0
   24140:	d033      	beq.n	241aa <_printf_float+0x27e>
   24142:	2301      	movs	r3, #1
   24144:	4a30      	ldr	r2, [pc, #192]	; (24208 <_printf_float+0x2dc>)
   24146:	4631      	mov	r1, r6
   24148:	4628      	mov	r0, r5
   2414a:	47b8      	blx	r7
   2414c:	3001      	adds	r0, #1
   2414e:	f43f af48 	beq.w	23fe2 <_printf_float+0xb6>
   24152:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   24156:	4543      	cmp	r3, r8
   24158:	db02      	blt.n	24160 <_printf_float+0x234>
   2415a:	6823      	ldr	r3, [r4, #0]
   2415c:	07d8      	lsls	r0, r3, #31
   2415e:	d50f      	bpl.n	24180 <_printf_float+0x254>
   24160:	4631      	mov	r1, r6
   24162:	4628      	mov	r0, r5
   24164:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   24168:	47b8      	blx	r7
   2416a:	3001      	adds	r0, #1
   2416c:	f43f af39 	beq.w	23fe2 <_printf_float+0xb6>
   24170:	f04f 0900 	mov.w	r9, #0
   24174:	f108 38ff 	add.w	r8, r8, #4294967295
   24178:	f104 0a1a 	add.w	sl, r4, #26
   2417c:	45c8      	cmp	r8, r9
   2417e:	dc09      	bgt.n	24194 <_printf_float+0x268>
   24180:	6823      	ldr	r3, [r4, #0]
   24182:	079b      	lsls	r3, r3, #30
   24184:	f100 8102 	bmi.w	2438c <_printf_float+0x460>
   24188:	68e0      	ldr	r0, [r4, #12]
   2418a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2418c:	4298      	cmp	r0, r3
   2418e:	bfb8      	it	lt
   24190:	4618      	movlt	r0, r3
   24192:	e728      	b.n	23fe6 <_printf_float+0xba>
   24194:	2301      	movs	r3, #1
   24196:	4652      	mov	r2, sl
   24198:	4631      	mov	r1, r6
   2419a:	4628      	mov	r0, r5
   2419c:	47b8      	blx	r7
   2419e:	3001      	adds	r0, #1
   241a0:	f43f af1f 	beq.w	23fe2 <_printf_float+0xb6>
   241a4:	f109 0901 	add.w	r9, r9, #1
   241a8:	e7e8      	b.n	2417c <_printf_float+0x250>
   241aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   241ac:	2b00      	cmp	r3, #0
   241ae:	dc38      	bgt.n	24222 <_printf_float+0x2f6>
   241b0:	2301      	movs	r3, #1
   241b2:	4a15      	ldr	r2, [pc, #84]	; (24208 <_printf_float+0x2dc>)
   241b4:	4631      	mov	r1, r6
   241b6:	4628      	mov	r0, r5
   241b8:	47b8      	blx	r7
   241ba:	3001      	adds	r0, #1
   241bc:	f43f af11 	beq.w	23fe2 <_printf_float+0xb6>
   241c0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   241c4:	ea59 0303 	orrs.w	r3, r9, r3
   241c8:	d102      	bne.n	241d0 <_printf_float+0x2a4>
   241ca:	6823      	ldr	r3, [r4, #0]
   241cc:	07d9      	lsls	r1, r3, #31
   241ce:	d5d7      	bpl.n	24180 <_printf_float+0x254>
   241d0:	4631      	mov	r1, r6
   241d2:	4628      	mov	r0, r5
   241d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   241d8:	47b8      	blx	r7
   241da:	3001      	adds	r0, #1
   241dc:	f43f af01 	beq.w	23fe2 <_printf_float+0xb6>
   241e0:	f04f 0a00 	mov.w	sl, #0
   241e4:	f104 0b1a 	add.w	fp, r4, #26
   241e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   241ea:	425b      	negs	r3, r3
   241ec:	4553      	cmp	r3, sl
   241ee:	dc0d      	bgt.n	2420c <_printf_float+0x2e0>
   241f0:	464b      	mov	r3, r9
   241f2:	e793      	b.n	2411c <_printf_float+0x1f0>
   241f4:	7fefffff 	.word	0x7fefffff
   241f8:	00032ade 	.word	0x00032ade
   241fc:	0002e37b 	.word	0x0002e37b
   24200:	00032ae2 	.word	0x00032ae2
   24204:	00032ae6 	.word	0x00032ae6
   24208:	0003297c 	.word	0x0003297c
   2420c:	2301      	movs	r3, #1
   2420e:	465a      	mov	r2, fp
   24210:	4631      	mov	r1, r6
   24212:	4628      	mov	r0, r5
   24214:	47b8      	blx	r7
   24216:	3001      	adds	r0, #1
   24218:	f43f aee3 	beq.w	23fe2 <_printf_float+0xb6>
   2421c:	f10a 0a01 	add.w	sl, sl, #1
   24220:	e7e2      	b.n	241e8 <_printf_float+0x2bc>
   24222:	6da3      	ldr	r3, [r4, #88]	; 0x58
   24224:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   24228:	4553      	cmp	r3, sl
   2422a:	bfa8      	it	ge
   2422c:	4653      	movge	r3, sl
   2422e:	2b00      	cmp	r3, #0
   24230:	4699      	mov	r9, r3
   24232:	dc36      	bgt.n	242a2 <_printf_float+0x376>
   24234:	f04f 0b00 	mov.w	fp, #0
   24238:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2423c:	f104 021a 	add.w	r2, r4, #26
   24240:	6da3      	ldr	r3, [r4, #88]	; 0x58
   24242:	930a      	str	r3, [sp, #40]	; 0x28
   24244:	eba3 0309 	sub.w	r3, r3, r9
   24248:	455b      	cmp	r3, fp
   2424a:	dc31      	bgt.n	242b0 <_printf_float+0x384>
   2424c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2424e:	459a      	cmp	sl, r3
   24250:	dc3a      	bgt.n	242c8 <_printf_float+0x39c>
   24252:	6823      	ldr	r3, [r4, #0]
   24254:	07da      	lsls	r2, r3, #31
   24256:	d437      	bmi.n	242c8 <_printf_float+0x39c>
   24258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2425a:	ebaa 0903 	sub.w	r9, sl, r3
   2425e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24260:	ebaa 0303 	sub.w	r3, sl, r3
   24264:	4599      	cmp	r9, r3
   24266:	bfa8      	it	ge
   24268:	4699      	movge	r9, r3
   2426a:	f1b9 0f00 	cmp.w	r9, #0
   2426e:	dc33      	bgt.n	242d8 <_printf_float+0x3ac>
   24270:	f04f 0800 	mov.w	r8, #0
   24274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   24278:	f104 0b1a 	add.w	fp, r4, #26
   2427c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2427e:	ebaa 0303 	sub.w	r3, sl, r3
   24282:	eba3 0309 	sub.w	r3, r3, r9
   24286:	4543      	cmp	r3, r8
   24288:	f77f af7a 	ble.w	24180 <_printf_float+0x254>
   2428c:	2301      	movs	r3, #1
   2428e:	465a      	mov	r2, fp
   24290:	4631      	mov	r1, r6
   24292:	4628      	mov	r0, r5
   24294:	47b8      	blx	r7
   24296:	3001      	adds	r0, #1
   24298:	f43f aea3 	beq.w	23fe2 <_printf_float+0xb6>
   2429c:	f108 0801 	add.w	r8, r8, #1
   242a0:	e7ec      	b.n	2427c <_printf_float+0x350>
   242a2:	4642      	mov	r2, r8
   242a4:	4631      	mov	r1, r6
   242a6:	4628      	mov	r0, r5
   242a8:	47b8      	blx	r7
   242aa:	3001      	adds	r0, #1
   242ac:	d1c2      	bne.n	24234 <_printf_float+0x308>
   242ae:	e698      	b.n	23fe2 <_printf_float+0xb6>
   242b0:	2301      	movs	r3, #1
   242b2:	4631      	mov	r1, r6
   242b4:	4628      	mov	r0, r5
   242b6:	920a      	str	r2, [sp, #40]	; 0x28
   242b8:	47b8      	blx	r7
   242ba:	3001      	adds	r0, #1
   242bc:	f43f ae91 	beq.w	23fe2 <_printf_float+0xb6>
   242c0:	f10b 0b01 	add.w	fp, fp, #1
   242c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   242c6:	e7bb      	b.n	24240 <_printf_float+0x314>
   242c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   242cc:	4631      	mov	r1, r6
   242ce:	4628      	mov	r0, r5
   242d0:	47b8      	blx	r7
   242d2:	3001      	adds	r0, #1
   242d4:	d1c0      	bne.n	24258 <_printf_float+0x32c>
   242d6:	e684      	b.n	23fe2 <_printf_float+0xb6>
   242d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   242da:	464b      	mov	r3, r9
   242dc:	4631      	mov	r1, r6
   242de:	4628      	mov	r0, r5
   242e0:	4442      	add	r2, r8
   242e2:	47b8      	blx	r7
   242e4:	3001      	adds	r0, #1
   242e6:	d1c3      	bne.n	24270 <_printf_float+0x344>
   242e8:	e67b      	b.n	23fe2 <_printf_float+0xb6>
   242ea:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   242ee:	f1ba 0f01 	cmp.w	sl, #1
   242f2:	dc01      	bgt.n	242f8 <_printf_float+0x3cc>
   242f4:	07db      	lsls	r3, r3, #31
   242f6:	d536      	bpl.n	24366 <_printf_float+0x43a>
   242f8:	2301      	movs	r3, #1
   242fa:	4642      	mov	r2, r8
   242fc:	4631      	mov	r1, r6
   242fe:	4628      	mov	r0, r5
   24300:	47b8      	blx	r7
   24302:	3001      	adds	r0, #1
   24304:	f43f ae6d 	beq.w	23fe2 <_printf_float+0xb6>
   24308:	4631      	mov	r1, r6
   2430a:	4628      	mov	r0, r5
   2430c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   24310:	47b8      	blx	r7
   24312:	3001      	adds	r0, #1
   24314:	f43f ae65 	beq.w	23fe2 <_printf_float+0xb6>
   24318:	2200      	movs	r2, #0
   2431a:	2300      	movs	r3, #0
   2431c:	f10a 3aff 	add.w	sl, sl, #4294967295
   24320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   24324:	f7e4 fe72 	bl	900c <__aeabi_dcmpeq>
   24328:	b9c0      	cbnz	r0, 2435c <_printf_float+0x430>
   2432a:	4653      	mov	r3, sl
   2432c:	f108 0201 	add.w	r2, r8, #1
   24330:	4631      	mov	r1, r6
   24332:	4628      	mov	r0, r5
   24334:	47b8      	blx	r7
   24336:	3001      	adds	r0, #1
   24338:	d10c      	bne.n	24354 <_printf_float+0x428>
   2433a:	e652      	b.n	23fe2 <_printf_float+0xb6>
   2433c:	2301      	movs	r3, #1
   2433e:	465a      	mov	r2, fp
   24340:	4631      	mov	r1, r6
   24342:	4628      	mov	r0, r5
   24344:	47b8      	blx	r7
   24346:	3001      	adds	r0, #1
   24348:	f43f ae4b 	beq.w	23fe2 <_printf_float+0xb6>
   2434c:	f108 0801 	add.w	r8, r8, #1
   24350:	45d0      	cmp	r8, sl
   24352:	dbf3      	blt.n	2433c <_printf_float+0x410>
   24354:	464b      	mov	r3, r9
   24356:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2435a:	e6e0      	b.n	2411e <_printf_float+0x1f2>
   2435c:	f04f 0800 	mov.w	r8, #0
   24360:	f104 0b1a 	add.w	fp, r4, #26
   24364:	e7f4      	b.n	24350 <_printf_float+0x424>
   24366:	2301      	movs	r3, #1
   24368:	4642      	mov	r2, r8
   2436a:	e7e1      	b.n	24330 <_printf_float+0x404>
   2436c:	2301      	movs	r3, #1
   2436e:	464a      	mov	r2, r9
   24370:	4631      	mov	r1, r6
   24372:	4628      	mov	r0, r5
   24374:	47b8      	blx	r7
   24376:	3001      	adds	r0, #1
   24378:	f43f ae33 	beq.w	23fe2 <_printf_float+0xb6>
   2437c:	f108 0801 	add.w	r8, r8, #1
   24380:	68e3      	ldr	r3, [r4, #12]
   24382:	990f      	ldr	r1, [sp, #60]	; 0x3c
   24384:	1a5b      	subs	r3, r3, r1
   24386:	4543      	cmp	r3, r8
   24388:	dcf0      	bgt.n	2436c <_printf_float+0x440>
   2438a:	e6fd      	b.n	24188 <_printf_float+0x25c>
   2438c:	f04f 0800 	mov.w	r8, #0
   24390:	f104 0919 	add.w	r9, r4, #25
   24394:	e7f4      	b.n	24380 <_printf_float+0x454>
   24396:	bf00      	nop

00024398 <_printf_i>:
   24398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2439c:	7e0f      	ldrb	r7, [r1, #24]
   2439e:	4691      	mov	r9, r2
   243a0:	4680      	mov	r8, r0
   243a2:	460c      	mov	r4, r1
   243a4:	2f78      	cmp	r7, #120	; 0x78
   243a6:	469a      	mov	sl, r3
   243a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   243aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
   243ae:	d807      	bhi.n	243c0 <_printf_i+0x28>
   243b0:	2f62      	cmp	r7, #98	; 0x62
   243b2:	d80a      	bhi.n	243ca <_printf_i+0x32>
   243b4:	2f00      	cmp	r7, #0
   243b6:	f000 80e0 	beq.w	2457a <_printf_i+0x1e2>
   243ba:	2f58      	cmp	r7, #88	; 0x58
   243bc:	f000 80bb 	beq.w	24536 <_printf_i+0x19e>
   243c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   243c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   243c8:	e03a      	b.n	24440 <_printf_i+0xa8>
   243ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   243ce:	2b15      	cmp	r3, #21
   243d0:	d8f6      	bhi.n	243c0 <_printf_i+0x28>
   243d2:	a101      	add	r1, pc, #4	; (adr r1, 243d8 <_printf_i+0x40>)
   243d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   243d8:	00024431 	.word	0x00024431
   243dc:	00024445 	.word	0x00024445
   243e0:	000243c1 	.word	0x000243c1
   243e4:	000243c1 	.word	0x000243c1
   243e8:	000243c1 	.word	0x000243c1
   243ec:	000243c1 	.word	0x000243c1
   243f0:	00024445 	.word	0x00024445
   243f4:	000243c1 	.word	0x000243c1
   243f8:	000243c1 	.word	0x000243c1
   243fc:	000243c1 	.word	0x000243c1
   24400:	000243c1 	.word	0x000243c1
   24404:	00024561 	.word	0x00024561
   24408:	000244d5 	.word	0x000244d5
   2440c:	00024517 	.word	0x00024517
   24410:	000243c1 	.word	0x000243c1
   24414:	000243c1 	.word	0x000243c1
   24418:	00024583 	.word	0x00024583
   2441c:	000243c1 	.word	0x000243c1
   24420:	000244d5 	.word	0x000244d5
   24424:	000243c1 	.word	0x000243c1
   24428:	000243c1 	.word	0x000243c1
   2442c:	0002451f 	.word	0x0002451f
   24430:	682b      	ldr	r3, [r5, #0]
   24432:	f104 0642 	add.w	r6, r4, #66	; 0x42
   24436:	1d1a      	adds	r2, r3, #4
   24438:	681b      	ldr	r3, [r3, #0]
   2443a:	602a      	str	r2, [r5, #0]
   2443c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   24440:	2301      	movs	r3, #1
   24442:	e0ab      	b.n	2459c <_printf_i+0x204>
   24444:	6823      	ldr	r3, [r4, #0]
   24446:	6829      	ldr	r1, [r5, #0]
   24448:	061f      	lsls	r7, r3, #24
   2444a:	f101 0004 	add.w	r0, r1, #4
   2444e:	6028      	str	r0, [r5, #0]
   24450:	d501      	bpl.n	24456 <_printf_i+0xbe>
   24452:	680d      	ldr	r5, [r1, #0]
   24454:	e003      	b.n	2445e <_printf_i+0xc6>
   24456:	065e      	lsls	r6, r3, #25
   24458:	d5fb      	bpl.n	24452 <_printf_i+0xba>
   2445a:	f9b1 5000 	ldrsh.w	r5, [r1]
   2445e:	2d00      	cmp	r5, #0
   24460:	6861      	ldr	r1, [r4, #4]
   24462:	da7a      	bge.n	2455a <_printf_i+0x1c2>
   24464:	202d      	movs	r0, #45	; 0x2d
   24466:	2900      	cmp	r1, #0
   24468:	60a1      	str	r1, [r4, #8]
   2446a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   2446e:	da2d      	bge.n	244cc <_printf_i+0x134>
   24470:	426d      	negs	r5, r5
   24472:	485e      	ldr	r0, [pc, #376]	; (245ec <_printf_i+0x254>)
   24474:	230a      	movs	r3, #10
   24476:	4616      	mov	r6, r2
   24478:	fbb5 f1f3 	udiv	r1, r5, r3
   2447c:	fb03 5711 	mls	r7, r3, r1, r5
   24480:	5dc7      	ldrb	r7, [r0, r7]
   24482:	f806 7d01 	strb.w	r7, [r6, #-1]!
   24486:	462f      	mov	r7, r5
   24488:	460d      	mov	r5, r1
   2448a:	42bb      	cmp	r3, r7
   2448c:	d9f4      	bls.n	24478 <_printf_i+0xe0>
   2448e:	2b08      	cmp	r3, #8
   24490:	d10b      	bne.n	244aa <_printf_i+0x112>
   24492:	6823      	ldr	r3, [r4, #0]
   24494:	07df      	lsls	r7, r3, #31
   24496:	d508      	bpl.n	244aa <_printf_i+0x112>
   24498:	6923      	ldr	r3, [r4, #16]
   2449a:	6861      	ldr	r1, [r4, #4]
   2449c:	4299      	cmp	r1, r3
   2449e:	bfde      	ittt	le
   244a0:	2330      	movle	r3, #48	; 0x30
   244a2:	f806 3c01 	strble.w	r3, [r6, #-1]
   244a6:	f106 36ff 	addle.w	r6, r6, #4294967295
   244aa:	1b92      	subs	r2, r2, r6
   244ac:	6122      	str	r2, [r4, #16]
   244ae:	464b      	mov	r3, r9
   244b0:	aa03      	add	r2, sp, #12
   244b2:	4621      	mov	r1, r4
   244b4:	4640      	mov	r0, r8
   244b6:	f8cd a000 	str.w	sl, [sp]
   244ba:	f006 fd29 	bl	2af10 <_printf_common>
   244be:	3001      	adds	r0, #1
   244c0:	d171      	bne.n	245a6 <_printf_i+0x20e>
   244c2:	f04f 30ff 	mov.w	r0, #4294967295
   244c6:	b004      	add	sp, #16
   244c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   244cc:	f023 0304 	bic.w	r3, r3, #4
   244d0:	6023      	str	r3, [r4, #0]
   244d2:	e7cd      	b.n	24470 <_printf_i+0xd8>
   244d4:	682b      	ldr	r3, [r5, #0]
   244d6:	6820      	ldr	r0, [r4, #0]
   244d8:	1d19      	adds	r1, r3, #4
   244da:	6029      	str	r1, [r5, #0]
   244dc:	0605      	lsls	r5, r0, #24
   244de:	d501      	bpl.n	244e4 <_printf_i+0x14c>
   244e0:	681d      	ldr	r5, [r3, #0]
   244e2:	e002      	b.n	244ea <_printf_i+0x152>
   244e4:	0641      	lsls	r1, r0, #25
   244e6:	d5fb      	bpl.n	244e0 <_printf_i+0x148>
   244e8:	881d      	ldrh	r5, [r3, #0]
   244ea:	2f6f      	cmp	r7, #111	; 0x6f
   244ec:	483f      	ldr	r0, [pc, #252]	; (245ec <_printf_i+0x254>)
   244ee:	bf14      	ite	ne
   244f0:	230a      	movne	r3, #10
   244f2:	2308      	moveq	r3, #8
   244f4:	2100      	movs	r1, #0
   244f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   244fa:	6866      	ldr	r6, [r4, #4]
   244fc:	2e00      	cmp	r6, #0
   244fe:	60a6      	str	r6, [r4, #8]
   24500:	dbb9      	blt.n	24476 <_printf_i+0xde>
   24502:	6821      	ldr	r1, [r4, #0]
   24504:	f021 0104 	bic.w	r1, r1, #4
   24508:	6021      	str	r1, [r4, #0]
   2450a:	2d00      	cmp	r5, #0
   2450c:	d1b3      	bne.n	24476 <_printf_i+0xde>
   2450e:	2e00      	cmp	r6, #0
   24510:	d1b1      	bne.n	24476 <_printf_i+0xde>
   24512:	4616      	mov	r6, r2
   24514:	e7bb      	b.n	2448e <_printf_i+0xf6>
   24516:	6823      	ldr	r3, [r4, #0]
   24518:	f043 0320 	orr.w	r3, r3, #32
   2451c:	6023      	str	r3, [r4, #0]
   2451e:	2778      	movs	r7, #120	; 0x78
   24520:	4833      	ldr	r0, [pc, #204]	; (245f0 <_printf_i+0x258>)
   24522:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   24526:	6829      	ldr	r1, [r5, #0]
   24528:	6823      	ldr	r3, [r4, #0]
   2452a:	1d0e      	adds	r6, r1, #4
   2452c:	602e      	str	r6, [r5, #0]
   2452e:	061e      	lsls	r6, r3, #24
   24530:	d503      	bpl.n	2453a <_printf_i+0x1a2>
   24532:	680d      	ldr	r5, [r1, #0]
   24534:	e004      	b.n	24540 <_printf_i+0x1a8>
   24536:	482d      	ldr	r0, [pc, #180]	; (245ec <_printf_i+0x254>)
   24538:	e7f3      	b.n	24522 <_printf_i+0x18a>
   2453a:	065d      	lsls	r5, r3, #25
   2453c:	d5f9      	bpl.n	24532 <_printf_i+0x19a>
   2453e:	880d      	ldrh	r5, [r1, #0]
   24540:	07d9      	lsls	r1, r3, #31
   24542:	bf44      	itt	mi
   24544:	f043 0320 	orrmi.w	r3, r3, #32
   24548:	6023      	strmi	r3, [r4, #0]
   2454a:	b10d      	cbz	r5, 24550 <_printf_i+0x1b8>
   2454c:	2310      	movs	r3, #16
   2454e:	e7d1      	b.n	244f4 <_printf_i+0x15c>
   24550:	6823      	ldr	r3, [r4, #0]
   24552:	f023 0320 	bic.w	r3, r3, #32
   24556:	6023      	str	r3, [r4, #0]
   24558:	e7f8      	b.n	2454c <_printf_i+0x1b4>
   2455a:	4824      	ldr	r0, [pc, #144]	; (245ec <_printf_i+0x254>)
   2455c:	230a      	movs	r3, #10
   2455e:	e7cc      	b.n	244fa <_printf_i+0x162>
   24560:	682b      	ldr	r3, [r5, #0]
   24562:	6826      	ldr	r6, [r4, #0]
   24564:	1d18      	adds	r0, r3, #4
   24566:	6961      	ldr	r1, [r4, #20]
   24568:	6028      	str	r0, [r5, #0]
   2456a:	0635      	lsls	r5, r6, #24
   2456c:	681b      	ldr	r3, [r3, #0]
   2456e:	d501      	bpl.n	24574 <_printf_i+0x1dc>
   24570:	6019      	str	r1, [r3, #0]
   24572:	e002      	b.n	2457a <_printf_i+0x1e2>
   24574:	0670      	lsls	r0, r6, #25
   24576:	d5fb      	bpl.n	24570 <_printf_i+0x1d8>
   24578:	8019      	strh	r1, [r3, #0]
   2457a:	2300      	movs	r3, #0
   2457c:	4616      	mov	r6, r2
   2457e:	6123      	str	r3, [r4, #16]
   24580:	e795      	b.n	244ae <_printf_i+0x116>
   24582:	682b      	ldr	r3, [r5, #0]
   24584:	2100      	movs	r1, #0
   24586:	1d1a      	adds	r2, r3, #4
   24588:	602a      	str	r2, [r5, #0]
   2458a:	681e      	ldr	r6, [r3, #0]
   2458c:	6862      	ldr	r2, [r4, #4]
   2458e:	4630      	mov	r0, r6
   24590:	f006 ffd0 	bl	2b534 <memchr>
   24594:	b108      	cbz	r0, 2459a <_printf_i+0x202>
   24596:	1b80      	subs	r0, r0, r6
   24598:	6060      	str	r0, [r4, #4]
   2459a:	6863      	ldr	r3, [r4, #4]
   2459c:	6123      	str	r3, [r4, #16]
   2459e:	2300      	movs	r3, #0
   245a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   245a4:	e783      	b.n	244ae <_printf_i+0x116>
   245a6:	6923      	ldr	r3, [r4, #16]
   245a8:	4632      	mov	r2, r6
   245aa:	4649      	mov	r1, r9
   245ac:	4640      	mov	r0, r8
   245ae:	47d0      	blx	sl
   245b0:	3001      	adds	r0, #1
   245b2:	d086      	beq.n	244c2 <_printf_i+0x12a>
   245b4:	6823      	ldr	r3, [r4, #0]
   245b6:	079b      	lsls	r3, r3, #30
   245b8:	d414      	bmi.n	245e4 <_printf_i+0x24c>
   245ba:	68e0      	ldr	r0, [r4, #12]
   245bc:	9b03      	ldr	r3, [sp, #12]
   245be:	4298      	cmp	r0, r3
   245c0:	bfb8      	it	lt
   245c2:	4618      	movlt	r0, r3
   245c4:	e77f      	b.n	244c6 <_printf_i+0x12e>
   245c6:	2301      	movs	r3, #1
   245c8:	4632      	mov	r2, r6
   245ca:	4649      	mov	r1, r9
   245cc:	4640      	mov	r0, r8
   245ce:	47d0      	blx	sl
   245d0:	3001      	adds	r0, #1
   245d2:	f43f af76 	beq.w	244c2 <_printf_i+0x12a>
   245d6:	3501      	adds	r5, #1
   245d8:	68e3      	ldr	r3, [r4, #12]
   245da:	9903      	ldr	r1, [sp, #12]
   245dc:	1a5b      	subs	r3, r3, r1
   245de:	42ab      	cmp	r3, r5
   245e0:	dcf1      	bgt.n	245c6 <_printf_i+0x22e>
   245e2:	e7ea      	b.n	245ba <_printf_i+0x222>
   245e4:	2500      	movs	r5, #0
   245e6:	f104 0619 	add.w	r6, r4, #25
   245ea:	e7f5      	b.n	245d8 <_printf_i+0x240>
   245ec:	00032aea 	.word	0x00032aea
   245f0:	00032afb 	.word	0x00032afb

000245f4 <iprintf>:
   245f4:	b40f      	push	{r0, r1, r2, r3}
   245f6:	4b0a      	ldr	r3, [pc, #40]	; (24620 <iprintf+0x2c>)
   245f8:	b513      	push	{r0, r1, r4, lr}
   245fa:	681c      	ldr	r4, [r3, #0]
   245fc:	b124      	cbz	r4, 24608 <iprintf+0x14>
   245fe:	69a3      	ldr	r3, [r4, #24]
   24600:	b913      	cbnz	r3, 24608 <iprintf+0x14>
   24602:	4620      	mov	r0, r4
   24604:	f000 f8be 	bl	24784 <__sinit>
   24608:	ab05      	add	r3, sp, #20
   2460a:	9a04      	ldr	r2, [sp, #16]
   2460c:	68a1      	ldr	r1, [r4, #8]
   2460e:	4620      	mov	r0, r4
   24610:	9301      	str	r3, [sp, #4]
   24612:	f000 ff59 	bl	254c8 <_vfiprintf_r>
   24616:	b002      	add	sp, #8
   24618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2461c:	b004      	add	sp, #16
   2461e:	4770      	bx	lr
   24620:	20008744 	.word	0x20008744

00024624 <_sbrk_r>:
   24624:	b538      	push	{r3, r4, r5, lr}
   24626:	2300      	movs	r3, #0
   24628:	4d05      	ldr	r5, [pc, #20]	; (24640 <_sbrk_r+0x1c>)
   2462a:	4604      	mov	r4, r0
   2462c:	4608      	mov	r0, r1
   2462e:	602b      	str	r3, [r5, #0]
   24630:	f7ed fc3a 	bl	11ea8 <_sbrk>
   24634:	1c43      	adds	r3, r0, #1
   24636:	d102      	bne.n	2463e <_sbrk_r+0x1a>
   24638:	682b      	ldr	r3, [r5, #0]
   2463a:	b103      	cbz	r3, 2463e <_sbrk_r+0x1a>
   2463c:	6023      	str	r3, [r4, #0]
   2463e:	bd38      	pop	{r3, r4, r5, pc}
   24640:	20022c00 	.word	0x20022c00

00024644 <strtod>:
   24644:	460a      	mov	r2, r1
   24646:	4601      	mov	r1, r0
   24648:	4802      	ldr	r0, [pc, #8]	; (24654 <strtod+0x10>)
   2464a:	4b03      	ldr	r3, [pc, #12]	; (24658 <strtod+0x14>)
   2464c:	6800      	ldr	r0, [r0, #0]
   2464e:	f7e5 bb6b 	b.w	9d28 <_strtod_l>
   24652:	bf00      	nop
   24654:	20008744 	.word	0x20008744
   24658:	200087a8 	.word	0x200087a8

0002465c <strtok>:
   2465c:	4b16      	ldr	r3, [pc, #88]	; (246b8 <strtok+0x5c>)
   2465e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24662:	681f      	ldr	r7, [r3, #0]
   24664:	4605      	mov	r5, r0
   24666:	460e      	mov	r6, r1
   24668:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   2466a:	b9ec      	cbnz	r4, 246a8 <strtok+0x4c>
   2466c:	2050      	movs	r0, #80	; 0x50
   2466e:	f7ff fbb1 	bl	23dd4 <malloc>
   24672:	4602      	mov	r2, r0
   24674:	65b8      	str	r0, [r7, #88]	; 0x58
   24676:	b920      	cbnz	r0, 24682 <strtok+0x26>
   24678:	4b10      	ldr	r3, [pc, #64]	; (246bc <strtok+0x60>)
   2467a:	2157      	movs	r1, #87	; 0x57
   2467c:	4810      	ldr	r0, [pc, #64]	; (246c0 <strtok+0x64>)
   2467e:	f000 f821 	bl	246c4 <__assert_func>
   24682:	e9c0 4400 	strd	r4, r4, [r0]
   24686:	e9c0 4402 	strd	r4, r4, [r0, #8]
   2468a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   2468e:	6184      	str	r4, [r0, #24]
   24690:	7704      	strb	r4, [r0, #28]
   24692:	6244      	str	r4, [r0, #36]	; 0x24
   24694:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   24698:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   2469c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   246a0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   246a4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   246a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
   246aa:	4631      	mov	r1, r6
   246ac:	4628      	mov	r0, r5
   246ae:	2301      	movs	r3, #1
   246b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   246b4:	f006 bd1b 	b.w	2b0ee <__strtok_r>
   246b8:	20008744 	.word	0x20008744
   246bc:	00032b0c 	.word	0x00032b0c
   246c0:	00032b23 	.word	0x00032b23

000246c4 <__assert_func>:
   246c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   246c6:	4614      	mov	r4, r2
   246c8:	461a      	mov	r2, r3
   246ca:	4b09      	ldr	r3, [pc, #36]	; (246f0 <__assert_func+0x2c>)
   246cc:	4605      	mov	r5, r0
   246ce:	681b      	ldr	r3, [r3, #0]
   246d0:	68d8      	ldr	r0, [r3, #12]
   246d2:	b954      	cbnz	r4, 246ea <__assert_func+0x26>
   246d4:	4b07      	ldr	r3, [pc, #28]	; (246f4 <__assert_func+0x30>)
   246d6:	461c      	mov	r4, r3
   246d8:	9100      	str	r1, [sp, #0]
   246da:	4907      	ldr	r1, [pc, #28]	; (246f8 <__assert_func+0x34>)
   246dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
   246e0:	462b      	mov	r3, r5
   246e2:	f000 f8cd 	bl	24880 <fiprintf>
   246e6:	f007 f888 	bl	2b7fa <abort>
   246ea:	4b04      	ldr	r3, [pc, #16]	; (246fc <__assert_func+0x38>)
   246ec:	e7f4      	b.n	246d8 <__assert_func+0x14>
   246ee:	bf00      	nop
   246f0:	20008744 	.word	0x20008744
   246f4:	00030d21 	.word	0x00030d21
   246f8:	00032ba6 	.word	0x00032ba6
   246fc:	00032b99 	.word	0x00032b99

00024700 <std>:
   24700:	2300      	movs	r3, #0
   24702:	b510      	push	{r4, lr}
   24704:	4604      	mov	r4, r0
   24706:	6083      	str	r3, [r0, #8]
   24708:	8181      	strh	r1, [r0, #12]
   2470a:	4619      	mov	r1, r3
   2470c:	6643      	str	r3, [r0, #100]	; 0x64
   2470e:	81c2      	strh	r2, [r0, #14]
   24710:	2208      	movs	r2, #8
   24712:	6183      	str	r3, [r0, #24]
   24714:	e9c0 3300 	strd	r3, r3, [r0]
   24718:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2471c:	305c      	adds	r0, #92	; 0x5c
   2471e:	f006 fb41 	bl	2ada4 <memset>
   24722:	4b05      	ldr	r3, [pc, #20]	; (24738 <std+0x38>)
   24724:	6224      	str	r4, [r4, #32]
   24726:	6263      	str	r3, [r4, #36]	; 0x24
   24728:	4b04      	ldr	r3, [pc, #16]	; (2473c <std+0x3c>)
   2472a:	62a3      	str	r3, [r4, #40]	; 0x28
   2472c:	4b04      	ldr	r3, [pc, #16]	; (24740 <std+0x40>)
   2472e:	62e3      	str	r3, [r4, #44]	; 0x2c
   24730:	4b04      	ldr	r3, [pc, #16]	; (24744 <std+0x44>)
   24732:	6323      	str	r3, [r4, #48]	; 0x30
   24734:	bd10      	pop	{r4, pc}
   24736:	bf00      	nop
   24738:	0002b75b 	.word	0x0002b75b
   2473c:	0002b77d 	.word	0x0002b77d
   24740:	0002b7b5 	.word	0x0002b7b5
   24744:	0002b7d9 	.word	0x0002b7d9

00024748 <_cleanup_r>:
   24748:	4901      	ldr	r1, [pc, #4]	; (24750 <_cleanup_r+0x8>)
   2474a:	f006 bd9b 	b.w	2b284 <_fwalk_reent>
   2474e:	bf00      	nop
   24750:	000258e1 	.word	0x000258e1

00024754 <__sfp_lock_acquire>:
   24754:	4801      	ldr	r0, [pc, #4]	; (2475c <__sfp_lock_acquire+0x8>)
   24756:	f7ed bbeb 	b.w	11f30 <__retarget_lock_acquire_recursive>
   2475a:	bf00      	nop
   2475c:	20008a94 	.word	0x20008a94

00024760 <__sfp_lock_release>:
   24760:	4801      	ldr	r0, [pc, #4]	; (24768 <__sfp_lock_release+0x8>)
   24762:	f7ed bc01 	b.w	11f68 <__retarget_lock_release_recursive>
   24766:	bf00      	nop
   24768:	20008a94 	.word	0x20008a94

0002476c <__sinit_lock_acquire>:
   2476c:	4801      	ldr	r0, [pc, #4]	; (24774 <__sinit_lock_acquire+0x8>)
   2476e:	f7ed bbdf 	b.w	11f30 <__retarget_lock_acquire_recursive>
   24772:	bf00      	nop
   24774:	20008aa8 	.word	0x20008aa8

00024778 <__sinit_lock_release>:
   24778:	4801      	ldr	r0, [pc, #4]	; (24780 <__sinit_lock_release+0x8>)
   2477a:	f7ed bbf5 	b.w	11f68 <__retarget_lock_release_recursive>
   2477e:	bf00      	nop
   24780:	20008aa8 	.word	0x20008aa8

00024784 <__sinit>:
   24784:	b510      	push	{r4, lr}
   24786:	4604      	mov	r4, r0
   24788:	f7ff fff0 	bl	2476c <__sinit_lock_acquire>
   2478c:	69a3      	ldr	r3, [r4, #24]
   2478e:	b11b      	cbz	r3, 24798 <__sinit+0x14>
   24790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24794:	f7ff bff0 	b.w	24778 <__sinit_lock_release>
   24798:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2479c:	6523      	str	r3, [r4, #80]	; 0x50
   2479e:	4620      	mov	r0, r4
   247a0:	4b12      	ldr	r3, [pc, #72]	; (247ec <__sinit+0x68>)
   247a2:	4a13      	ldr	r2, [pc, #76]	; (247f0 <__sinit+0x6c>)
   247a4:	681b      	ldr	r3, [r3, #0]
   247a6:	62a2      	str	r2, [r4, #40]	; 0x28
   247a8:	42a3      	cmp	r3, r4
   247aa:	bf04      	itt	eq
   247ac:	2301      	moveq	r3, #1
   247ae:	61a3      	streq	r3, [r4, #24]
   247b0:	f000 f820 	bl	247f4 <__sfp>
   247b4:	6060      	str	r0, [r4, #4]
   247b6:	4620      	mov	r0, r4
   247b8:	f000 f81c 	bl	247f4 <__sfp>
   247bc:	60a0      	str	r0, [r4, #8]
   247be:	4620      	mov	r0, r4
   247c0:	f000 f818 	bl	247f4 <__sfp>
   247c4:	2200      	movs	r2, #0
   247c6:	2104      	movs	r1, #4
   247c8:	60e0      	str	r0, [r4, #12]
   247ca:	6860      	ldr	r0, [r4, #4]
   247cc:	f7ff ff98 	bl	24700 <std>
   247d0:	2201      	movs	r2, #1
   247d2:	2109      	movs	r1, #9
   247d4:	68a0      	ldr	r0, [r4, #8]
   247d6:	f7ff ff93 	bl	24700 <std>
   247da:	2202      	movs	r2, #2
   247dc:	2112      	movs	r1, #18
   247de:	68e0      	ldr	r0, [r4, #12]
   247e0:	f7ff ff8e 	bl	24700 <std>
   247e4:	2301      	movs	r3, #1
   247e6:	61a3      	str	r3, [r4, #24]
   247e8:	e7d2      	b.n	24790 <__sinit+0xc>
   247ea:	bf00      	nop
   247ec:	0002cf6c 	.word	0x0002cf6c
   247f0:	00024749 	.word	0x00024749

000247f4 <__sfp>:
   247f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   247f6:	4607      	mov	r7, r0
   247f8:	f7ff ffac 	bl	24754 <__sfp_lock_acquire>
   247fc:	4b1e      	ldr	r3, [pc, #120]	; (24878 <__sfp+0x84>)
   247fe:	681e      	ldr	r6, [r3, #0]
   24800:	69b3      	ldr	r3, [r6, #24]
   24802:	b913      	cbnz	r3, 2480a <__sfp+0x16>
   24804:	4630      	mov	r0, r6
   24806:	f7ff ffbd 	bl	24784 <__sinit>
   2480a:	3648      	adds	r6, #72	; 0x48
   2480c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   24810:	3b01      	subs	r3, #1
   24812:	d503      	bpl.n	2481c <__sfp+0x28>
   24814:	6833      	ldr	r3, [r6, #0]
   24816:	b30b      	cbz	r3, 2485c <__sfp+0x68>
   24818:	6836      	ldr	r6, [r6, #0]
   2481a:	e7f7      	b.n	2480c <__sfp+0x18>
   2481c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   24820:	b9d5      	cbnz	r5, 24858 <__sfp+0x64>
   24822:	4b16      	ldr	r3, [pc, #88]	; (2487c <__sfp+0x88>)
   24824:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24828:	6665      	str	r5, [r4, #100]	; 0x64
   2482a:	60e3      	str	r3, [r4, #12]
   2482c:	f7ed fb50 	bl	11ed0 <__retarget_lock_init_recursive>
   24830:	f7ff ff96 	bl	24760 <__sfp_lock_release>
   24834:	2208      	movs	r2, #8
   24836:	4629      	mov	r1, r5
   24838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2483c:	6025      	str	r5, [r4, #0]
   2483e:	61a5      	str	r5, [r4, #24]
   24840:	e9c4 5501 	strd	r5, r5, [r4, #4]
   24844:	e9c4 5504 	strd	r5, r5, [r4, #16]
   24848:	f006 faac 	bl	2ada4 <memset>
   2484c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   24850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   24854:	4620      	mov	r0, r4
   24856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24858:	3468      	adds	r4, #104	; 0x68
   2485a:	e7d9      	b.n	24810 <__sfp+0x1c>
   2485c:	2104      	movs	r1, #4
   2485e:	4638      	mov	r0, r7
   24860:	f006 fcfa 	bl	2b258 <__sfmoreglue>
   24864:	4604      	mov	r4, r0
   24866:	6030      	str	r0, [r6, #0]
   24868:	2800      	cmp	r0, #0
   2486a:	d1d5      	bne.n	24818 <__sfp+0x24>
   2486c:	f7ff ff78 	bl	24760 <__sfp_lock_release>
   24870:	230c      	movs	r3, #12
   24872:	603b      	str	r3, [r7, #0]
   24874:	e7ee      	b.n	24854 <__sfp+0x60>
   24876:	bf00      	nop
   24878:	0002cf6c 	.word	0x0002cf6c
   2487c:	ffff0001 	.word	0xffff0001

00024880 <fiprintf>:
   24880:	b40e      	push	{r1, r2, r3}
   24882:	b503      	push	{r0, r1, lr}
   24884:	ab03      	add	r3, sp, #12
   24886:	4601      	mov	r1, r0
   24888:	4805      	ldr	r0, [pc, #20]	; (248a0 <fiprintf+0x20>)
   2488a:	f853 2b04 	ldr.w	r2, [r3], #4
   2488e:	6800      	ldr	r0, [r0, #0]
   24890:	9301      	str	r3, [sp, #4]
   24892:	f000 fe19 	bl	254c8 <_vfiprintf_r>
   24896:	b002      	add	sp, #8
   24898:	f85d eb04 	ldr.w	lr, [sp], #4
   2489c:	b003      	add	sp, #12
   2489e:	4770      	bx	lr
   248a0:	20008744 	.word	0x20008744

000248a4 <__gethex>:
   248a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248a8:	b08b      	sub	sp, #44	; 0x2c
   248aa:	468b      	mov	fp, r1
   248ac:	4690      	mov	r8, r2
   248ae:	9305      	str	r3, [sp, #20]
   248b0:	4bac      	ldr	r3, [pc, #688]	; (24b64 <__gethex+0x2c0>)
   248b2:	9002      	str	r0, [sp, #8]
   248b4:	681b      	ldr	r3, [r3, #0]
   248b6:	4618      	mov	r0, r3
   248b8:	9303      	str	r3, [sp, #12]
   248ba:	f7e4 fda6 	bl	940a <strlen>
   248be:	9b03      	ldr	r3, [sp, #12]
   248c0:	9001      	str	r0, [sp, #4]
   248c2:	4403      	add	r3, r0
   248c4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   248c8:	9306      	str	r3, [sp, #24]
   248ca:	f8db 3000 	ldr.w	r3, [fp]
   248ce:	1c9a      	adds	r2, r3, #2
   248d0:	4617      	mov	r7, r2
   248d2:	f812 0b01 	ldrb.w	r0, [r2], #1
   248d6:	2830      	cmp	r0, #48	; 0x30
   248d8:	d0fa      	beq.n	248d0 <__gethex+0x2c>
   248da:	1afb      	subs	r3, r7, r3
   248dc:	f1a3 0a02 	sub.w	sl, r3, #2
   248e0:	f006 fd40 	bl	2b364 <__hexdig_fun>
   248e4:	4604      	mov	r4, r0
   248e6:	2800      	cmp	r0, #0
   248e8:	d138      	bne.n	2495c <__gethex+0xb8>
   248ea:	9a01      	ldr	r2, [sp, #4]
   248ec:	4638      	mov	r0, r7
   248ee:	9903      	ldr	r1, [sp, #12]
   248f0:	f006 fb95 	bl	2b01e <strncmp>
   248f4:	4605      	mov	r5, r0
   248f6:	2800      	cmp	r0, #0
   248f8:	d164      	bne.n	249c4 <__gethex+0x120>
   248fa:	9b01      	ldr	r3, [sp, #4]
   248fc:	5cf8      	ldrb	r0, [r7, r3]
   248fe:	18fe      	adds	r6, r7, r3
   24900:	f006 fd30 	bl	2b364 <__hexdig_fun>
   24904:	2800      	cmp	r0, #0
   24906:	d05f      	beq.n	249c8 <__gethex+0x124>
   24908:	4633      	mov	r3, r6
   2490a:	7818      	ldrb	r0, [r3, #0]
   2490c:	461f      	mov	r7, r3
   2490e:	3301      	adds	r3, #1
   24910:	2830      	cmp	r0, #48	; 0x30
   24912:	d0fa      	beq.n	2490a <__gethex+0x66>
   24914:	f006 fd26 	bl	2b364 <__hexdig_fun>
   24918:	fab0 f480 	clz	r4, r0
   2491c:	4635      	mov	r5, r6
   2491e:	f04f 0a01 	mov.w	sl, #1
   24922:	0964      	lsrs	r4, r4, #5
   24924:	463a      	mov	r2, r7
   24926:	4616      	mov	r6, r2
   24928:	3201      	adds	r2, #1
   2492a:	7830      	ldrb	r0, [r6, #0]
   2492c:	f006 fd1a 	bl	2b364 <__hexdig_fun>
   24930:	2800      	cmp	r0, #0
   24932:	d1f8      	bne.n	24926 <__gethex+0x82>
   24934:	9a01      	ldr	r2, [sp, #4]
   24936:	4630      	mov	r0, r6
   24938:	9903      	ldr	r1, [sp, #12]
   2493a:	f006 fb70 	bl	2b01e <strncmp>
   2493e:	b980      	cbnz	r0, 24962 <__gethex+0xbe>
   24940:	b94d      	cbnz	r5, 24956 <__gethex+0xb2>
   24942:	9b01      	ldr	r3, [sp, #4]
   24944:	18f5      	adds	r5, r6, r3
   24946:	462a      	mov	r2, r5
   24948:	4616      	mov	r6, r2
   2494a:	3201      	adds	r2, #1
   2494c:	7830      	ldrb	r0, [r6, #0]
   2494e:	f006 fd09 	bl	2b364 <__hexdig_fun>
   24952:	2800      	cmp	r0, #0
   24954:	d1f8      	bne.n	24948 <__gethex+0xa4>
   24956:	1bad      	subs	r5, r5, r6
   24958:	00ad      	lsls	r5, r5, #2
   2495a:	e004      	b.n	24966 <__gethex+0xc2>
   2495c:	2400      	movs	r4, #0
   2495e:	4625      	mov	r5, r4
   24960:	e7e0      	b.n	24924 <__gethex+0x80>
   24962:	2d00      	cmp	r5, #0
   24964:	d1f7      	bne.n	24956 <__gethex+0xb2>
   24966:	7833      	ldrb	r3, [r6, #0]
   24968:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2496c:	2b50      	cmp	r3, #80	; 0x50
   2496e:	d138      	bne.n	249e2 <__gethex+0x13e>
   24970:	7873      	ldrb	r3, [r6, #1]
   24972:	2b2b      	cmp	r3, #43	; 0x2b
   24974:	d02a      	beq.n	249cc <__gethex+0x128>
   24976:	2b2d      	cmp	r3, #45	; 0x2d
   24978:	d02c      	beq.n	249d4 <__gethex+0x130>
   2497a:	1c71      	adds	r1, r6, #1
   2497c:	f04f 0900 	mov.w	r9, #0
   24980:	7808      	ldrb	r0, [r1, #0]
   24982:	f006 fcef 	bl	2b364 <__hexdig_fun>
   24986:	1e43      	subs	r3, r0, #1
   24988:	b2db      	uxtb	r3, r3
   2498a:	2b18      	cmp	r3, #24
   2498c:	d829      	bhi.n	249e2 <__gethex+0x13e>
   2498e:	f1a0 0210 	sub.w	r2, r0, #16
   24992:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   24996:	f006 fce5 	bl	2b364 <__hexdig_fun>
   2499a:	1e43      	subs	r3, r0, #1
   2499c:	b2db      	uxtb	r3, r3
   2499e:	2b18      	cmp	r3, #24
   249a0:	d91b      	bls.n	249da <__gethex+0x136>
   249a2:	f1b9 0f00 	cmp.w	r9, #0
   249a6:	d000      	beq.n	249aa <__gethex+0x106>
   249a8:	4252      	negs	r2, r2
   249aa:	4415      	add	r5, r2
   249ac:	f8cb 1000 	str.w	r1, [fp]
   249b0:	b1cc      	cbz	r4, 249e6 <__gethex+0x142>
   249b2:	f1ba 0f00 	cmp.w	sl, #0
   249b6:	bf0c      	ite	eq
   249b8:	2606      	moveq	r6, #6
   249ba:	2600      	movne	r6, #0
   249bc:	4630      	mov	r0, r6
   249be:	b00b      	add	sp, #44	; 0x2c
   249c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249c4:	463e      	mov	r6, r7
   249c6:	4625      	mov	r5, r4
   249c8:	2401      	movs	r4, #1
   249ca:	e7cc      	b.n	24966 <__gethex+0xc2>
   249cc:	f04f 0900 	mov.w	r9, #0
   249d0:	1cb1      	adds	r1, r6, #2
   249d2:	e7d5      	b.n	24980 <__gethex+0xdc>
   249d4:	f04f 0901 	mov.w	r9, #1
   249d8:	e7fa      	b.n	249d0 <__gethex+0x12c>
   249da:	230a      	movs	r3, #10
   249dc:	fb03 0002 	mla	r0, r3, r2, r0
   249e0:	e7d5      	b.n	2498e <__gethex+0xea>
   249e2:	4631      	mov	r1, r6
   249e4:	e7e2      	b.n	249ac <__gethex+0x108>
   249e6:	1bf3      	subs	r3, r6, r7
   249e8:	4621      	mov	r1, r4
   249ea:	3b01      	subs	r3, #1
   249ec:	2b07      	cmp	r3, #7
   249ee:	dc0a      	bgt.n	24a06 <__gethex+0x162>
   249f0:	9802      	ldr	r0, [sp, #8]
   249f2:	f000 f997 	bl	24d24 <_Balloc>
   249f6:	4604      	mov	r4, r0
   249f8:	b940      	cbnz	r0, 24a0c <__gethex+0x168>
   249fa:	4b5b      	ldr	r3, [pc, #364]	; (24b68 <__gethex+0x2c4>)
   249fc:	4602      	mov	r2, r0
   249fe:	21de      	movs	r1, #222	; 0xde
   24a00:	485a      	ldr	r0, [pc, #360]	; (24b6c <__gethex+0x2c8>)
   24a02:	f7ff fe5f 	bl	246c4 <__assert_func>
   24a06:	3101      	adds	r1, #1
   24a08:	105b      	asrs	r3, r3, #1
   24a0a:	e7ef      	b.n	249ec <__gethex+0x148>
   24a0c:	f04f 0b00 	mov.w	fp, #0
   24a10:	9b01      	ldr	r3, [sp, #4]
   24a12:	f100 0914 	add.w	r9, r0, #20
   24a16:	f1c3 0301 	rsb	r3, r3, #1
   24a1a:	46da      	mov	sl, fp
   24a1c:	f8cd 9010 	str.w	r9, [sp, #16]
   24a20:	9308      	str	r3, [sp, #32]
   24a22:	42b7      	cmp	r7, r6
   24a24:	d338      	bcc.n	24a98 <__gethex+0x1f4>
   24a26:	9e04      	ldr	r6, [sp, #16]
   24a28:	4650      	mov	r0, sl
   24a2a:	f846 ab04 	str.w	sl, [r6], #4
   24a2e:	eba6 0609 	sub.w	r6, r6, r9
   24a32:	10b6      	asrs	r6, r6, #2
   24a34:	6126      	str	r6, [r4, #16]
   24a36:	0176      	lsls	r6, r6, #5
   24a38:	f006 fd8a 	bl	2b550 <__hi0bits>
   24a3c:	f8d8 7000 	ldr.w	r7, [r8]
   24a40:	1a36      	subs	r6, r6, r0
   24a42:	42be      	cmp	r6, r7
   24a44:	dd60      	ble.n	24b08 <__gethex+0x264>
   24a46:	1bf6      	subs	r6, r6, r7
   24a48:	4620      	mov	r0, r4
   24a4a:	4631      	mov	r1, r6
   24a4c:	f006 fe3d 	bl	2b6ca <__any_on>
   24a50:	4682      	mov	sl, r0
   24a52:	b178      	cbz	r0, 24a74 <__gethex+0x1d0>
   24a54:	1e73      	subs	r3, r6, #1
   24a56:	f04f 0a01 	mov.w	sl, #1
   24a5a:	1159      	asrs	r1, r3, #5
   24a5c:	f003 021f 	and.w	r2, r3, #31
   24a60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   24a64:	fa0a f202 	lsl.w	r2, sl, r2
   24a68:	420a      	tst	r2, r1
   24a6a:	d003      	beq.n	24a74 <__gethex+0x1d0>
   24a6c:	4553      	cmp	r3, sl
   24a6e:	dc42      	bgt.n	24af6 <__gethex+0x252>
   24a70:	f04f 0a02 	mov.w	sl, #2
   24a74:	4435      	add	r5, r6
   24a76:	4631      	mov	r1, r6
   24a78:	4620      	mov	r0, r4
   24a7a:	f006 fc22 	bl	2b2c2 <rshift>
   24a7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   24a82:	42ab      	cmp	r3, r5
   24a84:	da4e      	bge.n	24b24 <__gethex+0x280>
   24a86:	4621      	mov	r1, r4
   24a88:	9802      	ldr	r0, [sp, #8]
   24a8a:	f000 f98b 	bl	24da4 <_Bfree>
   24a8e:	2300      	movs	r3, #0
   24a90:	9a14      	ldr	r2, [sp, #80]	; 0x50
   24a92:	26a3      	movs	r6, #163	; 0xa3
   24a94:	6013      	str	r3, [r2, #0]
   24a96:	e791      	b.n	249bc <__gethex+0x118>
   24a98:	1e73      	subs	r3, r6, #1
   24a9a:	9a06      	ldr	r2, [sp, #24]
   24a9c:	9307      	str	r3, [sp, #28]
   24a9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   24aa2:	4293      	cmp	r3, r2
   24aa4:	d017      	beq.n	24ad6 <__gethex+0x232>
   24aa6:	f1bb 0f20 	cmp.w	fp, #32
   24aaa:	d106      	bne.n	24aba <__gethex+0x216>
   24aac:	9b04      	ldr	r3, [sp, #16]
   24aae:	f843 ab04 	str.w	sl, [r3], #4
   24ab2:	f04f 0a00 	mov.w	sl, #0
   24ab6:	9304      	str	r3, [sp, #16]
   24ab8:	46d3      	mov	fp, sl
   24aba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   24abe:	f006 fc51 	bl	2b364 <__hexdig_fun>
   24ac2:	f000 000f 	and.w	r0, r0, #15
   24ac6:	9b07      	ldr	r3, [sp, #28]
   24ac8:	fa00 f00b 	lsl.w	r0, r0, fp
   24acc:	f10b 0b04 	add.w	fp, fp, #4
   24ad0:	ea4a 0a00 	orr.w	sl, sl, r0
   24ad4:	e00d      	b.n	24af2 <__gethex+0x24e>
   24ad6:	1e73      	subs	r3, r6, #1
   24ad8:	9a08      	ldr	r2, [sp, #32]
   24ada:	4413      	add	r3, r2
   24adc:	42bb      	cmp	r3, r7
   24ade:	d3e2      	bcc.n	24aa6 <__gethex+0x202>
   24ae0:	4618      	mov	r0, r3
   24ae2:	9a01      	ldr	r2, [sp, #4]
   24ae4:	9903      	ldr	r1, [sp, #12]
   24ae6:	9309      	str	r3, [sp, #36]	; 0x24
   24ae8:	f006 fa99 	bl	2b01e <strncmp>
   24aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24aee:	2800      	cmp	r0, #0
   24af0:	d1d9      	bne.n	24aa6 <__gethex+0x202>
   24af2:	461e      	mov	r6, r3
   24af4:	e795      	b.n	24a22 <__gethex+0x17e>
   24af6:	1eb1      	subs	r1, r6, #2
   24af8:	4620      	mov	r0, r4
   24afa:	f006 fde6 	bl	2b6ca <__any_on>
   24afe:	2800      	cmp	r0, #0
   24b00:	d0b6      	beq.n	24a70 <__gethex+0x1cc>
   24b02:	f04f 0a03 	mov.w	sl, #3
   24b06:	e7b5      	b.n	24a74 <__gethex+0x1d0>
   24b08:	da09      	bge.n	24b1e <__gethex+0x27a>
   24b0a:	1bbe      	subs	r6, r7, r6
   24b0c:	4621      	mov	r1, r4
   24b0e:	9802      	ldr	r0, [sp, #8]
   24b10:	4632      	mov	r2, r6
   24b12:	1bad      	subs	r5, r5, r6
   24b14:	f000 fb14 	bl	25140 <__lshift>
   24b18:	4604      	mov	r4, r0
   24b1a:	f100 0914 	add.w	r9, r0, #20
   24b1e:	f04f 0a00 	mov.w	sl, #0
   24b22:	e7ac      	b.n	24a7e <__gethex+0x1da>
   24b24:	f8d8 3004 	ldr.w	r3, [r8, #4]
   24b28:	42ab      	cmp	r3, r5
   24b2a:	dd70      	ble.n	24c0e <__gethex+0x36a>
   24b2c:	1b5d      	subs	r5, r3, r5
   24b2e:	42af      	cmp	r7, r5
   24b30:	dc35      	bgt.n	24b9e <__gethex+0x2fa>
   24b32:	f8d8 300c 	ldr.w	r3, [r8, #12]
   24b36:	2b02      	cmp	r3, #2
   24b38:	d029      	beq.n	24b8e <__gethex+0x2ea>
   24b3a:	2b03      	cmp	r3, #3
   24b3c:	d02b      	beq.n	24b96 <__gethex+0x2f2>
   24b3e:	2b01      	cmp	r3, #1
   24b40:	d11c      	bne.n	24b7c <__gethex+0x2d8>
   24b42:	42af      	cmp	r7, r5
   24b44:	d11a      	bne.n	24b7c <__gethex+0x2d8>
   24b46:	2f01      	cmp	r7, #1
   24b48:	d112      	bne.n	24b70 <__gethex+0x2cc>
   24b4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   24b4e:	2662      	movs	r6, #98	; 0x62
   24b50:	9a05      	ldr	r2, [sp, #20]
   24b52:	6013      	str	r3, [r2, #0]
   24b54:	2301      	movs	r3, #1
   24b56:	6123      	str	r3, [r4, #16]
   24b58:	f8c9 3000 	str.w	r3, [r9]
   24b5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   24b5e:	601c      	str	r4, [r3, #0]
   24b60:	e72c      	b.n	249bc <__gethex+0x118>
   24b62:	bf00      	nop
   24b64:	0002cff8 	.word	0x0002cff8
   24b68:	00032c56 	.word	0x00032c56
   24b6c:	00032c67 	.word	0x00032c67
   24b70:	1e79      	subs	r1, r7, #1
   24b72:	4620      	mov	r0, r4
   24b74:	f006 fda9 	bl	2b6ca <__any_on>
   24b78:	2800      	cmp	r0, #0
   24b7a:	d1e6      	bne.n	24b4a <__gethex+0x2a6>
   24b7c:	4621      	mov	r1, r4
   24b7e:	9802      	ldr	r0, [sp, #8]
   24b80:	f000 f910 	bl	24da4 <_Bfree>
   24b84:	2300      	movs	r3, #0
   24b86:	9a14      	ldr	r2, [sp, #80]	; 0x50
   24b88:	2650      	movs	r6, #80	; 0x50
   24b8a:	6013      	str	r3, [r2, #0]
   24b8c:	e716      	b.n	249bc <__gethex+0x118>
   24b8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   24b90:	2b00      	cmp	r3, #0
   24b92:	d1f3      	bne.n	24b7c <__gethex+0x2d8>
   24b94:	e7d9      	b.n	24b4a <__gethex+0x2a6>
   24b96:	9b15      	ldr	r3, [sp, #84]	; 0x54
   24b98:	2b00      	cmp	r3, #0
   24b9a:	d1d6      	bne.n	24b4a <__gethex+0x2a6>
   24b9c:	e7ee      	b.n	24b7c <__gethex+0x2d8>
   24b9e:	1e6e      	subs	r6, r5, #1
   24ba0:	f1ba 0f00 	cmp.w	sl, #0
   24ba4:	d130      	bne.n	24c08 <__gethex+0x364>
   24ba6:	b126      	cbz	r6, 24bb2 <__gethex+0x30e>
   24ba8:	4631      	mov	r1, r6
   24baa:	4620      	mov	r0, r4
   24bac:	f006 fd8d 	bl	2b6ca <__any_on>
   24bb0:	4682      	mov	sl, r0
   24bb2:	1172      	asrs	r2, r6, #5
   24bb4:	2301      	movs	r3, #1
   24bb6:	f006 061f 	and.w	r6, r6, #31
   24bba:	4629      	mov	r1, r5
   24bbc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   24bc0:	4620      	mov	r0, r4
   24bc2:	40b3      	lsls	r3, r6
   24bc4:	1b7f      	subs	r7, r7, r5
   24bc6:	2602      	movs	r6, #2
   24bc8:	4213      	tst	r3, r2
   24bca:	bf18      	it	ne
   24bcc:	f04a 0a02 	orrne.w	sl, sl, #2
   24bd0:	f006 fb77 	bl	2b2c2 <rshift>
   24bd4:	f8d8 5004 	ldr.w	r5, [r8, #4]
   24bd8:	f1ba 0f00 	cmp.w	sl, #0
   24bdc:	d047      	beq.n	24c6e <__gethex+0x3ca>
   24bde:	f8d8 300c 	ldr.w	r3, [r8, #12]
   24be2:	2b02      	cmp	r3, #2
   24be4:	d015      	beq.n	24c12 <__gethex+0x36e>
   24be6:	2b03      	cmp	r3, #3
   24be8:	d017      	beq.n	24c1a <__gethex+0x376>
   24bea:	2b01      	cmp	r3, #1
   24bec:	d109      	bne.n	24c02 <__gethex+0x35e>
   24bee:	f01a 0f02 	tst.w	sl, #2
   24bf2:	d006      	beq.n	24c02 <__gethex+0x35e>
   24bf4:	f8d9 3000 	ldr.w	r3, [r9]
   24bf8:	ea4a 0a03 	orr.w	sl, sl, r3
   24bfc:	f01a 0f01 	tst.w	sl, #1
   24c00:	d10e      	bne.n	24c20 <__gethex+0x37c>
   24c02:	f046 0610 	orr.w	r6, r6, #16
   24c06:	e032      	b.n	24c6e <__gethex+0x3ca>
   24c08:	f04f 0a01 	mov.w	sl, #1
   24c0c:	e7d1      	b.n	24bb2 <__gethex+0x30e>
   24c0e:	2601      	movs	r6, #1
   24c10:	e7e2      	b.n	24bd8 <__gethex+0x334>
   24c12:	9b15      	ldr	r3, [sp, #84]	; 0x54
   24c14:	f1c3 0301 	rsb	r3, r3, #1
   24c18:	9315      	str	r3, [sp, #84]	; 0x54
   24c1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   24c1c:	2b00      	cmp	r3, #0
   24c1e:	d0f0      	beq.n	24c02 <__gethex+0x35e>
   24c20:	f8d4 b010 	ldr.w	fp, [r4, #16]
   24c24:	f104 0314 	add.w	r3, r4, #20
   24c28:	f04f 0c00 	mov.w	ip, #0
   24c2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   24c30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   24c34:	4618      	mov	r0, r3
   24c36:	f853 2b04 	ldr.w	r2, [r3], #4
   24c3a:	f1b2 3fff 	cmp.w	r2, #4294967295
   24c3e:	d01b      	beq.n	24c78 <__gethex+0x3d4>
   24c40:	3201      	adds	r2, #1
   24c42:	6002      	str	r2, [r0, #0]
   24c44:	2e02      	cmp	r6, #2
   24c46:	f104 0314 	add.w	r3, r4, #20
   24c4a:	d13c      	bne.n	24cc6 <__gethex+0x422>
   24c4c:	f8d8 2000 	ldr.w	r2, [r8]
   24c50:	3a01      	subs	r2, #1
   24c52:	42ba      	cmp	r2, r7
   24c54:	d109      	bne.n	24c6a <__gethex+0x3c6>
   24c56:	1179      	asrs	r1, r7, #5
   24c58:	2201      	movs	r2, #1
   24c5a:	f007 071f 	and.w	r7, r7, #31
   24c5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   24c62:	fa02 f707 	lsl.w	r7, r2, r7
   24c66:	421f      	tst	r7, r3
   24c68:	d13a      	bne.n	24ce0 <__gethex+0x43c>
   24c6a:	f046 0620 	orr.w	r6, r6, #32
   24c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   24c70:	601c      	str	r4, [r3, #0]
   24c72:	9b05      	ldr	r3, [sp, #20]
   24c74:	601d      	str	r5, [r3, #0]
   24c76:	e6a1      	b.n	249bc <__gethex+0x118>
   24c78:	4299      	cmp	r1, r3
   24c7a:	f843 cc04 	str.w	ip, [r3, #-4]
   24c7e:	d8d9      	bhi.n	24c34 <__gethex+0x390>
   24c80:	68a3      	ldr	r3, [r4, #8]
   24c82:	459b      	cmp	fp, r3
   24c84:	db17      	blt.n	24cb6 <__gethex+0x412>
   24c86:	6861      	ldr	r1, [r4, #4]
   24c88:	9802      	ldr	r0, [sp, #8]
   24c8a:	3101      	adds	r1, #1
   24c8c:	f000 f84a 	bl	24d24 <_Balloc>
   24c90:	4681      	mov	r9, r0
   24c92:	b918      	cbnz	r0, 24c9c <__gethex+0x3f8>
   24c94:	4b1a      	ldr	r3, [pc, #104]	; (24d00 <__gethex+0x45c>)
   24c96:	4602      	mov	r2, r0
   24c98:	2184      	movs	r1, #132	; 0x84
   24c9a:	e6b1      	b.n	24a00 <__gethex+0x15c>
   24c9c:	6922      	ldr	r2, [r4, #16]
   24c9e:	f104 010c 	add.w	r1, r4, #12
   24ca2:	300c      	adds	r0, #12
   24ca4:	3202      	adds	r2, #2
   24ca6:	0092      	lsls	r2, r2, #2
   24ca8:	f006 f842 	bl	2ad30 <memcpy>
   24cac:	4621      	mov	r1, r4
   24cae:	464c      	mov	r4, r9
   24cb0:	9802      	ldr	r0, [sp, #8]
   24cb2:	f000 f877 	bl	24da4 <_Bfree>
   24cb6:	6923      	ldr	r3, [r4, #16]
   24cb8:	1c5a      	adds	r2, r3, #1
   24cba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   24cbe:	6122      	str	r2, [r4, #16]
   24cc0:	2201      	movs	r2, #1
   24cc2:	615a      	str	r2, [r3, #20]
   24cc4:	e7be      	b.n	24c44 <__gethex+0x3a0>
   24cc6:	6922      	ldr	r2, [r4, #16]
   24cc8:	455a      	cmp	r2, fp
   24cca:	dd0b      	ble.n	24ce4 <__gethex+0x440>
   24ccc:	2101      	movs	r1, #1
   24cce:	4620      	mov	r0, r4
   24cd0:	f006 faf7 	bl	2b2c2 <rshift>
   24cd4:	3501      	adds	r5, #1
   24cd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   24cda:	42ab      	cmp	r3, r5
   24cdc:	f6ff aed3 	blt.w	24a86 <__gethex+0x1e2>
   24ce0:	2601      	movs	r6, #1
   24ce2:	e7c2      	b.n	24c6a <__gethex+0x3c6>
   24ce4:	f017 071f 	ands.w	r7, r7, #31
   24ce8:	d0fa      	beq.n	24ce0 <__gethex+0x43c>
   24cea:	4453      	add	r3, sl
   24cec:	f1c7 0720 	rsb	r7, r7, #32
   24cf0:	f853 0c04 	ldr.w	r0, [r3, #-4]
   24cf4:	f006 fc2c 	bl	2b550 <__hi0bits>
   24cf8:	42b8      	cmp	r0, r7
   24cfa:	dbe7      	blt.n	24ccc <__gethex+0x428>
   24cfc:	e7f0      	b.n	24ce0 <__gethex+0x43c>
   24cfe:	bf00      	nop
   24d00:	00032c56 	.word	0x00032c56

00024d04 <_localeconv_r>:
   24d04:	4800      	ldr	r0, [pc, #0]	; (24d08 <_localeconv_r+0x4>)
   24d06:	4770      	bx	lr
   24d08:	20008898 	.word	0x20008898

00024d0c <__malloc_lock>:
   24d0c:	4801      	ldr	r0, [pc, #4]	; (24d14 <__malloc_lock+0x8>)
   24d0e:	f7ed b90f 	b.w	11f30 <__retarget_lock_acquire_recursive>
   24d12:	bf00      	nop
   24d14:	20008a80 	.word	0x20008a80

00024d18 <__malloc_unlock>:
   24d18:	4801      	ldr	r0, [pc, #4]	; (24d20 <__malloc_unlock+0x8>)
   24d1a:	f7ed b925 	b.w	11f68 <__retarget_lock_release_recursive>
   24d1e:	bf00      	nop
   24d20:	20008a80 	.word	0x20008a80

00024d24 <_Balloc>:
   24d24:	b570      	push	{r4, r5, r6, lr}
   24d26:	6a46      	ldr	r6, [r0, #36]	; 0x24
   24d28:	4604      	mov	r4, r0
   24d2a:	460d      	mov	r5, r1
   24d2c:	b976      	cbnz	r6, 24d4c <_Balloc+0x28>
   24d2e:	2010      	movs	r0, #16
   24d30:	f7ff f850 	bl	23dd4 <malloc>
   24d34:	4602      	mov	r2, r0
   24d36:	6260      	str	r0, [r4, #36]	; 0x24
   24d38:	b920      	cbnz	r0, 24d44 <_Balloc+0x20>
   24d3a:	4b18      	ldr	r3, [pc, #96]	; (24d9c <_Balloc+0x78>)
   24d3c:	2166      	movs	r1, #102	; 0x66
   24d3e:	4818      	ldr	r0, [pc, #96]	; (24da0 <_Balloc+0x7c>)
   24d40:	f7ff fcc0 	bl	246c4 <__assert_func>
   24d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
   24d48:	6006      	str	r6, [r0, #0]
   24d4a:	60c6      	str	r6, [r0, #12]
   24d4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   24d4e:	68f3      	ldr	r3, [r6, #12]
   24d50:	b183      	cbz	r3, 24d74 <_Balloc+0x50>
   24d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24d54:	68db      	ldr	r3, [r3, #12]
   24d56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   24d5a:	b9b8      	cbnz	r0, 24d8c <_Balloc+0x68>
   24d5c:	2101      	movs	r1, #1
   24d5e:	4620      	mov	r0, r4
   24d60:	fa01 f605 	lsl.w	r6, r1, r5
   24d64:	1d72      	adds	r2, r6, #5
   24d66:	0092      	lsls	r2, r2, #2
   24d68:	f006 f824 	bl	2adb4 <_calloc_r>
   24d6c:	b160      	cbz	r0, 24d88 <_Balloc+0x64>
   24d6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   24d72:	e00e      	b.n	24d92 <_Balloc+0x6e>
   24d74:	2221      	movs	r2, #33	; 0x21
   24d76:	2104      	movs	r1, #4
   24d78:	4620      	mov	r0, r4
   24d7a:	f006 f81b 	bl	2adb4 <_calloc_r>
   24d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24d80:	60f0      	str	r0, [r6, #12]
   24d82:	68db      	ldr	r3, [r3, #12]
   24d84:	2b00      	cmp	r3, #0
   24d86:	d1e4      	bne.n	24d52 <_Balloc+0x2e>
   24d88:	2000      	movs	r0, #0
   24d8a:	bd70      	pop	{r4, r5, r6, pc}
   24d8c:	6802      	ldr	r2, [r0, #0]
   24d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   24d92:	2300      	movs	r3, #0
   24d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
   24d98:	e7f7      	b.n	24d8a <_Balloc+0x66>
   24d9a:	bf00      	nop
   24d9c:	00032b0c 	.word	0x00032b0c
   24da0:	00032ce9 	.word	0x00032ce9

00024da4 <_Bfree>:
   24da4:	b570      	push	{r4, r5, r6, lr}
   24da6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   24da8:	4605      	mov	r5, r0
   24daa:	460c      	mov	r4, r1
   24dac:	b976      	cbnz	r6, 24dcc <_Bfree+0x28>
   24dae:	2010      	movs	r0, #16
   24db0:	f7ff f810 	bl	23dd4 <malloc>
   24db4:	4602      	mov	r2, r0
   24db6:	6268      	str	r0, [r5, #36]	; 0x24
   24db8:	b920      	cbnz	r0, 24dc4 <_Bfree+0x20>
   24dba:	4b09      	ldr	r3, [pc, #36]	; (24de0 <_Bfree+0x3c>)
   24dbc:	218a      	movs	r1, #138	; 0x8a
   24dbe:	4809      	ldr	r0, [pc, #36]	; (24de4 <_Bfree+0x40>)
   24dc0:	f7ff fc80 	bl	246c4 <__assert_func>
   24dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   24dc8:	6006      	str	r6, [r0, #0]
   24dca:	60c6      	str	r6, [r0, #12]
   24dcc:	b13c      	cbz	r4, 24dde <_Bfree+0x3a>
   24dce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   24dd0:	6862      	ldr	r2, [r4, #4]
   24dd2:	68db      	ldr	r3, [r3, #12]
   24dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   24dd8:	6021      	str	r1, [r4, #0]
   24dda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   24dde:	bd70      	pop	{r4, r5, r6, pc}
   24de0:	00032b0c 	.word	0x00032b0c
   24de4:	00032ce9 	.word	0x00032ce9

00024de8 <__multadd>:
   24de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24dec:	f101 0c14 	add.w	ip, r1, #20
   24df0:	4607      	mov	r7, r0
   24df2:	460c      	mov	r4, r1
   24df4:	461e      	mov	r6, r3
   24df6:	690d      	ldr	r5, [r1, #16]
   24df8:	2000      	movs	r0, #0
   24dfa:	f8dc 3000 	ldr.w	r3, [ip]
   24dfe:	3001      	adds	r0, #1
   24e00:	b299      	uxth	r1, r3
   24e02:	4285      	cmp	r5, r0
   24e04:	fb02 6101 	mla	r1, r2, r1, r6
   24e08:	ea4f 4613 	mov.w	r6, r3, lsr #16
   24e0c:	ea4f 4311 	mov.w	r3, r1, lsr #16
   24e10:	b289      	uxth	r1, r1
   24e12:	fb02 3306 	mla	r3, r2, r6, r3
   24e16:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   24e1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   24e1e:	f84c 1b04 	str.w	r1, [ip], #4
   24e22:	dcea      	bgt.n	24dfa <__multadd+0x12>
   24e24:	b30e      	cbz	r6, 24e6a <__multadd+0x82>
   24e26:	68a3      	ldr	r3, [r4, #8]
   24e28:	42ab      	cmp	r3, r5
   24e2a:	dc19      	bgt.n	24e60 <__multadd+0x78>
   24e2c:	6861      	ldr	r1, [r4, #4]
   24e2e:	4638      	mov	r0, r7
   24e30:	3101      	adds	r1, #1
   24e32:	f7ff ff77 	bl	24d24 <_Balloc>
   24e36:	4680      	mov	r8, r0
   24e38:	b928      	cbnz	r0, 24e46 <__multadd+0x5e>
   24e3a:	4602      	mov	r2, r0
   24e3c:	4b0c      	ldr	r3, [pc, #48]	; (24e70 <__multadd+0x88>)
   24e3e:	21b5      	movs	r1, #181	; 0xb5
   24e40:	480c      	ldr	r0, [pc, #48]	; (24e74 <__multadd+0x8c>)
   24e42:	f7ff fc3f 	bl	246c4 <__assert_func>
   24e46:	6922      	ldr	r2, [r4, #16]
   24e48:	f104 010c 	add.w	r1, r4, #12
   24e4c:	300c      	adds	r0, #12
   24e4e:	3202      	adds	r2, #2
   24e50:	0092      	lsls	r2, r2, #2
   24e52:	f005 ff6d 	bl	2ad30 <memcpy>
   24e56:	4621      	mov	r1, r4
   24e58:	4644      	mov	r4, r8
   24e5a:	4638      	mov	r0, r7
   24e5c:	f7ff ffa2 	bl	24da4 <_Bfree>
   24e60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   24e64:	3501      	adds	r5, #1
   24e66:	615e      	str	r6, [r3, #20]
   24e68:	6125      	str	r5, [r4, #16]
   24e6a:	4620      	mov	r0, r4
   24e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24e70:	00032c56 	.word	0x00032c56
   24e74:	00032ce9 	.word	0x00032ce9

00024e78 <__s2b>:
   24e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24e7c:	4615      	mov	r5, r2
   24e7e:	461f      	mov	r7, r3
   24e80:	2209      	movs	r2, #9
   24e82:	3308      	adds	r3, #8
   24e84:	460c      	mov	r4, r1
   24e86:	4606      	mov	r6, r0
   24e88:	2100      	movs	r1, #0
   24e8a:	fb93 f3f2 	sdiv	r3, r3, r2
   24e8e:	2201      	movs	r2, #1
   24e90:	429a      	cmp	r2, r3
   24e92:	db09      	blt.n	24ea8 <__s2b+0x30>
   24e94:	4630      	mov	r0, r6
   24e96:	f7ff ff45 	bl	24d24 <_Balloc>
   24e9a:	b940      	cbnz	r0, 24eae <__s2b+0x36>
   24e9c:	4602      	mov	r2, r0
   24e9e:	4b19      	ldr	r3, [pc, #100]	; (24f04 <__s2b+0x8c>)
   24ea0:	21ce      	movs	r1, #206	; 0xce
   24ea2:	4819      	ldr	r0, [pc, #100]	; (24f08 <__s2b+0x90>)
   24ea4:	f7ff fc0e 	bl	246c4 <__assert_func>
   24ea8:	0052      	lsls	r2, r2, #1
   24eaa:	3101      	adds	r1, #1
   24eac:	e7f0      	b.n	24e90 <__s2b+0x18>
   24eae:	9b08      	ldr	r3, [sp, #32]
   24eb0:	2d09      	cmp	r5, #9
   24eb2:	6143      	str	r3, [r0, #20]
   24eb4:	f04f 0301 	mov.w	r3, #1
   24eb8:	6103      	str	r3, [r0, #16]
   24eba:	dd16      	ble.n	24eea <__s2b+0x72>
   24ebc:	f104 0909 	add.w	r9, r4, #9
   24ec0:	442c      	add	r4, r5
   24ec2:	46c8      	mov	r8, r9
   24ec4:	f818 3b01 	ldrb.w	r3, [r8], #1
   24ec8:	4601      	mov	r1, r0
   24eca:	220a      	movs	r2, #10
   24ecc:	4630      	mov	r0, r6
   24ece:	3b30      	subs	r3, #48	; 0x30
   24ed0:	f7ff ff8a 	bl	24de8 <__multadd>
   24ed4:	45a0      	cmp	r8, r4
   24ed6:	d1f5      	bne.n	24ec4 <__s2b+0x4c>
   24ed8:	f1a5 0408 	sub.w	r4, r5, #8
   24edc:	444c      	add	r4, r9
   24ede:	1b2d      	subs	r5, r5, r4
   24ee0:	1963      	adds	r3, r4, r5
   24ee2:	42bb      	cmp	r3, r7
   24ee4:	db04      	blt.n	24ef0 <__s2b+0x78>
   24ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24eea:	340a      	adds	r4, #10
   24eec:	2509      	movs	r5, #9
   24eee:	e7f6      	b.n	24ede <__s2b+0x66>
   24ef0:	f814 3b01 	ldrb.w	r3, [r4], #1
   24ef4:	4601      	mov	r1, r0
   24ef6:	220a      	movs	r2, #10
   24ef8:	4630      	mov	r0, r6
   24efa:	3b30      	subs	r3, #48	; 0x30
   24efc:	f7ff ff74 	bl	24de8 <__multadd>
   24f00:	e7ee      	b.n	24ee0 <__s2b+0x68>
   24f02:	bf00      	nop
   24f04:	00032c56 	.word	0x00032c56
   24f08:	00032ce9 	.word	0x00032ce9

00024f0c <__i2b>:
   24f0c:	b510      	push	{r4, lr}
   24f0e:	460c      	mov	r4, r1
   24f10:	2101      	movs	r1, #1
   24f12:	f7ff ff07 	bl	24d24 <_Balloc>
   24f16:	4602      	mov	r2, r0
   24f18:	b928      	cbnz	r0, 24f26 <__i2b+0x1a>
   24f1a:	4b05      	ldr	r3, [pc, #20]	; (24f30 <__i2b+0x24>)
   24f1c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   24f20:	4804      	ldr	r0, [pc, #16]	; (24f34 <__i2b+0x28>)
   24f22:	f7ff fbcf 	bl	246c4 <__assert_func>
   24f26:	2301      	movs	r3, #1
   24f28:	6144      	str	r4, [r0, #20]
   24f2a:	6103      	str	r3, [r0, #16]
   24f2c:	bd10      	pop	{r4, pc}
   24f2e:	bf00      	nop
   24f30:	00032c56 	.word	0x00032c56
   24f34:	00032ce9 	.word	0x00032ce9

00024f38 <__multiply>:
   24f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f3c:	4614      	mov	r4, r2
   24f3e:	690a      	ldr	r2, [r1, #16]
   24f40:	460f      	mov	r7, r1
   24f42:	b085      	sub	sp, #20
   24f44:	6923      	ldr	r3, [r4, #16]
   24f46:	429a      	cmp	r2, r3
   24f48:	bfa2      	ittt	ge
   24f4a:	4623      	movge	r3, r4
   24f4c:	460c      	movge	r4, r1
   24f4e:	461f      	movge	r7, r3
   24f50:	f8d4 a010 	ldr.w	sl, [r4, #16]
   24f54:	68a3      	ldr	r3, [r4, #8]
   24f56:	f8d7 9010 	ldr.w	r9, [r7, #16]
   24f5a:	6861      	ldr	r1, [r4, #4]
   24f5c:	eb0a 0609 	add.w	r6, sl, r9
   24f60:	42b3      	cmp	r3, r6
   24f62:	bfb8      	it	lt
   24f64:	3101      	addlt	r1, #1
   24f66:	f7ff fedd 	bl	24d24 <_Balloc>
   24f6a:	b930      	cbnz	r0, 24f7a <__multiply+0x42>
   24f6c:	4602      	mov	r2, r0
   24f6e:	4b45      	ldr	r3, [pc, #276]	; (25084 <__multiply+0x14c>)
   24f70:	f240 115d 	movw	r1, #349	; 0x15d
   24f74:	4844      	ldr	r0, [pc, #272]	; (25088 <__multiply+0x150>)
   24f76:	f7ff fba5 	bl	246c4 <__assert_func>
   24f7a:	f100 0514 	add.w	r5, r0, #20
   24f7e:	2200      	movs	r2, #0
   24f80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   24f84:	462b      	mov	r3, r5
   24f86:	4543      	cmp	r3, r8
   24f88:	d321      	bcc.n	24fce <__multiply+0x96>
   24f8a:	f107 0114 	add.w	r1, r7, #20
   24f8e:	f104 0214 	add.w	r2, r4, #20
   24f92:	f104 0715 	add.w	r7, r4, #21
   24f96:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   24f9a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   24f9e:	9302      	str	r3, [sp, #8]
   24fa0:	1b13      	subs	r3, r2, r4
   24fa2:	3b15      	subs	r3, #21
   24fa4:	f023 0303 	bic.w	r3, r3, #3
   24fa8:	3304      	adds	r3, #4
   24faa:	42ba      	cmp	r2, r7
   24fac:	bf38      	it	cc
   24fae:	2304      	movcc	r3, #4
   24fb0:	9301      	str	r3, [sp, #4]
   24fb2:	9b02      	ldr	r3, [sp, #8]
   24fb4:	9103      	str	r1, [sp, #12]
   24fb6:	428b      	cmp	r3, r1
   24fb8:	d80c      	bhi.n	24fd4 <__multiply+0x9c>
   24fba:	2e00      	cmp	r6, #0
   24fbc:	dd03      	ble.n	24fc6 <__multiply+0x8e>
   24fbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   24fc2:	2b00      	cmp	r3, #0
   24fc4:	d05b      	beq.n	2507e <__multiply+0x146>
   24fc6:	6106      	str	r6, [r0, #16]
   24fc8:	b005      	add	sp, #20
   24fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fce:	f843 2b04 	str.w	r2, [r3], #4
   24fd2:	e7d8      	b.n	24f86 <__multiply+0x4e>
   24fd4:	f8b1 a000 	ldrh.w	sl, [r1]
   24fd8:	f1ba 0f00 	cmp.w	sl, #0
   24fdc:	d024      	beq.n	25028 <__multiply+0xf0>
   24fde:	f104 0e14 	add.w	lr, r4, #20
   24fe2:	46a9      	mov	r9, r5
   24fe4:	f04f 0c00 	mov.w	ip, #0
   24fe8:	f85e 7b04 	ldr.w	r7, [lr], #4
   24fec:	f8d9 3000 	ldr.w	r3, [r9]
   24ff0:	fa1f fb87 	uxth.w	fp, r7
   24ff4:	4572      	cmp	r2, lr
   24ff6:	b29b      	uxth	r3, r3
   24ff8:	ea4f 4717 	mov.w	r7, r7, lsr #16
   24ffc:	fb0a 330b 	mla	r3, sl, fp, r3
   25000:	4463      	add	r3, ip
   25002:	f8d9 c000 	ldr.w	ip, [r9]
   25006:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   2500a:	fb0a c707 	mla	r7, sl, r7, ip
   2500e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   25012:	b29b      	uxth	r3, r3
   25014:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   25018:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2501c:	f849 3b04 	str.w	r3, [r9], #4
   25020:	d8e2      	bhi.n	24fe8 <__multiply+0xb0>
   25022:	9b01      	ldr	r3, [sp, #4]
   25024:	f845 c003 	str.w	ip, [r5, r3]
   25028:	9b03      	ldr	r3, [sp, #12]
   2502a:	3104      	adds	r1, #4
   2502c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   25030:	f1b9 0f00 	cmp.w	r9, #0
   25034:	d021      	beq.n	2507a <__multiply+0x142>
   25036:	682b      	ldr	r3, [r5, #0]
   25038:	f104 0c14 	add.w	ip, r4, #20
   2503c:	46ae      	mov	lr, r5
   2503e:	f04f 0a00 	mov.w	sl, #0
   25042:	f8bc b000 	ldrh.w	fp, [ip]
   25046:	b29b      	uxth	r3, r3
   25048:	f8be 7002 	ldrh.w	r7, [lr, #2]
   2504c:	fb09 770b 	mla	r7, r9, fp, r7
   25050:	4457      	add	r7, sl
   25052:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   25056:	f84e 3b04 	str.w	r3, [lr], #4
   2505a:	f85c 3b04 	ldr.w	r3, [ip], #4
   2505e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   25062:	f8be 3000 	ldrh.w	r3, [lr]
   25066:	4562      	cmp	r2, ip
   25068:	fb09 330a 	mla	r3, r9, sl, r3
   2506c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   25070:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   25074:	d8e5      	bhi.n	25042 <__multiply+0x10a>
   25076:	9f01      	ldr	r7, [sp, #4]
   25078:	51eb      	str	r3, [r5, r7]
   2507a:	3504      	adds	r5, #4
   2507c:	e799      	b.n	24fb2 <__multiply+0x7a>
   2507e:	3e01      	subs	r6, #1
   25080:	e79b      	b.n	24fba <__multiply+0x82>
   25082:	bf00      	nop
   25084:	00032c56 	.word	0x00032c56
   25088:	00032ce9 	.word	0x00032ce9

0002508c <__pow5mult>:
   2508c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25090:	4615      	mov	r5, r2
   25092:	f012 0203 	ands.w	r2, r2, #3
   25096:	4607      	mov	r7, r0
   25098:	460e      	mov	r6, r1
   2509a:	d007      	beq.n	250ac <__pow5mult+0x20>
   2509c:	3a01      	subs	r2, #1
   2509e:	4c25      	ldr	r4, [pc, #148]	; (25134 <__pow5mult+0xa8>)
   250a0:	2300      	movs	r3, #0
   250a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   250a6:	f7ff fe9f 	bl	24de8 <__multadd>
   250aa:	4606      	mov	r6, r0
   250ac:	10ad      	asrs	r5, r5, #2
   250ae:	d03d      	beq.n	2512c <__pow5mult+0xa0>
   250b0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   250b2:	b97c      	cbnz	r4, 250d4 <__pow5mult+0x48>
   250b4:	2010      	movs	r0, #16
   250b6:	f7fe fe8d 	bl	23dd4 <malloc>
   250ba:	4602      	mov	r2, r0
   250bc:	6278      	str	r0, [r7, #36]	; 0x24
   250be:	b928      	cbnz	r0, 250cc <__pow5mult+0x40>
   250c0:	4b1d      	ldr	r3, [pc, #116]	; (25138 <__pow5mult+0xac>)
   250c2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   250c6:	481d      	ldr	r0, [pc, #116]	; (2513c <__pow5mult+0xb0>)
   250c8:	f7ff fafc 	bl	246c4 <__assert_func>
   250cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   250d0:	6004      	str	r4, [r0, #0]
   250d2:	60c4      	str	r4, [r0, #12]
   250d4:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   250d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   250dc:	b94c      	cbnz	r4, 250f2 <__pow5mult+0x66>
   250de:	f240 2171 	movw	r1, #625	; 0x271
   250e2:	4638      	mov	r0, r7
   250e4:	f7ff ff12 	bl	24f0c <__i2b>
   250e8:	2300      	movs	r3, #0
   250ea:	4604      	mov	r4, r0
   250ec:	f8c8 0008 	str.w	r0, [r8, #8]
   250f0:	6003      	str	r3, [r0, #0]
   250f2:	f04f 0900 	mov.w	r9, #0
   250f6:	07eb      	lsls	r3, r5, #31
   250f8:	d50a      	bpl.n	25110 <__pow5mult+0x84>
   250fa:	4631      	mov	r1, r6
   250fc:	4622      	mov	r2, r4
   250fe:	4638      	mov	r0, r7
   25100:	f7ff ff1a 	bl	24f38 <__multiply>
   25104:	4680      	mov	r8, r0
   25106:	4631      	mov	r1, r6
   25108:	4638      	mov	r0, r7
   2510a:	4646      	mov	r6, r8
   2510c:	f7ff fe4a 	bl	24da4 <_Bfree>
   25110:	106d      	asrs	r5, r5, #1
   25112:	d00b      	beq.n	2512c <__pow5mult+0xa0>
   25114:	6820      	ldr	r0, [r4, #0]
   25116:	b938      	cbnz	r0, 25128 <__pow5mult+0x9c>
   25118:	4622      	mov	r2, r4
   2511a:	4621      	mov	r1, r4
   2511c:	4638      	mov	r0, r7
   2511e:	f7ff ff0b 	bl	24f38 <__multiply>
   25122:	6020      	str	r0, [r4, #0]
   25124:	f8c0 9000 	str.w	r9, [r0]
   25128:	4604      	mov	r4, r0
   2512a:	e7e4      	b.n	250f6 <__pow5mult+0x6a>
   2512c:	4630      	mov	r0, r6
   2512e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25132:	bf00      	nop
   25134:	0002d004 	.word	0x0002d004
   25138:	00032b0c 	.word	0x00032b0c
   2513c:	00032ce9 	.word	0x00032ce9

00025140 <__lshift>:
   25140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25144:	460c      	mov	r4, r1
   25146:	4607      	mov	r7, r0
   25148:	4691      	mov	r9, r2
   2514a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2514e:	6923      	ldr	r3, [r4, #16]
   25150:	6849      	ldr	r1, [r1, #4]
   25152:	eb03 1862 	add.w	r8, r3, r2, asr #5
   25156:	68a3      	ldr	r3, [r4, #8]
   25158:	f108 0601 	add.w	r6, r8, #1
   2515c:	42b3      	cmp	r3, r6
   2515e:	db0b      	blt.n	25178 <__lshift+0x38>
   25160:	4638      	mov	r0, r7
   25162:	f7ff fddf 	bl	24d24 <_Balloc>
   25166:	4605      	mov	r5, r0
   25168:	b948      	cbnz	r0, 2517e <__lshift+0x3e>
   2516a:	4602      	mov	r2, r0
   2516c:	4b28      	ldr	r3, [pc, #160]	; (25210 <__lshift+0xd0>)
   2516e:	f240 11d9 	movw	r1, #473	; 0x1d9
   25172:	4828      	ldr	r0, [pc, #160]	; (25214 <__lshift+0xd4>)
   25174:	f7ff faa6 	bl	246c4 <__assert_func>
   25178:	3101      	adds	r1, #1
   2517a:	005b      	lsls	r3, r3, #1
   2517c:	e7ee      	b.n	2515c <__lshift+0x1c>
   2517e:	2300      	movs	r3, #0
   25180:	f100 0114 	add.w	r1, r0, #20
   25184:	f100 0210 	add.w	r2, r0, #16
   25188:	4618      	mov	r0, r3
   2518a:	4553      	cmp	r3, sl
   2518c:	db33      	blt.n	251f6 <__lshift+0xb6>
   2518e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   25192:	f104 0314 	add.w	r3, r4, #20
   25196:	6920      	ldr	r0, [r4, #16]
   25198:	f019 091f 	ands.w	r9, r9, #31
   2519c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   251a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   251a4:	d02b      	beq.n	251fe <__lshift+0xbe>
   251a6:	f1c9 0e20 	rsb	lr, r9, #32
   251aa:	468a      	mov	sl, r1
   251ac:	2200      	movs	r2, #0
   251ae:	6818      	ldr	r0, [r3, #0]
   251b0:	fa00 f009 	lsl.w	r0, r0, r9
   251b4:	4310      	orrs	r0, r2
   251b6:	f84a 0b04 	str.w	r0, [sl], #4
   251ba:	f853 2b04 	ldr.w	r2, [r3], #4
   251be:	459c      	cmp	ip, r3
   251c0:	fa22 f20e 	lsr.w	r2, r2, lr
   251c4:	d8f3      	bhi.n	251ae <__lshift+0x6e>
   251c6:	ebac 0304 	sub.w	r3, ip, r4
   251ca:	f104 0015 	add.w	r0, r4, #21
   251ce:	3b15      	subs	r3, #21
   251d0:	f023 0303 	bic.w	r3, r3, #3
   251d4:	3304      	adds	r3, #4
   251d6:	4584      	cmp	ip, r0
   251d8:	bf38      	it	cc
   251da:	2304      	movcc	r3, #4
   251dc:	50ca      	str	r2, [r1, r3]
   251de:	b10a      	cbz	r2, 251e4 <__lshift+0xa4>
   251e0:	f108 0602 	add.w	r6, r8, #2
   251e4:	3e01      	subs	r6, #1
   251e6:	4638      	mov	r0, r7
   251e8:	4621      	mov	r1, r4
   251ea:	612e      	str	r6, [r5, #16]
   251ec:	f7ff fdda 	bl	24da4 <_Bfree>
   251f0:	4628      	mov	r0, r5
   251f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   251f6:	3301      	adds	r3, #1
   251f8:	f842 0f04 	str.w	r0, [r2, #4]!
   251fc:	e7c5      	b.n	2518a <__lshift+0x4a>
   251fe:	3904      	subs	r1, #4
   25200:	f853 2b04 	ldr.w	r2, [r3], #4
   25204:	459c      	cmp	ip, r3
   25206:	f841 2f04 	str.w	r2, [r1, #4]!
   2520a:	d8f9      	bhi.n	25200 <__lshift+0xc0>
   2520c:	e7ea      	b.n	251e4 <__lshift+0xa4>
   2520e:	bf00      	nop
   25210:	00032c56 	.word	0x00032c56
   25214:	00032ce9 	.word	0x00032ce9

00025218 <__mdiff>:
   25218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2521c:	4689      	mov	r9, r1
   2521e:	4606      	mov	r6, r0
   25220:	4611      	mov	r1, r2
   25222:	4614      	mov	r4, r2
   25224:	4648      	mov	r0, r9
   25226:	f006 f9e2 	bl	2b5ee <__mcmp>
   2522a:	1e05      	subs	r5, r0, #0
   2522c:	d112      	bne.n	25254 <__mdiff+0x3c>
   2522e:	4629      	mov	r1, r5
   25230:	4630      	mov	r0, r6
   25232:	f7ff fd77 	bl	24d24 <_Balloc>
   25236:	4602      	mov	r2, r0
   25238:	b928      	cbnz	r0, 25246 <__mdiff+0x2e>
   2523a:	4b40      	ldr	r3, [pc, #256]	; (2533c <__mdiff+0x124>)
   2523c:	f240 2132 	movw	r1, #562	; 0x232
   25240:	483f      	ldr	r0, [pc, #252]	; (25340 <__mdiff+0x128>)
   25242:	f7ff fa3f 	bl	246c4 <__assert_func>
   25246:	2301      	movs	r3, #1
   25248:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2524c:	4610      	mov	r0, r2
   2524e:	b003      	add	sp, #12
   25250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25254:	bfbc      	itt	lt
   25256:	464b      	movlt	r3, r9
   25258:	46a1      	movlt	r9, r4
   2525a:	4630      	mov	r0, r6
   2525c:	bfb8      	it	lt
   2525e:	2501      	movlt	r5, #1
   25260:	f8d9 1004 	ldr.w	r1, [r9, #4]
   25264:	bfb4      	ite	lt
   25266:	461c      	movlt	r4, r3
   25268:	2500      	movge	r5, #0
   2526a:	f7ff fd5b 	bl	24d24 <_Balloc>
   2526e:	4602      	mov	r2, r0
   25270:	b918      	cbnz	r0, 2527a <__mdiff+0x62>
   25272:	4b32      	ldr	r3, [pc, #200]	; (2533c <__mdiff+0x124>)
   25274:	f44f 7110 	mov.w	r1, #576	; 0x240
   25278:	e7e2      	b.n	25240 <__mdiff+0x28>
   2527a:	f8d9 7010 	ldr.w	r7, [r9, #16]
   2527e:	f104 0e14 	add.w	lr, r4, #20
   25282:	6926      	ldr	r6, [r4, #16]
   25284:	f100 0b14 	add.w	fp, r0, #20
   25288:	60c5      	str	r5, [r0, #12]
   2528a:	f109 0514 	add.w	r5, r9, #20
   2528e:	f109 0310 	add.w	r3, r9, #16
   25292:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   25296:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   2529a:	46d9      	mov	r9, fp
   2529c:	f04f 0c00 	mov.w	ip, #0
   252a0:	9301      	str	r3, [sp, #4]
   252a2:	9b01      	ldr	r3, [sp, #4]
   252a4:	f85e 0b04 	ldr.w	r0, [lr], #4
   252a8:	f853 af04 	ldr.w	sl, [r3, #4]!
   252ac:	b281      	uxth	r1, r0
   252ae:	4576      	cmp	r6, lr
   252b0:	9301      	str	r3, [sp, #4]
   252b2:	fa1f f38a 	uxth.w	r3, sl
   252b6:	ea4f 4010 	mov.w	r0, r0, lsr #16
   252ba:	eba3 0301 	sub.w	r3, r3, r1
   252be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   252c2:	4463      	add	r3, ip
   252c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
   252c8:	b29b      	uxth	r3, r3
   252ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
   252ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   252d2:	f849 3b04 	str.w	r3, [r9], #4
   252d6:	d8e4      	bhi.n	252a2 <__mdiff+0x8a>
   252d8:	1b33      	subs	r3, r6, r4
   252da:	3415      	adds	r4, #21
   252dc:	3b15      	subs	r3, #21
   252de:	f023 0303 	bic.w	r3, r3, #3
   252e2:	3304      	adds	r3, #4
   252e4:	42a6      	cmp	r6, r4
   252e6:	bf38      	it	cc
   252e8:	2304      	movcc	r3, #4
   252ea:	441d      	add	r5, r3
   252ec:	445b      	add	r3, fp
   252ee:	462c      	mov	r4, r5
   252f0:	461e      	mov	r6, r3
   252f2:	4544      	cmp	r4, r8
   252f4:	d30e      	bcc.n	25314 <__mdiff+0xfc>
   252f6:	f108 0103 	add.w	r1, r8, #3
   252fa:	1b49      	subs	r1, r1, r5
   252fc:	3d03      	subs	r5, #3
   252fe:	f021 0103 	bic.w	r1, r1, #3
   25302:	45a8      	cmp	r8, r5
   25304:	bf38      	it	cc
   25306:	2100      	movcc	r1, #0
   25308:	440b      	add	r3, r1
   2530a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2530e:	b199      	cbz	r1, 25338 <__mdiff+0x120>
   25310:	6117      	str	r7, [r2, #16]
   25312:	e79b      	b.n	2524c <__mdiff+0x34>
   25314:	f854 1b04 	ldr.w	r1, [r4], #4
   25318:	46e6      	mov	lr, ip
   2531a:	fa1f fc81 	uxth.w	ip, r1
   2531e:	0c08      	lsrs	r0, r1, #16
   25320:	4471      	add	r1, lr
   25322:	44f4      	add	ip, lr
   25324:	b289      	uxth	r1, r1
   25326:	eb00 402c 	add.w	r0, r0, ip, asr #16
   2532a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   2532e:	ea4f 4c20 	mov.w	ip, r0, asr #16
   25332:	f846 1b04 	str.w	r1, [r6], #4
   25336:	e7dc      	b.n	252f2 <__mdiff+0xda>
   25338:	3f01      	subs	r7, #1
   2533a:	e7e6      	b.n	2530a <__mdiff+0xf2>
   2533c:	00032c56 	.word	0x00032c56
   25340:	00032ce9 	.word	0x00032ce9

00025344 <__ulp>:
   25344:	4b0e      	ldr	r3, [pc, #56]	; (25380 <__ulp+0x3c>)
   25346:	400b      	ands	r3, r1
   25348:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   2534c:	2b00      	cmp	r3, #0
   2534e:	dc08      	bgt.n	25362 <__ulp+0x1e>
   25350:	425b      	negs	r3, r3
   25352:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   25356:	ea4f 5223 	mov.w	r2, r3, asr #20
   2535a:	da04      	bge.n	25366 <__ulp+0x22>
   2535c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   25360:	4113      	asrs	r3, r2
   25362:	2200      	movs	r2, #0
   25364:	e008      	b.n	25378 <__ulp+0x34>
   25366:	f1a2 0314 	sub.w	r3, r2, #20
   2536a:	2b1e      	cmp	r3, #30
   2536c:	bfd6      	itet	le
   2536e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   25372:	2201      	movgt	r2, #1
   25374:	40da      	lsrle	r2, r3
   25376:	2300      	movs	r3, #0
   25378:	4619      	mov	r1, r3
   2537a:	4610      	mov	r0, r2
   2537c:	4770      	bx	lr
   2537e:	bf00      	nop
   25380:	7ff00000 	.word	0x7ff00000

00025384 <__b2d>:
   25384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25386:	6902      	ldr	r2, [r0, #16]
   25388:	f100 0614 	add.w	r6, r0, #20
   2538c:	4f21      	ldr	r7, [pc, #132]	; (25414 <__b2d+0x90>)
   2538e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   25392:	f852 4c04 	ldr.w	r4, [r2, #-4]
   25396:	1f15      	subs	r5, r2, #4
   25398:	4620      	mov	r0, r4
   2539a:	f006 f8d9 	bl	2b550 <__hi0bits>
   2539e:	4603      	mov	r3, r0
   253a0:	f1c0 0020 	rsb	r0, r0, #32
   253a4:	2b0a      	cmp	r3, #10
   253a6:	6008      	str	r0, [r1, #0]
   253a8:	dc13      	bgt.n	253d2 <__b2d+0x4e>
   253aa:	42ae      	cmp	r6, r5
   253ac:	f1c3 0c0b 	rsb	ip, r3, #11
   253b0:	f103 0315 	add.w	r3, r3, #21
   253b4:	bf34      	ite	cc
   253b6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   253ba:	2200      	movcs	r2, #0
   253bc:	fa24 fe0c 	lsr.w	lr, r4, ip
   253c0:	fa04 f303 	lsl.w	r3, r4, r3
   253c4:	fa22 f20c 	lsr.w	r2, r2, ip
   253c8:	ea4e 0107 	orr.w	r1, lr, r7
   253cc:	431a      	orrs	r2, r3
   253ce:	4610      	mov	r0, r2
   253d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   253d2:	42ae      	cmp	r6, r5
   253d4:	bf36      	itet	cc
   253d6:	f1a2 0508 	subcc.w	r5, r2, #8
   253da:	2200      	movcs	r2, #0
   253dc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   253e0:	3b0b      	subs	r3, #11
   253e2:	d014      	beq.n	2540e <__b2d+0x8a>
   253e4:	f1c3 0720 	rsb	r7, r3, #32
   253e8:	409c      	lsls	r4, r3
   253ea:	42b5      	cmp	r5, r6
   253ec:	fa22 f107 	lsr.w	r1, r2, r7
   253f0:	fa02 f203 	lsl.w	r2, r2, r3
   253f4:	ea44 0401 	orr.w	r4, r4, r1
   253f8:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
   253fc:	bf8c      	ite	hi
   253fe:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   25402:	2400      	movls	r4, #0
   25404:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   25408:	40fc      	lsrs	r4, r7
   2540a:	4322      	orrs	r2, r4
   2540c:	e7df      	b.n	253ce <__b2d+0x4a>
   2540e:	ea44 0107 	orr.w	r1, r4, r7
   25412:	e7dc      	b.n	253ce <__b2d+0x4a>
   25414:	3ff00000 	.word	0x3ff00000

00025418 <__d2b>:
   25418:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   2541c:	2101      	movs	r1, #1
   2541e:	4690      	mov	r8, r2
   25420:	4699      	mov	r9, r3
   25422:	9e08      	ldr	r6, [sp, #32]
   25424:	f7ff fc7e 	bl	24d24 <_Balloc>
   25428:	4604      	mov	r4, r0
   2542a:	b930      	cbnz	r0, 2543a <__d2b+0x22>
   2542c:	4602      	mov	r2, r0
   2542e:	4b24      	ldr	r3, [pc, #144]	; (254c0 <__d2b+0xa8>)
   25430:	f240 310a 	movw	r1, #778	; 0x30a
   25434:	4823      	ldr	r0, [pc, #140]	; (254c4 <__d2b+0xac>)
   25436:	f7ff f945 	bl	246c4 <__assert_func>
   2543a:	f3c9 550a 	ubfx	r5, r9, #20, #11
   2543e:	f3c9 0313 	ubfx	r3, r9, #0, #20
   25442:	b10d      	cbz	r5, 25448 <__d2b+0x30>
   25444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   25448:	9301      	str	r3, [sp, #4]
   2544a:	f1b8 0300 	subs.w	r3, r8, #0
   2544e:	d024      	beq.n	2549a <__d2b+0x82>
   25450:	4668      	mov	r0, sp
   25452:	9300      	str	r3, [sp, #0]
   25454:	f006 f89e 	bl	2b594 <__lo0bits>
   25458:	e9dd 1200 	ldrd	r1, r2, [sp]
   2545c:	b1d8      	cbz	r0, 25496 <__d2b+0x7e>
   2545e:	f1c0 0320 	rsb	r3, r0, #32
   25462:	fa02 f303 	lsl.w	r3, r2, r3
   25466:	40c2      	lsrs	r2, r0
   25468:	430b      	orrs	r3, r1
   2546a:	9201      	str	r2, [sp, #4]
   2546c:	6163      	str	r3, [r4, #20]
   2546e:	9b01      	ldr	r3, [sp, #4]
   25470:	2b00      	cmp	r3, #0
   25472:	61a3      	str	r3, [r4, #24]
   25474:	bf0c      	ite	eq
   25476:	2201      	moveq	r2, #1
   25478:	2202      	movne	r2, #2
   2547a:	6122      	str	r2, [r4, #16]
   2547c:	b1ad      	cbz	r5, 254aa <__d2b+0x92>
   2547e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   25482:	4405      	add	r5, r0
   25484:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   25488:	6035      	str	r5, [r6, #0]
   2548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2548c:	6018      	str	r0, [r3, #0]
   2548e:	4620      	mov	r0, r4
   25490:	b002      	add	sp, #8
   25492:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   25496:	6161      	str	r1, [r4, #20]
   25498:	e7e9      	b.n	2546e <__d2b+0x56>
   2549a:	a801      	add	r0, sp, #4
   2549c:	f006 f87a 	bl	2b594 <__lo0bits>
   254a0:	9b01      	ldr	r3, [sp, #4]
   254a2:	3020      	adds	r0, #32
   254a4:	2201      	movs	r2, #1
   254a6:	6163      	str	r3, [r4, #20]
   254a8:	e7e7      	b.n	2547a <__d2b+0x62>
   254aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   254ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   254b2:	6030      	str	r0, [r6, #0]
   254b4:	6918      	ldr	r0, [r3, #16]
   254b6:	f006 f84b 	bl	2b550 <__hi0bits>
   254ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   254be:	e7e4      	b.n	2548a <__d2b+0x72>
   254c0:	00032c56 	.word	0x00032c56
   254c4:	00032ce9 	.word	0x00032ce9

000254c8 <_vfiprintf_r>:
   254c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254cc:	460d      	mov	r5, r1
   254ce:	b09d      	sub	sp, #116	; 0x74
   254d0:	4614      	mov	r4, r2
   254d2:	4698      	mov	r8, r3
   254d4:	4606      	mov	r6, r0
   254d6:	b118      	cbz	r0, 254e0 <_vfiprintf_r+0x18>
   254d8:	6983      	ldr	r3, [r0, #24]
   254da:	b90b      	cbnz	r3, 254e0 <_vfiprintf_r+0x18>
   254dc:	f7ff f952 	bl	24784 <__sinit>
   254e0:	4b87      	ldr	r3, [pc, #540]	; (25700 <_vfiprintf_r+0x238>)
   254e2:	429d      	cmp	r5, r3
   254e4:	d11b      	bne.n	2551e <_vfiprintf_r+0x56>
   254e6:	6875      	ldr	r5, [r6, #4]
   254e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   254ea:	07d9      	lsls	r1, r3, #31
   254ec:	d405      	bmi.n	254fa <_vfiprintf_r+0x32>
   254ee:	89ab      	ldrh	r3, [r5, #12]
   254f0:	059a      	lsls	r2, r3, #22
   254f2:	d402      	bmi.n	254fa <_vfiprintf_r+0x32>
   254f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   254f6:	f7ec fd1b 	bl	11f30 <__retarget_lock_acquire_recursive>
   254fa:	89ab      	ldrh	r3, [r5, #12]
   254fc:	071b      	lsls	r3, r3, #28
   254fe:	d501      	bpl.n	25504 <_vfiprintf_r+0x3c>
   25500:	692b      	ldr	r3, [r5, #16]
   25502:	b9eb      	cbnz	r3, 25540 <_vfiprintf_r+0x78>
   25504:	4629      	mov	r1, r5
   25506:	4630      	mov	r0, r6
   25508:	f000 f96e 	bl	257e8 <__swsetup_r>
   2550c:	b1c0      	cbz	r0, 25540 <_vfiprintf_r+0x78>
   2550e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   25510:	07dc      	lsls	r4, r3, #31
   25512:	d50e      	bpl.n	25532 <_vfiprintf_r+0x6a>
   25514:	f04f 30ff 	mov.w	r0, #4294967295
   25518:	b01d      	add	sp, #116	; 0x74
   2551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2551e:	4b79      	ldr	r3, [pc, #484]	; (25704 <_vfiprintf_r+0x23c>)
   25520:	429d      	cmp	r5, r3
   25522:	d101      	bne.n	25528 <_vfiprintf_r+0x60>
   25524:	68b5      	ldr	r5, [r6, #8]
   25526:	e7df      	b.n	254e8 <_vfiprintf_r+0x20>
   25528:	4b77      	ldr	r3, [pc, #476]	; (25708 <_vfiprintf_r+0x240>)
   2552a:	429d      	cmp	r5, r3
   2552c:	bf08      	it	eq
   2552e:	68f5      	ldreq	r5, [r6, #12]
   25530:	e7da      	b.n	254e8 <_vfiprintf_r+0x20>
   25532:	89ab      	ldrh	r3, [r5, #12]
   25534:	0598      	lsls	r0, r3, #22
   25536:	d4ed      	bmi.n	25514 <_vfiprintf_r+0x4c>
   25538:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2553a:	f7ec fd15 	bl	11f68 <__retarget_lock_release_recursive>
   2553e:	e7e9      	b.n	25514 <_vfiprintf_r+0x4c>
   25540:	2300      	movs	r3, #0
   25542:	f8cd 800c 	str.w	r8, [sp, #12]
   25546:	f04f 0901 	mov.w	r9, #1
   2554a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2570c <_vfiprintf_r+0x244>
   2554e:	9309      	str	r3, [sp, #36]	; 0x24
   25550:	2320      	movs	r3, #32
   25552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   25556:	2330      	movs	r3, #48	; 0x30
   25558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2555c:	4623      	mov	r3, r4
   2555e:	469a      	mov	sl, r3
   25560:	f813 2b01 	ldrb.w	r2, [r3], #1
   25564:	b10a      	cbz	r2, 2556a <_vfiprintf_r+0xa2>
   25566:	2a25      	cmp	r2, #37	; 0x25
   25568:	d1f9      	bne.n	2555e <_vfiprintf_r+0x96>
   2556a:	ebba 0b04 	subs.w	fp, sl, r4
   2556e:	d00b      	beq.n	25588 <_vfiprintf_r+0xc0>
   25570:	465b      	mov	r3, fp
   25572:	4622      	mov	r2, r4
   25574:	4629      	mov	r1, r5
   25576:	4630      	mov	r0, r6
   25578:	f006 f8dd 	bl	2b736 <__sfputs_r>
   2557c:	3001      	adds	r0, #1
   2557e:	f000 80a6 	beq.w	256ce <_vfiprintf_r+0x206>
   25582:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25584:	445a      	add	r2, fp
   25586:	9209      	str	r2, [sp, #36]	; 0x24
   25588:	f89a 3000 	ldrb.w	r3, [sl]
   2558c:	2b00      	cmp	r3, #0
   2558e:	f000 809e 	beq.w	256ce <_vfiprintf_r+0x206>
   25592:	2300      	movs	r3, #0
   25594:	f04f 32ff 	mov.w	r2, #4294967295
   25598:	f10a 0a01 	add.w	sl, sl, #1
   2559c:	9304      	str	r3, [sp, #16]
   2559e:	9307      	str	r3, [sp, #28]
   255a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   255a4:	931a      	str	r3, [sp, #104]	; 0x68
   255a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
   255aa:	4654      	mov	r4, sl
   255ac:	2205      	movs	r2, #5
   255ae:	4857      	ldr	r0, [pc, #348]	; (2570c <_vfiprintf_r+0x244>)
   255b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   255b4:	f005 ffbe 	bl	2b534 <memchr>
   255b8:	9b04      	ldr	r3, [sp, #16]
   255ba:	b9d0      	cbnz	r0, 255f2 <_vfiprintf_r+0x12a>
   255bc:	06d9      	lsls	r1, r3, #27
   255be:	bf44      	itt	mi
   255c0:	2220      	movmi	r2, #32
   255c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   255c6:	071a      	lsls	r2, r3, #28
   255c8:	bf44      	itt	mi
   255ca:	222b      	movmi	r2, #43	; 0x2b
   255cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   255d0:	f89a 2000 	ldrb.w	r2, [sl]
   255d4:	2a2a      	cmp	r2, #42	; 0x2a
   255d6:	d014      	beq.n	25602 <_vfiprintf_r+0x13a>
   255d8:	9a07      	ldr	r2, [sp, #28]
   255da:	4654      	mov	r4, sl
   255dc:	2000      	movs	r0, #0
   255de:	f04f 0c0a 	mov.w	ip, #10
   255e2:	4621      	mov	r1, r4
   255e4:	f811 3b01 	ldrb.w	r3, [r1], #1
   255e8:	3b30      	subs	r3, #48	; 0x30
   255ea:	2b09      	cmp	r3, #9
   255ec:	d94a      	bls.n	25684 <_vfiprintf_r+0x1bc>
   255ee:	b970      	cbnz	r0, 2560e <_vfiprintf_r+0x146>
   255f0:	e014      	b.n	2561c <_vfiprintf_r+0x154>
   255f2:	eba0 0008 	sub.w	r0, r0, r8
   255f6:	46a2      	mov	sl, r4
   255f8:	fa09 f000 	lsl.w	r0, r9, r0
   255fc:	4318      	orrs	r0, r3
   255fe:	9004      	str	r0, [sp, #16]
   25600:	e7d3      	b.n	255aa <_vfiprintf_r+0xe2>
   25602:	9a03      	ldr	r2, [sp, #12]
   25604:	1d11      	adds	r1, r2, #4
   25606:	6812      	ldr	r2, [r2, #0]
   25608:	2a00      	cmp	r2, #0
   2560a:	9103      	str	r1, [sp, #12]
   2560c:	db01      	blt.n	25612 <_vfiprintf_r+0x14a>
   2560e:	9207      	str	r2, [sp, #28]
   25610:	e004      	b.n	2561c <_vfiprintf_r+0x154>
   25612:	4252      	negs	r2, r2
   25614:	f043 0302 	orr.w	r3, r3, #2
   25618:	9207      	str	r2, [sp, #28]
   2561a:	9304      	str	r3, [sp, #16]
   2561c:	7823      	ldrb	r3, [r4, #0]
   2561e:	2b2e      	cmp	r3, #46	; 0x2e
   25620:	d10a      	bne.n	25638 <_vfiprintf_r+0x170>
   25622:	7863      	ldrb	r3, [r4, #1]
   25624:	2b2a      	cmp	r3, #42	; 0x2a
   25626:	d132      	bne.n	2568e <_vfiprintf_r+0x1c6>
   25628:	9b03      	ldr	r3, [sp, #12]
   2562a:	3402      	adds	r4, #2
   2562c:	1d1a      	adds	r2, r3, #4
   2562e:	681b      	ldr	r3, [r3, #0]
   25630:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   25634:	9203      	str	r2, [sp, #12]
   25636:	9305      	str	r3, [sp, #20]
   25638:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 25710 <_vfiprintf_r+0x248>
   2563c:	2203      	movs	r2, #3
   2563e:	7821      	ldrb	r1, [r4, #0]
   25640:	4650      	mov	r0, sl
   25642:	f005 ff77 	bl	2b534 <memchr>
   25646:	b138      	cbz	r0, 25658 <_vfiprintf_r+0x190>
   25648:	eba0 000a 	sub.w	r0, r0, sl
   2564c:	2240      	movs	r2, #64	; 0x40
   2564e:	9b04      	ldr	r3, [sp, #16]
   25650:	3401      	adds	r4, #1
   25652:	4082      	lsls	r2, r0
   25654:	4313      	orrs	r3, r2
   25656:	9304      	str	r3, [sp, #16]
   25658:	f814 1b01 	ldrb.w	r1, [r4], #1
   2565c:	2206      	movs	r2, #6
   2565e:	482d      	ldr	r0, [pc, #180]	; (25714 <_vfiprintf_r+0x24c>)
   25660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   25664:	f005 ff66 	bl	2b534 <memchr>
   25668:	2800      	cmp	r0, #0
   2566a:	d03f      	beq.n	256ec <_vfiprintf_r+0x224>
   2566c:	4b2a      	ldr	r3, [pc, #168]	; (25718 <_vfiprintf_r+0x250>)
   2566e:	bb1b      	cbnz	r3, 256b8 <_vfiprintf_r+0x1f0>
   25670:	9b03      	ldr	r3, [sp, #12]
   25672:	3307      	adds	r3, #7
   25674:	f023 0307 	bic.w	r3, r3, #7
   25678:	3308      	adds	r3, #8
   2567a:	9303      	str	r3, [sp, #12]
   2567c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2567e:	443b      	add	r3, r7
   25680:	9309      	str	r3, [sp, #36]	; 0x24
   25682:	e76b      	b.n	2555c <_vfiprintf_r+0x94>
   25684:	fb0c 3202 	mla	r2, ip, r2, r3
   25688:	460c      	mov	r4, r1
   2568a:	2001      	movs	r0, #1
   2568c:	e7a9      	b.n	255e2 <_vfiprintf_r+0x11a>
   2568e:	2300      	movs	r3, #0
   25690:	3401      	adds	r4, #1
   25692:	f04f 0c0a 	mov.w	ip, #10
   25696:	4619      	mov	r1, r3
   25698:	9305      	str	r3, [sp, #20]
   2569a:	4620      	mov	r0, r4
   2569c:	f810 2b01 	ldrb.w	r2, [r0], #1
   256a0:	3a30      	subs	r2, #48	; 0x30
   256a2:	2a09      	cmp	r2, #9
   256a4:	d903      	bls.n	256ae <_vfiprintf_r+0x1e6>
   256a6:	2b00      	cmp	r3, #0
   256a8:	d0c6      	beq.n	25638 <_vfiprintf_r+0x170>
   256aa:	9105      	str	r1, [sp, #20]
   256ac:	e7c4      	b.n	25638 <_vfiprintf_r+0x170>
   256ae:	fb0c 2101 	mla	r1, ip, r1, r2
   256b2:	4604      	mov	r4, r0
   256b4:	2301      	movs	r3, #1
   256b6:	e7f0      	b.n	2569a <_vfiprintf_r+0x1d2>
   256b8:	ab03      	add	r3, sp, #12
   256ba:	462a      	mov	r2, r5
   256bc:	a904      	add	r1, sp, #16
   256be:	4630      	mov	r0, r6
   256c0:	9300      	str	r3, [sp, #0]
   256c2:	4b16      	ldr	r3, [pc, #88]	; (2571c <_vfiprintf_r+0x254>)
   256c4:	f7fe fc32 	bl	23f2c <_printf_float>
   256c8:	4607      	mov	r7, r0
   256ca:	1c78      	adds	r0, r7, #1
   256cc:	d1d6      	bne.n	2567c <_vfiprintf_r+0x1b4>
   256ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   256d0:	07d9      	lsls	r1, r3, #31
   256d2:	d405      	bmi.n	256e0 <_vfiprintf_r+0x218>
   256d4:	89ab      	ldrh	r3, [r5, #12]
   256d6:	059a      	lsls	r2, r3, #22
   256d8:	d402      	bmi.n	256e0 <_vfiprintf_r+0x218>
   256da:	6da8      	ldr	r0, [r5, #88]	; 0x58
   256dc:	f7ec fc44 	bl	11f68 <__retarget_lock_release_recursive>
   256e0:	89ab      	ldrh	r3, [r5, #12]
   256e2:	065b      	lsls	r3, r3, #25
   256e4:	f53f af16 	bmi.w	25514 <_vfiprintf_r+0x4c>
   256e8:	9809      	ldr	r0, [sp, #36]	; 0x24
   256ea:	e715      	b.n	25518 <_vfiprintf_r+0x50>
   256ec:	ab03      	add	r3, sp, #12
   256ee:	462a      	mov	r2, r5
   256f0:	a904      	add	r1, sp, #16
   256f2:	4630      	mov	r0, r6
   256f4:	9300      	str	r3, [sp, #0]
   256f6:	4b09      	ldr	r3, [pc, #36]	; (2571c <_vfiprintf_r+0x254>)
   256f8:	f7fe fe4e 	bl	24398 <_printf_i>
   256fc:	e7e4      	b.n	256c8 <_vfiprintf_r+0x200>
   256fe:	bf00      	nop
   25700:	0002cfd8 	.word	0x0002cfd8
   25704:	0002cfb8 	.word	0x0002cfb8
   25708:	0002cf98 	.word	0x0002cf98
   2570c:	00032d5e 	.word	0x00032d5e
   25710:	00032d64 	.word	0x00032d64
   25714:	00032d68 	.word	0x00032d68
   25718:	00023f2d 	.word	0x00023f2d
   2571c:	0002b737 	.word	0x0002b737

00025720 <__swbuf_r>:
   25720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25722:	460e      	mov	r6, r1
   25724:	4614      	mov	r4, r2
   25726:	4605      	mov	r5, r0
   25728:	b118      	cbz	r0, 25732 <__swbuf_r+0x12>
   2572a:	6983      	ldr	r3, [r0, #24]
   2572c:	b90b      	cbnz	r3, 25732 <__swbuf_r+0x12>
   2572e:	f7ff f829 	bl	24784 <__sinit>
   25732:	4b21      	ldr	r3, [pc, #132]	; (257b8 <__swbuf_r+0x98>)
   25734:	429c      	cmp	r4, r3
   25736:	d110      	bne.n	2575a <__swbuf_r+0x3a>
   25738:	686c      	ldr	r4, [r5, #4]
   2573a:	69a3      	ldr	r3, [r4, #24]
   2573c:	60a3      	str	r3, [r4, #8]
   2573e:	89a3      	ldrh	r3, [r4, #12]
   25740:	071a      	lsls	r2, r3, #28
   25742:	d501      	bpl.n	25748 <__swbuf_r+0x28>
   25744:	6923      	ldr	r3, [r4, #16]
   25746:	b993      	cbnz	r3, 2576e <__swbuf_r+0x4e>
   25748:	4621      	mov	r1, r4
   2574a:	4628      	mov	r0, r5
   2574c:	f000 f84c 	bl	257e8 <__swsetup_r>
   25750:	b168      	cbz	r0, 2576e <__swbuf_r+0x4e>
   25752:	f04f 37ff 	mov.w	r7, #4294967295
   25756:	4638      	mov	r0, r7
   25758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2575a:	4b18      	ldr	r3, [pc, #96]	; (257bc <__swbuf_r+0x9c>)
   2575c:	429c      	cmp	r4, r3
   2575e:	d101      	bne.n	25764 <__swbuf_r+0x44>
   25760:	68ac      	ldr	r4, [r5, #8]
   25762:	e7ea      	b.n	2573a <__swbuf_r+0x1a>
   25764:	4b16      	ldr	r3, [pc, #88]	; (257c0 <__swbuf_r+0xa0>)
   25766:	429c      	cmp	r4, r3
   25768:	bf08      	it	eq
   2576a:	68ec      	ldreq	r4, [r5, #12]
   2576c:	e7e5      	b.n	2573a <__swbuf_r+0x1a>
   2576e:	6923      	ldr	r3, [r4, #16]
   25770:	b2f6      	uxtb	r6, r6
   25772:	6820      	ldr	r0, [r4, #0]
   25774:	4637      	mov	r7, r6
   25776:	1ac0      	subs	r0, r0, r3
   25778:	6963      	ldr	r3, [r4, #20]
   2577a:	4283      	cmp	r3, r0
   2577c:	dc05      	bgt.n	2578a <__swbuf_r+0x6a>
   2577e:	4621      	mov	r1, r4
   25780:	4628      	mov	r0, r5
   25782:	f000 f8ad 	bl	258e0 <_fflush_r>
   25786:	2800      	cmp	r0, #0
   25788:	d1e3      	bne.n	25752 <__swbuf_r+0x32>
   2578a:	68a3      	ldr	r3, [r4, #8]
   2578c:	3001      	adds	r0, #1
   2578e:	3b01      	subs	r3, #1
   25790:	60a3      	str	r3, [r4, #8]
   25792:	6823      	ldr	r3, [r4, #0]
   25794:	1c5a      	adds	r2, r3, #1
   25796:	6022      	str	r2, [r4, #0]
   25798:	701e      	strb	r6, [r3, #0]
   2579a:	6963      	ldr	r3, [r4, #20]
   2579c:	4283      	cmp	r3, r0
   2579e:	d004      	beq.n	257aa <__swbuf_r+0x8a>
   257a0:	89a3      	ldrh	r3, [r4, #12]
   257a2:	07db      	lsls	r3, r3, #31
   257a4:	d5d7      	bpl.n	25756 <__swbuf_r+0x36>
   257a6:	2e0a      	cmp	r6, #10
   257a8:	d1d5      	bne.n	25756 <__swbuf_r+0x36>
   257aa:	4621      	mov	r1, r4
   257ac:	4628      	mov	r0, r5
   257ae:	f000 f897 	bl	258e0 <_fflush_r>
   257b2:	2800      	cmp	r0, #0
   257b4:	d0cf      	beq.n	25756 <__swbuf_r+0x36>
   257b6:	e7cc      	b.n	25752 <__swbuf_r+0x32>
   257b8:	0002cfd8 	.word	0x0002cfd8
   257bc:	0002cfb8 	.word	0x0002cfb8
   257c0:	0002cf98 	.word	0x0002cf98

000257c4 <_write_r>:
   257c4:	b538      	push	{r3, r4, r5, lr}
   257c6:	4604      	mov	r4, r0
   257c8:	4d06      	ldr	r5, [pc, #24]	; (257e4 <_write_r+0x20>)
   257ca:	4608      	mov	r0, r1
   257cc:	4611      	mov	r1, r2
   257ce:	2200      	movs	r2, #0
   257d0:	602a      	str	r2, [r5, #0]
   257d2:	461a      	mov	r2, r3
   257d4:	f001 fde1 	bl	2739a <_write>
   257d8:	1c43      	adds	r3, r0, #1
   257da:	d102      	bne.n	257e2 <_write_r+0x1e>
   257dc:	682b      	ldr	r3, [r5, #0]
   257de:	b103      	cbz	r3, 257e2 <_write_r+0x1e>
   257e0:	6023      	str	r3, [r4, #0]
   257e2:	bd38      	pop	{r3, r4, r5, pc}
   257e4:	20022c00 	.word	0x20022c00

000257e8 <__swsetup_r>:
   257e8:	4b31      	ldr	r3, [pc, #196]	; (258b0 <__swsetup_r+0xc8>)
   257ea:	b570      	push	{r4, r5, r6, lr}
   257ec:	681d      	ldr	r5, [r3, #0]
   257ee:	4606      	mov	r6, r0
   257f0:	460c      	mov	r4, r1
   257f2:	b125      	cbz	r5, 257fe <__swsetup_r+0x16>
   257f4:	69ab      	ldr	r3, [r5, #24]
   257f6:	b913      	cbnz	r3, 257fe <__swsetup_r+0x16>
   257f8:	4628      	mov	r0, r5
   257fa:	f7fe ffc3 	bl	24784 <__sinit>
   257fe:	4b2d      	ldr	r3, [pc, #180]	; (258b4 <__swsetup_r+0xcc>)
   25800:	429c      	cmp	r4, r3
   25802:	d10e      	bne.n	25822 <__swsetup_r+0x3a>
   25804:	686c      	ldr	r4, [r5, #4]
   25806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2580a:	071a      	lsls	r2, r3, #28
   2580c:	d42c      	bmi.n	25868 <__swsetup_r+0x80>
   2580e:	06dd      	lsls	r5, r3, #27
   25810:	d411      	bmi.n	25836 <__swsetup_r+0x4e>
   25812:	2209      	movs	r2, #9
   25814:	6032      	str	r2, [r6, #0]
   25816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2581a:	f04f 30ff 	mov.w	r0, #4294967295
   2581e:	81a3      	strh	r3, [r4, #12]
   25820:	e03d      	b.n	2589e <__swsetup_r+0xb6>
   25822:	4b25      	ldr	r3, [pc, #148]	; (258b8 <__swsetup_r+0xd0>)
   25824:	429c      	cmp	r4, r3
   25826:	d101      	bne.n	2582c <__swsetup_r+0x44>
   25828:	68ac      	ldr	r4, [r5, #8]
   2582a:	e7ec      	b.n	25806 <__swsetup_r+0x1e>
   2582c:	4b23      	ldr	r3, [pc, #140]	; (258bc <__swsetup_r+0xd4>)
   2582e:	429c      	cmp	r4, r3
   25830:	bf08      	it	eq
   25832:	68ec      	ldreq	r4, [r5, #12]
   25834:	e7e7      	b.n	25806 <__swsetup_r+0x1e>
   25836:	0758      	lsls	r0, r3, #29
   25838:	d512      	bpl.n	25860 <__swsetup_r+0x78>
   2583a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2583c:	b141      	cbz	r1, 25850 <__swsetup_r+0x68>
   2583e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   25842:	4299      	cmp	r1, r3
   25844:	d002      	beq.n	2584c <__swsetup_r+0x64>
   25846:	4630      	mov	r0, r6
   25848:	f7fe facc 	bl	23de4 <_free_r>
   2584c:	2300      	movs	r3, #0
   2584e:	6363      	str	r3, [r4, #52]	; 0x34
   25850:	89a3      	ldrh	r3, [r4, #12]
   25852:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   25856:	81a3      	strh	r3, [r4, #12]
   25858:	2300      	movs	r3, #0
   2585a:	6063      	str	r3, [r4, #4]
   2585c:	6923      	ldr	r3, [r4, #16]
   2585e:	6023      	str	r3, [r4, #0]
   25860:	89a3      	ldrh	r3, [r4, #12]
   25862:	f043 0308 	orr.w	r3, r3, #8
   25866:	81a3      	strh	r3, [r4, #12]
   25868:	6923      	ldr	r3, [r4, #16]
   2586a:	b94b      	cbnz	r3, 25880 <__swsetup_r+0x98>
   2586c:	89a3      	ldrh	r3, [r4, #12]
   2586e:	f403 7320 	and.w	r3, r3, #640	; 0x280
   25872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   25876:	d003      	beq.n	25880 <__swsetup_r+0x98>
   25878:	4621      	mov	r1, r4
   2587a:	4630      	mov	r0, r6
   2587c:	f000 f87e 	bl	2597c <__smakebuf_r>
   25880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25884:	f013 0201 	ands.w	r2, r3, #1
   25888:	d00a      	beq.n	258a0 <__swsetup_r+0xb8>
   2588a:	2200      	movs	r2, #0
   2588c:	60a2      	str	r2, [r4, #8]
   2588e:	6962      	ldr	r2, [r4, #20]
   25890:	4252      	negs	r2, r2
   25892:	61a2      	str	r2, [r4, #24]
   25894:	6922      	ldr	r2, [r4, #16]
   25896:	b942      	cbnz	r2, 258aa <__swsetup_r+0xc2>
   25898:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   2589c:	d1bb      	bne.n	25816 <__swsetup_r+0x2e>
   2589e:	bd70      	pop	{r4, r5, r6, pc}
   258a0:	0799      	lsls	r1, r3, #30
   258a2:	bf58      	it	pl
   258a4:	6962      	ldrpl	r2, [r4, #20]
   258a6:	60a2      	str	r2, [r4, #8]
   258a8:	e7f4      	b.n	25894 <__swsetup_r+0xac>
   258aa:	2000      	movs	r0, #0
   258ac:	e7f7      	b.n	2589e <__swsetup_r+0xb6>
   258ae:	bf00      	nop
   258b0:	20008744 	.word	0x20008744
   258b4:	0002cfd8 	.word	0x0002cfd8
   258b8:	0002cfb8 	.word	0x0002cfb8
   258bc:	0002cf98 	.word	0x0002cf98

000258c0 <_close_r>:
   258c0:	b538      	push	{r3, r4, r5, lr}
   258c2:	2300      	movs	r3, #0
   258c4:	4d05      	ldr	r5, [pc, #20]	; (258dc <_close_r+0x1c>)
   258c6:	4604      	mov	r4, r0
   258c8:	4608      	mov	r0, r1
   258ca:	602b      	str	r3, [r5, #0]
   258cc:	f001 fd69 	bl	273a2 <_close>
   258d0:	1c43      	adds	r3, r0, #1
   258d2:	d102      	bne.n	258da <_close_r+0x1a>
   258d4:	682b      	ldr	r3, [r5, #0]
   258d6:	b103      	cbz	r3, 258da <_close_r+0x1a>
   258d8:	6023      	str	r3, [r4, #0]
   258da:	bd38      	pop	{r3, r4, r5, pc}
   258dc:	20022c00 	.word	0x20022c00

000258e0 <_fflush_r>:
   258e0:	b538      	push	{r3, r4, r5, lr}
   258e2:	690b      	ldr	r3, [r1, #16]
   258e4:	4605      	mov	r5, r0
   258e6:	460c      	mov	r4, r1
   258e8:	b913      	cbnz	r3, 258f0 <_fflush_r+0x10>
   258ea:	2500      	movs	r5, #0
   258ec:	4628      	mov	r0, r5
   258ee:	bd38      	pop	{r3, r4, r5, pc}
   258f0:	b118      	cbz	r0, 258fa <_fflush_r+0x1a>
   258f2:	6983      	ldr	r3, [r0, #24]
   258f4:	b90b      	cbnz	r3, 258fa <_fflush_r+0x1a>
   258f6:	f7fe ff45 	bl	24784 <__sinit>
   258fa:	4b14      	ldr	r3, [pc, #80]	; (2594c <_fflush_r+0x6c>)
   258fc:	429c      	cmp	r4, r3
   258fe:	d11b      	bne.n	25938 <_fflush_r+0x58>
   25900:	686c      	ldr	r4, [r5, #4]
   25902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25906:	2b00      	cmp	r3, #0
   25908:	d0ef      	beq.n	258ea <_fflush_r+0xa>
   2590a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2590c:	07d0      	lsls	r0, r2, #31
   2590e:	d404      	bmi.n	2591a <_fflush_r+0x3a>
   25910:	0599      	lsls	r1, r3, #22
   25912:	d402      	bmi.n	2591a <_fflush_r+0x3a>
   25914:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25916:	f7ec fb0b 	bl	11f30 <__retarget_lock_acquire_recursive>
   2591a:	4628      	mov	r0, r5
   2591c:	4621      	mov	r1, r4
   2591e:	f005 ff73 	bl	2b808 <__sflush_r>
   25922:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25924:	4605      	mov	r5, r0
   25926:	07da      	lsls	r2, r3, #31
   25928:	d4e0      	bmi.n	258ec <_fflush_r+0xc>
   2592a:	89a3      	ldrh	r3, [r4, #12]
   2592c:	059b      	lsls	r3, r3, #22
   2592e:	d4dd      	bmi.n	258ec <_fflush_r+0xc>
   25930:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25932:	f7ec fb19 	bl	11f68 <__retarget_lock_release_recursive>
   25936:	e7d9      	b.n	258ec <_fflush_r+0xc>
   25938:	4b05      	ldr	r3, [pc, #20]	; (25950 <_fflush_r+0x70>)
   2593a:	429c      	cmp	r4, r3
   2593c:	d101      	bne.n	25942 <_fflush_r+0x62>
   2593e:	68ac      	ldr	r4, [r5, #8]
   25940:	e7df      	b.n	25902 <_fflush_r+0x22>
   25942:	4b04      	ldr	r3, [pc, #16]	; (25954 <_fflush_r+0x74>)
   25944:	429c      	cmp	r4, r3
   25946:	bf08      	it	eq
   25948:	68ec      	ldreq	r4, [r5, #12]
   2594a:	e7da      	b.n	25902 <_fflush_r+0x22>
   2594c:	0002cfd8 	.word	0x0002cfd8
   25950:	0002cfb8 	.word	0x0002cfb8
   25954:	0002cf98 	.word	0x0002cf98

00025958 <_lseek_r>:
   25958:	b538      	push	{r3, r4, r5, lr}
   2595a:	4604      	mov	r4, r0
   2595c:	4d06      	ldr	r5, [pc, #24]	; (25978 <_lseek_r+0x20>)
   2595e:	4608      	mov	r0, r1
   25960:	4611      	mov	r1, r2
   25962:	2200      	movs	r2, #0
   25964:	602a      	str	r2, [r5, #0]
   25966:	461a      	mov	r2, r3
   25968:	f001 fd1e 	bl	273a8 <_lseek>
   2596c:	1c43      	adds	r3, r0, #1
   2596e:	d102      	bne.n	25976 <_lseek_r+0x1e>
   25970:	682b      	ldr	r3, [r5, #0]
   25972:	b103      	cbz	r3, 25976 <_lseek_r+0x1e>
   25974:	6023      	str	r3, [r4, #0]
   25976:	bd38      	pop	{r3, r4, r5, pc}
   25978:	20022c00 	.word	0x20022c00

0002597c <__smakebuf_r>:
   2597c:	898b      	ldrh	r3, [r1, #12]
   2597e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25980:	079d      	lsls	r5, r3, #30
   25982:	4606      	mov	r6, r0
   25984:	460c      	mov	r4, r1
   25986:	d507      	bpl.n	25998 <__smakebuf_r+0x1c>
   25988:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2598c:	6023      	str	r3, [r4, #0]
   2598e:	6123      	str	r3, [r4, #16]
   25990:	2301      	movs	r3, #1
   25992:	6163      	str	r3, [r4, #20]
   25994:	b003      	add	sp, #12
   25996:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25998:	ab01      	add	r3, sp, #4
   2599a:	466a      	mov	r2, sp
   2599c:	f005 ffb3 	bl	2b906 <__swhatbuf_r>
   259a0:	9f00      	ldr	r7, [sp, #0]
   259a2:	4605      	mov	r5, r0
   259a4:	4630      	mov	r0, r6
   259a6:	4639      	mov	r1, r7
   259a8:	f7fe fa66 	bl	23e78 <_malloc_r>
   259ac:	b948      	cbnz	r0, 259c2 <__smakebuf_r+0x46>
   259ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   259b2:	059a      	lsls	r2, r3, #22
   259b4:	d4ee      	bmi.n	25994 <__smakebuf_r+0x18>
   259b6:	f023 0303 	bic.w	r3, r3, #3
   259ba:	f043 0302 	orr.w	r3, r3, #2
   259be:	81a3      	strh	r3, [r4, #12]
   259c0:	e7e2      	b.n	25988 <__smakebuf_r+0xc>
   259c2:	4b0d      	ldr	r3, [pc, #52]	; (259f8 <__smakebuf_r+0x7c>)
   259c4:	62b3      	str	r3, [r6, #40]	; 0x28
   259c6:	89a3      	ldrh	r3, [r4, #12]
   259c8:	6020      	str	r0, [r4, #0]
   259ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   259ce:	81a3      	strh	r3, [r4, #12]
   259d0:	9b01      	ldr	r3, [sp, #4]
   259d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
   259d6:	b15b      	cbz	r3, 259f0 <__smakebuf_r+0x74>
   259d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   259dc:	4630      	mov	r0, r6
   259de:	f000 f84b 	bl	25a78 <_isatty_r>
   259e2:	b128      	cbz	r0, 259f0 <__smakebuf_r+0x74>
   259e4:	89a3      	ldrh	r3, [r4, #12]
   259e6:	f023 0303 	bic.w	r3, r3, #3
   259ea:	f043 0301 	orr.w	r3, r3, #1
   259ee:	81a3      	strh	r3, [r4, #12]
   259f0:	89a3      	ldrh	r3, [r4, #12]
   259f2:	431d      	orrs	r5, r3
   259f4:	81a5      	strh	r5, [r4, #12]
   259f6:	e7cd      	b.n	25994 <__smakebuf_r+0x18>
   259f8:	00024749 	.word	0x00024749

000259fc <_read_r>:
   259fc:	b538      	push	{r3, r4, r5, lr}
   259fe:	4604      	mov	r4, r0
   25a00:	4d06      	ldr	r5, [pc, #24]	; (25a1c <_read_r+0x20>)
   25a02:	4608      	mov	r0, r1
   25a04:	4611      	mov	r1, r2
   25a06:	2200      	movs	r2, #0
   25a08:	602a      	str	r2, [r5, #0]
   25a0a:	461a      	mov	r2, r3
   25a0c:	f001 fcc1 	bl	27392 <_read>
   25a10:	1c43      	adds	r3, r0, #1
   25a12:	d102      	bne.n	25a1a <_read_r+0x1e>
   25a14:	682b      	ldr	r3, [r5, #0]
   25a16:	b103      	cbz	r3, 25a1a <_read_r+0x1e>
   25a18:	6023      	str	r3, [r4, #0]
   25a1a:	bd38      	pop	{r3, r4, r5, pc}
   25a1c:	20022c00 	.word	0x20022c00

00025a20 <raise>:
   25a20:	4b02      	ldr	r3, [pc, #8]	; (25a2c <raise+0xc>)
   25a22:	4601      	mov	r1, r0
   25a24:	6818      	ldr	r0, [r3, #0]
   25a26:	f005 bf93 	b.w	2b950 <_raise_r>
   25a2a:	bf00      	nop
   25a2c:	20008744 	.word	0x20008744

00025a30 <_kill_r>:
   25a30:	b538      	push	{r3, r4, r5, lr}
   25a32:	2300      	movs	r3, #0
   25a34:	4d06      	ldr	r5, [pc, #24]	; (25a50 <_kill_r+0x20>)
   25a36:	4604      	mov	r4, r0
   25a38:	4608      	mov	r0, r1
   25a3a:	4611      	mov	r1, r2
   25a3c:	602b      	str	r3, [r5, #0]
   25a3e:	f001 fcba 	bl	273b6 <_kill>
   25a42:	1c43      	adds	r3, r0, #1
   25a44:	d102      	bne.n	25a4c <_kill_r+0x1c>
   25a46:	682b      	ldr	r3, [r5, #0]
   25a48:	b103      	cbz	r3, 25a4c <_kill_r+0x1c>
   25a4a:	6023      	str	r3, [r4, #0]
   25a4c:	bd38      	pop	{r3, r4, r5, pc}
   25a4e:	bf00      	nop
   25a50:	20022c00 	.word	0x20022c00

00025a54 <_fstat_r>:
   25a54:	b538      	push	{r3, r4, r5, lr}
   25a56:	2300      	movs	r3, #0
   25a58:	4d06      	ldr	r5, [pc, #24]	; (25a74 <_fstat_r+0x20>)
   25a5a:	4604      	mov	r4, r0
   25a5c:	4608      	mov	r0, r1
   25a5e:	4611      	mov	r1, r2
   25a60:	602b      	str	r3, [r5, #0]
   25a62:	f001 fcac 	bl	273be <_fstat>
   25a66:	1c43      	adds	r3, r0, #1
   25a68:	d102      	bne.n	25a70 <_fstat_r+0x1c>
   25a6a:	682b      	ldr	r3, [r5, #0]
   25a6c:	b103      	cbz	r3, 25a70 <_fstat_r+0x1c>
   25a6e:	6023      	str	r3, [r4, #0]
   25a70:	bd38      	pop	{r3, r4, r5, pc}
   25a72:	bf00      	nop
   25a74:	20022c00 	.word	0x20022c00

00025a78 <_isatty_r>:
   25a78:	b538      	push	{r3, r4, r5, lr}
   25a7a:	2300      	movs	r3, #0
   25a7c:	4d05      	ldr	r5, [pc, #20]	; (25a94 <_isatty_r+0x1c>)
   25a7e:	4604      	mov	r4, r0
   25a80:	4608      	mov	r0, r1
   25a82:	602b      	str	r3, [r5, #0]
   25a84:	f001 fc92 	bl	273ac <_isatty>
   25a88:	1c43      	adds	r3, r0, #1
   25a8a:	d102      	bne.n	25a92 <_isatty_r+0x1a>
   25a8c:	682b      	ldr	r3, [r5, #0]
   25a8e:	b103      	cbz	r3, 25a92 <_isatty_r+0x1a>
   25a90:	6023      	str	r3, [r4, #0]
   25a92:	bd38      	pop	{r3, r4, r5, pc}
   25a94:	20022c00 	.word	0x20022c00

00025a98 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   25a98:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   25a9a:	f7fd f84d 	bl	22b38 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   25a9e:	f7fe f935 	bl	23d0c <k_thread_system_pool_assign>
    return 0;
}
   25aa2:	2000      	movs	r0, #0
   25aa4:	bd08      	pop	{r3, pc}

00025aa6 <k_uptime_get>:
{
   25aa6:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   25aa8:	f005 f834 	bl	2ab14 <z_impl_k_uptime_ticks>
   25aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25ab0:	fba0 0302 	umull	r0, r3, r0, r2
   25ab4:	fb02 3101 	mla	r1, r2, r1, r3
   25ab8:	0bc0      	lsrs	r0, r0, #15
}
   25aba:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   25abe:	0bc9      	lsrs	r1, r1, #15
   25ac0:	bd08      	pop	{r3, pc}

00025ac2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25ac2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25ac4:	ab0b      	add	r3, sp, #44	; 0x2c
   25ac6:	9305      	str	r3, [sp, #20]
   25ac8:	9303      	str	r3, [sp, #12]
   25aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25acc:	9302      	str	r3, [sp, #8]
   25ace:	2300      	movs	r3, #0
   25ad0:	4618      	mov	r0, r3
   25ad2:	e9cd 3300 	strd	r3, r3, [sp]
   25ad6:	f7e9 fba1 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   25ada:	b007      	add	sp, #28
   25adc:	f85d fb04 	ldr.w	pc, [sp], #4

00025ae0 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   25ae0:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   25ae2:	6883      	ldr	r3, [r0, #8]
   25ae4:	2264      	movs	r2, #100	; 0x64
   25ae6:	68dc      	ldr	r4, [r3, #12]
   25ae8:	2332      	movs	r3, #50	; 0x32
   25aea:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   25aec:	bc10      	pop	{r4}
   25aee:	4760      	bx	ip

00025af0 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   25af0:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   25af2:	6883      	ldr	r3, [r0, #8]
   25af4:	685c      	ldr	r4, [r3, #4]
   25af6:	f04f 33ff 	mov.w	r3, #4294967295
   25afa:	46a4      	mov	ip, r4
}
   25afc:	bc10      	pop	{r4}
   25afe:	4760      	bx	ip

00025b00 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   25b00:	f7fb b936 	b.w	20d70 <z_impl_k_sem_take>

00025b04 <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   25b04:	6883      	ldr	r3, [r0, #8]
   25b06:	69db      	ldr	r3, [r3, #28]
   25b08:	b10b      	cbz	r3, 25b0e <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   25b0a:	2201      	movs	r2, #1
   25b0c:	4718      	bx	r3
}
   25b0e:	4770      	bx	lr

00025b10 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   25b10:	f7fc bfde 	b.w	22ad0 <z_impl_k_sleep>

00025b14 <blink>:
{
   25b14:	b570      	push	{r4, r5, r6, lr}
   25b16:	4604      	mov	r4, r0
   25b18:	460d      	mov	r5, r1
	while (i < times)
   25b1a:	2600      	movs	r6, #0
   25b1c:	42ae      	cmp	r6, r5
   25b1e:	d100      	bne.n	25b22 <blink+0xe>
}
   25b20:	bd70      	pop	{r4, r5, r6, pc}
		gpio_pin_set_dt(led, ON);
   25b22:	2101      	movs	r1, #1
   25b24:	4620      	mov	r0, r4
   25b26:	f7e6 f823 	bl	bb70 <gpio_pin_set_dt.isra.0>
		gpio_pin_set_dt(led, OFF);
   25b2a:	2100      	movs	r1, #0
   25b2c:	4620      	mov	r0, r4
   25b2e:	f7e6 f81f 	bl	bb70 <gpio_pin_set_dt.isra.0>
		i++;
   25b32:	3601      	adds	r6, #1
   25b34:	e7f2      	b.n	25b1c <blink+0x8>

00025b36 <send_protobuf>:
{
   25b36:	b510      	push	{r4, lr}
   25b38:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
	buf_proto = send_array_dd_v0();
   25b3c:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   25b40:	4620      	mov	r0, r4
   25b42:	f7e7 f943 	bl	cdcc <send_array_dd_v0>
	send_bluetooth(buf_proto);
   25b46:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   25b4a:	f240 72cc 	movw	r2, #1996	; 0x7cc
   25b4e:	4668      	mov	r0, sp
   25b50:	f005 f8ee 	bl	2ad30 <memcpy>
   25b54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   25b58:	f7e6 fcfc 	bl	c554 <send_bluetooth>
}
   25b5c:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   25b60:	bd10      	pop	{r4, pc}

00025b62 <error>:
{
   25b62:	b508      	push	{r3, lr}
	turn_off_all_leds();
   25b64:	f7e6 fe56 	bl	c814 <turn_off_all_leds>
		k_sleep(K_MSEC(1000));
   25b68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   25b6c:	2100      	movs	r1, #0
   25b6e:	f7ff ffcf 	bl	25b10 <k_sleep.isra.0>
	while (true)
   25b72:	e7f9      	b.n	25b68 <error+0x6>

00025b74 <parse_comma_delimited_str>:
		printf("Field %02d: [%s]\r\n",i,fields[i]);
	}
}

int parse_comma_delimited_str(char *string, char **fields, int max_fields)
{
   25b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b76:	460d      	mov	r5, r1
   25b78:	4616      	mov	r6, r2
	int i = 0;
	fields[i++] = string;

	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   25b7a:	2401      	movs	r4, #1
		*string = '\0';
   25b7c:	2700      	movs	r7, #0
	fields[i++] = string;
   25b7e:	6008      	str	r0, [r1, #0]
	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   25b80:	42b4      	cmp	r4, r6
   25b82:	da03      	bge.n	25b8c <parse_comma_delimited_str+0x18>
   25b84:	212c      	movs	r1, #44	; 0x2c
   25b86:	f005 fa35 	bl	2aff4 <strchr>
   25b8a:	b908      	cbnz	r0, 25b90 <parse_comma_delimited_str+0x1c>
		fields[i++] = ++string;
	}

	return --i;
   25b8c:	1e60      	subs	r0, r4, #1
}
   25b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*string = '\0';
   25b90:	f800 7b01 	strb.w	r7, [r0], #1
		fields[i++] = ++string;
   25b94:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
   25b98:	3401      	adds	r4, #1
   25b9a:	e7f1      	b.n	25b80 <parse_comma_delimited_str+0xc>

00025b9c <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   25b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   25b9e:	6806      	ldr	r6, [r0, #0]
   25ba0:	8902      	ldrh	r2, [r0, #8]
   25ba2:	8a33      	ldrh	r3, [r6, #16]
   25ba4:	429a      	cmp	r2, r3
   25ba6:	d271      	bcs.n	25c8c <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   25ba8:	6831      	ldr	r1, [r6, #0]
   25baa:	8942      	ldrh	r2, [r0, #10]
   25bac:	0093      	lsls	r3, r2, #2
   25bae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   25bb2:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   25bb6:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   25bba:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   25bbc:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   25bbe:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   25bc2:	d01f      	beq.n	25c04 <load_descriptor_values+0x68>
   25bc4:	2902      	cmp	r1, #2
   25bc6:	d02a      	beq.n	25c1e <load_descriptor_values+0x82>
   25bc8:	2900      	cmp	r1, #0
   25bca:	d135      	bne.n	25c38 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   25bcc:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   25bd0:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   25bd4:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   25bd8:	0f12      	lsrs	r2, r2, #28
   25bda:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   25bdc:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   25bde:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   25be2:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   25be4:	2a00      	cmp	r2, #0
   25be6:	d134      	bne.n	25c52 <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   25be8:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   25bea:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   25bec:	f004 040e 	and.w	r4, r4, #14
   25bf0:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   25bf2:	bf11      	iteee	ne
   25bf4:	2300      	movne	r3, #0
   25bf6:	89c2      	ldrheq	r2, [r0, #14]
   25bf8:	6873      	ldreq	r3, [r6, #4]
   25bfa:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   25bfe:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   25c00:	2001      	movs	r0, #1
}
   25c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   25c04:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   25c06:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   25c0a:	4419      	add	r1, r3
   25c0c:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   25c0e:	0f0b      	lsrs	r3, r1, #28
   25c10:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   25c14:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   25c16:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   25c18:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   25c1c:	e7dd      	b.n	25bda <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   25c1e:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   25c20:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   25c24:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   25c26:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   25c2a:	0a1a      	lsrs	r2, r3, #8
   25c2c:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   25c30:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   25c32:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   25c34:	898a      	ldrh	r2, [r1, #12]
            break;
   25c36:	e7d0      	b.n	25bda <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   25c38:	6832      	ldr	r2, [r6, #0]
   25c3a:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   25c3c:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   25c40:	0a19      	lsrs	r1, r3, #8
   25c42:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   25c46:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   25c4a:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   25c4c:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   25c4e:	b25b      	sxtb	r3, r3
            break;
   25c50:	e7c3      	b.n	25bda <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   25c52:	443a      	add	r2, r7
   25c54:	6182      	str	r2, [r0, #24]
        if (size_offset)
   25c56:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   25c5a:	b123      	cbz	r3, 25c66 <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   25c5c:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   25c5e:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   25c60:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   25c62:	d109      	bne.n	25c78 <load_descriptor_values+0xdc>
   25c64:	e00f      	b.n	25c86 <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   25c66:	f004 0530 	and.w	r5, r4, #48	; 0x30
   25c6a:	2d20      	cmp	r5, #32
   25c6c:	d1f7      	bne.n	25c5e <load_descriptor_values+0xc2>
   25c6e:	2c3f      	cmp	r4, #63	; 0x3f
   25c70:	d804      	bhi.n	25c7c <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   25c72:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   25c76:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   25c78:	61c2      	str	r2, [r0, #28]
   25c7a:	e7b7      	b.n	25bec <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   25c7c:	2980      	cmp	r1, #128	; 0x80
   25c7e:	d1fa      	bne.n	25c76 <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   25c80:	f100 0314 	add.w	r3, r0, #20
   25c84:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   25c86:	6813      	ldr	r3, [r2, #0]
   25c88:	61c3      	str	r3, [r0, #28]
   25c8a:	e7af      	b.n	25bec <load_descriptor_values+0x50>
        return false;
   25c8c:	2000      	movs	r0, #0
   25c8e:	e7b8      	b.n	25c02 <load_descriptor_values+0x66>

00025c90 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   25c90:	8903      	ldrh	r3, [r0, #8]
{
   25c92:	b510      	push	{r4, lr}
    iter->index++;
   25c94:	3301      	adds	r3, #1
   25c96:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   25c98:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   25c9a:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   25c9c:	8a0a      	ldrh	r2, [r1, #16]
   25c9e:	429a      	cmp	r2, r3
   25ca0:	d803      	bhi.n	25caa <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   25ca2:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   25ca4:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   25ca8:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   25caa:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   25cac:	680b      	ldr	r3, [r1, #0]
   25cae:	8942      	ldrh	r2, [r0, #10]
   25cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   25cb4:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   25cb6:	f001 0103 	and.w	r1, r1, #3
   25cba:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   25cbe:	440a      	add	r2, r1
   25cc0:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   25cc2:	8982      	ldrh	r2, [r0, #12]
   25cc4:	f003 0130 	and.w	r1, r3, #48	; 0x30
   25cc8:	2900      	cmp	r1, #0
   25cca:	bf08      	it	eq
   25ccc:	3201      	addeq	r2, #1
   25cce:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   25cd0:	89c2      	ldrh	r2, [r0, #14]
   25cd2:	f003 030e 	and.w	r3, r3, #14
   25cd6:	2b08      	cmp	r3, #8
   25cd8:	bf08      	it	eq
   25cda:	3201      	addeq	r2, #1
   25cdc:	81c2      	strh	r2, [r0, #14]
}
   25cde:	e7e3      	b.n	25ca8 <advance_iterator+0x18>

00025ce0 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   25ce0:	b570      	push	{r4, r5, r6, lr}
   25ce2:	4604      	mov	r4, r0
   25ce4:	460e      	mov	r6, r1
   25ce6:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   25ce8:	2100      	movs	r1, #0
   25cea:	2220      	movs	r2, #32
   25cec:	3008      	adds	r0, #8
   25cee:	f005 f859 	bl	2ada4 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   25cf2:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   25cf6:	4620      	mov	r0, r4
}
   25cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   25cfc:	f7ff bf4e 	b.w	25b9c <load_descriptor_values>

00025d00 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   25d00:	b538      	push	{r3, r4, r5, lr}
   25d02:	460c      	mov	r4, r1
   25d04:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   25d06:	680b      	ldr	r3, [r1, #0]
   25d08:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   25d0a:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   25d0c:	681b      	ldr	r3, [r3, #0]
   25d0e:	0a1b      	lsrs	r3, r3, #8
   25d10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   25d14:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   25d16:	bf14      	ite	ne
   25d18:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   25d1a:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   25d1c:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   25d1e:	f7ff ffdf 	bl	25ce0 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   25d22:	622c      	str	r4, [r5, #32]
    return status;
}
   25d24:	bd38      	pop	{r3, r4, r5, pc}

00025d26 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   25d26:	b510      	push	{r4, lr}
   25d28:	4604      	mov	r4, r0
    advance_iterator(iter);
   25d2a:	f7ff ffb1 	bl	25c90 <advance_iterator>
    (void)load_descriptor_values(iter);
   25d2e:	f7ff ff35 	bl	25b9c <load_descriptor_values>
    return iter->index != 0;
   25d32:	8920      	ldrh	r0, [r4, #8]
}
   25d34:	3800      	subs	r0, #0
   25d36:	bf18      	it	ne
   25d38:	2001      	movne	r0, #1
   25d3a:	bd10      	pop	{r4, pc}

00025d3c <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   25d3c:	f7ff bfd0 	b.w	25ce0 <pb_field_iter_begin>

00025d40 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   25d40:	f7ff bfde 	b.w	25d00 <pb_field_iter_begin_extension>

00025d44 <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   25d44:	b410      	push	{r4}
   25d46:	460b      	mov	r3, r1
   25d48:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   25d4a:	8a52      	ldrh	r2, [r2, #18]
   25d4c:	2a08      	cmp	r2, #8
   25d4e:	d10e      	bne.n	25d6e <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   25d50:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   25d52:	b162      	cbz	r2, 25d6e <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   25d54:	b128      	cbz	r0, 25d62 <pb_default_field_callback+0x1e>
   25d56:	6814      	ldr	r4, [r2, #0]
   25d58:	b11c      	cbz	r4, 25d62 <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   25d5a:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   25d5c:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   25d5e:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   25d60:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   25d62:	b123      	cbz	r3, 25d6e <pb_default_field_callback+0x2a>
   25d64:	6814      	ldr	r4, [r2, #0]
   25d66:	b114      	cbz	r4, 25d6e <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   25d68:	4618      	mov	r0, r3
   25d6a:	3204      	adds	r2, #4
   25d6c:	e7f6      	b.n	25d5c <pb_default_field_callback+0x18>
}
   25d6e:	2001      	movs	r0, #1
   25d70:	bc10      	pop	{r4}
   25d72:	4770      	bx	lr

00025d74 <buf_write>:
{
   25d74:	4603      	mov	r3, r0
   25d76:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   25d78:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   25d7a:	1884      	adds	r4, r0, r2
   25d7c:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25d7e:	f004 ffd7 	bl	2ad30 <memcpy>
}
   25d82:	2001      	movs	r0, #1
   25d84:	bd10      	pop	{r4, pc}

00025d86 <pb_encode_varint>:
{
   25d86:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   25d88:	2a80      	cmp	r2, #128	; 0x80
{
   25d8a:	b085      	sub	sp, #20
    if (value <= 0x7F)
   25d8c:	f173 0100 	sbcs.w	r1, r3, #0
{
   25d90:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   25d92:	b2d4      	uxtb	r4, r2
   25d94:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   25d96:	d206      	bcs.n	25da6 <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   25d98:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   25d9a:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   25d9e:	f7e7 f9e1 	bl	d164 <pb_write>
}
   25da2:	b005      	add	sp, #20
   25da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   25da6:	09d5      	lsrs	r5, r2, #7
   25da8:	4608      	mov	r0, r1
    size_t i = 0;
   25daa:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   25dac:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   25db0:	ea53 0c05 	orrs.w	ip, r3, r5
   25db4:	4617      	mov	r7, r2
        buffer[i++] = byte;
   25db6:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   25dba:	d108      	bne.n	25dce <pb_encode_varint+0x48>
   25dbc:	463a      	mov	r2, r7
    buffer[i++] = byte;
   25dbe:	f102 0310 	add.w	r3, r2, #16
   25dc2:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   25dc4:	4630      	mov	r0, r6
    buffer[i++] = byte;
   25dc6:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   25dca:	3201      	adds	r2, #1
   25dcc:	e7e7      	b.n	25d9e <pb_encode_varint+0x18>
        byte |= 0x80;
   25dce:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   25dd2:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   25dd4:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   25dd8:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   25ddc:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   25de0:	d1e6      	bne.n	25db0 <pb_encode_varint+0x2a>
    if (high)
   25de2:	2b00      	cmp	r3, #0
   25de4:	d0eb      	beq.n	25dbe <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   25de6:	0118      	lsls	r0, r3, #4
   25de8:	f000 0070 	and.w	r0, r0, #112	; 0x70
   25dec:	4304      	orrs	r4, r0
        high >>= 3;
   25dee:	08db      	lsrs	r3, r3, #3
        while (high)
   25df0:	2b00      	cmp	r3, #0
   25df2:	d0e4      	beq.n	25dbe <pb_encode_varint+0x38>
            byte |= 0x80;
   25df4:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   25df8:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   25dfa:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   25dfe:	3201      	adds	r2, #1
   25e00:	09db      	lsrs	r3, r3, #7
   25e02:	e7f5      	b.n	25df0 <pb_encode_varint+0x6a>

00025e04 <pb_encode_svarint>:
    if (value < 0)
   25e04:	1892      	adds	r2, r2, r2
   25e06:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   25e0a:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   25e0e:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   25e12:	f7ff bfb8 	b.w	25d86 <pb_encode_varint>

00025e16 <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   25e16:	2204      	movs	r2, #4
   25e18:	f7e7 b9a4 	b.w	d164 <pb_write>

00025e1c <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   25e1c:	2208      	movs	r2, #8
   25e1e:	f7e7 b9a1 	b.w	d164 <pb_write>

00025e22 <pb_encode_tag>:
{
   25e22:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   25e24:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   25e28:	0f5b      	lsrs	r3, r3, #29
   25e2a:	f7ff bfac 	b.w	25d86 <pb_encode_varint>

00025e2e <pb_encode_string>:
{
   25e2e:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   25e30:	2300      	movs	r3, #0
{
   25e32:	4604      	mov	r4, r0
   25e34:	460d      	mov	r5, r1
   25e36:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   25e38:	f7ff ffa5 	bl	25d86 <pb_encode_varint>
   25e3c:	b130      	cbz	r0, 25e4c <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   25e3e:	4632      	mov	r2, r6
   25e40:	4629      	mov	r1, r5
   25e42:	4620      	mov	r0, r4
}
   25e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   25e48:	f7e7 b98c 	b.w	d164 <pb_write>
}
   25e4c:	bd70      	pop	{r4, r5, r6, pc}

00025e4e <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   25e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25e52:	4606      	mov	r6, r0
   25e54:	460d      	mov	r5, r1
   25e56:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   25e58:	4698      	mov	r8, r3
   25e5a:	b32b      	cbz	r3, 25ea8 <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   25e5c:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   25e60:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   25e64:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   25e68:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   25e6a:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   25e6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   25e70:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   25e74:	441c      	add	r4, r3
   25e76:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   25e78:	45ca      	cmp	sl, r9
   25e7a:	d309      	bcc.n	25e90 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   25e7c:	4639      	mov	r1, r7
   25e7e:	4630      	mov	r0, r6
   25e80:	46ac      	mov	ip, r5
   25e82:	f8d8 2004 	ldr.w	r2, [r8, #4]
   25e86:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   25e8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   25e8e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   25e90:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   25e94:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   25e98:	4620      	mov	r0, r4
		*ps = s;
   25e9a:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   25e9e:	f7e3 fab4 	bl	940a <strlen>
   25ea2:	3001      	adds	r0, #1
   25ea4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   25ea6:	e7e7      	b.n	25e78 <cbpprintf_external+0x2a>
}
   25ea8:	f06f 0015 	mvn.w	r0, #21
   25eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025eb0 <arch_printk_char_out>:
}
   25eb0:	2000      	movs	r0, #0
   25eb2:	4770      	bx	lr

00025eb4 <str_out>:
{
   25eb4:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25eb6:	688a      	ldr	r2, [r1, #8]
   25eb8:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   25eba:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25ebc:	b114      	cbz	r4, 25ec4 <str_out+0x10>
   25ebe:	684b      	ldr	r3, [r1, #4]
   25ec0:	4293      	cmp	r3, r2
   25ec2:	dc01      	bgt.n	25ec8 <str_out+0x14>
		ctx->count++;
   25ec4:	608d      	str	r5, [r1, #8]
}
   25ec6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   25ec8:	3b01      	subs	r3, #1
   25eca:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   25ecc:	bf08      	it	eq
   25ece:	2200      	moveq	r2, #0
   25ed0:	608d      	str	r5, [r1, #8]
   25ed2:	bf0c      	ite	eq
   25ed4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   25ed6:	54a0      	strbne	r0, [r4, r2]
   25ed8:	e7f5      	b.n	25ec6 <str_out+0x12>

00025eda <printk>:
{
   25eda:	b40f      	push	{r0, r1, r2, r3}
   25edc:	b507      	push	{r0, r1, r2, lr}
   25ede:	a904      	add	r1, sp, #16
   25ee0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25ee4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   25ee6:	f7e7 fe15 	bl	db14 <vprintk>
}
   25eea:	b003      	add	sp, #12
   25eec:	f85d eb04 	ldr.w	lr, [sp], #4
   25ef0:	b004      	add	sp, #16
   25ef2:	4770      	bx	lr

00025ef4 <snprintk>:
{
   25ef4:	b40c      	push	{r2, r3}
   25ef6:	b507      	push	{r0, r1, r2, lr}
   25ef8:	ab04      	add	r3, sp, #16
   25efa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25efe:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   25f00:	f7e7 fe16 	bl	db30 <vsnprintk>
}
   25f04:	b003      	add	sp, #12
   25f06:	f85d eb04 	ldr.w	lr, [sp], #4
   25f0a:	b002      	add	sp, #8
   25f0c:	4770      	bx	lr

00025f0e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   25f0e:	4604      	mov	r4, r0
   25f10:	b508      	push	{r3, lr}
   25f12:	4608      	mov	r0, r1
   25f14:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   25f16:	461a      	mov	r2, r3
   25f18:	47a0      	blx	r4
	return z_impl_z_current_get();
   25f1a:	f7fc fe0d 	bl	22b38 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   25f1e:	f7eb fd45 	bl	119ac <z_impl_k_thread_abort>

00025f22 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   25f22:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   25f26:	8840      	ldrh	r0, [r0, #2]
}
   25f28:	0840      	lsrs	r0, r0, #1
   25f2a:	4770      	bx	lr

00025f2c <free_list_add>:
{
   25f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25f2e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25f30:	f7ff fff7 	bl	25f22 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25f34:	fab0 f080 	clz	r0, r0
   25f38:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   25f3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   25f40:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   25f44:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   25f46:	1d17      	adds	r7, r2, #4
{
   25f48:	460c      	mov	r4, r1
   25f4a:	3206      	adds	r2, #6
   25f4c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   25f4e:	b956      	cbnz	r6, 25f66 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   25f50:	2101      	movs	r1, #1
   25f52:	fa01 f000 	lsl.w	r0, r1, r0
   25f56:	68d9      	ldr	r1, [r3, #12]
   25f58:	4301      	orrs	r1, r0
   25f5a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   25f5c:	f8cc 4010 	str.w	r4, [ip, #16]
   25f60:	53dd      	strh	r5, [r3, r7]
   25f62:	529d      	strh	r5, [r3, r2]
}
   25f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   25f66:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   25f68:	3104      	adds	r1, #4
   25f6a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   25f6c:	53d8      	strh	r0, [r3, r7]
   25f6e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   25f72:	529e      	strh	r6, [r3, r2]
   25f74:	80c5      	strh	r5, [r0, #6]
   25f76:	525d      	strh	r5, [r3, r1]
   25f78:	e7f4      	b.n	25f64 <free_list_add+0x38>

00025f7a <free_list_remove_bidx>:
{
   25f7a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   25f7c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   25f80:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   25f82:	4299      	cmp	r1, r3
   25f84:	f102 0104 	add.w	r1, r2, #4
   25f88:	d10a      	bne.n	25fa0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   25f8a:	2301      	movs	r3, #1
   25f8c:	fa03 f202 	lsl.w	r2, r3, r2
   25f90:	68c3      	ldr	r3, [r0, #12]
   25f92:	ea23 0302 	bic.w	r3, r3, r2
   25f96:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   25f98:	2300      	movs	r3, #0
   25f9a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   25f9e:	bd10      	pop	{r4, pc}
   25fa0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   25fa2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   25fa6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   25faa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25fae:	80cb      	strh	r3, [r1, #6]
   25fb0:	8082      	strh	r2, [r0, #4]
}
   25fb2:	e7f4      	b.n	25f9e <free_list_remove_bidx+0x24>

00025fb4 <free_list_remove>:
{
   25fb4:	b508      	push	{r3, lr}
   25fb6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25fb8:	f7ff ffb3 	bl	25f22 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25fbc:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   25fc0:	4618      	mov	r0, r3
}
   25fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   25fc6:	f1c2 021f 	rsb	r2, r2, #31
   25fca:	f7ff bfd6 	b.w	25f7a <free_list_remove_bidx>

00025fce <alloc_chunk>:
{
   25fce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25fd2:	fab1 f581 	clz	r5, r1
   25fd6:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   25fda:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   25fde:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   25fe2:	4603      	mov	r3, r0
   25fe4:	460e      	mov	r6, r1
	if (b->next) {
   25fe6:	b1c2      	cbz	r2, 2601a <alloc_chunk+0x4c>
   25fe8:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   25fea:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   25fee:	4618      	mov	r0, r3
   25ff0:	4621      	mov	r1, r4
   25ff2:	f7ff ff96 	bl	25f22 <chunk_size>
   25ff6:	42b0      	cmp	r0, r6
   25ff8:	d306      	bcc.n	26008 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   25ffa:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   25ffc:	4618      	mov	r0, r3
   25ffe:	f7ff ffbc 	bl	25f7a <free_list_remove_bidx>
}
   26002:	4620      	mov	r0, r4
   26004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   26008:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2600c:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2600e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   26010:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   26014:	d001      	beq.n	2601a <alloc_chunk+0x4c>
   26016:	4282      	cmp	r2, r0
   26018:	d1e7      	bne.n	25fea <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2601a:	f04f 34ff 	mov.w	r4, #4294967295
   2601e:	f1c5 0220 	rsb	r2, r5, #32
   26022:	4094      	lsls	r4, r2
   26024:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   26026:	4014      	ands	r4, r2
   26028:	d0eb      	beq.n	26002 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2602a:	fa94 f2a4 	rbit	r2, r4
   2602e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   26032:	1d11      	adds	r1, r2, #4
   26034:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   26038:	4621      	mov	r1, r4
   2603a:	e7df      	b.n	25ffc <alloc_chunk+0x2e>

0002603c <merge_chunks>:
{
   2603c:	b538      	push	{r3, r4, r5, lr}
   2603e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26040:	f7ff ff6f 	bl	25f22 <chunk_size>
{
   26044:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26046:	4604      	mov	r4, r0
   26048:	4611      	mov	r1, r2
   2604a:	4618      	mov	r0, r3
   2604c:	f7ff ff69 	bl	25f22 <chunk_size>
   26050:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26052:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   26054:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   26058:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2605a:	4618      	mov	r0, r3
   2605c:	f7ff ff61 	bl	25f22 <chunk_size>
	void *cmem = &buf[c];
   26060:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26062:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   26066:	bd38      	pop	{r3, r4, r5, pc}

00026068 <split_chunks>:
{
   26068:	b538      	push	{r3, r4, r5, lr}
   2606a:	460c      	mov	r4, r1
   2606c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2606e:	f7ff ff58 	bl	25f22 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   26072:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   26074:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   26076:	4405      	add	r5, r0
   26078:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2607c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2607e:	8060      	strh	r0, [r4, #2]
   26080:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26084:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   26086:	8044      	strh	r4, [r0, #2]
   26088:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2608c:	4618      	mov	r0, r3
   2608e:	4611      	mov	r1, r2
   26090:	f7ff ff47 	bl	25f22 <chunk_size>
	void *cmem = &buf[c];
   26094:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26096:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2609a:	bd38      	pop	{r3, r4, r5, pc}

0002609c <free_chunk>:
{
   2609c:	b538      	push	{r3, r4, r5, lr}
   2609e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   260a0:	f7ff ff3f 	bl	25f22 <chunk_size>
   260a4:	460c      	mov	r4, r1
   260a6:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   260a8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   260ac:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   260ae:	07da      	lsls	r2, r3, #31
   260b0:	d40a      	bmi.n	260c8 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   260b2:	4628      	mov	r0, r5
   260b4:	f7ff ff7e 	bl	25fb4 <free_list_remove>
	return c + chunk_size(h, c);
   260b8:	4621      	mov	r1, r4
   260ba:	4628      	mov	r0, r5
   260bc:	f7ff ff31 	bl	25f22 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   260c0:	1822      	adds	r2, r4, r0
   260c2:	4628      	mov	r0, r5
   260c4:	f7ff ffba 	bl	2603c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   260c8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   260cc:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   260ce:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   260d2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   260d4:	07db      	lsls	r3, r3, #31
   260d6:	d40c      	bmi.n	260f2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   260d8:	4628      	mov	r0, r5
   260da:	f7ff ff6b 	bl	25fb4 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   260de:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   260e2:	4622      	mov	r2, r4
   260e4:	1a61      	subs	r1, r4, r1
   260e6:	4628      	mov	r0, r5
   260e8:	f7ff ffa8 	bl	2603c <merge_chunks>
   260ec:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   260f0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   260f2:	4621      	mov	r1, r4
   260f4:	4628      	mov	r0, r5
}
   260f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   260fa:	f7ff bf17 	b.w	25f2c <free_list_add>

000260fe <sys_heap_alloc>:
{
   260fe:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   26100:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   26102:	b909      	cbnz	r1, 26108 <sys_heap_alloc+0xa>
		return NULL;
   26104:	2000      	movs	r0, #0
}
   26106:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   26108:	68ab      	ldr	r3, [r5, #8]
   2610a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2610e:	d9f9      	bls.n	26104 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26110:	310b      	adds	r1, #11
   26112:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   26114:	4621      	mov	r1, r4
   26116:	4628      	mov	r0, r5
   26118:	f7ff ff59 	bl	25fce <alloc_chunk>
	if (c == 0U) {
   2611c:	4606      	mov	r6, r0
   2611e:	2800      	cmp	r0, #0
   26120:	d0f0      	beq.n	26104 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   26122:	4601      	mov	r1, r0
   26124:	4628      	mov	r0, r5
   26126:	f7ff fefc 	bl	25f22 <chunk_size>
   2612a:	42a0      	cmp	r0, r4
   2612c:	d907      	bls.n	2613e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2612e:	4628      	mov	r0, r5
   26130:	1932      	adds	r2, r6, r4
   26132:	f7ff ff99 	bl	26068 <split_chunks>
		free_list_add(h, c + chunk_sz);
   26136:	4611      	mov	r1, r2
   26138:	4628      	mov	r0, r5
   2613a:	f7ff fef7 	bl	25f2c <free_list_add>
	void *cmem = &buf[c];
   2613e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   26142:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26144:	8853      	ldrh	r3, [r2, #2]
   26146:	3004      	adds	r0, #4
   26148:	f043 0301 	orr.w	r3, r3, #1
   2614c:	8053      	strh	r3, [r2, #2]
	return mem;
   2614e:	e7da      	b.n	26106 <sys_heap_alloc+0x8>

00026150 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26150:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   26152:	f013 0307 	ands.w	r3, r3, #7
   26156:	d105      	bne.n	26164 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   26158:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2615a:	2b00      	cmp	r3, #0
   2615c:	bf0c      	ite	eq
   2615e:	2000      	moveq	r0, #0
   26160:	2003      	movne	r0, #3
   26162:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26164:	2b02      	cmp	r3, #2
   26166:	d105      	bne.n	26174 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   26168:	8bc0      	ldrh	r0, [r0, #30]
   2616a:	fab0 f080 	clz	r0, r0
   2616e:	0940      	lsrs	r0, r0, #5
   26170:	0080      	lsls	r0, r0, #2
   26172:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   26174:	2b01      	cmp	r3, #1
   26176:	d105      	bne.n	26184 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   26178:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2617a:	2b00      	cmp	r3, #0
   2617c:	bf0c      	ite	eq
   2617e:	2000      	moveq	r0, #0
   26180:	2005      	movne	r0, #5
   26182:	4770      	bx	lr
	int evt = EVT_NOP;
   26184:	2000      	movs	r0, #0
}
   26186:	4770      	bx	lr

00026188 <validate_args>:
{
   26188:	b510      	push	{r4, lr}
   2618a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2618c:	b100      	cbz	r0, 26190 <validate_args+0x8>
   2618e:	b911      	cbnz	r1, 26196 <validate_args+0xe>
		return -EINVAL;
   26190:	f06f 0015 	mvn.w	r0, #21
}
   26194:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   26196:	1d08      	adds	r0, r1, #4
   26198:	f000 f82f 	bl	261fa <sys_notify_validate>
	if ((rv == 0)
   2619c:	2800      	cmp	r0, #0
   2619e:	d1f9      	bne.n	26194 <validate_args+0xc>
	    && ((cli->notify.flags
   261a0:	68a3      	ldr	r3, [r4, #8]
   261a2:	2b03      	cmp	r3, #3
   261a4:	d9f6      	bls.n	26194 <validate_args+0xc>
   261a6:	e7f3      	b.n	26190 <validate_args+0x8>

000261a8 <notify_one>:
{
   261a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261ac:	460d      	mov	r5, r1
   261ae:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   261b0:	4619      	mov	r1, r3
   261b2:	1d28      	adds	r0, r5, #4
{
   261b4:	4690      	mov	r8, r2
   261b6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   261b8:	f7e8 f8c0 	bl	e33c <sys_notify_finalize>
	if (cb) {
   261bc:	4604      	mov	r4, r0
   261be:	b138      	cbz	r0, 261d0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   261c0:	4633      	mov	r3, r6
   261c2:	4642      	mov	r2, r8
   261c4:	4629      	mov	r1, r5
   261c6:	4638      	mov	r0, r7
   261c8:	46a4      	mov	ip, r4
}
   261ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   261ce:	4760      	bx	ip
}
   261d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000261d4 <onoff_manager_init>:
{
   261d4:	b538      	push	{r3, r4, r5, lr}
   261d6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   261d8:	4605      	mov	r5, r0
   261da:	b158      	cbz	r0, 261f4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   261dc:	b151      	cbz	r1, 261f4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   261de:	680b      	ldr	r3, [r1, #0]
   261e0:	b143      	cbz	r3, 261f4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   261e2:	684b      	ldr	r3, [r1, #4]
   261e4:	b133      	cbz	r3, 261f4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   261e6:	2220      	movs	r2, #32
   261e8:	2100      	movs	r1, #0
   261ea:	f004 fddb 	bl	2ada4 <memset>
	return 0;
   261ee:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   261f0:	612c      	str	r4, [r5, #16]
}
   261f2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   261f4:	f06f 0015 	mvn.w	r0, #21
   261f8:	e7fb      	b.n	261f2 <onoff_manager_init+0x1e>

000261fa <sys_notify_validate>:
	if (notify == NULL) {
   261fa:	4603      	mov	r3, r0
   261fc:	b140      	cbz	r0, 26210 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   261fe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   26200:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   26204:	2a02      	cmp	r2, #2
   26206:	d006      	beq.n	26216 <sys_notify_validate+0x1c>
   26208:	2a03      	cmp	r2, #3
   2620a:	d004      	beq.n	26216 <sys_notify_validate+0x1c>
   2620c:	2a01      	cmp	r2, #1
   2620e:	d005      	beq.n	2621c <sys_notify_validate+0x22>
   26210:	f06f 0015 	mvn.w	r0, #21
}
   26214:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   26216:	681a      	ldr	r2, [r3, #0]
   26218:	2a00      	cmp	r2, #0
   2621a:	d0f9      	beq.n	26210 <sys_notify_validate+0x16>
		notify->result = 0;
   2621c:	2000      	movs	r0, #0
   2621e:	6098      	str	r0, [r3, #8]
   26220:	4770      	bx	lr

00026222 <outs>:
{
   26222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26226:	4607      	mov	r7, r0
   26228:	4688      	mov	r8, r1
   2622a:	4615      	mov	r5, r2
   2622c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2622e:	4614      	mov	r4, r2
   26230:	42b4      	cmp	r4, r6
   26232:	d305      	bcc.n	26240 <outs+0x1e>
   26234:	b10e      	cbz	r6, 2623a <outs+0x18>
	return (int)count;
   26236:	1b60      	subs	r0, r4, r5
   26238:	e008      	b.n	2624c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2623a:	7823      	ldrb	r3, [r4, #0]
   2623c:	2b00      	cmp	r3, #0
   2623e:	d0fa      	beq.n	26236 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   26240:	4641      	mov	r1, r8
   26242:	f814 0b01 	ldrb.w	r0, [r4], #1
   26246:	47b8      	blx	r7
		if (rc < 0) {
   26248:	2800      	cmp	r0, #0
   2624a:	daf1      	bge.n	26230 <outs+0xe>
}
   2624c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026250 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   26250:	4040      	eors	r0, r0
   26252:	f380 8811 	msr	BASEPRI, r0
   26256:	f04f 0004 	mov.w	r0, #4
   2625a:	df02      	svc	2
}
   2625c:	4770      	bx	lr

0002625e <assert_print>:

void assert_print(const char *fmt, ...)
{
   2625e:	b40f      	push	{r0, r1, r2, r3}
   26260:	b507      	push	{r0, r1, r2, lr}
   26262:	a904      	add	r1, sp, #16
   26264:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   26268:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2626a:	f7e7 fc53 	bl	db14 <vprintk>

	va_end(ap);
}
   2626e:	b003      	add	sp, #12
   26270:	f85d eb04 	ldr.w	lr, [sp], #4
   26274:	b004      	add	sp, #16
   26276:	4770      	bx	lr

00026278 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 100);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   26278:	4770      	bx	lr

0002627a <nordicsemi_nrf53_init>:
{
   2627a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2627c:	f04f 0320 	mov.w	r3, #32
   26280:	f3ef 8511 	mrs	r5, BASEPRI
   26284:	f383 8812 	msr	BASEPRI_MAX, r3
   26288:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   2628c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   26290:	2401      	movs	r4, #1
   26292:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   26294:	4621      	mov	r1, r4
   26296:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   2629a:	2021      	movs	r0, #33	; 0x21
   2629c:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   262a0:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   262a4:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   262a8:	f7e8 fe1e 	bl	eee8 <soc_secure_gpio_pin_mcu_select>
   262ac:	4621      	mov	r1, r4
   262ae:	2020      	movs	r0, #32
   262b0:	f7e8 fe1a 	bl	eee8 <soc_secure_gpio_pin_mcu_select>
   262b4:	4621      	mov	r1, r4
   262b6:	200b      	movs	r0, #11
   262b8:	f7e8 fe16 	bl	eee8 <soc_secure_gpio_pin_mcu_select>
   262bc:	4621      	mov	r1, r4
   262be:	200a      	movs	r0, #10
   262c0:	f7e8 fe12 	bl	eee8 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   262c4:	f385 8811 	msr	BASEPRI, r5
   262c8:	f3bf 8f6f 	isb	sy
}
   262cc:	2000      	movs	r0, #0
   262ce:	bd38      	pop	{r3, r4, r5, pc}

000262d0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   262d0:	2806      	cmp	r0, #6
   262d2:	d108      	bne.n	262e6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   262d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   262d8:	2201      	movs	r2, #1
   262da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   262de:	f3bf 8f4f 	dsb	sy
        __WFE();
   262e2:	bf20      	wfe
    while (true)
   262e4:	e7fd      	b.n	262e2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   262e6:	4770      	bx	lr

000262e8 <pm_state_exit_post_ops>:
   262e8:	2300      	movs	r3, #0
   262ea:	f383 8811 	msr	BASEPRI, r3
   262ee:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   262f2:	4770      	bx	lr

000262f4 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   262f4:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   262f6:	ab01      	add	r3, sp, #4
   262f8:	f003 fce2 	bl	29cc0 <tfm_platform_mem_read>

	switch (status) {
   262fc:	2802      	cmp	r0, #2
   262fe:	d00a      	beq.n	26316 <soc_secure_mem_read+0x22>
   26300:	2803      	cmp	r0, #3
   26302:	d00b      	beq.n	2631c <soc_secure_mem_read+0x28>
   26304:	b968      	cbnz	r0, 26322 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   26306:	9801      	ldr	r0, [sp, #4]
   26308:	3800      	subs	r0, #0
   2630a:	bf18      	it	ne
   2630c:	2001      	movne	r0, #1
   2630e:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   26310:	b003      	add	sp, #12
   26312:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   26316:	f06f 0015 	mvn.w	r0, #21
   2631a:	e7f9      	b.n	26310 <soc_secure_mem_read+0x1c>
	switch (status) {
   2631c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26320:	e7f6      	b.n	26310 <soc_secure_mem_read+0x1c>
		return -EPERM;
   26322:	f04f 30ff 	mov.w	r0, #4294967295
   26326:	e7f3      	b.n	26310 <soc_secure_mem_read+0x1c>

00026328 <dummy_timestamp>:
}
   26328:	2000      	movs	r0, #0
   2632a:	4770      	bx	lr

0002632c <default_get_timestamp>:
   2632c:	f003 bbab 	b.w	29a86 <sys_clock_cycle_get_32>

00026330 <atomic_inc>:
{
   26330:	4603      	mov	r3, r0
}
   26332:	e8d3 0fef 	ldaex	r0, [r3]
   26336:	1c42      	adds	r2, r0, #1
   26338:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2633c:	2900      	cmp	r1, #0
   2633e:	d1f8      	bne.n	26332 <atomic_inc+0x2>
   26340:	4770      	bx	lr

00026342 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   26342:	2100      	movs	r1, #0
{
   26344:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   26346:	4608      	mov	r0, r1
   26348:	f7e8 fdfe 	bl	ef48 <z_log_init.isra.0>
	}

	return 0;
}
   2634c:	2000      	movs	r0, #0
   2634e:	bd08      	pop	{r3, pc}

00026350 <z_log_notify_backend_enabled>:
}
   26350:	4770      	bx	lr

00026352 <z_log_get_tag>:
}
   26352:	2000      	movs	r0, #0
   26354:	4770      	bx	lr

00026356 <z_log_msg_finalize>:
{
   26356:	b570      	push	{r4, r5, r6, lr}
   26358:	460e      	mov	r6, r1
   2635a:	4615      	mov	r5, r2
   2635c:	4619      	mov	r1, r3
	if (!msg) {
   2635e:	4604      	mov	r4, r0
   26360:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   26364:	b918      	cbnz	r0, 2636e <z_log_msg_finalize+0x18>
}
   26366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2636a:	f7e8 bedb 	b.w	f124 <z_log_dropped>
	if (data) {
   2636e:	b12b      	cbz	r3, 2637c <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   26370:	3010      	adds	r0, #16
   26372:	f3c5 2349 	ubfx	r3, r5, #9, #10
   26376:	4418      	add	r0, r3
   26378:	f004 fcda 	bl	2ad30 <memcpy>
	msg->hdr.source = source;
   2637c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   26380:	4620      	mov	r0, r4
}
   26382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   26386:	f7e8 bee1 	b.w	f14c <z_log_msg_commit>

0002638a <out_func>:
{
   2638a:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2638c:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   26390:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   26394:	2101      	movs	r1, #1
   26396:	6852      	ldr	r2, [r2, #4]
   26398:	f10d 0007 	add.w	r0, sp, #7
   2639c:	4798      	blx	r3
}
   2639e:	2000      	movs	r0, #0
   263a0:	b003      	add	sp, #12
   263a2:	f85d fb04 	ldr.w	pc, [sp], #4

000263a6 <cr_out_func>:
	if (c == '\n') {
   263a6:	280a      	cmp	r0, #10
{
   263a8:	b538      	push	{r3, r4, r5, lr}
   263aa:	4604      	mov	r4, r0
   263ac:	460d      	mov	r5, r1
	if (c == '\n') {
   263ae:	d102      	bne.n	263b6 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   263b0:	200d      	movs	r0, #13
   263b2:	f7ff ffea 	bl	2638a <out_func>
	out_func(c, ctx);
   263b6:	4629      	mov	r1, r5
   263b8:	4620      	mov	r0, r4
   263ba:	f7ff ffe6 	bl	2638a <out_func>
}
   263be:	2000      	movs	r0, #0
   263c0:	bd38      	pop	{r3, r4, r5, pc}

000263c2 <buffer_write>:
{
   263c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   263c4:	4606      	mov	r6, r0
   263c6:	460d      	mov	r5, r1
   263c8:	4614      	mov	r4, r2
   263ca:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   263cc:	4621      	mov	r1, r4
   263ce:	4628      	mov	r0, r5
   263d0:	463a      	mov	r2, r7
   263d2:	47b0      	blx	r6
	} while (len != 0);
   263d4:	1a24      	subs	r4, r4, r0
		buf += processed;
   263d6:	4405      	add	r5, r0
	} while (len != 0);
   263d8:	d1f8      	bne.n	263cc <buffer_write+0xa>
}
   263da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000263dc <cbvprintf>:
{
   263dc:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   263de:	2400      	movs	r4, #0
   263e0:	9400      	str	r4, [sp, #0]
   263e2:	f7e8 f84f 	bl	e484 <z_cbvprintf_impl>
}
   263e6:	b002      	add	sp, #8
   263e8:	bd10      	pop	{r4, pc}

000263ea <log_output_flush>:
{
   263ea:	b510      	push	{r4, lr}
		     output->control_block->offset,
   263ec:	6842      	ldr	r2, [r0, #4]
{
   263ee:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   263f0:	e9d2 2300 	ldrd	r2, r3, [r2]
   263f4:	6881      	ldr	r1, [r0, #8]
   263f6:	6800      	ldr	r0, [r0, #0]
   263f8:	f7ff ffe3 	bl	263c2 <buffer_write>
	output->control_block->offset = 0;
   263fc:	2200      	movs	r2, #0
   263fe:	6863      	ldr	r3, [r4, #4]
   26400:	601a      	str	r2, [r3, #0]
}
   26402:	bd10      	pop	{r4, pc}

00026404 <nvs_flash_rd>:
{
   26404:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   26406:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   26408:	8984      	ldrh	r4, [r0, #12]
   2640a:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2640c:	fa16 f181 	uxtah	r1, r6, r1
   26410:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   26414:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   26416:	6884      	ldr	r4, [r0, #8]
   26418:	6824      	ldr	r4, [r4, #0]
   2641a:	46a4      	mov	ip, r4
}
   2641c:	bc70      	pop	{r4, r5, r6}
   2641e:	4760      	bx	ip

00026420 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   26420:	680b      	ldr	r3, [r1, #0]
   26422:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   26426:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   26428:	89c0      	ldrh	r0, [r0, #14]
   2642a:	0c1a      	lsrs	r2, r3, #16
   2642c:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   26430:	bf04      	itt	eq
   26432:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   26436:	600b      	streq	r3, [r1, #0]
}
   26438:	4770      	bx	lr

0002643a <nvs_flash_block_cmp>:
{
   2643a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2643e:	4681      	mov	r9, r0
   26440:	460e      	mov	r6, r1
   26442:	4617      	mov	r7, r2
   26444:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26446:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   26448:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2644a:	681d      	ldr	r5, [r3, #0]
   2644c:	426d      	negs	r5, r5
	block_size =
   2644e:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   26452:	b91c      	cbnz	r4, 2645c <nvs_flash_block_cmp+0x22>
	return 0;
   26454:	4620      	mov	r0, r4
}
   26456:	b009      	add	sp, #36	; 0x24
   26458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2645c:	42ac      	cmp	r4, r5
   2645e:	46a0      	mov	r8, r4
   26460:	bf28      	it	cs
   26462:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   26464:	466a      	mov	r2, sp
   26466:	4643      	mov	r3, r8
   26468:	4631      	mov	r1, r6
   2646a:	4648      	mov	r0, r9
   2646c:	f7ff ffca 	bl	26404 <nvs_flash_rd>
		if (rc) {
   26470:	2800      	cmp	r0, #0
   26472:	d1f0      	bne.n	26456 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   26474:	4642      	mov	r2, r8
   26476:	4669      	mov	r1, sp
   26478:	4638      	mov	r0, r7
   2647a:	f004 fc49 	bl	2ad10 <memcmp>
		if (rc) {
   2647e:	b920      	cbnz	r0, 2648a <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   26480:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   26484:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   26486:	4447      	add	r7, r8
   26488:	e7e3      	b.n	26452 <nvs_flash_block_cmp+0x18>
			return 1;
   2648a:	2001      	movs	r0, #1
   2648c:	e7e3      	b.n	26456 <nvs_flash_block_cmp+0x1c>

0002648e <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2648e:	4601      	mov	r1, r0
{
   26490:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26492:	2207      	movs	r2, #7
{
   26494:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26496:	20ff      	movs	r0, #255	; 0xff
   26498:	f7e7 ff7c 	bl	e394 <crc8_ccitt>
	entry->crc8 = crc8;
   2649c:	71e0      	strb	r0, [r4, #7]
}
   2649e:	bd10      	pop	{r4, pc}

000264a0 <nvs_flash_cmp_const>:
{
   264a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264a4:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   264a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   264a8:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   264aa:	681d      	ldr	r5, [r3, #0]
{
   264ac:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   264ae:	426d      	negs	r5, r5
	block_size =
   264b0:	f005 0520 	and.w	r5, r5, #32
{
   264b4:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   264b6:	4668      	mov	r0, sp
{
   264b8:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   264ba:	462a      	mov	r2, r5
   264bc:	f004 fc72 	bl	2ada4 <memset>
	while (len) {
   264c0:	b91c      	cbnz	r4, 264ca <nvs_flash_cmp_const+0x2a>
	return 0;
   264c2:	4620      	mov	r0, r4
}
   264c4:	b008      	add	sp, #32
   264c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   264ca:	42ac      	cmp	r4, r5
   264cc:	46a0      	mov	r8, r4
   264ce:	bf28      	it	cs
   264d0:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   264d2:	466a      	mov	r2, sp
   264d4:	4643      	mov	r3, r8
   264d6:	4631      	mov	r1, r6
   264d8:	4638      	mov	r0, r7
   264da:	f7ff ffae 	bl	2643a <nvs_flash_block_cmp>
		if (rc) {
   264de:	2800      	cmp	r0, #0
   264e0:	d1f0      	bne.n	264c4 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   264e2:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   264e6:	4446      	add	r6, r8
   264e8:	e7ea      	b.n	264c0 <nvs_flash_cmp_const+0x20>

000264ea <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   264ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   264ec:	ab0b      	add	r3, sp, #44	; 0x2c
   264ee:	9305      	str	r3, [sp, #20]
   264f0:	9303      	str	r3, [sp, #12]
   264f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   264f4:	9302      	str	r3, [sp, #8]
   264f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   264f8:	9301      	str	r3, [sp, #4]
   264fa:	2300      	movs	r3, #0
   264fc:	4618      	mov	r0, r3
   264fe:	9300      	str	r3, [sp, #0]
   26500:	f7e8 fe8c 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   26504:	b007      	add	sp, #28
   26506:	f85d fb04 	ldr.w	pc, [sp], #4

0002650a <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2650a:	7803      	ldrb	r3, [r0, #0]
   2650c:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2650e:	bf81      	itttt	hi
   26510:	f101 31ff 	addhi.w	r1, r1, #4294967295
   26514:	18c9      	addhi	r1, r1, r3
   26516:	425b      	neghi	r3, r3
   26518:	4019      	andhi	r1, r3
}
   2651a:	4608      	mov	r0, r1
   2651c:	4770      	bx	lr

0002651e <nvs_ate_valid>:
{
   2651e:	b570      	push	{r4, r5, r6, lr}
   26520:	460c      	mov	r4, r1
   26522:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26524:	2108      	movs	r1, #8
   26526:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   26528:	f7ff ffef 	bl	2650a <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2652c:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2652e:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26530:	4621      	mov	r1, r4
   26532:	20ff      	movs	r0, #255	; 0xff
   26534:	f7e7 ff2e 	bl	e394 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   26538:	79e3      	ldrb	r3, [r4, #7]
   2653a:	4283      	cmp	r3, r0
   2653c:	d107      	bne.n	2654e <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2653e:	89aa      	ldrh	r2, [r5, #12]
   26540:	8863      	ldrh	r3, [r4, #2]
   26542:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   26544:	4283      	cmp	r3, r0
   26546:	bf2c      	ite	cs
   26548:	2000      	movcs	r0, #0
   2654a:	2001      	movcc	r0, #1
}
   2654c:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2654e:	2000      	movs	r0, #0
   26550:	e7fc      	b.n	2654c <nvs_ate_valid+0x2e>

00026552 <nvs_close_ate_valid>:
{
   26552:	b538      	push	{r3, r4, r5, lr}
   26554:	4605      	mov	r5, r0
   26556:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   26558:	f7ff ffe1 	bl	2651e <nvs_ate_valid>
   2655c:	b1a0      	cbz	r0, 26588 <nvs_close_ate_valid+0x36>
   2655e:	88a0      	ldrh	r0, [r4, #4]
   26560:	b998      	cbnz	r0, 2658a <nvs_close_ate_valid+0x38>
   26562:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26566:	8822      	ldrh	r2, [r4, #0]
   26568:	429a      	cmp	r2, r3
   2656a:	d10d      	bne.n	26588 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2656c:	2108      	movs	r1, #8
   2656e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   26570:	f7ff ffcb 	bl	2650a <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   26574:	8862      	ldrh	r2, [r4, #2]
   26576:	89ab      	ldrh	r3, [r5, #12]
   26578:	1a9b      	subs	r3, r3, r2
   2657a:	fbb3 f2f0 	udiv	r2, r3, r0
   2657e:	fb02 3010 	mls	r0, r2, r0, r3
   26582:	fab0 f080 	clz	r0, r0
   26586:	0940      	lsrs	r0, r0, #5
}
   26588:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2658a:	2000      	movs	r0, #0
   2658c:	e7fc      	b.n	26588 <nvs_close_ate_valid+0x36>

0002658e <nvs_prev_ate>:
{
   2658e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26590:	4604      	mov	r4, r0
   26592:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26594:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   26596:	2108      	movs	r1, #8
   26598:	f7ff ffb7 	bl	2650a <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2659c:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2659e:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   265a0:	6829      	ldr	r1, [r5, #0]
   265a2:	4620      	mov	r0, r4
   265a4:	f7ff ff2e 	bl	26404 <nvs_flash_rd>
	if (rc) {
   265a8:	4606      	mov	r6, r0
   265aa:	2800      	cmp	r0, #0
   265ac:	d136      	bne.n	2661c <nvs_prev_ate+0x8e>
	*addr += ate_size;
   265ae:	682b      	ldr	r3, [r5, #0]
   265b0:	443b      	add	r3, r7
   265b2:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   265b4:	89a2      	ldrh	r2, [r4, #12]
   265b6:	b299      	uxth	r1, r3
   265b8:	1bd2      	subs	r2, r2, r7
   265ba:	4291      	cmp	r1, r2
   265bc:	d12e      	bne.n	2661c <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   265be:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   265c0:	bf09      	itett	eq
   265c2:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   265c4:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   265c8:	f102 32ff 	addeq.w	r2, r2, #4294967295
   265cc:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   265d0:	4620      	mov	r0, r4
   265d2:	2308      	movs	r3, #8
   265d4:	466a      	mov	r2, sp
   265d6:	6029      	str	r1, [r5, #0]
   265d8:	f7ff ff14 	bl	26404 <nvs_flash_rd>
	if (rc) {
   265dc:	b9e8      	cbnz	r0, 2661a <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   265de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   265e0:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   265e2:	466b      	mov	r3, sp
		if (data8[i] != value) {
   265e4:	f813 1b01 	ldrb.w	r1, [r3], #1
   265e8:	428a      	cmp	r2, r1
   265ea:	d10c      	bne.n	26606 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   265ec:	3001      	adds	r0, #1
   265ee:	2808      	cmp	r0, #8
   265f0:	d1f8      	bne.n	265e4 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   265f2:	6863      	ldr	r3, [r4, #4]
   265f4:	e005      	b.n	26602 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   265f6:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   265f8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   265fc:	0c1b      	lsrs	r3, r3, #16
   265fe:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   26600:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   26602:	602b      	str	r3, [r5, #0]
		return 0;
   26604:	e00a      	b.n	2661c <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   26606:	4669      	mov	r1, sp
   26608:	4620      	mov	r0, r4
   2660a:	f7ff ffa2 	bl	26552 <nvs_close_ate_valid>
   2660e:	2800      	cmp	r0, #0
   26610:	d1f1      	bne.n	265f6 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   26612:	4629      	mov	r1, r5
   26614:	4620      	mov	r0, r4
   26616:	f7e9 f8cd 	bl	f7b4 <nvs_recover_last_ate>
   2661a:	4606      	mov	r6, r0
}
   2661c:	4630      	mov	r0, r6
   2661e:	b003      	add	sp, #12
   26620:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026622 <nvs_flash_al_wrt>:
{
   26622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26626:	4607      	mov	r7, r0
   26628:	4690      	mov	r8, r2
	if (!len) {
   2662a:	461e      	mov	r6, r3
{
   2662c:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   2662e:	b91b      	cbnz	r3, 26638 <nvs_flash_al_wrt+0x16>
		return 0;
   26630:	2000      	movs	r0, #0
}
   26632:	b009      	add	sp, #36	; 0x24
   26634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   26638:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2663a:	8983      	ldrh	r3, [r0, #12]
   2663c:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2663e:	fa14 f181 	uxtah	r1, r4, r1
   26642:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   26646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26648:	681d      	ldr	r5, [r3, #0]
   2664a:	426d      	negs	r5, r5
	if (blen > 0) {
   2664c:	4035      	ands	r5, r6
   2664e:	d00c      	beq.n	2666a <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   26650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   26652:	6883      	ldr	r3, [r0, #8]
   26654:	4621      	mov	r1, r4
   26656:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2665a:	462b      	mov	r3, r5
   2665c:	47c8      	blx	r9
		if (rc) {
   2665e:	2800      	cmp	r0, #0
   26660:	d1e7      	bne.n	26632 <nvs_flash_al_wrt+0x10>
	if (len) {
   26662:	1b76      	subs	r6, r6, r5
   26664:	d0e4      	beq.n	26630 <nvs_flash_al_wrt+0xe>
		offset += blen;
   26666:	442c      	add	r4, r5
		data8 += blen;
   26668:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2666a:	2320      	movs	r3, #32
   2666c:	4632      	mov	r2, r6
   2666e:	4641      	mov	r1, r8
   26670:	4668      	mov	r0, sp
   26672:	f004 fb6a 	bl	2ad4a <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   26676:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   26678:	eb0d 0006 	add.w	r0, sp, r6
   2667c:	682a      	ldr	r2, [r5, #0]
   2667e:	7929      	ldrb	r1, [r5, #4]
   26680:	1b92      	subs	r2, r2, r6
   26682:	f004 fb8f 	bl	2ada4 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   26686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   26688:	682b      	ldr	r3, [r5, #0]
   2668a:	6882      	ldr	r2, [r0, #8]
   2668c:	4621      	mov	r1, r4
   2668e:	6855      	ldr	r5, [r2, #4]
   26690:	466a      	mov	r2, sp
   26692:	47a8      	blx	r5
	return rc;
   26694:	e7cd      	b.n	26632 <nvs_flash_al_wrt+0x10>

00026696 <nvs_flash_ate_wrt>:
{
   26696:	b510      	push	{r4, lr}
   26698:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2669a:	2308      	movs	r3, #8
   2669c:	6841      	ldr	r1, [r0, #4]
{
   2669e:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   266a0:	f7ff ffbf 	bl	26622 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   266a4:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   266a6:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   266a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   266aa:	f7ff ff2e 	bl	2650a <nvs_al_size.isra.0>
   266ae:	6863      	ldr	r3, [r4, #4]
   266b0:	1a1b      	subs	r3, r3, r0
   266b2:	6063      	str	r3, [r4, #4]
}
   266b4:	4610      	mov	r0, r2
   266b6:	bd10      	pop	{r4, pc}

000266b8 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   266b8:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   266ba:	2400      	movs	r4, #0
   266bc:	9400      	str	r4, [sp, #0]
   266be:	f7e9 fc81 	bl	ffc4 <nvs_read_hist>
	return rc;
}
   266c2:	b002      	add	sp, #8
   266c4:	bd10      	pop	{r4, pc}

000266c6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   266c6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   266c8:	ab0b      	add	r3, sp, #44	; 0x2c
   266ca:	9305      	str	r3, [sp, #20]
   266cc:	9303      	str	r3, [sp, #12]
   266ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   266d0:	2201      	movs	r2, #1
   266d2:	9302      	str	r3, [sp, #8]
   266d4:	2300      	movs	r3, #0
   266d6:	4618      	mov	r0, r3
   266d8:	e9cd 3300 	strd	r3, r3, [sp]
   266dc:	f7e8 fd9e 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   266e0:	b007      	add	sp, #28
   266e2:	f85d fb04 	ldr.w	pc, [sp], #4

000266e6 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   266e6:	6903      	ldr	r3, [r0, #16]
}
   266e8:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   266ec:	4770      	bx	lr

000266ee <drop_tx_buffer>:
}
   266ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
   266f2:	4770      	bx	lr

000266f4 <release_rx_buffer>:
{
   266f4:	4608      	mov	r0, r1
   266f6:	b508      	push	{r3, lr}
   266f8:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   266fa:	b118      	cbz	r0, 26704 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   266fc:	f003 feee 	bl	2a4dc <rpmsg_release_rx_buffer>
	return 0;
   26700:	2000      	movs	r0, #0
}
   26702:	bd08      	pop	{r3, pc}
		return -ENOENT;
   26704:	f06f 0001 	mvn.w	r0, #1
   26708:	e7fb      	b.n	26702 <release_rx_buffer+0xe>

0002670a <hold_rx_buffer>:
{
   2670a:	4608      	mov	r0, r1
   2670c:	b508      	push	{r3, lr}
   2670e:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   26710:	b118      	cbz	r0, 2671a <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   26712:	f003 fedb 	bl	2a4cc <rpmsg_hold_rx_buffer>
	return 0;
   26716:	2000      	movs	r0, #0
}
   26718:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2671a:	f06f 0001 	mvn.w	r0, #1
   2671e:	e7fb      	b.n	26718 <hold_rx_buffer+0xe>

00026720 <send_nocopy>:
{
   26720:	b513      	push	{r0, r1, r4, lr}
   26722:	4604      	mov	r4, r0
   26724:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26726:	6921      	ldr	r1, [r4, #16]
   26728:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   2672c:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   26730:	2902      	cmp	r1, #2
   26732:	d109      	bne.n	26748 <send_nocopy+0x28>
	if (len == 0) {
   26734:	b15b      	cbz	r3, 2674e <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   26736:	b168      	cbz	r0, 26754 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   26738:	9300      	str	r3, [sp, #0]
   2673a:	4613      	mov	r3, r2
   2673c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   26740:	f7f8 ffbe 	bl	1f6c0 <rpmsg_send_offchannel_nocopy>
}
   26744:	b002      	add	sp, #8
   26746:	bd10      	pop	{r4, pc}
		return -EBUSY;
   26748:	f06f 000f 	mvn.w	r0, #15
   2674c:	e7fa      	b.n	26744 <send_nocopy+0x24>
		return -EBADMSG;
   2674e:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   26752:	e7f7      	b.n	26744 <send_nocopy+0x24>
		return -ENOENT;
   26754:	f06f 0001 	mvn.w	r0, #1
   26758:	e7f4      	b.n	26744 <send_nocopy+0x24>

0002675a <get_tx_buffer>:
{
   2675a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2675e:	461c      	mov	r4, r3
   26760:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   26764:	4616      	mov	r6, r2
   26766:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   26768:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2676a:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2676c:	b339      	cbz	r1, 267be <get_tx_buffer+0x64>
	if (!r_data || !size) {
   2676e:	b34a      	cbz	r2, 267c4 <get_tx_buffer+0x6a>
   26770:	b344      	cbz	r4, 267c4 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   26772:	1c6a      	adds	r2, r5, #1
   26774:	f143 0300 	adc.w	r3, r3, #0
   26778:	2a02      	cmp	r2, #2
   2677a:	f173 0300 	sbcs.w	r3, r3, #0
   2677e:	d224      	bcs.n	267ca <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   26780:	6822      	ldr	r2, [r4, #0]
   26782:	b142      	cbz	r2, 26796 <get_tx_buffer+0x3c>
   26784:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   26788:	429a      	cmp	r2, r3
   2678a:	d904      	bls.n	26796 <get_tx_buffer+0x3c>
		return -ENOMEM;
   2678c:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   26790:	6023      	str	r3, [r4, #0]
}
   26792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   26796:	ea05 0908 	and.w	r9, r5, r8
   2679a:	f109 0301 	add.w	r3, r9, #1
   2679e:	425a      	negs	r2, r3
   267a0:	415a      	adcs	r2, r3
   267a2:	4621      	mov	r1, r4
   267a4:	4638      	mov	r0, r7
   267a6:	f003 fea2 	bl	2a4ee <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   267aa:	b988      	cbnz	r0, 267d0 <get_tx_buffer+0x76>
   267ac:	f1b8 3fff 	cmp.w	r8, #4294967295
   267b0:	bf08      	it	eq
   267b2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   267b6:	d0f0      	beq.n	2679a <get_tx_buffer+0x40>
		return -ENOBUFS;
   267b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   267bc:	e7e9      	b.n	26792 <get_tx_buffer+0x38>
		return -ENOENT;
   267be:	f06f 0001 	mvn.w	r0, #1
   267c2:	e7e6      	b.n	26792 <get_tx_buffer+0x38>
		return -EINVAL;
   267c4:	f06f 0015 	mvn.w	r0, #21
   267c8:	e7e3      	b.n	26792 <get_tx_buffer+0x38>
		return -ENOTSUP;
   267ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   267ce:	e7e0      	b.n	26792 <get_tx_buffer+0x38>
	(*r_data) = payload;
   267d0:	6030      	str	r0, [r6, #0]
	return 0;
   267d2:	2000      	movs	r0, #0
   267d4:	e7dd      	b.n	26792 <get_tx_buffer+0x38>

000267d6 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   267d6:	f003 becf 	b.w	2a578 <rpmsg_destroy_ept>

000267da <get_ept_slot_with_name>:
{
   267da:	b538      	push	{r3, r4, r5, lr}
   267dc:	460d      	mov	r5, r1
   267de:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   267e0:	f100 0140 	add.w	r1, r0, #64	; 0x40
   267e4:	4628      	mov	r0, r5
   267e6:	f7e2 fe06 	bl	93f6 <strcmp>
   267ea:	b130      	cbz	r0, 267fa <get_ept_slot_with_name+0x20>
   267ec:	4628      	mov	r0, r5
   267ee:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   267f2:	f7e2 fe00 	bl	93f6 <strcmp>
   267f6:	b920      	cbnz	r0, 26802 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   267f8:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   267fa:	2370      	movs	r3, #112	; 0x70
   267fc:	fb03 4000 	mla	r0, r3, r0, r4
}
   26800:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   26802:	2000      	movs	r0, #0
   26804:	e7fc      	b.n	26800 <get_ept_slot_with_name+0x26>

00026806 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   26806:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   2680a:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   2680e:	f004 b93b 	b.w	2aa88 <k_work_submit_to_queue>

00026812 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   26812:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   26816:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2681a:	3b00      	subs	r3, #0
   2681c:	bf18      	it	ne
   2681e:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   26820:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   26824:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   26828:	f003 be02 	b.w	2a430 <virtqueue_notification>

0002682c <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   2682c:	68cb      	ldr	r3, [r1, #12]
   2682e:	b133      	cbz	r3, 2683e <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   26830:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   26832:	6883      	ldr	r3, [r0, #8]
   26834:	681b      	ldr	r3, [r3, #0]
   26836:	b113      	cbz	r3, 2683e <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   26838:	2200      	movs	r2, #0
   2683a:	6909      	ldr	r1, [r1, #16]
   2683c:	4718      	bx	r3
}
   2683e:	4770      	bx	lr

00026840 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   26840:	f7fa b8c0 	b.w	209c4 <z_impl_k_mutex_unlock>

00026844 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26844:	e8d0 3fef 	ldaex	r3, [r0]
   26848:	e8c0 1fe2 	stlex	r2, r1, [r0]
   2684c:	2a00      	cmp	r2, #0
   2684e:	d1f9      	bne.n	26844 <atomic_set.isra.0>
}
   26850:	4770      	bx	lr

00026852 <backend_init>:
{
   26852:	b510      	push	{r4, lr}
	data->role = conf->role;
   26854:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   26856:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   26858:	681b      	ldr	r3, [r3, #0]
   2685a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   2685e:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   26862:	f004 f879 	bl	2a958 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   26866:	2100      	movs	r1, #0
   26868:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   2686c:	f7ff ffea 	bl	26844 <atomic_set.isra.0>
}
   26870:	4608      	mov	r0, r1
   26872:	bd10      	pop	{r4, pc}

00026874 <ns_bind_cb>:
{
   26874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26878:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2687a:	460d      	mov	r5, r1
   2687c:	b379      	cbz	r1, 268de <ns_bind_cb+0x6a>
   2687e:	780b      	ldrb	r3, [r1, #0]
   26880:	b36b      	cbz	r3, 268de <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   26882:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   26886:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2688a:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2688c:	f04f 32ff 	mov.w	r2, #4294967295
   26890:	f04f 33ff 	mov.w	r3, #4294967295
   26894:	4620      	mov	r0, r4
   26896:	f7f9 ffc5 	bl	20824 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2689a:	462a      	mov	r2, r5
   2689c:	4640      	mov	r0, r8
   2689e:	a901      	add	r1, sp, #4
   268a0:	f7e9 fcc4 	bl	1022c <get_ept>
	if (rpmsg_ept == NULL) {
   268a4:	9e01      	ldr	r6, [sp, #4]
   268a6:	b92e      	cbnz	r6, 268b4 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   268a8:	4620      	mov	r0, r4
}
   268aa:	b002      	add	sp, #8
   268ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   268b0:	f7ff bfc6 	b.w	26840 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   268b4:	b158      	cbz	r0, 268ce <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   268b6:	4620      	mov	r0, r4
   268b8:	f7ff ffc2 	bl	26840 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   268bc:	463b      	mov	r3, r7
   268be:	462a      	mov	r2, r5
   268c0:	4631      	mov	r1, r6
   268c2:	4640      	mov	r0, r8
}
   268c4:	b002      	add	sp, #8
   268c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   268ca:	f7e9 bc8d 	b.w	101e8 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   268ce:	2220      	movs	r2, #32
   268d0:	4629      	mov	r1, r5
   268d2:	f106 0040 	add.w	r0, r6, #64	; 0x40
   268d6:	f004 fbb4 	bl	2b042 <strncpy>
		rpmsg_ept->dest = dest;
   268da:	6637      	str	r7, [r6, #96]	; 0x60
   268dc:	e7e4      	b.n	268a8 <ns_bind_cb+0x34>
}
   268de:	b002      	add	sp, #8
   268e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000268e4 <ept_cb>:
{
   268e4:	b510      	push	{r4, lr}
   268e6:	4608      	mov	r0, r1
   268e8:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   268ea:	4611      	mov	r1, r2
   268ec:	b952      	cbnz	r2, 26904 <ept_cb+0x20>
		if (!ept->bound) {
   268ee:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   268f2:	b92a      	cbnz	r2, 26900 <ept_cb+0x1c>
			ept->bound = true;
   268f4:	2201      	movs	r2, #1
			bound_cb(ept);
   268f6:	4618      	mov	r0, r3
			ept->bound = true;
   268f8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   268fc:	f7e9 fde8 	bl	104d0 <bound_cb>
}
   26900:	2000      	movs	r0, #0
   26902:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   26904:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   26906:	6854      	ldr	r4, [r2, #4]
   26908:	2c00      	cmp	r4, #0
   2690a:	d0f9      	beq.n	26900 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   2690c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2690e:	47a0      	blx	r4
   26910:	e7f6      	b.n	26900 <ept_cb+0x1c>

00026912 <deregister_ept>:
{
   26912:	b510      	push	{r4, lr}
   26914:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26916:	6903      	ldr	r3, [r0, #16]
   26918:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   2691c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   26920:	2b02      	cmp	r3, #2
   26922:	d10a      	bne.n	2693a <deregister_ept+0x28>
	if (!rpmsg_ept) {
   26924:	b161      	cbz	r1, 26940 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   26926:	4608      	mov	r0, r1
   26928:	f003 fe26 	bl	2a578 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   2692c:	2270      	movs	r2, #112	; 0x70
   2692e:	2100      	movs	r1, #0
   26930:	4620      	mov	r0, r4
   26932:	f004 fa37 	bl	2ada4 <memset>
	return 0;
   26936:	2000      	movs	r0, #0
}
   26938:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2693a:	f06f 000f 	mvn.w	r0, #15
   2693e:	e7fb      	b.n	26938 <deregister_ept+0x26>
		return -ENOENT;
   26940:	f06f 0001 	mvn.w	r0, #1
   26944:	e7f8      	b.n	26938 <deregister_ept+0x26>

00026946 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   26946:	f003 be17 	b.w	2a578 <rpmsg_destroy_ept>

0002694a <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2694a:	b538      	push	{r3, r4, r5, lr}
   2694c:	460d      	mov	r5, r1
	if (!instance) {
   2694e:	4604      	mov	r4, r0
   26950:	b160      	cbz	r0, 2696c <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   26952:	30e0      	adds	r0, #224	; 0xe0
   26954:	f003 ff91 	bl	2a87a <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   26958:	b10d      	cbz	r5, 2695e <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2695a:	2000      	movs	r0, #0
}
   2695c:	bd38      	pop	{r3, r4, r5, pc}
   2695e:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   26962:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   26966:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   2696a:	e7f6      	b.n	2695a <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   2696c:	f06f 0015 	mvn.w	r0, #21
   26970:	e7f4      	b.n	2695c <ipc_rpmsg_deinit+0x12>

00026972 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   26972:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   26974:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   26978:	b113      	cbz	r3, 26980 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2697a:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   2697e:	4718      	bx	r3
}
   26980:	4770      	bx	lr

00026982 <virtio_set_features>:
}
   26982:	4770      	bx	lr

00026984 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   26984:	6983      	ldr	r3, [r0, #24]
   26986:	b913      	cbnz	r3, 2698e <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   26988:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2698c:	7019      	strb	r1, [r3, #0]
}
   2698e:	4770      	bx	lr

00026990 <virtio_get_features>:
}
   26990:	2001      	movs	r0, #1
   26992:	4770      	bx	lr

00026994 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   26994:	6983      	ldr	r3, [r0, #24]
   26996:	2b01      	cmp	r3, #1
   26998:	d104      	bne.n	269a4 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2699a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2699e:	7818      	ldrb	r0, [r3, #0]
   269a0:	b2c0      	uxtb	r0, r0
   269a2:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   269a4:	2004      	movs	r0, #4
}
   269a6:	4770      	bx	lr

000269a8 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   269a8:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   269aa:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   269ac:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   269ae:	4620      	mov	r0, r4
   269b0:	f004 f9a6 	bl	2ad00 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   269b4:	4605      	mov	r5, r0
   269b6:	b118      	cbz	r0, 269c0 <virtqueue_allocate+0x18>
   269b8:	4622      	mov	r2, r4
   269ba:	2100      	movs	r1, #0
   269bc:	f004 f9f2 	bl	2ada4 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   269c0:	4628      	mov	r0, r5
   269c2:	bd38      	pop	{r3, r4, r5, pc}

000269c4 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   269c4:	b538      	push	{r3, r4, r5, lr}
   269c6:	4604      	mov	r4, r0
   269c8:	2230      	movs	r2, #48	; 0x30
   269ca:	2100      	movs	r1, #0
   269cc:	f004 f9ea 	bl	2ada4 <memset>
   269d0:	2218      	movs	r2, #24
   269d2:	2100      	movs	r1, #0
   269d4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   269d8:	f004 f9e4 	bl	2ada4 <memset>
   269dc:	2218      	movs	r2, #24
   269de:	2100      	movs	r1, #0
   269e0:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   269e4:	f004 f9de 	bl	2ada4 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   269e8:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   269ec:	f7f8 fe1a 	bl	1f624 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   269f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   269f4:	f7f8 fe16 	bl	1f624 <virtqueue_free>
	vr->shm_io = 0;
   269f8:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   269fa:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   269fe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   26a02:	f7f8 fd2b 	bl	1f45c <metal_device_close>
	metal_finish();
   26a06:	f7f8 fd85 	bl	1f514 <metal_finish>
	if (io->ops.close)
   26a0a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   26a0c:	f104 0540 	add.w	r5, r4, #64	; 0x40
   26a10:	b10b      	cbz	r3, 26a16 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   26a12:	4628      	mov	r0, r5
   26a14:	4798      	blx	r3
   26a16:	2238      	movs	r2, #56	; 0x38
   26a18:	2100      	movs	r1, #0
   26a1a:	4628      	mov	r0, r5
   26a1c:	f004 f9c2 	bl	2ada4 <memset>

	return 0;
}
   26a20:	2000      	movs	r0, #0
   26a22:	bd38      	pop	{r3, r4, r5, pc}

00026a24 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   26a24:	b538      	push	{r3, r4, r5, lr}
   26a26:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   26a28:	42ab      	cmp	r3, r5
{
   26a2a:	4611      	mov	r1, r2
   26a2c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   26a2e:	d804      	bhi.n	26a3a <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26a30:	461a      	mov	r2, r3
   26a32:	f004 f97d 	bl	2ad30 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   26a36:	4620      	mov	r0, r4
   26a38:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   26a3a:	2400      	movs	r4, #0
   26a3c:	e7fb      	b.n	26a36 <_copy+0x12>

00026a3e <_set>:
__ssp_bos_icheck3(memset, void *, int)
   26a3e:	f004 b9b1 	b.w	2ada4 <memset>

00026a42 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   26a42:	09c3      	lsrs	r3, r0, #7
   26a44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26a48:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   26a4c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   26a50:	b2c0      	uxtb	r0, r0
   26a52:	4770      	bx	lr

00026a54 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   26a54:	78cb      	ldrb	r3, [r1, #3]
   26a56:	7802      	ldrb	r2, [r0, #0]
   26a58:	4053      	eors	r3, r2
   26a5a:	7003      	strb	r3, [r0, #0]
   26a5c:	884b      	ldrh	r3, [r1, #2]
   26a5e:	7842      	ldrb	r2, [r0, #1]
   26a60:	4053      	eors	r3, r2
   26a62:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   26a64:	680a      	ldr	r2, [r1, #0]
   26a66:	7883      	ldrb	r3, [r0, #2]
   26a68:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26a6c:	7083      	strb	r3, [r0, #2]
   26a6e:	680a      	ldr	r2, [r1, #0]
   26a70:	78c3      	ldrb	r3, [r0, #3]
   26a72:	4053      	eors	r3, r2
   26a74:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   26a76:	79cb      	ldrb	r3, [r1, #7]
   26a78:	7902      	ldrb	r2, [r0, #4]
   26a7a:	4053      	eors	r3, r2
   26a7c:	7103      	strb	r3, [r0, #4]
   26a7e:	88cb      	ldrh	r3, [r1, #6]
   26a80:	7942      	ldrb	r2, [r0, #5]
   26a82:	4053      	eors	r3, r2
   26a84:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   26a86:	684a      	ldr	r2, [r1, #4]
   26a88:	7983      	ldrb	r3, [r0, #6]
   26a8a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26a8e:	7183      	strb	r3, [r0, #6]
   26a90:	684a      	ldr	r2, [r1, #4]
   26a92:	79c3      	ldrb	r3, [r0, #7]
   26a94:	4053      	eors	r3, r2
   26a96:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   26a98:	7acb      	ldrb	r3, [r1, #11]
   26a9a:	7a02      	ldrb	r2, [r0, #8]
   26a9c:	4053      	eors	r3, r2
   26a9e:	7203      	strb	r3, [r0, #8]
   26aa0:	7a42      	ldrb	r2, [r0, #9]
   26aa2:	894b      	ldrh	r3, [r1, #10]
   26aa4:	4053      	eors	r3, r2
   26aa6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   26aa8:	688a      	ldr	r2, [r1, #8]
   26aaa:	7a83      	ldrb	r3, [r0, #10]
   26aac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26ab0:	7283      	strb	r3, [r0, #10]
   26ab2:	688a      	ldr	r2, [r1, #8]
   26ab4:	7ac3      	ldrb	r3, [r0, #11]
   26ab6:	4053      	eors	r3, r2
   26ab8:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   26aba:	7bcb      	ldrb	r3, [r1, #15]
   26abc:	7b02      	ldrb	r2, [r0, #12]
   26abe:	4053      	eors	r3, r2
   26ac0:	7303      	strb	r3, [r0, #12]
   26ac2:	89cb      	ldrh	r3, [r1, #14]
   26ac4:	7b42      	ldrb	r2, [r0, #13]
   26ac6:	4053      	eors	r3, r2
   26ac8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26aca:	68ca      	ldr	r2, [r1, #12]
   26acc:	7b83      	ldrb	r3, [r0, #14]
   26ace:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26ad2:	7383      	strb	r3, [r0, #14]
   26ad4:	68ca      	ldr	r2, [r1, #12]
   26ad6:	7bc3      	ldrb	r3, [r0, #15]
   26ad8:	4053      	eors	r3, r2
   26ada:	73c3      	strb	r3, [r0, #15]
}
   26adc:	4770      	bx	lr

00026ade <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   26ade:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   26ae0:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   26ae2:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   26ae4:	f88d 2000 	strb.w	r2, [sp]
   26ae8:	7942      	ldrb	r2, [r0, #5]
   26aea:	f88d 2001 	strb.w	r2, [sp, #1]
   26aee:	7a82      	ldrb	r2, [r0, #10]
   26af0:	f88d 2002 	strb.w	r2, [sp, #2]
   26af4:	7bc2      	ldrb	r2, [r0, #15]
   26af6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26afa:	7902      	ldrb	r2, [r0, #4]
   26afc:	f88d 2004 	strb.w	r2, [sp, #4]
   26b00:	7a42      	ldrb	r2, [r0, #9]
   26b02:	f88d 2005 	strb.w	r2, [sp, #5]
   26b06:	7b82      	ldrb	r2, [r0, #14]
   26b08:	f88d 2006 	strb.w	r2, [sp, #6]
   26b0c:	78c2      	ldrb	r2, [r0, #3]
   26b0e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   26b12:	7a02      	ldrb	r2, [r0, #8]
   26b14:	f88d 2008 	strb.w	r2, [sp, #8]
   26b18:	7b42      	ldrb	r2, [r0, #13]
   26b1a:	f88d 2009 	strb.w	r2, [sp, #9]
   26b1e:	7882      	ldrb	r2, [r0, #2]
   26b20:	f88d 200a 	strb.w	r2, [sp, #10]
   26b24:	79c2      	ldrb	r2, [r0, #7]
   26b26:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   26b2a:	7b02      	ldrb	r2, [r0, #12]
   26b2c:	f88d 200c 	strb.w	r2, [sp, #12]
   26b30:	7842      	ldrb	r2, [r0, #1]
   26b32:	f88d 200d 	strb.w	r2, [sp, #13]
   26b36:	7982      	ldrb	r2, [r0, #6]
   26b38:	f88d 200e 	strb.w	r2, [sp, #14]
   26b3c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   26b40:	2310      	movs	r3, #16
   26b42:	466a      	mov	r2, sp
   26b44:	4619      	mov	r1, r3
   26b46:	f7ff ff6d 	bl	26a24 <_copy>
}
   26b4a:	b005      	add	sp, #20
   26b4c:	f85d fb04 	ldr.w	pc, [sp], #4

00026b50 <mult_row_column>:
{
   26b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26b52:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26b54:	7808      	ldrb	r0, [r1, #0]
{
   26b56:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26b58:	f7ff ff73 	bl	26a42 <_double_byte>
   26b5c:	4605      	mov	r5, r0
   26b5e:	7860      	ldrb	r0, [r4, #1]
   26b60:	f7ff ff6f 	bl	26a42 <_double_byte>
   26b64:	78a2      	ldrb	r2, [r4, #2]
   26b66:	7863      	ldrb	r3, [r4, #1]
   26b68:	4053      	eors	r3, r2
   26b6a:	78e2      	ldrb	r2, [r4, #3]
   26b6c:	4053      	eors	r3, r2
   26b6e:	405d      	eors	r5, r3
   26b70:	4068      	eors	r0, r5
   26b72:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   26b74:	7860      	ldrb	r0, [r4, #1]
   26b76:	7827      	ldrb	r7, [r4, #0]
   26b78:	f7ff ff63 	bl	26a42 <_double_byte>
   26b7c:	4605      	mov	r5, r0
   26b7e:	78a0      	ldrb	r0, [r4, #2]
   26b80:	f7ff ff5f 	bl	26a42 <_double_byte>
   26b84:	78a3      	ldrb	r3, [r4, #2]
   26b86:	405f      	eors	r7, r3
   26b88:	78e3      	ldrb	r3, [r4, #3]
   26b8a:	405f      	eors	r7, r3
   26b8c:	407d      	eors	r5, r7
   26b8e:	4068      	eors	r0, r5
   26b90:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   26b92:	7863      	ldrb	r3, [r4, #1]
   26b94:	7827      	ldrb	r7, [r4, #0]
   26b96:	78a0      	ldrb	r0, [r4, #2]
   26b98:	405f      	eors	r7, r3
   26b9a:	f7ff ff52 	bl	26a42 <_double_byte>
   26b9e:	4605      	mov	r5, r0
   26ba0:	78e0      	ldrb	r0, [r4, #3]
   26ba2:	f7ff ff4e 	bl	26a42 <_double_byte>
   26ba6:	78e3      	ldrb	r3, [r4, #3]
   26ba8:	405f      	eors	r7, r3
   26baa:	407d      	eors	r5, r7
   26bac:	4068      	eors	r0, r5
   26bae:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   26bb0:	7820      	ldrb	r0, [r4, #0]
   26bb2:	f7ff ff46 	bl	26a42 <_double_byte>
   26bb6:	7862      	ldrb	r2, [r4, #1]
   26bb8:	7823      	ldrb	r3, [r4, #0]
   26bba:	4053      	eors	r3, r2
   26bbc:	78a2      	ldrb	r2, [r4, #2]
   26bbe:	4053      	eors	r3, r2
   26bc0:	ea80 0503 	eor.w	r5, r0, r3
   26bc4:	78e0      	ldrb	r0, [r4, #3]
   26bc6:	f7ff ff3c 	bl	26a42 <_double_byte>
   26bca:	b2ed      	uxtb	r5, r5
   26bcc:	4045      	eors	r5, r0
   26bce:	70f5      	strb	r5, [r6, #3]
}
   26bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026bd2 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   26bd2:	b570      	push	{r4, r5, r6, lr}
   26bd4:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   26bd6:	4605      	mov	r5, r0
{
   26bd8:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   26bda:	2800      	cmp	r0, #0
   26bdc:	d049      	beq.n	26c72 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   26bde:	2900      	cmp	r1, #0
   26be0:	d049      	beq.n	26c76 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   26be2:	2a00      	cmp	r2, #0
   26be4:	d049      	beq.n	26c7a <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   26be6:	2310      	movs	r3, #16
   26be8:	460a      	mov	r2, r1
   26bea:	4668      	mov	r0, sp
   26bec:	4619      	mov	r1, r3
   26bee:	f7ff ff19 	bl	26a24 <_copy>
	add_round_key(state, s->words);
   26bf2:	4621      	mov	r1, r4
   26bf4:	4668      	mov	r0, sp
   26bf6:	f7ff ff2d 	bl	26a54 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   26bfa:	3410      	adds	r4, #16
   26bfc:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   26c00:	4668      	mov	r0, sp
   26c02:	f7ea f805 	bl	10c10 <sub_bytes>
		shift_rows(state);
   26c06:	4668      	mov	r0, sp
   26c08:	f7ff ff69 	bl	26ade <shift_rows>
	mult_row_column(t, s);
   26c0c:	4669      	mov	r1, sp
   26c0e:	a804      	add	r0, sp, #16
   26c10:	f7ff ff9e 	bl	26b50 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   26c14:	a901      	add	r1, sp, #4
   26c16:	a805      	add	r0, sp, #20
   26c18:	f7ff ff9a 	bl	26b50 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   26c1c:	a902      	add	r1, sp, #8
   26c1e:	a806      	add	r0, sp, #24
   26c20:	f7ff ff96 	bl	26b50 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   26c24:	a903      	add	r1, sp, #12
   26c26:	a807      	add	r0, sp, #28
   26c28:	f7ff ff92 	bl	26b50 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   26c2c:	2310      	movs	r3, #16
   26c2e:	4668      	mov	r0, sp
   26c30:	4619      	mov	r1, r3
   26c32:	eb0d 0203 	add.w	r2, sp, r3
   26c36:	f7ff fef5 	bl	26a24 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   26c3a:	4621      	mov	r1, r4
   26c3c:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   26c3e:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   26c40:	f7ff ff08 	bl	26a54 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   26c44:	42b4      	cmp	r4, r6
   26c46:	d1db      	bne.n	26c00 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   26c48:	f7e9 ffe2 	bl	10c10 <sub_bytes>
	shift_rows(state);
   26c4c:	4668      	mov	r0, sp
   26c4e:	f7ff ff46 	bl	26ade <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   26c52:	4621      	mov	r1, r4
   26c54:	4668      	mov	r0, sp
   26c56:	f7ff fefd 	bl	26a54 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   26c5a:	2310      	movs	r3, #16
   26c5c:	466a      	mov	r2, sp
   26c5e:	4619      	mov	r1, r3
   26c60:	4628      	mov	r0, r5
   26c62:	f7ff fedf 	bl	26a24 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   26c66:	4668      	mov	r0, sp
   26c68:	2210      	movs	r2, #16
   26c6a:	2100      	movs	r1, #0
   26c6c:	f7ff fee7 	bl	26a3e <_set>

	return TC_CRYPTO_SUCCESS;
   26c70:	2001      	movs	r0, #1
}
   26c72:	b008      	add	sp, #32
   26c74:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26c76:	4608      	mov	r0, r1
   26c78:	e7fb      	b.n	26c72 <tc_aes_encrypt+0xa0>
   26c7a:	4610      	mov	r0, r2
   26c7c:	e7f9      	b.n	26c72 <tc_aes_encrypt+0xa0>

00026c7e <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26c7e:	460a      	mov	r2, r1
{
   26c80:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26c82:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   26c86:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26c88:	2b00      	cmp	r3, #0
   26c8a:	bfac      	ite	ge
   26c8c:	2300      	movge	r3, #0
   26c8e:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   26c90:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   26c94:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   26c98:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   26c9a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   26c9e:	d002      	beq.n	26ca6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   26ca0:	7813      	ldrb	r3, [r2, #0]
   26ca2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   26ca4:	e7f4      	b.n	26c90 <gf_double+0x12>
	}
}
   26ca6:	bd10      	pop	{r4, pc}

00026ca8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   26ca8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   26caa:	b120      	cbz	r0, 26cb6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   26cac:	2258      	movs	r2, #88	; 0x58
   26cae:	2100      	movs	r1, #0
   26cb0:	f7ff fec5 	bl	26a3e <_set>
   26cb4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26cb6:	bd08      	pop	{r3, pc}

00026cb8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   26cb8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26cba:	4604      	mov	r4, r0
   26cbc:	b188      	cbz	r0, 26ce2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26cbe:	2210      	movs	r2, #16
   26cc0:	2100      	movs	r1, #0
   26cc2:	f7ff febc 	bl	26a3e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   26cc6:	2210      	movs	r2, #16
   26cc8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26ccc:	2100      	movs	r1, #0
   26cce:	f7ff feb6 	bl	26a3e <_set>
	s->leftover_offset = 0;
   26cd2:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   26cd4:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   26cd6:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   26cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26cdc:	2001      	movs	r0, #1
   26cde:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   26ce2:	bd10      	pop	{r4, pc}

00026ce4 <tc_cmac_setup>:
{
   26ce4:	b570      	push	{r4, r5, r6, lr}
   26ce6:	4604      	mov	r4, r0
   26ce8:	460d      	mov	r5, r1
   26cea:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   26cec:	b310      	cbz	r0, 26d34 <tc_cmac_setup+0x50>
   26cee:	b311      	cbz	r1, 26d36 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   26cf0:	2258      	movs	r2, #88	; 0x58
   26cf2:	2100      	movs	r1, #0
   26cf4:	f7ff fea3 	bl	26a3e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   26cf8:	4629      	mov	r1, r5
   26cfa:	4630      	mov	r0, r6
	s->sched = sched;
   26cfc:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   26cfe:	f7e9 ff93 	bl	10c28 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26d02:	2210      	movs	r2, #16
   26d04:	2100      	movs	r1, #0
   26d06:	4620      	mov	r0, r4
   26d08:	f7ff fe99 	bl	26a3e <_set>
	gf_double (s->K1, s->iv);
   26d0c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   26d10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26d12:	4621      	mov	r1, r4
   26d14:	4620      	mov	r0, r4
   26d16:	f7ff ff5c 	bl	26bd2 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   26d1a:	4621      	mov	r1, r4
   26d1c:	4628      	mov	r0, r5
   26d1e:	f7ff ffae 	bl	26c7e <gf_double>
	gf_double (s->K2, s->K1);
   26d22:	4629      	mov	r1, r5
   26d24:	f104 0020 	add.w	r0, r4, #32
   26d28:	f7ff ffa9 	bl	26c7e <gf_double>
	tc_cmac_init(s);
   26d2c:	4620      	mov	r0, r4
   26d2e:	f7ff ffc3 	bl	26cb8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   26d32:	2001      	movs	r0, #1
}
   26d34:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26d36:	4608      	mov	r0, r1
   26d38:	e7fc      	b.n	26d34 <tc_cmac_setup+0x50>

00026d3a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   26d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d3e:	460e      	mov	r6, r1
   26d40:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26d42:	4604      	mov	r4, r0
   26d44:	2800      	cmp	r0, #0
   26d46:	d060      	beq.n	26e0a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   26d48:	b1fa      	cbz	r2, 26d8a <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   26d4a:	2900      	cmp	r1, #0
   26d4c:	d05d      	beq.n	26e0a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   26d4e:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   26d52:	ea53 0102 	orrs.w	r1, r3, r2
   26d56:	d058      	beq.n	26e0a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   26d58:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   26d5a:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   26d5e:	f142 32ff 	adc.w	r2, r2, #4294967295
   26d62:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   26d66:	f1b8 0f00 	cmp.w	r8, #0
   26d6a:	d02c      	beq.n	26dc6 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   26d6c:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26d70:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   26d74:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26d76:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   26d78:	d20a      	bcs.n	26d90 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26d7a:	462b      	mov	r3, r5
   26d7c:	4632      	mov	r2, r6
   26d7e:	4629      	mov	r1, r5
   26d80:	f7ff fe50 	bl	26a24 <_copy>
			s->leftover_offset += data_length;
   26d84:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26d86:	442b      	add	r3, r5
   26d88:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   26d8a:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   26d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   26d90:	463b      	mov	r3, r7
   26d92:	4632      	mov	r2, r6
   26d94:	4639      	mov	r1, r7
   26d96:	f7ff fe45 	bl	26a24 <_copy>
		s->leftover_offset = 0;
   26d9a:	2300      	movs	r3, #0
   26d9c:	3d10      	subs	r5, #16
   26d9e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   26da0:	4445      	add	r5, r8
		data += remaining_space;
   26da2:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26da4:	1e63      	subs	r3, r4, #1
   26da6:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   26daa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26dae:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26db2:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   26db4:	ea82 0200 	eor.w	r2, r2, r0
   26db8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26dba:	d1f6      	bne.n	26daa <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26dbc:	4621      	mov	r1, r4
   26dbe:	4620      	mov	r0, r4
   26dc0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26dc2:	f7ff ff06 	bl	26bd2 <tc_aes_encrypt>
   26dc6:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   26dca:	2d10      	cmp	r5, #16
   26dcc:	d80a      	bhi.n	26de4 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   26dce:	2d00      	cmp	r5, #0
   26dd0:	d0db      	beq.n	26d8a <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   26dd2:	462b      	mov	r3, r5
   26dd4:	4632      	mov	r2, r6
   26dd6:	4629      	mov	r1, r5
   26dd8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26ddc:	f7ff fe22 	bl	26a24 <_copy>
		s->leftover_offset = data_length;
   26de0:	6465      	str	r5, [r4, #68]	; 0x44
   26de2:	e7d2      	b.n	26d8a <tc_cmac_update+0x50>
   26de4:	1e63      	subs	r3, r4, #1
   26de6:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   26de8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26dec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26df0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   26df2:	ea82 0200 	eor.w	r2, r2, r0
   26df6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26df8:	d1f6      	bne.n	26de8 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26dfa:	4621      	mov	r1, r4
   26dfc:	4620      	mov	r0, r4
   26dfe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26e00:	f7ff fee7 	bl	26bd2 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   26e04:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   26e06:	3d10      	subs	r5, #16
   26e08:	e7df      	b.n	26dca <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   26e0a:	2000      	movs	r0, #0
   26e0c:	e7be      	b.n	26d8c <tc_cmac_update+0x52>

00026e0e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   26e0e:	b570      	push	{r4, r5, r6, lr}
   26e10:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   26e12:	4605      	mov	r5, r0
   26e14:	b1f0      	cbz	r0, 26e54 <tc_cmac_final+0x46>
   26e16:	b371      	cbz	r1, 26e76 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   26e18:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   26e1a:	2a10      	cmp	r2, #16
   26e1c:	d11b      	bne.n	26e56 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   26e1e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26e20:	1e63      	subs	r3, r4, #1
   26e22:	3901      	subs	r1, #1
   26e24:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26e28:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26e2c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26e30:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26e32:	ea82 0206 	eor.w	r2, r2, r6
   26e36:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   26e3a:	ea82 0206 	eor.w	r2, r2, r6
   26e3e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26e40:	d1f2      	bne.n	26e28 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   26e42:	4621      	mov	r1, r4
   26e44:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26e46:	4628      	mov	r0, r5
   26e48:	f7ff fec3 	bl	26bd2 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   26e4c:	4620      	mov	r0, r4
   26e4e:	f7ff ff2b 	bl	26ca8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   26e52:	2001      	movs	r0, #1
}
   26e54:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   26e56:	f102 0030 	add.w	r0, r2, #48	; 0x30
   26e5a:	2100      	movs	r1, #0
   26e5c:	f1c2 0210 	rsb	r2, r2, #16
   26e60:	4420      	add	r0, r4
   26e62:	f7ff fdec 	bl	26a3e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   26e66:	2280      	movs	r2, #128	; 0x80
   26e68:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   26e6a:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   26e6e:	4423      	add	r3, r4
   26e70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   26e74:	e7d4      	b.n	26e20 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   26e76:	4608      	mov	r0, r1
   26e78:	e7ec      	b.n	26e54 <tc_cmac_final+0x46>

00026e7a <tc_sha256_update>:
{
   26e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e7c:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   26e7e:	b110      	cbz	r0, 26e86 <tc_sha256_update+0xc>
   26e80:	b1f9      	cbz	r1, 26ec2 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   26e82:	b90a      	cbnz	r2, 26e88 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   26e84:	2001      	movs	r0, #1
}
   26e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   26e88:	2700      	movs	r7, #0
   26e8a:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   26e8c:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   26e90:	6e83      	ldr	r3, [r0, #104]	; 0x68
   26e92:	1c5a      	adds	r2, r3, #1
   26e94:	6682      	str	r2, [r0, #104]	; 0x68
   26e96:	f814 1b01 	ldrb.w	r1, [r4], #1
   26e9a:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   26e9c:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   26e9e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   26ea2:	d90b      	bls.n	26ebc <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   26ea4:	4631      	mov	r1, r6
   26ea6:	f7e9 ff13 	bl	10cd0 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   26eaa:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   26eae:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   26eb2:	f142 0200 	adc.w	r2, r2, #0
   26eb6:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   26eba:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   26ebc:	42a5      	cmp	r5, r4
   26ebe:	d1e7      	bne.n	26e90 <tc_sha256_update+0x16>
   26ec0:	e7e0      	b.n	26e84 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   26ec2:	4608      	mov	r0, r1
   26ec4:	e7df      	b.n	26e86 <tc_sha256_update+0xc>

00026ec6 <tc_sha256_final>:
{
   26ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ec8:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   26eca:	4605      	mov	r5, r0
   26ecc:	2800      	cmp	r0, #0
   26ece:	d054      	beq.n	26f7a <tc_sha256_final+0xb4>
   26ed0:	2900      	cmp	r1, #0
   26ed2:	d053      	beq.n	26f7c <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   26ed4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   26ed6:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   26eda:	00d8      	lsls	r0, r3, #3
   26edc:	1812      	adds	r2, r2, r0
   26ede:	f141 0100 	adc.w	r1, r1, #0
   26ee2:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   26ee6:	2280      	movs	r2, #128	; 0x80
   26ee8:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   26eea:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   26eec:	4423      	add	r3, r4
   26eee:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   26ef0:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   26ef4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   26ef8:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   26efc:	d90a      	bls.n	26f14 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   26efe:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   26f02:	4639      	mov	r1, r7
   26f04:	4430      	add	r0, r6
   26f06:	f7ff fd9a 	bl	26a3e <_set>
		compress(s->iv, s->leftover);
   26f0a:	4631      	mov	r1, r6
   26f0c:	4620      	mov	r0, r4
   26f0e:	f7e9 fedf 	bl	10cd0 <compress>
		s->leftover_offset = 0;
   26f12:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   26f14:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   26f16:	2100      	movs	r1, #0
   26f18:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   26f1c:	4430      	add	r0, r6
   26f1e:	f7ff fd8e 	bl	26a3e <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   26f22:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   26f24:	4631      	mov	r1, r6
   26f26:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   26f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   26f2a:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   26f2c:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   26f2e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   26f32:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   26f36:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   26f38:	0e1b      	lsrs	r3, r3, #24
   26f3a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   26f3e:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   26f40:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   26f44:	f7e9 fec4 	bl	10cd0 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   26f48:	1d2b      	adds	r3, r5, #4
   26f4a:	1f21      	subs	r1, r4, #4
   26f4c:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   26f4e:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   26f52:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   26f54:	0e10      	lsrs	r0, r2, #24
   26f56:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   26f5a:	0c10      	lsrs	r0, r2, #16
   26f5c:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   26f60:	0a10      	lsrs	r0, r2, #8
   26f62:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   26f66:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   26f6a:	42ab      	cmp	r3, r5
   26f6c:	d1ef      	bne.n	26f4e <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   26f6e:	4620      	mov	r0, r4
   26f70:	2270      	movs	r2, #112	; 0x70
   26f72:	2100      	movs	r1, #0
   26f74:	f7ff fd63 	bl	26a3e <_set>
	return TC_CRYPTO_SUCCESS;
   26f78:	2001      	movs	r0, #1
}
   26f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   26f7c:	4608      	mov	r0, r1
   26f7e:	e7fc      	b.n	26f7a <tc_sha256_final+0xb4>

00026f80 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   26f80:	b530      	push	{r4, r5, lr}
   26f82:	1e43      	subs	r3, r0, #1
   26f84:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   26f86:	42a9      	cmp	r1, r5
   26f88:	d106      	bne.n	26f98 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   26f8a:	2136      	movs	r1, #54	; 0x36
   26f8c:	245c      	movs	r4, #92	; 0x5c
   26f8e:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   26f90:	1a13      	subs	r3, r2, r0
   26f92:	2b3f      	cmp	r3, #63	; 0x3f
   26f94:	d90c      	bls.n	26fb0 <rekey+0x30>
	}
}
   26f96:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   26f98:	780c      	ldrb	r4, [r1, #0]
   26f9a:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   26f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   26fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   26fa6:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   26faa:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   26fae:	e7ea      	b.n	26f86 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   26fb0:	f802 1b01 	strb.w	r1, [r2], #1
   26fb4:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   26fb8:	e7ea      	b.n	26f90 <rekey+0x10>

00026fba <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   26fba:	b5f0      	push	{r4, r5, r6, r7, lr}
   26fbc:	460e      	mov	r6, r1
   26fbe:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   26fc0:	4605      	mov	r5, r0
{
   26fc2:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   26fc4:	b1b8      	cbz	r0, 26ff6 <tc_hmac_set_key+0x3c>
   26fc6:	b341      	cbz	r1, 2701a <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   26fc8:	b34a      	cbz	r2, 2701e <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   26fca:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   26fcc:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   26fd0:	d813      	bhi.n	26ffa <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   26fd2:	a810      	add	r0, sp, #64	; 0x40
   26fd4:	f7e9 ff66 	bl	10ea4 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   26fd8:	4622      	mov	r2, r4
   26fda:	4669      	mov	r1, sp
   26fdc:	a810      	add	r0, sp, #64	; 0x40
   26fde:	f7ff ff4c 	bl	26e7a <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   26fe2:	a910      	add	r1, sp, #64	; 0x40
   26fe4:	a834      	add	r0, sp, #208	; 0xd0
   26fe6:	f7ff ff6e 	bl	26ec6 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   26fea:	4622      	mov	r2, r4
   26fec:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   26fee:	4638      	mov	r0, r7
   26ff0:	f7ff ffc6 	bl	26f80 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   26ff4:	2001      	movs	r0, #1
}
   26ff6:	b04d      	add	sp, #308	; 0x134
   26ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   26ffa:	f7e9 ff53 	bl	10ea4 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   26ffe:	4622      	mov	r2, r4
   27000:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   27002:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   27006:	4628      	mov	r0, r5
   27008:	f7ff ff37 	bl	26e7a <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2700c:	4629      	mov	r1, r5
   2700e:	4620      	mov	r0, r4
   27010:	f7ff ff59 	bl	26ec6 <tc_sha256_final>
		rekey(ctx->key,
   27014:	2220      	movs	r2, #32
   27016:	4621      	mov	r1, r4
   27018:	e7e9      	b.n	26fee <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2701a:	4608      	mov	r0, r1
   2701c:	e7eb      	b.n	26ff6 <tc_hmac_set_key+0x3c>
   2701e:	4610      	mov	r0, r2
   27020:	e7e9      	b.n	26ff6 <tc_hmac_set_key+0x3c>

00027022 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   27022:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   27024:	4604      	mov	r4, r0
   27026:	b140      	cbz	r0, 2703a <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   27028:	f7e9 ff3c 	bl	10ea4 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2702c:	2240      	movs	r2, #64	; 0x40
   2702e:	4620      	mov	r0, r4
   27030:	f104 0170 	add.w	r1, r4, #112	; 0x70
   27034:	f7ff ff21 	bl	26e7a <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   27038:	2001      	movs	r0, #1
}
   2703a:	bd10      	pop	{r4, pc}

0002703c <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2703c:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2703e:	b110      	cbz	r0, 27046 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   27040:	f7ff ff1b 	bl	26e7a <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   27044:	2001      	movs	r0, #1
}
   27046:	bd08      	pop	{r3, pc}

00027048 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   27048:	b570      	push	{r4, r5, r6, lr}
   2704a:	460e      	mov	r6, r1
   2704c:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2704e:	4605      	mov	r5, r0
   27050:	b1f0      	cbz	r0, 27090 <tc_hmac_final+0x48>
   27052:	2920      	cmp	r1, #32
   27054:	d11c      	bne.n	27090 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   27056:	b1ea      	cbz	r2, 27094 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   27058:	4611      	mov	r1, r2
   2705a:	f7ff ff34 	bl	26ec6 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2705e:	4620      	mov	r0, r4
   27060:	f7e9 ff20 	bl	10ea4 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   27064:	2240      	movs	r2, #64	; 0x40
   27066:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2706a:	4620      	mov	r0, r4
   2706c:	f7ff ff05 	bl	26e7a <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   27070:	4632      	mov	r2, r6
   27072:	4629      	mov	r1, r5
   27074:	4620      	mov	r0, r4
   27076:	f7ff ff00 	bl	26e7a <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2707a:	4621      	mov	r1, r4
   2707c:	4628      	mov	r0, r5
   2707e:	f7ff ff22 	bl	26ec6 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   27082:	4620      	mov	r0, r4
   27084:	22f0      	movs	r2, #240	; 0xf0
   27086:	2100      	movs	r1, #0
   27088:	f7ff fcd9 	bl	26a3e <_set>

	return TC_CRYPTO_SUCCESS;
   2708c:	2001      	movs	r0, #1
}
   2708e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27090:	2000      	movs	r0, #0
   27092:	e7fc      	b.n	2708e <tc_hmac_final+0x46>
   27094:	4610      	mov	r0, r2
   27096:	e7fa      	b.n	2708e <tc_hmac_final+0x46>

00027098 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   27098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2709c:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2709e:	f04f 0b01 	mov.w	fp, #1
{
   270a2:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   270a4:	2300      	movs	r3, #0
{
   270a6:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   270a8:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   270ac:	4631      	mov	r1, r6
{
   270ae:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   270b0:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   270b2:	f88d 3006 	strb.w	r3, [sp, #6]
{
   270b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   270ba:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   270be:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   270c2:	f7ff ff7a 	bl	26fba <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   270c6:	4620      	mov	r0, r4
   270c8:	f7ff ffab 	bl	27022 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   270cc:	2220      	movs	r2, #32
   270ce:	4629      	mov	r1, r5
   270d0:	4620      	mov	r0, r4
   270d2:	f7ff ffb3 	bl	2703c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   270d6:	465a      	mov	r2, fp
   270d8:	4620      	mov	r0, r4
   270da:	f10d 0106 	add.w	r1, sp, #6
   270de:	f7ff ffad 	bl	2703c <tc_hmac_update>

	if (data && datalen)
   270e2:	f1b8 0f00 	cmp.w	r8, #0
   270e6:	d007      	beq.n	270f8 <update+0x60>
   270e8:	f1b9 0f00 	cmp.w	r9, #0
   270ec:	d004      	beq.n	270f8 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   270ee:	464a      	mov	r2, r9
   270f0:	4641      	mov	r1, r8
   270f2:	4620      	mov	r0, r4
   270f4:	f7ff ffa2 	bl	2703c <tc_hmac_update>
	if (additional_data && additional_datalen)
   270f8:	b13f      	cbz	r7, 2710a <update+0x72>
   270fa:	f1ba 0f00 	cmp.w	sl, #0
   270fe:	d004      	beq.n	2710a <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   27100:	4652      	mov	r2, sl
   27102:	4639      	mov	r1, r7
   27104:	4620      	mov	r0, r4
   27106:	f7ff ff99 	bl	2703c <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2710a:	4622      	mov	r2, r4
   2710c:	2120      	movs	r1, #32
   2710e:	4630      	mov	r0, r6
   27110:	f7ff ff9a 	bl	27048 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27114:	2220      	movs	r2, #32
   27116:	4631      	mov	r1, r6
   27118:	4620      	mov	r0, r4
   2711a:	f7ff ff4e 	bl	26fba <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2711e:	4620      	mov	r0, r4
   27120:	f7ff ff7f 	bl	27022 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27124:	2220      	movs	r2, #32
   27126:	4629      	mov	r1, r5
   27128:	4620      	mov	r0, r4
   2712a:	f7ff ff87 	bl	2703c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2712e:	4622      	mov	r2, r4
   27130:	2120      	movs	r1, #32
   27132:	4628      	mov	r0, r5
   27134:	f7ff ff88 	bl	27048 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   27138:	f1b8 0f00 	cmp.w	r8, #0
   2713c:	d03a      	beq.n	271b4 <update+0x11c>
   2713e:	f1b9 0f00 	cmp.w	r9, #0
   27142:	d037      	beq.n	271b4 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27144:	2220      	movs	r2, #32
   27146:	4631      	mov	r1, r6
   27148:	4620      	mov	r0, r4
   2714a:	f7ff ff36 	bl	26fba <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2714e:	4620      	mov	r0, r4
   27150:	f7ff ff67 	bl	27022 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27154:	2220      	movs	r2, #32
   27156:	4629      	mov	r1, r5
   27158:	4620      	mov	r0, r4
   2715a:	f7ff ff6f 	bl	2703c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2715e:	2201      	movs	r2, #1
   27160:	f10d 0107 	add.w	r1, sp, #7
   27164:	4620      	mov	r0, r4
   27166:	f7ff ff69 	bl	2703c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2716a:	464a      	mov	r2, r9
   2716c:	4641      	mov	r1, r8
   2716e:	4620      	mov	r0, r4
   27170:	f7ff ff64 	bl	2703c <tc_hmac_update>
	if (additional_data && additional_datalen)
   27174:	b13f      	cbz	r7, 27186 <update+0xee>
   27176:	f1ba 0f00 	cmp.w	sl, #0
   2717a:	d004      	beq.n	27186 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2717c:	4652      	mov	r2, sl
   2717e:	4639      	mov	r1, r7
   27180:	4620      	mov	r0, r4
   27182:	f7ff ff5b 	bl	2703c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   27186:	4622      	mov	r2, r4
   27188:	2120      	movs	r1, #32
   2718a:	4630      	mov	r0, r6
   2718c:	f7ff ff5c 	bl	27048 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27190:	2220      	movs	r2, #32
   27192:	4631      	mov	r1, r6
   27194:	4620      	mov	r0, r4
   27196:	f7ff ff10 	bl	26fba <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2719a:	4620      	mov	r0, r4
   2719c:	f7ff ff41 	bl	27022 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   271a0:	2220      	movs	r2, #32
   271a2:	4629      	mov	r1, r5
   271a4:	4620      	mov	r0, r4
   271a6:	f7ff ff49 	bl	2703c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   271aa:	4622      	mov	r2, r4
   271ac:	2120      	movs	r1, #32
   271ae:	4628      	mov	r0, r5
   271b0:	f7ff ff4a 	bl	27048 <tc_hmac_final>
}
   271b4:	b003      	add	sp, #12
   271b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000271ba <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   271ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   271bc:	460c      	mov	r4, r1
   271be:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   271c0:	4605      	mov	r5, r0
   271c2:	b1b0      	cbz	r0, 271f2 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   271c4:	b1b9      	cbz	r1, 271f6 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   271c6:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   271c8:	2220      	movs	r2, #32
   271ca:	2100      	movs	r1, #0
   271cc:	30f0      	adds	r0, #240	; 0xf0
   271ce:	f7ff fc36 	bl	26a3e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   271d2:	2220      	movs	r2, #32
   271d4:	2101      	movs	r1, #1
   271d6:	f505 7088 	add.w	r0, r5, #272	; 0x110
   271da:	f7ff fc30 	bl	26a3e <_set>
	update(prng, personalization, plen, 0, 0);
   271de:	4628      	mov	r0, r5
   271e0:	4633      	mov	r3, r6
   271e2:	463a      	mov	r2, r7
   271e4:	4621      	mov	r1, r4
   271e6:	9600      	str	r6, [sp, #0]
   271e8:	f7ff ff56 	bl	27098 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   271ec:	2001      	movs	r0, #1
	prng->countdown = 0;
   271ee:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   271f2:	b003      	add	sp, #12
   271f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   271f6:	4608      	mov	r0, r1
   271f8:	e7fb      	b.n	271f2 <tc_hmac_prng_init+0x38>

000271fa <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   271fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   271fc:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   271fe:	4605      	mov	r5, r0
   27200:	b180      	cbz	r0, 27224 <tc_hmac_prng_reseed+0x2a>
   27202:	b179      	cbz	r1, 27224 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   27204:	2a1f      	cmp	r2, #31
   27206:	d90d      	bls.n	27224 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   27208:	b153      	cbz	r3, 27220 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2720a:	b16c      	cbz	r4, 27228 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2720c:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2720e:	f7ff ff43 	bl	27098 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   27212:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   27216:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   27218:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2721c:	b003      	add	sp, #12
   2721e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   27220:	9300      	str	r3, [sp, #0]
   27222:	e7f4      	b.n	2720e <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   27224:	2000      	movs	r0, #0
   27226:	e7f9      	b.n	2721c <tc_hmac_prng_reseed+0x22>
   27228:	4620      	mov	r0, r4
   2722a:	e7f7      	b.n	2721c <tc_hmac_prng_reseed+0x22>

0002722c <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2722c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27230:	460d      	mov	r5, r1
   27232:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   27234:	4680      	mov	r8, r0
   27236:	b3d8      	cbz	r0, 272b0 <tc_hmac_prng_generate+0x84>
   27238:	b3d2      	cbz	r2, 272b0 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2723a:	1e4b      	subs	r3, r1, #1
   2723c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   27240:	d236      	bcs.n	272b0 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   27242:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   27246:	b3ab      	cbz	r3, 272b4 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   27248:	3b01      	subs	r3, #1
   2724a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2724e:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27252:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   27256:	2220      	movs	r2, #32
   27258:	4649      	mov	r1, r9
   2725a:	4620      	mov	r0, r4
   2725c:	f7ff fead 	bl	26fba <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   27260:	4620      	mov	r0, r4
   27262:	f7ff fede 	bl	27022 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   27266:	2220      	movs	r2, #32
   27268:	4639      	mov	r1, r7
   2726a:	4620      	mov	r0, r4
   2726c:	f7ff fee6 	bl	2703c <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   27270:	4622      	mov	r2, r4
   27272:	2120      	movs	r1, #32
   27274:	4638      	mov	r0, r7
   27276:	f7ff fee7 	bl	27048 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2727a:	2d20      	cmp	r5, #32
   2727c:	462e      	mov	r6, r5
   2727e:	bf28      	it	cs
   27280:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   27282:	4640      	mov	r0, r8
   27284:	4633      	mov	r3, r6
   27286:	463a      	mov	r2, r7
   27288:	4631      	mov	r1, r6
   2728a:	f7ff fbcb 	bl	26a24 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2728e:	2d20      	cmp	r5, #32
   27290:	bf38      	it	cc
   27292:	2520      	movcc	r5, #32
	while (outlen != 0) {
   27294:	3d20      	subs	r5, #32
		out += bufferlen;
   27296:	44b0      	add	r8, r6
	while (outlen != 0) {
   27298:	d1dd      	bne.n	27256 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2729a:	4620      	mov	r0, r4
   2729c:	462b      	mov	r3, r5
   2729e:	462a      	mov	r2, r5
   272a0:	4629      	mov	r1, r5
   272a2:	9500      	str	r5, [sp, #0]
   272a4:	f7ff fef8 	bl	27098 <update>

	return TC_CRYPTO_SUCCESS;
   272a8:	2001      	movs	r0, #1
}
   272aa:	b003      	add	sp, #12
   272ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   272b0:	2000      	movs	r0, #0
   272b2:	e7fa      	b.n	272aa <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   272b4:	f04f 30ff 	mov.w	r0, #4294967295
   272b8:	e7f7      	b.n	272aa <tc_hmac_prng_generate+0x7e>

000272ba <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   272ba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   272bc:	ab0b      	add	r3, sp, #44	; 0x2c
   272be:	9305      	str	r3, [sp, #20]
   272c0:	9303      	str	r3, [sp, #12]
   272c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   272c4:	2201      	movs	r2, #1
   272c6:	9302      	str	r3, [sp, #8]
   272c8:	2300      	movs	r3, #0
   272ca:	4618      	mov	r0, r3
   272cc:	e9cd 3300 	strd	r3, r3, [sp]
   272d0:	f7e7 ffa4 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   272d4:	b007      	add	sp, #28
   272d6:	f85d fb04 	ldr.w	pc, [sp], #4

000272da <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   272da:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   272dc:	6800      	ldr	r0, [r0, #0]
   272de:	f7e9 be2b 	b.w	10f38 <z_arm_fatal_error>

000272e2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   272e2:	2100      	movs	r1, #0
   272e4:	2001      	movs	r0, #1
   272e6:	f7e9 be27 	b.w	10f38 <z_arm_fatal_error>

000272ea <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   272ea:	b508      	push	{r3, lr}
	handler();
   272ec:	f7e9 fed6 	bl	1109c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   272f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   272f4:	f7e9 bfa0 	b.w	11238 <z_arm_exc_exit>

000272f8 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   272f8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   272fa:	f383 880b 	msr	PSPLIM, r3
}
   272fe:	4770      	bx	lr

00027300 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27300:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27302:	ab0b      	add	r3, sp, #44	; 0x2c
   27304:	9305      	str	r3, [sp, #20]
   27306:	9303      	str	r3, [sp, #12]
   27308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2730a:	2201      	movs	r2, #1
   2730c:	9302      	str	r3, [sp, #8]
   2730e:	2300      	movs	r3, #0
   27310:	4618      	mov	r0, r3
   27312:	e9cd 3300 	strd	r3, r3, [sp]
   27316:	f7e7 ff81 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   2731a:	b007      	add	sp, #28
   2731c:	f85d fb04 	ldr.w	pc, [sp], #4

00027320 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   27320:	4770      	bx	lr

00027322 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   27322:	4770      	bx	lr

00027324 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   27324:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   27328:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2732c:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2732e:	bf08      	it	eq
   27330:	f06f 0015 	mvneq.w	r0, #21
   27334:	4770      	bx	lr

00027336 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27336:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27338:	ab0b      	add	r3, sp, #44	; 0x2c
   2733a:	9305      	str	r3, [sp, #20]
   2733c:	9303      	str	r3, [sp, #12]
   2733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27340:	2201      	movs	r2, #1
   27342:	9302      	str	r3, [sp, #8]
   27344:	2300      	movs	r3, #0
   27346:	4618      	mov	r0, r3
   27348:	e9cd 3300 	strd	r3, r3, [sp]
   2734c:	f7e7 ff66 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   27350:	b007      	add	sp, #28
   27352:	f85d fb04 	ldr.w	pc, [sp], #4

00027356 <mpu_configure_region>:
{
   27356:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   27358:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2735a:	684b      	ldr	r3, [r1, #4]
{
   2735c:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   2735e:	890a      	ldrh	r2, [r1, #8]
   27360:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   27362:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   27364:	3b01      	subs	r3, #1
   27366:	f024 041f 	bic.w	r4, r4, #31
   2736a:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   2736c:	f002 021f 	and.w	r2, r2, #31
   27370:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   27374:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   27378:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   2737a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2737e:	9303      	str	r3, [sp, #12]
   27380:	f7ea fb60 	bl	11a44 <region_allocate_and_init>
}
   27384:	b005      	add	sp, #20
   27386:	bd30      	pop	{r4, r5, pc}

00027388 <_stdout_hook_default>:
}
   27388:	f04f 30ff 	mov.w	r0, #4294967295
   2738c:	4770      	bx	lr

0002738e <_stdin_hook_default>:
}
   2738e:	2000      	movs	r0, #0
   27390:	4770      	bx	lr

00027392 <_read>:
{
   27392:	4608      	mov	r0, r1
   27394:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   27396:	f7ea bd53 	b.w	11e40 <z_impl_zephyr_read_stdin>

0002739a <_write>:
{
   2739a:	4608      	mov	r0, r1
   2739c:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2739e:	f7ea bd63 	b.w	11e68 <z_impl_zephyr_write_stdout>

000273a2 <_close>:
int _close(int file)
   273a2:	f04f 30ff 	mov.w	r0, #4294967295
   273a6:	4770      	bx	lr

000273a8 <_lseek>:
}
   273a8:	2000      	movs	r0, #0
   273aa:	4770      	bx	lr

000273ac <_isatty>:
}
   273ac:	2802      	cmp	r0, #2
   273ae:	bfcc      	ite	gt
   273b0:	2000      	movgt	r0, #0
   273b2:	2001      	movle	r0, #1
   273b4:	4770      	bx	lr

000273b6 <_kill>:
}
   273b6:	2000      	movs	r0, #0
   273b8:	4770      	bx	lr

000273ba <_getpid>:
}
   273ba:	2000      	movs	r0, #0
   273bc:	4770      	bx	lr

000273be <_fstat>:
	st->st_mode = S_IFCHR;
   273be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   273c2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   273c4:	604b      	str	r3, [r1, #4]
}
   273c6:	4770      	bx	lr

000273c8 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   273c8:	f7f8 bd3c 	b.w	1fe44 <z_impl_z_errno>

000273cc <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   273cc:	b530      	push	{r4, r5, lr}
   273ce:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   273d0:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   273d4:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   273d6:	794b      	ldrb	r3, [r1, #5]
   273d8:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   273dc:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   273de:	220d      	movs	r2, #13
   273e0:	2100      	movs	r1, #0
   273e2:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   273e6:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   273ea:	f003 fcdb 	bl	2ada4 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   273ee:	aa02      	add	r2, sp, #8
   273f0:	4611      	mov	r1, r2
   273f2:	4628      	mov	r0, r5
   273f4:	f000 fb46 	bl	27a84 <bt_encrypt_le>
	if (err) {
   273f8:	b110      	cbz	r0, 27400 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   273fa:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   273fc:	b007      	add	sp, #28
   273fe:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   27400:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   27402:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   27404:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   27408:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   2740a:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   2740c:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   2740e:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   27412:	f003 fc7d 	bl	2ad10 <memcmp>
   27416:	fab0 f080 	clz	r0, r0
   2741a:	0940      	lsrs	r0, r0, #5
   2741c:	e7ee      	b.n	273fc <bt_rpa_irk_matches+0x30>

0002741e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2741e:	b510      	push	{r4, lr}
   27420:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   27422:	7801      	ldrb	r1, [r0, #0]
   27424:	7822      	ldrb	r2, [r4, #0]
{
   27426:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   27428:	428a      	cmp	r2, r1
   2742a:	d00f      	beq.n	2744c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2742c:	4669      	mov	r1, sp
   2742e:	f7ea fe4b 	bl	120c8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   27432:	4620      	mov	r0, r4
   27434:	a905      	add	r1, sp, #20
   27436:	f7ea fe47 	bl	120c8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2743a:	2210      	movs	r2, #16
   2743c:	f10d 0115 	add.w	r1, sp, #21
   27440:	f10d 0001 	add.w	r0, sp, #1
   27444:	f003 fc64 	bl	2ad10 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   27448:	b00a      	add	sp, #40	; 0x28
   2744a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2744c:	2a01      	cmp	r2, #1
   2744e:	d006      	beq.n	2745e <bt_uuid_cmp+0x40>
   27450:	2a02      	cmp	r2, #2
   27452:	d007      	beq.n	27464 <bt_uuid_cmp+0x46>
   27454:	b972      	cbnz	r2, 27474 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   27456:	8840      	ldrh	r0, [r0, #2]
   27458:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2745a:	1ac0      	subs	r0, r0, r3
   2745c:	e7f4      	b.n	27448 <bt_uuid_cmp+0x2a>
   2745e:	6840      	ldr	r0, [r0, #4]
   27460:	6863      	ldr	r3, [r4, #4]
   27462:	e7fa      	b.n	2745a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   27464:	2210      	movs	r2, #16
   27466:	1c61      	adds	r1, r4, #1
   27468:	3001      	adds	r0, #1
}
   2746a:	b00a      	add	sp, #40	; 0x28
   2746c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   27470:	f003 bc4e 	b.w	2ad10 <memcmp>
	switch (u1->type) {
   27474:	f06f 0015 	mvn.w	r0, #21
   27478:	e7e6      	b.n	27448 <bt_uuid_cmp+0x2a>

0002747a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2747a:	2a04      	cmp	r2, #4
   2747c:	d00a      	beq.n	27494 <bt_uuid_create+0x1a>
   2747e:	2a10      	cmp	r2, #16
   27480:	d00d      	beq.n	2749e <bt_uuid_create+0x24>
   27482:	2a02      	cmp	r2, #2
   27484:	f04f 0300 	mov.w	r3, #0
   27488:	d115      	bne.n	274b6 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2748a:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2748c:	880b      	ldrh	r3, [r1, #0]
   2748e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   27490:	2001      	movs	r0, #1
   27492:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   27494:	2301      	movs	r3, #1
   27496:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   27498:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2749a:	6043      	str	r3, [r0, #4]
		break;
   2749c:	e7f8      	b.n	27490 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2749e:	2302      	movs	r3, #2
   274a0:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   274a4:	f101 0310 	add.w	r3, r1, #16
   274a8:	f851 2b04 	ldr.w	r2, [r1], #4
   274ac:	4299      	cmp	r1, r3
   274ae:	f840 2b04 	str.w	r2, [r0], #4
   274b2:	d1f9      	bne.n	274a8 <bt_uuid_create+0x2e>
   274b4:	e7ec      	b.n	27490 <bt_uuid_create+0x16>
	switch (data_len) {
   274b6:	4618      	mov	r0, r3
}
   274b8:	4770      	bx	lr

000274ba <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   274ba:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   274bc:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   274be:	2106      	movs	r1, #6
{
   274c0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   274c2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   274c6:	f7ed f92d 	bl	14724 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   274ca:	b918      	cbnz	r0, 274d4 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   274cc:	79a3      	ldrb	r3, [r4, #6]
   274ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
   274d2:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   274d4:	bd10      	pop	{r4, pc}

000274d6 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   274d6:	280f      	cmp	r0, #15
   274d8:	d807      	bhi.n	274ea <bt_hci_evt_get_flags+0x14>
   274da:	280d      	cmp	r0, #13
   274dc:	d80b      	bhi.n	274f6 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   274de:	2805      	cmp	r0, #5
   274e0:	bf08      	it	eq
   274e2:	2003      	moveq	r0, #3
   274e4:	bf18      	it	ne
   274e6:	2002      	movne	r0, #2
   274e8:	4770      	bx	lr
	switch (evt) {
   274ea:	2813      	cmp	r0, #19
   274ec:	d003      	beq.n	274f6 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   274ee:	281a      	cmp	r0, #26
   274f0:	bf08      	it	eq
   274f2:	2001      	moveq	r0, #1
   274f4:	e7f6      	b.n	274e4 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   274f6:	2001      	movs	r0, #1
	}
}
   274f8:	4770      	bx	lr

000274fa <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   274fa:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   274fe:	b183      	cbz	r3, 27522 <update_sec_level+0x28>
   27500:	7b5a      	ldrb	r2, [r3, #13]
   27502:	07d1      	lsls	r1, r2, #31
   27504:	d50d      	bpl.n	27522 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   27506:	06d2      	lsls	r2, r2, #27
   27508:	d50d      	bpl.n	27526 <update_sec_level+0x2c>
   2750a:	7b1b      	ldrb	r3, [r3, #12]
   2750c:	2b10      	cmp	r3, #16
   2750e:	bf14      	ite	ne
   27510:	2303      	movne	r3, #3
   27512:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   27514:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   27516:	7a80      	ldrb	r0, [r0, #10]
}
   27518:	4298      	cmp	r0, r3
   2751a:	bf8c      	ite	hi
   2751c:	2000      	movhi	r0, #0
   2751e:	2001      	movls	r0, #1
   27520:	4770      	bx	lr
   27522:	2302      	movs	r3, #2
   27524:	e7f6      	b.n	27514 <update_sec_level+0x1a>
   27526:	2303      	movs	r3, #3
   27528:	e7f4      	b.n	27514 <update_sec_level+0x1a>

0002752a <hci_vendor_event>:
}
   2752a:	4770      	bx	lr

0002752c <atomic_or>:
{
   2752c:	4603      	mov	r3, r0
   2752e:	b510      	push	{r4, lr}
}
   27530:	e8d3 0fef 	ldaex	r0, [r3]
   27534:	ea40 0201 	orr.w	r2, r0, r1
   27538:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2753c:	2c00      	cmp	r4, #0
   2753e:	d1f7      	bne.n	27530 <atomic_or+0x4>
   27540:	bd10      	pop	{r4, pc}

00027542 <bt_addr_copy>:
   27542:	680b      	ldr	r3, [r1, #0]
   27544:	6003      	str	r3, [r0, #0]
   27546:	888b      	ldrh	r3, [r1, #4]
   27548:	8083      	strh	r3, [r0, #4]
}
   2754a:	4770      	bx	lr

0002754c <bt_addr_le_copy>:
   2754c:	680b      	ldr	r3, [r1, #0]
   2754e:	6003      	str	r3, [r0, #0]
   27550:	888b      	ldrh	r3, [r1, #4]
   27552:	8083      	strh	r3, [r0, #4]
   27554:	798b      	ldrb	r3, [r1, #6]
   27556:	7183      	strb	r3, [r0, #6]
}
   27558:	4770      	bx	lr

0002755a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2755a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2755c:	ab0b      	add	r3, sp, #44	; 0x2c
   2755e:	9305      	str	r3, [sp, #20]
   27560:	9303      	str	r3, [sp, #12]
   27562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27564:	9302      	str	r3, [sp, #8]
   27566:	2300      	movs	r3, #0
   27568:	4618      	mov	r0, r3
   2756a:	e9cd 3300 	strd	r3, r3, [sp]
   2756e:	f7e7 fe55 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   27572:	b007      	add	sp, #28
   27574:	f85d fb04 	ldr.w	pc, [sp], #4

00027578 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27578:	e8d0 3fef 	ldaex	r3, [r0]
   2757c:	400b      	ands	r3, r1
   2757e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   27582:	2a00      	cmp	r2, #0
   27584:	d1f8      	bne.n	27578 <atomic_and.isra.0>
}
   27586:	4770      	bx	lr

00027588 <sys_put_le64>:
	dst[1] = val >> 8;
   27588:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2758c:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2758e:	2300      	movs	r3, #0
   27590:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   27592:	0e00      	lsrs	r0, r0, #24
   27594:	70d0      	strb	r0, [r2, #3]
   27596:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2759a:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2759c:	7093      	strb	r3, [r2, #2]
   2759e:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   275a0:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   275a2:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   275a4:	71d1      	strb	r1, [r2, #7]
}
   275a6:	4770      	bx	lr

000275a8 <bt_hci_disconnect>:
{
   275a8:	b570      	push	{r4, r5, r6, lr}
   275aa:	4606      	mov	r6, r0
   275ac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   275ae:	f240 4006 	movw	r0, #1030	; 0x406
   275b2:	2103      	movs	r1, #3
   275b4:	f7eb fa1e 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   275b8:	4604      	mov	r4, r0
   275ba:	b168      	cbz	r0, 275d8 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   275bc:	2103      	movs	r1, #3
   275be:	300c      	adds	r0, #12
   275c0:	f7f2 ff56 	bl	1a470 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   275c4:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   275c6:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   275c8:	4621      	mov	r1, r4
}
   275ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   275ce:	2200      	movs	r2, #0
   275d0:	f240 4006 	movw	r0, #1030	; 0x406
   275d4:	f7eb ba5c 	b.w	12a90 <bt_hci_cmd_send_sync>
}
   275d8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   275dc:	bd70      	pop	{r4, r5, r6, pc}

000275de <bt_le_set_data_len>:
{
   275de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   275e0:	4607      	mov	r7, r0
   275e2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   275e4:	f242 0022 	movw	r0, #8226	; 0x2022
   275e8:	2106      	movs	r1, #6
{
   275ea:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   275ec:	f7eb fa02 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   275f0:	4604      	mov	r4, r0
   275f2:	b178      	cbz	r0, 27614 <bt_le_set_data_len+0x36>
   275f4:	2106      	movs	r1, #6
   275f6:	300c      	adds	r0, #12
   275f8:	f7f2 ff3a 	bl	1a470 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   275fc:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   275fe:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   27600:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   27602:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   27604:	4621      	mov	r1, r4
}
   27606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2760a:	2200      	movs	r2, #0
   2760c:	f242 0022 	movw	r0, #8226	; 0x2022
   27610:	f7eb ba3e 	b.w	12a90 <bt_hci_cmd_send_sync>
}
   27614:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002761a <bt_le_set_phy>:
{
   2761a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2761e:	4681      	mov	r9, r0
   27620:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27622:	f242 0032 	movw	r0, #8242	; 0x2032
   27626:	2107      	movs	r1, #7
{
   27628:	4617      	mov	r7, r2
   2762a:	461e      	mov	r6, r3
   2762c:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27630:	f7eb f9e0 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   27634:	4605      	mov	r5, r0
   27636:	b1a0      	cbz	r0, 27662 <bt_le_set_phy+0x48>
   27638:	2107      	movs	r1, #7
   2763a:	300c      	adds	r0, #12
   2763c:	f7f2 ff18 	bl	1a470 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27640:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   27644:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   27648:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2764a:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2764c:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2764e:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   27652:	4629      	mov	r1, r5
}
   27654:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   27658:	2200      	movs	r2, #0
   2765a:	f242 0032 	movw	r0, #8242	; 0x2032
   2765e:	f7eb ba17 	b.w	12a90 <bt_hci_cmd_send_sync>
}
   27662:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002766a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2766a:	68c0      	ldr	r0, [r0, #12]
   2766c:	f7eb bada 	b.w	12c24 <bt_hci_le_enh_conn_complete>

00027670 <bt_le_conn_params_valid>:
{
   27670:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   27672:	8803      	ldrh	r3, [r0, #0]
   27674:	8842      	ldrh	r2, [r0, #2]
   27676:	4293      	cmp	r3, r2
   27678:	d819      	bhi.n	276ae <bt_le_conn_params_valid+0x3e>
   2767a:	2b05      	cmp	r3, #5
   2767c:	d917      	bls.n	276ae <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2767e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   27682:	d814      	bhi.n	276ae <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   27684:	8883      	ldrh	r3, [r0, #4]
   27686:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2768a:	d210      	bcs.n	276ae <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2768c:	f640 4476 	movw	r4, #3190	; 0xc76
   27690:	88c0      	ldrh	r0, [r0, #6]
   27692:	f1a0 010a 	sub.w	r1, r0, #10
   27696:	b289      	uxth	r1, r1
   27698:	42a1      	cmp	r1, r4
   2769a:	d808      	bhi.n	276ae <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2769c:	3301      	adds	r3, #1
   2769e:	b29b      	uxth	r3, r3
   276a0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   276a2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   276a6:	bf34      	ite	cc
   276a8:	2001      	movcc	r0, #1
   276aa:	2000      	movcs	r0, #0
}
   276ac:	bd10      	pop	{r4, pc}
		return false;
   276ae:	2000      	movs	r0, #0
   276b0:	e7fc      	b.n	276ac <bt_le_conn_params_valid+0x3c>

000276b2 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   276b2:	f240 3041 	movw	r0, #833	; 0x341
   276b6:	4770      	bx	lr

000276b8 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   276b8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   276ba:	f7f2 fa2b 	bl	19b14 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   276be:	b118      	cbz	r0, 276c8 <bt_addr_le_is_bonded+0x10>
   276c0:	89c0      	ldrh	r0, [r0, #14]
   276c2:	3800      	subs	r0, #0
   276c4:	bf18      	it	ne
   276c6:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   276c8:	bd08      	pop	{r3, pc}

000276ca <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   276ca:	2207      	movs	r2, #7
{
   276cc:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   276ce:	f003 fb1f 	bl	2ad10 <memcmp>
}
   276d2:	fab0 f080 	clz	r0, r0
   276d6:	0940      	lsrs	r0, r0, #5
   276d8:	bd08      	pop	{r3, pc}

000276da <bt_addr_copy>:
   276da:	680b      	ldr	r3, [r1, #0]
   276dc:	6003      	str	r3, [r0, #0]
   276de:	888b      	ldrh	r3, [r1, #4]
   276e0:	8083      	strh	r3, [r0, #4]
}
   276e2:	4770      	bx	lr

000276e4 <bt_addr_le_copy>:
   276e4:	680b      	ldr	r3, [r1, #0]
   276e6:	6003      	str	r3, [r0, #0]
   276e8:	888b      	ldrh	r3, [r1, #4]
   276ea:	8083      	strh	r3, [r0, #4]
   276ec:	798b      	ldrb	r3, [r1, #6]
   276ee:	7183      	strb	r3, [r0, #6]
}
   276f0:	4770      	bx	lr

000276f2 <hci_id_add>:
{
   276f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   276f4:	460f      	mov	r7, r1
   276f6:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   276f8:	bb30      	cbnz	r0, 27748 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   276fa:	2127      	movs	r1, #39	; 0x27
   276fc:	f242 0027 	movw	r0, #8231	; 0x2027
   27700:	f7eb f978 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   27704:	4605      	mov	r5, r0
   27706:	b310      	cbz	r0, 2774e <hci_id_add+0x5c>
   27708:	2127      	movs	r1, #39	; 0x27
   2770a:	300c      	adds	r0, #12
   2770c:	f7f2 feb0 	bl	1a470 <net_buf_simple_add>
   27710:	4622      	mov	r2, r4
   27712:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   27714:	4639      	mov	r1, r7
   27716:	f7ff ffe5 	bl	276e4 <bt_addr_le_copy>
   2771a:	1dc3      	adds	r3, r0, #7
   2771c:	f104 0110 	add.w	r1, r4, #16
   27720:	f852 0b04 	ldr.w	r0, [r2], #4
   27724:	428a      	cmp	r2, r1
   27726:	f843 0b04 	str.w	r0, [r3], #4
   2772a:	d1f9      	bne.n	27720 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   2772c:	2210      	movs	r2, #16
   2772e:	2100      	movs	r1, #0
   27730:	f106 0017 	add.w	r0, r6, #23
   27734:	f003 fb36 	bl	2ada4 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   27738:	4629      	mov	r1, r5
}
   2773a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2773e:	2200      	movs	r2, #0
   27740:	f242 0027 	movw	r0, #8231	; 0x2027
   27744:	f7eb b9a4 	b.w	12a90 <bt_hci_cmd_send_sync>
		return -EINVAL;
   27748:	f06f 0015 	mvn.w	r0, #21
}
   2774c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2774e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27752:	e7fb      	b.n	2774c <hci_id_add+0x5a>

00027754 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   27754:	7a03      	ldrb	r3, [r0, #8]
{
   27756:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   27758:	075b      	lsls	r3, r3, #29
   2775a:	d505      	bpl.n	27768 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2775c:	4601      	mov	r1, r0
   2775e:	322a      	adds	r2, #42	; 0x2a
   27760:	f811 0b01 	ldrb.w	r0, [r1], #1
   27764:	f7ff bfc5 	b.w	276f2 <hci_id_add>
}
   27768:	4770      	bx	lr

0002776a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2776a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2776c:	ab0b      	add	r3, sp, #44	; 0x2c
   2776e:	9305      	str	r3, [sp, #20]
   27770:	9303      	str	r3, [sp, #12]
   27772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27774:	9302      	str	r3, [sp, #8]
   27776:	2300      	movs	r3, #0
   27778:	4618      	mov	r0, r3
   2777a:	e9cd 3300 	strd	r3, r3, [sp]
   2777e:	f7e7 fd4d 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   27782:	b007      	add	sp, #28
   27784:	f85d fb04 	ldr.w	pc, [sp], #4

00027788 <addr_res_enable>:
{
   27788:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2778a:	2101      	movs	r1, #1
{
   2778c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2778e:	f242 002d 	movw	r0, #8237	; 0x202d
   27792:	f7eb f92f 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   27796:	4604      	mov	r4, r0
   27798:	b158      	cbz	r0, 277b2 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2779a:	4629      	mov	r1, r5
   2779c:	300c      	adds	r0, #12
   2779e:	f001 fd58 	bl	29252 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   277a2:	4621      	mov	r1, r4
}
   277a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   277a8:	2200      	movs	r2, #0
   277aa:	f242 002d 	movw	r0, #8237	; 0x202d
   277ae:	f7eb b96f 	b.w	12a90 <bt_hci_cmd_send_sync>
}
   277b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   277b6:	bd38      	pop	{r3, r4, r5, pc}

000277b8 <adv_unpause_enabled>:
{
   277b8:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   277ba:	f100 0310 	add.w	r3, r0, #16
   277be:	e8d3 2fef 	ldaex	r2, [r3]
   277c2:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   277c6:	e8c3 1fe4 	stlex	r4, r1, [r3]
   277ca:	2c00      	cmp	r4, #0
   277cc:	d1f7      	bne.n	277be <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   277ce:	0413      	lsls	r3, r2, #16
   277d0:	d503      	bpl.n	277da <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   277d2:	2101      	movs	r1, #1
}
   277d4:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   277d6:	f000 b940 	b.w	27a5a <bt_le_adv_set_enable>
}
   277da:	bc10      	pop	{r4}
   277dc:	4770      	bx	lr

000277de <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   277de:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   277e2:	e8d3 2faf 	lda	r2, [r3]
   277e6:	0612      	lsls	r2, r2, #24
   277e8:	d50a      	bpl.n	27800 <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   277ea:	e8d3 1fef 	ldaex	r1, [r3]
   277ee:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   277f2:	e8c3 1fe2 	stlex	r2, r1, [r3]
   277f6:	2a00      	cmp	r2, #0
   277f8:	d1f7      	bne.n	277ea <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   277fa:	2100      	movs	r1, #0
   277fc:	f000 b92d 	b.w	27a5a <bt_le_adv_set_enable>
}
   27800:	4770      	bx	lr

00027802 <bt_lookup_id_addr>:
{
   27802:	b510      	push	{r4, lr}
   27804:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   27806:	b930      	cbnz	r0, 27816 <bt_lookup_id_addr+0x14>
   27808:	b119      	cbz	r1, 27812 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2780a:	f7f2 f92b 	bl	19a64 <bt_keys_find_irk>
		if (keys) {
   2780e:	b100      	cbz	r0, 27812 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   27810:	1c44      	adds	r4, r0, #1
}
   27812:	4620      	mov	r0, r4
   27814:	bd10      	pop	{r4, pc}
		return NULL;
   27816:	2400      	movs	r4, #0
   27818:	e7fb      	b.n	27812 <bt_lookup_id_addr+0x10>

0002781a <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2781a:	b118      	cbz	r0, 27824 <bt_id_set_adv_random_addr+0xa>
   2781c:	b111      	cbz	r1, 27824 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2781e:	4608      	mov	r0, r1
   27820:	f7ec b818 	b.w	13854 <set_random_address>
}
   27824:	f06f 0015 	mvn.w	r0, #21
   27828:	4770      	bx	lr

0002782a <bt_id_set_adv_private_addr>:
{
   2782a:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2782c:	4604      	mov	r4, r0
   2782e:	b180      	cbz	r0, 27852 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   27830:	2106      	movs	r1, #6
   27832:	4668      	mov	r0, sp
   27834:	f7ec ff76 	bl	14724 <bt_rand>
	if (err) {
   27838:	b948      	cbnz	r0, 2784e <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2783a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2783e:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   27840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   27844:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   27846:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2784a:	f7ff ffe6 	bl	2781a <bt_id_set_adv_random_addr>
}
   2784e:	b002      	add	sp, #8
   27850:	bd10      	pop	{r4, pc}
		return -EINVAL;
   27852:	f06f 0015 	mvn.w	r0, #21
   27856:	e7fa      	b.n	2784e <bt_id_set_adv_private_addr+0x24>

00027858 <bt_id_adv_random_addr_check>:
}
   27858:	3800      	subs	r0, #0
   2785a:	bf18      	it	ne
   2785c:	2001      	movne	r0, #1
   2785e:	4770      	bx	lr

00027860 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   27860:	7a03      	ldrb	r3, [r0, #8]
   27862:	07d9      	lsls	r1, r3, #31
   27864:	d504      	bpl.n	27870 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   27866:	f023 0301 	bic.w	r3, r3, #1
   2786a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2786c:	f7ec b8aa 	b.w	139c4 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   27870:	0799      	lsls	r1, r3, #30
   27872:	d504      	bpl.n	2787e <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   27874:	f023 0302 	bic.w	r3, r3, #2
   27878:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2787a:	f7ec b96f 	b.w	13b5c <bt_id_del>
}
   2787e:	4770      	bx	lr

00027880 <get_adv_channel_map>:
{
   27880:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   27882:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   27886:	bf0c      	ite	eq
   27888:	2007      	moveq	r0, #7
   2788a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2788c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2788e:	bf48      	it	mi
   27890:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   27894:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   27896:	bf48      	it	mi
   27898:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2789c:	4770      	bx	lr

0002789e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2789e:	e8d0 0faf 	lda	r0, [r0]
}
   278a2:	4770      	bx	lr

000278a4 <atomic_and>:
{
   278a4:	4603      	mov	r3, r0
   278a6:	b510      	push	{r4, lr}
}
   278a8:	e8d3 0fef 	ldaex	r0, [r3]
   278ac:	ea00 0201 	and.w	r2, r0, r1
   278b0:	e8c3 2fe4 	stlex	r4, r2, [r3]
   278b4:	2c00      	cmp	r4, #0
   278b6:	d1f7      	bne.n	278a8 <atomic_and+0x4>
   278b8:	bd10      	pop	{r4, pc}

000278ba <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   278ba:	680b      	ldr	r3, [r1, #0]
   278bc:	6003      	str	r3, [r0, #0]
   278be:	888b      	ldrh	r3, [r1, #4]
   278c0:	8083      	strh	r3, [r0, #4]
   278c2:	798b      	ldrb	r3, [r1, #6]
   278c4:	7183      	strb	r3, [r0, #6]
   278c6:	4770      	bx	lr

000278c8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   278c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   278ca:	ab0b      	add	r3, sp, #44	; 0x2c
   278cc:	9305      	str	r3, [sp, #20]
   278ce:	9303      	str	r3, [sp, #12]
   278d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   278d2:	9302      	str	r3, [sp, #8]
   278d4:	2300      	movs	r3, #0
   278d6:	4618      	mov	r0, r3
   278d8:	e9cd 3300 	strd	r3, r3, [sp]
   278dc:	f7e7 fc9e 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   278e0:	b007      	add	sp, #28
   278e2:	f85d fb04 	ldr.w	pc, [sp], #4

000278e6 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   278e6:	2301      	movs	r3, #1
{
   278e8:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   278ea:	fa03 f101 	lsl.w	r1, r3, r1
{
   278ee:	4604      	mov	r4, r0
	if (val) {
   278f0:	b142      	cbz	r2, 27904 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   278f2:	e8d4 3fef 	ldaex	r3, [r4]
   278f6:	430b      	orrs	r3, r1
   278f8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   278fc:	2a00      	cmp	r2, #0
   278fe:	d1f8      	bne.n	278f2 <atomic_set_bit_to+0xc>
	}
}
   27900:	bc10      	pop	{r4}
   27902:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27904:	43c9      	mvns	r1, r1
}
   27906:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27908:	f7ff bfcc 	b.w	278a4 <atomic_and>

0002790c <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27910:	b087      	sub	sp, #28
   27912:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   27916:	4605      	mov	r5, r0
   27918:	460c      	mov	r4, r1
   2791a:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2791c:	2100      	movs	r1, #0
   2791e:	2210      	movs	r2, #16
   27920:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   27922:	461f      	mov	r7, r3
   27924:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   27928:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   2792c:	f003 fa3a 	bl	2ada4 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   27930:	b9ce      	cbnz	r6, 27966 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   27932:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   27936:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   27938:	f242 0008 	movw	r0, #8200	; 0x2008
   2793c:	a902      	add	r1, sp, #8
   2793e:	f7ec fb7b 	bl	14038 <hci_set_ad>
		if (err) {
   27942:	4604      	mov	r4, r0
   27944:	b958      	cbnz	r0, 2795e <le_adv_update.constprop.0+0x52>
	if (scannable) {
   27946:	f1ba 0f00 	cmp.w	sl, #0
   2794a:	d13a      	bne.n	279c2 <le_adv_update.constprop.0+0xb6>
   2794c:	3510      	adds	r5, #16
   2794e:	e8d5 3fef 	ldaex	r3, [r5]
   27952:	f043 0304 	orr.w	r3, r3, #4
   27956:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2795a:	2a00      	cmp	r2, #0
   2795c:	d1f7      	bne.n	2794e <le_adv_update.constprop.0+0x42>
}
   2795e:	4620      	mov	r0, r4
   27960:	b007      	add	sp, #28
   27962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   27966:	f7eb ff2b 	bl	137c0 <bt_get_name>
   2796a:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2796c:	b9e4      	cbnz	r4, 279a8 <le_adv_update.constprop.0+0x9c>
   2796e:	bb37      	cbnz	r7, 279be <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   27970:	4658      	mov	r0, fp
   27972:	f7e1 fd4a 	bl	940a <strlen>
   27976:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   27978:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2797a:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2797e:	f88d 3000 	strb.w	r3, [sp]
   27982:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   27986:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2798a:	d1d4      	bne.n	27936 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2798c:	2202      	movs	r2, #2
			d[1].data = &data;
   2798e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   27992:	9605      	str	r6, [sp, #20]
			d_len = 2;
   27994:	e7d0      	b.n	27938 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   27996:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2799a:	3a08      	subs	r2, #8
   2799c:	2a01      	cmp	r2, #1
   2799e:	d924      	bls.n	279ea <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   279a0:	3301      	adds	r3, #1
   279a2:	4598      	cmp	r8, r3
   279a4:	d1f7      	bne.n	27996 <le_adv_update.constprop.0+0x8a>
   279a6:	e7e2      	b.n	2796e <le_adv_update.constprop.0+0x62>
   279a8:	2300      	movs	r3, #0
   279aa:	e7fa      	b.n	279a2 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   279ac:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   279b0:	3a08      	subs	r2, #8
   279b2:	2a01      	cmp	r2, #1
   279b4:	d919      	bls.n	279ea <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   279b6:	3301      	adds	r3, #1
   279b8:	4599      	cmp	r9, r3
   279ba:	d1f7      	bne.n	279ac <le_adv_update.constprop.0+0xa0>
   279bc:	e7d8      	b.n	27970 <le_adv_update.constprop.0+0x64>
   279be:	2300      	movs	r3, #0
   279c0:	e7fa      	b.n	279b8 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   279c2:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   279c4:	2e02      	cmp	r6, #2
			d[1].len = 1;
   279c6:	bf08      	it	eq
   279c8:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   279ca:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   279ce:	bf08      	it	eq
   279d0:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   279d2:	a902      	add	r1, sp, #8
			d[1].data = &data;
   279d4:	bf08      	it	eq
   279d6:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   279da:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   279de:	f7ec fb2b 	bl	14038 <hci_set_ad>
		if (err) {
   279e2:	2800      	cmp	r0, #0
   279e4:	d0b2      	beq.n	2794c <le_adv_update.constprop.0+0x40>
   279e6:	4604      	mov	r4, r0
   279e8:	e7b9      	b.n	2795e <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   279ea:	f06f 0415 	mvn.w	r4, #21
   279ee:	e7b6      	b.n	2795e <le_adv_update.constprop.0+0x52>

000279f0 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   279f0:	6843      	ldr	r3, [r0, #4]
   279f2:	f013 0008 	ands.w	r0, r3, #8
   279f6:	d00a      	beq.n	27a0e <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   279f8:	035a      	lsls	r2, r3, #13
   279fa:	d407      	bmi.n	27a0c <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   279fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   27a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   27a04:	bf14      	ite	ne
   27a06:	2002      	movne	r0, #2
   27a08:	2001      	moveq	r0, #1
   27a0a:	4770      	bx	lr
   27a0c:	2001      	movs	r0, #1
}
   27a0e:	4770      	bx	lr

00027a10 <bt_le_adv_set_enable_legacy>:
{
   27a10:	b570      	push	{r4, r5, r6, lr}
   27a12:	4606      	mov	r6, r0
   27a14:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   27a16:	f242 000a 	movw	r0, #8202	; 0x200a
   27a1a:	2101      	movs	r1, #1
{
   27a1c:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   27a1e:	f7ea ffe9 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   27a22:	4604      	mov	r4, r0
   27a24:	b1b0      	cbz	r0, 27a54 <bt_le_adv_set_enable_legacy+0x44>
   27a26:	300c      	adds	r0, #12
	if (enable) {
   27a28:	b195      	cbz	r5, 27a50 <bt_le_adv_set_enable_legacy+0x40>
   27a2a:	2101      	movs	r1, #1
   27a2c:	f001 fc11 	bl	29252 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   27a30:	4620      	mov	r0, r4
   27a32:	f106 0210 	add.w	r2, r6, #16
   27a36:	a903      	add	r1, sp, #12
   27a38:	2307      	movs	r3, #7
   27a3a:	9500      	str	r5, [sp, #0]
   27a3c:	f7ea ffc8 	bl	129d0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   27a40:	2200      	movs	r2, #0
   27a42:	4621      	mov	r1, r4
   27a44:	f242 000a 	movw	r0, #8202	; 0x200a
   27a48:	f7eb f822 	bl	12a90 <bt_hci_cmd_send_sync>
}
   27a4c:	b006      	add	sp, #24
   27a4e:	bd70      	pop	{r4, r5, r6, pc}
   27a50:	4629      	mov	r1, r5
   27a52:	e7eb      	b.n	27a2c <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   27a54:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27a58:	e7f8      	b.n	27a4c <bt_le_adv_set_enable_legacy+0x3c>

00027a5a <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   27a5a:	f7ff bfd9 	b.w	27a10 <bt_le_adv_set_enable_legacy>

00027a5e <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   27a5e:	3018      	adds	r0, #24
   27a60:	f7f9 bee8 	b.w	21834 <k_work_cancel_delayable>

00027a64 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27a64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27a66:	ab0b      	add	r3, sp, #44	; 0x2c
   27a68:	9305      	str	r3, [sp, #20]
   27a6a:	9303      	str	r3, [sp, #12]
   27a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27a6e:	2201      	movs	r2, #1
   27a70:	9302      	str	r3, [sp, #8]
   27a72:	2300      	movs	r3, #0
   27a74:	4618      	mov	r0, r3
   27a76:	e9cd 3300 	strd	r3, r3, [sp]
   27a7a:	f7e7 fbcf 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   27a7e:	b007      	add	sp, #28
   27a80:	f85d fb04 	ldr.w	pc, [sp], #4

00027a84 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   27a84:	b530      	push	{r4, r5, lr}
   27a86:	460d      	mov	r5, r1
   27a88:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   27a8a:	4601      	mov	r1, r0
{
   27a8c:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   27a8e:	b310      	cbz	r0, 27ad6 <bt_encrypt_le+0x52>
   27a90:	b30d      	cbz	r5, 27ad6 <bt_encrypt_le+0x52>
   27a92:	b302      	cbz	r2, 27ad6 <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   27a94:	4668      	mov	r0, sp
   27a96:	f7ec fdf3 	bl	14680 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   27a9a:	4669      	mov	r1, sp
   27a9c:	a804      	add	r0, sp, #16
   27a9e:	f7e9 f8c3 	bl	10c28 <tc_aes128_set_encrypt_key>
   27aa2:	b1c0      	cbz	r0, 27ad6 <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   27aa4:	4629      	mov	r1, r5
   27aa6:	4668      	mov	r0, sp
   27aa8:	f7ec fdea 	bl	14680 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   27aac:	4669      	mov	r1, sp
   27aae:	4620      	mov	r0, r4
   27ab0:	aa04      	add	r2, sp, #16
   27ab2:	f7ff f88e 	bl	26bd2 <tc_aes_encrypt>
   27ab6:	b170      	cbz	r0, 27ad6 <bt_encrypt_le+0x52>
   27ab8:	1e63      	subs	r3, r4, #1
   27aba:	f104 0210 	add.w	r2, r4, #16
   27abe:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   27ac0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27ac4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   27ac8:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27aca:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   27acc:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   27ace:	d1f7      	bne.n	27ac0 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   27ad0:	2000      	movs	r0, #0
}
   27ad2:	b031      	add	sp, #196	; 0xc4
   27ad4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   27ad6:	f06f 0015 	mvn.w	r0, #21
   27ada:	e7fa      	b.n	27ad2 <bt_encrypt_le+0x4e>

00027adc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27adc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27ade:	ab0b      	add	r3, sp, #44	; 0x2c
   27ae0:	9305      	str	r3, [sp, #20]
   27ae2:	9303      	str	r3, [sp, #12]
   27ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27ae6:	9302      	str	r3, [sp, #8]
   27ae8:	2300      	movs	r3, #0
   27aea:	4618      	mov	r0, r3
   27aec:	e9cd 3300 	strd	r3, r3, [sp]
   27af0:	f7e7 fb94 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   27af4:	b007      	add	sp, #28
   27af6:	f85d fb04 	ldr.w	pc, [sp], #4

00027afa <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27afa:	2200      	movs	r2, #0
	return list->head;
   27afc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27afe:	b90b      	cbnz	r3, 27b04 <sys_slist_find_and_remove+0xa>
   27b00:	4618      	mov	r0, r3
   27b02:	4770      	bx	lr
   27b04:	428b      	cmp	r3, r1
   27b06:	d110      	bne.n	27b2a <sys_slist_find_and_remove+0x30>
	return node->next;
   27b08:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   27b0a:	b942      	cbnz	r2, 27b1e <sys_slist_find_and_remove+0x24>
   27b0c:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   27b0e:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   27b10:	4291      	cmp	r1, r2
   27b12:	d100      	bne.n	27b16 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   27b14:	6043      	str	r3, [r0, #4]
	parent->next = child;
   27b16:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27b18:	2001      	movs	r0, #1
	parent->next = child;
   27b1a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   27b1c:	4770      	bx	lr
	parent->next = child;
   27b1e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27b20:	6843      	ldr	r3, [r0, #4]
   27b22:	4299      	cmp	r1, r3
	list->tail = node;
   27b24:	bf08      	it	eq
   27b26:	6042      	streq	r2, [r0, #4]
}
   27b28:	e7f5      	b.n	27b16 <sys_slist_find_and_remove+0x1c>
	return node->next;
   27b2a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27b2c:	681b      	ldr	r3, [r3, #0]
   27b2e:	e7e6      	b.n	27afe <sys_slist_find_and_remove+0x4>

00027b30 <atomic_and>:
{
   27b30:	4603      	mov	r3, r0
   27b32:	b510      	push	{r4, lr}
}
   27b34:	e8d3 0fef 	ldaex	r0, [r3]
   27b38:	ea00 0201 	and.w	r2, r0, r1
   27b3c:	e8c3 2fe4 	stlex	r4, r2, [r3]
   27b40:	2c00      	cmp	r4, #0
   27b42:	d1f7      	bne.n	27b34 <atomic_and+0x4>
   27b44:	bd10      	pop	{r4, pc}

00027b46 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27b46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27b48:	ab0b      	add	r3, sp, #44	; 0x2c
   27b4a:	9305      	str	r3, [sp, #20]
   27b4c:	9303      	str	r3, [sp, #12]
   27b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27b50:	9302      	str	r3, [sp, #8]
   27b52:	2300      	movs	r3, #0
   27b54:	4618      	mov	r0, r3
   27b56:	e9cd 3300 	strd	r3, r3, [sp]
   27b5a:	f7e7 fb5f 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   27b5e:	b007      	add	sp, #28
   27b60:	f85d fb04 	ldr.w	pc, [sp], #4

00027b64 <tx_complete_work>:
	tx_notify(conn);
   27b64:	3828      	subs	r0, #40	; 0x28
   27b66:	f7ec bf6d 	b.w	14a44 <tx_notify>

00027b6a <bt_conn_reset_rx_state>:
{
   27b6a:	b510      	push	{r4, lr}
   27b6c:	4604      	mov	r4, r0
	if (!conn->rx) {
   27b6e:	6900      	ldr	r0, [r0, #16]
   27b70:	b118      	cbz	r0, 27b7a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   27b72:	f7f2 fb5b 	bl	1a22c <net_buf_unref>
	conn->rx = NULL;
   27b76:	2300      	movs	r3, #0
   27b78:	6123      	str	r3, [r4, #16]
}
   27b7a:	bd10      	pop	{r4, pc}

00027b7c <conn_lookup_handle>:
{
   27b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27b80:	4607      	mov	r7, r0
   27b82:	460e      	mov	r6, r1
   27b84:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   27b86:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27b88:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   27b8c:	42b4      	cmp	r4, r6
   27b8e:	d103      	bne.n	27b98 <conn_lookup_handle+0x1c>
	return NULL;
   27b90:	2300      	movs	r3, #0
}
   27b92:	4618      	mov	r0, r3
   27b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27b98:	fb09 7004 	mla	r0, r9, r4, r7
   27b9c:	f7ed fa04 	bl	14fa8 <bt_conn_ref>
   27ba0:	4603      	mov	r3, r0
		if (!conn) {
   27ba2:	b158      	cbz	r0, 27bbc <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   27ba4:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27ba6:	2d01      	cmp	r5, #1
   27ba8:	d002      	beq.n	27bb0 <conn_lookup_handle+0x34>
   27baa:	3d07      	subs	r5, #7
   27bac:	2d01      	cmp	r5, #1
   27bae:	d803      	bhi.n	27bb8 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   27bb0:	881a      	ldrh	r2, [r3, #0]
   27bb2:	4542      	cmp	r2, r8
   27bb4:	d0ed      	beq.n	27b92 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   27bb6:	4618      	mov	r0, r3
   27bb8:	f7ed fa1e 	bl	14ff8 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   27bbc:	3401      	adds	r4, #1
   27bbe:	e7e5      	b.n	27b8c <conn_lookup_handle+0x10>

00027bc0 <bt_conn_connected>:
{
   27bc0:	b510      	push	{r4, lr}
   27bc2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   27bc4:	f7ed ff52 	bl	15a6c <bt_l2cap_connected>
	notify_connected(conn);
   27bc8:	4620      	mov	r0, r4
}
   27bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   27bce:	f7ec bf03 	b.w	149d8 <notify_connected>

00027bd2 <bt_conn_disconnect>:
{
   27bd2:	b510      	push	{r4, lr}
	switch (conn->state) {
   27bd4:	7b43      	ldrb	r3, [r0, #13]
{
   27bd6:	4604      	mov	r4, r0
	switch (conn->state) {
   27bd8:	3b02      	subs	r3, #2
   27bda:	2b06      	cmp	r3, #6
   27bdc:	d816      	bhi.n	27c0c <bt_conn_disconnect+0x3a>
   27bde:	e8df f003 	tbb	[pc, r3]
   27be2:	1504      	.short	0x1504
   27be4:	0b091515 	.word	0x0b091515
   27be8:	09          	.byte	0x09
   27be9:	00          	.byte	0x00
		conn->err = reason;
   27bea:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27bec:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   27bee:	4620      	mov	r0, r4
   27bf0:	f7ed fa3a 	bl	15068 <bt_conn_set_state>
{
   27bf4:	2000      	movs	r0, #0
}
   27bf6:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   27bf8:	8800      	ldrh	r0, [r0, #0]
   27bfa:	f7ff fcd5 	bl	275a8 <bt_hci_disconnect>
	if (err) {
   27bfe:	2800      	cmp	r0, #0
   27c00:	d1f9      	bne.n	27bf6 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   27c02:	7b63      	ldrb	r3, [r4, #13]
   27c04:	2b07      	cmp	r3, #7
   27c06:	d1f5      	bne.n	27bf4 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   27c08:	2108      	movs	r1, #8
   27c0a:	e7f0      	b.n	27bee <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   27c0c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27c10:	e7f1      	b.n	27bf6 <bt_conn_disconnect+0x24>

00027c12 <bt_conn_set_security>:
{
   27c12:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   27c14:	7b43      	ldrb	r3, [r0, #13]
{
   27c16:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   27c18:	2b07      	cmp	r3, #7
{
   27c1a:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   27c1c:	d122      	bne.n	27c64 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   27c1e:	7a43      	ldrb	r3, [r0, #9]
   27c20:	428b      	cmp	r3, r1
   27c22:	d215      	bcs.n	27c50 <bt_conn_set_security+0x3e>
   27c24:	7a83      	ldrb	r3, [r0, #10]
   27c26:	428b      	cmp	r3, r1
   27c28:	d212      	bcs.n	27c50 <bt_conn_set_security+0x3e>
	if (val) {
   27c2a:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   27c2c:	f100 0004 	add.w	r0, r0, #4
   27c30:	d510      	bpl.n	27c54 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27c32:	e8d0 3fef 	ldaex	r3, [r0]
   27c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   27c3a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   27c3e:	2a00      	cmp	r2, #0
   27c40:	d1f7      	bne.n	27c32 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   27c42:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   27c46:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   27c48:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   27c4a:	f7f1 f8af 	bl	18dac <bt_smp_start_security>
	if (err) {
   27c4e:	b930      	cbnz	r0, 27c5e <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   27c50:	2000      	movs	r0, #0
}
   27c52:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27c54:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   27c58:	f7ff ff6a 	bl	27b30 <atomic_and>
   27c5c:	e7f1      	b.n	27c42 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   27c5e:	7a63      	ldrb	r3, [r4, #9]
   27c60:	72a3      	strb	r3, [r4, #10]
   27c62:	e7f6      	b.n	27c52 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   27c64:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27c68:	e7f3      	b.n	27c52 <bt_conn_set_security+0x40>

00027c6a <bt_conn_get_security>:
}
   27c6a:	7a40      	ldrb	r0, [r0, #9]
   27c6c:	4770      	bx	lr

00027c6e <bt_conn_is_peer_addr_le>:
{
   27c6e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27c70:	7a03      	ldrb	r3, [r0, #8]
{
   27c72:	4604      	mov	r4, r0
	if (id != conn->id) {
   27c74:	428b      	cmp	r3, r1
{
   27c76:	4615      	mov	r5, r2
	if (id != conn->id) {
   27c78:	d115      	bne.n	27ca6 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27c7a:	f100 0190 	add.w	r1, r0, #144	; 0x90
   27c7e:	2207      	movs	r2, #7
   27c80:	4628      	mov	r0, r5
   27c82:	f003 f845 	bl	2ad10 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   27c86:	b180      	cbz	r0, 27caa <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   27c88:	78e3      	ldrb	r3, [r4, #3]
   27c8a:	2207      	movs	r2, #7
   27c8c:	b943      	cbnz	r3, 27ca0 <bt_conn_is_peer_addr_le+0x32>
   27c8e:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   27c92:	4628      	mov	r0, r5
   27c94:	f003 f83c 	bl	2ad10 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   27c98:	fab0 f080 	clz	r0, r0
   27c9c:	0940      	lsrs	r0, r0, #5
}
   27c9e:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   27ca0:	f104 0197 	add.w	r1, r4, #151	; 0x97
   27ca4:	e7f5      	b.n	27c92 <bt_conn_is_peer_addr_le+0x24>
		return false;
   27ca6:	2000      	movs	r0, #0
   27ca8:	e7f9      	b.n	27c9e <bt_conn_is_peer_addr_le+0x30>
		return true;
   27caa:	2001      	movs	r0, #1
   27cac:	e7f7      	b.n	27c9e <bt_conn_is_peer_addr_le+0x30>

00027cae <bt_conn_get_dst>:
}
   27cae:	3090      	adds	r0, #144	; 0x90
   27cb0:	4770      	bx	lr

00027cb2 <bt_conn_le_conn_update>:
{
   27cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27cb4:	4607      	mov	r7, r0
   27cb6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   27cb8:	f242 0013 	movw	r0, #8211	; 0x2013
   27cbc:	210e      	movs	r1, #14
   27cbe:	f7ea fe99 	bl	129f4 <bt_hci_cmd_create>
	if (!buf) {
   27cc2:	4606      	mov	r6, r0
   27cc4:	b1d0      	cbz	r0, 27cfc <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   27cc6:	210e      	movs	r1, #14
   27cc8:	300c      	adds	r0, #12
   27cca:	f7f2 fbd1 	bl	1a470 <net_buf_simple_add>
   27cce:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   27cd0:	220e      	movs	r2, #14
   27cd2:	2100      	movs	r1, #0
   27cd4:	f003 f866 	bl	2ada4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   27cd8:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27cda:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   27cdc:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   27cde:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27ce0:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   27ce2:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   27ce4:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27ce6:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   27cea:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   27cec:	88ab      	ldrh	r3, [r5, #4]
   27cee:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   27cf0:	88eb      	ldrh	r3, [r5, #6]
   27cf2:	8123      	strh	r3, [r4, #8]
}
   27cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27cf8:	f7ea beca 	b.w	12a90 <bt_hci_cmd_send_sync>
}
   27cfc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027d02 <l2cap_connected>:
}
   27d02:	4770      	bx	lr

00027d04 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27d04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27d06:	ab0b      	add	r3, sp, #44	; 0x2c
   27d08:	9305      	str	r3, [sp, #20]
   27d0a:	9303      	str	r3, [sp, #12]
   27d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27d0e:	9302      	str	r3, [sp, #8]
   27d10:	2300      	movs	r3, #0
   27d12:	4618      	mov	r0, r3
   27d14:	e9cd 3300 	strd	r3, r3, [sp]
   27d18:	f7e7 fa80 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   27d1c:	b007      	add	sp, #28
   27d1e:	f85d fb04 	ldr.w	pc, [sp], #4

00027d22 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   27d22:	4770      	bx	lr

00027d24 <bt_l2cap_chan_del>:
{
   27d24:	b570      	push	{r4, r5, r6, lr}
   27d26:	4604      	mov	r4, r0
	if (!chan->conn) {
   27d28:	e9d0 3500 	ldrd	r3, r5, [r0]
   27d2c:	b123      	cbz	r3, 27d38 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   27d2e:	686b      	ldr	r3, [r5, #4]
   27d30:	b103      	cbz	r3, 27d34 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   27d32:	4798      	blx	r3
	chan->conn = NULL;
   27d34:	2300      	movs	r3, #0
   27d36:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   27d38:	68e3      	ldr	r3, [r4, #12]
   27d3a:	b10b      	cbz	r3, 27d40 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27d3c:	4620      	mov	r0, r4
   27d3e:	4798      	blx	r3
	if (ops->released) {
   27d40:	6a2b      	ldr	r3, [r5, #32]
   27d42:	b11b      	cbz	r3, 27d4c <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   27d44:	4620      	mov	r0, r4
}
   27d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   27d4a:	4718      	bx	r3
}
   27d4c:	bd70      	pop	{r4, r5, r6, pc}

00027d4e <bt_l2cap_disconnected>:
{
   27d4e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   27d50:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27d52:	b130      	cbz	r0, 27d62 <bt_l2cap_disconnected+0x14>
	return node->next;
   27d54:	f850 4908 	ldr.w	r4, [r0], #-8
   27d58:	b104      	cbz	r4, 27d5c <bt_l2cap_disconnected+0xe>
   27d5a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   27d5c:	f7ff ffe2 	bl	27d24 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27d60:	b904      	cbnz	r4, 27d64 <bt_l2cap_disconnected+0x16>
}
   27d62:	bd38      	pop	{r3, r4, r5, pc}
   27d64:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27d66:	b12d      	cbz	r5, 27d74 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   27d68:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27d6a:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   27d6c:	f7ff ffda 	bl	27d24 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27d70:	462c      	mov	r4, r5
   27d72:	e7f7      	b.n	27d64 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   27d74:	4620      	mov	r0, r4
}
   27d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   27d7a:	f7ff bfd3 	b.w	27d24 <bt_l2cap_chan_del>

00027d7e <bt_l2cap_security_changed>:
{
   27d7e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   27d80:	6d43      	ldr	r3, [r0, #84]	; 0x54
   27d82:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27d84:	b1bb      	cbz	r3, 27db6 <bt_l2cap_security_changed+0x38>
   27d86:	4618      	mov	r0, r3
	return node->next;
   27d88:	f850 4908 	ldr.w	r4, [r0], #-8
   27d8c:	b104      	cbz	r4, 27d90 <bt_l2cap_security_changed+0x12>
   27d8e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   27d90:	f853 3c04 	ldr.w	r3, [r3, #-4]
   27d94:	689b      	ldr	r3, [r3, #8]
   27d96:	b10b      	cbz	r3, 27d9c <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   27d98:	4629      	mov	r1, r5
   27d9a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27d9c:	b15c      	cbz	r4, 27db6 <bt_l2cap_security_changed+0x38>
   27d9e:	4620      	mov	r0, r4
   27da0:	68a4      	ldr	r4, [r4, #8]
   27da2:	6843      	ldr	r3, [r0, #4]
   27da4:	b124      	cbz	r4, 27db0 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   27da6:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27da8:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   27daa:	2b00      	cmp	r3, #0
   27dac:	d1f4      	bne.n	27d98 <bt_l2cap_security_changed+0x1a>
   27dae:	e7f6      	b.n	27d9e <bt_l2cap_security_changed+0x20>
   27db0:	689b      	ldr	r3, [r3, #8]
   27db2:	2b00      	cmp	r3, #0
   27db4:	d1f0      	bne.n	27d98 <bt_l2cap_security_changed+0x1a>
}
   27db6:	bd38      	pop	{r3, r4, r5, pc}

00027db8 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   27db8:	3104      	adds	r1, #4
   27dba:	f7ed ba5f 	b.w	1527c <bt_conn_create_pdu_timeout>

00027dbe <bt_l2cap_send_cb>:
{
   27dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27dc2:	4614      	mov	r4, r2
   27dc4:	4605      	mov	r5, r0
   27dc6:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   27dc8:	f102 000c 	add.w	r0, r2, #12
   27dcc:	2104      	movs	r1, #4
   27dce:	461e      	mov	r6, r3
   27dd0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   27dd4:	f7f2 faf0 	bl	1a3b8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27dd8:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   27dda:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27ddc:	3a04      	subs	r2, #4
   27dde:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27de0:	4643      	mov	r3, r8
   27de2:	4632      	mov	r2, r6
   27de4:	4621      	mov	r1, r4
   27de6:	4628      	mov	r0, r5
}
   27de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27dec:	f7ed b83c 	b.w	14e68 <bt_conn_send_cb>

00027df0 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   27df0:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27df2:	b128      	cbz	r0, 27e00 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27df4:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27df6:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27df8:	428b      	cmp	r3, r1
   27dfa:	d001      	beq.n	27e00 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   27dfc:	6880      	ldr	r0, [r0, #8]
   27dfe:	e7f8      	b.n	27df2 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   27e00:	4770      	bx	lr

00027e02 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   27e02:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27e04:	b128      	cbz	r0, 27e12 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27e06:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27e08:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27e0a:	428b      	cmp	r3, r1
   27e0c:	d001      	beq.n	27e12 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   27e0e:	6880      	ldr	r0, [r0, #8]
   27e10:	e7f8      	b.n	27e04 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   27e12:	4770      	bx	lr

00027e14 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   27e14:	4770      	bx	lr

00027e16 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   27e16:	4603      	mov	r3, r0
	return list->head;
   27e18:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27e1a:	b128      	cbz	r0, 27e28 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27e1c:	6859      	ldr	r1, [r3, #4]
	return node->next;
   27e1e:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27e20:	4288      	cmp	r0, r1
	list->head = node;
   27e22:	601a      	str	r2, [r3, #0]
	list->tail = node;
   27e24:	bf08      	it	eq
   27e26:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   27e28:	4770      	bx	lr

00027e2a <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   27e2a:	4603      	mov	r3, r0
	size_t bytes = 0;
   27e2c:	2000      	movs	r0, #0

	while (buf) {
   27e2e:	b903      	cbnz	r3, 27e32 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   27e30:	4770      	bx	lr
		bytes += buf->len;
   27e32:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   27e34:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   27e36:	4410      	add	r0, r2
		buf = buf->frags;
   27e38:	e7f9      	b.n	27e2e <net_buf_frags_len+0x4>

00027e3a <attr_read_type_cb>:
{
   27e3a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   27e3c:	68d4      	ldr	r4, [r2, #12]
   27e3e:	3102      	adds	r1, #2
   27e40:	7823      	ldrb	r3, [r4, #0]
   27e42:	b913      	cbnz	r3, 27e4a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   27e44:	7021      	strb	r1, [r4, #0]
	return true;
   27e46:	2001      	movs	r0, #1
}
   27e48:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   27e4a:	428b      	cmp	r3, r1
   27e4c:	d0fb      	beq.n	27e46 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   27e4e:	8a03      	ldrh	r3, [r0, #16]
   27e50:	3b02      	subs	r3, #2
   27e52:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   27e54:	2000      	movs	r0, #0
   27e56:	6110      	str	r0, [r2, #16]
		return false;
   27e58:	e7f6      	b.n	27e48 <attr_read_type_cb+0xe>

00027e5a <att_prepare_write_req>:
}
   27e5a:	2006      	movs	r0, #6
   27e5c:	4770      	bx	lr

00027e5e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27e5e:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27e62:	4108      	asrs	r0, r1
}
   27e64:	f000 0001 	and.w	r0, r0, #1
   27e68:	4770      	bx	lr

00027e6a <write_cb>:
{
   27e6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27e6c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   27e6e:	4601      	mov	r1, r0
{
   27e70:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   27e72:	f44f 7295 	mov.w	r2, #298	; 0x12a
   27e76:	6820      	ldr	r0, [r4, #0]
   27e78:	f000 fddc 	bl	28a34 <bt_gatt_check_perm>
   27e7c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   27e7e:	bb00      	cbnz	r0, 27ec2 <write_cb+0x58>
	if (!data->req) {
   27e80:	7a23      	ldrb	r3, [r4, #8]
   27e82:	b1b3      	cbz	r3, 27eb2 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   27e84:	f1a3 0218 	sub.w	r2, r3, #24
   27e88:	4253      	negs	r3, r2
   27e8a:	4153      	adcs	r3, r2
   27e8c:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   27e8e:	9301      	str	r3, [sp, #4]
   27e90:	8a63      	ldrh	r3, [r4, #18]
   27e92:	4629      	mov	r1, r5
   27e94:	9300      	str	r3, [sp, #0]
   27e96:	68ae      	ldr	r6, [r5, #8]
   27e98:	8a23      	ldrh	r3, [r4, #16]
   27e9a:	68e2      	ldr	r2, [r4, #12]
   27e9c:	6820      	ldr	r0, [r4, #0]
   27e9e:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   27ea0:	2800      	cmp	r0, #0
   27ea2:	db08      	blt.n	27eb6 <write_cb+0x4c>
   27ea4:	8a23      	ldrh	r3, [r4, #16]
   27ea6:	4283      	cmp	r3, r0
   27ea8:	d10e      	bne.n	27ec8 <write_cb+0x5e>
	data->err = 0U;
   27eaa:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   27eac:	2001      	movs	r0, #1
	data->err = 0U;
   27eae:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27eb0:	e008      	b.n	27ec4 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   27eb2:	2302      	movs	r3, #2
   27eb4:	e7eb      	b.n	27e8e <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   27eb6:	f110 0fff 	cmn.w	r0, #255	; 0xff
   27eba:	d305      	bcc.n	27ec8 <write_cb+0x5e>
		return -err;
   27ebc:	4240      	negs	r0, r0
   27ebe:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   27ec0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   27ec2:	2000      	movs	r0, #0
}
   27ec4:	b002      	add	sp, #8
   27ec6:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   27ec8:	200e      	movs	r0, #14
   27eca:	e7f9      	b.n	27ec0 <write_cb+0x56>

00027ecc <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   27ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   27ece:	e9cd 2301 	strd	r2, r3, [sp, #4]
   27ed2:	2300      	movs	r3, #0
   27ed4:	461a      	mov	r2, r3
   27ed6:	9300      	str	r3, [sp, #0]
   27ed8:	f7ef fab8 	bl	1744c <bt_gatt_foreach_attr_type>
				  user_data);
}
   27edc:	b005      	add	sp, #20
   27ede:	f85d fb04 	ldr.w	pc, [sp], #4

00027ee2 <att_chan_mtu_updated>:
{
   27ee2:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   27ee4:	6805      	ldr	r5, [r0, #0]
	return list->head;
   27ee6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27ee8:	b352      	cbz	r2, 27f40 <att_chan_mtu_updated+0x5e>
	return node->next;
   27eea:	6813      	ldr	r3, [r2, #0]
   27eec:	b103      	cbz	r3, 27ef0 <att_chan_mtu_updated+0xe>
   27eee:	3bf0      	subs	r3, #240	; 0xf0
   27ef0:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   27ef4:	2200      	movs	r2, #0
   27ef6:	4611      	mov	r1, r2
   27ef8:	e000      	b.n	27efc <att_chan_mtu_updated+0x1a>
   27efa:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   27efc:	4284      	cmp	r4, r0
   27efe:	d007      	beq.n	27f10 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27f00:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27f02:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27f04:	42b1      	cmp	r1, r6
   27f06:	bf38      	it	cc
   27f08:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27f0a:	42a2      	cmp	r2, r4
   27f0c:	bf38      	it	cc
   27f0e:	4622      	movcc	r2, r4
   27f10:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27f12:	b12b      	cbz	r3, 27f20 <att_chan_mtu_updated+0x3e>
   27f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   27f18:	2b00      	cmp	r3, #0
   27f1a:	d1ee      	bne.n	27efa <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   27f1c:	4284      	cmp	r4, r0
   27f1e:	d1ef      	bne.n	27f00 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27f20:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   27f22:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27f24:	428b      	cmp	r3, r1
   27f26:	d801      	bhi.n	27f2c <att_chan_mtu_updated+0x4a>
   27f28:	4290      	cmp	r0, r2
   27f2a:	d90b      	bls.n	27f44 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27f2c:	4282      	cmp	r2, r0
   27f2e:	bf38      	it	cc
   27f30:	4602      	movcc	r2, r0
   27f32:	4299      	cmp	r1, r3
   27f34:	6828      	ldr	r0, [r5, #0]
   27f36:	bf38      	it	cc
   27f38:	4619      	movcc	r1, r3
}
   27f3a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27f3c:	f7f0 b824 	b.w	17f88 <bt_gatt_att_max_mtu_changed>
   27f40:	4611      	mov	r1, r2
   27f42:	e7ed      	b.n	27f20 <att_chan_mtu_updated+0x3e>
}
   27f44:	bc70      	pop	{r4, r5, r6}
   27f46:	4770      	bx	lr

00027f48 <attr_read_group_cb>:
	if (!data->rsp->len) {
   27f48:	68d0      	ldr	r0, [r2, #12]
   27f4a:	3104      	adds	r1, #4
   27f4c:	7803      	ldrb	r3, [r0, #0]
   27f4e:	b913      	cbnz	r3, 27f56 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   27f50:	7001      	strb	r1, [r0, #0]
	return true;
   27f52:	2001      	movs	r0, #1
   27f54:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   27f56:	428b      	cmp	r3, r1
   27f58:	d0fb      	beq.n	27f52 <attr_read_group_cb+0xa>
		data->group = NULL;
   27f5a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   27f5c:	6891      	ldr	r1, [r2, #8]
   27f5e:	8a0b      	ldrh	r3, [r1, #16]
   27f60:	3b04      	subs	r3, #4
   27f62:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   27f64:	6110      	str	r0, [r2, #16]
}
   27f66:	4770      	bx	lr

00027f68 <find_info_cb>:
{
   27f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   27f6a:	6893      	ldr	r3, [r2, #8]
{
   27f6c:	4605      	mov	r5, r0
   27f6e:	460f      	mov	r7, r1
   27f70:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   27f72:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   27f74:	b963      	cbnz	r3, 27f90 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   27f76:	6850      	ldr	r0, [r2, #4]
   27f78:	2101      	movs	r1, #1
   27f7a:	300c      	adds	r0, #12
   27f7c:	f7f2 fa78 	bl	1a470 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27f80:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27f82:	682b      	ldr	r3, [r5, #0]
   27f84:	781b      	ldrb	r3, [r3, #0]
   27f86:	2b00      	cmp	r3, #0
   27f88:	bf14      	ite	ne
   27f8a:	2302      	movne	r3, #2
   27f8c:	2301      	moveq	r3, #1
   27f8e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   27f90:	68a3      	ldr	r3, [r4, #8]
   27f92:	781b      	ldrb	r3, [r3, #0]
   27f94:	2b01      	cmp	r3, #1
   27f96:	d003      	beq.n	27fa0 <find_info_cb+0x38>
   27f98:	2b02      	cmp	r3, #2
   27f9a:	d019      	beq.n	27fd0 <find_info_cb+0x68>
   27f9c:	2000      	movs	r0, #0
   27f9e:	e016      	b.n	27fce <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27fa0:	682b      	ldr	r3, [r5, #0]
   27fa2:	781b      	ldrb	r3, [r3, #0]
   27fa4:	2b00      	cmp	r3, #0
   27fa6:	d1f9      	bne.n	27f9c <find_info_cb+0x34>
   27fa8:	6860      	ldr	r0, [r4, #4]
   27faa:	2104      	movs	r1, #4
   27fac:	300c      	adds	r0, #12
   27fae:	f7f2 fa5f 	bl	1a470 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   27fb2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   27fb4:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27fb6:	682a      	ldr	r2, [r5, #0]
   27fb8:	68e3      	ldr	r3, [r4, #12]
   27fba:	8852      	ldrh	r2, [r2, #2]
   27fbc:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27fbe:	6863      	ldr	r3, [r4, #4]
   27fc0:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   27fc2:	8a1b      	ldrh	r3, [r3, #16]
   27fc4:	1ac0      	subs	r0, r0, r3
   27fc6:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   27fc8:	bf94      	ite	ls
   27fca:	2000      	movls	r0, #0
   27fcc:	2001      	movhi	r0, #1
}
   27fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27fd0:	682b      	ldr	r3, [r5, #0]
   27fd2:	781b      	ldrb	r3, [r3, #0]
   27fd4:	2b02      	cmp	r3, #2
   27fd6:	d1e1      	bne.n	27f9c <find_info_cb+0x34>
   27fd8:	6860      	ldr	r0, [r4, #4]
   27fda:	2112      	movs	r1, #18
   27fdc:	300c      	adds	r0, #12
   27fde:	f7f2 fa47 	bl	1a470 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   27fe2:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   27fe4:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27fe6:	682b      	ldr	r3, [r5, #0]
   27fe8:	68e2      	ldr	r2, [r4, #12]
   27fea:	1c59      	adds	r1, r3, #1
   27fec:	3202      	adds	r2, #2
   27fee:	3311      	adds	r3, #17
   27ff0:	f851 0b04 	ldr.w	r0, [r1], #4
   27ff4:	4299      	cmp	r1, r3
   27ff6:	f842 0b04 	str.w	r0, [r2], #4
   27ffa:	d1f9      	bne.n	27ff0 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   27ffc:	6863      	ldr	r3, [r4, #4]
   27ffe:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   28000:	8a1b      	ldrh	r3, [r3, #16]
   28002:	1ac0      	subs	r0, r0, r3
   28004:	2812      	cmp	r0, #18
   28006:	e7df      	b.n	27fc8 <find_info_cb+0x60>

00028008 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2800a:	ab0b      	add	r3, sp, #44	; 0x2c
   2800c:	9305      	str	r3, [sp, #20]
   2800e:	9303      	str	r3, [sp, #12]
   28010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28012:	9302      	str	r3, [sp, #8]
   28014:	2300      	movs	r3, #0
   28016:	4618      	mov	r0, r3
   28018:	e9cd 3300 	strd	r3, r3, [sp]
   2801c:	f7e7 f8fe 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   28020:	b007      	add	sp, #28
   28022:	f85d fb04 	ldr.w	pc, [sp], #4

00028026 <chan_req_send>:
{
   28026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28028:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2802a:	6888      	ldr	r0, [r1, #8]
   2802c:	f7ff fefd 	bl	27e2a <net_buf_frags_len>
   28030:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   28032:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   28034:	4283      	cmp	r3, r0
   28036:	d30d      	bcc.n	28054 <chan_req_send+0x2e>
	req->buf = NULL;
   28038:	2600      	movs	r6, #0
	chan->req = req;
   2803a:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   2803e:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   28040:	4628      	mov	r0, r5
	req->buf = NULL;
   28042:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   28044:	4639      	mov	r1, r7
   28046:	f7ed ff59 	bl	15efc <chan_send>
	if (err) {
   2804a:	b110      	cbz	r0, 28052 <chan_req_send+0x2c>
		req->buf = buf;
   2804c:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2804e:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   28052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   28054:	f06f 0079 	mvn.w	r0, #121	; 0x79
   28058:	e7fb      	b.n	28052 <chan_req_send+0x2c>

0002805a <process_queue>:
{
   2805a:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2805c:	2200      	movs	r2, #0
{
   2805e:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   28060:	2300      	movs	r3, #0
   28062:	4608      	mov	r0, r1
{
   28064:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   28066:	f001 f8cb 	bl	29200 <net_buf_get>
	if (buf) {
   2806a:	4605      	mov	r5, r0
   2806c:	b158      	cbz	r0, 28086 <process_queue+0x2c>
	return chan_send(chan, buf);
   2806e:	4601      	mov	r1, r0
   28070:	4620      	mov	r0, r4
   28072:	f7ed ff43 	bl	15efc <chan_send>
		if (err) {
   28076:	4604      	mov	r4, r0
   28078:	b118      	cbz	r0, 28082 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2807a:	4629      	mov	r1, r5
   2807c:	4630      	mov	r0, r6
   2807e:	f002 fc96 	bl	2a9ae <k_queue_prepend>
}
   28082:	4620      	mov	r0, r4
   28084:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   28086:	f06f 0401 	mvn.w	r4, #1
   2808a:	e7fa      	b.n	28082 <process_queue+0x28>

0002808c <bt_att_chan_send_rsp>:
{
   2808c:	b538      	push	{r3, r4, r5, lr}
   2808e:	4604      	mov	r4, r0
   28090:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   28092:	f7ed ff33 	bl	15efc <chan_send>
	if (err) {
   28096:	b130      	cbz	r0, 280a6 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   28098:	4629      	mov	r1, r5
   2809a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2809e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   280a2:	f7f2 b89d 	b.w	1a1e0 <net_buf_put>
}
   280a6:	bd38      	pop	{r3, r4, r5, pc}

000280a8 <att_chan_read>:
{
   280a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   280ac:	4680      	mov	r8, r0
   280ae:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   280b0:	4610      	mov	r0, r2
{
   280b2:	4699      	mov	r9, r3
   280b4:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   280b6:	f7ff feb8 	bl	27e2a <net_buf_frags_len>
   280ba:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   280be:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   280c0:	4283      	cmp	r3, r0
   280c2:	d97a      	bls.n	281ba <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   280c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   280c8:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   280ca:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   280cc:	f7f2 f90a 	bl	1a2e4 <net_buf_frag_last>
	size_t len, total = 0;
   280d0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   280d4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   280d6:	4630      	mov	r0, r6
   280d8:	f7ff fea7 	bl	27e2a <net_buf_frags_len>
   280dc:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   280e0:	f105 070c 	add.w	r7, r5, #12
   280e4:	1a24      	subs	r4, r4, r0
   280e6:	4638      	mov	r0, r7
   280e8:	f001 f89f 	bl	2922a <net_buf_simple_tailroom>
   280ec:	4284      	cmp	r4, r0
   280ee:	d211      	bcs.n	28114 <att_chan_read+0x6c>
   280f0:	4630      	mov	r0, r6
   280f2:	f7ff fe9a 	bl	27e2a <net_buf_frags_len>
   280f6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   280fa:	1a24      	subs	r4, r4, r0
		if (!len) {
   280fc:	bb34      	cbnz	r4, 2814c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   280fe:	7ab0      	ldrb	r0, [r6, #10]
   28100:	f7f1 fe5a 	bl	19db8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   28104:	2200      	movs	r2, #0
   28106:	2300      	movs	r3, #0
   28108:	f001 f875 	bl	291f6 <net_buf_alloc_fixed>
			if (!frag) {
   2810c:	4605      	mov	r5, r0
   2810e:	b930      	cbnz	r0, 2811e <att_chan_read+0x76>
	return total;
   28110:	4657      	mov	r7, sl
   28112:	e02c      	b.n	2816e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   28114:	4638      	mov	r0, r7
   28116:	f001 f888 	bl	2922a <net_buf_simple_tailroom>
   2811a:	4604      	mov	r4, r0
   2811c:	e7ee      	b.n	280fc <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2811e:	4601      	mov	r1, r0
   28120:	4630      	mov	r0, r6
   28122:	f7f2 f925 	bl	1a370 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28126:	4630      	mov	r0, r6
   28128:	f7ff fe7f 	bl	27e2a <net_buf_frags_len>
   2812c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28130:	f105 070c 	add.w	r7, r5, #12
   28134:	1a24      	subs	r4, r4, r0
   28136:	4638      	mov	r0, r7
   28138:	f001 f877 	bl	2922a <net_buf_simple_tailroom>
   2813c:	4284      	cmp	r4, r0
   2813e:	d21a      	bcs.n	28176 <att_chan_read+0xce>
   28140:	4630      	mov	r0, r6
   28142:	f7ff fe72 	bl	27e2a <net_buf_frags_len>
   28146:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2814a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2814c:	68e9      	ldr	r1, [r5, #12]
   2814e:	8a2a      	ldrh	r2, [r5, #16]
   28150:	f8cd 9000 	str.w	r9, [sp]
   28154:	f8db 7004 	ldr.w	r7, [fp, #4]
   28158:	440a      	add	r2, r1
   2815a:	9803      	ldr	r0, [sp, #12]
   2815c:	4659      	mov	r1, fp
   2815e:	b2a3      	uxth	r3, r4
   28160:	47b8      	blx	r7
		if (read < 0) {
   28162:	1e07      	subs	r7, r0, #0
   28164:	da0c      	bge.n	28180 <att_chan_read+0xd8>
				return total;
   28166:	f1ba 0f00 	cmp.w	sl, #0
   2816a:	bf18      	it	ne
   2816c:	4657      	movne	r7, sl
}
   2816e:	4638      	mov	r0, r7
   28170:	b005      	add	sp, #20
   28172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28176:	4638      	mov	r0, r7
   28178:	f001 f857 	bl	2922a <net_buf_simple_tailroom>
   2817c:	4604      	mov	r4, r0
   2817e:	e7e5      	b.n	2814c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   28180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28182:	b993      	cbnz	r3, 281aa <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   28184:	4639      	mov	r1, r7
   28186:	f105 000c 	add.w	r0, r5, #12
   2818a:	f7f2 f971 	bl	1a470 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2818e:	4630      	mov	r0, r6
   28190:	f7ff fe4b 	bl	27e2a <net_buf_frags_len>
   28194:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   28198:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2819a:	4283      	cmp	r3, r0
		total += read;
   2819c:	44ba      	add	sl, r7
		offset += read;
   2819e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   281a2:	d9b5      	bls.n	28110 <att_chan_read+0x68>
   281a4:	42a7      	cmp	r7, r4
   281a6:	d096      	beq.n	280d6 <att_chan_read+0x2e>
   281a8:	e7b2      	b.n	28110 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   281aa:	4639      	mov	r1, r7
   281ac:	4628      	mov	r0, r5
   281ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   281b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   281b2:	4798      	blx	r3
   281b4:	2800      	cmp	r0, #0
   281b6:	d1e5      	bne.n	28184 <att_chan_read+0xdc>
   281b8:	e7aa      	b.n	28110 <att_chan_read+0x68>
		return 0;
   281ba:	2700      	movs	r7, #0
   281bc:	e7d7      	b.n	2816e <att_chan_read+0xc6>

000281be <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   281be:	2200      	movs	r2, #0
	return list->head;
   281c0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   281c2:	b903      	cbnz	r3, 281c6 <sys_slist_find_and_remove.isra.0+0x8>
   281c4:	4770      	bx	lr
   281c6:	428b      	cmp	r3, r1
   281c8:	d10f      	bne.n	281ea <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   281ca:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   281cc:	b93a      	cbnz	r2, 281de <sys_slist_find_and_remove.isra.0+0x20>
   281ce:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   281d0:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   281d2:	4291      	cmp	r1, r2
   281d4:	d100      	bne.n	281d8 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   281d6:	6043      	str	r3, [r0, #4]
	parent->next = child;
   281d8:	2300      	movs	r3, #0
   281da:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   281dc:	4770      	bx	lr
	parent->next = child;
   281de:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   281e0:	6843      	ldr	r3, [r0, #4]
   281e2:	4299      	cmp	r1, r3
	list->tail = node;
   281e4:	bf08      	it	eq
   281e6:	6042      	streq	r2, [r0, #4]
}
   281e8:	e7f6      	b.n	281d8 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   281ea:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   281ec:	681b      	ldr	r3, [r3, #0]
   281ee:	e7e8      	b.n	281c2 <sys_slist_find_and_remove.isra.0+0x4>

000281f0 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   281f0:	2006      	movs	r0, #6
   281f2:	4770      	bx	lr

000281f4 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   281f4:	2301      	movs	r3, #1
{
   281f6:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   281f8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   281fc:	e8d0 3fef 	ldaex	r3, [r0]
   28200:	ea43 0201 	orr.w	r2, r3, r1
   28204:	e8c0 2fe4 	stlex	r4, r2, [r0]
   28208:	2c00      	cmp	r4, #0
   2820a:	d1f7      	bne.n	281fc <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   2820c:	4219      	tst	r1, r3
}
   2820e:	bf14      	ite	ne
   28210:	2001      	movne	r0, #1
   28212:	2000      	moveq	r0, #0
   28214:	bd10      	pop	{r4, pc}

00028216 <read_cb>:
{
   28216:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   28218:	2300      	movs	r3, #0
{
   2821a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   2821c:	6816      	ldr	r6, [r2, #0]
{
   2821e:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   28220:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28222:	4629      	mov	r1, r5
	data->err = 0x00;
   28224:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28226:	2295      	movs	r2, #149	; 0x95
   28228:	f000 fc04 	bl	28a34 <bt_gatt_check_perm>
   2822c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2822e:	b980      	cbnz	r0, 28252 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28230:	e9cd 0000 	strd	r0, r0, [sp]
   28234:	4629      	mov	r1, r5
   28236:	4630      	mov	r0, r6
   28238:	88a3      	ldrh	r3, [r4, #4]
   2823a:	68a2      	ldr	r2, [r4, #8]
   2823c:	f7ff ff34 	bl	280a8 <att_chan_read>
	if (ret < 0) {
   28240:	2800      	cmp	r0, #0
   28242:	da09      	bge.n	28258 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   28244:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   28248:	bf32      	itee	cc
   2824a:	200e      	movcc	r0, #14
		return -err;
   2824c:	4240      	negcs	r0, r0
   2824e:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   28250:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   28252:	2000      	movs	r0, #0
}
   28254:	b002      	add	sp, #8
   28256:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   28258:	2001      	movs	r0, #1
   2825a:	e7fb      	b.n	28254 <read_cb+0x3e>

0002825c <read_vl_cb>:
{
   2825c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   28260:	2300      	movs	r3, #0
{
   28262:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   28264:	f8d2 8000 	ldr.w	r8, [r2]
{
   28268:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2826a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2826e:	4631      	mov	r1, r6
	data->err = 0x00;
   28270:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28272:	2295      	movs	r2, #149	; 0x95
   28274:	f000 fbde 	bl	28a34 <bt_gatt_check_perm>
   28278:	4605      	mov	r5, r0
   2827a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2827c:	b9e0      	cbnz	r0, 282b8 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2827e:	68a0      	ldr	r0, [r4, #8]
   28280:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   28284:	8a02      	ldrh	r2, [r0, #16]
   28286:	1a9b      	subs	r3, r3, r2
   28288:	2b01      	cmp	r3, #1
   2828a:	dd15      	ble.n	282b8 <read_vl_cb+0x5c>
   2828c:	2102      	movs	r1, #2
   2828e:	300c      	adds	r0, #12
   28290:	f7f2 f8ee 	bl	1a470 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28294:	e9cd 5500 	strd	r5, r5, [sp]
   28298:	4607      	mov	r7, r0
   2829a:	88a3      	ldrh	r3, [r4, #4]
   2829c:	4631      	mov	r1, r6
   2829e:	4640      	mov	r0, r8
   282a0:	68a2      	ldr	r2, [r4, #8]
   282a2:	f7ff ff01 	bl	280a8 <att_chan_read>
	if (read < 0) {
   282a6:	1e03      	subs	r3, r0, #0
   282a8:	da0a      	bge.n	282c0 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   282aa:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   282ae:	bf32      	itee	cc
   282b0:	230e      	movcc	r3, #14
		return -err;
   282b2:	425b      	negcs	r3, r3
   282b4:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   282b6:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   282b8:	2000      	movs	r0, #0
}
   282ba:	b002      	add	sp, #8
   282bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   282c0:	2001      	movs	r0, #1
	rsp->len = read;
   282c2:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   282c4:	e7f9      	b.n	282ba <read_vl_cb+0x5e>

000282c6 <bt_att_sent>:
{
   282c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   282c8:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   282ca:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   282ce:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   282d0:	f100 0394 	add.w	r3, r0, #148	; 0x94
   282d4:	e8d3 1fef 	ldaex	r1, [r3]
   282d8:	f021 0110 	bic.w	r1, r1, #16
   282dc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   282e0:	2a00      	cmp	r2, #0
   282e2:	d1f7      	bne.n	282d4 <bt_att_sent+0xe>
	if (!att) {
   282e4:	b30c      	cbz	r4, 2832a <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   282e6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   282ea:	b98b      	cbnz	r3, 28310 <bt_att_sent+0x4a>
   282ec:	6863      	ldr	r3, [r4, #4]
   282ee:	b17b      	cbz	r3, 28310 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   282f0:	1d20      	adds	r0, r4, #4
   282f2:	f7ff fd90 	bl	27e16 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   282f6:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   282f8:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   282fa:	4638      	mov	r0, r7
   282fc:	f7ff fe93 	bl	28026 <chan_req_send>
   28300:	2800      	cmp	r0, #0
   28302:	da12      	bge.n	2832a <bt_att_sent+0x64>
	return list->head;
   28304:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   28306:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   28308:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2830a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2830c:	b903      	cbnz	r3, 28310 <bt_att_sent+0x4a>
	list->tail = node;
   2830e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   28310:	4638      	mov	r0, r7
   28312:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   28316:	f7ff fea0 	bl	2805a <process_queue>
	if (!err) {
   2831a:	b130      	cbz	r0, 2832a <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   2831c:	4638      	mov	r0, r7
   2831e:	f104 010c 	add.w	r1, r4, #12
}
   28322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   28326:	f7ff be98 	b.w	2805a <process_queue>
}
   2832a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002832c <att_req_send_process>:
{
   2832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   28330:	6a84      	ldr	r4, [r0, #40]	; 0x28
   28332:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28334:	2c00      	cmp	r4, #0
   28336:	d03b      	beq.n	283b0 <att_req_send_process+0x84>
	return node->next;
   28338:	f854 69f0 	ldr.w	r6, [r4], #-240
   2833c:	b106      	cbz	r6, 28340 <att_req_send_process+0x14>
   2833e:	3ef0      	subs	r6, #240	; 0xf0
{
   28340:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   28342:	f108 0704 	add.w	r7, r8, #4
{
   28346:	461d      	mov	r5, r3
   28348:	e013      	b.n	28372 <att_req_send_process+0x46>
		if (!req && prev &&
   2834a:	b1c3      	cbz	r3, 2837e <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2834c:	2103      	movs	r1, #3
   2834e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   28352:	f7ff fd84 	bl	27e5e <atomic_test_bit>
   28356:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   28358:	f103 0098 	add.w	r0, r3, #152	; 0x98
   2835c:	f7ff fd7f 	bl	27e5e <atomic_test_bit>
		if (!req && prev &&
   28360:	4282      	cmp	r2, r0
   28362:	d10c      	bne.n	2837e <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28364:	b326      	cbz	r6, 283b0 <att_req_send_process+0x84>
   28366:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   2836a:	b102      	cbz	r2, 2836e <att_req_send_process+0x42>
   2836c:	3af0      	subs	r2, #240	; 0xf0
{
   2836e:	4634      	mov	r4, r6
   28370:	4616      	mov	r6, r2
		if (chan->req) {
   28372:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   28376:	2a00      	cmp	r2, #0
   28378:	d1f4      	bne.n	28364 <att_req_send_process+0x38>
		if (!req && prev &&
   2837a:	2d00      	cmp	r5, #0
   2837c:	d0e5      	beq.n	2834a <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2837e:	4638      	mov	r0, r7
   28380:	f7ff fd49 	bl	27e16 <sys_slist_get>
	if (node) {
   28384:	4605      	mov	r5, r0
   28386:	b908      	cbnz	r0, 2838c <att_req_send_process+0x60>
   28388:	4623      	mov	r3, r4
   2838a:	e7eb      	b.n	28364 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2838c:	4601      	mov	r1, r0
   2838e:	4620      	mov	r0, r4
   28390:	f7ed fe28 	bl	15fe4 <bt_att_chan_req_send>
   28394:	2800      	cmp	r0, #0
   28396:	da0b      	bge.n	283b0 <att_req_send_process+0x84>
	return list->head;
   28398:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2839c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2839e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   283a2:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   283a6:	2b00      	cmp	r3, #0
   283a8:	d1ee      	bne.n	28388 <att_req_send_process+0x5c>
	list->tail = node;
   283aa:	f8c8 5008 	str.w	r5, [r8, #8]
}
   283ae:	e7eb      	b.n	28388 <att_req_send_process+0x5c>
}
   283b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000283b4 <bt_att_status>:
{
   283b4:	b538      	push	{r3, r4, r5, lr}
   283b6:	4605      	mov	r5, r0
   283b8:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   283ba:	2100      	movs	r1, #0
   283bc:	f7ff fd4f 	bl	27e5e <atomic_test_bit>
   283c0:	b1c0      	cbz	r0, 283f4 <bt_att_status+0x40>
	if (!chan->att) {
   283c2:	f855 0c04 	ldr.w	r0, [r5, #-4]
   283c6:	b1a8      	cbz	r0, 283f4 <bt_att_status+0x40>
	if (chan->req) {
   283c8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   283cc:	b993      	cbnz	r3, 283f4 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   283ce:	3004      	adds	r0, #4
   283d0:	f7ff fd21 	bl	27e16 <sys_slist_get>
	if (!node) {
   283d4:	4604      	mov	r4, r0
   283d6:	b168      	cbz	r0, 283f4 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   283d8:	4601      	mov	r1, r0
   283da:	1f28      	subs	r0, r5, #4
   283dc:	f7ed fe02 	bl	15fe4 <bt_att_chan_req_send>
   283e0:	2800      	cmp	r0, #0
   283e2:	da07      	bge.n	283f4 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   283e4:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   283e8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   283ea:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   283ec:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   283ee:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   283f0:	b902      	cbnz	r2, 283f4 <bt_att_status+0x40>
	list->tail = node;
   283f2:	609c      	str	r4, [r3, #8]
}
   283f4:	bd38      	pop	{r3, r4, r5, pc}

000283f6 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   283f6:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   283f8:	6883      	ldr	r3, [r0, #8]
   283fa:	699b      	ldr	r3, [r3, #24]
   283fc:	b10b      	cbz	r3, 28402 <att_sent+0xc>
		chan->ops->sent(chan);
   283fe:	3004      	adds	r0, #4
   28400:	4718      	bx	r3
}
   28402:	4770      	bx	lr

00028404 <att_tx_complete>:
{
   28404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28408:	4606      	mov	r6, r0
   2840a:	460d      	mov	r5, r1
	if (!err) {
   2840c:	4614      	mov	r4, r2
   2840e:	b122      	cbz	r2, 2841a <att_tx_complete+0x16>
}
   28410:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   28414:	4608      	mov	r0, r1
   28416:	f7ed bca5 	b.w	15d64 <tx_meta_data_free>
		att_sent(conn, user_data);
   2841a:	f7ff ffec 	bl	283f6 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2841e:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   28420:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   28422:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   28426:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2842a:	f7ed fc9b 	bl	15d64 <tx_meta_data_free>
	if (!err && func) {
   2842e:	b92f      	cbnz	r7, 2843c <att_tx_complete+0x38>
}
   28430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   28434:	4649      	mov	r1, r9
   28436:	4630      	mov	r0, r6
   28438:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2843a:	3401      	adds	r4, #1
   2843c:	b2a3      	uxth	r3, r4
   2843e:	4543      	cmp	r3, r8
   28440:	d3f8      	bcc.n	28434 <att_tx_complete+0x30>
   28442:	e7f5      	b.n	28430 <att_tx_complete+0x2c>

00028444 <att_req_sent>:
{
   28444:	b510      	push	{r4, lr}
   28446:	460c      	mov	r4, r1
	if (!err) {
   28448:	b90a      	cbnz	r2, 2844e <att_req_sent+0xa>
		att_sent(conn, user_data);
   2844a:	f7ff ffd4 	bl	283f6 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2844e:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   28450:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   28454:	b12b      	cbz	r3, 28462 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   28456:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2845a:	2300      	movs	r3, #0
   2845c:	30c0      	adds	r0, #192	; 0xc0
   2845e:	f7f9 f9e3 	bl	21828 <k_work_reschedule>
	tx_meta_data_free(user_data);
   28462:	4620      	mov	r0, r4
}
   28464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   28468:	f7ed bc7c 	b.w	15d64 <tx_meta_data_free>

0002846c <att_cfm_sent>:
{
   2846c:	b510      	push	{r4, lr}
   2846e:	460c      	mov	r4, r1
	if (!err) {
   28470:	b90a      	cbnz	r2, 28476 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   28472:	f7ff ffc0 	bl	283f6 <att_sent>
   28476:	6823      	ldr	r3, [r4, #0]
   28478:	3398      	adds	r3, #152	; 0x98
   2847a:	e8d3 1fef 	ldaex	r1, [r3]
   2847e:	f021 0102 	bic.w	r1, r1, #2
   28482:	e8c3 1fe2 	stlex	r2, r1, [r3]
   28486:	2a00      	cmp	r2, #0
   28488:	d1f7      	bne.n	2847a <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2848a:	4620      	mov	r0, r4
}
   2848c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   28490:	f7ed bc68 	b.w	15d64 <tx_meta_data_free>

00028494 <att_rsp_sent>:
{
   28494:	b510      	push	{r4, lr}
   28496:	460c      	mov	r4, r1
	if (!err) {
   28498:	b90a      	cbnz	r2, 2849e <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2849a:	f7ff ffac 	bl	283f6 <att_sent>
   2849e:	6823      	ldr	r3, [r4, #0]
   284a0:	3398      	adds	r3, #152	; 0x98
   284a2:	e8d3 1fef 	ldaex	r1, [r3]
   284a6:	f021 0101 	bic.w	r1, r1, #1
   284aa:	e8c3 1fe2 	stlex	r2, r1, [r3]
   284ae:	2a00      	cmp	r2, #0
   284b0:	d1f7      	bne.n	284a2 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   284b2:	4620      	mov	r0, r4
}
   284b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   284b8:	f7ed bc54 	b.w	15d64 <tx_meta_data_free>

000284bc <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   284bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   284c0:	4688      	mov	r8, r1
   284c2:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   284c4:	2101      	movs	r1, #1
   284c6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   284c8:	4605      	mov	r5, r0
   284ca:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   284cc:	f7ed ff4c 	bl	16368 <bt_att_chan_create_pdu>
	if (!buf) {
   284d0:	4604      	mov	r4, r0
   284d2:	b170      	cbz	r0, 284f2 <send_err_rsp.part.0+0x36>
   284d4:	2104      	movs	r1, #4
   284d6:	300c      	adds	r0, #12
   284d8:	f7f1 ffca 	bl	1a470 <net_buf_simple_add>
	rsp->request = req;
   284dc:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   284e0:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   284e4:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   284e6:	4621      	mov	r1, r4
   284e8:	4628      	mov	r0, r5
}
   284ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   284ee:	f7ff bdcd 	b.w	2808c <bt_att_chan_send_rsp>
}
   284f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000284f6 <att_write_req>:
{
   284f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   284f8:	460c      	mov	r4, r1
   284fa:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   284fc:	f101 000c 	add.w	r0, r1, #12
   28500:	f000 fe87 	bl	29212 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   28504:	8a22      	ldrh	r2, [r4, #16]
   28506:	4603      	mov	r3, r0
   28508:	9201      	str	r2, [sp, #4]
   2850a:	68e2      	ldr	r2, [r4, #12]
   2850c:	2112      	movs	r1, #18
   2850e:	9200      	str	r2, [sp, #0]
   28510:	4628      	mov	r0, r5
   28512:	2213      	movs	r2, #19
   28514:	f7ee f820 	bl	16558 <att_write_rsp.constprop.0>
}
   28518:	b003      	add	sp, #12
   2851a:	bd30      	pop	{r4, r5, pc}

0002851c <att_write_cmd>:
{
   2851c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2851e:	460c      	mov	r4, r1
   28520:	4605      	mov	r5, r0
   28522:	f101 000c 	add.w	r0, r1, #12
   28526:	f000 fe74 	bl	29212 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2852a:	8a22      	ldrh	r2, [r4, #16]
   2852c:	4603      	mov	r3, r0
   2852e:	9201      	str	r2, [sp, #4]
   28530:	68e2      	ldr	r2, [r4, #12]
   28532:	4628      	mov	r0, r5
   28534:	9200      	str	r2, [sp, #0]
   28536:	2200      	movs	r2, #0
   28538:	4611      	mov	r1, r2
   2853a:	f7ee f80d 	bl	16558 <att_write_rsp.constprop.0>
}
   2853e:	b003      	add	sp, #12
   28540:	bd30      	pop	{r4, r5, pc}

00028542 <att_read_blob_req>:
{
   28542:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   28544:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   28546:	210c      	movs	r1, #12
   28548:	8813      	ldrh	r3, [r2, #0]
   2854a:	8852      	ldrh	r2, [r2, #2]
   2854c:	9200      	str	r2, [sp, #0]
   2854e:	220d      	movs	r2, #13
   28550:	f7ee f9c4 	bl	168dc <att_read_rsp>
}
   28554:	b003      	add	sp, #12
   28556:	f85d fb04 	ldr.w	pc, [sp], #4

0002855a <att_read_req>:
{
   2855a:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2855c:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2855e:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   28560:	210a      	movs	r1, #10
   28562:	881b      	ldrh	r3, [r3, #0]
   28564:	9200      	str	r2, [sp, #0]
   28566:	220b      	movs	r2, #11
   28568:	f7ee f9b8 	bl	168dc <att_read_rsp>
}
   2856c:	b003      	add	sp, #12
   2856e:	f85d fb04 	ldr.w	pc, [sp], #4

00028572 <att_mtu_req>:
{
   28572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28574:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   28576:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2857a:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2857c:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2857e:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   28580:	f7ff fc6d 	bl	27e5e <atomic_test_bit>
   28584:	4604      	mov	r4, r0
   28586:	b9f0      	cbnz	r0, 285c6 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   28588:	68db      	ldr	r3, [r3, #12]
   2858a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2858c:	2e16      	cmp	r6, #22
   2858e:	d91c      	bls.n	285ca <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   28590:	4638      	mov	r0, r7
   28592:	2202      	movs	r2, #2
   28594:	f7ee f844 	bl	16620 <bt_att_create_pdu>
	if (!pdu) {
   28598:	4607      	mov	r7, r0
   2859a:	b1c0      	cbz	r0, 285ce <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2859c:	2102      	movs	r1, #2
   2859e:	300c      	adds	r0, #12
   285a0:	f7f1 ff66 	bl	1a470 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   285a4:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   285a6:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   285a8:	7003      	strb	r3, [r0, #0]
   285aa:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   285ac:	4628      	mov	r0, r5
   285ae:	f7ff fd6d 	bl	2808c <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   285b2:	2e41      	cmp	r6, #65	; 0x41
   285b4:	bf28      	it	cs
   285b6:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   285b8:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   285ba:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   285bc:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   285be:	f7ff fc90 	bl	27ee2 <att_chan_mtu_updated>
	return 0;
   285c2:	4620      	mov	r0, r4
}
   285c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   285c6:	2006      	movs	r0, #6
   285c8:	e7fc      	b.n	285c4 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   285ca:	2004      	movs	r0, #4
   285cc:	e7fa      	b.n	285c4 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   285ce:	200e      	movs	r0, #14
   285d0:	e7f8      	b.n	285c4 <att_mtu_req+0x52>

000285d2 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   285d2:	8a0a      	ldrh	r2, [r1, #16]
   285d4:	2300      	movs	r3, #0
   285d6:	68c9      	ldr	r1, [r1, #12]
   285d8:	f7ee bb2a 	b.w	16c30 <att_handle_rsp>

000285dc <bt_att_encrypt_change>:
{
   285dc:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   285de:	4606      	mov	r6, r0
	if (!att_chan->att) {
   285e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   285e4:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   285e6:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   285ea:	2b00      	cmp	r3, #0
   285ec:	d038      	beq.n	28660 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   285ee:	b141      	cbz	r1, 28602 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   285f0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   285f4:	2b00      	cmp	r3, #0
   285f6:	d033      	beq.n	28660 <bt_att_encrypt_change+0x84>
   285f8:	7c1b      	ldrb	r3, [r3, #16]
   285fa:	07da      	lsls	r2, r3, #31
   285fc:	d530      	bpl.n	28660 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   285fe:	2305      	movs	r3, #5
   28600:	e021      	b.n	28646 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   28602:	4628      	mov	r0, r5
   28604:	f7ef fcd4 	bl	17fb0 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   28608:	7a6b      	ldrb	r3, [r5, #9]
   2860a:	2b01      	cmp	r3, #1
   2860c:	d028      	beq.n	28660 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2860e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   28612:	b32d      	cbz	r5, 28660 <bt_att_encrypt_change+0x84>
   28614:	7c2b      	ldrb	r3, [r5, #16]
   28616:	07db      	lsls	r3, r3, #31
   28618:	d522      	bpl.n	28660 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2861a:	68eb      	ldr	r3, [r5, #12]
   2861c:	2b00      	cmp	r3, #0
   2861e:	d0ee      	beq.n	285fe <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   28620:	4630      	mov	r0, r6
   28622:	696a      	ldr	r2, [r5, #20]
   28624:	7c69      	ldrb	r1, [r5, #17]
   28626:	f7ed fe9f 	bl	16368 <bt_att_chan_create_pdu>
	if (!buf) {
   2862a:	4604      	mov	r4, r0
   2862c:	b150      	cbz	r0, 28644 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   2862e:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   28632:	68eb      	ldr	r3, [r5, #12]
   28634:	4798      	blx	r3
   28636:	b168      	cbz	r0, 28654 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   28638:	69a0      	ldr	r0, [r4, #24]
   2863a:	f7ed fb93 	bl	15d64 <tx_meta_data_free>
		net_buf_unref(buf);
   2863e:	4620      	mov	r0, r4
   28640:	f7f1 fdf4 	bl	1a22c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   28644:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   28646:	2200      	movs	r2, #0
   28648:	4630      	mov	r0, r6
}
   2864a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2864e:	4611      	mov	r1, r2
   28650:	f7ee baee 	b.w	16c30 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   28654:	4621      	mov	r1, r4
   28656:	4630      	mov	r0, r6
   28658:	f7ed fc50 	bl	15efc <chan_send>
   2865c:	2800      	cmp	r0, #0
   2865e:	d1eb      	bne.n	28638 <bt_att_encrypt_change+0x5c>
}
   28660:	bd70      	pop	{r4, r5, r6, pc}

00028662 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   28662:	2001      	movs	r0, #1
   28664:	4770      	bx	lr

00028666 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   28666:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   28668:	f7ed fcfe 	bl	16068 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2866c:	b178      	cbz	r0, 2868e <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   2866e:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28670:	b16b      	cbz	r3, 2868e <bt_att_clear_out_of_sync_sent+0x28>
   28672:	3bf0      	subs	r3, #240	; 0xf0
   28674:	f103 0298 	add.w	r2, r3, #152	; 0x98
   28678:	e8d2 0fef 	ldaex	r0, [r2]
   2867c:	f020 0020 	bic.w	r0, r0, #32
   28680:	e8c2 0fe1 	stlex	r1, r0, [r2]
   28684:	2900      	cmp	r1, #0
   28686:	d1f7      	bne.n	28678 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   28688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2868c:	e7f0      	b.n	28670 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2868e:	bd08      	pop	{r3, pc}

00028690 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   28690:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   28692:	2104      	movs	r1, #4
   28694:	f7ff fbb5 	bl	27e02 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   28698:	b128      	cbz	r0, 286a6 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2869a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2869e:	2105      	movs	r1, #5
   286a0:	3094      	adds	r0, #148	; 0x94
   286a2:	f7ff bbdc 	b.w	27e5e <atomic_test_bit>
}
   286a6:	bd08      	pop	{r3, pc}

000286a8 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   286a8:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   286aa:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   286ae:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   286b0:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   286b2:	8082      	strh	r2, [r0, #4]
}
   286b4:	4770      	bx	lr

000286b6 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   286b6:	6010      	str	r0, [r2, #0]
}
   286b8:	2000      	movs	r0, #0
   286ba:	4770      	bx	lr

000286bc <gatt_ccc_changed>:
{
   286bc:	460b      	mov	r3, r1
   286be:	8909      	ldrh	r1, [r1, #8]
   286c0:	8a5a      	ldrh	r2, [r3, #18]
   286c2:	4291      	cmp	r1, r2
   286c4:	bf38      	it	cc
   286c6:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   286c8:	8a9a      	ldrh	r2, [r3, #20]
   286ca:	428a      	cmp	r2, r1
   286cc:	d003      	beq.n	286d6 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   286ce:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   286d0:	699b      	ldr	r3, [r3, #24]
   286d2:	b103      	cbz	r3, 286d6 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   286d4:	4718      	bx	r3
}
   286d6:	4770      	bx	lr

000286d8 <gatt_indicate_rsp>:
{
   286d8:	b510      	push	{r4, lr}
   286da:	9c02      	ldr	r4, [sp, #8]
   286dc:	460a      	mov	r2, r1
	if (params->func) {
   286de:	68a3      	ldr	r3, [r4, #8]
   286e0:	b10b      	cbz	r3, 286e6 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   286e2:	4621      	mov	r1, r4
   286e4:	4798      	blx	r3
	params->_ref--;
   286e6:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   286e8:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   286ea:	3b01      	subs	r3, #1
   286ec:	b2db      	uxtb	r3, r3
   286ee:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   286f0:	b122      	cbz	r2, 286fc <gatt_indicate_rsp+0x24>
   286f2:	b91b      	cbnz	r3, 286fc <gatt_indicate_rsp+0x24>
		params->destroy(params);
   286f4:	4620      	mov	r0, r4
}
   286f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   286fa:	4710      	bx	r2
}
   286fc:	bd10      	pop	{r4, pc}

000286fe <match_uuid>:
	data->attr = attr;
   286fe:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   28700:	8091      	strh	r1, [r2, #4]
}
   28702:	2000      	movs	r0, #0
   28704:	4770      	bx	lr

00028706 <gen_hash_m>:
{
   28706:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   28708:	6807      	ldr	r7, [r0, #0]
{
   2870a:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2870c:	783d      	ldrb	r5, [r7, #0]
{
   2870e:	4614      	mov	r4, r2
   28710:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   28712:	b9dd      	cbnz	r5, 2874c <gen_hash_m+0x46>
	switch (u16->val) {
   28714:	887b      	ldrh	r3, [r7, #2]
   28716:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2871a:	d004      	beq.n	28726 <gen_hash_m+0x20>
   2871c:	d810      	bhi.n	28740 <gen_hash_m+0x3a>
   2871e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   28722:	2b03      	cmp	r3, #3
   28724:	d812      	bhi.n	2874c <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   28726:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2872a:	2202      	movs	r2, #2
   2872c:	4620      	mov	r0, r4
   2872e:	f10d 010a 	add.w	r1, sp, #10
   28732:	f7fe fb02 	bl	26d3a <tc_cmac_update>
   28736:	b968      	cbnz	r0, 28754 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   28738:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2873c:	65a2      	str	r2, [r4, #88]	; 0x58
   2873e:	e006      	b.n	2874e <gen_hash_m+0x48>
	switch (u16->val) {
   28740:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   28744:	33ff      	adds	r3, #255	; 0xff
   28746:	b29b      	uxth	r3, r3
   28748:	2b04      	cmp	r3, #4
   2874a:	d91e      	bls.n	2878a <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2874c:	2501      	movs	r5, #1
}
   2874e:	4628      	mov	r0, r5
   28750:	b009      	add	sp, #36	; 0x24
   28752:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   28754:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28756:	2202      	movs	r2, #2
   28758:	4620      	mov	r0, r4
   2875a:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2875e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28762:	f7fe faea 	bl	26d3a <tc_cmac_update>
   28766:	2800      	cmp	r0, #0
   28768:	d0e6      	beq.n	28738 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2876a:	2000      	movs	r0, #0
   2876c:	9000      	str	r0, [sp, #0]
   2876e:	aa03      	add	r2, sp, #12
   28770:	2313      	movs	r3, #19
   28772:	4631      	mov	r1, r6
   28774:	6877      	ldr	r7, [r6, #4]
   28776:	47b8      	blx	r7
		if (len < 0) {
   28778:	1e02      	subs	r2, r0, #0
   2877a:	dbdf      	blt.n	2873c <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2877c:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2877e:	4620      	mov	r0, r4
   28780:	f7fe fadb 	bl	26d3a <tc_cmac_update>
   28784:	2800      	cmp	r0, #0
   28786:	d1e1      	bne.n	2874c <gen_hash_m+0x46>
   28788:	e7d6      	b.n	28738 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2878a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2878e:	2202      	movs	r2, #2
   28790:	4620      	mov	r0, r4
   28792:	f10d 010a 	add.w	r1, sp, #10
   28796:	f7fe fad0 	bl	26d3a <tc_cmac_update>
   2879a:	2800      	cmp	r0, #0
   2879c:	d0cc      	beq.n	28738 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2879e:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   287a0:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   287a2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   287a6:	f10d 010a 	add.w	r1, sp, #10
   287aa:	e7e8      	b.n	2877e <gen_hash_m+0x78>

000287ac <bt_addr_le_eq>:
   287ac:	2207      	movs	r2, #7
{
   287ae:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   287b0:	f002 faae 	bl	2ad10 <memcmp>
}
   287b4:	fab0 f080 	clz	r0, r0
   287b8:	0940      	lsrs	r0, r0, #5
   287ba:	bd08      	pop	{r3, pc}

000287bc <bt_addr_le_copy>:
   287bc:	680b      	ldr	r3, [r1, #0]
   287be:	6003      	str	r3, [r0, #0]
   287c0:	888b      	ldrh	r3, [r1, #4]
   287c2:	8083      	strh	r3, [r0, #4]
   287c4:	798b      	ldrb	r3, [r1, #6]
   287c6:	7183      	strb	r3, [r0, #6]
}
   287c8:	4770      	bx	lr

000287ca <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   287ca:	2300      	movs	r3, #0
   287cc:	6003      	str	r3, [r0, #0]
   287ce:	6043      	str	r3, [r0, #4]
   287d0:	6083      	str	r3, [r0, #8]
}
   287d2:	4770      	bx	lr

000287d4 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   287d4:	b538      	push	{r3, r4, r5, lr}
   287d6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   287da:	4615      	mov	r5, r2
	if (offset > value_len) {
   287dc:	4294      	cmp	r4, r2
   287de:	d30a      	bcc.n	287f6 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   287e0:	1aa4      	subs	r4, r4, r2
   287e2:	428c      	cmp	r4, r1
   287e4:	bfa8      	it	ge
   287e6:	460c      	movge	r4, r1
   287e8:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   287ea:	4622      	mov	r2, r4
   287ec:	1959      	adds	r1, r3, r5
   287ee:	f002 fa9f 	bl	2ad30 <memcpy>
}
   287f2:	4620      	mov	r0, r4
   287f4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   287f6:	f06f 0406 	mvn.w	r4, #6
   287fa:	e7fa      	b.n	287f2 <bt_gatt_attr_read.constprop.0+0x1e>

000287fc <bt_gatt_attr_read_ccc>:
{
   287fc:	b530      	push	{r4, r5, lr}
   287fe:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   28800:	68c9      	ldr	r1, [r1, #12]
{
   28802:	4614      	mov	r4, r2
   28804:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   28806:	f7ee fbb9 	bl	16f7c <find_ccc_cfg>
	if (cfg) {
   2880a:	b100      	cbz	r0, 2880e <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2880c:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2880e:	2302      	movs	r3, #2
   28810:	f8ad 000e 	strh.w	r0, [sp, #14]
   28814:	9300      	str	r3, [sp, #0]
   28816:	4629      	mov	r1, r5
   28818:	4620      	mov	r0, r4
   2881a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2881e:	f10d 030e 	add.w	r3, sp, #14
   28822:	f7ff ffd7 	bl	287d4 <bt_gatt_attr_read.constprop.0>
}
   28826:	b005      	add	sp, #20
   28828:	bd30      	pop	{r4, r5, pc}

0002882a <bt_gatt_attr_read_service>:
{
   2882a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2882c:	460c      	mov	r4, r1
   2882e:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   28830:	68e3      	ldr	r3, [r4, #12]
{
   28832:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   28834:	781c      	ldrb	r4, [r3, #0]
{
   28836:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2883a:	b13c      	cbz	r4, 2884c <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2883c:	2410      	movs	r4, #16
   2883e:	3301      	adds	r3, #1
   28840:	9406      	str	r4, [sp, #24]
}
   28842:	b004      	add	sp, #16
   28844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   28848:	f7ff bfc4 	b.w	287d4 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2884c:	885b      	ldrh	r3, [r3, #2]
   2884e:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   28852:	2302      	movs	r3, #2
   28854:	9300      	str	r3, [sp, #0]
   28856:	f10d 030e 	add.w	r3, sp, #14
   2885a:	f7ff ffbb 	bl	287d4 <bt_gatt_attr_read.constprop.0>
}
   2885e:	b004      	add	sp, #16
   28860:	bd10      	pop	{r4, pc}

00028862 <cf_read>:
{
   28862:	b530      	push	{r4, r5, lr}
   28864:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   28866:	2300      	movs	r3, #0
{
   28868:	b085      	sub	sp, #20
   2886a:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2886c:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   28870:	f7ee fb34 	bl	16edc <find_cf_cfg>
	if (cfg) {
   28874:	b110      	cbz	r0, 2887c <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   28876:	7a03      	ldrb	r3, [r0, #8]
   28878:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2887c:	2301      	movs	r3, #1
   2887e:	4629      	mov	r1, r5
   28880:	9300      	str	r3, [sp, #0]
   28882:	4620      	mov	r0, r4
   28884:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   28888:	ab03      	add	r3, sp, #12
   2888a:	f7ff ffa3 	bl	287d4 <bt_gatt_attr_read.constprop.0>
}
   2888e:	b005      	add	sp, #20
   28890:	bd30      	pop	{r4, r5, pc}

00028892 <read_name>:
{
   28892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28896:	4614      	mov	r4, r2
   28898:	461d      	mov	r5, r3
   2889a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2889e:	f7ea ff8f 	bl	137c0 <bt_get_name>
   288a2:	4606      	mov	r6, r0
				 strlen(name));
   288a4:	f7e0 fdb1 	bl	940a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   288a8:	b280      	uxth	r0, r0
   288aa:	9006      	str	r0, [sp, #24]
   288ac:	4633      	mov	r3, r6
   288ae:	463a      	mov	r2, r7
   288b0:	4629      	mov	r1, r5
   288b2:	4620      	mov	r0, r4
}
   288b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   288b8:	f7ff bf8c 	b.w	287d4 <bt_gatt_attr_read.constprop.0>

000288bc <read_appearance>:
{
   288bc:	b530      	push	{r4, r5, lr}
   288be:	b085      	sub	sp, #20
   288c0:	4614      	mov	r4, r2
   288c2:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   288c4:	f7fe fef5 	bl	276b2 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   288c8:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   288ca:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   288ce:	9300      	str	r3, [sp, #0]
   288d0:	4629      	mov	r1, r5
   288d2:	4620      	mov	r0, r4
   288d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   288d8:	f10d 030e 	add.w	r3, sp, #14
   288dc:	f7ff ff7a 	bl	287d4 <bt_gatt_attr_read.constprop.0>
}
   288e0:	b005      	add	sp, #20
   288e2:	bd30      	pop	{r4, r5, pc}

000288e4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   288e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   288e6:	ab0b      	add	r3, sp, #44	; 0x2c
   288e8:	9305      	str	r3, [sp, #20]
   288ea:	9303      	str	r3, [sp, #12]
   288ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   288ee:	9302      	str	r3, [sp, #8]
   288f0:	2300      	movs	r3, #0
   288f2:	4618      	mov	r0, r3
   288f4:	e9cd 3300 	strd	r3, r3, [sp]
   288f8:	f7e6 fc90 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   288fc:	b007      	add	sp, #28
   288fe:	f85d fb04 	ldr.w	pc, [sp], #4

00028902 <sc_clear>:
{
   28902:	b538      	push	{r3, r4, r5, lr}
   28904:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28906:	f100 0590 	add.w	r5, r0, #144	; 0x90
   2890a:	4629      	mov	r1, r5
   2890c:	7a00      	ldrb	r0, [r0, #8]
   2890e:	f7fe fed3 	bl	276b8 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   28912:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   28914:	7a20      	ldrb	r0, [r4, #8]
   28916:	f7ee fb0f 	bl	16f38 <find_sc_cfg>
		if (cfg) {
   2891a:	b118      	cbz	r0, 28924 <sc_clear+0x22>
}
   2891c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   28920:	f7ff bf53 	b.w	287ca <clear_sc_cfg>
}
   28924:	bd38      	pop	{r3, r4, r5, pc}

00028926 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   28926:	2a02      	cmp	r2, #2
{
   28928:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2892a:	d108      	bne.n	2893e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2892c:	2300      	movs	r3, #0
   2892e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   28932:	461a      	mov	r2, r3
   28934:	7a00      	ldrb	r0, [r0, #8]
   28936:	f7ee fbd1 	bl	170dc <sc_save>
}
   2893a:	2002      	movs	r0, #2
   2893c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2893e:	f7ff ffe0 	bl	28902 <sc_clear>
   28942:	e7fa      	b.n	2893a <sc_ccc_cfg_write+0x14>

00028944 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28944:	2301      	movs	r3, #1
   28946:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28948:	e8d0 2fef 	ldaex	r2, [r0]
   2894c:	431a      	orrs	r2, r3
   2894e:	e8c0 2fe1 	stlex	r1, r2, [r0]
   28952:	2900      	cmp	r1, #0
   28954:	d1f8      	bne.n	28948 <atomic_set_bit+0x4>
}
   28956:	4770      	bx	lr

00028958 <sc_restore_rsp>:
{
   28958:	b538      	push	{r3, r4, r5, lr}
   2895a:	4604      	mov	r4, r0
   2895c:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2895e:	f7ff fe80 	bl	28662 <bt_att_fixed_chan_only>
   28962:	b150      	cbz	r0, 2897a <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   28964:	4620      	mov	r0, r4
   28966:	f7ee fab9 	bl	16edc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2896a:	b130      	cbz	r0, 2897a <sc_restore_rsp+0x22>
   2896c:	7a03      	ldrb	r3, [r0, #8]
   2896e:	07db      	lsls	r3, r3, #31
   28970:	d503      	bpl.n	2897a <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28972:	2100      	movs	r1, #0
   28974:	300c      	adds	r0, #12
   28976:	f7ff ffe5 	bl	28944 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2897a:	b935      	cbnz	r5, 2898a <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2897c:	7a20      	ldrb	r0, [r4, #8]
   2897e:	f104 0190 	add.w	r1, r4, #144	; 0x90
   28982:	f7ee fad9 	bl	16f38 <find_sc_cfg>
		if (sc_cfg) {
   28986:	b100      	cbz	r0, 2898a <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   28988:	6085      	str	r5, [r0, #8]
}
   2898a:	bd38      	pop	{r3, r4, r5, pc}

0002898c <bt_gatt_attr_value_handle>:
{
   2898c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2898e:	4604      	mov	r4, r0
   28990:	b910      	cbnz	r0, 28998 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   28992:	2000      	movs	r0, #0
}
   28994:	b002      	add	sp, #8
   28996:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28998:	2300      	movs	r3, #0
   2899a:	f88d 3004 	strb.w	r3, [sp, #4]
   2899e:	f642 0303 	movw	r3, #10243	; 0x2803
   289a2:	6800      	ldr	r0, [r0, #0]
   289a4:	a901      	add	r1, sp, #4
   289a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   289aa:	f7fe fd38 	bl	2741e <bt_uuid_cmp>
   289ae:	2800      	cmp	r0, #0
   289b0:	d1ef      	bne.n	28992 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   289b2:	68e3      	ldr	r3, [r4, #12]
   289b4:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   289b6:	2800      	cmp	r0, #0
   289b8:	d1ec      	bne.n	28994 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   289ba:	4620      	mov	r0, r4
   289bc:	f7ee fcfe 	bl	173bc <bt_gatt_attr_get_handle>
   289c0:	3001      	adds	r0, #1
   289c2:	b280      	uxth	r0, r0
	return handle;
   289c4:	e7e6      	b.n	28994 <bt_gatt_attr_value_handle+0x8>

000289c6 <bt_gatt_attr_read_chrc>:
{
   289c6:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   289c8:	68cc      	ldr	r4, [r1, #12]
{
   289ca:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   289cc:	79a3      	ldrb	r3, [r4, #6]
{
   289ce:	b088      	sub	sp, #32
   289d0:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   289d2:	f88d 300c 	strb.w	r3, [sp, #12]
{
   289d6:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   289d8:	f7ff ffd8 	bl	2898c <bt_gatt_attr_value_handle>
   289dc:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   289e0:	6824      	ldr	r4, [r4, #0]
   289e2:	7823      	ldrb	r3, [r4, #0]
   289e4:	b96b      	cbnz	r3, 28a02 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   289e6:	8863      	ldrh	r3, [r4, #2]
   289e8:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   289ec:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   289ee:	9300      	str	r3, [sp, #0]
   289f0:	4631      	mov	r1, r6
   289f2:	4628      	mov	r0, r5
   289f4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   289f8:	ab03      	add	r3, sp, #12
   289fa:	f7ff feeb 	bl	287d4 <bt_gatt_attr_read.constprop.0>
}
   289fe:	b008      	add	sp, #32
   28a00:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   28a02:	1c63      	adds	r3, r4, #1
   28a04:	f10d 020f 	add.w	r2, sp, #15
   28a08:	3411      	adds	r4, #17
   28a0a:	f853 1b04 	ldr.w	r1, [r3], #4
   28a0e:	42a3      	cmp	r3, r4
   28a10:	f842 1b04 	str.w	r1, [r2], #4
   28a14:	d1f9      	bne.n	28a0a <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   28a16:	2313      	movs	r3, #19
   28a18:	e7e9      	b.n	289ee <bt_gatt_attr_read_chrc+0x28>

00028a1a <bt_gatt_foreach_attr>:
{
   28a1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28a1c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28a20:	2300      	movs	r3, #0
   28a22:	461a      	mov	r2, r3
   28a24:	9300      	str	r3, [sp, #0]
   28a26:	f7ee fd11 	bl	1744c <bt_gatt_foreach_attr_type>
}
   28a2a:	b005      	add	sp, #20
   28a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00028a30 <db_hash_process>:
	db_hash_gen(true);
   28a30:	f7ee bd7c 	b.w	1752c <db_hash_gen.constprop.0>

00028a34 <bt_gatt_check_perm>:
{
   28a34:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   28a36:	07d4      	lsls	r4, r2, #31
{
   28a38:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28a3a:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   28a3c:	d504      	bpl.n	28a48 <bt_gatt_check_perm+0x14>
   28a3e:	f013 0f95 	tst.w	r3, #149	; 0x95
   28a42:	d027      	beq.n	28a94 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28a44:	6848      	ldr	r0, [r1, #4]
   28a46:	b328      	cbz	r0, 28a94 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   28a48:	0790      	lsls	r0, r2, #30
   28a4a:	d504      	bpl.n	28a56 <bt_gatt_check_perm+0x22>
   28a4c:	f413 7f95 	tst.w	r3, #298	; 0x12a
   28a50:	d022      	beq.n	28a98 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28a52:	6889      	ldr	r1, [r1, #8]
   28a54:	b301      	cbz	r1, 28a98 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   28a56:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   28a5a:	f414 7fc0 	tst.w	r4, #384	; 0x180
   28a5e:	d007      	beq.n	28a70 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   28a60:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   28a64:	b90b      	cbnz	r3, 28a6a <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   28a66:	2005      	movs	r0, #5
}
   28a68:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   28a6a:	7b5b      	ldrb	r3, [r3, #13]
   28a6c:	06db      	lsls	r3, r3, #27
   28a6e:	d5fa      	bpl.n	28a66 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   28a70:	f014 0f30 	tst.w	r4, #48	; 0x30
   28a74:	d108      	bne.n	28a88 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   28a76:	f014 000c 	ands.w	r0, r4, #12
   28a7a:	d0f5      	beq.n	28a68 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   28a7c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   28a7e:	2b00      	cmp	r3, #0
   28a80:	bf14      	ite	ne
   28a82:	2000      	movne	r0, #0
   28a84:	200f      	moveq	r0, #15
   28a86:	e7ef      	b.n	28a68 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   28a88:	4628      	mov	r0, r5
   28a8a:	f7ff f8ee 	bl	27c6a <bt_conn_get_security>
   28a8e:	2802      	cmp	r0, #2
   28a90:	d8f1      	bhi.n	28a76 <bt_gatt_check_perm+0x42>
   28a92:	e7e8      	b.n	28a66 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28a94:	2002      	movs	r0, #2
   28a96:	e7e7      	b.n	28a68 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   28a98:	2003      	movs	r0, #3
   28a9a:	e7e5      	b.n	28a68 <bt_gatt_check_perm+0x34>

00028a9c <bt_gatt_change_aware>:
{
   28a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a9e:	4606      	mov	r6, r0
   28aa0:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   28aa2:	f7ee fa1b 	bl	16edc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28aa6:	b1e0      	cbz	r0, 28ae2 <bt_gatt_change_aware+0x46>
   28aa8:	7a03      	ldrb	r3, [r0, #8]
   28aaa:	07db      	lsls	r3, r3, #31
   28aac:	d519      	bpl.n	28ae2 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   28aae:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28ab2:	e8d4 5faf 	lda	r5, [r4]
   28ab6:	f015 0501 	ands.w	r5, r5, #1
   28aba:	d112      	bne.n	28ae2 <bt_gatt_change_aware+0x46>
	if (!req) {
   28abc:	b197      	cbz	r7, 28ae4 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28abe:	e8d4 1fef 	ldaex	r1, [r4]
   28ac2:	f021 0302 	bic.w	r3, r1, #2
   28ac6:	e8c4 3fe2 	stlex	r2, r3, [r4]
   28aca:	2a00      	cmp	r2, #0
   28acc:	d1f7      	bne.n	28abe <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   28ace:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   28ad2:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   28ad4:	d008      	beq.n	28ae8 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   28ad6:	f7ff fdc6 	bl	28666 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28ada:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28adc:	4620      	mov	r0, r4
   28ade:	f7ff ff31 	bl	28944 <atomic_set_bit>
		return true;
   28ae2:	2501      	movs	r5, #1
}
   28ae4:	4628      	mov	r0, r5
   28ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   28ae8:	f7ff fdbb 	bl	28662 <bt_att_fixed_chan_only>
   28aec:	2800      	cmp	r0, #0
   28aee:	d0f9      	beq.n	28ae4 <bt_gatt_change_aware+0x48>
   28af0:	4630      	mov	r0, r6
   28af2:	f7ff fdcd 	bl	28690 <bt_att_out_of_sync_sent_on_fixed>
   28af6:	2800      	cmp	r0, #0
   28af8:	d0f4      	beq.n	28ae4 <bt_gatt_change_aware+0x48>
   28afa:	e8d4 3fef 	ldaex	r3, [r4]
   28afe:	f023 0302 	bic.w	r3, r3, #2
   28b02:	e8c4 3fe2 	stlex	r2, r3, [r4]
   28b06:	2a00      	cmp	r2, #0
   28b08:	d1f7      	bne.n	28afa <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   28b0a:	4630      	mov	r0, r6
   28b0c:	f7ff fdab 	bl	28666 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28b10:	4639      	mov	r1, r7
   28b12:	e7e3      	b.n	28adc <bt_gatt_change_aware+0x40>

00028b14 <smp_pairing_rsp>:
}
   28b14:	2007      	movs	r0, #7
   28b16:	4770      	bx	lr

00028b18 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28b18:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28b1c:	4108      	asrs	r0, r1
}
   28b1e:	f000 0001 	and.w	r0, r0, #1
   28b22:	4770      	bx	lr

00028b24 <update_keys_check>:
{
   28b24:	4603      	mov	r3, r0
   28b26:	b510      	push	{r4, lr}
	if (!keys ||
   28b28:	b1d9      	cbz	r1, 28b62 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   28b2a:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   28b2c:	f010 0f24 	tst.w	r0, #36	; 0x24
   28b30:	d017      	beq.n	28b62 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   28b32:	7d1a      	ldrb	r2, [r3, #20]
   28b34:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   28b36:	7b09      	ldrb	r1, [r1, #12]
   28b38:	42a2      	cmp	r2, r4
   28b3a:	bf28      	it	cs
   28b3c:	4622      	movcs	r2, r4
   28b3e:	4291      	cmp	r1, r2
   28b40:	d901      	bls.n	28b46 <update_keys_check+0x22>
			return false;
   28b42:	2000      	movs	r0, #0
}
   28b44:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   28b46:	0682      	lsls	r2, r0, #26
   28b48:	d404      	bmi.n	28b54 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   28b4a:	7a18      	ldrb	r0, [r3, #8]
   28b4c:	3800      	subs	r0, #0
   28b4e:	bf18      	it	ne
   28b50:	2001      	movne	r0, #1
   28b52:	e7f7      	b.n	28b44 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   28b54:	2105      	movs	r1, #5
   28b56:	1d18      	adds	r0, r3, #4
   28b58:	f7ff ffde 	bl	28b18 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   28b5c:	2800      	cmp	r0, #0
   28b5e:	d1f4      	bne.n	28b4a <update_keys_check+0x26>
   28b60:	e7ef      	b.n	28b42 <update_keys_check+0x1e>
	return true;
   28b62:	2001      	movs	r0, #1
   28b64:	e7ee      	b.n	28b44 <update_keys_check+0x20>

00028b66 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28b66:	2301      	movs	r3, #1
   28b68:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28b6a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28b6c:	e8d0 2fef 	ldaex	r2, [r0]
   28b70:	401a      	ands	r2, r3
   28b72:	e8c0 2fe1 	stlex	r1, r2, [r0]
   28b76:	2900      	cmp	r1, #0
   28b78:	d1f8      	bne.n	28b6c <atomic_clear_bit+0x6>
}
   28b7a:	4770      	bx	lr

00028b7c <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28b7c:	680b      	ldr	r3, [r1, #0]
   28b7e:	6003      	str	r3, [r0, #0]
   28b80:	888b      	ldrh	r3, [r1, #4]
   28b82:	8083      	strh	r3, [r0, #4]
   28b84:	798b      	ldrb	r3, [r1, #6]
   28b86:	7183      	strb	r3, [r0, #6]
   28b88:	4770      	bx	lr

00028b8a <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   28b8a:	2007      	movs	r0, #7
   28b8c:	4770      	bx	lr

00028b8e <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   28b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28b90:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   28b92:	2200      	movs	r2, #0
   28b94:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   28b96:	4604      	mov	r4, r0
   28b98:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   28b9a:	460a      	mov	r2, r1
   28b9c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   28ba0:	2106      	movs	r1, #6
   28ba2:	f7ff f90c 	bl	27dbe <bt_l2cap_send_cb>
   28ba6:	b128      	cbz	r0, 28bb4 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   28ba8:	4628      	mov	r0, r5
}
   28baa:	b003      	add	sp, #12
   28bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   28bb0:	f7f1 bb3c 	b.w	1a22c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   28bb4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28bb8:	2300      	movs	r3, #0
   28bba:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   28bbe:	b003      	add	sp, #12
   28bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   28bc4:	f7f8 be30 	b.w	21828 <k_work_reschedule>

00028bc8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28bc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28bca:	ab0b      	add	r3, sp, #44	; 0x2c
   28bcc:	9305      	str	r3, [sp, #20]
   28bce:	9303      	str	r3, [sp, #12]
   28bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28bd2:	9302      	str	r3, [sp, #8]
   28bd4:	2300      	movs	r3, #0
   28bd6:	4618      	mov	r0, r3
   28bd8:	e9cd 3300 	strd	r3, r3, [sp]
   28bdc:	f7e6 fb1e 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   28be0:	b007      	add	sp, #28
   28be2:	f85d fb04 	ldr.w	pc, [sp], #4

00028be6 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28be6:	2301      	movs	r3, #1
   28be8:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28bea:	e8d0 2fef 	ldaex	r2, [r0]
   28bee:	431a      	orrs	r2, r3
   28bf0:	e8c0 2fe1 	stlex	r1, r2, [r0]
   28bf4:	2900      	cmp	r1, #0
   28bf6:	d1f8      	bne.n	28bea <atomic_set_bit+0x4>
}
   28bf8:	4770      	bx	lr

00028bfa <smp_keypress_notif>:
{
   28bfa:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   28bfc:	210e      	movs	r1, #14
   28bfe:	f7ff fff2 	bl	28be6 <atomic_set_bit>
}
   28c02:	2000      	movs	r0, #0
   28c04:	bd08      	pop	{r3, pc}

00028c06 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28c06:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28c08:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28c0a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28c0c:	4628      	mov	r0, r5
   28c0e:	2104      	movs	r1, #4
   28c10:	f7ff ff82 	bl	28b18 <atomic_test_bit>
   28c14:	b168      	cbz	r0, 28c32 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   28c16:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   28c18:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   28c1a:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   28c1c:	4608      	mov	r0, r1
   28c1e:	f7ff f8cb 	bl	27db8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   28c22:	4604      	mov	r4, r0
   28c24:	b940      	cbnz	r0, 28c38 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   28c26:	2104      	movs	r1, #4
   28c28:	4628      	mov	r0, r5
   28c2a:	f7ff ffdc 	bl	28be6 <atomic_set_bit>
}
   28c2e:	4620      	mov	r0, r4
   28c30:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   28c32:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28c36:	e7ef      	b.n	28c18 <smp_create_pdu.constprop.0+0x12>
   28c38:	2101      	movs	r1, #1
   28c3a:	300c      	adds	r0, #12
   28c3c:	f7f1 fc18 	bl	1a470 <net_buf_simple_add>
	hdr->code = op;
   28c40:	7006      	strb	r6, [r0, #0]
	return buf;
   28c42:	e7f4      	b.n	28c2e <smp_create_pdu.constprop.0+0x28>

00028c44 <send_pairing_rsp>:
{
   28c44:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   28c46:	2102      	movs	r1, #2
{
   28c48:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   28c4a:	f7ff ffdc 	bl	28c06 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   28c4e:	4605      	mov	r5, r0
   28c50:	b180      	cbz	r0, 28c74 <send_pairing_rsp+0x30>
   28c52:	2106      	movs	r1, #6
   28c54:	300c      	adds	r0, #12
   28c56:	f7f1 fc0b 	bl	1a470 <net_buf_simple_add>
   28c5a:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   28c5e:	2200      	movs	r2, #0
   28c60:	6003      	str	r3, [r0, #0]
   28c62:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   28c66:	4629      	mov	r1, r5
   28c68:	8083      	strh	r3, [r0, #4]
   28c6a:	4620      	mov	r0, r4
   28c6c:	f7ff ff8f 	bl	28b8e <smp_send.constprop.0>
	return 0;
   28c70:	2000      	movs	r0, #0
}
   28c72:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   28c74:	2008      	movs	r0, #8
   28c76:	e7fc      	b.n	28c72 <send_pairing_rsp+0x2e>

00028c78 <smp_send_pairing_random>:
{
   28c78:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   28c7a:	2104      	movs	r1, #4
{
   28c7c:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   28c7e:	f7ff ffc2 	bl	28c06 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   28c82:	4605      	mov	r5, r0
   28c84:	b1a0      	cbz	r0, 28cb0 <smp_send_pairing_random+0x38>
   28c86:	2110      	movs	r1, #16
   28c88:	300c      	adds	r0, #12
   28c8a:	f7f1 fbf1 	bl	1a470 <net_buf_simple_add>
   28c8e:	f104 0327 	add.w	r3, r4, #39	; 0x27
   28c92:	f104 0237 	add.w	r2, r4, #55	; 0x37
   28c96:	f853 1b04 	ldr.w	r1, [r3], #4
   28c9a:	4293      	cmp	r3, r2
   28c9c:	f840 1b04 	str.w	r1, [r0], #4
   28ca0:	d1f9      	bne.n	28c96 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   28ca2:	4620      	mov	r0, r4
   28ca4:	2200      	movs	r2, #0
   28ca6:	4629      	mov	r1, r5
   28ca8:	f7ff ff71 	bl	28b8e <smp_send.constprop.0>
	return 0;
   28cac:	2000      	movs	r0, #0
}
   28cae:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   28cb0:	2008      	movs	r0, #8
   28cb2:	e7fc      	b.n	28cae <smp_send_pairing_random+0x36>

00028cb4 <smp_dhkey_check>:
{
   28cb4:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   28cb6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   28cba:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   28cbc:	78db      	ldrb	r3, [r3, #3]
   28cbe:	2b01      	cmp	r3, #1
   28cc0:	d119      	bne.n	28cf6 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   28cc2:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   28cc4:	1d06      	adds	r6, r0, #4
   28cc6:	2110      	movs	r1, #16
   28cc8:	4630      	mov	r0, r6
   28cca:	f7ff ff4c 	bl	28b66 <atomic_clear_bit>
   28cce:	462b      	mov	r3, r5
   28cd0:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   28cd4:	f105 0110 	add.w	r1, r5, #16
   28cd8:	f853 0b04 	ldr.w	r0, [r3], #4
   28cdc:	428b      	cmp	r3, r1
   28cde:	f842 0b04 	str.w	r0, [r2], #4
   28ce2:	d1f9      	bne.n	28cd8 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   28ce4:	2107      	movs	r1, #7
   28ce6:	4630      	mov	r0, r6
   28ce8:	f7ff ff16 	bl	28b18 <atomic_test_bit>
   28cec:	b128      	cbz	r0, 28cfa <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28cee:	2109      	movs	r1, #9
   28cf0:	4630      	mov	r0, r6
   28cf2:	f7ff ff78 	bl	28be6 <atomic_set_bit>
}
   28cf6:	2000      	movs	r0, #0
   28cf8:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28cfa:	210a      	movs	r1, #10
   28cfc:	4630      	mov	r0, r6
   28cfe:	f7ff ff0b 	bl	28b18 <atomic_test_bit>
   28d02:	2800      	cmp	r0, #0
   28d04:	d1f3      	bne.n	28cee <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   28d06:	4620      	mov	r0, r4
}
   28d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   28d0c:	f7ef bdfe 	b.w	1890c <compute_and_check_and_send_periph_dhcheck>

00028d10 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   28d10:	2007      	movs	r0, #7
   28d12:	4770      	bx	lr

00028d14 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28d14:	2301      	movs	r3, #1
   28d16:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28d1a:	43ca      	mvns	r2, r1
{
   28d1c:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28d1e:	e8d0 3fef 	ldaex	r3, [r0]
   28d22:	ea03 0402 	and.w	r4, r3, r2
   28d26:	e8c0 4fe5 	stlex	r5, r4, [r0]
   28d2a:	2d00      	cmp	r5, #0
   28d2c:	d1f7      	bne.n	28d1e <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   28d2e:	4219      	tst	r1, r3
}
   28d30:	bf14      	ite	ne
   28d32:	2001      	movne	r0, #1
   28d34:	2000      	moveq	r0, #0
   28d36:	bd30      	pop	{r4, r5, pc}

00028d38 <smp_reset>:
{
   28d38:	b538      	push	{r3, r4, r5, lr}
   28d3a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28d3c:	2500      	movs	r5, #0
   28d3e:	1d03      	adds	r3, r0, #4
   28d40:	e8d3 2fef 	ldaex	r2, [r3]
   28d44:	e8c3 5fe1 	stlex	r1, r5, [r3]
   28d48:	2900      	cmp	r1, #0
   28d4a:	d1f9      	bne.n	28d40 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   28d4c:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   28d50:	f7f8 fd70 	bl	21834 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   28d54:	7225      	strb	r5, [r4, #8]
   28d56:	e8d4 3fef 	ldaex	r3, [r4]
   28d5a:	e8c4 5fe2 	stlex	r2, r5, [r4]
   28d5e:	2a00      	cmp	r2, #0
   28d60:	d1f9      	bne.n	28d56 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28d62:	4620      	mov	r0, r4
}
   28d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28d68:	2101      	movs	r1, #1
   28d6a:	f7ff bf3c 	b.w	28be6 <atomic_set_bit>

00028d6e <smp_c1>:
{
   28d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d70:	b089      	sub	sp, #36	; 0x24
   28d72:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   28d76:	4605      	mov	r5, r0
	p1[0] = ia->type;
   28d78:	7830      	ldrb	r0, [r6, #0]
{
   28d7a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   28d7c:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   28d80:	7838      	ldrb	r0, [r7, #0]
   28d82:	f101 0c10 	add.w	ip, r1, #16
   28d86:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   28d8a:	6810      	ldr	r0, [r2, #0]
   28d8c:	f8cd 0002 	str.w	r0, [sp, #2]
   28d90:	8890      	ldrh	r0, [r2, #4]
   28d92:	7992      	ldrb	r2, [r2, #6]
   28d94:	f8ad 0006 	strh.w	r0, [sp, #6]
   28d98:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   28d9c:	681a      	ldr	r2, [r3, #0]
   28d9e:	4668      	mov	r0, sp
   28da0:	f8cd 2009 	str.w	r2, [sp, #9]
   28da4:	889a      	ldrh	r2, [r3, #4]
   28da6:	799b      	ldrb	r3, [r3, #6]
   28da8:	f8ad 200d 	strh.w	r2, [sp, #13]
   28dac:	4622      	mov	r2, r4
   28dae:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   28db2:	f811 3b01 	ldrb.w	r3, [r1], #1
   28db6:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   28dba:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   28dbc:	ea83 030e 	eor.w	r3, r3, lr
   28dc0:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   28dc4:	d1f5      	bne.n	28db2 <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   28dc6:	4622      	mov	r2, r4
   28dc8:	4621      	mov	r1, r4
   28dca:	4628      	mov	r0, r5
   28dcc:	f7fe fe5a 	bl	27a84 <bt_encrypt_le>
	if (err) {
   28dd0:	4603      	mov	r3, r0
   28dd2:	bb28      	cbnz	r0, 28e20 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   28dd4:	9307      	str	r3, [sp, #28]
   28dd6:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   28dd8:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   28ddc:	f8d7 0001 	ldr.w	r0, [r7, #1]
   28de0:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   28de4:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   28de8:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   28dea:	f8cd 2016 	str.w	r2, [sp, #22]
   28dee:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   28df2:	f104 0010 	add.w	r0, r4, #16
   28df6:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   28dfa:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   28dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
   28e00:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   28e04:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   28e06:	ea82 0206 	eor.w	r2, r2, r6
   28e0a:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   28e0e:	d1f5      	bne.n	28dfc <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   28e10:	4622      	mov	r2, r4
   28e12:	4621      	mov	r1, r4
   28e14:	4628      	mov	r0, r5
}
   28e16:	b009      	add	sp, #36	; 0x24
   28e18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   28e1c:	f7fe be32 	b.w	27a84 <bt_encrypt_le>
}
   28e20:	b009      	add	sp, #36	; 0x24
   28e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028e24 <legacy_pairing_confirm>:
{
   28e24:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28e26:	1d07      	adds	r7, r0, #4
{
   28e28:	4604      	mov	r4, r0
   28e2a:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28e2c:	210a      	movs	r1, #10
   28e2e:	4638      	mov	r0, r7
   28e30:	f7ff fe72 	bl	28b18 <atomic_test_bit>
   28e34:	bb88      	cbnz	r0, 28e9a <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   28e36:	2104      	movs	r1, #4
   28e38:	4620      	mov	r0, r4
   28e3a:	f7ff fed4 	bl	28be6 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28e3e:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   28e40:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28e44:	f7ff fedf 	bl	28c06 <smp_create_pdu.constprop.0>
	if (!buf) {
   28e48:	4605      	mov	r5, r0
   28e4a:	b1c0      	cbz	r0, 28e7e <legacy_pairing_confirm+0x5a>
   28e4c:	2110      	movs	r1, #16
   28e4e:	300c      	adds	r0, #12
   28e50:	f7f1 fb0e 	bl	1a470 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   28e54:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   28e58:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   28e5a:	9002      	str	r0, [sp, #8]
   28e5c:	9301      	str	r3, [sp, #4]
   28e5e:	9600      	str	r6, [sp, #0]
   28e60:	f104 0310 	add.w	r3, r4, #16
   28e64:	f104 0209 	add.w	r2, r4, #9
   28e68:	f104 0127 	add.w	r1, r4, #39	; 0x27
   28e6c:	f104 0047 	add.w	r0, r4, #71	; 0x47
   28e70:	f7ff ff7d 	bl	28d6e <smp_c1>
   28e74:	4606      	mov	r6, r0
   28e76:	b128      	cbz	r0, 28e84 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   28e78:	4628      	mov	r0, r5
   28e7a:	f7f1 f9d7 	bl	1a22c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   28e7e:	2008      	movs	r0, #8
}
   28e80:	b005      	add	sp, #20
   28e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   28e84:	4602      	mov	r2, r0
   28e86:	4629      	mov	r1, r5
   28e88:	4620      	mov	r0, r4
   28e8a:	f7ff fe80 	bl	28b8e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   28e8e:	4631      	mov	r1, r6
   28e90:	4638      	mov	r0, r7
   28e92:	f7ff fe68 	bl	28b66 <atomic_clear_bit>
	return 0;
   28e96:	2000      	movs	r0, #0
   28e98:	e7f2      	b.n	28e80 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   28e9a:	2100      	movs	r1, #0
   28e9c:	4638      	mov	r0, r7
   28e9e:	f7ff fea2 	bl	28be6 <atomic_set_bit>
	return 0;
   28ea2:	e7f8      	b.n	28e96 <legacy_pairing_confirm+0x72>

00028ea4 <bt_smp_request_ltk>:
{
   28ea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28ea8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   28eaa:	4604      	mov	r4, r0
   28eac:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   28eb0:	f7ef f93e 	bl	18130 <smp_chan_get>
	if (!smp) {
   28eb4:	4605      	mov	r5, r0
   28eb6:	2800      	cmp	r0, #0
   28eb8:	d07c      	beq.n	28fb4 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   28eba:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28ebe:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   28ec0:	f1b8 0f00 	cmp.w	r8, #0
   28ec4:	d128      	bne.n	28f18 <bt_smp_request_ltk+0x74>
   28ec6:	e9dd 3200 	ldrd	r3, r2, [sp]
   28eca:	4313      	orrs	r3, r2
   28ecc:	d124      	bne.n	28f18 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28ece:	2103      	movs	r1, #3
   28ed0:	4630      	mov	r0, r6
   28ed2:	f7ff fe21 	bl	28b18 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   28ed6:	b1f8      	cbz	r0, 28f18 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   28ed8:	2101      	movs	r1, #1
   28eda:	4630      	mov	r0, r6
   28edc:	f7ff fe1c 	bl	28b18 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28ee0:	b1d0      	cbz	r0, 28f18 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   28ee2:	7d2c      	ldrb	r4, [r5, #20]
   28ee4:	7b6b      	ldrb	r3, [r5, #13]
   28ee6:	f105 0147 	add.w	r1, r5, #71	; 0x47
   28eea:	429c      	cmp	r4, r3
   28eec:	bf28      	it	cs
   28eee:	461c      	movcs	r4, r3
   28ef0:	4622      	mov	r2, r4
   28ef2:	4638      	mov	r0, r7
   28ef4:	f001 ff1c 	bl	2ad30 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   28ef8:	2c0f      	cmp	r4, #15
   28efa:	d805      	bhi.n	28f08 <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   28efc:	4641      	mov	r1, r8
   28efe:	f1c4 0210 	rsb	r2, r4, #16
   28f02:	1938      	adds	r0, r7, r4
   28f04:	f001 ff4e 	bl	2ada4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   28f08:	4630      	mov	r0, r6
   28f0a:	2101      	movs	r1, #1
   28f0c:	f7ff fe6b 	bl	28be6 <atomic_set_bit>
		return true;
   28f10:	2001      	movs	r0, #1
}
   28f12:	b002      	add	sp, #8
   28f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   28f18:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   28f1c:	b983      	cbnz	r3, 28f40 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   28f1e:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   28f22:	4642      	mov	r2, r8
   28f24:	2020      	movs	r0, #32
   28f26:	7a21      	ldrb	r1, [r4, #8]
   28f28:	f7f0 fd6e 	bl	19a08 <bt_keys_find>
   28f2c:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   28f30:	b930      	cbnz	r0, 28f40 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   28f32:	4642      	mov	r2, r8
   28f34:	2001      	movs	r0, #1
   28f36:	7a21      	ldrb	r1, [r4, #8]
   28f38:	f7f0 fd66 	bl	19a08 <bt_keys_find>
   28f3c:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   28f40:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28f44:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   28f48:	f1b8 0f00 	cmp.w	r8, #0
   28f4c:	d10c      	bne.n	28f68 <bt_smp_request_ltk+0xc4>
   28f4e:	e9dd 3200 	ldrd	r3, r2, [sp]
   28f52:	4313      	orrs	r3, r2
   28f54:	d108      	bne.n	28f68 <bt_smp_request_ltk+0xc4>
   28f56:	b300      	cbz	r0, 28f9a <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28f58:	89c3      	ldrh	r3, [r0, #14]
   28f5a:	069a      	lsls	r2, r3, #26
   28f5c:	d505      	bpl.n	28f6a <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   28f5e:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28f60:	f100 011a 	add.w	r1, r0, #26
   28f64:	4622      	mov	r2, r4
   28f66:	e7c4      	b.n	28ef2 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   28f68:	b1b8      	cbz	r0, 28f9a <bt_smp_request_ltk+0xf6>
   28f6a:	89c3      	ldrh	r3, [r0, #14]
   28f6c:	07db      	lsls	r3, r3, #31
   28f6e:	d514      	bpl.n	28f9a <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   28f70:	2208      	movs	r2, #8
   28f72:	4669      	mov	r1, sp
   28f74:	3040      	adds	r0, #64	; 0x40
   28f76:	f001 fecb 	bl	2ad10 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   28f7a:	b970      	cbnz	r0, 28f9a <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   28f7c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   28f80:	2202      	movs	r2, #2
   28f82:	a908      	add	r1, sp, #32
   28f84:	3048      	adds	r0, #72	; 0x48
   28f86:	f001 fec3 	bl	2ad10 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   28f8a:	4680      	mov	r8, r0
   28f8c:	b928      	cbnz	r0, 28f9a <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   28f8e:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   28f92:	7b0c      	ldrb	r4, [r1, #12]
   28f94:	314a      	adds	r1, #74	; 0x4a
   28f96:	4622      	mov	r2, r4
   28f98:	e7ab      	b.n	28ef2 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28f9a:	210f      	movs	r1, #15
   28f9c:	4630      	mov	r0, r6
   28f9e:	f7ff fdbb 	bl	28b18 <atomic_test_bit>
   28fa2:	b120      	cbz	r0, 28fae <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   28fa4:	2202      	movs	r2, #2
   28fa6:	2106      	movs	r1, #6
   28fa8:	4620      	mov	r0, r4
   28faa:	f7ec fa95 	bl	154d8 <bt_conn_security_changed>
	smp_reset(smp);
   28fae:	4628      	mov	r0, r5
   28fb0:	f7ff fec2 	bl	28d38 <smp_reset>
		return false;
   28fb4:	2000      	movs	r0, #0
   28fb6:	e7ac      	b.n	28f12 <bt_smp_request_ltk+0x6e>

00028fb8 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   28fb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28fbc:	4770      	bx	lr

00028fbe <bt_smp_dhkey_ready>:
{
   28fbe:	b570      	push	{r4, r5, r6, lr}
   28fc0:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   28fc2:	2008      	movs	r0, #8
   28fc4:	f7ef f828 	bl	18018 <smp_find>
	if (smp) {
   28fc8:	4605      	mov	r5, r0
   28fca:	b1e0      	cbz	r0, 29006 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   28fcc:	1d06      	adds	r6, r0, #4
   28fce:	2108      	movs	r1, #8
   28fd0:	4630      	mov	r0, r6
   28fd2:	f7ff fdc8 	bl	28b66 <atomic_clear_bit>
	if (!dhkey) {
   28fd6:	b3bc      	cbz	r4, 29048 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   28fd8:	2107      	movs	r1, #7
   28fda:	f7ff fdc4 	bl	28b66 <atomic_clear_bit>
   28fde:	4623      	mov	r3, r4
   28fe0:	f105 0297 	add.w	r2, r5, #151	; 0x97
   28fe4:	f104 0120 	add.w	r1, r4, #32
   28fe8:	f853 0b04 	ldr.w	r0, [r3], #4
   28fec:	428b      	cmp	r3, r1
   28fee:	f842 0b04 	str.w	r0, [r2], #4
   28ff2:	d1f9      	bne.n	28fe8 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28ff4:	210a      	movs	r1, #10
   28ff6:	4630      	mov	r0, r6
   28ff8:	f7ff fd8e 	bl	28b18 <atomic_test_bit>
   28ffc:	b170      	cbz	r0, 2901c <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28ffe:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   29000:	4630      	mov	r0, r6
   29002:	f7ff fdf0 	bl	28be6 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   29006:	2007      	movs	r0, #7
   29008:	f7ef f806 	bl	18018 <smp_find>
		if (smp) {
   2900c:	4604      	mov	r4, r0
   2900e:	b1e8      	cbz	r0, 2904c <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   29010:	f7ef f8c4 	bl	1819c <smp_dhkey_generate>
			if (err) {
   29014:	4601      	mov	r1, r0
   29016:	b1c8      	cbz	r0, 2904c <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   29018:	4620      	mov	r0, r4
   2901a:	e012      	b.n	29042 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2901c:	2110      	movs	r1, #16
   2901e:	4630      	mov	r0, r6
   29020:	f7ff fd7a 	bl	28b18 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   29024:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   29026:	2800      	cmp	r0, #0
   29028:	d1ea      	bne.n	29000 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2902a:	4630      	mov	r0, r6
   2902c:	f7ff fd74 	bl	28b18 <atomic_test_bit>
   29030:	2800      	cmp	r0, #0
   29032:	d0e8      	beq.n	29006 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   29034:	4628      	mov	r0, r5
   29036:	f7ef fc69 	bl	1890c <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2903a:	4601      	mov	r1, r0
   2903c:	2800      	cmp	r0, #0
   2903e:	d0e2      	beq.n	29006 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   29040:	4628      	mov	r0, r5
   29042:	f7ef fff7 	bl	19034 <smp_error>
   29046:	e7de      	b.n	29006 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   29048:	210b      	movs	r1, #11
   2904a:	e7f9      	b.n	29040 <bt_smp_dhkey_ready+0x82>
}
   2904c:	bd70      	pop	{r4, r5, r6, pc}

0002904e <bt_smp_disconnected>:
{
   2904e:	b570      	push	{r4, r5, r6, lr}
   29050:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   29052:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   29056:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2905a:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2905c:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   29060:	f7f8 fbe8 	bl	21834 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29064:	2103      	movs	r1, #3
   29066:	4620      	mov	r0, r4
   29068:	f7ff fd56 	bl	28b18 <atomic_test_bit>
   2906c:	b1a0      	cbz	r0, 29098 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2906e:	2108      	movs	r1, #8
   29070:	4630      	mov	r0, r6
   29072:	f7ef ff61 	bl	18f38 <smp_pairing_complete>
	if (keys) {
   29076:	b13d      	cbz	r5, 29088 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   29078:	89eb      	ldrh	r3, [r5, #14]
   2907a:	b113      	cbz	r3, 29082 <bt_smp_disconnected+0x34>
   2907c:	7b6b      	ldrb	r3, [r5, #13]
   2907e:	079b      	lsls	r3, r3, #30
   29080:	d502      	bpl.n	29088 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   29082:	4628      	mov	r0, r5
   29084:	f7f0 fda6 	bl	19bd4 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   29088:	4630      	mov	r0, r6
}
   2908a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2908e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   29092:	2100      	movs	r1, #0
   29094:	f001 be86 	b.w	2ada4 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29098:	2101      	movs	r1, #1
   2909a:	4620      	mov	r0, r4
   2909c:	f7ff fd3c 	bl	28b18 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   290a0:	2800      	cmp	r0, #0
   290a2:	d1e4      	bne.n	2906e <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   290a4:	210f      	movs	r1, #15
   290a6:	4620      	mov	r0, r4
   290a8:	f7ff fd36 	bl	28b18 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   290ac:	2800      	cmp	r0, #0
   290ae:	d1de      	bne.n	2906e <bt_smp_disconnected+0x20>
   290b0:	e7e1      	b.n	29076 <bt_smp_disconnected+0x28>

000290b2 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   290b2:	b510      	push	{r4, lr}
   290b4:	1e43      	subs	r3, r0, #1
   290b6:	f100 0210 	add.w	r2, r0, #16
   290ba:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   290bc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   290c0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   290c4:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   290c6:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   290c8:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   290ca:	d1f7      	bne.n	290bc <sys_mem_swap.constprop.0+0xa>
	}
}
   290cc:	bd10      	pop	{r4, pc}

000290ce <bt_crypto_aes_cmac>:
{
   290ce:	b570      	push	{r4, r5, r6, lr}
   290d0:	b0c2      	sub	sp, #264	; 0x108
   290d2:	460d      	mov	r5, r1
   290d4:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   290d6:	4601      	mov	r1, r0
   290d8:	aa16      	add	r2, sp, #88	; 0x58
   290da:	4668      	mov	r0, sp
{
   290dc:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   290de:	f7fd fe01 	bl	26ce4 <tc_cmac_setup>
   290e2:	b918      	cbnz	r0, 290ec <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   290e4:	f06f 0004 	mvn.w	r0, #4
}
   290e8:	b042      	add	sp, #264	; 0x108
   290ea:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   290ec:	4632      	mov	r2, r6
   290ee:	4629      	mov	r1, r5
   290f0:	4668      	mov	r0, sp
   290f2:	f7fd fe22 	bl	26d3a <tc_cmac_update>
   290f6:	2800      	cmp	r0, #0
   290f8:	d0f4      	beq.n	290e4 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   290fa:	4669      	mov	r1, sp
   290fc:	4620      	mov	r0, r4
   290fe:	f7fd fe86 	bl	26e0e <tc_cmac_final>
   29102:	2800      	cmp	r0, #0
   29104:	d0ee      	beq.n	290e4 <bt_crypto_aes_cmac+0x16>
	return 0;
   29106:	2000      	movs	r0, #0
   29108:	e7ee      	b.n	290e8 <bt_crypto_aes_cmac+0x1a>

0002910a <bt_crypto_f4>:
{
   2910a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2910c:	460e      	mov	r6, r1
   2910e:	4614      	mov	r4, r2
   29110:	461d      	mov	r5, r3
   29112:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   29114:	4601      	mov	r1, r0
   29116:	2220      	movs	r2, #32
   29118:	a805      	add	r0, sp, #20
{
   2911a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2911c:	f7f0 fd7c 	bl	19c18 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   29120:	2220      	movs	r2, #32
   29122:	4631      	mov	r1, r6
   29124:	a80d      	add	r0, sp, #52	; 0x34
   29126:	f7f0 fd77 	bl	19c18 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2912a:	4621      	mov	r1, r4
   2912c:	2210      	movs	r2, #16
   2912e:	a801      	add	r0, sp, #4
	m[64] = z;
   29130:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   29134:	f7f0 fd70 	bl	19c18 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   29138:	463b      	mov	r3, r7
   2913a:	2241      	movs	r2, #65	; 0x41
   2913c:	a905      	add	r1, sp, #20
   2913e:	a801      	add	r0, sp, #4
   29140:	f7ff ffc5 	bl	290ce <bt_crypto_aes_cmac>
	if (err) {
   29144:	4604      	mov	r4, r0
   29146:	b910      	cbnz	r0, 2914e <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   29148:	4638      	mov	r0, r7
   2914a:	f7ff ffb2 	bl	290b2 <sys_mem_swap.constprop.0>
}
   2914e:	4620      	mov	r0, r4
   29150:	b017      	add	sp, #92	; 0x5c
   29152:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029154 <bt_crypto_f6>:
{
   29154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29158:	4616      	mov	r6, r2
   2915a:	461d      	mov	r5, r3
   2915c:	b097      	sub	sp, #92	; 0x5c
   2915e:	4604      	mov	r4, r0
   29160:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   29164:	2210      	movs	r2, #16
   29166:	a805      	add	r0, sp, #20
{
   29168:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2916a:	f7f0 fd55 	bl	19c18 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2916e:	2210      	movs	r2, #16
   29170:	4631      	mov	r1, r6
   29172:	a809      	add	r0, sp, #36	; 0x24
   29174:	f7f0 fd50 	bl	19c18 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   29178:	2210      	movs	r2, #16
   2917a:	4629      	mov	r1, r5
   2917c:	a80d      	add	r0, sp, #52	; 0x34
   2917e:	f7f0 fd4b 	bl	19c18 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   29182:	2203      	movs	r2, #3
   29184:	991e      	ldr	r1, [sp, #120]	; 0x78
   29186:	a811      	add	r0, sp, #68	; 0x44
   29188:	f7f0 fd46 	bl	19c18 <sys_memcpy_swap>
	m[51] = a1->type;
   2918c:	4649      	mov	r1, r9
   2918e:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   29192:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   29196:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2919a:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2919c:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   2919e:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   291a0:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   291a2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   291a6:	f7f0 fd37 	bl	19c18 <sys_memcpy_swap>
	m[58] = a2->type;
   291aa:	4641      	mov	r1, r8
   291ac:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   291b0:	2206      	movs	r2, #6
	m[58] = a2->type;
   291b2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   291b6:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   291ba:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   291be:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   291c2:	888b      	ldrh	r3, [r1, #4]
   291c4:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   291c8:	f7f0 fd26 	bl	19c18 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   291cc:	4621      	mov	r1, r4
   291ce:	2210      	movs	r2, #16
   291d0:	a801      	add	r0, sp, #4
   291d2:	f7f0 fd21 	bl	19c18 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   291d6:	463b      	mov	r3, r7
   291d8:	2241      	movs	r2, #65	; 0x41
   291da:	a905      	add	r1, sp, #20
   291dc:	a801      	add	r0, sp, #4
   291de:	f7ff ff76 	bl	290ce <bt_crypto_aes_cmac>
	if (err) {
   291e2:	4604      	mov	r4, r0
   291e4:	b910      	cbnz	r0, 291ec <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   291e6:	4638      	mov	r0, r7
   291e8:	f7ff ff63 	bl	290b2 <sys_mem_swap.constprop.0>
}
   291ec:	4620      	mov	r0, r4
   291ee:	b017      	add	sp, #92	; 0x5c
   291f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000291f4 <fixed_data_unref>:
}
   291f4:	4770      	bx	lr

000291f6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   291f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   291f8:	6849      	ldr	r1, [r1, #4]
   291fa:	6809      	ldr	r1, [r1, #0]
   291fc:	f7f0 be0e 	b.w	19e1c <net_buf_alloc_len>

00029200 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   29200:	f7f7 bd08 	b.w	20c14 <z_impl_k_queue_get>

00029204 <net_buf_simple_push_u8>:
{
   29204:	b510      	push	{r4, lr}
   29206:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   29208:	2101      	movs	r1, #1
   2920a:	f7f1 f8d5 	bl	1a3b8 <net_buf_simple_push>
	*data = val;
   2920e:	7004      	strb	r4, [r0, #0]
}
   29210:	bd10      	pop	{r4, pc}

00029212 <net_buf_simple_pull_le16>:
{
   29212:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   29214:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   29216:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   29218:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2921a:	f7f1 f8ed 	bl	1a3f8 <net_buf_simple_pull>
}
   2921e:	4620      	mov	r0, r4
   29220:	bd10      	pop	{r4, pc}

00029222 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   29222:	6802      	ldr	r2, [r0, #0]
   29224:	6880      	ldr	r0, [r0, #8]
}
   29226:	1a10      	subs	r0, r2, r0
   29228:	4770      	bx	lr

0002922a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2922a:	8883      	ldrh	r3, [r0, #4]
   2922c:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2922e:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   29230:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   29232:	6803      	ldr	r3, [r0, #0]
   29234:	1a5b      	subs	r3, r3, r1
}
   29236:	1ad0      	subs	r0, r2, r3
   29238:	4770      	bx	lr

0002923a <net_buf_simple_add_mem>:
{
   2923a:	b538      	push	{r3, r4, r5, lr}
   2923c:	460d      	mov	r5, r1
   2923e:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   29240:	4611      	mov	r1, r2
   29242:	f7f1 f915 	bl	1a470 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29246:	4622      	mov	r2, r4
   29248:	4629      	mov	r1, r5
}
   2924a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2924e:	f001 bd6f 	b.w	2ad30 <memcpy>

00029252 <net_buf_simple_add_u8>:
{
   29252:	b510      	push	{r4, lr}
   29254:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   29256:	2101      	movs	r1, #1
   29258:	f7f1 f90a 	bl	1a470 <net_buf_simple_add>
	*u8 = val;
   2925c:	7004      	strb	r4, [r0, #0]
}
   2925e:	bd10      	pop	{r4, pc}

00029260 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29260:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29262:	ab0b      	add	r3, sp, #44	; 0x2c
   29264:	9305      	str	r3, [sp, #20]
   29266:	9303      	str	r3, [sp, #12]
   29268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2926a:	2201      	movs	r2, #1
   2926c:	9302      	str	r3, [sp, #8]
   2926e:	2300      	movs	r3, #0
   29270:	4618      	mov	r0, r3
   29272:	e9cd 3300 	strd	r3, r3, [sp]
   29276:	f7e5 ffd1 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   2927a:	b007      	add	sp, #28
   2927c:	f85d fb04 	ldr.w	pc, [sp], #4

00029280 <adc_context_on_timer_expired>:
{
   29280:	b410      	push	{r4}
   29282:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   29284:	3808      	subs	r0, #8
   29286:	e8d0 2fef 	ldaex	r2, [r0]
   2928a:	1c51      	adds	r1, r2, #1
   2928c:	e8c0 1fe4 	stlex	r4, r1, [r0]
   29290:	2c00      	cmp	r4, #0
   29292:	d1f8      	bne.n	29286 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   29294:	b912      	cbnz	r2, 2929c <adc_context_on_timer_expired+0x1c>
}
   29296:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   29298:	f7f1 b92c 	b.w	1a4f4 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2929c:	f06f 020f 	mvn.w	r2, #15
}
   292a0:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   292a2:	669a      	str	r2, [r3, #104]	; 0x68
}
   292a4:	4770      	bx	lr

000292a6 <set_on_state>:
	__asm__ volatile(
   292a6:	f04f 0320 	mov.w	r3, #32
   292aa:	f3ef 8211 	mrs	r2, BASEPRI
   292ae:	f383 8812 	msr	BASEPRI_MAX, r3
   292b2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   292b6:	6803      	ldr	r3, [r0, #0]
   292b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   292bc:	f043 0302 	orr.w	r3, r3, #2
   292c0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   292c2:	f382 8811 	msr	BASEPRI, r2
   292c6:	f3bf 8f6f 	isb	sy
}
   292ca:	4770      	bx	lr

000292cc <async_start>:
{
   292cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   292ce:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   292d0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   292d2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   292d4:	f04f 0520 	mov.w	r5, #32
   292d8:	f3ef 8611 	mrs	r6, BASEPRI
   292dc:	f385 8812 	msr	BASEPRI_MAX, r5
   292e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   292e4:	250c      	movs	r5, #12
   292e6:	4369      	muls	r1, r5
   292e8:	440c      	add	r4, r1
   292ea:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   292ee:	f005 0c07 	and.w	ip, r5, #7
   292f2:	f1bc 0f01 	cmp.w	ip, #1
   292f6:	d10c      	bne.n	29312 <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   292f8:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   292fc:	f386 8811 	msr	BASEPRI, r6
   29300:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   29304:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   29308:	6843      	ldr	r3, [r0, #4]
   2930a:	585b      	ldr	r3, [r3, r1]
   2930c:	4798      	blx	r3
	return 0;
   2930e:	2000      	movs	r0, #0
}
   29310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   29312:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   29316:	42af      	cmp	r7, r5
   29318:	f386 8811 	msr	BASEPRI, r6
   2931c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   29320:	bf0c      	ite	eq
   29322:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   29326:	f04f 30ff 	movne.w	r0, #4294967295
   2932a:	e7f1      	b.n	29310 <async_start+0x44>

0002932c <api_start>:
{
   2932c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2932e:	2480      	movs	r4, #128	; 0x80
   29330:	9400      	str	r4, [sp, #0]
   29332:	f7ff ffcb 	bl	292cc <async_start>
}
   29336:	b002      	add	sp, #8
   29338:	bd10      	pop	{r4, pc}

0002933a <onoff_started_callback>:
	return &data->mgr[type];
   2933a:	6900      	ldr	r0, [r0, #16]
   2933c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2933e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   29342:	2100      	movs	r1, #0
   29344:	4710      	bx	r2

00029346 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   29346:	2003      	movs	r0, #3
   29348:	f7f4 bb54 	b.w	1d9f4 <nrfx_clock_start>

0002934c <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2934c:	2002      	movs	r0, #2
   2934e:	f7f4 bb51 	b.w	1d9f4 <nrfx_clock_start>

00029352 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   29352:	2000      	movs	r0, #0
   29354:	f7f4 bb4e 	b.w	1d9f4 <nrfx_clock_start>

00029358 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   29358:	2003      	movs	r0, #3
   2935a:	f7f4 bbc9 	b.w	1daf0 <nrfx_clock_stop>

0002935e <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2935e:	2002      	movs	r0, #2
   29360:	f7f4 bbc6 	b.w	1daf0 <nrfx_clock_stop>

00029364 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   29364:	2000      	movs	r0, #0
   29366:	f7f4 bbc3 	b.w	1daf0 <nrfx_clock_stop>

0002936a <blocking_start_callback>:
{
   2936a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2936c:	f7f7 bcbc 	b.w	20ce8 <z_impl_k_sem_give>

00029370 <api_stop>:
	return stop(dev, subsys, CTX_API);
   29370:	2280      	movs	r2, #128	; 0x80
   29372:	f7f1 bb11 	b.w	1a998 <stop>

00029376 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29376:	6843      	ldr	r3, [r0, #4]
}
   29378:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2937a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2937c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2937e:	600b      	str	r3, [r1, #0]
}
   29380:	4770      	bx	lr

00029382 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29382:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   29384:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29388:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2938a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2938e:	6098      	str	r0, [r3, #8]
}
   29390:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   29392:	60d9      	str	r1, [r3, #12]
   29394:	4770      	bx	lr

00029396 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29396:	6843      	ldr	r3, [r0, #4]
}
   29398:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2939a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2939c:	6099      	str	r1, [r3, #8]
}
   2939e:	4770      	bx	lr

000293a0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   293a0:	6843      	ldr	r3, [r0, #4]
}
   293a2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   293a4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   293a6:	60d9      	str	r1, [r3, #12]
}
   293a8:	4770      	bx	lr

000293aa <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   293aa:	6843      	ldr	r3, [r0, #4]
   293ac:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   293ae:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   293b0:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   293b4:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   293b6:	6090      	str	r0, [r2, #8]
}
   293b8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   293ba:	60d3      	str	r3, [r2, #12]
   293bc:	4770      	bx	lr

000293be <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   293be:	2200      	movs	r2, #0
   293c0:	2101      	movs	r1, #1
   293c2:	200a      	movs	r0, #10
   293c4:	f7e7 be38 	b.w	11038 <z_arm_irq_priority_set>

000293c8 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   293c8:	b510      	push	{r4, lr}
	while (*count) {
   293ca:	680b      	ldr	r3, [r1, #0]
   293cc:	b913      	cbnz	r3, 293d4 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   293ce:	4618      	mov	r0, r3
	*buf_len = 0;
   293d0:	6013      	str	r3, [r2, #0]
	return NULL;
   293d2:	e005      	b.n	293e0 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   293d4:	6803      	ldr	r3, [r0, #0]
   293d6:	685c      	ldr	r4, [r3, #4]
   293d8:	b11c      	cbz	r4, 293e2 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   293da:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   293dc:	6803      	ldr	r3, [r0, #0]
   293de:	6818      	ldr	r0, [r3, #0]
}
   293e0:	bd10      	pop	{r4, pc}
		++(*current);
   293e2:	3308      	adds	r3, #8
   293e4:	6003      	str	r3, [r0, #0]
		--(*count);
   293e6:	680b      	ldr	r3, [r1, #0]
   293e8:	3b01      	subs	r3, #1
   293ea:	600b      	str	r3, [r1, #0]
   293ec:	e7ed      	b.n	293ca <spi_context_get_next_buf.constprop.0+0x2>

000293ee <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   293ee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   293f0:	ab0b      	add	r3, sp, #44	; 0x2c
   293f2:	9305      	str	r3, [sp, #20]
   293f4:	9303      	str	r3, [sp, #12]
   293f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   293f8:	2201      	movs	r2, #1
   293fa:	9302      	str	r3, [sp, #8]
   293fc:	2300      	movs	r3, #0
   293fe:	4618      	mov	r0, r3
   29400:	e9cd 3300 	strd	r3, r3, [sp]
   29404:	f7e5 ff0a 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   29408:	b007      	add	sp, #28
   2940a:	f85d fb04 	ldr.w	pc, [sp], #4

0002940e <_spi_context_cs_control>:
{
   2940e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   29410:	6803      	ldr	r3, [r0, #0]
{
   29412:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   29414:	b1e3      	cbz	r3, 29450 <_spi_context_cs_control+0x42>
   29416:	6898      	ldr	r0, [r3, #8]
   29418:	b1d0      	cbz	r0, 29450 <_spi_context_cs_control+0x42>
   2941a:	6805      	ldr	r5, [r0, #0]
   2941c:	b1c5      	cbz	r5, 29450 <_spi_context_cs_control+0x42>
		if (on) {
   2941e:	b149      	cbz	r1, 29434 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   29420:	2101      	movs	r1, #1
   29422:	f7f1 fea3 	bl	1b16c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   29426:	6823      	ldr	r3, [r4, #0]
   29428:	689b      	ldr	r3, [r3, #8]
   2942a:	6898      	ldr	r0, [r3, #8]
}
   2942c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   29430:	f001 bb72 	b.w	2ab18 <z_impl_k_busy_wait>
			if (!force_off &&
   29434:	b912      	cbnz	r2, 2943c <_spi_context_cs_control+0x2e>
   29436:	889b      	ldrh	r3, [r3, #4]
   29438:	04db      	lsls	r3, r3, #19
   2943a:	d409      	bmi.n	29450 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2943c:	6880      	ldr	r0, [r0, #8]
   2943e:	f001 fb6b 	bl	2ab18 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   29442:	6823      	ldr	r3, [r4, #0]
   29444:	2100      	movs	r1, #0
   29446:	6898      	ldr	r0, [r3, #8]
}
   29448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2944c:	f7f1 be8e 	b.w	1b16c <gpio_pin_set_dt.isra.0>
}
   29450:	bd38      	pop	{r3, r4, r5, pc}

00029452 <spi_context_unlock_unconditionally>:
{
   29452:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   29454:	2201      	movs	r2, #1
   29456:	2100      	movs	r1, #0
{
   29458:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2945a:	f7ff ffd8 	bl	2940e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2945e:	69a3      	ldr	r3, [r4, #24]
   29460:	b933      	cbnz	r3, 29470 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   29462:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   29464:	f104 0010 	add.w	r0, r4, #16
}
   29468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2946c:	f7f7 bc3c 	b.w	20ce8 <z_impl_k_sem_give>
   29470:	bd10      	pop	{r4, pc}

00029472 <spi_nrfx_release>:
{
   29472:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   29474:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   29476:	6803      	ldr	r3, [r0, #0]
   29478:	428b      	cmp	r3, r1
   2947a:	d106      	bne.n	2948a <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2947c:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   29480:	b934      	cbnz	r4, 29490 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   29482:	f7ff ffe6 	bl	29452 <spi_context_unlock_unconditionally>
	return 0;
   29486:	4620      	mov	r0, r4
}
   29488:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2948a:	f06f 0015 	mvn.w	r0, #21
   2948e:	e7fb      	b.n	29488 <spi_nrfx_release+0x16>
		return -EBUSY;
   29490:	f06f 000f 	mvn.w	r0, #15
   29494:	e7f8      	b.n	29488 <spi_nrfx_release+0x16>

00029496 <k_sem_give>:
   29496:	f7f7 bc27 	b.w	20ce8 <z_impl_k_sem_give>

0002949a <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2949a:	b918      	cbnz	r0, 294a4 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2949c:	f101 0030 	add.w	r0, r1, #48	; 0x30
   294a0:	f7ff bff9 	b.w	29496 <k_sem_give>
}
   294a4:	4770      	bx	lr

000294a6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   294a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   294a8:	ab0b      	add	r3, sp, #44	; 0x2c
   294aa:	9305      	str	r3, [sp, #20]
   294ac:	9303      	str	r3, [sp, #12]
   294ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   294b0:	9302      	str	r3, [sp, #8]
   294b2:	2300      	movs	r3, #0
   294b4:	4618      	mov	r0, r3
   294b6:	e9cd 3300 	strd	r3, r3, [sp]
   294ba:	f7e5 feaf 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   294be:	b007      	add	sp, #28
   294c0:	f85d fb04 	ldr.w	pc, [sp], #4

000294c4 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   294c4:	f04f 32ff 	mov.w	r2, #4294967295
   294c8:	f04f 33ff 	mov.w	r3, #4294967295
   294cc:	3018      	adds	r0, #24
   294ce:	f7f7 bc4f 	b.w	20d70 <z_impl_k_sem_take>

000294d2 <qspi_trans_lock.isra.0>:
   294d2:	f04f 32ff 	mov.w	r2, #4294967295
   294d6:	f04f 33ff 	mov.w	r3, #4294967295
   294da:	f7f7 bc49 	b.w	20d70 <z_impl_k_sem_take>

000294de <qspi_nor_write_protection_set>:
{
   294de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   294e0:	2200      	movs	r2, #0
   294e2:	4291      	cmp	r1, r2
   294e4:	bf0c      	ite	eq
   294e6:	2306      	moveq	r3, #6
   294e8:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   294ea:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   294ec:	e9cd 2201 	strd	r2, r2, [sp, #4]
   294f0:	9203      	str	r2, [sp, #12]
   294f2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   294f6:	f7f2 f9a1 	bl	1b83c <qspi_send_cmd>
		ret = -EIO;
   294fa:	2800      	cmp	r0, #0
}
   294fc:	bf18      	it	ne
   294fe:	f06f 0004 	mvnne.w	r0, #4
   29502:	b005      	add	sp, #20
   29504:	f85d fb04 	ldr.w	pc, [sp], #4

00029508 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   29508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2950a:	23ff      	movs	r3, #255	; 0xff
   2950c:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   29510:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   29514:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   29516:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   29518:	2301      	movs	r3, #1
   2951a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2951e:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   29520:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   29522:	f88d 300c 	strb.w	r3, [sp, #12]
   29526:	ab01      	add	r3, sp, #4
   29528:	9204      	str	r2, [sp, #16]
   2952a:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2952c:	f7f2 f986 	bl	1b83c <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   29530:	2800      	cmp	r0, #0
   29532:	bfa8      	it	ge
   29534:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   29538:	b007      	add	sp, #28
   2953a:	f85d fb04 	ldr.w	pc, [sp], #4

0002953e <is_regular_addr_valid>:
{
   2953e:	b538      	push	{r3, r4, r5, lr}
   29540:	4605      	mov	r5, r0
   29542:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   29544:	f000 fc6a 	bl	29e1c <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   29548:	2d00      	cmp	r5, #0
   2954a:	db07      	blt.n	2955c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2954c:	42a8      	cmp	r0, r5
   2954e:	d905      	bls.n	2955c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   29550:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   29552:	4284      	cmp	r4, r0
   29554:	bf8c      	ite	hi
   29556:	2000      	movhi	r0, #0
   29558:	2001      	movls	r0, #1
}
   2955a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2955c:	2000      	movs	r0, #0
   2955e:	e7fc      	b.n	2955a <is_regular_addr_valid+0x1c>

00029560 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29560:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29562:	ab0b      	add	r3, sp, #44	; 0x2c
   29564:	9305      	str	r3, [sp, #20]
   29566:	9303      	str	r3, [sp, #12]
   29568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2956a:	2201      	movs	r2, #1
   2956c:	9302      	str	r3, [sp, #8]
   2956e:	2300      	movs	r3, #0
   29570:	4618      	mov	r0, r3
   29572:	e9cd 3300 	strd	r3, r3, [sp]
   29576:	f7e5 fe51 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   2957a:	b007      	add	sp, #28
   2957c:	f85d fb04 	ldr.w	pc, [sp], #4

00029580 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   29580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29582:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   29584:	2300      	movs	r3, #0
{
   29586:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   29588:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2958a:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2958c:	60a3      	str	r3, [r4, #8]
{
   2958e:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   29590:	6913      	ldr	r3, [r2, #16]
   29592:	4669      	mov	r1, sp
   29594:	aa01      	add	r2, sp, #4
   29596:	4798      	blx	r3

	while (layout_size--) {
   29598:	9b01      	ldr	r3, [sp, #4]
   2959a:	1e5a      	subs	r2, r3, #1
   2959c:	9201      	str	r2, [sp, #4]
   2959e:	b91b      	cbnz	r3, 295a8 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   295a0:	f06f 0015 	mvn.w	r0, #21
}
   295a4:	b003      	add	sp, #12
   295a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   295a8:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   295aa:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   295ac:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   295ae:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   295b0:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   295b2:	b985      	cbnz	r5, 295d6 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   295b4:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   295b6:	f8d0 c000 	ldr.w	ip, [r0]
   295ba:	4563      	cmp	r3, ip
   295bc:	bf28      	it	cs
   295be:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   295c0:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   295c4:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   295c6:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   295c8:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   295ca:	6802      	ldr	r2, [r0, #0]
   295cc:	429a      	cmp	r2, r3
   295ce:	d806      	bhi.n	295de <flash_get_page_info+0x5e>
		layout++;
   295d0:	3008      	adds	r0, #8
   295d2:	9000      	str	r0, [sp, #0]
   295d4:	e7e0      	b.n	29598 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   295d6:	1a6b      	subs	r3, r5, r1
   295d8:	fbb3 f3f7 	udiv	r3, r3, r7
   295dc:	e7eb      	b.n	295b6 <flash_get_page_info+0x36>
			return 0;
   295de:	2000      	movs	r0, #0
   295e0:	e7e0      	b.n	295a4 <flash_get_page_info+0x24>

000295e2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   295e2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   295e4:	2200      	movs	r2, #0
   295e6:	f7ff bfcb 	b.w	29580 <flash_get_page_info>

000295ea <uarte_nrfx_config_get>:
{
   295ea:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   295ec:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   295ee:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   295f2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   295f6:	2000      	movs	r0, #0
   295f8:	4770      	bx	lr

000295fa <uarte_nrfx_err_check>:
	return config->uarte_regs;
   295fa:	6843      	ldr	r3, [r0, #4]
   295fc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   295fe:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   29602:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   29606:	4770      	bx	lr

00029608 <tx_start>:
{
   29608:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2960a:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2960c:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2960e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   29612:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29616:	2200      	movs	r2, #0
   29618:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2961c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   29620:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   29624:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   29628:	6862      	ldr	r2, [r4, #4]
   2962a:	06d2      	lsls	r2, r2, #27
   2962c:	d511      	bpl.n	29652 <tx_start+0x4a>
	if (data->async) {
   2962e:	6902      	ldr	r2, [r0, #16]
   29630:	68d2      	ldr	r2, [r2, #12]
   29632:	b12a      	cbz	r2, 29640 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   29634:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   29638:	f041 0101 	orr.w	r1, r1, #1
   2963c:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   29640:	2108      	movs	r1, #8
	return config->uarte_regs;
   29642:	6842      	ldr	r2, [r0, #4]
   29644:	6812      	ldr	r2, [r2, #0]
   29646:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2964a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2964e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29652:	2201      	movs	r2, #1
   29654:	609a      	str	r2, [r3, #8]
}
   29656:	bd10      	pop	{r4, pc}

00029658 <user_callback>:
	if (data->async->user_callback) {
   29658:	6903      	ldr	r3, [r0, #16]
   2965a:	68da      	ldr	r2, [r3, #12]
   2965c:	6813      	ldr	r3, [r2, #0]
   2965e:	b10b      	cbz	r3, 29664 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   29660:	6852      	ldr	r2, [r2, #4]
   29662:	4718      	bx	r3
}
   29664:	4770      	bx	lr

00029666 <notify_uart_rx_rdy>:
{
   29666:	b570      	push	{r4, r5, r6, lr}
   29668:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2966a:	6906      	ldr	r6, [r0, #16]
{
   2966c:	4604      	mov	r4, r0
   2966e:	460d      	mov	r5, r1
	struct uart_event evt = {
   29670:	2214      	movs	r2, #20
   29672:	2100      	movs	r1, #0
   29674:	a801      	add	r0, sp, #4
   29676:	f001 fb95 	bl	2ada4 <memset>
   2967a:	2302      	movs	r3, #2
   2967c:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   29680:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   29682:	4620      	mov	r0, r4
	struct uart_event evt = {
   29684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   29686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   29688:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2968a:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2968e:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   29690:	f7ff ffe2 	bl	29658 <user_callback>
}
   29694:	b006      	add	sp, #24
   29696:	bd70      	pop	{r4, r5, r6, pc}

00029698 <rx_buf_release>:
{
   29698:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2969a:	680e      	ldr	r6, [r1, #0]
{
   2969c:	4605      	mov	r5, r0
   2969e:	460c      	mov	r4, r1
   296a0:	b086      	sub	sp, #24
	if (*buf) {
   296a2:	b17e      	cbz	r6, 296c4 <rx_buf_release+0x2c>
		struct uart_event evt = {
   296a4:	2214      	movs	r2, #20
   296a6:	2100      	movs	r1, #0
   296a8:	a801      	add	r0, sp, #4
   296aa:	f001 fb7b 	bl	2ada4 <memset>
   296ae:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   296b0:	4628      	mov	r0, r5
   296b2:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   296b6:	f88d 3004 	strb.w	r3, [sp, #4]
   296ba:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   296bc:	f7ff ffcc 	bl	29658 <user_callback>
		*buf = NULL;
   296c0:	2300      	movs	r3, #0
   296c2:	6023      	str	r3, [r4, #0]
}
   296c4:	b006      	add	sp, #24
   296c6:	bd70      	pop	{r4, r5, r6, pc}

000296c8 <notify_rx_disable>:
{
   296c8:	b510      	push	{r4, lr}
   296ca:	b086      	sub	sp, #24
   296cc:	4604      	mov	r4, r0
	struct uart_event evt = {
   296ce:	2214      	movs	r2, #20
   296d0:	2100      	movs	r1, #0
   296d2:	a801      	add	r0, sp, #4
   296d4:	f001 fb66 	bl	2ada4 <memset>
   296d8:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   296da:	4620      	mov	r0, r4
   296dc:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   296de:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   296e2:	f7ff ffb9 	bl	29658 <user_callback>
}
   296e6:	b006      	add	sp, #24
   296e8:	bd10      	pop	{r4, pc}

000296ea <uarte_nrfx_rx_buf_rsp>:
{
   296ea:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   296ec:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   296ee:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   296f0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   296f2:	f04f 0020 	mov.w	r0, #32
   296f6:	f3ef 8611 	mrs	r6, BASEPRI
   296fa:	f380 8812 	msr	BASEPRI_MAX, r0
   296fe:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   29702:	68ec      	ldr	r4, [r5, #12]
   29704:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29706:	b198      	cbz	r0, 29730 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   29708:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2970a:	b9a0      	cbnz	r0, 29736 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2970c:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2970e:	68ec      	ldr	r4, [r5, #12]
   29710:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   29712:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   29716:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2971a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2971e:	f042 0220 	orr.w	r2, r2, #32
   29722:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   29726:	f386 8811 	msr	BASEPRI, r6
   2972a:	f3bf 8f6f 	isb	sy
}
   2972e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   29730:	f06f 000c 	mvn.w	r0, #12
   29734:	e7f7      	b.n	29726 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   29736:	f06f 000f 	mvn.w	r0, #15
   2973a:	e7f4      	b.n	29726 <uarte_nrfx_rx_buf_rsp+0x3c>

0002973c <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2973c:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2973e:	68d8      	ldr	r0, [r3, #12]
   29740:	b120      	cbz	r0, 2974c <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   29742:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   29744:	68db      	ldr	r3, [r3, #12]
	return 0;
   29746:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   29748:	605a      	str	r2, [r3, #4]
	return 0;
   2974a:	4770      	bx	lr
		return -ENOTSUP;
   2974c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   29750:	4770      	bx	lr

00029752 <uarte_nrfx_poll_in>:
{
   29752:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   29754:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   29756:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   29758:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2975a:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2975c:	b960      	cbnz	r0, 29778 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2975e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   29762:	b164      	cbz	r4, 2977e <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   29764:	6992      	ldr	r2, [r2, #24]
   29766:	7812      	ldrb	r2, [r2, #0]
   29768:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2976a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2976e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29772:	2201      	movs	r2, #1
   29774:	601a      	str	r2, [r3, #0]
}
   29776:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   29778:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2977c:	e7fb      	b.n	29776 <uarte_nrfx_poll_in+0x24>
		return -1;
   2977e:	f04f 30ff 	mov.w	r0, #4294967295
   29782:	e7f8      	b.n	29776 <uarte_nrfx_poll_in+0x24>

00029784 <uarte_nrfx_rx_disable>:
{
   29784:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   29786:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   29788:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2978a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2978c:	68eb      	ldr	r3, [r5, #12]
   2978e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   29790:	b1ba      	cbz	r2, 297c2 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   29792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   29794:	b153      	cbz	r3, 297ac <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   29796:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2979a:	f023 0320 	bic.w	r3, r3, #32
   2979e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   297a2:	2300      	movs	r3, #0
   297a4:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   297a8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   297ac:	68e8      	ldr	r0, [r5, #12]
   297ae:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   297b0:	f001 f9e4 	bl	2ab7c <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   297b4:	2000      	movs	r0, #0
   297b6:	68eb      	ldr	r3, [r5, #12]
   297b8:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   297bc:	2301      	movs	r3, #1
   297be:	6063      	str	r3, [r4, #4]
}
   297c0:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   297c2:	f06f 000d 	mvn.w	r0, #13
   297c6:	e7fb      	b.n	297c0 <uarte_nrfx_rx_disable+0x3c>

000297c8 <setup_tx_cache>:
{
   297c8:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   297ca:	68c3      	ldr	r3, [r0, #12]
   297cc:	68da      	ldr	r2, [r3, #12]
   297ce:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   297d0:	1a52      	subs	r2, r2, r1
   297d2:	d00f      	beq.n	297f4 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   297d4:	2a08      	cmp	r2, #8
   297d6:	bf28      	it	cs
   297d8:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   297da:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   297dc:	68c3      	ldr	r3, [r0, #12]
   297de:	6999      	ldr	r1, [r3, #24]
   297e0:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   297e2:	68c3      	ldr	r3, [r0, #12]
   297e4:	6898      	ldr	r0, [r3, #8]
   297e6:	69d9      	ldr	r1, [r3, #28]
   297e8:	4401      	add	r1, r0
   297ea:	6998      	ldr	r0, [r3, #24]
   297ec:	f001 faa0 	bl	2ad30 <memcpy>
	return true;
   297f0:	2001      	movs	r0, #1
}
   297f2:	bd08      	pop	{r3, pc}
		return false;
   297f4:	4610      	mov	r0, r2
   297f6:	e7fc      	b.n	297f2 <setup_tx_cache+0x2a>

000297f8 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   297f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   297fa:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   297fc:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   297fe:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   29800:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   29804:	b1f1      	cbz	r1, 29844 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   29806:	2100      	movs	r1, #0
   29808:	4618      	mov	r0, r3
   2980a:	f001 facb 	bl	2ada4 <memset>
   2980e:	4603      	mov	r3, r0
   29810:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   29812:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29816:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29818:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2981a:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2981e:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   29822:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29826:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29828:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2982c:	2800      	cmp	r0, #0
   2982e:	d0fb      	beq.n	29828 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29830:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   29834:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   29838:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2983c:	b92b      	cbnz	r3, 2984a <rx_flush.isra.0+0x52>
			return rx_amount;
   2983e:	b2c0      	uxtb	r0, r0
}
   29840:	b002      	add	sp, #8
   29842:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   29844:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   29846:	4669      	mov	r1, sp
   29848:	e7e3      	b.n	29812 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2984a:	4285      	cmp	r5, r0
   2984c:	d1f7      	bne.n	2983e <rx_flush.isra.0+0x46>
   2984e:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   29850:	4293      	cmp	r3, r2
   29852:	d101      	bne.n	29858 <rx_flush.isra.0+0x60>
	return 0;
   29854:	2000      	movs	r0, #0
   29856:	e7f3      	b.n	29840 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   29858:	f813 1b01 	ldrb.w	r1, [r3], #1
   2985c:	2900      	cmp	r1, #0
   2985e:	d0f7      	beq.n	29850 <rx_flush.isra.0+0x58>
   29860:	e7ed      	b.n	2983e <rx_flush.isra.0+0x46>

00029862 <async_uart_release>:
{
   29862:	b570      	push	{r4, r5, r6, lr}
   29864:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   29866:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   29868:	f04f 0320 	mov.w	r3, #32
   2986c:	f3ef 8611 	mrs	r6, BASEPRI
   29870:	f383 8812 	msr	BASEPRI_MAX, r3
   29874:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   29878:	68d0      	ldr	r0, [r2, #12]
   2987a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2987e:	ea23 0301 	bic.w	r3, r3, r1
   29882:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   29886:	68d5      	ldr	r5, [r2, #12]
   29888:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2988c:	b973      	cbnz	r3, 298ac <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2988e:	2902      	cmp	r1, #2
   29890:	d107      	bne.n	298a2 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   29892:	2205      	movs	r2, #5
   29894:	6860      	ldr	r0, [r4, #4]
   29896:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2989a:	f7ff ffad 	bl	297f8 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2989e:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   298a2:	2200      	movs	r2, #0
	return config->uarte_regs;
   298a4:	6863      	ldr	r3, [r4, #4]
   298a6:	681b      	ldr	r3, [r3, #0]
   298a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   298ac:	f386 8811 	msr	BASEPRI, r6
   298b0:	f3bf 8f6f 	isb	sy
}
   298b4:	bd70      	pop	{r4, r5, r6, pc}

000298b6 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   298b6:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   298b8:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   298ba:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   298be:	b940      	cbnz	r0, 298d2 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   298c0:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   298c2:	079b      	lsls	r3, r3, #30
   298c4:	d406      	bmi.n	298d4 <is_tx_ready.isra.0+0x1e>
   298c6:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   298ca:	3800      	subs	r0, #0
   298cc:	bf18      	it	ne
   298ce:	2001      	movne	r0, #1
   298d0:	4770      	bx	lr
   298d2:	2001      	movs	r0, #1
}
   298d4:	4770      	bx	lr

000298d6 <start_tx_locked>:
{
   298d6:	b510      	push	{r4, lr}
   298d8:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   298da:	6840      	ldr	r0, [r0, #4]
   298dc:	f7ff ffeb 	bl	298b6 <is_tx_ready.isra.0>
   298e0:	68cb      	ldr	r3, [r1, #12]
   298e2:	b918      	cbnz	r0, 298ec <start_tx_locked+0x16>
		data->async->pending_tx = true;
   298e4:	2201      	movs	r2, #1
   298e6:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   298ea:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   298ec:	2200      	movs	r2, #0
   298ee:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   298f2:	f04f 32ff 	mov.w	r2, #4294967295
   298f6:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   298f8:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   298fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   298fe:	68cb      	ldr	r3, [r1, #12]
}
   29900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   29904:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   29908:	f7ff be7e 	b.w	29608 <tx_start>

0002990c <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2990c:	b510      	push	{r4, lr}
   2990e:	4604      	mov	r4, r0
   29910:	2200      	movs	r2, #0
   29912:	2101      	movs	r1, #1
   29914:	200b      	movs	r0, #11
   29916:	f7e7 fb8f 	bl	11038 <z_arm_irq_priority_set>
   2991a:	200b      	movs	r0, #11
   2991c:	f7e7 fb5c 	bl	10fd8 <arch_irq_enable>
   29920:	4620      	mov	r0, r4
   29922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29926:	f7f2 bced 	b.w	1c304 <uarte_instance_init.constprop.0>

0002992a <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2992a:	b510      	push	{r4, lr}
   2992c:	4604      	mov	r4, r0
   2992e:	2200      	movs	r2, #0
   29930:	2101      	movs	r1, #1
   29932:	2008      	movs	r0, #8
   29934:	f7e7 fb80 	bl	11038 <z_arm_irq_priority_set>
   29938:	2008      	movs	r0, #8
   2993a:	f7e7 fb4d 	bl	10fd8 <arch_irq_enable>
   2993e:	4620      	mov	r0, r4
   29940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29944:	f7f2 bcde 	b.w	1c304 <uarte_instance_init.constprop.0>

00029948 <rx_timeout>:
{
   29948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2994a:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2994c:	68e3      	ldr	r3, [r4, #12]
   2994e:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   29952:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   29956:	bb13      	cbnz	r3, 2999e <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   29958:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2995a:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2995c:	6873      	ldr	r3, [r6, #4]
   2995e:	681b      	ldr	r3, [r3, #0]
   29960:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   29964:	68e3      	ldr	r3, [r4, #12]
   29966:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2996a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2996c:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2996e:	bf1f      	itttt	ne
   29970:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   29972:	68e3      	ldrne	r3, [r4, #12]
   29974:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   29976:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   29978:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2997a:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2997e:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   29980:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   29982:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   29984:	da0c      	bge.n	299a0 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   29986:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2998a:	68e3      	ldr	r3, [r4, #12]
   2998c:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   29990:	4281      	cmp	r1, r0
   29992:	d80b      	bhi.n	299ac <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   29994:	2210      	movs	r2, #16
	return config->uarte_regs;
   29996:	6873      	ldr	r3, [r6, #4]
   29998:	681b      	ldr	r3, [r3, #0]
   2999a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   299a0:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   299a4:	eb02 0c01 	add.w	ip, r2, r1
   299a8:	4584      	cmp	ip, r0
   299aa:	d904      	bls.n	299b6 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   299ac:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   299ae:	2d00      	cmp	r5, #0
   299b0:	ddf0      	ble.n	29994 <rx_timeout+0x4c>
		clipped = true;
   299b2:	2701      	movs	r7, #1
   299b4:	e005      	b.n	299c2 <rx_timeout+0x7a>
	if (len > 0) {
   299b6:	2a00      	cmp	r2, #0
   299b8:	d0ec      	beq.n	29994 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   299ba:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   299be:	428a      	cmp	r2, r1
   299c0:	da12      	bge.n	299e8 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   299c2:	4629      	mov	r1, r5
   299c4:	4630      	mov	r0, r6
   299c6:	f7ff fe4e 	bl	29666 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   299ca:	68e2      	ldr	r2, [r4, #12]
   299cc:	6e13      	ldr	r3, [r2, #96]	; 0x60
   299ce:	442b      	add	r3, r5
   299d0:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   299d2:	68e2      	ldr	r2, [r4, #12]
   299d4:	6f13      	ldr	r3, [r2, #112]	; 0x70
   299d6:	442b      	add	r3, r5
   299d8:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   299da:	2f00      	cmp	r7, #0
   299dc:	d0da      	beq.n	29994 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   299de:	68e0      	ldr	r0, [r4, #12]
   299e0:	3080      	adds	r0, #128	; 0x80
   299e2:	f001 f8cb 	bl	2ab7c <z_impl_k_timer_stop>
}
   299e6:	e7d5      	b.n	29994 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   299e8:	1a52      	subs	r2, r2, r1
   299ea:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   299ec:	e7d2      	b.n	29994 <rx_timeout+0x4c>

000299ee <uarte_nrfx_tx_abort>:
{
   299ee:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   299f0:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   299f2:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   299f4:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   299f6:	68da      	ldr	r2, [r3, #12]
   299f8:	6891      	ldr	r1, [r2, #8]
   299fa:	b151      	cbz	r1, 29a12 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   299fc:	2400      	movs	r4, #0
   299fe:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   29a02:	68d8      	ldr	r0, [r3, #12]
   29a04:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   29a06:	f001 f8b9 	bl	2ab7c <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29a0a:	2301      	movs	r3, #1
	return 0;
   29a0c:	4620      	mov	r0, r4
   29a0e:	60eb      	str	r3, [r5, #12]
}
   29a10:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   29a12:	f06f 000d 	mvn.w	r0, #13
   29a16:	e7fb      	b.n	29a10 <uarte_nrfx_tx_abort+0x22>

00029a18 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   29a18:	6b43      	ldr	r3, [r0, #52]	; 0x34
   29a1a:	6818      	ldr	r0, [r3, #0]
   29a1c:	f7ff bfe7 	b.w	299ee <uarte_nrfx_tx_abort>

00029a20 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29a20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29a22:	ab0b      	add	r3, sp, #44	; 0x2c
   29a24:	9305      	str	r3, [sp, #20]
   29a26:	9303      	str	r3, [sp, #12]
   29a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29a2a:	9302      	str	r3, [sp, #8]
   29a2c:	2300      	movs	r3, #0
   29a2e:	4618      	mov	r0, r3
   29a30:	e9cd 3300 	strd	r3, r3, [sp]
   29a34:	f7e5 fbf2 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   29a38:	b007      	add	sp, #28
   29a3a:	f85d fb04 	ldr.w	pc, [sp], #4

00029a3e <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   29a3e:	2000      	movs	r0, #0
   29a40:	4770      	bx	lr

00029a42 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   29a42:	b538      	push	{r3, r4, r5, lr}
   29a44:	460c      	mov	r4, r1
   29a46:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   29a48:	f7e9 feb2 	bl	137b0 <bt_is_ready>
   29a4c:	b128      	cbz	r0, 29a5a <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   29a4e:	4629      	mov	r1, r5
   29a50:	4620      	mov	r0, r4
}
   29a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   29a56:	f7e9 b8b9 	b.w	12bcc <bt_hci_le_rand>
}
   29a5a:	f06f 000a 	mvn.w	r0, #10
   29a5e:	bd38      	pop	{r3, r4, r5, pc}

00029a60 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   29a60:	4608      	mov	r0, r1
   29a62:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   29a64:	4611      	mov	r1, r2
   29a66:	f7f3 fe03 	bl	1d670 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   29a6a:	2800      	cmp	r0, #0
	}

	return 0;
}
   29a6c:	bf18      	it	ne
   29a6e:	f06f 0004 	mvnne.w	r0, #4
   29a72:	bd08      	pop	{r3, pc}

00029a74 <entropy_psa_crypto_rng_init>:
{
   29a74:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   29a76:	f000 f921 	bl	29cbc <psa_crypto_init>
		return -EIO;
   29a7a:	2800      	cmp	r0, #0
}
   29a7c:	bf18      	it	ne
   29a7e:	f06f 0004 	mvnne.w	r0, #4
   29a82:	bd08      	pop	{r3, pc}

00029a84 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   29a84:	4770      	bx	lr

00029a86 <sys_clock_cycle_get_32>:
{
   29a86:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   29a88:	f7f3 fa26 	bl	1ced8 <z_nrf_rtc_timer_read>
}
   29a8c:	bd08      	pop	{r3, pc}

00029a8e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   29a8e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   29a90:	6843      	ldr	r3, [r0, #4]
   29a92:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   29a94:	7a05      	ldrb	r5, [r0, #8]
   29a96:	6844      	ldr	r4, [r0, #4]
   29a98:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   29a9c:	42a3      	cmp	r3, r4
   29a9e:	d302      	bcc.n	29aa6 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   29aa0:	f06f 0001 	mvn.w	r0, #1
}
   29aa4:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   29aa6:	795c      	ldrb	r4, [r3, #5]
   29aa8:	428c      	cmp	r4, r1
   29aaa:	d001      	beq.n	29ab0 <pinctrl_lookup_state+0x22>
		(*state)++;
   29aac:	3308      	adds	r3, #8
   29aae:	e7f0      	b.n	29a92 <pinctrl_lookup_state+0x4>
			return 0;
   29ab0:	2000      	movs	r0, #0
   29ab2:	e7f7      	b.n	29aa4 <pinctrl_lookup_state+0x16>

00029ab4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   29ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ab8:	4615      	mov	r5, r2
   29aba:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   29abc:	f04f 0901 	mov.w	r9, #1
   29ac0:	b085      	sub	sp, #20
   29ac2:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   29ac6:	45d0      	cmp	r8, sl
   29ac8:	d103      	bne.n	29ad2 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   29aca:	2000      	movs	r0, #0
}
   29acc:	b005      	add	sp, #20
   29ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   29ad2:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   29ad6:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   29ada:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   29ade:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   29ae0:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   29ae4:	bf08      	it	eq
   29ae6:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   29aea:	2b22      	cmp	r3, #34	; 0x22
   29aec:	f200 8091 	bhi.w	29c12 <pinctrl_configure_pins+0x15e>
   29af0:	e8df f003 	tbb	[pc, r3]
   29af4:	38231e12 	.word	0x38231e12
   29af8:	8f383426 	.word	0x8f383426
   29afc:	3b8f8f8f 	.word	0x3b8f8f8f
   29b00:	8f8f8f65 	.word	0x8f8f8f65
   29b04:	8f8f8f8f 	.word	0x8f8f8f8f
   29b08:	71688f8f 	.word	0x71688f8f
   29b0c:	8f8f7774 	.word	0x8f8f7774
   29b10:	83807a8f 	.word	0x83807a8f
   29b14:	8986      	.short	0x8986
   29b16:	8c          	.byte	0x8c
   29b17:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   29b18:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29b1c:	a803      	add	r0, sp, #12
   29b1e:	9403      	str	r4, [sp, #12]
   29b20:	f7f3 fc12 	bl	1d348 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   29b24:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   29b26:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   29b28:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   29b2c:	6083      	str	r3, [r0, #8]
   29b2e:	e002      	b.n	29b36 <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   29b30:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   29b34:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   29b36:	46b3      	mov	fp, r6
   29b38:	e01e      	b.n	29b78 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   29b3a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   29b3e:	e7ed      	b.n	29b1c <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   29b40:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   29b42:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29b46:	a803      	add	r0, sp, #12
   29b48:	9403      	str	r4, [sp, #12]
   29b4a:	f7f3 fbfd 	bl	1d348 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   29b4e:	9b03      	ldr	r3, [sp, #12]
   29b50:	f04f 0b01 	mov.w	fp, #1
   29b54:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   29b58:	60c3      	str	r3, [r0, #12]
   29b5a:	e00d      	b.n	29b78 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   29b5c:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   29b60:	2601      	movs	r6, #1
   29b62:	e7f0      	b.n	29b46 <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   29b64:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   29b68:	e7e4      	b.n	29b34 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   29b6a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   29b6e:	2f00      	cmp	r7, #0
   29b70:	d1e0      	bne.n	29b34 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   29b72:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   29b74:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   29b76:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   29b78:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29b7c:	a803      	add	r0, sp, #12
   29b7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   29b82:	2a00      	cmp	r2, #0
   29b84:	bf1c      	itt	ne
   29b86:	2601      	movne	r6, #1
   29b88:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   29b8c:	9301      	str	r3, [sp, #4]
   29b8e:	9403      	str	r4, [sp, #12]
   29b90:	f7f3 fbda 	bl	1d348 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   29b94:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   29b96:	9b01      	ldr	r3, [sp, #4]
   29b98:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   29b9c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   29ba0:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   29ba4:	023b      	lsls	r3, r7, #8
   29ba6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   29baa:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   29bae:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   29bb2:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   29bb4:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   29bb8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   29bbc:	e783      	b.n	29ac6 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   29bbe:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   29bc2:	e7d4      	b.n	29b6e <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   29bc4:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   29bc8:	f8da 3000 	ldr.w	r3, [sl]
   29bcc:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   29bd0:	2b00      	cmp	r3, #0
   29bd2:	d0c5      	beq.n	29b60 <pinctrl_configure_pins+0xac>
   29bd4:	e7a2      	b.n	29b1c <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   29bd6:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   29bda:	e7f5      	b.n	29bc8 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   29bdc:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   29be0:	e7f2      	b.n	29bc8 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   29be2:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   29be6:	e7ef      	b.n	29bc8 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   29be8:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   29bec:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   29bee:	f04f 0b00 	mov.w	fp, #0
   29bf2:	e7c1      	b.n	29b78 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   29bf4:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   29bf8:	e790      	b.n	29b1c <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   29bfa:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   29bfe:	e7f5      	b.n	29bec <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   29c00:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   29c04:	e7f2      	b.n	29bec <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   29c06:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   29c0a:	e7ef      	b.n	29bec <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   29c0c:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   29c10:	e7ec      	b.n	29bec <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   29c12:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29c16:	e759      	b.n	29acc <pinctrl_configure_pins+0x18>

00029c18 <mbox_nrf_register_callback>:
{
   29c18:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   29c1a:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   29c1c:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   29c1e:	bf9f      	itttt	ls
   29c20:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   29c24:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   29c28:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   29c2a:	2000      	movls	r0, #0
		return -EINVAL;
   29c2c:	bf88      	it	hi
   29c2e:	f06f 0015 	mvnhi.w	r0, #21
}
   29c32:	bd10      	pop	{r4, pc}

00029c34 <mbox_nrf_mtu_get>:
}
   29c34:	2000      	movs	r0, #0
   29c36:	4770      	bx	lr

00029c38 <mbox_nrf_max_channels_get>:
}
   29c38:	2010      	movs	r0, #16
   29c3a:	4770      	bx	lr

00029c3c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29c3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29c3e:	ab0b      	add	r3, sp, #44	; 0x2c
   29c40:	9305      	str	r3, [sp, #20]
   29c42:	9303      	str	r3, [sp, #12]
   29c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29c46:	2202      	movs	r2, #2
   29c48:	9302      	str	r3, [sp, #8]
   29c4a:	2300      	movs	r3, #0
   29c4c:	4618      	mov	r0, r3
   29c4e:	e9cd 3300 	strd	r3, r3, [sp]
   29c52:	f7e5 fae3 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   29c56:	b007      	add	sp, #28
   29c58:	f85d fb04 	ldr.w	pc, [sp], #4

00029c5c <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   29c5c:	2000      	movs	r0, #0
   29c5e:	4770      	bx	lr

00029c60 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   29c60:	2300      	movs	r3, #0
{
   29c62:	b570      	push	{r4, r5, r6, lr}
   29c64:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   29c66:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   29c6a:	ab03      	add	r3, sp, #12
   29c6c:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   29c6e:	2304      	movs	r3, #4
{
   29c70:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   29c72:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   29c74:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   29c76:	b169      	cbz	r1, 29c94 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   29c78:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   29c7a:	680b      	ldr	r3, [r1, #0]
   29c7c:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   29c7e:	684b      	ldr	r3, [r1, #4]
   29c80:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   29c82:	2101      	movs	r1, #1
   29c84:	2041      	movs	r0, #65	; 0x41
   29c86:	f7f3 fd31 	bl	1d6ec <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   29c8a:	1e05      	subs	r5, r0, #0
   29c8c:	dc04      	bgt.n	29c98 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   29c8e:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   29c90:	b008      	add	sp, #32
   29c92:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   29c94:	2601      	movs	r6, #1
   29c96:	e7f4      	b.n	29c82 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   29c98:	1e23      	subs	r3, r4, #0
   29c9a:	bf18      	it	ne
   29c9c:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   29c9e:	2100      	movs	r1, #0
   29ca0:	e9cd 4300 	strd	r4, r3, [sp]
   29ca4:	aa04      	add	r2, sp, #16
   29ca6:	4633      	mov	r3, r6
   29ca8:	f7f3 fd04 	bl	1d6b4 <psa_call>
   29cac:	4604      	mov	r4, r0
    psa_close(handle);
   29cae:	4628      	mov	r0, r5
   29cb0:	f7f3 fd2a 	bl	1d708 <psa_close>
    if (status < PSA_SUCCESS) {
   29cb4:	2c00      	cmp	r4, #0
   29cb6:	dbea      	blt.n	29c8e <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   29cb8:	4620      	mov	r0, r4
   29cba:	e7e9      	b.n	29c90 <tfm_platform_ioctl+0x30>

00029cbc <psa_crypto_init>:
}
   29cbc:	2000      	movs	r0, #0
   29cbe:	4770      	bx	lr

00029cc0 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   29cc0:	b510      	push	{r4, lr}
   29cc2:	b088      	sub	sp, #32
   29cc4:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   29cc6:	ab05      	add	r3, sp, #20
   29cc8:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   29cca:	230c      	movs	r3, #12
   29ccc:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   29cce:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   29cd0:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   29cd4:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   29cd8:	eb0d 0103 	add.w	r1, sp, r3
   29cdc:	aa03      	add	r2, sp, #12
   29cde:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   29ce0:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   29ce4:	f7ff ffbc 	bl	29c60 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   29ce8:	9b00      	ldr	r3, [sp, #0]
   29cea:	6023      	str	r3, [r4, #0]

	return ret;
}
   29cec:	b008      	add	sp, #32
   29cee:	bd10      	pop	{r4, pc}

00029cf0 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   29cf0:	2300      	movs	r3, #0
{
   29cf2:	b510      	push	{r4, lr}
   29cf4:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   29cf6:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   29cfa:	ab05      	add	r3, sp, #20
   29cfc:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   29cfe:	230c      	movs	r3, #12
   29d00:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   29d02:	2304      	movs	r3, #4
{
   29d04:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   29d06:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   29d08:	aa03      	add	r2, sp, #12
   29d0a:	eb0d 0103 	add.w	r1, sp, r3
   29d0e:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   29d10:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   29d12:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   29d16:	f7ff ffa3 	bl	29c60 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   29d1a:	9b00      	ldr	r3, [sp, #0]
   29d1c:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   29d1e:	b008      	add	sp, #32
   29d20:	bd10      	pop	{r4, pc}

00029d22 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   29d22:	f7f3 bcff 	b.w	1d724 <SystemCoreClockUpdate>

00029d26 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   29d26:	4700      	bx	r0

00029d28 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   29d28:	f000 bef6 	b.w	2ab18 <z_impl_k_busy_wait>

00029d2c <nrf_gpio_pin_present_check>:
    switch (port)
   29d2c:	0943      	lsrs	r3, r0, #5
   29d2e:	d00b      	beq.n	29d48 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   29d30:	2b01      	cmp	r3, #1
   29d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29d36:	bf18      	it	ne
   29d38:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   29d3a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   29d3e:	fa23 f000 	lsr.w	r0, r3, r0
}
   29d42:	f000 0001 	and.w	r0, r0, #1
   29d46:	4770      	bx	lr
    switch (port)
   29d48:	f04f 33ff 	mov.w	r3, #4294967295
   29d4c:	e7f5      	b.n	29d3a <nrf_gpio_pin_present_check+0xe>

00029d4e <pin_is_task_output>:
{
   29d4e:	b508      	push	{r3, lr}
   29d50:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   29d52:	f7f3 ff69 	bl	1dc28 <pin_is_output>
   29d56:	b110      	cbz	r0, 29d5e <pin_is_task_output+0x10>
   29d58:	4610      	mov	r0, r2
   29d5a:	f7f3 ff4f 	bl	1dbfc <pin_in_use_by_te>
}
   29d5e:	f000 0001 	and.w	r0, r0, #1
   29d62:	bd08      	pop	{r3, pc}

00029d64 <nrf_gpio_reconfigure>:
{
   29d64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29d68:	4617      	mov	r7, r2
   29d6a:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   29d6e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29d70:	a801      	add	r0, sp, #4
{
   29d72:	460c      	mov	r4, r1
   29d74:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29d76:	f7f3 ffdb 	bl	1dd30 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29d7a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29d7c:	1e39      	subs	r1, r7, #0
   29d7e:	bf18      	it	ne
   29d80:	2101      	movne	r1, #1
   29d82:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29d86:	1e23      	subs	r3, r4, #0
   29d88:	bf18      	it	ne
   29d8a:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29d8c:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29d8e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29d92:	bf14      	ite	ne
   29d94:	210c      	movne	r1, #12
   29d96:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29d98:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29d9a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29d9e:	bf14      	ite	ne
   29da0:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   29da4:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29da6:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29daa:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29dae:	bf14      	ite	ne
   29db0:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   29db4:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29db6:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29dba:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   29dbc:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29dc0:	b104      	cbz	r4, 29dc4 <nrf_gpio_reconfigure+0x60>
   29dc2:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   29dc4:	b10f      	cbz	r7, 29dca <nrf_gpio_reconfigure+0x66>
   29dc6:	783f      	ldrb	r7, [r7, #0]
   29dc8:	007f      	lsls	r7, r7, #1
   29dca:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   29dcc:	b10e      	cbz	r6, 29dd2 <nrf_gpio_reconfigure+0x6e>
   29dce:	7836      	ldrb	r6, [r6, #0]
   29dd0:	00b6      	lsls	r6, r6, #2
   29dd2:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   29dd4:	b18d      	cbz	r5, 29dfa <nrf_gpio_reconfigure+0x96>
   29dd6:	7829      	ldrb	r1, [r5, #0]
   29dd8:	0209      	lsls	r1, r1, #8
   29dda:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   29ddc:	f1b8 0f00 	cmp.w	r8, #0
   29de0:	d003      	beq.n	29dea <nrf_gpio_reconfigure+0x86>
   29de2:	f898 8000 	ldrb.w	r8, [r8]
   29de6:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29dea:	4321      	orrs	r1, r4
   29dec:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   29df0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   29df4:	b002      	add	sp, #8
   29df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   29dfa:	4629      	mov	r1, r5
   29dfc:	e7ed      	b.n	29dda <nrf_gpio_reconfigure+0x76>

00029dfe <nrf_gpio_cfg_sense_set>:
{
   29dfe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29e00:	f10d 030f 	add.w	r3, sp, #15
   29e04:	9301      	str	r3, [sp, #4]
   29e06:	2300      	movs	r3, #0
{
   29e08:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29e0c:	461a      	mov	r2, r3
   29e0e:	4619      	mov	r1, r3
   29e10:	9300      	str	r3, [sp, #0]
   29e12:	f7ff ffa7 	bl	29d64 <nrf_gpio_reconfigure>
}
   29e16:	b005      	add	sp, #20
   29e18:	f85d fb04 	ldr.w	pc, [sp], #4

00029e1c <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   29e1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   29e20:	4770      	bx	lr

00029e22 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   29e22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   29e26:	4770      	bx	lr

00029e28 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   29e28:	f44f 7080 	mov.w	r0, #256	; 0x100
   29e2c:	4770      	bx	lr

00029e2e <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   29e2e:	2100      	movs	r1, #0
   29e30:	f7f4 bcd0 	b.w	1e7d4 <nrf_gpio_cfg.constprop.0>

00029e34 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   29e34:	2302      	movs	r3, #2
   29e36:	f7f4 bc09 	b.w	1e64c <qspi_xfer>

00029e3a <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   29e3a:	2303      	movs	r3, #3
   29e3c:	f7f4 bc06 	b.w	1e64c <qspi_xfer>

00029e40 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   29e40:	2100      	movs	r1, #0
   29e42:	2002      	movs	r0, #2
   29e44:	f7f4 bf28 	b.w	1ec98 <nrfx_qspi_erase>

00029e48 <nrf_gpio_pin_clear>:
{
   29e48:	b507      	push	{r0, r1, r2, lr}
   29e4a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29e4c:	a801      	add	r0, sp, #4
   29e4e:	f7f4 ff9d 	bl	1ed8c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   29e52:	2301      	movs	r3, #1
   29e54:	9a01      	ldr	r2, [sp, #4]
   29e56:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   29e58:	60c3      	str	r3, [r0, #12]
}
   29e5a:	b003      	add	sp, #12
   29e5c:	f85d fb04 	ldr.w	pc, [sp], #4

00029e60 <nrf_gpio_pin_set>:
{
   29e60:	b507      	push	{r0, r1, r2, lr}
   29e62:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29e64:	a801      	add	r0, sp, #4
   29e66:	f7f4 ff91 	bl	1ed8c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   29e6a:	2301      	movs	r3, #1
   29e6c:	9a01      	ldr	r2, [sp, #4]
   29e6e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   29e70:	6083      	str	r3, [r0, #8]
}
   29e72:	b003      	add	sp, #12
   29e74:	f85d fb04 	ldr.w	pc, [sp], #4

00029e78 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   29e78:	7f83      	ldrb	r3, [r0, #30]
   29e7a:	075a      	lsls	r2, r3, #29
   29e7c:	d40b      	bmi.n	29e96 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   29e7e:	7fc0      	ldrb	r0, [r0, #31]
   29e80:	28ff      	cmp	r0, #255	; 0xff
   29e82:	d008      	beq.n	29e96 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   29e84:	079b      	lsls	r3, r3, #30
   29e86:	bf58      	it	pl
   29e88:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   29e8c:	b909      	cbnz	r1, 29e92 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   29e8e:	f7ff bfdb 	b.w	29e48 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   29e92:	f7ff bfe5 	b.w	29e60 <nrf_gpio_pin_set>
}
   29e96:	4770      	bx	lr

00029e98 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   29e98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29e9c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29e9e:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   29ea0:	4698      	mov	r8, r3
   29ea2:	460f      	mov	r7, r1
   29ea4:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29ea6:	f7f4 ff71 	bl	1ed8c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   29eaa:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   29eac:	f89d 4020 	ldrb.w	r4, [sp, #32]
   29eb0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   29eb4:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   29eb6:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   29eba:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   29ebe:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   29ec2:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   29ec6:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   29eca:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   29ecc:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   29ed0:	b002      	add	sp, #8
   29ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029ed6 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   29ed6:	1c43      	adds	r3, r0, #1
{
   29ed8:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   29eda:	d005      	beq.n	29ee8 <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   29edc:	2300      	movs	r3, #0
   29ede:	2201      	movs	r2, #1
   29ee0:	4619      	mov	r1, r3
   29ee2:	9300      	str	r3, [sp, #0]
   29ee4:	f7ff ffd8 	bl	29e98 <nrf_gpio_cfg.constprop.0>
}
   29ee8:	b003      	add	sp, #12
   29eea:	f85d fb04 	ldr.w	pc, [sp], #4

00029eee <metal_device_open>:
{
   29eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29ef0:	460c      	mov	r4, r1
   29ef2:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   29ef4:	4606      	mov	r6, r0
   29ef6:	b918      	cbnz	r0, 29f00 <metal_device_open+0x12>
		return -EINVAL;
   29ef8:	f06f 0015 	mvn.w	r0, #21
}
   29efc:	b002      	add	sp, #8
   29efe:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   29f00:	f7df fa83 	bl	940a <strlen>
   29f04:	2800      	cmp	r0, #0
   29f06:	d0f7      	beq.n	29ef8 <metal_device_open+0xa>
   29f08:	2c00      	cmp	r4, #0
   29f0a:	d0f5      	beq.n	29ef8 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   29f0c:	4620      	mov	r0, r4
   29f0e:	f7df fa7c 	bl	940a <strlen>
   29f12:	2800      	cmp	r0, #0
   29f14:	d0f0      	beq.n	29ef8 <metal_device_open+0xa>
   29f16:	2d00      	cmp	r5, #0
   29f18:	d0ee      	beq.n	29ef8 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   29f1a:	4630      	mov	r0, r6
   29f1c:	a901      	add	r1, sp, #4
   29f1e:	f7f5 fa4b 	bl	1f3b8 <metal_bus_find>
	if (error)
   29f22:	2800      	cmp	r0, #0
   29f24:	d1ea      	bne.n	29efc <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   29f26:	9801      	ldr	r0, [sp, #4]
   29f28:	6883      	ldr	r3, [r0, #8]
   29f2a:	b12b      	cbz	r3, 29f38 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   29f2c:	462a      	mov	r2, r5
   29f2e:	4621      	mov	r1, r4
}
   29f30:	b002      	add	sp, #8
   29f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   29f36:	4718      	bx	r3
		return -ENODEV;
   29f38:	f06f 0012 	mvn.w	r0, #18
   29f3c:	e7de      	b.n	29efc <metal_device_open+0xe>

00029f3e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   29f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29f42:	b089      	sub	sp, #36	; 0x24
   29f44:	9e10      	ldr	r6, [sp, #64]	; 0x40
   29f46:	4604      	mov	r4, r0
   29f48:	4689      	mov	r9, r1
   29f4a:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   29f4c:	2100      	movs	r1, #0
   29f4e:	2220      	movs	r2, #32
   29f50:	4668      	mov	r0, sp
{
   29f52:	461f      	mov	r7, r3
   29f54:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   29f56:	f000 ff25 	bl	2ada4 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   29f5a:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   29f5c:	bf97      	itett	ls
   29f5e:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   29f60:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   29f64:	40b3      	lslls	r3, r6
   29f66:	f103 33ff 	addls.w	r3, r3, #4294967295
   29f6a:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   29f6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   29f6e:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   29f72:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   29f76:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   29f78:	3418      	adds	r4, #24
   29f7a:	b145      	cbz	r5, 29f8e <metal_io_init+0x50>
   29f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   29f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   29f80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   29f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   29f88:	b009      	add	sp, #36	; 0x24
   29f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   29f8e:	466d      	mov	r5, sp
   29f90:	e7f4      	b.n	29f7c <metal_io_init+0x3e>

00029f92 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   29f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   29f94:	6804      	ldr	r4, [r0, #0]
		: NULL);
   29f96:	1c66      	adds	r6, r4, #1
   29f98:	d031      	beq.n	29ffe <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   29f9a:	6885      	ldr	r5, [r0, #8]
   29f9c:	42a9      	cmp	r1, r5
   29f9e:	d22e      	bcs.n	29ffe <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   29fa0:	1864      	adds	r4, r4, r1
   29fa2:	d02c      	beq.n	29ffe <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   29fa4:	185e      	adds	r6, r3, r1
   29fa6:	42ae      	cmp	r6, r5
		len = io->size - offset;
   29fa8:	bf88      	it	hi
   29faa:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   29fac:	6a05      	ldr	r5, [r0, #32]
   29fae:	b135      	cbz	r5, 29fbe <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   29fb0:	9300      	str	r3, [sp, #0]
   29fb2:	2305      	movs	r3, #5
   29fb4:	47a8      	blx	r5
   29fb6:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   29fb8:	4618      	mov	r0, r3
   29fba:	b002      	add	sp, #8
   29fbc:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   29fbe:	f3bf 8f5b 	dmb	ish
		while ( len && (
   29fc2:	4619      	mov	r1, r3
   29fc4:	1aa4      	subs	r4, r4, r2
   29fc6:	1910      	adds	r0, r2, r4
   29fc8:	b119      	cbz	r1, 29fd2 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   29fca:	ea40 0502 	orr.w	r5, r0, r2
   29fce:	07ad      	lsls	r5, r5, #30
   29fd0:	d10a      	bne.n	29fe8 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   29fd2:	2903      	cmp	r1, #3
   29fd4:	dc0d      	bgt.n	29ff2 <metal_io_block_read+0x60>
   29fd6:	3801      	subs	r0, #1
   29fd8:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   29fda:	428a      	cmp	r2, r1
   29fdc:	d0ec      	beq.n	29fb8 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   29fde:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   29fe2:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   29fe6:	e7f8      	b.n	29fda <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   29fe8:	7800      	ldrb	r0, [r0, #0]
			len--;
   29fea:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   29fec:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   29ff0:	e7e9      	b.n	29fc6 <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   29ff2:	f850 4b04 	ldr.w	r4, [r0], #4
   29ff6:	3904      	subs	r1, #4
   29ff8:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   29ffc:	e7e9      	b.n	29fd2 <metal_io_block_read+0x40>
		return -ERANGE;
   29ffe:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2a002:	e7d9      	b.n	29fb8 <metal_io_block_read+0x26>

0002a004 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2a004:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a006:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2a008:	1c65      	adds	r5, r4, #1
   2a00a:	d032      	beq.n	2a072 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2a00c:	6885      	ldr	r5, [r0, #8]
   2a00e:	42a9      	cmp	r1, r5
   2a010:	d22f      	bcs.n	2a072 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2a012:	1864      	adds	r4, r4, r1
   2a014:	d02d      	beq.n	2a072 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2a016:	185e      	adds	r6, r3, r1
   2a018:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2a01a:	bf88      	it	hi
   2a01c:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2a01e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2a020:	b1cd      	cbz	r5, 2a056 <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   2a022:	9300      	str	r3, [sp, #0]
   2a024:	2305      	movs	r3, #5
   2a026:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2a028:	b002      	add	sp, #8
   2a02a:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   2a02c:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   2a030:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2a032:	7005      	strb	r5, [r0, #0]
			len--;
   2a034:	4615      	mov	r5, r2
   2a036:	18a0      	adds	r0, r4, r2
		while ( len && (
   2a038:	b119      	cbz	r1, 2a042 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   2a03a:	ea40 0602 	orr.w	r6, r0, r2
   2a03e:	07b6      	lsls	r6, r6, #30
   2a040:	d1f4      	bne.n	2a02c <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2a042:	2903      	cmp	r1, #3
   2a044:	dc0a      	bgt.n	2a05c <metal_io_block_write+0x58>
   2a046:	3d01      	subs	r5, #1
   2a048:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   2a04a:	4288      	cmp	r0, r1
   2a04c:	d10c      	bne.n	2a068 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   2a04e:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2a052:	4618      	mov	r0, r3
   2a054:	e7e8      	b.n	2a028 <metal_io_block_write+0x24>
   2a056:	4619      	mov	r1, r3
   2a058:	1aa4      	subs	r4, r4, r2
   2a05a:	e7eb      	b.n	2a034 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2a05c:	f855 2b04 	ldr.w	r2, [r5], #4
   2a060:	3904      	subs	r1, #4
   2a062:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   2a066:	e7ec      	b.n	2a042 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   2a068:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   2a06c:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   2a070:	e7eb      	b.n	2a04a <metal_io_block_write+0x46>
		return -ERANGE;
   2a072:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2a076:	e7d7      	b.n	2a028 <metal_io_block_write+0x24>

0002a078 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2a078:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a07a:	6804      	ldr	r4, [r0, #0]
   2a07c:	461d      	mov	r5, r3
		: NULL);
   2a07e:	1c66      	adds	r6, r4, #1
   2a080:	d02b      	beq.n	2a0da <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2a082:	6883      	ldr	r3, [r0, #8]
   2a084:	4299      	cmp	r1, r3
   2a086:	d228      	bcs.n	2a0da <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   2a088:	1864      	adds	r4, r4, r1
   2a08a:	d026      	beq.n	2a0da <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   2a08c:	186e      	adds	r6, r5, r1
   2a08e:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   2a090:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   2a092:	bf88      	it	hi
   2a094:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   2a096:	b12e      	cbz	r6, 2a0a4 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   2a098:	2305      	movs	r3, #5
   2a09a:	9500      	str	r5, [sp, #0]
   2a09c:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   2a09e:	4628      	mov	r0, r5
}
   2a0a0:	b002      	add	sp, #8
   2a0a2:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   2a0a4:	4621      	mov	r1, r4
   2a0a6:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2a0a8:	b94b      	cbnz	r3, 2a0be <metal_io_block_set+0x46>
   2a0aa:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   2a0ac:	4299      	cmp	r1, r3
   2a0ae:	d111      	bne.n	2a0d4 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   2a0b0:	f3bf 8f5b 	dmb	ish
   2a0b4:	e7f3      	b.n	2a09e <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   2a0b6:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2a0ba:	3b01      	subs	r3, #1
   2a0bc:	e7f4      	b.n	2a0a8 <metal_io_block_set+0x30>
   2a0be:	0788      	lsls	r0, r1, #30
   2a0c0:	d1f9      	bne.n	2a0b6 <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2a0c2:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   2a0c6:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2a0c8:	2b03      	cmp	r3, #3
   2a0ca:	ddee      	ble.n	2a0aa <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   2a0cc:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2a0d0:	3b04      	subs	r3, #4
   2a0d2:	e7f9      	b.n	2a0c8 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2a0d4:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   2a0d8:	e7e8      	b.n	2a0ac <metal_io_block_set+0x34>
		return -ERANGE;
   2a0da:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2a0de:	e7df      	b.n	2a0a0 <metal_io_block_set+0x28>

0002a0e0 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2a0e0:	2000      	movs	r0, #0
   2a0e2:	4770      	bx	lr

0002a0e4 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2a0e4:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2a0e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2a0e8:	4602      	mov	r2, r0
   2a0ea:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   2a0ec:	b984      	cbnz	r4, 2a110 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   2a0ee:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   2a0f0:	291f      	cmp	r1, #31
   2a0f2:	bf98      	it	ls
   2a0f4:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   2a0f8:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   2a0fa:	b161      	cbz	r1, 2a116 <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   2a0fc:	6880      	ldr	r0, [r0, #8]
   2a0fe:	4283      	cmp	r3, r0
   2a100:	d209      	bcs.n	2a116 <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   2a102:	6910      	ldr	r0, [r2, #16]
   2a104:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2a106:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2a10a:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   2a10c:	bc10      	pop	{r4}
   2a10e:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   2a110:	4623      	mov	r3, r4
}
   2a112:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2a114:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2a116:	f04f 30ff 	mov.w	r0, #4294967295
   2a11a:	e7f7      	b.n	2a10c <metal_io_phys+0x28>

0002a11c <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2a11c:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   2a11e:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   2a120:	4605      	mov	r5, r0
   2a122:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2a124:	b9e3      	cbnz	r3, 2a160 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2a126:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2a128:	1c62      	adds	r2, r4, #1
   2a12a:	bf09      	itett	eq
   2a12c:	6843      	ldreq	r3, [r0, #4]
   2a12e:	400c      	andne	r4, r1
   2a130:	681c      	ldreq	r4, [r3, #0]
   2a132:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   2a134:	4621      	mov	r1, r4
   2a136:	4628      	mov	r0, r5
   2a138:	f7ff ffd4 	bl	2a0e4 <metal_io_phys>
   2a13c:	4286      	cmp	r6, r0
   2a13e:	d007      	beq.n	2a150 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   2a140:	692b      	ldr	r3, [r5, #16]
   2a142:	3301      	adds	r3, #1
   2a144:	441c      	add	r4, r3
		} while (offset < io->size);
   2a146:	68ab      	ldr	r3, [r5, #8]
   2a148:	429c      	cmp	r4, r3
   2a14a:	d3f3      	bcc.n	2a134 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   2a14c:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2a150:	6828      	ldr	r0, [r5, #0]
		: NULL);
   2a152:	1c43      	adds	r3, r0, #1
   2a154:	d007      	beq.n	2a166 <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2a156:	68ab      	ldr	r3, [r5, #8]
   2a158:	42a3      	cmp	r3, r4
   2a15a:	d904      	bls.n	2a166 <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   2a15c:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   2a15e:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   2a160:	4798      	blx	r3
   2a162:	4604      	mov	r4, r0
   2a164:	e7f4      	b.n	2a150 <metal_io_phys_to_virt+0x34>
		: NULL);
   2a166:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2a168:	e7f9      	b.n	2a15e <metal_io_phys_to_virt+0x42>

0002a16a <virtqueue_create>:
{
   2a16a:	b530      	push	{r4, r5, lr}
   2a16c:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   2a16e:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   2a172:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   2a174:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   2a176:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   2a178:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   2a17a:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   2a17c:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2a17e:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   2a180:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2a182:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2a186:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   2a18a:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2a18e:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2a190:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2a192:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   2a196:	1c6a      	adds	r2, r5, #1
   2a198:	4413      	add	r3, r2
   2a19a:	426d      	negs	r5, r5
   2a19c:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   2a19e:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2a1a0:	6983      	ldr	r3, [r0, #24]
   2a1a2:	b953      	cbnz	r3, 2a1ba <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   2a1a4:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   2a1a6:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   2a1a8:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   2a1aa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   2a1ae:	db06      	blt.n	2a1be <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2a1b0:	2300      	movs	r3, #0
   2a1b2:	7393      	strb	r3, [r2, #14]
   2a1b4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2a1b8:	73d3      	strb	r3, [r2, #15]
}
   2a1ba:	2000      	movs	r0, #0
   2a1bc:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   2a1be:	3301      	adds	r3, #1
   2a1c0:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2a1c2:	e7f0      	b.n	2a1a6 <virtqueue_create+0x3c>

0002a1c4 <virtqueue_add_buffer>:
{
   2a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   2a1c8:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   2a1cc:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2a1ce:	4655      	mov	r5, sl
   2a1d0:	2600      	movs	r6, #0
{
   2a1d2:	b085      	sub	sp, #20
	needed = readable + writable;
   2a1d4:	eb02 0803 	add.w	r8, r2, r3
{
   2a1d8:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   2a1da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2a1dc:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   2a1e0:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   2a1e4:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2a1e6:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   2a1ea:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2a1ee:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2a1f0:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   2a1f2:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2a1f4:	45b0      	cmp	r8, r6
   2a1f6:	dc1a      	bgt.n	2a22e <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   2a1f8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   2a1fa:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2a1fc:	eba3 030b 	sub.w	r3, r3, fp
   2a200:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2a202:	69e3      	ldr	r3, [r4, #28]
   2a204:	8961      	ldrh	r1, [r4, #10]
   2a206:	885a      	ldrh	r2, [r3, #2]
   2a208:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2a20a:	400a      	ands	r2, r1
   2a20c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2a210:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   2a214:	f3bf 8f5b 	dmb	ish
}
   2a218:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   2a21a:	69e2      	ldr	r2, [r4, #28]
   2a21c:	8853      	ldrh	r3, [r2, #2]
   2a21e:	3301      	adds	r3, #1
   2a220:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2a222:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2a224:	3301      	adds	r3, #1
   2a226:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2a228:	b005      	add	sp, #20
   2a22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   2a22e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2a230:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2a232:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2a236:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   2a23a:	9302      	str	r3, [sp, #8]
   2a23c:	6803      	ldr	r3, [r0, #0]
   2a23e:	9203      	str	r2, [sp, #12]
   2a240:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2a242:	6883      	ldr	r3, [r0, #8]
   2a244:	3708      	adds	r7, #8
   2a246:	4299      	cmp	r1, r3
   2a248:	bf28      	it	cs
   2a24a:	f04f 31ff 	movcs.w	r1, #4294967295
   2a24e:	f7ff ff49 	bl	2a0e4 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2a252:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2a256:	5098      	str	r0, [r3, r2]
   2a258:	2200      	movs	r2, #0
   2a25a:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   2a25c:	f857 2c08 	ldr.w	r2, [r7, #-8]
   2a260:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2a262:	9a01      	ldr	r2, [sp, #4]
   2a264:	4296      	cmp	r6, r2
   2a266:	bfac      	ite	ge
   2a268:	2200      	movge	r2, #0
   2a26a:	2201      	movlt	r2, #1
		if (i >= readable)
   2a26c:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   2a26e:	bfd8      	it	le
   2a270:	f042 0202 	orrle.w	r2, r2, #2
   2a274:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2a276:	3601      	adds	r6, #1
   2a278:	89ed      	ldrh	r5, [r5, #14]
   2a27a:	e7bb      	b.n	2a1f4 <virtqueue_add_buffer+0x30>

0002a27c <virtqueue_get_buffer>:
{
   2a27c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2a27e:	b350      	cbz	r0, 2a2d6 <virtqueue_get_buffer+0x5a>
   2a280:	6a05      	ldr	r5, [r0, #32]
   2a282:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   2a284:	886b      	ldrh	r3, [r5, #2]
   2a286:	42a3      	cmp	r3, r4
   2a288:	d030      	beq.n	2a2ec <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2a28a:	1c63      	adds	r3, r4, #1
   2a28c:	85c3      	strh	r3, [r0, #46]	; 0x2e
   2a28e:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   2a290:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2a294:	3b01      	subs	r3, #1
   2a296:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   2a298:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2a29c:	686b      	ldr	r3, [r5, #4]
   2a29e:	b29e      	uxth	r6, r3
	if (len)
   2a2a0:	b109      	cbz	r1, 2a2a6 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2a2a2:	68ad      	ldr	r5, [r5, #8]
   2a2a4:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2a2a6:	f8d0 c018 	ldr.w	ip, [r0, #24]
   2a2aa:	b29b      	uxth	r3, r3
   2a2ac:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   2a2b0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2a2b4:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2a2b6:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2a2b8:	442f      	add	r7, r5
	dxp->ndescs--;
   2a2ba:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2a2bc:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   2a2be:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2a2c0:	898d      	ldrh	r5, [r1, #12]
   2a2c2:	076f      	lsls	r7, r5, #29
   2a2c4:	d50e      	bpl.n	2a2e4 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   2a2c6:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2a2c8:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2a2ca:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2a2cc:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   2a2ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2a2d0:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2a2d2:	b102      	cbz	r2, 2a2d6 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2a2d4:	8014      	strh	r4, [r2, #0]
}
   2a2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2a2d8:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2a2da:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2a2dc:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   2a2de:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2a2e2:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2a2e4:	898d      	ldrh	r5, [r1, #12]
   2a2e6:	07ed      	lsls	r5, r5, #31
   2a2e8:	d4f6      	bmi.n	2a2d8 <virtqueue_get_buffer+0x5c>
   2a2ea:	e7ec      	b.n	2a2c6 <virtqueue_get_buffer+0x4a>
		return NULL;
   2a2ec:	2000      	movs	r0, #0
   2a2ee:	e7f2      	b.n	2a2d6 <virtqueue_get_buffer+0x5a>

0002a2f0 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2a2f0:	6983      	ldr	r3, [r0, #24]
   2a2f2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2a2f6:	6898      	ldr	r0, [r3, #8]
   2a2f8:	4770      	bx	lr

0002a2fa <virtqueue_get_available_buffer>:
{
   2a2fa:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2a2fc:	f3bf 8f5b 	dmb	ish
{
   2a300:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2a302:	69c1      	ldr	r1, [r0, #28]
{
   2a304:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2a306:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2a308:	884a      	ldrh	r2, [r1, #2]
{
   2a30a:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2a30c:	429a      	cmp	r2, r3
   2a30e:	d016      	beq.n	2a33e <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2a310:	1c5a      	adds	r2, r3, #1
   2a312:	8602      	strh	r2, [r0, #48]	; 0x30
   2a314:	8942      	ldrh	r2, [r0, #10]
   2a316:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2a318:	4013      	ands	r3, r2
   2a31a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2a31e:	888a      	ldrh	r2, [r1, #4]
   2a320:	802a      	strh	r2, [r5, #0]
   2a322:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2a324:	6982      	ldr	r2, [r0, #24]
   2a326:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   2a328:	58d1      	ldr	r1, [r2, r3]
   2a32a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2a32c:	f7ff fef6 	bl	2a11c <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   2a330:	882a      	ldrh	r2, [r5, #0]
   2a332:	69a3      	ldr	r3, [r4, #24]
   2a334:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2a338:	689b      	ldr	r3, [r3, #8]
   2a33a:	6033      	str	r3, [r6, #0]
}
   2a33c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2a33e:	2000      	movs	r0, #0
   2a340:	e7fc      	b.n	2a33c <virtqueue_get_available_buffer+0x42>

0002a342 <virtqueue_disable_cb>:
{
   2a342:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2a344:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2a346:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2a348:	6912      	ldr	r2, [r2, #16]
   2a34a:	0092      	lsls	r2, r2, #2
   2a34c:	d517      	bpl.n	2a37e <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2a34e:	b943      	cbnz	r3, 2a362 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2a350:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   2a352:	69c2      	ldr	r2, [r0, #28]
   2a354:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2a356:	8944      	ldrh	r4, [r0, #10]
   2a358:	3b01      	subs	r3, #1
   2a35a:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   2a35c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2a360:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2a362:	6803      	ldr	r3, [r0, #0]
   2a364:	699b      	ldr	r3, [r3, #24]
   2a366:	2b01      	cmp	r3, #1
   2a368:	d108      	bne.n	2a37c <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2a36a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   2a36c:	6a02      	ldr	r2, [r0, #32]
   2a36e:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2a370:	8940      	ldrh	r0, [r0, #10]
   2a372:	3b01      	subs	r3, #1
   2a374:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   2a376:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2a37a:	8093      	strh	r3, [r2, #4]
}
   2a37c:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2a37e:	b923      	cbnz	r3, 2a38a <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2a380:	69c2      	ldr	r2, [r0, #28]
   2a382:	8813      	ldrh	r3, [r2, #0]
   2a384:	f043 0301 	orr.w	r3, r3, #1
   2a388:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2a38a:	6803      	ldr	r3, [r0, #0]
   2a38c:	699b      	ldr	r3, [r3, #24]
   2a38e:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2a390:	bf01      	itttt	eq
   2a392:	6a02      	ldreq	r2, [r0, #32]
   2a394:	8813      	ldrheq	r3, [r2, #0]
   2a396:	f043 0301 	orreq.w	r3, r3, #1
   2a39a:	8013      	strheq	r3, [r2, #0]
}
   2a39c:	e7ee      	b.n	2a37c <virtqueue_disable_cb+0x3a>

0002a39e <virtqueue_kick>:
{
   2a39e:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2a3a0:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2a3a4:	6803      	ldr	r3, [r0, #0]
{
   2a3a6:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2a3a8:	691a      	ldr	r2, [r3, #16]
   2a3aa:	699b      	ldr	r3, [r3, #24]
   2a3ac:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2a3b0:	d01a      	beq.n	2a3e8 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2a3b2:	b97b      	cbnz	r3, 2a3d4 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   2a3b4:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   2a3b6:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   2a3b8:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2a3ba:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2a3bc:	3b01      	subs	r3, #1
   2a3be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2a3c2:	8892      	ldrh	r2, [r2, #4]
   2a3c4:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2a3c6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2a3c8:	b29b      	uxth	r3, r3
   2a3ca:	429a      	cmp	r2, r3
   2a3cc:	d814      	bhi.n	2a3f8 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   2a3ce:	2300      	movs	r3, #0
   2a3d0:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2a3d2:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2a3d4:	2b01      	cmp	r3, #1
   2a3d6:	d1fa      	bne.n	2a3ce <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   2a3d8:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2a3da:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   2a3dc:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   2a3de:	6941      	ldr	r1, [r0, #20]
   2a3e0:	3b01      	subs	r3, #1
   2a3e2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2a3e6:	e7ec      	b.n	2a3c2 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2a3e8:	b963      	cbnz	r3, 2a404 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   2a3ea:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   2a3ec:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2a3ee:	43db      	mvns	r3, r3
   2a3f0:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2a3f4:	2b00      	cmp	r3, #0
   2a3f6:	d0ea      	beq.n	2a3ce <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2a3f8:	6923      	ldr	r3, [r4, #16]
   2a3fa:	2b00      	cmp	r3, #0
   2a3fc:	d0e7      	beq.n	2a3ce <virtqueue_kick+0x30>
		vq->notify(vq);
   2a3fe:	4620      	mov	r0, r4
   2a400:	4798      	blx	r3
   2a402:	e7e4      	b.n	2a3ce <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2a404:	2b01      	cmp	r3, #1
   2a406:	d1e2      	bne.n	2a3ce <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   2a408:	69c3      	ldr	r3, [r0, #28]
   2a40a:	e7ef      	b.n	2a3ec <virtqueue_kick+0x4e>

0002a40c <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2a40c:	69c3      	ldr	r3, [r0, #28]
   2a40e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   2a410:	8859      	ldrh	r1, [r3, #2]
   2a412:	4291      	cmp	r1, r2
   2a414:	d00a      	beq.n	2a42c <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2a416:	8941      	ldrh	r1, [r0, #10]
   2a418:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   2a41a:	400a      	ands	r2, r1
   2a41c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   2a420:	889a      	ldrh	r2, [r3, #4]
   2a422:	6983      	ldr	r3, [r0, #24]
   2a424:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2a428:	6898      	ldr	r0, [r3, #8]
	return len;
   2a42a:	4770      	bx	lr
		return 0;
   2a42c:	2000      	movs	r0, #0
}
   2a42e:	4770      	bx	lr

0002a430 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   2a430:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2a434:	68c3      	ldr	r3, [r0, #12]
   2a436:	b103      	cbz	r3, 2a43a <virtqueue_notification+0xa>
		vq->callback(vq);
   2a438:	4718      	bx	r3
}
   2a43a:	4770      	bx	lr

0002a43c <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2a43c:	f04f 32ff 	mov.w	r2, #4294967295
   2a440:	f04f 33ff 	mov.w	r3, #4294967295
   2a444:	f7f6 bc94 	b.w	20d70 <z_impl_k_sem_take>

0002a448 <rpmsg_unregister_endpoint>:
{
   2a448:	b570      	push	{r4, r5, r6, lr}
   2a44a:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2a44c:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2a44e:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2a452:	4630      	mov	r0, r6
   2a454:	f7ff fff2 	bl	2a43c <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2a458:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a45a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   2a45e:	2b7f      	cmp	r3, #127	; 0x7f
   2a460:	d80b      	bhi.n	2a47a <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2a462:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2a464:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2a466:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2a468:	f003 031f 	and.w	r3, r3, #31
   2a46c:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2a46e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   2a472:	ea23 0302 	bic.w	r3, r3, r2
   2a476:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   2a47a:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2a47e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2a480:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   2a482:	f104 0334 	add.w	r3, r4, #52	; 0x34
   2a486:	6011      	str	r1, [r2, #0]
	node->next = node;
   2a488:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2a48c:	2300      	movs	r3, #0
   2a48e:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2a490:	4630      	mov	r0, r6
}
   2a492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a496:	f7f6 bc27 	b.w	20ce8 <z_impl_k_sem_give>

0002a49a <rpmsg_send_ns_message>:
{
   2a49a:	b530      	push	{r4, r5, lr}
   2a49c:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   2a49e:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   2a4a0:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2a4a2:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2a4a4:	2220      	movs	r2, #32
   2a4a6:	4601      	mov	r1, r0
   2a4a8:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2a4aa:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2a4ac:	f000 fdc9 	bl	2b042 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2a4b0:	2328      	movs	r3, #40	; 0x28
   2a4b2:	2201      	movs	r2, #1
   2a4b4:	4629      	mov	r1, r5
   2a4b6:	e9cd 3200 	strd	r3, r2, [sp]
   2a4ba:	4620      	mov	r0, r4
   2a4bc:	2235      	movs	r2, #53	; 0x35
   2a4be:	ab02      	add	r3, sp, #8
   2a4c0:	f7f5 f8e8 	bl	1f694 <rpmsg_send_offchannel_raw>
}
   2a4c4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2a4c8:	b00d      	add	sp, #52	; 0x34
   2a4ca:	bd30      	pop	{r4, r5, pc}

0002a4cc <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2a4cc:	b128      	cbz	r0, 2a4da <rpmsg_hold_rx_buffer+0xe>
   2a4ce:	6a00      	ldr	r0, [r0, #32]
   2a4d0:	b118      	cbz	r0, 2a4da <rpmsg_hold_rx_buffer+0xe>
   2a4d2:	b111      	cbz	r1, 2a4da <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   2a4d4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2a4d6:	b103      	cbz	r3, 2a4da <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   2a4d8:	4718      	bx	r3
}
   2a4da:	4770      	bx	lr

0002a4dc <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2a4dc:	b130      	cbz	r0, 2a4ec <rpmsg_release_rx_buffer+0x10>
   2a4de:	6a00      	ldr	r0, [r0, #32]
   2a4e0:	b120      	cbz	r0, 2a4ec <rpmsg_release_rx_buffer+0x10>
   2a4e2:	b119      	cbz	r1, 2a4ec <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2a4e4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2a4e8:	b103      	cbz	r3, 2a4ec <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   2a4ea:	4718      	bx	r3
}
   2a4ec:	4770      	bx	lr

0002a4ee <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   2a4ee:	b130      	cbz	r0, 2a4fe <rpmsg_get_tx_payload_buffer+0x10>
   2a4f0:	6a00      	ldr	r0, [r0, #32]
   2a4f2:	b120      	cbz	r0, 2a4fe <rpmsg_get_tx_payload_buffer+0x10>
   2a4f4:	b119      	cbz	r1, 2a4fe <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   2a4f6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   2a4fa:	b103      	cbz	r3, 2a4fe <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   2a4fc:	4718      	bx	r3
}
   2a4fe:	2000      	movs	r0, #0
   2a500:	4770      	bx	lr

0002a502 <rpmsg_get_endpoint>:
{
   2a502:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a506:	4606      	mov	r6, r0
   2a508:	4688      	mov	r8, r1
   2a50a:	4617      	mov	r7, r2
   2a50c:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2a50e:	6804      	ldr	r4, [r0, #0]
   2a510:	42a6      	cmp	r6, r4
   2a512:	d101      	bne.n	2a518 <rpmsg_get_endpoint+0x16>
	return NULL;
   2a514:	2500      	movs	r5, #0
   2a516:	e023      	b.n	2a560 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2a518:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2a51a:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2a51e:	d002      	beq.n	2a526 <rpmsg_get_endpoint+0x24>
   2a520:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2a522:	42bb      	cmp	r3, r7
   2a524:	d01c      	beq.n	2a560 <rpmsg_get_endpoint+0x5e>
		if (name)
   2a526:	f1b8 0f00 	cmp.w	r8, #0
   2a52a:	d101      	bne.n	2a530 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   2a52c:	6824      	ldr	r4, [r4, #0]
   2a52e:	e7ef      	b.n	2a510 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   2a530:	2220      	movs	r2, #32
   2a532:	4641      	mov	r1, r8
   2a534:	4628      	mov	r0, r5
   2a536:	f000 fd72 	bl	2b01e <strncmp>
		if (!name || !name_match)
   2a53a:	2800      	cmp	r0, #0
   2a53c:	d1f6      	bne.n	2a52c <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2a53e:	f1b9 3fff 	cmp.w	r9, #4294967295
   2a542:	d002      	beq.n	2a54a <rpmsg_get_endpoint+0x48>
   2a544:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2a546:	454b      	cmp	r3, r9
   2a548:	d00a      	beq.n	2a560 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2a54a:	1c7b      	adds	r3, r7, #1
   2a54c:	d00b      	beq.n	2a566 <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   2a54e:	6824      	ldr	r4, [r4, #0]
   2a550:	42b4      	cmp	r4, r6
   2a552:	d0df      	beq.n	2a514 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2a554:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2a558:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2a55c:	429f      	cmp	r7, r3
   2a55e:	d1e7      	bne.n	2a530 <rpmsg_get_endpoint+0x2e>
}
   2a560:	4628      	mov	r0, r5
   2a562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2a566:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2a568:	3301      	adds	r3, #1
   2a56a:	d0f9      	beq.n	2a560 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   2a56c:	6824      	ldr	r4, [r4, #0]
   2a56e:	42b4      	cmp	r4, r6
   2a570:	d0d0      	beq.n	2a514 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2a572:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2a576:	e7d6      	b.n	2a526 <rpmsg_get_endpoint+0x24>

0002a578 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2a578:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   2a57a:	4604      	mov	r4, r0
   2a57c:	b190      	cbz	r0, 2a5a4 <rpmsg_destroy_ept+0x2c>
   2a57e:	6a03      	ldr	r3, [r0, #32]
   2a580:	b183      	cbz	r3, 2a5a4 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   2a582:	7802      	ldrb	r2, [r0, #0]
   2a584:	b14a      	cbz	r2, 2a59a <rpmsg_destroy_ept+0x22>
   2a586:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   2a58a:	b133      	cbz	r3, 2a59a <rpmsg_destroy_ept+0x22>
   2a58c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2a58e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2a592:	d302      	bcc.n	2a59a <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2a594:	2101      	movs	r1, #1
   2a596:	f7ff ff80 	bl	2a49a <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2a59a:	4620      	mov	r0, r4
}
   2a59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2a5a0:	f7ff bf52 	b.w	2a448 <rpmsg_unregister_endpoint>
}
   2a5a4:	bd10      	pop	{r4, pc}

0002a5a6 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2a5a6:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2a5aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2a5ae:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2a5b2:	4770      	bx	lr

0002a5b4 <rpmsg_virtio_tx_callback>:
}
   2a5b4:	4770      	bx	lr

0002a5b6 <k_sem_give>:
   2a5b6:	f7f6 bb97 	b.w	20ce8 <z_impl_k_sem_give>

0002a5ba <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2a5ba:	f04f 32ff 	mov.w	r2, #4294967295
   2a5be:	f04f 33ff 	mov.w	r3, #4294967295
   2a5c2:	f7f6 bbd5 	b.w	20d70 <z_impl_k_sem_take>

0002a5c6 <rpmsg_virtio_release_tx_buffer>:
{
   2a5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a5c8:	460c      	mov	r4, r1
   2a5ca:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   2a5cc:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2a5d0:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2a5d4:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2a5d6:	b2b6      	uxth	r6, r6
   2a5d8:	f7ff ffef 	bl	2a5ba <__metal_mutex_acquire>
	r_desc->idx = idx;
   2a5dc:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   2a5e0:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2a5e4:	f1a4 0310 	sub.w	r3, r4, #16
   2a5e8:	f844 2c0c 	str.w	r2, [r4, #-12]
   2a5ec:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   2a5f0:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2a5f4:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   2a5f8:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   2a5fc:	4638      	mov	r0, r7
   2a5fe:	6013      	str	r3, [r2, #0]
   2a600:	f7ff ffd9 	bl	2a5b6 <k_sem_give>
}
   2a604:	2000      	movs	r0, #0
   2a606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a608 <rpmsg_virtio_ns_callback>:
{
   2a608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   2a60c:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   2a60e:	2a28      	cmp	r2, #40	; 0x28
{
   2a610:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   2a612:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   2a616:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   2a618:	d126      	bne.n	2a668 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2a61a:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2a61c:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2a61e:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   2a620:	42a1      	cmp	r1, r4
   2a622:	bf28      	it	cs
   2a624:	f04f 31ff 	movcs.w	r1, #4294967295
   2a628:	2320      	movs	r3, #32
   2a62a:	466a      	mov	r2, sp
   2a62c:	f7ff fcb1 	bl	29f92 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2a630:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   2a634:	f8d7 8020 	ldr.w	r8, [r7, #32]
   2a638:	4630      	mov	r0, r6
   2a63a:	f7ff ffbe 	bl	2a5ba <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2a63e:	4643      	mov	r3, r8
   2a640:	f04f 32ff 	mov.w	r2, #4294967295
   2a644:	4669      	mov	r1, sp
   2a646:	4628      	mov	r0, r5
   2a648:	f7ff ff5b 	bl	2a502 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2a64e:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2a650:	07db      	lsls	r3, r3, #31
   2a652:	d519      	bpl.n	2a688 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   2a654:	b960      	cbnz	r0, 2a670 <rpmsg_virtio_ns_callback+0x68>
   2a656:	4630      	mov	r0, r6
   2a658:	f7ff ffad 	bl	2a5b6 <k_sem_give>
		if (rdev->ns_unbind_cb)
   2a65c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   2a65e:	b11b      	cbz	r3, 2a668 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   2a660:	4642      	mov	r2, r8
   2a662:	4669      	mov	r1, sp
   2a664:	4628      	mov	r0, r5
   2a666:	4798      	blx	r3
}
   2a668:	2000      	movs	r0, #0
   2a66a:	b008      	add	sp, #32
   2a66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2a670:	f04f 33ff 	mov.w	r3, #4294967295
   2a674:	6283      	str	r3, [r0, #40]	; 0x28
   2a676:	4630      	mov	r0, r6
   2a678:	f7ff ff9d 	bl	2a5b6 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2a67c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2a67e:	2b00      	cmp	r3, #0
   2a680:	d0ec      	beq.n	2a65c <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   2a682:	4620      	mov	r0, r4
   2a684:	4798      	blx	r3
   2a686:	e7e9      	b.n	2a65c <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   2a688:	b920      	cbnz	r0, 2a694 <rpmsg_virtio_ns_callback+0x8c>
   2a68a:	4630      	mov	r0, r6
   2a68c:	f7ff ff93 	bl	2a5b6 <k_sem_give>
			if (rdev->ns_bind_cb)
   2a690:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2a692:	e7e4      	b.n	2a65e <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2a694:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2a698:	4630      	mov	r0, r6
   2a69a:	f7ff ff8c 	bl	2a5b6 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2a69e:	e7e3      	b.n	2a668 <rpmsg_virtio_ns_callback+0x60>

0002a6a0 <rpmsg_virtio_get_rx_buffer>:
{
   2a6a0:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2a6a2:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2a6a6:	4613      	mov	r3, r2
   2a6a8:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   2a6aa:	b925      	cbnz	r5, 2a6b6 <rpmsg_virtio_get_rx_buffer+0x16>
}
   2a6ac:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2a6ae:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2a6b2:	f7ff bde3 	b.w	2a27c <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2a6b6:	2d01      	cmp	r5, #1
   2a6b8:	d106      	bne.n	2a6c8 <rpmsg_virtio_get_rx_buffer+0x28>
}
   2a6ba:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2a6bc:	460a      	mov	r2, r1
   2a6be:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2a6c2:	4619      	mov	r1, r3
   2a6c4:	f7ff be19 	b.w	2a2fa <virtqueue_get_available_buffer>
}
   2a6c8:	2000      	movs	r0, #0
   2a6ca:	bc30      	pop	{r4, r5}
   2a6cc:	4770      	bx	lr

0002a6ce <rpmsg_virtio_return_buffer>:
{
   2a6ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a6d0:	460c      	mov	r4, r1
   2a6d2:	4619      	mov	r1, r3
   2a6d4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2a6d8:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2a6da:	b95d      	cbnz	r5, 2a6f4 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2a6dc:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2a6de:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2a6e2:	2301      	movs	r3, #1
   2a6e4:	462a      	mov	r2, r5
   2a6e6:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2a6ea:	a902      	add	r1, sp, #8
   2a6ec:	f7ff fd6a 	bl	2a1c4 <virtqueue_add_buffer>
}
   2a6f0:	b004      	add	sp, #16
   2a6f2:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2a6f4:	2d01      	cmp	r5, #1
   2a6f6:	d1fb      	bne.n	2a6f0 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2a6f8:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   2a6fc:	b004      	add	sp, #16
   2a6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2a702:	f7f4 bfab 	b.w	1f65c <virtqueue_add_consumed_buffer>

0002a706 <rpmsg_virtio_release_rx_buffer>:
{
   2a706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a708:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2a70a:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2a70e:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2a712:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2a714:	b2b6      	uxth	r6, r6
{
   2a716:	460d      	mov	r5, r1
   2a718:	f7ff ff4f 	bl	2a5ba <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2a71c:	4631      	mov	r1, r6
   2a71e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2a722:	f7ff fde5 	bl	2a2f0 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2a726:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2a728:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2a72a:	f1a5 0110 	sub.w	r1, r5, #16
   2a72e:	4620      	mov	r0, r4
   2a730:	f7ff ffcd 	bl	2a6ce <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   2a734:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2a738:	f7ff fe31 	bl	2a39e <virtqueue_kick>
   2a73c:	4638      	mov	r0, r7
}
   2a73e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a742:	f7ff bf38 	b.w	2a5b6 <k_sem_give>

0002a746 <rpmsg_virtio_shm_pool_get_buffer>:
{
   2a746:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   2a748:	b148      	cbz	r0, 2a75e <rpmsg_virtio_shm_pool_get_buffer+0x18>
   2a74a:	b149      	cbz	r1, 2a760 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   2a74c:	6843      	ldr	r3, [r0, #4]
   2a74e:	428b      	cmp	r3, r1
   2a750:	d306      	bcc.n	2a760 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2a752:	6882      	ldr	r2, [r0, #8]
   2a754:	6804      	ldr	r4, [r0, #0]
   2a756:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   2a758:	1a5b      	subs	r3, r3, r1
   2a75a:	6043      	str	r3, [r0, #4]
	return buffer;
   2a75c:	18a0      	adds	r0, r4, r2
}
   2a75e:	bd10      	pop	{r4, pc}
		return NULL;
   2a760:	2000      	movs	r0, #0
   2a762:	e7fc      	b.n	2a75e <rpmsg_virtio_shm_pool_get_buffer+0x18>

0002a764 <rpmsg_virtio_get_tx_payload_buffer>:
{
   2a764:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2a768:	4605      	mov	r5, r0
   2a76a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   2a76e:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2a770:	6a03      	ldr	r3, [r0, #32]
   2a772:	4617      	mov	r7, r2
   2a774:	681b      	ldr	r3, [r3, #0]
   2a776:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2a778:	0743      	lsls	r3, r0, #29
   2a77a:	d403      	bmi.n	2a784 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   2a77c:	2000      	movs	r0, #0
}
   2a77e:	b002      	add	sp, #8
   2a780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2a784:	f643 2398 	movw	r3, #15000	; 0x3a98
   2a788:	2f00      	cmp	r7, #0
   2a78a:	bf18      	it	ne
   2a78c:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   2a78e:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2a792:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2a796:	4640      	mov	r0, r8
   2a798:	f7ff ff0f 	bl	2a5ba <__metal_mutex_acquire>
	return list->next == list;
   2a79c:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   2a7a0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2a7a4:	4554      	cmp	r4, sl
   2a7a6:	f8d3 9018 	ldr.w	r9, [r3, #24]
   2a7aa:	d025      	beq.n	2a7f8 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   2a7ac:	b324      	cbz	r4, 2a7f8 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   2a7ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   2a7b2:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   2a7b4:	6822      	ldr	r2, [r4, #0]
   2a7b6:	601a      	str	r2, [r3, #0]
	node->next = node;
   2a7b8:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   2a7bc:	f1b9 0f00 	cmp.w	r9, #0
   2a7c0:	d10e      	bne.n	2a7e0 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   2a7c2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2a7c6:	6033      	str	r3, [r6, #0]
   2a7c8:	4640      	mov	r0, r8
   2a7ca:	f7ff fef4 	bl	2a5b6 <k_sem_give>
	rp_hdr->reserved = idx;
   2a7ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2a7d2:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   2a7d6:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   2a7d8:	6833      	ldr	r3, [r6, #0]
   2a7da:	3b10      	subs	r3, #16
   2a7dc:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2a7de:	e7ce      	b.n	2a77e <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   2a7e0:	f1b9 0f01 	cmp.w	r9, #1
   2a7e4:	d1f0      	bne.n	2a7c8 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   2a7e6:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2a7e8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   2a7ec:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2a7f0:	f7ff fd7e 	bl	2a2f0 <virtqueue_get_buffer_length>
   2a7f4:	6030      	str	r0, [r6, #0]
   2a7f6:	e7e7      	b.n	2a7c8 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   2a7f8:	f1b9 0f00 	cmp.w	r9, #0
   2a7fc:	d12a      	bne.n	2a854 <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   2a7fe:	4631      	mov	r1, r6
   2a800:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2a804:	f10d 0206 	add.w	r2, sp, #6
   2a808:	f7ff fd38 	bl	2a27c <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   2a80c:	4604      	mov	r4, r0
   2a80e:	2800      	cmp	r0, #0
   2a810:	d1da      	bne.n	2a7c8 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   2a812:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   2a816:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   2a818:	b953      	cbnz	r3, 2a830 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   2a81a:	4640      	mov	r0, r8
   2a81c:	f7ff fecb 	bl	2a5b6 <k_sem_give>
		if (rp_hdr || !tick_count)
   2a820:	2f00      	cmp	r7, #0
   2a822:	d0ab      	beq.n	2a77c <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   2a824:	2021      	movs	r0, #33	; 0x21
   2a826:	2100      	movs	r1, #0
   2a828:	f7f8 f952 	bl	22ad0 <z_impl_k_sleep>
		tick_count--;
   2a82c:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   2a82e:	e7b2      	b.n	2a796 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   2a830:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   2a834:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   2a838:	f7ff ff85 	bl	2a746 <rpmsg_virtio_shm_pool_get_buffer>
   2a83c:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   2a83e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   2a842:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   2a846:	6033      	str	r3, [r6, #0]
   2a848:	4640      	mov	r0, r8
   2a84a:	f7ff feb4 	bl	2a5b6 <k_sem_give>
		if (rp_hdr || !tick_count)
   2a84e:	2c00      	cmp	r4, #0
   2a850:	d0e6      	beq.n	2a820 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   2a852:	e7bc      	b.n	2a7ce <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   2a854:	f1b9 0f01 	cmp.w	r9, #1
   2a858:	d1df      	bne.n	2a81a <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   2a85a:	4632      	mov	r2, r6
   2a85c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2a860:	f10d 0106 	add.w	r1, sp, #6
   2a864:	f7ff fd49 	bl	2a2fa <virtqueue_get_available_buffer>
   2a868:	4604      	mov	r4, r0
   2a86a:	e7ed      	b.n	2a848 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0002a86c <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   2a86c:	b120      	cbz	r0, 2a878 <rpmsg_virtio_init_shm_pool+0xc>
   2a86e:	b119      	cbz	r1, 2a878 <rpmsg_virtio_init_shm_pool+0xc>
   2a870:	b112      	cbz	r2, 2a878 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   2a872:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   2a876:	6001      	str	r1, [r0, #0]
}
   2a878:	4770      	bx	lr

0002a87a <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   2a87a:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   2a87c:	4604      	mov	r4, r0
   2a87e:	b918      	cbnz	r0, 2a888 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   2a880:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   2a882:	3834      	subs	r0, #52	; 0x34
   2a884:	f7ff fe78 	bl	2a578 <rpmsg_destroy_ept>
	return list->next == list;
   2a888:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   2a88a:	4284      	cmp	r4, r0
   2a88c:	d1f9      	bne.n	2a882 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   2a88e:	2300      	movs	r3, #0
		rvdev->svq = 0;
   2a890:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   2a894:	e7f4      	b.n	2a880 <rpmsg_deinit_vdev+0x6>

0002a896 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2a896:	f7f5 ba53 	b.w	1fd40 <_DoInit>

0002a89a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2a89a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2a89c:	f7ff fffb 	bl	2a896 <SEGGER_RTT_Init>

	return 0;
}
   2a8a0:	2000      	movs	r0, #0
   2a8a2:	bd08      	pop	{r3, pc}

0002a8a4 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2a8a4:	4770      	bx	lr

0002a8a6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2a8a6:	b140      	cbz	r0, 2a8ba <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2a8a8:	68c3      	ldr	r3, [r0, #12]
   2a8aa:	7858      	ldrb	r0, [r3, #1]
   2a8ac:	f010 0001 	ands.w	r0, r0, #1
   2a8b0:	bf1e      	ittt	ne
   2a8b2:	7818      	ldrbne	r0, [r3, #0]
   2a8b4:	fab0 f080 	clzne	r0, r0
   2a8b8:	0940      	lsrne	r0, r0, #5
}
   2a8ba:	4770      	bx	lr

0002a8bc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2a8bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a8be:	ab0b      	add	r3, sp, #44	; 0x2c
   2a8c0:	9305      	str	r3, [sp, #20]
   2a8c2:	9303      	str	r3, [sp, #12]
   2a8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a8c6:	2201      	movs	r2, #1
   2a8c8:	9302      	str	r3, [sp, #8]
   2a8ca:	2300      	movs	r3, #0
   2a8cc:	4618      	mov	r0, r3
   2a8ce:	e9cd 3300 	strd	r3, r3, [sp]
   2a8d2:	f7e4 fca3 	bl	f21c <z_impl_z_log_msg_runtime_vcreate>
}
   2a8d6:	b007      	add	sp, #28
   2a8d8:	f85d fb04 	ldr.w	pc, [sp], #4

0002a8dc <z_early_memset>:
   2a8dc:	f000 ba62 	b.w	2ada4 <memset>

0002a8e0 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a8e0:	f000 ba26 	b.w	2ad30 <memcpy>

0002a8e4 <k_heap_init>:
{
   2a8e4:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2a8e6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2a8ea:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2a8ee:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2a8f0:	f7e3 b9fc 	b.w	dcec <sys_heap_init>

0002a8f4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a8f4:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   2a8f8:	4313      	orrs	r3, r2
   2a8fa:	f013 0303 	ands.w	r3, r3, #3
   2a8fe:	d10c      	bne.n	2a91a <create_free_list+0x26>
	slab->free_list = NULL;
   2a900:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a902:	68c1      	ldr	r1, [r0, #12]
   2a904:	4299      	cmp	r1, r3
   2a906:	d801      	bhi.n	2a90c <create_free_list+0x18>
	return 0;
   2a908:	2000      	movs	r0, #0
   2a90a:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2a90c:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a90e:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2a910:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2a912:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2a914:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   2a916:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2a918:	e7f3      	b.n	2a902 <create_free_list+0xe>
		return -EINVAL;
   2a91a:	f06f 0015 	mvn.w	r0, #21
}
   2a91e:	4770      	bx	lr

0002a920 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a920:	f3ef 8005 	mrs	r0, IPSR
}
   2a924:	3800      	subs	r0, #0
   2a926:	bf18      	it	ne
   2a928:	2001      	movne	r0, #1
   2a92a:	4770      	bx	lr

0002a92c <z_impl_k_thread_name_set>:
}
   2a92c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2a930:	4770      	bx	lr

0002a932 <k_thread_name_get>:
}
   2a932:	2000      	movs	r0, #0
   2a934:	4770      	bx	lr

0002a936 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2a936:	f7f7 ba2b 	b.w	21d90 <z_sched_start>

0002a93a <z_pm_save_idle_exit>:
{
   2a93a:	b508      	push	{r3, lr}
	pm_system_resume();
   2a93c:	f7e5 ffe4 	bl	10908 <pm_system_resume>
}
   2a940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2a944:	f7ff b89e 	b.w	29a84 <sys_clock_idle_exit>

0002a948 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2a948:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2a94c:	428b      	cmp	r3, r1
   2a94e:	d001      	beq.n	2a954 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2a950:	f7f7 bd20 	b.w	22394 <z_set_prio>
}
   2a954:	2000      	movs	r0, #0
   2a956:	4770      	bx	lr

0002a958 <z_impl_k_mutex_init>:
{
   2a958:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2a95a:	2000      	movs	r0, #0
   2a95c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2a960:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2a964:	4770      	bx	lr

0002a966 <z_queue_node_peek>:
{
   2a966:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2a968:	4604      	mov	r4, r0
   2a96a:	b130      	cbz	r0, 2a97a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a96c:	6802      	ldr	r2, [r0, #0]
   2a96e:	0793      	lsls	r3, r2, #30
   2a970:	d003      	beq.n	2a97a <z_queue_node_peek+0x14>
		ret = anode->data;
   2a972:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2a974:	b109      	cbz	r1, 2a97a <z_queue_node_peek+0x14>
			k_free(anode);
   2a976:	f000 f9bc 	bl	2acf2 <k_free>
}
   2a97a:	4620      	mov	r0, r4
   2a97c:	bd10      	pop	{r4, pc}

0002a97e <z_impl_k_queue_init>:
	list->head = NULL;
   2a97e:	2300      	movs	r3, #0
	list->tail = NULL;
   2a980:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2a984:	6083      	str	r3, [r0, #8]
   2a986:	f100 030c 	add.w	r3, r0, #12
   2a98a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2a98e:	f100 0314 	add.w	r3, r0, #20
   2a992:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2a996:	4770      	bx	lr

0002a998 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2a998:	2301      	movs	r3, #1
{
   2a99a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2a99c:	9300      	str	r3, [sp, #0]
   2a99e:	2300      	movs	r3, #0
{
   2a9a0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2a9a2:	4619      	mov	r1, r3
   2a9a4:	f7f6 f89c 	bl	20ae0 <queue_insert>
}
   2a9a8:	b003      	add	sp, #12
   2a9aa:	f85d fb04 	ldr.w	pc, [sp], #4

0002a9ae <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   2a9ae:	2300      	movs	r3, #0
{
   2a9b0:	b507      	push	{r0, r1, r2, lr}
   2a9b2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2a9b4:	9300      	str	r3, [sp, #0]
   2a9b6:	4619      	mov	r1, r3
   2a9b8:	f7f6 f892 	bl	20ae0 <queue_insert>
}
   2a9bc:	b003      	add	sp, #12
   2a9be:	f85d fb04 	ldr.w	pc, [sp], #4

0002a9c2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2a9c2:	b15a      	cbz	r2, 2a9dc <z_impl_k_sem_init+0x1a>
   2a9c4:	428a      	cmp	r2, r1
   2a9c6:	d309      	bcc.n	2a9dc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2a9c8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2a9cc:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2a9d0:	e9c0 0000 	strd	r0, r0, [r0]
   2a9d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2a9d8:	2000      	movs	r0, #0
   2a9da:	4770      	bx	lr
		return -EINVAL;
   2a9dc:	f06f 0015 	mvn.w	r0, #21
}
   2a9e0:	4770      	bx	lr

0002a9e2 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2a9e2:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2a9e4:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2a9e6:	408b      	lsls	r3, r1
   2a9e8:	ea22 0303 	bic.w	r3, r2, r3
   2a9ec:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2a9ee:	fa22 f001 	lsr.w	r0, r2, r1
}
   2a9f2:	f000 0001 	and.w	r0, r0, #1
   2a9f6:	4770      	bx	lr

0002a9f8 <unschedule_locked>:
{
   2a9f8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a9fa:	2103      	movs	r1, #3
{
   2a9fc:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a9fe:	300c      	adds	r0, #12
   2aa00:	f7ff ffef 	bl	2a9e2 <flag_test_and_clear>
   2aa04:	4604      	mov	r4, r0
   2aa06:	b118      	cbz	r0, 2aa10 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2aa08:	f105 0010 	add.w	r0, r5, #16
   2aa0c:	f7f8 fb00 	bl	23010 <z_abort_timeout>
}
   2aa10:	4620      	mov	r0, r4
   2aa12:	bd38      	pop	{r3, r4, r5, pc}

0002aa14 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2aa14:	b120      	cbz	r0, 2aa20 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2aa16:	2200      	movs	r2, #0
   2aa18:	3090      	adds	r0, #144	; 0x90
   2aa1a:	4611      	mov	r1, r2
   2aa1c:	f7f8 b95a 	b.w	22cd4 <z_sched_wake>
}
   2aa20:	4770      	bx	lr

0002aa22 <cancel_async_locked>:
{
   2aa22:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2aa24:	68c3      	ldr	r3, [r0, #12]
{
   2aa26:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2aa28:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2aa2c:	079b      	lsls	r3, r3, #30
   2aa2e:	d416      	bmi.n	2aa5e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2aa30:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2aa32:	2102      	movs	r1, #2
   2aa34:	300c      	adds	r0, #12
   2aa36:	f7ff ffd4 	bl	2a9e2 <flag_test_and_clear>
   2aa3a:	b180      	cbz	r0, 2aa5e <cancel_async_locked+0x3c>
	return list->head;
   2aa3c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2aa40:	b16a      	cbz	r2, 2aa5e <cancel_async_locked+0x3c>
   2aa42:	4294      	cmp	r4, r2
   2aa44:	d11d      	bne.n	2aa82 <cancel_async_locked+0x60>
	return node->next;
   2aa46:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2aa48:	b99e      	cbnz	r6, 2aa72 <cancel_async_locked+0x50>
   2aa4a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   2aa4e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   2aa52:	429c      	cmp	r4, r3
   2aa54:	d101      	bne.n	2aa5a <cancel_async_locked+0x38>
	list->tail = node;
   2aa56:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   2aa5a:	2300      	movs	r3, #0
   2aa5c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2aa5e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2aa60:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2aa64:	bf1e      	ittt	ne
   2aa66:	f043 0302 	orrne.w	r3, r3, #2
   2aa6a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2aa6c:	f040 0002 	orrne.w	r0, r0, #2
}
   2aa70:	bd70      	pop	{r4, r5, r6, pc}
   2aa72:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2aa74:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   2aa78:	4294      	cmp	r4, r2
	list->tail = node;
   2aa7a:	bf08      	it	eq
   2aa7c:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   2aa80:	e7eb      	b.n	2aa5a <cancel_async_locked+0x38>
	return node->next;
   2aa82:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2aa84:	6812      	ldr	r2, [r2, #0]
   2aa86:	e7db      	b.n	2aa40 <cancel_async_locked+0x1e>

0002aa88 <k_work_submit_to_queue>:
{
   2aa88:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2aa8a:	f7f6 fc41 	bl	21310 <z_work_submit_to_queue>
	if (ret > 0) {
   2aa8e:	1e04      	subs	r4, r0, #0
   2aa90:	dd09      	ble.n	2aaa6 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2aa92:	f04f 0320 	mov.w	r3, #32
   2aa96:	f3ef 8011 	mrs	r0, BASEPRI
   2aa9a:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa9e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2aaa2:	f000 f80d 	bl	2aac0 <z_reschedule_irqlock>
}
   2aaa6:	4620      	mov	r0, r4
   2aaa8:	bd10      	pop	{r4, pc}

0002aaaa <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2aaaa:	f7f6 bbeb 	b.w	21284 <k_work_busy_get>

0002aaae <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2aaae:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2aab2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2aab6:	4283      	cmp	r3, r0
		return b2 - b1;
   2aab8:	bf14      	ite	ne
   2aaba:	1ac0      	subne	r0, r0, r3
	return 0;
   2aabc:	2000      	moveq	r0, #0
}
   2aabe:	4770      	bx	lr

0002aac0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2aac0:	4603      	mov	r3, r0
   2aac2:	b920      	cbnz	r0, 2aace <z_reschedule_irqlock+0xe>
   2aac4:	f3ef 8205 	mrs	r2, IPSR
   2aac8:	b90a      	cbnz	r2, 2aace <z_reschedule_irqlock+0xe>
   2aaca:	f7e6 bb07 	b.w	110dc <arch_swap>
	__asm__ volatile(
   2aace:	f383 8811 	msr	BASEPRI, r3
   2aad2:	f3bf 8f6f 	isb	sy
}
   2aad6:	4770      	bx	lr

0002aad8 <z_reschedule_unlocked>:
	__asm__ volatile(
   2aad8:	f04f 0320 	mov.w	r3, #32
   2aadc:	f3ef 8011 	mrs	r0, BASEPRI
   2aae0:	f383 8812 	msr	BASEPRI_MAX, r3
   2aae4:	f3bf 8f6f 	isb	sy
   2aae8:	f7ff bfea 	b.w	2aac0 <z_reschedule_irqlock>

0002aaec <z_unpend_all>:
{
   2aaec:	b538      	push	{r3, r4, r5, lr}
   2aaee:	4605      	mov	r5, r0
	int need_sched = 0;
   2aaf0:	2000      	movs	r0, #0
	return list->head == list;
   2aaf2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aaf4:	42a5      	cmp	r5, r4
   2aaf6:	d000      	beq.n	2aafa <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2aaf8:	b904      	cbnz	r4, 2aafc <z_unpend_all+0x10>
}
   2aafa:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2aafc:	4620      	mov	r0, r4
   2aafe:	f7f7 fd63 	bl	225c8 <z_unpend_thread>
		z_ready_thread(thread);
   2ab02:	4620      	mov	r0, r4
   2ab04:	f7f7 f876 	bl	21bf4 <z_ready_thread>
		need_sched = 1;
   2ab08:	2001      	movs	r0, #1
   2ab0a:	e7f2      	b.n	2aaf2 <z_unpend_all+0x6>

0002ab0c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2ab0c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2ab0e:	f7f8 fc01 	bl	23314 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2ab12:	bd08      	pop	{r3, pc}

0002ab14 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2ab14:	f7f8 bbfe 	b.w	23314 <sys_clock_tick_get>

0002ab18 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2ab18:	b108      	cbz	r0, 2ab1e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2ab1a:	f7e4 b857 	b.w	ebcc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2ab1e:	4770      	bx	lr

0002ab20 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ab20:	f1b1 3fff 	cmp.w	r1, #4294967295
   2ab24:	bf08      	it	eq
   2ab26:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2ab2a:	b538      	push	{r3, r4, r5, lr}
   2ab2c:	460c      	mov	r4, r1
   2ab2e:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ab30:	d014      	beq.n	2ab5c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ab32:	4308      	orrs	r0, r1
   2ab34:	d103      	bne.n	2ab3e <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2ab36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2ab3a:	f7f8 bbeb 	b.w	23314 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2ab3e:	f06f 0001 	mvn.w	r0, #1
   2ab42:	f04f 33ff 	mov.w	r3, #4294967295
   2ab46:	1b40      	subs	r0, r0, r5
   2ab48:	eb63 0101 	sbc.w	r1, r3, r1
   2ab4c:	2900      	cmp	r1, #0
   2ab4e:	da04      	bge.n	2ab5a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2ab50:	f7f8 fbe0 	bl	23314 <sys_clock_tick_get>
   2ab54:	1940      	adds	r0, r0, r5
   2ab56:	eb41 0104 	adc.w	r1, r1, r4
}
   2ab5a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2ab5c:	f04f 30ff 	mov.w	r0, #4294967295
   2ab60:	4601      	mov	r1, r0
   2ab62:	e7fa      	b.n	2ab5a <sys_clock_timeout_end_calc+0x3a>

0002ab64 <k_timer_init>:
	timer->status = 0U;
   2ab64:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2ab66:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2ab6a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2ab6e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2ab72:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2ab76:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2ab78:	6343      	str	r3, [r0, #52]	; 0x34
}
   2ab7a:	4770      	bx	lr

0002ab7c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2ab7c:	b510      	push	{r4, lr}
   2ab7e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2ab80:	f7f8 fa46 	bl	23010 <z_abort_timeout>

	if (inactive) {
   2ab84:	b9b0      	cbnz	r0, 2abb4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2ab86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ab88:	b10b      	cbz	r3, 2ab8e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2ab8a:	4620      	mov	r0, r4
   2ab8c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2ab8e:	f104 0018 	add.w	r0, r4, #24
   2ab92:	f7f7 fdbb 	bl	2270c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2ab96:	b168      	cbz	r0, 2abb4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2ab98:	f7f7 f82c 	bl	21bf4 <z_ready_thread>
   2ab9c:	f04f 0320 	mov.w	r3, #32
   2aba0:	f3ef 8011 	mrs	r0, BASEPRI
   2aba4:	f383 8812 	msr	BASEPRI_MAX, r3
   2aba8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2abac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2abb0:	f7ff bf86 	b.w	2aac0 <z_reschedule_irqlock>
   2abb4:	bd10      	pop	{r4, pc}

0002abb6 <add_event>:
{
   2abb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2abb8:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2abba:	e9d0 1300 	ldrd	r1, r3, [r0]
   2abbe:	4288      	cmp	r0, r1
   2abc0:	4604      	mov	r4, r0
   2abc2:	d105      	bne.n	2abd0 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2abc4:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2abc6:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2abca:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2abcc:	6065      	str	r5, [r4, #4]
   2abce:	e01d      	b.n	2ac0c <add_event+0x56>
	if ((pending == NULL) ||
   2abd0:	2b00      	cmp	r3, #0
   2abd2:	d0f7      	beq.n	2abc4 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2abd4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2abd6:	b100      	cbz	r0, 2abda <add_event+0x24>
   2abd8:	3860      	subs	r0, #96	; 0x60
   2abda:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2abde:	4639      	mov	r1, r7
   2abe0:	f7ff ff65 	bl	2aaae <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2abe4:	2800      	cmp	r0, #0
   2abe6:	dced      	bgt.n	2abc4 <add_event+0xe>
	return list->head == list;
   2abe8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2abea:	42b4      	cmp	r4, r6
   2abec:	d0ea      	beq.n	2abc4 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2abee:	2e00      	cmp	r6, #0
   2abf0:	d0e8      	beq.n	2abc4 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2abf2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2abf4:	b101      	cbz	r1, 2abf8 <add_event+0x42>
   2abf6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2abf8:	4638      	mov	r0, r7
   2abfa:	f7ff ff58 	bl	2aaae <z_sched_prio_cmp>
   2abfe:	2800      	cmp	r0, #0
   2ac00:	dd05      	ble.n	2ac0e <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2ac02:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2ac04:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2ac08:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2ac0a:	6075      	str	r5, [r6, #4]
}
   2ac0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2ac0e:	6863      	ldr	r3, [r4, #4]
   2ac10:	429e      	cmp	r6, r3
   2ac12:	d0d7      	beq.n	2abc4 <add_event+0xe>
   2ac14:	6836      	ldr	r6, [r6, #0]
   2ac16:	e7ea      	b.n	2abee <add_event+0x38>

0002ac18 <signal_poll_event>:
{
   2ac18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2ac1c:	6884      	ldr	r4, [r0, #8]
{
   2ac1e:	4605      	mov	r5, r0
   2ac20:	460e      	mov	r6, r1
	if (poller != NULL) {
   2ac22:	b144      	cbz	r4, 2ac36 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2ac24:	7863      	ldrb	r3, [r4, #1]
   2ac26:	2b01      	cmp	r3, #1
   2ac28:	d12e      	bne.n	2ac88 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2ac2a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2ac2e:	f013 0302 	ands.w	r3, r3, #2
   2ac32:	d10a      	bne.n	2ac4a <signal_poll_event+0x32>
		poller->is_polling = false;
   2ac34:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2ac36:	2000      	movs	r0, #0
	event->state |= state;
   2ac38:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2ac3a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2ac3c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2ac40:	4316      	orrs	r6, r2
   2ac42:	f366 3394 	bfi	r3, r6, #14, #7
   2ac46:	60eb      	str	r3, [r5, #12]
	return retcode;
   2ac48:	e03e      	b.n	2acc8 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2ac4a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295
   2ac52:	bf08      	it	eq
   2ac54:	f112 0f02 	cmneq.w	r2, #2
   2ac58:	d032      	beq.n	2acc0 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ac5a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2ac5e:	4640      	mov	r0, r8
   2ac60:	f7f7 fcb2 	bl	225c8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2ac64:	2e08      	cmp	r6, #8
   2ac66:	bf0c      	ite	eq
   2ac68:	f06f 0303 	mvneq.w	r3, #3
   2ac6c:	2300      	movne	r3, #0
   2ac6e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2ac70:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2ac74:	06db      	lsls	r3, r3, #27
   2ac76:	d109      	bne.n	2ac8c <signal_poll_event+0x74>
   2ac78:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2ac7c:	b937      	cbnz	r7, 2ac8c <signal_poll_event+0x74>
	z_ready_thread(thread);
   2ac7e:	4640      	mov	r0, r8
   2ac80:	f7f6 ffb8 	bl	21bf4 <z_ready_thread>
		poller->is_polling = false;
   2ac84:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2ac86:	e7d6      	b.n	2ac36 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2ac88:	2b02      	cmp	r3, #2
   2ac8a:	d001      	beq.n	2ac90 <signal_poll_event+0x78>
		poller->is_polling = false;
   2ac8c:	2300      	movs	r3, #0
   2ac8e:	e7d1      	b.n	2ac34 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2ac90:	7823      	ldrb	r3, [r4, #0]
   2ac92:	2b00      	cmp	r3, #0
   2ac94:	d0cf      	beq.n	2ac36 <signal_poll_event+0x1e>
   2ac96:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2ac9a:	2f00      	cmp	r7, #0
   2ac9c:	d0f2      	beq.n	2ac84 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2ac9e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2aca2:	f1a4 0914 	sub.w	r9, r4, #20
   2aca6:	f104 0014 	add.w	r0, r4, #20
   2acaa:	f7f8 f9b1 	bl	23010 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   2acae:	4649      	mov	r1, r9
   2acb0:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2acb2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2acb6:	f7f6 fb2b 	bl	21310 <z_work_submit_to_queue>
		poller->is_polling = false;
   2acba:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2acbe:	e7ba      	b.n	2ac36 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2acc0:	2300      	movs	r3, #0
		return -EAGAIN;
   2acc2:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2acc6:	7023      	strb	r3, [r4, #0]
}
   2acc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002accc <z_handle_obj_poll_events>:
{
   2accc:	4603      	mov	r3, r0
	return list->head == list;
   2acce:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2acd0:	4283      	cmp	r3, r0
   2acd2:	d008      	beq.n	2ace6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2acd4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2acd8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2acda:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2acdc:	2300      	movs	r3, #0
	node->prev = NULL;
   2acde:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2ace2:	f7ff bf99 	b.w	2ac18 <signal_poll_event>
}
   2ace6:	4770      	bx	lr

0002ace8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2ace8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2acea:	e9c0 0000 	strd	r0, r0, [r0]
   2acee:	6083      	str	r3, [r0, #8]
}
   2acf0:	4770      	bx	lr

0002acf2 <k_free>:
	if (ptr != NULL) {
   2acf2:	b120      	cbz	r0, 2acfe <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2acf4:	1f01      	subs	r1, r0, #4
   2acf6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2acfa:	f7f5 bad9 	b.w	202b0 <k_heap_free>
}
   2acfe:	4770      	bx	lr

0002ad00 <k_malloc>:
{
   2ad00:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2ad02:	2004      	movs	r0, #4
   2ad04:	f7f8 bfcc 	b.w	23ca0 <k_aligned_alloc>

0002ad08 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2ad08:	4770      	bx	lr

0002ad0a <atof>:
   2ad0a:	2100      	movs	r1, #0
   2ad0c:	f7f9 bc9a 	b.w	24644 <strtod>

0002ad10 <memcmp>:
   2ad10:	3901      	subs	r1, #1
   2ad12:	4402      	add	r2, r0
   2ad14:	b510      	push	{r4, lr}
   2ad16:	4290      	cmp	r0, r2
   2ad18:	d101      	bne.n	2ad1e <memcmp+0xe>
   2ad1a:	2000      	movs	r0, #0
   2ad1c:	e005      	b.n	2ad2a <memcmp+0x1a>
   2ad1e:	7803      	ldrb	r3, [r0, #0]
   2ad20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2ad24:	42a3      	cmp	r3, r4
   2ad26:	d001      	beq.n	2ad2c <memcmp+0x1c>
   2ad28:	1b18      	subs	r0, r3, r4
   2ad2a:	bd10      	pop	{r4, pc}
   2ad2c:	3001      	adds	r0, #1
   2ad2e:	e7f2      	b.n	2ad16 <memcmp+0x6>

0002ad30 <memcpy>:
   2ad30:	440a      	add	r2, r1
   2ad32:	1e43      	subs	r3, r0, #1
   2ad34:	4291      	cmp	r1, r2
   2ad36:	d100      	bne.n	2ad3a <memcpy+0xa>
   2ad38:	4770      	bx	lr
   2ad3a:	b510      	push	{r4, lr}
   2ad3c:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ad40:	4291      	cmp	r1, r2
   2ad42:	f803 4f01 	strb.w	r4, [r3, #1]!
   2ad46:	d1f9      	bne.n	2ad3c <memcpy+0xc>
   2ad48:	bd10      	pop	{r4, pc}

0002ad4a <__memcpy_chk>:
   2ad4a:	429a      	cmp	r2, r3
   2ad4c:	b508      	push	{r3, lr}
   2ad4e:	d901      	bls.n	2ad54 <__memcpy_chk+0xa>
   2ad50:	f7e7 f922 	bl	11f98 <__chk_fail>
   2ad54:	4281      	cmp	r1, r0
   2ad56:	d804      	bhi.n	2ad62 <__memcpy_chk+0x18>
   2ad58:	188b      	adds	r3, r1, r2
   2ad5a:	4298      	cmp	r0, r3
   2ad5c:	d3f8      	bcc.n	2ad50 <__memcpy_chk+0x6>
   2ad5e:	4281      	cmp	r1, r0
   2ad60:	d102      	bne.n	2ad68 <__memcpy_chk+0x1e>
   2ad62:	1883      	adds	r3, r0, r2
   2ad64:	4299      	cmp	r1, r3
   2ad66:	d3f3      	bcc.n	2ad50 <__memcpy_chk+0x6>
   2ad68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2ad6c:	f7ff bfe0 	b.w	2ad30 <memcpy>

0002ad70 <memmove>:
   2ad70:	4288      	cmp	r0, r1
   2ad72:	b510      	push	{r4, lr}
   2ad74:	eb01 0402 	add.w	r4, r1, r2
   2ad78:	d902      	bls.n	2ad80 <memmove+0x10>
   2ad7a:	4284      	cmp	r4, r0
   2ad7c:	4623      	mov	r3, r4
   2ad7e:	d807      	bhi.n	2ad90 <memmove+0x20>
   2ad80:	1e43      	subs	r3, r0, #1
   2ad82:	42a1      	cmp	r1, r4
   2ad84:	d008      	beq.n	2ad98 <memmove+0x28>
   2ad86:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ad8a:	f803 2f01 	strb.w	r2, [r3, #1]!
   2ad8e:	e7f8      	b.n	2ad82 <memmove+0x12>
   2ad90:	4402      	add	r2, r0
   2ad92:	4601      	mov	r1, r0
   2ad94:	428a      	cmp	r2, r1
   2ad96:	d100      	bne.n	2ad9a <memmove+0x2a>
   2ad98:	bd10      	pop	{r4, pc}
   2ad9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2ad9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2ada2:	e7f7      	b.n	2ad94 <memmove+0x24>

0002ada4 <memset>:
   2ada4:	4402      	add	r2, r0
   2ada6:	4603      	mov	r3, r0
   2ada8:	4293      	cmp	r3, r2
   2adaa:	d100      	bne.n	2adae <memset+0xa>
   2adac:	4770      	bx	lr
   2adae:	f803 1b01 	strb.w	r1, [r3], #1
   2adb2:	e7f9      	b.n	2ada8 <memset+0x4>

0002adb4 <_calloc_r>:
   2adb4:	b538      	push	{r3, r4, r5, lr}
   2adb6:	fb02 f501 	mul.w	r5, r2, r1
   2adba:	4629      	mov	r1, r5
   2adbc:	f7f9 f85c 	bl	23e78 <_malloc_r>
   2adc0:	4604      	mov	r4, r0
   2adc2:	b118      	cbz	r0, 2adcc <_calloc_r+0x18>
   2adc4:	462a      	mov	r2, r5
   2adc6:	2100      	movs	r1, #0
   2adc8:	f7ff ffec 	bl	2ada4 <memset>
   2adcc:	4620      	mov	r0, r4
   2adce:	bd38      	pop	{r3, r4, r5, pc}

0002add0 <__cvt>:
   2add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2add4:	b089      	sub	sp, #36	; 0x24
   2add6:	2b00      	cmp	r3, #0
   2add8:	461d      	mov	r5, r3
   2adda:	4614      	mov	r4, r2
   2addc:	bfba      	itte	lt
   2adde:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2ade2:	4614      	movlt	r4, r2
   2ade4:	2300      	movge	r3, #0
   2ade6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2ade8:	bfbc      	itt	lt
   2adea:	461d      	movlt	r5, r3
   2adec:	232d      	movlt	r3, #45	; 0x2d
   2adee:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   2adf2:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   2adf6:	f028 0a20 	bic.w	sl, r8, #32
   2adfa:	7013      	strb	r3, [r2, #0]
   2adfc:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2ae00:	d005      	beq.n	2ae0e <__cvt+0x3e>
   2ae02:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   2ae06:	d100      	bne.n	2ae0a <__cvt+0x3a>
   2ae08:	3601      	adds	r6, #1
   2ae0a:	2302      	movs	r3, #2
   2ae0c:	e000      	b.n	2ae10 <__cvt+0x40>
   2ae0e:	2303      	movs	r3, #3
   2ae10:	aa07      	add	r2, sp, #28
   2ae12:	9204      	str	r2, [sp, #16]
   2ae14:	aa06      	add	r2, sp, #24
   2ae16:	e9cd 3600 	strd	r3, r6, [sp]
   2ae1a:	e9cd 9202 	strd	r9, r2, [sp, #8]
   2ae1e:	462b      	mov	r3, r5
   2ae20:	4622      	mov	r2, r4
   2ae22:	f7df fd7d 	bl	a920 <_dtoa_r>
   2ae26:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   2ae2a:	4607      	mov	r7, r0
   2ae2c:	d119      	bne.n	2ae62 <__cvt+0x92>
   2ae2e:	f01b 0f01 	tst.w	fp, #1
   2ae32:	d00e      	beq.n	2ae52 <__cvt+0x82>
   2ae34:	eb07 0806 	add.w	r8, r7, r6
   2ae38:	2200      	movs	r2, #0
   2ae3a:	2300      	movs	r3, #0
   2ae3c:	4620      	mov	r0, r4
   2ae3e:	4629      	mov	r1, r5
   2ae40:	f7de f8e4 	bl	900c <__aeabi_dcmpeq>
   2ae44:	b108      	cbz	r0, 2ae4a <__cvt+0x7a>
   2ae46:	f8cd 801c 	str.w	r8, [sp, #28]
   2ae4a:	2230      	movs	r2, #48	; 0x30
   2ae4c:	9b07      	ldr	r3, [sp, #28]
   2ae4e:	4543      	cmp	r3, r8
   2ae50:	d321      	bcc.n	2ae96 <__cvt+0xc6>
   2ae52:	9b07      	ldr	r3, [sp, #28]
   2ae54:	4638      	mov	r0, r7
   2ae56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2ae58:	1bdb      	subs	r3, r3, r7
   2ae5a:	6013      	str	r3, [r2, #0]
   2ae5c:	b009      	add	sp, #36	; 0x24
   2ae5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   2ae66:	d0e2      	beq.n	2ae2e <__cvt+0x5e>
   2ae68:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2ae6c:	eb00 0806 	add.w	r8, r0, r6
   2ae70:	d1e2      	bne.n	2ae38 <__cvt+0x68>
   2ae72:	7803      	ldrb	r3, [r0, #0]
   2ae74:	2b30      	cmp	r3, #48	; 0x30
   2ae76:	d10a      	bne.n	2ae8e <__cvt+0xbe>
   2ae78:	2200      	movs	r2, #0
   2ae7a:	2300      	movs	r3, #0
   2ae7c:	4620      	mov	r0, r4
   2ae7e:	4629      	mov	r1, r5
   2ae80:	f7de f8c4 	bl	900c <__aeabi_dcmpeq>
   2ae84:	b918      	cbnz	r0, 2ae8e <__cvt+0xbe>
   2ae86:	f1c6 0601 	rsb	r6, r6, #1
   2ae8a:	f8c9 6000 	str.w	r6, [r9]
   2ae8e:	f8d9 3000 	ldr.w	r3, [r9]
   2ae92:	4498      	add	r8, r3
   2ae94:	e7d0      	b.n	2ae38 <__cvt+0x68>
   2ae96:	1c59      	adds	r1, r3, #1
   2ae98:	9107      	str	r1, [sp, #28]
   2ae9a:	701a      	strb	r2, [r3, #0]
   2ae9c:	e7d6      	b.n	2ae4c <__cvt+0x7c>

0002ae9e <__exponent>:
   2ae9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2aea0:	2900      	cmp	r1, #0
   2aea2:	7002      	strb	r2, [r0, #0]
   2aea4:	bfba      	itte	lt
   2aea6:	4249      	neglt	r1, r1
   2aea8:	232d      	movlt	r3, #45	; 0x2d
   2aeaa:	232b      	movge	r3, #43	; 0x2b
   2aeac:	2909      	cmp	r1, #9
   2aeae:	7043      	strb	r3, [r0, #1]
   2aeb0:	dd28      	ble.n	2af04 <__exponent+0x66>
   2aeb2:	f10d 0307 	add.w	r3, sp, #7
   2aeb6:	270a      	movs	r7, #10
   2aeb8:	461d      	mov	r5, r3
   2aeba:	461a      	mov	r2, r3
   2aebc:	3b01      	subs	r3, #1
   2aebe:	fbb1 f6f7 	udiv	r6, r1, r7
   2aec2:	fb07 1416 	mls	r4, r7, r6, r1
   2aec6:	3430      	adds	r4, #48	; 0x30
   2aec8:	f802 4c01 	strb.w	r4, [r2, #-1]
   2aecc:	460c      	mov	r4, r1
   2aece:	4631      	mov	r1, r6
   2aed0:	2c63      	cmp	r4, #99	; 0x63
   2aed2:	dcf2      	bgt.n	2aeba <__exponent+0x1c>
   2aed4:	3130      	adds	r1, #48	; 0x30
   2aed6:	1e94      	subs	r4, r2, #2
   2aed8:	f803 1c01 	strb.w	r1, [r3, #-1]
   2aedc:	1c41      	adds	r1, r0, #1
   2aede:	4623      	mov	r3, r4
   2aee0:	42ab      	cmp	r3, r5
   2aee2:	d30a      	bcc.n	2aefa <__exponent+0x5c>
   2aee4:	f10d 0309 	add.w	r3, sp, #9
   2aee8:	1a9b      	subs	r3, r3, r2
   2aeea:	42ac      	cmp	r4, r5
   2aeec:	bf88      	it	hi
   2aeee:	2300      	movhi	r3, #0
   2aef0:	3302      	adds	r3, #2
   2aef2:	4403      	add	r3, r0
   2aef4:	1a18      	subs	r0, r3, r0
   2aef6:	b003      	add	sp, #12
   2aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aefa:	f813 6b01 	ldrb.w	r6, [r3], #1
   2aefe:	f801 6f01 	strb.w	r6, [r1, #1]!
   2af02:	e7ed      	b.n	2aee0 <__exponent+0x42>
   2af04:	2330      	movs	r3, #48	; 0x30
   2af06:	3130      	adds	r1, #48	; 0x30
   2af08:	7083      	strb	r3, [r0, #2]
   2af0a:	1d03      	adds	r3, r0, #4
   2af0c:	70c1      	strb	r1, [r0, #3]
   2af0e:	e7f1      	b.n	2aef4 <__exponent+0x56>

0002af10 <_printf_common>:
   2af10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2af14:	4616      	mov	r6, r2
   2af16:	4698      	mov	r8, r3
   2af18:	688a      	ldr	r2, [r1, #8]
   2af1a:	4607      	mov	r7, r0
   2af1c:	690b      	ldr	r3, [r1, #16]
   2af1e:	460c      	mov	r4, r1
   2af20:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2af24:	4293      	cmp	r3, r2
   2af26:	bfb8      	it	lt
   2af28:	4613      	movlt	r3, r2
   2af2a:	6033      	str	r3, [r6, #0]
   2af2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2af30:	b10a      	cbz	r2, 2af36 <_printf_common+0x26>
   2af32:	3301      	adds	r3, #1
   2af34:	6033      	str	r3, [r6, #0]
   2af36:	6823      	ldr	r3, [r4, #0]
   2af38:	0699      	lsls	r1, r3, #26
   2af3a:	bf42      	ittt	mi
   2af3c:	6833      	ldrmi	r3, [r6, #0]
   2af3e:	3302      	addmi	r3, #2
   2af40:	6033      	strmi	r3, [r6, #0]
   2af42:	6825      	ldr	r5, [r4, #0]
   2af44:	f015 0506 	ands.w	r5, r5, #6
   2af48:	d106      	bne.n	2af58 <_printf_common+0x48>
   2af4a:	f104 0a19 	add.w	sl, r4, #25
   2af4e:	68e3      	ldr	r3, [r4, #12]
   2af50:	6832      	ldr	r2, [r6, #0]
   2af52:	1a9b      	subs	r3, r3, r2
   2af54:	42ab      	cmp	r3, r5
   2af56:	dc2b      	bgt.n	2afb0 <_printf_common+0xa0>
   2af58:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2af5c:	6822      	ldr	r2, [r4, #0]
   2af5e:	3b00      	subs	r3, #0
   2af60:	bf18      	it	ne
   2af62:	2301      	movne	r3, #1
   2af64:	0692      	lsls	r2, r2, #26
   2af66:	d430      	bmi.n	2afca <_printf_common+0xba>
   2af68:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2af6c:	4641      	mov	r1, r8
   2af6e:	4638      	mov	r0, r7
   2af70:	47c8      	blx	r9
   2af72:	3001      	adds	r0, #1
   2af74:	d023      	beq.n	2afbe <_printf_common+0xae>
   2af76:	6823      	ldr	r3, [r4, #0]
   2af78:	341a      	adds	r4, #26
   2af7a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2af7e:	f003 0306 	and.w	r3, r3, #6
   2af82:	2b04      	cmp	r3, #4
   2af84:	bf0a      	itet	eq
   2af86:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   2af8a:	2500      	movne	r5, #0
   2af8c:	6833      	ldreq	r3, [r6, #0]
   2af8e:	f04f 0600 	mov.w	r6, #0
   2af92:	bf08      	it	eq
   2af94:	1aed      	subeq	r5, r5, r3
   2af96:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2af9a:	bf08      	it	eq
   2af9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2afa0:	4293      	cmp	r3, r2
   2afa2:	bfc4      	itt	gt
   2afa4:	1a9b      	subgt	r3, r3, r2
   2afa6:	18ed      	addgt	r5, r5, r3
   2afa8:	42b5      	cmp	r5, r6
   2afaa:	d11a      	bne.n	2afe2 <_printf_common+0xd2>
   2afac:	2000      	movs	r0, #0
   2afae:	e008      	b.n	2afc2 <_printf_common+0xb2>
   2afb0:	2301      	movs	r3, #1
   2afb2:	4652      	mov	r2, sl
   2afb4:	4641      	mov	r1, r8
   2afb6:	4638      	mov	r0, r7
   2afb8:	47c8      	blx	r9
   2afba:	3001      	adds	r0, #1
   2afbc:	d103      	bne.n	2afc6 <_printf_common+0xb6>
   2afbe:	f04f 30ff 	mov.w	r0, #4294967295
   2afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2afc6:	3501      	adds	r5, #1
   2afc8:	e7c1      	b.n	2af4e <_printf_common+0x3e>
   2afca:	18e1      	adds	r1, r4, r3
   2afcc:	1c5a      	adds	r2, r3, #1
   2afce:	2030      	movs	r0, #48	; 0x30
   2afd0:	3302      	adds	r3, #2
   2afd2:	4422      	add	r2, r4
   2afd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2afd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2afdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2afe0:	e7c2      	b.n	2af68 <_printf_common+0x58>
   2afe2:	2301      	movs	r3, #1
   2afe4:	4622      	mov	r2, r4
   2afe6:	4641      	mov	r1, r8
   2afe8:	4638      	mov	r0, r7
   2afea:	47c8      	blx	r9
   2afec:	3001      	adds	r0, #1
   2afee:	d0e6      	beq.n	2afbe <_printf_common+0xae>
   2aff0:	3601      	adds	r6, #1
   2aff2:	e7d9      	b.n	2afa8 <_printf_common+0x98>

0002aff4 <strchr>:
   2aff4:	b2c9      	uxtb	r1, r1
   2aff6:	4603      	mov	r3, r0
   2aff8:	4618      	mov	r0, r3
   2affa:	f813 2b01 	ldrb.w	r2, [r3], #1
   2affe:	b112      	cbz	r2, 2b006 <strchr+0x12>
   2b000:	428a      	cmp	r2, r1
   2b002:	d1f9      	bne.n	2aff8 <strchr+0x4>
   2b004:	4770      	bx	lr
   2b006:	2900      	cmp	r1, #0
   2b008:	bf18      	it	ne
   2b00a:	2000      	movne	r0, #0
   2b00c:	4770      	bx	lr

0002b00e <strcpy>:
   2b00e:	4603      	mov	r3, r0
   2b010:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b014:	f803 2b01 	strb.w	r2, [r3], #1
   2b018:	2a00      	cmp	r2, #0
   2b01a:	d1f9      	bne.n	2b010 <strcpy+0x2>
   2b01c:	4770      	bx	lr

0002b01e <strncmp>:
   2b01e:	b510      	push	{r4, lr}
   2b020:	b16a      	cbz	r2, 2b03e <strncmp+0x20>
   2b022:	3901      	subs	r1, #1
   2b024:	1884      	adds	r4, r0, r2
   2b026:	f810 2b01 	ldrb.w	r2, [r0], #1
   2b02a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2b02e:	429a      	cmp	r2, r3
   2b030:	d103      	bne.n	2b03a <strncmp+0x1c>
   2b032:	42a0      	cmp	r0, r4
   2b034:	d001      	beq.n	2b03a <strncmp+0x1c>
   2b036:	2a00      	cmp	r2, #0
   2b038:	d1f5      	bne.n	2b026 <strncmp+0x8>
   2b03a:	1ad0      	subs	r0, r2, r3
   2b03c:	bd10      	pop	{r4, pc}
   2b03e:	4610      	mov	r0, r2
   2b040:	e7fc      	b.n	2b03c <strncmp+0x1e>

0002b042 <strncpy>:
   2b042:	3901      	subs	r1, #1
   2b044:	4603      	mov	r3, r0
   2b046:	b510      	push	{r4, lr}
   2b048:	b132      	cbz	r2, 2b058 <strncpy+0x16>
   2b04a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2b04e:	3a01      	subs	r2, #1
   2b050:	f803 4b01 	strb.w	r4, [r3], #1
   2b054:	2c00      	cmp	r4, #0
   2b056:	d1f7      	bne.n	2b048 <strncpy+0x6>
   2b058:	441a      	add	r2, r3
   2b05a:	2100      	movs	r1, #0
   2b05c:	4293      	cmp	r3, r2
   2b05e:	d100      	bne.n	2b062 <strncpy+0x20>
   2b060:	bd10      	pop	{r4, pc}
   2b062:	f803 1b01 	strb.w	r1, [r3], #1
   2b066:	e7f9      	b.n	2b05c <strncpy+0x1a>

0002b068 <strnlen>:
   2b068:	4602      	mov	r2, r0
   2b06a:	4401      	add	r1, r0
   2b06c:	b510      	push	{r4, lr}
   2b06e:	428a      	cmp	r2, r1
   2b070:	4613      	mov	r3, r2
   2b072:	d003      	beq.n	2b07c <strnlen+0x14>
   2b074:	781c      	ldrb	r4, [r3, #0]
   2b076:	3201      	adds	r2, #1
   2b078:	2c00      	cmp	r4, #0
   2b07a:	d1f8      	bne.n	2b06e <strnlen+0x6>
   2b07c:	1a18      	subs	r0, r3, r0
   2b07e:	bd10      	pop	{r4, pc}

0002b080 <strstr>:
   2b080:	780a      	ldrb	r2, [r1, #0]
   2b082:	b570      	push	{r4, r5, r6, lr}
   2b084:	b96a      	cbnz	r2, 2b0a2 <strstr+0x22>
   2b086:	bd70      	pop	{r4, r5, r6, pc}
   2b088:	429a      	cmp	r2, r3
   2b08a:	d109      	bne.n	2b0a0 <strstr+0x20>
   2b08c:	460c      	mov	r4, r1
   2b08e:	4605      	mov	r5, r0
   2b090:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b094:	2b00      	cmp	r3, #0
   2b096:	d0f6      	beq.n	2b086 <strstr+0x6>
   2b098:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   2b09c:	429e      	cmp	r6, r3
   2b09e:	d0f7      	beq.n	2b090 <strstr+0x10>
   2b0a0:	3001      	adds	r0, #1
   2b0a2:	7803      	ldrb	r3, [r0, #0]
   2b0a4:	2b00      	cmp	r3, #0
   2b0a6:	d1ef      	bne.n	2b088 <strstr+0x8>
   2b0a8:	4618      	mov	r0, r3
   2b0aa:	e7ec      	b.n	2b086 <strstr+0x6>

0002b0ac <sulp>:
   2b0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b0b0:	4690      	mov	r8, r2
   2b0b2:	460f      	mov	r7, r1
   2b0b4:	f7fa f946 	bl	25344 <__ulp>
   2b0b8:	4604      	mov	r4, r0
   2b0ba:	460d      	mov	r5, r1
   2b0bc:	f1b8 0f00 	cmp.w	r8, #0
   2b0c0:	d011      	beq.n	2b0e6 <sulp+0x3a>
   2b0c2:	f3c7 530a 	ubfx	r3, r7, #20, #11
   2b0c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   2b0ca:	2b00      	cmp	r3, #0
   2b0cc:	dd0b      	ble.n	2b0e6 <sulp+0x3a>
   2b0ce:	051b      	lsls	r3, r3, #20
   2b0d0:	2400      	movs	r4, #0
   2b0d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   2b0d6:	4622      	mov	r2, r4
   2b0d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   2b0dc:	462b      	mov	r3, r5
   2b0de:	f7dd f9f7 	bl	84d0 <__aeabi_dmul>
   2b0e2:	4604      	mov	r4, r0
   2b0e4:	460d      	mov	r5, r1
   2b0e6:	4620      	mov	r0, r4
   2b0e8:	4629      	mov	r1, r5
   2b0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b0ee <__strtok_r>:
   2b0ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b0f0:	4604      	mov	r4, r0
   2b0f2:	b908      	cbnz	r0, 2b0f8 <__strtok_r+0xa>
   2b0f4:	6814      	ldr	r4, [r2, #0]
   2b0f6:	b144      	cbz	r4, 2b10a <__strtok_r+0x1c>
   2b0f8:	4620      	mov	r0, r4
   2b0fa:	460f      	mov	r7, r1
   2b0fc:	f814 5b01 	ldrb.w	r5, [r4], #1
   2b100:	f817 6b01 	ldrb.w	r6, [r7], #1
   2b104:	b91e      	cbnz	r6, 2b10e <__strtok_r+0x20>
   2b106:	b965      	cbnz	r5, 2b122 <__strtok_r+0x34>
   2b108:	6015      	str	r5, [r2, #0]
   2b10a:	2000      	movs	r0, #0
   2b10c:	e005      	b.n	2b11a <__strtok_r+0x2c>
   2b10e:	42b5      	cmp	r5, r6
   2b110:	d1f6      	bne.n	2b100 <__strtok_r+0x12>
   2b112:	2b00      	cmp	r3, #0
   2b114:	d1f0      	bne.n	2b0f8 <__strtok_r+0xa>
   2b116:	6014      	str	r4, [r2, #0]
   2b118:	7003      	strb	r3, [r0, #0]
   2b11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b11c:	461c      	mov	r4, r3
   2b11e:	e00c      	b.n	2b13a <__strtok_r+0x4c>
   2b120:	b915      	cbnz	r5, 2b128 <__strtok_r+0x3a>
   2b122:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b126:	460e      	mov	r6, r1
   2b128:	f816 5b01 	ldrb.w	r5, [r6], #1
   2b12c:	42ab      	cmp	r3, r5
   2b12e:	d1f7      	bne.n	2b120 <__strtok_r+0x32>
   2b130:	2b00      	cmp	r3, #0
   2b132:	d0f3      	beq.n	2b11c <__strtok_r+0x2e>
   2b134:	2300      	movs	r3, #0
   2b136:	f804 3c01 	strb.w	r3, [r4, #-1]
   2b13a:	6014      	str	r4, [r2, #0]
   2b13c:	e7ed      	b.n	2b11a <__strtok_r+0x2c>

0002b13e <quorem>:
   2b13e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b142:	6903      	ldr	r3, [r0, #16]
   2b144:	4607      	mov	r7, r0
   2b146:	690c      	ldr	r4, [r1, #16]
   2b148:	42a3      	cmp	r3, r4
   2b14a:	f2c0 8083 	blt.w	2b254 <quorem+0x116>
   2b14e:	3c01      	subs	r4, #1
   2b150:	f100 0514 	add.w	r5, r0, #20
   2b154:	f101 0814 	add.w	r8, r1, #20
   2b158:	00a3      	lsls	r3, r4, #2
   2b15a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2b15e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2b162:	9300      	str	r3, [sp, #0]
   2b164:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2b168:	9301      	str	r3, [sp, #4]
   2b16a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2b16e:	3301      	adds	r3, #1
   2b170:	429a      	cmp	r2, r3
   2b172:	fbb2 f6f3 	udiv	r6, r2, r3
   2b176:	d331      	bcc.n	2b1dc <quorem+0x9e>
   2b178:	f04f 0a00 	mov.w	sl, #0
   2b17c:	46c4      	mov	ip, r8
   2b17e:	46ae      	mov	lr, r5
   2b180:	46d3      	mov	fp, sl
   2b182:	f85c 3b04 	ldr.w	r3, [ip], #4
   2b186:	b298      	uxth	r0, r3
   2b188:	45e1      	cmp	r9, ip
   2b18a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2b18e:	fb06 a000 	mla	r0, r6, r0, sl
   2b192:	ea4f 4210 	mov.w	r2, r0, lsr #16
   2b196:	b280      	uxth	r0, r0
   2b198:	fb06 2303 	mla	r3, r6, r3, r2
   2b19c:	f8de 2000 	ldr.w	r2, [lr]
   2b1a0:	b292      	uxth	r2, r2
   2b1a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2b1a6:	eba2 0200 	sub.w	r2, r2, r0
   2b1aa:	b29b      	uxth	r3, r3
   2b1ac:	f8de 0000 	ldr.w	r0, [lr]
   2b1b0:	445a      	add	r2, fp
   2b1b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   2b1b6:	b292      	uxth	r2, r2
   2b1b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   2b1bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2b1c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
   2b1c4:	f84e 2b04 	str.w	r2, [lr], #4
   2b1c8:	d2db      	bcs.n	2b182 <quorem+0x44>
   2b1ca:	9b00      	ldr	r3, [sp, #0]
   2b1cc:	58eb      	ldr	r3, [r5, r3]
   2b1ce:	b92b      	cbnz	r3, 2b1dc <quorem+0x9e>
   2b1d0:	9b01      	ldr	r3, [sp, #4]
   2b1d2:	3b04      	subs	r3, #4
   2b1d4:	429d      	cmp	r5, r3
   2b1d6:	461a      	mov	r2, r3
   2b1d8:	d330      	bcc.n	2b23c <quorem+0xfe>
   2b1da:	613c      	str	r4, [r7, #16]
   2b1dc:	4638      	mov	r0, r7
   2b1de:	f000 fa06 	bl	2b5ee <__mcmp>
   2b1e2:	2800      	cmp	r0, #0
   2b1e4:	db26      	blt.n	2b234 <quorem+0xf6>
   2b1e6:	4629      	mov	r1, r5
   2b1e8:	2000      	movs	r0, #0
   2b1ea:	f858 2b04 	ldr.w	r2, [r8], #4
   2b1ee:	f8d1 c000 	ldr.w	ip, [r1]
   2b1f2:	fa1f fe82 	uxth.w	lr, r2
   2b1f6:	45c1      	cmp	r9, r8
   2b1f8:	fa1f f38c 	uxth.w	r3, ip
   2b1fc:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2b200:	eba3 030e 	sub.w	r3, r3, lr
   2b204:	4403      	add	r3, r0
   2b206:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   2b20a:	b29b      	uxth	r3, r3
   2b20c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   2b210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b214:	ea4f 4022 	mov.w	r0, r2, asr #16
   2b218:	f841 3b04 	str.w	r3, [r1], #4
   2b21c:	d2e5      	bcs.n	2b1ea <quorem+0xac>
   2b21e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2b222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2b226:	b922      	cbnz	r2, 2b232 <quorem+0xf4>
   2b228:	3b04      	subs	r3, #4
   2b22a:	429d      	cmp	r5, r3
   2b22c:	461a      	mov	r2, r3
   2b22e:	d30b      	bcc.n	2b248 <quorem+0x10a>
   2b230:	613c      	str	r4, [r7, #16]
   2b232:	3601      	adds	r6, #1
   2b234:	4630      	mov	r0, r6
   2b236:	b003      	add	sp, #12
   2b238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b23c:	6812      	ldr	r2, [r2, #0]
   2b23e:	3b04      	subs	r3, #4
   2b240:	2a00      	cmp	r2, #0
   2b242:	d1ca      	bne.n	2b1da <quorem+0x9c>
   2b244:	3c01      	subs	r4, #1
   2b246:	e7c5      	b.n	2b1d4 <quorem+0x96>
   2b248:	6812      	ldr	r2, [r2, #0]
   2b24a:	3b04      	subs	r3, #4
   2b24c:	2a00      	cmp	r2, #0
   2b24e:	d1ef      	bne.n	2b230 <quorem+0xf2>
   2b250:	3c01      	subs	r4, #1
   2b252:	e7ea      	b.n	2b22a <quorem+0xec>
   2b254:	2000      	movs	r0, #0
   2b256:	e7ee      	b.n	2b236 <quorem+0xf8>

0002b258 <__sfmoreglue>:
   2b258:	b570      	push	{r4, r5, r6, lr}
   2b25a:	2368      	movs	r3, #104	; 0x68
   2b25c:	1e4d      	subs	r5, r1, #1
   2b25e:	460e      	mov	r6, r1
   2b260:	435d      	muls	r5, r3
   2b262:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2b266:	f7f8 fe07 	bl	23e78 <_malloc_r>
   2b26a:	4604      	mov	r4, r0
   2b26c:	b140      	cbz	r0, 2b280 <__sfmoreglue+0x28>
   2b26e:	2100      	movs	r1, #0
   2b270:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2b274:	e9c0 1600 	strd	r1, r6, [r0]
   2b278:	300c      	adds	r0, #12
   2b27a:	60a0      	str	r0, [r4, #8]
   2b27c:	f7ff fd92 	bl	2ada4 <memset>
   2b280:	4620      	mov	r0, r4
   2b282:	bd70      	pop	{r4, r5, r6, pc}

0002b284 <_fwalk_reent>:
   2b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b288:	4606      	mov	r6, r0
   2b28a:	4688      	mov	r8, r1
   2b28c:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2b290:	2700      	movs	r7, #0
   2b292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2b296:	f1b9 0901 	subs.w	r9, r9, #1
   2b29a:	d505      	bpl.n	2b2a8 <_fwalk_reent+0x24>
   2b29c:	6824      	ldr	r4, [r4, #0]
   2b29e:	2c00      	cmp	r4, #0
   2b2a0:	d1f7      	bne.n	2b292 <_fwalk_reent+0xe>
   2b2a2:	4638      	mov	r0, r7
   2b2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b2a8:	89ab      	ldrh	r3, [r5, #12]
   2b2aa:	2b01      	cmp	r3, #1
   2b2ac:	d907      	bls.n	2b2be <_fwalk_reent+0x3a>
   2b2ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2b2b2:	3301      	adds	r3, #1
   2b2b4:	d003      	beq.n	2b2be <_fwalk_reent+0x3a>
   2b2b6:	4629      	mov	r1, r5
   2b2b8:	4630      	mov	r0, r6
   2b2ba:	47c0      	blx	r8
   2b2bc:	4307      	orrs	r7, r0
   2b2be:	3568      	adds	r5, #104	; 0x68
   2b2c0:	e7e9      	b.n	2b296 <_fwalk_reent+0x12>

0002b2c2 <rshift>:
   2b2c2:	6903      	ldr	r3, [r0, #16]
   2b2c4:	114a      	asrs	r2, r1, #5
   2b2c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   2b2ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b2ce:	dc04      	bgt.n	2b2da <rshift+0x18>
   2b2d0:	2300      	movs	r3, #0
   2b2d2:	6103      	str	r3, [r0, #16]
   2b2d4:	2300      	movs	r3, #0
   2b2d6:	6143      	str	r3, [r0, #20]
   2b2d8:	e031      	b.n	2b33e <rshift+0x7c>
   2b2da:	f100 0414 	add.w	r4, r0, #20
   2b2de:	f011 011f 	ands.w	r1, r1, #31
   2b2e2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   2b2e6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   2b2ea:	d10c      	bne.n	2b306 <rshift+0x44>
   2b2ec:	f100 0710 	add.w	r7, r0, #16
   2b2f0:	4629      	mov	r1, r5
   2b2f2:	42b1      	cmp	r1, r6
   2b2f4:	d331      	bcc.n	2b35a <rshift+0x98>
   2b2f6:	1a9b      	subs	r3, r3, r2
   2b2f8:	1eea      	subs	r2, r5, #3
   2b2fa:	009b      	lsls	r3, r3, #2
   2b2fc:	4296      	cmp	r6, r2
   2b2fe:	bf38      	it	cc
   2b300:	2300      	movcc	r3, #0
   2b302:	4423      	add	r3, r4
   2b304:	e015      	b.n	2b332 <rshift+0x70>
   2b306:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   2b30a:	f1c1 0820 	rsb	r8, r1, #32
   2b30e:	f105 0e04 	add.w	lr, r5, #4
   2b312:	46a1      	mov	r9, r4
   2b314:	40cf      	lsrs	r7, r1
   2b316:	4576      	cmp	r6, lr
   2b318:	46f4      	mov	ip, lr
   2b31a:	d812      	bhi.n	2b342 <rshift+0x80>
   2b31c:	1a9a      	subs	r2, r3, r2
   2b31e:	3501      	adds	r5, #1
   2b320:	0092      	lsls	r2, r2, #2
   2b322:	3a04      	subs	r2, #4
   2b324:	42ae      	cmp	r6, r5
   2b326:	bf38      	it	cc
   2b328:	2200      	movcc	r2, #0
   2b32a:	18a3      	adds	r3, r4, r2
   2b32c:	50a7      	str	r7, [r4, r2]
   2b32e:	b107      	cbz	r7, 2b332 <rshift+0x70>
   2b330:	3304      	adds	r3, #4
   2b332:	1b1a      	subs	r2, r3, r4
   2b334:	42a3      	cmp	r3, r4
   2b336:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2b33a:	6102      	str	r2, [r0, #16]
   2b33c:	d0ca      	beq.n	2b2d4 <rshift+0x12>
   2b33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b342:	f8dc c000 	ldr.w	ip, [ip]
   2b346:	fa0c fc08 	lsl.w	ip, ip, r8
   2b34a:	ea4c 0707 	orr.w	r7, ip, r7
   2b34e:	f849 7b04 	str.w	r7, [r9], #4
   2b352:	f85e 7b04 	ldr.w	r7, [lr], #4
   2b356:	40cf      	lsrs	r7, r1
   2b358:	e7dd      	b.n	2b316 <rshift+0x54>
   2b35a:	f851 cb04 	ldr.w	ip, [r1], #4
   2b35e:	f847 cf04 	str.w	ip, [r7, #4]!
   2b362:	e7c6      	b.n	2b2f2 <rshift+0x30>

0002b364 <__hexdig_fun>:
   2b364:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2b368:	2b09      	cmp	r3, #9
   2b36a:	d802      	bhi.n	2b372 <__hexdig_fun+0xe>
   2b36c:	3820      	subs	r0, #32
   2b36e:	b2c0      	uxtb	r0, r0
   2b370:	4770      	bx	lr
   2b372:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2b376:	2b05      	cmp	r3, #5
   2b378:	d801      	bhi.n	2b37e <__hexdig_fun+0x1a>
   2b37a:	3847      	subs	r0, #71	; 0x47
   2b37c:	e7f7      	b.n	2b36e <__hexdig_fun+0xa>
   2b37e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2b382:	2b05      	cmp	r3, #5
   2b384:	d801      	bhi.n	2b38a <__hexdig_fun+0x26>
   2b386:	3827      	subs	r0, #39	; 0x27
   2b388:	e7f1      	b.n	2b36e <__hexdig_fun+0xa>
   2b38a:	2000      	movs	r0, #0
   2b38c:	4770      	bx	lr

0002b38e <L_shift>:
   2b38e:	f1c2 0208 	rsb	r2, r2, #8
   2b392:	0092      	lsls	r2, r2, #2
   2b394:	b570      	push	{r4, r5, r6, lr}
   2b396:	f1c2 0620 	rsb	r6, r2, #32
   2b39a:	6843      	ldr	r3, [r0, #4]
   2b39c:	6804      	ldr	r4, [r0, #0]
   2b39e:	fa03 f506 	lsl.w	r5, r3, r6
   2b3a2:	40d3      	lsrs	r3, r2
   2b3a4:	432c      	orrs	r4, r5
   2b3a6:	6004      	str	r4, [r0, #0]
   2b3a8:	f840 3f04 	str.w	r3, [r0, #4]!
   2b3ac:	4288      	cmp	r0, r1
   2b3ae:	d3f4      	bcc.n	2b39a <L_shift+0xc>
   2b3b0:	bd70      	pop	{r4, r5, r6, pc}

0002b3b2 <__match>:
   2b3b2:	6803      	ldr	r3, [r0, #0]
   2b3b4:	3301      	adds	r3, #1
   2b3b6:	b530      	push	{r4, r5, lr}
   2b3b8:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b3bc:	b914      	cbnz	r4, 2b3c4 <__match+0x12>
   2b3be:	6003      	str	r3, [r0, #0]
   2b3c0:	2001      	movs	r0, #1
   2b3c2:	bd30      	pop	{r4, r5, pc}
   2b3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b3c8:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   2b3cc:	2d19      	cmp	r5, #25
   2b3ce:	bf98      	it	ls
   2b3d0:	3220      	addls	r2, #32
   2b3d2:	42a2      	cmp	r2, r4
   2b3d4:	d0f0      	beq.n	2b3b8 <__match+0x6>
   2b3d6:	2000      	movs	r0, #0
   2b3d8:	e7f3      	b.n	2b3c2 <__match+0x10>

0002b3da <__hexnan>:
   2b3da:	680b      	ldr	r3, [r1, #0]
   2b3dc:	6801      	ldr	r1, [r0, #0]
   2b3de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3e2:	115e      	asrs	r6, r3, #5
   2b3e4:	f013 031f 	ands.w	r3, r3, #31
   2b3e8:	f04f 0500 	mov.w	r5, #0
   2b3ec:	b087      	sub	sp, #28
   2b3ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   2b3f2:	4682      	mov	sl, r0
   2b3f4:	4690      	mov	r8, r2
   2b3f6:	46ab      	mov	fp, r5
   2b3f8:	bf18      	it	ne
   2b3fa:	3604      	addne	r6, #4
   2b3fc:	9301      	str	r3, [sp, #4]
   2b3fe:	9502      	str	r5, [sp, #8]
   2b400:	1f37      	subs	r7, r6, #4
   2b402:	f846 5c04 	str.w	r5, [r6, #-4]
   2b406:	46b9      	mov	r9, r7
   2b408:	463c      	mov	r4, r7
   2b40a:	1c4b      	adds	r3, r1, #1
   2b40c:	784a      	ldrb	r2, [r1, #1]
   2b40e:	9303      	str	r3, [sp, #12]
   2b410:	b342      	cbz	r2, 2b464 <__hexnan+0x8a>
   2b412:	4610      	mov	r0, r2
   2b414:	9105      	str	r1, [sp, #20]
   2b416:	9204      	str	r2, [sp, #16]
   2b418:	f7ff ffa4 	bl	2b364 <__hexdig_fun>
   2b41c:	2800      	cmp	r0, #0
   2b41e:	d151      	bne.n	2b4c4 <__hexnan+0xea>
   2b420:	9a04      	ldr	r2, [sp, #16]
   2b422:	9905      	ldr	r1, [sp, #20]
   2b424:	2a20      	cmp	r2, #32
   2b426:	d818      	bhi.n	2b45a <__hexnan+0x80>
   2b428:	9b02      	ldr	r3, [sp, #8]
   2b42a:	459b      	cmp	fp, r3
   2b42c:	dd13      	ble.n	2b456 <__hexnan+0x7c>
   2b42e:	454c      	cmp	r4, r9
   2b430:	d206      	bcs.n	2b440 <__hexnan+0x66>
   2b432:	2d07      	cmp	r5, #7
   2b434:	dc04      	bgt.n	2b440 <__hexnan+0x66>
   2b436:	462a      	mov	r2, r5
   2b438:	4649      	mov	r1, r9
   2b43a:	4620      	mov	r0, r4
   2b43c:	f7ff ffa7 	bl	2b38e <L_shift>
   2b440:	4544      	cmp	r4, r8
   2b442:	d951      	bls.n	2b4e8 <__hexnan+0x10e>
   2b444:	2300      	movs	r3, #0
   2b446:	f1a4 0904 	sub.w	r9, r4, #4
   2b44a:	f8cd b008 	str.w	fp, [sp, #8]
   2b44e:	f844 3c04 	str.w	r3, [r4, #-4]
   2b452:	461d      	mov	r5, r3
   2b454:	464c      	mov	r4, r9
   2b456:	9903      	ldr	r1, [sp, #12]
   2b458:	e7d7      	b.n	2b40a <__hexnan+0x30>
   2b45a:	2a29      	cmp	r2, #41	; 0x29
   2b45c:	d156      	bne.n	2b50c <__hexnan+0x132>
   2b45e:	3102      	adds	r1, #2
   2b460:	f8ca 1000 	str.w	r1, [sl]
   2b464:	f1bb 0f00 	cmp.w	fp, #0
   2b468:	d050      	beq.n	2b50c <__hexnan+0x132>
   2b46a:	454c      	cmp	r4, r9
   2b46c:	d206      	bcs.n	2b47c <__hexnan+0xa2>
   2b46e:	2d07      	cmp	r5, #7
   2b470:	dc04      	bgt.n	2b47c <__hexnan+0xa2>
   2b472:	462a      	mov	r2, r5
   2b474:	4649      	mov	r1, r9
   2b476:	4620      	mov	r0, r4
   2b478:	f7ff ff89 	bl	2b38e <L_shift>
   2b47c:	4544      	cmp	r4, r8
   2b47e:	d935      	bls.n	2b4ec <__hexnan+0x112>
   2b480:	f1a8 0204 	sub.w	r2, r8, #4
   2b484:	4623      	mov	r3, r4
   2b486:	f853 1b04 	ldr.w	r1, [r3], #4
   2b48a:	429f      	cmp	r7, r3
   2b48c:	f842 1f04 	str.w	r1, [r2, #4]!
   2b490:	d2f9      	bcs.n	2b486 <__hexnan+0xac>
   2b492:	1b3b      	subs	r3, r7, r4
   2b494:	3e03      	subs	r6, #3
   2b496:	3401      	adds	r4, #1
   2b498:	2200      	movs	r2, #0
   2b49a:	f023 0303 	bic.w	r3, r3, #3
   2b49e:	3304      	adds	r3, #4
   2b4a0:	42b4      	cmp	r4, r6
   2b4a2:	bf88      	it	hi
   2b4a4:	2304      	movhi	r3, #4
   2b4a6:	4443      	add	r3, r8
   2b4a8:	f843 2b04 	str.w	r2, [r3], #4
   2b4ac:	429f      	cmp	r7, r3
   2b4ae:	d2fb      	bcs.n	2b4a8 <__hexnan+0xce>
   2b4b0:	683b      	ldr	r3, [r7, #0]
   2b4b2:	b91b      	cbnz	r3, 2b4bc <__hexnan+0xe2>
   2b4b4:	4547      	cmp	r7, r8
   2b4b6:	d127      	bne.n	2b508 <__hexnan+0x12e>
   2b4b8:	2301      	movs	r3, #1
   2b4ba:	603b      	str	r3, [r7, #0]
   2b4bc:	2005      	movs	r0, #5
   2b4be:	b007      	add	sp, #28
   2b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b4c4:	3501      	adds	r5, #1
   2b4c6:	f10b 0b01 	add.w	fp, fp, #1
   2b4ca:	2d08      	cmp	r5, #8
   2b4cc:	dd05      	ble.n	2b4da <__hexnan+0x100>
   2b4ce:	4544      	cmp	r4, r8
   2b4d0:	d9c1      	bls.n	2b456 <__hexnan+0x7c>
   2b4d2:	2300      	movs	r3, #0
   2b4d4:	3c04      	subs	r4, #4
   2b4d6:	2501      	movs	r5, #1
   2b4d8:	6023      	str	r3, [r4, #0]
   2b4da:	6822      	ldr	r2, [r4, #0]
   2b4dc:	f000 000f 	and.w	r0, r0, #15
   2b4e0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   2b4e4:	6020      	str	r0, [r4, #0]
   2b4e6:	e7b6      	b.n	2b456 <__hexnan+0x7c>
   2b4e8:	2508      	movs	r5, #8
   2b4ea:	e7b4      	b.n	2b456 <__hexnan+0x7c>
   2b4ec:	9b01      	ldr	r3, [sp, #4]
   2b4ee:	2b00      	cmp	r3, #0
   2b4f0:	d0de      	beq.n	2b4b0 <__hexnan+0xd6>
   2b4f2:	f1c3 0320 	rsb	r3, r3, #32
   2b4f6:	f04f 32ff 	mov.w	r2, #4294967295
   2b4fa:	40da      	lsrs	r2, r3
   2b4fc:	f856 3c04 	ldr.w	r3, [r6, #-4]
   2b500:	4013      	ands	r3, r2
   2b502:	f846 3c04 	str.w	r3, [r6, #-4]
   2b506:	e7d3      	b.n	2b4b0 <__hexnan+0xd6>
   2b508:	3f04      	subs	r7, #4
   2b50a:	e7d1      	b.n	2b4b0 <__hexnan+0xd6>
   2b50c:	2004      	movs	r0, #4
   2b50e:	e7d6      	b.n	2b4be <__hexnan+0xe4>

0002b510 <__ascii_mbtowc>:
   2b510:	b082      	sub	sp, #8
   2b512:	b901      	cbnz	r1, 2b516 <__ascii_mbtowc+0x6>
   2b514:	a901      	add	r1, sp, #4
   2b516:	b142      	cbz	r2, 2b52a <__ascii_mbtowc+0x1a>
   2b518:	b14b      	cbz	r3, 2b52e <__ascii_mbtowc+0x1e>
   2b51a:	7813      	ldrb	r3, [r2, #0]
   2b51c:	600b      	str	r3, [r1, #0]
   2b51e:	7812      	ldrb	r2, [r2, #0]
   2b520:	1e10      	subs	r0, r2, #0
   2b522:	bf18      	it	ne
   2b524:	2001      	movne	r0, #1
   2b526:	b002      	add	sp, #8
   2b528:	4770      	bx	lr
   2b52a:	4610      	mov	r0, r2
   2b52c:	e7fb      	b.n	2b526 <__ascii_mbtowc+0x16>
   2b52e:	f06f 0001 	mvn.w	r0, #1
   2b532:	e7f8      	b.n	2b526 <__ascii_mbtowc+0x16>

0002b534 <memchr>:
   2b534:	b2c9      	uxtb	r1, r1
   2b536:	4603      	mov	r3, r0
   2b538:	4402      	add	r2, r0
   2b53a:	b510      	push	{r4, lr}
   2b53c:	4293      	cmp	r3, r2
   2b53e:	4618      	mov	r0, r3
   2b540:	d101      	bne.n	2b546 <memchr+0x12>
   2b542:	2000      	movs	r0, #0
   2b544:	e003      	b.n	2b54e <memchr+0x1a>
   2b546:	7804      	ldrb	r4, [r0, #0]
   2b548:	3301      	adds	r3, #1
   2b54a:	428c      	cmp	r4, r1
   2b54c:	d1f6      	bne.n	2b53c <memchr+0x8>
   2b54e:	bd10      	pop	{r4, pc}

0002b550 <__hi0bits>:
   2b550:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2b554:	4603      	mov	r3, r0
   2b556:	bf36      	itet	cc
   2b558:	0403      	lslcc	r3, r0, #16
   2b55a:	2000      	movcs	r0, #0
   2b55c:	2010      	movcc	r0, #16
   2b55e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2b562:	bf3c      	itt	cc
   2b564:	021b      	lslcc	r3, r3, #8
   2b566:	3008      	addcc	r0, #8
   2b568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2b56c:	bf3c      	itt	cc
   2b56e:	011b      	lslcc	r3, r3, #4
   2b570:	3004      	addcc	r0, #4
   2b572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2b576:	d303      	bcc.n	2b580 <__hi0bits+0x30>
   2b578:	2b00      	cmp	r3, #0
   2b57a:	db0a      	blt.n	2b592 <__hi0bits+0x42>
   2b57c:	3001      	adds	r0, #1
   2b57e:	4770      	bx	lr
   2b580:	009b      	lsls	r3, r3, #2
   2b582:	d501      	bpl.n	2b588 <__hi0bits+0x38>
   2b584:	3002      	adds	r0, #2
   2b586:	4770      	bx	lr
   2b588:	005b      	lsls	r3, r3, #1
   2b58a:	d501      	bpl.n	2b590 <__hi0bits+0x40>
   2b58c:	3003      	adds	r0, #3
   2b58e:	4770      	bx	lr
   2b590:	2020      	movs	r0, #32
   2b592:	4770      	bx	lr

0002b594 <__lo0bits>:
   2b594:	6803      	ldr	r3, [r0, #0]
   2b596:	4602      	mov	r2, r0
   2b598:	f013 0007 	ands.w	r0, r3, #7
   2b59c:	d00b      	beq.n	2b5b6 <__lo0bits+0x22>
   2b59e:	07d9      	lsls	r1, r3, #31
   2b5a0:	d421      	bmi.n	2b5e6 <__lo0bits+0x52>
   2b5a2:	0798      	lsls	r0, r3, #30
   2b5a4:	bf47      	ittee	mi
   2b5a6:	085b      	lsrmi	r3, r3, #1
   2b5a8:	2001      	movmi	r0, #1
   2b5aa:	089b      	lsrpl	r3, r3, #2
   2b5ac:	2002      	movpl	r0, #2
   2b5ae:	bf4c      	ite	mi
   2b5b0:	6013      	strmi	r3, [r2, #0]
   2b5b2:	6013      	strpl	r3, [r2, #0]
   2b5b4:	4770      	bx	lr
   2b5b6:	b299      	uxth	r1, r3
   2b5b8:	b909      	cbnz	r1, 2b5be <__lo0bits+0x2a>
   2b5ba:	0c1b      	lsrs	r3, r3, #16
   2b5bc:	2010      	movs	r0, #16
   2b5be:	b2d9      	uxtb	r1, r3
   2b5c0:	b909      	cbnz	r1, 2b5c6 <__lo0bits+0x32>
   2b5c2:	3008      	adds	r0, #8
   2b5c4:	0a1b      	lsrs	r3, r3, #8
   2b5c6:	0719      	lsls	r1, r3, #28
   2b5c8:	bf04      	itt	eq
   2b5ca:	091b      	lsreq	r3, r3, #4
   2b5cc:	3004      	addeq	r0, #4
   2b5ce:	0799      	lsls	r1, r3, #30
   2b5d0:	bf04      	itt	eq
   2b5d2:	089b      	lsreq	r3, r3, #2
   2b5d4:	3002      	addeq	r0, #2
   2b5d6:	07d9      	lsls	r1, r3, #31
   2b5d8:	d403      	bmi.n	2b5e2 <__lo0bits+0x4e>
   2b5da:	085b      	lsrs	r3, r3, #1
   2b5dc:	f100 0001 	add.w	r0, r0, #1
   2b5e0:	d003      	beq.n	2b5ea <__lo0bits+0x56>
   2b5e2:	6013      	str	r3, [r2, #0]
   2b5e4:	4770      	bx	lr
   2b5e6:	2000      	movs	r0, #0
   2b5e8:	4770      	bx	lr
   2b5ea:	2020      	movs	r0, #32
   2b5ec:	4770      	bx	lr

0002b5ee <__mcmp>:
   2b5ee:	4603      	mov	r3, r0
   2b5f0:	690a      	ldr	r2, [r1, #16]
   2b5f2:	6900      	ldr	r0, [r0, #16]
   2b5f4:	1a80      	subs	r0, r0, r2
   2b5f6:	b530      	push	{r4, r5, lr}
   2b5f8:	d10e      	bne.n	2b618 <__mcmp+0x2a>
   2b5fa:	3314      	adds	r3, #20
   2b5fc:	3114      	adds	r1, #20
   2b5fe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   2b602:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2b606:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2b60a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2b60e:	4295      	cmp	r5, r2
   2b610:	d003      	beq.n	2b61a <__mcmp+0x2c>
   2b612:	d205      	bcs.n	2b620 <__mcmp+0x32>
   2b614:	f04f 30ff 	mov.w	r0, #4294967295
   2b618:	bd30      	pop	{r4, r5, pc}
   2b61a:	42a3      	cmp	r3, r4
   2b61c:	d3f3      	bcc.n	2b606 <__mcmp+0x18>
   2b61e:	e7fb      	b.n	2b618 <__mcmp+0x2a>
   2b620:	2001      	movs	r0, #1
   2b622:	e7f9      	b.n	2b618 <__mcmp+0x2a>

0002b624 <__ratio>:
   2b624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b628:	b085      	sub	sp, #20
   2b62a:	e9cd 1000 	strd	r1, r0, [sp]
   2b62e:	a902      	add	r1, sp, #8
   2b630:	f7f9 fea8 	bl	25384 <__b2d>
   2b634:	468b      	mov	fp, r1
   2b636:	4606      	mov	r6, r0
   2b638:	460f      	mov	r7, r1
   2b63a:	9800      	ldr	r0, [sp, #0]
   2b63c:	a903      	add	r1, sp, #12
   2b63e:	f7f9 fea1 	bl	25384 <__b2d>
   2b642:	9b01      	ldr	r3, [sp, #4]
   2b644:	4689      	mov	r9, r1
   2b646:	460d      	mov	r5, r1
   2b648:	6919      	ldr	r1, [r3, #16]
   2b64a:	4604      	mov	r4, r0
   2b64c:	9b00      	ldr	r3, [sp, #0]
   2b64e:	4630      	mov	r0, r6
   2b650:	691b      	ldr	r3, [r3, #16]
   2b652:	1ac9      	subs	r1, r1, r3
   2b654:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2b658:	1a9b      	subs	r3, r3, r2
   2b65a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   2b65e:	2b00      	cmp	r3, #0
   2b660:	bfdb      	ittet	le
   2b662:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   2b666:	462a      	movle	r2, r5
   2b668:	463a      	movgt	r2, r7
   2b66a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   2b66e:	bfc8      	it	gt
   2b670:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
   2b674:	4622      	mov	r2, r4
   2b676:	464b      	mov	r3, r9
   2b678:	4659      	mov	r1, fp
   2b67a:	f7dd f853 	bl	8724 <__aeabi_ddiv>
   2b67e:	b005      	add	sp, #20
   2b680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b684 <__copybits>:
   2b684:	3901      	subs	r1, #1
   2b686:	f102 0314 	add.w	r3, r2, #20
   2b68a:	1149      	asrs	r1, r1, #5
   2b68c:	b570      	push	{r4, r5, r6, lr}
   2b68e:	3101      	adds	r1, #1
   2b690:	6914      	ldr	r4, [r2, #16]
   2b692:	1f05      	subs	r5, r0, #4
   2b694:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2b698:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2b69c:	42a3      	cmp	r3, r4
   2b69e:	d30c      	bcc.n	2b6ba <__copybits+0x36>
   2b6a0:	1aa3      	subs	r3, r4, r2
   2b6a2:	3211      	adds	r2, #17
   2b6a4:	3b11      	subs	r3, #17
   2b6a6:	f023 0303 	bic.w	r3, r3, #3
   2b6aa:	42a2      	cmp	r2, r4
   2b6ac:	bf88      	it	hi
   2b6ae:	2300      	movhi	r3, #0
   2b6b0:	4418      	add	r0, r3
   2b6b2:	2300      	movs	r3, #0
   2b6b4:	4288      	cmp	r0, r1
   2b6b6:	d305      	bcc.n	2b6c4 <__copybits+0x40>
   2b6b8:	bd70      	pop	{r4, r5, r6, pc}
   2b6ba:	f853 6b04 	ldr.w	r6, [r3], #4
   2b6be:	f845 6f04 	str.w	r6, [r5, #4]!
   2b6c2:	e7eb      	b.n	2b69c <__copybits+0x18>
   2b6c4:	f840 3b04 	str.w	r3, [r0], #4
   2b6c8:	e7f4      	b.n	2b6b4 <__copybits+0x30>

0002b6ca <__any_on>:
   2b6ca:	f100 0214 	add.w	r2, r0, #20
   2b6ce:	114b      	asrs	r3, r1, #5
   2b6d0:	6900      	ldr	r0, [r0, #16]
   2b6d2:	4298      	cmp	r0, r3
   2b6d4:	b510      	push	{r4, lr}
   2b6d6:	db11      	blt.n	2b6fc <__any_on+0x32>
   2b6d8:	dd0a      	ble.n	2b6f0 <__any_on+0x26>
   2b6da:	f011 011f 	ands.w	r1, r1, #31
   2b6de:	d007      	beq.n	2b6f0 <__any_on+0x26>
   2b6e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   2b6e4:	fa24 f001 	lsr.w	r0, r4, r1
   2b6e8:	fa00 f101 	lsl.w	r1, r0, r1
   2b6ec:	428c      	cmp	r4, r1
   2b6ee:	d10b      	bne.n	2b708 <__any_on+0x3e>
   2b6f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2b6f4:	4293      	cmp	r3, r2
   2b6f6:	d803      	bhi.n	2b700 <__any_on+0x36>
   2b6f8:	2000      	movs	r0, #0
   2b6fa:	bd10      	pop	{r4, pc}
   2b6fc:	4603      	mov	r3, r0
   2b6fe:	e7f7      	b.n	2b6f0 <__any_on+0x26>
   2b700:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b704:	2900      	cmp	r1, #0
   2b706:	d0f5      	beq.n	2b6f4 <__any_on+0x2a>
   2b708:	2001      	movs	r0, #1
   2b70a:	e7f6      	b.n	2b6fa <__any_on+0x30>

0002b70c <__sfputc_r>:
   2b70c:	6893      	ldr	r3, [r2, #8]
   2b70e:	3b01      	subs	r3, #1
   2b710:	2b00      	cmp	r3, #0
   2b712:	6093      	str	r3, [r2, #8]
   2b714:	b410      	push	{r4}
   2b716:	da07      	bge.n	2b728 <__sfputc_r+0x1c>
   2b718:	6994      	ldr	r4, [r2, #24]
   2b71a:	42a3      	cmp	r3, r4
   2b71c:	db01      	blt.n	2b722 <__sfputc_r+0x16>
   2b71e:	290a      	cmp	r1, #10
   2b720:	d102      	bne.n	2b728 <__sfputc_r+0x1c>
   2b722:	bc10      	pop	{r4}
   2b724:	f7f9 bffc 	b.w	25720 <__swbuf_r>
   2b728:	6813      	ldr	r3, [r2, #0]
   2b72a:	1c58      	adds	r0, r3, #1
   2b72c:	6010      	str	r0, [r2, #0]
   2b72e:	4608      	mov	r0, r1
   2b730:	7019      	strb	r1, [r3, #0]
   2b732:	bc10      	pop	{r4}
   2b734:	4770      	bx	lr

0002b736 <__sfputs_r>:
   2b736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b738:	4606      	mov	r6, r0
   2b73a:	460f      	mov	r7, r1
   2b73c:	4614      	mov	r4, r2
   2b73e:	18d5      	adds	r5, r2, r3
   2b740:	42ac      	cmp	r4, r5
   2b742:	d101      	bne.n	2b748 <__sfputs_r+0x12>
   2b744:	2000      	movs	r0, #0
   2b746:	e007      	b.n	2b758 <__sfputs_r+0x22>
   2b748:	463a      	mov	r2, r7
   2b74a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b74e:	4630      	mov	r0, r6
   2b750:	f7ff ffdc 	bl	2b70c <__sfputc_r>
   2b754:	1c43      	adds	r3, r0, #1
   2b756:	d1f3      	bne.n	2b740 <__sfputs_r+0xa>
   2b758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b75a <__sread>:
   2b75a:	b510      	push	{r4, lr}
   2b75c:	460c      	mov	r4, r1
   2b75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b762:	f7fa f94b 	bl	259fc <_read_r>
   2b766:	2800      	cmp	r0, #0
   2b768:	bfab      	itete	ge
   2b76a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2b76c:	89a3      	ldrhlt	r3, [r4, #12]
   2b76e:	181b      	addge	r3, r3, r0
   2b770:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2b774:	bfac      	ite	ge
   2b776:	6563      	strge	r3, [r4, #84]	; 0x54
   2b778:	81a3      	strhlt	r3, [r4, #12]
   2b77a:	bd10      	pop	{r4, pc}

0002b77c <__swrite>:
   2b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b780:	461f      	mov	r7, r3
   2b782:	898b      	ldrh	r3, [r1, #12]
   2b784:	4605      	mov	r5, r0
   2b786:	460c      	mov	r4, r1
   2b788:	05db      	lsls	r3, r3, #23
   2b78a:	4616      	mov	r6, r2
   2b78c:	d505      	bpl.n	2b79a <__swrite+0x1e>
   2b78e:	2302      	movs	r3, #2
   2b790:	2200      	movs	r2, #0
   2b792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b796:	f7fa f8df 	bl	25958 <_lseek_r>
   2b79a:	89a3      	ldrh	r3, [r4, #12]
   2b79c:	4632      	mov	r2, r6
   2b79e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2b7a2:	4628      	mov	r0, r5
   2b7a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2b7a8:	81a3      	strh	r3, [r4, #12]
   2b7aa:	463b      	mov	r3, r7
   2b7ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b7b0:	f7fa b808 	b.w	257c4 <_write_r>

0002b7b4 <__sseek>:
   2b7b4:	b510      	push	{r4, lr}
   2b7b6:	460c      	mov	r4, r1
   2b7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b7bc:	f7fa f8cc 	bl	25958 <_lseek_r>
   2b7c0:	1c43      	adds	r3, r0, #1
   2b7c2:	89a3      	ldrh	r3, [r4, #12]
   2b7c4:	bf15      	itete	ne
   2b7c6:	6560      	strne	r0, [r4, #84]	; 0x54
   2b7c8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2b7cc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2b7d0:	81a3      	strheq	r3, [r4, #12]
   2b7d2:	bf18      	it	ne
   2b7d4:	81a3      	strhne	r3, [r4, #12]
   2b7d6:	bd10      	pop	{r4, pc}

0002b7d8 <__sclose>:
   2b7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b7dc:	f7fa b870 	b.w	258c0 <_close_r>

0002b7e0 <__ascii_wctomb>:
   2b7e0:	4603      	mov	r3, r0
   2b7e2:	4608      	mov	r0, r1
   2b7e4:	b141      	cbz	r1, 2b7f8 <__ascii_wctomb+0x18>
   2b7e6:	2aff      	cmp	r2, #255	; 0xff
   2b7e8:	d904      	bls.n	2b7f4 <__ascii_wctomb+0x14>
   2b7ea:	228a      	movs	r2, #138	; 0x8a
   2b7ec:	f04f 30ff 	mov.w	r0, #4294967295
   2b7f0:	601a      	str	r2, [r3, #0]
   2b7f2:	4770      	bx	lr
   2b7f4:	2001      	movs	r0, #1
   2b7f6:	700a      	strb	r2, [r1, #0]
   2b7f8:	4770      	bx	lr

0002b7fa <abort>:
   2b7fa:	2006      	movs	r0, #6
   2b7fc:	b508      	push	{r3, lr}
   2b7fe:	f7fa f90f 	bl	25a20 <raise>
   2b802:	2001      	movs	r0, #1
   2b804:	f7e6 fb48 	bl	11e98 <_exit>

0002b808 <__sflush_r>:
   2b808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2b80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b80e:	0717      	lsls	r7, r2, #28
   2b810:	4605      	mov	r5, r0
   2b812:	460c      	mov	r4, r1
   2b814:	d456      	bmi.n	2b8c4 <__sflush_r+0xbc>
   2b816:	684b      	ldr	r3, [r1, #4]
   2b818:	2b00      	cmp	r3, #0
   2b81a:	dc02      	bgt.n	2b822 <__sflush_r+0x1a>
   2b81c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2b81e:	2b00      	cmp	r3, #0
   2b820:	dd3d      	ble.n	2b89e <__sflush_r+0x96>
   2b822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2b824:	2e00      	cmp	r6, #0
   2b826:	d03a      	beq.n	2b89e <__sflush_r+0x96>
   2b828:	2300      	movs	r3, #0
   2b82a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2b82e:	682f      	ldr	r7, [r5, #0]
   2b830:	6a21      	ldr	r1, [r4, #32]
   2b832:	602b      	str	r3, [r5, #0]
   2b834:	d025      	beq.n	2b882 <__sflush_r+0x7a>
   2b836:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2b838:	89a3      	ldrh	r3, [r4, #12]
   2b83a:	0758      	lsls	r0, r3, #29
   2b83c:	d505      	bpl.n	2b84a <__sflush_r+0x42>
   2b83e:	6863      	ldr	r3, [r4, #4]
   2b840:	1ad2      	subs	r2, r2, r3
   2b842:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b844:	b10b      	cbz	r3, 2b84a <__sflush_r+0x42>
   2b846:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2b848:	1ad2      	subs	r2, r2, r3
   2b84a:	6a21      	ldr	r1, [r4, #32]
   2b84c:	2300      	movs	r3, #0
   2b84e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2b850:	4628      	mov	r0, r5
   2b852:	47b0      	blx	r6
   2b854:	1c41      	adds	r1, r0, #1
   2b856:	d024      	beq.n	2b8a2 <__sflush_r+0x9a>
   2b858:	2300      	movs	r3, #0
   2b85a:	6063      	str	r3, [r4, #4]
   2b85c:	6923      	ldr	r3, [r4, #16]
   2b85e:	6023      	str	r3, [r4, #0]
   2b860:	89a3      	ldrh	r3, [r4, #12]
   2b862:	04da      	lsls	r2, r3, #19
   2b864:	d500      	bpl.n	2b868 <__sflush_r+0x60>
   2b866:	6560      	str	r0, [r4, #84]	; 0x54
   2b868:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2b86a:	602f      	str	r7, [r5, #0]
   2b86c:	b1b9      	cbz	r1, 2b89e <__sflush_r+0x96>
   2b86e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b872:	4299      	cmp	r1, r3
   2b874:	d002      	beq.n	2b87c <__sflush_r+0x74>
   2b876:	4628      	mov	r0, r5
   2b878:	f7f8 fab4 	bl	23de4 <_free_r>
   2b87c:	2300      	movs	r3, #0
   2b87e:	6363      	str	r3, [r4, #52]	; 0x34
   2b880:	e00d      	b.n	2b89e <__sflush_r+0x96>
   2b882:	2301      	movs	r3, #1
   2b884:	4628      	mov	r0, r5
   2b886:	47b0      	blx	r6
   2b888:	1c46      	adds	r6, r0, #1
   2b88a:	4602      	mov	r2, r0
   2b88c:	d1d4      	bne.n	2b838 <__sflush_r+0x30>
   2b88e:	682b      	ldr	r3, [r5, #0]
   2b890:	2b00      	cmp	r3, #0
   2b892:	d0d1      	beq.n	2b838 <__sflush_r+0x30>
   2b894:	2b1d      	cmp	r3, #29
   2b896:	d001      	beq.n	2b89c <__sflush_r+0x94>
   2b898:	2b16      	cmp	r3, #22
   2b89a:	d129      	bne.n	2b8f0 <__sflush_r+0xe8>
   2b89c:	602f      	str	r7, [r5, #0]
   2b89e:	2000      	movs	r0, #0
   2b8a0:	e02d      	b.n	2b8fe <__sflush_r+0xf6>
   2b8a2:	682a      	ldr	r2, [r5, #0]
   2b8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2b8a8:	b142      	cbz	r2, 2b8bc <__sflush_r+0xb4>
   2b8aa:	2a1d      	cmp	r2, #29
   2b8ac:	d001      	beq.n	2b8b2 <__sflush_r+0xaa>
   2b8ae:	2a16      	cmp	r2, #22
   2b8b0:	d120      	bne.n	2b8f4 <__sflush_r+0xec>
   2b8b2:	2300      	movs	r3, #0
   2b8b4:	6063      	str	r3, [r4, #4]
   2b8b6:	6923      	ldr	r3, [r4, #16]
   2b8b8:	6023      	str	r3, [r4, #0]
   2b8ba:	e7d5      	b.n	2b868 <__sflush_r+0x60>
   2b8bc:	6062      	str	r2, [r4, #4]
   2b8be:	6922      	ldr	r2, [r4, #16]
   2b8c0:	6022      	str	r2, [r4, #0]
   2b8c2:	e7ce      	b.n	2b862 <__sflush_r+0x5a>
   2b8c4:	690f      	ldr	r7, [r1, #16]
   2b8c6:	2f00      	cmp	r7, #0
   2b8c8:	d0e9      	beq.n	2b89e <__sflush_r+0x96>
   2b8ca:	0793      	lsls	r3, r2, #30
   2b8cc:	680e      	ldr	r6, [r1, #0]
   2b8ce:	600f      	str	r7, [r1, #0]
   2b8d0:	bf0c      	ite	eq
   2b8d2:	694b      	ldreq	r3, [r1, #20]
   2b8d4:	2300      	movne	r3, #0
   2b8d6:	1bf6      	subs	r6, r6, r7
   2b8d8:	608b      	str	r3, [r1, #8]
   2b8da:	2e00      	cmp	r6, #0
   2b8dc:	dddf      	ble.n	2b89e <__sflush_r+0x96>
   2b8de:	4633      	mov	r3, r6
   2b8e0:	463a      	mov	r2, r7
   2b8e2:	6a21      	ldr	r1, [r4, #32]
   2b8e4:	4628      	mov	r0, r5
   2b8e6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   2b8ea:	47e0      	blx	ip
   2b8ec:	2800      	cmp	r0, #0
   2b8ee:	dc07      	bgt.n	2b900 <__sflush_r+0xf8>
   2b8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2b8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b8f8:	f04f 30ff 	mov.w	r0, #4294967295
   2b8fc:	81a3      	strh	r3, [r4, #12]
   2b8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b900:	4407      	add	r7, r0
   2b902:	1a36      	subs	r6, r6, r0
   2b904:	e7e9      	b.n	2b8da <__sflush_r+0xd2>

0002b906 <__swhatbuf_r>:
   2b906:	b570      	push	{r4, r5, r6, lr}
   2b908:	460c      	mov	r4, r1
   2b90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b90e:	b096      	sub	sp, #88	; 0x58
   2b910:	4615      	mov	r5, r2
   2b912:	2900      	cmp	r1, #0
   2b914:	461e      	mov	r6, r3
   2b916:	da0c      	bge.n	2b932 <__swhatbuf_r+0x2c>
   2b918:	89a3      	ldrh	r3, [r4, #12]
   2b91a:	2100      	movs	r1, #0
   2b91c:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b920:	bf14      	ite	ne
   2b922:	2340      	movne	r3, #64	; 0x40
   2b924:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   2b928:	2000      	movs	r0, #0
   2b92a:	6031      	str	r1, [r6, #0]
   2b92c:	602b      	str	r3, [r5, #0]
   2b92e:	b016      	add	sp, #88	; 0x58
   2b930:	bd70      	pop	{r4, r5, r6, pc}
   2b932:	466a      	mov	r2, sp
   2b934:	f7fa f88e 	bl	25a54 <_fstat_r>
   2b938:	2800      	cmp	r0, #0
   2b93a:	dbed      	blt.n	2b918 <__swhatbuf_r+0x12>
   2b93c:	9901      	ldr	r1, [sp, #4]
   2b93e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   2b942:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   2b946:	4259      	negs	r1, r3
   2b948:	4159      	adcs	r1, r3
   2b94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2b94e:	e7eb      	b.n	2b928 <__swhatbuf_r+0x22>

0002b950 <_raise_r>:
   2b950:	291f      	cmp	r1, #31
   2b952:	b538      	push	{r3, r4, r5, lr}
   2b954:	4605      	mov	r5, r0
   2b956:	460c      	mov	r4, r1
   2b958:	d904      	bls.n	2b964 <_raise_r+0x14>
   2b95a:	2316      	movs	r3, #22
   2b95c:	6003      	str	r3, [r0, #0]
   2b95e:	f04f 30ff 	mov.w	r0, #4294967295
   2b962:	bd38      	pop	{r3, r4, r5, pc}
   2b964:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2b966:	b112      	cbz	r2, 2b96e <_raise_r+0x1e>
   2b968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2b96c:	b94b      	cbnz	r3, 2b982 <_raise_r+0x32>
   2b96e:	4628      	mov	r0, r5
   2b970:	f000 f816 	bl	2b9a0 <_getpid_r>
   2b974:	4622      	mov	r2, r4
   2b976:	4601      	mov	r1, r0
   2b978:	4628      	mov	r0, r5
   2b97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b97e:	f7fa b857 	b.w	25a30 <_kill_r>
   2b982:	2b01      	cmp	r3, #1
   2b984:	d00a      	beq.n	2b99c <_raise_r+0x4c>
   2b986:	1c59      	adds	r1, r3, #1
   2b988:	d103      	bne.n	2b992 <_raise_r+0x42>
   2b98a:	2316      	movs	r3, #22
   2b98c:	6003      	str	r3, [r0, #0]
   2b98e:	2001      	movs	r0, #1
   2b990:	e7e7      	b.n	2b962 <_raise_r+0x12>
   2b992:	2100      	movs	r1, #0
   2b994:	4620      	mov	r0, r4
   2b996:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   2b99a:	4798      	blx	r3
   2b99c:	2000      	movs	r0, #0
   2b99e:	e7e0      	b.n	2b962 <_raise_r+0x12>

0002b9a0 <_getpid_r>:
   2b9a0:	f7fb bd0b 	b.w	273ba <_getpid>
